(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort octet 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))
(declare-fun user_eq4 (octet octet) Bool)
(declare-const dummy4 octet)
(declare-datatypes () ((octet__ref (mk_octet__ref (octet__content octet)))))
(define-fun octet__ref___projection ((a octet__ref)) octet (octet__content a))
(declare-fun to_rep2 (octet) (_ BitVec 8))
(declare-fun of_rep2 ((_ BitVec 8)) octet)
(assert (forall ((x octet)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int3 ((x octet)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x octet)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort octet_array_index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (octet_array_index octet_array_index) Bool)
(declare-const dummy5 octet_array_index)
(declare-datatypes () ((octet_array_index__ref (mk_octet_array_index__ref (octet_array_index__content octet_array_index)))))
(define-fun octet_array_index__ref___projection ((a octet_array_index__ref)) octet_array_index (octet_array_index__content a))
(define-fun dynamic_invariant ((temp___expr_172 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 0 65535)) (in_range4 temp___expr_172)))
(declare-sort octet_array_extended_index 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 1) x) (<= x 65535)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (octet_array_extended_index octet_array_extended_index) Bool)
(declare-const dummy6 octet_array_extended_index)
(declare-datatypes () ((octet_array_extended_index__ref (mk_octet_array_extended_index__ref (octet_array_extended_index__content octet_array_extended_index)))))
(define-fun octet_array_extended_index__ref___projection ((a octet_array_extended_index__ref)) octet_array_extended_index (octet_array_extended_index__content a))
(define-fun dynamic_invariant1 ((temp___expr_178 Int) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool)) Bool (=> (or (= temp___is_init_175 true) (<= (- 1) 65535)) (in_range5 temp___expr_178)))
(declare-sort octet_array_count 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 65536)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (octet_array_count octet_array_count) Bool)
(declare-const dummy7 octet_array_count)
(declare-datatypes () ((octet_array_count__ref (mk_octet_array_count__ref (octet_array_count__content octet_array_count)))))
(define-fun octet_array_count__ref___projection ((a octet_array_count__ref)) octet_array_count (octet_array_count__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int octet))))))
(declare-fun slide1 ((Array Int octet) Int Int) (Array Int octet))
(assert (forall ((a (Array Int octet))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int octet))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int octet) Int Int (Array Int octet) Int Int) (Array Int octet))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (octet Int) (Array Int octet))
(assert (forall ((v octet)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq2 ((a (Array Int octet)) (a__first Int) (a__last Int) (b (Array Int octet)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep2 (select a temp___idx_132)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep2 (select a temp___idx_132)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare1 ((Array Int octet) Int Int (Array Int octet) Int Int) Int)
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq2 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq2 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep2 (select a (+ j 1))) (to_rep2 (select b (+ i 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range4 low) (in_range4 high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int octet)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int octet) (elts1 a))
(define-fun of_array1 ((a (Array Int octet)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int octet)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int octet)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int octet)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int octet))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int octet))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int octet))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq8 (us_t1 us_t1) Bool)
(declare-const dummy8 us_t1)
(declare-datatypes () ((octet_array__ref (mk_octet_array__ref (octet_array__content us_t1)))))
(define-fun octet_array__ref___projection ((a octet_array__ref)) us_t1 (octet_array__content a))
(define-fun dynamic_invariant2 ((temp___expr_190 us_t1) (temp___is_init_187 Bool) (temp___skip_constant_188 Bool) (temp___do_toplevel_189 Bool)) Bool (=> (not (= temp___skip_constant_188 true)) (dynamic_property1 0 65535 (first3 temp___expr_190) (last3 temp___expr_190))))
(declare-fun length_with_padding (Int) Int)
(declare-fun length_with_padding__function_guard (Int Int) Bool)
(define-fun dynamic_invariant3 ((temp___expr_184 Int) (temp___is_init_181 Bool) (temp___skip_constant_182 Bool) (temp___do_toplevel_183 Bool)) Bool (=> (or (= temp___is_init_181 true) (<= 0 65536)) (in_range6 temp___expr_184)))
(assert (forall ((length2 Int)) (! (=> (dynamic_invariant3 length2 true true true) (dynamic_invariant3 (length_with_padding length2) true false true)) :pattern ((length_with_padding length2)))))
(assert (forall ((length2 Int)) (! (=> (dynamic_invariant3 length2 true true true) (= (length_with_padding length2) (+ length2 (ite (= (mod1 length2 4) 0) 0 (- 4 (mod1 length2 4)))))) :pattern ((length_with_padding length2)))))
(declare-const data us_t1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const position Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const value__first integer)
(declare-const value__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (integer integer) Bool)
(declare-const dummy9 integer)
(declare-datatypes () ((t36b__ref (mk_t36b__ref (t36b__content integer)))))
(define-fun t36b__ref___projection ((a t36b__ref)) integer (t36b__content a))
(declare-sort t2 0)
(declare-fun first4 (t2) integer)
(declare-fun last4 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first4 (mk2 f l))) f) (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property2 range_first range_last low) (dynamic_property2 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int character)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int character) (elts2 a))
(define-fun of_array2 ((a (Array Int character)) (f Int) (l Int)) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))
(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))
(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a)) (+ (- (last5 a) (first5 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int character)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int character)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int character)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq4 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first4 (rt2 x))) (to_rep1 (last4 (rt2 x))) (elts2 y) (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))
(declare-fun user_eq10 (us_t2 us_t2) Bool)
(declare-const dummy10 us_t2)
(declare-datatypes () ((t37b__ref (mk_t37b__ref (t37b__content us_t2)))))
(define-fun t37b__ref___projection ((a t37b__ref)) us_t2 (t37b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp___542 (Int Int Int) us_t2)
(assert (forall ((temp___544 Int) (temp___545 Int) (temp___546 Int)) (let ((temp___543 (temp___542 temp___544 temp___545 temp___546))) (and (=> (dynamic_property 1 2147483647 temp___545 temp___546) (and (= (first5 temp___543) temp___545) (= (last5 temp___543) temp___546))) (forall ((temp___547 Int)) (= (select (to_array2 temp___543) temp___547) (of_rep temp___544)))))))
(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant5 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(define-fun dynamic_invariant6 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant8 ((temp___expr_166 (_ BitVec 8)) (temp___is_init_163 Bool) (temp___skip_constant_164 Bool) (temp___do_toplevel_165 Bool)) Bool true)
(declare-const value (Array Int character))
(declare-const last6 Int)
(declare-const i Int)
(declare-const temp___549 (Array Int character))
(declare-const temp___5491 t2)
(declare-const temp___550 (Array Int character))
(declare-const temp___5501 t)
(declare-const temp___551 (Array Int character))
(declare-const temp___5511 t)
(declare-const o (Array Int character))
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___557 Int)
(declare-const temp___554 (Array Int character))
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const temp___552 Int)
(declare-const o7 Int)
(declare-const o8 octet)
(declare-const o9 (_ BitVec 8))
(declare-const o10 Int)
(declare-const o11 character)
(declare-const o12 Int)
(declare-const o13 (Array Int character))
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const result (Array Int character))
(declare-const value1 (Array Int character))
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const value2 (Array Int character))
(declare-const i2 Int)
(declare-const result2 (Array Int character))
(declare-const value3 (Array Int character))
(declare-const value4 (Array Int character))
(declare-const i3 Int)
(declare-const value5 (Array Int character))
(declare-const i4 Int)
(declare-const value6 (Array Int character))
(declare-const i5 Int)
(declare-const value7 (Array Int character))
(declare-const i6 Int)
(assert (dynamic_invariant2 data true false true))
(assert (in_range4 position))
(assert (dynamic_property 1 2147483647 (to_rep1 value__first) (to_rep1 value__last)))
(assert (=> (<= (- 1) 65535) (in_range5 last6)))
(assert (and (= (mod1 position 4) 0) (and (< 0 (length1 data)) (and (= (mod1 (length1 data) 4) 0) (and (<= (ite (<= (to_rep1 value__first) (to_rep1 value__last)) (+ (- (to_rep1 value__last) (to_rep1 value__first)) 1) 0) 65536) (and (and (<= (to_rep1 (first2 (rt1 data))) position) (<= position (to_rep1 (last2 (rt1 data))))) (<= position (- (to_rep1 (last2 (rt1 data))) (- (length_with_padding (ite (<= (to_rep1 value__first) (to_rep1 value__last)) (+ (- (to_rep1 value__last) (to_rep1 value__first)) 1) 0)) 1)))))))))
(assert (= (to_rep1 (first4 (rt2 (temp___542 32 (to_rep1 value__first) (to_rep1 value__last))))) (to_rep1 value__first)))
(assert (= (to_rep1 (last4 (rt2 (temp___542 32 (to_rep1 value__first) (to_rep1 value__last))))) (to_rep1 value__last)))
(assert (= (mk___t2 temp___549 temp___5491) (temp___542 32 (to_rep1 value__first) (to_rep1 value__last))))
(assert (= temp___549 temp___550))
(assert (= (mk (to_rep1 (first4 temp___5491)) (to_rep1 (last4 temp___5491))) temp___5501))
(assert (= (ite (<= (to_rep1 (first temp___5501)) (to_rep1 (last temp___5501))) (+ (- (to_rep1 (last temp___5501)) (to_rep1 (first temp___5501))) 1) 0) (ite (<= (to_rep1 value__first) (to_rep1 value__last)) (+ (- (to_rep1 value__last) (to_rep1 value__first)) 1) 0)))
(assert (= (mk___t temp___551 temp___5511) (mk___t temp___550 temp___5501)))
(assert (= o (slide temp___551 (to_rep1 (first temp___5511)) (to_rep1 value__first))))
(assert (= (mk_map__ref result) (mk_map__ref value)))
(assert (= value1 o))
(assert (=> (<= (to_rep1 value__first) (to_rep1 value__last)) (= o1 (+ (- (to_rep1 value__last) (to_rep1 value__first)) 1))))
(assert (=> (not (<= (to_rep1 value__first) (to_rep1 value__last))) (= o1 0)))
(assert (and (= o2 o1) (in_range1 o1)))
(assert (= o3 (+ position o2)))
(assert (and (= o4 o3) (in_range1 o3)))
(assert (= temp___557 (- o4 1)))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 position))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= temp___554 value1)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (and (<= position i2) (<= i2 (- (+ position (ite (<= (to_rep1 value__first) (to_rep1 value__last)) (+ (- (to_rep1 value__last) (to_rep1 value__first)) 1) 0)) 1)))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (and (<= (to_rep1 (first2 (rt1 data))) i2) (<= i2 (to_rep1 (last2 (rt1 data)))))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= o7 i2)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= o8 (select (elts1 data) o7))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= o9 (to_rep2 o8))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= o10 (bv2nat o9))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= (to_rep o11) o10)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (and (= o5 (- i2 position)) (in_range1 (- i2 position)))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= o6 (+ (to_rep1 value__first) o5))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (and (= temp___552 o6) (in_range1 o6))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (and (<= (to_rep1 value__first) temp___552) (<= temp___552 (to_rep1 value__last)))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= o12 temp___552)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= o13 (store value2 o12 o11))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= value2 result2)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= value3 o13)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= i2 temp___557)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= i2 i3)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= value3 value4)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= i4 i2)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= value5 value3)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= (mk_int__ref i5) (mk_int__ref i3))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= (mk_map__ref value6) (mk_map__ref value4))))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= i6 i4)))
(assert (=> (and (<= position i1) (<= i1 temp___557)) (= value7 value5)))
(assert (=> (not (and (<= position i1) (<= i1 temp___557))) (= i1 i5)))
(assert (=> (not (and (<= position i1) (<= i1 temp___557))) (= value1 value6)))
(assert (=> (not (and (<= position i1) (<= i1 temp___557))) (= i6 i1)))
(assert (=> (not (and (<= position i1) (<= i1 temp___557))) (= value7 value1)))
(assert (=> (<= (to_rep1 value__first) (to_rep1 value__last)) (= o14 (+ (- (to_rep1 value__last) (to_rep1 value__first)) 1))))
(assert (=> (not (<= (to_rep1 value__first) (to_rep1 value__last))) (= o14 0)))
(assert (and (= o15 o14) (in_range6 o14)))
(assert (and (= o16 (length_with_padding o15)) (and (in_range6 o16) (= o16 (+ o15 (ite (= (mod1 o15 4) 0) 0 (- 4 (mod1 o15 4))))))))
(assert (= o17 (- o16 1)))
(assert (= o18 (+ position o17)))
(assert (not (in_range5 o18)))
(check-sat)
(exit)
