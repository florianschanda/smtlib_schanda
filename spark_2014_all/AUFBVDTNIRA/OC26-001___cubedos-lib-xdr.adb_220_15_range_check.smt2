(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort xdr_unsigned_hyper 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (xdr_unsigned_hyper xdr_unsigned_hyper) Bool)
(declare-const dummy xdr_unsigned_hyper)
(declare-datatypes () ((xdr_unsigned_hyper__ref (mk_xdr_unsigned_hyper__ref (xdr_unsigned_hyper__content xdr_unsigned_hyper)))))
(define-fun xdr_unsigned_hyper__ref___projection ((a xdr_unsigned_hyper__ref)) xdr_unsigned_hyper (xdr_unsigned_hyper__content a))
(define-fun dynamic_invariant ((temp___expr_160 (_ BitVec 64)) (temp___is_init_157 Bool) (temp___skip_constant_158 Bool) (temp___do_toplevel_159 Bool)) Bool true)
(declare-sort octet 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))
(declare-fun user_eq1 (octet octet) Bool)
(declare-const dummy1 octet)
(declare-datatypes () ((octet__ref (mk_octet__ref (octet__content octet)))))
(define-fun octet__ref___projection ((a octet__ref)) octet (octet__content a))
(declare-fun to_rep (octet) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) octet)
(assert (forall ((x octet)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int4 ((x octet)) Int (bv2nat (to_rep x)))
(assert (forall ((x octet)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort octet_array_index 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (octet_array_index octet_array_index) Bool)
(declare-const dummy2 octet_array_index)
(declare-datatypes () ((octet_array_index__ref (mk_octet_array_index__ref (octet_array_index__content octet_array_index)))))
(define-fun octet_array_index__ref___projection ((a octet_array_index__ref)) octet_array_index (octet_array_index__content a))
(define-fun dynamic_invariant1 ((temp___expr_172 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 0 65535)) (in_range1 temp___expr_172)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int octet))))))
(declare-fun slide ((Array Int octet) Int Int) (Array Int octet))
(assert (forall ((a (Array Int octet))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int octet))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int octet) Int Int (Array Int octet) Int Int) (Array Int octet))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (octet Int) (Array Int octet))
(assert (forall ((v octet)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int octet)) (a__first Int) (a__last Int) (b (Array Int octet)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int octet) Int Int (Array Int octet) Int Int) Int)
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int octet)) (b (Array Int octet))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int octet)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))
(define-fun of_array ((a (Array Int octet)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int octet)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int octet)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int octet)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int octet))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int octet))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int octet))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((octet_array__ref (mk_octet_array__ref (octet_array__content us_t)))))
(define-fun octet_array__ref___projection ((a octet_array__ref)) us_t (octet_array__content a))
(define-fun dynamic_invariant2 ((temp___expr_190 us_t) (temp___is_init_187 Bool) (temp___skip_constant_188 Bool) (temp___do_toplevel_189 Bool)) Bool (=> (not (= temp___skip_constant_188 true)) (dynamic_property 0 65535 (first1 temp___expr_190) (last1 temp___expr_190))))
(declare-const data us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const position Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_15)))
(define-fun dynamic_invariant4 ((temp___expr_166 (_ BitVec 8)) (temp___is_init_163 Bool) (temp___skip_constant_164 Bool) (temp___do_toplevel_165 Bool)) Bool true)
(declare-const value (_ BitVec 64))
(declare-const last2 Int)
(declare-const temporary_1 (_ BitVec 64))
(declare-const temporary_2 (_ BitVec 64))
(declare-const i Int)
(declare-const o Int)
(declare-const o1 octet)
(declare-const o2 (_ BitVec 8))
(declare-const o3 (_ BitVec 64))
(declare-const o4 Int)
(declare-const o5 octet)
(declare-const o6 (_ BitVec 8))
(declare-const o7 (_ BitVec 64))
(declare-const o8 (_ BitVec 64))
(declare-const o9 Int)
(declare-const o10 octet)
(declare-const o11 (_ BitVec 8))
(declare-const o12 (_ BitVec 64))
(declare-const o13 (_ BitVec 64))
(declare-const o14 Int)
(declare-const o15 octet)
(declare-const o16 (_ BitVec 8))
(declare-const o17 (_ BitVec 64))
(declare-const o18 (_ BitVec 64))
(declare-const o19 Int)
(declare-const o20 octet)
(declare-const o21 (_ BitVec 8))
(declare-const o22 (_ BitVec 64))
(declare-const o23 (_ BitVec 64))
(declare-const o24 Int)
(declare-const o25 octet)
(declare-const o26 (_ BitVec 8))
(declare-const o27 (_ BitVec 64))
(declare-const o28 (_ BitVec 64))
(declare-const o29 Int)
(declare-const o30 octet)
(declare-const o31 (_ BitVec 8))
(declare-const o32 (_ BitVec 64))
(declare-const o33 (_ BitVec 64))
(declare-const o34 Int)
(declare-const o35 octet)
(declare-const o36 (_ BitVec 8))
(declare-const o37 (_ BitVec 64))
(declare-const o38 (_ BitVec 64))
(declare-const o39 Int)
(declare-const result (_ BitVec 64))
(declare-const temporary_11 (_ BitVec 64))
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const result2 (_ BitVec 64))
(declare-const temporary_21 (_ BitVec 64))
(declare-const result3 (_ BitVec 64))
(declare-const temporary_22 (_ BitVec 64))
(declare-const result4 (_ BitVec 64))
(declare-const value1 (_ BitVec 64))
(declare-const result5 (_ BitVec 64))
(declare-const temporary_12 (_ BitVec 64))
(declare-const result6 Int)
(declare-const i2 Int)
(declare-const result7 (_ BitVec 64))
(declare-const temporary_23 (_ BitVec 64))
(declare-const result8 (_ BitVec 64))
(declare-const temporary_24 (_ BitVec 64))
(declare-const result9 (_ BitVec 64))
(declare-const value2 (_ BitVec 64))
(declare-const result10 (_ BitVec 64))
(declare-const temporary_13 (_ BitVec 64))
(declare-const result11 Int)
(declare-const i3 Int)
(declare-const result12 (_ BitVec 64))
(declare-const temporary_25 (_ BitVec 64))
(declare-const result13 (_ BitVec 64))
(declare-const temporary_26 (_ BitVec 64))
(declare-const result14 (_ BitVec 64))
(declare-const value3 (_ BitVec 64))
(declare-const result15 (_ BitVec 64))
(declare-const temporary_14 (_ BitVec 64))
(declare-const result16 int__ref)
(declare-const i4 Int)
(declare-const result17 t__ref1)
(declare-const temporary_27 (_ BitVec 64))
(declare-const result18 t__ref1)
(declare-const temporary_28 (_ BitVec 64))
(declare-const result19 t__ref1)
(declare-const value4 (_ BitVec 64))
(declare-const result20 t__ref1)
(declare-const temporary_15 (_ BitVec 64))
(declare-const result21 int__ref)
(declare-const i5 Int)
(declare-const result22 t__ref1)
(declare-const temporary_29 (_ BitVec 64))
(declare-const result23 t__ref1)
(declare-const temporary_210 (_ BitVec 64))
(declare-const result24 t__ref1)
(declare-const value5 (_ BitVec 64))
(declare-const result25 t__ref1)
(declare-const temporary_16 (_ BitVec 64))
(declare-const result26 int__ref)
(declare-const i6 Int)
(declare-const result27 t__ref1)
(declare-const temporary_211 (_ BitVec 64))
(declare-const result28 t__ref1)
(declare-const temporary_212 (_ BitVec 64))
(declare-const result29 t__ref1)
(declare-const value6 (_ BitVec 64))
(declare-const result30 t__ref1)
(declare-const temporary_17 (_ BitVec 64))
(declare-const result31 int__ref)
(declare-const i7 Int)
(declare-const result32 t__ref1)
(declare-const temporary_213 (_ BitVec 64))
(declare-const result33 t__ref1)
(declare-const temporary_214 (_ BitVec 64))
(declare-const result34 t__ref1)
(declare-const value7 (_ BitVec 64))
(declare-const result35 t__ref1)
(declare-const temporary_18 (_ BitVec 64))
(declare-const result36 int__ref)
(declare-const last3 Int)
(declare-const value8 t__ref1)
(declare-const last4 int__ref)
(declare-const temporary_19 t__ref1)
(declare-const temporary_215 t__ref1)
(declare-const i8 int__ref)
(declare-const value9 (_ BitVec 64))
(declare-const last5 Int)
(declare-const temporary_110 (_ BitVec 64))
(declare-const temporary_216 (_ BitVec 64))
(declare-const i9 Int)
(assert (dynamic_invariant2 data true false true))
(assert (in_range1 position))
(assert true)
(assert (=> (<= 0 65535) (in_range1 last2)))
(assert (and (and (and (= (mod1 position 4) 0) (= (mod1 (length data) 4) 0)) (and (<= (to_rep1 (first (rt data))) position) (<= position (to_rep1 (last (rt data)))))) (<= (+ position 7) (to_rep1 (last (rt data))))))
(assert (and (<= (to_rep1 (first (rt data))) position) (<= position (to_rep1 (last (rt data))))))
(assert (= o position))
(assert (= o1 (select (elts data) o)))
(assert (= o2 (to_rep o1)))
(assert (= o3 ((_ zero_extend 56) o2)))
(assert (= (mk_t__ref1 result) (mk_t__ref1 temporary_1)))
(assert (= temporary_11 o3))
(assert true)
(assert true)
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (= (mk_t__ref1 result2) (mk_t__ref1 temporary_2)))
(assert (= temporary_21 (bvmul temporary_11 ((_ int2bv 64) 256))))
(assert (and (<= (to_rep1 (first (rt data))) (+ position i1)) (<= (+ position i1) (to_rep1 (last (rt data))))))
(assert (= o4 (+ position i1)))
(assert (= o5 (select (elts data) o4)))
(assert (= o6 (to_rep o5)))
(assert (= o7 ((_ zero_extend 56) o6)))
(assert (= o8 (bvadd temporary_21 o7)))
(assert (= temporary_21 result3))
(assert (= temporary_22 o8))
(assert (= (mk_t__ref1 result4) (mk_t__ref1 value)))
(assert (= value1 temporary_22))
(assert (= temporary_11 result5))
(assert (= temporary_12 value1))
(assert (= i1 result6))
(assert (= i2 2))
(assert (= temporary_22 result7))
(assert (= temporary_23 (bvmul temporary_12 ((_ int2bv 64) 256))))
(assert (and (<= (to_rep1 (first (rt data))) (+ position i2)) (<= (+ position i2) (to_rep1 (last (rt data))))))
(assert (= o9 (+ position i2)))
(assert (= o10 (select (elts data) o9)))
(assert (= o11 (to_rep o10)))
(assert (= o12 ((_ zero_extend 56) o11)))
(assert (= o13 (bvadd temporary_23 o12)))
(assert (= temporary_23 result8))
(assert (= temporary_24 o13))
(assert (= value1 result9))
(assert (= value2 temporary_24))
(assert (= temporary_12 result10))
(assert (= temporary_13 value2))
(assert (= i2 result11))
(assert (= i3 3))
(assert (= temporary_24 result12))
(assert (= temporary_25 (bvmul temporary_13 ((_ int2bv 64) 256))))
(assert (and (<= (to_rep1 (first (rt data))) (+ position i3)) (<= (+ position i3) (to_rep1 (last (rt data))))))
(assert (= o14 (+ position i3)))
(assert (= o15 (select (elts data) o14)))
(assert (= o16 (to_rep o15)))
(assert (= o17 ((_ zero_extend 56) o16)))
(assert (= o18 (bvadd temporary_25 o17)))
(assert (= temporary_25 result13))
(assert (= temporary_26 o18))
(assert (= value2 result14))
(assert (= value3 temporary_26))
(assert (= temporary_13 result15))
(assert (= temporary_14 value3))
(assert (= result16 (mk_int__ref i3)))
(assert (= i4 4))
(assert (= result17 (mk_t__ref1 temporary_26)))
(assert (= temporary_27 (bvmul temporary_14 ((_ int2bv 64) 256))))
(assert (and (<= (to_rep1 (first (rt data))) (+ position i4)) (<= (+ position i4) (to_rep1 (last (rt data))))))
(assert (= o19 (+ position i4)))
(assert (= o20 (select (elts data) o19)))
(assert (= o21 (to_rep o20)))
(assert (= o22 ((_ zero_extend 56) o21)))
(assert (= o23 (bvadd temporary_27 o22)))
(assert (= result18 (mk_t__ref1 temporary_27)))
(assert (= temporary_28 o23))
(assert (= result19 (mk_t__ref1 value3)))
(assert (= value4 temporary_28))
(assert (= result20 (mk_t__ref1 temporary_14)))
(assert (= temporary_15 value4))
(assert (= result21 (mk_int__ref i4)))
(assert (= i5 5))
(assert (= result22 (mk_t__ref1 temporary_28)))
(assert (= temporary_29 (bvmul temporary_15 ((_ int2bv 64) 256))))
(assert (and (<= (to_rep1 (first (rt data))) (+ position i5)) (<= (+ position i5) (to_rep1 (last (rt data))))))
(assert (= o24 (+ position i5)))
(assert (= o25 (select (elts data) o24)))
(assert (= o26 (to_rep o25)))
(assert (= o27 ((_ zero_extend 56) o26)))
(assert (= o28 (bvadd temporary_29 o27)))
(assert (= result23 (mk_t__ref1 temporary_29)))
(assert (= temporary_210 o28))
(assert (= result24 (mk_t__ref1 value4)))
(assert (= value5 temporary_210))
(assert (= result25 (mk_t__ref1 temporary_15)))
(assert (= temporary_16 value5))
(assert (= result26 (mk_int__ref i5)))
(assert (= i6 6))
(assert (= result27 (mk_t__ref1 temporary_210)))
(assert (= temporary_211 (bvmul temporary_16 ((_ int2bv 64) 256))))
(assert (and (<= (to_rep1 (first (rt data))) (+ position i6)) (<= (+ position i6) (to_rep1 (last (rt data))))))
(assert (= o29 (+ position i6)))
(assert (= o30 (select (elts data) o29)))
(assert (= o31 (to_rep o30)))
(assert (= o32 ((_ zero_extend 56) o31)))
(assert (= o33 (bvadd temporary_211 o32)))
(assert (= result28 (mk_t__ref1 temporary_211)))
(assert (= temporary_212 o33))
(assert (= result29 (mk_t__ref1 value5)))
(assert (= value6 temporary_212))
(assert (= result30 (mk_t__ref1 temporary_16)))
(assert (= temporary_17 value6))
(assert (= result31 (mk_int__ref i6)))
(assert (= i7 7))
(assert (= result32 (mk_t__ref1 temporary_212)))
(assert (= temporary_213 (bvmul temporary_17 ((_ int2bv 64) 256))))
(assert (and (<= (to_rep1 (first (rt data))) (+ position i7)) (<= (+ position i7) (to_rep1 (last (rt data))))))
(assert (= o34 (+ position i7)))
(assert (= o35 (select (elts data) o34)))
(assert (= o36 (to_rep o35)))
(assert (= o37 ((_ zero_extend 56) o36)))
(assert (= o38 (bvadd temporary_213 o37)))
(assert (= result33 (mk_t__ref1 temporary_213)))
(assert (= temporary_214 o38))
(assert (= result34 (mk_t__ref1 value6)))
(assert (= value7 temporary_214))
(assert (= result35 (mk_t__ref1 temporary_17)))
(assert (= temporary_18 value7))
(assert (not (in_range1 (+ position 7))))
(check-sat)
(exit)
