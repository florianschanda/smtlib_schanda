(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort character 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (character character) Bool)
(declare-const dummy character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort packet_length_range 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 8192)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (packet_length_range packet_length_range) Bool)
(declare-const dummy1 packet_length_range)
(declare-datatypes () ((packet_length_range__ref (mk_packet_length_range__ref (packet_length_range__content packet_length_range)))))
(define-fun packet_length_range__ref___projection ((a packet_length_range__ref)) packet_length_range (packet_length_range__content a))
(define-fun dynamic_invariant ((temp___expr_789 Int) (temp___is_init_785 Bool) (temp___skip_constant_786 Bool) (temp___do_toplevel_787 Bool) (temp___do_typ_inv_788 Bool)) Bool (=> (or (= temp___is_init_785 true) (<= 0 8192)) (in_range2 temp___expr_789)))
(declare-sort packet_bytes_range 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 8180)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (packet_bytes_range packet_bytes_range) Bool)
(declare-const dummy2 packet_bytes_range)
(declare-datatypes () ((packet_bytes_range__ref (mk_packet_bytes_range__ref (packet_bytes_range__content packet_bytes_range)))))
(define-fun packet_bytes_range__ref___projection ((a packet_bytes_range__ref)) packet_bytes_range (packet_bytes_range__content a))
(define-fun dynamic_invariant1 ((temp___expr_796 Int) (temp___is_init_792 Bool) (temp___skip_constant_793 Bool) (temp___do_toplevel_794 Bool) (temp___do_typ_inv_795 Bool)) Bool (=> (or (= temp___is_init_792 true) (<= 1 8180)) (in_range3 temp___expr_796)))
(declare-sort byte 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))
(declare-fun user_eq3 (byte byte) Bool)
(declare-const dummy3 byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep1 (byte) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) byte)
(assert (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int2 ((x byte)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x byte)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-sort tunsigned_shortB 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (tunsigned_shortB tunsigned_shortB) Bool)
(declare-const dummy4 tunsigned_shortB)
(declare-datatypes () ((tunsigned_shortB__ref (mk_tunsigned_shortB__ref (tunsigned_shortB__content tunsigned_shortB)))))
(define-fun tunsigned_shortB__ref___projection ((a tunsigned_shortB__ref)) tunsigned_shortB (tunsigned_shortB__content a))
(declare-sort unsigned_short 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (unsigned_short unsigned_short) Bool)
(declare-const dummy5 unsigned_short)
(declare-datatypes () ((unsigned_short__ref (mk_unsigned_short__ref (unsigned_short__content unsigned_short)))))
(define-fun unsigned_short__ref___projection ((a unsigned_short__ref)) unsigned_short (unsigned_short__content a))
(define-fun dynamic_invariant2 ((temp___expr_810 Int) (temp___is_init_806 Bool) (temp___skip_constant_807 Bool) (temp___do_toplevel_808 Bool) (temp___do_typ_inv_809 Bool)) Bool (=> (or (= temp___is_init_806 true) (<= 0 65535)) (in_range5 temp___expr_810)))
(declare-fun to_rep2 (unsigned_short) Int)
(declare-fun of_rep2 (Int) unsigned_short)
(assert (forall ((x unsigned_short)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x unsigned_short)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort query_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (query_type query_type) Bool)
(declare-const dummy6 query_type)
(declare-datatypes () ((query_type__ref (mk_query_type__ref (query_type__content query_type)))))
(define-fun query_type__ref___projection ((a query_type__ref)) query_type (query_type__content a))
(declare-fun to_rep3 (query_type) Int)
(declare-fun of_rep3 (Int) query_type)
(assert (forall ((x query_type)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x query_type)) (! (in_range6 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dns_types__edns_record__root character) (rec__dns_types__edns_record__code query_type) (rec__dns_types__edns_record__payload_size unsigned_short) (rec__dns_types__edns_record__rcode byte) (rec__dns_types__edns_record__version byte) (rec__dns_types__edns_record__ztop byte) (rec__dns_types__edns_record__zbottom byte) (rec__dns_types__edns_record__rdlen unsigned_short)))))
(define-fun us_split_fields_Root__projection ((a us_split_fields)) character (rec__dns_types__edns_record__root a))
(define-fun us_split_fields_Code__projection ((a us_split_fields)) query_type (rec__dns_types__edns_record__code a))
(define-fun us_split_fields_Payload_Size__projection ((a us_split_fields)) unsigned_short (rec__dns_types__edns_record__payload_size a))
(define-fun us_split_fields_RCode__2__projection ((a us_split_fields)) byte (rec__dns_types__edns_record__rcode a))
(define-fun us_split_fields_Version__projection ((a us_split_fields)) byte (rec__dns_types__edns_record__version a))
(define-fun us_split_fields_ZTop__projection ((a us_split_fields)) byte (rec__dns_types__edns_record__ztop a))
(define-fun us_split_fields_ZBottom__projection ((a us_split_fields)) byte (rec__dns_types__edns_record__zbottom a))
(define-fun us_split_fields_RDLen__projection ((a us_split_fields)) unsigned_short (rec__dns_types__edns_record__rdlen a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (= (to_rep (rec__dns_types__edns_record__root (us_split_fields1 a))) (to_rep (rec__dns_types__edns_record__root (us_split_fields1 b)))) (= (to_rep3 (rec__dns_types__edns_record__code (us_split_fields1 a))) (to_rep3 (rec__dns_types__edns_record__code (us_split_fields1 b))))) (= (to_rep2 (rec__dns_types__edns_record__payload_size (us_split_fields1 a))) (to_rep2 (rec__dns_types__edns_record__payload_size (us_split_fields1 b))))) (= (to_rep1 (rec__dns_types__edns_record__rcode (us_split_fields1 a))) (to_rep1 (rec__dns_types__edns_record__rcode (us_split_fields1 b))))) (= (to_rep1 (rec__dns_types__edns_record__version (us_split_fields1 a))) (to_rep1 (rec__dns_types__edns_record__version (us_split_fields1 b))))) (= (to_rep1 (rec__dns_types__edns_record__ztop (us_split_fields1 a))) (to_rep1 (rec__dns_types__edns_record__ztop (us_split_fields1 b))))) (= (to_rep1 (rec__dns_types__edns_record__zbottom (us_split_fields1 a))) (to_rep1 (rec__dns_types__edns_record__zbottom (us_split_fields1 b))))) (= (to_rep2 (rec__dns_types__edns_record__rdlen (us_split_fields1 a))) (to_rep2 (rec__dns_types__edns_record__rdlen (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dns_types__edns_record__root__first__bit Int)
(declare-const dns_types__edns_record__root__last__bit Int)
(declare-const dns_types__edns_record__root__position Int)
(assert (<= 0 dns_types__edns_record__root__first__bit))
(assert (< dns_types__edns_record__root__first__bit dns_types__edns_record__root__last__bit))
(assert (<= 0 dns_types__edns_record__root__position))
(declare-const dns_types__edns_record__code__first__bit Int)
(declare-const dns_types__edns_record__code__last__bit Int)
(declare-const dns_types__edns_record__code__position Int)
(assert (<= 0 dns_types__edns_record__code__first__bit))
(assert (< dns_types__edns_record__code__first__bit dns_types__edns_record__code__last__bit))
(assert (<= 0 dns_types__edns_record__code__position))
(declare-const dns_types__edns_record__payload_size__first__bit Int)
(declare-const dns_types__edns_record__payload_size__last__bit Int)
(declare-const dns_types__edns_record__payload_size__position Int)
(assert (<= 0 dns_types__edns_record__payload_size__first__bit))
(assert (< dns_types__edns_record__payload_size__first__bit dns_types__edns_record__payload_size__last__bit))
(assert (<= 0 dns_types__edns_record__payload_size__position))
(declare-const dns_types__edns_record__rcode__first__bit Int)
(declare-const dns_types__edns_record__rcode__last__bit Int)
(declare-const dns_types__edns_record__rcode__position Int)
(assert (<= 0 dns_types__edns_record__rcode__first__bit))
(assert (< dns_types__edns_record__rcode__first__bit dns_types__edns_record__rcode__last__bit))
(assert (<= 0 dns_types__edns_record__rcode__position))
(declare-const dns_types__edns_record__version__first__bit Int)
(declare-const dns_types__edns_record__version__last__bit Int)
(declare-const dns_types__edns_record__version__position Int)
(assert (<= 0 dns_types__edns_record__version__first__bit))
(assert (< dns_types__edns_record__version__first__bit dns_types__edns_record__version__last__bit))
(assert (<= 0 dns_types__edns_record__version__position))
(declare-const dns_types__edns_record__ztop__first__bit Int)
(declare-const dns_types__edns_record__ztop__last__bit Int)
(declare-const dns_types__edns_record__ztop__position Int)
(assert (<= 0 dns_types__edns_record__ztop__first__bit))
(assert (< dns_types__edns_record__ztop__first__bit dns_types__edns_record__ztop__last__bit))
(assert (<= 0 dns_types__edns_record__ztop__position))
(declare-const dns_types__edns_record__zbottom__first__bit Int)
(declare-const dns_types__edns_record__zbottom__last__bit Int)
(declare-const dns_types__edns_record__zbottom__position Int)
(assert (<= 0 dns_types__edns_record__zbottom__first__bit))
(assert (< dns_types__edns_record__zbottom__first__bit dns_types__edns_record__zbottom__last__bit))
(assert (<= 0 dns_types__edns_record__zbottom__position))
(declare-const dns_types__edns_record__rdlen__first__bit Int)
(declare-const dns_types__edns_record__rdlen__last__bit Int)
(declare-const dns_types__edns_record__rdlen__position Int)
(assert (<= 0 dns_types__edns_record__rdlen__first__bit))
(assert (< dns_types__edns_record__rdlen__first__bit dns_types__edns_record__rdlen__last__bit))
(assert (<= 0 dns_types__edns_record__rdlen__position))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((edns_record__ref (mk_edns_record__ref (edns_record__content us_rep)))))
(define-fun edns_record__ref___projection ((a edns_record__ref)) us_rep (edns_record__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int byte))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int byte)) (a__first Int) (a__last Int) (b (Array Int byte)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep1 (select a temp___idx_173)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep1 (select a temp___idx_173)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-sort opcode_type 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (opcode_type opcode_type) Bool)
(declare-const dummy8 opcode_type)
(declare-datatypes () ((opcode_type__ref (mk_opcode_type__ref (opcode_type__content opcode_type)))))
(define-fun opcode_type__ref___projection ((a opcode_type__ref)) opcode_type (opcode_type__content a))
(declare-fun to_rep4 (opcode_type) Int)
(declare-fun of_rep4 (Int) opcode_type)
(assert (forall ((x opcode_type)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x opcode_type)) (! (in_range7 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-sort response_code 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq9 (response_code response_code) Bool)
(declare-const dummy9 response_code)
(declare-datatypes () ((response_code__ref (mk_response_code__ref (response_code__content response_code)))))
(define-fun response_code__ref___projection ((a response_code__ref)) response_code (response_code__content a))
(declare-fun to_rep5 (response_code) Int)
(declare-fun of_rep5 (Int) response_code)
(assert (forall ((x response_code)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x response_code)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__dns_types__header_type__messageid unsigned_short) (rec__dns_types__header_type__qr Bool) (rec__dns_types__header_type__opcode opcode_type) (rec__dns_types__header_type__aa Bool) (rec__dns_types__header_type__tc Bool) (rec__dns_types__header_type__rd Bool) (rec__dns_types__header_type__ra Bool) (rec__dns_types__header_type__res1 Bool) (rec__dns_types__header_type__res2 Bool) (rec__dns_types__header_type__res3 Bool) (rec__dns_types__header_type__rcode response_code) (rec__dns_types__header_type__qdcount unsigned_short) (rec__dns_types__header_type__ancount unsigned_short) (rec__dns_types__header_type__nscount unsigned_short) (rec__dns_types__header_type__arcount unsigned_short)))))
(define-fun us_split_fields_MessageID__projection ((a us_split_fields2)) unsigned_short (rec__dns_types__header_type__messageid a))
(define-fun us_split_fields_QR__projection ((a us_split_fields2)) Bool (rec__dns_types__header_type__qr a))
(define-fun us_split_fields_Opcode__projection ((a us_split_fields2)) opcode_type (rec__dns_types__header_type__opcode a))
(define-fun us_split_fields_AA__projection ((a us_split_fields2)) Bool (rec__dns_types__header_type__aa a))
(define-fun us_split_fields_TC__projection ((a us_split_fields2)) Bool (rec__dns_types__header_type__tc a))
(define-fun us_split_fields_RD__projection ((a us_split_fields2)) Bool (rec__dns_types__header_type__rd a))
(define-fun us_split_fields_RA__projection ((a us_split_fields2)) Bool (rec__dns_types__header_type__ra a))
(define-fun us_split_fields_Res1__projection ((a us_split_fields2)) Bool (rec__dns_types__header_type__res1 a))
(define-fun us_split_fields_Res2__projection ((a us_split_fields2)) Bool (rec__dns_types__header_type__res2 a))
(define-fun us_split_fields_Res3__projection ((a us_split_fields2)) Bool (rec__dns_types__header_type__res3 a))
(define-fun us_split_fields_RCode__projection ((a us_split_fields2)) response_code (rec__dns_types__header_type__rcode a))
(define-fun us_split_fields_QDCount__projection ((a us_split_fields2)) unsigned_short (rec__dns_types__header_type__qdcount a))
(define-fun us_split_fields_ANCount__projection ((a us_split_fields2)) unsigned_short (rec__dns_types__header_type__ancount a))
(define-fun us_split_fields_NSCount__projection ((a us_split_fields2)) unsigned_short (rec__dns_types__header_type__nscount a))
(define-fun us_split_fields_ARCount__projection ((a us_split_fields2)) unsigned_short (rec__dns_types__header_type__arcount a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep2 (rec__dns_types__header_type__messageid (us_split_fields3 a))) (to_rep2 (rec__dns_types__header_type__messageid (us_split_fields3 b)))) (= (rec__dns_types__header_type__qr (us_split_fields3 a)) (rec__dns_types__header_type__qr (us_split_fields3 b)))) (= (to_rep4 (rec__dns_types__header_type__opcode (us_split_fields3 a))) (to_rep4 (rec__dns_types__header_type__opcode (us_split_fields3 b))))) (= (rec__dns_types__header_type__aa (us_split_fields3 a)) (rec__dns_types__header_type__aa (us_split_fields3 b)))) (= (rec__dns_types__header_type__tc (us_split_fields3 a)) (rec__dns_types__header_type__tc (us_split_fields3 b)))) (= (rec__dns_types__header_type__rd (us_split_fields3 a)) (rec__dns_types__header_type__rd (us_split_fields3 b)))) (= (rec__dns_types__header_type__ra (us_split_fields3 a)) (rec__dns_types__header_type__ra (us_split_fields3 b)))) (= (rec__dns_types__header_type__res1 (us_split_fields3 a)) (rec__dns_types__header_type__res1 (us_split_fields3 b)))) (= (rec__dns_types__header_type__res2 (us_split_fields3 a)) (rec__dns_types__header_type__res2 (us_split_fields3 b)))) (= (rec__dns_types__header_type__res3 (us_split_fields3 a)) (rec__dns_types__header_type__res3 (us_split_fields3 b)))) (= (to_rep5 (rec__dns_types__header_type__rcode (us_split_fields3 a))) (to_rep5 (rec__dns_types__header_type__rcode (us_split_fields3 b))))) (= (to_rep2 (rec__dns_types__header_type__qdcount (us_split_fields3 a))) (to_rep2 (rec__dns_types__header_type__qdcount (us_split_fields3 b))))) (= (to_rep2 (rec__dns_types__header_type__ancount (us_split_fields3 a))) (to_rep2 (rec__dns_types__header_type__ancount (us_split_fields3 b))))) (= (to_rep2 (rec__dns_types__header_type__nscount (us_split_fields3 a))) (to_rep2 (rec__dns_types__header_type__nscount (us_split_fields3 b))))) (= (to_rep2 (rec__dns_types__header_type__arcount (us_split_fields3 a))) (to_rep2 (rec__dns_types__header_type__arcount (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const dns_types__header_type__messageid__first__bit Int)
(declare-const dns_types__header_type__messageid__last__bit Int)
(declare-const dns_types__header_type__messageid__position Int)
(assert (<= 0 dns_types__header_type__messageid__first__bit))
(assert (< dns_types__header_type__messageid__first__bit dns_types__header_type__messageid__last__bit))
(assert (<= 0 dns_types__header_type__messageid__position))
(declare-const dns_types__header_type__qr__first__bit Int)
(declare-const dns_types__header_type__qr__last__bit Int)
(declare-const dns_types__header_type__qr__position Int)
(assert (<= 0 dns_types__header_type__qr__first__bit))
(assert (< dns_types__header_type__qr__first__bit dns_types__header_type__qr__last__bit))
(assert (<= 0 dns_types__header_type__qr__position))
(declare-const dns_types__header_type__opcode__first__bit Int)
(declare-const dns_types__header_type__opcode__last__bit Int)
(declare-const dns_types__header_type__opcode__position Int)
(assert (<= 0 dns_types__header_type__opcode__first__bit))
(assert (< dns_types__header_type__opcode__first__bit dns_types__header_type__opcode__last__bit))
(assert (<= 0 dns_types__header_type__opcode__position))
(declare-const dns_types__header_type__aa__first__bit Int)
(declare-const dns_types__header_type__aa__last__bit Int)
(declare-const dns_types__header_type__aa__position Int)
(assert (<= 0 dns_types__header_type__aa__first__bit))
(assert (< dns_types__header_type__aa__first__bit dns_types__header_type__aa__last__bit))
(assert (<= 0 dns_types__header_type__aa__position))
(declare-const dns_types__header_type__tc__first__bit Int)
(declare-const dns_types__header_type__tc__last__bit Int)
(declare-const dns_types__header_type__tc__position Int)
(assert (<= 0 dns_types__header_type__tc__first__bit))
(assert (< dns_types__header_type__tc__first__bit dns_types__header_type__tc__last__bit))
(assert (<= 0 dns_types__header_type__tc__position))
(declare-const dns_types__header_type__rd__first__bit Int)
(declare-const dns_types__header_type__rd__last__bit Int)
(declare-const dns_types__header_type__rd__position Int)
(assert (<= 0 dns_types__header_type__rd__first__bit))
(assert (< dns_types__header_type__rd__first__bit dns_types__header_type__rd__last__bit))
(assert (<= 0 dns_types__header_type__rd__position))
(declare-const dns_types__header_type__ra__first__bit Int)
(declare-const dns_types__header_type__ra__last__bit Int)
(declare-const dns_types__header_type__ra__position Int)
(assert (<= 0 dns_types__header_type__ra__first__bit))
(assert (< dns_types__header_type__ra__first__bit dns_types__header_type__ra__last__bit))
(assert (<= 0 dns_types__header_type__ra__position))
(declare-const dns_types__header_type__res1__first__bit Int)
(declare-const dns_types__header_type__res1__last__bit Int)
(declare-const dns_types__header_type__res1__position Int)
(assert (<= 0 dns_types__header_type__res1__first__bit))
(assert (< dns_types__header_type__res1__first__bit dns_types__header_type__res1__last__bit))
(assert (<= 0 dns_types__header_type__res1__position))
(declare-const dns_types__header_type__res2__first__bit Int)
(declare-const dns_types__header_type__res2__last__bit Int)
(declare-const dns_types__header_type__res2__position Int)
(assert (<= 0 dns_types__header_type__res2__first__bit))
(assert (< dns_types__header_type__res2__first__bit dns_types__header_type__res2__last__bit))
(assert (<= 0 dns_types__header_type__res2__position))
(declare-const dns_types__header_type__res3__first__bit Int)
(declare-const dns_types__header_type__res3__last__bit Int)
(declare-const dns_types__header_type__res3__position Int)
(assert (<= 0 dns_types__header_type__res3__first__bit))
(assert (< dns_types__header_type__res3__first__bit dns_types__header_type__res3__last__bit))
(assert (<= 0 dns_types__header_type__res3__position))
(declare-const dns_types__header_type__rcode__first__bit Int)
(declare-const dns_types__header_type__rcode__last__bit Int)
(declare-const dns_types__header_type__rcode__position Int)
(assert (<= 0 dns_types__header_type__rcode__first__bit))
(assert (< dns_types__header_type__rcode__first__bit dns_types__header_type__rcode__last__bit))
(assert (<= 0 dns_types__header_type__rcode__position))
(declare-const dns_types__header_type__qdcount__first__bit Int)
(declare-const dns_types__header_type__qdcount__last__bit Int)
(declare-const dns_types__header_type__qdcount__position Int)
(assert (<= 0 dns_types__header_type__qdcount__first__bit))
(assert (< dns_types__header_type__qdcount__first__bit dns_types__header_type__qdcount__last__bit))
(assert (<= 0 dns_types__header_type__qdcount__position))
(declare-const dns_types__header_type__ancount__first__bit Int)
(declare-const dns_types__header_type__ancount__last__bit Int)
(declare-const dns_types__header_type__ancount__position Int)
(assert (<= 0 dns_types__header_type__ancount__first__bit))
(assert (< dns_types__header_type__ancount__first__bit dns_types__header_type__ancount__last__bit))
(assert (<= 0 dns_types__header_type__ancount__position))
(declare-const dns_types__header_type__nscount__first__bit Int)
(declare-const dns_types__header_type__nscount__last__bit Int)
(declare-const dns_types__header_type__nscount__position Int)
(assert (<= 0 dns_types__header_type__nscount__first__bit))
(assert (< dns_types__header_type__nscount__first__bit dns_types__header_type__nscount__last__bit))
(assert (<= 0 dns_types__header_type__nscount__position))
(declare-const dns_types__header_type__arcount__first__bit Int)
(declare-const dns_types__header_type__arcount__last__bit Int)
(declare-const dns_types__header_type__arcount__position Int)
(assert (<= 0 dns_types__header_type__arcount__first__bit))
(assert (< dns_types__header_type__arcount__first__bit dns_types__header_type__arcount__last__bit))
(assert (<= 0 dns_types__header_type__arcount__position))
(declare-fun user_eq10 (us_rep1 us_rep1) Bool)
(declare-const dummy10 us_rep1)
(declare-datatypes () ((header_type__ref (mk_header_type__ref (header_type__content us_rep1)))))
(define-fun header_type__ref___projection ((a header_type__ref)) us_rep1 (header_type__content a))
(declare-const dummy11 (Array Int byte))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int byte)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int byte)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int byte))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int byte))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq11 ((Array Int byte) (Array Int byte)) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__dns_types__dns_packet__header us_rep1) (rec__dns_types__dns_packet__bytes (Array Int byte))))))
(define-fun us_split_fields_Header__projection ((a us_split_fields4)) us_rep1 (rec__dns_types__dns_packet__header a))
(define-fun us_split_fields_Bytes__projection ((a us_split_fields4)) (Array Int byte) (rec__dns_types__dns_packet__bytes a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (bool_eq2 (rec__dns_types__dns_packet__header (us_split_fields5 a)) (rec__dns_types__dns_packet__header (us_split_fields5 b))) true) (= (bool_eq1 (rec__dns_types__dns_packet__bytes (us_split_fields5 a)) 1 8180 (rec__dns_types__dns_packet__bytes (us_split_fields5 b)) 1 8180) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const dns_types__dns_packet__header__first__bit Int)
(declare-const dns_types__dns_packet__header__last__bit Int)
(declare-const dns_types__dns_packet__header__position Int)
(assert (<= 0 dns_types__dns_packet__header__first__bit))
(assert (< dns_types__dns_packet__header__first__bit dns_types__dns_packet__header__last__bit))
(assert (<= 0 dns_types__dns_packet__header__position))
(declare-const dns_types__dns_packet__bytes__first__bit Int)
(declare-const dns_types__dns_packet__bytes__last__bit Int)
(declare-const dns_types__dns_packet__bytes__position Int)
(assert (<= 0 dns_types__dns_packet__bytes__first__bit))
(assert (< dns_types__dns_packet__bytes__first__bit dns_types__dns_packet__bytes__last__bit))
(assert (<= 0 dns_types__dns_packet__bytes__position))
(declare-fun user_eq12 (us_rep2 us_rep2) Bool)
(declare-const dummy12 us_rep2)
(declare-datatypes () ((dns_packet__ref (mk_dns_packet__ref (dns_packet__content us_rep2)))))
(define-fun dns_packet__ref___projection ((a dns_packet__ref)) us_rep2 (dns_packet__content a))
(declare-const input_packet us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const input_bytes Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const query_end_byte Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const start_byte Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-sort source 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq13 (source source) Bool)
(declare-const dummy13 source)
(declare-datatypes () ((source__ref (mk_source__ref (source__content source)))))
(define-fun source__ref___8__projection ((a source__ref)) source (source__content a))
(define-fun dynamic_invariant3 ((temp___expr_5426 Int) (temp___is_init_5422 Bool) (temp___skip_constant_5423 Bool) (temp___do_toplevel_5424 Bool) (temp___do_typ_inv_5425 Bool)) Bool (=> (or (= temp___is_init_5422 true) (<= 0 65535)) (in_range9 temp___expr_5426)))
(declare-sort target 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq14 (target target) Bool)
(declare-const dummy14 target)
(declare-datatypes () ((target__ref (mk_target__ref (target__content target)))))
(define-fun target__ref___7__projection ((a target__ref)) target (target__content a))
(define-fun dynamic_invariant4 ((temp___expr_5433 Int) (temp___is_init_5429 Bool) (temp___skip_constant_5430 Bool) (temp___do_toplevel_5431 Bool) (temp___do_typ_inv_5432 Bool)) Bool (=> (or (= temp___is_init_5429 true) (<= 0 18)) (in_range10 temp___expr_5433)))
(declare-fun to_query_type (Int) Int)
(declare-fun to_query_type__function_guard (Int Int) Bool)
(assert (forall ((s Int)) (! (=> (dynamic_invariant3 s true true true true) (dynamic_invariant4 (to_query_type s) true false true true)) :pattern ((to_query_type s)))))
(declare-sort source1 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 18)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq15 (source1 source1) Bool)
(declare-const dummy15 source1)
(declare-datatypes () ((source__ref1 (mk_source__ref1 (source__content1 source1)))))
(define-fun source__ref___9__projection ((a source__ref1)) source1 (source__content1 a))
(define-fun dynamic_invariant5 ((temp___expr_5440 Int) (temp___is_init_5436 Bool) (temp___skip_constant_5437 Bool) (temp___do_toplevel_5438 Bool) (temp___do_typ_inv_5439 Bool)) Bool (=> (or (= temp___is_init_5436 true) (<= 0 18)) (in_range11 temp___expr_5440)))
(declare-sort target1 0)
(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq16 (target1 target1) Bool)
(declare-const dummy16 target1)
(declare-datatypes () ((target__ref1 (mk_target__ref1 (target__content1 target1)))))
(define-fun target__ref___8__projection ((a target__ref1)) target1 (target__content1 a))
(define-fun dynamic_invariant6 ((temp___expr_5447 Int) (temp___is_init_5443 Bool) (temp___skip_constant_5444 Bool) (temp___do_toplevel_5445 Bool) (temp___do_typ_inv_5446 Bool)) Bool (=> (or (= temp___is_init_5443 true) (<= 0 65535)) (in_range12 temp___expr_5447)))
(declare-fun from_query_type (Int) Int)
(declare-fun from_query_type__function_guard (Int Int) Bool)
(assert (forall ((s Int)) (! (=> (dynamic_invariant5 s true true true true) (dynamic_invariant6 (from_query_type s) true false true true)) :pattern ((from_query_type s)))))
(define-fun dynamic_invariant7 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range1 temp___expr_74)))
(define-fun dynamic_invariant8 ((temp___expr_803 (_ BitVec 8)) (temp___is_init_799 Bool) (temp___skip_constant_800 Bool) (temp___do_toplevel_801 Bool) (temp___do_typ_inv_802 Bool)) Bool true)
(define-fun dynamic_invariant9 ((temp___expr_817 Int) (temp___is_init_813 Bool) (temp___skip_constant_814 Bool) (temp___do_toplevel_815 Bool) (temp___do_typ_inv_816 Bool)) Bool (=> (or (= temp___is_init_813 true) (<= 0 2)) (in_range7 temp___expr_817)))
(define-fun dynamic_invariant10 ((temp___expr_824 Int) (temp___is_init_820 Bool) (temp___skip_constant_821 Bool) (temp___do_toplevel_822 Bool) (temp___do_typ_inv_823 Bool)) Bool (=> (or (= temp___is_init_820 true) (<= 0 5)) (in_range8 temp___expr_824)))
(define-fun dynamic_invariant11 ((temp___expr_861 Int) (temp___is_init_857 Bool) (temp___skip_constant_858 Bool) (temp___do_toplevel_859 Bool) (temp___do_typ_inv_860 Bool)) Bool (=> (or (= temp___is_init_857 true) (<= 0 18)) (in_range6 temp___expr_861)))
(declare-const output_bytes Int)
(declare-const additional_count Int)
(declare-const dnssec Bool)
(declare-const max_transmit Int)
(declare-const edns_rec__split_fields character)
(declare-const edns_rec__split_fields1 query_type)
(declare-const edns_rec__split_fields2 unsigned_short)
(declare-const edns_rec__split_fields3 byte)
(declare-const edns_rec__split_fields4 byte)
(declare-const edns_rec__split_fields5 byte)
(declare-const edns_rec__split_fields6 byte)
(declare-const edns_rec__split_fields7 unsigned_short)
(declare-const o Int)
(declare-const o1 byte)
(declare-const o2 (_ BitVec 8))
(declare-const o3 Int)
(declare-const o4 character)
(declare-const o5 character)
(declare-const o6 query_type)
(declare-const o7 unsigned_short)
(declare-const o8 byte)
(declare-const o9 byte)
(declare-const o10 byte)
(declare-const o11 byte)
(declare-const o12 unsigned_short)
(declare-const temp___5990 character)
(declare-const temp___59901 query_type)
(declare-const temp___59902 unsigned_short)
(declare-const temp___59903 byte)
(declare-const temp___59904 byte)
(declare-const temp___59905 byte)
(declare-const temp___59906 byte)
(declare-const temp___59907 unsigned_short)
(declare-const o13 Int)
(declare-const o14 byte)
(declare-const o15 (_ BitVec 8))
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 byte)
(declare-const o20 (_ BitVec 8))
(declare-const o21 Int)
(declare-const result int__ref)
(declare-const max_transmit1 Int)
(declare-const result1 int__ref)
(declare-const output_bytes1 Int)
(declare-const result2 bool__ref)
(declare-const dnssec1 Bool)
(declare-const result3 us_split_fields__ref)
(declare-const edns_rec__split_fields8 us_split_fields)
(assert (in_range2 input_bytes))
(assert (in_range3 query_end_byte))
(assert (in_range3 start_byte))
(assert (=> (<= 0 8192) (in_range2 output_bytes)))
(assert (in_range5 additional_count))
(assert (=> (<= 0 8192) (in_range2 max_transmit)))
(assert (< additional_count 65535))
(assert (= result (mk_int__ref max_transmit)))
(assert (= max_transmit1 512))
(assert (= result1 (mk_int__ref output_bytes)))
(assert (= output_bytes1 (+ start_byte 12)))
(assert (= result2 (mk_bool__ref dnssec)))
(assert (= dnssec1 (distinct 0 0)))
(assert (<= (+ (+ query_end_byte 11) 12) input_bytes))
(assert (< (+ (+ start_byte 11) 12) 8192))
(assert (and (<= 1 (+ query_end_byte 1)) (<= (+ query_end_byte 1) 8180)))
(assert (= o (+ query_end_byte 1)))
(assert (= o1 (select (rec__dns_types__dns_packet__bytes (us_split_fields5 input_packet)) o)))
(assert (= o2 (to_rep1 o1)))
(assert (= o3 (bv2nat o2)))
(assert (= (to_rep o4) o3))
(assert (= o4 o5))
(assert (= edns_rec__split_fields1 o6))
(assert (= edns_rec__split_fields2 o7))
(assert (= edns_rec__split_fields3 o8))
(assert (= edns_rec__split_fields4 o9))
(assert (= edns_rec__split_fields5 o10))
(assert (= edns_rec__split_fields6 o11))
(assert (= edns_rec__split_fields7 o12))
(assert (= temp___5990 o5))
(assert (= temp___59901 o6))
(assert (= temp___59902 o7))
(assert (= temp___59903 o8))
(assert (= temp___59904 o9))
(assert (= temp___59905 o10))
(assert (= temp___59906 o11))
(assert (= temp___59907 o12))
(assert (= result3 (mk___split_fields__ref (mk___split_fields edns_rec__split_fields edns_rec__split_fields1 edns_rec__split_fields2 edns_rec__split_fields3 edns_rec__split_fields4 edns_rec__split_fields5 edns_rec__split_fields6 edns_rec__split_fields7))))
(assert (= edns_rec__split_fields8 (mk___split_fields temp___5990 temp___59901 temp___59902 temp___59903 temp___59904 temp___59905 temp___59906 temp___59907)))
(assert (and (<= 1 (+ query_end_byte 3)) (<= (+ query_end_byte 3) 8180)))
(assert (= o18 (+ query_end_byte 3)))
(assert (= o19 (select (rec__dns_types__dns_packet__bytes (us_split_fields5 input_packet)) o18)))
(assert (= o20 (to_rep1 o19)))
(assert (= o21 (bv2nat o20)))
(assert (and (<= 1 (+ query_end_byte 2)) (<= (+ query_end_byte 2) 8180)))
(assert (= o13 (+ query_end_byte 2)))
(assert (= o14 (select (rec__dns_types__dns_packet__bytes (us_split_fields5 input_packet)) o13)))
(assert (= o15 (to_rep1 o14)))
(assert (= o16 (bv2nat o15)))
(assert (= o17 (* o16 256)))
(assert (not (in_range4 o17)))
(check-sat)
(exit)
