(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 65535)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (16 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  16)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (16 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 16))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 16))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(65536 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  65536)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 16)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 65535)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) + tqtint1(v2)) <  65536) ->
  (tqtint1(add1(v1, v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  65536)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 65536)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) * tqtint1(v2)) <  65536) ->
  (tqtint1(mul1(v1, v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 65536)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 16)]. (eq_sub1(x, y, 0, 16) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 :
  (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 4294967295)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (32 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  32)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (32 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 32))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 32))))))

logic is_signed_positive2 : t2 -> prop

logic of_int2 : int -> t2

logic to_int2 : t2 -> int

axiom to_int_def2 :
  (forall x:t2 [to_int2(x)]. ((is_signed_positive2(x) ->
  (to_int2(x) = tqtint2(x))) and ((not is_signed_positive2(x)) ->
  (to_int2(x) = (-(4294967296 - tqtint2(x)))))))

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int2(v) = to_int2(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  4294967296)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint2(of_int2(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 32)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 4294967295)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int2(v1) <  to_int2(v2))

predicate sle2(v1: t2, v2: t2) = (to_int2(v1) <= to_int2(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int2(v2) <  to_int2(v1))

predicate sge2(v1: t2, v2: t2) = (to_int2(v2) <= to_int2(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t2. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) + tqtint2(v2)) <  4294967296) -> (tqtint2(add2(v1,
  v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  4294967296)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 4294967296)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2.
  (((tqtint2(v1) * tqtint2(v2)) <  4294967296) -> (tqtint2(mul2(v1,
  v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 4294967296)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv2(x, of_int2(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 32)]. (eq_sub2(x, y, 0, 32) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

logic bool_eq2 : t2, t2 -> bool

axiom bool_eq_def2 :
  (forall x:t2. forall y:t2 [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic bool_ne2 : t2, t2 -> bool

axiom bool_ne_def2 :
  (forall x:t2. forall y:t2 [bool_ne2(x, y)]. (((not (x = y)) -> (bool_ne2(x,
  y) = true)) and ((x = y) -> (bool_ne2(x, y) = false))))

logic bool_lt2 : t2, t2 -> bool

axiom bool_lt_def2 :
  (forall x:t2. forall y:t2 [bool_lt2(x, y)]. ((ult2(x, y) -> (bool_lt2(x,
  y) = true)) and ((not ult2(x, y)) -> (bool_lt2(x, y) = false))))

logic bool_le2 : t2, t2 -> bool

axiom bool_le_def2 :
  (forall x:t2. forall y:t2 [bool_le2(x, y)]. ((ule2(x, y) -> (bool_le2(x,
  y) = true)) and ((not ule2(x, y)) -> (bool_le2(x, y) = false))))

logic bool_gt2 : t2, t2 -> bool

axiom bool_gt_def2 :
  (forall x:t2. forall y:t2 [bool_gt2(x, y)]. ((ugt2(x, y) -> (bool_gt2(x,
  y) = true)) and ((not ugt2(x, y)) -> (bool_gt2(x, y) = false))))

logic bool_ge2 : t2, t2 -> bool

axiom bool_ge_def2 :
  (forall x:t2. forall y:t2 [bool_ge2(x, y)]. ((uge2(x, y) -> (bool_ge2(x,
  y) = true)) and ((not uge2(x, y)) -> (bool_ge2(x, y) = false))))

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

logic bv_min2 : t2, t2 -> t2

axiom bv_min_def2 :
  (forall x:t2. forall y:t2 [bv_min2(x, y)]. ((ule2(x, y) -> (bv_min2(x,
  y) = x)) and ((not ule2(x, y)) -> (bv_min2(x, y) = y))))

logic bv_max2 : t2, t2 -> t2

axiom bv_max_def2 :
  (forall x:t2. forall y:t2 [bv_max2(x, y)]. ((ule2(x, y) -> (bv_max2(x,
  y) = y)) and ((not ule2(x, y)) -> (bv_max2(x, y) = x))))

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int3 : bool -> int

axiom to_int_def3 :
  (forall b:bool [to_int3(b)]. (((b = true) -> (to_int3(b) = 1)) and
  ((not (b = true)) -> (to_int3(b) = 0))))

logic of_int3 : int -> bool

axiom of_int_def :
  (forall i:int [of_int3(i)]. (((i = 0) -> (of_int3(i) = false)) and
  ((not (i = 0)) -> (of_int3(i) = true))))

logic bool_eq3 : bool, bool -> bool

axiom bool_eq_def3 :
  (forall x:bool. forall y:bool [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

logic bool_ne3 : int, int -> bool

logic bool_lt3 : int, int -> bool

logic bool_le3 : int, int -> bool

logic bool_gt3 : int, int -> bool

logic bool_ge3 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq4(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne3(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt3(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le3(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt3(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge3(x, y) = true) <-> (y <= x))))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq7 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def6 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type packet_length_range

predicate in_range3(x: int) = ((0 <= x) and (x <= 8192))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : packet_length_range, packet_length_range -> bool

logic dummy2 : packet_length_range

type packet_length_range__ref = { packet_length_range__content :
packet_length_range
}

function packet_length_range__ref___projection(a: packet_length_range__ref) : packet_length_range =
  (a).packet_length_range__content

type packet_bytes_range

predicate in_range4(x: int) = ((1 <= x) and (x <= 8180))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : packet_bytes_range, packet_bytes_range -> bool

logic dummy3 : packet_bytes_range

type packet_bytes_range__ref = { packet_bytes_range__content :
packet_bytes_range
}

function packet_bytes_range__ref___projection(a: packet_bytes_range__ref) : packet_bytes_range =
  (a).packet_bytes_range__content

type byte

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq10 : t, t -> bool

axiom bool_eq_def9 :
  (forall x:t. forall y:t [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic user_eq4 : byte, byte -> bool

logic dummy4 : byte

type byte__ref = { byte__content : byte
}

function byte__ref___projection(a: byte__ref) : byte = (a).byte__content

logic to_rep1 : byte -> t

logic of_rep1 : t -> byte

axiom inversion_axiom1 :
  (forall x:byte [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int4(x: byte) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:byte [to_int4(x)]. uint_in_range(to_int4(x)))

type map__ref1 = { map__content1 : (int,byte) farray
}

logic slide1 : (int,byte) farray, int, int -> (int,byte) farray

axiom slide_eq1 :
  (forall a:(int,byte) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,byte) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq11 : (int,byte) farray, int, int, (int,byte) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,byte) farray. forall a__first:int. forall a__last:int.
  forall b:(int,byte) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)])))))))))

type unsigned32

logic attr__ATTRIBUTE_MODULUS1 : t2

logic bool_eq12 : t2, t2 -> bool

axiom bool_eq_def11 :
  (forall x:t2. forall y:t2 [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t2

logic user_eq5 : unsigned32, unsigned32 -> bool

logic dummy5 : unsigned32

type unsigned32__ref = { unsigned32__content : unsigned32
}

function unsigned32__ref___projection(a: unsigned32__ref) : unsigned32 =
  (a).unsigned32__content

logic to_rep2 : unsigned32 -> t2

logic of_rep2 : t2 -> unsigned32

axiom inversion_axiom2 :
  (forall x:unsigned32 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : true

axiom coerce_axiom2 :
  (forall x:t2 [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

function to_int5(x: unsigned32) : int = tqtint2(to_rep2(x))

axiom range_int_axiom1 :
  (forall x:unsigned32 [to_int5(x)]. uint_in_range2(to_int5(x)))

type wirestringtypeindex

predicate in_range5(x: int) = ((1 <= x) and (x <= 129))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : wirestringtypeindex, wirestringtypeindex -> bool

logic dummy6 : wirestringtypeindex

type wirestringtypeindex__ref = { wirestringtypeindex__content :
wirestringtypeindex
}

function wirestringtypeindex__ref___projection(a: wirestringtypeindex__ref) : wirestringtypeindex =
  (a).wirestringtypeindex__content

logic wirenamelength : (int,character) farray -> int

logic wirenamelength__function_guard : int, (int,character) farray -> prop

type blocknumbervalue

predicate in_range6(x: int) = ((0 <= x) and (x <= 32))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : blocknumbervalue, blocknumbervalue -> bool

logic dummy7 : blocknumbervalue

type blocknumbervalue__ref = { blocknumbervalue__content : blocknumbervalue
}

function blocknumbervalue__ref___projection(a: blocknumbervalue__ref) : blocknumbervalue =
  (a).blocknumbervalue__content

logic to_rep3 : blocknumbervalue -> int

logic of_rep3 : int -> blocknumbervalue

axiom inversion_axiom3 :
  (forall x:blocknumbervalue [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:blocknumbervalue [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type blocknumberarrayindex

predicate in_range7(x: int) = ((1 <= x) and (x <= 32))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq8 : blocknumberarrayindex, blocknumberarrayindex -> bool

logic dummy8 : blocknumberarrayindex

type blocknumberarrayindex__ref = { blocknumberarrayindex__content :
blocknumberarrayindex
}

function blocknumberarrayindex__ref___projection(a: blocknumberarrayindex__ref) : blocknumberarrayindex =
  (a).blocknumberarrayindex__content

type blocklengthvalue

predicate in_range8(x: int) = ((1 <= x) and (x <= 32))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq9 : blocklengthvalue, blocklengthvalue -> bool

logic dummy9 : blocklengthvalue

type blocklengthvalue__ref = { blocklengthvalue__content : blocklengthvalue
}

function blocklengthvalue__ref___projection(a: blocklengthvalue__ref) : blocklengthvalue =
  (a).blocklengthvalue__content

logic to_rep4 : blocklengthvalue -> int

logic of_rep4 : int -> blocklengthvalue

axiom inversion_axiom4 :
  (forall x:blocklengthvalue [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:blocklengthvalue [to_rep4(x)]. in_range8(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range8(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref2 = { map__content2 : (int,blocklengthvalue) farray
}

logic slide2 : (int,blocklengthvalue) farray, int,
  int -> (int,blocklengthvalue) farray

axiom slide_eq2 :
  (forall a:(int,blocklengthvalue) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,blocklengthvalue) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq17 : (int,blocklengthvalue) farray, int, int,
  (int,blocklengthvalue) farray, int, int -> bool

axiom bool_eq_def16 :
  (forall a:(int,blocklengthvalue) farray. forall a__first:int.
  forall a__last:int. forall b:(int,blocklengthvalue) farray.
  forall b__first:int. forall b__last:int [bool_eq17(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_218:int. ((((a__first <= temp___idx_218) and
  (temp___idx_218 <= a__last)) and
  (to_rep4((a[temp___idx_218])) = to_rep4((b[((b__first - a__first) + temp___idx_218)])))) or
  (not ((a__first <= temp___idx_218) and (temp___idx_218 <= a__last)))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_218:int. (((a__first <= temp___idx_218) and
  (temp___idx_218 <= a__last)) ->
  (to_rep4((a[temp___idx_218])) = to_rep4((b[((b__first - a__first) + temp___idx_218)]))))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,blocklengthvalue) farray.
  forall b:(int,blocklengthvalue) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq17(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_218:int. (((a__first <= temp___idx_218) and
  (temp___idx_218 <= a__last)) ->
  (to_rep4((a[temp___idx_218])) = to_rep4((b[((b__first - a__first) + temp___idx_218)])))))))))

type bitmapindex

predicate in_range9(x: int) = ((1 <= x) and (x <= 32))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq10 : bitmapindex, bitmapindex -> bool

logic dummy10 : bitmapindex

type bitmapindex__ref = { bitmapindex__content : bitmapindex
}

function bitmapindex__ref___projection(a: bitmapindex__ref) : bitmapindex =
  (a).bitmapindex__content

logic dummy11 : (int,byte) farray

logic value__size : int

logic object__size : (int,byte) farray -> int

logic value__component__size : int

logic object__component__size : (int,byte) farray -> int

logic value__alignment : int

logic object__alignment : (int,byte) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,byte) farray. (0 <= object__alignment(a)))

logic user_eq11 : (int,byte) farray, (int,byte) farray -> bool

type map__ref3 = { map__content3 : (int,(int,byte) farray) farray
}

logic slide3 : (int,(int,byte) farray) farray, int,
  int -> (int,(int,byte) farray) farray

axiom slide_eq3 :
  (forall a:(int,(int,byte) farray) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,(int,byte) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq19 : (int,(int,byte) farray) farray, int, int,
  (int,(int,byte) farray) farray, int, int -> bool

axiom bool_eq_def18 :
  (forall a:(int,(int,byte) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,byte) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq19(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_219:int. ((((a__first <= temp___idx_219) and
  (temp___idx_219 <= a__last)) and (bool_eq11((a[temp___idx_219]), 1, 32,
  (b[((b__first - a__first) + temp___idx_219)]), 1, 32) = true)) or
  (not ((a__first <= temp___idx_219) and (temp___idx_219 <= a__last)))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_219:int. (((a__first <= temp___idx_219) and
  (temp___idx_219 <= a__last)) -> (bool_eq11((a[temp___idx_219]), 1, 32,
  (b[((b__first - a__first) + temp___idx_219)]), 1, 32) = true))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,(int,byte) farray) farray.
  forall b:(int,(int,byte) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_219:int. (((a__first <= temp___idx_219) and
  (temp___idx_219 <= a__last)) -> (bool_eq11((a[temp___idx_219]), 1, 32,
  (b[((b__first - a__first) + temp___idx_219)]), 1, 32) = true)))))))

type classtype

predicate in_range10(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq12 : classtype, classtype -> bool

logic dummy12 : classtype

type classtype__ref = { classtype__content : classtype
}

function classtype__ref___projection(a: classtype__ref) : classtype =
  (a).classtype__content

logic to_rep5 : classtype -> int

logic of_rep5 : int -> classtype

axiom inversion_axiom5 :
  (forall x:classtype [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:classtype [to_rep5(x)]. in_range10(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range10(x) ->
  (to_rep5(of_rep5(x)) = x)))

logic dummy13 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq13 : (int,character) farray, (int,character) farray -> bool

logic dummy14 : (int,character) farray

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

logic user_eq14 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__rr_type__resourcerecordtype__ttlinseconds :
unsigned32; rec__rr_type__resourcerecordtype__class : classtype; rec__ext__ :
us_private
}

function us_split_fields_TTLInSeconds__projection(a: us_split_fields) : unsigned32 =
  (a).rec__rr_type__resourcerecordtype__ttlinseconds

function us_split_fields_Class__projection(a: us_split_fields) : classtype =
  (a).rec__rr_type__resourcerecordtype__class

function us_split_fields___2__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___7__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___8__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq21 : us_rep, us_rep -> bool

axiom bool_eq_def20 :
  (forall a:us_rep. forall b:us_rep [bool_eq21(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds) = to_rep2(((b).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds)) and
  (to_rep5(((a).us_split_fields1).rec__rr_type__resourcerecordtype__class) = to_rep5(((b).us_split_fields1).rec__rr_type__resourcerecordtype__class))) ->
  (bool_eq21(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds) = to_rep2(((b).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds)) and
  (to_rep5(((a).us_split_fields1).rec__rr_type__resourcerecordtype__class) = to_rep5(((b).us_split_fields1).rec__rr_type__resourcerecordtype__class)))) ->
  (bool_eq21(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:unsigned32. forall a1:classtype. forall a2:us_private.
  forall a3:int. (0 <= object__size3({ us_split_fields1 = {
  rec__rr_type__resourcerecordtype__ttlinseconds = a;
  rec__rr_type__resourcerecordtype__class = a1; rec__ext__ = a2 };
  attr__tag = a3 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:unsigned32. forall a1:classtype. forall a2:us_private.
  forall a3:int. (0 <= object__alignment3({ us_split_fields1 = {
  rec__rr_type__resourcerecordtype__ttlinseconds = a;
  rec__rr_type__resourcerecordtype__class = a1; rec__ext__ = a2 };
  attr__tag = a3 })))

logic rr_type__resourcerecordtype__ttlinseconds__first__bit : int

logic rr_type__resourcerecordtype__ttlinseconds__last__bit : int

logic rr_type__resourcerecordtype__ttlinseconds__position : int

axiom rr_type__resourcerecordtype__ttlinseconds__first__bit_axiom :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__first__bit)

axiom rr_type__resourcerecordtype__ttlinseconds__last__bit_axiom :
  (rr_type__resourcerecordtype__ttlinseconds__first__bit <  rr_type__resourcerecordtype__ttlinseconds__last__bit)

axiom rr_type__resourcerecordtype__ttlinseconds__position_axiom :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__position)

logic rr_type__resourcerecordtype__class__first__bit : int

logic rr_type__resourcerecordtype__class__last__bit : int

logic rr_type__resourcerecordtype__class__position : int

axiom rr_type__resourcerecordtype__class__first__bit_axiom :
  (0 <= rr_type__resourcerecordtype__class__first__bit)

axiom rr_type__resourcerecordtype__class__last__bit_axiom :
  (rr_type__resourcerecordtype__class__first__bit <  rr_type__resourcerecordtype__class__last__bit)

axiom rr_type__resourcerecordtype__class__position_axiom :
  (0 <= rr_type__resourcerecordtype__class__position)

logic user_eq15 : us_rep, us_rep -> bool

logic dummy15 : unsigned32

logic dummy16 : classtype

logic dummy17 : us_private

logic dummy18 : int

type resourcerecordtype__ref = { resourcerecordtype__content : us_rep
}

function resourcerecordtype__ref___projection(a: resourcerecordtype__ref) : us_rep =
  (a).resourcerecordtype__content

type recordtypeindexvalue

predicate in_range11(x: int) = ((0 <= x) and (x <= 32))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq16 : recordtypeindexvalue, recordtypeindexvalue -> bool

logic dummy19 : recordtypeindexvalue

type recordtypeindexvalue__ref = { recordtypeindexvalue__content :
recordtypeindexvalue
}

function recordtypeindexvalue__ref___projection(a: recordtypeindexvalue__ref) : recordtypeindexvalue =
  (a).recordtypeindexvalue__content

logic to_rep6 : recordtypeindexvalue -> int

logic of_rep6 : int -> recordtypeindexvalue

axiom inversion_axiom6 :
  (forall x:recordtypeindexvalue [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:recordtypeindexvalue [to_rep6(x)]. in_range11(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range11(x) ->
  (to_rep6(of_rep6(x)) = x)))

type query_type

predicate in_range12(x: int) = ((0 <= x) and (x <= 18))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq17 : query_type, query_type -> bool

logic dummy20 : query_type

type query_type__ref = { query_type__content : query_type
}

function query_type__ref___projection(a: query_type__ref) : query_type =
  (a).query_type__content

logic to_rep7 : query_type -> int

logic of_rep7 : int -> query_type

axiom inversion_axiom7 :
  (forall x:query_type [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:query_type [to_rep7(x)]. in_range12(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range12(x) ->
  (to_rep7(of_rep7(x)) = x)))

type map__ref4 = { map__content4 : (int,query_type) farray
}

logic slide4 : (int,query_type) farray, int, int -> (int,query_type) farray

axiom slide_eq4 :
  (forall a:(int,query_type) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,query_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq24 : (int,query_type) farray, int, int, (int,query_type) farray,
  int, int -> bool

axiom bool_eq_def23 :
  (forall a:(int,query_type) farray. forall a__first:int. forall a__last:int.
  forall b:(int,query_type) farray. forall b__first:int. forall b__last:int
  [bool_eq24(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_217:int. ((((a__first <= temp___idx_217) and
  (temp___idx_217 <= a__last)) and
  (to_rep7((a[temp___idx_217])) = to_rep7((b[((b__first - a__first) + temp___idx_217)])))) or
  (not ((a__first <= temp___idx_217) and (temp___idx_217 <= a__last)))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_217:int. (((a__first <= temp___idx_217) and
  (temp___idx_217 <= a__last)) ->
  (to_rep7((a[temp___idx_217])) = to_rep7((b[((b__first - a__first) + temp___idx_217)]))))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,query_type) farray. forall b:(int,query_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq24(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_217:int. (((a__first <= temp___idx_217) and
  (temp___idx_217 <= a__last)) ->
  (to_rep7((a[temp___idx_217])) = to_rep7((b[((b__first - a__first) + temp___idx_217)])))))))))

logic dummy21 : (int,query_type) farray

logic value__size4 : int

logic object__size4 : (int,query_type) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,query_type) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,query_type) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,query_type) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,query_type) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,query_type) farray. (0 <= object__alignment4(a)))

logic user_eq18 : (int,query_type) farray, (int,query_type) farray -> bool

logic dummy22 : (int,byte) farray

logic value__size5 : int

logic object__size5 : (int,byte) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,byte) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,byte) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,byte) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,byte) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,byte) farray. (0 <= object__alignment5(a)))

logic user_eq19 : (int,byte) farray, (int,byte) farray -> bool

logic dummy23 : (int,blocklengthvalue) farray

logic value__size6 : int

logic object__size6 : (int,blocklengthvalue) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,blocklengthvalue) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,blocklengthvalue) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,blocklengthvalue) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,blocklengthvalue) farray.
  (0 <= object__component__size5(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,blocklengthvalue) farray. (0 <= object__alignment6(a)))

logic user_eq20 : (int,blocklengthvalue) farray,
  (int,blocklengthvalue) farray -> bool

logic dummy24 : (int,(int,byte) farray) farray

logic value__size7 : int

logic object__size7 : (int,(int,byte) farray) farray -> int

logic value__component__size6 : int

logic object__component__size6 : (int,(int,byte) farray) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,(int,byte) farray) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,(int,byte) farray) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom6 : (0 <= value__component__size6)

axiom object__component__size_axiom6 :
  (forall a:(int,(int,byte) farray) farray.
  (0 <= object__component__size6(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,(int,byte) farray) farray. (0 <= object__alignment7(a)))

logic user_eq21 : (int,(int,byte) farray) farray,
  (int,(int,byte) farray) farray -> bool

type us_split_fields2 = {
rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname :
(int,character) farray;
rec__rr_type__nsec_record_type__nsecrecordtype__recordlist :
(int,character) farray;
rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes :
recordtypeindexvalue;
rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes :
(int,query_type) farray;
rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks :
blocknumbervalue;
rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers :
(int,byte) farray;
rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths :
(int,blocklengthvalue) farray;
rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps :
(int,(int,byte) farray) farray;
rec__rr_type__resourcerecordtype__ttlinseconds1 : unsigned32;
rec__rr_type__resourcerecordtype__class1 : classtype; rec__ext__1 :
us_private
}

function us_split_fields_NextDomainName__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname

function us_split_fields_RecordList__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__rr_type__nsec_record_type__nsecrecordtype__recordlist

function us_split_fields_NumberOfRecordTypes__projection(a: us_split_fields2) : recordtypeindexvalue =
  (a).rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes

function us_split_fields_RecordTypes__projection(a: us_split_fields2) : (int,query_type) farray =
  (a).rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes

function us_split_fields_NumberOfBlocks__projection(a: us_split_fields2) : blocknumbervalue =
  (a).rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks

function us_split_fields_BlockNumbers__projection(a: us_split_fields2) : (int,byte) farray =
  (a).rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers

function us_split_fields_BlockLengths__projection(a: us_split_fields2) : (int,blocklengthvalue) farray =
  (a).rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths

function us_split_fields_BitMaps__projection(a: us_split_fields2) : (int,(int,byte) farray) farray =
  (a).rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps

function us_split_fields_TTLInSeconds__8__projection(a: us_split_fields2) : unsigned32 =
  (a).rec__rr_type__resourcerecordtype__ttlinseconds1

function us_split_fields_Class__8__projection(a: us_split_fields2) : classtype =
  (a).rec__rr_type__resourcerecordtype__class1

function us_split_fields___9__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___21__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___22__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : (int,character) farray, (int,character) farray,
  recordtypeindexvalue, (int,query_type) farray, blocknumbervalue,
  (int,byte) farray, (int,blocklengthvalue) farray,
  (int,(int,byte) farray) farray, us_private -> us_private

logic extract__nextdomainname : us_private -> (int,character) farray

axiom extract__nextdomainname__conv :
  (forall nextdomainname:(int,character) farray.
  forall recordlist:(int,character) farray.
  (forall numberofrecordtypes:recordtypeindexvalue.
  (forall recordtypes:(int,query_type) farray.
  (forall numberofblocks:blocknumbervalue.
  (forall blocknumbers:(int,byte) farray.
  (forall blocklengths:(int,blocklengthvalue) farray.
  (forall bitmaps:(int,(int,byte) farray) farray.
  (forall rec__ext__2:us_private.
  (extract__nextdomainname(hide_ext__(nextdomainname, recordlist,
  numberofrecordtypes, recordtypes, numberofblocks, blocknumbers,
  blocklengths, bitmaps, rec__ext__2)) = nextdomainname)))))))))

logic extract__recordlist : us_private -> (int,character) farray

axiom extract__recordlist__conv :
  (forall nextdomainname:(int,character) farray.
  forall recordlist:(int,character) farray.
  (forall numberofrecordtypes:recordtypeindexvalue.
  (forall recordtypes:(int,query_type) farray.
  (forall numberofblocks:blocknumbervalue.
  (forall blocknumbers:(int,byte) farray.
  (forall blocklengths:(int,blocklengthvalue) farray.
  (forall bitmaps:(int,(int,byte) farray) farray.
  (forall rec__ext__2:us_private.
  (extract__recordlist(hide_ext__(nextdomainname, recordlist,
  numberofrecordtypes, recordtypes, numberofblocks, blocknumbers,
  blocklengths, bitmaps, rec__ext__2)) = recordlist)))))))))

logic extract__numberofrecordtypes : us_private -> recordtypeindexvalue

axiom extract__numberofrecordtypes__conv :
  (forall nextdomainname:(int,character) farray.
  forall recordlist:(int,character) farray.
  (forall numberofrecordtypes:recordtypeindexvalue.
  (forall recordtypes:(int,query_type) farray.
  (forall numberofblocks:blocknumbervalue.
  (forall blocknumbers:(int,byte) farray.
  (forall blocklengths:(int,blocklengthvalue) farray.
  (forall bitmaps:(int,(int,byte) farray) farray.
  (forall rec__ext__2:us_private.
  (extract__numberofrecordtypes(hide_ext__(nextdomainname, recordlist,
  numberofrecordtypes, recordtypes, numberofblocks, blocknumbers,
  blocklengths, bitmaps, rec__ext__2)) = numberofrecordtypes)))))))))

logic extract__recordtypes : us_private -> (int,query_type) farray

axiom extract__recordtypes__conv :
  (forall nextdomainname:(int,character) farray.
  forall recordlist:(int,character) farray.
  (forall numberofrecordtypes:recordtypeindexvalue.
  (forall recordtypes:(int,query_type) farray.
  (forall numberofblocks:blocknumbervalue.
  (forall blocknumbers:(int,byte) farray.
  (forall blocklengths:(int,blocklengthvalue) farray.
  (forall bitmaps:(int,(int,byte) farray) farray.
  (forall rec__ext__2:us_private.
  (extract__recordtypes(hide_ext__(nextdomainname, recordlist,
  numberofrecordtypes, recordtypes, numberofblocks, blocknumbers,
  blocklengths, bitmaps, rec__ext__2)) = recordtypes)))))))))

logic extract__numberofblocks : us_private -> blocknumbervalue

axiom extract__numberofblocks__conv :
  (forall nextdomainname:(int,character) farray.
  forall recordlist:(int,character) farray.
  (forall numberofrecordtypes:recordtypeindexvalue.
  (forall recordtypes:(int,query_type) farray.
  (forall numberofblocks:blocknumbervalue.
  (forall blocknumbers:(int,byte) farray.
  (forall blocklengths:(int,blocklengthvalue) farray.
  (forall bitmaps:(int,(int,byte) farray) farray.
  (forall rec__ext__2:us_private.
  (extract__numberofblocks(hide_ext__(nextdomainname, recordlist,
  numberofrecordtypes, recordtypes, numberofblocks, blocknumbers,
  blocklengths, bitmaps, rec__ext__2)) = numberofblocks)))))))))

logic extract__blocknumbers : us_private -> (int,byte) farray

axiom extract__blocknumbers__conv :
  (forall nextdomainname:(int,character) farray.
  forall recordlist:(int,character) farray.
  (forall numberofrecordtypes:recordtypeindexvalue.
  (forall recordtypes:(int,query_type) farray.
  (forall numberofblocks:blocknumbervalue.
  (forall blocknumbers:(int,byte) farray.
  (forall blocklengths:(int,blocklengthvalue) farray.
  (forall bitmaps:(int,(int,byte) farray) farray.
  (forall rec__ext__2:us_private.
  (extract__blocknumbers(hide_ext__(nextdomainname, recordlist,
  numberofrecordtypes, recordtypes, numberofblocks, blocknumbers,
  blocklengths, bitmaps, rec__ext__2)) = blocknumbers)))))))))

logic extract__blocklengths : us_private -> (int,blocklengthvalue) farray

axiom extract__blocklengths__conv :
  (forall nextdomainname:(int,character) farray.
  forall recordlist:(int,character) farray.
  (forall numberofrecordtypes:recordtypeindexvalue.
  (forall recordtypes:(int,query_type) farray.
  (forall numberofblocks:blocknumbervalue.
  (forall blocknumbers:(int,byte) farray.
  (forall blocklengths:(int,blocklengthvalue) farray.
  (forall bitmaps:(int,(int,byte) farray) farray.
  (forall rec__ext__2:us_private.
  (extract__blocklengths(hide_ext__(nextdomainname, recordlist,
  numberofrecordtypes, recordtypes, numberofblocks, blocknumbers,
  blocklengths, bitmaps, rec__ext__2)) = blocklengths)))))))))

logic extract__bitmaps : us_private -> (int,(int,byte) farray) farray

axiom extract__bitmaps__conv :
  (forall nextdomainname:(int,character) farray.
  forall recordlist:(int,character) farray.
  (forall numberofrecordtypes:recordtypeindexvalue.
  (forall recordtypes:(int,query_type) farray.
  (forall numberofblocks:blocknumbervalue.
  (forall blocknumbers:(int,byte) farray.
  (forall blocklengths:(int,blocklengthvalue) farray.
  (forall bitmaps:(int,(int,byte) farray) farray.
  (forall rec__ext__2:us_private.
  (extract__bitmaps(hide_ext__(nextdomainname, recordlist,
  numberofrecordtypes, recordtypes, numberofblocks, blocknumbers,
  blocklengths, bitmaps, rec__ext__2)) = bitmaps)))))))))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__rr_type__resourcerecordtype__ttlinseconds =
  ((a).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1;
  rec__rr_type__resourcerecordtype__class =
  ((a).us_split_fields3).rec__rr_type__resourcerecordtype__class1;
  rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname,
  ((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordlist,
  ((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes,
  ((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes,
  ((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks,
  ((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers,
  ((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths,
  ((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname =
  extract__nextdomainname(((r).us_split_fields1).rec__ext__);
  rec__rr_type__nsec_record_type__nsecrecordtype__recordlist =
  extract__recordlist(((r).us_split_fields1).rec__ext__);
  rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes =
  extract__numberofrecordtypes(((r).us_split_fields1).rec__ext__);
  rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes =
  extract__recordtypes(((r).us_split_fields1).rec__ext__);
  rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks =
  extract__numberofblocks(((r).us_split_fields1).rec__ext__);
  rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers =
  extract__blocknumbers(((r).us_split_fields1).rec__ext__);
  rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths =
  extract__blocklengths(((r).us_split_fields1).rec__ext__);
  rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps =
  extract__bitmaps(((r).us_split_fields1).rec__ext__);
  rec__rr_type__resourcerecordtype__ttlinseconds1 =
  ((r).us_split_fields1).rec__rr_type__resourcerecordtype__ttlinseconds;
  rec__rr_type__resourcerecordtype__class1 =
  ((r).us_split_fields1).rec__rr_type__resourcerecordtype__class;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq25 : us_rep1, us_rep1 -> bool

axiom bool_eq_def24 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq25(a, b)].
  ((((((((((((bool_eq7(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname,
  1, 129,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname,
  1, 129) = true) and
  (bool_eq7(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordlist,
  1, 256,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordlist,
  1, 256) = true)) and
  (to_rep6(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes) = to_rep6(((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes))) and
  (bool_eq24(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes,
  1, 32,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes,
  1, 32) = true)) and
  (to_rep3(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks) = to_rep3(((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks))) and
  (bool_eq11(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers,
  1, 32,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers,
  1, 32) = true)) and
  (bool_eq17(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths,
  1, 32,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths,
  1, 32) = true)) and
  (bool_eq19(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps,
  1, 32,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps,
  1, 32) = true)) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1) = to_rep2(((b).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1))) and
  (to_rep5(((a).us_split_fields3).rec__rr_type__resourcerecordtype__class1) = to_rep5(((b).us_split_fields3).rec__rr_type__resourcerecordtype__class1))) ->
  (bool_eq25(a, b) = true)) and
  ((not ((((((((((bool_eq7(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname,
  1, 129,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname,
  1, 129) = true) and
  (bool_eq7(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordlist,
  1, 256,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordlist,
  1, 256) = true)) and
  (to_rep6(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes) = to_rep6(((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes))) and
  (bool_eq24(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes,
  1, 32,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes,
  1, 32) = true)) and
  (to_rep3(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks) = to_rep3(((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks))) and
  (bool_eq11(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers,
  1, 32,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers,
  1, 32) = true)) and
  (bool_eq17(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths,
  1, 32,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths,
  1, 32) = true)) and
  (bool_eq19(((a).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps,
  1, 32,
  ((b).us_split_fields3).rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps,
  1, 32) = true)) and
  (to_rep2(((a).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1) = to_rep2(((b).us_split_fields3).rec__rr_type__resourcerecordtype__ttlinseconds1))) and
  (to_rep5(((a).us_split_fields3).rec__rr_type__resourcerecordtype__class1) = to_rep5(((b).us_split_fields3).rec__rr_type__resourcerecordtype__class1)))) ->
  (bool_eq25(a, b) = false))))

logic us_tag1 : int

logic value__size8 : int

logic object__size8 : us_rep1 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep1 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,character) farray. forall a1:(int,character) farray.
  forall a2:recordtypeindexvalue. forall a3:(int,query_type) farray.
  forall a4:blocknumbervalue. forall a5:(int,byte) farray.
  forall a6:(int,blocklengthvalue) farray.
  forall a7:(int,(int,byte) farray) farray. forall a8:unsigned32.
  forall a9:classtype. forall a10:us_private. forall a11:int.
  (0 <= object__size8({ us_split_fields3 = {
  rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname = a;
  rec__rr_type__nsec_record_type__nsecrecordtype__recordlist = a1;
  rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes = a2;
  rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes = a3;
  rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks = a4;
  rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers = a5;
  rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths = a6;
  rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps = a7;
  rec__rr_type__resourcerecordtype__ttlinseconds1 = a8;
  rec__rr_type__resourcerecordtype__class1 = a9; rec__ext__1 = a10 };
  attr__tag1 = a11 })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,character) farray. forall a1:(int,character) farray.
  forall a2:recordtypeindexvalue. forall a3:(int,query_type) farray.
  forall a4:blocknumbervalue. forall a5:(int,byte) farray.
  forall a6:(int,blocklengthvalue) farray.
  forall a7:(int,(int,byte) farray) farray. forall a8:unsigned32.
  forall a9:classtype. forall a10:us_private. forall a11:int.
  (0 <= object__alignment8({ us_split_fields3 = {
  rec__rr_type__nsec_record_type__nsecrecordtype__nextdomainname = a;
  rec__rr_type__nsec_record_type__nsecrecordtype__recordlist = a1;
  rec__rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes = a2;
  rec__rr_type__nsec_record_type__nsecrecordtype__recordtypes = a3;
  rec__rr_type__nsec_record_type__nsecrecordtype__numberofblocks = a4;
  rec__rr_type__nsec_record_type__nsecrecordtype__blocknumbers = a5;
  rec__rr_type__nsec_record_type__nsecrecordtype__blocklengths = a6;
  rec__rr_type__nsec_record_type__nsecrecordtype__bitmaps = a7;
  rec__rr_type__resourcerecordtype__ttlinseconds1 = a8;
  rec__rr_type__resourcerecordtype__class1 = a9; rec__ext__1 = a10 };
  attr__tag1 = a11 })))

logic rr_type__nsec_record_type__nsecrecordtype__nextdomainname__first__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__nextdomainname__last__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__nextdomainname__position : int

axiom rr_type__nsec_record_type__nsecrecordtype__nextdomainname__first__bit_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__nextdomainname__first__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__nextdomainname__last__bit_axiom :
  (rr_type__nsec_record_type__nsecrecordtype__nextdomainname__first__bit <  rr_type__nsec_record_type__nsecrecordtype__nextdomainname__last__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__nextdomainname__position_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__nextdomainname__position)

logic rr_type__nsec_record_type__nsecrecordtype__recordlist__first__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__recordlist__last__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__recordlist__position : int

axiom rr_type__nsec_record_type__nsecrecordtype__recordlist__first__bit_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__recordlist__first__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__recordlist__last__bit_axiom :
  (rr_type__nsec_record_type__nsecrecordtype__recordlist__first__bit <  rr_type__nsec_record_type__nsecrecordtype__recordlist__last__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__recordlist__position_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__recordlist__position)

logic rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__first__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__last__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__position : int

axiom rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__first__bit_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__first__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__last__bit_axiom :
  (rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__first__bit <  rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__last__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__position_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__numberofrecordtypes__position)

logic rr_type__nsec_record_type__nsecrecordtype__recordtypes__first__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__recordtypes__last__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__recordtypes__position : int

axiom rr_type__nsec_record_type__nsecrecordtype__recordtypes__first__bit_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__recordtypes__first__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__recordtypes__last__bit_axiom :
  (rr_type__nsec_record_type__nsecrecordtype__recordtypes__first__bit <  rr_type__nsec_record_type__nsecrecordtype__recordtypes__last__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__recordtypes__position_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__recordtypes__position)

logic rr_type__nsec_record_type__nsecrecordtype__numberofblocks__first__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__numberofblocks__last__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__numberofblocks__position : int

axiom rr_type__nsec_record_type__nsecrecordtype__numberofblocks__first__bit_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__numberofblocks__first__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__numberofblocks__last__bit_axiom :
  (rr_type__nsec_record_type__nsecrecordtype__numberofblocks__first__bit <  rr_type__nsec_record_type__nsecrecordtype__numberofblocks__last__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__numberofblocks__position_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__numberofblocks__position)

logic rr_type__nsec_record_type__nsecrecordtype__blocknumbers__first__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__blocknumbers__last__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__blocknumbers__position : int

axiom rr_type__nsec_record_type__nsecrecordtype__blocknumbers__first__bit_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__blocknumbers__first__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__blocknumbers__last__bit_axiom :
  (rr_type__nsec_record_type__nsecrecordtype__blocknumbers__first__bit <  rr_type__nsec_record_type__nsecrecordtype__blocknumbers__last__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__blocknumbers__position_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__blocknumbers__position)

logic rr_type__nsec_record_type__nsecrecordtype__blocklengths__first__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__blocklengths__last__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__blocklengths__position : int

axiom rr_type__nsec_record_type__nsecrecordtype__blocklengths__first__bit_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__blocklengths__first__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__blocklengths__last__bit_axiom :
  (rr_type__nsec_record_type__nsecrecordtype__blocklengths__first__bit <  rr_type__nsec_record_type__nsecrecordtype__blocklengths__last__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__blocklengths__position_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__blocklengths__position)

logic rr_type__nsec_record_type__nsecrecordtype__bitmaps__first__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__bitmaps__last__bit : int

logic rr_type__nsec_record_type__nsecrecordtype__bitmaps__position : int

axiom rr_type__nsec_record_type__nsecrecordtype__bitmaps__first__bit_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__bitmaps__first__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__bitmaps__last__bit_axiom :
  (rr_type__nsec_record_type__nsecrecordtype__bitmaps__first__bit <  rr_type__nsec_record_type__nsecrecordtype__bitmaps__last__bit)

axiom rr_type__nsec_record_type__nsecrecordtype__bitmaps__position_axiom :
  (0 <= rr_type__nsec_record_type__nsecrecordtype__bitmaps__position)

logic rr_type__resourcerecordtype__ttlinseconds__first__bit1 : int

logic rr_type__resourcerecordtype__ttlinseconds__last__bit1 : int

logic rr_type__resourcerecordtype__ttlinseconds__position1 : int

axiom rr_type__resourcerecordtype__ttlinseconds__first__bit_axiom1 :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__first__bit1)

axiom rr_type__resourcerecordtype__ttlinseconds__last__bit_axiom1 :
  (rr_type__resourcerecordtype__ttlinseconds__first__bit1 <  rr_type__resourcerecordtype__ttlinseconds__last__bit1)

axiom rr_type__resourcerecordtype__ttlinseconds__position_axiom1 :
  (0 <= rr_type__resourcerecordtype__ttlinseconds__position1)

logic rr_type__resourcerecordtype__class__first__bit1 : int

logic rr_type__resourcerecordtype__class__last__bit1 : int

logic rr_type__resourcerecordtype__class__position1 : int

axiom rr_type__resourcerecordtype__class__first__bit_axiom1 :
  (0 <= rr_type__resourcerecordtype__class__first__bit1)

axiom rr_type__resourcerecordtype__class__last__bit_axiom1 :
  (rr_type__resourcerecordtype__class__first__bit1 <  rr_type__resourcerecordtype__class__last__bit1)

axiom rr_type__resourcerecordtype__class__position_axiom1 :
  (0 <= rr_type__resourcerecordtype__class__position1)

logic user_eq22 : us_rep1, us_rep1 -> bool

logic dummy25 : (int,character) farray

logic dummy26 : (int,character) farray

logic dummy27 : recordtypeindexvalue

logic dummy28 : (int,query_type) farray

logic dummy29 : blocknumbervalue

logic dummy30 : (int,byte) farray

logic dummy31 : (int,blocklengthvalue) farray

logic dummy32 : (int,(int,byte) farray) farray

logic dummy33 : unsigned32

logic dummy34 : classtype

logic dummy35 : us_private

logic dummy36 : int

type nsecrecordtype__ref = { nsecrecordtype__content : us_rep1
}

function nsecrecordtype__ref___projection(a: nsecrecordtype__ref) : us_rep1 =
  (a).nsecrecordtype__content

logic attr__ATTRIBUTE_ADDRESS : int

logic start_byte : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic nsec_record : (int,character) farray

logic nsec_record1 : (int,character) farray

logic nsec_record2 : recordtypeindexvalue

logic nsec_record3 : (int,query_type) farray

logic nsec_record4 : blocknumbervalue

logic nsec_record5 : (int,byte) farray

logic nsec_record6 : (int,blocklengthvalue) farray

logic nsec_record7 : (int,(int,byte) farray) farray

logic nsec_record8 : unsigned32

logic nsec_record9 : classtype

logic nsec_record10 : us_private

logic nsec_record11 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r15b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic to_rep8 : integer -> int

logic of_rep8 : int -> integer

axiom inversion_axiom8 :
  (forall x:integer [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 : (forall x:integer [to_rep8(x)]. in_range1(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range1(x) ->
  (to_rep8(of_rep8(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def25 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq23 : integer, integer -> bool

logic dummy37 : integer

type t16b__ref = { t16b__content : integer
}

function t16b__ref___projection(a: t16b__ref) : integer = (a).t16b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq27 : int, int -> bool

axiom bool_eq_def26 :
  (forall x:int. forall y:int [bool_eq27(x, y)]. (((x = y) -> (bool_eq27(x,
  y) = true)) and ((not (x = y)) -> (bool_eq27(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq24 : integer, integer -> bool

logic dummy38 : integer

type t19b__ref = { t19b__content : integer
}

function t19b__ref___projection(a: t19b__ref) : integer = (a).t19b__content

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def27 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq25 : integer, integer -> bool

logic dummy39 : integer

type t20b__ref = { t20b__content : integer
}

function t20b__ref___projection(a: t20b__ref) : integer = (a).t20b__content

logic attr__ATTRIBUTE_ADDRESS9 : int

 (* File "process_dns_request.adb", line 95, characters 0-0 *)
goal WP_parameter_def :
  (forall dstbytes:int. forall current_name_length:int.
  forall blockoffset:int. forall i:int. forall block:int. forall o:int.
  forall o1:int. forall temp___5868:(int,byte) farray.
  forall temp___5867:int. forall o2:int. forall o3:t. forall o4:byte.
  forall o5:int. forall o6:(int,byte) farray. forall o7:int. forall o8:int.
  forall o9:byte. forall o10:int. forall o11:(int,byte) farray.
  forall o12:byte. forall o13:int. forall o14:(int,byte) farray.
  forall o15:int. forall temp___5885:int. forall o16:int. forall o17:byte.
  forall o18:t. forall o19:byte. forall bytes:(int,byte) farray.
  forall result:int. forall current_name_length1:int. forall result1:int.
  forall i1:int. forall bytes1:(int,byte) farray. forall i2:int.
  forall result2:(int,byte) farray. forall bytes2:(int,byte) farray.
  forall bytes3:(int,byte) farray. forall i3:int.
  forall bytes4:(int,byte) farray. forall i4:int.
  forall bytes5:(int,byte) farray. forall i5:int.
  forall bytes6:(int,byte) farray. forall i6:int. forall result3:int.
  forall dstbytes1:int. forall result4:int. forall blockoffset1:int.
  forall result5:int. forall block1:int. forall bytes7:(int,byte) farray.
  forall dstbytes2:int. forall blockoffset2:int. forall block2:int.
  forall byte1:int. forall result6:int. forall dstbytes3:int.
  forall result7:(int,byte) farray. forall bytes8:(int,byte) farray.
  forall result8:(int,byte) farray. forall bytes9:(int,byte) farray.
  forall result9:int. forall byte2:int. forall byte3:int.
  (in_range4(start_byte) -> (((0 <= 8192) -> in_range3(dstbytes)) ->
  ((start_byte <= 6828) -> (((1 <= 129) -> in_range5(current_name_length)) ->
  (((1 <= 8180) -> in_range4(blockoffset)) -> (((o = (start_byte + 4)) and
  in_range4((start_byte + 4))) -> ((((o1 = wirenamelength(nsec_record)) and
  (in_range5(o1) and ((o1 = 129) or ((to_rep((nsec_record[o1])) = 0) and
  (forall q:int. (((1 <= q) and (q <= (o1 - 1))) ->
  (not (to_rep((nsec_record[q])) = 0)))))))) and (({ int__content = result
  } = { int__content = current_name_length }) and
  (current_name_length1 = o1))) -> (((current_name_length1 = r15b) and
  in_range5(r15b)) -> (((({ int__content = result1 } = { int__content = i
  }) and (i1 = 1)) and ((((1 <= i1) and (i1 <= r15b)) and
  ((((temp___5868 = bytes) and ((temp___5867 = i1) and
  (((((((start_byte <= (8174 - current_name_length1)) and (1 <= i2)) and
  (i2 <= 129)) and (1 <= current_name_length1)) and
  (current_name_length1 <= 129)) and
  (forall j:int. (((1 <= j) and (j <= 129)) ->
  ((0 <= to_rep((nsec_record[j]))) and (to_rep((nsec_record[j])) <= 255))))) and
  ((((1 <= r15b) -> dynamic_property(1, r15b, i2)) and ((1 <= i2) and
  (i2 <= r15b))) and (((((((o2 = to_rep((nsec_record[i2]))) and
  uint_in_range(to_rep((nsec_record[i2])))) and (o3 = of_int(o2))) and
  (to_rep1(o4) = o3)) and ((((1 <= (((start_byte + 6) - 1) + i2)) and
  ((((start_byte + 6) - 1) + i2) <= 8180)) and
  (o5 = (((start_byte + 6) - 1) + i2))) and (o6 = (bytes1[o5 <- o4])))) and
  ((bytes1 = result2) and (bytes2 = o6))) and (i2 = r15b)))))) and
  (((i2 = i3) and (bytes2 = bytes3)) and ((i4 = i2) and
  (bytes4 = bytes2)))) and ((({ int__content = i5 } = { int__content = i3
  }) and ({ map__content1 = bytes5 } = { map__content1 = bytes3 })) and
  ((i6 = i4) and (bytes6 = bytes4))))) or ((not ((1 <= i1) and
  (i1 <= r15b))) and (((i1 = i5) and (bytes = bytes5)) and ((i6 = i1) and
  (bytes6 = bytes)))))) -> ((({ int__content = result3 } = { int__content =
  dstbytes }) and (dstbytes1 = 0)) ->
  ((((o7 = (((start_byte + 6) - 1) + current_name_length1)) and
  in_range4((((start_byte + 6) - 1) + current_name_length1))) and (({
  int__content = result4 } = { int__content = blockoffset }) and
  (blockoffset1 = o7))) -> ((({ int__content = result5 } = { int__content =
  block }) and (block1 = 1)) -> (((1 <= block1) and
  (block1 <= to_rep3(nsec_record4))) ->
  (((((((((start_byte <= (8174 - current_name_length1)) and
  (1 <= current_name_length1)) and (current_name_length1 <= 129)) and
  (1 <= blockoffset2)) and
  (blockoffset2 <= ((((start_byte + 6) - 1) + current_name_length1) + ((block2 - 1) * 34)))) and
  (dstbytes2 <= ((block2 - 1) * 32))) and
  (1 <= to_rep4((nsec_record6[block2])))) and
  (to_rep4((nsec_record6[block2])) <= 32)) -> ((((((0 <= 8192) ->
  in_range3(dstbytes2)) and ((1 <= to_rep3(nsec_record4)) ->
  dynamic_property1(1, to_rep3(nsec_record4), block2))) and ((1 <= 8180) ->
  in_range4(blockoffset2))) and ((1 <= block2) and
  (block2 <= to_rep3(nsec_record4)))) ->
  ((((o8 = (dstbytes2 + to_rep4((nsec_record6[block2])))) and
  in_range3((dstbytes2 + to_rep4((nsec_record6[block2]))))) and
  ((dstbytes2 = result6) and (dstbytes3 = o8))) ->
  ((((to_rep1(o9) = to_rep1((nsec_record5[block2]))) and
  ((((1 <= (blockoffset2 + 1)) and ((blockoffset2 + 1) <= 8180)) and
  (o10 = (blockoffset2 + 1))) and (o11 = (bytes7[o10 <- o9])))) and
  ((result7 = bytes7) and (bytes8 = o11))) ->
  ((((to_rep1(o12) = of_int(to_rep4((nsec_record6[block2])))) and
  ((((1 <= (blockoffset2 + 2)) and ((blockoffset2 + 2) <= 8180)) and
  (o13 = (blockoffset2 + 2))) and (o14 = (bytes8[o13 <- o12])))) and
  ((result8 = bytes8) and (bytes9 = o14))) -> (((result9 = byte1) and
  (byte2 = 1)) -> (((1 <= byte2) and
  (byte2 <= to_rep4((nsec_record6[block2])))) ->
  (((((((((start_byte <= (8174 - current_name_length1)) and
  (1 <= current_name_length1)) and (current_name_length1 <= 129)) and
  (1 <= blockoffset2)) and
  (blockoffset2 <= ((((start_byte + 6) - 1) + current_name_length1) + ((block2 - 1) * 34)))) and
  (dstbytes3 <= (block2 * 32))) and (1 <= byte3)) and (byte3 <= 32)) ->
  ((((1 <= to_rep4((nsec_record6[block2]))) -> dynamic_property2(1,
  to_rep4((nsec_record6[block2])), byte3)) and ((1 <= byte3) and
  (byte3 <= to_rep4((nsec_record6[block2]))))) -> (((((((1 <= byte3) and
  (byte3 <= 32)) and (o16 = byte3)) and
  (o17 = ((nsec_record7[block2])[o16]))) and (o18 = to_rep1(o17))) and
  (to_rep1(o19) = o18)) -> ((((o15 = byte3) and in_range4(byte3)) and
  (temp___5885 = ((blockoffset2 + 2) + o15))) ->
  (1 <= temp___5885))))))))))))))))))))))))))
