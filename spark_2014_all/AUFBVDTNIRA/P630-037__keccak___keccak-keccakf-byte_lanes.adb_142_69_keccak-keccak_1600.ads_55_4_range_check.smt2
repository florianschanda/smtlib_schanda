(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort byte 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (byte byte) Bool)
(declare-const dummy2 byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep1 (byte) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) byte)
(assert (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x byte)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x byte)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort index_number 0)
(declare-fun index_numberqtint (index_number) Int)
(assert (forall ((i index_number)) (and (<= 0 (index_numberqtint i)) (<= (index_numberqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index_number index_number) Bool)
(declare-const dummy3 index_number)
(declare-datatypes () ((index_number__ref (mk_index_number__ref (index_number__content index_number)))))
(define-fun index_number__ref___projection ((a index_number__ref)) index_number (index_number__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int byte))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int byte)) (a__first Int) (a__last Int) (b (Array Int byte)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int byte)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int byte) (elts a))
(define-fun of_array ((a (Array Int byte)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int byte)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int byte)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content a))
(declare-sort lane_type 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))
(declare-fun user_eq5 (lane_type lane_type) Bool)
(declare-const dummy5 lane_type)
(declare-datatypes () ((lane_type__ref (mk_lane_type__ref (lane_type__content lane_type)))))
(define-fun lane_type__ref___projection ((a lane_type__ref)) lane_type (lane_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_314 (_ BitVec 64)) (temp___is_init_310 Bool) (temp___skip_constant_311 Bool) (temp___do_toplevel_312 Bool) (temp___do_typ_inv_313 Bool)) Bool true)
(declare-fun to_rep2 (lane_type) (_ BitVec 64))
(declare-fun of_rep2 ((_ BitVec 64)) lane_type)
(assert (forall ((x lane_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int4 ((x lane_type)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x lane_type)) (! (uint_in_range1 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort x_coord 0)
(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x04)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq6 (x_coord x_coord) Bool)
(declare-const dummy6 x_coord)
(declare-datatypes () ((x_coord__ref (mk_x_coord__ref (x_coord__content x_coord)))))
(define-fun x_coord__ref___projection ((a x_coord__ref)) x_coord (x_coord__content a))
(define-fun dynamic_invariant2 ((temp___expr_321 (_ BitVec 8)) (temp___is_init_317 Bool) (temp___skip_constant_318 Bool) (temp___do_toplevel_319 Bool) (temp___do_typ_inv_320 Bool)) Bool (=> (or (= temp___is_init_317 true) (bvule #x00 #x04)) (in_range4 temp___expr_321)))
(declare-sort y_coord 0)
(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x04)))
(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))
(declare-fun user_eq7 (y_coord y_coord) Bool)
(declare-const dummy7 y_coord)
(declare-datatypes () ((y_coord__ref (mk_y_coord__ref (y_coord__content y_coord)))))
(define-fun y_coord__ref___projection ((a y_coord__ref)) y_coord (y_coord__content a))
(define-fun dynamic_invariant3 ((temp___expr_328 (_ BitVec 8)) (temp___is_init_324 Bool) (temp___skip_constant_325 Bool) (temp___do_toplevel_326 Bool) (temp___do_typ_inv_327 Bool)) Bool (=> (or (= temp___is_init_324 true) (bvule #x00 #x04)) (in_range5 temp___expr_328)))
(declare-sort map1 0)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 (_ BitVec 8) (_ BitVec 8)) lane_type)
(declare-fun set (map1 (_ BitVec 8) (_ BitVec 8) lane_type) map1)
(assert (forall ((m map1)) (forall ((i (_ BitVec 8))) (forall ((j (_ BitVec 8))) (forall ((a lane_type)) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i (_ BitVec 8)) (i2 (_ BitVec 8))) (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8))) (forall ((a lane_type)) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide1 (map1 (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) map1)
(assert (forall ((a map1)) (forall ((new_first (_ BitVec 8)) (old_first (_ BitVec 8))) (forall ((new_first_2 (_ BitVec 8)) (old_first_2 (_ BitVec 8))) (forall ((i (_ BitVec 8))) (forall ((j (_ BitVec 8))) (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) (get a (bvsub i (bvsub new_first old_first)) (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get (slide1 a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq2 ((a map1) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b map1) (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8))) Bool (ite (and (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (ite (bvule a__first_2 a__last_2) (and (bvule b__first_2 b__last_2) (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2))) (bvugt b__first_2 b__last_2))) (forall ((temp___idx_155 (_ BitVec 8)) (temp___idx_156 (_ BitVec 8))) (=> (and (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last)) (and (bvule a__first_2 temp___idx_156) (bvule temp___idx_156 a__last_2))) (= (to_rep2 (get a temp___idx_155 temp___idx_156)) (to_rep2 (get b (bvadd (bvsub b__first a__first) temp___idx_155) (bvadd (bvsub b__first_2 a__first_2) temp___idx_156))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8))) (=> (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (ite (bvule a__first_2 a__last_2) (and (bvule b__first_2 b__last_2) (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2))) (bvugt b__first_2 b__last_2))) (forall ((temp___idx_155 (_ BitVec 8)) (temp___idx_156 (_ BitVec 8))) (=> (and (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last)) (and (bvule a__first_2 temp___idx_156) (bvule temp___idx_156 a__last_2))) (= (to_rep2 (get a temp___idx_155 temp___idx_156)) (to_rep2 (get b (bvadd (bvsub b__first a__first) temp___idx_155) (bvadd (bvsub b__first_2 a__first_2) temp___idx_156)))))))))))
(declare-const a map1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const data__first integer)
(declare-const data__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (integer integer) Bool)
(declare-const dummy8 integer)
(declare-datatypes () ((t67s__ref (mk_t67s__ref (t67s__content integer)))))
(define-fun t67s__ref___projection ((a1 t67s__ref)) integer (t67s__content a1))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int byte)) (rt1 t1)))))
(define-fun to_array1 ((a1 us_t1)) (Array Int byte) (elts1 a1))
(define-fun of_array1 ((a1 (Array Int byte)) (f Int) (l Int)) us_t1 (mk___t1 a1 (mk1 f l)))
(define-fun first3 ((a1 us_t1)) Int (to_rep (first2 (rt1 a1))))
(define-fun last3 ((a1 us_t1)) Int (to_rep (last2 (rt1 a1))))
(define-fun length1 ((a1 us_t1)) Int (ite (<= (first3 a1) (last3 a1)) (+ (- (last3 a1) (first3 a1)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int byte)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int byte)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int byte)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a1 (Array Int byte))) (<= 0 (object__size1 a1))))
(assert (<= 0 value__component__size1))
(assert (forall ((a1 (Array Int byte))) (<= 0 (object__component__size1 a1))))
(assert (<= 0 value__alignment1))
(assert (forall ((a1 (Array Int byte))) (<= 0 (object__alignment1 a1))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq9 (us_t1 us_t1) Bool)
(declare-const dummy9 us_t1)
(declare-datatypes () ((t68s__ref (mk_t68s__ref (t68s__content us_t1)))))
(define-fun t68s__ref___projection ((a1 t68s__ref)) us_t1 (t68s__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-fun temp_____aggregate_def_807 ((_ BitVec 8) Int Int) us_t1)
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_286 (_ BitVec 8)) (temp___is_init_282 Bool) (temp___skip_constant_283 Bool) (temp___do_toplevel_284 Bool) (temp___do_typ_inv_285 Bool)) Bool true)
(define-fun dynamic_invariant6 ((temp___expr_293 Int) (temp___is_init_289 Bool) (temp___skip_constant_290 Bool) (temp___do_toplevel_291 Bool) (temp___do_typ_inv_292 Bool)) Bool (=> (or (= temp___is_init_289 true) (<= 0 2147483647)) (in_range3 temp___expr_293)))
(define-fun dynamic_invariant7 ((temp___expr_300 us_t) (temp___is_init_296 Bool) (temp___skip_constant_297 Bool) (temp___do_toplevel_298 Bool) (temp___do_typ_inv_299 Bool)) Bool (=> (not (= temp___skip_constant_297 true)) (dynamic_property 0 2147483647 (first1 temp___expr_300) (last1 temp___expr_300))))
(assert (forall ((temp___809 (_ BitVec 8))) (forall ((temp___810 Int) (temp___811 Int)) (let ((temp___808 (temp_____aggregate_def_807 temp___809 temp___810 temp___811))) (=> (dynamic_invariant5 temp___809 true true true true) (and (=> (dynamic_property 0 2147483647 temp___810 temp___811) (and (= (first3 temp___808) temp___810) (= (last3 temp___808) temp___811))) (forall ((temp___812 Int)) (= (to_rep1 (select (to_array1 temp___808) temp___812)) temp___809))))))))
(declare-const data (Array Int byte))
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(declare-const remaining_bytes Int)
(declare-const offset Int)
(declare-const lane (_ BitVec 64))
(declare-const i Int)
(declare-const shift Int)
(declare-const initial_offset Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const temp___814 (Array Int byte))
(declare-const temp___8141 t1)
(declare-const temp___815 (Array Int byte))
(declare-const temp___8151 t)
(declare-const temp___816 (Array Int byte))
(declare-const temp___8161 t)
(declare-const o2 (Array Int byte))
(declare-const temp___832 (_ BitVec 64))
(declare-const temp___831 Int)
(declare-const temp___830 Int)
(declare-const temp___829 (_ BitVec 8))
(declare-const temp___828 (_ BitVec 8))
(declare-const temp___826 (Array Int byte))
(declare-const temp___834 Int)
(declare-const temp___833 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___819 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 (_ BitVec 64))
(declare-const o8 (_ BitVec 64))
(declare-const o9 (_ BitVec 64))
(declare-const o10 (_ BitVec 64))
(declare-const o11 (_ BitVec 8))
(declare-const o12 byte)
(declare-const o13 Int)
(declare-const o14 (Array Int byte))
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const temp___8191 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 (_ BitVec 64))
(declare-const o20 (_ BitVec 64))
(declare-const o21 (_ BitVec 64))
(declare-const o22 (_ BitVec 64))
(declare-const o23 (_ BitVec 8))
(declare-const o24 byte)
(declare-const o25 Int)
(declare-const o26 (Array Int byte))
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const temp___8192 Int)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const o31 (_ BitVec 64))
(declare-const o32 (_ BitVec 64))
(declare-const o33 (_ BitVec 64))
(declare-const o34 (_ BitVec 64))
(declare-const o35 (_ BitVec 8))
(declare-const o36 byte)
(declare-const o37 Int)
(declare-const o38 (Array Int byte))
(declare-const o39 Int)
(declare-const o40 Int)
(declare-const temp___8193 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const o43 (_ BitVec 64))
(declare-const o44 (_ BitVec 64))
(declare-const o45 (_ BitVec 64))
(declare-const o46 (_ BitVec 64))
(declare-const o47 (_ BitVec 8))
(declare-const o48 byte)
(declare-const o49 Int)
(declare-const o50 (Array Int byte))
(declare-const o51 Int)
(declare-const o52 Int)
(declare-const temp___8194 Int)
(declare-const o53 Int)
(declare-const o54 Int)
(declare-const o55 (_ BitVec 64))
(declare-const o56 (_ BitVec 64))
(declare-const o57 (_ BitVec 64))
(declare-const o58 (_ BitVec 64))
(declare-const o59 (_ BitVec 8))
(declare-const o60 byte)
(declare-const o61 Int)
(declare-const o62 (Array Int byte))
(declare-const o63 Int)
(declare-const o64 Int)
(declare-const temp___8195 Int)
(declare-const o65 Int)
(declare-const o66 Int)
(declare-const o67 (_ BitVec 64))
(declare-const o68 (_ BitVec 64))
(declare-const o69 (_ BitVec 64))
(declare-const o70 (_ BitVec 64))
(declare-const o71 (_ BitVec 8))
(declare-const o72 byte)
(declare-const o73 Int)
(declare-const o74 (Array Int byte))
(declare-const o75 Int)
(declare-const o76 Int)
(declare-const temp___8196 Int)
(declare-const o77 Int)
(declare-const o78 Int)
(declare-const o79 (_ BitVec 64))
(declare-const o80 (_ BitVec 64))
(declare-const o81 (_ BitVec 64))
(declare-const o82 (_ BitVec 64))
(declare-const o83 (_ BitVec 8))
(declare-const o84 byte)
(declare-const o85 Int)
(declare-const o86 (Array Int byte))
(declare-const o87 Int)
(declare-const o88 Int)
(declare-const temp___8197 Int)
(declare-const o89 Int)
(declare-const o90 Int)
(declare-const o91 (_ BitVec 64))
(declare-const o92 (_ BitVec 64))
(declare-const o93 (_ BitVec 64))
(declare-const o94 (_ BitVec 64))
(declare-const o95 (_ BitVec 8))
(declare-const o96 byte)
(declare-const o97 Int)
(declare-const o98 (Array Int byte))
(declare-const o99 (_ BitVec 8))
(declare-const o100 (_ BitVec 8))
(declare-const o101 Int)
(declare-const o102 Int)
(declare-const o103 Int)
(declare-const o104 Int)
(declare-const o105 Int)
(declare-const o106 Int)
(declare-const o107 Bool)
(declare-const lane1 (_ BitVec 64))
(declare-const i1 Int)
(declare-const result (_ BitVec 8))
(declare-const x1 (_ BitVec 8))
(declare-const result1 (_ BitVec 8))
(declare-const y1 (_ BitVec 8))
(declare-const result2 Int)
(declare-const remaining_bytes1 Int)
(declare-const result3 Int)
(declare-const offset1 Int)
(declare-const result4 (Array Int byte))
(declare-const data1 (Array Int byte))
(declare-const data2 (Array Int byte))
(declare-const x2 (_ BitVec 8))
(declare-const y2 (_ BitVec 8))
(declare-const remaining_bytes2 Int)
(declare-const offset2 Int)
(declare-const lane2 (_ BitVec 64))
(declare-const i2 Int)
(declare-const temp___8341 Int)
(declare-const temp___8331 Int)
(declare-const result5 Int)
(declare-const temp___8342 Int)
(declare-const result6 Int)
(declare-const temp___8332 Int)
(declare-const result7 t__ref1)
(declare-const lane3 (_ BitVec 64))
(declare-const result8 int__ref)
(declare-const i3 Int)
(declare-const result9 map__ref)
(declare-const data3 (Array Int byte))
(declare-const result10 int__ref)
(declare-const i4 Int)
(declare-const result11 map__ref)
(declare-const data4 (Array Int byte))
(declare-const result12 int__ref)
(declare-const i5 Int)
(declare-const result13 map__ref)
(declare-const data5 (Array Int byte))
(declare-const result14 int__ref)
(declare-const i6 Int)
(declare-const result15 map__ref)
(declare-const data6 (Array Int byte))
(declare-const result16 int__ref)
(declare-const i7 Int)
(declare-const result17 map__ref)
(declare-const data7 (Array Int byte))
(declare-const result18 int__ref)
(declare-const i8 Int)
(declare-const result19 map__ref)
(declare-const data8 (Array Int byte))
(declare-const result20 int__ref)
(declare-const i9 Int)
(declare-const result21 map__ref)
(declare-const data9 (Array Int byte))
(declare-const result22 int__ref)
(declare-const i10 Int)
(declare-const result23 map__ref)
(declare-const data10 (Array Int byte))
(declare-const result24 t__ref)
(declare-const x3 (_ BitVec 8))
(declare-const result25 t__ref)
(declare-const y3 (_ BitVec 8))
(declare-const result26 int__ref)
(declare-const remaining_bytes3 Int)
(declare-const result27 int__ref)
(declare-const offset3 Int)
(declare-const data11 map__ref)
(declare-const x4 t__ref)
(declare-const y4 t__ref)
(declare-const remaining_bytes4 int__ref)
(declare-const offset4 int__ref)
(declare-const lane4 t__ref1)
(declare-const i11 int__ref)
(declare-const data12 (Array Int byte))
(declare-const x5 (_ BitVec 8))
(declare-const y5 (_ BitVec 8))
(declare-const remaining_bytes5 Int)
(declare-const offset5 Int)
(declare-const lane5 (_ BitVec 64))
(declare-const i12 Int)
(declare-const data13 map__ref)
(declare-const x6 t__ref)
(declare-const y6 t__ref)
(declare-const remaining_bytes6 int__ref)
(declare-const offset6 int__ref)
(declare-const lane6 t__ref1)
(declare-const i13 int__ref)
(declare-const data14 (Array Int byte))
(declare-const x7 (_ BitVec 8))
(declare-const y7 (_ BitVec 8))
(declare-const remaining_bytes7 Int)
(declare-const offset7 Int)
(declare-const lane7 (_ BitVec 64))
(declare-const i14 Int)
(declare-const result28 t__ref1)
(declare-const lane8 (_ BitVec 64))
(declare-const result29 int__ref)
(declare-const shift1 Int)
(declare-const result30 int__ref)
(declare-const initial_offset1 Int)
(declare-const remaining_bytes8 Int)
(declare-const offset8 Int)
(declare-const shift2 Int)
(assert (dynamic_property 0 2147483647 (to_rep data__first) (to_rep data__last)))
(assert (<= (ite (<= (to_rep data__first) (to_rep data__last)) (+ (- (to_rep data__last) (to_rep data__first)) 1) 0) 200))
(assert (= result x))
(assert (= x1 #x00))
(assert (in_range4 x1))
(assert (= result1 y))
(assert (= y1 #x00))
(assert (in_range5 y1))
(assert (=> (<= (to_rep data__first) (to_rep data__last)) (= o (+ (- (to_rep data__last) (to_rep data__first)) 1))))
(assert (=> (not (<= (to_rep data__first) (to_rep data__last))) (= o 0)))
(assert (and (= o1 o) (in_range2 o)))
(assert (= result2 remaining_bytes))
(assert (= remaining_bytes1 o1))
(assert (in_range2 remaining_bytes1))
(assert (= result3 offset))
(assert (= offset1 0))
(assert (in_range2 offset1))
(assert (= (to_rep (first2 (rt1 (temp_____aggregate_def_807 #x00 (to_rep data__first) (to_rep data__last))))) (to_rep data__first)))
(assert (= (to_rep (last2 (rt1 (temp_____aggregate_def_807 #x00 (to_rep data__first) (to_rep data__last))))) (to_rep data__last)))
(assert (= (mk___t1 temp___814 temp___8141) (temp_____aggregate_def_807 #x00 (to_rep data__first) (to_rep data__last))))
(assert (= temp___814 temp___815))
(assert (= (mk (to_rep (first2 temp___8141)) (to_rep (last2 temp___8141))) temp___8151))
(assert (= (ite (<= (to_rep (first temp___8151)) (to_rep (last temp___8151))) (+ (- (to_rep (last temp___8151)) (to_rep (first temp___8151))) 1) 0) (ite (<= (to_rep data__first) (to_rep data__last)) (+ (- (to_rep data__last) (to_rep data__first)) 1) 0)))
(assert (= (mk___t temp___816 temp___8161) (mk___t temp___815 temp___8151)))
(assert (= o2 (slide temp___816 (to_rep (first temp___8161)) (to_rep data__first))))
(assert (= result4 data))
(assert (= data1 o2))
(assert (=> (<= 8 remaining_bytes1) (= temp___832 lane)))
(assert (=> (<= 8 remaining_bytes1) (= temp___831 offset1)))
(assert (=> (<= 8 remaining_bytes1) (= temp___830 remaining_bytes1)))
(assert (=> (<= 8 remaining_bytes1) (= temp___829 y1)))
(assert (=> (<= 8 remaining_bytes1) (= temp___828 x1)))
(assert (=> (<= 8 remaining_bytes1) (= temp___826 data1)))
(assert (=> (<= 8 remaining_bytes1) (= 0 temp___834)))
(assert (=> (<= 8 remaining_bytes1) (= 0 temp___833)))
(assert (=> (<= 8 remaining_bytes1) (and (= (mod2 offset2 8) 0) (= (+ offset2 remaining_bytes2) (ite (<= (to_rep data__first) (to_rep data__last)) (+ (- (to_rep data__last) (to_rep data__first)) 1) 0)))))
(assert (=> (<= 8 remaining_bytes1) (and (and (and (and (=> (bvule #x00 #x04) (in_range4 x2)) (=> (bvule #x00 #x04) (in_range5 y2))) (=> (<= 0 2147483647) (in_range2 remaining_bytes2))) (=> (<= 0 2147483647) (in_range2 offset2))) (<= 8 remaining_bytes2))))
(assert (=> (<= 8 remaining_bytes1) (= temp___8341 result5)))
(assert (=> (<= 8 remaining_bytes1) (= temp___8342 offset2)))
(assert (=> (<= 8 remaining_bytes1) (= temp___8331 result6)))
(assert (=> (<= 8 remaining_bytes1) (= temp___8332 remaining_bytes2)))
(assert (=> (<= 8 remaining_bytes1) (= result7 (mk_t__ref1 lane2))))
(assert (=> (<= 8 remaining_bytes1) (= lane3 (to_rep2 (get a x2 y2)))))
(assert (=> (<= 8 remaining_bytes1) (= result8 (mk_int__ref i2))))
(assert (=> (<= 8 remaining_bytes1) (= i3 0)))
(assert (=> (<= 8 remaining_bytes1) (and (= o5 (* i3 8)) (in_range1 (* i3 8)))))
(assert (=> (<= 8 remaining_bytes1) (and (= o6 o5) (in_range2 o5))))
(assert (=> (<= 8 remaining_bytes1) (= o7 ((_ int2bv 64) o6))))
(assert (=> (<= 8 remaining_bytes1) (= o8 (bvlshr lane3 o7))))
(assert (=> (<= 8 remaining_bytes1) (= o9 (bvand o8 #x00000000000000FF))))
(assert (=> (<= 8 remaining_bytes1) (= o10 o9)))
(assert (=> (<= 8 remaining_bytes1) (= o11 ((_ extract 7 0) o10))))
(assert (=> (<= 8 remaining_bytes1) (= (to_rep1 o12) o11)))
(assert (=> (<= 8 remaining_bytes1) (and (= o3 (+ (to_rep data__first) offset2)) (in_range1 (+ (to_rep data__first) offset2)))))
(assert (=> (<= 8 remaining_bytes1) (= o4 (+ o3 i3))))
(assert (=> (<= 8 remaining_bytes1) (and (= temp___819 o4) (in_range1 o4))))
(assert (=> (<= 8 remaining_bytes1) (and (<= (to_rep data__first) temp___819) (<= temp___819 (to_rep data__last)))))
(assert (=> (<= 8 remaining_bytes1) (= o13 temp___819)))
(assert (=> (<= 8 remaining_bytes1) (= o14 (store data2 o13 o12))))
(assert (=> (<= 8 remaining_bytes1) (= result9 (mk_map__ref data2))))
(assert (=> (<= 8 remaining_bytes1) (= data3 o14)))
(assert (=> (<= 8 remaining_bytes1) (= result10 (mk_int__ref i3))))
(assert (=> (<= 8 remaining_bytes1) (= i4 1)))
(assert (=> (<= 8 remaining_bytes1) (and (= o17 (* i4 8)) (in_range1 (* i4 8)))))
(assert (=> (<= 8 remaining_bytes1) (and (= o18 o17) (in_range2 o17))))
(assert (=> (<= 8 remaining_bytes1) (= o19 ((_ int2bv 64) o18))))
(assert (=> (<= 8 remaining_bytes1) (= o20 (bvlshr lane3 o19))))
(assert (=> (<= 8 remaining_bytes1) (= o21 (bvand o20 #x00000000000000FF))))
(assert (=> (<= 8 remaining_bytes1) (= o22 o21)))
(assert (=> (<= 8 remaining_bytes1) (= o23 ((_ extract 7 0) o22))))
(assert (=> (<= 8 remaining_bytes1) (= (to_rep1 o24) o23)))
(assert (=> (<= 8 remaining_bytes1) (and (= o15 (+ (to_rep data__first) offset2)) (in_range1 (+ (to_rep data__first) offset2)))))
(assert (=> (<= 8 remaining_bytes1) (= o16 (+ o15 i4))))
(assert (=> (<= 8 remaining_bytes1) (and (= temp___8191 o16) (in_range1 o16))))
(assert (=> (<= 8 remaining_bytes1) (and (<= (to_rep data__first) temp___8191) (<= temp___8191 (to_rep data__last)))))
(assert (=> (<= 8 remaining_bytes1) (= o25 temp___8191)))
(assert (=> (<= 8 remaining_bytes1) (= o26 (store data3 o25 o24))))
(assert (=> (<= 8 remaining_bytes1) (= result11 (mk_map__ref data3))))
(assert (=> (<= 8 remaining_bytes1) (= data4 o26)))
(assert (=> (<= 8 remaining_bytes1) (= result12 (mk_int__ref i4))))
(assert (=> (<= 8 remaining_bytes1) (= i5 2)))
(assert (=> (<= 8 remaining_bytes1) (and (= o29 (* i5 8)) (in_range1 (* i5 8)))))
(assert (=> (<= 8 remaining_bytes1) (and (= o30 o29) (in_range2 o29))))
(assert (=> (<= 8 remaining_bytes1) (= o31 ((_ int2bv 64) o30))))
(assert (=> (<= 8 remaining_bytes1) (= o32 (bvlshr lane3 o31))))
(assert (=> (<= 8 remaining_bytes1) (= o33 (bvand o32 #x00000000000000FF))))
(assert (=> (<= 8 remaining_bytes1) (= o34 o33)))
(assert (=> (<= 8 remaining_bytes1) (= o35 ((_ extract 7 0) o34))))
(assert (=> (<= 8 remaining_bytes1) (= (to_rep1 o36) o35)))
(assert (=> (<= 8 remaining_bytes1) (and (= o27 (+ (to_rep data__first) offset2)) (in_range1 (+ (to_rep data__first) offset2)))))
(assert (=> (<= 8 remaining_bytes1) (= o28 (+ o27 i5))))
(assert (=> (<= 8 remaining_bytes1) (and (= temp___8192 o28) (in_range1 o28))))
(assert (=> (<= 8 remaining_bytes1) (and (<= (to_rep data__first) temp___8192) (<= temp___8192 (to_rep data__last)))))
(assert (=> (<= 8 remaining_bytes1) (= o37 temp___8192)))
(assert (=> (<= 8 remaining_bytes1) (= o38 (store data4 o37 o36))))
(assert (=> (<= 8 remaining_bytes1) (= result13 (mk_map__ref data4))))
(assert (=> (<= 8 remaining_bytes1) (= data5 o38)))
(assert (=> (<= 8 remaining_bytes1) (= result14 (mk_int__ref i5))))
(assert (=> (<= 8 remaining_bytes1) (= i6 3)))
(assert (=> (<= 8 remaining_bytes1) (and (= o41 (* i6 8)) (in_range1 (* i6 8)))))
(assert (=> (<= 8 remaining_bytes1) (and (= o42 o41) (in_range2 o41))))
(assert (=> (<= 8 remaining_bytes1) (= o43 ((_ int2bv 64) o42))))
(assert (=> (<= 8 remaining_bytes1) (= o44 (bvlshr lane3 o43))))
(assert (=> (<= 8 remaining_bytes1) (= o45 (bvand o44 #x00000000000000FF))))
(assert (=> (<= 8 remaining_bytes1) (= o46 o45)))
(assert (=> (<= 8 remaining_bytes1) (= o47 ((_ extract 7 0) o46))))
(assert (=> (<= 8 remaining_bytes1) (= (to_rep1 o48) o47)))
(assert (=> (<= 8 remaining_bytes1) (and (= o39 (+ (to_rep data__first) offset2)) (in_range1 (+ (to_rep data__first) offset2)))))
(assert (=> (<= 8 remaining_bytes1) (= o40 (+ o39 i6))))
(assert (=> (<= 8 remaining_bytes1) (and (= temp___8193 o40) (in_range1 o40))))
(assert (=> (<= 8 remaining_bytes1) (and (<= (to_rep data__first) temp___8193) (<= temp___8193 (to_rep data__last)))))
(assert (=> (<= 8 remaining_bytes1) (= o49 temp___8193)))
(assert (=> (<= 8 remaining_bytes1) (= o50 (store data5 o49 o48))))
(assert (=> (<= 8 remaining_bytes1) (= result15 (mk_map__ref data5))))
(assert (=> (<= 8 remaining_bytes1) (= data6 o50)))
(assert (=> (<= 8 remaining_bytes1) (= result16 (mk_int__ref i6))))
(assert (=> (<= 8 remaining_bytes1) (= i7 4)))
(assert (=> (<= 8 remaining_bytes1) (and (= o53 (* i7 8)) (in_range1 (* i7 8)))))
(assert (=> (<= 8 remaining_bytes1) (and (= o54 o53) (in_range2 o53))))
(assert (=> (<= 8 remaining_bytes1) (= o55 ((_ int2bv 64) o54))))
(assert (=> (<= 8 remaining_bytes1) (= o56 (bvlshr lane3 o55))))
(assert (=> (<= 8 remaining_bytes1) (= o57 (bvand o56 #x00000000000000FF))))
(assert (=> (<= 8 remaining_bytes1) (= o58 o57)))
(assert (=> (<= 8 remaining_bytes1) (= o59 ((_ extract 7 0) o58))))
(assert (=> (<= 8 remaining_bytes1) (= (to_rep1 o60) o59)))
(assert (=> (<= 8 remaining_bytes1) (and (= o51 (+ (to_rep data__first) offset2)) (in_range1 (+ (to_rep data__first) offset2)))))
(assert (=> (<= 8 remaining_bytes1) (= o52 (+ o51 i7))))
(assert (=> (<= 8 remaining_bytes1) (and (= temp___8194 o52) (in_range1 o52))))
(assert (=> (<= 8 remaining_bytes1) (and (<= (to_rep data__first) temp___8194) (<= temp___8194 (to_rep data__last)))))
(assert (=> (<= 8 remaining_bytes1) (= o61 temp___8194)))
(assert (=> (<= 8 remaining_bytes1) (= o62 (store data6 o61 o60))))
(assert (=> (<= 8 remaining_bytes1) (= result17 (mk_map__ref data6))))
(assert (=> (<= 8 remaining_bytes1) (= data7 o62)))
(assert (=> (<= 8 remaining_bytes1) (= result18 (mk_int__ref i7))))
(assert (=> (<= 8 remaining_bytes1) (= i8 5)))
(assert (=> (<= 8 remaining_bytes1) (and (= o65 (* i8 8)) (in_range1 (* i8 8)))))
(assert (=> (<= 8 remaining_bytes1) (and (= o66 o65) (in_range2 o65))))
(assert (=> (<= 8 remaining_bytes1) (= o67 ((_ int2bv 64) o66))))
(assert (=> (<= 8 remaining_bytes1) (= o68 (bvlshr lane3 o67))))
(assert (=> (<= 8 remaining_bytes1) (= o69 (bvand o68 #x00000000000000FF))))
(assert (=> (<= 8 remaining_bytes1) (= o70 o69)))
(assert (=> (<= 8 remaining_bytes1) (= o71 ((_ extract 7 0) o70))))
(assert (=> (<= 8 remaining_bytes1) (= (to_rep1 o72) o71)))
(assert (=> (<= 8 remaining_bytes1) (and (= o63 (+ (to_rep data__first) offset2)) (in_range1 (+ (to_rep data__first) offset2)))))
(assert (=> (<= 8 remaining_bytes1) (= o64 (+ o63 i8))))
(assert (=> (<= 8 remaining_bytes1) (and (= temp___8195 o64) (in_range1 o64))))
(assert (=> (<= 8 remaining_bytes1) (and (<= (to_rep data__first) temp___8195) (<= temp___8195 (to_rep data__last)))))
(assert (=> (<= 8 remaining_bytes1) (= o73 temp___8195)))
(assert (=> (<= 8 remaining_bytes1) (= o74 (store data7 o73 o72))))
(assert (=> (<= 8 remaining_bytes1) (= result19 (mk_map__ref data7))))
(assert (=> (<= 8 remaining_bytes1) (= data8 o74)))
(assert (=> (<= 8 remaining_bytes1) (= result20 (mk_int__ref i8))))
(assert (=> (<= 8 remaining_bytes1) (= i9 6)))
(assert (=> (<= 8 remaining_bytes1) (and (= o77 (* i9 8)) (in_range1 (* i9 8)))))
(assert (=> (<= 8 remaining_bytes1) (and (= o78 o77) (in_range2 o77))))
(assert (=> (<= 8 remaining_bytes1) (= o79 ((_ int2bv 64) o78))))
(assert (=> (<= 8 remaining_bytes1) (= o80 (bvlshr lane3 o79))))
(assert (=> (<= 8 remaining_bytes1) (= o81 (bvand o80 #x00000000000000FF))))
(assert (=> (<= 8 remaining_bytes1) (= o82 o81)))
(assert (=> (<= 8 remaining_bytes1) (= o83 ((_ extract 7 0) o82))))
(assert (=> (<= 8 remaining_bytes1) (= (to_rep1 o84) o83)))
(assert (=> (<= 8 remaining_bytes1) (and (= o75 (+ (to_rep data__first) offset2)) (in_range1 (+ (to_rep data__first) offset2)))))
(assert (=> (<= 8 remaining_bytes1) (= o76 (+ o75 i9))))
(assert (=> (<= 8 remaining_bytes1) (and (= temp___8196 o76) (in_range1 o76))))
(assert (=> (<= 8 remaining_bytes1) (and (<= (to_rep data__first) temp___8196) (<= temp___8196 (to_rep data__last)))))
(assert (=> (<= 8 remaining_bytes1) (= o85 temp___8196)))
(assert (=> (<= 8 remaining_bytes1) (= o86 (store data8 o85 o84))))
(assert (=> (<= 8 remaining_bytes1) (= result21 (mk_map__ref data8))))
(assert (=> (<= 8 remaining_bytes1) (= data9 o86)))
(assert (=> (<= 8 remaining_bytes1) (= result22 (mk_int__ref i9))))
(assert (=> (<= 8 remaining_bytes1) (= i10 7)))
(assert (=> (<= 8 remaining_bytes1) (and (= o89 (* i10 8)) (in_range1 (* i10 8)))))
(assert (=> (<= 8 remaining_bytes1) (and (= o90 o89) (in_range2 o89))))
(assert (=> (<= 8 remaining_bytes1) (= o91 ((_ int2bv 64) o90))))
(assert (=> (<= 8 remaining_bytes1) (= o92 (bvlshr lane3 o91))))
(assert (=> (<= 8 remaining_bytes1) (= o93 (bvand o92 #x00000000000000FF))))
(assert (=> (<= 8 remaining_bytes1) (= o94 o93)))
(assert (=> (<= 8 remaining_bytes1) (= o95 ((_ extract 7 0) o94))))
(assert (=> (<= 8 remaining_bytes1) (= (to_rep1 o96) o95)))
(assert (=> (<= 8 remaining_bytes1) (and (= o87 (+ (to_rep data__first) offset2)) (in_range1 (+ (to_rep data__first) offset2)))))
(assert (=> (<= 8 remaining_bytes1) (= o88 (+ o87 i10))))
(assert (=> (<= 8 remaining_bytes1) (and (= temp___8197 o88) (in_range1 o88))))
(assert (=> (<= 8 remaining_bytes1) (and (<= (to_rep data__first) temp___8197) (<= temp___8197 (to_rep data__last)))))
(assert (=> (<= 8 remaining_bytes1) (= o97 temp___8197)))
(assert (=> (<= 8 remaining_bytes1) (= o98 (store data9 o97 o96))))
(assert (=> (<= 8 remaining_bytes1) (= result23 (mk_map__ref data9))))
(assert (=> (<= 8 remaining_bytes1) (= data10 o98)))
(assert (=> (<= 8 remaining_bytes1) (=> (bvule (bvsub #x05 x2) #x01) (= o99 (bvsub (bvadd x2 #x01) #x05)))))
(assert (=> (<= 8 remaining_bytes1) (=> (not (bvule (bvsub #x05 x2) #x01)) (= o99 (bvadd x2 #x01)))))
(assert (=> (<= 8 remaining_bytes1) (= result24 (mk_t__ref x2))))
(assert (=> (<= 8 remaining_bytes1) (= x3 o99)))
(assert (=> (<= 8 remaining_bytes1) (=> (= x3 #x00) (=> (bvule (bvsub #x05 y2) #x01) (= o100 (bvsub (bvadd y2 #x01) #x05))))))
(assert (=> (<= 8 remaining_bytes1) (=> (= x3 #x00) (=> (not (bvule (bvsub #x05 y2) #x01)) (= o100 (bvadd y2 #x01))))))
(assert (=> (<= 8 remaining_bytes1) (=> (= x3 #x00) (= result25 (mk_t__ref y2)))))
(assert (=> (<= 8 remaining_bytes1) (=> (= x3 #x00) (= y3 o100))))
(assert (=> (<= 8 remaining_bytes1) (=> (not (= x3 #x00)) (= y3 y2))))
(assert (=> (<= 8 remaining_bytes1) (and (= o101 (- remaining_bytes2 8)) (in_range2 (- remaining_bytes2 8)))))
(assert (=> (<= 8 remaining_bytes1) (= result26 (mk_int__ref remaining_bytes2))))
(assert (=> (<= 8 remaining_bytes1) (= remaining_bytes3 o101)))
(assert (=> (<= 8 remaining_bytes1) (and (= o102 (+ offset2 8)) (in_range1 (+ offset2 8)))))
(assert (=> (<= 8 remaining_bytes1) (= result27 (mk_int__ref offset2))))
(assert (=> (<= 8 remaining_bytes1) (= offset3 o102)))
(assert (=> (<= 8 remaining_bytes1) (not (<= 8 remaining_bytes3))))
(assert (=> (<= 8 remaining_bytes1) (= i11 (mk_int__ref i10))))
(assert (=> (<= 8 remaining_bytes1) (= lane4 (mk_t__ref1 lane3))))
(assert (=> (<= 8 remaining_bytes1) (= offset4 (mk_int__ref offset3))))
(assert (=> (<= 8 remaining_bytes1) (= remaining_bytes4 (mk_int__ref remaining_bytes3))))
(assert (=> (<= 8 remaining_bytes1) (= y4 (mk_t__ref y3))))
(assert (=> (<= 8 remaining_bytes1) (= x4 (mk_t__ref x3))))
(assert (=> (<= 8 remaining_bytes1) (= data11 (mk_map__ref data10))))
(assert (=> (<= 8 remaining_bytes1) (= i12 i10)))
(assert (=> (<= 8 remaining_bytes1) (= lane5 lane3)))
(assert (=> (<= 8 remaining_bytes1) (= offset5 offset3)))
(assert (=> (<= 8 remaining_bytes1) (= remaining_bytes5 remaining_bytes3)))
(assert (=> (<= 8 remaining_bytes1) (= y5 y3)))
(assert (=> (<= 8 remaining_bytes1) (= x5 x3)))
(assert (=> (<= 8 remaining_bytes1) (= data12 data10)))
(assert (=> (<= 8 remaining_bytes1) (= i13 i11)))
(assert (=> (<= 8 remaining_bytes1) (= lane6 lane4)))
(assert (=> (<= 8 remaining_bytes1) (= offset6 offset4)))
(assert (=> (<= 8 remaining_bytes1) (= remaining_bytes6 remaining_bytes4)))
(assert (=> (<= 8 remaining_bytes1) (= y6 y4)))
(assert (=> (<= 8 remaining_bytes1) (= x6 x4)))
(assert (=> (<= 8 remaining_bytes1) (= data13 data11)))
(assert (=> (<= 8 remaining_bytes1) (= i14 i12)))
(assert (=> (<= 8 remaining_bytes1) (= lane7 lane5)))
(assert (=> (<= 8 remaining_bytes1) (= offset7 offset5)))
(assert (=> (<= 8 remaining_bytes1) (= remaining_bytes7 remaining_bytes5)))
(assert (=> (<= 8 remaining_bytes1) (= y7 y5)))
(assert (=> (<= 8 remaining_bytes1) (= x7 x5)))
(assert (=> (<= 8 remaining_bytes1) (= data14 data12)))
(assert (=> (not (<= 8 remaining_bytes1)) (= i13 (mk_int__ref i))))
(assert (=> (not (<= 8 remaining_bytes1)) (= lane6 (mk_t__ref1 lane))))
(assert (=> (not (<= 8 remaining_bytes1)) (= offset6 (mk_int__ref offset1))))
(assert (=> (not (<= 8 remaining_bytes1)) (= remaining_bytes6 (mk_int__ref remaining_bytes1))))
(assert (=> (not (<= 8 remaining_bytes1)) (= y6 (mk_t__ref y1))))
(assert (=> (not (<= 8 remaining_bytes1)) (= x6 (mk_t__ref x1))))
(assert (=> (not (<= 8 remaining_bytes1)) (= data13 (mk_map__ref data1))))
(assert (=> (not (<= 8 remaining_bytes1)) (= i14 i1)))
(assert (=> (not (<= 8 remaining_bytes1)) (= lane7 lane1)))
(assert (=> (not (<= 8 remaining_bytes1)) (= offset7 offset1)))
(assert (=> (not (<= 8 remaining_bytes1)) (= remaining_bytes7 remaining_bytes1)))
(assert (=> (not (<= 8 remaining_bytes1)) (= y7 y1)))
(assert (=> (not (<= 8 remaining_bytes1)) (= x7 x1)))
(assert (=> (not (<= 8 remaining_bytes1)) (= data14 data1)))
(assert (< 0 (int__content remaining_bytes6)))
(assert (= result28 lane6))
(assert (= lane8 (to_rep2 (get a (t__content x6) (t__content y6)))))
(assert (= result29 (mk_int__ref shift)))
(assert (= shift1 0))
(assert (in_range2 shift1))
(assert (= result30 (mk_int__ref initial_offset)))
(assert (= initial_offset1 (int__content offset6)))
(assert (in_range2 initial_offset1))
(assert (< 0 (int__content remaining_bytes6)))
(assert (and (and (= (+ offset8 remaining_bytes8) (ite (<= (to_rep data__first) (to_rep data__last)) (+ (- (to_rep data__last) (to_rep data__first)) 1) 0)) (= (mod2 shift2 8) 0)) (= shift2 (* (- offset8 initial_offset1) 8))))
(assert (and (and (and (=> (<= 0 2147483647) (in_range2 shift2)) (=> (<= 0 2147483647) (in_range2 remaining_bytes8))) (=> (<= 0 2147483647) (in_range2 offset8))) (< 0 remaining_bytes8)))
(assert (and (= o104 (- offset8 initial_offset1)) (in_range1 (- offset8 initial_offset1))))
(assert (= o105 (* o104 8)))
(assert (and (= o106 o105) (in_range1 o105)))
(assert (= o107 (ite (= shift2 o106) true false)))
(assert (=> (<= (to_rep data__first) (to_rep data__last)) (= o103 (+ (- (to_rep data__last) (to_rep data__first)) 1))))
(assert (=> (not (<= (to_rep data__first) (to_rep data__last))) (= o103 0)))
(assert (not (in_range1 o103)))
(check-sat)
(exit)
