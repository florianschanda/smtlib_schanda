(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

axiom Power_non_neg :
  (forall x:int. forall y:int. (((0 <= x) and (0 <= y)) -> (0 <= power(x,
  y))))

axiom Power_monotonic :
  (forall x:int. forall n:int. forall m:int. (((0 <  x) and ((0 <= n) and
  (n <= m))) -> (power(x, n) <= power(x, m))))

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_01 : (pow2(0) = 1)

axiom Power_s1 :
  (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_11 : (pow2(1) = 2)

axiom Power_sum1 :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(4294967296 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power1 : t, int -> t

axiom Power_02 : (forall x:t. (power1(x, 0) = one))

axiom Power_12 : (forall x:t. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t. forall n:int. ((0 <  n) -> (power1(x, n) = mul(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power1(mul(x, y),
  n) = mul(power1(x, n), power1(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 18446744073709551615)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(18446744073709551616 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  18446744073709551616)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power2 : t1, int -> t1

axiom Power_03 : (forall x:t1. (power2(x, 0) = one1))

axiom Power_13 : (forall x:t1. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul1(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power2(x, n) = mul1(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul1(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power2(mul1(x, y),
  n) = mul1(power2(x, n), power2(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic to_int2 : bool -> int

axiom to_int_def2 :
  (forall b:bool [to_int2(b)]. (((b = true) -> (to_int2(b) = 1)) and
  ((not (b = true)) -> (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def :
  (forall i:int [of_int2(i)]. (((i = 0) -> (of_int2(i) = false)) and
  ((not (i = 0)) -> (of_int2(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type word32

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq2 : word32, word32 -> bool

logic dummy2 : word32

type word32__ref = { word32__content : word32
}

function word32__ref___projection(a: word32__ref) : word32 =
  (a).word32__content

logic to_rep1 : word32 -> t

logic of_rep1 : t -> word32

axiom inversion_axiom1 :
  (forall x:word32 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int3(x: word32) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:word32 [to_int3(x)]. uint_in_range(to_int3(x)))

type word64

logic attr__ATTRIBUTE_MODULUS1 : t1

logic bool_eq7 : t1, t1 -> bool

axiom bool_eq_def6 :
  (forall x:t1. forall y:t1 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq3 : word64, word64 -> bool

logic dummy3 : word64

type word64__ref = { word64__content : word64
}

function word64__ref___projection(a: word64__ref) : word64 =
  (a).word64__content

type map__ref = { map__content : (int,word32) farray
}

logic slide : (int,word32) farray, int, int -> (int,word32) farray

axiom slide_eq :
  (forall a:(int,word32) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,word32) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,word32) farray, int, int, (int,word32) farray, int,
  int -> (int,word32) farray

axiom concat_def :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : word32, int -> (int,word32) farray

axiom singleton_def :
  (forall v:word32.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq8 : (int,word32) farray, int, int, (int,word32) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,word32) farray. forall a__first:int. forall a__last:int.
  forall b:(int,word32) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep1((a[temp___idx_134])) = to_rep1((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep1((a[temp___idx_134])) = to_rep1((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep1((a[temp___idx_134])) = to_rep1((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,word32) farray, int, int, (int,word32) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq8(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq8(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult(to_rep1((a[(i + 1)])), to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,word32) farray. forall b:(int,word32) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq8(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt(to_rep1((a[(j + 1)])), to_rep1((b[(i + 1)]))))))))))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq9 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type math_int__ref = { math_int__content : us_rep
}

function math_int__ref___projection(a: math_int__ref) : us_rep =
  (a).math_int__content

logic oadd : us_rep, us_rep -> us_rep

logic oadd__function_guard : us_rep, us_rep, us_rep -> prop

axiom oadd__post_axiom : true

logic osubtract : us_rep, us_rep -> us_rep

logic osubtract__function_guard : us_rep, us_rep, us_rep -> prop

axiom osubtract__post_axiom : true

logic omultiply : us_rep, us_rep -> us_rep

logic omultiply__function_guard : us_rep, us_rep, us_rep -> prop

axiom omultiply__post_axiom : true

logic odivide : us_rep, us_rep -> us_rep

logic odivide__function_guard : us_rep, us_rep, us_rep -> prop

axiom odivide__post_axiom : true

logic omod : us_rep, us_rep -> us_rep

logic omod__function_guard : us_rep, us_rep, us_rep -> prop

axiom omod__post_axiom : true

logic oexpon : us_rep, int -> us_rep

logic oexpon__function_guard : us_rep, us_rep, int -> prop

axiom oexpon__post_axiom : true

logic oexpon__2 : us_rep, us_rep -> us_rep

logic oexpon__2__function_guard : us_rep, us_rep, us_rep -> prop

axiom oexpon__2__post_axiom : true

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom oeq__post_axiom : true

logic olt : us_rep, us_rep -> bool

logic olt__function_guard : bool, us_rep, us_rep -> prop

axiom olt__post_axiom : true

logic ole : us_rep, us_rep -> bool

logic ole__function_guard : bool, us_rep, us_rep -> prop

axiom ole__post_axiom : true

logic from_integer : int -> us_rep

logic from_integer__function_guard : us_rep, int -> prop

axiom from_integer__post_axiom : true

logic from_word32 : t -> us_rep

logic from_word32__function_guard : us_rep, t -> prop

axiom from_word32__post_axiom : true

logic from_word64 : t1 -> us_rep

logic from_word64__function_guard : us_rep, t1 -> prop

axiom from_word64__post_axiom : true

logic base : unit -> us_rep

logic base__function_guard : us_rep, unit -> prop

axiom base__post_axiom : true

axiom base__def_axiom : (base(void) = oexpon(from_word32(of_int(2)), 32))

type big_int_range

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483646))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : big_int_range, big_int_range -> bool

logic dummy5 : big_int_range

type big_int_range__ref = { big_int_range__content : big_int_range
}

function big_int_range__ref___projection(a: big_int_range__ref) : big_int_range =
  (a).big_int_range__content

type t2

logic first : t2 -> integer

logic last : t2 -> integer

logic mk : int, int -> t2

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,word32) farray; rt : t2
}

function to_array(a: us_t) : (int,word32) farray = (a).elts

function of_array(a: (int,word32) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,word32) farray -> int

logic value__component__size : int

logic object__component__size : (int,word32) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,word32) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,word32) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,word32) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,word32) farray. (0 <= object__alignment1(a)))

function bool_eq11(x: us_t, y: us_t) : bool = bool_eq8((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy6 : (int,word32) farray

logic dummy7 : t2

type big_int__ref = { big_int__content : us_t
}

function big_int__ref___projection(a: big_int__ref) : us_t =
  (a).big_int__content

logic num_of_big_int : us_t, int, int -> us_rep

logic num_of_big_int__function_guard : us_rep, us_t, int, int -> prop

axiom num_of_big_int__post_axiom : true

logic inverse : us_rep, us_rep -> us_rep

logic inverse__function_guard : us_rep, us_rep, us_rep -> prop

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic a_first : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic a_last : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic x : (int,word32) farray

logic x1 : t2

logic attr__ATTRIBUTE_ADDRESS3 : int

logic x_first : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic e : (int,word32) farray

logic e1 : t2

logic attr__ATTRIBUTE_ADDRESS5 : int

logic e_first : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic e_last : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic m : (int,word32) farray

logic m1 : t2

logic attr__ATTRIBUTE_ADDRESS8 : int

logic m_first : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic aux1__first : integer

logic aux1__last : integer

logic attr__ATTRIBUTE_ADDRESS11 : int

logic aux1_first : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic aux2__first : integer

logic aux2__last : integer

logic attr__ATTRIBUTE_ADDRESS13 : int

logic aux2_first : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic aux3__first : integer

logic aux3__last : integer

logic attr__ATTRIBUTE_ADDRESS15 : int

logic aux3_first : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic aux4__first : integer

logic aux4__last : integer

logic attr__ATTRIBUTE_ADDRESS17 : int

logic aux4_first : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic r : (int,word32) farray

logic r1 : t2

logic attr__ATTRIBUTE_ADDRESS19 : int

logic r_first : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic m_inv : t

logic attr__ATTRIBUTE_ADDRESS21 : int

logic bit_set : us_t, int, t1 -> bool

logic bit_set__function_guard : bool, us_t, int, t1 -> prop

axiom bit_set__post_axiom :
  (forall a:(int,word32) farray. forall a1:t2.
  (forall a_first1:int.
  (forall i:t1 [bit_set({ elts = a; rt = a1 }, a_first1, i)].
  ((in_range2(a_first1) and (((to_rep(first(a1)) <= a_first1) and
  (a_first1 <= to_rep(last(a1)))) and ule1(udiv1(i, of_int1(32)),
  of_int1((to_rep(last(a1)) - a_first1))))) -> (((bit_set({ elts = a; rt = a1
  }, a_first1, i) = true) -> (not (((tqtint1(urem1(i,
  of_int1(32))) <  4294967296) and
  (bw_and(to_rep1((a[(a_first1 + tqtint1(udiv1(i, of_int1(32))))])),
  lsl_bv(of_int(1), of_int(tqtint1(urem1(i, of_int1(32)))))) = of_int(0))) or
  ((not (tqtint1(urem1(i, of_int1(32))) <  4294967296)) and
  (bw_and(to_rep1((a[(a_first1 + tqtint1(udiv1(i, of_int1(32))))])),
  of_int(0)) = of_int(0)))))) and ((not (((tqtint1(urem1(i,
  of_int1(32))) <  4294967296) ->
  (bw_and(to_rep1((a[(a_first1 + tqtint1(udiv1(i, of_int1(32))))])),
  lsl_bv(of_int(1), of_int(tqtint1(urem1(i,
  of_int1(32)))))) = of_int(0))) and ((not (tqtint1(urem1(i,
  of_int1(32))) <  4294967296)) ->
  (bw_and(to_rep1((a[(a_first1 + tqtint1(udiv1(i, of_int1(32))))])),
  of_int(0)) = of_int(0))))) -> (bit_set({ elts = a; rt = a1 }, a_first1,
  i) = true)))))))

logic attr__ATTRIBUTE_ADDRESS22 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic attr__ATTRIBUTE_ADDRESS25 : int

logic attr__ATTRIBUTE_ADDRESS26 : int

predicate dynamic_property1(first_int: int, last_int: int, x2: int) =
  ((first_int <= x2) and (x2 <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x2:int. forall y:int [bool_eq12(x2, y)]. (((x2 = y) ->
  (bool_eq12(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq12(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy8 : integer

type t79b__ref = { t79b__content : integer
}

function t79b__ref___projection(a: t79b__ref) : integer = (a).t79b__content

logic attr__ATTRIBUTE_ADDRESS27 : int

logic r94b : int

logic attr__ATTRIBUTE_ADDRESS28 : int

predicate dynamic_property2(first_int: int, last_int: int, x2: int) =
  ((first_int <= x2) and (x2 <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x2:int. forall y:int [bool_eq13(x2, y)]. (((x2 = y) ->
  (bool_eq13(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq13(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy9 : integer

type t95b__ref = { t95b__content : integer
}

function t95b__ref___projection(a: t95b__ref) : integer = (a).t95b__content

logic attr__ATTRIBUTE_ADDRESS29 : int

axiom inverse__post_axiom : true

logic a : (int,word32) farray

logic j : int

logic l : int

logic s : int

logic i : t1

logic w : t

logic h : int

logic o : us_rep

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : us_rep

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : us_rep

logic o11 : us_rep

logic o12 : us_rep

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : us_rep

logic o17 : us_rep

logic o18 : us_rep

logic o19 : int

logic o20 : int

logic o21 : int

logic o22 : int

logic o23 : us_rep

logic o24 : us_rep

logic o25 : int

logic o26 : int

logic o27 : int

logic o28 : int

logic o29 : int

logic o30 : int

logic o31 : bool

logic o32 : bool

logic o33 : int

logic o34 : int

logic o35 : int

logic o36 : int

logic o37 : int

logic o38 : int

logic o39 : int

logic o40 : int

logic o41 : int

logic o42 : int

logic o43 : int

logic o44 : int

logic o45 : int

logic o46 : int

logic o47 : int

logic o48 : int

logic o49 : int

logic o50 : int

logic o51 : int

logic o52 : int

logic o53 : bool

logic o54 : bool

logic o55 : int

logic o56 : int

logic o57 : int

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : bool

logic o62 : bool

logic o63 : int

logic o64 : int

logic o65 : int

logic o66 : int

logic o67 : int

logic o68 : int

logic o69 : bool

logic o70 : bool

logic o71 : int

logic o72 : int

logic o73 : int

logic o74 : int

logic o75 : int

logic o76 : int

logic o77 : bool

logic o78 : bool

logic o79 : int

logic o80 : int

logic o81 : int

logic o82 : int

logic o83 : int

logic o84 : int

logic o85 : bool

logic o86 : bool

logic o87 : int

logic o88 : int

logic o89 : int

logic o90 : int

logic o91 : int

logic o92 : int

logic o93 : bool

logic o94 : bool

logic o95 : int

logic o96 : int

logic o97 : int

logic o98 : word32

logic o99 : int

logic o100 : (int,word32) farray

logic o101 : int

logic o102 : int

logic o103 : int

logic o104 : int

logic o105 : int

logic o106 : us_rep

logic o107 : us_rep

logic o108 : bool

logic o109 : int

logic o110 : us_rep

logic o111 : int

logic o112 : us_rep

logic o113 : int

logic o114 : us_rep

logic o115 : us_rep

logic o116 : us_rep

logic o117 : int

logic o118 : us_rep

logic o119 : us_rep

logic o120 : int

logic o121 : us_rep

logic o122 : us_rep

logic o123 : bool

logic o124 : int

logic o125 : us_rep

logic o126 : us_rep

logic o127 : int

logic o128 : us_rep

logic o129 : int

logic o130 : us_rep

logic o131 : us_rep

logic o132 : bool

logic o133 : int

logic o134 : us_rep

logic o135 : int

logic o136 : us_rep

logic o137 : us_rep

logic o138 : int

logic o139 : us_rep

logic o140 : us_rep

logic o141 : int

logic o142 : us_rep

logic o143 : us_rep

logic o144 : bool

logic o145 : int

logic o146 : int

logic us : int

logic o147 : int

logic o148 : int

logic temp___638 : int

logic temp___636 : int

logic temp___633 : (int,word32) farray

logic temp___631 : (int,word32) farray

logic o149 : int

logic o150 : int

logic o151 : us_rep

logic o152 : us_rep

logic o153 : bool

logic o154 : int

logic o155 : us_rep

logic o156 : int

logic o157 : us_rep

logic o158 : int

logic o159 : us_rep

logic o160 : us_rep

logic o161 : us_rep

logic o162 : int

logic o163 : us_rep

logic o164 : us_rep

logic o165 : int

logic o166 : us_rep

logic o167 : us_rep

logic o168 : bool

logic o169 : int

logic o170 : us_rep

logic o171 : us_rep

logic o172 : int

logic o173 : us_rep

logic o174 : int

logic o175 : us_rep

logic o176 : us_rep

logic o177 : bool

logic n : int

logic o178 : int

logic o179 : int

logic o180 : int

logic o181 : int

logic o182 : int

logic o183 : int

logic o184 : int

logic o185 : int

logic o186 : us_rep

logic o187 : int

logic o188 : int

logic o189 : int

logic o190 : int

logic o191 : us_rep

logic o192 : us_rep

logic o193 : int

logic o194 : us_rep

logic o195 : us_rep

logic o196 : int

logic o197 : us_rep

logic o198 : us_rep

logic o199 : bool

logic o200 : int

logic o201 : int

logic o202 : int

logic o203 : int

logic o204 : int

logic o205 : int

logic o206 : int

logic o207 : int

logic o208 : int

logic o209 : int

logic o210 : int

logic o211 : int

logic o212 : int

logic o213 : int

logic o214 : us_rep

logic o215 : us_rep

logic o216 : bool

logic o217 : int

logic o218 : us_rep

logic o219 : int

logic o220 : us_rep

logic o221 : int

logic o222 : us_rep

logic o223 : us_rep

logic o224 : us_rep

logic o225 : int

logic o226 : us_rep

logic o227 : us_rep

logic o228 : int

logic o229 : us_rep

logic o230 : us_rep

logic o231 : bool

logic o232 : int

logic o233 : us_rep

logic o234 : us_rep

logic o235 : int

logic o236 : us_rep

logic o237 : int

logic o238 : us_rep

logic o239 : us_rep

logic o240 : bool

logic n1 : int

logic o241 : int

logic o242 : int

logic o243 : int

logic o244 : int

logic o245 : int

logic o246 : int

logic o247 : int

logic o248 : int

logic o249 : us_rep

logic o250 : int

logic o251 : int

logic o252 : int

logic o253 : int

logic o254 : us_rep

logic o255 : us_rep

logic o256 : int

logic o257 : us_rep

logic o258 : us_rep

logic o259 : int

logic o260 : us_rep

logic o261 : us_rep

logic o262 : bool

logic o263 : int

logic o264 : int

logic o265 : t1

logic o266 : t1

logic o267 : t1

logic o268 : t1

logic temp___700 : int

logic temp___699 : int

logic temp___698 : (int,word32) farray

logic temp___696 : t

logic temp___695 : t1

logic temp___694 : (int,word32) farray

logic o269 : int

logic o270 : int

logic o271 : us_rep

logic o272 : us_rep

logic o273 : bool

logic o274 : int

logic o275 : us_rep

logic o276 : int

logic o277 : us_rep

logic o278 : int

logic o279 : us_rep

logic o280 : us_rep

logic o281 : us_rep

logic o282 : int

logic o283 : us_rep

logic o284 : us_rep

logic o285 : int

logic o286 : us_rep

logic o287 : us_rep

logic o288 : bool

logic o289 : int

logic o290 : us_rep

logic o291 : int

logic o292 : us_rep

logic o293 : int

logic o294 : int

logic o295 : int

logic o296 : int

logic o297 : us_rep

logic o298 : us_rep

logic o299 : us_rep

logic o300 : us_rep

logic o301 : us_rep

logic o302 : us_rep

logic o303 : us_rep

logic o304 : us_rep

logic o305 : us_rep

logic o306 : int

logic o307 : us_rep

logic o308 : us_rep

logic o309 : int

logic o310 : us_rep

logic o311 : us_rep

logic o312 : bool

logic n2 : int

logic o313 : int

logic o314 : int

logic us1 : int

logic o315 : int

logic o316 : int

logic o317 : int

logic o318 : bool

logic o319 : int

logic o320 : int

logic o321 : int

logic o322 : int

logic o323 : int

logic o324 : int

logic o325 : int

logic o326 : int

logic o327 : us_rep

logic o328 : int

logic o329 : int

logic o330 : int

logic o331 : int

logic o332 : us_rep

logic o333 : us_rep

logic o334 : int

logic o335 : us_rep

logic o336 : us_rep

logic o337 : int

logic o338 : us_rep

logic o339 : us_rep

logic o340 : bool

logic o341 : int

logic o342 : int

logic o343 : t1

logic o344 : t1

logic o345 : t1

logic o346 : bool

logic temp___645 : int

logic temp___644 : int

logic temp___643 : t

logic o347 : int

logic o348 : int

logic o349 : us_rep

logic o350 : us_rep

logic o351 : bool

logic o352 : int

logic o353 : us_rep

logic o354 : int

logic o355 : us_rep

logic o356 : int

logic o357 : us_rep

logic o358 : us_rep

logic o359 : us_rep

logic o360 : int

logic o361 : us_rep

logic o362 : us_rep

logic o363 : int

logic o364 : us_rep

logic o365 : us_rep

logic o366 : bool

logic o367 : int

logic o368 : us_rep

logic o369 : int

logic o370 : us_rep

logic o371 : int

logic o372 : int

logic o373 : int

logic o374 : int

logic o375 : us_rep

logic o376 : us_rep

logic o377 : us_rep

logic o378 : us_rep

logic o379 : us_rep

logic o380 : us_rep

logic o381 : us_rep

logic o382 : us_rep

logic o383 : us_rep

logic o384 : int

logic o385 : us_rep

logic o386 : us_rep

logic o387 : int

logic o388 : us_rep

logic o389 : us_rep

logic o390 : bool

logic n3 : int

logic o391 : int

logic o392 : int

logic us2 : int

logic o393 : int

logic o394 : int

logic o395 : int

logic o396 : bool

logic o397 : int

logic o398 : int

logic o399 : int

logic o400 : int

logic o401 : int

logic o402 : int

logic o403 : int

logic o404 : int

logic o405 : us_rep

logic o406 : int

logic o407 : int

logic o408 : int

logic o409 : int

logic o410 : us_rep

logic o411 : us_rep

logic o412 : int

logic o413 : us_rep

logic o414 : us_rep

logic o415 : int

logic o416 : us_rep

logic o417 : us_rep

logic o418 : bool

logic o419 : us_rep

logic o420 : us_rep

logic o421 : int

logic o422 : int

logic o423 : int

logic o424 : int

logic o425 : us_rep

logic o426 : us_rep

logic o427 : int

logic o428 : int

logic o429 : int

logic o430 : int

logic o431 : us_rep

logic o432 : us_rep

logic o433 : us_rep

logic o434 : us_rep

logic o435 : us_rep

logic o436 : us_rep

logic o437 : us_rep

logic o438 : us_rep

logic o439 : us_rep

logic o440 : us_rep

logic o441 : us_rep

logic o442 : us_rep

logic o443 : bool

logic o444 : int

logic o445 : bool

logic o446 : us_rep

logic o447 : us_rep

logic o448 : us_rep

logic o449 : us_rep

logic o450 : bool

logic o451 : int

logic o452 : int

logic o453 : t1

logic o454 : t1

logic o455 : t1

logic o456 : bool

logic o457 : int

logic o458 : int

logic o459 : t

logic o460 : t

logic o461 : t

logic o462 : int

logic o463 : int

logic temp___655 : int

logic temp___670 : (int,word32) farray

logic temp___668 : (int,word32) farray

logic temp___675 : int

logic temp___666 : int

logic o464 : int

logic o465 : int

logic o466 : us_rep

logic o467 : us_rep

logic o468 : bool

logic o469 : int

logic o470 : us_rep

logic o471 : int

logic o472 : us_rep

logic o473 : int

logic o474 : us_rep

logic o475 : us_rep

logic o476 : us_rep

logic o477 : int

logic o478 : us_rep

logic o479 : us_rep

logic o480 : int

logic o481 : us_rep

logic o482 : us_rep

logic o483 : bool

logic o484 : int

logic o485 : us_rep

logic o486 : int

logic o487 : us_rep

logic o488 : int

logic o489 : int

logic o490 : int

logic o491 : int

logic o492 : us_rep

logic o493 : us_rep

logic o494 : us_rep

logic o495 : us_rep

logic o496 : us_rep

logic o497 : us_rep

logic o498 : us_rep

logic o499 : us_rep

logic o500 : us_rep

logic o501 : us_rep

logic o502 : us_rep

logic o503 : us_rep

logic o504 : int

logic o505 : us_rep

logic o506 : us_rep

logic o507 : int

logic o508 : us_rep

logic o509 : us_rep

logic o510 : bool

logic n4 : int

logic o511 : int

logic o512 : int

logic us3 : int

logic o513 : int

logic o514 : int

logic o515 : int

logic o516 : bool

logic o517 : int

logic o518 : int

logic o519 : int

logic o520 : int

logic o521 : int

logic o522 : int

logic o523 : int

logic o524 : int

logic o525 : us_rep

logic o526 : int

logic o527 : int

logic o528 : int

logic o529 : int

logic o530 : us_rep

logic o531 : us_rep

logic o532 : int

logic o533 : us_rep

logic o534 : us_rep

logic o535 : int

logic o536 : us_rep

logic o537 : us_rep

logic o538 : bool

logic o539 : us_rep

logic o540 : int

logic o541 : int

logic o542 : int

logic o543 : int

logic o544 : us_rep

logic o545 : us_rep

logic o546 : us_rep

logic o547 : us_rep

logic o548 : us_rep

logic o549 : us_rep

logic o550 : us_rep

logic o551 : us_rep

logic o552 : us_rep

logic o553 : us_rep

logic o554 : us_rep

logic o555 : us_rep

logic o556 : bool

logic o557 : int

logic o558 : bool

logic o559 : us_rep

logic o560 : us_rep

logic o561 : us_rep

logic o562 : us_rep

logic o563 : bool

logic o564 : int

logic o565 : int

logic o566 : t1

logic o567 : t1

logic o568 : t1

logic o569 : bool

logic o570 : int

logic o571 : int

logic o572 : us_rep

logic o573 : us_rep

logic o574 : bool

logic o575 : int

logic o576 : us_rep

logic o577 : int

logic o578 : us_rep

logic o579 : int

logic o580 : us_rep

logic o581 : us_rep

logic o582 : us_rep

logic o583 : int

logic o584 : us_rep

logic o585 : us_rep

logic o586 : int

logic o587 : us_rep

logic o588 : us_rep

logic o589 : bool

logic o590 : int

logic o591 : us_rep

logic o592 : int

logic o593 : us_rep

logic o594 : int

logic o595 : int

logic o596 : int

logic o597 : int

logic o598 : us_rep

logic o599 : us_rep

logic o600 : us_rep

logic o601 : us_rep

logic o602 : us_rep

logic o603 : us_rep

logic o604 : us_rep

logic o605 : us_rep

logic o606 : us_rep

logic o607 : us_rep

logic o608 : us_rep

logic o609 : us_rep

logic o610 : int

logic o611 : us_rep

logic o612 : us_rep

logic o613 : int

logic o614 : us_rep

logic o615 : us_rep

logic o616 : bool

logic n5 : int

logic o617 : int

logic o618 : int

logic us4 : int

logic o619 : int

logic o620 : int

logic o621 : int

logic o622 : bool

logic o623 : int

logic o624 : int

logic o625 : int

logic o626 : int

logic o627 : int

logic o628 : int

logic o629 : int

logic o630 : int

logic o631 : us_rep

logic o632 : int

logic o633 : int

logic o634 : int

logic o635 : int

logic o636 : us_rep

logic o637 : us_rep

logic o638 : int

logic o639 : us_rep

logic o640 : us_rep

logic o641 : int

logic o642 : us_rep

logic o643 : us_rep

logic o644 : bool

logic o645 : us_rep

logic o646 : int

logic o647 : int

logic o648 : int

logic o649 : int

logic o650 : us_rep

logic o651 : us_rep

logic o652 : us_rep

logic o653 : us_rep

logic o654 : us_rep

logic o655 : us_rep

logic o656 : us_rep

logic o657 : us_rep

logic o658 : us_rep

logic o659 : us_rep

logic o660 : us_rep

logic o661 : us_rep

logic o662 : bool

logic o663 : int

logic o664 : bool

logic o665 : us_rep

logic o666 : us_rep

logic o667 : us_rep

logic o668 : us_rep

logic o669 : bool

logic o670 : int

logic o671 : int

logic o672 : t1

logic o673 : t1

logic o674 : t1

logic o675 : bool

logic o676 : int

logic o677 : int

logic o678 : int

logic o679 : int

logic o680 : int

logic o681 : int

logic o682 : int

logic o683 : int

logic o684 : int

logic o685 : us_rep

logic o686 : us_rep

logic o687 : bool

logic o688 : int

logic o689 : us_rep

logic o690 : int

logic o691 : us_rep

logic o692 : int

logic o693 : us_rep

logic o694 : us_rep

logic o695 : us_rep

logic o696 : int

logic o697 : us_rep

logic o698 : us_rep

logic o699 : int

logic o700 : us_rep

logic o701 : us_rep

logic o702 : bool

logic o703 : int

logic o704 : us_rep

logic o705 : int

logic o706 : us_rep

logic o707 : int

logic o708 : int

logic o709 : int

logic o710 : int

logic o711 : us_rep

logic o712 : us_rep

logic o713 : us_rep

logic o714 : us_rep

logic o715 : us_rep

logic o716 : us_rep

logic o717 : us_rep

logic o718 : us_rep

logic o719 : us_rep

logic o720 : us_rep

logic o721 : us_rep

logic o722 : int

logic o723 : us_rep

logic o724 : us_rep

logic o725 : int

logic o726 : us_rep

logic o727 : us_rep

logic o728 : bool

logic n6 : int

logic o729 : int

logic o730 : int

logic us5 : int

logic o731 : int

logic o732 : int

logic o733 : int

logic o734 : bool

logic o735 : int

logic o736 : int

logic o737 : int

logic o738 : int

logic o739 : int

logic o740 : int

logic o741 : int

logic o742 : int

logic o743 : us_rep

logic o744 : int

logic o745 : int

logic o746 : int

logic o747 : int

logic o748 : us_rep

logic o749 : us_rep

logic o750 : int

logic o751 : us_rep

logic o752 : us_rep

logic o753 : int

logic o754 : us_rep

logic o755 : us_rep

logic o756 : bool

logic o757 : us_rep

logic o758 : us_rep

logic o759 : us_rep

logic o760 : us_rep

logic o761 : bool

logic o762 : int

logic o763 : int

logic o764 : t1

logic o765 : t1

logic o766 : t1

logic o767 : bool

logic o768 : int

logic o769 : int

logic o770 : int

logic o771 : int

logic o772 : int

logic o773 : int

logic o774 : int

logic o775 : int

logic o776 : us_rep

logic o777 : int

logic o778 : int

logic o779 : int

logic o780 : int

logic o781 : us_rep

logic o782 : us_rep

logic o783 : int

logic o784 : int

logic o785 : int

logic o786 : int

logic o787 : us_rep

logic o788 : us_rep

logic a1 : (int,word32) farray

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : bool

logic result6 : bool

logic result7 : bool

logic result8 : bool

logic result9 : int

logic l1 : int

logic aux1 : (int,word32) farray

logic result10 : (int,word32) farray

logic aux11 : (int,word32) farray

logic aux3 : (int,word32) farray

logic aux4 : (int,word32) farray

logic aux2 : (int,word32) farray

logic result11 : int

logic h1 : int

logic a2 : (int,word32) farray

logic aux41 : (int,word32) farray

logic h2 : int

logic a3 : (int,word32) farray

logic aux42 : (int,word32) farray

logic result12 : int

logic h3 : int

logic a4 : (int,word32) farray

logic aux43 : (int,word32) farray

logic h4 : int

logic a5 : (int,word32) farray

logic aux44 : (int,word32) farray

logic h5 : int

logic a6 : (int,word32) farray

logic aux45 : (int,word32) farray

logic h6 : int

logic a7 : (int,word32) farray

logic aux46 : (int,word32) farray

logic h7 : int

logic a8 : (int,word32) farray

logic aux47 : (int,word32) farray

logic h8 : int

logic a9 : (int,word32) farray

logic aux48 : (int,word32) farray

logic h9 : int

logic result13 : t1

logic i1 : t1

logic a10 : (int,word32) farray

logic aux31 : (int,word32) farray

logic j1 : int

logic s1 : int

logic i2 : t1

logic w1 : t

logic h10 : int

logic result14 : bool

logic result15 : bool

logic result16 : t

logic w2 : t

logic result17 : int

logic s2 : int

logic result18 : int

logic j2 : int

logic j3 : int

logic s3 : int

logic w3 : t

logic result19 : bool

logic result20 : bool

logic result21 : t

logic w4 : t

logic result22 : int

logic s4 : int

logic s5 : int

logic w5 : t

logic s6 : int

logic w6 : t

logic result23 : int

logic j4 : int

logic j5 : int

logic s7 : int

logic w7 : t

logic j6 : int

logic s8 : int

logic w8 : t

logic j7 : int

logic s9 : int

logic w9 : t

logic j8 : int

logic s10 : int

logic w10 : t

logic j9 : int

logic s11 : int

logic w11 : t

logic j10 : int

logic s12 : int

logic w12 : t

logic j11 : int

logic s13 : int

logic w13 : t

logic j12 : int

logic s14 : int

logic w14 : t

logic j13 : int

logic s15 : int

logic w15 : t

logic j14 : int

logic s16 : int

logic w16 : t

logic result24 : int

logic s17 : int

logic result25 : int

logic h11 : int

logic a11 : (int,word32) farray

logic aux32 : (int,word32) farray

logic h12 : int

logic result26 : bool

logic a12 : (int,word32) farray

logic aux33 : (int,word32) farray

logic result27 : bool

logic result28 : int

logic h13 : int

logic a13 : (int,word32) farray

logic aux34 : (int,word32) farray

logic h14 : int

logic a14 : (int,word32) farray

logic aux35 : (int,word32) farray

logic h15 : int

logic a15 : (int,word32) farray

logic aux36 : (int,word32) farray

logic h16 : int

logic a16 : (int,word32) farray

logic aux37 : (int,word32) farray

logic h17 : int

logic a17 : (int,word32) farray

logic aux38 : (int,word32) farray

logic h18 : int

logic a18 : (int,word32) farray

logic aux39 : (int,word32) farray

logic h19 : int

logic a19 : (int,word32) farray

logic aux310 : (int,word32) farray

logic h20 : int

logic a20 : (int,word32) farray

logic aux311 : (int,word32) farray

logic h21 : int

logic a21 : (int,word32) farray

logic aux312 : (int,word32) farray

logic result29 : int

logic s18 : int

logic a22 : (int,word32) farray

logic aux313 : (int,word32) farray

logic a23 : (int,word32) farray

logic aux314 : (int,word32) farray

logic j15 : int

logic s19 : int

logic w17 : t

logic h22 : int

logic a24 : (int,word32) farray

logic aux315 : (int,word32) farray

logic j16 : int

logic s20 : int

logic w18 : t

logic h23 : int

logic result30 : bool

logic result31 : t1

logic i3 : t1

logic i4 : t1

logic i5 : t1

logic a25 : (int,word32) farray

logic aux316 : (int,word32) farray

logic j17 : int

logic s21 : int

logic i6 : t1

logic w19 : t

logic h24 : int

logic a26 : (int,word32) farray

logic aux317 : (int,word32) farray

logic j18 : int

logic s22 : int

logic i7 : t1

logic w20 : t

logic h25 : int

logic a27 : (int,word32) farray

logic aux318 : (int,word32) farray

logic j19 : int

logic s23 : int

logic i8 : t1

logic w21 : t

logic h26 : int

logic a28 : (int,word32) farray

logic aux319 : (int,word32) farray

logic j20 : int

logic s24 : int

logic i9 : t1

logic w22 : t

logic h27 : int

logic a29 : (int,word32) farray

logic aux320 : (int,word32) farray

logic j21 : int

logic s25 : int

logic i10 : t1

logic w23 : t

logic h28 : int

logic a30 : (int,word32) farray

logic aux321 : (int,word32) farray

logic j22 : int

logic s26 : int

logic i11 : t1

logic w24 : t

logic h29 : int

logic a31 : (int,word32) farray

logic aux322 : (int,word32) farray

logic j23 : int

logic s27 : int

logic i12 : t1

logic w25 : t

logic h30 : int

logic a32 : (int,word32) farray

logic aux323 : (int,word32) farray

logic j24 : int

logic s28 : int

logic i13 : t1

logic w26 : t

logic h31 : int

logic a33 : (int,word32) farray

logic a34 : (int,word32) farray

logic aux12 : (int,word32) farray

logic aux21 : (int,word32) farray

logic aux324 : (int,word32) farray

logic aux49 : (int,word32) farray

logic j25 : int

logic l2 : int

logic s29 : int

logic i14 : t1

logic w27 : t

logic h32 : int

logic h33 : int

logic a35 : (int,word32) farray

logic aux13 : (int,word32) farray

logic aux22 : (int,word32) farray

logic aux325 : (int,word32) farray

logic aux410 : (int,word32) farray

logic j26 : int

logic l3 : int

logic s30 : int

logic i15 : t1

logic w28 : t

logic h34 : int

logic h35 : int

axiom H : dynamic_property(0, 2147483646, to_rep(a__first), to_rep(a__last))

axiom H1 : in_range2(a_first)

axiom H2 : in_range2(a_last)

axiom H3 : dynamic_property(0, 2147483646, to_rep(first(x1)),
  to_rep(last(x1)))

axiom H4 : in_range2(x_first)

axiom H5 : dynamic_property(0, 2147483646, to_rep(first(e1)),
  to_rep(last(e1)))

axiom H6 : in_range2(e_first)

axiom H7 : in_range2(e_last)

axiom H8 : dynamic_property(0, 2147483646, to_rep(first(m1)),
  to_rep(last(m1)))

axiom H9 : in_range2(m_first)

axiom H10 : in_range2(k)

axiom H11 : dynamic_property(0, 2147483646, to_rep(aux1__first),
  to_rep(aux1__last))

axiom H12 : in_range2(aux1_first)

axiom H13 : dynamic_property(0, 2147483646, to_rep(aux2__first),
  to_rep(aux2__last))

axiom H14 : in_range2(aux2_first)

axiom H15 : dynamic_property(0, 2147483646, to_rep(aux3__first),
  to_rep(aux3__last))

axiom H16 : in_range2(aux3_first)

axiom H17 : dynamic_property(0, 2147483646, to_rep(aux4__first),
  to_rep(aux4__last))

axiom H18 : in_range2(aux4_first)

axiom H19 : dynamic_property(0, 2147483646, to_rep(first(r1)),
  to_rep(last(r1)))

axiom H20 : in_range2(r_first)

axiom H21 : true

axiom H22 : (((to_rep(a__first) <= a_first) and
  (a_first <= to_rep(a__last))) and (((to_rep(a__first) <= a_last) and
  (a_last <= to_rep(a__last))) and ((a_first <  a_last) and
  (((to_rep(first(x1)) <= x_first) and (x_first <= to_rep(last(x1)))) and
  (((to_rep(first(x1)) <= (x_first + (a_last - a_first))) and
  ((x_first + (a_last - a_first)) <= to_rep(last(x1)))) and
  (((to_rep(first(e1)) <= e_first) and (e_first <= to_rep(last(e1)))) and
  (((to_rep(first(e1)) <= e_last) and (e_last <= to_rep(last(e1)))) and
  ((e_first <= e_last) and (((to_rep(first(m1)) <= m_first) and
  (m_first <= to_rep(last(m1)))) and
  (((to_rep(first(m1)) <= (m_first + (a_last - a_first))) and
  ((m_first + (a_last - a_first)) <= to_rep(last(m1)))) and
  (((to_rep(aux1__first) <= aux1_first) and
  (aux1_first <= to_rep(aux1__last))) and
  (((to_rep(aux1__first) <= (aux1_first + (a_last - a_first))) and
  ((aux1_first + (a_last - a_first)) <= to_rep(aux1__last))) and
  (((to_rep(aux2__first) <= aux2_first) and
  (aux2_first <= to_rep(aux2__last))) and
  (((to_rep(aux2__first) <= (aux2_first + (a_last - a_first))) and
  ((aux2_first + (a_last - a_first)) <= to_rep(aux2__last))) and
  (((to_rep(aux3__first) <= aux3_first) and
  (aux3_first <= to_rep(aux3__last))) and
  (((to_rep(aux3__first) <= (aux3_first + (a_last - a_first))) and
  ((aux3_first + (a_last - a_first)) <= to_rep(aux3__last))) and
  (((to_rep(aux4__first) <= aux4_first) and
  (aux4_first <= to_rep(aux4__last))) and
  (((to_rep(aux4__first) <= (aux4_first + ((power(2,
  k) * ((a_last - a_first) + 1)) - 1))) and ((aux4_first + ((power(2,
  k) * ((a_last - a_first) + 1)) - 1)) <= to_rep(aux4__last))) and
  ((k <= 30) and (((to_rep(first(r1)) <= r_first) and
  (r_first <= to_rep(last(r1)))) and
  (((to_rep(first(r1)) <= (r_first + (a_last - a_first))) and
  ((r_first + (a_last - a_first)) <= to_rep(last(r1)))) and
  ((oeq(num_of_big_int({ elts = r; rt = r1 }, r_first,
  ((a_last - a_first) + 1)), omod(oexpon__2(base(void),
  omultiply(from_integer(2), from_integer(((a_last - a_first) + 1)))),
  num_of_big_int({ elts = m; rt = m1 }, m_first,
  ((a_last - a_first) + 1)))) = true) and ((olt(from_word32(of_int(1)),
  num_of_big_int({ elts = m; rt = m1 }, m_first,
  ((a_last - a_first) + 1))) = true) and (add(of_int(1), mul(m_inv,
  to_rep1((m[m_first])))) = of_int(0)))))))))))))))))))))))))

axiom H23 : ((0 <= 2147483647) -> in_range2(j))

axiom H24 : ((0 <= 2147483647) -> in_range2(l))

axiom H25 : ((0 <= 2147483647) -> in_range2(s))

axiom H26 : true

axiom H27 : true

axiom H28 : (((((l1 = (a_last - a_first)) and (oeq(num_of_big_int({ elts =
  aux11; rt = mk(to_rep(aux1__first), to_rep(aux1__last)) }, aux1_first,
  (l1 + 1)), from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({
  elts = aux2; rt = mk(to_rep(aux2__first), to_rep(aux2__last)) },
  aux2_first, (l1 + 1)), omod(omultiply(omultiply(num_of_big_int({ elts = x;
  rt = x1 }, x_first, (l1 + 1)), num_of_big_int({ elts = x; rt = x1 },
  x_first, (l1 + 1))), oexpon(base(void), (l1 + 1))), num_of_big_int({ elts =
  m; rt = m1 }, m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({
  elts = aux3; rt = mk(to_rep(aux3__first), to_rep(aux3__last)) },
  aux3_first, (l1 + 1)), omod(oexpon(base(void), (l1 + 1)), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)) and
  (oeq(num_of_big_int({ elts = aux4; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, aux4_first, (l1 + 1)),
  omod(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1)),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true))

axiom H29 : ((0 <= 2147483647) -> in_range2(l1))

axiom H30 : ((o147 = power(2, k)) and in_range1(power(2, k)))

axiom H31 : (o148 = (o147 - 1))

axiom H32 : ((temp___638 = o148) and in_range1(o148))

axiom H33 : (result11 = h)

axiom H34 : (h1 = 1)

axiom H35 : (((1 <= h1) and (h1 <= temp___638)) -> (((temp___636 = h1) and
  ((temp___633 = a) and ((temp___631 = aux4) and
  ((((((l1 = (a_last - a_first)) and (oeq(num_of_big_int({ elts = aux11; rt =
  mk(to_rep(aux1__first), to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux3; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(oexpon(base(void), (l1 + 1)), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and
  (forall n7:int. (((0 <= n7) and (n7 <= (h2 - 1))) -> (oeq(num_of_big_int({
  elts = aux41; rt = mk(to_rep(aux4__first), to_rep(aux4__last)) },
  (aux4_first + (n7 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n7) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and ((((1 <= (power(2,
  k) - 1)) -> dynamic_property1(1, (power(2, k) - 1), h2)) and ((1 <= h2) and
  (h2 <= (power(2, k) - 1)))) and ((((((l1 = (a_last - a_first)) and
  (oeq(num_of_big_int({ elts = aux11; rt = mk(to_rep(aux1__first),
  to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux3; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(oexpon(base(void), (l1 + 1)), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and
  (forall n7:int. (((0 <= n7) and (n7 <= h2)) -> (oeq(num_of_big_int({ elts =
  aux42; rt = mk(to_rep(aux4__first), to_rep(aux4__last)) },
  (aux4_first + (n7 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n7) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and
  (((0 <= 2147483647) -> in_range2(l1)) and (((1 <= (power(2, k) - 1)) ->
  dynamic_property1(1, (power(2, k) - 1), h2)) and
  (h2 = temp___638))))))))) and (((h6 = h2) and ((aux42 = aux45) and
  (a3 = a6))) and ((h7 = h2) and ((aux46 = aux42) and (a7 = a3))))))

axiom H36 : (((1 <= h1) and (h1 <= temp___638)) -> (h8 = h6))

axiom H37 : (((1 <= h1) and (h1 <= temp___638)) -> (aux47 = aux45))

axiom H38 : (((1 <= h1) and (h1 <= temp___638)) -> (a8 = a6))

axiom H39 : (((1 <= h1) and (h1 <= temp___638)) -> (h9 = h7))

axiom H40 : (((1 <= h1) and (h1 <= temp___638)) -> (aux48 = aux46))

axiom H41 : (((1 <= h1) and (h1 <= temp___638)) -> (a9 = a7))

axiom H42 : ((not ((1 <= h1) and (h1 <= temp___638))) -> (h8 = h1))

axiom H43 : ((not ((1 <= h1) and (h1 <= temp___638))) -> (aux47 = aux4))

axiom H44 : ((not ((1 <= h1) and (h1 <= temp___638))) -> (a8 = a))

axiom H45 : ((not ((1 <= h1) and (h1 <= temp___638))) -> (h9 = h1))

axiom H46 : ((not ((1 <= h1) and (h1 <= temp___638))) -> (aux48 = aux4))

axiom H47 : ((not ((1 <= h1) and (h1 <= temp___638))) -> (a9 = a1))

axiom H48 : ((o263 = (e_last - e_first)) and in_range1((e_last - e_first)))

axiom H49 : ((o264 = o263) and uint_in_range1(o263))

axiom H50 : (o265 = of_int1(o264))

axiom H51 : (o266 = add1(o265, of_int1(1)))

axiom H52 : (o267 = mul1(o266, of_int1(32)))

axiom H53 : (o268 = sub1(o267, of_int1(1)))

axiom H54 : (result13 = i)

axiom H55 : (i1 = o268)

axiom H56 : ((((((l1 = (a_last - a_first)) and (oeq(num_of_big_int({ elts =
  aux11; rt = mk(to_rep(aux1__first), to_rep(aux1__last)) }, aux1_first,
  (l1 + 1)), from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({
  elts = aux2; rt = mk(to_rep(aux2__first), to_rep(aux2__last)) },
  aux2_first, (l1 + 1)), omod(omultiply(omultiply(num_of_big_int({ elts = x;
  rt = x1 }, x_first, (l1 + 1)), num_of_big_int({ elts = x; rt = x1 },
  x_first, (l1 + 1))), oexpon(base(void), (l1 + 1))), num_of_big_int({ elts =
  m; rt = m1 }, m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({
  elts = aux31; rt = mk(to_rep(aux3__first), to_rep(aux3__last)) },
  aux3_first, (l1 + 1)), omod(omultiply(oexpon__2(num_of_big_int({ elts = x;
  rt = x1 }, x_first, (l1 + 1)), odivide(num_of_big_int({ elts = e; rt = e1
  }, e_first, ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  oadd(from_word64(i2), from_word32(of_int(1)))))), oexpon(base(void),
  (l1 + 1))), num_of_big_int({ elts = m; rt = m1 }, m_first,
  (l1 + 1)))) = true)) and
  (forall n7:int. (((0 <= n7) and (n7 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux47; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n7 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n7) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and ult1(i2,
  mul1(add1(of_int1((e_last - e_first)), of_int1(1)), of_int1(32))))

axiom H57 : (((0 <= 2147483647) -> in_range2(j1)) and ((0 <= 2147483647) ->
  in_range2(s1)))

axiom H58 : ((result15 = bit_set({ elts = e; rt = e1 }, e_first, i2)) and
  (((result15 = true) -> (not (((tqtint1(urem1(i2,
  of_int1(32))) <  4294967296) and
  (bw_and(to_rep1((e[(e_first + tqtint1(udiv1(i2, of_int1(32))))])),
  lsl_bv(of_int(1), of_int(tqtint1(urem1(i2,
  of_int1(32)))))) = of_int(0))) or ((not (tqtint1(urem1(i2,
  of_int1(32))) <  4294967296)) and
  (bw_and(to_rep1((e[(e_first + tqtint1(udiv1(i2, of_int1(32))))])),
  of_int(0)) = of_int(0)))))) and ((not (((tqtint1(urem1(i2,
  of_int1(32))) <  4294967296) ->
  (bw_and(to_rep1((e[(e_first + tqtint1(udiv1(i2, of_int1(32))))])),
  lsl_bv(of_int(1), of_int(tqtint1(urem1(i2,
  of_int1(32)))))) = of_int(0))) and ((not (tqtint1(urem1(i2,
  of_int1(32))) <  4294967296)) ->
  (bw_and(to_rep1((e[(e_first + tqtint1(udiv1(i2, of_int1(32))))])),
  of_int(0)) = of_int(0))))) -> (result15 = true))))

axiom H59 : ((result15 = true) -> (result16 = w1))

axiom H60 : ((result15 = true) -> (w2 = of_int(1)))

axiom H61 : ((result15 = true) -> (result17 = s1))

axiom H62 : ((result15 = true) -> (s2 = 0))

axiom H63 : ((result15 = true) -> (result18 = j1))

axiom H64 : ((result15 = true) -> (j2 = 1))

axiom H65 : ((result15 = true) -> (((temp___645 = s2) and
  ((temp___644 = j2) and ((temp___643 = w2) and
  (((((((((((((l1 = (a_last - a_first)) and (oeq(num_of_big_int({ elts =
  aux11; rt = mk(to_rep(aux1__first), to_rep(aux1__last)) }, aux1_first,
  (l1 + 1)), from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({
  elts = aux2; rt = mk(to_rep(aux2__first), to_rep(aux2__last)) },
  aux2_first, (l1 + 1)), omod(omultiply(omultiply(num_of_big_int({ elts = x;
  rt = x1 }, x_first, (l1 + 1)), num_of_big_int({ elts = x; rt = x1 },
  x_first, (l1 + 1))), oexpon(base(void), (l1 + 1))), num_of_big_int({ elts =
  m; rt = m1 }, m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({
  elts = aux31; rt = mk(to_rep(aux3__first), to_rep(aux3__last)) },
  aux3_first, (l1 + 1)), omod(omultiply(oexpon__2(num_of_big_int({ elts = x;
  rt = x1 }, x_first, (l1 + 1)), odivide(num_of_big_int({ elts = e; rt = e1
  }, e_first, ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  oadd(from_word64(i2), from_word32(of_int(1)))))), oexpon(base(void),
  (l1 + 1))), num_of_big_int({ elts = m; rt = m1 }, m_first,
  (l1 + 1)))) = true)) and
  (forall n7:int. (((0 <= n7) and (n7 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux47; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n7 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n7) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and
  (oeq(omultiply(from_word32(w3), oexpon(from_word32(of_int(2)),
  ((j3 - s3) - 1))), omod(odivide(num_of_big_int({ elts = e; rt = e1 },
  e_first, ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  osubtract(from_word64(i2), osubtract(from_integer(j3),
  from_word32(of_int(1)))))), oexpon(from_word32(of_int(2)),
  j3))) = true)) and (urem(w3, of_int(2)) = of_int(1))) and (0 <= s3)) and
  (s3 <  j3)) and (j3 <= (k + 1))) and (ole(from_integer(j3),
  oadd(from_word64(i2), from_word32(of_int(1)))) = true)) and ult1(i2,
  mul1(add1(of_int1((e_last - e_first)), of_int1(1)), of_int1(32)))) and
  ((((0 <= 2147483647) -> in_range2(j3)) and ((0 <= 2147483647) ->
  in_range2(s3))) and ((((w7 = w3) and ((s7 = s3) and (j5 = j3))) and
  ((w8 = w3) and ((s8 = s3) and (j6 = j3)))) and (not ((j3 <= k) and
  ule1(of_int1(j3), i2))))))))) and (((w13 = w7) and ((s13 = s7) and
  (j11 = j5))) and ((w14 = w8) and ((s14 = s8) and (j12 = j6))))))

axiom H66 : ((result15 = true) -> (w15 = w13))

axiom H67 : ((result15 = true) -> (s15 = s13))

axiom H68 : ((result15 = true) -> (j13 = j11))

axiom H69 : ((result15 = true) -> (w16 = w14))

axiom H70 : ((result15 = true) -> (s16 = s14))

axiom H71 : ((result15 = true) -> (j14 = j12))

axiom H72 : ((result15 = true) -> ((o463 = (s15 + 1)) and
  in_range1((s15 + 1))))

axiom H73 : ((result15 = true) -> (result24 = s15))

axiom H74 : ((result15 = true) -> (s17 = o463))

axiom H75 : ((result15 = true) -> (s17 = r94b))

axiom H76 : ((result15 = true) -> in_range2(r94b))

axiom H77 : ((result15 = true) -> (result25 = h10))

axiom H78 : ((result15 = true) -> (h11 = 1))

axiom H79 : ((result15 = true) -> (((1 <= h11) and (h11 <= r94b)) ->
  (((temp___655 = s17) and ((temp___670 = aux31) and ((temp___668 = a10) and
  ((temp___675 = s17) and ((temp___666 = h11) and
  (((((((((((((l1 = (a_last - a_first)) and (oeq(num_of_big_int({ elts =
  aux11; rt = mk(to_rep(aux1__first), to_rep(aux1__last)) }, aux1_first,
  (l1 + 1)), from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({
  elts = aux2; rt = mk(to_rep(aux2__first), to_rep(aux2__last)) },
  aux2_first, (l1 + 1)), omod(omultiply(omultiply(num_of_big_int({ elts = x;
  rt = x1 }, x_first, (l1 + 1)), num_of_big_int({ elts = x; rt = x1 },
  x_first, (l1 + 1))), oexpon(base(void), (l1 + 1))), num_of_big_int({ elts =
  m; rt = m1 }, m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({
  elts = aux32; rt = mk(to_rep(aux3__first), to_rep(aux3__last)) },
  aux3_first, (l1 + 1)), omod(omultiply(oexpon__2(num_of_big_int({ elts = x;
  rt = x1 }, x_first, (l1 + 1)), omultiply(odivide(num_of_big_int({ elts = e;
  rt = e1 }, e_first, ((e_last - e_first) + 1)),
  oexpon__2(from_word32(of_int(2)), oadd(from_word64(i2),
  from_word32(of_int(1))))), oexpon(from_word32(of_int(2)), (h12 - 1)))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and
  (forall n7:int. (((0 <= n7) and (n7 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux47; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n7 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n7) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and
  (oeq(from_word32(w15), omod(odivide(num_of_big_int({ elts = e; rt = e1 },
  e_first, ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  osubtract(from_word64(i2), osubtract(from_integer(s17),
  from_word32(of_int(1)))))), oexpon(from_word32(of_int(2)),
  s17))) = true)) and (urem(w15, of_int(2)) = of_int(1))) and (0 <= s17)) and
  (s17 <= (k + 1))) and (temp___675 = s17)) and (ole(from_integer(s17),
  oadd(from_word64(i2), from_word32(of_int(1)))) = true)) and ult1(i2,
  mul1(add1(of_int1((e_last - e_first)), of_int1(1)), of_int1(32)))) and
  ((((1 <= r94b) -> dynamic_property2(1, r94b, h12)) and ((1 <= h12) and
  (h12 <= r94b))) and (((((((((((((l1 = (a_last - a_first)) and
  (oeq(num_of_big_int({ elts = aux11; rt = mk(to_rep(aux1__first),
  to_rep(aux1__last)) }, aux1_first, (l1 + 1)),
  from_word32(of_int(1))) = true)) and (oeq(num_of_big_int({ elts = aux2;
  rt = mk(to_rep(aux2__first), to_rep(aux2__last)) }, aux2_first, (l1 + 1)),
  omod(omultiply(omultiply(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), num_of_big_int({ elts = x; rt = x1 }, x_first, (l1 + 1))),
  oexpon(base(void), (l1 + 1))), num_of_big_int({ elts = m; rt = m1 },
  m_first, (l1 + 1)))) = true)) and (oeq(num_of_big_int({ elts = aux33; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first, (l1 + 1)),
  omod(omultiply(oexpon__2(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), omultiply(odivide(num_of_big_int({ elts = e; rt = e1 }, e_first,
  ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  oadd(from_word64(i2), from_word32(of_int(1))))),
  oexpon(from_word32(of_int(2)), h12))), oexpon(base(void), (l1 + 1))),
  num_of_big_int({ elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)) and
  (forall n7:int. (((0 <= n7) and (n7 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux47; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n7 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n7) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true)))) and
  (oeq(from_word32(w15), omod(odivide(num_of_big_int({ elts = e; rt = e1 },
  e_first, ((e_last - e_first) + 1)), oexpon__2(from_word32(of_int(2)),
  osubtract(from_word64(i2), osubtract(from_integer(s17),
  from_word32(of_int(1)))))), oexpon(from_word32(of_int(2)),
  s17))) = true)) and (urem(w15, of_int(2)) = of_int(1))) and (0 <= s17)) and
  (s17 <= (k + 1))) and (temp___655 = s17)) and (ole(from_integer(s17),
  oadd(from_word64(i2), from_word32(of_int(1)))) = true)) and ult1(i2,
  mul1(add1(of_int1((e_last - e_first)), of_int1(1)), of_int1(32)))) and
  (((0 <= 2147483647) -> in_range2(l1)) and (((0 <= 2147483647) ->
  in_range2(s17)) and (((1 <= r94b) -> dynamic_property2(1, r94b, h12)) and
  (h12 = r94b)))))))))))) and (((h18 = h12) and ((aux38 = aux33) and
  (a17 = a12))) and ((h19 = h12) and ((aux39 = aux33) and (a18 = a12)))))))

axiom H80 : ((result15 = true) -> (((1 <= h11) and (h11 <= r94b)) ->
  (h20 = h18)))

axiom H81 : ((result15 = true) -> (((1 <= h11) and (h11 <= r94b)) ->
  (aux310 = aux38)))

axiom H82 : ((result15 = true) -> (((1 <= h11) and (h11 <= r94b)) ->
  (a19 = a17)))

axiom H83 : ((result15 = true) -> (((1 <= h11) and (h11 <= r94b)) ->
  (h21 = h19)))

axiom H84 : ((result15 = true) -> (((1 <= h11) and (h11 <= r94b)) ->
  (aux311 = aux39)))

axiom H85 : ((result15 = true) -> (((1 <= h11) and (h11 <= r94b)) ->
  (a20 = a18)))

axiom H86 : ((result15 = true) -> ((not ((1 <= h11) and (h11 <= r94b))) ->
  (h20 = h11)))

axiom H87 : ((result15 = true) -> ((not ((1 <= h11) and (h11 <= r94b))) ->
  (aux310 = aux31)))

axiom H88 : ((result15 = true) -> ((not ((1 <= h11) and (h11 <= r94b))) ->
  (a19 = a10)))

axiom H89 : ((result15 = true) -> ((not ((1 <= h11) and (h11 <= r94b))) ->
  (h21 = h11)))

axiom H90 : ((result15 = true) -> ((not ((1 <= h11) and (h11 <= r94b))) ->
  (aux311 = aux31)))

axiom H91 : ((result15 = true) -> ((not ((1 <= h11) and (h11 <= r94b))) ->
  (a20 = a10)))

axiom H92 : ((result15 = true) -> ((o676 = (l1 + 1)) and
  in_range1((l1 + 1))))

axiom H93 : ((result15 = true) -> ((o677 = tqtint(lsr_bv(w15,
  of_int(1)))) and in_range2(tqtint(lsr_bv(w15, of_int(1))))))

axiom H94 : ((result15 = true) -> (o678 = (o677 * o676)))

axiom H95 : ((result15 = true) -> ((o679 = o678) and in_range1(o678)))

axiom H96 : ((result15 = true) -> (o680 = (aux4_first + o679)))

axiom H97 : ((result15 = true) -> ((o681 = o680) and in_range1(o680)))

axiom H98 : ((result15 = true) -> ((o682 = o681) and in_range2(o681)))

axiom H99 : ((result15 = true) -> (oeq(num_of_big_int({ elts = a21; rt =
  mk(to_rep(a__first), to_rep(a__last)) }, a_first,
  ((a_last - a_first) + 1)), omod(omultiply(omultiply(num_of_big_int({ elts =
  aux310; rt = mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first,
  ((a_last - a_first) + 1)), num_of_big_int({ elts = aux47; rt =
  mk(to_rep(aux4__first), to_rep(aux4__last)) }, o682,
  ((a_last - a_first) + 1))), oexpon(inverse(num_of_big_int({ elts = m; rt =
  m1 }, m_first, ((a_last - a_first) + 1)), base(void)),
  ((a_last - a_first) + 1))), num_of_big_int({ elts = m; rt = m1 }, m_first,
  ((a_last - a_first) + 1)))) = true))

axiom H100 : ((result15 = true) ->
  (forall k1:int. (((to_rep(aux3__first) <= k1) and
  (k1 <= to_rep(aux3__last))) -> ((((aux3_first <= k1) and
  (k1 <= ((aux3_first + a_last) - a_first))) ->
  (to_rep1((aux312[k1])) = to_rep1((a21[((a_first + k1) - aux3_first)])))) and
  (((aux3_first <= k1) -> (not (k1 <= ((aux3_first + a_last) - a_first)))) ->
  (to_rep1((aux312[k1])) = to_rep1((aux310[k1]))))))))

axiom H101 : ((result15 = true) -> (h22 = h20))

axiom H102 : ((result15 = true) -> (w17 = w15))

axiom H103 : ((result15 = true) -> (s19 = s17))

axiom H104 : ((result15 = true) -> (j15 = j13))

axiom H105 : ((result15 = true) -> (aux314 = aux312))

axiom H106 : ((result15 = true) -> (a23 = a21))

axiom H107 : ((result15 = true) -> (h23 = h21))

axiom H108 : ((result15 = true) -> (w18 = w16))

axiom H109 : ((result15 = true) -> (s20 = s17))

axiom H110 : ((result15 = true) -> (j16 = j14))

axiom H111 : ((result15 = true) -> (aux315 = aux312))

axiom H112 : ((result15 = true) -> (a24 = a21))

axiom H113 : ((not (result15 = true)) -> (result29 = s1))

axiom H114 : ((not (result15 = true)) -> (s18 = 1))

axiom H115 : ((not (result15 = true)) -> (oeq(num_of_big_int({ elts = a22;
  rt = mk(to_rep(a__first), to_rep(a__last)) }, a_first,
  ((a_last - a_first) + 1)), omod(omultiply(omultiply(num_of_big_int({ elts =
  aux31; rt = mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first,
  ((a_last - a_first) + 1)), num_of_big_int({ elts = aux31; rt =
  mk(to_rep(aux3__first), to_rep(aux3__last)) }, aux3_first,
  ((a_last - a_first) + 1))), oexpon(inverse(num_of_big_int({ elts = m; rt =
  m1 }, m_first, ((a_last - a_first) + 1)), base(void)),
  ((a_last - a_first) + 1))), num_of_big_int({ elts = m; rt = m1 }, m_first,
  ((a_last - a_first) + 1)))) = true))

axiom H116 : ((not (result15 = true)) ->
  (forall k1:int. (((to_rep(aux3__first) <= k1) and
  (k1 <= to_rep(aux3__last))) -> ((((aux3_first <= k1) and
  (k1 <= ((aux3_first + a_last) - a_first))) ->
  (to_rep1((aux313[k1])) = to_rep1((a22[((a_first + k1) - aux3_first)])))) and
  (((aux3_first <= k1) -> (not (k1 <= ((aux3_first + a_last) - a_first)))) ->
  (to_rep1((aux313[k1])) = to_rep1((aux31[k1]))))))))

axiom H117 : ((not (result15 = true)) -> (h22 = h10))

axiom H118 : ((not (result15 = true)) -> (w17 = w1))

axiom H119 : ((not (result15 = true)) -> (s19 = s18))

axiom H120 : ((not (result15 = true)) -> (j15 = j1))

axiom H121 : ((not (result15 = true)) -> (aux314 = aux313))

axiom H122 : ((not (result15 = true)) -> (a23 = a22))

axiom H123 : ((not (result15 = true)) -> (h23 = h10))

axiom H124 : ((not (result15 = true)) -> (w18 = w1))

axiom H125 : ((not (result15 = true)) -> (s20 = s18))

axiom H126 : ((not (result15 = true)) -> (j16 = j1))

axiom H127 : ((not (result15 = true)) -> (aux315 = aux313))

axiom H128 : ((not (result15 = true)) -> (a24 = a22))

axiom H129 : ((o762 = (e_last - e_first)) and in_range1((e_last - e_first)))

axiom H130 : ((o763 = o762) and uint_in_range1(o762))

axiom H131 : (o764 = of_int1(o763))

axiom H132 : (o765 = add1(o764, of_int1(1)))

axiom H133 : (o766 = mul1(o765, of_int1(32)))

axiom H134 : ((ult1(i2, o766) -> (o767 = true)) and ((not ult1(i2, o766)) ->
  (o767 = false)))

axiom H135 : (o759 = from_word32(of_int(1)))

axiom H136 : (o758 = from_word64(i2))

axiom H137 : (o760 = oadd(o758, o759))

axiom H138 : (o757 = from_integer(s19))

axiom H139 : (o761 = ole(o757, o760))

axiom H140 : ((o731 = power(2, k)) and in_range1(power(2, k)))

axiom H141 : (o732 = (o731 - 1))

axiom H142 : ((o733 = o732) and in_range1(o732))

axiom H143 : (((n6 <= o733) -> (o734 = true)) and ((not (n6 <= o733)) ->
  (o734 = false)))

axiom H144 : (((0 <= n6) -> (result30 = o734)) and ((not (0 <= n6)) ->
  (result30 = false)))

axiom H145 : ((o756 = true) <->
  (forall n7:int. (((0 <= n7) and (n7 <= (power(2, k) - 1))) ->
  (oeq(num_of_big_int({ elts = aux47; rt = mk(to_rep(aux4__first),
  to_rep(aux4__last)) }, (aux4_first + (n7 * (l1 + 1))), (l1 + 1)),
  omod(omultiply(oexpon(num_of_big_int({ elts = x; rt = x1 }, x_first,
  (l1 + 1)), ((2 * n7) + 1)), oexpon(base(void), (l1 + 1))), num_of_big_int({
  elts = m; rt = m1 }, m_first, (l1 + 1)))) = true))))

axiom H146 : ((o725 = (l1 + 1)) and in_range1((l1 + 1)))

axiom H147 : (o726 = num_of_big_int({ elts = m; rt = m1 }, m_first, o725))

 (* File "lsc-bignum.ads", line 141, characters 0-0 *)
goal WP_parameter_def : in_range1((l1 + 1))
