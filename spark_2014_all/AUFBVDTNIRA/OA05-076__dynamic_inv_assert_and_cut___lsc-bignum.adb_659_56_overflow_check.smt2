(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun power (Int Int) Int)
(assert (forall ((x Int)) (= (power x 0) 1)))
(assert (forall ((x Int) (n Int)) (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))
(assert (forall ((x Int) (n Int)) (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))
(assert (forall ((x Int)) (= (power x 1) x)))
(assert (forall ((x Int) (n Int) (m Int)) (=> (<= 0 n) (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))
(assert (forall ((x Int) (n Int) (m Int)) (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))
(assert (forall ((x Int) (y Int)) (=> (= (* x y) (* y x)) (forall ((n Int)) (=> (<= 0 n) (= (* (power x n) y) (* y (power x n))))))))
(assert (forall ((x Int) (y Int)) (=> (= (* x y) (* y x)) (forall ((n Int)) (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))
(assert (forall ((x Int) (n Int) (m Int)) (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content a))
(declare-fun oadd (us_rep us_rep) us_rep)
(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun osubtract (us_rep us_rep) us_rep)
(declare-fun osubtract__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun omultiply (us_rep us_rep) us_rep)
(declare-fun omultiply__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun odivide (us_rep us_rep) us_rep)
(declare-fun odivide__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun omod (us_rep us_rep) us_rep)
(declare-fun omod__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun oexpon (us_rep Int) us_rep)
(declare-fun oexpon__function_guard (us_rep us_rep Int) Bool)
(assert true)
(declare-fun oexpon__2 (us_rep us_rep) us_rep)
(declare-fun oexpon__2__function_guard (us_rep us_rep us_rep) Bool)
(assert true)
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun olt (us_rep us_rep) Bool)
(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun ole (us_rep us_rep) Bool)
(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun from_integer (Int) us_rep)
(declare-fun from_integer__function_guard (us_rep Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert true)
(declare-fun from_word32 ((_ BitVec 32)) us_rep)
(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)
(declare-sort word32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq3 (word32 word32) Bool)
(declare-const dummy3 word32)
(declare-datatypes () ((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content a))
(define-fun dynamic_invariant2 ((temp___expr_253 (_ BitVec 32)) (temp___is_init_249 Bool) (temp___skip_constant_250 Bool) (temp___do_toplevel_251 Bool) (temp___do_typ_inv_252 Bool)) Bool true)
(assert true)
(declare-fun from_word64 ((_ BitVec 64)) us_rep)
(declare-fun from_word64__function_guard (us_rep (_ BitVec 64)) Bool)
(declare-sort word64 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))
(declare-fun user_eq4 (word64 word64) Bool)
(declare-const dummy4 word64)
(declare-datatypes () ((word64__ref (mk_word64__ref (word64__content word64)))))
(define-fun word64__ref___projection ((a word64__ref)) word64 (word64__content a))
(define-fun dynamic_invariant3 ((temp___expr_260 (_ BitVec 64)) (temp___is_init_256 Bool) (temp___skip_constant_257 Bool) (temp___do_toplevel_258 Bool) (temp___do_typ_inv_259 Bool)) Bool true)
(assert true)
(declare-fun base (tuple0) us_rep)
(declare-fun base__function_guard (us_rep tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (base us_void_param) (oexpon (from_word32 #x00000002) 32)) :pattern ((base us_void_param)))))
(declare-fun to_rep1 (word32) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) word32)
(assert (forall ((x word32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x word32)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x word32)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))
(assert (forall ((a (Array Int word32))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int word32))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int word32)) (a__first Int) (a__last Int) (b (Array Int word32)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep1 (select a temp___idx_156)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_156))))))) true false))
(assert (forall ((a (Array Int word32)) (b (Array Int word32))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep1 (select a temp___idx_156)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_156)))))))))))
(declare-sort big_int_range 0)
(declare-fun big_int_rangeqtint (big_int_range) Int)
(assert (forall ((i big_int_range)) (and (<= 0 (big_int_rangeqtint i)) (<= (big_int_rangeqtint i) 2147483646))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (big_int_range big_int_range) Bool)
(declare-const dummy5 big_int_range)
(declare-datatypes () ((big_int_range__ref (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range (big_int_range__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int word32)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))
(define-fun of_array ((a (Array Int word32)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int word32)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int word32)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int word32)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq1 (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq6 (us_t us_t) Bool)
(declare-const dummy6 us_t)
(declare-datatypes () ((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content a))
(declare-fun num_of_big_int (us_t Int Int) us_rep)
(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)
(define-fun dynamic_invariant4 ((temp___expr_335 us_t) (temp___is_init_331 Bool) (temp___skip_constant_332 Bool) (temp___do_toplevel_333 Bool) (temp___do_typ_inv_334 Bool)) Bool (=> (not (= temp___skip_constant_332 true)) (dynamic_property 0 2147483646 (first1 temp___expr_335) (last1 temp___expr_335))))
(assert true)
(declare-fun inverse (us_rep us_rep) us_rep)
(declare-fun inverse__function_guard (us_rep us_rep us_rep) Bool)
(declare-fun bit_set (us_t Int (_ BitVec 64)) Bool)
(declare-fun bit_set__function_guard (Bool us_t Int (_ BitVec 64)) Bool)
(assert (forall ((a us_t)) (forall ((a_first Int)) (forall ((i (_ BitVec 64))) (! (=> (and (and (and (dynamic_invariant4 a true true true true) (dynamic_invariant a_first true true true true)) (dynamic_invariant3 i true true true true)) (and (and (<= (first1 a) a_first) (<= a_first (last1 a))) (bvule (bvudiv i #x0000000000000020) ((_ int2bv 64) (- (last1 a) a_first))))) (= (= (bit_set a a_first i) true) (not (= (bvand (to_rep1 (select (to_array a) (+ a_first (bv2nat (bvudiv i #x0000000000000020))))) (let ((temp___516 (bv2nat (bvurem i #x0000000000000020)))) (ite (< temp___516 4294967296) (bvshl #x00000001 ((_ int2bv 32) temp___516)) #x00000000))) #x00000000)))) :pattern ((bit_set a a_first i)))))))
(declare-const a__first integer)
(declare-const a__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const a_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const a_last Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x us_t)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const x_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const e us_t)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const e_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const e_last Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const m us_t)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const m_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const k Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const aux1__first integer)
(declare-const aux1__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const aux1_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const aux2__first integer)
(declare-const aux2__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const aux2_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const aux3__first integer)
(declare-const aux3__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const aux3_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const aux4__first integer)
(declare-const aux4__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const aux4_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const r us_t)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const r_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const m_inv (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-const attr__ATTRIBUTE_ADDRESS25 Int)
(declare-const attr__ATTRIBUTE_ADDRESS26 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (integer integer) Bool)
(declare-const dummy7 integer)
(declare-datatypes () ((t79b__ref (mk_t79b__ref (t79b__content integer)))))
(define-fun t79b__ref___projection ((a t79b__ref)) integer (t79b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS27 Int)
(declare-const r94b Int)
(declare-const attr__ATTRIBUTE_ADDRESS28 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (integer integer) Bool)
(declare-const dummy8 integer)
(declare-datatypes () ((t95b__ref (mk_t95b__ref (t95b__content integer)))))
(define-fun t95b__ref___projection ((a t95b__ref)) integer (t95b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS29 Int)
(define-fun dynamic_invariant5 ((temp___expr_328 Int) (temp___is_init_324 Bool) (temp___skip_constant_325 Bool) (temp___do_toplevel_326 Bool) (temp___do_typ_inv_327 Bool)) Bool (=> (or (= temp___is_init_324 true) (<= 0 2147483646)) (in_range3 temp___expr_328)))
(assert true)
(declare-const a (Array Int word32))
(declare-const j Int)
(declare-const l Int)
(declare-const s Int)
(declare-const i (_ BitVec 64))
(declare-const h Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const temp___695 Int)
(declare-const temp___708 Int)
(declare-const temp___705 (Array Int word32))
(declare-const temp___703 (Array Int word32))
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 (_ BitVec 64))
(declare-const o5 (_ BitVec 64))
(declare-const o6 (_ BitVec 64))
(declare-const o7 (_ BitVec 64))
(declare-const temp___715 Int)
(declare-const temp___714 Int)
(declare-const temp___713 (_ BitVec 32))
(declare-const o8 Int)
(declare-const n Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Bool)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 us_rep)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const o24 us_rep)
(declare-const o25 us_rep)
(declare-const o26 Int)
(declare-const o27 us_rep)
(declare-const o28 us_rep)
(declare-const o29 Int)
(declare-const o30 us_rep)
(declare-const o31 us_rep)
(declare-const o32 us_rep)
(declare-const o33 Int)
(declare-const o34 Int)
(declare-const o35 Int)
(declare-const o36 Int)
(declare-const o37 us_rep)
(declare-const o38 us_rep)
(declare-const o39 us_rep)
(declare-const o40 us_rep)
(declare-const o41 us_rep)
(declare-const o42 us_rep)
(declare-const o43 us_rep)
(declare-const o44 us_rep)
(declare-const o45 us_rep)
(declare-const o46 us_rep)
(declare-const o47 us_rep)
(declare-const o48 us_rep)
(declare-const o49 Bool)
(declare-const o50 Int)
(declare-const o51 Bool)
(declare-const o52 us_rep)
(declare-const o53 us_rep)
(declare-const o54 us_rep)
(declare-const o55 us_rep)
(declare-const o56 Bool)
(declare-const o57 Int)
(declare-const o58 Int)
(declare-const o59 (_ BitVec 64))
(declare-const o60 (_ BitVec 64))
(declare-const o61 (_ BitVec 64))
(declare-const o62 Bool)
(declare-const a1 (Array Int word32))
(declare-const l1 Int)
(declare-const o63 (Array Int word32))
(declare-const o64 (Array Int word32))
(declare-const o65 (Array Int word32))
(declare-const o66 (Array Int word32))
(declare-const result Int)
(declare-const h1 Int)
(declare-const o67 (Array Int word32))
(declare-const h2 Int)
(declare-const o68 (Array Int word32))
(declare-const o69 (Array Int word32))
(declare-const a2 map__ref)
(declare-const aux4 map__ref)
(declare-const h3 int__ref)
(declare-const o70 map__ref)
(declare-const a3 (Array Int word32))
(declare-const o71 (Array Int word32))
(declare-const h4 Int)
(declare-const a4 map__ref)
(declare-const aux41 map__ref)
(declare-const h5 int__ref)
(declare-const o72 map__ref)
(declare-const a5 (Array Int word32))
(declare-const o73 (Array Int word32))
(declare-const h6 Int)
(declare-const result1 t__ref1)
(declare-const i1 (_ BitVec 64))
(declare-const o74 (Array Int word32))
(declare-const j1 Int)
(declare-const s1 Int)
(declare-const i2 (_ BitVec 64))
(declare-const w (_ BitVec 32))
(declare-const h7 Int)
(declare-const result2 Bool)
(declare-const result3 t__ref)
(declare-const w1 (_ BitVec 32))
(declare-const result4 int__ref)
(declare-const s2 Int)
(declare-const result5 int__ref)
(declare-const j2 Int)
(declare-const j3 Int)
(declare-const s3 Int)
(declare-const w2 (_ BitVec 32))
(declare-const j4 int__ref)
(declare-const s4 int__ref)
(declare-const w3 t__ref)
(declare-const j5 Int)
(declare-const s5 Int)
(declare-const w4 (_ BitVec 32))
(declare-const j6 int__ref)
(declare-const s6 int__ref)
(declare-const w5 t__ref)
(declare-const j7 Int)
(declare-const s7 Int)
(declare-const w6 (_ BitVec 32))
(declare-const j8 int__ref)
(declare-const s8 int__ref)
(declare-const w7 t__ref)
(declare-const j9 Int)
(declare-const s9 Int)
(declare-const w8 (_ BitVec 32))
(declare-const result6 int__ref)
(declare-const s10 Int)
(declare-const result7 int__ref)
(declare-const h8 Int)
(declare-const o75 (Array Int word32))
(declare-const h9 Int)
(declare-const o76 (Array Int word32))
(declare-const o77 (Array Int word32))
(declare-const result8 Bool)
(assert (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last)))
(assert (in_range2 a_first))
(assert (in_range2 a_last))
(assert (dynamic_invariant4 x true false true true))
(assert (in_range2 x_first))
(assert (dynamic_invariant4 e true false true true))
(assert (in_range2 e_first))
(assert (in_range2 e_last))
(assert (dynamic_invariant4 m true false true true))
(assert (in_range2 m_first))
(assert (in_range2 k))
(assert (dynamic_property 0 2147483646 (to_rep aux1__first) (to_rep aux1__last)))
(assert (in_range2 aux1_first))
(assert (dynamic_property 0 2147483646 (to_rep aux2__first) (to_rep aux2__last)))
(assert (in_range2 aux2_first))
(assert (dynamic_property 0 2147483646 (to_rep aux3__first) (to_rep aux3__last)))
(assert (in_range2 aux3_first))
(assert (dynamic_property 0 2147483646 (to_rep aux4__first) (to_rep aux4__last)))
(assert (in_range2 aux4_first))
(assert (dynamic_invariant4 r true false true true))
(assert (in_range2 r_first))
(assert (and (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))) (and (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last))) (and (< a_first a_last) (and (and (<= (to_rep (first (rt x))) x_first) (<= x_first (to_rep (last (rt x))))) (and (and (<= (to_rep (first (rt x))) (+ x_first (- a_last a_first))) (<= (+ x_first (- a_last a_first)) (to_rep (last (rt x))))) (and (and (<= (to_rep (first (rt e))) e_first) (<= e_first (to_rep (last (rt e))))) (and (and (<= (to_rep (first (rt e))) e_last) (<= e_last (to_rep (last (rt e))))) (and (<= e_first e_last) (and (and (<= (to_rep (first (rt m))) m_first) (<= m_first (to_rep (last (rt m))))) (and (and (<= (to_rep (first (rt m))) (+ m_first (- a_last a_first))) (<= (+ m_first (- a_last a_first)) (to_rep (last (rt m))))) (and (and (<= (to_rep aux1__first) aux1_first) (<= aux1_first (to_rep aux1__last))) (and (and (<= (to_rep aux1__first) (+ aux1_first (- a_last a_first))) (<= (+ aux1_first (- a_last a_first)) (to_rep aux1__last))) (and (and (<= (to_rep aux2__first) aux2_first) (<= aux2_first (to_rep aux2__last))) (and (and (<= (to_rep aux2__first) (+ aux2_first (- a_last a_first))) (<= (+ aux2_first (- a_last a_first)) (to_rep aux2__last))) (and (and (<= (to_rep aux3__first) aux3_first) (<= aux3_first (to_rep aux3__last))) (and (and (<= (to_rep aux3__first) (+ aux3_first (- a_last a_first))) (<= (+ aux3_first (- a_last a_first)) (to_rep aux3__last))) (and (and (<= (to_rep aux4__first) aux4_first) (<= aux4_first (to_rep aux4__last))) (and (and (<= (to_rep aux4__first) (+ aux4_first (- (* (power 2 k) (+ (- a_last a_first) 1)) 1))) (<= (+ aux4_first (- (* (power 2 k) (+ (- a_last a_first) 1)) 1)) (to_rep aux4__last))) (and (<= k 30) (and (and (<= (to_rep (first (rt r))) r_first) (<= r_first (to_rep (last (rt r))))) (and (and (<= (to_rep (first (rt r))) (+ r_first (- a_last a_first))) (<= (+ r_first (- a_last a_first)) (to_rep (last (rt r))))) (and (= (oeq (num_of_big_int r r_first (+ (- a_last a_first) 1)) (omod (oexpon__2 (base Tuple0) (omultiply (from_integer 2) (from_integer (+ (- a_last a_first) 1)))) (num_of_big_int m m_first (+ (- a_last a_first) 1)))) true) (and (= (olt (from_word32 #x00000001) (num_of_big_int m m_first (+ (- a_last a_first) 1))) true) (= (bvadd #x00000001 (bvmul m_inv (to_rep1 (select (elts m) m_first)))) #x00000000)))))))))))))))))))))))))
(assert (=> (<= 0 2147483647) (in_range2 j)))
(assert (=> (<= 0 2147483647) (in_range2 l)))
(assert (=> (<= 0 2147483647) (in_range2 s)))
(assert (and (and (and (and (= l1 (- a_last a_first)) (= (oeq (num_of_big_int (mk___t o63 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first (+ l1 1)) (from_word32 #x00000001)) true)) (= (oeq (num_of_big_int (mk___t o66 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first (+ l1 1)) (omod (omultiply (omultiply (num_of_big_int x x_first (+ l1 1)) (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (= (oeq (num_of_big_int (mk___t o64 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first (+ l1 1)) (omod (oexpon (base Tuple0) (+ l1 1)) (num_of_big_int m m_first (+ l1 1)))) true)) (= (oeq (num_of_big_int (mk___t o65 (mk (to_rep aux4__first) (to_rep aux4__last))) aux4_first (+ l1 1)) (omod (omultiply (num_of_big_int x x_first (+ l1 1)) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))
(assert (=> (<= 0 2147483647) (in_range2 l1)))
(assert (and (= o (power 2 k)) (in_range1 (power 2 k))))
(assert (= o1 (- o 1)))
(assert (and (= temp___695 o1) (in_range1 o1)))
(assert (= (mk_int__ref result) (mk_int__ref h)))
(assert (= h1 1))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= temp___708 h1)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= temp___705 a)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= temp___703 o65)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (and (and (and (and (= l1 (- a_last a_first)) (= (oeq (num_of_big_int (mk___t o63 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first (+ l1 1)) (from_word32 #x00000001)) true)) (= (oeq (num_of_big_int (mk___t o66 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first (+ l1 1)) (omod (omultiply (omultiply (num_of_big_int x x_first (+ l1 1)) (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (= (oeq (num_of_big_int (mk___t o64 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first (+ l1 1)) (omod (oexpon (base Tuple0) (+ l1 1)) (num_of_big_int m m_first (+ l1 1)))) true)) (forall ((n1 Int)) (=> (and (<= 0 n1) (<= n1 (- h2 1))) (= (oeq (num_of_big_int (mk___t o67 (mk (to_rep aux4__first) (to_rep aux4__last))) (+ aux4_first (* n1 (+ l1 1))) (+ l1 1)) (omod (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1)) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (and (=> (<= 1 (- (power 2 k) 1)) (dynamic_property1 1 (- (power 2 k) 1) h2)) (and (<= 1 h2) (<= h2 (- (power 2 k) 1))))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (and (and (and (and (= l1 (- a_last a_first)) (= (oeq (num_of_big_int (mk___t o63 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first (+ l1 1)) (from_word32 #x00000001)) true)) (= (oeq (num_of_big_int (mk___t o66 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first (+ l1 1)) (omod (omultiply (omultiply (num_of_big_int x x_first (+ l1 1)) (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (= (oeq (num_of_big_int (mk___t o64 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first (+ l1 1)) (omod (oexpon (base Tuple0) (+ l1 1)) (num_of_big_int m m_first (+ l1 1)))) true)) (forall ((n1 Int)) (=> (and (<= 0 n1) (<= n1 h2)) (= (oeq (num_of_big_int (mk___t o69 (mk (to_rep aux4__first) (to_rep aux4__last))) (+ aux4_first (* n1 (+ l1 1))) (+ l1 1)) (omod (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1)) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (=> (<= 0 2147483647) (in_range2 l1))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (=> (<= 1 (- (power 2 k) 1)) (dynamic_property1 1 (- (power 2 k) 1) h2))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= h2 temp___695)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= o70 (mk_map__ref o69))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= h3 (mk_int__ref h2))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= aux4 (mk_map__ref o69))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= a2 (mk_map__ref o68))))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= h4 h2)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= o71 o69)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= a3 o68)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= o72 o70)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= h5 h3)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= aux41 aux4)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= a4 a2)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= h6 h4)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= o73 o71)))
(assert (=> (and (<= 1 h1) (<= h1 temp___695)) (= a5 a3)))
(assert (=> (not (and (<= 1 h1) (<= h1 temp___695))) (= o72 (mk_map__ref o65))))
(assert (=> (not (and (<= 1 h1) (<= h1 temp___695))) (= h5 (mk_int__ref h1))))
(assert (=> (not (and (<= 1 h1) (<= h1 temp___695))) (= aux41 (mk_map__ref o65))))
(assert (=> (not (and (<= 1 h1) (<= h1 temp___695))) (= a4 (mk_map__ref a))))
(assert (=> (not (and (<= 1 h1) (<= h1 temp___695))) (= h6 h1)))
(assert (=> (not (and (<= 1 h1) (<= h1 temp___695))) (= o73 o65)))
(assert (=> (not (and (<= 1 h1) (<= h1 temp___695))) (= a5 a1)))
(assert (and (= o2 (- e_last e_first)) (in_range1 (- e_last e_first))))
(assert (and (= o3 o2) (uint_in_range1 o2)))
(assert (= o4 ((_ int2bv 64) o3)))
(assert (= o5 (bvadd o4 #x0000000000000001)))
(assert (= o6 (bvmul o5 #x0000000000000020)))
(assert (= o7 (bvsub o6 #x0000000000000001)))
(assert (= result1 (mk_t__ref1 i)))
(assert (= i1 o7))
(assert (and (and (and (and (and (= l1 (- a_last a_first)) (= (oeq (num_of_big_int (mk___t o63 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first (+ l1 1)) (from_word32 #x00000001)) true)) (= (oeq (num_of_big_int (mk___t o66 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first (+ l1 1)) (omod (omultiply (omultiply (num_of_big_int x x_first (+ l1 1)) (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (= (oeq (num_of_big_int (mk___t o74 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first (+ l1 1)) (omod (omultiply (oexpon__2 (num_of_big_int x x_first (+ l1 1)) (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1)) (oexpon__2 (from_word32 #x00000002) (oadd (from_word64 i2) (from_word32 #x00000001))))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (forall ((n1 Int)) (=> (and (<= 0 n1) (<= n1 (- (power 2 k) 1))) (= (oeq (num_of_big_int (mk___t (map__content aux41) (mk (to_rep aux4__first) (to_rep aux4__last))) (+ aux4_first (* n1 (+ l1 1))) (+ l1 1)) (omod (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1)) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))) (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) #x0000000000000001) #x0000000000000020))))
(assert (and (=> (<= 0 2147483647) (in_range2 j1)) (=> (<= 0 2147483647) (in_range2 s1))))
(assert (and (= result2 (bit_set e e_first i2)) (= (= result2 true) (not (= (bvand (to_rep1 (select (elts e) (+ e_first (bv2nat (bvudiv i2 #x0000000000000020))))) (let ((temp___515 (bv2nat (bvurem i2 #x0000000000000020)))) (ite (< temp___515 4294967296) (bvshl #x00000001 ((_ int2bv 32) temp___515)) #x00000000))) #x00000000)))))
(assert (= result2 true))
(assert (= result3 (mk_t__ref w)))
(assert (= w1 #x00000001))
(assert (= result4 (mk_int__ref s1)))
(assert (= s2 0))
(assert (= result5 (mk_int__ref j1)))
(assert (= j2 1))
(assert (= temp___715 s2))
(assert (= temp___714 j2))
(assert (= temp___713 w1))
(assert (and (and (and (and (and (and (and (and (and (and (and (= l1 (- a_last a_first)) (= (oeq (num_of_big_int (mk___t o63 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first (+ l1 1)) (from_word32 #x00000001)) true)) (= (oeq (num_of_big_int (mk___t o66 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first (+ l1 1)) (omod (omultiply (omultiply (num_of_big_int x x_first (+ l1 1)) (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (= (oeq (num_of_big_int (mk___t o74 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first (+ l1 1)) (omod (omultiply (oexpon__2 (num_of_big_int x x_first (+ l1 1)) (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1)) (oexpon__2 (from_word32 #x00000002) (oadd (from_word64 i2) (from_word32 #x00000001))))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (forall ((n1 Int)) (=> (and (<= 0 n1) (<= n1 (- (power 2 k) 1))) (= (oeq (num_of_big_int (mk___t (map__content aux41) (mk (to_rep aux4__first) (to_rep aux4__last))) (+ aux4_first (* n1 (+ l1 1))) (+ l1 1)) (omod (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1)) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))) (= (oeq (omultiply (from_word32 w2) (oexpon (from_word32 #x00000002) (- (- j3 s3) 1))) (omod (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1)) (oexpon__2 (from_word32 #x00000002) (osubtract (from_word64 i2) (osubtract (from_integer j3) (from_word32 #x00000001))))) (oexpon (from_word32 #x00000002) j3))) true)) (= (bvurem w2 #x00000002) #x00000001)) (<= 0 s3)) (< s3 j3)) (<= j3 (+ k 1))) (= (ole (from_integer j3) (oadd (from_word64 i2) (from_word32 #x00000001))) true)) (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) #x0000000000000001) #x0000000000000020))))
(assert (and (=> (<= 0 2147483647) (in_range2 j3)) (=> (<= 0 2147483647) (in_range2 s3))))
(assert (= w3 (mk_t__ref w2)))
(assert (= s4 (mk_int__ref s3)))
(assert (= j4 (mk_int__ref j3)))
(assert (= w4 w2))
(assert (= s5 s3))
(assert (= j5 j3))
(assert (not (and (<= j3 k) (bvule ((_ int2bv 64) j3) i2))))
(assert (= w5 w3))
(assert (= s6 s4))
(assert (= j6 j4))
(assert (= w6 w4))
(assert (= s7 s5))
(assert (= j7 j5))
(assert (= w7 w5))
(assert (= s8 s6))
(assert (= j8 j6))
(assert (= w8 w6))
(assert (= s9 s7))
(assert (= j9 j7))
(assert (and (= o8 (+ (int__content s8) 1)) (in_range1 (+ (int__content s8) 1))))
(assert (= result6 s8))
(assert (= s10 o8))
(assert (= s10 r94b))
(assert (in_range2 r94b))
(assert (= result7 (mk_int__ref h7)))
(assert (= h8 1))
(assert (<= 1 h8))
(assert (<= h8 r94b))
(assert (and (and (and (and (and (and (and (and (and (and (= l1 (- a_last a_first)) (= (oeq (num_of_big_int (mk___t o63 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first (+ l1 1)) (from_word32 #x00000001)) true)) (= (oeq (num_of_big_int (mk___t o66 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first (+ l1 1)) (omod (omultiply (omultiply (num_of_big_int x x_first (+ l1 1)) (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (= (oeq (num_of_big_int (mk___t o75 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first (+ l1 1)) (omod (omultiply (oexpon__2 (num_of_big_int x x_first (+ l1 1)) (omultiply (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1)) (oexpon__2 (from_word32 #x00000002) (oadd (from_word64 i2) (from_word32 #x00000001)))) (oexpon (from_word32 #x00000002) (- h9 1)))) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)) (forall ((n1 Int)) (=> (and (<= 0 n1) (<= n1 (- (power 2 k) 1))) (= (oeq (num_of_big_int (mk___t (map__content aux41) (mk (to_rep aux4__first) (to_rep aux4__last))) (+ aux4_first (* n1 (+ l1 1))) (+ l1 1)) (omod (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1)) (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))) (= (oeq (from_word32 (t__content w7)) (omod (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1)) (oexpon__2 (from_word32 #x00000002) (osubtract (from_word64 i2) (osubtract (from_integer s10) (from_word32 #x00000001))))) (oexpon (from_word32 #x00000002) s10))) true)) (= (bvurem (t__content w7) #x00000002) #x00000001)) (<= 0 s10)) (<= s10 (+ k 1))) (= (ole (from_integer s10) (oadd (from_word64 i2) (from_word32 #x00000001))) true)) (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) #x0000000000000001) #x0000000000000020))))
(assert (and (=> (<= 1 r94b) (dynamic_property2 1 r94b h9)) (and (<= 1 h9) (<= h9 r94b))))
(assert (= (oeq (num_of_big_int (mk___t o76 (mk (to_rep a__first) (to_rep a__last))) a_first (+ (- a_last a_first) 1)) (omod (omultiply (omultiply (num_of_big_int (mk___t o75 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first (+ (- a_last a_first) 1)) (num_of_big_int (mk___t o75 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first (+ (- a_last a_first) 1))) (oexpon (inverse (num_of_big_int m m_first (+ (- a_last a_first) 1)) (base Tuple0)) (+ (- a_last a_first) 1))) (num_of_big_int m m_first (+ (- a_last a_first) 1)))) true))
(assert (forall ((k1 Int)) (=> (and (<= (to_rep aux3__first) k1) (<= k1 (to_rep aux3__last))) (and (=> (and (<= aux3_first k1) (<= k1 (- (+ aux3_first a_last) a_first))) (= (to_rep1 (select o77 k1)) (to_rep1 (select o76 (- (+ a_first k1) aux3_first))))) (=> (=> (<= aux3_first k1) (not (<= k1 (- (+ aux3_first a_last) a_first)))) (= (to_rep1 (select o77 k1)) (to_rep1 (select o75 k1))))))))
(assert (and (= o57 (- e_last e_first)) (in_range1 (- e_last e_first))))
(assert (and (= o58 o57) (uint_in_range1 o57)))
(assert (= o59 ((_ int2bv 64) o58)))
(assert (= o60 (bvadd o59 #x0000000000000001)))
(assert (= o61 (bvmul o60 #x0000000000000020)))
(assert (= o62 (ite (bvult i2 o61) true false)))
(assert (= o54 (from_word32 #x00000001)))
(assert (= o53 (from_word64 i2)))
(assert (= o55 (oadd o53 o54)))
(assert (= o52 (from_integer s10)))
(assert (= o56 (ole o52 o55)))
(assert (and (= o50 (+ k 1)) (in_range1 (+ k 1))))
(assert (= o51 (ite (<= s10 o50) true false)))
(assert (= o46 (from_word32 #x00000002)))
(assert (= o47 (oexpon o46 s10)))
(assert (= o41 (from_word32 #x00000001)))
(assert (= o40 (from_integer s10)))
(assert (= o42 (osubtract o40 o41)))
(assert (= o39 (from_word64 i2)))
(assert (= o43 (osubtract o39 o42)))
(assert (= o38 (from_word32 #x00000002)))
(assert (= o44 (oexpon__2 o38 o43)))
(assert (and (= o33 (- e_last e_first)) (in_range1 (- e_last e_first))))
(assert (= o34 (+ o33 1)))
(assert (and (= o35 o34) (in_range1 o34)))
(assert (and (= o36 o35) (in_range2 o35)))
(assert (= o37 (num_of_big_int e e_first o36)))
(assert (= o45 (odivide o37 o44)))
(assert (= o48 (omod o45 o47)))
(assert (= o32 (from_word32 (t__content w7))))
(assert (= o49 (oeq o32 o48)))
(assert (and (= o9 (power 2 k)) (in_range1 (power 2 k))))
(assert (= o10 (- o9 1)))
(assert (and (= o11 o10) (in_range1 o10)))
(assert (= o12 (ite (<= n o11) true false)))
(assert (= result8 (ite (<= 0 n) o12 false)))
(assert (= result8 true))
(assert (and (= o29 (+ l1 1)) (in_range1 (+ l1 1))))
(assert (= o30 (num_of_big_int m m_first o29)))
(assert (and (= o26 (+ l1 1)) (in_range1 (+ l1 1))))
(assert (and (= o25 (base Tuple0)) (= o25 (oexpon (from_word32 #x00000002) 32))))
(assert (= o27 (oexpon o25 o26)))
(assert (and (= o20 (* 2 n)) (in_range1 (* 2 n))))
(assert (= o21 (+ o20 1)))
(assert (and (= o22 o21) (in_range1 o21)))
(assert (and (= o23 o22) (in_range2 o22)))
(assert (and (= o18 (+ l1 1)) (in_range1 (+ l1 1))))
(assert (= o19 (num_of_big_int x x_first o18)))
(assert (= o24 (oexpon o19 o23)))
(assert (= o28 (omultiply o24 o27)))
(assert (= o31 (omod o28 o30)))
(assert (and (= o17 (+ l1 1)) (in_range1 (+ l1 1))))
(assert (and (= o13 (+ l1 1)) (in_range1 (+ l1 1))))
(assert (= o14 (* n o13)))
(assert (and (= o15 o14) (in_range1 o14)))
(assert (= o16 (+ aux4_first o15)))
(assert (not (in_range1 o16)))
(check-sat)
(exit)
