(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort byte 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (byte byte) Bool)
(declare-const dummy2 byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep (byte) (_ BitVec 8))
(declare-fun of_rep ((_ BitVec 8)) byte)
(assert (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x byte)) Int (bv2nat (to_rep x)))
(assert (forall ((x byte)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int byte))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int byte)) (a__first Int) (a__last Int) (b (Array Int byte)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort index_number 0)
(declare-fun index_numberqtint (index_number) Int)
(assert (forall ((i index_number)) (and (<= 0 (index_numberqtint i)) (<= (index_numberqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index_number index_number) Bool)
(declare-const dummy3 index_number)
(declare-datatypes () ((index_number__ref (mk_index_number__ref (index_number__content index_number)))))
(define-fun index_number__ref___projection ((a index_number__ref)) index_number (index_number__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int byte)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int byte) (elts a))
(define-fun of_array ((a (Array Int byte)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int byte)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int byte)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content a))
(define-fun dynamic_invariant2 ((temp___expr_300 us_t) (temp___is_init_296 Bool) (temp___skip_constant_297 Bool) (temp___do_toplevel_298 Bool) (temp___do_typ_inv_299 Bool)) Bool (=> (not (= temp___skip_constant_297 true)) (dynamic_property 0 2147483647 (first1 temp___expr_300) (last1 temp___expr_300))))
(declare-sort lane_type 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))
(declare-fun user_eq5 (lane_type lane_type) Bool)
(declare-const dummy5 lane_type)
(declare-datatypes () ((lane_type__ref (mk_lane_type__ref (lane_type__content lane_type)))))
(define-fun lane_type__ref___projection ((a lane_type__ref)) lane_type (lane_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_314 (_ BitVec 64)) (temp___is_init_310 Bool) (temp___skip_constant_311 Bool) (temp___do_toplevel_312 Bool) (temp___do_typ_inv_313 Bool)) Bool true)
(declare-fun to_rep2 (lane_type) (_ BitVec 64))
(declare-fun of_rep2 ((_ BitVec 64)) lane_type)
(assert (forall ((x lane_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int4 ((x lane_type)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x lane_type)) (! (uint_in_range1 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-sort x_coord 0)
(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x04)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))
(declare-fun user_eq6 (x_coord x_coord) Bool)
(declare-const dummy6 x_coord)
(declare-datatypes () ((x_coord__ref (mk_x_coord__ref (x_coord__content x_coord)))))
(define-fun x_coord__ref___projection ((a x_coord__ref)) x_coord (x_coord__content a))
(define-fun dynamic_invariant4 ((temp___expr_321 (_ BitVec 8)) (temp___is_init_317 Bool) (temp___skip_constant_318 Bool) (temp___do_toplevel_319 Bool) (temp___do_typ_inv_320 Bool)) Bool (=> (or (= temp___is_init_317 true) (bvule #x00 #x04)) (in_range4 temp___expr_321)))
(declare-sort y_coord 0)
(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x04)))
(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))
(declare-fun user_eq7 (y_coord y_coord) Bool)
(declare-const dummy7 y_coord)
(declare-datatypes () ((y_coord__ref (mk_y_coord__ref (y_coord__content y_coord)))))
(define-fun y_coord__ref___projection ((a y_coord__ref)) y_coord (y_coord__content a))
(define-fun dynamic_invariant5 ((temp___expr_328 (_ BitVec 8)) (temp___is_init_324 Bool) (temp___skip_constant_325 Bool) (temp___do_toplevel_326 Bool) (temp___do_typ_inv_327 Bool)) Bool (=> (or (= temp___is_init_324 true) (bvule #x00 #x04)) (in_range5 temp___expr_328)))
(declare-sort map1 0)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 (_ BitVec 8) (_ BitVec 8)) lane_type)
(declare-fun set (map1 (_ BitVec 8) (_ BitVec 8) lane_type) map1)
(assert (forall ((m map1)) (forall ((i (_ BitVec 8))) (forall ((j (_ BitVec 8))) (forall ((a lane_type)) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i (_ BitVec 8)) (i2 (_ BitVec 8))) (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8))) (forall ((a lane_type)) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide1 (map1 (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) map1)
(assert (forall ((a map1)) (forall ((new_first (_ BitVec 8)) (old_first (_ BitVec 8))) (forall ((new_first_2 (_ BitVec 8)) (old_first_2 (_ BitVec 8))) (forall ((i (_ BitVec 8))) (forall ((j (_ BitVec 8))) (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) (get a (bvsub i (bvsub new_first old_first)) (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get (slide1 a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq2 ((a map1) (a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b map1) (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8))) Bool (ite (and (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (ite (bvule a__first_2 a__last_2) (and (bvule b__first_2 b__last_2) (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2))) (bvugt b__first_2 b__last_2))) (forall ((temp___idx_155 (_ BitVec 8)) (temp___idx_156 (_ BitVec 8))) (=> (and (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last)) (and (bvule a__first_2 temp___idx_156) (bvule temp___idx_156 a__last_2))) (= (to_rep2 (get a temp___idx_155 temp___idx_156)) (to_rep2 (get b (bvadd (bvsub b__first a__first) temp___idx_155) (bvadd (bvsub b__first_2 a__first_2) temp___idx_156))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8)) (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8))) (=> (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (bvule a__first a__last) (and (bvule b__first b__last) (= (bvsub a__last a__first) (bvsub b__last b__first))) (bvugt b__first b__last)) (ite (bvule a__first_2 a__last_2) (and (bvule b__first_2 b__last_2) (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2))) (bvugt b__first_2 b__last_2))) (forall ((temp___idx_155 (_ BitVec 8)) (temp___idx_156 (_ BitVec 8))) (=> (and (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last)) (and (bvule a__first_2 temp___idx_156) (bvule temp___idx_156 a__last_2))) (= (to_rep2 (get a temp___idx_155 temp___idx_156)) (to_rep2 (get b (bvadd (bvsub b__first a__first) temp___idx_155) (bvadd (bvsub b__first_2 a__first_2) temp___idx_156)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const data us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const bit_len Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const r64s Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(define-fun dynamic_invariant6 ((temp___expr_286 (_ BitVec 8)) (temp___is_init_282 Bool) (temp___skip_constant_283 Bool) (temp___do_toplevel_284 Bool) (temp___do_typ_inv_285 Bool)) Bool true)
(define-fun dynamic_invariant7 ((temp___expr_293 Int) (temp___is_init_289 Bool) (temp___skip_constant_290 Bool) (temp___do_toplevel_291 Bool) (temp___do_typ_inv_292 Bool)) Bool (=> (or (= temp___is_init_289 true) (<= 0 2147483647)) (in_range3 temp___expr_293)))
(declare-const a map1)
(declare-const x (_ BitVec 8))
(declare-const y (_ BitVec 8))
(declare-const remaining_bits Int)
(declare-const offset Int)
(declare-const initial_byte_len Int)
(declare-const lane (_ BitVec 64))
(declare-const i Int)
(declare-const word (_ BitVec 64))
(declare-const remaining_bytes Int)
(declare-const i1 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const temp___793 map1)
(declare-const temp___792 Int)
(declare-const temp___791 Int)
(declare-const temp___790 (_ BitVec 8))
(declare-const temp___789 (_ BitVec 8))
(declare-const temp___797 Int)
(declare-const temp___796 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___785 Int)
(declare-const o5 Int)
(declare-const o6 byte)
(declare-const o7 (_ BitVec 8))
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 (_ BitVec 64))
(declare-const o11 (_ BitVec 64))
(declare-const o12 (_ BitVec 64))
(declare-const o13 (_ BitVec 64))
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const temp___7851 Int)
(declare-const o16 Int)
(declare-const o17 byte)
(declare-const o18 (_ BitVec 8))
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 (_ BitVec 64))
(declare-const o22 (_ BitVec 64))
(declare-const o23 (_ BitVec 64))
(declare-const o24 (_ BitVec 64))
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const temp___7852 Int)
(declare-const o27 Int)
(declare-const o28 byte)
(declare-const o29 (_ BitVec 8))
(declare-const o30 Int)
(declare-const o31 Int)
(declare-const o32 (_ BitVec 64))
(declare-const o33 (_ BitVec 64))
(declare-const o34 (_ BitVec 64))
(declare-const o35 (_ BitVec 64))
(declare-const o36 Int)
(declare-const o37 Int)
(declare-const temp___7853 Int)
(declare-const o38 Int)
(declare-const o39 byte)
(declare-const o40 (_ BitVec 8))
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const o43 (_ BitVec 64))
(declare-const o44 (_ BitVec 64))
(declare-const o45 (_ BitVec 64))
(declare-const o46 (_ BitVec 64))
(declare-const o47 Int)
(declare-const o48 Int)
(declare-const temp___7854 Int)
(declare-const o49 Int)
(declare-const o50 byte)
(declare-const o51 (_ BitVec 8))
(declare-const o52 Int)
(declare-const o53 Int)
(declare-const o54 (_ BitVec 64))
(declare-const o55 (_ BitVec 64))
(declare-const o56 (_ BitVec 64))
(declare-const o57 (_ BitVec 64))
(declare-const o58 Int)
(declare-const o59 Int)
(declare-const temp___7855 Int)
(declare-const o60 Int)
(declare-const o61 byte)
(declare-const o62 (_ BitVec 8))
(declare-const o63 Int)
(declare-const o64 Int)
(declare-const o65 (_ BitVec 64))
(declare-const o66 (_ BitVec 64))
(declare-const o67 (_ BitVec 64))
(declare-const o68 (_ BitVec 64))
(declare-const o69 Int)
(declare-const o70 Int)
(declare-const temp___7856 Int)
(declare-const o71 Int)
(declare-const o72 byte)
(declare-const o73 (_ BitVec 8))
(declare-const o74 Int)
(declare-const o75 Int)
(declare-const o76 (_ BitVec 64))
(declare-const o77 (_ BitVec 64))
(declare-const o78 (_ BitVec 64))
(declare-const o79 (_ BitVec 64))
(declare-const o80 Int)
(declare-const o81 Int)
(declare-const temp___7857 Int)
(declare-const o82 Int)
(declare-const o83 byte)
(declare-const o84 (_ BitVec 8))
(declare-const o85 Int)
(declare-const o86 Int)
(declare-const o87 (_ BitVec 64))
(declare-const o88 (_ BitVec 64))
(declare-const o89 (_ BitVec 64))
(declare-const o90 (_ BitVec 64))
(declare-const o91 lane_type)
(declare-const o92 map1)
(declare-const o93 (_ BitVec 8))
(declare-const o94 (_ BitVec 8))
(declare-const o95 Int)
(declare-const o96 Int)
(declare-const o97 Int)
(declare-const o98 Int)
(declare-const o99 Int)
(declare-const a1 map1)
(declare-const lane1 (_ BitVec 64))
(declare-const i2 Int)
(declare-const result (_ BitVec 8))
(declare-const x1 (_ BitVec 8))
(declare-const result1 (_ BitVec 8))
(declare-const y1 (_ BitVec 8))
(declare-const result2 Int)
(declare-const remaining_bits1 Int)
(declare-const result3 Int)
(declare-const offset1 Int)
(declare-const result4 Int)
(declare-const initial_byte_len1 Int)
(declare-const a2 map1)
(declare-const x2 (_ BitVec 8))
(declare-const y2 (_ BitVec 8))
(declare-const remaining_bits2 Int)
(declare-const offset2 Int)
(declare-const lane2 (_ BitVec 64))
(declare-const i3 Int)
(declare-const temp___7971 Int)
(declare-const temp___7961 Int)
(declare-const result5 Int)
(declare-const temp___7972 Int)
(declare-const result6 Int)
(declare-const temp___7962 Int)
(declare-const result7 (_ BitVec 64))
(declare-const lane3 (_ BitVec 64))
(declare-const result8 int__ref)
(declare-const i4 Int)
(declare-const result9 t__ref1)
(declare-const lane4 (_ BitVec 64))
(declare-const result10 int__ref)
(declare-const i5 Int)
(declare-const result11 t__ref1)
(declare-const lane5 (_ BitVec 64))
(declare-const result12 int__ref)
(declare-const i6 Int)
(declare-const result13 t__ref1)
(declare-const lane6 (_ BitVec 64))
(declare-const result14 int__ref)
(declare-const i7 Int)
(declare-const result15 t__ref1)
(declare-const lane7 (_ BitVec 64))
(declare-const result16 int__ref)
(declare-const i8 Int)
(declare-const result17 t__ref1)
(declare-const lane8 (_ BitVec 64))
(declare-const result18 int__ref)
(declare-const i9 Int)
(declare-const result19 t__ref1)
(declare-const lane9 (_ BitVec 64))
(declare-const result20 int__ref)
(declare-const i10 Int)
(declare-const result21 t__ref1)
(declare-const lane10 (_ BitVec 64))
(declare-const result22 int__ref)
(declare-const i11 Int)
(declare-const result23 t__ref1)
(declare-const lane11 (_ BitVec 64))
(declare-const result24 map__ref1)
(declare-const a3 map1)
(declare-const result25 t__ref)
(declare-const x3 (_ BitVec 8))
(declare-const result26 t__ref)
(declare-const y3 (_ BitVec 8))
(declare-const result27 int__ref)
(declare-const offset3 Int)
(declare-const result28 int__ref)
(declare-const remaining_bits3 Int)
(declare-const a4 map__ref1)
(declare-const x4 t__ref)
(declare-const y4 t__ref)
(declare-const remaining_bits4 int__ref)
(declare-const offset4 int__ref)
(declare-const lane12 t__ref1)
(declare-const i12 int__ref)
(declare-const a5 map1)
(declare-const x5 (_ BitVec 8))
(declare-const y5 (_ BitVec 8))
(declare-const remaining_bits5 Int)
(declare-const offset5 Int)
(declare-const lane13 (_ BitVec 64))
(declare-const i13 Int)
(declare-const a6 map__ref1)
(declare-const x6 t__ref)
(declare-const y6 t__ref)
(declare-const remaining_bits6 int__ref)
(declare-const offset6 int__ref)
(declare-const lane14 t__ref1)
(declare-const i14 int__ref)
(declare-const a7 map1)
(declare-const x7 (_ BitVec 8))
(declare-const y7 (_ BitVec 8))
(declare-const remaining_bits7 Int)
(declare-const offset7 Int)
(declare-const lane15 (_ BitVec 64))
(declare-const i15 Int)
(declare-const result29 t__ref1)
(declare-const word1 (_ BitVec 64))
(declare-const result30 int__ref)
(declare-const remaining_bytes1 Int)
(declare-const result31 int__ref)
(declare-const i16 Int)
(declare-const i17 Int)
(assert (dynamic_invariant2 data true false true true))
(assert (in_range2 bit_len))
(assert (and (<= (length data) 268435455) (and (<= bit_len (* (length data) 8)) (<= bit_len 1600))))
(assert (= result x))
(assert (= x1 #x00))
(assert (in_range4 x1))
(assert (= result1 y))
(assert (= y1 #x00))
(assert (in_range5 y1))
(assert (= result2 remaining_bits))
(assert (= remaining_bits1 bit_len))
(assert (in_range2 remaining_bits1))
(assert (= result3 offset))
(assert (= offset1 0))
(assert (in_range2 offset1))
(assert (and (= o (+ bit_len 7)) (in_range1 (+ bit_len 7))))
(assert (= o1 (div1 o 8)))
(assert (and (= o2 o1) (in_range2 o1)))
(assert (= result4 initial_byte_len))
(assert (= initial_byte_len1 o2))
(assert (in_range2 initial_byte_len1))
(assert (=> (<= 64 remaining_bits1) (= temp___793 a)))
(assert (=> (<= 64 remaining_bits1) (= temp___792 offset1)))
(assert (=> (<= 64 remaining_bits1) (= temp___791 remaining_bits1)))
(assert (=> (<= 64 remaining_bits1) (= temp___790 y1)))
(assert (=> (<= 64 remaining_bits1) (= temp___789 x1)))
(assert (=> (<= 64 remaining_bits1) (= 0 temp___797)))
(assert (=> (<= 64 remaining_bits1) (= 0 temp___796)))
(assert (=> (<= 64 remaining_bits1) (and (= (mod2 offset2 8) 0) (= (+ offset2 (div1 (+ remaining_bits2 7) 8)) initial_byte_len1))))
(assert (=> (<= 64 remaining_bits1) (and (and (and (and (=> (bvule #x00 #x04) (in_range4 x2)) (=> (bvule #x00 #x04) (in_range5 y2))) (=> (<= 0 2147483647) (in_range2 remaining_bits2))) (=> (<= 0 2147483647) (in_range2 offset2))) (<= 64 remaining_bits2))))
(assert (=> (<= 64 remaining_bits1) (= temp___7971 result5)))
(assert (=> (<= 64 remaining_bits1) (= temp___7972 offset2)))
(assert (=> (<= 64 remaining_bits1) (= temp___7961 result6)))
(assert (=> (<= 64 remaining_bits1) (= temp___7962 remaining_bits2)))
(assert (=> (<= 64 remaining_bits1) (= lane2 result7)))
(assert (=> (<= 64 remaining_bits1) (= lane3 #x0000000000000000)))
(assert (=> (<= 64 remaining_bits1) (= result8 (mk_int__ref i3))))
(assert (=> (<= 64 remaining_bits1) (= i4 0)))
(assert (=> (<= 64 remaining_bits1) (and (= o8 (* i4 8)) (in_range1 (* i4 8)))))
(assert (=> (<= 64 remaining_bits1) (and (= o9 o8) (in_range2 o8))))
(assert (=> (<= 64 remaining_bits1) (= o10 ((_ int2bv 64) o9))))
(assert (=> (<= 64 remaining_bits1) (and (= o3 (+ (to_rep1 (first (rt data))) offset2)) (in_range1 (+ (to_rep1 (first (rt data))) offset2)))))
(assert (=> (<= 64 remaining_bits1) (= o4 (+ o3 i4))))
(assert (=> (<= 64 remaining_bits1) (and (= temp___785 o4) (in_range1 o4))))
(assert (=> (<= 64 remaining_bits1) (and (<= (to_rep1 (first (rt data))) temp___785) (<= temp___785 (to_rep1 (last (rt data)))))))
(assert (=> (<= 64 remaining_bits1) (= o5 temp___785)))
(assert (=> (<= 64 remaining_bits1) (= o6 (select (elts data) o5))))
(assert (=> (<= 64 remaining_bits1) (= o7 (to_rep o6))))
(assert (=> (<= 64 remaining_bits1) (= o11 ((_ zero_extend 56) o7))))
(assert (=> (<= 64 remaining_bits1) (= o12 (bvshl o11 o10))))
(assert (=> (<= 64 remaining_bits1) (= o13 (bvor lane3 o12))))
(assert (=> (<= 64 remaining_bits1) (= result9 (mk_t__ref1 lane3))))
(assert (=> (<= 64 remaining_bits1) (= lane4 o13)))
(assert (=> (<= 64 remaining_bits1) (= result10 (mk_int__ref i4))))
(assert (=> (<= 64 remaining_bits1) (= i5 1)))
(assert (=> (<= 64 remaining_bits1) (and (= o19 (* i5 8)) (in_range1 (* i5 8)))))
(assert (=> (<= 64 remaining_bits1) (and (= o20 o19) (in_range2 o19))))
(assert (=> (<= 64 remaining_bits1) (= o21 ((_ int2bv 64) o20))))
(assert (=> (<= 64 remaining_bits1) (and (= o14 (+ (to_rep1 (first (rt data))) offset2)) (in_range1 (+ (to_rep1 (first (rt data))) offset2)))))
(assert (=> (<= 64 remaining_bits1) (= o15 (+ o14 i5))))
(assert (=> (<= 64 remaining_bits1) (and (= temp___7851 o15) (in_range1 o15))))
(assert (=> (<= 64 remaining_bits1) (and (<= (to_rep1 (first (rt data))) temp___7851) (<= temp___7851 (to_rep1 (last (rt data)))))))
(assert (=> (<= 64 remaining_bits1) (= o16 temp___7851)))
(assert (=> (<= 64 remaining_bits1) (= o17 (select (elts data) o16))))
(assert (=> (<= 64 remaining_bits1) (= o18 (to_rep o17))))
(assert (=> (<= 64 remaining_bits1) (= o22 ((_ zero_extend 56) o18))))
(assert (=> (<= 64 remaining_bits1) (= o23 (bvshl o22 o21))))
(assert (=> (<= 64 remaining_bits1) (= o24 (bvor lane4 o23))))
(assert (=> (<= 64 remaining_bits1) (= result11 (mk_t__ref1 lane4))))
(assert (=> (<= 64 remaining_bits1) (= lane5 o24)))
(assert (=> (<= 64 remaining_bits1) (= result12 (mk_int__ref i5))))
(assert (=> (<= 64 remaining_bits1) (= i6 2)))
(assert (=> (<= 64 remaining_bits1) (and (= o30 (* i6 8)) (in_range1 (* i6 8)))))
(assert (=> (<= 64 remaining_bits1) (and (= o31 o30) (in_range2 o30))))
(assert (=> (<= 64 remaining_bits1) (= o32 ((_ int2bv 64) o31))))
(assert (=> (<= 64 remaining_bits1) (and (= o25 (+ (to_rep1 (first (rt data))) offset2)) (in_range1 (+ (to_rep1 (first (rt data))) offset2)))))
(assert (=> (<= 64 remaining_bits1) (= o26 (+ o25 i6))))
(assert (=> (<= 64 remaining_bits1) (and (= temp___7852 o26) (in_range1 o26))))
(assert (=> (<= 64 remaining_bits1) (and (<= (to_rep1 (first (rt data))) temp___7852) (<= temp___7852 (to_rep1 (last (rt data)))))))
(assert (=> (<= 64 remaining_bits1) (= o27 temp___7852)))
(assert (=> (<= 64 remaining_bits1) (= o28 (select (elts data) o27))))
(assert (=> (<= 64 remaining_bits1) (= o29 (to_rep o28))))
(assert (=> (<= 64 remaining_bits1) (= o33 ((_ zero_extend 56) o29))))
(assert (=> (<= 64 remaining_bits1) (= o34 (bvshl o33 o32))))
(assert (=> (<= 64 remaining_bits1) (= o35 (bvor lane5 o34))))
(assert (=> (<= 64 remaining_bits1) (= result13 (mk_t__ref1 lane5))))
(assert (=> (<= 64 remaining_bits1) (= lane6 o35)))
(assert (=> (<= 64 remaining_bits1) (= result14 (mk_int__ref i6))))
(assert (=> (<= 64 remaining_bits1) (= i7 3)))
(assert (=> (<= 64 remaining_bits1) (and (= o41 (* i7 8)) (in_range1 (* i7 8)))))
(assert (=> (<= 64 remaining_bits1) (and (= o42 o41) (in_range2 o41))))
(assert (=> (<= 64 remaining_bits1) (= o43 ((_ int2bv 64) o42))))
(assert (=> (<= 64 remaining_bits1) (and (= o36 (+ (to_rep1 (first (rt data))) offset2)) (in_range1 (+ (to_rep1 (first (rt data))) offset2)))))
(assert (=> (<= 64 remaining_bits1) (= o37 (+ o36 i7))))
(assert (=> (<= 64 remaining_bits1) (and (= temp___7853 o37) (in_range1 o37))))
(assert (=> (<= 64 remaining_bits1) (and (<= (to_rep1 (first (rt data))) temp___7853) (<= temp___7853 (to_rep1 (last (rt data)))))))
(assert (=> (<= 64 remaining_bits1) (= o38 temp___7853)))
(assert (=> (<= 64 remaining_bits1) (= o39 (select (elts data) o38))))
(assert (=> (<= 64 remaining_bits1) (= o40 (to_rep o39))))
(assert (=> (<= 64 remaining_bits1) (= o44 ((_ zero_extend 56) o40))))
(assert (=> (<= 64 remaining_bits1) (= o45 (bvshl o44 o43))))
(assert (=> (<= 64 remaining_bits1) (= o46 (bvor lane6 o45))))
(assert (=> (<= 64 remaining_bits1) (= result15 (mk_t__ref1 lane6))))
(assert (=> (<= 64 remaining_bits1) (= lane7 o46)))
(assert (=> (<= 64 remaining_bits1) (= result16 (mk_int__ref i7))))
(assert (=> (<= 64 remaining_bits1) (= i8 4)))
(assert (=> (<= 64 remaining_bits1) (and (= o52 (* i8 8)) (in_range1 (* i8 8)))))
(assert (=> (<= 64 remaining_bits1) (and (= o53 o52) (in_range2 o52))))
(assert (=> (<= 64 remaining_bits1) (= o54 ((_ int2bv 64) o53))))
(assert (=> (<= 64 remaining_bits1) (and (= o47 (+ (to_rep1 (first (rt data))) offset2)) (in_range1 (+ (to_rep1 (first (rt data))) offset2)))))
(assert (=> (<= 64 remaining_bits1) (= o48 (+ o47 i8))))
(assert (=> (<= 64 remaining_bits1) (and (= temp___7854 o48) (in_range1 o48))))
(assert (=> (<= 64 remaining_bits1) (and (<= (to_rep1 (first (rt data))) temp___7854) (<= temp___7854 (to_rep1 (last (rt data)))))))
(assert (=> (<= 64 remaining_bits1) (= o49 temp___7854)))
(assert (=> (<= 64 remaining_bits1) (= o50 (select (elts data) o49))))
(assert (=> (<= 64 remaining_bits1) (= o51 (to_rep o50))))
(assert (=> (<= 64 remaining_bits1) (= o55 ((_ zero_extend 56) o51))))
(assert (=> (<= 64 remaining_bits1) (= o56 (bvshl o55 o54))))
(assert (=> (<= 64 remaining_bits1) (= o57 (bvor lane7 o56))))
(assert (=> (<= 64 remaining_bits1) (= result17 (mk_t__ref1 lane7))))
(assert (=> (<= 64 remaining_bits1) (= lane8 o57)))
(assert (=> (<= 64 remaining_bits1) (= result18 (mk_int__ref i8))))
(assert (=> (<= 64 remaining_bits1) (= i9 5)))
(assert (=> (<= 64 remaining_bits1) (and (= o63 (* i9 8)) (in_range1 (* i9 8)))))
(assert (=> (<= 64 remaining_bits1) (and (= o64 o63) (in_range2 o63))))
(assert (=> (<= 64 remaining_bits1) (= o65 ((_ int2bv 64) o64))))
(assert (=> (<= 64 remaining_bits1) (and (= o58 (+ (to_rep1 (first (rt data))) offset2)) (in_range1 (+ (to_rep1 (first (rt data))) offset2)))))
(assert (=> (<= 64 remaining_bits1) (= o59 (+ o58 i9))))
(assert (=> (<= 64 remaining_bits1) (and (= temp___7855 o59) (in_range1 o59))))
(assert (=> (<= 64 remaining_bits1) (and (<= (to_rep1 (first (rt data))) temp___7855) (<= temp___7855 (to_rep1 (last (rt data)))))))
(assert (=> (<= 64 remaining_bits1) (= o60 temp___7855)))
(assert (=> (<= 64 remaining_bits1) (= o61 (select (elts data) o60))))
(assert (=> (<= 64 remaining_bits1) (= o62 (to_rep o61))))
(assert (=> (<= 64 remaining_bits1) (= o66 ((_ zero_extend 56) o62))))
(assert (=> (<= 64 remaining_bits1) (= o67 (bvshl o66 o65))))
(assert (=> (<= 64 remaining_bits1) (= o68 (bvor lane8 o67))))
(assert (=> (<= 64 remaining_bits1) (= result19 (mk_t__ref1 lane8))))
(assert (=> (<= 64 remaining_bits1) (= lane9 o68)))
(assert (=> (<= 64 remaining_bits1) (= result20 (mk_int__ref i9))))
(assert (=> (<= 64 remaining_bits1) (= i10 6)))
(assert (=> (<= 64 remaining_bits1) (and (= o74 (* i10 8)) (in_range1 (* i10 8)))))
(assert (=> (<= 64 remaining_bits1) (and (= o75 o74) (in_range2 o74))))
(assert (=> (<= 64 remaining_bits1) (= o76 ((_ int2bv 64) o75))))
(assert (=> (<= 64 remaining_bits1) (and (= o69 (+ (to_rep1 (first (rt data))) offset2)) (in_range1 (+ (to_rep1 (first (rt data))) offset2)))))
(assert (=> (<= 64 remaining_bits1) (= o70 (+ o69 i10))))
(assert (=> (<= 64 remaining_bits1) (and (= temp___7856 o70) (in_range1 o70))))
(assert (=> (<= 64 remaining_bits1) (and (<= (to_rep1 (first (rt data))) temp___7856) (<= temp___7856 (to_rep1 (last (rt data)))))))
(assert (=> (<= 64 remaining_bits1) (= o71 temp___7856)))
(assert (=> (<= 64 remaining_bits1) (= o72 (select (elts data) o71))))
(assert (=> (<= 64 remaining_bits1) (= o73 (to_rep o72))))
(assert (=> (<= 64 remaining_bits1) (= o77 ((_ zero_extend 56) o73))))
(assert (=> (<= 64 remaining_bits1) (= o78 (bvshl o77 o76))))
(assert (=> (<= 64 remaining_bits1) (= o79 (bvor lane9 o78))))
(assert (=> (<= 64 remaining_bits1) (= result21 (mk_t__ref1 lane9))))
(assert (=> (<= 64 remaining_bits1) (= lane10 o79)))
(assert (=> (<= 64 remaining_bits1) (= result22 (mk_int__ref i10))))
(assert (=> (<= 64 remaining_bits1) (= i11 7)))
(assert (=> (<= 64 remaining_bits1) (and (= o85 (* i11 8)) (in_range1 (* i11 8)))))
(assert (=> (<= 64 remaining_bits1) (and (= o86 o85) (in_range2 o85))))
(assert (=> (<= 64 remaining_bits1) (= o87 ((_ int2bv 64) o86))))
(assert (=> (<= 64 remaining_bits1) (and (= o80 (+ (to_rep1 (first (rt data))) offset2)) (in_range1 (+ (to_rep1 (first (rt data))) offset2)))))
(assert (=> (<= 64 remaining_bits1) (= o81 (+ o80 i11))))
(assert (=> (<= 64 remaining_bits1) (and (= temp___7857 o81) (in_range1 o81))))
(assert (=> (<= 64 remaining_bits1) (and (<= (to_rep1 (first (rt data))) temp___7857) (<= temp___7857 (to_rep1 (last (rt data)))))))
(assert (=> (<= 64 remaining_bits1) (= o82 temp___7857)))
(assert (=> (<= 64 remaining_bits1) (= o83 (select (elts data) o82))))
(assert (=> (<= 64 remaining_bits1) (= o84 (to_rep o83))))
(assert (=> (<= 64 remaining_bits1) (= o88 ((_ zero_extend 56) o84))))
(assert (=> (<= 64 remaining_bits1) (= o89 (bvshl o88 o87))))
(assert (=> (<= 64 remaining_bits1) (= o90 (bvor lane10 o89))))
(assert (=> (<= 64 remaining_bits1) (= result23 (mk_t__ref1 lane10))))
(assert (=> (<= 64 remaining_bits1) (= lane11 o90)))
(assert (=> (<= 64 remaining_bits1) (= (to_rep2 o91) (bvxor (to_rep2 (get a2 x2 y2)) lane11))))
(assert (=> (<= 64 remaining_bits1) (= o92 (set a2 x2 y2 o91))))
(assert (=> (<= 64 remaining_bits1) (= result24 (mk_map__ref1 a2))))
(assert (=> (<= 64 remaining_bits1) (= a3 o92)))
(assert (=> (<= 64 remaining_bits1) (=> (bvule (bvsub #x05 x2) #x01) (= o93 (bvsub (bvadd x2 #x01) #x05)))))
(assert (=> (<= 64 remaining_bits1) (=> (not (bvule (bvsub #x05 x2) #x01)) (= o93 (bvadd x2 #x01)))))
(assert (=> (<= 64 remaining_bits1) (= result25 (mk_t__ref x2))))
(assert (=> (<= 64 remaining_bits1) (= x3 o93)))
(assert (=> (<= 64 remaining_bits1) (=> (= x3 #x00) (=> (bvule (bvsub #x05 y2) #x01) (= o94 (bvsub (bvadd y2 #x01) #x05))))))
(assert (=> (<= 64 remaining_bits1) (=> (= x3 #x00) (=> (not (bvule (bvsub #x05 y2) #x01)) (= o94 (bvadd y2 #x01))))))
(assert (=> (<= 64 remaining_bits1) (=> (= x3 #x00) (= result26 (mk_t__ref y2)))))
(assert (=> (<= 64 remaining_bits1) (=> (= x3 #x00) (= y3 o94))))
(assert (=> (<= 64 remaining_bits1) (=> (not (= x3 #x00)) (= y3 y2))))
(assert (=> (<= 64 remaining_bits1) (and (= o95 (+ offset2 8)) (in_range1 (+ offset2 8)))))
(assert (=> (<= 64 remaining_bits1) (= result27 (mk_int__ref offset2))))
(assert (=> (<= 64 remaining_bits1) (= offset3 o95)))
(assert (=> (<= 64 remaining_bits1) (and (= o96 (- remaining_bits2 64)) (in_range2 (- remaining_bits2 64)))))
(assert (=> (<= 64 remaining_bits1) (= result28 (mk_int__ref remaining_bits2))))
(assert (=> (<= 64 remaining_bits1) (= remaining_bits3 o96)))
(assert (=> (<= 64 remaining_bits1) (not (<= 64 remaining_bits3))))
(assert (=> (<= 64 remaining_bits1) (= i12 (mk_int__ref i11))))
(assert (=> (<= 64 remaining_bits1) (= lane12 (mk_t__ref1 lane11))))
(assert (=> (<= 64 remaining_bits1) (= offset4 (mk_int__ref offset3))))
(assert (=> (<= 64 remaining_bits1) (= remaining_bits4 (mk_int__ref remaining_bits3))))
(assert (=> (<= 64 remaining_bits1) (= y4 (mk_t__ref y3))))
(assert (=> (<= 64 remaining_bits1) (= x4 (mk_t__ref x3))))
(assert (=> (<= 64 remaining_bits1) (= a4 (mk_map__ref1 a3))))
(assert (=> (<= 64 remaining_bits1) (= i13 i11)))
(assert (=> (<= 64 remaining_bits1) (= lane13 lane11)))
(assert (=> (<= 64 remaining_bits1) (= offset5 offset3)))
(assert (=> (<= 64 remaining_bits1) (= remaining_bits5 remaining_bits3)))
(assert (=> (<= 64 remaining_bits1) (= y5 y3)))
(assert (=> (<= 64 remaining_bits1) (= x5 x3)))
(assert (=> (<= 64 remaining_bits1) (= a5 a3)))
(assert (=> (<= 64 remaining_bits1) (= i14 i12)))
(assert (=> (<= 64 remaining_bits1) (= lane14 lane12)))
(assert (=> (<= 64 remaining_bits1) (= offset6 offset4)))
(assert (=> (<= 64 remaining_bits1) (= remaining_bits6 remaining_bits4)))
(assert (=> (<= 64 remaining_bits1) (= y6 y4)))
(assert (=> (<= 64 remaining_bits1) (= x6 x4)))
(assert (=> (<= 64 remaining_bits1) (= a6 a4)))
(assert (=> (<= 64 remaining_bits1) (= i15 i13)))
(assert (=> (<= 64 remaining_bits1) (= lane15 lane13)))
(assert (=> (<= 64 remaining_bits1) (= offset7 offset5)))
(assert (=> (<= 64 remaining_bits1) (= remaining_bits7 remaining_bits5)))
(assert (=> (<= 64 remaining_bits1) (= y7 y5)))
(assert (=> (<= 64 remaining_bits1) (= x7 x5)))
(assert (=> (<= 64 remaining_bits1) (= a7 a5)))
(assert (=> (not (<= 64 remaining_bits1)) (= i14 (mk_int__ref i))))
(assert (=> (not (<= 64 remaining_bits1)) (= lane14 (mk_t__ref1 lane))))
(assert (=> (not (<= 64 remaining_bits1)) (= offset6 (mk_int__ref offset1))))
(assert (=> (not (<= 64 remaining_bits1)) (= remaining_bits6 (mk_int__ref remaining_bits1))))
(assert (=> (not (<= 64 remaining_bits1)) (= y6 (mk_t__ref y1))))
(assert (=> (not (<= 64 remaining_bits1)) (= x6 (mk_t__ref x1))))
(assert (=> (not (<= 64 remaining_bits1)) (= a6 (mk_map__ref1 a))))
(assert (=> (not (<= 64 remaining_bits1)) (= i15 i2)))
(assert (=> (not (<= 64 remaining_bits1)) (= lane15 lane1)))
(assert (=> (not (<= 64 remaining_bits1)) (= offset7 offset1)))
(assert (=> (not (<= 64 remaining_bits1)) (= remaining_bits7 remaining_bits1)))
(assert (=> (not (<= 64 remaining_bits1)) (= y7 y1)))
(assert (=> (not (<= 64 remaining_bits1)) (= x7 x1)))
(assert (=> (not (<= 64 remaining_bits1)) (= a7 a1)))
(assert (< 0 (int__content remaining_bits6)))
(assert (= result29 (mk_t__ref1 word)))
(assert (= word1 #x0000000000000000))
(assert (and (= o97 (+ (int__content remaining_bits6) 7)) (in_range1 (+ (int__content remaining_bits6) 7))))
(assert (= o98 (div1 o97 8)))
(assert (and (= o99 o98) (in_range2 o98)))
(assert (= result30 (mk_int__ref remaining_bytes)))
(assert (= remaining_bytes1 o99))
(assert (in_range2 remaining_bytes1))
(assert (= (- remaining_bytes1 1) r64s))
(assert (in_range1 r64s))
(assert (= result31 (mk_int__ref i1)))
(assert (= i16 0))
(assert (<= 0 i16))
(assert (<= i16 r64s))
(assert (and (<= 0 i17) (<= i17 r64s)))
(assert (not (in_range1 (* i17 8))))
(check-sat)
(exit)
