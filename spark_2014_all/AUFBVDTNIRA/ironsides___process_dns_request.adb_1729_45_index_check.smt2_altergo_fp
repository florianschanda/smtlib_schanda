(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int1 : bool -> int

axiom to_int_def1 :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type packet_length_range

predicate in_range2(x: int) = ((0 <= x) and (x <= 8192))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : packet_length_range, packet_length_range -> bool

logic dummy1 : packet_length_range

type packet_length_range__ref = { packet_length_range__content :
packet_length_range
}

function packet_length_range__ref___projection(a: packet_length_range__ref) : packet_length_range =
  (a).packet_length_range__content

type packet_bytes_range

predicate in_range3(x: int) = ((1 <= x) and (x <= 8180))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : packet_bytes_range, packet_bytes_range -> bool

logic dummy2 : packet_bytes_range

type packet_bytes_range__ref = { packet_bytes_range__content :
packet_bytes_range
}

function packet_bytes_range__ref___projection(a: packet_bytes_range__ref) : packet_bytes_range =
  (a).packet_bytes_range__content

type byte

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic user_eq3 : byte, byte -> bool

logic dummy3 : byte

type byte__ref = { byte__content : byte
}

function byte__ref___projection(a: byte__ref) : byte = (a).byte__content

logic to_rep1 : byte -> t

logic of_rep1 : t -> byte

axiom inversion_axiom1 :
  (forall x:byte [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int2(x: byte) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:byte [to_int2(x)]. uint_in_range(to_int2(x)))

type tunsigned_shortB

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tunsigned_shortB, tunsigned_shortB -> bool

logic dummy4 : tunsigned_shortB

type tunsigned_shortB__ref = { tunsigned_shortB__content : tunsigned_shortB
}

function tunsigned_shortB__ref___projection(a: tunsigned_shortB__ref) : tunsigned_shortB =
  (a).tunsigned_shortB__content

type unsigned_short

predicate in_range5(x: int) = ((0 <= x) and (x <= 65535))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : unsigned_short, unsigned_short -> bool

logic dummy5 : unsigned_short

type unsigned_short__ref = { unsigned_short__content : unsigned_short
}

function unsigned_short__ref___projection(a: unsigned_short__ref) : unsigned_short =
  (a).unsigned_short__content

logic to_rep2 : unsigned_short -> int

logic of_rep2 : int -> unsigned_short

axiom inversion_axiom2 :
  (forall x:unsigned_short [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:unsigned_short [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type query_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 18))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : query_type, query_type -> bool

logic dummy6 : query_type

type query_type__ref = { query_type__content : query_type
}

function query_type__ref___projection(a: query_type__ref) : query_type =
  (a).query_type__content

logic to_rep3 : query_type -> int

logic of_rep3 : int -> query_type

axiom inversion_axiom3 :
  (forall x:query_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:query_type [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__dns_types__edns_record__root : character;
rec__dns_types__edns_record__code : query_type;
rec__dns_types__edns_record__payload_size : unsigned_short;
rec__dns_types__edns_record__rcode : byte;
rec__dns_types__edns_record__version : byte;
rec__dns_types__edns_record__ztop : byte;
rec__dns_types__edns_record__zbottom : byte;
rec__dns_types__edns_record__rdlen : unsigned_short
}

function us_split_fields_Root__projection(a: us_split_fields) : character =
  (a).rec__dns_types__edns_record__root

function us_split_fields_Code__projection(a: us_split_fields) : query_type =
  (a).rec__dns_types__edns_record__code

function us_split_fields_Payload_Size__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__edns_record__payload_size

function us_split_fields_RCode__2__projection(a: us_split_fields) : byte =
  (a).rec__dns_types__edns_record__rcode

function us_split_fields_Version__projection(a: us_split_fields) : byte =
  (a).rec__dns_types__edns_record__version

function us_split_fields_ZTop__projection(a: us_split_fields) : byte =
  (a).rec__dns_types__edns_record__ztop

function us_split_fields_ZBottom__projection(a: us_split_fields) : byte =
  (a).rec__dns_types__edns_record__zbottom

function us_split_fields_RDLen__projection(a: us_split_fields) : unsigned_short =
  (a).rec__dns_types__edns_record__rdlen

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq10 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq10(a, b)].
  ((((((((((to_rep(((a).us_split_fields1).rec__dns_types__edns_record__root) = to_rep(((b).us_split_fields1).rec__dns_types__edns_record__root)) and
  (to_rep3(((a).us_split_fields1).rec__dns_types__edns_record__code) = to_rep3(((b).us_split_fields1).rec__dns_types__edns_record__code))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__edns_record__payload_size) = to_rep2(((b).us_split_fields1).rec__dns_types__edns_record__payload_size))) and
  (to_rep1(((a).us_split_fields1).rec__dns_types__edns_record__rcode) = to_rep1(((b).us_split_fields1).rec__dns_types__edns_record__rcode))) and
  (to_rep1(((a).us_split_fields1).rec__dns_types__edns_record__version) = to_rep1(((b).us_split_fields1).rec__dns_types__edns_record__version))) and
  (to_rep1(((a).us_split_fields1).rec__dns_types__edns_record__ztop) = to_rep1(((b).us_split_fields1).rec__dns_types__edns_record__ztop))) and
  (to_rep1(((a).us_split_fields1).rec__dns_types__edns_record__zbottom) = to_rep1(((b).us_split_fields1).rec__dns_types__edns_record__zbottom))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__edns_record__rdlen) = to_rep2(((b).us_split_fields1).rec__dns_types__edns_record__rdlen))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((((((to_rep(((a).us_split_fields1).rec__dns_types__edns_record__root) = to_rep(((b).us_split_fields1).rec__dns_types__edns_record__root)) and
  (to_rep3(((a).us_split_fields1).rec__dns_types__edns_record__code) = to_rep3(((b).us_split_fields1).rec__dns_types__edns_record__code))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__edns_record__payload_size) = to_rep2(((b).us_split_fields1).rec__dns_types__edns_record__payload_size))) and
  (to_rep1(((a).us_split_fields1).rec__dns_types__edns_record__rcode) = to_rep1(((b).us_split_fields1).rec__dns_types__edns_record__rcode))) and
  (to_rep1(((a).us_split_fields1).rec__dns_types__edns_record__version) = to_rep1(((b).us_split_fields1).rec__dns_types__edns_record__version))) and
  (to_rep1(((a).us_split_fields1).rec__dns_types__edns_record__ztop) = to_rep1(((b).us_split_fields1).rec__dns_types__edns_record__ztop))) and
  (to_rep1(((a).us_split_fields1).rec__dns_types__edns_record__zbottom) = to_rep1(((b).us_split_fields1).rec__dns_types__edns_record__zbottom))) and
  (to_rep2(((a).us_split_fields1).rec__dns_types__edns_record__rdlen) = to_rep2(((b).us_split_fields1).rec__dns_types__edns_record__rdlen)))) ->
  (bool_eq10(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:character. forall a1:query_type. forall a2:unsigned_short.
  forall a3:byte. forall a4:byte. forall a5:byte. forall a6:byte.
  forall a7:unsigned_short. (0 <= object__size({ us_split_fields1 = {
  rec__dns_types__edns_record__root = a; rec__dns_types__edns_record__code =
  a1; rec__dns_types__edns_record__payload_size = a2;
  rec__dns_types__edns_record__rcode = a3;
  rec__dns_types__edns_record__version = a4;
  rec__dns_types__edns_record__ztop = a5;
  rec__dns_types__edns_record__zbottom = a6;
  rec__dns_types__edns_record__rdlen = a7 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:character. forall a1:query_type. forall a2:unsigned_short.
  forall a3:byte. forall a4:byte. forall a5:byte. forall a6:byte.
  forall a7:unsigned_short. (0 <= object__alignment({ us_split_fields1 = {
  rec__dns_types__edns_record__root = a; rec__dns_types__edns_record__code =
  a1; rec__dns_types__edns_record__payload_size = a2;
  rec__dns_types__edns_record__rcode = a3;
  rec__dns_types__edns_record__version = a4;
  rec__dns_types__edns_record__ztop = a5;
  rec__dns_types__edns_record__zbottom = a6;
  rec__dns_types__edns_record__rdlen = a7 } })))

logic dns_types__edns_record__root__first__bit : int

logic dns_types__edns_record__root__last__bit : int

logic dns_types__edns_record__root__position : int

axiom dns_types__edns_record__root__first__bit_axiom :
  (0 <= dns_types__edns_record__root__first__bit)

axiom dns_types__edns_record__root__last__bit_axiom :
  (dns_types__edns_record__root__first__bit <  dns_types__edns_record__root__last__bit)

axiom dns_types__edns_record__root__position_axiom :
  (0 <= dns_types__edns_record__root__position)

logic dns_types__edns_record__code__first__bit : int

logic dns_types__edns_record__code__last__bit : int

logic dns_types__edns_record__code__position : int

axiom dns_types__edns_record__code__first__bit_axiom :
  (0 <= dns_types__edns_record__code__first__bit)

axiom dns_types__edns_record__code__last__bit_axiom :
  (dns_types__edns_record__code__first__bit <  dns_types__edns_record__code__last__bit)

axiom dns_types__edns_record__code__position_axiom :
  (0 <= dns_types__edns_record__code__position)

logic dns_types__edns_record__payload_size__first__bit : int

logic dns_types__edns_record__payload_size__last__bit : int

logic dns_types__edns_record__payload_size__position : int

axiom dns_types__edns_record__payload_size__first__bit_axiom :
  (0 <= dns_types__edns_record__payload_size__first__bit)

axiom dns_types__edns_record__payload_size__last__bit_axiom :
  (dns_types__edns_record__payload_size__first__bit <  dns_types__edns_record__payload_size__last__bit)

axiom dns_types__edns_record__payload_size__position_axiom :
  (0 <= dns_types__edns_record__payload_size__position)

logic dns_types__edns_record__rcode__first__bit : int

logic dns_types__edns_record__rcode__last__bit : int

logic dns_types__edns_record__rcode__position : int

axiom dns_types__edns_record__rcode__first__bit_axiom :
  (0 <= dns_types__edns_record__rcode__first__bit)

axiom dns_types__edns_record__rcode__last__bit_axiom :
  (dns_types__edns_record__rcode__first__bit <  dns_types__edns_record__rcode__last__bit)

axiom dns_types__edns_record__rcode__position_axiom :
  (0 <= dns_types__edns_record__rcode__position)

logic dns_types__edns_record__version__first__bit : int

logic dns_types__edns_record__version__last__bit : int

logic dns_types__edns_record__version__position : int

axiom dns_types__edns_record__version__first__bit_axiom :
  (0 <= dns_types__edns_record__version__first__bit)

axiom dns_types__edns_record__version__last__bit_axiom :
  (dns_types__edns_record__version__first__bit <  dns_types__edns_record__version__last__bit)

axiom dns_types__edns_record__version__position_axiom :
  (0 <= dns_types__edns_record__version__position)

logic dns_types__edns_record__ztop__first__bit : int

logic dns_types__edns_record__ztop__last__bit : int

logic dns_types__edns_record__ztop__position : int

axiom dns_types__edns_record__ztop__first__bit_axiom :
  (0 <= dns_types__edns_record__ztop__first__bit)

axiom dns_types__edns_record__ztop__last__bit_axiom :
  (dns_types__edns_record__ztop__first__bit <  dns_types__edns_record__ztop__last__bit)

axiom dns_types__edns_record__ztop__position_axiom :
  (0 <= dns_types__edns_record__ztop__position)

logic dns_types__edns_record__zbottom__first__bit : int

logic dns_types__edns_record__zbottom__last__bit : int

logic dns_types__edns_record__zbottom__position : int

axiom dns_types__edns_record__zbottom__first__bit_axiom :
  (0 <= dns_types__edns_record__zbottom__first__bit)

axiom dns_types__edns_record__zbottom__last__bit_axiom :
  (dns_types__edns_record__zbottom__first__bit <  dns_types__edns_record__zbottom__last__bit)

axiom dns_types__edns_record__zbottom__position_axiom :
  (0 <= dns_types__edns_record__zbottom__position)

logic dns_types__edns_record__rdlen__first__bit : int

logic dns_types__edns_record__rdlen__last__bit : int

logic dns_types__edns_record__rdlen__position : int

axiom dns_types__edns_record__rdlen__first__bit_axiom :
  (0 <= dns_types__edns_record__rdlen__first__bit)

axiom dns_types__edns_record__rdlen__last__bit_axiom :
  (dns_types__edns_record__rdlen__first__bit <  dns_types__edns_record__rdlen__last__bit)

axiom dns_types__edns_record__rdlen__position_axiom :
  (0 <= dns_types__edns_record__rdlen__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : character

logic dummy8 : query_type

logic dummy9 : unsigned_short

logic dummy10 : byte

logic dummy11 : byte

logic dummy12 : byte

logic dummy13 : byte

logic dummy14 : unsigned_short

type edns_record__ref = { edns_record__content : us_rep
}

function edns_record__ref___projection(a: edns_record__ref) : us_rep =
  (a).edns_record__content

type map__ref = { map__content : (int,byte) farray
}

logic slide : (int,byte) farray, int, int -> (int,byte) farray

axiom slide_eq :
  (forall a:(int,byte) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,byte) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq11 : (int,byte) farray, int, int, (int,byte) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,byte) farray. forall a__first:int. forall a__last:int.
  forall b:(int,byte) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep1((a[temp___idx_173])) = to_rep1((b[((b__first - a__first) + temp___idx_173)])))))))))

type opcode_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : opcode_type, opcode_type -> bool

logic dummy15 : opcode_type

type opcode_type__ref = { opcode_type__content : opcode_type
}

function opcode_type__ref___projection(a: opcode_type__ref) : opcode_type =
  (a).opcode_type__content

logic to_rep4 : opcode_type -> int

logic of_rep4 : int -> opcode_type

axiom inversion_axiom4 :
  (forall x:opcode_type [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:opcode_type [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type response_code

predicate in_range8(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : response_code, response_code -> bool

logic dummy16 : response_code

type response_code__ref = { response_code__content : response_code
}

function response_code__ref___projection(a: response_code__ref) : response_code =
  (a).response_code__content

logic to_rep5 : response_code -> int

logic of_rep5 : int -> response_code

axiom inversion_axiom5 :
  (forall x:response_code [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:response_code [to_rep5(x)]. in_range8(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range8(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__dns_types__header_type__messageid :
unsigned_short; rec__dns_types__header_type__qr : bool;
rec__dns_types__header_type__opcode : opcode_type;
rec__dns_types__header_type__aa : bool; rec__dns_types__header_type__tc :
bool; rec__dns_types__header_type__rd : bool; rec__dns_types__header_type__ra
: bool; rec__dns_types__header_type__res1 : bool;
rec__dns_types__header_type__res2 : bool; rec__dns_types__header_type__res3 :
bool; rec__dns_types__header_type__rcode : response_code;
rec__dns_types__header_type__qdcount : unsigned_short;
rec__dns_types__header_type__ancount : unsigned_short;
rec__dns_types__header_type__nscount : unsigned_short;
rec__dns_types__header_type__arcount : unsigned_short
}

function us_split_fields_MessageID__projection(a: us_split_fields2) : unsigned_short =
  (a).rec__dns_types__header_type__messageid

function us_split_fields_QR__projection(a: us_split_fields2) : bool =
  (a).rec__dns_types__header_type__qr

function us_split_fields_Opcode__projection(a: us_split_fields2) : opcode_type =
  (a).rec__dns_types__header_type__opcode

function us_split_fields_AA__projection(a: us_split_fields2) : bool =
  (a).rec__dns_types__header_type__aa

function us_split_fields_TC__projection(a: us_split_fields2) : bool =
  (a).rec__dns_types__header_type__tc

function us_split_fields_RD__projection(a: us_split_fields2) : bool =
  (a).rec__dns_types__header_type__rd

function us_split_fields_RA__projection(a: us_split_fields2) : bool =
  (a).rec__dns_types__header_type__ra

function us_split_fields_Res1__projection(a: us_split_fields2) : bool =
  (a).rec__dns_types__header_type__res1

function us_split_fields_Res2__projection(a: us_split_fields2) : bool =
  (a).rec__dns_types__header_type__res2

function us_split_fields_Res3__projection(a: us_split_fields2) : bool =
  (a).rec__dns_types__header_type__res3

function us_split_fields_RCode__projection(a: us_split_fields2) : response_code =
  (a).rec__dns_types__header_type__rcode

function us_split_fields_QDCount__projection(a: us_split_fields2) : unsigned_short =
  (a).rec__dns_types__header_type__qdcount

function us_split_fields_ANCount__projection(a: us_split_fields2) : unsigned_short =
  (a).rec__dns_types__header_type__ancount

function us_split_fields_NSCount__projection(a: us_split_fields2) : unsigned_short =
  (a).rec__dns_types__header_type__nscount

function us_split_fields_ARCount__projection(a: us_split_fields2) : unsigned_short =
  (a).rec__dns_types__header_type__arcount

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq14 : us_rep1, us_rep1 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq14(a, b)].
  (((((((((((((((((to_rep2(((a).us_split_fields3).rec__dns_types__header_type__messageid) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__messageid)) and
  (((a).us_split_fields3).rec__dns_types__header_type__qr = ((b).us_split_fields3).rec__dns_types__header_type__qr)) and
  (to_rep4(((a).us_split_fields3).rec__dns_types__header_type__opcode) = to_rep4(((b).us_split_fields3).rec__dns_types__header_type__opcode))) and
  (((a).us_split_fields3).rec__dns_types__header_type__aa = ((b).us_split_fields3).rec__dns_types__header_type__aa)) and
  (((a).us_split_fields3).rec__dns_types__header_type__tc = ((b).us_split_fields3).rec__dns_types__header_type__tc)) and
  (((a).us_split_fields3).rec__dns_types__header_type__rd = ((b).us_split_fields3).rec__dns_types__header_type__rd)) and
  (((a).us_split_fields3).rec__dns_types__header_type__ra = ((b).us_split_fields3).rec__dns_types__header_type__ra)) and
  (((a).us_split_fields3).rec__dns_types__header_type__res1 = ((b).us_split_fields3).rec__dns_types__header_type__res1)) and
  (((a).us_split_fields3).rec__dns_types__header_type__res2 = ((b).us_split_fields3).rec__dns_types__header_type__res2)) and
  (((a).us_split_fields3).rec__dns_types__header_type__res3 = ((b).us_split_fields3).rec__dns_types__header_type__res3)) and
  (to_rep5(((a).us_split_fields3).rec__dns_types__header_type__rcode) = to_rep5(((b).us_split_fields3).rec__dns_types__header_type__rcode))) and
  (to_rep2(((a).us_split_fields3).rec__dns_types__header_type__qdcount) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__qdcount))) and
  (to_rep2(((a).us_split_fields3).rec__dns_types__header_type__ancount) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__ancount))) and
  (to_rep2(((a).us_split_fields3).rec__dns_types__header_type__nscount) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__nscount))) and
  (to_rep2(((a).us_split_fields3).rec__dns_types__header_type__arcount) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__arcount))) ->
  (bool_eq14(a, b) = true)) and
  ((not (((((((((((((((to_rep2(((a).us_split_fields3).rec__dns_types__header_type__messageid) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__messageid)) and
  (((a).us_split_fields3).rec__dns_types__header_type__qr = ((b).us_split_fields3).rec__dns_types__header_type__qr)) and
  (to_rep4(((a).us_split_fields3).rec__dns_types__header_type__opcode) = to_rep4(((b).us_split_fields3).rec__dns_types__header_type__opcode))) and
  (((a).us_split_fields3).rec__dns_types__header_type__aa = ((b).us_split_fields3).rec__dns_types__header_type__aa)) and
  (((a).us_split_fields3).rec__dns_types__header_type__tc = ((b).us_split_fields3).rec__dns_types__header_type__tc)) and
  (((a).us_split_fields3).rec__dns_types__header_type__rd = ((b).us_split_fields3).rec__dns_types__header_type__rd)) and
  (((a).us_split_fields3).rec__dns_types__header_type__ra = ((b).us_split_fields3).rec__dns_types__header_type__ra)) and
  (((a).us_split_fields3).rec__dns_types__header_type__res1 = ((b).us_split_fields3).rec__dns_types__header_type__res1)) and
  (((a).us_split_fields3).rec__dns_types__header_type__res2 = ((b).us_split_fields3).rec__dns_types__header_type__res2)) and
  (((a).us_split_fields3).rec__dns_types__header_type__res3 = ((b).us_split_fields3).rec__dns_types__header_type__res3)) and
  (to_rep5(((a).us_split_fields3).rec__dns_types__header_type__rcode) = to_rep5(((b).us_split_fields3).rec__dns_types__header_type__rcode))) and
  (to_rep2(((a).us_split_fields3).rec__dns_types__header_type__qdcount) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__qdcount))) and
  (to_rep2(((a).us_split_fields3).rec__dns_types__header_type__ancount) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__ancount))) and
  (to_rep2(((a).us_split_fields3).rec__dns_types__header_type__nscount) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__nscount))) and
  (to_rep2(((a).us_split_fields3).rec__dns_types__header_type__arcount) = to_rep2(((b).us_split_fields3).rec__dns_types__header_type__arcount)))) ->
  (bool_eq14(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short. (0 <= object__size1({
  us_split_fields3 = { rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } })))

logic dns_types__header_type__messageid__first__bit : int

logic dns_types__header_type__messageid__last__bit : int

logic dns_types__header_type__messageid__position : int

axiom dns_types__header_type__messageid__first__bit_axiom :
  (0 <= dns_types__header_type__messageid__first__bit)

axiom dns_types__header_type__messageid__last__bit_axiom :
  (dns_types__header_type__messageid__first__bit <  dns_types__header_type__messageid__last__bit)

axiom dns_types__header_type__messageid__position_axiom :
  (0 <= dns_types__header_type__messageid__position)

logic dns_types__header_type__qr__first__bit : int

logic dns_types__header_type__qr__last__bit : int

logic dns_types__header_type__qr__position : int

axiom dns_types__header_type__qr__first__bit_axiom :
  (0 <= dns_types__header_type__qr__first__bit)

axiom dns_types__header_type__qr__last__bit_axiom :
  (dns_types__header_type__qr__first__bit <  dns_types__header_type__qr__last__bit)

axiom dns_types__header_type__qr__position_axiom :
  (0 <= dns_types__header_type__qr__position)

logic dns_types__header_type__opcode__first__bit : int

logic dns_types__header_type__opcode__last__bit : int

logic dns_types__header_type__opcode__position : int

axiom dns_types__header_type__opcode__first__bit_axiom :
  (0 <= dns_types__header_type__opcode__first__bit)

axiom dns_types__header_type__opcode__last__bit_axiom :
  (dns_types__header_type__opcode__first__bit <  dns_types__header_type__opcode__last__bit)

axiom dns_types__header_type__opcode__position_axiom :
  (0 <= dns_types__header_type__opcode__position)

logic dns_types__header_type__aa__first__bit : int

logic dns_types__header_type__aa__last__bit : int

logic dns_types__header_type__aa__position : int

axiom dns_types__header_type__aa__first__bit_axiom :
  (0 <= dns_types__header_type__aa__first__bit)

axiom dns_types__header_type__aa__last__bit_axiom :
  (dns_types__header_type__aa__first__bit <  dns_types__header_type__aa__last__bit)

axiom dns_types__header_type__aa__position_axiom :
  (0 <= dns_types__header_type__aa__position)

logic dns_types__header_type__tc__first__bit : int

logic dns_types__header_type__tc__last__bit : int

logic dns_types__header_type__tc__position : int

axiom dns_types__header_type__tc__first__bit_axiom :
  (0 <= dns_types__header_type__tc__first__bit)

axiom dns_types__header_type__tc__last__bit_axiom :
  (dns_types__header_type__tc__first__bit <  dns_types__header_type__tc__last__bit)

axiom dns_types__header_type__tc__position_axiom :
  (0 <= dns_types__header_type__tc__position)

logic dns_types__header_type__rd__first__bit : int

logic dns_types__header_type__rd__last__bit : int

logic dns_types__header_type__rd__position : int

axiom dns_types__header_type__rd__first__bit_axiom :
  (0 <= dns_types__header_type__rd__first__bit)

axiom dns_types__header_type__rd__last__bit_axiom :
  (dns_types__header_type__rd__first__bit <  dns_types__header_type__rd__last__bit)

axiom dns_types__header_type__rd__position_axiom :
  (0 <= dns_types__header_type__rd__position)

logic dns_types__header_type__ra__first__bit : int

logic dns_types__header_type__ra__last__bit : int

logic dns_types__header_type__ra__position : int

axiom dns_types__header_type__ra__first__bit_axiom :
  (0 <= dns_types__header_type__ra__first__bit)

axiom dns_types__header_type__ra__last__bit_axiom :
  (dns_types__header_type__ra__first__bit <  dns_types__header_type__ra__last__bit)

axiom dns_types__header_type__ra__position_axiom :
  (0 <= dns_types__header_type__ra__position)

logic dns_types__header_type__res1__first__bit : int

logic dns_types__header_type__res1__last__bit : int

logic dns_types__header_type__res1__position : int

axiom dns_types__header_type__res1__first__bit_axiom :
  (0 <= dns_types__header_type__res1__first__bit)

axiom dns_types__header_type__res1__last__bit_axiom :
  (dns_types__header_type__res1__first__bit <  dns_types__header_type__res1__last__bit)

axiom dns_types__header_type__res1__position_axiom :
  (0 <= dns_types__header_type__res1__position)

logic dns_types__header_type__res2__first__bit : int

logic dns_types__header_type__res2__last__bit : int

logic dns_types__header_type__res2__position : int

axiom dns_types__header_type__res2__first__bit_axiom :
  (0 <= dns_types__header_type__res2__first__bit)

axiom dns_types__header_type__res2__last__bit_axiom :
  (dns_types__header_type__res2__first__bit <  dns_types__header_type__res2__last__bit)

axiom dns_types__header_type__res2__position_axiom :
  (0 <= dns_types__header_type__res2__position)

logic dns_types__header_type__res3__first__bit : int

logic dns_types__header_type__res3__last__bit : int

logic dns_types__header_type__res3__position : int

axiom dns_types__header_type__res3__first__bit_axiom :
  (0 <= dns_types__header_type__res3__first__bit)

axiom dns_types__header_type__res3__last__bit_axiom :
  (dns_types__header_type__res3__first__bit <  dns_types__header_type__res3__last__bit)

axiom dns_types__header_type__res3__position_axiom :
  (0 <= dns_types__header_type__res3__position)

logic dns_types__header_type__rcode__first__bit : int

logic dns_types__header_type__rcode__last__bit : int

logic dns_types__header_type__rcode__position : int

axiom dns_types__header_type__rcode__first__bit_axiom :
  (0 <= dns_types__header_type__rcode__first__bit)

axiom dns_types__header_type__rcode__last__bit_axiom :
  (dns_types__header_type__rcode__first__bit <  dns_types__header_type__rcode__last__bit)

axiom dns_types__header_type__rcode__position_axiom :
  (0 <= dns_types__header_type__rcode__position)

logic dns_types__header_type__qdcount__first__bit : int

logic dns_types__header_type__qdcount__last__bit : int

logic dns_types__header_type__qdcount__position : int

axiom dns_types__header_type__qdcount__first__bit_axiom :
  (0 <= dns_types__header_type__qdcount__first__bit)

axiom dns_types__header_type__qdcount__last__bit_axiom :
  (dns_types__header_type__qdcount__first__bit <  dns_types__header_type__qdcount__last__bit)

axiom dns_types__header_type__qdcount__position_axiom :
  (0 <= dns_types__header_type__qdcount__position)

logic dns_types__header_type__ancount__first__bit : int

logic dns_types__header_type__ancount__last__bit : int

logic dns_types__header_type__ancount__position : int

axiom dns_types__header_type__ancount__first__bit_axiom :
  (0 <= dns_types__header_type__ancount__first__bit)

axiom dns_types__header_type__ancount__last__bit_axiom :
  (dns_types__header_type__ancount__first__bit <  dns_types__header_type__ancount__last__bit)

axiom dns_types__header_type__ancount__position_axiom :
  (0 <= dns_types__header_type__ancount__position)

logic dns_types__header_type__nscount__first__bit : int

logic dns_types__header_type__nscount__last__bit : int

logic dns_types__header_type__nscount__position : int

axiom dns_types__header_type__nscount__first__bit_axiom :
  (0 <= dns_types__header_type__nscount__first__bit)

axiom dns_types__header_type__nscount__last__bit_axiom :
  (dns_types__header_type__nscount__first__bit <  dns_types__header_type__nscount__last__bit)

axiom dns_types__header_type__nscount__position_axiom :
  (0 <= dns_types__header_type__nscount__position)

logic dns_types__header_type__arcount__first__bit : int

logic dns_types__header_type__arcount__last__bit : int

logic dns_types__header_type__arcount__position : int

axiom dns_types__header_type__arcount__first__bit_axiom :
  (0 <= dns_types__header_type__arcount__first__bit)

axiom dns_types__header_type__arcount__last__bit_axiom :
  (dns_types__header_type__arcount__first__bit <  dns_types__header_type__arcount__last__bit)

axiom dns_types__header_type__arcount__position_axiom :
  (0 <= dns_types__header_type__arcount__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy17 : unsigned_short

logic dummy18 : bool

logic dummy19 : opcode_type

logic dummy20 : bool

logic dummy21 : bool

logic dummy22 : bool

logic dummy23 : bool

logic dummy24 : bool

logic dummy25 : bool

logic dummy26 : bool

logic dummy27 : response_code

logic dummy28 : unsigned_short

logic dummy29 : unsigned_short

logic dummy30 : unsigned_short

logic dummy31 : unsigned_short

type header_type__ref = { header_type__content : us_rep1
}

function header_type__ref___projection(a: header_type__ref) : us_rep1 =
  (a).header_type__content

logic dummy32 : (int,byte) farray

logic value__size2 : int

logic object__size2 : (int,byte) farray -> int

logic value__component__size : int

logic object__component__size : (int,byte) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,byte) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,byte) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,byte) farray. (0 <= object__alignment2(a)))

logic user_eq11 : (int,byte) farray, (int,byte) farray -> bool

type us_split_fields4 = { rec__dns_types__dns_packet__header : us_rep1;
rec__dns_types__dns_packet__bytes : (int,byte) farray
}

function us_split_fields_Header__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__dns_types__dns_packet__header

function us_split_fields_Bytes__projection(a: us_split_fields4) : (int,byte) farray =
  (a).rec__dns_types__dns_packet__bytes

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq15 : us_rep2, us_rep2 -> bool

axiom bool_eq_def14 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq15(a, b)].
  ((((bool_eq14(((a).us_split_fields5).rec__dns_types__dns_packet__header,
  ((b).us_split_fields5).rec__dns_types__dns_packet__header) = true) and
  (bool_eq11(((a).us_split_fields5).rec__dns_types__dns_packet__bytes, 1,
  8180, ((b).us_split_fields5).rec__dns_types__dns_packet__bytes, 1,
  8180) = true)) -> (bool_eq15(a, b) = true)) and
  ((not ((bool_eq14(((a).us_split_fields5).rec__dns_types__dns_packet__header,
  ((b).us_split_fields5).rec__dns_types__dns_packet__header) = true) and
  (bool_eq11(((a).us_split_fields5).rec__dns_types__dns_packet__bytes, 1,
  8180, ((b).us_split_fields5).rec__dns_types__dns_packet__bytes, 1,
  8180) = true))) -> (bool_eq15(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  forall a15:(int,byte) farray. (0 <= object__size3({ us_split_fields5 = {
  rec__dns_types__dns_packet__header = { us_split_fields3 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } };
  rec__dns_types__dns_packet__bytes = a15 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:unsigned_short. forall a1:bool. forall a2:opcode_type.
  forall a3:bool. forall a4:bool. forall a5:bool. forall a6:bool.
  forall a7:bool. forall a8:bool. forall a9:bool. forall a10:response_code.
  forall a11:unsigned_short. forall a12:unsigned_short.
  forall a13:unsigned_short. forall a14:unsigned_short.
  forall a15:(int,byte) farray. (0 <= object__alignment3({ us_split_fields5 =
  { rec__dns_types__dns_packet__header = { us_split_fields3 = {
  rec__dns_types__header_type__messageid = a;
  rec__dns_types__header_type__qr = a1; rec__dns_types__header_type__opcode =
  a2; rec__dns_types__header_type__aa = a3; rec__dns_types__header_type__tc =
  a4; rec__dns_types__header_type__rd = a5; rec__dns_types__header_type__ra =
  a6; rec__dns_types__header_type__res1 = a7;
  rec__dns_types__header_type__res2 = a8; rec__dns_types__header_type__res3 =
  a9; rec__dns_types__header_type__rcode = a10;
  rec__dns_types__header_type__qdcount = a11;
  rec__dns_types__header_type__ancount = a12;
  rec__dns_types__header_type__nscount = a13;
  rec__dns_types__header_type__arcount = a14 } };
  rec__dns_types__dns_packet__bytes = a15 } })))

logic dns_types__dns_packet__header__first__bit : int

logic dns_types__dns_packet__header__last__bit : int

logic dns_types__dns_packet__header__position : int

axiom dns_types__dns_packet__header__first__bit_axiom :
  (0 <= dns_types__dns_packet__header__first__bit)

axiom dns_types__dns_packet__header__last__bit_axiom :
  (dns_types__dns_packet__header__first__bit <  dns_types__dns_packet__header__last__bit)

axiom dns_types__dns_packet__header__position_axiom :
  (0 <= dns_types__dns_packet__header__position)

logic dns_types__dns_packet__bytes__first__bit : int

logic dns_types__dns_packet__bytes__last__bit : int

logic dns_types__dns_packet__bytes__position : int

axiom dns_types__dns_packet__bytes__first__bit_axiom :
  (0 <= dns_types__dns_packet__bytes__first__bit)

axiom dns_types__dns_packet__bytes__last__bit_axiom :
  (dns_types__dns_packet__bytes__first__bit <  dns_types__dns_packet__bytes__last__bit)

axiom dns_types__dns_packet__bytes__position_axiom :
  (0 <= dns_types__dns_packet__bytes__position)

logic user_eq12 : us_rep2, us_rep2 -> bool

logic dummy33 : unsigned_short

logic dummy34 : bool

logic dummy35 : opcode_type

logic dummy36 : bool

logic dummy37 : bool

logic dummy38 : bool

logic dummy39 : bool

logic dummy40 : bool

logic dummy41 : bool

logic dummy42 : bool

logic dummy43 : response_code

logic dummy44 : unsigned_short

logic dummy45 : unsigned_short

logic dummy46 : unsigned_short

logic dummy47 : unsigned_short

logic dummy48 : (int,byte) farray

type dns_packet__ref = { dns_packet__content : us_rep2
}

function dns_packet__ref___projection(a: dns_packet__ref) : us_rep2 =
  (a).dns_packet__content

logic input_packet : unsigned_short

logic input_packet1 : bool

logic input_packet2 : opcode_type

logic input_packet3 : bool

logic input_packet4 : bool

logic input_packet5 : bool

logic input_packet6 : bool

logic input_packet7 : bool

logic input_packet8 : bool

logic input_packet9 : bool

logic input_packet10 : response_code

logic input_packet11 : unsigned_short

logic input_packet12 : unsigned_short

logic input_packet13 : unsigned_short

logic input_packet14 : unsigned_short

logic input_packet15 : (int,byte) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic input_bytes : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic query_end_byte : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic start_byte : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

type source

predicate in_range9(x: int) = ((0 <= x) and (x <= 65535))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : source, source -> bool

logic dummy49 : source

type source__ref = { source__content : source
}

function source__ref___8__projection(a: source__ref) : source =
  (a).source__content

type target

predicate in_range10(x: int) = ((0 <= x) and (x <= 18))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : target, target -> bool

logic dummy50 : target

type target__ref = { target__content : target
}

function target__ref___7__projection(a: target__ref) : target =
  (a).target__content

logic to_query_type : int -> int

logic to_query_type__function_guard : int, int -> prop

axiom to_query_type__post_axiom :
  (forall s:int [to_query_type(s)]. (in_range9(s) ->
  in_range10(to_query_type(s))))

type source1

predicate in_range11(x: int) = ((0 <= x) and (x <= 18))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq15 : source1, source1 -> bool

logic dummy51 : source1

type source__ref1 = { source__content1 : source1
}

function source__ref___9__projection(a: source__ref1) : source1 =
  (a).source__content1

type target1

predicate in_range12(x: int) = ((0 <= x) and (x <= 65535))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq16 : target1, target1 -> bool

logic dummy52 : target1

type target__ref1 = { target__content1 : target1
}

function target__ref___8__projection(a: target__ref1) : target1 =
  (a).target__content1

logic from_query_type : int -> int

logic from_query_type__function_guard : int, int -> prop

axiom from_query_type__post_axiom :
  (forall s:int [from_query_type(s)]. (in_range11(s) ->
  in_range12(from_query_type(s))))

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

 (* File "process_dns_request.adb", line 500, characters 0-0 *)
goal WP_parameter_def :
  (forall output_packet__split_fields:unsigned_short.
  forall output_packet__split_fields1:bool.
  forall output_packet__split_fields2:opcode_type.
  forall output_packet__split_fields3:bool.
  forall output_packet__split_fields4:bool.
  forall output_packet__split_fields5:bool.
  forall output_packet__split_fields6:bool.
  forall output_packet__split_fields7:bool.
  forall output_packet__split_fields8:bool.
  forall output_packet__split_fields9:bool.
  forall output_packet__split_fields10:response_code.
  forall output_packet__split_fields11:unsigned_short.
  forall output_packet__split_fields12:unsigned_short.
  forall output_packet__split_fields13:unsigned_short.
  forall output_packet__split_fields14:unsigned_short.
  forall output_packet__split_fields15:(int,byte) farray.
  forall output_bytes:int. forall additional_count:int. forall dnssec:bool.
  forall max_transmit:int. forall edns_rec__split_fields:character.
  forall edns_rec__split_fields1:query_type.
  forall edns_rec__split_fields2:unsigned_short.
  forall edns_rec__split_fields3:byte. forall edns_rec__split_fields4:byte.
  forall edns_rec__split_fields5:byte. forall edns_rec__split_fields6:byte.
  forall edns_rec__split_fields7:unsigned_short. forall o:int.
  forall o1:byte. forall o2:t. forall o3:int. forall o4:character.
  forall o5:character. forall o6:query_type. forall o7:unsigned_short.
  forall o8:byte. forall o9:byte. forall o10:byte. forall o11:byte.
  forall o12:unsigned_short. forall temp___5990:character.
  forall temp___59901:query_type. forall temp___59902:unsigned_short.
  forall temp___59903:byte. forall temp___59904:byte.
  forall temp___59905:byte. forall temp___59906:byte.
  forall temp___59907:unsigned_short. forall o13:int. forall o14:byte.
  forall o15:t. forall o16:int. forall o17:int. forall o18:int.
  forall o19:byte. forall o20:t. forall o21:int. forall o22:int.
  forall o23:int. forall o24:int. forall o25:int. forall o26:int.
  forall o27:query_type. forall o28:character. forall o29:query_type.
  forall o30:unsigned_short. forall o31:byte. forall o32:byte.
  forall o33:byte. forall o34:byte. forall o35:unsigned_short.
  forall temp___5996:character. forall temp___59961:query_type.
  forall temp___59962:unsigned_short. forall temp___59963:byte.
  forall temp___59964:byte. forall temp___59965:byte.
  forall temp___59966:byte. forall temp___59967:unsigned_short.
  forall o36:int. forall o37:byte. forall o38:t. forall o39:int.
  forall o40:int. forall o41:int. forall o42:byte. forall o43:t.
  forall o44:int. forall o45:int. forall o46:int. forall o47:int.
  forall o48:int. forall o49:unsigned_short. forall o50:character.
  forall o51:query_type. forall o52:unsigned_short. forall o53:byte.
  forall o54:byte. forall o55:byte. forall o56:byte.
  forall o57:unsigned_short. forall temp___6002:character.
  forall temp___60021:query_type. forall temp___60022:unsigned_short.
  forall temp___60023:byte. forall temp___60024:byte.
  forall temp___60025:byte. forall temp___60026:byte.
  forall temp___60027:unsigned_short. forall o58:int. forall o59:byte.
  forall o60:t. forall o61:byte. forall o62:character. forall o63:query_type.
  forall o64:unsigned_short. forall o65:byte. forall o66:byte.
  forall o67:byte. forall o68:byte. forall o69:unsigned_short.
  forall temp___6006:character. forall temp___60061:query_type.
  forall temp___60062:unsigned_short. forall temp___60063:byte.
  forall temp___60064:byte. forall temp___60065:byte.
  forall temp___60066:byte. forall temp___60067:unsigned_short.
  forall o70:int. forall o71:int. forall o72:byte. forall o73:int.
  forall o74:(int,byte) farray. forall o75:unsigned_short. forall o76:bool.
  forall o77:opcode_type. forall o78:bool. forall o79:bool. forall o80:bool.
  forall o81:bool. forall o82:bool. forall o83:bool. forall o84:bool.
  forall o85:response_code. forall o86:unsigned_short.
  forall o87:unsigned_short. forall o88:unsigned_short.
  forall o89:unsigned_short. forall o90:(int,byte) farray.
  forall temp___6010:unsigned_short. forall temp___60101:bool.
  forall temp___60102:opcode_type. forall temp___60103:bool.
  forall temp___60104:bool. forall temp___60105:bool.
  forall temp___60106:bool. forall temp___60107:bool.
  forall temp___60108:bool. forall temp___60109:bool.
  forall temp___601010:response_code. forall temp___601011:unsigned_short.
  forall temp___601012:unsigned_short. forall temp___601013:unsigned_short.
  forall temp___601014:unsigned_short.
  forall temp___601015:(int,byte) farray. forall o91:byte. forall o92:int.
  forall o93:(int,byte) farray. forall o94:unsigned_short. forall o95:bool.
  forall o96:opcode_type. forall o97:bool. forall o98:bool. forall o99:bool.
  forall o100:bool. forall o101:bool. forall o102:bool. forall o103:bool.
  forall o104:response_code. forall o105:unsigned_short.
  forall o106:unsigned_short. forall o107:unsigned_short.
  forall o108:unsigned_short. forall o109:(int,byte) farray.
  forall temp___6014:unsigned_short. forall temp___60141:bool.
  forall temp___60142:opcode_type. forall temp___60143:bool.
  forall temp___60144:bool. forall temp___60145:bool.
  forall temp___60146:bool. forall temp___60147:bool.
  forall temp___60148:bool. forall temp___60149:bool.
  forall temp___601410:response_code. forall temp___601411:unsigned_short.
  forall temp___601412:unsigned_short. forall temp___601413:unsigned_short.
  forall temp___601414:unsigned_short.
  forall temp___601415:(int,byte) farray. forall o110:int. forall o111:int.
  forall o112:int. forall o113:t. forall o114:byte. forall o115:int.
  forall o116:(int,byte) farray. forall o117:unsigned_short.
  forall o118:bool. forall o119:opcode_type. forall o120:bool.
  forall o121:bool. forall o122:bool. forall o123:bool. forall o124:bool.
  forall o125:bool. forall o126:bool. forall o127:response_code.
  forall o128:unsigned_short. forall o129:unsigned_short.
  forall o130:unsigned_short. forall o131:unsigned_short.
  forall o132:(int,byte) farray. forall temp___6018:unsigned_short.
  forall temp___60181:bool. forall temp___60182:opcode_type.
  forall temp___60183:bool. forall temp___60184:bool.
  forall temp___60185:bool. forall temp___60186:bool.
  forall temp___60187:bool. forall temp___60188:bool.
  forall temp___60189:bool. forall temp___601810:response_code.
  forall temp___601811:unsigned_short. forall temp___601812:unsigned_short.
  forall temp___601813:unsigned_short. forall temp___601814:unsigned_short.
  forall temp___601815:(int,byte) farray. forall o133:int. forall o134:t.
  forall o135:byte. forall o136:int. forall o137:(int,byte) farray.
  forall o138:us_split_fields4. forall temp___6022:us_rep2. forall o139:int.
  forall o140:t. forall o141:byte. forall o142:int.
  forall o143:(int,byte) farray. forall o144:us_split_fields4.
  forall temp___6026:us_rep2. forall o145:byte. forall result:int__ref.
  forall max_transmit1:int. forall result1:int__ref.
  forall output_bytes1:int. forall result2:bool__ref. forall dnssec1:bool.
  forall result3:us_split_fields__ref.
  forall edns_rec__split_fields8:us_split_fields.
  forall result4:us_split_fields__ref.
  forall edns_rec__split_fields9:us_split_fields.
  forall result5:us_split_fields__ref.
  forall edns_rec__split_fields10:us_split_fields.
  forall result6:us_split_fields__ref.
  forall edns_rec__split_fields11:us_split_fields. forall result7:int__ref.
  forall max_transmit2:int. forall result8:int__ref.
  forall max_transmit3:int. forall result9:us_split_fields__ref2.
  forall output_packet__split_fields16:us_split_fields4.
  forall result10:us_split_fields__ref2.
  forall output_packet__split_fields17:us_split_fields4.
  forall result11:us_split_fields__ref2.
  forall output_packet__split_fields18:us_split_fields4.
  forall result12:us_split_fields__ref2.
  forall output_packet__split_fields19:us_split_fields4.
  forall result13:us_split_fields__ref2.
  forall output_packet__split_fields20:us_split_fields4.
  (in_range2(input_bytes) -> (in_range3(query_end_byte) ->
  (in_range3(start_byte) -> (((0 <= 8192) -> in_range2(output_bytes)) ->
  (in_range5(additional_count) -> (((0 <= 8192) ->
  in_range2(max_transmit)) -> ((additional_count <  65535) -> (((result = {
  int__content = max_transmit }) and (max_transmit1 = 512)) -> (((result1 = {
  int__content = output_bytes }) and (output_bytes1 = (start_byte + 12))) ->
  (((result2 = { bool__content = dnssec }) and (dnssec1 = of_int1(0))) ->
  (((((query_end_byte + 11) + 12) <= input_bytes) and
  (((start_byte + 11) + 12) <  8192)) ->
  (((((((((((1 <= (query_end_byte + 1)) and
  ((query_end_byte + 1) <= 8180)) and (o = (query_end_byte + 1))) and
  (o1 = (input_packet15[o]))) and (o2 = to_rep1(o1))) and
  (o3 = tqtint(o2))) and (to_rep(o4) = o3)) and ((o4 = o5) and
  ((edns_rec__split_fields1 = o6) and ((edns_rec__split_fields2 = o7) and
  ((edns_rec__split_fields3 = o8) and ((edns_rec__split_fields4 = o9) and
  ((edns_rec__split_fields5 = o10) and ((edns_rec__split_fields6 = o11) and
  (edns_rec__split_fields7 = o12))))))))) and ((temp___5990 = o5) and
  ((temp___59901 = o6) and ((temp___59902 = o7) and ((temp___59903 = o8) and
  ((temp___59904 = o9) and ((temp___59905 = o10) and
  ((temp___59906 = o11) and (temp___59907 = o12))))))))) and ((result3 = {
  us_split_fields__content = { rec__dns_types__edns_record__root =
  edns_rec__split_fields; rec__dns_types__edns_record__code =
  edns_rec__split_fields1; rec__dns_types__edns_record__payload_size =
  edns_rec__split_fields2; rec__dns_types__edns_record__rcode =
  edns_rec__split_fields3; rec__dns_types__edns_record__version =
  edns_rec__split_fields4; rec__dns_types__edns_record__ztop =
  edns_rec__split_fields5; rec__dns_types__edns_record__zbottom =
  edns_rec__split_fields6; rec__dns_types__edns_record__rdlen =
  edns_rec__split_fields7 } }) and (edns_rec__split_fields8 = {
  rec__dns_types__edns_record__root = temp___5990;
  rec__dns_types__edns_record__code = temp___59901;
  rec__dns_types__edns_record__payload_size = temp___59902;
  rec__dns_types__edns_record__rcode = temp___59903;
  rec__dns_types__edns_record__version = temp___59904;
  rec__dns_types__edns_record__ztop = temp___59905;
  rec__dns_types__edns_record__zbottom = temp___59906;
  rec__dns_types__edns_record__rdlen = temp___59907 }))) ->
  (((((((((((((((1 <= (query_end_byte + 3)) and
  ((query_end_byte + 3) <= 8180)) and (o18 = (query_end_byte + 3))) and
  (o19 = (input_packet15[o18]))) and (o20 = to_rep1(o19))) and
  (o21 = tqtint(o20))) and (((((((((1 <= (query_end_byte + 2)) and
  ((query_end_byte + 2) <= 8180)) and (o13 = (query_end_byte + 2))) and
  (o14 = (input_packet15[o13]))) and (o15 = to_rep1(o14))) and
  (o16 = tqtint(o15))) and (o17 = (o16 * 256))) and ((o22 = o17) and
  in_range4(o17))) and (o23 = (o22 + o21)))) and ((o24 = o23) and
  in_range4(o23))) and ((o25 = o24) and in_range9(o24))) and
  ((o26 = to_query_type(o25)) and in_range10(o26))) and
  (to_rep3(o27) = o26)) and
  (((edns_rec__split_fields8).rec__dns_types__edns_record__root = o28) and
  ((o27 = o29) and
  (((edns_rec__split_fields8).rec__dns_types__edns_record__payload_size = o30) and
  (((edns_rec__split_fields8).rec__dns_types__edns_record__rcode = o31) and
  (((edns_rec__split_fields8).rec__dns_types__edns_record__version = o32) and
  (((edns_rec__split_fields8).rec__dns_types__edns_record__ztop = o33) and
  (((edns_rec__split_fields8).rec__dns_types__edns_record__zbottom = o34) and
  ((edns_rec__split_fields8).rec__dns_types__edns_record__rdlen = o35))))))))) and
  ((temp___5996 = o28) and ((temp___59961 = o29) and
  ((temp___59962 = o30) and ((temp___59963 = o31) and
  ((temp___59964 = o32) and ((temp___59965 = o33) and
  ((temp___59966 = o34) and (temp___59967 = o35))))))))) and ((result4 = {
  us_split_fields__content = edns_rec__split_fields8 }) and
  (edns_rec__split_fields9 = { rec__dns_types__edns_record__root =
  temp___5996; rec__dns_types__edns_record__code = temp___59961;
  rec__dns_types__edns_record__payload_size = temp___59962;
  rec__dns_types__edns_record__rcode = temp___59963;
  rec__dns_types__edns_record__version = temp___59964;
  rec__dns_types__edns_record__ztop = temp___59965;
  rec__dns_types__edns_record__zbottom = temp___59966;
  rec__dns_types__edns_record__rdlen = temp___59967 }))) ->
  (((to_rep((edns_rec__split_fields9).rec__dns_types__edns_record__root) = 0) and
  (to_rep3((edns_rec__split_fields9).rec__dns_types__edns_record__code) = 10)) ->
  ((((((((((((((1 <= (query_end_byte + 5)) and
  ((query_end_byte + 5) <= 8180)) and (o41 = (query_end_byte + 5))) and
  (o42 = (input_packet15[o41]))) and (o43 = to_rep1(o42))) and
  (o44 = tqtint(o43))) and (((((((((1 <= (query_end_byte + 4)) and
  ((query_end_byte + 4) <= 8180)) and (o36 = (query_end_byte + 4))) and
  (o37 = (input_packet15[o36]))) and (o38 = to_rep1(o37))) and
  (o39 = tqtint(o38))) and (o40 = (o39 * 256))) and ((o45 = o40) and
  in_range4(o40))) and (o46 = (o45 + o44)))) and ((o47 = o46) and
  in_range4(o46))) and ((o48 = o47) and in_range5(o47))) and
  (to_rep2(o49) = o48)) and
  (((edns_rec__split_fields9).rec__dns_types__edns_record__root = o50) and
  (((edns_rec__split_fields9).rec__dns_types__edns_record__code = o51) and
  ((o49 = o52) and
  (((edns_rec__split_fields9).rec__dns_types__edns_record__rcode = o53) and
  (((edns_rec__split_fields9).rec__dns_types__edns_record__version = o54) and
  (((edns_rec__split_fields9).rec__dns_types__edns_record__ztop = o55) and
  (((edns_rec__split_fields9).rec__dns_types__edns_record__zbottom = o56) and
  ((edns_rec__split_fields9).rec__dns_types__edns_record__rdlen = o57))))))))) and
  ((temp___6002 = o50) and ((temp___60021 = o51) and
  ((temp___60022 = o52) and ((temp___60023 = o53) and
  ((temp___60024 = o54) and ((temp___60025 = o55) and
  ((temp___60026 = o56) and (temp___60027 = o57))))))))) and ((result5 = {
  us_split_fields__content = edns_rec__split_fields9 }) and
  (edns_rec__split_fields10 = { rec__dns_types__edns_record__root =
  temp___6002; rec__dns_types__edns_record__code = temp___60021;
  rec__dns_types__edns_record__payload_size = temp___60022;
  rec__dns_types__edns_record__rcode = temp___60023;
  rec__dns_types__edns_record__version = temp___60024;
  rec__dns_types__edns_record__ztop = temp___60025;
  rec__dns_types__edns_record__zbottom = temp___60026;
  rec__dns_types__edns_record__rdlen = temp___60027 }))) ->
  ((((((((((1 <= (query_end_byte + 8)) and
  ((query_end_byte + 8) <= 8180)) and (o58 = (query_end_byte + 8))) and
  (o59 = (input_packet15[o58]))) and (o60 = to_rep1(o59))) and
  (to_rep1(o61) = o60)) and
  (((edns_rec__split_fields10).rec__dns_types__edns_record__root = o62) and
  (((edns_rec__split_fields10).rec__dns_types__edns_record__code = o63) and
  (((edns_rec__split_fields10).rec__dns_types__edns_record__payload_size = o64) and
  (((edns_rec__split_fields10).rec__dns_types__edns_record__rcode = o65) and
  (((edns_rec__split_fields10).rec__dns_types__edns_record__version = o66) and
  ((o61 = o67) and
  (((edns_rec__split_fields10).rec__dns_types__edns_record__zbottom = o68) and
  ((edns_rec__split_fields10).rec__dns_types__edns_record__rdlen = o69))))))))) and
  ((temp___6006 = o62) and ((temp___60061 = o63) and
  ((temp___60062 = o64) and ((temp___60063 = o65) and
  ((temp___60064 = o66) and ((temp___60065 = o67) and
  ((temp___60066 = o68) and (temp___60067 = o69))))))))) and ((result6 = {
  us_split_fields__content = edns_rec__split_fields10 }) and
  (edns_rec__split_fields11 = { rec__dns_types__edns_record__root =
  temp___6006; rec__dns_types__edns_record__code = temp___60061;
  rec__dns_types__edns_record__payload_size = temp___60062;
  rec__dns_types__edns_record__rcode = temp___60063;
  rec__dns_types__edns_record__version = temp___60064;
  rec__dns_types__edns_record__ztop = temp___60065;
  rec__dns_types__edns_record__zbottom = temp___60066;
  rec__dns_types__edns_record__rdlen = temp___60067 }))) ->
  ((((o70 = min(8192,
  to_rep2((edns_rec__split_fields11).rec__dns_types__edns_record__payload_size))) and
  in_range2(min(8192,
  to_rep2((edns_rec__split_fields11).rec__dns_types__edns_record__payload_size)))) and
  ((result7 = { int__content = max_transmit1 }) and
  (max_transmit2 = o70))) -> ((((o71 = max(512, max_transmit2)) and
  in_range2(max(512, max_transmit2))) and ((result8 = { int__content =
  max_transmit2 }) and (max_transmit3 = o71))) ->
  ((((((to_rep1(o72) = rliteral) and ((((1 <= (start_byte + 1)) and
  ((start_byte + 1) <= 8180)) and (o73 = (start_byte + 1))) and
  (o74 = (output_packet__split_fields15[o73 <- o72])))) and
  (((output_packet__split_fields = o75) and
  ((output_packet__split_fields1 = o76) and
  ((output_packet__split_fields2 = o77) and
  ((output_packet__split_fields3 = o78) and
  ((output_packet__split_fields4 = o79) and
  ((output_packet__split_fields5 = o80) and
  ((output_packet__split_fields6 = o81) and
  ((output_packet__split_fields7 = o82) and
  ((output_packet__split_fields8 = o83) and
  ((output_packet__split_fields9 = o84) and
  ((output_packet__split_fields10 = o85) and
  ((output_packet__split_fields11 = o86) and
  ((output_packet__split_fields12 = o87) and
  ((output_packet__split_fields13 = o88) and
  (output_packet__split_fields14 = o89))))))))))))))) and (o74 = o90))) and
  (((temp___6010 = o75) and ((temp___60101 = o76) and
  ((temp___60102 = o77) and ((temp___60103 = o78) and
  ((temp___60104 = o79) and ((temp___60105 = o80) and
  ((temp___60106 = o81) and ((temp___60107 = o82) and
  ((temp___60108 = o83) and ((temp___60109 = o84) and
  ((temp___601010 = o85) and ((temp___601011 = o86) and
  ((temp___601012 = o87) and ((temp___601013 = o88) and
  (temp___601014 = o89))))))))))))))) and (temp___601015 = o90))) and
  ((result9 = { us_split_fields__content2 = {
  rec__dns_types__dns_packet__header = { us_split_fields3 = {
  rec__dns_types__header_type__messageid = output_packet__split_fields;
  rec__dns_types__header_type__qr = output_packet__split_fields1;
  rec__dns_types__header_type__opcode = output_packet__split_fields2;
  rec__dns_types__header_type__aa = output_packet__split_fields3;
  rec__dns_types__header_type__tc = output_packet__split_fields4;
  rec__dns_types__header_type__rd = output_packet__split_fields5;
  rec__dns_types__header_type__ra = output_packet__split_fields6;
  rec__dns_types__header_type__res1 = output_packet__split_fields7;
  rec__dns_types__header_type__res2 = output_packet__split_fields8;
  rec__dns_types__header_type__res3 = output_packet__split_fields9;
  rec__dns_types__header_type__rcode = output_packet__split_fields10;
  rec__dns_types__header_type__qdcount = output_packet__split_fields11;
  rec__dns_types__header_type__ancount = output_packet__split_fields12;
  rec__dns_types__header_type__nscount = output_packet__split_fields13;
  rec__dns_types__header_type__arcount = output_packet__split_fields14 } };
  rec__dns_types__dns_packet__bytes = output_packet__split_fields15 } }) and
  (output_packet__split_fields16 = { rec__dns_types__dns_packet__header = {
  us_split_fields3 = { rec__dns_types__header_type__messageid = temp___6010;
  rec__dns_types__header_type__qr = temp___60101;
  rec__dns_types__header_type__opcode = temp___60102;
  rec__dns_types__header_type__aa = temp___60103;
  rec__dns_types__header_type__tc = temp___60104;
  rec__dns_types__header_type__rd = temp___60105;
  rec__dns_types__header_type__ra = temp___60106;
  rec__dns_types__header_type__res1 = temp___60107;
  rec__dns_types__header_type__res2 = temp___60108;
  rec__dns_types__header_type__res3 = temp___60109;
  rec__dns_types__header_type__rcode = temp___601010;
  rec__dns_types__header_type__qdcount = temp___601011;
  rec__dns_types__header_type__ancount = temp___601012;
  rec__dns_types__header_type__nscount = temp___601013;
  rec__dns_types__header_type__arcount = temp___601014 } };
  rec__dns_types__dns_packet__bytes = temp___601015 }))) ->
  ((((((to_rep1(o91) = rliteral) and ((((1 <= (start_byte + 2)) and
  ((start_byte + 2) <= 8180)) and (o92 = (start_byte + 2))) and
  (o93 = ((output_packet__split_fields16).rec__dns_types__dns_packet__bytes[o92 <- o91])))) and
  (((output_packet__split_fields16).rec__dns_types__dns_packet__header = {
  us_split_fields3 = { rec__dns_types__header_type__messageid = o94;
  rec__dns_types__header_type__qr = o95;
  rec__dns_types__header_type__opcode = o96;
  rec__dns_types__header_type__aa = o97; rec__dns_types__header_type__tc =
  o98; rec__dns_types__header_type__rd = o99;
  rec__dns_types__header_type__ra = o100; rec__dns_types__header_type__res1 =
  o101; rec__dns_types__header_type__res2 = o102;
  rec__dns_types__header_type__res3 = o103;
  rec__dns_types__header_type__rcode = o104;
  rec__dns_types__header_type__qdcount = o105;
  rec__dns_types__header_type__ancount = o106;
  rec__dns_types__header_type__nscount = o107;
  rec__dns_types__header_type__arcount = o108 } }) and (o93 = o109))) and
  (((temp___6014 = o94) and ((temp___60141 = o95) and
  ((temp___60142 = o96) and ((temp___60143 = o97) and
  ((temp___60144 = o98) and ((temp___60145 = o99) and
  ((temp___60146 = o100) and ((temp___60147 = o101) and
  ((temp___60148 = o102) and ((temp___60149 = o103) and
  ((temp___601410 = o104) and ((temp___601411 = o105) and
  ((temp___601412 = o106) and ((temp___601413 = o107) and
  (temp___601414 = o108))))))))))))))) and (temp___601415 = o109))) and
  ((result10 = { us_split_fields__content2 = output_packet__split_fields16
  }) and (output_packet__split_fields17 = {
  rec__dns_types__dns_packet__header = { us_split_fields3 = {
  rec__dns_types__header_type__messageid = temp___6014;
  rec__dns_types__header_type__qr = temp___60141;
  rec__dns_types__header_type__opcode = temp___60142;
  rec__dns_types__header_type__aa = temp___60143;
  rec__dns_types__header_type__tc = temp___60144;
  rec__dns_types__header_type__rd = temp___60145;
  rec__dns_types__header_type__ra = temp___60146;
  rec__dns_types__header_type__res1 = temp___60147;
  rec__dns_types__header_type__res2 = temp___60148;
  rec__dns_types__header_type__res3 = temp___60149;
  rec__dns_types__header_type__rcode = temp___601410;
  rec__dns_types__header_type__qdcount = temp___601411;
  rec__dns_types__header_type__ancount = temp___601412;
  rec__dns_types__header_type__nscount = temp___601413;
  rec__dns_types__header_type__arcount = temp___601414 } };
  rec__dns_types__dns_packet__bytes = temp___601415 }))) ->
  (((((((((((o110 = from_query_type(10)) and in_range12(o110)) and
  (o111 = mod(o110, 256))) and ((o112 = o111) and uint_in_range(o111))) and
  (o113 = of_int(o112))) and (to_rep1(o114) = o113)) and
  ((((1 <= (start_byte + 3)) and ((start_byte + 3) <= 8180)) and
  (o115 = (start_byte + 3))) and
  (o116 = ((output_packet__split_fields17).rec__dns_types__dns_packet__bytes[o115 <- o114])))) and
  (((output_packet__split_fields17).rec__dns_types__dns_packet__header = {
  us_split_fields3 = { rec__dns_types__header_type__messageid = o117;
  rec__dns_types__header_type__qr = o118;
  rec__dns_types__header_type__opcode = o119;
  rec__dns_types__header_type__aa = o120; rec__dns_types__header_type__tc =
  o121; rec__dns_types__header_type__rd = o122;
  rec__dns_types__header_type__ra = o123; rec__dns_types__header_type__res1 =
  o124; rec__dns_types__header_type__res2 = o125;
  rec__dns_types__header_type__res3 = o126;
  rec__dns_types__header_type__rcode = o127;
  rec__dns_types__header_type__qdcount = o128;
  rec__dns_types__header_type__ancount = o129;
  rec__dns_types__header_type__nscount = o130;
  rec__dns_types__header_type__arcount = o131 } }) and (o116 = o132))) and
  (((temp___6018 = o117) and ((temp___60181 = o118) and
  ((temp___60182 = o119) and ((temp___60183 = o120) and
  ((temp___60184 = o121) and ((temp___60185 = o122) and
  ((temp___60186 = o123) and ((temp___60187 = o124) and
  ((temp___60188 = o125) and ((temp___60189 = o126) and
  ((temp___601810 = o127) and ((temp___601811 = o128) and
  ((temp___601812 = o129) and ((temp___601813 = o130) and
  (temp___601814 = o131))))))))))))))) and (temp___601815 = o132))) and
  ((result11 = { us_split_fields__content2 = output_packet__split_fields17
  }) and (output_packet__split_fields18 = {
  rec__dns_types__dns_packet__header = { us_split_fields3 = {
  rec__dns_types__header_type__messageid = temp___6018;
  rec__dns_types__header_type__qr = temp___60181;
  rec__dns_types__header_type__opcode = temp___60182;
  rec__dns_types__header_type__aa = temp___60183;
  rec__dns_types__header_type__tc = temp___60184;
  rec__dns_types__header_type__rd = temp___60185;
  rec__dns_types__header_type__ra = temp___60186;
  rec__dns_types__header_type__res1 = temp___60187;
  rec__dns_types__header_type__res2 = temp___60188;
  rec__dns_types__header_type__res3 = temp___60189;
  rec__dns_types__header_type__rcode = temp___601810;
  rec__dns_types__header_type__qdcount = temp___601811;
  rec__dns_types__header_type__ancount = temp___601812;
  rec__dns_types__header_type__nscount = temp___601813;
  rec__dns_types__header_type__arcount = temp___601814 } };
  rec__dns_types__dns_packet__bytes = temp___601815 }))) ->
  (((((((((o133 = comp_div(max_transmit3,256)) and
  uint_in_range(comp_div(max_transmit3,256))) and (o134 = of_int(o133))) and
  (to_rep1(o135) = o134)) and ((((1 <= (start_byte + 4)) and
  ((start_byte + 4) <= 8180)) and (o136 = (start_byte + 4))) and
  (o137 = ((output_packet__split_fields18).rec__dns_types__dns_packet__bytes[o136 <- o135])))) and
  (o138 = { rec__dns_types__dns_packet__header =
  (output_packet__split_fields18).rec__dns_types__dns_packet__header;
  rec__dns_types__dns_packet__bytes = o137 })) and (temp___6022 = {
  us_split_fields5 = o138 })) and ((result12 = { us_split_fields__content2 =
  output_packet__split_fields18 }) and
  (output_packet__split_fields19 = (temp___6022).us_split_fields5))) ->
  (((((((((o139 = mod(max_transmit3, 256)) and
  uint_in_range(mod(max_transmit3, 256))) and (o140 = of_int(o139))) and
  (to_rep1(o141) = o140)) and ((((1 <= (start_byte + 5)) and
  ((start_byte + 5) <= 8180)) and (o142 = (start_byte + 5))) and
  (o143 = ((output_packet__split_fields19).rec__dns_types__dns_packet__bytes[o142 <- o141])))) and
  (o144 = { rec__dns_types__dns_packet__header =
  (output_packet__split_fields19).rec__dns_types__dns_packet__header;
  rec__dns_types__dns_packet__bytes = o143 })) and (temp___6026 = {
  us_split_fields5 = o144 })) and ((result13 = { us_split_fields__content2 =
  output_packet__split_fields19 }) and
  (output_packet__split_fields20 = (temp___6026).us_split_fields5))) ->
  ((to_rep1(o145) = rliteral) ->
  (1 <= (start_byte + 6)))))))))))))))))))))))))))
