(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort unsigned_64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))
(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)
(declare-const dummy2 unsigned_64)
(declare-datatypes () ((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64 (unsigned_64__content a))
(define-fun dynamic_invariant2 ((temp___expr_184 (_ BitVec 64)) (temp___is_init_181 Bool) (temp___skip_constant_182 Bool) (temp___do_toplevel_183 Bool)) Bool true)
(declare-sort my_index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (my_index my_index) Bool)
(declare-const dummy3 my_index)
(declare-datatypes () ((my_index__ref (mk_my_index__ref (my_index__content my_index)))))
(define-fun my_index__ref___projection ((a my_index__ref)) my_index (my_index__content a))
(declare-fun nth1 ((_ BitVec 8) Int) Bool)
(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right2 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left2 ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun to_int3 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv1 x ((_ int2bv 8) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 8))))))
(declare-fun power1 ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min1 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort unsigned_8 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq4 (unsigned_8 unsigned_8) Bool)
(declare-const dummy4 unsigned_8)
(declare-datatypes () ((unsigned_8__ref (mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8 (unsigned_8__content a))
(declare-fun to_rep1 (unsigned_8) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) unsigned_8)
(assert (forall ((x unsigned_8)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int4 ((x unsigned_8)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x unsigned_8)) (! (uint_in_range1 (to_int4 x)) :pattern ((to_int4 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int unsigned_8))))))
(declare-fun slide ((Array Int unsigned_8) Int Int) (Array Int unsigned_8))
(assert (forall ((a (Array Int unsigned_8))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int unsigned_8))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int unsigned_8) Int Int (Array Int unsigned_8) Int Int) (Array Int unsigned_8))
(assert (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (unsigned_8 Int) (Array Int unsigned_8))
(assert (forall ((v unsigned_8)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int unsigned_8)) (a__first Int) (a__last Int) (b (Array Int unsigned_8)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int unsigned_8) Int Int (Array Int unsigned_8) Int Int) Int)
(assert (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int unsigned_8)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int unsigned_8) (elts a))
(define-fun of_array ((a (Array Int unsigned_8)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int unsigned_8)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int unsigned_8)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int unsigned_8)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int unsigned_8))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int unsigned_8))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int unsigned_8))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((byte_sequence__ref (mk_byte_sequence__ref (byte_sequence__content us_t)))))
(define-fun byte_sequence__ref___projection ((a byte_sequence__ref)) us_t (byte_sequence__content a))
(declare-fun nth8_stream (us_t Int) Bool)
(declare-fun nth8_stream__function_guard (Bool us_t Int) Bool)
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun dynamic_invariant3 ((temp___expr_208 us_t) (temp___is_init_205 Bool) (temp___skip_constant_206 Bool) (temp___do_toplevel_207 Bool)) Bool (=> (not (= temp___skip_constant_206 true)) (dynamic_property 0 2147483646 (first1 temp___expr_208) (last1 temp___expr_208))))
(assert true)
(assert (forall ((stream us_t)) (forall ((pos Int)) (! (= (= (nth8_stream stream pos) true) (= (nth1 (to_rep1 (select (to_array stream) (div1 pos 8))) (- 7 (mod1 pos 8))) true)) :pattern ((nth8_stream stream pos))))))
(declare-fun maxvalue (Int) (_ BitVec 64))
(declare-fun maxvalue__function_guard ((_ BitVec 64) Int) Bool)
(assert (forall ((len Int)) (! (=> (dynamic_invariant1 len true true true) (dynamic_invariant2 (maxvalue len) true false true)) :pattern ((maxvalue len)))))
(assert (forall ((len Int)) (! (=> (dynamic_invariant1 len true true true) (= (maxvalue len) (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) len)))) :pattern ((maxvalue len)))))
(declare-fun peekbit64 ((_ BitVec 64) Int) Bool)
(declare-fun peekbit64__function_guard (Bool (_ BitVec 64) Int) Bool)
(assert (forall ((value (_ BitVec 64))) (forall ((left Int)) (! (=> (and (and (dynamic_invariant2 value true true true) (dynamic_invariant1 left true true true)) (< left 64)) (= (= (peekbit64 value left) true) (= (nth value (- 63 left)) true))) :pattern ((peekbit64 value left))))))
(assert (forall ((value (_ BitVec 64))) (forall ((left Int)) (! (= (= (peekbit64 value left) true) (not (= (bvand value (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) (- 63 left)))) ((_ int2bv 64) 0)))) :pattern ((peekbit64 value left))))))
(declare-const start Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const len Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const addr__first integer)
(declare-const addr__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const value (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t26b__ref (mk_t26b__ref (t26b__content integer)))))
(define-fun t26b__ref___projection ((a t26b__ref)) integer (t26b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant4 ((temp___expr_160 (_ BitVec 8)) (temp___is_init_157 Bool) (temp___skip_constant_158 Bool) (temp___do_toplevel_159 Bool)) Bool true)
(define-fun dynamic_invariant5 ((temp___expr_202 Int) (temp___is_init_199 Bool) (temp___skip_constant_200 Bool) (temp___do_toplevel_201 Bool)) Bool (=> (or (= temp___is_init_199 true) (<= 0 2147483646)) (in_range3 temp___expr_202)))
(declare-const addr (Array Int unsigned_8))
(declare-const result__ Int)
(declare-const flag Bool)
(declare-const i Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 (_ BitVec 64))
(declare-const temp___299 Int)
(declare-const temp___300 (Array Int unsigned_8))
(declare-const temp___298 (Array Int unsigned_8))
(declare-const temp___296 Bool)
(declare-const temp___301 (Array Int unsigned_8))
(declare-const j Int)
(declare-const o8 Bool)
(declare-const o9 Bool)
(declare-const o10 Int)
(declare-const j1 Int)
(declare-const o11 Int)
(declare-const o12 Bool)
(declare-const o13 Int)
(declare-const o14 Bool)
(declare-const o15 Int)
(declare-const j2 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Bool)
(declare-const o21 Int)
(declare-const o22 Bool)
(declare-const o23 Int)
(declare-const o24 Bool)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Bool)
(declare-const o29 Int)
(declare-const o30 Bool)
(declare-const o31 Int)
(declare-const o32 Bool)
(declare-const o33 Int)
(declare-const k Int)
(declare-const o34 Int)
(declare-const o35 Bool)
(declare-const o36 Int)
(declare-const o37 Bool)
(declare-const o38 Int)
(declare-const o39 Int)
(declare-const o40 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const o43 Bool)
(declare-const i1 Int)
(declare-const o44 Int)
(declare-const o45 Int)
(declare-const o46 Int)
(declare-const o47 Int)
(declare-const o48 Bool)
(declare-const o49 Int)
(declare-const o50 Bool)
(declare-const o51 Int)
(declare-const o52 Bool)
(declare-const o53 Int)
(declare-const i2 Int)
(declare-const o54 Int)
(declare-const o55 Bool)
(declare-const o56 Int)
(declare-const o57 Bool)
(declare-const o58 Int)
(declare-const i3 Int)
(declare-const o59 Bool)
(declare-const o60 Bool)
(declare-const o61 Int)
(declare-const o62 (_ BitVec 64))
(declare-const o63 Int)
(declare-const o64 Int)
(declare-const o65 Int)
(declare-const o66 Bool)
(declare-const o67 Bool)
(declare-const o68 Bool)
(declare-const o69 Int)
(declare-const o70 (_ BitVec 64))
(declare-const o71 Int)
(declare-const o72 Int)
(declare-const o73 Int)
(declare-const o74 Bool)
(declare-const o75 Bool)
(declare-const o76 Bool)
(declare-const o77 Int)
(declare-const o78 Int)
(declare-const o79 Int)
(declare-const o80 Int)
(declare-const o81 Bool)
(declare-const o82 Int)
(declare-const addr1 (Array Int unsigned_8))
(declare-const result__1 Int)
(declare-const flag1 Bool)
(declare-const i4 Int)
(declare-const result Bool)
(declare-const result1 Int)
(declare-const result__2 Int)
(declare-const result2 Bool)
(declare-const result3 Int)
(declare-const result__3 Int)
(declare-const result__4 Int)
(declare-const result__5 Int)
(declare-const result4 Int)
(declare-const i5 Int)
(declare-const addr2 (Array Int unsigned_8))
(declare-const flag2 Bool)
(declare-const i6 Int)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const flag3 Bool)
(declare-const addr3 (Array Int unsigned_8))
(declare-const result7 Bool)
(declare-const result8 Int)
(declare-const i7 Int)
(declare-const addr4 (Array Int unsigned_8))
(declare-const flag4 Bool)
(declare-const i8 Int)
(declare-const addr5 (Array Int unsigned_8))
(declare-const flag5 Bool)
(declare-const i9 Int)
(declare-const addr6 (Array Int unsigned_8))
(declare-const flag6 Bool)
(declare-const i10 Int)
(declare-const addr7 (Array Int unsigned_8))
(declare-const flag7 Bool)
(declare-const i11 Int)
(declare-const result9 Int)
(declare-const result__6 Int)
(declare-const addr8 (Array Int unsigned_8))
(declare-const result__7 int__ref)
(declare-const flag8 bool__ref)
(declare-const i12 int__ref)
(declare-const addr9 (Array Int unsigned_8))
(declare-const result__8 Int)
(declare-const flag9 Bool)
(declare-const i13 Int)
(declare-const addr10 map__ref)
(declare-const result__9 int__ref)
(declare-const flag10 bool__ref)
(declare-const i14 int__ref)
(declare-const addr11 (Array Int unsigned_8))
(declare-const result__10 Int)
(declare-const flag11 Bool)
(declare-const i15 Int)
(declare-const result10 Bool)
(declare-const result11 Bool)
(declare-const result12 Bool)
(declare-const result13 Bool)
(declare-const result14 Bool)
(declare-const result15 Bool)
(assert (in_range2 start))
(assert (in_range2 len))
(assert (dynamic_property 0 2147483646 (to_rep addr__first) (to_rep addr__last)))
(assert true)
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 result__)))
(assert (and (= (to_rep addr__first) 0) (and (<= (* 8 (ite (<= (to_rep addr__first) (to_rep addr__last)) (+ (- (to_rep addr__last) (to_rep addr__first)) 1) 0)) 2147483647) (and (< (+ start len) 2147483647) (and (<= 0 len) (<= len 63))))))
(assert (=> (<= (to_rep addr__first) (to_rep addr__last)) (= o2 (+ (- (to_rep addr__last) (to_rep addr__first)) 1))))
(assert (=> (not (<= (to_rep addr__first) (to_rep addr__last))) (= o2 0)))
(assert (and (= o3 o2) (in_range1 o2)))
(assert (= o4 (* o3 8)))
(assert (and (= o5 o4) (in_range1 o4)))
(assert (and (= o6 (+ start len)) (in_range1 (+ start len))))
(assert (= result (ite (< o5 o6) true false)))
(assert (not (= result true)))
(assert (and (= o7 (maxvalue len)) (= o7 (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) len)))))
(assert (= result2 (ite (bvuge value o7) true false)))
(assert (not (= result2 true)))
(assert (= result__3 result__))
(assert (= result__3 result__1))
(assert (= result__2 result__3))
(assert (= (mk_int__ref result4) (mk_int__ref i)))
(assert (= i5 0))
(assert (<= 0 i5))
(assert (<= i5 (- len 1)))
(assert (and (<= 0 i6) (<= i6 len)))
(assert (forall ((j3 Int)) (=> (and (<= 0 j3) (<= j3 (- start 1))) (= (= (nth8_stream (mk___t addr (mk (to_rep addr__first) (to_rep addr__last))) j3) true) (= (nth8_stream (mk___t addr2 (mk (to_rep addr__first) (to_rep addr__last))) j3) true)))))
(assert (forall ((j3 Int)) (=> (and (<= start j3) (<= j3 (- (+ start i6) 1))) (= (= (nth8_stream (mk___t addr2 (mk (to_rep addr__first) (to_rep addr__last))) j3) true) (= (nth value (+ (- (- len j3) 1) start)) true)))))
(assert (forall ((j3 Int)) (=> (and (<= (+ start i6) j3) (<= j3 (- (* 8 (ite (<= (to_rep addr__first) (to_rep addr__last)) (+ (- (to_rep addr__last) (to_rep addr__first)) 1) 0)) 1))) (= (= (nth8_stream (mk___t addr2 (mk (to_rep addr__first) (to_rep addr__last))) j3) true) (= (nth8_stream (mk___t addr (mk (to_rep addr__first) (to_rep addr__last))) j3) true)))))
(assert (and (=> (<= 0 (- len 1)) (dynamic_property1 0 (- len 1) i6)) (and (<= 0 i6) (<= i6 (- len 1)))))
(assert (and (= o26 (+ (- 64 len) i6)) (in_range1 (+ (- 64 len) i6))))
(assert (and (= o27 o26) (in_range2 o26)))
(assert (and (= o28 (peekbit64 value o27)) (and (= (= o28 true) (not (= (bvand value (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) (- 63 o27)))) ((_ int2bv 64) 0)))) (= (= o28 true) (= (nth value (- 63 o27)) true)))))
(assert (= flag2 result6))
(assert (= flag3 o28))
(assert (and (= o29 (+ start i6)) (in_range1 (+ start i6))))
(assert (and (forall ((i16 Int)) (=> (and (<= 0 i16) (<= i16 (- (* 8 (ite (<= (to_rep addr__first) (to_rep addr__last)) (+ (- (to_rep addr__last) (to_rep addr__first)) 1) 0)) 1))) (=> (not (= i16 o29)) (= (= (nth8_stream (mk___t addr3 (mk (to_rep addr__first) (to_rep addr__last))) i16) true) (= (nth8_stream (mk___t addr2 (mk (to_rep addr__first) (to_rep addr__last))) i16) true))))) (= (= (nth8_stream (mk___t addr3 (mk (to_rep addr__first) (to_rep addr__last))) o29) true) (= flag3 true))))
(assert (= (= (nth8_stream (mk___t addr3 (mk (to_rep addr__first) (to_rep addr__last))) (+ start i6)) true) (= (nth value (- (- len i6) 1)) true)))
(assert (<= start k))
(assert (<= k (- (+ start i6) 1)))
(assert (=> (not (= k (+ start i6))) (=> (<= (to_rep addr__first) (to_rep addr__last)) (= o39 (+ (- (to_rep addr__last) (to_rep addr__first)) 1)))))
(assert (=> (not (= k (+ start i6))) (=> (not (<= (to_rep addr__first) (to_rep addr__last))) (= o39 0))))
(assert (=> (not (= k (+ start i6))) (and (= o40 o39) (in_range1 o39))))
(assert (=> (not (= k (+ start i6))) (= o41 (* 8 o40))))
(assert (=> (not (= k (+ start i6))) (= o42 (- o41 1))))
(assert (=> (not (= k (+ start i6))) (= o43 (ite (<= k o42) true false))))
(assert (=> (not (= k (+ start i6))) (= result7 (ite (<= 0 k) o43 false))))
(assert (=> (= k (+ start i6)) (= result7 false)))
(assert (= result7 true))
(assert (and (= o36 (- (- (+ start len) k) 1)) (in_range2 (- (- (+ start len) k) 1))))
(assert (= o37 (nth value o36)))
(assert (= o38 (to_int2 o37)))
(assert (and (= o34 k) (in_range2 k)))
(assert (not (= (to_rep (first (mk (to_rep addr__first) (to_rep addr__last)))) 0)))
(check-sat)
(exit)
