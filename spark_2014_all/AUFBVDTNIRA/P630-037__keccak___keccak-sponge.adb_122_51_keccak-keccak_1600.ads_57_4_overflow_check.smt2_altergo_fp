(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int1 : int -> t

logic to_int1 : t -> int

axiom to_int_def1 :
  (forall x:t [to_int1(x)]. ((is_signed_positive(x) ->
  (to_int1(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int1(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int1(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int1(v1) <  to_int1(v2))

predicate sle(v1: t, v2: t) = (to_int1(v1) <= to_int1(v2))

predicate sgt(v1: t, v2: t) = (to_int1(v2) <  to_int1(v1))

predicate sge(v1: t, v2: t) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int1(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq5 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic bool_ne1 : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt1(x, y)]. ((ult(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le1(x, y)]. ((ule(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt1(x, y)]. ((ugt(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge1(x, y)]. ((uge(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge1(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type byte

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq6 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic user_eq3 : byte, byte -> bool

logic dummy3 : byte

type byte__ref = { byte__content : byte
}

function byte__ref___projection(a: byte__ref) : byte = (a).byte__content

type index_number

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : index_number, index_number -> bool

logic dummy4 : index_number

type index_number__ref = { index_number__content : index_number
}

function index_number__ref___projection(a: index_number__ref) : index_number =
  (a).index_number__content

logic to_rep : byte -> t

logic of_rep : t -> byte

axiom inversion_axiom : (forall x:byte [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int2(x: byte) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:byte [to_int2(x)]. uint_in_range(to_int2(x)))

type map__ref = { map__content : (int,byte) farray
}

logic slide : (int,byte) farray, int, int -> (int,byte) farray

axiom slide_eq :
  (forall a:(int,byte) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,byte) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq8 : (int,byte) farray, int, int, (int,byte) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,byte) farray. forall a__first:int. forall a__last:int.
  forall b:(int,byte) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,byte) farray. forall b:(int,byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,byte) farray; rt : t1
}

function to_array(a: us_t) : (int,byte) farray = (a).elts

function of_array(a: (int,byte) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,byte) farray -> int

logic value__component__size : int

logic object__component__size : (int,byte) farray -> int

logic value__alignment : int

logic object__alignment : (int,byte) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,byte) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,byte) farray. (0 <= object__alignment(a)))

function bool_eq9(x: us_t, y: us_t) : bool = bool_eq8((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : (int,byte) farray

logic dummy6 : t1

type byte_array__ref = { byte_array__content : us_t
}

function byte_array__ref___projection(a: byte_array__ref) : us_t =
  (a).byte_array__content

type t2

logic tqtint1 : t2 -> int

axiom tqtaxiom1 :
  (forall i:t2. ((0 <= tqtint1(i)) and (tqtint1(i) <= 18446744073709551615)))

logic nth1 : t2, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t2. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t2

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t2

logic ones1 : t2

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t2, t2 -> t2

axiom Nth_bw_and1 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t2, t2 -> t2

axiom Nth_bw_or1 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t2, t2 -> t2

axiom Nth_bw_xor1 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t2 -> t2

axiom Nth_bw_not1 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t2, int -> t2

axiom Lsr_nth_low1 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t2. (lsr1(x, 0) = x))

logic asr1 : t2, int -> t2

axiom Asr_nth_low1 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t2. (asr1(x, 0) = x))

logic lsl1 : t2, int -> t2

axiom Lsl_nth_high1 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t2. (lsl1(x, 0) = x))

logic rotate_right1 : t2, int -> t2

axiom Nth_rotate_right1 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t2, int -> t2

axiom Nth_rotate_left1 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic is_signed_positive1 : t2 -> prop

logic of_int2 : int -> t2

logic to_int3 : t2 -> int

axiom to_int_def2 :
  (forall x:t2 [to_int3(x)]. ((is_signed_positive1(x) ->
  (to_int3(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int3(x) = (-(18446744073709551616 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t2. forall vqt:t2. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t2. forall vqt:t2. ((to_int3(v) = to_int3(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds1 :
  (forall v:t2. ((0 <= tqtint1(v)) and (tqtint1(v) <  18446744073709551616)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int2(i)) = i)))

logic size_bv1 : t2

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t2, y: t2) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t2, y: t2) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t2, y: t2) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t2, y: t2) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t2, v2: t2) = (to_int3(v1) <  to_int3(v2))

predicate sle1(v1: t2, v2: t2) = (to_int3(v1) <= to_int3(v2))

predicate sgt1(v1: t2, v2: t2) = (to_int3(v2) <  to_int3(v1))

predicate sge1(v1: t2, v2: t2) = (to_int3(v2) <= to_int3(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t2. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t2, t2 -> t2

axiom to_uint_add_bounded1 :
  (forall v1:t2. forall v2:t2.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t2, t2 -> t2

axiom to_uint_sub_bounded1 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t2 -> t2

axiom to_uint_neg1 :
  (forall v:t2. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t2, t2 -> t2

axiom to_uint_mul_bounded1 :
  (forall v1:t2. forall v2:t2.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t2, t2 -> t2

axiom to_uint_udiv1 :
  (forall v1:t2. forall v2:t2. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t2, t2 -> t2

axiom to_uint_urem1 :
  (forall v1:t2. forall v2:t2. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t2, t2 -> t2

axiom lsr_bv_is_lsr1 :
  (forall x:t2. forall n:t2. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t2. forall n:t2. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t2, t2 -> t2

axiom asr_bv_is_asr1 :
  (forall x:t2. forall n:t2. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t2, t2 -> t2

axiom lsl_bv_is_lsl1 :
  (forall x:t2. forall n:t2. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t2. forall n:t2. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t2, t2 -> t2

logic rotate_left_bv1 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t2. forall n:t2. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t2. forall n:t2. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t2, t2 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t2. forall i:t2. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int2(i)) = nth1(x, i))))

logic eq_sub_bv1 : t2, t2, t2, t2 -> prop

predicate eq_sub1(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t2. forall y:t2 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t2
}

logic bool_eq10 : t2, t2 -> bool

axiom bool_eq_def8 :
  (forall x:t2. forall y:t2 [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic bool_ne2 : t2, t2 -> bool

axiom bool_ne_def1 :
  (forall x:t2. forall y:t2 [bool_ne2(x, y)]. (((not (x = y)) -> (bool_ne2(x,
  y) = true)) and ((x = y) -> (bool_ne2(x, y) = false))))

logic bool_lt2 : t2, t2 -> bool

axiom bool_lt_def1 :
  (forall x:t2. forall y:t2 [bool_lt2(x, y)]. ((ult1(x, y) -> (bool_lt2(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt2(x, y) = false))))

logic bool_le2 : t2, t2 -> bool

axiom bool_le_def1 :
  (forall x:t2. forall y:t2 [bool_le2(x, y)]. ((ule1(x, y) -> (bool_le2(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le2(x, y) = false))))

logic bool_gt2 : t2, t2 -> bool

axiom bool_gt_def1 :
  (forall x:t2. forall y:t2 [bool_gt2(x, y)]. ((ugt1(x, y) -> (bool_gt2(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt2(x, y) = false))))

logic bool_ge2 : t2, t2 -> bool

axiom bool_ge_def1 :
  (forall x:t2. forall y:t2 [bool_ge2(x, y)]. ((uge1(x, y) -> (bool_ge2(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge2(x, y) = false))))

logic power1 : t2, int -> t2

axiom Power_02 : (forall x:t2. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t2. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t2, t2 -> t2

axiom bv_min_def1 :
  (forall x:t2. forall y:t2 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t2, t2 -> t2

axiom bv_max_def1 :
  (forall x:t2. forall y:t2 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t2. forall y:t2. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t2. forall y:t2. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type lane_type

logic attr__ATTRIBUTE_MODULUS1 : t2

logic bool_eq11 : t2, t2 -> bool

axiom bool_eq_def9 :
  (forall x:t2. forall y:t2 [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t2

logic user_eq6 : lane_type, lane_type -> bool

logic dummy7 : lane_type

type lane_type__ref = { lane_type__content : lane_type
}

function lane_type__ref___projection(a: lane_type__ref) : lane_type =
  (a).lane_type__content

logic to_rep2 : lane_type -> t2

logic of_rep2 : t2 -> lane_type

axiom inversion_axiom2 :
  (forall x:lane_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : true

axiom coerce_axiom2 :
  (forall x:t2 [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

function to_int4(x: lane_type) : int = tqtint1(to_rep2(x))

axiom range_int_axiom1 :
  (forall x:lane_type [to_int4(x)]. uint_in_range1(to_int4(x)))

type map

type map__ref1 = { map__content1 : map
}

logic get : map, t, t -> lane_type

logic set : map, t, t, lane_type -> map

axiom Select_eq :
  (forall m:map.
  (forall i:t.
  (forall j:t.
  (forall a:lane_type [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:t. forall i2:t.
  (forall j:t. forall j2:t.
  (forall a:lane_type [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide1 : map, t, t, t, t -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:t. forall old_first:t.
  (forall new_first_2:t. forall old_first_2:t.
  (forall i:t.
  (forall j:t [get(slide1(a, old_first, new_first, old_first_2, new_first_2),
  i, j)]. (get(slide1(a, old_first, new_first, old_first_2, new_first_2), i,
  j) = get(a, sub(i, sub(new_first, old_first)), sub(j, sub(new_first_2,
  old_first_2)))))))))

logic bool_eq12 : map, t, t, t, t, map, t, t, t, t -> bool

axiom bool_eq_def10 :
  (forall a:map. forall a__first:t. forall a__last:t. forall a__first_2:t.
  forall a__last_2:t. forall b:map. forall b__first:t. forall b__last:t.
  forall b__first_2:t. forall b__last_2:t [bool_eq12(a, a__first, a__last,
  a__first_2, a__last_2, b, b__first, b__last, b__first_2, b__last_2)].
  ((((((ule(a__first, a__last) and (ule(b__first, b__last) and (sub(a__last,
  a__first) = sub(b__last, b__first)))) or ((not ule(a__first, a__last)) and
  ugt(b__first, b__last))) and ((ule(a__first_2, a__last_2) and
  (ule(b__first_2, b__last_2) and (sub(a__last_2,
  a__first_2) = sub(b__last_2, b__first_2)))) or ((not ule(a__first_2,
  a__last_2)) and ugt(b__first_2, b__last_2)))) and
  (forall temp___idx_155:t. forall temp___idx_156:t. ((((ule(a__first,
  temp___idx_155) and ule(temp___idx_155, a__last)) and (ule(a__first_2,
  temp___idx_156) and ule(temp___idx_156, a__last_2))) and (to_rep2(get(a,
  temp___idx_155, temp___idx_156)) = to_rep2(get(b, add(sub(b__first,
  a__first), temp___idx_155), add(sub(b__first_2, a__first_2),
  temp___idx_156))))) or (not ((ule(a__first, temp___idx_155) and
  ule(temp___idx_155, a__last)) and (ule(a__first_2, temp___idx_156) and
  ule(temp___idx_156, a__last_2))))))) -> (bool_eq12(a, a__first, a__last,
  a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = true)) and ((not ((((ule(a__first, a__last) -> (ule(b__first,
  b__last) and (sub(a__last, a__first) = sub(b__last, b__first)))) and
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last))) and
  ((ule(a__first_2, a__last_2) -> (ule(b__first_2, b__last_2) and
  (sub(a__last_2, a__first_2) = sub(b__last_2, b__first_2)))) and
  ((not ule(a__first_2, a__last_2)) -> ugt(b__first_2, b__last_2)))) and
  (forall temp___idx_155:t. forall temp___idx_156:t. (((ule(a__first,
  temp___idx_155) and ule(temp___idx_155, a__last)) and (ule(a__first_2,
  temp___idx_156) and ule(temp___idx_156, a__last_2))) -> (to_rep2(get(a,
  temp___idx_155, temp___idx_156)) = to_rep2(get(b, add(sub(b__first,
  a__first), temp___idx_155), add(sub(b__first_2, a__first_2),
  temp___idx_156)))))))) -> (bool_eq12(a, a__first, a__last, a__first_2,
  a__last_2, b, b__first, b__last, b__first_2, b__last_2) = false))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:t. forall a__last:t. forall a__first_2:t.
  forall a__last_2:t. forall b__first:t. forall b__last:t.
  forall b__first_2:t. forall b__last_2:t. ((bool_eq12(b, b__first, b__last,
  b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((((ule(a__first, a__last) -> (ule(b__first,
  b__last) and (sub(a__last, a__first) = sub(b__last, b__first)))) and
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last))) and
  ((ule(a__first_2, a__last_2) -> (ule(b__first_2, b__last_2) and
  (sub(a__last_2, a__first_2) = sub(b__last_2, b__first_2)))) and
  ((not ule(a__first_2, a__last_2)) -> ugt(b__first_2, b__last_2)))) and
  (forall temp___idx_155:t. forall temp___idx_156:t. (((ule(a__first,
  temp___idx_155) and ule(temp___idx_155, a__last)) and (ule(a__first_2,
  temp___idx_156) and ule(temp___idx_156, a__last_2))) -> (to_rep2(get(a,
  temp___idx_155, temp___idx_156)) = to_rep2(get(b, add(sub(b__first,
  a__first), temp___idx_155), add(sub(b__first_2, a__first_2),
  temp___idx_156))))))))))

type states

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : states, states -> bool

logic dummy8 : states

type states__ref = { states__content : states
}

function states__ref___projection(a: states__ref) : states =
  (a).states__content

type byte_absorption_number

predicate in_range6(x: int) = ((0 <= x) and (x <= 199))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : byte_absorption_number, byte_absorption_number -> bool

logic dummy9 : byte_absorption_number

type byte_absorption_number__ref = { byte_absorption_number__content :
byte_absorption_number
}

function byte_absorption_number__ref___projection(a: byte_absorption_number__ref) : byte_absorption_number =
  (a).byte_absorption_number__content

type bit_absorption_number

predicate in_range7(x: int) = ((0 <= x) and (x <= 1599))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : bit_absorption_number, bit_absorption_number -> bool

logic dummy10 : bit_absorption_number

type bit_absorption_number__ref = { bit_absorption_number__content :
bit_absorption_number
}

function bit_absorption_number__ref___projection(a: bit_absorption_number__ref) : bit_absorption_number =
  (a).bit_absorption_number__content

logic to_rep3 : bit_absorption_number -> int

logic of_rep3 : int -> bit_absorption_number

axiom inversion_axiom3 :
  (forall x:bit_absorption_number [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:bit_absorption_number [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

type rate_number

predicate in_range8(x: int) = ((1 <= x) and (x <= 199))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : rate_number, rate_number -> bool

logic dummy11 : rate_number

type rate_number__ref = { rate_number__content : rate_number
}

function rate_number__ref___projection(a: rate_number__ref) : rate_number =
  (a).rate_number__content

logic to_rep4 : rate_number -> int

logic of_rep4 : int -> rate_number

axiom inversion_axiom4 :
  (forall x:rate_number [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:rate_number [to_rep4(x)]. in_range8(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range8(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic dummy12 : map

logic value__size1 : int

logic object__size1 : map -> int

logic value__component__size1 : int

logic object__component__size1 : map -> int

logic value__alignment1 : int

logic object__alignment1 : map -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:map. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:map. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 : (forall a:map. (0 <= object__alignment1(a)))

logic user_eq11 : map, map -> bool

logic to_rep5 : states -> int

logic of_rep5 : int -> states

axiom inversion_axiom5 :
  (forall x:states [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:states [to_rep5(x)]. in_range5(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range5(x) ->
  (to_rep5(of_rep5(x)) = x)))

logic to_rep6 : byte_absorption_number -> int

logic of_rep6 : int -> byte_absorption_number

axiom inversion_axiom6 :
  (forall x:byte_absorption_number [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:byte_absorption_number [to_rep6(x)]. in_range6(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range6(x) ->
  (to_rep6(of_rep6(x)) = x)))

logic dummy13 : (int,byte) farray

logic value__size2 : int

logic object__size2 : (int,byte) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,byte) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,byte) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,byte) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,byte) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,byte) farray. (0 <= object__alignment2(a)))

logic user_eq12 : (int,byte) farray, (int,byte) farray -> bool

type us_split_fields = { rec__keccak__keccak_1600__sponge__context__state :
map; rec__keccak__keccak_1600__sponge__context__block : (int,byte) farray;
rec__keccak__keccak_1600__sponge__context__bits_absorbed :
bit_absorption_number;
rec__keccak__keccak_1600__sponge__context__bytes_squeezed :
byte_absorption_number; rec__keccak__keccak_1600__sponge__context__rate :
rate_number; rec__keccak__keccak_1600__sponge__context__curr_state : states
}

function us_split_fields_State__projection(a: us_split_fields) : map =
  (a).rec__keccak__keccak_1600__sponge__context__state

function us_split_fields_Block__projection(a: us_split_fields) : (int,byte) farray =
  (a).rec__keccak__keccak_1600__sponge__context__block

function us_split_fields_Bits_Absorbed__projection(a: us_split_fields) : bit_absorption_number =
  (a).rec__keccak__keccak_1600__sponge__context__bits_absorbed

function us_split_fields_Bytes_Squeezed__projection(a: us_split_fields) : byte_absorption_number =
  (a).rec__keccak__keccak_1600__sponge__context__bytes_squeezed

function us_split_fields_Rate__projection(a: us_split_fields) : rate_number =
  (a).rec__keccak__keccak_1600__sponge__context__rate

function us_split_fields_Curr_State__projection(a: us_split_fields) : states =
  (a).rec__keccak__keccak_1600__sponge__context__curr_state

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 4)

logic bool_eq17 : us_rep, us_rep -> bool

axiom bool_eq_def15 :
  (forall a:us_rep. forall b:us_rep [bool_eq17(a, b)].
  ((((((((bool_eq12(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__state,
  rliteral, rliteral1, rliteral, rliteral1,
  ((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__state,
  rliteral, rliteral1, rliteral, rliteral1) = true) and
  (bool_eq8(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__block,
  0, 199,
  ((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__block, 0,
  199) = true)) and
  (to_rep3(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__bits_absorbed) = to_rep3(((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__bits_absorbed))) and
  (to_rep6(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__bytes_squeezed) = to_rep6(((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__bytes_squeezed))) and
  (to_rep4(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__rate) = to_rep4(((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__rate))) and
  (to_rep5(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__curr_state) = to_rep5(((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__curr_state))) ->
  (bool_eq17(a, b) = true)) and
  ((not ((((((bool_eq12(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__state,
  rliteral, rliteral1, rliteral, rliteral1,
  ((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__state,
  rliteral, rliteral1, rliteral, rliteral1) = true) and
  (bool_eq8(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__block,
  0, 199,
  ((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__block, 0,
  199) = true)) and
  (to_rep3(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__bits_absorbed) = to_rep3(((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__bits_absorbed))) and
  (to_rep6(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__bytes_squeezed) = to_rep6(((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__bytes_squeezed))) and
  (to_rep4(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__rate) = to_rep4(((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__rate))) and
  (to_rep5(((a).us_split_fields1).rec__keccak__keccak_1600__sponge__context__curr_state) = to_rep5(((b).us_split_fields1).rec__keccak__keccak_1600__sponge__context__curr_state)))) ->
  (bool_eq17(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:map. forall a1:(int,byte) farray.
  forall a2:bit_absorption_number. forall a3:byte_absorption_number.
  forall a4:rate_number. forall a5:states. (0 <= object__size3({
  us_split_fields1 = { rec__keccak__keccak_1600__sponge__context__state = a;
  rec__keccak__keccak_1600__sponge__context__block = a1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = a2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = a3;
  rec__keccak__keccak_1600__sponge__context__rate = a4;
  rec__keccak__keccak_1600__sponge__context__curr_state = a5 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:map. forall a1:(int,byte) farray.
  forall a2:bit_absorption_number. forall a3:byte_absorption_number.
  forall a4:rate_number. forall a5:states. (0 <= object__alignment3({
  us_split_fields1 = { rec__keccak__keccak_1600__sponge__context__state = a;
  rec__keccak__keccak_1600__sponge__context__block = a1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = a2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = a3;
  rec__keccak__keccak_1600__sponge__context__rate = a4;
  rec__keccak__keccak_1600__sponge__context__curr_state = a5 } })))

logic keccak__keccak_1600__sponge__context__state__first__bit : int

logic keccak__keccak_1600__sponge__context__state__last__bit : int

logic keccak__keccak_1600__sponge__context__state__position : int

axiom keccak__keccak_1600__sponge__context__state__first__bit_axiom :
  (0 <= keccak__keccak_1600__sponge__context__state__first__bit)

axiom keccak__keccak_1600__sponge__context__state__last__bit_axiom :
  (keccak__keccak_1600__sponge__context__state__first__bit <  keccak__keccak_1600__sponge__context__state__last__bit)

axiom keccak__keccak_1600__sponge__context__state__position_axiom :
  (0 <= keccak__keccak_1600__sponge__context__state__position)

logic keccak__keccak_1600__sponge__context__block__first__bit : int

logic keccak__keccak_1600__sponge__context__block__last__bit : int

logic keccak__keccak_1600__sponge__context__block__position : int

axiom keccak__keccak_1600__sponge__context__block__first__bit_axiom :
  (0 <= keccak__keccak_1600__sponge__context__block__first__bit)

axiom keccak__keccak_1600__sponge__context__block__last__bit_axiom :
  (keccak__keccak_1600__sponge__context__block__first__bit <  keccak__keccak_1600__sponge__context__block__last__bit)

axiom keccak__keccak_1600__sponge__context__block__position_axiom :
  (0 <= keccak__keccak_1600__sponge__context__block__position)

logic keccak__keccak_1600__sponge__context__bits_absorbed__first__bit : int

logic keccak__keccak_1600__sponge__context__bits_absorbed__last__bit : int

logic keccak__keccak_1600__sponge__context__bits_absorbed__position : int

axiom keccak__keccak_1600__sponge__context__bits_absorbed__first__bit_axiom :
  (0 <= keccak__keccak_1600__sponge__context__bits_absorbed__first__bit)

axiom keccak__keccak_1600__sponge__context__bits_absorbed__last__bit_axiom :
  (keccak__keccak_1600__sponge__context__bits_absorbed__first__bit <  keccak__keccak_1600__sponge__context__bits_absorbed__last__bit)

axiom keccak__keccak_1600__sponge__context__bits_absorbed__position_axiom :
  (0 <= keccak__keccak_1600__sponge__context__bits_absorbed__position)

logic keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit : int

logic keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit : int

logic keccak__keccak_1600__sponge__context__bytes_squeezed__position : int

axiom keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit_axiom :
  (0 <= keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit)

axiom keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit_axiom :
  (keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit <  keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit)

axiom keccak__keccak_1600__sponge__context__bytes_squeezed__position_axiom :
  (0 <= keccak__keccak_1600__sponge__context__bytes_squeezed__position)

logic keccak__keccak_1600__sponge__context__rate__first__bit : int

logic keccak__keccak_1600__sponge__context__rate__last__bit : int

logic keccak__keccak_1600__sponge__context__rate__position : int

axiom keccak__keccak_1600__sponge__context__rate__first__bit_axiom :
  (0 <= keccak__keccak_1600__sponge__context__rate__first__bit)

axiom keccak__keccak_1600__sponge__context__rate__last__bit_axiom :
  (keccak__keccak_1600__sponge__context__rate__first__bit <  keccak__keccak_1600__sponge__context__rate__last__bit)

axiom keccak__keccak_1600__sponge__context__rate__position_axiom :
  (0 <= keccak__keccak_1600__sponge__context__rate__position)

logic keccak__keccak_1600__sponge__context__curr_state__first__bit : int

logic keccak__keccak_1600__sponge__context__curr_state__last__bit : int

logic keccak__keccak_1600__sponge__context__curr_state__position : int

axiom keccak__keccak_1600__sponge__context__curr_state__first__bit_axiom :
  (0 <= keccak__keccak_1600__sponge__context__curr_state__first__bit)

axiom keccak__keccak_1600__sponge__context__curr_state__last__bit_axiom :
  (keccak__keccak_1600__sponge__context__curr_state__first__bit <  keccak__keccak_1600__sponge__context__curr_state__last__bit)

axiom keccak__keccak_1600__sponge__context__curr_state__position_axiom :
  (0 <= keccak__keccak_1600__sponge__context__curr_state__position)

logic user_eq13 : us_rep, us_rep -> bool

logic dummy14 : map

logic dummy15 : (int,byte) farray

logic dummy16 : bit_absorption_number

logic dummy17 : byte_absorption_number

logic dummy18 : rate_number

logic dummy19 : states

type context__ref = { context__content : us_rep
}

function context__ref___projection(a: context__ref) : us_rep =
  (a).context__content

logic state_of : us_rep -> int

logic state_of__function_guard : int, us_rep -> prop

axiom state_of__post_axiom :
  (forall ctx:map. forall ctx1:(int,byte) farray.
  forall ctx2:bit_absorption_number. forall ctx3:byte_absorption_number.
  forall ctx4:rate_number. forall ctx5:states [state_of({ us_split_fields1 =
  { rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } })].
  in_range5(state_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } })))

axiom state_of__def_axiom :
  (forall ctx:map. forall ctx1:(int,byte) farray.
  forall ctx2:bit_absorption_number. forall ctx3:byte_absorption_number.
  forall ctx4:rate_number. forall ctx5:states [state_of({ us_split_fields1 =
  { rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } })].
  (state_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 }
  }) = to_rep5(ctx5)))

logic rate_of : us_rep -> int

logic rate_of__function_guard : int, us_rep -> prop

axiom rate_of__post_axiom :
  (forall ctx:map. forall ctx1:(int,byte) farray.
  forall ctx2:bit_absorption_number. forall ctx3:byte_absorption_number.
  forall ctx4:rate_number. forall ctx5:states [rate_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } })].
  ((rate_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 }
  }) <  1600) and in_range3(rate_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } }))))

axiom rate_of__def_axiom :
  (forall ctx:map. forall ctx1:(int,byte) farray.
  forall ctx2:bit_absorption_number. forall ctx3:byte_absorption_number.
  forall ctx4:rate_number. forall ctx5:states [rate_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } })].
  (rate_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 }
  }) = (to_rep4(ctx4) * 8)))

logic in_queue_bit_length : us_rep -> int

logic in_queue_bit_length__function_guard : int, us_rep -> prop

axiom in_queue_bit_length__post_axiom :
  (forall ctx:map. forall ctx1:(int,byte) farray.
  forall ctx2:bit_absorption_number. forall ctx3:byte_absorption_number.
  forall ctx4:rate_number. forall ctx5:states [in_queue_bit_length({
  us_split_fields1 = { rec__keccak__keccak_1600__sponge__context__state =
  ctx; rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } })].
  ((in_queue_bit_length({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 }
  }) <  1600) and in_range2(in_queue_bit_length({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } }))))

axiom in_queue_bit_length__def_axiom :
  (forall ctx:map. forall ctx1:(int,byte) farray.
  forall ctx2:bit_absorption_number. forall ctx3:byte_absorption_number.
  forall ctx4:rate_number. forall ctx5:states [in_queue_bit_length({
  us_split_fields1 = { rec__keccak__keccak_1600__sponge__context__state =
  ctx; rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 } })].
  (in_queue_bit_length({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx;
  rec__keccak__keccak_1600__sponge__context__block = ctx1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = ctx2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = ctx3;
  rec__keccak__keccak_1600__sponge__context__rate = ctx4;
  rec__keccak__keccak_1600__sponge__context__curr_state = ctx5 }
  }) = to_rep3(ctx2)))

logic attr__ATTRIBUTE_ADDRESS : int

logic data : (int,byte) farray

logic data1 : t1

logic attr__ATTRIBUTE_ADDRESS1 : int

logic bit_length : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic r74s : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic r75s : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic r78s : int

logic attr__ATTRIBUTE_ADDRESS14 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : integer, integer -> bool

logic dummy20 : integer

type t76s__ref = { t76s__content : integer
}

function t76s__ref___projection(a: t76s__ref) : integer = (a).t76s__content

type t3

logic first2 : t3 -> integer

logic last2 : t3 -> integer

logic mk1 : int, int -> t3

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,byte) farray; rt1 : t3
}

function to_array1(a: us_t1) : (int,byte) farray = (a).elts1

function of_array1(a: (int,byte) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,byte) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,byte) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,byte) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,byte) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,byte) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,byte) farray. (0 <= object__alignment4(a)))

function bool_eq19(x: us_t1, y: us_t1) : bool = bool_eq8((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq15 : us_t1, us_t1 -> bool

logic dummy21 : (int,byte) farray

logic dummy22 : t3

type t77s__ref = { t77s__content : us_t1
}

function t77s__ref___projection(a: t77s__ref) : us_t1 = (a).t77s__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq16 : integer, integer -> bool

logic dummy23 : integer

type t79s__ref = { t79s__content : integer
}

function t79s__ref___projection(a: t79s__ref) : integer = (a).t79s__content

type t4

logic first4 : t4 -> integer

logic last4 : t4 -> integer

logic mk2 : int, int -> t4

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,byte) farray; rt2 : t4
}

function to_array2(a: us_t2) : (int,byte) farray = (a).elts2

function of_array2(a: (int,byte) farray, f: int, l: int) : us_t2 = { elts2 =
  a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,byte) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,byte) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,byte) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,byte) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,byte) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,byte) farray. (0 <= object__alignment5(a)))

function bool_eq21(x: us_t2, y: us_t2) : bool = bool_eq8((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq17 : us_t2, us_t2 -> bool

logic dummy24 : (int,byte) farray

logic dummy25 : t4

type t80s__ref = { t80s__content : us_t2
}

function t80s__ref___projection(a: t80s__ref) : us_t2 = (a).t80s__content

logic r81s : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic r82s : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic r85s : int

logic attr__ATTRIBUTE_ADDRESS17 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq18 : integer, integer -> bool

logic dummy26 : integer

type t83s__ref = { t83s__content : integer
}

function t83s__ref___projection(a: t83s__ref) : integer = (a).t83s__content

type t5

logic first6 : t5 -> integer

logic last6 : t5 -> integer

logic mk3 : int, int -> t5

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,byte) farray; rt3 : t5
}

function to_array3(a: us_t3) : (int,byte) farray = (a).elts3

function of_array3(a: (int,byte) farray, f: int, l: int) : us_t3 = { elts3 =
  a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,byte) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,byte) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,byte) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,byte) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,byte) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,byte) farray. (0 <= object__alignment6(a)))

function bool_eq23(x: us_t3, y: us_t3) : bool = bool_eq8((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq19 : us_t3, us_t3 -> bool

logic dummy27 : (int,byte) farray

logic dummy28 : t5

type t84s__ref = { t84s__content : us_t3
}

function t84s__ref___projection(a: t84s__ref) : us_t3 = (a).t84s__content

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq20 : integer, integer -> bool

logic dummy29 : integer

type t86s__ref = { t86s__content : integer
}

function t86s__ref___projection(a: t86s__ref) : integer = (a).t86s__content

type t6

logic first8 : t6 -> integer

logic last8 : t6 -> integer

logic mk4 : int, int -> t6

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,byte) farray; rt4 : t6
}

function to_array4(a: us_t4) : (int,byte) farray = (a).elts4

function of_array4(a: (int,byte) farray, f: int, l: int) : us_t4 = { elts4 =
  a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size7 : int

logic object__size7 : (int,byte) farray -> int

logic value__component__size6 : int

logic object__component__size6 : (int,byte) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,byte) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,byte) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom6 : (0 <= value__component__size6)

axiom object__component__size_axiom6 :
  (forall a:(int,byte) farray. (0 <= object__component__size6(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,byte) farray. (0 <= object__alignment7(a)))

function bool_eq25(x: us_t4, y: us_t4) : bool = bool_eq8((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq21 : us_t4, us_t4 -> bool

logic dummy30 : (int,byte) farray

logic dummy31 : t6

type t87s__ref = { t87s__content : us_t4
}

function t87s__ref___projection(a: t87s__ref) : us_t4 = (a).t87s__content

logic r88s : int

logic attr__ATTRIBUTE_ADDRESS18 : int

predicate dynamic_property9(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq22 : integer, integer -> bool

logic dummy32 : integer

type t89s__ref = { t89s__content : integer
}

function t89s__ref___projection(a: t89s__ref) : integer = (a).t89s__content

type t7

logic first10 : t7 -> integer

logic last10 : t7 -> integer

logic mk5 : int, int -> t7

axiom mk_def5 :
  (forall f:int. forall l:int [mk5(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first10(mk5(f, l))) = f) and (to_rep1(last10(mk5(f, l))) = l)))))

predicate dynamic_property10(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property9(range_first, range_last, low) and
  dynamic_property9(range_first, range_last, high)))))

type us_t5 = { elts5 : (int,byte) farray; rt5 : t7
}

function to_array5(a: us_t5) : (int,byte) farray = (a).elts5

function of_array5(a: (int,byte) farray, f: int, l: int) : us_t5 = { elts5 =
  a; rt5 = mk5(f, l) }

function first11(a: us_t5) : int = to_rep1(first10((a).rt5))

function last11(a: us_t5) : int = to_rep1(last10((a).rt5))

logic length5 : us_t5 -> int

axiom length_def5 :
  (forall a:us_t5 [length5(a)]. (((first11(a) <= last11(a)) ->
  (length5(a) = ((last11(a) - first11(a)) + 1))) and
  ((not (first11(a) <= last11(a))) -> (length5(a) = 0))))

logic value__size8 : int

logic object__size8 : (int,byte) farray -> int

logic value__component__size7 : int

logic object__component__size7 : (int,byte) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,byte) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,byte) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom7 : (0 <= value__component__size7)

axiom object__component__size_axiom7 :
  (forall a:(int,byte) farray. (0 <= object__component__size7(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,byte) farray. (0 <= object__alignment8(a)))

function bool_eq27(x: us_t5, y: us_t5) : bool = bool_eq8((x).elts5,
  to_rep1(first10((x).rt5)), to_rep1(last10((x).rt5)), (y).elts5,
  to_rep1(first10((y).rt5)), to_rep1(last10((y).rt5)))

logic user_eq23 : us_t5, us_t5 -> bool

logic dummy33 : (int,byte) farray

logic dummy34 : t7

type t90s__ref = { t90s__content : us_t5
}

function t90s__ref___projection(a: t90s__ref) : us_t5 = (a).t90s__content

logic r91s : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic r92s : int

logic attr__ATTRIBUTE_ADDRESS20 : int

predicate dynamic_property11(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq24 : integer, integer -> bool

logic dummy35 : integer

type t93s__ref = { t93s__content : integer
}

function t93s__ref___projection(a: t93s__ref) : integer = (a).t93s__content

type t8

logic first12 : t8 -> integer

logic last12 : t8 -> integer

logic mk6 : int, int -> t8

axiom mk_def6 :
  (forall f:int. forall l:int [mk6(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first12(mk6(f, l))) = f) and (to_rep1(last12(mk6(f, l))) = l)))))

predicate dynamic_property12(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property11(range_first, range_last, low) and
  dynamic_property11(range_first, range_last, high)))))

type us_t6 = { elts6 : (int,byte) farray; rt6 : t8
}

function to_array6(a: us_t6) : (int,byte) farray = (a).elts6

function of_array6(a: (int,byte) farray, f: int, l: int) : us_t6 = { elts6 =
  a; rt6 = mk6(f, l) }

function first13(a: us_t6) : int = to_rep1(first12((a).rt6))

function last13(a: us_t6) : int = to_rep1(last12((a).rt6))

logic length6 : us_t6 -> int

axiom length_def6 :
  (forall a:us_t6 [length6(a)]. (((first13(a) <= last13(a)) ->
  (length6(a) = ((last13(a) - first13(a)) + 1))) and
  ((not (first13(a) <= last13(a))) -> (length6(a) = 0))))

logic value__size9 : int

logic object__size9 : (int,byte) farray -> int

logic value__component__size8 : int

logic object__component__size8 : (int,byte) farray -> int

logic value__alignment9 : int

logic object__alignment9 : (int,byte) farray -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:(int,byte) farray. (0 <= object__size9(a)))

axiom value__component__size_axiom8 : (0 <= value__component__size8)

axiom object__component__size_axiom8 :
  (forall a:(int,byte) farray. (0 <= object__component__size8(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:(int,byte) farray. (0 <= object__alignment9(a)))

function bool_eq29(x: us_t6, y: us_t6) : bool = bool_eq8((x).elts6,
  to_rep1(first12((x).rt6)), to_rep1(last12((x).rt6)), (y).elts6,
  to_rep1(first12((y).rt6)), to_rep1(last12((y).rt6)))

logic user_eq25 : us_t6, us_t6 -> bool

logic dummy36 : (int,byte) farray

logic dummy37 : t8

type t94s__ref = { t94s__content : us_t6
}

function t94s__ref___projection(a: t94s__ref) : us_t6 = (a).t94s__content

logic r95s : int

logic attr__ATTRIBUTE_ADDRESS21 : int

logic r98s : int

logic attr__ATTRIBUTE_ADDRESS22 : int

logic r99s : int

logic attr__ATTRIBUTE_ADDRESS23 : int

predicate dynamic_property13(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq30 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq30(x, y)]. (((x = y) -> (bool_eq30(x,
  y) = true)) and ((not (x = y)) -> (bool_eq30(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq26 : integer, integer -> bool

logic dummy38 : integer

type t96s__ref = { t96s__content : integer
}

function t96s__ref___projection(a: t96s__ref) : integer = (a).t96s__content

type t9

logic first14 : t9 -> integer

logic last14 : t9 -> integer

logic mk7 : int, int -> t9

axiom mk_def7 :
  (forall f:int. forall l:int [mk7(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first14(mk7(f, l))) = f) and (to_rep1(last14(mk7(f, l))) = l)))))

predicate dynamic_property14(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property13(range_first, range_last, low) and
  dynamic_property13(range_first, range_last, high)))))

type us_t7 = { elts7 : (int,byte) farray; rt7 : t9
}

function to_array7(a: us_t7) : (int,byte) farray = (a).elts7

function of_array7(a: (int,byte) farray, f: int, l: int) : us_t7 = { elts7 =
  a; rt7 = mk7(f, l) }

function first15(a: us_t7) : int = to_rep1(first14((a).rt7))

function last15(a: us_t7) : int = to_rep1(last14((a).rt7))

logic length7 : us_t7 -> int

axiom length_def7 :
  (forall a:us_t7 [length7(a)]. (((first15(a) <= last15(a)) ->
  (length7(a) = ((last15(a) - first15(a)) + 1))) and
  ((not (first15(a) <= last15(a))) -> (length7(a) = 0))))

logic value__size10 : int

logic object__size10 : (int,byte) farray -> int

logic value__component__size9 : int

logic object__component__size9 : (int,byte) farray -> int

logic value__alignment10 : int

logic object__alignment10 : (int,byte) farray -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:(int,byte) farray. (0 <= object__size10(a)))

axiom value__component__size_axiom9 : (0 <= value__component__size9)

axiom object__component__size_axiom9 :
  (forall a:(int,byte) farray. (0 <= object__component__size9(a)))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:(int,byte) farray. (0 <= object__alignment10(a)))

function bool_eq31(x: us_t7, y: us_t7) : bool = bool_eq8((x).elts7,
  to_rep1(first14((x).rt7)), to_rep1(last14((x).rt7)), (y).elts7,
  to_rep1(first14((y).rt7)), to_rep1(last14((y).rt7)))

logic user_eq27 : us_t7, us_t7 -> bool

logic dummy39 : (int,byte) farray

logic dummy40 : t9

type t97s__ref = { t97s__content : us_t7
}

function t97s__ref___projection(a: t97s__ref) : us_t7 = (a).t97s__content

predicate dynamic_property15(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq32 : int, int -> bool

axiom bool_eq_def23 :
  (forall x:int. forall y:int [bool_eq32(x, y)]. (((x = y) -> (bool_eq32(x,
  y) = true)) and ((not (x = y)) -> (bool_eq32(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq28 : integer, integer -> bool

logic dummy41 : integer

type t100s__ref = { t100s__content : integer
}

function t100s__ref___projection(a: t100s__ref) : integer =
  (a).t100s__content

type t10

logic first16 : t10 -> integer

logic last16 : t10 -> integer

logic mk8 : int, int -> t10

axiom mk_def8 :
  (forall f:int. forall l:int [mk8(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first16(mk8(f, l))) = f) and (to_rep1(last16(mk8(f, l))) = l)))))

predicate dynamic_property16(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property15(range_first, range_last, low) and
  dynamic_property15(range_first, range_last, high)))))

type us_t8 = { elts8 : (int,byte) farray; rt8 : t10
}

function to_array8(a: us_t8) : (int,byte) farray = (a).elts8

function of_array8(a: (int,byte) farray, f: int, l: int) : us_t8 = { elts8 =
  a; rt8 = mk8(f, l) }

function first17(a: us_t8) : int = to_rep1(first16((a).rt8))

function last17(a: us_t8) : int = to_rep1(last16((a).rt8))

logic length8 : us_t8 -> int

axiom length_def8 :
  (forall a:us_t8 [length8(a)]. (((first17(a) <= last17(a)) ->
  (length8(a) = ((last17(a) - first17(a)) + 1))) and
  ((not (first17(a) <= last17(a))) -> (length8(a) = 0))))

logic value__size11 : int

logic object__size11 : (int,byte) farray -> int

logic value__component__size10 : int

logic object__component__size10 : (int,byte) farray -> int

logic value__alignment11 : int

logic object__alignment11 : (int,byte) farray -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:(int,byte) farray. (0 <= object__size11(a)))

axiom value__component__size_axiom10 : (0 <= value__component__size10)

axiom object__component__size_axiom10 :
  (forall a:(int,byte) farray. (0 <= object__component__size10(a)))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:(int,byte) farray. (0 <= object__alignment11(a)))

function bool_eq33(x: us_t8, y: us_t8) : bool = bool_eq8((x).elts8,
  to_rep1(first16((x).rt8)), to_rep1(last16((x).rt8)), (y).elts8,
  to_rep1(first16((y).rt8)), to_rep1(last16((y).rt8)))

logic user_eq29 : us_t8, us_t8 -> bool

logic dummy42 : (int,byte) farray

logic dummy43 : t10

type t101s__ref = { t101s__content : us_t8
}

function t101s__ref___projection(a: t101s__ref) : us_t8 = (a).t101s__content

 (* File "keccak-sponge.ads", line 265, characters 0-0 *)
goal WP_parameter_def :
  (forall ctx__split_fields:map. forall ctx__split_fields1:(int,byte) farray.
  forall ctx__split_fields2:bit_absorption_number.
  forall ctx__split_fields3:byte_absorption_number.
  forall ctx__split_fields4:rate_number. forall ctx__split_fields5:states.
  forall offset:int. forall remaining_bits:int. forall remaining_bytes:int.
  forall initial_data_len:int. forall free_bytes_in_block:int.
  forall free_bits_in_block:int. forall block_offset:int.
  forall data_last:int. forall initial_bit_rate:int. forall o:int.
  forall o1:int. forall o2:int. forall o3:int. forall o4:int. forall o5:int.
  forall o6:int. forall o7:int. forall o8:int. forall o9:int.
  forall keccak__keccak_1600__sponge__absorb__R82s__assume:int.
  forall keccak__keccak_1600__sponge__absorb__R85s__assume:int.
  forall o10:(int,byte) farray. forall temp___886:(int,byte) farray.
  forall temp___8861:t6. forall temp___887:(int,byte) farray.
  forall temp___8871:t5. forall o11:(int,byte) farray.
  forall temp___889:(int,byte) farray. forall temp___8891:t5.
  forall temp___891:(int,byte) farray. forall temp___8911:t5.
  forall o12:(int,byte) farray. forall o13:map. forall o14:(int,byte) farray.
  forall o15:bit_absorption_number. forall o16:byte_absorption_number.
  forall o17:rate_number. forall o18:states. forall temp___894:map.
  forall temp___8941:(int,byte) farray.
  forall temp___8942:bit_absorption_number.
  forall temp___8943:byte_absorption_number. forall temp___8944:rate_number.
  forall temp___8945:states. forall o19:int. forall o20:int. forall o21:int.
  forall o22:int. forall o23:int. forall o24:(int,byte) farray.
  forall temp___897:(int,byte) farray. forall temp___8971:t7.
  forall o25:(int,byte) farray. forall o26:t1.
  forall keccak__keccak_1600__sponge__absorb__L_1__R91s__assume:int.
  forall o27:int. forall o28:int.
  forall keccak__keccak_1600__sponge__absorb__L_1__R92s__assume:int.
  forall o29:(int,byte) farray. forall temp___902:(int,byte) farray.
  forall temp___9021:t8. forall o30:(int,byte) farray. forall o31:t1.
  forall ctx__split_fields6:us_split_fields. forall block_offset1:int.
  forall result:int__ref. forall offset1:int. forall result1:int__ref.
  forall remaining_bits1:int. forall result2:int__ref.
  forall remaining_bytes1:int. forall result3:int__ref.
  forall initial_data_len1:int. forall result4:int__ref.
  forall initial_bit_rate1:int. forall result5:int__ref.
  forall data_last1:int. forall result6:int__ref.
  forall free_bits_in_block1:int. forall result7:int__ref.
  forall free_bytes_in_block1:int. forall result8:int__ref.
  forall block_offset2:int. forall result9:us_split_fields__ref.
  forall ctx__split_fields7:us_split_fields. forall result10:int__ref.
  forall offset2:int. forall result11:int__ref. forall remaining_bytes2:int.
  forall result12:int__ref. forall remaining_bits2:int.
  forall keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a:map.
  forall result13:us_split_fields__ref.
  forall ctx__split_fields8:us_split_fields.
  forall keccak__keccak_1600__keccakf_1600_permutation__permute__a:map.
  forall result14:us_split_fields__ref.
  forall ctx__split_fields9:us_split_fields.
  forall ctx__split_fields10:us_split_fields. forall offset3:int.
  forall remaining_bits3:int. forall remaining_bytes3:int.
  forall temp___913:int. forall temp___912:int. forall temp___911:int.
  forall result15:int__ref. forall temp___9131:int. forall result16:int__ref.
  forall temp___9121:int. forall result17:int__ref. forall temp___9111:int.
  forall keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a1:map.
  forall result18:us_split_fields__ref.
  forall ctx__split_fields11:us_split_fields.
  forall keccak__keccak_1600__keccakf_1600_permutation__permute__a1:map.
  forall result19:us_split_fields__ref.
  forall ctx__split_fields12:us_split_fields. (dynamic_property(0,
  2147483647, to_rep1(first(data1)), to_rep1(last(data1))) ->
  (in_range2(bit_length) -> (((state_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx__split_fields;
  rec__keccak__keccak_1600__sponge__context__block = ctx__split_fields1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  ctx__split_fields2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  ctx__split_fields3; rec__keccak__keccak_1600__sponge__context__rate =
  ctx__split_fields4; rec__keccak__keccak_1600__sponge__context__curr_state =
  ctx__split_fields5 } }) = 0) and ((bit_length <= 2147483640) and
  ((comp_div((bit_length + 7),8) <= length({ elts = data; rt = data1 })) and
  ((mod(in_queue_bit_length({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx__split_fields;
  rec__keccak__keccak_1600__sponge__context__block = ctx__split_fields1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  ctx__split_fields2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  ctx__split_fields3; rec__keccak__keccak_1600__sponge__context__rate =
  ctx__split_fields4; rec__keccak__keccak_1600__sponge__context__curr_state =
  ctx__split_fields5 } }), 8) = 0) and (in_queue_bit_length({
  us_split_fields1 = { rec__keccak__keccak_1600__sponge__context__state =
  ctx__split_fields; rec__keccak__keccak_1600__sponge__context__block =
  ctx__split_fields1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  ctx__split_fields2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  ctx__split_fields3; rec__keccak__keccak_1600__sponge__context__rate =
  ctx__split_fields4; rec__keccak__keccak_1600__sponge__context__curr_state =
  ctx__split_fields5 } }) <  rate_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx__split_fields;
  rec__keccak__keccak_1600__sponge__context__block = ctx__split_fields1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  ctx__split_fields2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  ctx__split_fields3; rec__keccak__keccak_1600__sponge__context__rate =
  ctx__split_fields4; rec__keccak__keccak_1600__sponge__context__curr_state =
  ctx__split_fields5 } })))))) -> (((result = { int__content = offset }) and
  (offset1 = 0)) -> (in_range2(offset1) -> (((result1 = { int__content =
  remaining_bits }) and (remaining_bits1 = bit_length)) ->
  (in_range2(remaining_bits1) -> ((((((o = (bit_length + 7)) and
  in_range1((bit_length + 7))) and (o1 = comp_div(o,8))) and ((o2 = o1) and
  in_range2(o1))) and ((result2 = { int__content = remaining_bytes }) and
  (remaining_bytes1 = o2))) -> (in_range2(remaining_bytes1) -> (((result3 = {
  int__content = initial_data_len }) and
  (initial_data_len1 = remaining_bytes1)) -> (in_range2(initial_data_len1) ->
  (((0 <= 2147483647) -> in_range2(free_bytes_in_block)) ->
  (((0 <= 2147483647) -> in_range2(free_bits_in_block)) ->
  (((0 <= 2147483647) -> in_range2(block_offset)) -> (((0 <= 2147483647) ->
  in_range4(data_last)) -> ((((o3 = rate_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx__split_fields;
  rec__keccak__keccak_1600__sponge__context__block = ctx__split_fields1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  ctx__split_fields2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  ctx__split_fields3; rec__keccak__keccak_1600__sponge__context__rate =
  ctx__split_fields4; rec__keccak__keccak_1600__sponge__context__curr_state =
  ctx__split_fields5 } })) and (in_range3(o3) and
  ((o3 = (to_rep4(ctx__split_fields4) * 8)) and (o3 <  1600)))) and
  ((result4 = { int__content = initial_bit_rate }) and
  (initial_bit_rate1 = o3))) -> (in_range3(initial_bit_rate1) ->
  ((0 <  initial_data_len1) ->
  (((((o4 = (to_rep1(first(data1)) + (initial_data_len1 - 1))) and
  in_range1((to_rep1(first(data1)) + (initial_data_len1 - 1)))) and
  ((o5 = o4) and in_range4(o4))) and ((result5 = { int__content = data_last
  }) and (data_last1 = o5))) -> (((((((o6 = rate_of({ us_split_fields1 = {
  rec__keccak__keccak_1600__sponge__context__state = ctx__split_fields;
  rec__keccak__keccak_1600__sponge__context__block = ctx__split_fields1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  ctx__split_fields2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  ctx__split_fields3; rec__keccak__keccak_1600__sponge__context__rate =
  ctx__split_fields4; rec__keccak__keccak_1600__sponge__context__curr_state =
  ctx__split_fields5 } })) and (in_range3(o6) and
  ((o6 = (to_rep4(ctx__split_fields4) * 8)) and (o6 <  1600)))) and
  (o7 = (o6 - to_rep3(ctx__split_fields2)))) and ((o8 = o7) and
  in_range1(o7))) and ((o9 = o8) and in_range2(o8))) and ((result6 = {
  int__content = free_bits_in_block }) and (free_bits_in_block1 = o9))) ->
  (((result7 = { int__content = free_bytes_in_block }) and
  (free_bytes_in_block1 = comp_div(free_bits_in_block1,8))) ->
  ((free_bits_in_block1 <  1600) -> ((mod(free_bits_in_block1, 8) = 0) ->
  ((not (bit_length <  free_bits_in_block1)) ->
  ((((0 <  free_bits_in_block1) and (((result8 = { int__content =
  block_offset }) and
  (block_offset2 = comp_div(to_rep3(ctx__split_fields2),8))) and
  (((block_offset2 = r81s) and in_range2(r81s)) and
  (((((keccak__keccak_1600__sponge__absorb__R82s__assume = (block_offset2 + (free_bytes_in_block1 - 1))) and
  in_range1((block_offset2 + (free_bytes_in_block1 - 1)))) and
  (keccak__keccak_1600__sponge__absorb__R82s__assume = r82s)) and
  in_range1(r82s)) and
  (((((keccak__keccak_1600__sponge__absorb__R85s__assume = (to_rep1(first(data1)) + (free_bytes_in_block1 - 1))) and
  in_range1((to_rep1(first(data1)) + (free_bytes_in_block1 - 1)))) and
  (keccak__keccak_1600__sponge__absorb__R85s__assume = r85s)) and
  in_range1(r85s)) and (((((((((((to_rep1(first(data1)) <= r85s) ->
  (((to_rep1(first(data1)) <= to_rep1(first(data1))) and
  (to_rep1(first(data1)) <= to_rep1(last(data1)))) and
  ((to_rep1(first(data1)) <= r85s) and (r85s <= to_rep1(last(data1)))))) and
  (o10 = data)) and ((o10 = temp___886) and (mk4(to_rep1(first(data1)),
  r85s) = temp___8861))) and
  ((((to_rep1(first8(temp___8861)) <= to_rep1(last8(temp___8861))) and
  (((r81s <= r82s) and
  (((to_rep1(last8(temp___8861)) - to_rep1(first8(temp___8861))) + 1) = ((r82s - r81s) + 1))) or
  ((not (r81s <= r82s)) and
  (((to_rep1(last8(temp___8861)) - to_rep1(first8(temp___8861))) + 1) = 0)))) or
  ((not (to_rep1(first8(temp___8861)) <= to_rep1(last8(temp___8861)))) and
  (((r81s <= r82s) and (0 = ((r82s - r81s) + 1))) or
  (not (r81s <= r82s))))) and ((slide(temp___886,
  to_rep1(first8(temp___8861)), r81s) = temp___887) and (mk3(r81s,
  r82s) = temp___8871)))) and (((((r81s <= r82s) -> (((0 <= r81s) and
  (r81s <= 199)) and ((0 <= r82s) and (r82s <= 199)))) and
  (o11 = ctx__split_fields1)) and ((o11 = temp___889) and (mk3(r81s,
  r82s) = temp___8891))) and
  ((((to_rep1(first6(temp___8871)) <= to_rep1(last6(temp___8871))) and
  (((to_rep1(first6(temp___8891)) <= to_rep1(last6(temp___8891))) and
  (((to_rep1(last6(temp___8871)) - to_rep1(first6(temp___8871))) + 1) = ((to_rep1(last6(temp___8891)) - to_rep1(first6(temp___8891))) + 1))) or
  ((not (to_rep1(first6(temp___8891)) <= to_rep1(last6(temp___8891)))) and
  (((to_rep1(last6(temp___8871)) - to_rep1(first6(temp___8871))) + 1) = 0)))) or
  ((not (to_rep1(first6(temp___8871)) <= to_rep1(last6(temp___8871)))) and
  (((to_rep1(first6(temp___8891)) <= to_rep1(last6(temp___8891))) and
  (0 = ((to_rep1(last6(temp___8891)) - to_rep1(first6(temp___8891))) + 1))) or
  (not (to_rep1(first6(temp___8891)) <= to_rep1(last6(temp___8891))))))) and
  ({ elts3 = temp___891; rt3 = temp___8911 } = { elts3 = temp___887; rt3 =
  temp___8871 })))) and
  (forall temp___892:int. ((((r81s <= temp___892) and
  (temp___892 <= r82s)) and
  ((o12[temp___892]) = (temp___891[temp___892]))) or
  ((not ((r81s <= temp___892) and (temp___892 <= r82s))) and
  ((o12[temp___892]) = (ctx__split_fields1[temp___892])))))) and
  ((ctx__split_fields = o13) and ((o12 = o14) and
  ((ctx__split_fields2 = o15) and ((ctx__split_fields3 = o16) and
  ((ctx__split_fields4 = o17) and (ctx__split_fields5 = o18))))))) and
  ((temp___894 = o13) and ((temp___8941 = o14) and ((temp___8942 = o15) and
  ((temp___8943 = o16) and ((temp___8944 = o17) and
  (temp___8945 = o18))))))) and ((result9 = { us_split_fields__content = {
  rec__keccak__keccak_1600__sponge__context__state = ctx__split_fields;
  rec__keccak__keccak_1600__sponge__context__block = ctx__split_fields1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  ctx__split_fields2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  ctx__split_fields3; rec__keccak__keccak_1600__sponge__context__rate =
  ctx__split_fields4; rec__keccak__keccak_1600__sponge__context__curr_state =
  ctx__split_fields5 } }) and (ctx__split_fields7 = {
  rec__keccak__keccak_1600__sponge__context__state = temp___894;
  rec__keccak__keccak_1600__sponge__context__block = temp___8941;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed = temp___8942;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed = temp___8943;
  rec__keccak__keccak_1600__sponge__context__rate = temp___8944;
  rec__keccak__keccak_1600__sponge__context__curr_state = temp___8945
  }))) and ((((o19 = (offset1 + free_bytes_in_block1)) and
  in_range1((offset1 + free_bytes_in_block1))) and ((result10 = {
  int__content = offset1 }) and (offset2 = o19))) and
  (((((o20 = (remaining_bytes1 - free_bytes_in_block1)) and
  in_range1((remaining_bytes1 - free_bytes_in_block1))) and ((o21 = o20) and
  in_range2(o20))) and ((result11 = { int__content = remaining_bytes1 }) and
  (remaining_bytes2 = o21))) and
  ((((o22 = (remaining_bits1 - free_bits_in_block1)) and
  in_range1((remaining_bits1 - free_bits_in_block1))) and ((o23 = o22) and
  in_range2(o22))) and ((result12 = { int__content = remaining_bits1 }) and
  (remaining_bits2 = o23))))))))))) or ((not (0 <  free_bits_in_block1)) and
  (((block_offset2 = block_offset) and
  ((remaining_bytes2 = remaining_bytes1) and
  ((remaining_bits2 = remaining_bits1) and ((offset2 = offset1) and
  (ctx__split_fields7 = { rec__keccak__keccak_1600__sponge__context__state =
  ctx__split_fields; rec__keccak__keccak_1600__sponge__context__block =
  ctx__split_fields1;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  ctx__split_fields2;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  ctx__split_fields3; rec__keccak__keccak_1600__sponge__context__rate =
  ctx__split_fields4; rec__keccak__keccak_1600__sponge__context__curr_state =
  ctx__split_fields5 }))))) and ((block_offset2 = block_offset1) and
  ((remaining_bytes2 = remaining_bytes1) and
  ((remaining_bits2 = remaining_bits1) and ((offset2 = offset1) and
  (ctx__split_fields7 = ctx__split_fields6)))))))) ->
  ((((to_rep4((ctx__split_fields7).rec__keccak__keccak_1600__sponge__context__rate) - 1) = r88s) and
  in_range1(r88s)) -> (((((((0 <= r88s) -> (((0 <= 0) and (0 <= 199)) and
  ((0 <= r88s) and (r88s <= 199)))) and
  (o24 = (ctx__split_fields7).rec__keccak__keccak_1600__sponge__context__block)) and
  ((o24 = temp___897) and (mk5(0, r88s) = temp___8971))) and
  ((o25 = temp___897) and (o26 = mk(to_rep1(first10(temp___8971)),
  to_rep1(last10(temp___8971)))))) and ((result13 = {
  us_split_fields__content = ctx__split_fields7 }) and
  (ctx__split_fields8 = { rec__keccak__keccak_1600__sponge__context__state =
  keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a;
  rec__keccak__keccak_1600__sponge__context__block =
  (ctx__split_fields7).rec__keccak__keccak_1600__sponge__context__block;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  (ctx__split_fields7).rec__keccak__keccak_1600__sponge__context__bits_absorbed;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  (ctx__split_fields7).rec__keccak__keccak_1600__sponge__context__bytes_squeezed;
  rec__keccak__keccak_1600__sponge__context__rate =
  (ctx__split_fields7).rec__keccak__keccak_1600__sponge__context__rate;
  rec__keccak__keccak_1600__sponge__context__curr_state =
  (ctx__split_fields7).rec__keccak__keccak_1600__sponge__context__curr_state
  }))) -> (((result14 = { us_split_fields__content = ctx__split_fields8
  }) and (ctx__split_fields9 = {
  rec__keccak__keccak_1600__sponge__context__state =
  keccak__keccak_1600__keccakf_1600_permutation__permute__a;
  rec__keccak__keccak_1600__sponge__context__block =
  (ctx__split_fields8).rec__keccak__keccak_1600__sponge__context__block;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  (ctx__split_fields8).rec__keccak__keccak_1600__sponge__context__bits_absorbed;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  (ctx__split_fields8).rec__keccak__keccak_1600__sponge__context__bytes_squeezed;
  rec__keccak__keccak_1600__sponge__context__rate =
  (ctx__split_fields8).rec__keccak__keccak_1600__sponge__context__rate;
  rec__keccak__keccak_1600__sponge__context__curr_state =
  (ctx__split_fields8).rec__keccak__keccak_1600__sponge__context__curr_state
  })) -> (((offset2 + remaining_bytes2) = initial_data_len1) ->
  ((remaining_bytes2 = comp_div((remaining_bits2 + 7),8)) ->
  ((initial_bit_rate1 <= remaining_bits2) ->
  (((((((offset3 + remaining_bytes3) = initial_data_len1) and
  (remaining_bytes3 = comp_div((remaining_bits3 + 7),8))) and
  (mod(bit_length, 8) = mod(remaining_bits3, 8))) and (state_of({
  us_split_fields1 = ctx__split_fields10 }) = 0)) and (rate_of({
  us_split_fields1 = ctx__split_fields10 }) = initial_bit_rate1)) ->
  ((((((((((ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__block = (ctx__split_fields9).rec__keccak__keccak_1600__sponge__context__block) and
  ((ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__bits_absorbed = (ctx__split_fields9).rec__keccak__keccak_1600__sponge__context__bits_absorbed)) and
  ((ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__bytes_squeezed = (ctx__split_fields9).rec__keccak__keccak_1600__sponge__context__bytes_squeezed)) and
  ((ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__rate = (ctx__split_fields9).rec__keccak__keccak_1600__sponge__context__rate)) and
  ((ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__curr_state = (ctx__split_fields9).rec__keccak__keccak_1600__sponge__context__curr_state)) and
  ((0 <= 2147483647) -> in_range2(offset3))) and ((0 <= 2147483647) ->
  in_range2(remaining_bits3))) and ((0 <= 2147483647) ->
  in_range2(remaining_bytes3))) -> (((result15 = { int__content = temp___913
  }) and (temp___9131 = remaining_bytes3)) -> (((result16 = { int__content =
  temp___912 }) and (temp___9121 = remaining_bits3)) -> (((result17 = {
  int__content = temp___911 }) and (temp___9111 = offset3)) ->
  (((((keccak__keccak_1600__sponge__absorb__L_1__R91s__assume = (to_rep1(first(data1)) + offset3)) and
  in_range1((to_rep1(first(data1)) + offset3))) and
  (keccak__keccak_1600__sponge__absorb__L_1__R91s__assume = r91s)) and
  in_range1(r91s)) ->
  (((((((o27 = (offset3 + (to_rep4((ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__rate) - 1))) and
  in_range1((offset3 + (to_rep4((ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__rate) - 1)))) and
  (o28 = (to_rep1(first(data1)) + o27))) and
  ((keccak__keccak_1600__sponge__absorb__L_1__R92s__assume = o28) and
  in_range1(o28))) and
  (keccak__keccak_1600__sponge__absorb__L_1__R92s__assume = r92s)) and
  in_range1(r92s)) -> (((((((r91s <= r92s) ->
  (((to_rep1(first(data1)) <= r91s) and (r91s <= to_rep1(last(data1)))) and
  ((to_rep1(first(data1)) <= r92s) and (r92s <= to_rep1(last(data1)))))) and
  (o29 = data)) and ((o29 = temp___902) and (mk6(r91s,
  r92s) = temp___9021))) and ((o30 = temp___902) and
  (o31 = mk(to_rep1(first12(temp___9021)),
  to_rep1(last12(temp___9021)))))) and ((result18 = {
  us_split_fields__content = ctx__split_fields10 }) and
  (ctx__split_fields11 = { rec__keccak__keccak_1600__sponge__context__state =
  keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a1;
  rec__keccak__keccak_1600__sponge__context__block =
  (ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__block;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  (ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__bits_absorbed;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  (ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__bytes_squeezed;
  rec__keccak__keccak_1600__sponge__context__rate =
  (ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__rate;
  rec__keccak__keccak_1600__sponge__context__curr_state =
  (ctx__split_fields10).rec__keccak__keccak_1600__sponge__context__curr_state
  }))) -> (((result19 = { us_split_fields__content = ctx__split_fields11
  }) and (ctx__split_fields12 = {
  rec__keccak__keccak_1600__sponge__context__state =
  keccak__keccak_1600__keccakf_1600_permutation__permute__a1;
  rec__keccak__keccak_1600__sponge__context__block =
  (ctx__split_fields11).rec__keccak__keccak_1600__sponge__context__block;
  rec__keccak__keccak_1600__sponge__context__bits_absorbed =
  (ctx__split_fields11).rec__keccak__keccak_1600__sponge__context__bits_absorbed;
  rec__keccak__keccak_1600__sponge__context__bytes_squeezed =
  (ctx__split_fields11).rec__keccak__keccak_1600__sponge__context__bytes_squeezed;
  rec__keccak__keccak_1600__sponge__context__rate =
  (ctx__split_fields11).rec__keccak__keccak_1600__sponge__context__rate;
  rec__keccak__keccak_1600__sponge__context__curr_state =
  (ctx__split_fields11).rec__keccak__keccak_1600__sponge__context__curr_state
  })) ->
  in_range1((offset3 + to_rep4((ctx__split_fields12).rec__keccak__keccak_1600__sponge__context__rate))))))))))))))))))))))))))))))))))))))))))))
