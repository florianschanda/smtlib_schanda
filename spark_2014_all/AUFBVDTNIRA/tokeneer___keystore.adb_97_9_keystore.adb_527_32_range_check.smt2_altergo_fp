(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(4294967296 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def1 :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t1
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t1

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type statust

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : statust, statust -> bool

logic dummy5 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type unsigned32t

predicate in_range5(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : unsigned32t, unsigned32t -> bool

logic dummy6 : unsigned32t

type unsigned32t__ref = { unsigned32t__content : unsigned32t
}

function unsigned32t__ref___projection(a: unsigned32t__ref) : unsigned32t =
  (a).unsigned32t__content

logic to_rep2 : unsigned32t -> int

logic of_rep2 : int -> unsigned32t

axiom inversion_axiom2 :
  (forall x:unsigned32t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:unsigned32t [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type descriptioni

predicate in_range6(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : descriptioni, descriptioni -> bool

logic dummy7 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic nodescription : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic audittypes__nodescription__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___134:int.
  (forall temp___135:int.
  ((audittypes__nodescription__aggregate_def(temp___134)[temp___135]) = of_rep(temp___134))))

logic nouser : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp___String_Literal_136 : unit -> (int,character) farray

axiom temp___String_Literal_136__def_axiom :
  ((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_136(void)[1])) = 78) and
  (to_rep((temp___String_Literal_136(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_136(void)[3])) = 85)) and
  (to_rep((temp___String_Literal_136(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_136(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_136(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_136(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[17])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[18])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[26])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[28])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[30])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[31])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[32])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[33])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[34])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[35])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[36])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[38])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[39])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[40])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[41])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[42])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[43])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[44])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[45])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[46])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[47])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[48])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[49])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[50])) = 32))

type namecountt

predicate in_range7(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : namecountt, namecountt -> bool

logic dummy8 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep3 : namecountt -> int

logic of_rep3 : int -> namecountt

axiom inversion_axiom3 :
  (forall x:namecountt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:namecountt [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic blankname : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

type issueridt

predicate in_range8(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : issueridt, issueridt -> bool

logic dummy9 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep4 : issueridt -> int

logic of_rep4 : int -> issueridt

axiom inversion_axiom4 :
  (forall x:issueridt [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:issueridt [to_rep4(x)]. in_range8(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range8(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic dummy10 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq13 : us_rep, us_rep -> bool

axiom bool_eq_def11 :
  (forall a:us_rep. forall b:us_rep [bool_eq13(a, b)].
  (((((to_rep4(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep4(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq6(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq13(a, b) = true)) and
  ((not (((to_rep4(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep4(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq6(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq13(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size2({ us_split_fields1 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment2({
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy11 : issueridt

logic dummy12 : namecountt

logic dummy13 : (int,character) farray

type issuert__ref = { issuert__content : us_rep
}

function issuert__ref___projection(a: issuert__ref) : us_rep =
  (a).issuert__content

logic nullissuer : issueridt

logic nullissuer1 : namecountt

logic nullissuer2 : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

type logfileindext

predicate in_range9(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : logfileindext, logfileindext -> bool

logic dummy14 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep5 : logfileindext -> int

logic of_rep5 : int -> logfileindext

axiom inversion_axiom5 :
  (forall x:logfileindext [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:logfileindext [to_rep5(x)]. in_range9(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range9(x) ->
  (to_rep5(of_rep5(x)) = x)))

type logentrycountt

predicate in_range10(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : logentrycountt, logentrycountt -> bool

logic dummy15 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep6 : logentrycountt -> int

logic of_rep6 : int -> logentrycountt

axiom inversion_axiom6 :
  (forall x:logentrycountt [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:logentrycountt [to_rep6(x)]. in_range10(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range10(x) ->
  (to_rep6(of_rep6(x)) = x)))

type map__ref1 = { map__content1 : (int,logfileindext) farray
}

logic slide1 : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq1 :
  (forall a:(int,logfileindext) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> (int,logfileindext) farray

axiom concat_def1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : logfileindext, int -> (int,logfileindext) farray

axiom singleton_def1 :
  (forall v:logfileindext.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq16 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def14 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq16(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_150:int. ((((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) and
  (to_rep5((a[temp___idx_150])) = to_rep5((b[((b__first - a__first) + temp___idx_150)])))) or
  (not ((a__first <= temp___idx_150) and (temp___idx_150 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_150:int. (((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) ->
  (to_rep5((a[temp___idx_150])) = to_rep5((b[((b__first - a__first) + temp___idx_150)]))))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_150:int. (((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) ->
  (to_rep5((a[temp___idx_150])) = to_rep5((b[((b__first - a__first) + temp___idx_150)])))))))))

logic compare1 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq16(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq16(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep5((a[(i + 1)])) <  to_rep5((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq16(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep5((b[(i + 1)])) <  to_rep5((a[(j + 1)]))))))))))))

logic dummy16 : (int,logfileindext) farray

logic value__size3 : int

logic object__size3 : (int,logfileindext) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,logfileindext) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,logfileindext) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,logfileindext) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment3(a)))

logic user_eq13 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type logfilecountt

predicate in_range11(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : logfilecountt, logfilecountt -> bool

logic dummy17 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep7 : logfilecountt -> int

logic of_rep7 : int -> logfilecountt

axiom inversion_axiom7 :
  (forall x:logfilecountt [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:logfilecountt [to_rep7(x)]. in_range11(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range11(x) ->
  (to_rep7(of_rep7(x)) = x)))

type us_split_fields2 = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields2) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__2__projection(a: us_split_fields2) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___8__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq18 : us_rep1, us_rep1 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq18(a, b)].
  ((((((bool_eq16(((a).us_split_fields3).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__head) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__head))) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__lasti) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__lasti))) and
  (to_rep7(((a).us_split_fields3).rec__auditlog__logfilelistt__length) = to_rep7(((b).us_split_fields3).rec__auditlog__logfilelistt__length))) ->
  (bool_eq18(a, b) = true)) and
  ((not ((((bool_eq16(((a).us_split_fields3).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__head) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__head))) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__lasti) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__lasti))) and
  (to_rep7(((a).us_split_fields3).rec__auditlog__logfilelistt__length) = to_rep7(((b).us_split_fields3).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq18(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size4({
  us_split_fields3 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment4({ us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq15 : us_rep1, us_rep1 -> bool

logic dummy18 : (int,logfileindext) farray

logic dummy19 : logfileindext

logic dummy20 : logfileindext

logic dummy21 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep1
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep1 =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range12(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq16 : fileentrycountt, fileentrycountt -> bool

logic dummy22 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep8 : fileentrycountt -> int

logic of_rep8 : int -> fileentrycountt

axiom inversion_axiom8 :
  (forall x:fileentrycountt [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:fileentrycountt [to_rep8(x)]. in_range12(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range12(x) ->
  (to_rep8(of_rep8(x)) = x)))

type map__ref2 = { map__content2 : (int,fileentrycountt) farray
}

logic slide2 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq2 :
  (forall a:(int,fileentrycountt) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> (int,fileentrycountt) farray

axiom concat_def2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : fileentrycountt, int -> (int,fileentrycountt) farray

axiom singleton_def2 :
  (forall v:fileentrycountt.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq20 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def18 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq20(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep8((a[temp___idx_151])) = to_rep8((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep8((a[temp___idx_151])) = to_rep8((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq20(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep8((a[temp___idx_151])) = to_rep8((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare2 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> int

axiom compare_def_eq2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq20(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq20(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep8((a[(i + 1)])) <  to_rep8((b[(j + 1)]))))))))))))

axiom compare_def_gt2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare2(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq20(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep8((b[(i + 1)])) <  to_rep8((a[(j + 1)]))))))))))))

logic dummy23 : (int,fileentrycountt) farray

logic value__size5 : int

logic object__size5 : (int,fileentrycountt) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,fileentrycountt) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,fileentrycountt) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment5(a)))

logic user_eq17 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields4 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep1;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields4) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields4) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields4) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___9__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq21 : us_rep2, us_rep2 -> bool

axiom bool_eq_def19 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq21(a, b)].
  ((((((to_rep5(((a).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile) = to_rep5(((b).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq18(((a).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq20(((a).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq21(a, b) = true)) and
  ((not ((((to_rep5(((a).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile) = to_rep5(((b).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq18(((a).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq20(((a).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq21(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep2 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep2 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size6({
  us_split_fields5 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment6({
  us_split_fields5 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq18 : us_rep2, us_rep2 -> bool

logic dummy24 : logfileindext

logic dummy25 : logentrycountt

logic dummy26 : (int,logfileindext) farray

logic dummy27 : logfileindext

logic dummy28 : logfileindext

logic dummy29 : logfilecountt

logic dummy30 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep2
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep2 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep1,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep1,
  (int,fileentrycountt) farray -> prop

logic temp___1087 : int -> (int,logfileindext) farray

axiom def_axiom1 :
  (forall temp___1089:int.
  (forall temp___1090:int.
  ((temp___1087(temp___1089)[temp___1090]) = of_rep5(temp___1089))))

logic temp___1091 : int -> (int,fileentrycountt) farray

axiom def_axiom2 :
  (forall temp___1093:int.
  (forall temp___1094:int.
  ((temp___1091(temp___1093)[temp___1094]) = of_rep8(temp___1093))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep3

logic bool_eq22 : us_rep3, us_rep3 -> bool

logic value__size7 : int

logic object__size7 : us_rep3 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep3 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (forall a:us_rep3. (0 <= object__size7(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:us_rep3. (0 <= object__alignment7(a)))

logic user_eq19 : us_rep3, us_rep3 -> bool

logic dummy31 : us_rep3

type t__ref1 = { t__content1 : us_rep3
}

function t__ref___projection(a: t__ref1) : us_rep3 = (a).t__content1

type map__ref3 = { map__content3 : (int,us_rep3) farray
}

logic slide3 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq3 :
  (forall a:(int,us_rep3) farray.
  (forall first2:int [slide3(a, first2, first2)]. (slide3(a, first2,
  first2) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> (int,us_rep3) farray

axiom concat_def3 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : us_rep3, int -> (int,us_rep3) farray

axiom singleton_def3 :
  (forall v:us_rep3.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq23 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def20 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq23(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and (bool_eq22((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true)) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq23(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq22((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true))))) -> (bool_eq23(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq23(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq22((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS4 : int

type filestatust

predicate in_range13(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq20 : filestatust, filestatust -> bool

logic dummy32 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep9 : filestatust -> int

logic of_rep9 : int -> filestatust

axiom inversion_axiom9 :
  (forall x:filestatust [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:filestatust [to_rep9(x)]. in_range13(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range13(x) ->
  (to_rep9(of_rep9(x)) = x)))

type map__ref4 = { map__content4 : (int,filestatust) farray
}

logic slide4 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq4 :
  (forall a:(int,filestatust) farray.
  (forall first2:int [slide4(a, first2, first2)]. (slide4(a, first2,
  first2) = a)))

axiom slide_def4 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,filestatust) farray, int, int, (int,filestatust) farray,
  int, int -> (int,filestatust) farray

axiom concat_def4 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : filestatust, int -> (int,filestatust) farray

axiom singleton_def4 :
  (forall v:filestatust.
  (forall i:int [(singleton4(v, i)[i])]. ((singleton4(v, i)[i]) = v)))

logic bool_eq25 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def22 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq25(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_153:int. ((((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) and
  (to_rep9((a[temp___idx_153])) = to_rep9((b[((b__first - a__first) + temp___idx_153)])))) or
  (not ((a__first <= temp___idx_153) and (temp___idx_153 <= a__last)))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep9((a[temp___idx_153])) = to_rep9((b[((b__first - a__first) + temp___idx_153)]))))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq25(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep9((a[temp___idx_153])) = to_rep9((b[((b__first - a__first) + temp___idx_153)])))))))))

logic compare3 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> int

axiom compare_def_eq3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq25(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq25(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep9((a[(i + 1)])) <  to_rep9((b[(j + 1)]))))))))))))

axiom compare_def_gt3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare3(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq25(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep9((b[(i + 1)])) <  to_rep9((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

type us_split_fields6 = { rec__keystore__optionalprivatekeyt__ispresent :
bool; rec__keystore__optionalprivatekeyt__owner : us_rep
}

function us_split_fields_IsPresent__projection(a: us_split_fields6) : bool =
  (a).rec__keystore__optionalprivatekeyt__ispresent

function us_split_fields_Owner__projection(a: us_split_fields6) : us_rep =
  (a).rec__keystore__optionalprivatekeyt__owner

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___12__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___13__projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq26 : us_rep4, us_rep4 -> bool

axiom bool_eq_def23 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq26(a, b)].
  ((((((a).us_split_fields7).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields7).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq13(((a).us_split_fields7).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields7).rec__keystore__optionalprivatekeyt__owner) = true)) ->
  (bool_eq26(a, b) = true)) and
  ((not ((((a).us_split_fields7).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields7).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq13(((a).us_split_fields7).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields7).rec__keystore__optionalprivatekeyt__owner) = true))) ->
  (bool_eq26(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep4 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep4 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__size8({ us_split_fields7 =
  { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__alignment8({
  us_split_fields7 = { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

logic keystore__optionalprivatekeyt__ispresent__first__bit : int

logic keystore__optionalprivatekeyt__ispresent__last__bit : int

logic keystore__optionalprivatekeyt__ispresent__position : int

axiom keystore__optionalprivatekeyt__ispresent__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__first__bit)

axiom keystore__optionalprivatekeyt__ispresent__last__bit_axiom :
  (keystore__optionalprivatekeyt__ispresent__first__bit <  keystore__optionalprivatekeyt__ispresent__last__bit)

axiom keystore__optionalprivatekeyt__ispresent__position_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__position)

logic keystore__optionalprivatekeyt__owner__first__bit : int

logic keystore__optionalprivatekeyt__owner__last__bit : int

logic keystore__optionalprivatekeyt__owner__position : int

axiom keystore__optionalprivatekeyt__owner__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__first__bit)

axiom keystore__optionalprivatekeyt__owner__last__bit_axiom :
  (keystore__optionalprivatekeyt__owner__first__bit <  keystore__optionalprivatekeyt__owner__last__bit)

axiom keystore__optionalprivatekeyt__owner__position_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__position)

logic user_eq21 : us_rep4, us_rep4 -> bool

logic dummy33 : bool

logic dummy34 : issueridt

logic dummy35 : namecountt

logic dummy36 : (int,character) farray

type optionalprivatekeyt__ref = { optionalprivatekeyt__content : us_rep4
}

function optionalprivatekeyt__ref___projection(a: optionalprivatekeyt__ref) : us_rep4 =
  (a).optionalprivatekeyt__content

logic attr__ATTRIBUTE_ADDRESS9 : int

type maskt

predicate in_range14(x: t) = (ule(of_int(0), x) and ule(x, of_int(15)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 15))

logic bool_eq27 : t, t -> bool

axiom bool_eq_def24 :
  (forall x:t. forall y:t [bool_eq27(x, y)]. (((x = y) -> (bool_eq27(x,
  y) = true)) and ((not (x = y)) -> (bool_eq27(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> t

logic user_eq22 : maskt, maskt -> bool

logic dummy37 : maskt

type maskt__ref = { maskt__content : maskt
}

function maskt__ref___projection(a: maskt__ref) : maskt = (a).maskt__content

logic to_rep10 : maskt -> t

logic of_rep10 : t -> maskt

axiom inversion_axiom10 :
  (forall x:maskt [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 : (forall x:maskt [to_rep10(x)]. in_range14(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:t [to_rep10(of_rep10(x))]. (in_range14(urem(x, of_int(16))) ->
  (to_rep10(of_rep10(x)) = urem(x, of_int(16)))))

function to_int2(x: maskt) : int = tqtint(to_rep10(x))

axiom range_int_axiom :
  (forall x:maskt [to_int2(x)]. in_range_int(to_int2(x)))

type us_split_fields8 = { rec__keystore__interfac__keytemplatet__attrmask :
maskt; rec__keystore__interfac__keytemplatet__owner : us_rep;
rec__keystore__interfac__keytemplatet__keyid : unsigned32t;
rec__keystore__interfac__keytemplatet__keylength : unsigned32t;
rec__keystore__interfac__keytemplatet__ispublic : bool
}

function us_split_fields_AttrMask__projection(a: us_split_fields8) : maskt =
  (a).rec__keystore__interfac__keytemplatet__attrmask

function us_split_fields_Owner__2__projection(a: us_split_fields8) : us_rep =
  (a).rec__keystore__interfac__keytemplatet__owner

function us_split_fields_KeyID__2__projection(a: us_split_fields8) : unsigned32t =
  (a).rec__keystore__interfac__keytemplatet__keyid

function us_split_fields_KeyLength__2__projection(a: us_split_fields8) : unsigned32t =
  (a).rec__keystore__interfac__keytemplatet__keylength

function us_split_fields_IsPublic__projection(a: us_split_fields8) : bool =
  (a).rec__keystore__interfac__keytemplatet__ispublic

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep5 = { us_split_fields9 : us_split_fields8
}

function us_rep___14__projection(a: us_rep5) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq28 : us_rep5, us_rep5 -> bool

axiom bool_eq_def25 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq28(a, b)].
  (((((((to_rep10(((a).us_split_fields9).rec__keystore__interfac__keytemplatet__attrmask) = to_rep10(((b).us_split_fields9).rec__keystore__interfac__keytemplatet__attrmask)) and
  (bool_eq13(((a).us_split_fields9).rec__keystore__interfac__keytemplatet__owner,
  ((b).us_split_fields9).rec__keystore__interfac__keytemplatet__owner) = true)) and
  (to_rep2(((a).us_split_fields9).rec__keystore__interfac__keytemplatet__keyid) = to_rep2(((b).us_split_fields9).rec__keystore__interfac__keytemplatet__keyid))) and
  (to_rep2(((a).us_split_fields9).rec__keystore__interfac__keytemplatet__keylength) = to_rep2(((b).us_split_fields9).rec__keystore__interfac__keytemplatet__keylength))) and
  (((a).us_split_fields9).rec__keystore__interfac__keytemplatet__ispublic = ((b).us_split_fields9).rec__keystore__interfac__keytemplatet__ispublic)) ->
  (bool_eq28(a, b) = true)) and
  ((not (((((to_rep10(((a).us_split_fields9).rec__keystore__interfac__keytemplatet__attrmask) = to_rep10(((b).us_split_fields9).rec__keystore__interfac__keytemplatet__attrmask)) and
  (bool_eq13(((a).us_split_fields9).rec__keystore__interfac__keytemplatet__owner,
  ((b).us_split_fields9).rec__keystore__interfac__keytemplatet__owner) = true)) and
  (to_rep2(((a).us_split_fields9).rec__keystore__interfac__keytemplatet__keyid) = to_rep2(((b).us_split_fields9).rec__keystore__interfac__keytemplatet__keyid))) and
  (to_rep2(((a).us_split_fields9).rec__keystore__interfac__keytemplatet__keylength) = to_rep2(((b).us_split_fields9).rec__keystore__interfac__keytemplatet__keylength))) and
  (((a).us_split_fields9).rec__keystore__interfac__keytemplatet__ispublic = ((b).us_split_fields9).rec__keystore__interfac__keytemplatet__ispublic))) ->
  (bool_eq28(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep5 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep5 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:maskt. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. forall a4:unsigned32t.
  forall a5:unsigned32t. forall a6:bool. (0 <= object__size9({
  us_split_fields9 = { rec__keystore__interfac__keytemplatet__attrmask = a;
  rec__keystore__interfac__keytemplatet__owner = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } };
  rec__keystore__interfac__keytemplatet__keyid = a4;
  rec__keystore__interfac__keytemplatet__keylength = a5;
  rec__keystore__interfac__keytemplatet__ispublic = a6 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:maskt. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. forall a4:unsigned32t.
  forall a5:unsigned32t. forall a6:bool. (0 <= object__alignment9({
  us_split_fields9 = { rec__keystore__interfac__keytemplatet__attrmask = a;
  rec__keystore__interfac__keytemplatet__owner = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } };
  rec__keystore__interfac__keytemplatet__keyid = a4;
  rec__keystore__interfac__keytemplatet__keylength = a5;
  rec__keystore__interfac__keytemplatet__ispublic = a6 } })))

logic keystore__interfac__keytemplatet__attrmask__first__bit : int

logic keystore__interfac__keytemplatet__attrmask__last__bit : int

logic keystore__interfac__keytemplatet__attrmask__position : int

axiom keystore__interfac__keytemplatet__attrmask__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__attrmask__first__bit)

axiom keystore__interfac__keytemplatet__attrmask__last__bit_axiom :
  (keystore__interfac__keytemplatet__attrmask__first__bit <  keystore__interfac__keytemplatet__attrmask__last__bit)

axiom keystore__interfac__keytemplatet__attrmask__position_axiom :
  (0 <= keystore__interfac__keytemplatet__attrmask__position)

logic keystore__interfac__keytemplatet__owner__first__bit : int

logic keystore__interfac__keytemplatet__owner__last__bit : int

logic keystore__interfac__keytemplatet__owner__position : int

axiom keystore__interfac__keytemplatet__owner__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__owner__first__bit)

axiom keystore__interfac__keytemplatet__owner__last__bit_axiom :
  (keystore__interfac__keytemplatet__owner__first__bit <  keystore__interfac__keytemplatet__owner__last__bit)

axiom keystore__interfac__keytemplatet__owner__position_axiom :
  (0 <= keystore__interfac__keytemplatet__owner__position)

logic keystore__interfac__keytemplatet__keyid__first__bit : int

logic keystore__interfac__keytemplatet__keyid__last__bit : int

logic keystore__interfac__keytemplatet__keyid__position : int

axiom keystore__interfac__keytemplatet__keyid__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__keyid__first__bit)

axiom keystore__interfac__keytemplatet__keyid__last__bit_axiom :
  (keystore__interfac__keytemplatet__keyid__first__bit <  keystore__interfac__keytemplatet__keyid__last__bit)

axiom keystore__interfac__keytemplatet__keyid__position_axiom :
  (0 <= keystore__interfac__keytemplatet__keyid__position)

logic keystore__interfac__keytemplatet__keylength__first__bit : int

logic keystore__interfac__keytemplatet__keylength__last__bit : int

logic keystore__interfac__keytemplatet__keylength__position : int

axiom keystore__interfac__keytemplatet__keylength__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__keylength__first__bit)

axiom keystore__interfac__keytemplatet__keylength__last__bit_axiom :
  (keystore__interfac__keytemplatet__keylength__first__bit <  keystore__interfac__keytemplatet__keylength__last__bit)

axiom keystore__interfac__keytemplatet__keylength__position_axiom :
  (0 <= keystore__interfac__keytemplatet__keylength__position)

logic keystore__interfac__keytemplatet__ispublic__first__bit : int

logic keystore__interfac__keytemplatet__ispublic__last__bit : int

logic keystore__interfac__keytemplatet__ispublic__position : int

axiom keystore__interfac__keytemplatet__ispublic__first__bit_axiom :
  (0 <= keystore__interfac__keytemplatet__ispublic__first__bit)

axiom keystore__interfac__keytemplatet__ispublic__last__bit_axiom :
  (keystore__interfac__keytemplatet__ispublic__first__bit <  keystore__interfac__keytemplatet__ispublic__last__bit)

axiom keystore__interfac__keytemplatet__ispublic__position_axiom :
  (0 <= keystore__interfac__keytemplatet__ispublic__position)

logic user_eq23 : us_rep5, us_rep5 -> bool

logic dummy38 : maskt

logic dummy39 : issueridt

logic dummy40 : namecountt

logic dummy41 : (int,character) farray

logic dummy42 : unsigned32t

logic dummy43 : unsigned32t

logic dummy44 : bool

type keytemplatet__ref = { keytemplatet__content : us_rep5
}

function keytemplatet__ref___projection(a: keytemplatet__ref) : us_rep5 =
  (a).keytemplatet__content

type returnvaluet

predicate in_range15(x: int) = ((0 <= x) and (x <= 28))

logic bool_eq29 : int, int -> bool

axiom bool_eq_def26 :
  (forall x:int. forall y:int [bool_eq29(x, y)]. (((x = y) -> (bool_eq29(x,
  y) = true)) and ((not (x = y)) -> (bool_eq29(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq24 : returnvaluet, returnvaluet -> bool

logic dummy45 : returnvaluet

type returnvaluet__ref = { returnvaluet__content : returnvaluet
}

function returnvaluet__ref___projection(a: returnvaluet__ref) : returnvaluet =
  (a).returnvaluet__content

type map__ref5 = { map__content5 : (int,bool) farray
}

logic slide5 : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq5 :
  (forall a:(int,bool) farray.
  (forall first2:int [slide5(a, first2, first2)]. (slide5(a, first2,
  first2) = a)))

axiom slide_def5 :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide5(a, old_first, new_first)[i])]. ((slide5(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat5 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def5 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat5(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat5(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat5(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton5 : bool, int -> (int,bool) farray

axiom singleton_def5 :
  (forall v:bool.
  (forall i:int [(singleton5(v, i)[i])]. ((singleton5(v, i)[i]) = v)))

logic bool_eq30 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def27 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq30(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_172:int. ((((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) and
  ((a[temp___idx_172]) = (b[((b__first - a__first) + temp___idx_172)]))) or
  (not ((a__first <= temp___idx_172) and (temp___idx_172 <= a__last)))))) ->
  (bool_eq30(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_172:int. (((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) ->
  ((a[temp___idx_172]) = (b[((b__first - a__first) + temp___idx_172)])))))) ->
  (bool_eq30(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev5 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq30(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_172:int. (((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) ->
  ((a[temp___idx_172]) = (b[((b__first - a__first) + temp___idx_172)]))))))))

logic compare4 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq4 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare4(a, a_first, a_last, b, b_first, b_last)].
  ((compare4(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq30(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt4 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare4(a, a_first, a_last, b, b_first, b_last)].
  ((compare4(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq30(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int1((a[(i + 1)])) <  to_int1((b[(j + 1)]))))))))))))

axiom compare_def_gt4 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare4(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare4(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq30(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int1((b[(i + 1)])) <  to_int1((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

logic issystem : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS10 : int

logic keystore__issystem__aggregate_def : bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> (int,bool) farray

axiom def_axiom3 :
  (forall temp___174:bool. forall temp___175:bool. forall temp___176:bool.
  forall temp___177:bool. forall temp___178:bool. forall temp___179:bool.
  forall temp___180:bool. forall temp___181:bool. forall temp___182:bool.
  forall temp___183:bool. forall temp___184:bool. forall temp___185:bool.
  forall temp___186:bool. forall temp___187:bool. forall temp___188:bool.
  forall temp___189:bool. forall temp___190:bool. forall temp___191:bool.
  forall temp___192:bool. forall temp___193:bool. forall temp___194:bool.
  forall temp___195:bool. forall temp___196:bool. forall temp___197:bool.
  forall temp___198:bool. forall temp___199:bool. forall temp___200:bool.
  forall temp___201:bool. forall temp___202:bool.
  ((((((((((((((((((((((((((((((keystore__issystem__aggregate_def(temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[0]) = temp___174) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[1]) = temp___175)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[2]) = temp___176)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[3]) = temp___177)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[4]) = temp___178)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[5]) = temp___179)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[6]) = temp___180)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[7]) = temp___181)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[8]) = temp___182)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[9]) = temp___183)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[10]) = temp___184)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[11]) = temp___185)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[12]) = temp___186)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[13]) = temp___187)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[14]) = temp___188)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[15]) = temp___189)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[16]) = temp___190)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[17]) = temp___191)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[18]) = temp___192)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[19]) = temp___193)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[20]) = temp___194)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[21]) = temp___195)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[22]) = temp___196)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[23]) = temp___197)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[24]) = temp___198)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[25]) = temp___199)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[26]) = temp___200)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[27]) = temp___201)) and
  ((keystore__issystem__aggregate_def(temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187, temp___188,
  temp___189, temp___190, temp___191, temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202)[28]) = temp___202)))

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic c108b : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic thestring : (int,character) farray

logic thestring1 : t1

logic attr__ATTRIBUTE_ADDRESS17 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq31 : int, int -> bool

axiom bool_eq_def28 :
  (forall x:int. forall y:int [bool_eq31(x, y)]. (((x = y) -> (bool_eq31(x,
  y) = true)) and ((not (x = y)) -> (bool_eq31(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq25 : integer, integer -> bool

logic dummy46 : integer

type t114b__ref = { t114b__content : integer
}

function t114b__ref___projection(a: t114b__ref) : integer =
  (a).t114b__content

type t2

logic first2 : t2 -> integer

logic last2 : t2 -> integer

logic mk1 : int, int -> t2

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t2
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size10 : int

logic object__size10 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment10 : int

logic object__alignment10 : (int,character) farray -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:(int,character) farray. (0 <= object__size10(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:(int,character) farray. (0 <= object__alignment10(a)))

function bool_eq32(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq26 : us_t1, us_t1 -> bool

logic dummy47 : (int,character) farray

logic dummy48 : t2

type t115b__ref = { t115b__content : us_t1
}

function t115b__ref___projection(a: t115b__ref) : us_t1 = (a).t115b__content

logic temp___String_Literal_1547 : unit -> (int,character) farray

axiom temp___String_Literal_1547__def_axiom :
  ((((((((((to_rep((temp___String_Literal_1547(void)[1])) = 73) and
  (to_rep((temp___String_Literal_1547(void)[2])) = 110)) and
  (to_rep((temp___String_Literal_1547(void)[3])) = 105)) and
  (to_rep((temp___String_Literal_1547(void)[4])) = 116)) and
  (to_rep((temp___String_Literal_1547(void)[5])) = 105)) and
  (to_rep((temp___String_Literal_1547(void)[6])) = 97)) and
  (to_rep((temp___String_Literal_1547(void)[7])) = 108)) and
  (to_rep((temp___String_Literal_1547(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_1547(void)[9])) = 122)) and
  (to_rep((temp___String_Literal_1547(void)[10])) = 101))

logic temp___String_Literal_1557 : unit -> (int,character) farray

axiom temp___String_Literal_1557__def_axiom :
  (((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1557(void)[1])) = 67) and
  (to_rep((temp___String_Literal_1557(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1557(void)[3])) = 121)) and
  (to_rep((temp___String_Literal_1557(void)[4])) = 112)) and
  (to_rep((temp___String_Literal_1557(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_1557(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_1557(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1557(void)[8])) = 76)) and
  (to_rep((temp___String_Literal_1557(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1557(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_1557(void)[11])) = 114)) and
  (to_rep((temp___String_Literal_1557(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_1557(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_1557(void)[14])) = 121)) and
  (to_rep((temp___String_Literal_1557(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_1557(void)[16])) = 69)) and
  (to_rep((temp___String_Literal_1557(void)[17])) = 114)) and
  (to_rep((temp___String_Literal_1557(void)[18])) = 114)) and
  (to_rep((temp___String_Literal_1557(void)[19])) = 111)) and
  (to_rep((temp___String_Literal_1557(void)[20])) = 114)) and
  (to_rep((temp___String_Literal_1557(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_1557(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_1557(void)[23])) = 110)) and
  (to_rep((temp___String_Literal_1557(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_1557(void)[25])) = 73)) and
  (to_rep((temp___String_Literal_1557(void)[26])) = 110)) and
  (to_rep((temp___String_Literal_1557(void)[27])) = 105)) and
  (to_rep((temp___String_Literal_1557(void)[28])) = 116)) and
  (to_rep((temp___String_Literal_1557(void)[29])) = 105)) and
  (to_rep((temp___String_Literal_1557(void)[30])) = 97)) and
  (to_rep((temp___String_Literal_1557(void)[31])) = 108)) and
  (to_rep((temp___String_Literal_1557(void)[32])) = 105)) and
  (to_rep((temp___String_Literal_1557(void)[33])) = 122)) and
  (to_rep((temp___String_Literal_1557(void)[34])) = 101)) and
  (to_rep((temp___String_Literal_1557(void)[35])) = 32)) and
  (to_rep((temp___String_Literal_1557(void)[36])) = 58)) and
  (to_rep((temp___String_Literal_1557(void)[37])) = 32))

axiom issystem__def_axiom :
  (issystem = keystore__issystem__aggregate_def(of_int1(0), of_int1(1),
  of_int1(1), of_int1(1), of_int1(0), of_int1(0), of_int1(0), of_int1(0),
  of_int1(0), of_int1(0), of_int1(1), of_int1(1), of_int1(1), of_int1(0),
  of_int1(0), of_int1(0), of_int1(0), of_int1(0), of_int1(0), of_int1(0),
  of_int1(1), of_int1(1), of_int1(0), of_int1(0), of_int1(0), of_int1(0),
  of_int1(1), of_int1(1), of_int1(1)))

logic cryptotypes__blankname__aggregate_def : int -> (int,character) farray

axiom def_axiom4 :
  (forall temp___140:int.
  (forall temp___141:int.
  ((cryptotypes__blankname__aggregate_def(temp___140)[temp___141]) = of_rep(temp___140))))

axiom blankname__def_axiom :
  (blankname = cryptotypes__blankname__aggregate_def(32))

axiom nullissuer__def_axiom : ((nullissuer = of_rep4(0)) and
  ((nullissuer1 = of_rep3(0)) and (nullissuer2 = blankname)))

axiom nodescription__def_axiom :
  (nodescription = audittypes__nodescription__aggregate_def(32))

axiom nouser__def_axiom : (nouser = temp___String_Literal_136(void))

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields3 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields3 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep7(usedlogfiles3)) and
  (numberlogentries = (((to_rep7(usedlogfiles3) - 1) * 1024) + to_rep8((logfileentries[currentlogfile])))))))))

logic logfilestate__split_fields : logfileindext

logic logfilestate__split_fields1 : logentrycountt

logic logfilestate__split_fields2 : (int,logfileindext) farray

logic logfilestate__split_fields3 : logfileindext

logic logfilestate__split_fields4 : logfileindext

logic logfilestate__split_fields5 : logfilecountt

logic logfilestate__split_fields6 : (int,fileentrycountt) farray

logic auditalarm : int

logic retval : int

logic theprivatekeyh : int

logic theprivatekey__split_fields : maskt

logic theprivatekey__split_fields1 : issueridt

logic theprivatekey__split_fields2 : namecountt

logic theprivatekey__split_fields3 : (int,character) farray

logic theprivatekey__split_fields4 : unsigned32t

logic theprivatekey__split_fields5 : unsigned32t

logic theprivatekey__split_fields6 : bool

logic c110b : (int,character) farray

logic result__ : (int,character) farray

logic o : namecountt

logic o1 : issueridt

logic o2 : issueridt

logic o3 : namecountt

logic o4 : (int,character) farray

logic temp___1578 : issueridt

logic temp___15781 : namecountt

logic temp___15782 : (int,character) farray

logic o5 : unsigned32t

logic o6 : unsigned32t

logic o7 : maskt

logic o8 : maskt

logic o9 : issueridt

logic o10 : namecountt

logic o11 : (int,character) farray

logic o12 : unsigned32t

logic o13 : unsigned32t

logic o14 : bool

logic keystore__init__theprivatekey__assume : maskt

logic keystore__init__theprivatekey__assume1 : issueridt

logic keystore__init__theprivatekey__assume2 : namecountt

logic keystore__init__theprivatekey__assume3 : (int,character) farray

logic keystore__init__theprivatekey__assume4 : unsigned32t

logic keystore__init__theprivatekey__assume5 : unsigned32t

logic keystore__init__theprivatekey__assume6 : bool

logic o15 : int

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic keystore__init__B112b__thestring__assume : (int,character) farray

logic keystore__init__B112b__thestring__assume1 : t1

logic o21 : int

logic temp___1551 : (int,character) farray

logic temp___15511 : t2

logic temp___1553 : int

logic o22 : (int,character) farray

logic temp___1554 : (int,character) farray

logic temp___15541 : t2

logic temp___1555 : (int,character) farray

logic temp___15551 : t2

logic o23 : (int,character) farray

logic temp___1550 : (int,character) farray

logic temp___15501 : t1

logic o24 : (int,character) farray

logic result : maskt

logic result1 : issueridt

logic result2 : namecountt

logic result3 : (int,character) farray

logic result4 : unsigned32t

logic result5 : unsigned32t

logic result6 : bool

logic theprivatekey__split_fields7 : maskt

logic theprivatekey__split_fields8 : issueridt

logic theprivatekey__split_fields9 : namecountt

logic theprivatekey__split_fields10 : (int,character) farray

logic theprivatekey__split_fields11 : unsigned32t

logic theprivatekey__split_fields12 : unsigned32t

logic theprivatekey__split_fields13 : bool

logic retval1 : int

logic result7 : (int,character) farray

logic result__1 : (int,character) farray

logic result8 : bool

logic result9 : (int,character) farray

logic result__2 : (int,character) farray

logic result10 : (int,character) farray

logic result__3 : (int,character) farray

logic result11 : (int,character) farray

logic c110b1 : (int,character) farray

axiom H : (keystore__issystem__aggregate_def(of_int1(0), of_int1(1),
  of_int1(1), of_int1(1), of_int1(0), of_int1(0), of_int1(0), of_int1(0),
  of_int1(0), of_int1(0), of_int1(1), of_int1(1), of_int1(1), of_int1(0),
  of_int1(0), of_int1(0), of_int1(0), of_int1(0), of_int1(0), of_int1(0),
  of_int1(1), of_int1(1), of_int1(0), of_int1(0), of_int1(0), of_int1(0),
  of_int1(1), of_int1(1), of_int1(1)) = issystem)

axiom H1 : (to_rep3(o) = 0)

axiom H2 : (to_rep4(o1) = 0)

axiom H3 : (o1 = o2)

axiom H4 : (o = o3)

axiom H5 : (blankname = o4)

axiom H6 : (temp___1578 = o2)

axiom H7 : (temp___15781 = o3)

axiom H8 : (temp___15782 = o4)

axiom H9 : ((temp___1578 = nullissuer) and ((temp___15781 = nullissuer1) and
  (temp___15782 = nullissuer2)))

axiom H10 : (audittypes__nodescription__aggregate_def(32) = nodescription)

axiom H11 : (temp___String_Literal_136(void) = nouser)

axiom H12 : (valid_numberlogentries(to_rep5(logfilestate__split_fields),
  to_rep6(logfilestate__split_fields1), { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields2;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields3;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields4;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields5 } },
  logfilestate__split_fields6) = true)

axiom H13 : in_range4(auditalarm)

axiom H14 : ((0 <= 28) -> in_range15(retval))

axiom H15 : ((0 <= 4294967295) -> in_range5(theprivatekeyh))

axiom H16 : (to_rep2(o5) = 0)

axiom H17 : (to_rep2(o6) = 0)

axiom H18 : (to_rep10(o7) = of_int(1))

axiom H19 : ((o8 = o7) and (((o9 = nullissuer) and ((o10 = nullissuer1) and
  (o11 = nullissuer2))) and ((o12 = o6) and ((o13 = o5) and
  (o14 = of_int1(0))))))

axiom H20 : ((keystore__init__theprivatekey__assume = o8) and
  (((keystore__init__theprivatekey__assume1 = o9) and
  ((keystore__init__theprivatekey__assume2 = o10) and
  (keystore__init__theprivatekey__assume3 = o11))) and
  ((keystore__init__theprivatekey__assume4 = o12) and
  ((keystore__init__theprivatekey__assume5 = o13) and
  (keystore__init__theprivatekey__assume6 = o14)))))

axiom H21 : ((result = theprivatekey__split_fields) and
  (((result1 = theprivatekey__split_fields1) and
  ((result2 = theprivatekey__split_fields2) and
  (result3 = theprivatekey__split_fields3))) and
  ((result4 = theprivatekey__split_fields4) and
  ((result5 = theprivatekey__split_fields5) and
  (result6 = theprivatekey__split_fields6)))))

axiom H22 :
  ((theprivatekey__split_fields7 = keystore__init__theprivatekey__assume) and
  (((theprivatekey__split_fields8 = keystore__init__theprivatekey__assume1) and
  ((theprivatekey__split_fields9 = keystore__init__theprivatekey__assume2) and
  (theprivatekey__split_fields10 = keystore__init__theprivatekey__assume3))) and
  ((theprivatekey__split_fields11 = keystore__init__theprivatekey__assume4) and
  ((theprivatekey__split_fields12 = keystore__init__theprivatekey__assume5) and
  (theprivatekey__split_fields13 = keystore__init__theprivatekey__assume6)))))

axiom H23 : in_range15(retval1)

axiom H24 : ((issystem[retval1]) = true)

axiom H25 : (retval1 = c108b)

axiom H26 : in_range15(c108b)

axiom H27 : (result7 = result__)

axiom H28 : (result__1 = nodescription)

axiom H29 :
  ((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE15(c108b))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE15(c108b))).rt))) ->
  (o15 = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE15(c108b))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE15(c108b))).rt))) + 1)))

axiom H30 :
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE15(c108b))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE15(c108b))).rt)))) ->
  (o15 = 0))

axiom H31 : ((1 <= 37) -> (o16 = ((37 - 1) + 1)))

axiom H32 : ((not (1 <= 37)) -> (o16 = 0))

axiom H33 : (o17 = (o16 + o15))

axiom H34 : (o18 = (1 + o17))

axiom H35 : (o19 = (o18 - 1))

 (* File "keystore.adb", line 42, characters 0-0 *)
goal WP_parameter_def : in_range2(o19)
