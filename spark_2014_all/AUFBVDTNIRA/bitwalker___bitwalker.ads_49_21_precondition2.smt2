(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFBVDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun nth1 ((_ BitVec 8) Int) Bool)
(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right2 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left2 ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun to_int2 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv1 x ((_ int2bv 8) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 8))))))
(declare-fun power1 ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min1 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort unsigned_8 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (unsigned_8 unsigned_8) Bool)
(declare-const dummy2 unsigned_8)
(declare-datatypes () ((unsigned_8__ref (mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8 (unsigned_8__content a))
(declare-sort my_index 0)
(declare-fun my_indexqtint (my_index) Int)
(assert (forall ((i my_index)) (and (<= 0 (my_indexqtint i)) (<= (my_indexqtint i) 2147483646))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (my_index my_index) Bool)
(declare-const dummy3 my_index)
(declare-datatypes () ((my_index__ref (mk_my_index__ref (my_index__content my_index)))))
(define-fun my_index__ref___projection ((a my_index__ref)) my_index (my_index__content a))
(declare-fun to_rep1 (unsigned_8) (_ BitVec 8))
(declare-fun of_rep1 ((_ BitVec 8)) unsigned_8)
(assert (forall ((x unsigned_8)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x unsigned_8)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x unsigned_8)) (! (uint_in_range1 (to_int3 x)) :pattern ((to_int3 x)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int unsigned_8))))))
(declare-fun slide ((Array Int unsigned_8) Int Int) (Array Int unsigned_8))
(assert (forall ((a (Array Int unsigned_8))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int unsigned_8))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int unsigned_8)) (a__first Int) (a__last Int) (b (Array Int unsigned_8)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int unsigned_8)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int unsigned_8) (elts a))
(define-fun of_array ((a (Array Int unsigned_8)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int unsigned_8)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int unsigned_8)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int unsigned_8)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int unsigned_8))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int unsigned_8))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int unsigned_8))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((byte_sequence__ref (mk_byte_sequence__ref (byte_sequence__content us_t)))))
(define-fun byte_sequence__ref___projection ((a byte_sequence__ref)) us_t (byte_sequence__content a))
(declare-fun nth8_stream (us_t Int) Bool)
(declare-fun nth8_stream__function_guard (Bool us_t Int) Bool)
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun dynamic_invariant1 ((temp___expr_243 us_t) (temp___is_init_239 Bool) (temp___skip_constant_240 Bool) (temp___do_toplevel_241 Bool) (temp___do_typ_inv_242 Bool)) Bool (=> (not (= temp___skip_constant_240 true)) (dynamic_property 0 2147483646 (first1 temp___expr_243) (last1 temp___expr_243))))
(assert true)
(assert (forall ((stream us_t)) (forall ((pos Int)) (! (= (= (nth8_stream stream pos) true) (= (nth1 (to_rep1 (select (to_array stream) (div1 pos 8))) (- 7 (mod1 pos 8))) true)) :pattern ((nth8_stream stream pos))))))
(declare-fun peekbit8 ((_ BitVec 8) Int) Bool)
(declare-fun peekbit8__function_guard (Bool (_ BitVec 8) Int) Bool)
(declare-fun peekbit8array (us_t Int) Bool)
(declare-fun peekbit8array__function_guard (Bool us_t Int) Bool)
(assert (forall ((addr us_t)) (forall ((left Int)) (! (=> (and (and (dynamic_invariant1 addr true true true true) (dynamic_invariant left true true true true)) (and (= (first1 addr) 0) (< left (* 8 (length addr))))) (= (= (peekbit8array addr left) true) (= (nth8_stream addr left) true))) :pattern ((peekbit8array addr left))))))
(assert (forall ((addr us_t)) (forall ((left Int)) (! (= (= (peekbit8array addr left) true) (= (peekbit8 (to_rep1 (select (to_array addr) (div1 left 8))) (mod1 left 8)) true)) :pattern ((peekbit8array addr left))))))
(declare-fun pokebit64 ((_ BitVec 64) Int Bool) (_ BitVec 64))
(declare-fun pokebit64__function_guard ((_ BitVec 64) (_ BitVec 64) Int Bool) Bool)
(declare-sort unsigned_64 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))
(declare-fun user_eq5 (unsigned_64 unsigned_64) Bool)
(declare-const dummy5 unsigned_64)
(declare-datatypes () ((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64 (unsigned_64__content a))
(define-fun dynamic_invariant2 ((temp___expr_215 (_ BitVec 64)) (temp___is_init_211 Bool) (temp___skip_constant_212 Bool) (temp___do_toplevel_213 Bool) (temp___do_typ_inv_214 Bool)) Bool true)
(assert (forall ((value (_ BitVec 64))) (forall ((left Int)) (forall ((flag Bool)) (! (=> (and (and (dynamic_invariant2 value true true true true) (dynamic_invariant left true true true true)) (< left 64)) (let ((result (pokebit64 value left flag))) (and (and (forall ((i Int)) (=> (and (<= 0 i) (<= i 63)) (=> (not (= i (- 63 left))) (= (= (nth result i) true) (= (nth value i) true))))) (= (= flag true) (= (nth result (- 63 left)) true))) (dynamic_invariant2 result true false true true)))) :pattern ((pokebit64 value left flag)))))))
(declare-const start Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const length1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const addr us_t)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t9b__ref (mk_t9b__ref (t9b__content integer)))))
(define-fun t9b__ref___projection ((a t9b__ref)) integer (t9b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant4 ((temp___expr_187 (_ BitVec 8)) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool) (temp___do_typ_inv_186 Bool)) Bool true)
(assert (forall ((byte (_ BitVec 8))) (forall ((left Int)) (! (=> (and (and (dynamic_invariant4 byte true true true true) (dynamic_invariant left true true true true)) (< left 8)) (= (= (peekbit8 byte left) true) (= (nth1 byte (- 7 left)) true))) :pattern ((peekbit8 byte left))))))
(define-fun dynamic_invariant5 ((temp___expr_236 Int) (temp___is_init_232 Bool) (temp___skip_constant_233 Bool) (temp___do_toplevel_234 Bool) (temp___do_typ_inv_235 Bool)) Bool (=> (or (= temp___is_init_232 true) (<= 0 2147483646)) (in_range3 temp___expr_236)))
(declare-const retval (_ BitVec 64))
(declare-const flag Bool)
(declare-const i Int)
(declare-const bitwalker__peek__result (_ BitVec 64))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const temp___328 Int)
(declare-const temp___327 Bool)
(declare-const temp___326 (_ BitVec 64))
(declare-const o4 Int)
(declare-const o5 Bool)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 (_ BitVec 64))
(declare-const i1 Int)
(declare-const o9 Int)
(declare-const retval1 (_ BitVec 64))
(declare-const flag1 Bool)
(declare-const i2 Int)
(declare-const bitwalker__peek__result1 (_ BitVec 64))
(declare-const result Bool)
(declare-const result1 (_ BitVec 64))
(declare-const bitwalker__peek__result2 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(declare-const retval2 (_ BitVec 64))
(declare-const result3 Int)
(declare-const i3 Int)
(declare-const retval3 (_ BitVec 64))
(declare-const flag2 Bool)
(declare-const i4 Int)
(declare-const result4 Bool)
(declare-const flag3 Bool)
(declare-const result5 (_ BitVec 64))
(declare-const retval4 (_ BitVec 64))
(declare-const retval5 (_ BitVec 64))
(declare-const flag4 Bool)
(declare-const i5 Int)
(declare-const retval6 (_ BitVec 64))
(declare-const flag5 Bool)
(declare-const i6 Int)
(declare-const retval7 (_ BitVec 64))
(declare-const flag6 Bool)
(declare-const i7 Int)
(declare-const retval8 (_ BitVec 64))
(declare-const flag7 Bool)
(declare-const i8 Int)
(declare-const result6 (_ BitVec 64))
(declare-const bitwalker__peek__result3 (_ BitVec 64))
(declare-const retval9 (_ BitVec 64))
(declare-const flag8 bool__ref)
(declare-const i9 int__ref)
(declare-const bitwalker__peek__result4 t__ref)
(declare-const retval10 (_ BitVec 64))
(declare-const flag9 Bool)
(declare-const i10 Int)
(declare-const bitwalker__peek__result5 (_ BitVec 64))
(declare-const retval11 t__ref)
(declare-const flag10 bool__ref)
(declare-const i11 int__ref)
(declare-const bitwalker__peek__result6 t__ref)
(declare-const retval12 (_ BitVec 64))
(declare-const flag11 Bool)
(declare-const i12 Int)
(declare-const bitwalker__peek__result7 (_ BitVec 64))
(declare-const retval13 t__ref)
(declare-const flag12 bool__ref)
(declare-const i13 int__ref)
(declare-const bitwalker__peek__result8 t__ref)
(declare-const retval14 (_ BitVec 64))
(declare-const flag13 Bool)
(declare-const i14 Int)
(declare-const bitwalker__peek__result9 (_ BitVec 64))
(define-fun retval15 () t__ref (mk_t__ref retval9))
(define-fun i15 () int__ref (mk_int__ref i7))
(define-fun flag14 () bool__ref (mk_bool__ref flag6))
(define-fun retval16 () t__ref (mk_t__ref retval7))
(define-fun i16 () int__ref (mk_int__ref i))
(define-fun flag15 () bool__ref (mk_bool__ref flag))
(define-fun retval17 () t__ref (mk_t__ref retval))
(assert (in_range2 start))
(assert (in_range2 length1))
(assert (dynamic_invariant1 addr true false true true))
(assert (and (= (to_rep (first (rt addr))) 0) (and (<= length1 64) (and (<= (+ start length1) 2147483647) (<= (* 8 (length addr)) 2147483647)))))
(assert (or (and (and (and (= bitwalker__peek__result6 (mk_t__ref bitwalker__peek__result2)) (and (= i11 i16) (and (= flag10 flag15) (= retval11 retval17)))) (and (= bitwalker__peek__result7 bitwalker__peek__result2) (and (= i12 i2) (and (= flag11 flag1) (= retval12 retval1))))) (and (and (and (and (and (= o (length addr)) (in_range1 (length addr))) (= o1 (* 8 o))) (and (= o2 o1) (in_range1 o1))) (and (and (= o3 (+ start length1)) (in_range1 (+ start length1))) (= result (ite (< o2 o3) true false)))) (and (= result true) (and (= result1 bitwalker__peek__result) (= bitwalker__peek__result2 #x0000000000000000))))) (and (and (and (and (and (and (= o (length addr)) (in_range1 (length addr))) (= o1 (* 8 o))) (and (= o2 o1) (in_range1 o1))) (and (and (= o3 (+ start length1)) (in_range1 (+ start length1))) (= result (ite (< o2 o3) true false)))) (and (not (= result true)) (and (= bitwalker__peek__result2 bitwalker__peek__result) (= bitwalker__peek__result2 bitwalker__peek__result1)))) (and (and (and (= bitwalker__peek__result6 bitwalker__peek__result4) (and (= i11 i9) (and (= flag10 flag8) (= retval11 retval15)))) (and (= bitwalker__peek__result7 bitwalker__peek__result5) (and (= i12 i10) (and (= flag11 flag9) (= retval12 retval10))))) (and (and (and (= bitwalker__peek__result4 (mk_t__ref bitwalker__peek__result3)) (and (= i9 i15) (and (= flag8 flag14) (= retval15 retval16)))) (and (= bitwalker__peek__result5 bitwalker__peek__result3) (and (= i10 i8) (and (= flag9 flag7) (= retval10 retval8))))) (and (and (= (mk_t__ref result2) retval17) (= retval2 #x0000000000000000)) (and (and (and (= (mk_int__ref result3) i16) (= i3 0)) (ite (and (<= 0 i3) (<= i3 (- length1 1))) (and (and (and (= temp___328 i3) (and (= temp___327 flag) (and (= temp___326 retval2) (and (and (forall ((j Int)) (=> (and (<= (- length1 i4) j) (<= j (- length1 1))) (= (= (nth8_stream addr (- (- (+ start length1) j) 1)) true) (= (nth retval3 j) true)))) (forall ((j Int)) (=> (and (<= length1 j) (<= j 63)) (not (= (nth retval3 j) true))))) (and (and (=> (<= 0 (- length1 1)) (dynamic_property1 0 (- length1 1) i4)) (and (<= 0 i4) (<= i4 (- length1 1)))) (and (and (and (and (= o4 (+ start i4)) (in_range1 (+ start i4))) (and (= o5 (peekbit8array addr o4)) (and (= (= o5 true) (= (peekbit8 (to_rep1 (select (elts addr) (div1 o4 8))) (mod1 o4 8)) true)) (= (= o5 true) (= (nth8_stream addr o4) true))))) (and (= flag2 result4) (= flag3 o5))) (and (and (and (and (and (= o6 (+ (- 64 length1) i4)) (in_range1 (+ (- 64 length1) i4))) (and (= o7 o6) (in_range2 o6))) (and (= o8 (pokebit64 retval3 o7 flag3)) (and (forall ((i17 Int)) (=> (and (<= 0 i17) (<= i17 63)) (=> (not (= i17 (- 63 o7))) (= (= (nth o8 i17) true) (= (nth retval3 i17) true))))) (= (= flag3 true) (= (nth o8 (- 63 o7)) true))))) (and (= retval3 result5) (= retval4 o8))) (= i4 (- length1 1))))))))) (and (and (= i4 i5) (and (= flag3 flag4) (= retval4 retval5))) (and (= i6 i4) (and (= flag5 flag3) (= retval6 retval4))))) (and (and (= i15 (mk_int__ref i5)) (and (= flag14 (mk_bool__ref flag4)) (= retval16 (mk_t__ref retval5)))) (and (= i8 i6) (and (= flag7 flag5) (= retval8 retval6))))) (and (and (= i3 i7) (and (= flag14 flag15) (= retval2 retval7))) (and (= i8 i3) (and (= flag7 flag1) (= retval8 retval2)))))) (and (= result6 bitwalker__peek__result2) (= bitwalker__peek__result3 retval7)))))))))
(assert (= bitwalker__peek__result8 bitwalker__peek__result6))
(assert (= i13 i11))
(assert (= flag12 flag10))
(assert (= retval13 retval11))
(assert (= bitwalker__peek__result9 bitwalker__peek__result7))
(assert (= i14 i12))
(assert (= flag13 flag11))
(assert (= retval14 retval12))
(assert (=> (= (> (+ start length1) (* 8 (length addr))) true) (= (t__content bitwalker__peek__result8) #x0000000000000000)))
(assert (= (<= (+ start length1) (* 8 (length addr))) true))
(assert (<= 0 i1))
(assert (<= i1 (- length1 1)))
(assert (and (= o9 (- (- (+ start length1) i1) 1)) (in_range2 (- (- (+ start length1) i1) 1))))
(assert (not (= (to_rep (first (rt addr))) 0)))
(check-sat)
(exit)
