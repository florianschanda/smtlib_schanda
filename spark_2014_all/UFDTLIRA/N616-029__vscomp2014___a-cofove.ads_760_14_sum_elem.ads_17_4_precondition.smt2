(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_type index_type) Bool)
(declare-const dummy index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_244 Int) (temp___is_init_240 Bool) (temp___skip_constant_241 Bool) (temp___do_toplevel_242 Bool) (temp___do_typ_inv_243 Bool)) Bool (=> (or (= temp___is_init_240 true) (<= 0 10000)) (in_range1 temp___expr_244)))
(declare-sort capacity_range 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (capacity_range capacity_range) Bool)
(declare-const dummy1 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__sum_elem__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range (rec__sum_elem__partitions__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__sum_elem__partitions__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type (rec__sum_elem__partitions__vector a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const sum_elem__partitions__vector__capacity__first__bit Int)
(declare-const sum_elem__partitions__vector__capacity__last__bit Int)
(declare-const sum_elem__partitions__vector__capacity__position Int)
(assert (<= 0 sum_elem__partitions__vector__capacity__first__bit))
(assert (< sum_elem__partitions__vector__capacity__first__bit sum_elem__partitions__vector__capacity__last__bit))
(assert (<= 0 sum_elem__partitions__vector__capacity__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content a))
(declare-sort extended_index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (extended_index extended_index) Bool)
(declare-const dummy3 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-sort index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (index index) Bool)
(declare-const dummy5 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-fun to_rep (index) Int)
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__sum_elem__interval__first index) (rec__sum_elem__interval__last index)))))
(define-fun us_split_fields_First__projection ((a us_split_fields2)) index (rec__sum_elem__interval__first a))
(define-fun us_split_fields_Last__projection ((a us_split_fields2)) index (rec__sum_elem__interval__last a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep (rec__sum_elem__interval__first (us_split_fields3 a))) (to_rep (rec__sum_elem__interval__first (us_split_fields3 b)))) (= (to_rep (rec__sum_elem__interval__last (us_split_fields3 a))) (to_rep (rec__sum_elem__interval__last (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const sum_elem__interval__first__first__bit Int)
(declare-const sum_elem__interval__first__last__bit Int)
(declare-const sum_elem__interval__first__position Int)
(assert (<= 0 sum_elem__interval__first__first__bit))
(assert (< sum_elem__interval__first__first__bit sum_elem__interval__first__last__bit))
(assert (<= 0 sum_elem__interval__first__position))
(declare-const sum_elem__interval__last__first__bit Int)
(declare-const sum_elem__interval__last__last__bit Int)
(declare-const sum_elem__interval__last__position Int)
(assert (<= 0 sum_elem__interval__last__first__bit))
(assert (< sum_elem__interval__last__first__bit sum_elem__interval__last__last__bit))
(assert (<= 0 sum_elem__interval__last__position))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((interval__ref (mk_interval__ref (interval__content us_rep2)))))
(define-fun interval__ref___projection ((a interval__ref)) us_rep2 (interval__content a))
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content us_rep2)))))
(define-fun element_type__ref___2__projection ((a element_type__ref)) us_rep2 (element_type__content a))
(declare-fun get (us_rep1 Int) us_rep2)
(declare-fun get__function_guard (us_rep2 us_rep1 Int) Bool)
(define-fun contains ((container us_rep1) (fst Int) (lst Int) (item us_rep2)) Bool (ite (exists ((i Int)) (and (and (<= fst i) (<= i lst)) (= (bool_eq1 (get container i) item) true))) true false))
(declare-fun contains__function_guard (Bool us_rep1 Int Int us_rep2) Bool)
(declare-fun length (us_rep1) Int)
(declare-fun length__function_guard (Int us_rep1) Bool)
(define-fun last ((container us_rep1)) Int (+ (- 1) (length container)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(declare-fun model__ (us_rep) us_rep1)
(declare-fun model____function_guard (us_rep1 us_rep) Bool)
(declare-fun length1 (us_rep) Int)
(declare-fun length__function_guard1 (Int us_rep) Bool)
(define-fun oeq ((left us_rep1) (right us_rep1)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 0 n) (<= n (last left))) (= (bool_eq1 (get left n) (get right n)) true))) true false)))
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)))))
(define-fun default_initial_assumption ((temp___expr_308 us_rep1) (temp___skip_top_level_309 Bool)) Bool (=> (not (= temp___skip_top_level_309 true)) (= (length temp___expr_308) 0)))
(assert (forall ((container us_rep)) (! (= (length (model__ container)) (length1 container)) :pattern ((model__ container)))))
(define-fun last_index ((container us_rep)) Int (last (model__ container)))
(declare-fun last_index__function_guard (Int us_rep) Bool)
(declare-sort extended_index1 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 1) x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (extended_index1 extended_index1) Bool)
(declare-const dummy7 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant1 ((temp___expr_260 Int) (temp___is_init_256 Bool) (temp___skip_constant_257 Bool) (temp___do_toplevel_258 Bool) (temp___do_typ_inv_259 Bool)) Bool (=> (or (= temp___is_init_256 true) (<= (- 1) 10001)) (in_range5 temp___expr_260)))
(declare-const container us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep2)))))
(define-fun element_type__ref___projection ((a element_type__ref1)) us_rep2 (element_type__content1 a))
(declare-const item us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const index1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_221 Int) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool) (temp___do_typ_inv_220 Bool)) Bool (=> (or (= temp___is_init_217 true) (<= 0 5)) (in_range4 temp___expr_221)))
(declare-sort count_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (count_type count_type) Bool)
(declare-const dummy8 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 2147483647)) (in_range6 temp___expr_165)))
(define-fun dynamic_invariant4 ((temp___expr_267 Int) (temp___is_init_263 Bool) (temp___skip_constant_264 Bool) (temp___do_toplevel_265 Bool) (temp___do_typ_inv_266 Bool)) Bool (=> (or (= temp___is_init_263 true) (<= 0 10001)) (in_range2 temp___expr_267)))
(declare-fun to_rep1 (capacity_range) Int)
(declare-fun of_rep1 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x capacity_range)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun capacity ((container1 us_rep)) Int (ite (= (distinct 1 0) true) (to_rep1 (rec__sum_elem__partitions__vector__capacity (us_split_discrs1 container1))) 10001))
(declare-fun capacity__function_guard (Int us_rep) Bool)
(assert (forall ((container1 us_rep)) (! (let ((result (length1 container1))) (and (<= result (capacity container1)) (dynamic_invariant4 result true false true true))) :pattern ((length1 container1)))))
(define-fun dynamic_invariant5 ((temp___expr_300 Int) (temp___is_init_296 Bool) (temp___skip_constant_297 Bool) (temp___do_toplevel_298 Bool) (temp___do_typ_inv_299 Bool)) Bool (=> (or (= temp___is_init_296 true) (<= (- 1) 10000)) (in_range3 temp___expr_300)))
(assert (forall ((container1 us_rep1)) (! (let ((result (length container1))) (and (<= (+ (- 1) result) 10000) (dynamic_invariant3 result true false true true))) :pattern ((length container1)))))
(assert true)
(declare-const o us_rep1)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result Bool)
(assert (in_range1 index1))
(assert (and (= o1 (last (model__ container))) (and (in_range5 o1) (= o1 (last (model__ container))))))
(assert (= result (ite (<= index1 o1) true false)))
(assert (=> (= result true) (= o3 index1)))
(assert (=> (not (= result true)) (and (= o2 (last (model__ container))) (and (in_range5 o2) (= o2 (last (model__ container)))))))
(assert (=> (not (= result true)) (and (= o3 o2) (in_range3 o2))))
(assert (and (= o (model__ container)) (= (length o) (length1 container))))
(assert (not (<= o3 (last o))))
(check-sat)
(exit)
