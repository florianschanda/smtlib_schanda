(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort name_id 0)
(declare-fun name_idqtint (name_id) Int)
(assert (forall ((i name_id)) (and (<= 0 (name_idqtint i)) (<= (name_idqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (name_id name_id) Bool)
(declare-const dummy1 name_id)
(declare-datatypes () ((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content a))
(declare-sort token_kind 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (token_kind token_kind) Bool)
(declare-const dummy2 token_kind)
(declare-datatypes () ((token_kind__ref (mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind (token_kind__content a))
(define-fun dynamic_invariant1 ((temp___expr_729 Int) (temp___is_init_725 Bool) (temp___skip_constant_726 Bool) (temp___do_toplevel_727 Bool) (temp___do_typ_inv_728 Bool)) Bool (=> (or (= temp___is_init_725 true) (<= 0 8)) (in_range3 temp___expr_729)))
(declare-fun to_rep1 (token_kind) Int)
(declare-fun of_rep1 (Int) token_kind)
(assert (forall ((x token_kind)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x token_kind)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_rep2 ((x name_id)) Int (name_idqtint x))
(declare-fun of_rep2 (Int) name_id)
(assert (forall ((x name_id)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x name_id)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs)) token_kind (rec__lexer__token__kind a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__lexer__token__line natural) (rec__lexer__token__col natural) (rec__lexer__token__length natural) (rec__lexer__token__value name_id)))))
(define-fun us_split_fields_Line__projection ((a us_split_fields)) natural (rec__lexer__token__line a))
(define-fun us_split_fields_Col__projection ((a us_split_fields)) natural (rec__lexer__token__col a))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) natural (rec__lexer__token__length a))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) name_id (rec__lexer__token__value a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___8__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___9__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___10__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun lexer__token__value__pred ((a us_rep)) Bool (and (<= 3 (to_rep1 (rec__lexer__token__kind (us_split_discrs1 a)))) (<= (to_rep1 (rec__lexer__token__kind (us_split_discrs1 a))) 8)))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__lexer__token__kind (us_split_discrs1 a))) (to_rep1 (rec__lexer__token__kind (us_split_discrs1 b)))) (and (and (and (= (to_rep (rec__lexer__token__line (us_split_fields1 a))) (to_rep (rec__lexer__token__line (us_split_fields1 b)))) (= (to_rep (rec__lexer__token__col (us_split_fields1 a))) (to_rep (rec__lexer__token__col (us_split_fields1 b))))) (= (to_rep (rec__lexer__token__length (us_split_fields1 a))) (to_rep (rec__lexer__token__length (us_split_fields1 b))))) (=> (lexer__token__value__pred a) (= (to_rep2 (rec__lexer__token__value (us_split_fields1 a))) (to_rep2 (rec__lexer__token__value (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const lexer__token__kind__first__bit Int)
(declare-const lexer__token__kind__last__bit Int)
(declare-const lexer__token__kind__position Int)
(assert (<= 0 lexer__token__kind__first__bit))
(assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))
(assert (<= 0 lexer__token__kind__position))
(declare-const lexer__token__line__first__bit Int)
(declare-const lexer__token__line__last__bit Int)
(declare-const lexer__token__line__position Int)
(assert (<= 0 lexer__token__line__first__bit))
(assert (< lexer__token__line__first__bit lexer__token__line__last__bit))
(assert (<= 0 lexer__token__line__position))
(declare-const lexer__token__col__first__bit Int)
(declare-const lexer__token__col__last__bit Int)
(declare-const lexer__token__col__position Int)
(assert (<= 0 lexer__token__col__first__bit))
(assert (< lexer__token__col__first__bit lexer__token__col__last__bit))
(assert (<= 0 lexer__token__col__position))
(declare-const lexer__token__length__first__bit Int)
(declare-const lexer__token__length__last__bit Int)
(declare-const lexer__token__length__position Int)
(assert (<= 0 lexer__token__length__first__bit))
(assert (< lexer__token__length__first__bit lexer__token__length__last__bit))
(assert (<= 0 lexer__token__length__position))
(declare-const lexer__token__value__first__bit Int)
(declare-const lexer__token__value__last__bit Int)
(declare-const lexer__token__value__position Int)
(assert (<= 0 lexer__token__value__first__bit))
(assert (< lexer__token__value__first__bit lexer__token__value__last__bit))
(assert (<= 0 lexer__token__value__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((token__ref (mk_token__ref (token__content us_rep)))))
(define-fun token__ref___projection ((a token__ref)) us_rep (token__content a))
(define-fun default_initial_assumption ((temp___expr_745 us_rep) (temp___skip_top_level_746 Bool)) Bool (and (= (attr__constrained temp___expr_745) false) (= (to_rep1 (rec__lexer__token__kind (us_split_discrs1 temp___expr_745))) 0)))
(declare-const t__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const kind Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const r19b Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun in_range4 ((rec__lexer__token__kind1 Int) (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep1 (rec__lexer__token__kind (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const lexer__token__kind__first__bit1 Int)
(declare-const lexer__token__kind__last__bit1 Int)
(declare-const lexer__token__kind__position1 Int)
(assert (<= 0 lexer__token__kind__first__bit1))
(assert (< lexer__token__kind__first__bit1 lexer__token__kind__last__bit1))
(assert (<= 0 lexer__token__kind__position1))
(declare-const lexer__token__value__first__bit1 Int)
(declare-const lexer__token__value__last__bit1 Int)
(declare-const lexer__token__value__position1 Int)
(assert (<= 0 lexer__token__value__first__bit1))
(assert (< lexer__token__value__first__bit1 lexer__token__value__last__bit1))
(assert (<= 0 lexer__token__value__position1))
(declare-const lexer__token__line__first__bit1 Int)
(declare-const lexer__token__line__last__bit1 Int)
(declare-const lexer__token__line__position1 Int)
(assert (<= 0 lexer__token__line__first__bit1))
(assert (< lexer__token__line__first__bit1 lexer__token__line__last__bit1))
(assert (<= 0 lexer__token__line__position1))
(declare-const lexer__token__col__first__bit1 Int)
(declare-const lexer__token__col__last__bit1 Int)
(declare-const lexer__token__col__position1 Int)
(assert (<= 0 lexer__token__col__first__bit1))
(assert (< lexer__token__col__first__bit1 lexer__token__col__last__bit1))
(assert (<= 0 lexer__token__col__position1))
(declare-const lexer__token__length__first__bit1 Int)
(declare-const lexer__token__length__last__bit1 Int)
(declare-const lexer__token__length__position1 Int)
(assert (<= 0 lexer__token__length__first__bit1))
(assert (< lexer__token__length__first__bit1 lexer__token__length__last__bit1))
(assert (<= 0 lexer__token__length__position1))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((t20b__ref (mk_t20b__ref (t20b__content us_rep)))))
(define-fun t20b__ref___projection ((a t20b__ref)) us_rep (t20b__content a))
(declare-const r22b Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun in_range5 ((rec__lexer__token__kind1 Int) (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep1 (rec__lexer__token__kind (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const lexer__token__kind__first__bit2 Int)
(declare-const lexer__token__kind__last__bit2 Int)
(declare-const lexer__token__kind__position2 Int)
(assert (<= 0 lexer__token__kind__first__bit2))
(assert (< lexer__token__kind__first__bit2 lexer__token__kind__last__bit2))
(assert (<= 0 lexer__token__kind__position2))
(declare-const lexer__token__value__first__bit2 Int)
(declare-const lexer__token__value__last__bit2 Int)
(declare-const lexer__token__value__position2 Int)
(assert (<= 0 lexer__token__value__first__bit2))
(assert (< lexer__token__value__first__bit2 lexer__token__value__last__bit2))
(assert (<= 0 lexer__token__value__position2))
(declare-const lexer__token__line__first__bit2 Int)
(declare-const lexer__token__line__last__bit2 Int)
(declare-const lexer__token__line__position2 Int)
(assert (<= 0 lexer__token__line__first__bit2))
(assert (< lexer__token__line__first__bit2 lexer__token__line__last__bit2))
(assert (<= 0 lexer__token__line__position2))
(declare-const lexer__token__col__first__bit2 Int)
(declare-const lexer__token__col__last__bit2 Int)
(declare-const lexer__token__col__position2 Int)
(assert (<= 0 lexer__token__col__first__bit2))
(assert (< lexer__token__col__first__bit2 lexer__token__col__last__bit2))
(assert (<= 0 lexer__token__col__position2))
(declare-const lexer__token__length__first__bit2 Int)
(declare-const lexer__token__length__last__bit2 Int)
(declare-const lexer__token__length__position2 Int)
(assert (<= 0 lexer__token__length__first__bit2))
(assert (< lexer__token__length__first__bit2 lexer__token__length__last__bit2))
(assert (<= 0 lexer__token__length__position2))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((t23b__ref (mk_t23b__ref (t23b__content us_rep)))))
(define-fun t23b__ref___projection ((a t23b__ref)) us_rep (t23b__content a))
(define-fun dynamic_invariant2 ((temp___expr_719 Int) (temp___is_init_715 Bool) (temp___skip_constant_716 Bool) (temp___do_toplevel_717 Bool) (temp___do_typ_inv_718 Bool)) Bool (=> (or (= temp___is_init_715 true) (<= 0 2147483647)) (in_range2 temp___expr_719)))
(declare-const first_line Int)
(declare-const first_col Int)
(assert (in_range1 first_line))
(assert (in_range1 first_col))
(assert (in_range3 kind))
(assert (and (not (= t__attr__constrained true)) (or (= kind 1) (= kind 2))))
(assert (not (= kind 1)))
(assert (not (= kind 2)))
(check-sat)
(exit)
