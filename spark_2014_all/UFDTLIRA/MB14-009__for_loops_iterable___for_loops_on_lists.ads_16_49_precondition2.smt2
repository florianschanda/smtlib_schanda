(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (element_type element_type) Bool)
(declare-const dummy1 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___2__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant ((temp___expr_250 Int) (temp___is_init_246 Bool) (temp___skip_constant_247 Bool) (temp___do_toplevel_248 Bool) (temp___do_typ_inv_249 Bool)) Bool (=> (or (= temp___is_init_246 true) (<= 0 2147483647)) (in_range1 temp___expr_250)))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (extended_index extended_index) Bool)
(declare-const dummy2 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant1 ((temp___expr_257 Int) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool (=> (or (= temp___is_init_253 true) (<= 0 2147483647)) (in_range2 temp___expr_257)))
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq a b) (oeq a b)) :pattern ((user_eq a b)))))
(define-fun default_initial_assumption ((temp___expr_265 us_rep) (temp___skip_top_level_266 Bool)) Bool (=> (not (= temp___skip_top_level_266 true)) (= (length temp___expr_265) 0)))
(assert (forall ((container us_rep)) (forall ((position Int)) (! (=> (and (dynamic_invariant1 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant (get container position) true false true true)) :pattern ((get container position))))))
(define-fun iter_has_element ((container us_rep) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep Int) Bool)
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (count_type count_type) Bool)
(declare-const dummy3 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__for_loops_on_lists__my_lists__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__for_loops_on_lists__my_lists__list__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__for_loops_on_lists__my_lists__list us_main_type1)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type1 (rec__for_loops_on_lists__my_lists__list a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__for_loops_on_lists__my_lists__list__capacity (us_split_discrs1 a))) (to_rep (rec__for_loops_on_lists__my_lists__list__capacity (us_split_discrs1 b)))) (= (us_main_eq1 (rec__for_loops_on_lists__my_lists__list (us_split_fields1 a)) (rec__for_loops_on_lists__my_lists__list (us_split_fields1 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const for_loops_on_lists__my_lists__list__capacity__first__bit Int)
(declare-const for_loops_on_lists__my_lists__list__capacity__last__bit Int)
(declare-const for_loops_on_lists__my_lists__list__capacity__position Int)
(assert (<= 0 for_loops_on_lists__my_lists__list__capacity__first__bit))
(assert (< for_loops_on_lists__my_lists__list__capacity__first__bit for_loops_on_lists__my_lists__list__capacity__last__bit))
(assert (<= 0 for_loops_on_lists__my_lists__list__capacity__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep1)))))
(define-fun list__ref___projection ((a list__ref)) us_rep1 (list__content a))
(declare-fun model__ (us_rep1) us_rep)
(declare-fun model____function_guard (us_rep us_rep1) Bool)
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(assert (forall ((container us_rep1)) (! (= (length (model__ container)) (length1 container)) :pattern ((model__ container)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__for_loops_on_lists__my_lists__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type (rec__for_loops_on_lists__my_lists__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (= (to_rep (rec__for_loops_on_lists__my_lists__cursor__node (us_split_fields3 a))) (to_rep (rec__for_loops_on_lists__my_lists__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const for_loops_on_lists__my_lists__cursor__node__first__bit Int)
(declare-const for_loops_on_lists__my_lists__cursor__node__last__bit Int)
(declare-const for_loops_on_lists__my_lists__cursor__node__position Int)
(assert (<= 0 for_loops_on_lists__my_lists__cursor__node__first__bit))
(assert (< for_loops_on_lists__my_lists__cursor__node__first__bit for_loops_on_lists__my_lists__cursor__node__last__bit))
(assert (<= 0 for_loops_on_lists__my_lists__cursor__node__position))
(declare-fun user_eq5 (us_rep2 us_rep2) Bool)
(declare-const dummy5 us_rep2)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep2)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep2 (cursor__content a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep2)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep2 (key_type__content a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq6 (us_rep3 us_rep3) Bool)
(declare-const dummy6 us_rep3)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep3)))))
(define-fun map__ref___projection ((a map__ref)) us_rep3 (map__content a))
(declare-fun has_key (us_rep3 us_rep2) Bool)
(declare-fun has_key__function_guard (Bool us_rep3 us_rep2) Bool)
(declare-fun positions (us_rep1) us_rep3)
(declare-fun positions__function_guard (us_rep3 us_rep1) Bool)
(define-fun has_element ((container us_rep1) (position us_rep2)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep1 us_rep2) Bool)
(declare-fun get1 (us_rep3 us_rep2) Int)
(declare-fun get__function_guard1 (Int us_rep3 us_rep2) Bool)
(define-fun element ((container us_rep1) (position us_rep2)) Int (get (model__ container) (get1 (positions container) position)))
(declare-fun element__function_guard (Int us_rep1 us_rep2) Bool)
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= 0 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (element_type1 element_type1) Bool)
(declare-const dummy7 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant2 ((temp___expr_214 Int) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool) (temp___do_typ_inv_213 Bool)) Bool (=> (or (= temp___is_init_210 true) (<= 0 2147483647)) (in_range4 temp___expr_214)))
(declare-fun first (us_rep1) us_rep2)
(declare-fun first__function_guard (us_rep2 us_rep1) Bool)
(define-fun default_initial_assumption1 ((temp___expr_228 us_rep2) (temp___skip_top_level_229 Bool)) Bool (= (to_rep (rec__for_loops_on_lists__my_lists__cursor__node (us_split_fields3 temp___expr_228))) 0))
(declare-const no_element us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (forall ((container us_rep1)) (! (let ((result (first container))) (ite (= (length1 container) 0) (= (bool_eq2 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) 1)))) :pattern ((first container)))))
(declare-fun next (us_rep1 us_rep2) us_rep2)
(declare-fun next__function_guard (us_rep2 us_rep1 us_rep2) Bool)
(assert (forall ((container us_rep1)) (forall ((position us_rep2)) (! (=> (or (= (has_element container position) true) (= (bool_eq2 position no_element) true)) (let ((result (next container position))) (ite (or (= (bool_eq2 position no_element) true) (= (get1 (positions container) position) (length1 container))) (= (bool_eq2 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (+ (get1 (positions container) position) 1)))))) :pattern ((next container position))))))
(declare-const l us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant3 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 2147483647)) (in_range3 temp___expr_165)))
(declare-const rliteral count_type)
(assert (= (count_typeqtint rliteral) 0))
(assert (= no_element (mk___rep1 (mk___split_fields1 rliteral))))
(assert (forall ((container us_rep1)) (! (let ((result (length1 container))) (and (<= result (to_rep (rec__for_loops_on_lists__my_lists__list__capacity (us_split_discrs1 container)))) (dynamic_invariant3 result true false true true))) :pattern ((length1 container)))))
(declare-fun length2 (us_rep3) Int)
(declare-fun length__function_guard2 (Int us_rep3) Bool)
(declare-fun is_empty (us_rep3) Bool)
(declare-fun is_empty__function_guard (Bool us_rep3) Bool)
(define-fun default_initial_assumption2 ((temp___expr_287 us_rep3) (temp___skip_top_level_288 Bool)) Bool (=> (not (= temp___skip_top_level_288 true)) (and (= (is_empty temp___expr_287) true) (= (length2 temp___expr_287) 0))))
(define-fun default_initial_assumption3 ((temp___expr_273 us_rep2) (temp___skip_top_level_274 Bool)) Bool (= (to_rep (rec__for_loops_on_lists__my_lists__cursor__node (us_split_fields3 temp___expr_273))) 0))
(assert (forall ((container us_rep1)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep2)) (=> (= (has_key result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length1 container))) (forall ((j us_rep2)) (=> (= (has_key result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq2 i j) true))))))))) :pattern ((positions container)))))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant3 result true false true true))) :pattern ((length container)))))
(assert (forall ((container us_rep3)) (forall ((key us_rep2)) (! (=> (= (distinct 0 0) true) (=> (exists ((k us_rep2)) (and (= (has_key container k) true) (= (bool_eq2 k key) true))) (= (has_key container key) true))) :pattern ((has_key container key))))))
(declare-fun witness (us_rep3 us_rep2) Int)
(declare-fun witness__function_guard (Int us_rep3 us_rep2) Bool)
(declare-fun w_get (us_rep3 Int) Int)
(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)
(declare-sort element_type2 0)
(declare-fun element_typeqtint2 (element_type2) Int)
(assert (forall ((i element_type2)) (and (<= 1 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (element_type2 element_type2) Bool)
(declare-const dummy8 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant4 ((temp___expr_279 Int) (temp___is_init_275 Bool) (temp___skip_constant_276 Bool) (temp___do_toplevel_277 Bool) (temp___do_typ_inv_278 Bool)) Bool (=> (or (= temp___is_init_275 true) (<= 1 2147483647)) (in_range5 temp___expr_279)))
(assert (forall ((container us_rep3)) (forall ((key us_rep2)) (! (=> (= (has_key container key) true) (let ((result (get1 container key))) (and (=> (= (distinct 0 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep2)) (=> (= (has_key container k) true) (= (= (bool_eq2 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant4 result true false true true)))) :pattern ((get1 container key))))))
(assert (forall ((container us_rep3)) (! (dynamic_invariant3 (length2 container) true false true true) :pattern ((length2 container)))))
(assert (forall ((container us_rep3)) (! (= (= (is_empty container) true) (forall ((key us_rep2)) (not (= (has_key container key) true)))) :pattern ((is_empty container)))))
(declare-fun has_witness (us_rep3 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)
(assert true)
(assert (forall ((container us_rep3)) (forall ((key us_rep2)) (! (=> (= (has_key container key) true) (let ((result (witness container key))) (and (= (has_witness container result) true) (dynamic_invariant3 result true false true true)))) :pattern ((witness container key))))))
(assert (forall ((container us_rep3)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant3 witness1 true true true true) (= (has_witness container witness1) true)) (dynamic_invariant4 (w_get container witness1) true false true true)) :pattern ((w_get container witness1))))))
(declare-const e Int)
(declare-const for_loops_on_lists__contains_0_for_of__result Bool)
(declare-const o count_type)
(declare-const temp___520 count_type)
(declare-const o1 Int)
(declare-const o2 count_type)
(declare-const o3 Bool)
(declare-const temp___522 us_rep)
(declare-const temp___521 Int)
(declare-const o4 Bool)
(declare-const o5 Bool)
(declare-const e1 Int)
(declare-const for_loops_on_lists__contains_0_for_of__result1 Bool)
(declare-const temp___5201 count_type)
(declare-const result Bool)
(declare-const result1 Int)
(declare-const e2 Int)
(declare-const result2 Bool)
(declare-const e3 Int)
(declare-const for_loops_on_lists__contains_0_for_of__result2 Bool)
(declare-const temp___5202 count_type)
(declare-const result3 Bool)
(declare-const for_loops_on_lists__contains_0_for_of__result3 Bool)
(declare-const result4 Bool)
(declare-const e4 int__ref)
(declare-const for_loops_on_lists__contains_0_for_of__result4 bool__ref)
(declare-const temp___5203 cursor__ref)
(declare-const e5 Int)
(declare-const for_loops_on_lists__contains_0_for_of__result5 Bool)
(declare-const temp___5204 us_rep2)
(declare-const e6 int__ref)
(declare-const for_loops_on_lists__contains_0_for_of__result6 bool__ref)
(declare-const temp___5205 cursor__ref)
(declare-const e7 Int)
(declare-const for_loops_on_lists__contains_0_for_of__result7 Bool)
(declare-const temp___5206 us_rep2)
(declare-const result5 bool__ref)
(declare-const for_loops_on_lists__contains_0_for_of__result8 Bool)
(declare-const for_loops_on_lists__contains_0_for_of__result9 bool__ref)
(declare-const for_loops_on_lists__contains_0_for_of__result10 Bool)
(declare-const e8 int__ref)
(declare-const for_loops_on_lists__contains_0_for_of__result11 bool__ref)
(declare-const e9 Int)
(declare-const for_loops_on_lists__contains_0_for_of__result12 Bool)
(declare-const e10 int__ref)
(declare-const for_loops_on_lists__contains_0_for_of__result13 bool__ref)
(declare-const e11 Int)
(declare-const for_loops_on_lists__contains_0_for_of__result14 Bool)
(declare-const result6 Bool)
(define-fun temp___5207 () us_rep2 (mk___rep1 (mk___split_fields1 temp___5202)))
(define-fun result7 () int__ref (mk_int__ref result1))
(define-fun o6 () us_rep2 (mk___rep1 (mk___split_fields1 o2)))
(define-fun o7 () us_rep2 (mk___rep1 (mk___split_fields1 o)))
(define-fun e12 () int__ref (mk_int__ref e))
(assert (or (and (and (and (= for_loops_on_lists__contains_0_for_of__result11 (mk_bool__ref for_loops_on_lists__contains_0_for_of__result3)) (= e8 (mk_int__ref e3))) (and (= for_loops_on_lists__contains_0_for_of__result12 for_loops_on_lists__contains_0_for_of__result3) (= e9 e3))) (and (and (and (= o7 (first l)) (ite (= (= (length1 l) 0) true) (= (bool_eq2 o7 no_element) true) (and (= (has_key (positions l) o7) true) (= (get1 (positions l) o7) 1)))) (= temp___520 o)) (and (and (and (= result (has_key (positions l) (mk___rep1 (mk___split_fields1 temp___520)))) (= (= result true) (= (has_key (positions l) (mk___rep1 (mk___split_fields1 temp___520))) true))) (ite (= result true) (and (and (= o1 (element l (mk___rep1 (mk___split_fields1 temp___520)))) (and (in_range4 o1) (= o1 (get (model__ l) (get1 (positions l) (mk___rep1 (mk___split_fields1 temp___520))))))) (and (= result7 e12) (= e2 o1))) (and (= e2 e) (= e2 e1)))) (and (and (= result2 (has_key (positions l) (mk___rep1 (mk___split_fields1 temp___520)))) (= (= result2 true) (= (has_key (positions l) (mk___rep1 (mk___split_fields1 temp___520))) true))) (and (= result2 true) (and (and (= (has_key (positions l) temp___5207) true) (= e3 (element l temp___5207))) (and (= e3 0) (and (= for_loops_on_lists__contains_0_for_of__result2 result3) (= for_loops_on_lists__contains_0_for_of__result3 (distinct 1 0)))))))))) (and (and (and (and (= o7 (first l)) (ite (= (= (length1 l) 0) true) (= (bool_eq2 o7 no_element) true) (and (= (has_key (positions l) o7) true) (= (get1 (positions l) o7) 1)))) (= temp___520 o)) (and (and (and (= result (has_key (positions l) (mk___rep1 (mk___split_fields1 temp___520)))) (= (= result true) (= (has_key (positions l) (mk___rep1 (mk___split_fields1 temp___520))) true))) (ite (= result true) (and (and (= o1 (element l (mk___rep1 (mk___split_fields1 temp___520)))) (and (in_range4 o1) (= o1 (get (model__ l) (get1 (positions l) (mk___rep1 (mk___split_fields1 temp___520))))))) (and (= result7 e12) (= e2 o1))) (and (= e2 e) (= e2 e1)))) (and (and (= result2 (has_key (positions l) (mk___rep1 (mk___split_fields1 temp___520)))) (= (= result2 true) (= (has_key (positions l) (mk___rep1 (mk___split_fields1 temp___520))) true))) (ite (= result2 true) (and (and (and (and (= (has_key (positions l) temp___5207) true) (= e3 (element l temp___5207))) (and (and (not (= e3 0)) (= for_loops_on_lists__contains_0_for_of__result3 for_loops_on_lists__contains_0_for_of__result2)) (and (and (and (and (= o6 (next l temp___5207)) (ite (= (ite (= (bool_eq2 temp___5207 no_element) false) (= (get1 (positions l) temp___5207) (length1 l)) true) true) (= (bool_eq2 o6 no_element) true) (and (= (has_key (positions l) o6) true) (= (get1 (positions l) o6) (+ (get1 (positions l) temp___5207) 1))))) (and (= o3 (has_key (positions l) o6)) (= (= o3 true) (= (has_key (positions l) o6) true)))) (= result4 (ite (not (= o3 true)) true false))) (= result4 true)))) (and (and (= temp___5203 (mk_cursor__ref temp___5207)) (and (= for_loops_on_lists__contains_0_for_of__result4 (mk_bool__ref for_loops_on_lists__contains_0_for_of__result3)) (= e4 (mk_int__ref e3)))) (and (= temp___5204 temp___5207) (and (= for_loops_on_lists__contains_0_for_of__result5 for_loops_on_lists__contains_0_for_of__result3) (= e5 e3))))) (and (and (= temp___5205 temp___5203) (and (= for_loops_on_lists__contains_0_for_of__result6 for_loops_on_lists__contains_0_for_of__result4) (= e6 e4))) (and (= temp___5206 temp___5204) (and (= for_loops_on_lists__contains_0_for_of__result7 for_loops_on_lists__contains_0_for_of__result5) (= e7 e5))))) (and (and (= temp___5205 (mk_cursor__ref (mk___rep1 (mk___split_fields1 temp___520)))) (and (= for_loops_on_lists__contains_0_for_of__result6 (mk_bool__ref for_loops_on_lists__contains_0_for_of__result)) (= e6 (mk_int__ref e2)))) (and (= temp___5206 (mk___rep1 (mk___split_fields1 temp___5201))) (and (= for_loops_on_lists__contains_0_for_of__result7 for_loops_on_lists__contains_0_for_of__result1) (= e7 e2)))))))) (and (and (and (= for_loops_on_lists__contains_0_for_of__result11 for_loops_on_lists__contains_0_for_of__result9) (= e8 e6)) (and (= for_loops_on_lists__contains_0_for_of__result12 for_loops_on_lists__contains_0_for_of__result10) (= e9 e7))) (and (and (= for_loops_on_lists__contains_0_for_of__result9 (mk_bool__ref for_loops_on_lists__contains_0_for_of__result8)) (= for_loops_on_lists__contains_0_for_of__result10 for_loops_on_lists__contains_0_for_of__result8)) (and (= result5 for_loops_on_lists__contains_0_for_of__result6) (= for_loops_on_lists__contains_0_for_of__result8 (distinct 0 0))))))))
(assert (= for_loops_on_lists__contains_0_for_of__result13 for_loops_on_lists__contains_0_for_of__result11))
(assert (= e10 e8))
(assert (= for_loops_on_lists__contains_0_for_of__result14 for_loops_on_lists__contains_0_for_of__result12))
(assert (= e11 e9))
(assert (= (bool__content for_loops_on_lists__contains_0_for_of__result13) true))
(assert (and (= temp___522 (model__ l)) (= (length temp___522) (length1 l))))
(assert (and (= o4 (iter_has_element temp___522 temp___521)) (= (= o4 true) (and (<= 1 temp___521) (<= temp___521 (last temp___522))))))
(assert (= (= o5 true) (in_range2 temp___521)))
(assert (= result6 (ite (= o5 true) o4 false)))
(assert (= result6 true))
(assert (not (<= 1 temp___521)))
(check-sat)
(exit)
