(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((file_type__ref (mk_file_type__ref (file_type__content us_rep)))))
(define-fun file_type__ref___2__projection ((a file_type__ref)) us_rep (file_type__content a))
(declare-sort positive_count 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive_count positive_count) Bool)
(declare-const dummy1 positive_count)
(declare-datatypes () ((positive_count__ref (mk_positive_count__ref (positive_count__content positive_count)))))
(define-fun positive_count__ref___2__projection ((a positive_count__ref)) positive_count (positive_count__content a))
(define-fun dynamic_invariant ((temp___expr_661 Int) (temp___is_init_658 Bool) (temp___skip_constant_659 Bool) (temp___do_toplevel_660 Bool)) Bool (=> (or (= temp___is_init_658 true) (<= 1 2147483647)) (in_range1 temp___expr_661)))
(declare-fun is_readable (us_rep) Bool)
(declare-fun is_readable__function_guard (Bool us_rep) Bool)
(declare-fun is_open (us_rep) Bool)
(declare-fun is_open__function_guard (Bool us_rep) Bool)
(declare-fun mode__2 (us_rep) Int)
(declare-fun mode__2__function_guard (Int us_rep) Bool)
(assert (forall ((file us_rep)) (! (= (= (is_readable file) true) (and (= (is_open file) true) (= (mode__2 file) 0))) :pattern ((is_readable file)))))
(declare-fun is_writable (us_rep) Bool)
(declare-fun is_writable__function_guard (Bool us_rep) Bool)
(assert (forall ((file us_rep)) (! (= (= (is_writable file) true) (and (= (is_open file) true) (or (= (mode__2 file) 1) (= (mode__2 file) 2)))) :pattern ((is_writable file)))))
(declare-fun page_length__2 (us_rep) Int)
(declare-fun page_length__2__function_guard (Int us_rep) Bool)
(declare-sort count 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (count count) Bool)
(declare-const dummy2 count)
(declare-datatypes () ((count__ref (mk_count__ref (count__content count)))))
(define-fun count__ref___2__projection ((a count__ref)) count (count__content a))
(define-fun dynamic_invariant1 ((temp___expr_655 Int) (temp___is_init_652 Bool) (temp___skip_constant_653 Bool) (temp___do_toplevel_654 Bool)) Bool (=> (or (= temp___is_init_652 true) (<= 0 2147483647)) (in_range2 temp___expr_655)))
(declare-fun end_of_file (us_rep) Bool)
(declare-fun end_of_file__function_guard (Bool us_rep) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const to__ Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort file_mode 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (file_mode file_mode) Bool)
(declare-const dummy3 file_mode)
(declare-datatypes () ((file_mode__ref (mk_file_mode__ref (file_mode__content file_mode)))))
(define-fun file_mode__ref___3__projection ((a file_mode__ref)) file_mode (file_mode__content a))
(define-fun dynamic_invariant2 ((temp___expr_649 Int) (temp___is_init_646 Bool) (temp___skip_constant_647 Bool) (temp___do_toplevel_648 Bool)) Bool (=> (or (= temp___is_init_646 true) (<= 0 2)) (in_range3 temp___expr_649)))
(declare-const file us_rep)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Bool)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(assert (in_range1 to__))
(assert (and (= result (is_writable file)) (= (= result true) (and (= (is_open file) true) (or (= (mode__2 file) 1) (= (mode__2 file) 2))))))
(assert (= result true))
(assert (and (= o (page_length__2 file)) (in_range2 o)))
(assert (= result1 (ite (< 0 o) true false)))
(assert (not (= result1 true)))
(assert (and (= result2 (is_readable file)) (= (= result2 true) (and (= (is_open file) true) (= (mode__2 file) 0)))))
(assert (= result2 true))
(assert (not (= (is_readable file) true)))
(check-sat)
(exit)
