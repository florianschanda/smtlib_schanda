(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort enum 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (enum enum) Bool)
(declare-const dummy enum)
(declare-datatypes () ((enum__ref (mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))
(declare-fun to_rep (enum) Int)
(declare-fun of_rep (Int) enum)
(assert (forall ((x enum)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x enum)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep2 (natural) Int)
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__basic__r__x enum)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) enum (rec__basic__r__x a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__basic__r__base integer) (rec__basic__r__a_field integer) (rec__basic__r__c_field1 Bool) (rec__basic__r__c_field2 natural)))))
(define-fun us_split_fields_Base__projection ((a us_split_fields)) integer (rec__basic__r__base a))
(define-fun us_split_fields_A_Field__projection ((a us_split_fields)) integer (rec__basic__r__a_field a))
(define-fun us_split_fields_C_Field1__projection ((a us_split_fields)) Bool (rec__basic__r__c_field1 a))
(define-fun us_split_fields_C_Field2__projection ((a us_split_fields)) natural (rec__basic__r__c_field2 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun basic__r__a_field__pred ((a us_rep)) Bool (= (to_rep (rec__basic__r__x (us_split_discrs1 a))) 0))
(define-fun basic__r__c_field1__pred ((a us_rep)) Bool (= (to_rep (rec__basic__r__x (us_split_discrs1 a))) 2))
(define-fun basic__r__c_field2__pred ((a us_rep)) Bool (= (to_rep (rec__basic__r__x (us_split_discrs1 a))) 2))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__basic__r__x (us_split_discrs1 a))) (to_rep (rec__basic__r__x (us_split_discrs1 b)))) (and (and (and (= (to_rep1 (rec__basic__r__base (us_split_fields1 a))) (to_rep1 (rec__basic__r__base (us_split_fields1 b)))) (=> (basic__r__a_field__pred a) (= (to_rep1 (rec__basic__r__a_field (us_split_fields1 a))) (to_rep1 (rec__basic__r__a_field (us_split_fields1 b)))))) (=> (basic__r__c_field1__pred a) (= (rec__basic__r__c_field1 (us_split_fields1 a)) (rec__basic__r__c_field1 (us_split_fields1 b))))) (=> (basic__r__c_field2__pred a) (= (to_rep2 (rec__basic__r__c_field2 (us_split_fields1 a))) (to_rep2 (rec__basic__r__c_field2 (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const basic__r__x__first__bit Int)
(declare-const basic__r__x__last__bit Int)
(declare-const basic__r__x__position Int)
(assert (<= 0 basic__r__x__first__bit))
(assert (< basic__r__x__first__bit basic__r__x__last__bit))
(assert (<= 0 basic__r__x__position))
(declare-const basic__r__base__first__bit Int)
(declare-const basic__r__base__last__bit Int)
(declare-const basic__r__base__position Int)
(assert (<= 0 basic__r__base__first__bit))
(assert (< basic__r__base__first__bit basic__r__base__last__bit))
(assert (<= 0 basic__r__base__position))
(declare-const basic__r__a_field__first__bit Int)
(declare-const basic__r__a_field__last__bit Int)
(declare-const basic__r__a_field__position Int)
(assert (<= 0 basic__r__a_field__first__bit))
(assert (< basic__r__a_field__first__bit basic__r__a_field__last__bit))
(assert (<= 0 basic__r__a_field__position))
(declare-const basic__r__c_field1__first__bit Int)
(declare-const basic__r__c_field1__last__bit Int)
(declare-const basic__r__c_field1__position Int)
(assert (<= 0 basic__r__c_field1__first__bit))
(assert (< basic__r__c_field1__first__bit basic__r__c_field1__last__bit))
(assert (<= 0 basic__r__c_field1__position))
(declare-const basic__r__c_field2__first__bit Int)
(declare-const basic__r__c_field2__last__bit Int)
(declare-const basic__r__c_field2__position Int)
(assert (<= 0 basic__r__c_field2__first__bit))
(assert (< basic__r__c_field2__first__bit basic__r__c_field2__last__bit))
(assert (<= 0 basic__r__c_field2__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))
(declare-const x us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 2)) (in_range temp___expr_158)))
(declare-const conv__id__result enum)
(declare-const conv__id__result1 integer)
(declare-const conv__id__result2 integer)
(declare-const conv__id__result3 Bool)
(declare-const conv__id__result4 natural)
(declare-const us Int)
(declare-const result enum)
(declare-const result1 integer)
(declare-const result2 integer)
(declare-const result3 Bool)
(declare-const result4 natural)
(declare-const conv__id__result5 enum)
(declare-const conv__id__result6 integer)
(declare-const conv__id__result7 integer)
(declare-const conv__id__result8 Bool)
(declare-const conv__id__result9 natural)
(declare-const conv__id__result10 enum)
(declare-const conv__id__result11 integer)
(declare-const conv__id__result12 integer)
(declare-const conv__id__result13 Bool)
(declare-const conv__id__result14 natural)
(declare-const conv__id__result15 enum)
(declare-const conv__id__result16 integer)
(declare-const conv__id__result17 integer)
(declare-const conv__id__result18 Bool)
(declare-const conv__id__result19 natural)
(declare-const conv__id__result20 enum)
(declare-const conv__id__result21 integer)
(declare-const conv__id__result22 integer)
(declare-const conv__id__result23 Bool)
(declare-const conv__id__result24 natural)
(declare-const conv__id__result25 us_rep)
(define-fun conv__id__result26 () us_rep (mk___rep (mk___split_discrs conv__id__result15) (mk___split_fields conv__id__result16 conv__id__result17 conv__id__result18 conv__id__result19)))
(define-fun conv__id__result27 () us_rep (mk___rep (mk___split_discrs conv__id__result5) (mk___split_fields conv__id__result6 conv__id__result7 conv__id__result8 conv__id__result9)))
(declare-const result5 enum)
(declare-const result6 integer)
(declare-const result7 integer)
(declare-const result8 Bool)
(declare-const result9 natural)
(assert (and (= us (to_rep (rec__basic__r__x (us_split_discrs1 x)))) (in_range (to_rep (rec__basic__r__x (us_split_discrs1 x))))))
(assert (= conv__id__result10 conv__id__result5))
(assert (= conv__id__result11 conv__id__result6))
(assert (= conv__id__result12 conv__id__result7))
(assert (= conv__id__result13 conv__id__result8))
(assert (= conv__id__result14 conv__id__result9))
(assert (= conv__id__result26 conv__id__result27))
(assert (= result conv__id__result))
(assert (= result1 conv__id__result1))
(assert (= result2 conv__id__result2))
(assert (= result3 conv__id__result3))
(assert (= result4 conv__id__result4))
(assert (= conv__id__result27 x))
(assert (= (mk_r__ref (mk___rep (mk___split_discrs conv__id__result20) (mk___split_fields conv__id__result21 conv__id__result22 conv__id__result23 conv__id__result24))) (mk_r__ref (mk___rep (mk___split_discrs conv__id__result10) (mk___split_fields conv__id__result11 conv__id__result12 conv__id__result13 conv__id__result14)))))
(assert (= conv__id__result25 conv__id__result26))
(assert (= result5 conv__id__result20))
(assert (= result6 conv__id__result21))
(assert (= result7 conv__id__result22))
(assert (= result8 conv__id__result23))
(assert (= result9 conv__id__result24))
(assert (not (= (bool_eq (mk___rep (mk___split_discrs conv__id__result20) (mk___split_fields conv__id__result21 conv__id__result22 conv__id__result23 conv__id__result24)) x) true)))
(check-sat)
(exit)
