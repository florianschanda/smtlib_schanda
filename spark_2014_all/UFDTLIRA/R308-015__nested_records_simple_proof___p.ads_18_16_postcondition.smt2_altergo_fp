(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type type_0

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : type_0, type_0 -> bool

logic dummy : type_0

type type_0__ref = { type_0__content : type_0
}

function type_0__ref___projection(a: type_0__ref) : type_0 =
  (a).type_0__content

logic to_rep : type_0 -> int

logic of_rep : int -> type_0

axiom inversion_axiom :
  (forall x:type_0 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:type_0 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p__type_1__field_0 : type_0;
rec__p__type_1__field_1 : type_0; rec__p__type_1__field_2 : type_0;
rec__p__type_1__field_3 : type_0; rec__p__type_1__field_4 : type_0;
rec__p__type_1__field_5 : type_0; rec__p__type_1__field_6 : type_0;
rec__p__type_1__field_7 : type_0
}

function us_split_fields_Field_0__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_0

function us_split_fields_Field_1__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_1

function us_split_fields_Field_2__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_2

function us_split_fields_Field_3__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_3

function us_split_fields_Field_4__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_4

function us_split_fields_Field_5__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_5

function us_split_fields_Field_6__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_6

function us_split_fields_Field_7__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_7

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((((((((to_rep(((a).us_split_fields1).rec__p__type_1__field_0) = to_rep(((b).us_split_fields1).rec__p__type_1__field_0)) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_1) = to_rep(((b).us_split_fields1).rec__p__type_1__field_1))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_2) = to_rep(((b).us_split_fields1).rec__p__type_1__field_2))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_3) = to_rep(((b).us_split_fields1).rec__p__type_1__field_3))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_4) = to_rep(((b).us_split_fields1).rec__p__type_1__field_4))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_5) = to_rep(((b).us_split_fields1).rec__p__type_1__field_5))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_6) = to_rep(((b).us_split_fields1).rec__p__type_1__field_6))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_7) = to_rep(((b).us_split_fields1).rec__p__type_1__field_7))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((((((((to_rep(((a).us_split_fields1).rec__p__type_1__field_0) = to_rep(((b).us_split_fields1).rec__p__type_1__field_0)) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_1) = to_rep(((b).us_split_fields1).rec__p__type_1__field_1))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_2) = to_rep(((b).us_split_fields1).rec__p__type_1__field_2))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_3) = to_rep(((b).us_split_fields1).rec__p__type_1__field_3))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_4) = to_rep(((b).us_split_fields1).rec__p__type_1__field_4))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_5) = to_rep(((b).us_split_fields1).rec__p__type_1__field_5))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_6) = to_rep(((b).us_split_fields1).rec__p__type_1__field_6))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_7) = to_rep(((b).us_split_fields1).rec__p__type_1__field_7)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:type_0. forall a1:type_0. forall a2:type_0. forall a3:type_0.
  forall a4:type_0. forall a5:type_0. forall a6:type_0. forall a7:type_0.
  (0 <= object__size({ us_split_fields1 = { rec__p__type_1__field_0 = a;
  rec__p__type_1__field_1 = a1; rec__p__type_1__field_2 = a2;
  rec__p__type_1__field_3 = a3; rec__p__type_1__field_4 = a4;
  rec__p__type_1__field_5 = a5; rec__p__type_1__field_6 = a6;
  rec__p__type_1__field_7 = a7 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:type_0. forall a1:type_0. forall a2:type_0. forall a3:type_0.
  forall a4:type_0. forall a5:type_0. forall a6:type_0. forall a7:type_0.
  (0 <= object__alignment({ us_split_fields1 = { rec__p__type_1__field_0 = a;
  rec__p__type_1__field_1 = a1; rec__p__type_1__field_2 = a2;
  rec__p__type_1__field_3 = a3; rec__p__type_1__field_4 = a4;
  rec__p__type_1__field_5 = a5; rec__p__type_1__field_6 = a6;
  rec__p__type_1__field_7 = a7 } })))

logic p__type_1__field_0__first__bit : int

logic p__type_1__field_0__last__bit : int

logic p__type_1__field_0__position : int

axiom p__type_1__field_0__first__bit_axiom :
  (0 <= p__type_1__field_0__first__bit)

axiom p__type_1__field_0__last__bit_axiom :
  (p__type_1__field_0__first__bit <  p__type_1__field_0__last__bit)

axiom p__type_1__field_0__position_axiom :
  (0 <= p__type_1__field_0__position)

logic p__type_1__field_1__first__bit : int

logic p__type_1__field_1__last__bit : int

logic p__type_1__field_1__position : int

axiom p__type_1__field_1__first__bit_axiom :
  (0 <= p__type_1__field_1__first__bit)

axiom p__type_1__field_1__last__bit_axiom :
  (p__type_1__field_1__first__bit <  p__type_1__field_1__last__bit)

axiom p__type_1__field_1__position_axiom :
  (0 <= p__type_1__field_1__position)

logic p__type_1__field_2__first__bit : int

logic p__type_1__field_2__last__bit : int

logic p__type_1__field_2__position : int

axiom p__type_1__field_2__first__bit_axiom :
  (0 <= p__type_1__field_2__first__bit)

axiom p__type_1__field_2__last__bit_axiom :
  (p__type_1__field_2__first__bit <  p__type_1__field_2__last__bit)

axiom p__type_1__field_2__position_axiom :
  (0 <= p__type_1__field_2__position)

logic p__type_1__field_3__first__bit : int

logic p__type_1__field_3__last__bit : int

logic p__type_1__field_3__position : int

axiom p__type_1__field_3__first__bit_axiom :
  (0 <= p__type_1__field_3__first__bit)

axiom p__type_1__field_3__last__bit_axiom :
  (p__type_1__field_3__first__bit <  p__type_1__field_3__last__bit)

axiom p__type_1__field_3__position_axiom :
  (0 <= p__type_1__field_3__position)

logic p__type_1__field_4__first__bit : int

logic p__type_1__field_4__last__bit : int

logic p__type_1__field_4__position : int

axiom p__type_1__field_4__first__bit_axiom :
  (0 <= p__type_1__field_4__first__bit)

axiom p__type_1__field_4__last__bit_axiom :
  (p__type_1__field_4__first__bit <  p__type_1__field_4__last__bit)

axiom p__type_1__field_4__position_axiom :
  (0 <= p__type_1__field_4__position)

logic p__type_1__field_5__first__bit : int

logic p__type_1__field_5__last__bit : int

logic p__type_1__field_5__position : int

axiom p__type_1__field_5__first__bit_axiom :
  (0 <= p__type_1__field_5__first__bit)

axiom p__type_1__field_5__last__bit_axiom :
  (p__type_1__field_5__first__bit <  p__type_1__field_5__last__bit)

axiom p__type_1__field_5__position_axiom :
  (0 <= p__type_1__field_5__position)

logic p__type_1__field_6__first__bit : int

logic p__type_1__field_6__last__bit : int

logic p__type_1__field_6__position : int

axiom p__type_1__field_6__first__bit_axiom :
  (0 <= p__type_1__field_6__first__bit)

axiom p__type_1__field_6__last__bit_axiom :
  (p__type_1__field_6__first__bit <  p__type_1__field_6__last__bit)

axiom p__type_1__field_6__position_axiom :
  (0 <= p__type_1__field_6__position)

logic p__type_1__field_7__first__bit : int

logic p__type_1__field_7__last__bit : int

logic p__type_1__field_7__position : int

axiom p__type_1__field_7__first__bit_axiom :
  (0 <= p__type_1__field_7__first__bit)

axiom p__type_1__field_7__last__bit_axiom :
  (p__type_1__field_7__first__bit <  p__type_1__field_7__last__bit)

axiom p__type_1__field_7__position_axiom :
  (0 <= p__type_1__field_7__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : type_0

logic dummy2 : type_0

logic dummy3 : type_0

logic dummy4 : type_0

logic dummy5 : type_0

logic dummy6 : type_0

logic dummy7 : type_0

logic dummy8 : type_0

type type_1__ref = { type_1__content : us_rep
}

function type_1__ref___projection(a: type_1__ref) : us_rep =
  (a).type_1__content

 (* File "p.ads", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall p__create_type_1__result:type_0.
  forall p__create_type_1__result1:type_0.
  forall p__create_type_1__result2:type_0.
  forall p__create_type_1__result3:type_0.
  forall p__create_type_1__result4:type_0.
  forall p__create_type_1__result5:type_0.
  forall p__create_type_1__result6:type_0.
  forall p__create_type_1__result7:type_0. forall o:type_0. forall o1:type_0.
  forall o2:type_0. forall o3:type_0. forall o4:type_0. forall o5:type_0.
  forall o6:type_0. forall o7:type_0. forall o8:type_0. forall o9:type_0.
  forall o10:type_0. forall o11:type_0. forall o12:type_0. forall o13:type_0.
  forall o14:type_0. forall o15:type_0. forall o16:type_0. forall o17:type_0.
  forall o18:type_0. forall o19:type_0. forall o20:type_0. forall o21:type_0.
  forall o22:type_0. forall o23:type_0. forall result:type_0.
  forall result1:type_0. forall result2:type_0. forall result3:type_0.
  forall result4:type_0. forall result5:type_0. forall result6:type_0.
  forall result7:type_0. forall p__create_type_1__result8:type_0.
  forall p__create_type_1__result9:type_0.
  forall p__create_type_1__result10:type_0.
  forall p__create_type_1__result11:type_0.
  forall p__create_type_1__result12:type_0.
  forall p__create_type_1__result13:type_0.
  forall p__create_type_1__result14:type_0.
  forall p__create_type_1__result15:type_0.
  forall p__create_type_1__result16:type_0.
  forall p__create_type_1__result17:type_0.
  forall p__create_type_1__result18:type_0.
  forall p__create_type_1__result19:type_0.
  forall p__create_type_1__result20:type_0.
  forall p__create_type_1__result21:type_0.
  forall p__create_type_1__result22:type_0.
  forall p__create_type_1__result23:type_0.
  forall p__create_type_1__result24:type_0.
  forall p__create_type_1__result25:type_0.
  forall p__create_type_1__result26:type_0.
  forall p__create_type_1__result27:type_0.
  forall p__create_type_1__result28:type_0.
  forall p__create_type_1__result29:type_0.
  forall p__create_type_1__result30:type_0.
  forall p__create_type_1__result31:type_0.
  forall p__create_type_1__result32:type_0.
  forall p__create_type_1__result33:type_0.
  forall p__create_type_1__result34:type_0.
  forall p__create_type_1__result35:type_0.
  forall p__create_type_1__result36:type_0.
  forall p__create_type_1__result37:type_0.
  forall p__create_type_1__result38:type_0.
  forall p__create_type_1__result39:type_0.
  forall p__create_type_1__result40:type_0.
  forall p__create_type_1__result41:type_0.
  forall p__create_type_1__result42:type_0.
  forall p__create_type_1__result43:type_0.
  forall p__create_type_1__result44:type_0.
  forall p__create_type_1__result45:type_0.
  forall p__create_type_1__result46:type_0.
  forall p__create_type_1__result47:type_0.
  (forall result8:type_0. forall result9:type_0. forall result10:type_0.
  forall result11:type_0. forall result12:type_0. forall result13:type_0.
  forall result14:type_0. forall result15:type_0.
  (((((((p__create_type_1__result16 = p__create_type_1__result8) and
  ((p__create_type_1__result17 = p__create_type_1__result9) and
  ((p__create_type_1__result18 = p__create_type_1__result10) and
  ((p__create_type_1__result19 = p__create_type_1__result11) and
  ((p__create_type_1__result20 = p__create_type_1__result12) and
  ((p__create_type_1__result21 = p__create_type_1__result13) and
  ((p__create_type_1__result22 = p__create_type_1__result14) and
  (p__create_type_1__result23 = p__create_type_1__result15)))))))) and
  ((p__create_type_1__result24 = p__create_type_1__result8) and
  ((p__create_type_1__result25 = p__create_type_1__result9) and
  ((p__create_type_1__result26 = p__create_type_1__result10) and
  ((p__create_type_1__result27 = p__create_type_1__result11) and
  ((p__create_type_1__result28 = p__create_type_1__result12) and
  ((p__create_type_1__result29 = p__create_type_1__result13) and
  ((p__create_type_1__result30 = p__create_type_1__result14) and
  (p__create_type_1__result31 = p__create_type_1__result15))))))))) and
  ((((to_rep(o) = 0) and ((to_rep(o1) = 0) and ((to_rep(o2) = 0) and
  ((to_rep(o3) = 0) and ((to_rep(o4) = 0) and ((to_rep(o5) = 0) and
  ((to_rep(o6) = 0) and ((to_rep(o7) = 0) and ((o7 = o8) and ((o6 = o9) and
  ((o5 = o10) and ((o4 = o11) and ((o3 = o12) and ((o2 = o13) and
  ((o1 = o14) and (o = o15)))))))))))))))) and ((o16 = o8) and
  ((o17 = o9) and ((o18 = o10) and ((o19 = o11) and ((o20 = o12) and
  ((o21 = o13) and ((o22 = o14) and (o23 = o15))))))))) and
  (((result = p__create_type_1__result) and
  ((result1 = p__create_type_1__result1) and
  ((result2 = p__create_type_1__result2) and
  ((result3 = p__create_type_1__result3) and
  ((result4 = p__create_type_1__result4) and
  ((result5 = p__create_type_1__result5) and
  ((result6 = p__create_type_1__result6) and
  (result7 = p__create_type_1__result7)))))))) and
  ((o16 = p__create_type_1__result8) and
  ((o17 = p__create_type_1__result9) and
  ((o18 = p__create_type_1__result10) and
  ((o19 = p__create_type_1__result11) and
  ((o20 = p__create_type_1__result12) and
  ((o21 = p__create_type_1__result13) and
  ((o22 = p__create_type_1__result14) and
  (o23 = p__create_type_1__result15))))))))))) and
  (((p__create_type_1__result32 = p__create_type_1__result16) and
  ((p__create_type_1__result33 = p__create_type_1__result17) and
  ((p__create_type_1__result34 = p__create_type_1__result18) and
  ((p__create_type_1__result35 = p__create_type_1__result19) and
  ((p__create_type_1__result36 = p__create_type_1__result20) and
  ((p__create_type_1__result37 = p__create_type_1__result21) and
  ((p__create_type_1__result38 = p__create_type_1__result22) and
  (p__create_type_1__result39 = p__create_type_1__result23)))))))) and
  ((p__create_type_1__result40 = p__create_type_1__result24) and
  ((p__create_type_1__result41 = p__create_type_1__result25) and
  ((p__create_type_1__result42 = p__create_type_1__result26) and
  ((p__create_type_1__result43 = p__create_type_1__result27) and
  ((p__create_type_1__result44 = p__create_type_1__result28) and
  ((p__create_type_1__result45 = p__create_type_1__result29) and
  ((p__create_type_1__result46 = p__create_type_1__result30) and
  (p__create_type_1__result47 = p__create_type_1__result31)))))))))) and
  ((result8 = p__create_type_1__result32) and
  ((result9 = p__create_type_1__result33) and
  ((result10 = p__create_type_1__result34) and
  ((result11 = p__create_type_1__result35) and
  ((result12 = p__create_type_1__result36) and
  ((result13 = p__create_type_1__result37) and
  ((result14 = p__create_type_1__result38) and
  (result15 = p__create_type_1__result39))))))))) ->
  (to_rep(p__create_type_1__result32) = 0))))
