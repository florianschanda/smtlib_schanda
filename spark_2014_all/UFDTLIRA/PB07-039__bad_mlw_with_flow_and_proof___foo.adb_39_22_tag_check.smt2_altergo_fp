(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic us_compatible_tags : int, int -> prop

axiom us_compatible_tags_refl :
  (forall tag:int. us_compatible_tags(tag, tag))

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)]. (bool_eq(a, b) = true))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__size({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__alignment({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_private

logic dummy1 : int

type t1__ref = { t1__content : us_rep
}

function t1__ref___projection(a: t1__ref) : us_rep = (a).t1__content

logic t1_var__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic prim_func : us_split_fields -> us_rep

logic prim_func__function_guard : us_rep, us_split_fields -> prop

logic prim_func1 : int, us_split_fields -> us_rep

logic prim_func__function_guard1 : us_rep, int, us_split_fields -> prop

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_private. forall a1:int. (0 <= object__size1({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_private. forall a1:int. (0 <= object__alignment1({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq1 : us_rep, us_rep -> bool

logic dummy2 : us_private

logic dummy3 : int

type t2__ref = { t2__content : us_rep
}

function t2__ref___projection(a: t2__ref) : us_rep = (a).t2__content

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_private. forall a1:int. (0 <= object__size2({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_private. forall a1:int. (0 <= object__alignment2({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq2 : us_rep, us_rep -> bool

logic dummy4 : us_private

logic dummy5 : int

type t3__ref = { t3__content : us_rep
}

function t3__ref___projection(a: t3__ref) : us_rep = (a).t3__content

axiom prim_func__post_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_private [prim_func({ rec__ext__ =
  foo__t1_pkg__t1_var__fields })]. ((prim_func({ rec__ext__ =
  foo__t1_pkg__t1_var__fields })).attr__tag = us_tag))

axiom prim_func__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall foo__t1_pkg__t1_var__fields:us_private [prim_func1(attr__tag1, {
  rec__ext__ = foo__t1_pkg__t1_var__fields })]. ((prim_func1(attr__tag1, {
  rec__ext__ = foo__t1_pkg__t1_var__fields })).attr__tag = attr__tag1)))

axiom foo__t1_pkg__t1__compat_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_private [prim_func1(us_tag, {
  rec__ext__ = foo__t1_pkg__t1_var__fields })]. (prim_func({ rec__ext__ =
  foo__t1_pkg__t1_var__fields }) = prim_func1(us_tag, { rec__ext__ =
  foo__t1_pkg__t1_var__fields })))

axiom foo__t2_pkg__t2__compat_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_private [prim_func1(us_tag1, {
  rec__ext__ = foo__t1_pkg__t1_var__fields })]. (prim_func({ rec__ext__ =
  foo__t1_pkg__t1_var__fields }) = prim_func1(us_tag1, { rec__ext__ =
  foo__t1_pkg__t1_var__fields })))

axiom foo__t3_pkg__t3__compat_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_private [prim_func1(us_tag2, {
  rec__ext__ = foo__t1_pkg__t1_var__fields })]. (prim_func({ rec__ext__ =
  foo__t1_pkg__t1_var__fields }) = prim_func1(us_tag2, { rec__ext__ =
  foo__t1_pkg__t1_var__fields })))

axiom prim_func__def_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_private [prim_func({ rec__ext__ =
  foo__t1_pkg__t1_var__fields })]. (prim_func({ rec__ext__ =
  foo__t1_pkg__t1_var__fields }) = { us_split_fields1 = { rec__ext__ =
  foo__t1_pkg__t1_var__fields }; attr__tag = t1_var__attr__tag }))

logic t1_var__split_fields : us_private

logic temp___205 : us_private

logic temp___2051 : int

logic temp___206 : us_private

logic temp___2061 : int

logic o : us_private

logic o1 : int

logic o2 : us_private

logic o3 : int

axiom H : (({ us_split_fields1 = { rec__ext__ = temp___206 }; attr__tag =
  temp___2061 } = prim_func({ rec__ext__ = t1_var__split_fields })) and
  ((t1_var__split_fields = temp___206) and
  (t1_var__attr__tag = temp___2061)))

axiom H1 : us_compatible_tags(temp___2061, us_tag1)

axiom H2 : ((o = temp___206) and (o1 = temp___2061))

axiom H3 : (o2 = o)

axiom H4 : (o3 = o1)

axiom H5 : (({ us_split_fields1 = { rec__ext__ = temp___205 }; attr__tag =
  temp___2051 } = prim_func({ rec__ext__ = t1_var__split_fields })) and
  ((t1_var__split_fields = temp___205) and
  (t1_var__attr__tag = temp___2051)))

 (* File "foo.adb", line 34, characters 0-0 *)
goal WP_parameter_def : us_compatible_tags(temp___2051, us_tag1)
