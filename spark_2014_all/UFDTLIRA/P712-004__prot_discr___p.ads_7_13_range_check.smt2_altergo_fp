(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_discrs = { rec__p__pt__d : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__p__pt__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. (0 <= object__size({ us_split_discrs1 = { rec__p__pt__d = a
  } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. (0 <= object__alignment({ us_split_discrs1 = {
  rec__p__pt__d = a } })))

logic p__pt__d__first__bit : int

logic p__pt__d__last__bit : int

logic p__pt__d__position : int

axiom p__pt__d__first__bit_axiom : (0 <= p__pt__d__first__bit)

axiom p__pt__d__last__bit_axiom :
  (p__pt__d__first__bit <  p__pt__d__last__bit)

axiom p__pt__d__position_axiom : (0 <= p__pt__d__position)

logic user_eq : us_rep, us_rep -> bool

type pt__ref = { pt__content : us_rep
}

function pt__ref___projection(a: pt__ref) : us_rep = (a).pt__content

type us_rep1 = { us_split_discrs2 : us_split_discrs
}

function us_rep___2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1 }

predicate in_range1(rec__p__pt__d1: bool, a: us_rep) =
  (rec__p__pt__d1 = ((a).us_split_discrs1).rec__p__pt__d)

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. (0 <= object__size1({ us_split_discrs2 = { rec__p__pt__d =
  a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. (0 <= object__alignment1({ us_split_discrs2 = {
  rec__p__pt__d = a } })))

logic p__pt__d__first__bit1 : int

logic p__pt__d__last__bit1 : int

logic p__pt__d__position1 : int

axiom p__pt__d__first__bit_axiom1 : (0 <= p__pt__d__first__bit1)

axiom p__pt__d__last__bit_axiom1 :
  (p__pt__d__first__bit1 <  p__pt__d__last__bit1)

axiom p__pt__d__position_axiom1 : (0 <= p__pt__d__position1)

logic user_eq1 : us_rep1, us_rep1 -> bool

type tp1S__ref = { tp1S__content : us_rep1
}

function tp1S__ref___projection(a: tp1S__ref) : us_rep1 = (a).tp1S__content

logic p1__split_discrs : bool

logic attr__ATTRIBUTE_ADDRESS : int

type us_rep2 = { us_split_discrs3 : us_split_discrs
}

function us_rep___3__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3 }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1 }

predicate in_range2(rec__p__pt__d1: bool, a: us_rep) =
  (rec__p__pt__d1 = ((a).us_split_discrs1).rec__p__pt__d)

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. (0 <= object__size2({ us_split_discrs3 = { rec__p__pt__d =
  a } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. (0 <= object__alignment2({ us_split_discrs3 = {
  rec__p__pt__d = a } })))

logic p__pt__d__first__bit2 : int

logic p__pt__d__last__bit2 : int

logic p__pt__d__position2 : int

axiom p__pt__d__first__bit_axiom2 : (0 <= p__pt__d__first__bit2)

axiom p__pt__d__last__bit_axiom2 :
  (p__pt__d__first__bit2 <  p__pt__d__last__bit2)

axiom p__pt__d__position_axiom2 : (0 <= p__pt__d__position2)

logic user_eq2 : us_rep2, us_rep2 -> bool

type tp2S__ref = { tp2S__content : us_rep2
}

function tp2S__ref___projection(a: tp2S__ref) : us_rep2 = (a).tp2S__content

logic p2__split_discrs : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom H : (p1__split_discrs = of_int(1))

axiom H1 : (of_int(1) = p1__split_discrs)

 (* File "system.ads", line 81, characters 0-0 *)
goal WP_parameter_def : in_range(0)
