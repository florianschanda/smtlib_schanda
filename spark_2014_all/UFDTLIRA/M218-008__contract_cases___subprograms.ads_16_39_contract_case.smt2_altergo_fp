(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic f2 : int -> int

logic f2__function_guard : int, int -> prop

axiom f2__post_axiom :
  (forall val__:int [f2(val__)]. (in_range(val__) -> (((val__ = 0) ->
  (f2(val__) = 0)) and in_range(f2(val__)))))

logic val__ : int

logic attr__ATTRIBUTE_ADDRESS : int

logic subprograms__f2bis__result : int

logic o : int

logic result : int

logic subprograms__f2bis__result1 : int

logic subprograms__f2bis__result2 : int

logic subprograms__f2bis__result3 : int

logic subprograms__f2bis__result4 : int

logic subprograms__f2bis__result5 : int

axiom H : in_range(val__)

axiom H1 : (val__ = 0)

axiom H2 : (subprograms__f2bis__result1 = subprograms__f2bis__result2)

axiom H3 : (subprograms__f2bis__result3 = subprograms__f2bis__result1)

axiom H4 : ((o = f2(val__)) and (in_range(o) and ((bool_eq(val__,
  0) = true) -> (o = 0))))

axiom H5 : (result = subprograms__f2bis__result)

axiom H6 : (subprograms__f2bis__result1 = o)

axiom H7 : (subprograms__f2bis__result4 = subprograms__f2bis__result2)

axiom H8 : (subprograms__f2bis__result5 = subprograms__f2bis__result3)

axiom H9 : (bool_eq(val__, 0) = true)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (subprograms__f2bis__result4 = 0)
