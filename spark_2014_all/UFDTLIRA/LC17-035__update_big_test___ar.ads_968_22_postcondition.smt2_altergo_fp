(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type et1

predicate in_range(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : et1, et1 -> bool

logic dummy : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type et2

predicate in_range1(x: int) = ((1 <= x) and (x <= 25))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : et2, et2 -> bool

logic dummy1 : et2

type et2__ref = { et2__content : et2
}

function et2__ref___projection(a: et2__ref) : et2 = (a).et2__content

logic to_rep1 : et2 -> int

logic of_rep1 : int -> et2

axiom inversion_axiom1 :
  (forall x:et2 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:et2 [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__ar__rec1t__f1 : et1; rec__ar__rec1t__g1 : et2
}

function us_split_fields_F1__projection(a: us_split_fields) : et1 =
  (a).rec__ar__rec1t__f1

function us_split_fields_G1__projection(a: us_split_fields) : et2 =
  (a).rec__ar__rec1t__g1

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__ar__rec1t__f1) = to_rep(((b).us_split_fields1).rec__ar__rec1t__f1)) and
  (to_rep1(((a).us_split_fields1).rec__ar__rec1t__g1) = to_rep1(((b).us_split_fields1).rec__ar__rec1t__g1))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__ar__rec1t__f1) = to_rep(((b).us_split_fields1).rec__ar__rec1t__f1)) and
  (to_rep1(((a).us_split_fields1).rec__ar__rec1t__g1) = to_rep1(((b).us_split_fields1).rec__ar__rec1t__g1)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:et1. forall a1:et2. (0 <= object__size({ us_split_fields1 = {
  rec__ar__rec1t__f1 = a; rec__ar__rec1t__g1 = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:et1. forall a1:et2. (0 <= object__alignment({ us_split_fields1 =
  { rec__ar__rec1t__f1 = a; rec__ar__rec1t__g1 = a1 } })))

logic ar__rec1t__f1__first__bit : int

logic ar__rec1t__f1__last__bit : int

logic ar__rec1t__f1__position : int

axiom ar__rec1t__f1__first__bit_axiom : (0 <= ar__rec1t__f1__first__bit)

axiom ar__rec1t__f1__last__bit_axiom :
  (ar__rec1t__f1__first__bit <  ar__rec1t__f1__last__bit)

axiom ar__rec1t__f1__position_axiom : (0 <= ar__rec1t__f1__position)

logic ar__rec1t__g1__first__bit : int

logic ar__rec1t__g1__last__bit : int

logic ar__rec1t__g1__position : int

axiom ar__rec1t__g1__first__bit_axiom : (0 <= ar__rec1t__g1__first__bit)

axiom ar__rec1t__g1__last__bit_axiom :
  (ar__rec1t__g1__first__bit <  ar__rec1t__g1__last__bit)

axiom ar__rec1t__g1__position_axiom : (0 <= ar__rec1t__g1__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : et1

logic dummy3 : et2

type rec1t__ref = { rec1t__content : us_rep
}

function rec1t__ref___projection(a: rec1t__ref) : us_rep = (a).rec1t__content

type et3

predicate in_range2(x: int) = ((10 <= x) and (x <= 90))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : et3, et3 -> bool

logic dummy4 : et3

type et3__ref = { et3__content : et3
}

function et3__ref___projection(a: et3__ref) : et3 = (a).et3__content

logic to_rep2 : et3 -> int

logic of_rep2 : int -> et3

axiom inversion_axiom2 :
  (forall x:et3 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:et3 [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type enum1ta

predicate in_range3(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : enum1ta, enum1ta -> bool

logic dummy5 : enum1ta

type enum1ta__ref = { enum1ta__content : enum1ta
}

function enum1ta__ref___projection(a: enum1ta__ref) : enum1ta =
  (a).enum1ta__content

logic to_rep3 : enum1ta -> int

logic of_rep3 : int -> enum1ta

axiom inversion_axiom3 :
  (forall x:enum1ta [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:enum1ta [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields2 = { rec__ar__rec2t__f2 : et3; rec__ar__rec2t__g2 :
us_rep; rec__ar__rec2t__h2 : enum1ta
}

function us_split_fields_F2__projection(a: us_split_fields2) : et3 =
  (a).rec__ar__rec2t__f2

function us_split_fields_G2__projection(a: us_split_fields2) : us_rep =
  (a).rec__ar__rec2t__g2

function us_split_fields_H2__projection(a: us_split_fields2) : enum1ta =
  (a).rec__ar__rec2t__h2

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  (((((to_rep2(((a).us_split_fields3).rec__ar__rec2t__f2) = to_rep2(((b).us_split_fields3).rec__ar__rec2t__f2)) and
  (bool_eq3(((a).us_split_fields3).rec__ar__rec2t__g2,
  ((b).us_split_fields3).rec__ar__rec2t__g2) = true)) and
  (to_rep3(((a).us_split_fields3).rec__ar__rec2t__h2) = to_rep3(((b).us_split_fields3).rec__ar__rec2t__h2))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields3).rec__ar__rec2t__f2) = to_rep2(((b).us_split_fields3).rec__ar__rec2t__f2)) and
  (bool_eq3(((a).us_split_fields3).rec__ar__rec2t__g2,
  ((b).us_split_fields3).rec__ar__rec2t__g2) = true)) and
  (to_rep3(((a).us_split_fields3).rec__ar__rec2t__h2) = to_rep3(((b).us_split_fields3).rec__ar__rec2t__h2)))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:et3. forall a1:et1. forall a2:et2. forall a3:enum1ta.
  (0 <= object__size1({ us_split_fields3 = { rec__ar__rec2t__f2 = a;
  rec__ar__rec2t__g2 = { us_split_fields1 = { rec__ar__rec1t__f1 = a1;
  rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:et3. forall a1:et1. forall a2:et2. forall a3:enum1ta.
  (0 <= object__alignment1({ us_split_fields3 = { rec__ar__rec2t__f2 = a;
  rec__ar__rec2t__g2 = { us_split_fields1 = { rec__ar__rec1t__f1 = a1;
  rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 = a3 } })))

logic ar__rec2t__f2__first__bit : int

logic ar__rec2t__f2__last__bit : int

logic ar__rec2t__f2__position : int

axiom ar__rec2t__f2__first__bit_axiom : (0 <= ar__rec2t__f2__first__bit)

axiom ar__rec2t__f2__last__bit_axiom :
  (ar__rec2t__f2__first__bit <  ar__rec2t__f2__last__bit)

axiom ar__rec2t__f2__position_axiom : (0 <= ar__rec2t__f2__position)

logic ar__rec2t__g2__first__bit : int

logic ar__rec2t__g2__last__bit : int

logic ar__rec2t__g2__position : int

axiom ar__rec2t__g2__first__bit_axiom : (0 <= ar__rec2t__g2__first__bit)

axiom ar__rec2t__g2__last__bit_axiom :
  (ar__rec2t__g2__first__bit <  ar__rec2t__g2__last__bit)

axiom ar__rec2t__g2__position_axiom : (0 <= ar__rec2t__g2__position)

logic ar__rec2t__h2__first__bit : int

logic ar__rec2t__h2__last__bit : int

logic ar__rec2t__h2__position : int

axiom ar__rec2t__h2__first__bit_axiom : (0 <= ar__rec2t__h2__first__bit)

axiom ar__rec2t__h2__last__bit_axiom :
  (ar__rec2t__h2__first__bit <  ar__rec2t__h2__last__bit)

axiom ar__rec2t__h2__position_axiom : (0 <= ar__rec2t__h2__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy6 : et3

logic dummy7 : et1

logic dummy8 : et2

logic dummy9 : enum1ta

type rec2t__ref = { rec2t__content : us_rep1
}

function rec2t__ref___projection(a: rec2t__ref) : us_rep1 =
  (a).rec2t__content

type et4

predicate in_range4(x: int) = ((50 <= x) and (x <= 59))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : et4, et4 -> bool

logic dummy10 : et4

type et4__ref = { et4__content : et4
}

function et4__ref___projection(a: et4__ref) : et4 = (a).et4__content

logic to_rep4 : et4 -> int

logic of_rep4 : int -> et4

axiom inversion_axiom4 :
  (forall x:et4 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:et4 [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields4 = { rec__ar__rec3t__f3 : us_rep1; rec__ar__rec3t__g3 :
et4
}

function us_split_fields_F3__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__ar__rec3t__f3

function us_split_fields_G3__projection(a: us_split_fields4) : et4 =
  (a).rec__ar__rec3t__g3

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq8 : us_rep2, us_rep2 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq8(a, b)].
  ((((bool_eq6(((a).us_split_fields5).rec__ar__rec3t__f3,
  ((b).us_split_fields5).rec__ar__rec3t__f3) = true) and
  (to_rep4(((a).us_split_fields5).rec__ar__rec3t__g3) = to_rep4(((b).us_split_fields5).rec__ar__rec3t__g3))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((bool_eq6(((a).us_split_fields5).rec__ar__rec3t__f3,
  ((b).us_split_fields5).rec__ar__rec3t__f3) = true) and
  (to_rep4(((a).us_split_fields5).rec__ar__rec3t__g3) = to_rep4(((b).us_split_fields5).rec__ar__rec3t__g3)))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:et3. forall a1:et1. forall a2:et2. forall a3:enum1ta.
  forall a4:et4. (0 <= object__size2({ us_split_fields5 = {
  rec__ar__rec3t__f3 = { us_split_fields3 = { rec__ar__rec2t__f2 = a;
  rec__ar__rec2t__g2 = { us_split_fields1 = { rec__ar__rec1t__f1 = a1;
  rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 = a3 } };
  rec__ar__rec3t__g3 = a4 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:et3. forall a1:et1. forall a2:et2. forall a3:enum1ta.
  forall a4:et4. (0 <= object__alignment2({ us_split_fields5 = {
  rec__ar__rec3t__f3 = { us_split_fields3 = { rec__ar__rec2t__f2 = a;
  rec__ar__rec2t__g2 = { us_split_fields1 = { rec__ar__rec1t__f1 = a1;
  rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 = a3 } };
  rec__ar__rec3t__g3 = a4 } })))

logic ar__rec3t__f3__first__bit : int

logic ar__rec3t__f3__last__bit : int

logic ar__rec3t__f3__position : int

axiom ar__rec3t__f3__first__bit_axiom : (0 <= ar__rec3t__f3__first__bit)

axiom ar__rec3t__f3__last__bit_axiom :
  (ar__rec3t__f3__first__bit <  ar__rec3t__f3__last__bit)

axiom ar__rec3t__f3__position_axiom : (0 <= ar__rec3t__f3__position)

logic ar__rec3t__g3__first__bit : int

logic ar__rec3t__g3__last__bit : int

logic ar__rec3t__g3__position : int

axiom ar__rec3t__g3__first__bit_axiom : (0 <= ar__rec3t__g3__first__bit)

axiom ar__rec3t__g3__last__bit_axiom :
  (ar__rec3t__g3__first__bit <  ar__rec3t__g3__last__bit)

axiom ar__rec3t__g3__position_axiom : (0 <= ar__rec3t__g3__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy11 : et3

logic dummy12 : et1

logic dummy13 : et2

logic dummy14 : enum1ta

logic dummy15 : et4

type rec3t__ref = { rec3t__content : us_rep2
}

function rec3t__ref___projection(a: rec3t__ref) : us_rep2 =
  (a).rec3t__content

logic attr__ATTRIBUTE_ADDRESS : int

logic a : et3

logic a1 : et1

logic a2 : et2

logic a3 : enum1ta

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "ar.ads", line 961, characters 0-0 *)
goal WP_parameter_def :
  (forall r__split_fields:et3. forall r__split_fields1:et1.
  forall r__split_fields2:et2. forall r__split_fields3:enum1ta.
  forall r__split_fields4:et4. forall o:et1. forall o1:et1. forall o2:et2.
  forall o3:et1. forall o4:et2. forall o5:et3. forall o6:et1. forall o7:et2.
  forall o8:enum1ta. forall o9:et3. forall o10:et1. forall o11:et2.
  forall o12:enum1ta. forall o13:et3. forall o14:et1. forall o15:et2.
  forall o16:enum1ta. forall o17:et4. forall temp___7052:et3.
  forall temp___70521:et1. forall temp___70522:et2.
  forall temp___70523:enum1ta. forall temp___70524:et4. forall result:et3.
  forall result1:et1. forall result2:et2. forall result3:enum1ta.
  forall result4:et4. forall r__split_fields5:et3.
  forall r__split_fields6:et1. forall r__split_fields7:et2.
  forall r__split_fields8:enum1ta. forall r__split_fields9:et4.
  forall result5:et3. forall result6:et1. forall result7:et2.
  forall result8:enum1ta. forall result9:et4.
  forall r__split_fields10:us_split_fields4.
  forall r__split_fields11:us_split_fields__ref2.
  forall r__split_fields12:us_split_fields4. ((in_range(e) and
  ((((((result = r__split_fields) and (((result1 = r__split_fields1) and
  (result2 = r__split_fields2)) and (result3 = r__split_fields3))) and
  (result4 = r__split_fields4)) and (((a = r__split_fields5) and
  (((a1 = r__split_fields6) and (a2 = r__split_fields7)) and
  (a3 = r__split_fields8))) and (r__split_fields4 = r__split_fields9))) and
  ((((((((to_rep(o) = e) and ((o = o1) and (r__split_fields7 = o2))) and
  ((o3 = o1) and (o4 = o2))) and ((r__split_fields5 = o5) and (((o6 = o3) and
  (o7 = o4)) and (r__split_fields8 = o8)))) and ((o9 = o5) and
  (((o10 = o6) and (o11 = o7)) and (o12 = o8)))) and (((o13 = o9) and
  (((o14 = o10) and (o15 = o11)) and (o16 = o12))) and
  (r__split_fields9 = o17))) and (((o13 = temp___7052) and
  (((o14 = temp___70521) and (o15 = temp___70522)) and
  (o16 = temp___70523))) and (o17 = temp___70524))) and
  ((((result5 = r__split_fields5) and (((result6 = r__split_fields6) and
  (result7 = r__split_fields7)) and (result8 = r__split_fields8))) and
  (result9 = r__split_fields9)) and (r__split_fields10 = {
  rec__ar__rec3t__f3 = { us_split_fields3 = { rec__ar__rec2t__f2 =
  temp___7052; rec__ar__rec2t__g2 = { us_split_fields1 = {
  rec__ar__rec1t__f1 = temp___70521; rec__ar__rec1t__g1 = temp___70522 } };
  rec__ar__rec2t__h2 = temp___70523 } }; rec__ar__rec3t__g3 = temp___70524
  })))) and ((r__split_fields11 = { us_split_fields__content2 =
  r__split_fields10 }) and (r__split_fields12 = r__split_fields10)))) ->
  (bool_eq8({ us_split_fields5 =
  (r__split_fields11).us_split_fields__content2 }, { us_split_fields5 = {
  rec__ar__rec3t__f3 = { us_split_fields3 = { rec__ar__rec2t__f2 = a;
  rec__ar__rec2t__g2 = { us_split_fields1 = { rec__ar__rec1t__f1 = of_rep(e);
  rec__ar__rec1t__g1 = a2 } }; rec__ar__rec2t__h2 = a3 } };
  rec__ar__rec3t__g3 = r__split_fields4 } }) = true)))
