(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort cur 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 6)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (cur cur) Bool)
(declare-const dummy cur)
(declare-datatypes () ((cur__ref (mk_cur__ref (cur__content cur)))))
(define-fun cur__ref___projection ((a cur__ref)) cur (cur__content a))
(declare-fun to_rep (cur) Int)
(declare-fun of_rep (Int) cur)
(assert (forall ((x cur)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x cur)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort raw_amount 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1000000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (raw_amount raw_amount) Bool)
(declare-const dummy1 raw_amount)
(declare-datatypes () ((raw_amount__ref (mk_raw_amount__ref (raw_amount__content raw_amount)))))
(define-fun raw_amount__ref___projection ((a raw_amount__ref)) raw_amount (raw_amount__content a))
(declare-fun to_rep1 (raw_amount) Int)
(declare-fun of_rep1 (Int) raw_amount)
(assert (forall ((x raw_amount)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x raw_amount)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__money__amount__currency cur) (rec__money__amount__raw raw_amount)))))
(define-fun us_split_fields_Currency__projection ((a us_split_fields)) cur (rec__money__amount__currency a))
(define-fun us_split_fields_Raw__projection ((a us_split_fields)) raw_amount (rec__money__amount__raw a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__money__amount__currency (us_split_fields1 a))) (to_rep (rec__money__amount__currency (us_split_fields1 b)))) (= (to_rep1 (rec__money__amount__raw (us_split_fields1 a))) (to_rep1 (rec__money__amount__raw (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const money__amount__currency__first__bit Int)
(declare-const money__amount__currency__last__bit Int)
(declare-const money__amount__currency__position Int)
(assert (<= 0 money__amount__currency__first__bit))
(assert (< money__amount__currency__first__bit money__amount__currency__last__bit))
(assert (<= 0 money__amount__currency__position))
(declare-const money__amount__raw__first__bit Int)
(declare-const money__amount__raw__last__bit Int)
(declare-const money__amount__raw__position Int)
(assert (<= 0 money__amount__raw__first__bit))
(assert (< money__amount__raw__first__bit money__amount__raw__last__bit))
(assert (<= 0 money__amount__raw__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((amount__ref (mk_amount__ref (amount__content us_rep)))))
(define-fun amount__ref___projection ((a amount__ref)) us_rep (amount__content a))
(declare-const a us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 6)) (in_range1 temp___expr_158)))
(define-fun dynamic_invariant1 ((temp___expr_172 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool (=> (or (= temp___is_init_168 true) (<= 0 1000000)) (in_range2 temp___expr_172)))
(assert (and (= (to_rep (rec__money__amount__currency (us_split_fields1 a))) (to_rep (rec__money__amount__currency (us_split_fields1 b)))) (<= (to_rep1 (rec__money__amount__raw (us_split_fields1 b))) (to_rep1 (rec__money__amount__raw (us_split_fields1 a))))))
(assert (not (in_range2 (- (to_rep1 (rec__money__amount__raw (us_split_fields1 a))) (to_rep1 (rec__money__amount__raw (us_split_fields1 b)))))))
(check-sat)
(exit)
