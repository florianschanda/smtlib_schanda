(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort count_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (count_type count_type) Bool)
(declare-const dummy count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(declare-fun to_rep (count_type) Int)
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__my_ordered_maps__n__map__capacity count_type)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) count_type (rec__my_ordered_maps__n__map__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__my_ordered_maps__n__map us_main_type)))))
(define-fun us_split_fields_Map__2__projection ((a us_split_fields)) us_main_type (rec__my_ordered_maps__n__map a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___11__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___12__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 a))) (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__my_ordered_maps__n__map (us_split_fields1 a)) (rec__my_ordered_maps__n__map (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const my_ordered_maps__n__map__capacity__first__bit Int)
(declare-const my_ordered_maps__n__map__capacity__last__bit Int)
(declare-const my_ordered_maps__n__map__capacity__position Int)
(assert (<= 0 my_ordered_maps__n__map__capacity__first__bit))
(assert (< my_ordered_maps__n__map__capacity__first__bit my_ordered_maps__n__map__capacity__last__bit))
(assert (<= 0 my_ordered_maps__n__map__capacity__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___4__projection ((a map__ref)) us_rep (map__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-fun oeq1 (Int us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__my_ordered_maps__n__cursor__node count_type)))))
(define-fun us_split_fields_Node__2__projection ((a us_split_fields2)) count_type (rec__my_ordered_maps__n__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___13__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep (rec__my_ordered_maps__n__cursor__node (us_split_fields3 a))) (to_rep (rec__my_ordered_maps__n__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const my_ordered_maps__n__cursor__node__first__bit Int)
(declare-const my_ordered_maps__n__cursor__node__last__bit Int)
(declare-const my_ordered_maps__n__cursor__node__position Int)
(assert (<= 0 my_ordered_maps__n__cursor__node__first__bit))
(assert (< my_ordered_maps__n__cursor__node__first__bit my_ordered_maps__n__cursor__node__last__bit))
(assert (<= 0 my_ordered_maps__n__cursor__node__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___2__projection ((a cursor__ref)) us_rep1 (cursor__content a))
(declare-const no_element us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-fun length1 (Int us_rep) Int)
(declare-fun length__function_guard1 (Int Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range1 temp___expr_166)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 container)))) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (! (dynamic_invariant (length1 attr__tag container) true false true true) :pattern ((length1 attr__tag container))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep2)))))
(define-fun map__ref___6__projection ((a map__ref1)) us_rep2 (map__content1 a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___6__projection ((a key_type__ref)) us_rep1 (key_type__content a))
(declare-fun get (us_rep2 us_rep1) Int)
(declare-fun get__function_guard (Int us_rep2 us_rep1) Bool)
(declare-sort element_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq4 (element_type element_type) Bool)
(declare-const dummy4 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___8__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_646 Int) (temp___is_init_642 Bool) (temp___skip_constant_643 Bool) (temp___do_toplevel_644 Bool) (temp___do_typ_inv_645 Bool)) Bool (=> (or (= temp___is_init_642 true) (<= 1 2147483647)) (in_range2 temp___expr_646)))
(declare-fun length2 (us_rep2) Int)
(declare-fun length__function_guard2 (Int us_rep2) Bool)
(declare-fun is_empty (us_rep2) Bool)
(declare-fun is_empty__function_guard (Bool us_rep2) Bool)
(define-fun default_initial_assumption ((temp___expr_654 us_rep2) (temp___skip_top_level_655 Bool)) Bool (=> (not (= temp___skip_top_level_655 true)) (and (= (is_empty temp___expr_654) true) (= (length2 temp___expr_654) 0))))
(declare-fun has_key (us_rep2 us_rep1) Bool)
(declare-fun has_key__function_guard (Bool us_rep2 us_rep1) Bool)
(declare-fun witness (us_rep2 us_rep1) Int)
(declare-fun witness__function_guard (Int us_rep2 us_rep1) Bool)
(declare-fun w_get (us_rep2 Int) Int)
(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)
(assert (forall ((container us_rep2)) (forall ((key us_rep1)) (! (=> (= (has_key container key) true) (let ((result (get container key))) (and (=> (= (distinct 0 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep1)) (=> (= (has_key container k) true) (= (= (bool_eq1 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant1 result true false true true)))) :pattern ((get container key))))))
(declare-fun positions (us_rep) us_rep2)
(declare-fun positions__function_guard (us_rep2 us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep1)) (=> (= (has_key result i) true) (and (and (<= 1 (get result i)) (<= (get result i) (length container))) (forall ((j us_rep1)) (=> (= (has_key result j) true) (=> (= (get result i) (get result j)) (= (bool_eq1 i j) true))))))))) :pattern ((positions container)))))
(define-fun has_element ((container us_rep) (position us_rep1)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)
(declare-fun has_element1 (Int us_rep us_rep1) Bool)
(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)
(assert true)
(declare-const container us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort integer 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_18)))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__my_ordered_maps__my_rec__f integer) (rec__my_ordered_maps__my_rec__g integer)))))
(define-fun us_split_fields_F__projection ((a us_split_fields4)) integer (rec__my_ordered_maps__my_rec__f a))
(define-fun us_split_fields_G__projection ((a us_split_fields4)) integer (rec__my_ordered_maps__my_rec__g a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___10__projection ((a us_rep3)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq3 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep1 (rec__my_ordered_maps__my_rec__f (us_split_fields5 a))) (to_rep1 (rec__my_ordered_maps__my_rec__f (us_split_fields5 b)))) (= (to_rep1 (rec__my_ordered_maps__my_rec__g (us_split_fields5 a))) (to_rep1 (rec__my_ordered_maps__my_rec__g (us_split_fields5 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const my_ordered_maps__my_rec__f__first__bit Int)
(declare-const my_ordered_maps__my_rec__f__last__bit Int)
(declare-const my_ordered_maps__my_rec__f__position Int)
(assert (<= 0 my_ordered_maps__my_rec__f__first__bit))
(assert (< my_ordered_maps__my_rec__f__first__bit my_ordered_maps__my_rec__f__last__bit))
(assert (<= 0 my_ordered_maps__my_rec__f__position))
(declare-const my_ordered_maps__my_rec__g__first__bit Int)
(declare-const my_ordered_maps__my_rec__g__last__bit Int)
(declare-const my_ordered_maps__my_rec__g__position Int)
(assert (<= 0 my_ordered_maps__my_rec__g__first__bit))
(assert (< my_ordered_maps__my_rec__g__first__bit my_ordered_maps__my_rec__g__last__bit))
(assert (<= 0 my_ordered_maps__my_rec__g__position))
(declare-fun user_eq6 (us_rep3 us_rep3) Bool)
(declare-const dummy6 us_rep3)
(declare-datatypes () ((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep3)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep3 (my_rec__content a))
(define-fun my_lt ((x us_rep3) (y us_rep3)) Bool (< (to_rep1 (rec__my_ordered_maps__my_rec__f (us_split_fields5 x))) (to_rep1 (rec__my_ordered_maps__my_rec__f (us_split_fields5 y)))))
(declare-fun my_lt__function_guard (Bool us_rep3 us_rep3) Bool)
(declare-datatypes () ((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep3)))))
(define-fun key_type__ref___4__projection ((a key_type__ref1)) us_rep3 (key_type__content1 a))
(define-fun equivalent_keys ((left us_rep3) (right us_rep3)) Bool (and (not (my_lt left right)) (not (my_lt right left))))
(declare-fun equivalent_keys__function_guard (Bool us_rep3 us_rep3) Bool)
(assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep4 0)
(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-fun user_eq7 (us_rep4 us_rep4) Bool)
(declare-const dummy7 us_rep4)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep4)))))
(define-fun map__ref___5__projection ((a map__ref2)) us_rep4 (map__content2 a))
(declare-fun length3 (us_rep4) Int)
(declare-fun length__function_guard3 (Int us_rep4) Bool)
(declare-fun is_empty1 (us_rep4) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)
(define-fun default_initial_assumption1 ((temp___expr_593 us_rep4) (temp___skip_top_level_594 Bool)) Bool (=> (not (= temp___skip_top_level_594 true)) (and (= (is_empty1 temp___expr_593) true) (= (length3 temp___expr_593) 0))))
(declare-fun model__ (us_rep) us_rep4)
(declare-fun model____function_guard (us_rep4 us_rep) Bool)
(assert true)
(declare-fun oeq2 (us_rep4 us_rep4) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep4 us_rep4) Bool)
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (oeq left right) true) (= (oeq2 (model__ left) (model__ right)) true)) :pattern ((oeq left right)))))
(assert true)
(declare-datatypes () ((key_type__ref2 (mk_key_type__ref2 (key_type__content2 us_rep3)))))
(define-fun key_type__ref___5__projection ((a key_type__ref2)) us_rep3 (key_type__content2 a))
(declare-fun has_key1 (us_rep4 us_rep3) Bool)
(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep3) Bool)
(assert (forall ((container1 us_rep4)) (forall ((key us_rep3)) (! (=> (= (distinct 1 0) true) (=> (exists ((k us_rep3)) (and (= (has_key1 container1 k) true) (= (equivalent_keys k key) true))) (= (has_key1 container1 key) true))) :pattern ((has_key1 container1 key))))))
(declare-sort element_type1 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq8 (element_type1 element_type1) Bool)
(declare-const dummy8 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___6__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant3 ((temp___expr_585 Int) (temp___is_init_581 Bool) (temp___skip_constant_582 Bool) (temp___do_toplevel_583 Bool) (temp___do_typ_inv_584 Bool)) Bool (=> (or (= temp___is_init_581 true) (<= (- 2147483648) 2147483647)) (in_range4 temp___expr_585)))
(declare-fun witness1 (us_rep4 us_rep3) Int)
(declare-fun witness__function_guard1 (Int us_rep4 us_rep3) Bool)
(declare-fun w_get1 (us_rep4 Int) Int)
(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)
(declare-fun get1 (us_rep4 us_rep3) Int)
(declare-fun get__function_guard1 (Int us_rep4 us_rep3) Bool)
(assert (forall ((container1 us_rep4)) (forall ((key us_rep3)) (! (=> (= (has_key1 container1 key) true) (let ((result (get1 container1 key))) (and (=> (= (distinct 1 0) true) (and (= result (w_get1 container1 (witness1 container1 key))) (forall ((k us_rep3)) (=> (= (has_key1 container1 k) true) (= (= (equivalent_keys k key) true) (= (witness1 container1 key) (witness1 container1 k))))))) (dynamic_invariant3 result true false true true)))) :pattern ((get1 container1 key))))))
(assert (forall ((container1 us_rep4)) (! (dynamic_invariant (length3 container1) true false true true) :pattern ((length3 container1)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (oeq2 left right) true) (and (forall ((key us_rep3)) (=> (= (has_key1 left key) true) (and (= (has_key1 right key) true) (= (get1 right key) (get1 left key))))) (forall ((key us_rep3)) (=> (= (has_key1 right key) true) (= (has_key1 left key) true))))) :pattern ((oeq2 left right)))))
(assert (forall ((container1 us_rep4)) (! (= (= (is_empty1 container1) true) (forall ((key us_rep3)) (not (= (has_key1 container1 key) true)))) :pattern ((is_empty1 container1)))))
(declare-fun has_witness (us_rep4 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep4 Int) Bool)
(assert true)
(assert (forall ((container1 us_rep4)) (forall ((key us_rep3)) (! (=> (= (has_key1 container1 key) true) (let ((result (witness1 container1 key))) (and (= (has_witness container1 result) true) (dynamic_invariant result true false true true)))) :pattern ((witness1 container1 key))))))
(assert (forall ((container1 us_rep4)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant witness2 true true true true) (= (has_witness container1 witness2) true)) (dynamic_invariant3 (w_get1 container1 witness2) true false true true)) :pattern ((w_get1 container1 witness2))))))
(assert (forall ((container1 us_rep2)) (forall ((key us_rep1)) (! (=> (= (distinct 0 0) true) (=> (exists ((k us_rep1)) (and (= (has_key container1 k) true) (= (bool_eq1 k key) true))) (= (has_key container1 key) true))) :pattern ((has_key container1 key))))))
(assert (forall ((container1 us_rep2)) (! (dynamic_invariant (length2 container1) true false true true) :pattern ((length2 container1)))))
(assert (forall ((container1 us_rep2)) (! (= (= (is_empty container1) true) (forall ((key us_rep1)) (not (= (has_key container1 key) true)))) :pattern ((is_empty container1)))))
(declare-fun has_witness1 (us_rep2 Int) Bool)
(declare-fun has_witness__function_guard1 (Bool us_rep2 Int) Bool)
(assert true)
(assert (forall ((container1 us_rep2)) (forall ((key us_rep1)) (! (=> (= (has_key container1 key) true) (let ((result (witness container1 key))) (and (= (has_witness1 container1 result) true) (dynamic_invariant result true false true true)))) :pattern ((witness container1 key))))))
(assert (forall ((container1 us_rep2)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant witness2 true true true true) (= (has_witness1 container1 witness2) true)) (dynamic_invariant1 (w_get container1 witness2) true false true true)) :pattern ((w_get container1 witness2))))))
(declare-const position__split_fields count_type)
(declare-const o count_type)
(declare-const o1 count_type)
(declare-const temp___955 count_type)
(declare-const o2 us_rep2)
(declare-const o3 Int)
(assert (= (to_rep o) 0))
(assert (= o o1))
(assert (= temp___955 o1))
(assert (= (mk___rep1 (mk___split_fields1 temp___955)) no_element))
(assert (or (= (has_key (positions container) (mk___rep1 (mk___split_fields1 position__split_fields))) true) (= (bool_eq1 (mk___rep1 (mk___split_fields1 position__split_fields)) no_element) true)))
(assert (not (= (bool_eq1 (mk___rep1 (mk___split_fields1 position__split_fields)) no_element) true)))
(assert (and (= o3 (length container)) (and (in_range1 o3) (<= o3 (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 container)))))))
(assert (and (= o2 (positions container)) (and (not (= (has_key o2 no_element) true)) (forall ((i us_rep1)) (=> (= (has_key o2 i) true) (and (and (<= 1 (get o2 i)) (<= (get o2 i) (length container))) (forall ((j us_rep1)) (=> (= (has_key o2 j) true) (=> (= (get o2 i) (get o2 j)) (= (bool_eq1 i j) true))))))))))
(assert (not (= (has_key o2 (mk___rep1 (mk___split_fields1 position__split_fields))) true)))
(check-sat)
(exit)
