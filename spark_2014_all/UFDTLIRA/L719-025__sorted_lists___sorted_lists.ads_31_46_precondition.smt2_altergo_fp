(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tcount_typeB

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type count_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type element_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : element_type, element_type -> bool

logic dummy2 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__sorted_lists__my_lists__list__capacity :
count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__sorted_lists__my_lists__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__sorted_lists__my_lists__list : us_main_type
}

function us_split_fields_List__projection(a: us_split_fields) : us_main_type =
  (a).rec__sorted_lists__my_lists__list

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__sorted_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__sorted_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__sorted_lists__my_lists__list,
  ((b).us_split_fields1).rec__sorted_lists__my_lists__list) = true)) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__sorted_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__sorted_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__sorted_lists__my_lists__list,
  ((b).us_split_fields1).rec__sorted_lists__my_lists__list) = true))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = a1 } })))

logic sorted_lists__my_lists__list__capacity__first__bit : int

logic sorted_lists__my_lists__list__capacity__last__bit : int

logic sorted_lists__my_lists__list__capacity__position : int

axiom sorted_lists__my_lists__list__capacity__first__bit_axiom :
  (0 <= sorted_lists__my_lists__list__capacity__first__bit)

axiom sorted_lists__my_lists__list__capacity__last__bit_axiom :
  (sorted_lists__my_lists__list__capacity__first__bit <  sorted_lists__my_lists__list__capacity__last__bit)

axiom sorted_lists__my_lists__list__capacity__position_axiom :
  (0 <= sorted_lists__my_lists__list__capacity__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : count_type

logic dummy4 : us_main_type

type list__ref = { list__content : us_rep
}

function list__ref___projection(a: list__ref) : us_rep = (a).list__content

type us_split_fields2 = { rec__sorted_lists__my_lists__cursor__node :
count_type
}

function us_split_fields_Node__projection(a: us_split_fields2) : count_type =
  (a).rec__sorted_lists__my_lists__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  (((to_rep(((a).us_split_fields3).rec__sorted_lists__my_lists__cursor__node) = to_rep(((b).us_split_fields3).rec__sorted_lists__my_lists__cursor__node)) ->
  (bool_eq6(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__sorted_lists__my_lists__cursor__node) = to_rep(((b).us_split_fields3).rec__sorted_lists__my_lists__cursor__node))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = a } })))

logic sorted_lists__my_lists__cursor__node__first__bit : int

logic sorted_lists__my_lists__cursor__node__last__bit : int

logic sorted_lists__my_lists__cursor__node__position : int

axiom sorted_lists__my_lists__cursor__node__first__bit_axiom :
  (0 <= sorted_lists__my_lists__cursor__node__first__bit)

axiom sorted_lists__my_lists__cursor__node__last__bit_axiom :
  (sorted_lists__my_lists__cursor__node__first__bit <  sorted_lists__my_lists__cursor__node__last__bit)

axiom sorted_lists__my_lists__cursor__node__position_axiom :
  (0 <= sorted_lists__my_lists__cursor__node__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container1 } })]. ((length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 }
  }) <= to_rep(container)) and in_range2(length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }))))

type extended_index

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq8 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

type element_type1

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : element_type1, element_type1 -> bool

logic dummy8 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___3__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2 [user_eq6(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length1(a), length1(b)), false,
  false)))))

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall position:int [get(container, position)]. ((in_range4(position) and
  ((1 <= position) and (position <= (0 + length1(container))))) ->
  in_range5(get(container, position)))))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq10 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy9 : us_rep3

type map__ref = { map__content : us_rep3
}

function map__ref___projection(a: map__ref) : us_rep3 = (a).map__content

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref___projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

logic get1 : us_rep3, us_rep1 -> int

logic get__function_guard1 : int, us_rep3, us_rep1 -> prop

type element_type2

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : element_type2, element_type2 -> bool

logic dummy10 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___4__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

logic length2 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

logic is_empty : us_rep3 -> bool

logic is_empty__function_guard : bool, us_rep3 -> prop

logic has_key : us_rep3, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep3, us_rep1 -> prop

logic witness : us_rep3, us_rep1 -> int

logic witness__function_guard : int, us_rep3, us_rep1 -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall key:count_type [get1(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } })]. ((has_key(container,
  { us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = key }
  }) = true) -> (((of_int(0) = true) -> ((get1(container, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = key }
  }) = w_get(container, witness(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = k } }) = true) -> ((bool_eq6({
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = k } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = key }
  }) = true) <-> (witness(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } }) = witness(container, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = k } }))))))) and
  in_range6(get1(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } }))))))

logic model__ : us_rep -> us_rep2

logic model____function_guard : us_rep2, us_rep -> prop

axiom model____post_axiom :
  (forall container:count_type. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container1 } })]. (length1(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 }
  })) = length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } })))

logic positions : us_rep -> us_rep3

logic positions__function_guard : us_rep3, us_rep -> prop

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container1 } })]. ((not (has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }) = true) -> (((1 <= get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  })) and (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }) <= length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 }
  }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = j }
  }) = true) -> ((get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }) = get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = j } })) ->
  (bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = j } }) = true)))))))))

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic element__function_guard : int, us_rep, us_rep1 -> prop

type element_type3

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : element_type3, element_type3 -> bool

logic dummy11 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref___2__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

logic range_equal__function_guard : bool, us_rep2, us_rep2, int, int -> prop

logic range_shifted__function_guard : bool, us_rep2, us_rep2, int, int,
  int -> prop

logic p_positions_shifted : us_rep3, us_rep3, int, int -> bool

logic p_positions_shifted__function_guard : bool, us_rep3, us_rep3, int,
  int -> prop

logic first : us_rep -> us_rep1

logic first__function_guard : us_rep1, us_rep -> prop

axiom first__post_axiom :
  (forall container:count_type. forall container1:us_main_type [first({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container1 } })]. (((length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 }
  }) = 0) -> (bool_eq6(first({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }) = true)) and ((not (length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 }
  }) = 0)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }),
  first({ us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container1 } })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }),
  first({ us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container1 } })) = 1)))))

logic previous : us_rep, us_rep1 -> us_rep1

logic previous__function_guard : us_rep1, us_rep, us_rep1 -> prop

axiom previous__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [previous({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = position }
  })]. (((has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = position }
  }) = true) or (bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }) = true)) -> ((((bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }) = true) or (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = position }
  }) = 1)) -> (bool_eq6(previous({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = position }
  }), { us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  no_element } }) = true)) and ((not ((bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }) = true) or (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = position }
  }) = 1))) -> ((has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }),
  previous({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = position }
  })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }),
  previous({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = position }
  })) = (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = position }
  }) - 1))))))))

logic is_sorted : us_rep -> bool

logic is_sorted__function_guard : bool, us_rep -> prop

logic my_lt : int, int -> bool

logic my_lt__function_guard : bool, int, int -> prop

logic m_elements_sorted__function_guard : bool, us_rep2 -> prop

axiom is_sorted__post_axiom :
  (forall container:count_type. forall container1:us_main_type [is_sorted({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container1 } })]. ((is_sorted({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 }
  }) = true) <->
  (forall i:int. (((1 <= i) and (i <= length1(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 }
  })))) ->
  (forall j:int. (((i <= j) and (j <= length1(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 }
  })))) -> ((get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }),
  i) = get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }),
  j)) or (my_lt(get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }),
  i), get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__sorted_lists__my_lists__list = container1 } }),
  j)) = true))))))))

logic container__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic new_item : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom my_lt__post_axiom : true

axiom my_lt__def_axiom :
  (forall i1:int. forall i2:int [my_lt(i1, i2)]. ((my_lt(i1, i2) = true) <->
  (i1 <  i2)))

axiom no_element__def_axiom : (no_element = of_rep(0))

type positive_count_type

predicate in_range8(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : positive_count_type, positive_count_type -> bool

logic dummy12 : positive_count_type

type positive_count_type__ref = { positive_count_type__content :
positive_count_type
}

function positive_count_type__ref___projection(a: positive_count_type__ref) : positive_count_type =
  (a).positive_count_type__content

logic keys_included : us_rep3, us_rep3 -> bool

logic keys_included__function_guard : bool, us_rep3, us_rep3 -> prop

axiom p_positions_shifted__post_axiom :
  (forall small:us_rep3. forall big:us_rep3.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((in_range8(cut1) and in_range2(count)) ->
  (((p_positions_shifted(small, big, cut1, count) = true) ->
  (((keys_included(small, big) = true) and
  (forall i:count_type. ((has_key(small, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) = true) ->
  (((get1(small, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) <  cut1) -> (get1(big, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }) = get1(small, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }))) and ((not (get1(small,
  { us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }) <  cut1)) -> ((get1(big, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) - count) = get1(small, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }))))))) and
  (forall i:count_type. ((has_key(big, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) = true) ->
  ((has_key(small, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) = true) or
  (((cut1 - count) <= (get1(big, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) - count)) and
  ((get1(big, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i }
  }) - count) <= (cut1 - 1)))))))) and ((((keys_included(small,
  big) = true) and
  (forall i:count_type. ((has_key(small, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) = true) ->
  (((get1(small, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) <  cut1) and (get1(big,
  { us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }) = get1(small, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }))) or ((not (get1(small,
  { us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }) <  cut1)) and ((get1(big, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) - count) = get1(small, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = i }
  }))))))) and
  (forall i:count_type. ((has_key(big, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) = true) ->
  ((has_key(small, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) = true) or
  (((cut1 - count) <= (get1(big, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i } }) - count)) and
  ((get1(big, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = i }
  }) - count) <= (cut1 - 1))))))) -> (p_positions_shifted(small, big, cut1,
  count) = true))))))

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  (((0 + length1(container)) <= 2147483647) and
  in_range2(length1(container))))

axiom has_key__post_axiom :
  (forall container:us_rep3.
  (forall key:count_type [has_key(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } })].
  ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields3 = {
   rec__sorted_lists__my_lists__cursor__node = k } }) = true) and (bool_eq6({
   us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = k } }, {
   us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = key }
   }) = true))) ->
  (has_key(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } }) = true)))))

axiom length__post_axiom2 :
  (forall container:us_rep3 [length2(container)].
  in_range2(length2(container)))

axiom is_empty__post_axiom :
  (forall container:us_rep3 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key:count_type. (not (has_key(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } }) = true)))))

axiom keys_included__post_axiom :
  (forall left:us_rep3. forall right:us_rep3 [keys_included(left, right)].
  ((keys_included(left, right) = true) <->
  (forall key:count_type. ((has_key(left, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } }) = true) ->
  (has_key(right, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } }) = true)))))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep3.
  (forall key:count_type [witness(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } })]. ((has_key(container,
  { us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = key }
  }) = true) -> ((has_witness(container, witness(container, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = key }
  })) = true) and in_range2(witness(container, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = key } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep3.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range2(witness1) and (has_witness(container, witness1) = true)) ->
  in_range6(w_get(container, witness1)))))

 (* File "a-cfdlli.ads", line 1572, characters 0-0 *)
goal WP_parameter_def :
  (forall container__split_fields:us_main_type.
  forall current__split_fields:count_type.
  forall sorted_lists__my_insert__current__assume:count_type. forall o:int.
  forall temp___472:count_type. forall o1:int. forall o2:bool. forall i:int.
  forall o3:us_rep3. forall o4:int. forall o5:int. forall o6:int.
  forall o7:bool. forall o8:bool. forall o9:us_rep2. forall o10:int.
  forall i1:int. forall o11:us_rep3. forall o12:int. forall o13:int.
  forall o14:bool. forall o15:int. forall result:count_type.
  forall current__split_fields1:count_type. forall result1:bool.
  forall result2:bool. forall current__split_fields2:count_type.
  forall current__split_fields3:count_type. forall result3:bool.
  forall result4:bool. forall current__split_fields4:count_type.
  forall current__split_fields5:count_type.
  forall current__split_fields6:count_type.
  forall current__split_fields7:count_type.
  forall container__split_fields1:us_main_type.
  forall position__split_fields:count_type.
  forall container__split_fields2:us_main_type.
  forall position__split_fields1:count_type.
  forall current__split_fields8:count_type.
  forall container__split_fields3:us_main_type.
  forall position__split_fields2:count_type.
  forall current__split_fields9:count_type. forall result5:bool.
  forall result6:bool. forall result7:bool. forall result8:bool.
  forall result9:bool. (in_range3(new_item) -> ((length({ us_split_discrs1 =
  { rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }) <  to_rep(container__split_discrs)) -> (((((({
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  sorted_lists__my_insert__current__assume } } = first({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } })) and (((bool_eq1(length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), 0) = true) and (bool_eq6({ us_split_fields3 =
  { rec__sorted_lists__my_lists__cursor__node =
  sorted_lists__my_insert__current__assume } }, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = no_element } }) = true)) or
  ((not (bool_eq1(length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), 0) = true)) and ((has_key(positions({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  sorted_lists__my_insert__current__assume } }) = true) and (get1(positions({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  sorted_lists__my_insert__current__assume } }) = 1))))) and (({
  us_split_fields__content1 = { rec__sorted_lists__my_lists__cursor__node =
  result } } = { us_split_fields__content1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields } }) and
  (sorted_lists__my_insert__current__assume = current__split_fields1))) and
  (((((result2 = has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 }
  })) and ((result2 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 }
  }) = true))) and (((result2 = true) and (((o = get(model__({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }),
  get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 }
  }))) and (in_range7(o) and (o = get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 }
  }))))) and (((o <  new_item) and (result1 = true)) or
  ((not (o <  new_item)) and (result1 = false))))) or
  ((not (result2 = true)) and (result1 = false)))) and (((result1 = true) and
  ((((temp___472 = current__split_fields1) and (((bool_eq6({
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields2 } }, first({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } })) = true) or (get(model__({ us_split_discrs1 =
  { rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), previous({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 }
  }))) <  new_item)) and ((((match_bool(bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 } }),
  length({ us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields }
  }))) = true) and (bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields3 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }) = true)) or ((not (match_bool(bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 } }),
  length({ us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields }
  }))) = true)) and ((has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields3 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields3 }
  }) = (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 }
  }) + 1))))) and (((((result4 = has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields3 }
  })) and ((result4 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields3 }
  }) = true))) and (((result4 = true) and (((o1 = get(model__({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }),
  get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields3 }
  }))) and (in_range7(o1) and (o1 = get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields3 }
  }))))) and (((o1 <  new_item) and (o2 = true)) or
  ((not (o1 <  new_item)) and (o2 = false))))) or ((not (result4 = true)) and
  (o2 = false)))) and (((not (o2 = true)) and (result3 = true)) or
  ((o2 = true) and (result3 = false)))) and (result3 = true))))) and
  ((current__split_fields4 = current__split_fields3) and ({
  rec__sorted_lists__my_lists__cursor__node = current__split_fields5 } = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields3 }))) and
  (({ us_split_fields__content1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields6 } } = {
  us_split_fields__content1 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields4 } }) and ({
  rec__sorted_lists__my_lists__cursor__node = current__split_fields7 } = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields5 })))) or
  ((not (result1 = true)) and
  ((current__split_fields6 = current__split_fields1) and ({
  rec__sorted_lists__my_lists__cursor__node = current__split_fields7 } = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1
  }))))) and (((((((length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }) = (length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }) + 1)) and (has_key(positions({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }), {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields } }) = true)) and (((bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields6 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields }
  }) = length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }))) or ((not (bool_eq6({ us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields6 } }, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node = no_element
  } }) = true)) and (get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields }
  }) = get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields6 }
  }))))) and
  (forall i2:int. (((1 <= i2) and (i2 <= (get1(positions({ us_split_discrs1 =
  { rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields }
  }) - 1))) -> (get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), i2) = get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), i2))))) and
  ((forall i2:int. (((get1(positions({ us_split_discrs1 = {
   rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
   us_split_fields1 = { rec__sorted_lists__my_lists__list =
   container__split_fields1 } }), { us_split_fields3 = {
   rec__sorted_lists__my_lists__cursor__node = position__split_fields }
   }) <= i2) and (i2 <= length({ us_split_discrs1 = {
   rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
   us_split_fields1 = { rec__sorted_lists__my_lists__list =
   container__split_fields } }))) -> (get(model__({ us_split_discrs1 = {
   rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
   us_split_fields1 = { rec__sorted_lists__my_lists__list =
   container__split_fields } }), i2) = get(model__({ us_split_discrs1 = {
   rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
   us_split_fields1 = { rec__sorted_lists__my_lists__list =
   container__split_fields1 } }), (i2 + 1))))) and
  (forall i2:int. ((((get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields }
  }) + 1) <= i2) and (i2 <= (length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }) + 1))) -> (get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), (i2 - 1)) = get(model__({ us_split_discrs1 =
  { rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), i2)))))) and (get(model__({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }),
  get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields }
  })) = new_item)) and (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields } }),
  1) = true)))) and ((({ us_split_fields__content1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields8 } } = {
  us_split_fields__content1 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields6 } }) and
  ((position__split_fields1 = position__split_fields) and
  (container__split_fields2 = container__split_fields1))) and (({
  rec__sorted_lists__my_lists__cursor__node = current__split_fields9 } = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields7 }) and
  (({ rec__sorted_lists__my_lists__cursor__node = position__split_fields2
  } = { rec__sorted_lists__my_lists__cursor__node = position__split_fields
  }) and ({ rec__sorted_lists__my_lists__list = container__split_fields3
  } = { rec__sorted_lists__my_lists__list = container__split_fields1
  }))))) -> (((result5 = has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  })) and ((result5 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  }) = true))) -> ((result5 = true) -> ((((o15 = get(model__({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields2 } }),
  get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  }))) and (in_range7(o15) and (o15 = get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }), get1(positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  }))))) and (((o15 = new_item) and (result6 = true)) or
  ((not (o15 = new_item)) and (result6 = false)))) -> ((result6 = true) ->
  ((((((((o11 = positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } })) and ((not (has_key(o11, { us_split_fields3 =
  { rec__sorted_lists__my_lists__cursor__node = no_element } }) = true)) and
  (forall i2:us_rep1. ((has_key(o11, i2) = true) -> (((1 <= get1(o11,
  i2)) and (get1(o11, i2) <= length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }))) and
  (forall j:us_rep1. ((has_key(o11, j) = true) -> ((get1(o11, i2) = get1(o11,
  j)) -> (bool_eq6(i2, j) = true))))))))) and ((o12 = get1(o11, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields1 } })) and (in_range6(o12) and
  ((of_int(0) = true) -> ((o12 = w_get(o11, witness(o11, { us_split_fields3 =
  { rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  }))) and
  (forall k:us_rep1. ((has_key(o11, k) = true) -> ((bool_eq6(k, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields1 } }) = true) <-> (witness(o11, { us_split_fields3 =
  { rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  }) = witness(o11, k)))))))))) and (o13 = (o12 - 1))) and (((i1 <= o13) and
  (o14 = true)) or ((not (i1 <= o13)) and (o14 = false)))) and
  (((1 <= i1) and (result8 = o14)) or ((not (1 <= i1)) and
  (result8 = false)))) and ((result7 = true) <->
  (forall i2:int. (((1 <= i2) and (i2 <= (get1(positions({ us_split_discrs1 =
  { rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }), { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  }) - 1))) -> (get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }), i2) = get(model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), i2)))))) -> ((result7 = true) ->
  ((((((o5 = length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } })) and (in_range2(o5) and
  (o5 <= to_rep(container__split_discrs)))) and (o6 = (o5 - 1))) and
  (((i <= o6) and (o7 = true)) or ((not (i <= o6)) and (o7 = false)))) and
  (((((o3 = positions({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } })) and ((not (has_key(o3, { us_split_fields3 =
  { rec__sorted_lists__my_lists__cursor__node = no_element } }) = true)) and
  (forall i2:us_rep1. ((has_key(o3, i2) = true) -> (((1 <= get1(o3, i2)) and
  (get1(o3, i2) <= length({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields2 } }))) and
  (forall j:us_rep1. ((has_key(o3, j) = true) -> ((get1(o3, i2) = get1(o3,
  j)) -> (bool_eq6(i2, j) = true))))))))) and ((o4 = get1(o3, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields1 } })) and (in_range6(o4) and ((of_int(0) = true) ->
  ((o4 = w_get(o3, witness(o3, { us_split_fields3 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  }))) and
  (forall k:us_rep1. ((has_key(o3, k) = true) -> ((bool_eq6(k, {
  us_split_fields3 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields1 } }) = true) <-> (witness(o3, { us_split_fields3 =
  { rec__sorted_lists__my_lists__cursor__node = position__split_fields1 }
  }) = witness(o3, k)))))))))) and (((o4 <= i) and (o8 = true)) or
  ((not (o4 <= i)) and (o8 = false)))) and (result9 = match_bool(o8, o7,
  false)))) -> ((result9 = true) -> (((o10 = i) and in_range4(i)) ->
  (((o9 = model__({ us_split_discrs1 = {
  rec__sorted_lists__my_lists__list__capacity = container__split_discrs };
  us_split_fields1 = { rec__sorted_lists__my_lists__list =
  container__split_fields } })) and (length1(o9) = length({
  us_split_discrs1 = { rec__sorted_lists__my_lists__list__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }))) ->
  (1 <= o10)))))))))))))))
