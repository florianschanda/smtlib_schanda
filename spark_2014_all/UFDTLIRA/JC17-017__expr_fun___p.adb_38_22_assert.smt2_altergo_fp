(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

logic h_true : unit -> bool

logic h_true__function_guard : bool, unit -> prop

axiom h_true__post_axiom : true

axiom h_true__def_axiom : (h_true(void) = true)

logic h_x : bool -> bool

logic h_x__function_guard : bool, bool -> prop

axiom h_x__post_axiom : true

axiom h_x__def_axiom :
  (forall p__sub__z:bool [h_x(p__sub__z)]. ((h_x(p__sub__z) = true) <->
  (p__sub__z = true)))

logic h_false : unit -> bool

logic h_false__function_guard : bool, unit -> prop

axiom h_false__post_axiom : (not (h_false(void) = true))

axiom h_false__def_axiom : (not (h_false(void) = true))

logic h_y : bool -> bool

logic h_y__function_guard : bool, bool -> prop

axiom h_y__post_axiom :
  (forall p__sub__z:bool [h_y(p__sub__z)]. ((h_y(p__sub__z) = true) <->
  (p__sub__z = true)))

axiom h_y__def_axiom :
  (forall p__sub__z:bool [h_y(p__sub__z)]. ((h_y(p__sub__z) = true) <->
  (p__sub__z = true)))

 (* File "p.adb", line 14, characters 0-0 *)
goal WP_parameter_def :
  (forall z:bool. forall o:bool. forall o1:bool. forall o2:bool.
  forall o3:bool. forall result:bool. forall z1:bool. forall result1:bool.
  forall z2:bool. forall result2:bool. forall z3:bool. forall result3:bool.
  forall z4:bool. ((((o = h_true(void)) and (o = true)) and ((result = z) and
  (z1 = o))) -> ((z1 = true) -> ((((o1 = h_x(z1)) and ((o1 = true) <->
  (z1 = true))) and ((result1 = z1) and (z2 = o1))) -> ((z2 = true) ->
  ((((o2 = h_false(void)) and (not (o2 = true))) and ((result2 = z2) and
  (z3 = o2))) -> ((not (z3 = true)) -> ((((o3 = h_y(z3)) and ((o3 = true) <->
  (z3 = true))) and ((result3 = z3) and (z4 = o3))) ->
  (not (z4 = true))))))))))
