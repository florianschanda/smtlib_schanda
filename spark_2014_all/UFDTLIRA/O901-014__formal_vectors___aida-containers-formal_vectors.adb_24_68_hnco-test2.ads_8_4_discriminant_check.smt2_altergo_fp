(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type element_type

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : element_type, element_type -> bool

logic dummy : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type capacity_range

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : capacity_range, capacity_range -> bool

logic dummy1 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

logic to_rep : capacity_range -> int

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type capacity_range1

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : capacity_range1, capacity_range1 -> bool

logic dummy2 : capacity_range1

type capacity_range__ref1 = { capacity_range__content1 : capacity_range1
}

function capacity_range__ref___2__projection(a: capacity_range__ref1) : capacity_range1 =
  (a).capacity_range__content1

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity :
capacity_range1
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range1 =
  (a).rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__hnco__test2__v_type_owner__vector_type_owner__vector : us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__hnco__test2__v_type_owner__vector_type_owner__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:capacity_range1. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:capacity_range1. forall a1:us_main_type.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a1 } })))

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit : int

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit : int

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position : int

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit_axiom :
  (0 <= hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit)

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit_axiom :
  (hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit <  hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit)

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position_axiom :
  (0 <= hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : capacity_range1

logic dummy4 : us_main_type

type vector__ref = { vector__content : us_rep
}

function vector__ref___projection(a: vector__ref) : us_rep =
  (a).vector__content

logic to_rep1 : capacity_range1 -> int

logic of_rep1 : int -> capacity_range1

axiom inversion_axiom1 :
  (forall x:capacity_range1 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:capacity_range1 [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate in_range3(rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity1: int,
  a: us_rep) =
  (rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity1 = to_rep1(((a).us_split_discrs1).rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:capacity_range1. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:capacity_range1. forall a1:us_main_type.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a1 } })))

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit1 : int

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit1 : int

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position1 : int

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit_axiom1 :
  (0 <= hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit1)

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit_axiom1 :
  (hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit1 <  hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit1)

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position_axiom1 :
  (0 <= hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : capacity_range1

logic dummy6 : us_main_type

type t179s__ref = { t179s__content : us_rep
}

function t179s__ref___projection(a: t179s__ref) : us_rep = (a).t179s__content

type us_split_discrs2 = {
rec__hnco__test2__v_type_owner__vector_type__capacity : capacity_range
}

function us_split_discrs___2__projection(a: us_split_discrs2) : capacity_range =
  (a).rec__hnco__test2__v_type_owner__vector_type__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = {
rec__hnco__test2__v_type_owner__vector_type__hidden_vector : us_rep;
rec__ext__ : us_private
}

function us_split_fields_Hidden_Vector__projection(a: us_split_fields2) : us_rep =
  (a).rec__hnco__test2__v_type_owner__vector_type__hidden_vector

function us_split_fields___projection(a: us_split_fields2) : us_private =
  (a).rec__ext__

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2; attr__tag : int
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___5__projection(a: us_rep1) : int = (a).attr__tag

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:capacity_range. forall a1:capacity_range1.
  forall a2:us_main_type. forall a3:us_private. forall a4:int.
  (0 <= object__size2({ us_split_discrs3 = {
  rec__hnco__test2__v_type_owner__vector_type__capacity = a };
  us_split_fields3 = {
  rec__hnco__test2__v_type_owner__vector_type__hidden_vector = {
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a1 };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a2 } };
  rec__ext__ = a3 }; attr__tag = a4 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:capacity_range. forall a1:capacity_range1.
  forall a2:us_main_type. forall a3:us_private. forall a4:int.
  (0 <= object__alignment2({ us_split_discrs3 = {
  rec__hnco__test2__v_type_owner__vector_type__capacity = a };
  us_split_fields3 = {
  rec__hnco__test2__v_type_owner__vector_type__hidden_vector = {
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a1 };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a2 } };
  rec__ext__ = a3 }; attr__tag = a4 })))

logic hnco__test2__v_type_owner__vector_type__capacity__first__bit : int

logic hnco__test2__v_type_owner__vector_type__capacity__last__bit : int

logic hnco__test2__v_type_owner__vector_type__capacity__position : int

axiom hnco__test2__v_type_owner__vector_type__capacity__first__bit_axiom :
  (0 <= hnco__test2__v_type_owner__vector_type__capacity__first__bit)

axiom hnco__test2__v_type_owner__vector_type__capacity__last__bit_axiom :
  (hnco__test2__v_type_owner__vector_type__capacity__first__bit <  hnco__test2__v_type_owner__vector_type__capacity__last__bit)

axiom hnco__test2__v_type_owner__vector_type__capacity__position_axiom :
  (0 <= hnco__test2__v_type_owner__vector_type__capacity__position)

logic hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit : int

logic hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit : int

logic hnco__test2__v_type_owner__vector_type__hidden_vector__position : int

axiom hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit_axiom :
  (0 <= hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit)

axiom hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit_axiom :
  (hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit <  hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit)

axiom hnco__test2__v_type_owner__vector_type__hidden_vector__position_axiom :
  (0 <= hnco__test2__v_type_owner__vector_type__hidden_vector__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy7 : capacity_range

logic dummy8 : capacity_range1

logic dummy9 : us_main_type

logic dummy10 : us_private

logic dummy11 : int

type vector_type__ref = { vector_type__content : us_rep1
}

function vector_type__ref___projection(a: vector_type__ref) : us_rep1 =
  (a).vector_type__content

logic new_item : int

logic attr__ATTRIBUTE_ADDRESS : int

logic length : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type element_type1

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : element_type1, element_type1 -> bool

logic dummy12 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

logic length1 : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep2. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep2. (0 <= object__alignment3(a)))

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy13 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

logic constant_range__function_guard : bool, us_rep2, int, int, int -> prop

logic model__ : us_rep -> us_rep2

logic model____function_guard : us_rep2, us_rep -> prop

logic length2 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic last_index__function_guard : int, us_rep -> prop

logic to_vector : int, int -> us_rep

logic to_vector__function_guard : us_rep, int, int -> prop

axiom to_vector__post_axiom :
  (forall new_item1:int. forall length3:int [to_vector(new_item1, length3)].
  ((in_range4(new_item1) and in_range2(length3)) ->
  ((length1(to_vector(new_item1, length3)) = length3) and
  (forall i:int. (((1 <= i) and
  (i <= (0 + length2(model__(to_vector(new_item1, length3)))))) ->
  (get(model__(to_vector(new_item1, length3)), i) = new_item1))))))

predicate in_range5(rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity1: int,
  a: us_rep) =
  (rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity1 = to_rep1(((a).us_split_discrs1).rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:capacity_range1. forall a1:us_main_type. (0 <= object__size4({
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:capacity_range1. forall a1:us_main_type.
  (0 <= object__alignment4({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a1 } })))

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit2 : int

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit2 : int

logic hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position2 : int

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit_axiom2 :
  (0 <= hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit2)

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit_axiom2 :
  (hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit2 <  hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit2)

axiom hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position_axiom2 :
  (0 <= hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position2)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy14 : capacity_range1

logic dummy15 : us_main_type

type t203s__ref = { t203s__content : us_rep
}

function t203s__ref___projection(a: t203s__ref) : us_rep = (a).t203s__content

type us_split_fields4 = {
rec__hnco__test2__v_type_owner__vector_type__hidden_vector1 : us_rep;
rec__ext__1 : us_private
}

function us_split_fields_Hidden_Vector__5__projection(a: us_split_fields4) : us_rep =
  (a).rec__hnco__test2__v_type_owner__vector_type__hidden_vector1

function us_split_fields___5__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_discrs4 : us_split_discrs2; us_split_fields5 :
us_split_fields4; attr__tag1 : int
}

function us_rep___15__projection(a: us_rep3) : us_split_discrs2 =
  (a).us_split_discrs4

function us_rep___16__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___17__projection(a: us_rep3) : int = (a).attr__tag1

logic hide_ext__ : us_private -> us_private

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep3) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs4; us_split_fields3 = {
  rec__hnco__test2__v_type_owner__vector_type__hidden_vector =
  ((a).us_split_fields5).rec__hnco__test2__v_type_owner__vector_type__hidden_vector1;
  rec__ext__ = hide_ext__(((a).us_split_fields5).rec__ext__1) }; attr__tag =
  (a).attr__tag1 }

function of_base(r: us_rep1) : us_rep3 = { us_split_discrs4 =
  (r).us_split_discrs3; us_split_fields5 = {
  rec__hnco__test2__v_type_owner__vector_type__hidden_vector1 =
  ((r).us_split_fields3).rec__hnco__test2__v_type_owner__vector_type__hidden_vector;
  rec__ext__1 = extract__ext__(((r).us_split_fields3).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic us_tag1 : int

predicate in_range6(rec__hnco__test2__v_type_owner__vector_type__capacity1: int,
  a: us_rep1) =
  (rec__hnco__test2__v_type_owner__vector_type__capacity1 = to_rep(((a).us_split_discrs3).rec__hnco__test2__v_type_owner__vector_type__capacity))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:capacity_range. forall a1:capacity_range1.
  forall a2:us_main_type. forall a3:us_private. forall a4:int.
  (0 <= object__size5({ us_split_discrs4 = {
  rec__hnco__test2__v_type_owner__vector_type__capacity = a };
  us_split_fields5 = {
  rec__hnco__test2__v_type_owner__vector_type__hidden_vector1 = {
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a1 };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a2 } };
  rec__ext__1 = a3 }; attr__tag1 = a4 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:capacity_range. forall a1:capacity_range1.
  forall a2:us_main_type. forall a3:us_private. forall a4:int.
  (0 <= object__alignment5({ us_split_discrs4 = {
  rec__hnco__test2__v_type_owner__vector_type__capacity = a };
  us_split_fields5 = {
  rec__hnco__test2__v_type_owner__vector_type__hidden_vector1 = {
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = a1 };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = a2 } };
  rec__ext__1 = a3 }; attr__tag1 = a4 })))

logic hnco__test2__v_type_owner__vector_type__capacity__first__bit1 : int

logic hnco__test2__v_type_owner__vector_type__capacity__last__bit1 : int

logic hnco__test2__v_type_owner__vector_type__capacity__position1 : int

axiom hnco__test2__v_type_owner__vector_type__capacity__first__bit_axiom1 :
  (0 <= hnco__test2__v_type_owner__vector_type__capacity__first__bit1)

axiom hnco__test2__v_type_owner__vector_type__capacity__last__bit_axiom1 :
  (hnco__test2__v_type_owner__vector_type__capacity__first__bit1 <  hnco__test2__v_type_owner__vector_type__capacity__last__bit1)

axiom hnco__test2__v_type_owner__vector_type__capacity__position_axiom1 :
  (0 <= hnco__test2__v_type_owner__vector_type__capacity__position1)

logic hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit1 : int

logic hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit1 : int

logic hnco__test2__v_type_owner__vector_type__hidden_vector__position1 : int

axiom hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit_axiom1 :
  (0 <= hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit1)

axiom hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit_axiom1 :
  (hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit1 <  hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit1)

axiom hnco__test2__v_type_owner__vector_type__hidden_vector__position_axiom1 :
  (0 <= hnco__test2__v_type_owner__vector_type__hidden_vector__position1)

logic user_eq9 : us_rep3, us_rep3 -> bool

logic dummy16 : capacity_range

logic dummy17 : capacity_range1

logic dummy18 : us_main_type

logic dummy19 : us_private

logic dummy20 : int

type t202s__ref = { t202s__content : us_rep3
}

function t202s__ref___projection(a: t202s__ref) : us_rep3 =
  (a).t202s__content

logic v__split_discrs : capacity_range

logic v__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type count_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq10 : count_type, count_type -> bool

logic dummy21 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

type extended_index

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : extended_index, extended_index -> bool

logic dummy22 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq8 : bool, bool -> bool

axiom bool_eq_def6 :
  (forall x:bool. forall y:bool [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range9(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE6 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> bool

logic capacity__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:capacity_range1. forall container1:us_main_type
  [length1({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity =
  container }; us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = container1 }
  })]. ((((of_int(1) = true) -> (length1({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity =
  container }; us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = container1 }
  }) <= to_rep1(container))) and ((not (of_int(1) = true)) -> (length1({
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity =
  container }; us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = container1 }
  }) <= 2147483647))) and in_range2(length1({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity =
  container }; us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = container1 }
  }))))

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2 [user_eq7(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq7(a, b) = match_bool(bool_eq(length2(a), length2(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq7(a, b) = match_bool(bool_eq(length2(a), length2(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:capacity_range1. forall container1:us_main_type
  [model__({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity =
  container }; us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = container1 }
  })]. (length2(model__({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity =
  container }; us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = container1 }
  })) = length1({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity =
  container }; us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = container1 }
  })))

type extended_index1

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq12 : extended_index1, extended_index1 -> bool

logic dummy23 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___3__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep2 [length2(container)].
  (((0 + length2(container)) <= 2147483647) and
  in_range7(length2(container))))

type element_type2

predicate in_range11(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq13 : element_type2, element_type2 -> bool

logic dummy24 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___3__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall position:int [get(container, position)]. ((in_range10(position) and
  ((1 <= position) and (position <= (0 + length2(container))))) ->
  in_range11(get(container, position)))))

logic o : capacity_range1

logic o1 : us_main_type

logic o2 : capacity_range1

logic o3 : us_main_type

axiom H : in_range(new_item)

axiom H1 : in_range1(length)

axiom H2 : (({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = o };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = o1 }
  } = to_vector(new_item, length)) and ((length1({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = o };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = o1 }
  }) = length) and
  (forall i:int. (((1 <= i) and (i <= (0 + length2(model__({
  us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = o };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = o1 } }))))) ->
  (get(model__({ us_split_discrs1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector__capacity = o };
  us_split_fields1 = {
  rec__hnco__test2__v_type_owner__vector_type_owner__vector = o1 } }),
  i) = new_item)))))

 (* File "aida-containers-formal_vectors.ads", line 182, characters 0-0 *)
goal WP_parameter_def : (length = to_rep1(o))
