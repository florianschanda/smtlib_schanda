(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const i Int)
(declare-const j Int)
(declare-const temp___197 Int)
(declare-const temp___196 Int)
(declare-const temp___199 Int)
(declare-const temp___198 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 Int)
(declare-const j1 Int)
(declare-const result2 Int)
(declare-const j2 Int)
(declare-const result3 Int)
(declare-const j3 Int)
(declare-const result4 Int)
(declare-const i2 Int)
(declare-const i3 Int)
(declare-const j4 Int)
(declare-const temp___1991 Int)
(declare-const temp___1981 Int)
(declare-const result5 Int)
(declare-const temp___1992 Int)
(declare-const result6 Int)
(declare-const temp___1982 Int)
(declare-const i4 Int)
(declare-const j5 Int)
(declare-const i5 Int)
(declare-const j6 Int)
(declare-const i6 Int)
(declare-const j7 int__ref)
(declare-const i7 Int)
(declare-const j8 Int)
(declare-const result7 int__ref)
(declare-const i8 Int)
(declare-const result8 int__ref)
(declare-const j9 Int)
(declare-const result9 int__ref)
(declare-const j10 Int)
(declare-const result10 int__ref)
(declare-const j11 Int)
(declare-const result11 int__ref)
(declare-const i9 Int)
(declare-const i10 int__ref)
(declare-const j12 int__ref)
(declare-const i11 Int)
(declare-const j13 Int)
(declare-const i12 Int)
(declare-const j14 Int)
(declare-const temp___203 Int)
(declare-const temp___202 Int)
(declare-const result12 int__ref)
(declare-const temp___2031 Int)
(declare-const result13 int__ref)
(declare-const temp___2021 Int)
(define-fun i13 () int__ref (mk_int__ref i6))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 i)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 j)))
(assert (= result i))
(assert (= i1 1))
(assert (= result1 j))
(assert (= j1 3))
(assert (=> (< i1 3) (= temp___197 j1)))
(assert (=> (< i1 3) (= temp___196 i1)))
(assert (=> (< i1 3) (= 0 temp___199)))
(assert (=> (< i1 3) (= 0 temp___198)))
(assert (=> (< i1 3) (=> (< 0 j1) (and (= o (- j1 1)) (in_range1 (- j1 1))))))
(assert (=> (< i1 3) (=> (< 0 j1) (= j1 result2))))
(assert (=> (< i1 3) (=> (< 0 j1) (= j2 o))))
(assert (=> (< i1 3) (=> (< 0 j1) (= i2 i1))))
(assert (=> (< i1 3) (=> (not (< 0 j1)) (= j1 result3))))
(assert (=> (< i1 3) (=> (not (< 0 j1)) (= j3 3))))
(assert (=> (< i1 3) (=> (not (< 0 j1)) (and (= o1 (+ i1 1)) (in_range1 (+ i1 1))))))
(assert (=> (< i1 3) (=> (not (< 0 j1)) (= i1 result4))))
(assert (=> (< i1 3) (=> (not (< 0 j1)) (= i2 o1))))
(assert (=> (< i1 3) (=> (not (< 0 j1)) (= j2 j3))))
(assert (=> (< i1 3) (and (=> (<= (- 2147483648) 2147483647) (in_range1 i3)) (=> (<= (- 2147483648) 2147483647) (in_range1 j4)))))
(assert (=> (< i1 3) (= temp___1991 result5)))
(assert (=> (< i1 3) (= temp___1992 i3)))
(assert (=> (< i1 3) (= temp___1981 result6)))
(assert (=> (< i1 3) (= temp___1982 j4)))
(assert (=> (< i1 3) (not (< i3 3))))
(assert (=> (< i1 3) (= j4 j5)))
(assert (=> (< i1 3) (= i3 i4)))
(assert (=> (< i1 3) (= j6 j4)))
(assert (=> (< i1 3) (= i5 i3)))
(assert (=> (< i1 3) (= j7 (mk_int__ref j5))))
(assert (=> (< i1 3) (= i13 (mk_int__ref i4))))
(assert (=> (< i1 3) (= j8 j6)))
(assert (=> (< i1 3) (= i7 i5)))
(assert (=> (not (< i1 3)) (= j7 (mk_int__ref j1))))
(assert (=> (not (< i1 3)) (= i1 i6)))
(assert (=> (not (< i1 3)) (= j8 j1)))
(assert (=> (not (< i1 3)) (= i7 i1)))
(assert (= result7 i13))
(assert (= i8 1))
(assert (= result8 j7))
(assert (= j9 3))
(assert (< i8 3))
(assert (=> (< 0 j9) (and (= o2 (- j9 1)) (in_range1 (- j9 1)))))
(assert (=> (< 0 j9) (= result9 (mk_int__ref j9))))
(assert (=> (< 0 j9) (= j10 o2)))
(assert (=> (< 0 j9) (= j12 (mk_int__ref j10))))
(assert (=> (< 0 j9) (= i10 (mk_int__ref i8))))
(assert (=> (< 0 j9) (= j13 j10)))
(assert (=> (< 0 j9) (= i11 i8)))
(assert (=> (not (< 0 j9)) (= result10 (mk_int__ref j9))))
(assert (=> (not (< 0 j9)) (= j11 3)))
(assert (=> (not (< 0 j9)) (and (= o3 (- i8 1)) (in_range1 (- i8 1)))))
(assert (=> (not (< 0 j9)) (= result11 (mk_int__ref i8))))
(assert (=> (not (< 0 j9)) (= i9 o3)))
(assert (=> (not (< 0 j9)) (= j12 (mk_int__ref j11))))
(assert (=> (not (< 0 j9)) (= i10 (mk_int__ref i9))))
(assert (=> (not (< 0 j9)) (= j13 j11)))
(assert (=> (not (< 0 j9)) (= i11 i9)))
(assert (and (=> (<= (- 2147483648) 2147483647) (in_range1 i12)) (=> (<= (- 2147483648) 2147483647) (in_range1 j14))))
(assert (= result12 (mk_int__ref temp___203)))
(assert (= temp___2031 i12))
(assert (= result13 (mk_int__ref temp___202)))
(assert (= temp___2021 j14))
(assert (<= 0 i12))
(assert (<= i12 3))
(assert (< i12 3))
(assert (< 0 j14))
(assert (not (in_range1 (- j14 1))))
(check-sat)
(exit)
