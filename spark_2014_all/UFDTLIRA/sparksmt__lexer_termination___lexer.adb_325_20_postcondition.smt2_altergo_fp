(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type name_id

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : name_id, name_id -> bool

logic dummy1 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref___projection(a: name_id__ref) : name_id =
  (a).name_id__content

type token_kind

predicate in_range3(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : token_kind, token_kind -> bool

logic dummy2 : token_kind

type token_kind__ref = { token_kind__content : token_kind
}

function token_kind__ref___projection(a: token_kind__ref) : token_kind =
  (a).token_kind__content

logic to_rep1 : token_kind -> int

logic of_rep1 : int -> token_kind

axiom inversion_axiom1 :
  (forall x:token_kind [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:token_kind [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic to_rep2 : name_id -> int

logic of_rep2 : int -> name_id

axiom inversion_axiom2 :
  (forall x:name_id [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:name_id [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__lexer__token__kind : token_kind
}

function us_split_discrs___3__projection(a: us_split_discrs) : token_kind =
  (a).rec__lexer__token__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__lexer__token__line : natural;
rec__lexer__token__col : natural; rec__lexer__token__length : natural;
rec__lexer__token__value : name_id
}

function us_split_fields_Line__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__line

function us_split_fields_Col__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__col

function us_split_fields_Length__projection(a: us_split_fields) : natural =
  (a).rec__lexer__token__length

function us_split_fields_Value__projection(a: us_split_fields) : name_id =
  (a).rec__lexer__token__value

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___8__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___9__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___10__projection(a: us_rep) : bool = (a).attr__constrained

predicate lexer__token__value__pred(a: us_rep) =
  ((3 <= to_rep1(((a).us_split_discrs1).rec__lexer__token__kind)) and
  (to_rep1(((a).us_split_discrs1).rec__lexer__token__kind) <= 8))

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__lexer__token__kind) = to_rep1(((b).us_split_discrs1).rec__lexer__token__kind)) and
  ((((to_rep(((a).us_split_fields1).rec__lexer__token__line) = to_rep(((b).us_split_fields1).rec__lexer__token__line)) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__col) = to_rep(((b).us_split_fields1).rec__lexer__token__col))) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__length) = to_rep(((b).us_split_fields1).rec__lexer__token__length))) and
  (lexer__token__value__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__lexer__token__value) = to_rep2(((b).us_split_fields1).rec__lexer__token__value))))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__lexer__token__kind) = to_rep1(((b).us_split_discrs1).rec__lexer__token__kind)) and
  ((((to_rep(((a).us_split_fields1).rec__lexer__token__line) = to_rep(((b).us_split_fields1).rec__lexer__token__line)) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__col) = to_rep(((b).us_split_fields1).rec__lexer__token__col))) and
  (to_rep(((a).us_split_fields1).rec__lexer__token__length) = to_rep(((b).us_split_fields1).rec__lexer__token__length))) and
  (lexer__token__value__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__lexer__token__value) = to_rep2(((b).us_split_fields1).rec__lexer__token__value)))))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit : int

logic lexer__token__kind__last__bit : int

logic lexer__token__kind__position : int

axiom lexer__token__kind__first__bit_axiom :
  (0 <= lexer__token__kind__first__bit)

axiom lexer__token__kind__last__bit_axiom :
  (lexer__token__kind__first__bit <  lexer__token__kind__last__bit)

axiom lexer__token__kind__position_axiom :
  (0 <= lexer__token__kind__position)

logic lexer__token__line__first__bit : int

logic lexer__token__line__last__bit : int

logic lexer__token__line__position : int

axiom lexer__token__line__first__bit_axiom :
  (0 <= lexer__token__line__first__bit)

axiom lexer__token__line__last__bit_axiom :
  (lexer__token__line__first__bit <  lexer__token__line__last__bit)

axiom lexer__token__line__position_axiom :
  (0 <= lexer__token__line__position)

logic lexer__token__col__first__bit : int

logic lexer__token__col__last__bit : int

logic lexer__token__col__position : int

axiom lexer__token__col__first__bit_axiom :
  (0 <= lexer__token__col__first__bit)

axiom lexer__token__col__last__bit_axiom :
  (lexer__token__col__first__bit <  lexer__token__col__last__bit)

axiom lexer__token__col__position_axiom : (0 <= lexer__token__col__position)

logic lexer__token__length__first__bit : int

logic lexer__token__length__last__bit : int

logic lexer__token__length__position : int

axiom lexer__token__length__first__bit_axiom :
  (0 <= lexer__token__length__first__bit)

axiom lexer__token__length__last__bit_axiom :
  (lexer__token__length__first__bit <  lexer__token__length__last__bit)

axiom lexer__token__length__position_axiom :
  (0 <= lexer__token__length__position)

logic lexer__token__value__first__bit : int

logic lexer__token__value__last__bit : int

logic lexer__token__value__position : int

axiom lexer__token__value__first__bit_axiom :
  (0 <= lexer__token__value__first__bit)

axiom lexer__token__value__last__bit_axiom :
  (lexer__token__value__first__bit <  lexer__token__value__last__bit)

axiom lexer__token__value__position_axiom :
  (0 <= lexer__token__value__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : token_kind

logic dummy4 : natural

logic dummy5 : natural

logic dummy6 : natural

logic dummy7 : name_id

logic dummy8 : bool

type token__ref = { token__content : us_rep
}

function token__ref___projection(a: token__ref) : us_rep = (a).token__content

logic t__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic kind : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r22b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate in_range4(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep1(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit1 : int

logic lexer__token__kind__last__bit1 : int

logic lexer__token__kind__position1 : int

axiom lexer__token__kind__first__bit_axiom1 :
  (0 <= lexer__token__kind__first__bit1)

axiom lexer__token__kind__last__bit_axiom1 :
  (lexer__token__kind__first__bit1 <  lexer__token__kind__last__bit1)

axiom lexer__token__kind__position_axiom1 :
  (0 <= lexer__token__kind__position1)

logic lexer__token__value__first__bit1 : int

logic lexer__token__value__last__bit1 : int

logic lexer__token__value__position1 : int

axiom lexer__token__value__first__bit_axiom1 :
  (0 <= lexer__token__value__first__bit1)

axiom lexer__token__value__last__bit_axiom1 :
  (lexer__token__value__first__bit1 <  lexer__token__value__last__bit1)

axiom lexer__token__value__position_axiom1 :
  (0 <= lexer__token__value__position1)

logic lexer__token__line__first__bit1 : int

logic lexer__token__line__last__bit1 : int

logic lexer__token__line__position1 : int

axiom lexer__token__line__first__bit_axiom1 :
  (0 <= lexer__token__line__first__bit1)

axiom lexer__token__line__last__bit_axiom1 :
  (lexer__token__line__first__bit1 <  lexer__token__line__last__bit1)

axiom lexer__token__line__position_axiom1 :
  (0 <= lexer__token__line__position1)

logic lexer__token__col__first__bit1 : int

logic lexer__token__col__last__bit1 : int

logic lexer__token__col__position1 : int

axiom lexer__token__col__first__bit_axiom1 :
  (0 <= lexer__token__col__first__bit1)

axiom lexer__token__col__last__bit_axiom1 :
  (lexer__token__col__first__bit1 <  lexer__token__col__last__bit1)

axiom lexer__token__col__position_axiom1 :
  (0 <= lexer__token__col__position1)

logic lexer__token__length__first__bit1 : int

logic lexer__token__length__last__bit1 : int

logic lexer__token__length__position1 : int

axiom lexer__token__length__first__bit_axiom1 :
  (0 <= lexer__token__length__first__bit1)

axiom lexer__token__length__last__bit_axiom1 :
  (lexer__token__length__first__bit1 <  lexer__token__length__last__bit1)

axiom lexer__token__length__position_axiom1 :
  (0 <= lexer__token__length__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy9 : token_kind

logic dummy10 : natural

logic dummy11 : natural

logic dummy12 : natural

logic dummy13 : name_id

logic dummy14 : bool

type t23b__ref = { t23b__content : us_rep
}

function t23b__ref___projection(a: t23b__ref) : us_rep = (a).t23b__content

logic r25b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate in_range5(rec__lexer__token__kind1: int, a: us_rep) =
  (rec__lexer__token__kind1 = to_rep1(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__lexer__token__kind = a }; us_split_fields1 = {
  rec__lexer__token__line = a1; rec__lexer__token__col = a2;
  rec__lexer__token__length = a3; rec__lexer__token__value = a4 };
  attr__constrained = a5 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:token_kind. forall a1:natural. forall a2:natural.
  forall a3:natural. forall a4:name_id. forall a5:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__line = a1;
  rec__lexer__token__col = a2; rec__lexer__token__length = a3;
  rec__lexer__token__value = a4 }; attr__constrained = a5 })))

logic lexer__token__kind__first__bit2 : int

logic lexer__token__kind__last__bit2 : int

logic lexer__token__kind__position2 : int

axiom lexer__token__kind__first__bit_axiom2 :
  (0 <= lexer__token__kind__first__bit2)

axiom lexer__token__kind__last__bit_axiom2 :
  (lexer__token__kind__first__bit2 <  lexer__token__kind__last__bit2)

axiom lexer__token__kind__position_axiom2 :
  (0 <= lexer__token__kind__position2)

logic lexer__token__value__first__bit2 : int

logic lexer__token__value__last__bit2 : int

logic lexer__token__value__position2 : int

axiom lexer__token__value__first__bit_axiom2 :
  (0 <= lexer__token__value__first__bit2)

axiom lexer__token__value__last__bit_axiom2 :
  (lexer__token__value__first__bit2 <  lexer__token__value__last__bit2)

axiom lexer__token__value__position_axiom2 :
  (0 <= lexer__token__value__position2)

logic lexer__token__line__first__bit2 : int

logic lexer__token__line__last__bit2 : int

logic lexer__token__line__position2 : int

axiom lexer__token__line__first__bit_axiom2 :
  (0 <= lexer__token__line__first__bit2)

axiom lexer__token__line__last__bit_axiom2 :
  (lexer__token__line__first__bit2 <  lexer__token__line__last__bit2)

axiom lexer__token__line__position_axiom2 :
  (0 <= lexer__token__line__position2)

logic lexer__token__col__first__bit2 : int

logic lexer__token__col__last__bit2 : int

logic lexer__token__col__position2 : int

axiom lexer__token__col__first__bit_axiom2 :
  (0 <= lexer__token__col__first__bit2)

axiom lexer__token__col__last__bit_axiom2 :
  (lexer__token__col__first__bit2 <  lexer__token__col__last__bit2)

axiom lexer__token__col__position_axiom2 :
  (0 <= lexer__token__col__position2)

logic lexer__token__length__first__bit2 : int

logic lexer__token__length__last__bit2 : int

logic lexer__token__length__position2 : int

axiom lexer__token__length__first__bit_axiom2 :
  (0 <= lexer__token__length__first__bit2)

axiom lexer__token__length__last__bit_axiom2 :
  (lexer__token__length__first__bit2 <  lexer__token__length__last__bit2)

axiom lexer__token__length__position_axiom2 :
  (0 <= lexer__token__length__position2)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy15 : token_kind

logic dummy16 : natural

logic dummy17 : natural

logic dummy18 : natural

logic dummy19 : name_id

logic dummy20 : bool

type t26b__ref = { t26b__content : us_rep
}

function t26b__ref___projection(a: t26b__ref) : us_rep = (a).t26b__content

logic t__split_fields : natural

logic t__split_fields1 : natural

logic t__split_fields2 : natural

logic t__split_fields3 : name_id

logic t__split_discrs : token_kind

logic first_line : int

logic first_col : int

logic o : token_kind

logic o1 : natural

logic o2 : natural

logic o3 : natural

logic o4 : natural

logic o5 : natural

logic o6 : natural

logic o7 : name_id

logic o8 : token_kind

logic temp___969 : token_kind

logic temp___9691 : natural

logic temp___9692 : natural

logic temp___9693 : natural

logic temp___9694 : name_id

logic temp___9695 : bool

logic usq_ : token_kind

logic usq_1 : natural

logic usq_2 : natural

logic usq_3 : natural

logic usq_4 : name_id

logic usq_5 : bool

logic temp___971 : token_kind

logic temp___9711 : natural

logic temp___9712 : natural

logic temp___9713 : natural

logic temp___9714 : name_id

logic temp___9715 : bool

logic o9 : token_kind

logic o10 : natural

logic o11 : natural

logic o12 : natural

logic o13 : natural

logic o14 : natural

logic o15 : natural

logic o16 : name_id

logic o17 : token_kind

logic temp___972 : token_kind

logic temp___9721 : natural

logic temp___9722 : natural

logic temp___9723 : natural

logic temp___9724 : name_id

logic temp___9725 : bool

logic usq_6 : token_kind

logic usq_7 : natural

logic usq_8 : natural

logic usq_9 : natural

logic usq_10 : name_id

logic usq_11 : bool

logic temp___974 : token_kind

logic temp___9741 : natural

logic temp___9742 : natural

logic temp___9743 : natural

logic temp___9744 : name_id

logic temp___9745 : bool

logic result : natural

logic result1 : natural

logic result2 : natural

logic result3 : name_id

logic t__split_fields4 : natural

logic t__split_fields5 : natural

logic t__split_fields6 : natural

logic t__split_fields7 : name_id

logic result4 : token_kind

logic t__split_discrs1 : token_kind

logic result5 : natural

logic result6 : natural

logic result7 : natural

logic result8 : name_id

logic t__split_fields8 : natural

logic t__split_fields9 : natural

logic t__split_fields10 : natural

logic t__split_fields11 : name_id

logic result9 : token_kind

logic t__split_discrs2 : token_kind

logic t__split_fields12 : natural

logic t__split_fields13 : natural

logic t__split_fields14 : natural

logic t__split_fields15 : name_id

logic t__split_discrs3 : token_kind

logic t__split_fields16 : natural

logic t__split_fields17 : natural

logic t__split_fields18 : natural

logic t__split_fields19 : name_id

logic t__split_discrs4 : token_kind

axiom H : in_range1(first_line)

axiom H1 : in_range1(first_col)

axiom H2 : in_range3(kind)

axiom H3 : ((not (t__attr__constrained = true)) and ((kind = 1) or
  (kind = 2)))

axiom H4 : ((kind = 1) -> (to_rep1(t__split_discrs) = r22b))

axiom H5 : ((kind = 1) -> in_range3(r22b))

axiom H6 : ((kind = 1) -> (to_rep(o1) = 1))

axiom H7 : ((kind = 1) -> (to_rep(o2) = first_col))

axiom H8 : ((kind = 1) -> (to_rep(o3) = first_line))

axiom H9 : ((kind = 1) -> (o3 = o4))

axiom H10 : ((kind = 1) -> (o2 = o5))

axiom H11 : ((kind = 1) -> (o1 = o6))

axiom H12 : ((kind = 1) -> (dummy1 = o7))

axiom H13 : ((kind = 1) -> (to_rep1(o) = 1))

axiom H14 : ((kind = 1) -> (o = o8))

axiom H15 : ((kind = 1) -> (temp___969 = o8))

axiom H16 : ((kind = 1) -> (temp___9691 = o4))

axiom H17 : ((kind = 1) -> (temp___9692 = o5))

axiom H18 : ((kind = 1) -> (temp___9693 = o6))

axiom H19 : ((kind = 1) -> (temp___9694 = o7))

axiom H20 : ((kind = 1) -> (true = temp___9695))

axiom H21 : ((kind = 1) -> ((t__attr__constrained = true) ->
  (temp___969 = t__split_discrs)))

axiom H22 : ((kind = 1) -> ((usq_ = temp___969) and
  (((usq_1 = temp___9691) and ((usq_2 = temp___9692) and
  ((usq_3 = temp___9693) and (usq_4 = temp___9694)))) and
  (usq_5 = temp___9695))))

axiom H23 : ((kind = 1) -> (usq_ = temp___971))

axiom H24 : ((kind = 1) -> (usq_1 = temp___9711))

axiom H25 : ((kind = 1) -> (usq_2 = temp___9712))

axiom H26 : ((kind = 1) -> (usq_3 = temp___9713))

axiom H27 : ((kind = 1) -> (usq_4 = temp___9714))

axiom H28 : ((kind = 1) -> (t__attr__constrained = temp___9715))

axiom H29 : ((kind = 1) -> ((result = t__split_fields) and
  ((result1 = t__split_fields1) and ((result2 = t__split_fields2) and
  (result3 = t__split_fields3)))))

axiom H30 : ((kind = 1) -> ((t__split_fields4 = temp___9711) and
  ((t__split_fields5 = temp___9712) and ((t__split_fields6 = temp___9713) and
  (t__split_fields7 = temp___9714)))))

axiom H31 : ((kind = 1) -> (result4 = t__split_discrs))

axiom H32 : ((kind = 1) -> (t__split_discrs1 = temp___971))

axiom H33 : ((not (kind = 1)) -> ((kind = 2) ->
  (to_rep1(t__split_discrs) = r25b)))

axiom H34 : ((not (kind = 1)) -> ((kind = 2) -> in_range3(r25b)))

axiom H35 : ((not (kind = 1)) -> ((kind = 2) -> (to_rep(o10) = 1)))

axiom H36 : ((not (kind = 1)) -> ((kind = 2) -> (to_rep(o11) = first_col)))

axiom H37 : ((not (kind = 1)) -> ((kind = 2) -> (to_rep(o12) = first_line)))

axiom H38 : ((not (kind = 1)) -> ((kind = 2) -> (o12 = o13)))

axiom H39 : ((not (kind = 1)) -> ((kind = 2) -> (o11 = o14)))

axiom H40 : ((not (kind = 1)) -> ((kind = 2) -> (o10 = o15)))

axiom H41 : ((not (kind = 1)) -> ((kind = 2) -> (dummy1 = o16)))

axiom H42 : ((not (kind = 1)) -> ((kind = 2) -> (to_rep1(o9) = 2)))

axiom H43 : ((not (kind = 1)) -> ((kind = 2) -> (o9 = o17)))

axiom H44 : ((not (kind = 1)) -> ((kind = 2) -> (temp___972 = o17)))

axiom H45 : ((not (kind = 1)) -> ((kind = 2) -> (temp___9721 = o13)))

axiom H46 : ((not (kind = 1)) -> ((kind = 2) -> (temp___9722 = o14)))

axiom H47 : ((not (kind = 1)) -> ((kind = 2) -> (temp___9723 = o15)))

axiom H48 : ((not (kind = 1)) -> ((kind = 2) -> (temp___9724 = o16)))

axiom H49 : ((not (kind = 1)) -> ((kind = 2) -> (true = temp___9725)))

axiom H50 : ((not (kind = 1)) -> ((kind = 2) ->
  ((t__attr__constrained = true) -> (temp___972 = t__split_discrs))))

axiom H51 : ((not (kind = 1)) -> ((kind = 2) -> ((usq_6 = temp___972) and
  (((usq_7 = temp___9721) and ((usq_8 = temp___9722) and
  ((usq_9 = temp___9723) and (usq_10 = temp___9724)))) and
  (usq_11 = temp___9725)))))

axiom H52 : ((not (kind = 1)) -> ((kind = 2) -> ((temp___974 = usq_6) and
  (((temp___9741 = usq_7) and ((temp___9742 = usq_8) and
  ((temp___9743 = usq_9) and (temp___9744 = usq_10)))) and
  (temp___9745 = t__attr__constrained)))))

axiom H53 : ((not (kind = 1)) -> ((kind = 2) ->
  ((result5 = t__split_fields) and ((result6 = t__split_fields1) and
  ((result7 = t__split_fields2) and (result8 = t__split_fields3))))))

axiom H54 : ((not (kind = 1)) -> ((kind = 2) ->
  ((t__split_fields8 = temp___9741) and ((t__split_fields9 = temp___9742) and
  ((t__split_fields10 = temp___9743) and
  (t__split_fields11 = temp___9744))))))

axiom H55 : ((not (kind = 1)) -> ((kind = 2) -> (result9 = t__split_discrs)))

axiom H56 : ((not (kind = 1)) -> ((kind = 2) ->
  (t__split_discrs2 = temp___974)))

axiom H57 : ((not (kind = 1)) -> (kind = 2))

axiom H58 : ((not (kind = 1)) -> (t__split_discrs1 = t__split_discrs2))

axiom H59 : ((not (kind = 1)) -> ((t__split_fields4 = t__split_fields8) and
  ((t__split_fields5 = t__split_fields9) and
  ((t__split_fields6 = t__split_fields10) and
  (t__split_fields7 = t__split_fields11)))))

axiom H60 : (t__split_discrs3 = t__split_discrs1)

axiom H61 : ((t__split_fields12 = t__split_fields4) and
  ((t__split_fields13 = t__split_fields5) and
  ((t__split_fields14 = t__split_fields6) and
  (t__split_fields15 = t__split_fields7))))

axiom H62 : (t__split_discrs4 = t__split_discrs1)

axiom H63 : ((t__split_fields16 = t__split_fields4) and
  ((t__split_fields17 = t__split_fields5) and
  ((t__split_fields18 = t__split_fields6) and
  (t__split_fields19 = t__split_fields7))))

 (* File "lexer.adb", line 48, characters 0-0 *)
goal WP_parameter_def : (to_rep1(t__split_discrs3) = kind)
