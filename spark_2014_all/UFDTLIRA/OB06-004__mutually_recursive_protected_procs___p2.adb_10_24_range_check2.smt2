(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun prio (tuple0) Int)
(declare-fun prio__function_guard (Int tuple0) Bool)
(declare-sort poT 0)
(declare-fun user_eq (poT poT) Bool)
(declare-const value__size Int)
(declare-fun object__size (poT) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (poT) Int)
(assert (<= 0 value__size))
(assert (forall ((a poT)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a poT)) (<= 0 (object__alignment a))))
(declare-datatypes () ((poT__ref (mk_poT__ref (poT__content poT)))))
(define-fun poT__ref___projection ((a poT__ref)) poT (poT__content a))
(declare-sort any_priority 0)
(declare-fun any_priorityqtint (any_priority) Int)
(assert (forall ((i any_priority)) (and (<= 0 (any_priorityqtint i)) (<= (any_priorityqtint i) 98))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 98)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq1 (any_priority any_priority) Bool)
(declare-const dummy any_priority)
(declare-datatypes () ((any_priority__ref (mk_any_priority__ref (any_priority__content any_priority)))))
(define-fun any_priority__ref___projection ((a any_priority__ref)) any_priority (any_priority__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (prio us_void_param) true false true true) :pattern ((prio us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (prio us_void_param) 5) :pattern ((prio us_void_param)))))
(define-fun dynamic_invariant1 ((temp___expr_179 Int) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool (=> (or (= temp___is_init_175 true) (<= 0 98)) (in_range temp___expr_179)))
(declare-const self__ poT)
(assert (not (<= 0 (prio Tuple0))))
(check-sat)
(exit)
