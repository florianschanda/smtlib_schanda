(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__private_discr__p_with_default__c : natural
}

function us_split_discrs___2__projection(a: us_split_discrs) : natural =
  (a).rec__private_discr__p_with_default__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__private_discr__p_with_default : us_main_type
}

function us_split_fields_P_With_Default__projection(a: us_split_fields) : us_main_type =
  (a).rec__private_discr__p_with_default

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___5__projection(a: us_rep) : bool = (a).attr__constrained

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__private_discr__p_with_default__c) = to_rep(((b).us_split_discrs1).rec__private_discr__p_with_default__c)) and
  (us_main_eq(((a).us_split_fields1).rec__private_discr__p_with_default,
  ((b).us_split_fields1).rec__private_discr__p_with_default) = true)) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__private_discr__p_with_default__c) = to_rep(((b).us_split_discrs1).rec__private_discr__p_with_default__c)) and
  (us_main_eq(((a).us_split_fields1).rec__private_discr__p_with_default,
  ((b).us_split_fields1).rec__private_discr__p_with_default) = true))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__size({ us_split_discrs1 = {
  rec__private_discr__p_with_default__c = a }; us_split_fields1 = {
  rec__private_discr__p_with_default = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__private_discr__p_with_default__c = a }; us_split_fields1 = {
  rec__private_discr__p_with_default = a1 }; attr__constrained = a2 })))

logic private_discr__p_with_default__c__first__bit : int

logic private_discr__p_with_default__c__last__bit : int

logic private_discr__p_with_default__c__position : int

axiom private_discr__p_with_default__c__first__bit_axiom :
  (0 <= private_discr__p_with_default__c__first__bit)

axiom private_discr__p_with_default__c__last__bit_axiom :
  (private_discr__p_with_default__c__first__bit <  private_discr__p_with_default__c__last__bit)

axiom private_discr__p_with_default__c__position_axiom :
  (0 <= private_discr__p_with_default__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : natural

logic dummy2 : us_main_type

logic dummy3 : bool

type p_with_default__ref = { p_with_default__content : us_rep
}

function p_with_default__ref___projection(a: p_with_default__ref) : us_rep =
  (a).p_with_default__content

logic new_with_default : int -> us_rep

logic new_with_default__function_guard : us_rep, int -> prop

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic d1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range1(rec__private_discr__p_with_default__c1: int, a: us_rep) =
  (rec__private_discr__p_with_default__c1 = to_rep(((a).us_split_discrs1).rec__private_discr__p_with_default__c))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__private_discr__p_with_default__c = a }; us_split_fields1 = {
  rec__private_discr__p_with_default = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:us_main_type. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__private_discr__p_with_default__c = a }; us_split_fields1 = {
  rec__private_discr__p_with_default = a1 }; attr__constrained = a2 })))

logic private_discr__p_with_default__c__first__bit1 : int

logic private_discr__p_with_default__c__last__bit1 : int

logic private_discr__p_with_default__c__position1 : int

axiom private_discr__p_with_default__c__first__bit_axiom1 :
  (0 <= private_discr__p_with_default__c__first__bit1)

axiom private_discr__p_with_default__c__last__bit_axiom1 :
  (private_discr__p_with_default__c__first__bit1 <  private_discr__p_with_default__c__last__bit1)

axiom private_discr__p_with_default__c__position_axiom1 :
  (0 <= private_discr__p_with_default__c__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy4 : natural

logic dummy5 : us_main_type

logic dummy6 : bool

type td2S__ref = { td2S__content : us_rep
}

function td2S__ref___2__projection(a: td2S__ref) : us_rep = (a).td2S__content

logic d2__split_discrs : natural

logic d2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic d1__split_fields : us_main_type

logic d1__split_discrs : natural

logic d2__split_fields : us_main_type

logic discr__p4__d1__assume : natural

logic discr__p4__d1__assume1 : us_main_type

logic discr__p4__d1__assume2 : bool

logic us : int

logic o : natural

logic o1 : us_main_type

logic o2 : bool

logic o3 : natural

logic o4 : us_main_type

logic o5 : bool

logic discr__p4__d2__assume : natural

logic discr__p4__d2__assume1 : us_main_type

logic discr__p4__d2__assume2 : bool

logic result : us_main_type

logic d1__split_fields1 : us_main_type

logic result1 : natural

logic d1__split_discrs1 : natural

logic result2 : us_main_type

logic d2__split_fields1 : us_main_type

logic discr__p4__nested1__d__discrs : natural

logic discr__p4__nested1__d__fields : us_main_type

logic result3 : us_main_type

logic d2__split_fields2 : us_main_type

axiom H : in_range(c)

axiom H1 : (({ us_split_discrs1 = { rec__private_discr__p_with_default__c =
  discr__p4__d1__assume }; us_split_fields1 = {
  rec__private_discr__p_with_default = discr__p4__d1__assume1 };
  attr__constrained = discr__p4__d1__assume2 } = new_with_default(c)) and
  (to_rep(discr__p4__d1__assume) = c))

axiom H2 : (result = d1__split_fields)

axiom H3 : (discr__p4__d1__assume1 = d1__split_fields1)

axiom H4 : (result1 = d1__split_discrs)

axiom H5 : (d1__split_discrs1 = discr__p4__d1__assume)

axiom H6 : (d1__attr__constrained = false)

axiom H7 : ((us = c) and in_range(c))

axiom H8 : (({ us_split_discrs1 = { rec__private_discr__p_with_default__c = o
  }; us_split_fields1 = { rec__private_discr__p_with_default = o1 };
  attr__constrained = o2 } = new_with_default(c)) and (to_rep(o) = c))

 (* File "discr.adb", line 111, characters 0-0 *)
goal WP_parameter_def : (c = to_rep(o))
