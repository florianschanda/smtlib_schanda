(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun type_invariant ((temp___154 Int)) Bool (not (= temp___154 0)))
(declare-sort t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (t t) Bool)
(declare-const dummy1 t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))
(define-fun dynamic_invariant1 ((temp___expr_160 Int) (temp___is_init_156 Bool) (temp___skip_constant_157 Bool) (temp___do_toplevel_158 Bool) (temp___do_typ_inv_159 Bool)) Bool (=> (or (= temp___is_init_156 true) (<= 0 2147483647)) (in_range1 temp___expr_160)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun pub (Int) Int)
(declare-fun pub__function_guard (Int Int) Bool)
(assert (forall ((type_invariant_legal_4__x Int)) (! (=> (and (dynamic_invariant1 type_invariant_legal_4__x true true true true) (type_invariant type_invariant_legal_4__x)) (dynamic_invariant (pub type_invariant_legal_4__x) true false true true)) :pattern ((pub type_invariant_legal_4__x)))))
(declare-fun e_pub (Int) Int)
(declare-fun e_pub__function_guard (Int Int) Bool)
(assert (forall ((type_invariant_legal_4__x Int)) (! (=> (and (dynamic_invariant1 type_invariant_legal_4__x true true true true) (type_invariant type_invariant_legal_4__x)) (dynamic_invariant (e_pub type_invariant_legal_4__x) true false true true)) :pattern ((e_pub type_invariant_legal_4__x)))))
(assert (forall ((type_invariant_legal_4__x Int)) (! (=> (dynamic_invariant1 type_invariant_legal_4__x true true true true) (= (e_pub type_invariant_legal_4__x) type_invariant_legal_4__x)) :pattern ((e_pub type_invariant_legal_4__x)))))
(declare-fun priv (Int) Int)
(declare-fun priv__function_guard (Int Int) Bool)
(assert (forall ((type_invariant_legal_4__x Int)) (! (=> (and (dynamic_invariant1 type_invariant_legal_4__x true true true true) (type_invariant type_invariant_legal_4__x)) (dynamic_invariant (priv type_invariant_legal_4__x) true false true true)) :pattern ((priv type_invariant_legal_4__x)))))
(declare-fun e_priv (Int) Int)
(declare-fun e_priv__function_guard (Int Int) Bool)
(assert (forall ((type_invariant_legal_4__x Int)) (! (=> (and (dynamic_invariant1 type_invariant_legal_4__x true true true true) (type_invariant type_invariant_legal_4__x)) (dynamic_invariant (e_priv type_invariant_legal_4__x) true false true true)) :pattern ((e_priv type_invariant_legal_4__x)))))
(assert (forall ((type_invariant_legal_4__x Int)) (! (=> (dynamic_invariant1 type_invariant_legal_4__x true true true true) (= (e_priv type_invariant_legal_4__x) type_invariant_legal_4__x)) :pattern ((e_priv type_invariant_legal_4__x)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert (not true))
(check-sat)
(exit)
