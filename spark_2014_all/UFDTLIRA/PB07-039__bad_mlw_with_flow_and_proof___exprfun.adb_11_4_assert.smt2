(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort t1 0)
(declare-fun user_eq (t1 t1) Bool)
(declare-const value__size Int)
(declare-fun object__size (t1) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (t1) Int)
(assert (<= 0 value__size))
(assert (forall ((a t1)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a t1)) (<= 0 (object__alignment a))))
(declare-const dummy t1)
(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content t1)))))
(define-fun t1__ref___projection ((a t1__ref)) t1 (t1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun prim_func (t1) t1)
(declare-fun prim_func__function_guard (t1 t1) Bool)
(assert true)
(assert (forall ((exprfun__t1_var t1)) (! (= (prim_func exprfun__t1_var) exprfun__t1_var) :pattern ((prim_func exprfun__t1_var)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const t1_var t1)
(declare-const x t1)
(declare-const o t1)
(declare-const result t1)
(declare-const x1 t1)
(assert (and (= o (prim_func t1_var)) (= o t1_var)))
(assert (= result x))
(assert (= x1 o))
(assert (not false))
(check-sat)
(exit)
