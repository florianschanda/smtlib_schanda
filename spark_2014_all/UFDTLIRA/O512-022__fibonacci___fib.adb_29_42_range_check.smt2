(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun fibonacci (Int) Int)
(declare-fun fibonacci__function_guard (Int Int) Bool)
(assert (forall ((n Int)) (! (=> (and (dynamic_invariant n true true true) (<= n 23)) (dynamic_invariant (fibonacci n) true false true)) :pattern ((fibonacci n)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const n1 Int)
(declare-const n2 Int)
(declare-const l1 Int)
(declare-const l2 Int)
(declare-const a1 Int)
(declare-const a2 Int)
(declare-const b1 Int)
(declare-const b2 Int)
(declare-const i Int)
(declare-const copy_n1 Int)
(declare-const copy_n2 Int)
(declare-const temp___165 Int)
(declare-const temp___164 Int)
(declare-const temp___163 Int)
(declare-const temp___162 Int)
(declare-const temp___166 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const temp___170 Int)
(declare-const temp___169 Int)
(declare-const temp___168 Int)
(declare-const temp___167 Int)
(declare-const temp___171 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const n11 Int)
(declare-const n21 Int)
(declare-const result Int)
(declare-const copy_n11 Int)
(declare-const result1 Int)
(declare-const copy_n21 Int)
(declare-const result2 Int)
(declare-const a11 Int)
(declare-const result3 Int)
(declare-const a21 Int)
(declare-const result4 Int)
(declare-const b11 Int)
(declare-const result5 Int)
(declare-const b21 Int)
(declare-const result6 Int)
(declare-const i1 Int)
(declare-const n12 Int)
(declare-const a12 Int)
(declare-const b12 Int)
(declare-const i2 Int)
(declare-const temp___1661 Int)
(declare-const result7 Bool)
(declare-const result8 Int)
(declare-const temp___1662 Int)
(declare-const result9 int__ref)
(declare-const a13 Int)
(declare-const result10 int__ref)
(declare-const b13 Int)
(declare-const result11 int__ref)
(declare-const n13 Int)
(declare-const result12 int__ref)
(declare-const i3 Int)
(declare-const n14 int__ref)
(declare-const a14 int__ref)
(declare-const b14 int__ref)
(declare-const i4 int__ref)
(declare-const temp___1663 int__ref)
(declare-const n15 Int)
(declare-const a15 Int)
(declare-const b15 Int)
(declare-const i5 Int)
(declare-const temp___1664 Int)
(declare-const n16 int__ref)
(declare-const a16 int__ref)
(declare-const b16 int__ref)
(declare-const i6 int__ref)
(declare-const n17 Int)
(declare-const a17 Int)
(declare-const b17 Int)
(declare-const i7 Int)
(declare-const n18 int__ref)
(declare-const a18 int__ref)
(declare-const b18 int__ref)
(declare-const i8 int__ref)
(declare-const n19 Int)
(declare-const a19 Int)
(declare-const b19 Int)
(declare-const i9 Int)
(declare-const result13 int__ref)
(declare-const i10 Int)
(declare-const n22 Int)
(declare-const a22 Int)
(declare-const b22 Int)
(declare-const i11 Int)
(declare-const temp___1711 Int)
(declare-const result14 Bool)
(declare-const result15 int__ref)
(declare-const temp___1712 Int)
(declare-const result16 int__ref)
(declare-const a23 Int)
(declare-const result17 int__ref)
(declare-const b23 Int)
(declare-const result18 int__ref)
(declare-const n23 Int)
(declare-const result19 int__ref)
(declare-const i12 Int)
(declare-const n24 int__ref)
(declare-const a24 int__ref)
(declare-const b24 int__ref)
(declare-const i13 int__ref)
(declare-const temp___1713 int__ref)
(declare-const n25 Int)
(declare-const a25 Int)
(declare-const b25 Int)
(declare-const i14 Int)
(declare-const temp___1714 Int)
(declare-const n26 int__ref)
(declare-const a26 int__ref)
(declare-const b26 int__ref)
(declare-const i15 int__ref)
(declare-const temp___1715 int__ref)
(declare-const n27 Int)
(declare-const a27 Int)
(declare-const b27 Int)
(declare-const i16 Int)
(declare-const temp___1716 Int)
(declare-const n28 int__ref)
(declare-const a28 int__ref)
(declare-const b28 int__ref)
(declare-const i17 int__ref)
(declare-const n29 Int)
(declare-const a29 Int)
(declare-const b29 Int)
(declare-const i18 Int)
(declare-const n210 int__ref)
(declare-const a210 int__ref)
(declare-const b210 int__ref)
(declare-const i19 int__ref)
(declare-const n211 Int)
(declare-const a211 Int)
(declare-const b211 Int)
(declare-const i20 Int)
(declare-const result20 int__ref)
(declare-const l11 Int)
(declare-const result21 int__ref)
(declare-const l12 Int)
(declare-const l13 int__ref)
(declare-const l14 Int)
(declare-const result22 int__ref)
(declare-const l21 Int)
(declare-const result23 int__ref)
(declare-const l22 Int)
(declare-const l23 int__ref)
(declare-const l24 Int)
(declare-const n110 int__ref)
(declare-const n212 int__ref)
(declare-const l15 int__ref)
(declare-const l25 int__ref)
(declare-const a110 int__ref)
(declare-const a212 int__ref)
(declare-const b110 int__ref)
(declare-const b212 int__ref)
(declare-const i21 int__ref)
(declare-const copy_n12 int__ref)
(declare-const copy_n22 int__ref)
(declare-const n111 Int)
(declare-const n213 Int)
(declare-const l16 Int)
(declare-const l26 Int)
(declare-const a111 Int)
(declare-const a213 Int)
(declare-const b111 Int)
(declare-const b213 Int)
(declare-const i22 Int)
(declare-const copy_n13 Int)
(declare-const copy_n23 Int)
(assert (in_range2 n1))
(assert (in_range2 n2))
(assert (in_range2 l1))
(assert (in_range2 l2))
(assert (and (= n1 n2) (and (= l1 l2) (<= n1 23))))
(assert (=> (<= 0 2147483647) (in_range2 a1)))
(assert (=> (<= 0 2147483647) (in_range2 a2)))
(assert (=> (<= 0 2147483647) (in_range2 b1)))
(assert (=> (<= 0 2147483647) (in_range2 b2)))
(assert (=> (<= 0 2147483647) (in_range2 i)))
(assert (=> (<= 0 2147483647) (in_range2 copy_n1)))
(assert (=> (<= 0 2147483647) (in_range2 copy_n2)))
(assert (= (mk_int__ref result) (mk_int__ref copy_n1)))
(assert (= copy_n11 n1))
(assert (= (mk_int__ref result1) (mk_int__ref copy_n2)))
(assert (= copy_n21 n2))
(assert (= (mk_int__ref result2) (mk_int__ref a1)))
(assert (= a11 1))
(assert (= (mk_int__ref result3) (mk_int__ref a2)))
(assert (= a21 1))
(assert (= (mk_int__ref result4) (mk_int__ref b1)))
(assert (= b11 1))
(assert (= (mk_int__ref result5) (mk_int__ref b2)))
(assert (= b21 1))
(assert (= (mk_int__ref result6) (mk_int__ref i)))
(assert (= i1 2))
(assert (< 2 n1))
(assert (and (and (and (= a12 (fibonacci i2)) (= b12 (fibonacci (- i2 1)))) (<= i2 23)) (= (- (+ n12 i2) 2) copy_n11)))
(assert (and (and (and (and (=> (<= 0 2147483647) (in_range2 a12)) (in_range2 n12)) (=> (<= 0 2147483647) (in_range2 b12))) (=> (<= 0 2147483647) (in_range2 i2))) (< 2 n12)))
(assert (and (= o2 (fibonacci i2)) (in_range2 o2)))
(assert (= result7 (ite (= a12 o2) true false)))
(assert (= result7 true))
(assert (not (in_range2 (- i2 1))))
(check-sat)
(exit)
