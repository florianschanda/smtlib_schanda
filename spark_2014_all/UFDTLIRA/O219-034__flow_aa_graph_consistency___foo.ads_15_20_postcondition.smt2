(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__foo__t__f integer) (rec__foo__t__f2 integer) (rec__foo__t__f3 integer) (rec__foo__t__f4 integer) (rec__foo__t__f5 integer)))))
(define-fun us_split_fields_F__projection ((a1 us_split_fields)) integer (rec__foo__t__f a1))
(define-fun us_split_fields_F2__projection ((a1 us_split_fields)) integer (rec__foo__t__f2 a1))
(define-fun us_split_fields_F3__projection ((a1 us_split_fields)) integer (rec__foo__t__f3 a1))
(define-fun us_split_fields_F4__projection ((a1 us_split_fields)) integer (rec__foo__t__f4 a1))
(define-fun us_split_fields_F5__projection ((a1 us_split_fields)) integer (rec__foo__t__f5 a1))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a1 us_split_fields__ref)) us_split_fields (us_split_fields__content a1))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a1 us_rep)) us_split_fields (us_split_fields1 a1))
(define-fun bool_eq ((a1 us_rep) (b1 us_rep)) Bool (ite (and (and (and (and (= (to_rep (rec__foo__t__f (us_split_fields1 a1))) (to_rep (rec__foo__t__f (us_split_fields1 b1)))) (= (to_rep (rec__foo__t__f2 (us_split_fields1 a1))) (to_rep (rec__foo__t__f2 (us_split_fields1 b1))))) (= (to_rep (rec__foo__t__f3 (us_split_fields1 a1))) (to_rep (rec__foo__t__f3 (us_split_fields1 b1))))) (= (to_rep (rec__foo__t__f4 (us_split_fields1 a1))) (to_rep (rec__foo__t__f4 (us_split_fields1 b1))))) (= (to_rep (rec__foo__t__f5 (us_split_fields1 a1))) (to_rep (rec__foo__t__f5 (us_split_fields1 b1))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a1 us_rep)) (<= 0 (object__size a1))))
(assert (<= 0 value__alignment))
(assert (forall ((a1 us_rep)) (<= 0 (object__alignment a1))))
(declare-const foo__t__f__first__bit Int)
(declare-const foo__t__f__last__bit Int)
(declare-const foo__t__f__position Int)
(assert (<= 0 foo__t__f__first__bit))
(assert (< foo__t__f__first__bit foo__t__f__last__bit))
(assert (<= 0 foo__t__f__position))
(declare-const foo__t__f2__first__bit Int)
(declare-const foo__t__f2__last__bit Int)
(declare-const foo__t__f2__position Int)
(assert (<= 0 foo__t__f2__first__bit))
(assert (< foo__t__f2__first__bit foo__t__f2__last__bit))
(assert (<= 0 foo__t__f2__position))
(declare-const foo__t__f3__first__bit Int)
(declare-const foo__t__f3__last__bit Int)
(declare-const foo__t__f3__position Int)
(assert (<= 0 foo__t__f3__first__bit))
(assert (< foo__t__f3__first__bit foo__t__f3__last__bit))
(assert (<= 0 foo__t__f3__position))
(declare-const foo__t__f4__first__bit Int)
(declare-const foo__t__f4__last__bit Int)
(declare-const foo__t__f4__position Int)
(assert (<= 0 foo__t__f4__first__bit))
(assert (< foo__t__f4__first__bit foo__t__f4__last__bit))
(assert (<= 0 foo__t__f4__position))
(declare-const foo__t__f5__first__bit Int)
(declare-const foo__t__f5__last__bit Int)
(declare-const foo__t__f5__position Int)
(assert (<= 0 foo__t__f5__first__bit))
(assert (< foo__t__f5__first__bit foo__t__f5__last__bit))
(assert (<= 0 foo__t__f5__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a1 t__ref)) us_rep (t__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const c Int)
(declare-const r__split_fields integer)
(declare-const r__split_fields1 integer)
(declare-const r__split_fields2 integer)
(declare-const r__split_fields3 integer)
(declare-const r__split_fields4 integer)
(declare-const foo__p__y__fields integer)
(declare-const foo__p__y__fields1 integer)
(declare-const foo__p__y__fields2 integer)
(declare-const foo__p__y__fields3 integer)
(declare-const foo__p__y__fields4 integer)
(declare-const foo__p__x__fields integer)
(declare-const foo__p__x__fields1 integer)
(declare-const foo__p__x__fields2 integer)
(declare-const foo__p__x__fields3 integer)
(declare-const foo__p__x__fields4 integer)
(declare-const result integer)
(declare-const result1 integer)
(declare-const result2 integer)
(declare-const result3 integer)
(declare-const result4 integer)
(declare-const r__split_fields5 integer)
(declare-const r__split_fields6 integer)
(declare-const r__split_fields7 integer)
(declare-const r__split_fields8 integer)
(declare-const r__split_fields9 integer)
(declare-const result5 integer)
(declare-const result6 integer)
(declare-const result7 integer)
(declare-const result8 integer)
(declare-const result9 integer)
(declare-const r__split_fields10 integer)
(declare-const r__split_fields11 integer)
(declare-const r__split_fields12 integer)
(declare-const r__split_fields13 integer)
(declare-const r__split_fields14 integer)
(declare-const result10 Int)
(declare-const c1 Int)
(declare-const c2 Int)
(declare-const r__split_fields15 integer)
(declare-const r__split_fields16 integer)
(declare-const r__split_fields17 integer)
(declare-const r__split_fields18 integer)
(declare-const r__split_fields19 integer)
(declare-const c3 Int)
(declare-const r__split_fields20 integer)
(declare-const r__split_fields21 integer)
(declare-const r__split_fields22 integer)
(declare-const r__split_fields23 integer)
(declare-const r__split_fields24 integer)
(assert (in_range a))
(assert (in_range b))
(assert (=> (<= (- 2147483648) 2147483647) (in_range c)))
(assert (= result r__split_fields))
(assert (= result1 r__split_fields1))
(assert (= result2 r__split_fields2))
(assert (= result3 r__split_fields3))
(assert (= result4 r__split_fields4))
(assert (= (mk___split_fields r__split_fields5 r__split_fields6 r__split_fields7 r__split_fields8 r__split_fields9) (mk___split_fields foo__p__x__fields foo__p__x__fields1 foo__p__x__fields2 foo__p__x__fields3 foo__p__x__fields4)))
(assert (= result5 r__split_fields5))
(assert (= result6 r__split_fields6))
(assert (= result7 r__split_fields7))
(assert (= result8 r__split_fields8))
(assert (= result9 r__split_fields9))
(assert (= (mk___split_fields r__split_fields10 r__split_fields11 r__split_fields12 r__split_fields13 r__split_fields14) (mk___split_fields foo__p__y__fields foo__p__y__fields1 foo__p__y__fields2 foo__p__y__fields3 foo__p__y__fields4)))
(assert (= result10 c))
(assert (= c1 (to_rep r__split_fields10)))
(assert (= r__split_fields15 r__split_fields10))
(assert (= r__split_fields16 r__split_fields11))
(assert (= r__split_fields17 r__split_fields12))
(assert (= r__split_fields18 r__split_fields13))
(assert (= r__split_fields19 r__split_fields14))
(assert (= c1 c2))
(assert (= r__split_fields20 r__split_fields10))
(assert (= r__split_fields21 r__split_fields11))
(assert (= r__split_fields22 r__split_fields12))
(assert (= r__split_fields23 r__split_fields13))
(assert (= r__split_fields24 r__split_fields14))
(assert (= c3 c1))
(assert (not (= c2 a)))
(check-sat)
(exit)
