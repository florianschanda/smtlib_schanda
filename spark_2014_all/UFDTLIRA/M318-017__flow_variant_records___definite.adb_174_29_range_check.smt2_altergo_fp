(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type status

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : status, status -> bool

logic dummy2 : status

type status__ref = { status__content : status
}

function status__ref___projection(a: status__ref) : status =
  (a).status__content

logic to_rep1 : status -> int

logic of_rep1 : int -> status

axiom inversion_axiom1 :
  (forall x:status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:status [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__definite__t__d : status
}

function us_split_discrs___projection(a: us_split_discrs) : status =
  (a).rec__definite__t__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__definite__t__a : natural; rec__definite__t__b :
natural; rec__definite__t__x : bool
}

function us_split_fields_A__projection(a: us_split_fields) : natural =
  (a).rec__definite__t__a

function us_split_fields_B__projection(a: us_split_fields) : natural =
  (a).rec__definite__t__b

function us_split_fields_X__projection(a: us_split_fields) : bool =
  (a).rec__definite__t__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate definite__t__b__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__definite__t__d) = 0)

predicate definite__t__x__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__definite__t__d) = 1)

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__definite__t__d) = to_rep1(((b).us_split_discrs1).rec__definite__t__d)) and
  (((to_rep(((a).us_split_fields1).rec__definite__t__a) = to_rep(((b).us_split_fields1).rec__definite__t__a)) and
  (definite__t__b__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__definite__t__b) = to_rep(((b).us_split_fields1).rec__definite__t__b)))) and
  (definite__t__x__pred(a) ->
  (((a).us_split_fields1).rec__definite__t__x = ((b).us_split_fields1).rec__definite__t__x)))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__definite__t__d) = to_rep1(((b).us_split_discrs1).rec__definite__t__d)) and
  (((to_rep(((a).us_split_fields1).rec__definite__t__a) = to_rep(((b).us_split_fields1).rec__definite__t__a)) and
  (definite__t__b__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__definite__t__b) = to_rep(((b).us_split_fields1).rec__definite__t__b)))) and
  (definite__t__x__pred(a) ->
  (((a).us_split_fields1).rec__definite__t__x = ((b).us_split_fields1).rec__definite__t__x))))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:status. forall a1:natural. forall a2:natural. forall a3:bool.
  forall a4:bool. (0 <= object__size({ us_split_discrs1 = {
  rec__definite__t__d = a }; us_split_fields1 = { rec__definite__t__a = a1;
  rec__definite__t__b = a2; rec__definite__t__x = a3 }; attr__constrained =
  a4 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:status. forall a1:natural. forall a2:natural. forall a3:bool.
  forall a4:bool. (0 <= object__alignment({ us_split_discrs1 = {
  rec__definite__t__d = a }; us_split_fields1 = { rec__definite__t__a = a1;
  rec__definite__t__b = a2; rec__definite__t__x = a3 }; attr__constrained =
  a4 })))

logic definite__t__d__first__bit : int

logic definite__t__d__last__bit : int

logic definite__t__d__position : int

axiom definite__t__d__first__bit_axiom : (0 <= definite__t__d__first__bit)

axiom definite__t__d__last__bit_axiom :
  (definite__t__d__first__bit <  definite__t__d__last__bit)

axiom definite__t__d__position_axiom : (0 <= definite__t__d__position)

logic definite__t__a__first__bit : int

logic definite__t__a__last__bit : int

logic definite__t__a__position : int

axiom definite__t__a__first__bit_axiom : (0 <= definite__t__a__first__bit)

axiom definite__t__a__last__bit_axiom :
  (definite__t__a__first__bit <  definite__t__a__last__bit)

axiom definite__t__a__position_axiom : (0 <= definite__t__a__position)

logic definite__t__b__first__bit : int

logic definite__t__b__last__bit : int

logic definite__t__b__position : int

axiom definite__t__b__first__bit_axiom : (0 <= definite__t__b__first__bit)

axiom definite__t__b__last__bit_axiom :
  (definite__t__b__first__bit <  definite__t__b__last__bit)

axiom definite__t__b__position_axiom : (0 <= definite__t__b__position)

logic definite__t__x__first__bit : int

logic definite__t__x__last__bit : int

logic definite__t__x__position : int

axiom definite__t__x__first__bit_axiom : (0 <= definite__t__x__first__bit)

axiom definite__t__x__last__bit_axiom :
  (definite__t__x__first__bit <  definite__t__x__last__bit)

axiom definite__t__x__position_axiom : (0 <= definite__t__x__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : status

logic dummy4 : natural

logic dummy5 : natural

logic dummy6 : bool

logic dummy7 : bool

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic x__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r52b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range3(rec__definite__t__d1: int, a: us_rep) =
  (rec__definite__t__d1 = to_rep1(((a).us_split_discrs1).rec__definite__t__d))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:status. forall a1:natural. forall a2:natural. forall a3:bool.
  forall a4:bool. (0 <= object__size1({ us_split_discrs1 = {
  rec__definite__t__d = a }; us_split_fields1 = { rec__definite__t__a = a1;
  rec__definite__t__b = a2; rec__definite__t__x = a3 }; attr__constrained =
  a4 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:status. forall a1:natural. forall a2:natural. forall a3:bool.
  forall a4:bool. (0 <= object__alignment1({ us_split_discrs1 = {
  rec__definite__t__d = a }; us_split_fields1 = { rec__definite__t__a = a1;
  rec__definite__t__b = a2; rec__definite__t__x = a3 }; attr__constrained =
  a4 })))

logic definite__t__d__first__bit1 : int

logic definite__t__d__last__bit1 : int

logic definite__t__d__position1 : int

axiom definite__t__d__first__bit_axiom1 : (0 <= definite__t__d__first__bit1)

axiom definite__t__d__last__bit_axiom1 :
  (definite__t__d__first__bit1 <  definite__t__d__last__bit1)

axiom definite__t__d__position_axiom1 : (0 <= definite__t__d__position1)

logic definite__t__b__first__bit1 : int

logic definite__t__b__last__bit1 : int

logic definite__t__b__position1 : int

axiom definite__t__b__first__bit_axiom1 : (0 <= definite__t__b__first__bit1)

axiom definite__t__b__last__bit_axiom1 :
  (definite__t__b__first__bit1 <  definite__t__b__last__bit1)

axiom definite__t__b__position_axiom1 : (0 <= definite__t__b__position1)

logic definite__t__x__first__bit1 : int

logic definite__t__x__last__bit1 : int

logic definite__t__x__position1 : int

axiom definite__t__x__first__bit_axiom1 : (0 <= definite__t__x__first__bit1)

axiom definite__t__x__last__bit_axiom1 :
  (definite__t__x__first__bit1 <  definite__t__x__last__bit1)

axiom definite__t__x__position_axiom1 : (0 <= definite__t__x__position1)

logic definite__t__a__first__bit1 : int

logic definite__t__a__last__bit1 : int

logic definite__t__a__position1 : int

axiom definite__t__a__first__bit_axiom1 : (0 <= definite__t__a__first__bit1)

axiom definite__t__a__last__bit_axiom1 :
  (definite__t__a__first__bit1 <  definite__t__a__last__bit1)

axiom definite__t__a__position_axiom1 : (0 <= definite__t__a__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy8 : status

logic dummy9 : natural

logic dummy10 : natural

logic dummy11 : bool

logic dummy12 : bool

type t53b__ref = { t53b__content : us_rep
}

function t53b__ref___projection(a: t53b__ref) : us_rep = (a).t53b__content

logic x__split_discrs : status

logic o : status

logic o1 : int

logic o2 : natural

logic o3 : natural

logic o4 : natural

logic o5 : bool

logic o6 : status

logic temp___225 : status

logic temp___2251 : natural

logic temp___2252 : natural

logic temp___2253 : bool

logic temp___2254 : bool

axiom H : in_range(i)

axiom H1 : (to_rep1(x__split_discrs) = r52b)

axiom H2 : in_range2(r52b)

 (* File "definite.adb", line 157, characters 0-0 *)
goal WP_parameter_def : in_range1(i)
