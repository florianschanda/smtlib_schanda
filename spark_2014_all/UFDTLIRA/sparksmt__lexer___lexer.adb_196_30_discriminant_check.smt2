(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((file__ref (mk_file__ref (file__content us_rep)))))
(define-fun file__ref___projection ((a file__ref)) us_rep (file__content a))
(declare-sort read_status 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (read_status read_status) Bool)
(declare-const dummy4 read_status)
(declare-datatypes () ((read_status__ref (mk_read_status__ref (read_status__content read_status)))))
(define-fun read_status__ref___projection ((a read_status__ref)) read_status (read_status__content a))
(declare-fun to_rep1 (read_status) Int)
(declare-fun of_rep1 (Int) read_status)
(assert (forall ((x read_status)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x read_status)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__file_io__read_result__status read_status)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) read_status (rec__file_io__read_result__status a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__file_io__read_result__c character)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) character (rec__file_io__read_result__c a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___5__projection ((a us_rep1)) Bool (attr__constrained a))
(define-fun file_io__read_result__c__pred ((a us_rep1)) Bool (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 a))) 0))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 a))) (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 b)))) (=> (file_io__read_result__c__pred a) (= (to_rep (rec__file_io__read_result__c (us_split_fields1 a))) (to_rep (rec__file_io__read_result__c (us_split_fields1 b)))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const file_io__read_result__status__first__bit Int)
(declare-const file_io__read_result__status__last__bit Int)
(declare-const file_io__read_result__status__position Int)
(assert (<= 0 file_io__read_result__status__first__bit))
(assert (< file_io__read_result__status__first__bit file_io__read_result__status__last__bit))
(assert (<= 0 file_io__read_result__status__position))
(declare-const file_io__read_result__c__first__bit Int)
(declare-const file_io__read_result__c__last__bit Int)
(declare-const file_io__read_result__c__position Int)
(assert (<= 0 file_io__read_result__c__first__bit))
(assert (< file_io__read_result__c__first__bit file_io__read_result__c__last__bit))
(assert (<= 0 file_io__read_result__c__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((read_result__ref (mk_read_result__ref (read_result__content us_rep1)))))
(define-fun read_result__ref___projection ((a read_result__ref)) us_rep1 (read_result__content a))
(define-fun default_initial_assumption ((temp___expr_531 us_rep1) (temp___skip_top_level_532 Bool)) Bool (and (= (attr__constrained temp___expr_531) false) (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 temp___expr_531))) 2)))
(declare-const current_read__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const next_read__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun local_invariant (us_split_fields us_split_discrs us_split_fields us_split_discrs) Bool)
(declare-fun local_invariant__function_guard (Bool us_split_fields us_split_discrs us_split_fields us_split_discrs) Bool)
(assert true)
(assert (forall ((lexer__current_read__fields us_split_fields) (lexer__next_read__fields us_split_fields)) (forall ((lexer__current_read__discrs us_split_discrs) (lexer__next_read__discrs us_split_discrs)) (! (= (= (local_invariant lexer__current_read__fields lexer__current_read__discrs lexer__next_read__fields lexer__next_read__discrs) true) (and (not (= (attr__constrained (mk___rep lexer__current_read__discrs lexer__current_read__fields current_read__attr__constrained)) true)) (not (= (attr__constrained (mk___rep lexer__next_read__discrs lexer__next_read__fields next_read__attr__constrained)) true)))) :pattern ((local_invariant lexer__current_read__fields lexer__current_read__discrs lexer__next_read__fields lexer__next_read__discrs))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant3 ((temp___expr_522 Int) (temp___is_init_518 Bool) (temp___skip_constant_519 Bool) (temp___do_toplevel_520 Bool) (temp___do_typ_inv_521 Bool)) Bool (=> (or (= temp___is_init_518 true) (<= 0 2)) (in_range4 temp___expr_522)))
(declare-const current_read__split_fields character)
(declare-const current_read__split_discrs read_status)
(declare-const current_line Int)
(declare-const current_col Int)
(declare-const current_pos Int)
(declare-const next_read__split_fields character)
(declare-const next_read__split_discrs read_status)
(declare-const temp___1000 us_rep)
(declare-const temp___999 read_status)
(declare-const temp___9991 character)
(declare-const temp___9992 Bool)
(declare-const temp___998 Int)
(declare-const temp___997 Int)
(declare-const temp___996 Int)
(declare-const temp___995 us_rep1)
(declare-const o Bool)
(declare-const the_file us_rep)
(declare-const current_read__split_fields1 us_split_fields)
(declare-const current_read__split_discrs1 us_split_discrs)
(declare-const current_line1 Int)
(declare-const current_col1 Int)
(declare-const current_pos1 Int)
(declare-const next_read__split_fields1 us_split_fields)
(declare-const next_read__split_discrs1 us_split_discrs)
(declare-const result Bool)
(declare-const current_read__split_fields2 us_split_fields)
(declare-const current_read__split_discrs2 us_split_discrs)
(declare-const current_line2 Int)
(declare-const current_col2 Int)
(declare-const current_pos2 Int)
(declare-const next_read__split_fields2 us_split_fields)
(declare-const next_read__split_discrs2 us_split_discrs)
(declare-const the_file1 us_rep)
(declare-const current_read__split_fields3 us_split_fields)
(declare-const current_read__split_discrs3 us_split_discrs)
(declare-const current_line3 Int)
(declare-const current_col3 Int)
(declare-const current_pos3 Int)
(declare-const next_read__split_fields3 us_split_fields)
(declare-const next_read__split_discrs3 us_split_discrs)
(declare-const result1 Bool)
(declare-const the_file2 file__ref)
(declare-const current_read__split_fields4 us_split_fields__ref)
(declare-const current_read__split_discrs4 us_split_discrs__ref)
(declare-const current_line4 int__ref)
(declare-const current_col4 int__ref)
(declare-const current_pos4 int__ref)
(declare-const next_read__split_fields4 us_split_fields__ref)
(declare-const next_read__split_discrs4 us_split_discrs__ref)
(declare-const the_file3 us_rep)
(declare-const current_read__split_fields5 us_split_fields)
(declare-const current_read__split_discrs5 us_split_discrs)
(declare-const current_line5 Int)
(declare-const current_col5 Int)
(declare-const current_pos5 Int)
(declare-const next_read__split_fields5 us_split_fields)
(declare-const next_read__split_discrs5 us_split_discrs)
(declare-const the_file4 file__ref)
(declare-const current_read__split_fields6 us_split_fields__ref)
(declare-const current_read__split_discrs6 us_split_discrs__ref)
(declare-const current_line6 int__ref)
(declare-const current_col6 int__ref)
(declare-const current_pos6 int__ref)
(declare-const next_read__split_fields6 us_split_fields__ref)
(declare-const next_read__split_discrs6 us_split_discrs__ref)
(declare-const the_file5 us_rep)
(declare-const current_read__split_fields7 us_split_fields)
(declare-const current_read__split_discrs7 us_split_discrs)
(declare-const current_line7 Int)
(declare-const current_col7 Int)
(declare-const current_pos7 Int)
(declare-const next_read__split_fields7 us_split_fields)
(declare-const next_read__split_discrs7 us_split_discrs)
(declare-const result2 Bool)
(declare-const current_read__split_fields8 us_split_fields)
(declare-const current_read__split_discrs8 us_split_discrs)
(declare-const current_line8 Int)
(declare-const current_col8 Int)
(declare-const current_pos8 Int)
(declare-const next_read__split_fields8 us_split_fields)
(declare-const next_read__split_discrs8 us_split_discrs)
(assert (= current_read__attr__constrained false))
(assert (in_range2 current_line))
(assert (in_range1 current_col))
(assert (in_range1 current_pos))
(assert (= next_read__attr__constrained false))
(assert (= (local_invariant (mk___split_fields current_read__split_fields) (mk___split_discrs current_read__split_discrs) (mk___split_fields next_read__split_fields) (mk___split_discrs next_read__split_discrs)) true))
(assert (and (and (in_range2 current_line1) (in_range1 current_col1)) (in_range1 current_pos1)))
(assert (=> (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs1)) 0) (= result (ite (or (= (to_rep (rec__file_io__read_result__c current_read__split_fields1)) 10) (or (= (to_rep (rec__file_io__read_result__c current_read__split_fields1)) 13) (or (= (to_rep (rec__file_io__read_result__c current_read__split_fields1)) 32) (= (to_rep (rec__file_io__read_result__c current_read__split_fields1)) 9)))) true false))))
(assert (=> (not (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs1)) 0)) (= result false)))
(assert (=> (= result true) (= temp___1000 the_file)))
(assert (=> (= result true) (and (= next_read__split_discrs1 (mk___split_discrs temp___999)) (and (= next_read__split_fields1 (mk___split_fields temp___9991)) (= next_read__attr__constrained temp___9992)))))
(assert (=> (= result true) (= temp___998 current_pos1)))
(assert (=> (= result true) (= temp___997 current_col1)))
(assert (=> (= result true) (= temp___996 current_line1)))
(assert (=> (= result true) (= temp___995 (mk___rep current_read__split_discrs1 current_read__split_fields1 current_read__attr__constrained))))
(assert (=> (= result true) (and (and (and (in_range2 current_line2) (in_range1 current_col2)) (in_range1 current_pos2)) (and (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs2)) 0) (let ((temp___1002 (to_rep (rec__file_io__read_result__c current_read__split_fields2)))) (or (= temp___1002 10) (or (= temp___1002 13) (or (= temp___1002 32) (= temp___1002 9)))))))))
(assert (=> (= result true) (and (and (and (= (local_invariant current_read__split_fields3 current_read__split_discrs3 next_read__split_fields3 next_read__split_discrs3) true) (= (bool_eq1 (mk___rep current_read__split_discrs3 current_read__split_fields3 current_read__attr__constrained) (mk___rep next_read__split_discrs2 next_read__split_fields2 next_read__attr__constrained)) true)) (<= current_pos2 current_pos3)) (and (and (in_range2 current_line3) (in_range1 current_col3)) (in_range1 current_pos3)))))
(assert (=> (= result true) (=> (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs3)) 0) (= o (ite (or (= (to_rep (rec__file_io__read_result__c current_read__split_fields3)) 10) (or (= (to_rep (rec__file_io__read_result__c current_read__split_fields3)) 13) (or (= (to_rep (rec__file_io__read_result__c current_read__split_fields3)) 32) (= (to_rep (rec__file_io__read_result__c current_read__split_fields3)) 9)))) true false)))))
(assert (=> (= result true) (=> (not (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs3)) 0)) (= o false))))
(assert (=> (= result true) (= result1 (ite (not (= o true)) true false))))
(assert (=> (= result true) (= result1 true)))
(assert (=> (= result true) (= next_read__split_discrs4 (mk___split_discrs__ref next_read__split_discrs3))))
(assert (=> (= result true) (= next_read__split_fields4 (mk___split_fields__ref next_read__split_fields3))))
(assert (=> (= result true) (= current_pos4 (mk_int__ref current_pos3))))
(assert (=> (= result true) (= current_col4 (mk_int__ref current_col3))))
(assert (=> (= result true) (= current_line4 (mk_int__ref current_line3))))
(assert (=> (= result true) (= current_read__split_discrs4 (mk___split_discrs__ref current_read__split_discrs3))))
(assert (=> (= result true) (= current_read__split_fields4 (mk___split_fields__ref current_read__split_fields3))))
(assert (=> (= result true) (= the_file2 (mk_file__ref the_file1))))
(assert (=> (= result true) (= next_read__split_discrs5 next_read__split_discrs3)))
(assert (=> (= result true) (= next_read__split_fields5 next_read__split_fields3)))
(assert (=> (= result true) (= current_pos5 current_pos3)))
(assert (=> (= result true) (= current_col5 current_col3)))
(assert (=> (= result true) (= current_line5 current_line3)))
(assert (=> (= result true) (= current_read__split_discrs5 current_read__split_discrs3)))
(assert (=> (= result true) (= current_read__split_fields5 current_read__split_fields3)))
(assert (=> (= result true) (= the_file3 the_file1)))
(assert (=> (= result true) (= next_read__split_discrs6 next_read__split_discrs4)))
(assert (=> (= result true) (= next_read__split_fields6 next_read__split_fields4)))
(assert (=> (= result true) (= current_pos6 current_pos4)))
(assert (=> (= result true) (= current_col6 current_col4)))
(assert (=> (= result true) (= current_line6 current_line4)))
(assert (=> (= result true) (= current_read__split_discrs6 current_read__split_discrs4)))
(assert (=> (= result true) (= current_read__split_fields6 current_read__split_fields4)))
(assert (=> (= result true) (= the_file4 the_file2)))
(assert (=> (= result true) (= next_read__split_discrs7 next_read__split_discrs5)))
(assert (=> (= result true) (= next_read__split_fields7 next_read__split_fields5)))
(assert (=> (= result true) (= current_pos7 current_pos5)))
(assert (=> (= result true) (= current_col7 current_col5)))
(assert (=> (= result true) (= current_line7 current_line5)))
(assert (=> (= result true) (= current_read__split_discrs7 current_read__split_discrs5)))
(assert (=> (= result true) (= current_read__split_fields7 current_read__split_fields5)))
(assert (=> (= result true) (= the_file5 the_file3)))
(assert (=> (not (= result true)) (= next_read__split_discrs6 (mk___split_discrs__ref next_read__split_discrs1))))
(assert (=> (not (= result true)) (= next_read__split_fields6 (mk___split_fields__ref next_read__split_fields1))))
(assert (=> (not (= result true)) (= current_pos6 (mk_int__ref current_pos1))))
(assert (=> (not (= result true)) (= current_col6 (mk_int__ref current_col1))))
(assert (=> (not (= result true)) (= current_line6 (mk_int__ref current_line1))))
(assert (=> (not (= result true)) (= current_read__split_discrs6 (mk___split_discrs__ref current_read__split_discrs1))))
(assert (=> (not (= result true)) (= current_read__split_fields6 (mk___split_fields__ref current_read__split_fields1))))
(assert (=> (not (= result true)) (= the_file4 (mk_file__ref the_file))))
(assert (=> (not (= result true)) (= next_read__split_discrs7 next_read__split_discrs1)))
(assert (=> (not (= result true)) (= next_read__split_fields7 next_read__split_fields1)))
(assert (=> (not (= result true)) (= current_pos7 current_pos1)))
(assert (=> (not (= result true)) (= current_col7 current_col1)))
(assert (=> (not (= result true)) (= current_line7 current_line1)))
(assert (=> (not (= result true)) (= current_read__split_discrs7 current_read__split_discrs1)))
(assert (=> (not (= result true)) (= current_read__split_fields7 current_read__split_fields1)))
(assert (=> (not (= result true)) (= the_file5 the_file)))
(assert (=> (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs__content current_read__split_discrs6))) 0) (= result2 (ite (= (to_rep (rec__file_io__read_result__c (us_split_fields__content current_read__split_fields6))) 59) true false))))
(assert (=> (not (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs__content current_read__split_discrs6))) 0)) (= result2 false)))
(assert (= result2 true))
(assert (and (and (and (= (local_invariant current_read__split_fields8 current_read__split_discrs8 next_read__split_fields8 next_read__split_discrs8) true) (= (bool_eq1 (mk___rep current_read__split_discrs8 current_read__split_fields8 current_read__attr__constrained) (mk___rep (us_split_discrs__content next_read__split_discrs6) (us_split_fields__content next_read__split_fields6) next_read__attr__constrained)) true)) (<= (int__content current_pos6) current_pos8)) (and (and (in_range2 current_line8) (in_range1 current_col8)) (in_range1 current_pos8))))
(assert (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs8)) 0))
(assert (not (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs8)) 0)))
(check-sat)
(exit)
