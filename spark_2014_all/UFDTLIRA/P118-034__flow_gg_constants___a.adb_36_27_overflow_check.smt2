(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun add (Int Int) Int)
(declare-fun add__function_guard (Int Int Int) Bool)
(declare-fun add_annotated (Int Int) Int)
(declare-fun add_annotated__function_guard (Int Int Int) Bool)
(declare-fun add_annotated_local (Int Int) Int)
(declare-fun add_annotated_local__function_guard (Int Int Int) Bool)
(declare-const c3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const c4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const c5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const c6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const c7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const c8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (dynamic_invariant (add_annotated_local x y) true false true true)) :pattern ((add_annotated_local x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (= (add_annotated_local x y) (+ x y))) :pattern ((add_annotated_local x y)))))
(assert (= c3 (add_annotated_local 42 44)))
(assert (= c4 (add_annotated_local 42 c3)))
(assert (= c5 (add_annotated c3 c4)))
(assert (= c6 (add_annotated c3 c5)))
(assert (= c7 (add c5 c6)))
(assert (= c8 (add c5 c7)))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (dynamic_invariant (add x y) true false true true)) :pattern ((add x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (= (add x y) (+ x y))) :pattern ((add x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (dynamic_invariant (add_annotated x y) true false true true)) :pattern ((add_annotated x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (= (add_annotated x y) (+ x y))) :pattern ((add_annotated x y)))))
(declare-const o Int)
(declare-const o1 Int)
(assert (in_range1 c3))
(assert (= (add_annotated_local 42 44) c3))
(assert (in_range1 c4))
(assert (= (add_annotated_local 42 c3) c4))
(assert (in_range1 c5))
(assert (= (add_annotated c3 c4) c5))
(assert (in_range1 c6))
(assert (= (add_annotated c3 c5) c6))
(assert (in_range1 c7))
(assert (= (add c5 c6) c7))
(assert (in_range1 c8))
(assert (= (add c5 c7) c8))
(assert (and (= o (+ 86 c3)) (in_range1 (+ 86 c3))))
(assert (= o1 (+ o c4)))
(assert (not (in_range1 o1)))
(check-sat)
(exit)
