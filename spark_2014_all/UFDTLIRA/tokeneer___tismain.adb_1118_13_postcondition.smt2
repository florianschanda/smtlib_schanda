(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort privileget 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (privileget privileget) Bool)
(declare-const dummy privileget)
(declare-datatypes () ((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget (privileget__content a))
(declare-fun to_rep (privileget) Int)
(declare-fun of_rep (Int) privileget)
(assert (forall ((x privileget)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort opandnullt 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (opandnullt opandnullt) Bool)
(declare-const dummy1 opandnullt)
(declare-datatypes () ((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt (opandnullt__content a))
(declare-fun to_rep1 (opandnullt) Int)
(declare-fun of_rep1 (Int) opandnullt)
(assert (forall ((x opandnullt)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x opandnullt)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__admin__t__rolepresent privileget) (rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget (rec__admin__t__rolepresent a))
(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt (rec__admin__t__currentop a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__admin__t__rolepresent (us_split_fields1 a))) (to_rep (rec__admin__t__rolepresent (us_split_fields1 b)))) (= (to_rep1 (rec__admin__t__currentop (us_split_fields1 a))) (to_rep1 (rec__admin__t__currentop (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const admin__t__rolepresent__first__bit Int)
(declare-const admin__t__rolepresent__last__bit Int)
(declare-const admin__t__rolepresent__position Int)
(assert (<= 0 admin__t__rolepresent__first__bit))
(assert (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))
(assert (<= 0 admin__t__rolepresent__position))
(declare-const admin__t__currentop__first__bit Int)
(declare-const admin__t__currentop__last__bit Int)
(declare-const admin__t__currentop__position Int)
(assert (<= 0 admin__t__currentop__first__bit))
(assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))
(assert (<= 0 admin__t__currentop__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-fun rolepresent (us_rep) Int)
(declare-fun rolepresent__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_179 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 0 3)) (in_range1 temp___expr_179)))
(assert (forall ((theadmin us_rep)) (! (dynamic_invariant (rolepresent theadmin) true false true) :pattern ((rolepresent theadmin)))))
(declare-fun isdoingop (us_rep) Bool)
(declare-fun isdoingop__function_guard (Bool us_rep) Bool)
(assert true)
(declare-fun thecurrentop (us_rep) Int)
(declare-fun thecurrentop__function_guard (Int us_rep) Bool)
(declare-sort opt 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (opt opt) Bool)
(declare-const dummy3 opt)
(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))
(define-fun dynamic_invariant1 ((temp___expr_267 Int) (temp___is_init_264 Bool) (temp___skip_constant_265 Bool) (temp___do_toplevel_266 Bool)) Bool (=> (or (= temp___is_init_264 true) (<= 1 4)) (in_range3 temp___expr_267)))
(assert (forall ((theadmin us_rep)) (! (=> (= (isdoingop theadmin) true) (dynamic_invariant1 (thecurrentop theadmin) true false true)) :pattern ((thecurrentop theadmin)))))
(declare-fun ispresent (us_rep) Bool)
(declare-fun ispresent__function_guard (Bool us_rep) Bool)
(assert true)
(declare-sort yearst 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (yearst yearst) Bool)
(declare-const dummy4 yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(declare-fun to_rep2 (yearst) Int)
(declare-fun of_rep2 (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x yearst)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort monthst 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (monthst monthst) Bool)
(declare-const dummy5 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(declare-fun to_rep3 (monthst) Int)
(declare-fun of_rep3 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x monthst)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort dayst 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (dayst dayst) Bool)
(declare-const dummy6 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(declare-fun to_rep4 (dayst) Int)
(declare-fun of_rep4 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x dayst)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-sort millisecst 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (millisecst millisecst) Bool)
(declare-const dummy7 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(declare-fun to_rep5 (millisecst) Int)
(declare-fun of_rep5 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x millisecst)) (! (in_range7 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields2)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__projection ((a us_split_fields2)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__projection ((a us_split_fields2)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields2)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep2 (rec__clock__timet__year (us_split_fields3 a))) (to_rep2 (rec__clock__timet__year (us_split_fields3 b)))) (= (to_rep3 (rec__clock__timet__month (us_split_fields3 a))) (to_rep3 (rec__clock__timet__month (us_split_fields3 b))))) (= (to_rep4 (rec__clock__timet__day (us_split_fields3 a))) (to_rep4 (rec__clock__timet__day (us_split_fields3 b))))) (= (to_rep5 (rec__clock__timet__millisec (us_split_fields3 a))) (to_rep5 (rec__clock__timet__millisec (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep1)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep1 (timet__content a))
(declare-fun thecurrenttime (us_private) us_rep1)
(declare-fun thecurrenttime__function_guard (us_rep1 us_private) Bool)
(assert true)
(declare-fun greaterthanorequal (us_rep1 us_rep1) Bool)
(declare-fun greaterthanorequal__function_guard (Bool us_rep1 us_rep1) Bool)
(assert true)
(declare-fun privatekeypresent (us_private) Bool)
(declare-fun privatekeypresent__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun theauthcertrole (us_private) Int)
(declare-fun theauthcertrole__function_guard (Int us_private) Bool)
(assert (forall ((admintoken__state us_private)) (! (dynamic_invariant (theauthcertrole admintoken__state) true false true) :pattern ((theauthcertrole admintoken__state)))))
(declare-fun isgood (us_private) Bool)
(declare-fun isgood__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun authcertvalid (us_private) Bool)
(declare-fun authcertvalid__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun interfac_islocked (tuple0) Bool)
(declare-fun interfac_islocked__function_guard (Bool tuple0) Bool)
(declare-fun islocked (us_private) Bool)
(declare-fun islocked__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun alarm_timeout (us_private) us_rep1)
(declare-fun alarm_timeout__function_guard (us_rep1 us_private) Bool)
(assert true)
(declare-fun thecurrentdoor (us_private) Int)
(declare-fun thecurrentdoor__function_guard (Int us_private) Bool)
(declare-sort t 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (t t) Bool)
(declare-const dummy9 t)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 t)))))
(define-fun t__ref___4__projection ((a t__ref1)) t (t__content1 a))
(define-fun dynamic_invariant2 ((temp___expr_1036 Int) (temp___is_init_1033 Bool) (temp___skip_constant_1034 Bool) (temp___do_toplevel_1035 Bool)) Bool (=> (or (= temp___is_init_1033 true) (<= 0 1)) (in_range8 temp___expr_1036)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant2 (thecurrentdoor door__state) true false true) :pattern ((thecurrentdoor door__state)))))
(declare-fun isalarming (tuple0) Bool)
(declare-fun isalarming__function_guard (Bool tuple0) Bool)
(declare-sort statscount 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq10 (statscount statscount) Bool)
(declare-const dummy10 statscount)
(declare-datatypes () ((statscount__ref (mk_statscount__ref (statscount__content statscount)))))
(define-fun statscount__ref___projection ((a statscount__ref)) statscount (statscount__content a))
(declare-fun to_rep6 (statscount) Int)
(declare-fun of_rep6 (Int) statscount)
(assert (forall ((x statscount)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x statscount)) (! (in_range9 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6 (of_rep6 x))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__stats__t__successentry statscount) (rec__stats__t__failentry statscount) (rec__stats__t__successbio statscount) (rec__stats__t__failbio statscount)))))
(define-fun us_split_fields_SuccessEntry__projection ((a us_split_fields4)) statscount (rec__stats__t__successentry a))
(define-fun us_split_fields_FailEntry__projection ((a us_split_fields4)) statscount (rec__stats__t__failentry a))
(define-fun us_split_fields_SuccessBio__projection ((a us_split_fields4)) statscount (rec__stats__t__successbio a))
(define-fun us_split_fields_FailBio__projection ((a us_split_fields4)) statscount (rec__stats__t__failbio a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___17__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___18__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (= (to_rep6 (rec__stats__t__successentry (us_split_fields5 a))) (to_rep6 (rec__stats__t__successentry (us_split_fields5 b)))) (= (to_rep6 (rec__stats__t__failentry (us_split_fields5 a))) (to_rep6 (rec__stats__t__failentry (us_split_fields5 b))))) (= (to_rep6 (rec__stats__t__successbio (us_split_fields5 a))) (to_rep6 (rec__stats__t__successbio (us_split_fields5 b))))) (= (to_rep6 (rec__stats__t__failbio (us_split_fields5 a))) (to_rep6 (rec__stats__t__failbio (us_split_fields5 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const stats__t__successentry__first__bit Int)
(declare-const stats__t__successentry__last__bit Int)
(declare-const stats__t__successentry__position Int)
(assert (<= 0 stats__t__successentry__first__bit))
(assert (< stats__t__successentry__first__bit stats__t__successentry__last__bit))
(assert (<= 0 stats__t__successentry__position))
(declare-const stats__t__failentry__first__bit Int)
(declare-const stats__t__failentry__last__bit Int)
(declare-const stats__t__failentry__position Int)
(assert (<= 0 stats__t__failentry__first__bit))
(assert (< stats__t__failentry__first__bit stats__t__failentry__last__bit))
(assert (<= 0 stats__t__failentry__position))
(declare-const stats__t__successbio__first__bit Int)
(declare-const stats__t__successbio__last__bit Int)
(declare-const stats__t__successbio__position Int)
(assert (<= 0 stats__t__successbio__first__bit))
(assert (< stats__t__successbio__first__bit stats__t__successbio__last__bit))
(assert (<= 0 stats__t__successbio__position))
(declare-const stats__t__failbio__first__bit Int)
(declare-const stats__t__failbio__last__bit Int)
(declare-const stats__t__failbio__position Int)
(assert (<= 0 stats__t__failbio__first__bit))
(assert (< stats__t__failbio__first__bit stats__t__failbio__last__bit))
(assert (<= 0 stats__t__failbio__position))
(declare-fun user_eq11 (us_rep2 us_rep2) Bool)
(declare-const dummy11 us_rep2)
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 us_rep2)))))
(define-fun t__ref___5__projection ((a t__ref2)) us_rep2 (t__content2 a))
(declare-fun statusisgotadmintoken (us_private) Bool)
(declare-fun statusisgotadmintoken__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusiswaitingremoveadmintokenfail (us_private) Bool)
(declare-fun statusiswaitingremoveadmintokenfail__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusiswaitingstartadminop (us_private) Bool)
(declare-fun statusiswaitingstartadminop__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusiswaitingfinishadminop (us_private) Bool)
(declare-fun statusiswaitingfinishadminop__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusisenclavequiescent (us_private) Bool)
(declare-fun statusisenclavequiescent__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusisshutdown (us_private) Bool)
(declare-fun statusisshutdown__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun enrolmentisinprogress (us_private) Bool)
(declare-fun enrolmentisinprogress__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun current_latch (us_private) Int)
(declare-fun current_latch__function_guard (Int us_private) Bool)
(declare-fun latch_timeout (us_private) us_rep1)
(declare-fun latch_timeout__function_guard (us_rep1 us_private) Bool)
(declare-fun thedooralarm (us_private) Int)
(declare-fun thedooralarm__function_guard (Int us_private) Bool)
(declare-fun latchislocked (tuple0) Bool)
(declare-fun latchislocked__function_guard (Bool tuple0) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant3 ((temp___expr_261 Int) (temp___is_init_258 Bool) (temp___skip_constant_259 Bool) (temp___do_toplevel_260 Bool)) Bool (=> (or (= temp___is_init_258 true) (<= 0 4)) (in_range2 temp___expr_261)))
(declare-sort statust 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq12 (statust statust) Bool)
(declare-const dummy12 statust)
(declare-datatypes () ((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content a))
(define-fun dynamic_invariant4 ((temp___expr_306 Int) (temp___is_init_303 Bool) (temp___skip_constant_304 Bool) (temp___do_toplevel_305 Bool)) Bool (=> (or (= temp___is_init_303 true) (<= 0 1)) (in_range10 temp___expr_306)))
(define-fun dynamic_invariant5 ((temp___expr_366 Int) (temp___is_init_363 Bool) (temp___skip_constant_364 Bool) (temp___do_toplevel_365 Bool)) Bool (=> (or (= temp___is_init_363 true) (<= 1901 2099)) (in_range4 temp___expr_366)))
(define-fun dynamic_invariant6 ((temp___expr_372 Int) (temp___is_init_369 Bool) (temp___skip_constant_370 Bool) (temp___do_toplevel_371 Bool)) Bool (=> (or (= temp___is_init_369 true) (<= 1 12)) (in_range5 temp___expr_372)))
(define-fun dynamic_invariant7 ((temp___expr_378 Int) (temp___is_init_375 Bool) (temp___skip_constant_376 Bool) (temp___do_toplevel_377 Bool)) Bool (=> (or (= temp___is_init_375 true) (<= 1 31)) (in_range6 temp___expr_378)))
(define-fun dynamic_invariant8 ((temp___expr_402 Int) (temp___is_init_399 Bool) (temp___skip_constant_400 Bool) (temp___do_toplevel_401 Bool)) Bool (=> (or (= temp___is_init_399 true) (<= 0 86399999)) (in_range7 temp___expr_402)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant4 (thedooralarm door__state) true false true) :pattern ((thedooralarm door__state)))))
(declare-sort t1 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq13 (t1 t1) Bool)
(declare-const dummy13 t1)
(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 t1)))))
(define-fun t__ref___3__projection ((a t__ref3)) t1 (t__content3 a))
(define-fun dynamic_invariant9 ((temp___expr_1030 Int) (temp___is_init_1027 Bool) (temp___skip_constant_1028 Bool) (temp___do_toplevel_1029 Bool)) Bool (=> (or (= temp___is_init_1027 true) (<= 0 1)) (in_range11 temp___expr_1030)))
(assert (forall ((latch__state us_private)) (! (dynamic_invariant9 (current_latch latch__state) true false true) :pattern ((current_latch latch__state)))))
(assert true)
(define-fun dynamic_invariant10 ((temp___expr_1240 Int) (temp___is_init_1237 Bool) (temp___skip_constant_1238 Bool) (temp___do_toplevel_1239 Bool)) Bool (=> (or (= temp___is_init_1237 true) (<= 0 2147483647)) (in_range9 temp___expr_1240)))
(declare-const thestats__split_fields statscount)
(declare-const thestats__split_fields1 statscount)
(declare-const thestats__split_fields2 statscount)
(declare-const thestats__split_fields3 statscount)
(declare-const theadmin__split_fields privileget)
(declare-const theadmin__split_fields1 opandnullt)
(declare-const filestate us_private)
(declare-const state us_private)
(declare-const state1 us_private)
(declare-const store1 us_private)
(declare-const state2 us_private)
(declare-const state3 us_private)
(declare-const output us_private)
(declare-const output1 us_private)
(declare-const filestate1 us_private)
(declare-const state4 us_private)
(declare-const output2 us_private__ref)
(declare-const state5 us_private__ref)
(declare-const output3 us_private__ref)
(declare-const writtenstate us_private__ref)
(declare-const state6 us_private__ref)
(declare-const output4 us_private__ref)
(declare-const state7 us_private__ref)
(declare-const status us_private__ref)
(declare-const output5 us_private__ref)
(declare-const state8 us_private__ref)
(declare-const state9 us_private__ref)
(declare-const thestats__split_fields4 us_split_fields4)
(declare-const theadmin__split_fields2 us_split_fields)
(declare-const filestate2 us_private)
(declare-const state10 us_private)
(declare-const state11 us_private)
(declare-const store2 us_private)
(declare-const output6 us_private)
(declare-const output7 us_private)
(declare-const filestate3 us_private)
(declare-const state12 us_private)
(declare-const output8 us_private)
(declare-const state13 us_private)
(declare-const output9 us_private)
(declare-const writtenstate1 us_private)
(declare-const state14 us_private)
(declare-const output10 us_private)
(declare-const output11 us_private)
(declare-const state15 us_private)
(declare-const state16 us_private)
(declare-const systemfault Bool)
(declare-const currenttime us_private)
(declare-const state17 us_private)
(declare-const filestate4 us_private)
(declare-const state18 us_private)
(declare-const status1 us_private)
(declare-const state19 us_private)
(declare-const state20 us_private)
(declare-const state21 us_private)
(declare-const state22 us_private)
(declare-const status2 us_private)
(declare-const systemfault1 Bool)
(declare-const state23 us_private)
(declare-const filestate5 us_private)
(declare-const output12 us_private)
(declare-const output13 us_private)
(declare-const thestats__split_fields5 us_split_fields4)
(declare-const theadmin__split_fields3 us_split_fields)
(declare-const filestate6 us_private)
(declare-const state24 us_private)
(declare-const state25 us_private)
(declare-const store3 us_private)
(declare-const state26 us_private)
(declare-const status3 us_private)
(declare-const state27 us_private)
(declare-const state28 us_private)
(declare-const filestate7 us_private)
(declare-const state29 us_private)
(declare-const state30 us_private)
(declare-const output14 us_private)
(declare-const writtenstate2 us_private)
(declare-const state31 us_private)
(declare-const status4 us_private)
(declare-const output15 us_private)
(declare-const state32 us_private)
(declare-const state33 us_private)
(declare-const systemfault2 Bool)
(declare-const state34 us_private)
(declare-const filestate8 us_private)
(declare-const output16 us_private)
(declare-const output17 us_private)
(declare-const state35 us_private)
(declare-const output18 us_private)
(declare-const state36 us_private)
(declare-const output19 us_private)
(declare-const systemfault3 bool__ref)
(declare-const thestats__split_fields6 us_split_fields__ref2)
(declare-const theadmin__split_fields4 us_split_fields__ref)
(declare-const currenttime1 us_private__ref)
(declare-const filestate9 us_private__ref)
(declare-const state37 us_private__ref)
(declare-const state38 us_private__ref)
(declare-const filestate10 us_private__ref)
(declare-const state39 us_private__ref)
(declare-const store4 us_private__ref)
(declare-const state40 us_private__ref)
(declare-const status5 us_private__ref)
(declare-const state41 us_private__ref)
(declare-const output20 us_private__ref)
(declare-const state42 us_private__ref)
(declare-const output21 us_private__ref)
(declare-const filestate11 us_private__ref)
(declare-const state43 us_private__ref)
(declare-const state44 us_private__ref)
(declare-const output22 us_private__ref)
(declare-const state45 us_private__ref)
(declare-const output23 us_private__ref)
(declare-const writtenstate3 us_private__ref)
(declare-const state46 us_private__ref)
(declare-const output24 us_private__ref)
(declare-const state47 us_private__ref)
(declare-const status6 us_private__ref)
(declare-const output25 us_private__ref)
(declare-const state48 us_private__ref)
(declare-const state49 us_private__ref)
(declare-const systemfault4 Bool)
(declare-const thestats__split_fields7 us_split_fields4)
(declare-const theadmin__split_fields5 us_split_fields)
(declare-const currenttime2 us_private)
(declare-const filestate12 us_private)
(declare-const state50 us_private)
(declare-const state51 us_private)
(declare-const filestate13 us_private)
(declare-const state52 us_private)
(declare-const store5 us_private)
(declare-const state53 us_private)
(declare-const status7 us_private)
(declare-const state54 us_private)
(declare-const output26 us_private)
(declare-const state55 us_private)
(declare-const output27 us_private)
(declare-const filestate14 us_private)
(declare-const state56 us_private)
(declare-const state57 us_private)
(declare-const output28 us_private)
(declare-const state58 us_private)
(declare-const output29 us_private)
(declare-const writtenstate4 us_private)
(declare-const state59 us_private)
(declare-const output30 us_private)
(declare-const state60 us_private)
(declare-const status8 us_private)
(declare-const output31 us_private)
(declare-const state61 us_private)
(declare-const state62 us_private)
(assert (and (and (and (and (and (and (and (and (and (and (and (= (not (= (enrolmentisinprogress (us_private__content state8)) true)) (= (privatekeypresent state1) true)) (= (= (islocked state3) true) (= (interfac_islocked Tuple0) true))) (=> (= (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1) (and (and (= (isgood state2) true) (= (authcertvalid state2) true)) (= (theauthcertrole state2) 1)))) (=> (and (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true) (= (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3)) (= (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1))) (=> (= (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1) (or (and (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true) (= (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3)) (not (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))) (=> (not (= (ispresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)) (not (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)))) (=> (and (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true) (= (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 4)) (= (statusiswaitingstartadminop (us_private__content state8)) true))) (=> (or (= (statusisgotadmintoken (us_private__content state8)) true) (= (statusiswaitingremoveadmintokenfail (us_private__content state8)) true)) (not (= (ispresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)))) (=> (or (= (statusiswaitingstartadminop (us_private__content state8)) true) (= (statusiswaitingfinishadminop (us_private__content state8)) true)) (and (= (ispresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true) (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)))) (=> (= (statusisenclavequiescent (us_private__content state8)) true) (not (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)))) (=> (= (statusisshutdown (us_private__content state8)) true) (and (not (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)) (= (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 0)))) (=> (= (enrolmentisinprogress (us_private__content state8)) true) (and (not (= (ispresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)) (not (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))))
(assert (and (and (and (and (and (and (= (and (and (= (islocked state19) true) (= (thecurrentdoor state20) 0)) (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state20)) true)) (= (thedooralarm state20) 0)) (= (= (isgood state2) true) (= (isgood state18) true))) (= (= (authcertvalid state2) true) (= (authcertvalid state18) true))) (= (= (theauthcertrole state2) 1) (= (theauthcertrole state18) 1))) (= (= (islocked state19) true) (= (greaterthanorequal (thecurrenttime currenttime) (latch_timeout state19)) true))) (or (not (= (islocked state3) true)) (and (and (= (current_latch state19) (current_latch state3)) (= (bool_eq1 (latch_timeout state19) (latch_timeout state3)) true)) (= (islocked state19) true)))) (= (bool_eq1 (latch_timeout state19) (latch_timeout state3)) true)))
(assert (=> (not (= systemfault true)) (and (=> (= (thedooralarm state20) 0) (= (isalarming Tuple0) true)) (or (= (= (islocked state19) true) (= (latchislocked Tuple0) true)) (= systemfault1 true)))))
(assert (=> (not (= systemfault true)) (=> (not (= systemfault1 true)) (and (and (and (and (and (and (and (and (and (and (and (= (not (= (enrolmentisinprogress (let ((subject state8)) state32)) true)) (= (privatekeypresent state25) true)) (= (and (and (= (islocked state27) true) (= (thecurrentdoor state28) 0)) (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state28)) true)) (= (thedooralarm state28) 0))) (=> (= (rolepresent (mk___rep theadmin__split_fields3)) 1) (and (and (= (isgood state26) true) (= (authcertvalid state26) true)) (= (theauthcertrole state26) 1)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields3)) true) (= (thecurrentop (mk___rep theadmin__split_fields3)) 3)) (= (rolepresent (mk___rep theadmin__split_fields3)) 1))) (=> (= (rolepresent (mk___rep theadmin__split_fields3)) 1) (or (and (= (isdoingop (mk___rep theadmin__split_fields3)) true) (= (thecurrentop (mk___rep theadmin__split_fields3)) 3)) (not (= (isdoingop (mk___rep theadmin__split_fields3)) true))))) (=> (not (= (ispresent (mk___rep theadmin__split_fields3)) true)) (not (= (isdoingop (mk___rep theadmin__split_fields3)) true)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields3)) true) (= (thecurrentop (mk___rep theadmin__split_fields3)) 4)) (= (statusiswaitingstartadminop (let ((subject state8)) state32)) true))) (=> (or (= (statusisgotadmintoken (let ((subject state8)) state32)) true) (= (statusiswaitingremoveadmintokenfail (let ((subject state8)) state32)) true)) (not (= (ispresent (mk___rep theadmin__split_fields3)) true)))) (=> (or (= (statusiswaitingstartadminop (let ((subject state8)) state32)) true) (= (statusiswaitingfinishadminop (let ((subject state8)) state32)) true)) (and (and (= (isdoingop (mk___rep theadmin__split_fields3)) true) (= (ispresent (mk___rep theadmin__split_fields3)) true)) (= (rolepresent (mk___rep theadmin__split_fields3)) (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))))))) (=> (= (statusisenclavequiescent (let ((subject state8)) state32)) true) (not (= (isdoingop (mk___rep theadmin__split_fields3)) true)))) (=> (= (statusisshutdown (let ((subject state8)) state32)) true) (and (not (= (isdoingop (mk___rep theadmin__split_fields3)) true)) (= (rolepresent (mk___rep theadmin__split_fields3)) 0)))) (=> (= (enrolmentisinprogress (let ((subject state8)) state32)) true) (and (not (= (ispresent (mk___rep theadmin__split_fields3)) true)) (not (= (isdoingop (mk___rep theadmin__split_fields3)) true))))))))
(assert (=> (not (= systemfault true)) (=> (not (= systemfault1 true)) (and (=> (= (thedooralarm state28) 0) (= (isalarming Tuple0) true)) (or (= (= (islocked state27) true) (= (latchislocked Tuple0) true)) (= systemfault2 true))))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject state9)) (mk___private__ref state33)) state9))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject state8)) (mk___private__ref state32)) state8))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject output5)) (mk___private__ref output15)) output5))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject status)) (mk___private__ref status4)) (let ((subject status)) (mk___private__ref status2))))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject state7)) (mk___private__ref state31)) (let ((subject state7)) (mk___private__ref state22))))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject output4)) (mk___private__ref output19)) output4))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject state6)) (mk___private__ref state36)) state6))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject writtenstate)) (mk___private__ref writtenstate2)) writtenstate))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject output3)) (mk___private__ref output14)) output3))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject state5)) (mk___private__ref state30)) state5))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= (let ((subject output2)) (mk___private__ref output18)) output2))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state35 state21))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state29 state4))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= filestate7 filestate1))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= output17 output13))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state28 state20))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= output16 output12))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state27 state19))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= status3 status1))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state26 state18))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= store3 store1))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state25 state1))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= filestate8 filestate5))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state34 state23))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state24 state))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= filestate6 filestate))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= theadmin__split_fields3 (mk___split_fields theadmin__split_fields theadmin__split_fields1)))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= thestats__split_fields5 (mk___split_fields2 thestats__split_fields thestats__split_fields1 thestats__split_fields2 thestats__split_fields3)))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= systemfault2 systemfault1))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state33 state16))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state32 state15))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= output15 output11))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= status4 status2))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state31 state22))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= output19 output10))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state36 state14))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= writtenstate2 writtenstate1))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= output14 output9))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state30 state13))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= output18 output8))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state35 state21))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state29 state12))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= filestate7 filestate3))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= output17 output13))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state28 state20))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= output16 output12))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state27 state19))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= status3 status1))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state26 state18))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= store3 store2))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state25 state11))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= filestate8 filestate5))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state34 state23))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= state24 state10))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= filestate6 filestate2))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= theadmin__split_fields3 theadmin__split_fields2))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= thestats__split_fields5 thestats__split_fields4))))
(assert (=> (not (= systemfault true)) (=> (not (not (= systemfault1 true))) (= systemfault2 systemfault1))))
(assert (=> (not (not (= systemfault true))) (= (let ((subject state9)) (mk___private__ref state33)) state9)))
(assert (=> (not (not (= systemfault true))) (= (let ((subject state8)) (mk___private__ref state32)) state8)))
(assert (=> (not (not (= systemfault true))) (= (let ((subject output5)) (mk___private__ref output15)) output5)))
(assert (=> (not (not (= systemfault true))) (= (let ((subject status)) (mk___private__ref status4)) (let ((subject status)) (mk___private__ref status2)))))
(assert (=> (not (not (= systemfault true))) (= (let ((subject state7)) (mk___private__ref state31)) (let ((subject state7)) (mk___private__ref state22)))))
(assert (=> (not (not (= systemfault true))) (= (let ((subject output4)) (mk___private__ref output19)) output4)))
(assert (=> (not (not (= systemfault true))) (= (let ((subject state6)) (mk___private__ref state36)) state6)))
(assert (=> (not (not (= systemfault true))) (= (let ((subject writtenstate)) (mk___private__ref writtenstate2)) writtenstate)))
(assert (=> (not (not (= systemfault true))) (= (let ((subject output3)) (mk___private__ref output14)) output3)))
(assert (=> (not (not (= systemfault true))) (= (let ((subject state5)) (mk___private__ref state30)) state5)))
(assert (=> (not (not (= systemfault true))) (= (let ((subject output2)) (mk___private__ref output18)) output2)))
(assert (=> (not (not (= systemfault true))) (= state35 state21)))
(assert (=> (not (not (= systemfault true))) (= state29 state4)))
(assert (=> (not (not (= systemfault true))) (= filestate7 filestate1)))
(assert (=> (not (not (= systemfault true))) (= output17 output1)))
(assert (=> (not (not (= systemfault true))) (= state28 state20)))
(assert (=> (not (not (= systemfault true))) (= output16 output)))
(assert (=> (not (not (= systemfault true))) (= state27 state19)))
(assert (=> (not (not (= systemfault true))) (= status3 status1)))
(assert (=> (not (not (= systemfault true))) (= state26 state18)))
(assert (=> (not (not (= systemfault true))) (= store3 store1)))
(assert (=> (not (not (= systemfault true))) (= state25 state1)))
(assert (=> (not (not (= systemfault true))) (= filestate8 filestate4)))
(assert (=> (not (not (= systemfault true))) (= state34 state17)))
(assert (=> (not (not (= systemfault true))) (= state24 state)))
(assert (=> (not (not (= systemfault true))) (= filestate6 filestate)))
(assert (=> (not (not (= systemfault true))) (= theadmin__split_fields3 (mk___split_fields theadmin__split_fields theadmin__split_fields1))))
(assert (=> (not (not (= systemfault true))) (= thestats__split_fields5 (mk___split_fields2 thestats__split_fields thestats__split_fields1 thestats__split_fields2 thestats__split_fields3))))
(assert (=> (not (not (= systemfault true))) (= systemfault2 systemfault)))
(assert (=> (not (not (= systemfault true))) (= state33 state16)))
(assert (=> (not (not (= systemfault true))) (= state32 state15)))
(assert (=> (not (not (= systemfault true))) (= output15 output11)))
(assert (=> (not (not (= systemfault true))) (= status4 status2)))
(assert (=> (not (not (= systemfault true))) (= state31 state22)))
(assert (=> (not (not (= systemfault true))) (= output19 output10)))
(assert (=> (not (not (= systemfault true))) (= state36 state14)))
(assert (=> (not (not (= systemfault true))) (= writtenstate2 writtenstate1)))
(assert (=> (not (not (= systemfault true))) (= output14 output9)))
(assert (=> (not (not (= systemfault true))) (= state30 state13)))
(assert (=> (not (not (= systemfault true))) (= output18 output8)))
(assert (=> (not (not (= systemfault true))) (= state35 state21)))
(assert (=> (not (not (= systemfault true))) (= state29 state12)))
(assert (=> (not (not (= systemfault true))) (= filestate7 filestate3)))
(assert (=> (not (not (= systemfault true))) (= output17 output7)))
(assert (=> (not (not (= systemfault true))) (= state28 state20)))
(assert (=> (not (not (= systemfault true))) (= output16 output6)))
(assert (=> (not (not (= systemfault true))) (= state27 state19)))
(assert (=> (not (not (= systemfault true))) (= status3 status1)))
(assert (=> (not (not (= systemfault true))) (= state26 state18)))
(assert (=> (not (not (= systemfault true))) (= store3 store2)))
(assert (=> (not (not (= systemfault true))) (= state25 state11)))
(assert (=> (not (not (= systemfault true))) (= filestate8 filestate4)))
(assert (=> (not (not (= systemfault true))) (= state34 state17)))
(assert (=> (not (not (= systemfault true))) (= state24 state10)))
(assert (=> (not (not (= systemfault true))) (= filestate6 filestate2)))
(assert (=> (not (not (= systemfault true))) (= theadmin__split_fields3 theadmin__split_fields2)))
(assert (=> (not (not (= systemfault true))) (= thestats__split_fields5 thestats__split_fields4)))
(assert (=> (not (not (= systemfault true))) (= systemfault2 systemfault)))
(assert (= state49 (let ((subject state9)) (mk___private__ref state33))))
(assert (= state48 (let ((subject state8)) (mk___private__ref state32))))
(assert (= output25 (let ((subject output5)) (mk___private__ref output15))))
(assert (= status6 (let ((subject status)) (mk___private__ref status4))))
(assert (= state47 (let ((subject state7)) (mk___private__ref state31))))
(assert (= output24 (let ((subject output4)) (mk___private__ref output19))))
(assert (= state46 (let ((subject state6)) (mk___private__ref state36))))
(assert (= writtenstate3 (let ((subject writtenstate)) (mk___private__ref writtenstate2))))
(assert (= output23 (let ((subject output3)) (mk___private__ref output14))))
(assert (= state45 (let ((subject state5)) (mk___private__ref state30))))
(assert (= output22 (let ((subject output2)) (mk___private__ref output18))))
(assert (= state44 (mk___private__ref state35)))
(assert (= state43 (mk___private__ref state29)))
(assert (= filestate11 (mk___private__ref filestate7)))
(assert (= output21 (mk___private__ref output17)))
(assert (= state42 (mk___private__ref state28)))
(assert (= output20 (mk___private__ref output16)))
(assert (= state41 (mk___private__ref state27)))
(assert (= status5 (mk___private__ref status3)))
(assert (= state40 (mk___private__ref state26)))
(assert (= store4 (mk___private__ref store3)))
(assert (= state39 (mk___private__ref state25)))
(assert (= filestate10 (mk___private__ref filestate8)))
(assert (= state38 (mk___private__ref state34)))
(assert (= state37 (mk___private__ref state24)))
(assert (= filestate9 (mk___private__ref filestate6)))
(assert (= currenttime1 (mk___private__ref currenttime)))
(assert (= theadmin__split_fields4 (mk___split_fields__ref theadmin__split_fields3)))
(assert (= thestats__split_fields6 (mk___split_fields__ref2 thestats__split_fields5)))
(assert (= systemfault3 (mk_bool__ref systemfault2)))
(assert (= state62 state33))
(assert (= state61 state32))
(assert (= output31 output15))
(assert (= status8 status4))
(assert (= state60 state31))
(assert (= output30 output19))
(assert (= state59 state36))
(assert (= writtenstate4 writtenstate2))
(assert (= output29 output14))
(assert (= state58 state30))
(assert (= output28 output18))
(assert (= state57 state35))
(assert (= state56 state29))
(assert (= filestate14 filestate7))
(assert (= output27 output17))
(assert (= state55 state28))
(assert (= output26 output16))
(assert (= state54 state27))
(assert (= status7 status3))
(assert (= state53 state26))
(assert (= store5 store3))
(assert (= state52 state25))
(assert (= filestate13 filestate8))
(assert (= state51 state34))
(assert (= state50 state24))
(assert (= filestate12 filestate6))
(assert (= currenttime2 currenttime))
(assert (= theadmin__split_fields5 theadmin__split_fields3))
(assert (= thestats__split_fields7 thestats__split_fields5))
(assert (= systemfault4 systemfault2))
(assert (not (= (enrolmentisinprogress (us_private__content state48)) true)))
(assert (not (= (privatekeypresent (us_private__content state39)) true)))
(check-sat)
(exit)
