(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__formal_container__vdll__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__formal_container__vdll__list__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__formal_container__vdll__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type (rec__formal_container__vdll__list a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 a))) (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__formal_container__vdll__list (us_split_fields1 a)) (rec__formal_container__vdll__list (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const formal_container__vdll__list__capacity__first__bit Int)
(declare-const formal_container__vdll__list__capacity__last__bit Int)
(declare-const formal_container__vdll__list__capacity__position Int)
(assert (<= 0 formal_container__vdll__list__capacity__first__bit))
(assert (< formal_container__vdll__list__capacity__first__bit formal_container__vdll__list__capacity__last__bit))
(assert (<= 0 formal_container__vdll__list__capacity__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep)))))
(define-fun list__ref___projection ((a list__ref)) us_rep (list__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 2147483647)) (in_range2 temp___expr_165)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 container)))) (dynamic_invariant1 result true false true true))) :pattern ((length container)))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(declare-fun get (us_rep1 Int) Int)
(declare-fun get__function_guard (Int us_rep1 Int) Bool)
(define-fun oeq ((left us_rep1) (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq4 (us_rep2 us_rep2) Bool)
(declare-const dummy4 us_rep2)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep2)))))
(define-fun map__ref___projection ((a map__ref)) us_rep2 (map__content a))
(declare-fun oeq1 (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)
(declare-fun model__ (us_rep) us_rep1)
(declare-fun model____function_guard (us_rep1 us_rep) Bool)
(declare-fun positions (us_rep) us_rep2)
(declare-fun positions__function_guard (us_rep2 us_rep) Bool)
(declare-fun copy (us_rep Int) us_rep)
(declare-fun copy__function_guard (us_rep us_rep Int) Bool)
(assert (forall ((source us_rep)) (forall ((capacity Int)) (! (=> (and (dynamic_invariant1 capacity true true true true) (or (= capacity 0) (<= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 source))) capacity))) (let ((result (copy source capacity))) (and (and (= (oeq (model__ result) (model__ source)) true) (= (oeq1 (positions result) (positions source)) true)) (ite (= capacity 0) (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 result))) (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 source)))) (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 result))) capacity))))) :pattern ((copy source capacity))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__formal_container__vdll__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type (rec__formal_container__vdll__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep3)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep3) (b us_rep3)) Bool (ite (= (to_rep (rec__formal_container__vdll__cursor__node (us_split_fields3 a))) (to_rep (rec__formal_container__vdll__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const formal_container__vdll__cursor__node__first__bit Int)
(declare-const formal_container__vdll__cursor__node__last__bit Int)
(declare-const formal_container__vdll__cursor__node__position Int)
(assert (<= 0 formal_container__vdll__cursor__node__first__bit))
(assert (< formal_container__vdll__cursor__node__first__bit formal_container__vdll__cursor__node__last__bit))
(assert (<= 0 formal_container__vdll__cursor__node__position))
(declare-fun user_eq5 (us_rep3 us_rep3) Bool)
(declare-const dummy5 us_rep3)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep3)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep3 (cursor__content a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep3)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep3 (key_type__content a))
(declare-fun has_key (us_rep2 us_rep3) Bool)
(declare-fun has_key__function_guard (Bool us_rep2 us_rep3) Bool)
(define-fun has_element ((container us_rep) (position us_rep3)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep3) Bool)
(declare-fun last1 (us_rep) us_rep3)
(declare-fun last__function_guard1 (us_rep3 us_rep) Bool)
(declare-fun get1 (us_rep2 us_rep3) Int)
(declare-fun get__function_guard1 (Int us_rep2 us_rep3) Bool)
(define-fun default_initial_assumption ((temp___expr_186 us_rep3) (temp___skip_top_level_187 Bool)) Bool (= (to_rep (rec__formal_container__vdll__cursor__node (us_split_fields3 temp___expr_186))) 0))
(declare-const no_element us_rep3)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (forall ((container us_rep)) (! (let ((result (last1 container))) (ite (= (length container) 0) (= (bool_eq3 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (length container))))) :pattern ((last1 container)))))
(define-fun ole ((left us_rep1) (right us_rep1)) Bool (and (<= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)
(define-fun range_equal ((left us_rep1) (right us_rep1) (fst Int) (lst Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right i)))) true false))
(declare-fun range_equal__function_guard (Bool us_rep1 us_rep1 Int Int) Bool)
(define-fun range_shifted ((left us_rep1) (right us_rep1) (fst Int) (lst Int) (offset Int)) Bool (and (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right (+ i offset))))) true false) (ite (forall ((i Int)) (=> (and (<= (+ fst offset) i) (<= i (+ lst offset))) (= (get left (- i offset)) (get right i)))) true false)))
(declare-fun range_shifted__function_guard (Bool us_rep1 us_rep1 Int Int Int) Bool)
(declare-fun ole1 (us_rep2 us_rep2) Bool)
(declare-fun ole__function_guard1 (Bool us_rep2 us_rep2) Bool)
(declare-fun keys_included_except (us_rep2 us_rep2 us_rep3) Bool)
(declare-fun keys_included_except__function_guard (Bool us_rep2 us_rep2 us_rep3) Bool)
(declare-fun p_positions_shifted (us_rep2 us_rep2 Int Int) Bool)
(declare-fun p_positions_shifted__function_guard (Bool us_rep2 us_rep2 Int Int) Bool)
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(declare-fun p_positions_truncated (us_rep2 us_rep2 Int Int) Bool)
(declare-fun p_positions_truncated__function_guard (Bool us_rep2 us_rep2 Int Int) Bool)
(declare-fun first (us_rep) us_rep3)
(declare-fun first__function_guard (us_rep3 us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (first container))) (ite (= (length container) 0) (= (bool_eq3 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) 1)))) :pattern ((first container)))))
(declare-fun first_element (us_rep) Int)
(declare-fun first_element__function_guard (Int us_rep) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= (- 2147483648) (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq6 (element_type element_type) Bool)
(declare-const dummy6 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_172 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool (=> (or (= temp___is_init_168 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_172)))
(assert (forall ((container us_rep)) (! (=> (not (= (is_empty container) true)) (let ((result (first_element container))) (and (= result (get (model__ container) 1)) (dynamic_invariant2 result true false true true)))) :pattern ((first_element container)))))
(declare-fun last_element (us_rep) Int)
(declare-fun last_element__function_guard (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (=> (not (= (is_empty container) true)) (let ((result (last_element container))) (and (= result (get (model__ container) (length container))) (dynamic_invariant2 result true false true true)))) :pattern ((last_element container)))))
(declare-fun next (us_rep us_rep3) us_rep3)
(declare-fun next__function_guard (us_rep3 us_rep us_rep3) Bool)
(assert (forall ((container us_rep)) (forall ((position us_rep3)) (! (=> (or (= (has_element container position) true) (= (bool_eq3 position no_element) true)) (let ((result (next container position))) (ite (or (= (bool_eq3 position no_element) true) (= (get1 (positions container) position) (length container))) (= (bool_eq3 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (+ (get1 (positions container) position) 1)))))) :pattern ((next container position))))))
(declare-fun previous (us_rep us_rep3) us_rep3)
(declare-fun previous__function_guard (us_rep3 us_rep us_rep3) Bool)
(assert (forall ((container us_rep)) (forall ((position us_rep3)) (! (=> (or (= (has_element container position) true) (= (bool_eq3 position no_element) true)) (let ((result (previous container position))) (ite (or (= (bool_eq3 position no_element) true) (= (get1 (positions container) position) 1)) (= (bool_eq3 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (- (get1 (positions container) position) 1)))))) :pattern ((previous container position))))))
(declare-fun find (us_rep Int us_rep3) us_rep3)
(declare-fun find__function_guard (us_rep3 us_rep Int us_rep3) Bool)
(define-fun contains ((container us_rep1) (fst Int) (lst Int) (item Int)) Bool (ite (exists ((i Int)) (and (and (<= fst i) (<= i lst)) (= (get container i) item))) true false))
(declare-fun contains__function_guard (Bool us_rep1 Int Int Int) Bool)
(assert (forall ((container us_rep)) (forall ((item Int)) (forall ((position us_rep3)) (! (=> (and (dynamic_invariant2 item true true true true) (or (= (has_element container position) true) (= (bool_eq3 position no_element) true))) (let ((result (find container item position))) (ite (not (= (contains (model__ container) (ite (= (bool_eq3 position no_element) true) 1 (get1 (positions container) position)) (length container) item) true)) (= (bool_eq3 result no_element) true) (and (and (and (= (has_key (positions container) result) true) (= (get (model__ container) (get1 (positions container) result)) item)) (=> (not (= (bool_eq3 position no_element) true)) (<= (get1 (positions container) position) (get1 (positions container) result)))) (not (= (contains (model__ container) (ite (= (bool_eq3 position no_element) true) 1 (get1 (positions container) position)) (- (get1 (positions container) result) 1) item) true)))))) :pattern ((find container item position)))))))
(declare-fun test_element (us_rep us_rep3 Int) Bool)
(declare-fun test_element__function_guard (Bool us_rep us_rep3 Int) Bool)
(define-fun element ((container us_rep) (position us_rep3)) Int (get (model__ container) (get1 (positions container) position)))
(declare-fun element__function_guard (Int us_rep us_rep3) Bool)
(assert true)
(assert (forall ((container us_rep)) (forall ((position us_rep3)) (forall ((result__ Int)) (! (= (= (test_element container position result__) true) (= (element container position) result__)) :pattern ((test_element container position result__)))))))
(define-fun in_range4 ((rec__formal_container__vdll__list__capacity1 Int) (a us_rep)) Bool (= rec__formal_container__vdll__list__capacity1 (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))
(declare-const formal_container__vdll__list__capacity__first__bit1 Int)
(declare-const formal_container__vdll__list__capacity__last__bit1 Int)
(declare-const formal_container__vdll__list__capacity__position1 Int)
(assert (<= 0 formal_container__vdll__list__capacity__first__bit1))
(assert (< formal_container__vdll__list__capacity__first__bit1 formal_container__vdll__list__capacity__last__bit1))
(assert (<= 0 formal_container__vdll__list__capacity__position1))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((tl1S__ref (mk_tl1S__ref (tl1S__content us_rep)))))
(define-fun tl1S__ref___projection ((a tl1S__ref)) us_rep (tl1S__content a))
(define-fun dynamic_invariant3 ((temp___expr_398 us_rep) (temp___is_init_394 Bool) (temp___skip_constant_395 Bool) (temp___do_toplevel_396 Bool) (temp___do_typ_inv_397 Bool)) Bool (=> (not (= temp___skip_constant_395 true)) (in_range4 3 temp___expr_398)))
(define-fun default_initial_assumption1 ((temp___expr_400 us_rep) (temp___skip_top_level_401 Bool)) Bool (and (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 temp___expr_400))) 3) (=> (not (= temp___skip_top_level_401 true)) (= (is_empty temp___expr_400) true))))
(declare-const l1__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range5 ((rec__formal_container__vdll__list__capacity1 Int) (a us_rep)) Bool (= rec__formal_container__vdll__list__capacity1 (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))
(declare-const formal_container__vdll__list__capacity__first__bit2 Int)
(declare-const formal_container__vdll__list__capacity__last__bit2 Int)
(declare-const formal_container__vdll__list__capacity__position2 Int)
(assert (<= 0 formal_container__vdll__list__capacity__first__bit2))
(assert (< formal_container__vdll__list__capacity__first__bit2 formal_container__vdll__list__capacity__last__bit2))
(assert (<= 0 formal_container__vdll__list__capacity__position2))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((tl2S__ref (mk_tl2S__ref (tl2S__content us_rep)))))
(define-fun tl2S__ref___projection ((a tl2S__ref)) us_rep (tl2S__content a))
(define-fun dynamic_invariant4 ((temp___expr_408 us_rep) (temp___is_init_404 Bool) (temp___skip_constant_405 Bool) (temp___do_toplevel_406 Bool) (temp___do_typ_inv_407 Bool)) Bool (=> (not (= temp___skip_constant_405 true)) (in_range5 3 temp___expr_408)))
(define-fun default_initial_assumption2 ((temp___expr_410 us_rep) (temp___skip_top_level_411 Bool)) Bool (and (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 temp___expr_410))) 3) (=> (not (= temp___skip_top_level_411 true)) (= (is_empty temp___expr_410) true))))
(declare-const l2__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun in_range6 ((rec__formal_container__vdll__list__capacity1 Int) (a us_rep)) Bool (= rec__formal_container__vdll__list__capacity1 (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))
(declare-const formal_container__vdll__list__capacity__first__bit3 Int)
(declare-const formal_container__vdll__list__capacity__last__bit3 Int)
(declare-const formal_container__vdll__list__capacity__position3 Int)
(assert (<= 0 formal_container__vdll__list__capacity__first__bit3))
(assert (< formal_container__vdll__list__capacity__first__bit3 formal_container__vdll__list__capacity__last__bit3))
(assert (<= 0 formal_container__vdll__list__capacity__position3))
(declare-fun user_eq9 (us_rep us_rep) Bool)
(declare-const dummy9 us_rep)
(declare-datatypes () ((tl3S__ref (mk_tl3S__ref (tl3S__content us_rep)))))
(define-fun tl3S__ref___projection ((a tl3S__ref)) us_rep (tl3S__content a))
(define-fun dynamic_invariant5 ((temp___expr_418 us_rep) (temp___is_init_414 Bool) (temp___skip_constant_415 Bool) (temp___do_toplevel_416 Bool) (temp___do_typ_inv_417 Bool)) Bool (=> (not (= temp___skip_constant_415 true)) (in_range6 3 temp___expr_418)))
(define-fun default_initial_assumption3 ((temp___expr_420 us_rep) (temp___skip_top_level_421 Bool)) Bool (and (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 temp___expr_420))) 3) (=> (not (= temp___skip_top_level_421 true)) (= (is_empty temp___expr_420) true))))
(declare-const l3__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun in_range7 ((rec__formal_container__vdll__list__capacity1 Int) (a us_rep)) Bool (= rec__formal_container__vdll__list__capacity1 (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 a)))))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep)) (<= 0 (object__alignment7 a))))
(declare-const formal_container__vdll__list__capacity__first__bit4 Int)
(declare-const formal_container__vdll__list__capacity__last__bit4 Int)
(declare-const formal_container__vdll__list__capacity__position4 Int)
(assert (<= 0 formal_container__vdll__list__capacity__first__bit4))
(assert (< formal_container__vdll__list__capacity__first__bit4 formal_container__vdll__list__capacity__last__bit4))
(assert (<= 0 formal_container__vdll__list__capacity__position4))
(declare-fun user_eq10 (us_rep us_rep) Bool)
(declare-const dummy10 us_rep)
(declare-datatypes () ((tl4S__ref (mk_tl4S__ref (tl4S__content us_rep)))))
(define-fun tl4S__ref___projection ((a tl4S__ref)) us_rep (tl4S__content a))
(define-fun dynamic_invariant6 ((temp___expr_428 us_rep) (temp___is_init_424 Bool) (temp___skip_constant_425 Bool) (temp___do_toplevel_426 Bool) (temp___do_typ_inv_427 Bool)) Bool (=> (not (= temp___skip_constant_425 true)) (in_range7 5 temp___expr_428)))
(define-fun default_initial_assumption4 ((temp___expr_430 us_rep) (temp___skip_top_level_431 Bool)) Bool (and (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 temp___expr_430))) 5) (=> (not (= temp___skip_top_level_431 true)) (= (is_empty temp___expr_430) true))))
(declare-const l4__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-sort t7b 0)
(declare-fun t7bqtint (t7b) Int)
(assert (forall ((i t7b)) (and (<= 1 (t7bqtint i)) (<= (t7bqtint i) 3))))
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq11 (t7b t7b) Bool)
(declare-const dummy11 t7b)
(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content t7b)))))
(define-fun t7b__ref___projection ((a t7b__ref)) t7b (t7b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const rliteral count_type)
(assert (= (count_typeqtint rliteral) 0))
(assert (= no_element (mk___rep1 (mk___split_fields1 rliteral))))
(declare-sort positive_count_type 0)
(declare-fun positive_count_typeqtint (positive_count_type) Int)
(assert (forall ((i positive_count_type)) (and (<= 1 (positive_count_typeqtint i)) (<= (positive_count_typeqtint i) 2147483647))))
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq12 (positive_count_type positive_count_type) Bool)
(declare-const dummy12 positive_count_type)
(declare-datatypes () ((positive_count_type__ref (mk_positive_count_type__ref (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___projection ((a positive_count_type__ref)) positive_count_type (positive_count_type__content a))
(define-fun dynamic_invariant7 ((temp___expr_194 Int) (temp___is_init_190 Bool) (temp___skip_constant_191 Bool) (temp___do_toplevel_192 Bool) (temp___do_typ_inv_193 Bool)) Bool (=> (or (= temp___is_init_190 true) (<= 1 2147483647)) (in_range9 temp___expr_194)))
(declare-fun keys_included (us_rep2 us_rep2) Bool)
(declare-fun keys_included__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun length2 (us_rep2) Int)
(declare-fun length__function_guard2 (Int us_rep2) Bool)
(declare-fun is_empty1 (us_rep2) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep2) Bool)
(define-fun default_initial_assumption5 ((temp___expr_245 us_rep2) (temp___skip_top_level_246 Bool)) Bool (=> (not (= temp___skip_top_level_246 true)) (and (= (is_empty1 temp___expr_245) true) (= (length2 temp___expr_245) 0))))
(define-fun default_initial_assumption6 ((temp___expr_231 us_rep3) (temp___skip_top_level_232 Bool)) Bool (= (to_rep (rec__formal_container__vdll__cursor__node (us_split_fields3 temp___expr_231))) 0))
(assert (forall ((small us_rep2) (big us_rep2)) (forall ((cut Int) (count Int)) (! (=> (and (dynamic_invariant7 cut true true true true) (dynamic_invariant1 count true true true true)) (= (= (p_positions_shifted small big cut count) true) (and (and (= (keys_included small big) true) (forall ((i us_rep3)) (=> (= (has_key small i) true) (ite (< (get1 small i) cut) (= (get1 big i) (get1 small i)) (= (- (get1 big i) count) (get1 small i)))))) (forall ((i us_rep3)) (=> (= (has_key big i) true) (or (= (has_key small i) true) (and (<= (- cut count) (- (get1 big i) count)) (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted small big cut count))))))
(assert (forall ((small us_rep2) (big us_rep2)) (forall ((cut Int) (count Int)) (! (=> (and (dynamic_invariant7 cut true true true true) (dynamic_invariant1 count true true true true)) (= (= (p_positions_truncated small big cut count) true) (and (= (ole1 small big) true) (forall ((i us_rep3)) (=> (= (has_key big i) true) (or (= (has_key small i) true) (and (<= (- cut count) (- (get1 big i) count)) (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_truncated small big cut count))))))
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(define-fun default_initial_assumption7 ((temp___expr_223 us_rep1) (temp___skip_top_level_224 Bool)) Bool (=> (not (= temp___skip_top_level_224 true)) (= (length1 temp___expr_223) 0)))
(assert (forall ((container us_rep)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep3)) (=> (= (has_key result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length container))) (forall ((j us_rep3)) (=> (= (has_key result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq3 i j) true))))))))) :pattern ((positions container)))))
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (= (length container) 0)) :pattern ((is_empty container)))))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq13 (extended_index extended_index) Bool)
(declare-const dummy13 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant8 ((temp___expr_215 Int) (temp___is_init_211 Bool) (temp___skip_constant_212 Bool) (temp___do_toplevel_213 Bool) (temp___do_typ_inv_214 Bool)) Bool (=> (or (= temp___is_init_211 true) (<= 0 2147483647)) (in_range10 temp___expr_215)))
(assert (forall ((container us_rep1)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false true true))) :pattern ((length1 container)))))
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= (- 2147483648) (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))
(define-fun in_range11 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq14 (element_type1 element_type1) Bool)
(declare-const dummy14 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant9 ((temp___expr_208 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= (- 2147483648) 2147483647)) (in_range11 temp___expr_208)))
(assert (forall ((container us_rep1)) (forall ((position Int)) (! (=> (and (dynamic_invariant8 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant9 (get container position) true false true true)) :pattern ((get container position))))))
(assert (forall ((container us_rep2)) (forall ((key us_rep3)) (! (=> (= (distinct 0 0) true) (=> (exists ((k us_rep3)) (and (= (has_key container k) true) (= (bool_eq3 k key) true))) (= (has_key container key) true))) :pattern ((has_key container key))))))
(declare-fun witness (us_rep2 us_rep3) Int)
(declare-fun witness__function_guard (Int us_rep2 us_rep3) Bool)
(declare-fun w_get (us_rep2 Int) Int)
(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)
(declare-sort element_type2 0)
(declare-fun element_typeqtint2 (element_type2) Int)
(assert (forall ((i element_type2)) (and (<= 1 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 2147483647))))
(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq15 (element_type2 element_type2) Bool)
(declare-const dummy15 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant10 ((temp___expr_237 Int) (temp___is_init_233 Bool) (temp___skip_constant_234 Bool) (temp___do_toplevel_235 Bool) (temp___do_typ_inv_236 Bool)) Bool (=> (or (= temp___is_init_233 true) (<= 1 2147483647)) (in_range12 temp___expr_237)))
(assert (forall ((container us_rep2)) (forall ((key us_rep3)) (! (=> (= (has_key container key) true) (let ((result (get1 container key))) (and (=> (= (distinct 0 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep3)) (=> (= (has_key container k) true) (= (= (bool_eq3 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant10 result true false true true)))) :pattern ((get1 container key))))))
(assert (forall ((container us_rep2)) (! (dynamic_invariant1 (length2 container) true false true true) :pattern ((length2 container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (ole1 left right) true) (forall ((key us_rep3)) (=> (= (has_key left key) true) (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))) :pattern ((ole1 left right)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (oeq1 left right) true) (and (forall ((key us_rep3)) (=> (= (has_key left key) true) (and (= (has_key right key) true) (= (get1 right key) (get1 left key))))) (forall ((key us_rep3)) (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern ((oeq1 left right)))))
(assert (forall ((container us_rep2)) (! (= (= (is_empty1 container) true) (forall ((key us_rep3)) (not (= (has_key container key) true)))) :pattern ((is_empty1 container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (= (= (keys_included left right) true) (forall ((key us_rep3)) (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern ((keys_included left right)))))
(assert (forall ((left us_rep2) (right us_rep2)) (forall ((new_key us_rep3)) (! (= (= (keys_included_except left right new_key) true) (forall ((key us_rep3)) (=> (= (has_key left key) true) (=> (not (= (bool_eq3 key new_key) true)) (= (has_key right key) true))))) :pattern ((keys_included_except left right new_key))))))
(declare-fun has_witness (us_rep2 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)
(assert true)
(assert (forall ((container us_rep2)) (forall ((key us_rep3)) (! (=> (= (has_key container key) true) (let ((result (witness container key))) (and (= (has_witness container result) true) (dynamic_invariant1 result true false true true)))) :pattern ((witness container key))))))
(assert (forall ((container us_rep2)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant1 witness1 true true true true) (= (has_witness container witness1) true)) (dynamic_invariant10 (w_get container witness1) true false true true)) :pattern ((w_get container witness1))))))
(declare-const l1__split_fields us_main_type)
(declare-const l2__split_fields us_main_type)
(declare-const l3__split_fields us_main_type)
(declare-const l4__split_fields us_main_type)
(declare-const c__split_fields count_type)
(declare-const us Int)
(declare-const us1 Int)
(declare-const us2 Int)
(declare-const us3 Int)
(declare-const o us_rep)
(declare-const o1 us_rep)
(declare-const temp___451 us_rep)
(declare-const o2 us_rep)
(declare-const o3 us_rep)
(declare-const temp___454 us_rep)
(declare-const o4 us_rep3)
(declare-const temp___455 us_rep3)
(declare-const o5 us_rep)
(declare-const o6 us_rep)
(declare-const temp___457 us_rep)
(declare-const o7 us_rep3)
(declare-const formal_container__vdll__insert__container__fields us_split_fields)
(declare-const result us_split_fields__ref)
(declare-const l1__split_fields1 us_split_fields)
(declare-const result1 us_split_fields__ref)
(declare-const l2__split_fields1 us_split_fields)
(declare-const formal_container__vdll__append__container__fields us_split_fields)
(declare-const result2 us_split_fields__ref)
(declare-const l2__split_fields2 us_split_fields)
(declare-const formal_container__vdll__append__container__fields1 us_split_fields)
(declare-const result3 us_split_fields__ref)
(declare-const l2__split_fields3 us_split_fields)
(declare-const result4 us_split_fields__ref)
(declare-const l1__split_fields2 us_split_fields)
(declare-const result5 us_split_fields__ref1)
(declare-const c__split_fields1 us_split_fields2)
(declare-const c__split_fields2 us_split_fields2)
(declare-const formal_container__vdll__delete__container__fields us_split_fields)
(declare-const result6 us_split_fields__ref)
(declare-const l2__split_fields4 us_split_fields)
(declare-const result7 us_split_fields__ref)
(declare-const l1__split_fields3 us_split_fields)
(declare-const formal_container__vdll__append__container__fields2 us_split_fields)
(declare-const result8 us_split_fields__ref)
(declare-const l1__split_fields4 us_split_fields)
(declare-const result9 us_split_fields__ref)
(declare-const l3__split_fields1 us_split_fields)
(declare-const formal_container__vdll__delete_last__container__fields us_split_fields)
(declare-const result10 us_split_fields__ref)
(declare-const l3__split_fields2 us_split_fields)
(assert (= (mk___rep1 (mk___split_fields1 rliteral)) no_element))
(assert (and (= us 3) (in_range2 3)))
(assert (default_initial_assumption1 (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)) false))
(assert (= 3 (to_rep (rec__formal_container__vdll__list__capacity l1__split_discrs))))
(assert (and (= us1 3) (in_range2 3)))
(assert (default_initial_assumption2 (mk___rep l2__split_discrs (mk___split_fields l2__split_fields)) false))
(assert (= 3 (to_rep (rec__formal_container__vdll__list__capacity l2__split_discrs))))
(assert (and (= us2 3) (in_range2 3)))
(assert (default_initial_assumption3 (mk___rep l3__split_discrs (mk___split_fields l3__split_fields)) false))
(assert (= 3 (to_rep (rec__formal_container__vdll__list__capacity l3__split_discrs))))
(assert (and (= us3 5) (in_range2 5)))
(assert (default_initial_assumption4 (mk___rep l4__split_discrs (mk___split_fields l4__split_fields)) false))
(assert (= 5 (to_rep (rec__formal_container__vdll__list__capacity l4__split_discrs))))
(assert (= (to_rep c__split_fields) 0))
(assert (not (= (has_key (positions (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) (first (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)))) true)))
(assert (and (= (length (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields)) (+ (length (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) 1)) (ite (= (bool_eq3 no_element no_element) true) (and (and (and (and (= (get1 (positions (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields)) (last1 (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields))) (length (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields))) (= (keys_included_except (positions (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields)) (positions (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) (last1 (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields))) true)) (= (ole1 (positions (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) (positions (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields))) true)) (= (get (model__ (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields)) (length (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields))) 1)) (= (ole (model__ (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) (model__ (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields))) true)) (and (and (and (= (range_equal (model__ (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) (model__ (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields)) 1 (- (get1 (positions (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) no_element) 1)) true) (= (range_shifted (model__ (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) (model__ (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields)) (get1 (positions (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) no_element) (length (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) 1) true)) (= (get (model__ (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields)) (get1 (positions (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) no_element)) 1)) (= (p_positions_shifted (positions (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) (positions (mk___rep l1__split_discrs formal_container__vdll__insert__container__fields)) (get1 (positions (mk___rep l1__split_discrs (mk___split_fields l1__split_fields))) no_element) 1) true)))))
(assert (= result (mk___split_fields__ref (mk___split_fields l1__split_fields))))
(assert (= l1__split_fields1 formal_container__vdll__insert__container__fields))
(assert (= (has_key (positions (mk___rep l1__split_discrs l1__split_fields1)) (first (mk___rep l1__split_discrs l1__split_fields1))) true))
(assert (and (= o (copy (mk___rep l1__split_discrs l1__split_fields1) 3)) (and (and (= (oeq (model__ o) (model__ (mk___rep l1__split_discrs l1__split_fields1))) true) (= (oeq1 (positions o) (positions (mk___rep l1__split_discrs l1__split_fields1))) true)) (ite (= 3 0) (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 o))) (to_rep (rec__formal_container__vdll__list__capacity l1__split_discrs))) (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 o))) 3)))))
(assert (= o1 o))
(assert (= temp___451 o1))
(assert (= result1 (mk___split_fields__ref (mk___split_fields l2__split_fields))))
(assert (= l2__split_fields1 (us_split_fields1 temp___451)))
(assert (= l2__split_discrs (us_split_discrs1 temp___451)))
(assert (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields1)) (first (mk___rep l1__split_discrs l1__split_fields1))) true))
(assert (and (and (and (and (and (= (length (mk___rep l2__split_discrs formal_container__vdll__append__container__fields)) (+ (length (mk___rep l2__split_discrs l2__split_fields1)) 1)) (= (get1 (positions (mk___rep l2__split_discrs formal_container__vdll__append__container__fields)) (last1 (mk___rep l2__split_discrs formal_container__vdll__append__container__fields))) (length (mk___rep l2__split_discrs formal_container__vdll__append__container__fields)))) (= (keys_included_except (positions (mk___rep l2__split_discrs formal_container__vdll__append__container__fields)) (positions (mk___rep l2__split_discrs l2__split_fields1)) (last1 (mk___rep l2__split_discrs formal_container__vdll__append__container__fields))) true)) (= (ole1 (positions (mk___rep l2__split_discrs l2__split_fields1)) (positions (mk___rep l2__split_discrs formal_container__vdll__append__container__fields))) true)) (= (get (model__ (mk___rep l2__split_discrs formal_container__vdll__append__container__fields)) (length (mk___rep l2__split_discrs formal_container__vdll__append__container__fields))) 2)) (= (ole (model__ (mk___rep l2__split_discrs l2__split_fields1)) (model__ (mk___rep l2__split_discrs formal_container__vdll__append__container__fields))) true)))
(assert (= result2 (mk___split_fields__ref l2__split_fields1)))
(assert (= l2__split_fields2 formal_container__vdll__append__container__fields))
(assert (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields2)) (next (mk___rep l2__split_discrs l2__split_fields2) (first (mk___rep l1__split_discrs l1__split_fields1)))) true))
(assert (= (test_element (mk___rep l2__split_discrs l2__split_fields2) (next (mk___rep l2__split_discrs l2__split_fields2) (first (mk___rep l1__split_discrs l1__split_fields1))) 2) true))
(assert (not (= (has_key (positions (mk___rep l1__split_discrs l1__split_fields1)) (next (mk___rep l2__split_discrs l2__split_fields2) (first (mk___rep l1__split_discrs l1__split_fields1)))) true)))
(assert (and (and (and (and (and (= (length (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1)) (+ (length (mk___rep l2__split_discrs l2__split_fields2)) 1)) (= (get1 (positions (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1)) (last1 (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1))) (length (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1)))) (= (keys_included_except (positions (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1)) (positions (mk___rep l2__split_discrs l2__split_fields2)) (last1 (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1))) true)) (= (ole1 (positions (mk___rep l2__split_discrs l2__split_fields2)) (positions (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1))) true)) (= (get (model__ (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1)) (length (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1))) 3)) (= (ole (model__ (mk___rep l2__split_discrs l2__split_fields2)) (model__ (mk___rep l2__split_discrs formal_container__vdll__append__container__fields1))) true)))
(assert (= result3 (mk___split_fields__ref l2__split_fields2)))
(assert (= l2__split_fields3 formal_container__vdll__append__container__fields1))
(assert (and (= o2 (copy (mk___rep l2__split_discrs l2__split_fields3) 3)) (and (and (= (oeq (model__ o2) (model__ (mk___rep l2__split_discrs l2__split_fields3))) true) (= (oeq1 (positions o2) (positions (mk___rep l2__split_discrs l2__split_fields3))) true)) (ite (= 3 0) (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 o2))) (to_rep (rec__formal_container__vdll__list__capacity l2__split_discrs))) (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 o2))) 3)))))
(assert (= o3 o2))
(assert (= temp___454 o3))
(assert (= result4 (mk___split_fields__ref l1__split_fields1)))
(assert (= l1__split_fields2 (us_split_fields1 temp___454)))
(assert (= l1__split_discrs (us_split_discrs1 temp___454)))
(assert (and (= o4 (first (mk___rep l2__split_discrs l2__split_fields3))) (ite (= (= (length (mk___rep l2__split_discrs l2__split_fields3)) 0) true) (= (bool_eq3 o4 no_element) true) (and (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields3)) o4) true) (= (get1 (positions (mk___rep l2__split_discrs l2__split_fields3)) o4) 1)))))
(assert (and (= temp___455 (next (mk___rep l2__split_discrs l2__split_fields3) o4)) (ite (= (ite (= (bool_eq3 o4 no_element) false) (= (get1 (positions (mk___rep l2__split_discrs l2__split_fields3)) o4) (length (mk___rep l2__split_discrs l2__split_fields3))) true) true) (= (bool_eq3 temp___455 no_element) true) (and (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields3)) temp___455) true) (= (get1 (positions (mk___rep l2__split_discrs l2__split_fields3)) temp___455) (+ (get1 (positions (mk___rep l2__split_discrs l2__split_fields3)) o4) 1))))))
(assert (= result5 (mk___split_fields__ref1 (mk___split_fields1 c__split_fields))))
(assert (= c__split_fields1 (us_split_fields3 temp___455)))
(assert (and (and (and (and (= (length (mk___rep l2__split_discrs formal_container__vdll__delete__container__fields)) (- (length (mk___rep l2__split_discrs l2__split_fields3)) 1)) (= (bool_eq3 (mk___rep1 c__split_fields2) no_element) true)) (= (range_equal (model__ (mk___rep l2__split_discrs l2__split_fields3)) (model__ (mk___rep l2__split_discrs formal_container__vdll__delete__container__fields)) 1 (- (get1 (positions (mk___rep l2__split_discrs l2__split_fields3)) (mk___rep1 c__split_fields1)) 1)) true)) (= (range_shifted (model__ (mk___rep l2__split_discrs formal_container__vdll__delete__container__fields)) (model__ (mk___rep l2__split_discrs l2__split_fields3)) (get1 (positions (mk___rep l2__split_discrs l2__split_fields3)) (mk___rep1 c__split_fields1)) (length (mk___rep l2__split_discrs formal_container__vdll__delete__container__fields)) 1) true)) (= (p_positions_shifted (positions (mk___rep l2__split_discrs formal_container__vdll__delete__container__fields)) (positions (mk___rep l2__split_discrs l2__split_fields3)) (get1 (positions (mk___rep l2__split_discrs l2__split_fields3)) (mk___rep1 c__split_fields1)) 1) true)))
(assert (= result6 (mk___split_fields__ref l2__split_fields3)))
(assert (= l2__split_fields4 formal_container__vdll__delete__container__fields))
(assert (not (= (has_key (positions (mk___rep l2__split_discrs l2__split_fields4)) (next (mk___rep l1__split_discrs l1__split_fields2) (first (mk___rep l1__split_discrs l1__split_fields2)))) true)))
(assert (and (= o5 (copy (mk___rep l2__split_discrs l2__split_fields4) 3)) (and (and (= (oeq (model__ o5) (model__ (mk___rep l2__split_discrs l2__split_fields4))) true) (= (oeq1 (positions o5) (positions (mk___rep l2__split_discrs l2__split_fields4))) true)) (ite (= 3 0) (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 o5))) (to_rep (rec__formal_container__vdll__list__capacity l2__split_discrs))) (= (to_rep (rec__formal_container__vdll__list__capacity (us_split_discrs1 o5))) 3)))))
(assert (= o6 o5))
(assert (= temp___457 o6))
(assert (= result7 (mk___split_fields__ref l1__split_fields2)))
(assert (= l1__split_fields3 (us_split_fields1 temp___457)))
(assert (= l1__split_discrs (us_split_discrs1 temp___457)))
(assert (= (has_key (positions (mk___rep l1__split_discrs l1__split_fields3)) (next (mk___rep l2__split_discrs l2__split_fields4) (first (mk___rep l2__split_discrs l2__split_fields4)))) true))
(assert (= (test_element (mk___rep l1__split_discrs l1__split_fields3) (next (mk___rep l2__split_discrs l2__split_fields4) (first (mk___rep l2__split_discrs l2__split_fields4))) 3) true))
(assert (and (and (and (and (and (= (length (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2)) (+ (length (mk___rep l1__split_discrs l1__split_fields3)) 1)) (= (get1 (positions (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2)) (last1 (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2))) (length (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2)))) (= (keys_included_except (positions (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2)) (positions (mk___rep l1__split_discrs l1__split_fields3)) (last1 (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2))) true)) (= (ole1 (positions (mk___rep l1__split_discrs l1__split_fields3)) (positions (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2))) true)) (= (get (model__ (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2)) (length (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2))) 4)) (= (ole (model__ (mk___rep l1__split_discrs l1__split_fields3)) (model__ (mk___rep l1__split_discrs formal_container__vdll__append__container__fields2))) true)))
(assert (= result8 (mk___split_fields__ref l1__split_fields3)))
(assert (= l1__split_fields4 formal_container__vdll__append__container__fields2))
(assert (= (bool_eq3 (find (mk___rep l1__split_discrs l1__split_fields4) 3 no_element) (next (mk___rep l1__split_discrs l1__split_fields4) (first (mk___rep l1__split_discrs l1__split_fields4)))) true))
(assert (= (bool_eq3 (find (mk___rep l1__split_discrs l1__split_fields4) 4 no_element) (last1 (mk___rep l1__split_discrs l1__split_fields4))) true))
(assert (= (bool_eq3 (find (mk___rep l1__split_discrs l1__split_fields4) 3 no_element) (previous (mk___rep l1__split_discrs l1__split_fields4) (last1 (mk___rep l1__split_discrs l1__split_fields4)))) true))
(assert (= (bool_eq3 (find (mk___rep l1__split_discrs l1__split_fields4) 1 (next (mk___rep l1__split_discrs l1__split_fields4) (first (mk___rep l1__split_discrs l1__split_fields4)))) no_element) true))
(assert (= result9 (mk___split_fields__ref (mk___split_fields l3__split_fields))))
(assert (= l3__split_fields1 l1__split_fields4))
(assert (= l3__split_discrs l1__split_discrs))
(assert (and (and (and (and (= (length (mk___rep l3__split_discrs formal_container__vdll__delete_last__container__fields)) (- (length (mk___rep l3__split_discrs l3__split_fields1)) 1)) (= (ole (model__ (mk___rep l3__split_discrs formal_container__vdll__delete_last__container__fields)) (model__ (mk___rep l3__split_discrs l3__split_fields1))) true)) (not (= (has_key (positions (mk___rep l3__split_discrs formal_container__vdll__delete_last__container__fields)) (last1 (mk___rep l3__split_discrs l3__split_fields1))) true))) (= (keys_included_except (positions (mk___rep l3__split_discrs l3__split_fields1)) (positions (mk___rep l3__split_discrs l3__split_fields1)) (last1 (mk___rep l3__split_discrs l3__split_fields1))) true)) (= (ole1 (positions (mk___rep l3__split_discrs formal_container__vdll__delete_last__container__fields)) (positions (mk___rep l3__split_discrs l3__split_fields1))) true)))
(assert (= result10 (mk___split_fields__ref l3__split_fields1)))
(assert (= l3__split_fields2 formal_container__vdll__delete_last__container__fields))
(assert (= (length (mk___rep l3__split_discrs l3__split_fields2)) 2))
(assert (= (has_key (positions (mk___rep l3__split_discrs l3__split_fields2)) (first (mk___rep l3__split_discrs l3__split_fields2))) true))
(assert (= (test_element (mk___rep l3__split_discrs l3__split_fields2) (first (mk___rep l3__split_discrs l3__split_fields2)) 1) true))
(assert (and (= o7 (first (mk___rep l3__split_discrs l3__split_fields2))) (ite (= (= (length (mk___rep l3__split_discrs l3__split_fields2)) 0) true) (= (bool_eq3 o7 no_element) true) (and (= (has_key (positions (mk___rep l3__split_discrs l3__split_fields2)) o7) true) (= (get1 (positions (mk___rep l3__split_discrs l3__split_fields2)) o7) 1)))))
(assert (not (or (= (has_key (positions (mk___rep l3__split_discrs l3__split_fields2)) o7) true) (= (bool_eq3 o7 no_element) true))))
(check-sat)
(exit)
