(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__foo__r__x : integer; rec__foo__r__y : integer;
rec__foo__r__z : integer
}

function us_split_fields_X__projection(a: us_split_fields) : integer =
  (a).rec__foo__r__x

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__foo__r__y

function us_split_fields_Z__projection(a: us_split_fields) : integer =
  (a).rec__foo__r__z

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__foo__r__x) = to_rep(((b).us_split_fields1).rec__foo__r__x)) and
  (to_rep(((a).us_split_fields1).rec__foo__r__y) = to_rep(((b).us_split_fields1).rec__foo__r__y))) and
  (to_rep(((a).us_split_fields1).rec__foo__r__z) = to_rep(((b).us_split_fields1).rec__foo__r__z))) ->
  (bool_eq3(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__foo__r__x) = to_rep(((b).us_split_fields1).rec__foo__r__x)) and
  (to_rep(((a).us_split_fields1).rec__foo__r__y) = to_rep(((b).us_split_fields1).rec__foo__r__y))) and
  (to_rep(((a).us_split_fields1).rec__foo__r__z) = to_rep(((b).us_split_fields1).rec__foo__r__z)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. forall a2:integer.
  (0 <= object__size({ us_split_fields1 = { rec__foo__r__x = a;
  rec__foo__r__y = a1; rec__foo__r__z = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. forall a2:integer.
  (0 <= object__alignment({ us_split_fields1 = { rec__foo__r__x = a;
  rec__foo__r__y = a1; rec__foo__r__z = a2 } })))

logic foo__r__x__first__bit : int

logic foo__r__x__last__bit : int

logic foo__r__x__position : int

axiom foo__r__x__first__bit_axiom : (0 <= foo__r__x__first__bit)

axiom foo__r__x__last__bit_axiom :
  (foo__r__x__first__bit <  foo__r__x__last__bit)

axiom foo__r__x__position_axiom : (0 <= foo__r__x__position)

logic foo__r__y__first__bit : int

logic foo__r__y__last__bit : int

logic foo__r__y__position : int

axiom foo__r__y__first__bit_axiom : (0 <= foo__r__y__first__bit)

axiom foo__r__y__last__bit_axiom :
  (foo__r__y__first__bit <  foo__r__y__last__bit)

axiom foo__r__y__position_axiom : (0 <= foo__r__y__position)

logic foo__r__z__first__bit : int

logic foo__r__z__last__bit : int

logic foo__r__z__position : int

axiom foo__r__z__first__bit_axiom : (0 <= foo__r__z__first__bit)

axiom foo__r__z__last__bit_axiom :
  (foo__r__z__first__bit <  foo__r__z__last__bit)

axiom foo__r__z__position_axiom : (0 <= foo__r__z__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

logic dummy3 : integer

type r__ref = { r__content : us_rep
}

function r__ref___projection(a: r__ref) : us_rep = (a).r__content

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type t6b

predicate in_range2(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : t6b, t6b -> bool

logic dummy4 : t6b

type t6b__ref = { t6b__content : t6b
}

function t6b__ref___projection(a: t6b__ref) : t6b = (a).t6b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic tmp__split_fields : integer

logic tmp__split_fields1 : integer

logic tmp__split_fields2 : integer

logic i : int

logic o : integer

logic o1 : integer

logic o2 : integer

logic o3 : integer

logic o4 : integer

logic o5 : integer

logic foo__test_02__tmp__assume : integer

logic foo__test_02__tmp__assume1 : integer

logic foo__test_02__tmp__assume2 : integer

logic o6 : int

logic o7 : integer

logic o8 : integer

logic o9 : integer

logic o10 : integer

logic temp___197 : integer

logic temp___1971 : integer

logic temp___1972 : integer

logic o11 : int

logic result : integer

logic result1 : integer

logic result2 : integer

logic tmp__split_fields3 : integer

logic tmp__split_fields4 : integer

logic tmp__split_fields5 : integer

logic result3 : int

logic i1 : int

logic result4 : integer

logic result5 : integer

logic result6 : integer

logic tmp__split_fields6 : integer

logic tmp__split_fields7 : integer

logic tmp__split_fields8 : integer

logic tmp__split_fields9 : integer

logic tmp__split_fields10 : integer

logic tmp__split_fields11 : integer

logic i2 : int

logic result7 : int

logic i3 : int

axiom H : in_range1(n)

axiom H1 : (to_rep(o) = 0)

axiom H2 : (to_rep(o1) = n)

axiom H3 : (to_rep(o2) = n)

axiom H4 : (o2 = o3)

axiom H5 : (o1 = o4)

axiom H6 : (o = o5)

axiom H7 : (foo__test_02__tmp__assume = o3)

axiom H8 : (foo__test_02__tmp__assume1 = o4)

axiom H9 : (foo__test_02__tmp__assume2 = o5)

axiom H10 : (result = tmp__split_fields)

axiom H11 : (result1 = tmp__split_fields1)

axiom H12 : (result2 = tmp__split_fields2)

axiom H13 : (foo__test_02__tmp__assume = tmp__split_fields3)

axiom H14 : (foo__test_02__tmp__assume1 = tmp__split_fields4)

axiom H15 : (foo__test_02__tmp__assume2 = tmp__split_fields5)

axiom H16 : (result3 = i)

axiom H17 : (i1 = 1)

axiom H18 : (1 <= i1)

axiom H19 : (i1 <= 3)

axiom H20 : ((o6 = (to_rep(tmp__split_fields4) + 1)) and
  in_range1((to_rep(tmp__split_fields4) + 1)))

axiom H21 : (to_rep(o7) = o6)

axiom H22 : (tmp__split_fields3 = o8)

axiom H23 : (o7 = o9)

axiom H24 : (tmp__split_fields5 = o10)

axiom H25 : (temp___197 = o8)

axiom H26 : (temp___1971 = o9)

axiom H27 : (temp___1972 = o10)

axiom H28 : (result4 = tmp__split_fields3)

axiom H29 : (result5 = tmp__split_fields4)

axiom H30 : (result6 = tmp__split_fields5)

axiom H31 : (tmp__split_fields6 = temp___197)

axiom H32 : (tmp__split_fields7 = temp___1971)

axiom H33 : (tmp__split_fields8 = temp___1972)

axiom H34 : true

 (* File "foo.adb", line 28, characters 0-0 *)
goal WP_parameter_def : true
