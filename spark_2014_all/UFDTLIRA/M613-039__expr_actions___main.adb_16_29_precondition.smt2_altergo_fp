(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type capacity_range

predicate in_range(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__list__my_lists__vector__capacity :
capacity_range
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range =
  (a).rec__list__my_lists__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__list__my_lists__vector : us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__list__my_lists__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity = a };
  us_split_fields1 = { rec__list__my_lists__vector = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity = a };
  us_split_fields1 = { rec__list__my_lists__vector = a1 } })))

logic list__my_lists__vector__capacity__first__bit : int

logic list__my_lists__vector__capacity__last__bit : int

logic list__my_lists__vector__capacity__position : int

axiom list__my_lists__vector__capacity__first__bit_axiom :
  (0 <= list__my_lists__vector__capacity__first__bit)

axiom list__my_lists__vector__capacity__last__bit_axiom :
  (list__my_lists__vector__capacity__first__bit <  list__my_lists__vector__capacity__last__bit)

axiom list__my_lists__vector__capacity__position_axiom :
  (0 <= list__my_lists__vector__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : capacity_range

logic dummy2 : us_main_type

type vector__ref = { vector__content : us_rep
}

function vector__ref___projection(a: vector__ref) : us_rep =
  (a).vector__content

type element_type

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : element_type, element_type -> bool

logic dummy3 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq3 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref___projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic model__ : us_rep -> us_rep1

logic model____function_guard : us_rep1, us_rep -> prop

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic last__function_guard : int, us_rep1 -> prop

logic last_index__function_guard : int, us_rep -> prop

logic first_index__function_guard : int, us_rep -> prop

logic element__function_guard : int, us_rep, int -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq4 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

logic to_rep : capacity_range -> int

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic capacity__function_guard : int, us_rep -> prop

logic length1 : us_rep -> int

logic length__function_guard1 : int, us_rep -> prop

logic olt__function_guard : bool, us_rep1, us_rep1 -> prop

predicate in_range3(rec__list__my_lists__vector__capacity1: int, a: us_rep) =
  (rec__list__my_lists__vector__capacity1 = to_rep(((a).us_split_discrs1).rec__list__my_lists__vector__capacity))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size2({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity = a };
  us_split_fields1 = { rec__list__my_lists__vector = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = a }; us_split_fields1 = {
  rec__list__my_lists__vector = a1 } })))

logic list__my_lists__vector__capacity__first__bit1 : int

logic list__my_lists__vector__capacity__last__bit1 : int

logic list__my_lists__vector__capacity__position1 : int

axiom list__my_lists__vector__capacity__first__bit_axiom1 :
  (0 <= list__my_lists__vector__capacity__first__bit1)

axiom list__my_lists__vector__capacity__last__bit_axiom1 :
  (list__my_lists__vector__capacity__first__bit1 <  list__my_lists__vector__capacity__last__bit1)

axiom list__my_lists__vector__capacity__position_axiom1 :
  (0 <= list__my_lists__vector__capacity__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : capacity_range

logic dummy6 : us_main_type

type list__ref = { list__content : us_rep
}

function list__ref___projection(a: list__ref) : us_rep = (a).list__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic reverse_list : us_rep -> us_rep

logic reverse_list__function_guard : us_rep, us_rep -> prop

axiom reverse_list__post_axiom :
  (forall l:capacity_range. forall l1:us_main_type [reverse_list({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity = l };
  us_split_fields1 = { rec__list__my_lists__vector = l1 } })].
  ((forall i:int. (((1 <= i) and (i <= (0 + length(model__({
   us_split_discrs1 = { rec__list__my_lists__vector__capacity = l };
   us_split_fields1 = { rec__list__my_lists__vector = l1 } }))))) ->
   (get(model__({ us_split_discrs1 = {
   rec__list__my_lists__vector__capacity = l }; us_split_fields1 = {
   rec__list__my_lists__vector = l1 } }), i) = get(model__(reverse_list({
   us_split_discrs1 = { rec__list__my_lists__vector__capacity = l };
   us_split_fields1 = { rec__list__my_lists__vector = l1 } })),
   (((0 + length(model__({ us_split_discrs1 = {
   rec__list__my_lists__vector__capacity = l }; us_split_fields1 = {
   rec__list__my_lists__vector = l1 } }))) - i) + 1))))) and
  (100 = to_rep(((reverse_list({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l }; us_split_fields1 = {
  rec__list__my_lists__vector = l1 }
  })).us_split_discrs1).rec__list__my_lists__vector__capacity))))

logic l__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic rev_l__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type count_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : count_type, count_type -> bool

logic dummy7 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

type extended_index

predicate in_range5(x: int) = ((0 <= x) and (x <= 101))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : extended_index, extended_index -> bool

logic dummy8 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity = container };
  us_split_fields1 = { rec__list__my_lists__vector = container1 } })].
  ((((of_int(1) = true) -> (length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = container }; us_split_fields1 = {
  rec__list__my_lists__vector = container1 } }) <= to_rep(container))) and
  ((not (of_int(1) = true)) -> (length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = container }; us_split_fields1 = {
  rec__list__my_lists__vector = container1 } }) <= 100))) and
  in_range(length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = container }; us_split_fields1 = {
  rec__list__my_lists__vector = container1 } }))))

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq3(a, b) = match_bool(bool_eq(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq3(a, b) = match_bool(bool_eq(length(a), length(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity = container };
  us_split_fields1 = { rec__list__my_lists__vector = container1 } })].
  (length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = container }; us_split_fields1 = {
  rec__list__my_lists__vector = container1 } })) = length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity = container };
  us_split_fields1 = { rec__list__my_lists__vector = container1 } })))

axiom is_empty__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type
  [is_empty({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  container }; us_split_fields1 = { rec__list__my_lists__vector = container1
  } })]. ((is_empty({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = container }; us_split_fields1 = {
  rec__list__my_lists__vector = container1 } }) = true) <-> (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity = container };
  us_split_fields1 = { rec__list__my_lists__vector = container1 } }) = 0)))

type index_type

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : index_type, index_type -> bool

logic dummy9 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index1

predicate in_range7(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : extended_index1, extended_index1 -> bool

logic dummy10 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep1 [length(container)].
  (((0 + length(container)) <= 100) and in_range4(length(container))))

type element_type1

predicate in_range8(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : element_type1, element_type1 -> bool

logic dummy11 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)]. ((in_range7(position) and
  ((1 <= position) and (position <= (0 + length(container))))) ->
  in_range8(get(container, position)))))

logic l__split_fields : us_main_type

logic i : int

logic rev_l__split_fields : us_main_type

logic i1 : int

logic main__B_2__rev_l__assume : capacity_range

logic main__B_2__rev_l__assume1 : us_main_type

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic result : int

logic i2 : int

logic list__my_lists__append__2__container__fields : us_main_type

logic result1 : us_main_type

logic l__split_fields1 : us_main_type

logic result2 : int

logic i3 : int

logic list__my_lists__append__2__container__fields1 : us_main_type

logic result3 : us_main_type

logic l__split_fields2 : us_main_type

logic result4 : int

logic i4 : int

logic list__my_lists__append__2__container__fields2 : us_main_type

logic result5 : us_main_type

logic l__split_fields3 : us_main_type

logic result6 : int

logic i5 : int

logic list__my_lists__append__2__container__fields3 : us_main_type

logic result7 : us_main_type

logic l__split_fields4 : us_main_type

logic result8 : int

logic i6 : int

logic list__my_lists__append__2__container__fields4 : us_main_type

logic result9 : us_main_type

logic l__split_fields5 : us_main_type

logic result10 : int

logic i7 : int

logic list__my_lists__append__2__container__fields5 : us_main_type

logic result11 : us_main_type

logic l__split_fields6 : us_main_type

logic result12 : int

logic i8 : int

logic list__my_lists__append__2__container__fields6 : us_main_type

logic result13 : us_main_type

logic l__split_fields7 : us_main_type

logic result14 : int

logic i9 : int

logic list__my_lists__append__2__container__fields7 : us_main_type

logic result15 : us_main_type

logic l__split_fields8 : us_main_type

logic result16 : int

logic i10 : int

logic list__my_lists__append__2__container__fields8 : us_main_type

logic result17 : us_main_type

logic l__split_fields9 : us_main_type

logic result18 : int

logic i11 : int

logic list__my_lists__append__2__container__fields9 : us_main_type

logic result19 : us_main_type

logic l__split_fields10 : us_main_type

logic result20 : us_main_type

logic rev_l__split_fields1 : us_main_type

logic result21 : int

logic i12 : int

logic result22 : int

logic i13 : int

logic result23 : int

logic i14 : int

logic result24 : int

logic i15 : int

logic result25 : int

logic i16 : int

logic result26 : int

logic i17 : int

logic result27 : int

logic i18 : int

logic result28 : int

logic i19 : int

logic result29 : int

logic i20 : int

logic result30 : int

logic i21 : int

axiom H : ((to_rep(l__split_discrs) = 100) and (is_empty({ us_split_discrs1 =
  { rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields }
  }) = true))

axiom H1 : (100 = to_rep(l__split_discrs))

axiom H2 : (result = i)

axiom H3 : (i2 = 1)

axiom H4 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields } }))) + 1)) = i2))

axiom H5 : (result1 = l__split_fields)

axiom H6 : (l__split_fields1 = list__my_lists__append__2__container__fields)

axiom H7 : (i2 = result2)

axiom H8 : (i3 = 2)

axiom H9 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields1 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields1 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields1 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields1 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields1 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields1 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields1 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields1 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields1 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields1 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields1 } }))) + 1)) = i3))

axiom H10 : (result3 = l__split_fields1)

axiom H11 :
  (l__split_fields2 = list__my_lists__append__2__container__fields1)

axiom H12 : (i3 = result4)

axiom H13 : (i4 = 3)

axiom H14 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields2 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields2 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields2 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields2 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields2 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields2 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields2 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields2 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields2 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields2 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields2 } }))) + 1)) = i4))

axiom H15 : (result5 = l__split_fields2)

axiom H16 :
  (l__split_fields3 = list__my_lists__append__2__container__fields2)

axiom H17 : (result6 = i4)

axiom H18 : (i5 = 4)

axiom H19 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields3 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields3 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields3 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields3 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields3 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields3 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields3 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields3 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields3 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields3 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields3 } }))) + 1)) = i5))

axiom H20 : (result7 = l__split_fields3)

axiom H21 :
  (l__split_fields4 = list__my_lists__append__2__container__fields3)

axiom H22 : (result8 = i5)

axiom H23 : (i6 = 5)

axiom H24 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields4 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields4 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields4 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields4 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields4 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields4 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields4 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields4 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields4 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields4 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields4 } }))) + 1)) = i6))

axiom H25 : (result9 = l__split_fields4)

axiom H26 :
  (l__split_fields5 = list__my_lists__append__2__container__fields4)

axiom H27 : (result10 = i6)

axiom H28 : (i7 = 6)

axiom H29 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields5 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields5 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields5 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields5 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields5 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields5 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields5 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields5 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields5 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields5 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields5 } }))) + 1)) = i7))

axiom H30 : (result11 = l__split_fields5)

axiom H31 :
  (l__split_fields6 = list__my_lists__append__2__container__fields5)

axiom H32 : (result12 = i7)

axiom H33 : (i8 = 7)

axiom H34 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields6 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields6 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields6 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields6 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields6 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields6 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields6 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields6 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields6 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields6 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields6 } }))) + 1)) = i8))

axiom H35 : (result13 = l__split_fields6)

axiom H36 :
  (l__split_fields7 = list__my_lists__append__2__container__fields6)

axiom H37 : (result14 = i8)

axiom H38 : (i9 = 8)

axiom H39 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields7 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields7 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields7 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields7 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields7 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields7 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields7 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields7 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields7 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields7 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields7 } }))) + 1)) = i9))

axiom H40 : (result15 = l__split_fields7)

axiom H41 :
  (l__split_fields8 = list__my_lists__append__2__container__fields7)

axiom H42 : (result16 = i9)

axiom H43 : (i10 = 9)

axiom H44 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields8 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields8 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields8 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields8 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields8 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields8 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields8 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields8 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields8 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields8 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields8 } }))) + 1)) = i10))

axiom H45 : (result17 = l__split_fields8)

axiom H46 :
  (l__split_fields9 = list__my_lists__append__2__container__fields8)

axiom H47 : (result18 = i10)

axiom H48 : (i11 = 10)

axiom H49 : (((length1({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields9 } }) = (length1({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields9 } }) + 1)) and (((bool_lt(length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields9 } })), length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields9 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields9 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields9 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields9 } }), n))))) and
  (not (bool_lt(length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields9 } })),
  length(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields9 } }))) = false)))) and
  (get(model__({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  list__my_lists__append__2__container__fields9 } }), ((0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields9 } }))) + 1)) = i11))

axiom H50 : (result19 = l__split_fields9)

axiom H51 :
  (l__split_fields10 = list__my_lists__append__2__container__fields9)

axiom H52 : (({ us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  main__B_2__rev_l__assume }; us_split_fields1 = {
  rec__list__my_lists__vector = main__B_2__rev_l__assume1 }
  } = reverse_list({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields10 }
  })) and ((100 = to_rep(main__B_2__rev_l__assume)) and
  (forall i22:int. (((1 <= i22) and (i22 <= (0 + length(model__({
  us_split_discrs1 = { rec__list__my_lists__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__list__my_lists__vector =
  l__split_fields10 } }))))) -> (get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields10 } }),
  i22) = get(model__({ us_split_discrs1 = {
  rec__list__my_lists__vector__capacity = main__B_2__rev_l__assume };
  us_split_fields1 = { rec__list__my_lists__vector =
  main__B_2__rev_l__assume1 } }), (((0 + length(model__({ us_split_discrs1 =
  { rec__list__my_lists__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__list__my_lists__vector = l__split_fields10 }
  }))) - i22) + 1)))))))

axiom H53 : (result20 = rev_l__split_fields)

axiom H54 : (rev_l__split_fields1 = main__B_2__rev_l__assume1)

axiom H55 : (rev_l__split_discrs = main__B_2__rev_l__assume)

axiom H56 : (100 = to_rep(rev_l__split_discrs))

axiom H57 : (result21 = i1)

axiom H58 : (i12 = 1)

 (* File "main.adb", line 3, characters 0-0 *)
goal WP_parameter_def : (1 <= i12)
