(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun f1 (Int) Bool)
(declare-fun f1__function_guard (Bool Int) Bool)
(assert true)
(assert (forall ((foo__c Int)) (! (= (= (f1 foo__c) true) (< 0 foo__c)) :pattern ((f1 foo__c)))))
(declare-fun f3 (Int) Bool)
(declare-fun f3__function_guard (Bool Int) Bool)
(assert true)
(assert (forall ((foo__c Int)) (! (= (= (f3 foo__c) true) (< 0 foo__c)) :pattern ((f3 foo__c)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun f4 (Int Int) Bool)
(declare-fun f4__function_guard (Bool Int Int) Bool)
(declare-fun get_a (Int) Int)
(declare-fun get_a__function_guard (Int Int) Bool)
(assert true)
(assert (forall ((foo__c Int) (foo__a Int)) (! (= (= (f4 foo__c foo__a) true) (= foo__c (get_a foo__a))) :pattern ((f4 foo__c foo__a)))))
(assert (forall ((foo__a Int)) (! (=> (dynamic_invariant foo__a true true true true) (dynamic_invariant (get_a foo__a) true false true true)) :pattern ((get_a foo__a)))))
(assert (forall ((foo__a Int)) (! (=> (dynamic_invariant foo__a true true true true) (= (get_a foo__a) foo__a)) :pattern ((get_a foo__a)))))
(declare-fun get_c (Int) Int)
(declare-fun get_c__function_guard (Int Int) Bool)
(assert (forall ((foo__c Int)) (! (=> (dynamic_invariant foo__c true true true true) (dynamic_invariant (get_c foo__c) true false true true)) :pattern ((get_c foo__c)))))
(assert (forall ((foo__c Int)) (! (=> (dynamic_invariant foo__c true true true true) (= (get_c foo__c) foo__c)) :pattern ((get_c foo__c)))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const c Int)
(declare-const a Int)
(declare-const b Int)
(declare-const o Bool)
(declare-const o1 Bool)
(declare-const o2 Bool)
(declare-const o3 Bool)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Bool)
(declare-const o7 Bool)
(declare-const result Int)
(declare-const a1 Int)
(declare-const result1 Int)
(declare-const b1 Int)
(declare-const result2 Int)
(declare-const c1 Int)
(declare-const result3 Bool)
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 c)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 a)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 b)))
(assert (= result a))
(assert (= a1 1))
(assert (= result1 b))
(assert (= b1 2))
(assert (= result2 c))
(assert (= c1 3))
(assert (and (= o4 (get_c c1)) (and (in_range1 o4) (= o4 c1))))
(assert (and (= o5 (get_a a1)) (and (in_range1 o5) (= o5 a1))))
(assert (= o6 (ite (= o5 o4) true false)))
(assert (and (= o2 (f4 c1 a1)) (= (= o2 true) (= c1 (get_a a1)))))
(assert (and (= o (f3 c1)) (= (= o true) (< 0 c1))))
(assert (and (= o1 (f1 c1)) (= (= o1 true) (< 0 c1))))
(assert (= o3 (ite (= o1 true) o false)))
(assert (= o7 (ite (= o3 true) o2 false)))
(assert (= result3 (ite (= o7 true) o6 false)))
(assert (not (= (f3 c1) true)))
(check-sat)
(exit)
