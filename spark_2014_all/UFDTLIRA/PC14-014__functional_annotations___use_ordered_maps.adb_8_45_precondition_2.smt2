(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___2__projection ((a map__ref)) us_rep (map__content a))
(declare-fun has_key (us_rep Int) Bool)
(declare-fun has_key__function_guard (Bool us_rep Int) Bool)
(define-fun equivalent_keys ((left Int) (right Int)) Bool (and (not (< left right)) (not (< right left))))
(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)
(declare-sort key_type 0)
(declare-fun key_typeqtint (key_type) Int)
(assert (forall ((i key_type)) (and (<= 1 (key_typeqtint i)) (<= (key_typeqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (key_type key_type) Bool)
(declare-const dummy2 key_type)
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___2__projection ((a key_type__ref)) key_type (key_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_353 Int) (temp___is_init_349 Bool) (temp___skip_constant_350 Bool) (temp___do_toplevel_351 Bool) (temp___do_typ_inv_352 Bool)) Bool (=> (or (= temp___is_init_349 true) (<= 1 2147483647)) (in_range2 temp___expr_353)))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(define-fun default_initial_assumption ((temp___expr_368 us_rep) (temp___skip_top_level_369 Bool)) Bool (=> (not (= temp___skip_top_level_369 true)) (and (= (is_empty temp___expr_368) true) (= (length temp___expr_368) 0))))
(assert (forall ((container us_rep)) (forall ((key Int)) (! (=> (dynamic_invariant1 key true true true true) (=> (= (distinct 1 0) true) (=> (exists ((k Int)) (and (and (in_range2 k) (= (has_key container k) true)) (= (equivalent_keys k key) true))) (= (has_key container key) true)))) :pattern ((has_key container key))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-fun get (us_rep1 Int) Int)
(declare-fun get__function_guard (Int us_rep1 Int) Bool)
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 1 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (element_type element_type) Bool)
(declare-const dummy4 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_389 Int) (temp___is_init_385 Bool) (temp___skip_constant_386 Bool) (temp___do_toplevel_387 Bool) (temp___do_typ_inv_388 Bool)) Bool (=> (or (= temp___is_init_385 true) (<= 1 2147483647)) (in_range3 temp___expr_389)))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (extended_index extended_index) Bool)
(declare-const dummy5 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant3 ((temp___expr_396 Int) (temp___is_init_392 Bool) (temp___skip_constant_393 Bool) (temp___do_toplevel_394 Bool) (temp___do_typ_inv_395 Bool)) Bool (=> (or (= temp___is_init_392 true) (<= 0 2147483647)) (in_range4 temp___expr_396)))
(define-fun oeq ((left us_rep1) (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_404 us_rep1) (temp___skip_top_level_405 Bool)) Bool (=> (not (= temp___skip_top_level_405 true)) (= (length1 temp___expr_404) 0)))
(assert (forall ((container us_rep1)) (forall ((position Int)) (! (=> (and (dynamic_invariant3 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant2 (get container position) true false true true)) :pattern ((get container position))))))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (count_type count_type) Bool)
(declare-const dummy6 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range5 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__use_ordered_maps__my_maps__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields)) count_type (rec__use_ordered_maps__my_maps__cursor__node a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep2 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___9__projection ((a us_rep2)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (= (to_rep (rec__use_ordered_maps__my_maps__cursor__node (us_split_fields1 a))) (to_rep (rec__use_ordered_maps__my_maps__cursor__node (us_split_fields1 b)))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const use_ordered_maps__my_maps__cursor__node__first__bit Int)
(declare-const use_ordered_maps__my_maps__cursor__node__last__bit Int)
(declare-const use_ordered_maps__my_maps__cursor__node__position Int)
(assert (<= 0 use_ordered_maps__my_maps__cursor__node__first__bit))
(assert (< use_ordered_maps__my_maps__cursor__node__first__bit use_ordered_maps__my_maps__cursor__node__last__bit))
(assert (<= 0 use_ordered_maps__my_maps__cursor__node__position))
(declare-fun user_eq7 (us_rep2 us_rep2) Bool)
(declare-const dummy7 us_rep2)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep2)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep2 (cursor__content a))
(declare-datatypes () ((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep2)))))
(define-fun key_type__ref___3__projection ((a key_type__ref1)) us_rep2 (key_type__content1 a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq8 (us_rep3 us_rep3) Bool)
(declare-const dummy8 us_rep3)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep3)))))
(define-fun map__ref___3__projection ((a map__ref1)) us_rep3 (map__content1 a))
(declare-fun get1 (us_rep3 us_rep2) Int)
(declare-fun get__function_guard1 (Int us_rep3 us_rep2) Bool)
(declare-fun has_key1 (us_rep3 us_rep2) Bool)
(declare-fun has_key__function_guard1 (Bool us_rep3 us_rep2) Bool)
(declare-fun witness (us_rep3 us_rep2) Int)
(declare-fun witness__function_guard (Int us_rep3 us_rep2) Bool)
(declare-fun w_get (us_rep3 Int) Int)
(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= 1 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (element_type1 element_type1) Bool)
(declare-const dummy9 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___4__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant4 ((temp___expr_419 Int) (temp___is_init_415 Bool) (temp___skip_constant_416 Bool) (temp___do_toplevel_417 Bool) (temp___do_typ_inv_418 Bool)) Bool (=> (or (= temp___is_init_415 true) (<= 1 2147483647)) (in_range6 temp___expr_419)))
(declare-fun length2 (us_rep3) Int)
(declare-fun length__function_guard2 (Int us_rep3) Bool)
(declare-fun is_empty1 (us_rep3) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep3) Bool)
(define-fun default_initial_assumption2 ((temp___expr_427 us_rep3) (temp___skip_top_level_428 Bool)) Bool (=> (not (= temp___skip_top_level_428 true)) (and (= (is_empty1 temp___expr_427) true) (= (length2 temp___expr_427) 0))))
(assert (forall ((container us_rep3)) (forall ((key us_rep2)) (! (=> (= (has_key1 container key) true) (let ((result (get1 container key))) (and (=> (= (distinct 0 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep2)) (=> (= (has_key1 container k) true) (= (= (bool_eq2 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant4 result true false true true)))) :pattern ((get1 container key))))))
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__use_ordered_maps__my_maps__map__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__use_ordered_maps__my_maps__map__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__use_ordered_maps__my_maps__map us_main_type3)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields2)) us_main_type3 (rec__use_ordered_maps__my_maps__map a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep4 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___7__projection ((a us_rep4)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___8__projection ((a us_rep4)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq4 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (to_rep (rec__use_ordered_maps__my_maps__map__capacity (us_split_discrs1 a))) (to_rep (rec__use_ordered_maps__my_maps__map__capacity (us_split_discrs1 b)))) (= (us_main_eq3 (rec__use_ordered_maps__my_maps__map (us_split_fields3 a)) (rec__use_ordered_maps__my_maps__map (us_split_fields3 b))) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-const use_ordered_maps__my_maps__map__capacity__first__bit Int)
(declare-const use_ordered_maps__my_maps__map__capacity__last__bit Int)
(declare-const use_ordered_maps__my_maps__map__capacity__position Int)
(assert (<= 0 use_ordered_maps__my_maps__map__capacity__first__bit))
(assert (< use_ordered_maps__my_maps__map__capacity__first__bit use_ordered_maps__my_maps__map__capacity__last__bit))
(assert (<= 0 use_ordered_maps__my_maps__map__capacity__position))
(declare-fun user_eq10 (us_rep4 us_rep4) Bool)
(declare-const dummy10 us_rep4)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep4)))))
(define-fun map__ref___projection ((a map__ref2)) us_rep4 (map__content2 a))
(declare-fun model__ (us_rep4) us_rep)
(declare-fun model____function_guard (us_rep us_rep4) Bool)
(declare-fun oeq1 (us_rep4 us_rep4) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep4 us_rep4) Bool)
(assert (forall ((a us_rep4) (b us_rep4)) (! (= (user_eq10 a b) (oeq1 a b)) :pattern ((user_eq10 a b)))))
(assert true)
(declare-fun keys (us_rep4) us_rep1)
(declare-fun keys__function_guard (us_rep1 us_rep4) Bool)
(declare-fun length3 (us_rep4) Int)
(declare-fun length__function_guard3 (Int us_rep4) Bool)
(define-fun iter_has_element ((container us_rep1) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep1 Int) Bool)
(define-fun k_bigger_than_range ((container us_rep1) (fst Int) (lst Int) (key Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< (get container i) key))) true false))
(declare-fun k_bigger_than_range__function_guard (Bool us_rep1 Int Int Int) Bool)
(define-fun k_smaller_than_range ((container us_rep1) (fst Int) (lst Int) (key Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< key (get container i)))) true false))
(declare-fun k_smaller_than_range__function_guard (Bool us_rep1 Int Int Int) Bool)
(define-fun k_is_find ((container us_rep1) (key Int) (position Int)) Bool (and (ite (< 0 position) (k_bigger_than_range container 1 (- position 1) key) (distinct 1 0)) (ite (< position (length1 container)) (k_smaller_than_range container (+ position 1) (length1 container) key) (distinct 1 0))))
(declare-fun k_is_find__function_guard (Bool us_rep1 Int Int) Bool)
(declare-fun find (us_rep1 Int) Int)
(declare-fun find__function_guard (Int us_rep1 Int) Bool)
(assert (forall ((container us_rep4)) (! (let ((result (keys container))) (and (and (and (= (length1 result) (length3 container)) (forall ((temp___442 Int)) (=> (and (in_range4 temp___442) (= (iter_has_element result temp___442) true)) (= (has_key (model__ container) (get result temp___442)) true)))) (forall ((key Int)) (=> (and (in_range2 key) (= (has_key (model__ container) key) true)) (and (< 0 (find result key)) (= (equivalent_keys (get result (find result key)) key) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length3 container))) (and (= (find result (get result i)) i) (= (k_is_find result (get result i) i) true)))))) :pattern ((keys container)))))
(declare-fun positions (us_rep4) us_rep3)
(declare-fun positions__function_guard (us_rep3 us_rep4) Bool)
(declare-const no_element us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (forall ((container us_rep4)) (! (let ((result (positions container))) (and (not (= (has_key1 result no_element) true)) (forall ((i us_rep2)) (=> (= (has_key1 result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length3 container))) (forall ((j us_rep2)) (=> (= (has_key1 result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq2 i j) true))))))))) :pattern ((positions container)))))
(define-fun has_element ((container us_rep4) (position us_rep2)) Bool (has_key1 (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep4 us_rep2) Bool)
(define-fun key ((container us_rep4) (position us_rep2)) Int (get (keys container) (get1 (positions container) position)))
(declare-fun key__function_guard (Int us_rep4 us_rep2) Bool)
(declare-sort key_type1 0)
(declare-fun key_typeqtint1 (key_type1) Int)
(assert (forall ((i key_type1)) (and (<= 1 (key_typeqtint1 i)) (<= (key_typeqtint1 i) 2147483647))))
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (key_type1 key_type1) Bool)
(declare-const dummy11 key_type1)
(declare-datatypes () ((key_type__ref2 (mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref___projection ((a key_type__ref2)) key_type1 (key_type__content2 a))
(define-fun dynamic_invariant5 ((temp___expr_316 Int) (temp___is_init_312 Bool) (temp___skip_constant_313 Bool) (temp___do_toplevel_314 Bool) (temp___do_typ_inv_315 Bool)) Bool (=> (or (= temp___is_init_312 true) (<= 1 2147483647)) (in_range7 temp___expr_316)))
(declare-fun first (us_rep4) us_rep2)
(declare-fun first__function_guard (us_rep2 us_rep4) Bool)
(assert (forall ((container us_rep4)) (! (let ((result (first container))) (ite (= (length3 container) 0) (= (bool_eq2 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) 1)))) :pattern ((first container)))))
(declare-fun next (us_rep4 us_rep2) us_rep2)
(declare-fun next__function_guard (us_rep2 us_rep4 us_rep2) Bool)
(assert (forall ((container us_rep4)) (forall ((position us_rep2)) (! (=> (or (= (has_element container position) true) (= (bool_eq2 position no_element) true)) (let ((result (next container position))) (ite (or (= (bool_eq2 position no_element) true) (= (get1 (positions container) position) (length3 container))) (= (bool_eq2 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (+ (get1 (positions container) position) 1)))))) :pattern ((next container position))))))
(declare-const s us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const k Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant6 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range5 temp___expr_166)))
(declare-const rliteral count_type)
(assert (= (count_typeqtint rliteral) 0))
(assert (= no_element (mk___rep (mk___split_fields rliteral))))
(assert (forall ((container us_rep4)) (! (let ((result (length3 container))) (and (<= result (to_rep (rec__use_ordered_maps__my_maps__map__capacity (us_split_discrs1 container)))) (dynamic_invariant6 result true false true true))) :pattern ((length3 container)))))
(assert (forall ((container us_rep1)) (forall ((key1 Int)) (! (=> (dynamic_invariant5 key1 true true true true) (let ((result (find container key1))) (and (=> (< 0 result) (and (<= result (length1 container)) (= (equivalent_keys key1 (get container result)) true))) (dynamic_invariant6 result true false true true)))) :pattern ((find container key1))))))
(declare-fun oeq2 (us_rep us_rep) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep us_rep) Bool)
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (oeq1 left right) true) (= (oeq2 (model__ left) (model__ right)) true)) :pattern ((oeq1 left right)))))
(declare-fun witness1 (us_rep Int) Int)
(declare-fun witness__function_guard1 (Int us_rep Int) Bool)
(declare-fun w_get1 (us_rep Int) Int)
(declare-fun w_get__function_guard1 (Int us_rep Int) Bool)
(declare-fun get2 (us_rep Int) Int)
(declare-fun get__function_guard2 (Int us_rep Int) Bool)
(declare-sort element_type2 0)
(declare-fun element_typeqtint2 (element_type2) Int)
(assert (forall ((i element_type2)) (and (<= (- 2147483648) (element_typeqtint2 i)) (<= (element_typeqtint2 i) 2147483647))))
(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (element_type2 element_type2) Bool)
(declare-const dummy12 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___2__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant7 ((temp___expr_360 Int) (temp___is_init_356 Bool) (temp___skip_constant_357 Bool) (temp___do_toplevel_358 Bool) (temp___do_typ_inv_359 Bool)) Bool (=> (or (= temp___is_init_356 true) (<= (- 2147483648) 2147483647)) (in_range8 temp___expr_360)))
(assert (forall ((container us_rep)) (forall ((key1 Int)) (! (=> (and (dynamic_invariant1 key1 true true true true) (= (has_key container key1) true)) (let ((result (get2 container key1))) (and (=> (= (distinct 1 0) true) (and (= result (w_get1 container (witness1 container key1))) (forall ((k1 Int)) (=> (and (in_range2 k1) (= (has_key container k1) true)) (= (= (equivalent_keys k1 key1) true) (= (witness1 container key1) (witness1 container k1))))))) (dynamic_invariant7 result true false true true)))) :pattern ((get2 container key1))))))
(assert (forall ((container us_rep)) (! (dynamic_invariant6 (length container) true false true true) :pattern ((length container)))))
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (oeq2 left right) true) (and (forall ((key1 Int)) (=> (and (in_range2 key1) (= (has_key left key1) true)) (and (= (has_key right key1) true) (= (get2 right key1) (get2 left key1))))) (forall ((key1 Int)) (=> (and (in_range2 key1) (= (has_key right key1) true)) (= (has_key left key1) true))))) :pattern ((oeq2 left right)))))
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (forall ((key1 Int)) (not (and (in_range2 key1) (= (has_key container key1) true))))) :pattern ((is_empty container)))))
(declare-fun has_witness (us_rep Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep Int) Bool)
(assert true)
(assert (forall ((container us_rep)) (forall ((key1 Int)) (! (=> (and (dynamic_invariant1 key1 true true true true) (= (has_key container key1) true)) (let ((result (witness1 container key1))) (and (= (has_witness container result) true) (dynamic_invariant6 result true false true true)))) :pattern ((witness1 container key1))))))
(assert (forall ((container us_rep)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant6 witness2 true true true true) (= (has_witness container witness2) true)) (dynamic_invariant7 (w_get1 container witness2) true false true true)) :pattern ((w_get1 container witness2))))))
(assert (forall ((container us_rep1)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant6 result true false true true))) :pattern ((length1 container)))))
(assert (forall ((container us_rep3)) (forall ((key1 us_rep2)) (! (=> (= (distinct 0 0) true) (=> (exists ((k1 us_rep2)) (and (= (has_key1 container k1) true) (= (bool_eq2 k1 key1) true))) (= (has_key1 container key1) true))) :pattern ((has_key1 container key1))))))
(assert (forall ((container us_rep3)) (! (dynamic_invariant6 (length2 container) true false true true) :pattern ((length2 container)))))
(assert (forall ((container us_rep3)) (! (= (= (is_empty1 container) true) (forall ((key1 us_rep2)) (not (= (has_key1 container key1) true)))) :pattern ((is_empty1 container)))))
(declare-fun has_witness1 (us_rep3 Int) Bool)
(declare-fun has_witness__function_guard1 (Bool us_rep3 Int) Bool)
(assert true)
(assert (forall ((container us_rep3)) (forall ((key1 us_rep2)) (! (=> (= (has_key1 container key1) true) (let ((result (witness container key1))) (and (= (has_witness1 container result) true) (dynamic_invariant6 result true false true true)))) :pattern ((witness container key1))))))
(assert (forall ((container us_rep3)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant6 witness2 true true true true) (= (has_witness1 container witness2) true)) (dynamic_invariant4 (w_get container witness2) true false true true)) :pattern ((w_get container witness2))))))
(assert (not true))
(check-sat)
(exit)
