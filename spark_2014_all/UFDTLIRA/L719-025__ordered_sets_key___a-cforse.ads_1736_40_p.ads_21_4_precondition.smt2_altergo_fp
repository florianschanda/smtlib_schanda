(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic my_inf : int, int -> bool

logic my_inf__function_guard : bool, int, int -> prop

type element_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : element_type, element_type -> bool

logic dummy : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom my_inf__post_axiom : true

axiom my_inf__def_axiom :
  (forall i1:int. forall i2:int [my_inf(i1, i2)]. ((my_inf(i1,
  i2) = true) <-> (i1 <  i2)))

type count_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p__my_sets__set__capacity : count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__p__my_sets__set__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__my_sets__set : us_main_type
}

function us_split_fields_Set__projection(a: us_split_fields) : us_main_type =
  (a).rec__p__my_sets__set

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___7__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__p__my_sets__set__capacity) = to_rep(((b).us_split_discrs1).rec__p__my_sets__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__p__my_sets__set,
  ((b).us_split_fields1).rec__p__my_sets__set) = true)) -> (bool_eq4(a,
  b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__p__my_sets__set__capacity) = to_rep(((b).us_split_discrs1).rec__p__my_sets__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__p__my_sets__set,
  ((b).us_split_fields1).rec__p__my_sets__set) = true))) -> (bool_eq4(a,
  b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = a };
  us_split_fields1 = { rec__p__my_sets__set = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = a };
  us_split_fields1 = { rec__p__my_sets__set = a1 } })))

logic p__my_sets__set__capacity__first__bit : int

logic p__my_sets__set__capacity__last__bit : int

logic p__my_sets__set__capacity__position : int

axiom p__my_sets__set__capacity__first__bit_axiom :
  (0 <= p__my_sets__set__capacity__first__bit)

axiom p__my_sets__set__capacity__last__bit_axiom :
  (p__my_sets__set__capacity__first__bit <  p__my_sets__set__capacity__last__bit)

axiom p__my_sets__set__capacity__position_axiom :
  (0 <= p__my_sets__set__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : count_type

logic dummy3 : us_main_type

type set__ref = { set__content : us_rep
}

function set__ref___projection(a: set__ref) : us_rep = (a).set__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq2({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = a }; us_split_fields1 = {
  rec__p__my_sets__set = a1 } }, { us_split_discrs1 = {
  rec__p__my_sets__set__capacity = b }; us_split_fields1 = {
  rec__p__my_sets__set = b1 } })]. (user_eq2({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = a }; us_split_fields1 = {
  rec__p__my_sets__set = a1 } }, { us_split_discrs1 = {
  rec__p__my_sets__set__capacity = b }; us_split_fields1 = {
  rec__p__my_sets__set = b1 } }) = oeq({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = a }; us_split_fields1 = {
  rec__p__my_sets__set = a1 } }, { us_split_discrs1 = {
  rec__p__my_sets__set__capacity = b }; us_split_fields1 = {
  rec__p__my_sets__set = b1 } })))

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic length1 : int, us_rep -> int

logic length__function_guard1 : int, int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container };
  us_split_fields1 = { rec__p__my_sets__set = container1 } })]. ((length({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container };
  us_split_fields1 = { rec__p__my_sets__set = container1 }
  }) <= to_rep(container)) and in_range2(length({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [length1(attr__tag, { us_split_discrs1 = { rec__p__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__p__my_sets__set = container1 } })].
  in_range2(length1(attr__tag, { us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } }))))

logic last_element : us_rep -> int

logic last_element__function_guard : int, us_rep -> prop

logic last_element1 : int, us_rep -> int

logic last_element__function_guard1 : int, int, us_rep -> prop

type element_type1

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : element_type1, element_type1 -> bool

logic dummy4 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq6 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref___projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic e_bigger_than_range__function_guard : bool, us_rep1, int, int,
  int -> prop

logic elements : us_rep -> us_rep1

logic elements__function_guard : us_rep1, us_rep -> prop

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic is_empty1 : int, us_rep -> bool

logic is_empty__function_guard1 : bool, int, us_rep -> prop

axiom last_element__post_axiom :
  (forall container:count_type. forall container1:us_main_type
  [last_element({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__p__my_sets__set = container1 } })].
  ((not (is_empty({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__p__my_sets__set = container1 }
  }) = true)) -> (((last_element({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } }) = get(elements({ us_split_discrs1 =
  { rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } }), length({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } }))) and
  (forall i:int. (((1 <= i) and (i <= (length({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } }) - 1))) -> (my_inf(get(elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container };
  us_split_fields1 = { rec__p__my_sets__set = container1 } }), i),
  last_element({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
  container }; us_split_fields1 = { rec__p__my_sets__set = container1 }
  })) = true)))) and in_range3(last_element({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } })))))

axiom last_element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [last_element1(attr__tag, { us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } })]. in_range3(last_element1(attr__tag,
  { us_split_discrs1 = { rec__p__my_sets__set__capacity = container };
  us_split_fields1 = { rec__p__my_sets__set = container1 } }))))

logic key : int -> int

logic key__function_guard : int, int -> prop

type key_type

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : key_type, key_type -> bool

logic dummy6 : key_type

type key_type__ref = { key_type__content : key_type
}

function key_type__ref___2__projection(a: key_type__ref) : key_type =
  (a).key_type__content

axiom key__post_axiom :
  (forall i:int [key(i)]. (in_range1(i) -> in_range4(key(i))))

axiom key__def_axiom :
  (forall i:int [key(i)]. (in_range1(i) -> (key(i) = i)))

type key_type1

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : key_type1, key_type1 -> bool

logic dummy7 : key_type1

type key_type__ref1 = { key_type__content1 : key_type1
}

function key_type__ref___3__projection(a: key_type__ref1) : key_type1 =
  (a).key_type__content1

logic container : count_type

logic container1 : us_main_type

logic attr__ATTRIBUTE_ADDRESS : int

logic key1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic equivalent_elements__function_guard : bool, int, int -> prop

logic length2 : us_rep1 -> int

logic length__function_guard2 : int, us_rep1 -> prop

logic e_smaller_than_range__function_guard : bool, us_rep1, int, int,
  int -> prop

logic e_is_find__function_guard : bool, us_rep1, int, int -> prop

logic last__function_guard : int, us_rep1 -> prop

logic oeq__function_guard2 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq4(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq4(a, b) = match_bool(bool_eq(length2(a), length2(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq4(a, b) = match_bool(bool_eq(length2(a), length2(b)), false,
  false)))))

logic find : us_rep1, int -> int

logic find__function_guard : int, us_rep1, int -> prop

axiom find__post_axiom :
  (forall container2:us_rep1.
  (forall item:int [find(container2, item)]. (in_range3(item) ->
  (((0 <  find(container2, item)) -> ((find(container2,
  item) <= length2(container2)) and ((not (my_inf(item, get(container2,
  find(container2, item))) = true)) and ((my_inf(item, get(container2,
  find(container2, item))) = false) -> (not (my_inf(get(container2,
  find(container2, item)), item) = true)))))) and in_range2(find(container2,
  item))))))

logic e_elements_included__function_guard : bool, us_rep1, us_rep1 -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep2

logic bool_eq9 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep2

type set__ref1 = { set__content1 : us_rep2
}

function set__ref___2__projection(a: set__ref1) : us_rep2 = (a).set__content1

logic is_empty2 : us_rep2 -> bool

logic is_empty__function_guard2 : bool, us_rep2 -> prop

logic length3 : us_rep2 -> int

logic length__function_guard3 : int, us_rep2 -> prop

logic model__ : us_rep -> us_rep2

logic model____function_guard : us_rep2, us_rep -> prop

axiom model____post_axiom :
  (forall container2:count_type. forall container3:us_main_type [model__({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } })].
  (length3(model__({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
  container2 }; us_split_fields1 = { rec__p__my_sets__set = container3 }
  })) = length({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
  container2 }; us_split_fields1 = { rec__p__my_sets__set = container3 } })))

type element_type2

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : element_type2, element_type2 -> bool

logic dummy9 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___3__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

logic contains : us_rep2, int -> bool

logic contains__function_guard : bool, us_rep2, int -> prop

type extended_index

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : extended_index, extended_index -> bool

logic dummy10 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

logic iter_has_element__function_guard : bool, us_rep1, int -> prop

axiom elements__post_axiom :
  (forall container2:count_type. forall container3:us_main_type [elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } })].
  ((((length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } })) = length({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } })) and
  (forall temp___393:int. ((in_range7(temp___393) and ((1 <= temp___393) and
  (temp___393 <= (0 + length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } })))))) -> (contains(model__({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } }), get(elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } }),
  temp___393)) = true)))) and
  (forall item:int. ((in_range6(item) and (contains(model__({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } }),
  item) = true)) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }), item)) and
  ((not (my_inf(get(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }), find(elements({ us_split_discrs1 =
  { rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }), item)), item) = true)) and
  ((my_inf(get(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }), find(elements({ us_split_discrs1 =
  { rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }), item)), item) = false) ->
  (not (my_inf(item, get(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }), find(elements({ us_split_discrs1 =
  { rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }), item))) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }))) -> ((find(elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } }), get(elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } }), i)) = i) and
  (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) ->
    (my_inf(get(elements({ us_split_discrs1 = {
    rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
    rec__p__my_sets__set = container3 } }), i1), get(elements({
    us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
    us_split_fields1 = { rec__p__my_sets__set = container3 } }),
    i)) = true))) ->
  (((i <  length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
    us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
    us_split_fields1 = { rec__p__my_sets__set = container3 } })))) ->
    (my_inf(get(elements({ us_split_discrs1 = {
    rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
    rec__p__my_sets__set = container3 } }), i), get(elements({
    us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
    us_split_fields1 = { rec__p__my_sets__set = container3 } }),
    i1)) = true))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
        us_split_fields1 = { rec__p__my_sets__set = container3 } })))) ->
        (my_inf(get(elements({ us_split_discrs1 = {
        rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
        rec__p__my_sets__set = container3 } }), i), get(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
        us_split_fields1 = { rec__p__my_sets__set = container3 } }),
        i1)) = true)))) ->
  (match_bool(true, false, false) = true)))) and
  ((not (i <  length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } })))) -> (match_bool(true, of_int(1),
  false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) ->
        (my_inf(get(elements({ us_split_discrs1 = {
        rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
        rec__p__my_sets__set = container3 } }), i1), get(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
        us_split_fields1 = { rec__p__my_sets__set = container3 } }),
        i)) = true)))) ->
  (((i <  length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
    us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
    us_split_fields1 = { rec__p__my_sets__set = container3 } })))) ->
    (my_inf(get(elements({ us_split_discrs1 = {
    rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
    rec__p__my_sets__set = container3 } }), i), get(elements({
    us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
    us_split_fields1 = { rec__p__my_sets__set = container3 } }),
    i1)) = true))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
        us_split_fields1 = { rec__p__my_sets__set = container3 } })))) ->
        (my_inf(get(elements({ us_split_discrs1 = {
        rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
        rec__p__my_sets__set = container3 } }), i), get(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
        us_split_fields1 = { rec__p__my_sets__set = container3 } }),
        i1)) = true)))) ->
  (match_bool(false, false, false) = true)))) and
  ((not (i <  length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } })))) -> (match_bool(false, of_int(1),
  false) = true)))))) and ((not (0 <  i)) -> (((i <  length2(elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
    us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
    us_split_fields1 = { rec__p__my_sets__set = container3 } })))) ->
    (my_inf(get(elements({ us_split_discrs1 = {
    rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
    rec__p__my_sets__set = container3 } }), i), get(elements({
    us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
    us_split_fields1 = { rec__p__my_sets__set = container3 } }),
    i1)) = true))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
        us_split_fields1 = { rec__p__my_sets__set = container3 } })))) ->
        (my_inf(get(elements({ us_split_discrs1 = {
        rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
        rec__p__my_sets__set = container3 } }), i), get(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
        us_split_fields1 = { rec__p__my_sets__set = container3 } }),
        i1)) = true)))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container2 }; us_split_fields1 = {
  rec__p__my_sets__set = container3 } })))) -> (match_bool(of_int(1),
  of_int(1), false) = true))))))))))

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [oeq({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = left };
  us_split_fields1 = { rec__p__my_sets__set = left1 } }, { us_split_discrs1 =
  { rec__p__my_sets__set__capacity = right }; us_split_fields1 = {
  rec__p__my_sets__set = right1 } })]. (((oeq({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = left }; us_split_fields1 = {
  rec__p__my_sets__set = left1 } }, { us_split_discrs1 = {
  rec__p__my_sets__set__capacity = right }; us_split_fields1 = {
  rec__p__my_sets__set = right1 } }) = true) -> (((bool_eq(length2(elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = left };
  us_split_fields1 = { rec__p__my_sets__set = left1 } })), length2(elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = right };
  us_split_fields1 = { rec__p__my_sets__set = right1 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length2(elements({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = left };
  us_split_fields1 = { rec__p__my_sets__set = left1 } }))))) ->
  (get(elements({ us_split_discrs1 = { rec__p__my_sets__set__capacity = left
  }; us_split_fields1 = { rec__p__my_sets__set = left1 } }),
  n) = get(elements({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
  right }; us_split_fields1 = { rec__p__my_sets__set = right1 } }), n))))) and
  (not (bool_eq(length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = left }; us_split_fields1 = {
  rec__p__my_sets__set = left1 } })), length2(elements({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = right }; us_split_fields1 = {
  rec__p__my_sets__set = right1 } }))) = false)))) and ((not (oeq({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = left };
  us_split_fields1 = { rec__p__my_sets__set = left1 } }, { us_split_discrs1 =
  { rec__p__my_sets__set__capacity = right }; us_split_fields1 = {
  rec__p__my_sets__set = right1 } }) = true)) ->
  ((not (forall i:int. (((1 <= i) and (i <= length2(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = left };
        us_split_fields1 = { rec__p__my_sets__set = left1 } })))) ->
        ((0 <  find(elements({ us_split_discrs1 = {
        rec__p__my_sets__set__capacity = right }; us_split_fields1 = {
        rec__p__my_sets__set = right1 } }), get(elements({ us_split_discrs1 =
        { rec__p__my_sets__set__capacity = left }; us_split_fields1 = {
        rec__p__my_sets__set = left1 } }), i))) and (get(elements({
        us_split_discrs1 = { rec__p__my_sets__set__capacity = right };
        us_split_fields1 = { rec__p__my_sets__set = right1 } }),
        find(elements({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
        right }; us_split_fields1 = { rec__p__my_sets__set = right1 } }),
        get(elements({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
        left }; us_split_fields1 = { rec__p__my_sets__set = left1 } }),
        i))) = get(elements({ us_split_discrs1 = {
        rec__p__my_sets__set__capacity = left }; us_split_fields1 = {
        rec__p__my_sets__set = left1 } }), i)))))) or
  (not (forall i:int. (((1 <= i) and (i <= length2(elements({
       us_split_discrs1 = { rec__p__my_sets__set__capacity = right };
       us_split_fields1 = { rec__p__my_sets__set = right1 } })))) ->
       ((0 <  find(elements({ us_split_discrs1 = {
       rec__p__my_sets__set__capacity = left }; us_split_fields1 = {
       rec__p__my_sets__set = left1 } }), get(elements({ us_split_discrs1 = {
       rec__p__my_sets__set__capacity = right }; us_split_fields1 = {
       rec__p__my_sets__set = right1 } }), i))) and (get(elements({
       us_split_discrs1 = { rec__p__my_sets__set__capacity = left };
       us_split_fields1 = { rec__p__my_sets__set = left1 } }),
       find(elements({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
       left }; us_split_fields1 = { rec__p__my_sets__set = left1 } }),
       get(elements({ us_split_discrs1 = { rec__p__my_sets__set__capacity =
       right }; us_split_fields1 = { rec__p__my_sets__set = right1 } }),
       i))) = get(elements({ us_split_discrs1 = {
       rec__p__my_sets__set__capacity = right }; us_split_fields1 = {
       rec__p__my_sets__set = right1 } }), i))))))))))

axiom oeq__post__dispatch_axiom : true

axiom is_empty__post_axiom :
  (forall container2:count_type. forall container3:us_main_type [is_empty({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } })]. ((is_empty({
  us_split_discrs1 = { rec__p__my_sets__set__capacity = container2 };
  us_split_fields1 = { rec__p__my_sets__set = container3 } }) = true) <->
  (length({ us_split_discrs1 = { rec__p__my_sets__set__capacity = container2
  }; us_split_fields1 = { rec__p__my_sets__set = container3 } }) = 0)))

axiom is_empty__post__dispatch_axiom : true

axiom contains__post_axiom :
  (forall container2:us_rep2.
  (forall item:int [contains(container2, item)]. (in_range6(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range6(e) and (contains(container2, e) = true)) and
   ((my_inf(e, item) = false) and (my_inf(item, e) = false)))) ->
  (contains(container2, item) = true))))))

axiom length__post_axiom1 :
  (forall container2:us_rep2 [length3(container2)].
  in_range2(length3(container2)))

axiom is_empty__post_axiom1 :
  (forall container2:us_rep2 [is_empty2(container2)].
  (((is_empty2(container2) = true) <->
  (forall item:int. (not (in_range6(item) and (contains(container2,
  item) = true))))) and ((is_empty2(container2) = true) <->
  (length3(container2) = 0))))

axiom length__post_axiom2 :
  (forall container2:us_rep1 [length2(container2)].
  (((0 + length2(container2)) <= 2147483647) and
  in_range2(length2(container2))))

type element_type3

predicate in_range8(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : element_type3, element_type3 -> bool

logic dummy11 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref___4__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

axiom get__post_axiom :
  (forall container2:us_rep1.
  (forall position:int [get(container2, position)]. ((in_range7(position) and
  ((1 <= position) and (position <= (0 + length2(container2))))) ->
  in_range8(get(container2, position)))))

logic o : int

logic o1 : int

logic result : bool

axiom H : in_range5(key1)

axiom H1 : ((o1 = length({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } })) and (in_range2(o1) and
  (o1 <= to_rep(container))))

axiom H2 : (((o1 = 0) -> (result = true)) and ((not (o1 = 0)) ->
  (result = false)))

axiom H3 : (not (result = true))

 (* File "a-cforse.ads", line 1714, characters 0-0 *)
goal WP_parameter_def : (not (is_empty({ us_split_discrs1 = {
  rec__p__my_sets__set__capacity = container }; us_split_fields1 = {
  rec__p__my_sets__set = container1 } }) = true))
