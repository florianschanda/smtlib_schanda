(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic fibonacci : int -> int

logic fibonacci__function_guard : int, int -> prop

axiom fibonacci__post_axiom :
  (forall n:int [fibonacci(n)]. ((in_range1(n) and (n <= 23)) ->
  in_range1(fibonacci(n))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall n1:int. forall n2:int. forall l1:int. forall l2:int. forall a1:int.
  forall a2:int. forall b1:int. forall b2:int. forall i:int.
  forall copy_n1:int. forall copy_n2:int. forall temp___165:int.
  forall temp___164:int. forall temp___163:int. forall temp___162:int.
  forall temp___166:int. forall o:int. forall o1:int. forall o2:int.
  forall o3:int. forall o4:int. forall temp___170:int. forall temp___169:int.
  forall temp___168:int. forall temp___167:int. forall temp___171:int.
  forall o5:int. forall o6:int. forall o7:int. forall o8:int. forall o9:int.
  forall n11:int. forall n21:int. forall result:int. forall copy_n11:int.
  forall result1:int. forall copy_n21:int. forall result2:int.
  forall a11:int. forall result3:int. forall a21:int. forall result4:int.
  forall b11:int. forall result5:int. forall b21:int. forall result6:int.
  forall i1:int. forall n12:int. forall a12:int. forall b12:int.
  forall i2:int. forall temp___1661:int. forall result7:int.
  forall temp___1662:int. forall result8:int. forall a13:int.
  forall result9:int. forall b13:int. forall result10:int. forall n13:int.
  forall result11:int. forall i3:int. forall n14:int. forall a14:int.
  forall b14:int. forall i4:int. forall n15:int. forall a15:int.
  forall b15:int. forall i5:int. forall n16:int. forall a16:int.
  forall b16:int. forall i6:int. forall n17:int. forall a17:int.
  forall b17:int. forall i7:int. forall result12:int. forall i8:int.
  forall n22:int. forall a22:int. forall b22:int. forall i9:int.
  forall temp___1711:int. forall result13:int. forall temp___1712:int.
  forall result14:int. forall a23:int. forall result15:int. forall b23:int.
  forall result16:int__ref. forall n23:int. forall result17:int__ref.
  forall i10:int. forall n24:int__ref. forall a24:int__ref.
  forall b24:int__ref. forall i11:int__ref. forall n25:int. forall a25:int.
  forall b25:int. forall i12:int. forall n26:int__ref. forall a26:int__ref.
  forall b26:int__ref. forall i13:int__ref. forall n27:int. forall a27:int.
  forall b27:int. forall i14:int. forall result18:int__ref. forall l11:int.
  forall result19:int__ref. forall l12:int. forall l13:int__ref.
  forall l14:int. forall result20:int__ref. forall l21:int.
  forall result21:int__ref. forall l22:int. forall l23:int__ref.
  forall l24:int. forall n18:int__ref. forall n28:int__ref.
  forall l15:int__ref. forall l25:int__ref. forall a18:int__ref.
  forall a28:int__ref. forall b18:int__ref. forall b28:int__ref.
  forall i15:int__ref. forall copy_n12:int__ref. forall copy_n22:int__ref.
  forall n19:int. forall n29:int. forall l16:int. forall l26:int.
  forall a19:int. forall a29:int. forall b19:int. forall b29:int.
  forall i16:int. forall copy_n13:int. forall copy_n23:int.
  ((in_range1(n1) and (in_range1(n2) and (in_range1(l1) and
  (in_range1(l2) and (((n1 = n2) and ((l1 = l2) and (n1 <= 23))) and
  ((((0 <= 2147483647) -> in_range1(a1)) and (((0 <= 2147483647) ->
  in_range1(a2)) and (((0 <= 2147483647) -> in_range1(b1)) and
  (((0 <= 2147483647) -> in_range1(b2)) and (((0 <= 2147483647) ->
  in_range1(i)) and (((0 <= 2147483647) -> in_range1(copy_n1)) and
  (((0 <= 2147483647) -> in_range1(copy_n2)) and ((({ int__content = result
  } = { int__content = copy_n1 }) and (copy_n11 = n1)) and ((({
  int__content = result1 } = { int__content = copy_n2 }) and
  (copy_n21 = n2)) and ((({ int__content = result2 } = { int__content = a1
  }) and (a11 = 1)) and ((({ int__content = result3 } = { int__content = a2
  }) and (a21 = 1)) and ((({ int__content = result4 } = { int__content = b1
  }) and (b11 = 1)) and ((({ int__content = result5 } = { int__content = b2
  }) and (b21 = 1)) and ((({ int__content = result6 } = { int__content = i
  }) and (i1 = 2)) and ((((2 <  n1) and ((((temp___165 = i1) and
  ((temp___164 = b11) and ((temp___163 = n1) and ((temp___162 = a11) and
  ((0 = temp___166) and (((((a12 = fibonacci(i2)) and
  (b12 = fibonacci((i2 - 1)))) and (i2 <= 23)) and
  (((n12 + i2) - 2) = copy_n11)) and ((((((0 <= 2147483647) ->
  in_range1(a12)) and in_range1(n12)) and ((0 <= 2147483647) ->
  in_range1(b12))) and ((0 <= 2147483647) -> in_range1(i2))) and
  (((temp___1661 = result7) and (temp___1662 = n12)) and
  ((((o = (a12 + b12)) and in_range((a12 + b12))) and ((result8 = a12) and
  (a13 = o))) and (((((o1 = (a13 - b12)) and in_range((a13 - b12))) and
  ((o2 = o1) and in_range1(o1))) and ((result9 = b12) and (b13 = o2))) and
  ((((o3 = (n12 - 1)) and in_range1((n12 - 1))) and ((result10 = n12) and
  (n13 = o3))) and ((((o4 = (i2 + 1)) and in_range((i2 + 1))) and
  ((result11 = i2) and (i3 = o4))) and (not (2 <  n13)))))))))))))) and
  (((i3 = i4) and ((b13 = b14) and ((a13 = a14) and (n13 = n14)))) and
  ((i5 = i3) and ((b15 = b13) and ((a15 = a13) and (n15 = n13)))))) and ((({
  int__content = i6 } = { int__content = i4 }) and (({ int__content = b16
  } = { int__content = b14 }) and (({ int__content = a16 } = { int__content =
  a14 }) and ({ int__content = n16 } = { int__content = n14 })))) and
  ((i7 = i5) and ((b17 = b15) and ((a17 = a15) and (n17 = n15))))))) or
  ((not (2 <  n1)) and (((i1 = i6) and ((b11 = b16) and ((a11 = a16) and ({
  int__content = n16 } = { int__content = n1 })))) and ((i7 = i1) and
  ((b17 = b11) and ((a17 = a11) and (n17 = n11))))))) and
  (((result12 = i6) and (i8 = 2)) and ((((2 <  n2) and
  ((((temp___170 = i8) and ((temp___169 = b21) and ((temp___168 = n2) and
  ((temp___167 = a21) and ((0 = temp___171) and (((((a22 = fibonacci(i9)) and
  (b22 = fibonacci((i9 - 1)))) and (i9 <= 23)) and
  (((n22 + i9) - 2) = copy_n21)) and ((((((0 <= 2147483647) ->
  in_range1(a22)) and in_range1(n22)) and ((0 <= 2147483647) ->
  in_range1(b22))) and ((0 <= 2147483647) -> in_range1(i9))) and
  (((result13 = temp___1711) and (temp___1712 = n22)) and
  ((((o5 = (a22 + b22)) and in_range((a22 + b22))) and ((result14 = a22) and
  (a23 = o5))) and (((((o6 = (a23 - b22)) and in_range((a23 - b22))) and
  ((o7 = o6) and in_range1(o6))) and ((result15 = b22) and (b23 = o7))) and
  ((((o8 = (n22 - 1)) and in_range1((n22 - 1))) and ((result16 = {
  int__content = n22 }) and (n23 = o8))) and ((((o9 = (i9 + 1)) and
  in_range((i9 + 1))) and ((result17 = { int__content = i9 }) and
  (i10 = o9))) and (not (2 <  n23)))))))))))))) and (((i11 = { int__content =
  i10 }) and ((b24 = { int__content = b23 }) and ((a24 = { int__content = a23
  }) and (n24 = { int__content = n23 })))) and ((i12 = i10) and
  ((b25 = b23) and ((a25 = a23) and (n25 = n23)))))) and (((i13 = i11) and
  ((b26 = b24) and ((a26 = a24) and (n26 = n24)))) and ((i14 = i12) and
  ((b27 = b25) and ((a27 = a25) and (n27 = n25))))))) or ((not (2 <  n2)) and
  (((i13 = { int__content = i8 }) and ((b26 = { int__content = b21 }) and
  ((a26 = { int__content = a21 }) and (n26 = { int__content = n2 })))) and
  ((i14 = i8) and ((b27 = b21) and ((a27 = a21) and (n27 = n21))))))) and
  ((((l1 <  a16) and (((result18 = { int__content = l1 }) and
  (l11 = a16)) and ((l13 = { int__content = l11 }) and (l14 = l11)))) or
  ((not (l1 <  a16)) and (((result19 = { int__content = l1 }) and
  (l12 = 0)) and ((l13 = { int__content = l12 }) and (l14 = l12))))) and
  (((l2 <  (a26).int__content) and (((result20 = { int__content = l2 }) and
  (l21 = (a26).int__content)) and ((l23 = { int__content = l21 }) and
  (l24 = l21)))) or ((not (l2 <  (a26).int__content)) and (((result21 = {
  int__content = l2 }) and (l22 = 0)) and ((l23 = { int__content = l22 }) and
  (l24 = l22))))))))))))))))))))))) and (((copy_n22 = { int__content =
  copy_n21 }) and ((copy_n12 = { int__content = copy_n11 }) and
  ((i15 = i13) and ((b28 = b26) and ((b18 = { int__content = b16 }) and
  ((a28 = a26) and ((a18 = { int__content = a16 }) and ((l25 = l23) and
  ((l15 = l13) and ((n28 = n26) and (n18 = { int__content = n16
  }))))))))))) and ((copy_n23 = copy_n21) and ((copy_n13 = copy_n11) and
  ((i16 = i14) and ((b29 = b27) and ((b19 = b17) and ((a29 = a27) and
  ((a19 = a17) and ((l26 = l24) and ((l16 = l14) and ((n29 = n27) and
  (n19 = n17)))))))))))))))))) -> ((l15).int__content = (l25).int__content)))
