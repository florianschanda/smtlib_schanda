(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__dispatch__root__f : integer; rec__ext__ :
us_private
}

function us_split_fields_F__projection(a: us_split_fields) : integer =
  (a).rec__dispatch__root__f

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__dispatch__root__f) = to_rep(((b).us_split_fields1).rec__dispatch__root__f)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__dispatch__root__f) = to_rep(((b).us_split_fields1).rec__dispatch__root__f))) ->
  (bool_eq2(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = { rec__dispatch__root__f = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = { rec__dispatch__root__f = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

logic dispatch__root__f__first__bit : int

logic dispatch__root__f__last__bit : int

logic dispatch__root__f__position : int

axiom dispatch__root__f__first__bit_axiom :
  (0 <= dispatch__root__f__first__bit)

axiom dispatch__root__f__last__bit_axiom :
  (dispatch__root__f__first__bit <  dispatch__root__f__last__bit)

axiom dispatch__root__f__position_axiom : (0 <= dispatch__root__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : us_private

logic dummy3 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

logic init : unit -> us_rep

logic init__function_guard : us_rep, unit -> prop

logic init1 : int, unit -> us_rep

logic init__function_guard1 : us_rep, int, unit -> prop

type us_split_fields2 = { rec__dispatch__nested__child__g : integer;
rec__dispatch__root__f1 : integer; rec__ext__1 : us_private
}

function us_split_fields_G__projection(a: us_split_fields2) : integer =
  (a).rec__dispatch__nested__child__g

function us_split_fields_F__2__projection(a: us_split_fields2) : integer =
  (a).rec__dispatch__root__f1

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__g : us_private -> integer

axiom extract__g__conv :
  (forall g:integer.
  (forall rec__ext__2:us_private. (extract__g(hide_ext__(g,
  rec__ext__2)) = g)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__dispatch__root__f = ((a).us_split_fields3).rec__dispatch__root__f1;
  rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__dispatch__nested__child__g,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__dispatch__nested__child__g =
  extract__g(((r).us_split_fields1).rec__ext__); rec__dispatch__root__f1 =
  ((r).us_split_fields1).rec__dispatch__root__f; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__dispatch__nested__child__g) = to_rep(((b).us_split_fields3).rec__dispatch__nested__child__g)) and
  (to_rep(((a).us_split_fields3).rec__dispatch__root__f1) = to_rep(((b).us_split_fields3).rec__dispatch__root__f1))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__dispatch__nested__child__g) = to_rep(((b).us_split_fields3).rec__dispatch__nested__child__g)) and
  (to_rep(((a).us_split_fields3).rec__dispatch__root__f1) = to_rep(((b).us_split_fields3).rec__dispatch__root__f1)))) ->
  (bool_eq3(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size1({ us_split_fields3 = {
  rec__dispatch__nested__child__g = a; rec__dispatch__root__f1 = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__dispatch__nested__child__g = a; rec__dispatch__root__f1 = a1;
  rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic dispatch__nested__child__g__first__bit : int

logic dispatch__nested__child__g__last__bit : int

logic dispatch__nested__child__g__position : int

axiom dispatch__nested__child__g__first__bit_axiom :
  (0 <= dispatch__nested__child__g__first__bit)

axiom dispatch__nested__child__g__last__bit_axiom :
  (dispatch__nested__child__g__first__bit <  dispatch__nested__child__g__last__bit)

axiom dispatch__nested__child__g__position_axiom :
  (0 <= dispatch__nested__child__g__position)

logic dispatch__root__f__first__bit1 : int

logic dispatch__root__f__last__bit1 : int

logic dispatch__root__f__position1 : int

axiom dispatch__root__f__first__bit_axiom1 :
  (0 <= dispatch__root__f__first__bit1)

axiom dispatch__root__f__last__bit_axiom1 :
  (dispatch__root__f__first__bit1 <  dispatch__root__f__last__bit1)

axiom dispatch__root__f__position_axiom1 :
  (0 <= dispatch__root__f__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : us_private

logic dummy7 : int

type child__ref = { child__content : us_rep1
}

function child__ref___projection(a: child__ref) : us_rep1 =
  (a).child__content

logic init2 : unit -> us_rep1

logic init__function_guard2 : us_rep1, unit -> prop

logic init3 : int, unit -> us_rep1

logic init__function_guard3 : us_rep1, int, unit -> prop

axiom init__post_axiom : ((init(void)).attr__tag = us_tag)

axiom init__post__dispatch_axiom :
  (forall attr__tag2:int. ((init1(attr__tag2, void)).attr__tag = attr__tag2))

axiom dispatch__root__compat_axiom : (init(void) = init1(us_tag, void))

axiom dispatch__nested__child__compat_axiom : ({ us_split_fields1 = {
  rec__dispatch__root__f =
  ((init2(void)).us_split_fields3).rec__dispatch__root__f1; rec__ext__ =
  hide_ext__(((init2(void)).us_split_fields3).rec__dispatch__nested__child__g,
  ((init2(void)).us_split_fields3).rec__ext__1) }; attr__tag =
  (init2(void)).attr__tag1 } = init1(us_tag1, void))

axiom init__def_axiom : (init(void) = { us_split_fields1 = {
  rec__dispatch__root__f = of_rep(0); rec__ext__ = us_null_ext__ };
  attr__tag = us_tag })

logic r__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic c__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic rc__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic cc__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom init__post_axiom1 : ((init2(void)).attr__tag1 = us_tag1)

axiom init__post__dispatch_axiom1 :
  (forall attr__tag2:int. ((init3(attr__tag2,
  void)).attr__tag1 = attr__tag2))

axiom dispatch__nested__child__compat_axiom1 : (init2(void) = init3(us_tag1,
  void))

axiom init__def_axiom1 : (init2(void) = { us_split_fields3 = {
  rec__dispatch__nested__child__g = of_rep(1); rec__dispatch__root__f1 =
  of_rep(1); rec__ext__1 = us_null_ext__ }; attr__tag1 = us_tag1 })

 (* File "test_dispatch.adb", line 2, characters 0-0 *)
goal WP_parameter_def :
  (forall r__split_fields:integer. forall r__split_fields1:us_private.
  forall c__split_fields:integer. forall c__split_fields1:integer.
  forall c__split_fields2:us_private. forall rc__split_fields:integer.
  forall rc__split_fields1:us_private. forall cc__split_fields:integer.
  forall cc__split_fields1:us_private. forall usq_:integer.
  forall usq_1:us_private. forall usq_2:int. forall temp___222:integer.
  forall temp___2221:us_private. forall temp___2222:int.
  forall usq_3:integer. forall usq_4:us_private. forall usq_5:int.
  forall temp___223:integer. forall temp___2231:us_private.
  forall temp___2232:int. forall result:integer. forall result1:us_private.
  forall rc__split_fields2:integer. forall rc__split_fields3:us_private.
  forall result2:integer. forall result3:us_private.
  forall cc__split_fields2:integer. forall cc__split_fields3:us_private.
  forall result4:integer. forall result5:us_private.
  forall rc__split_fields4:integer. forall rc__split_fields5:us_private.
  forall result6:integer. forall result7:us_private.
  forall cc__split_fields4:integer. forall cc__split_fields5:us_private.
  ((r__attr__tag = us_tag) -> ((c__attr__tag = us_tag1) ->
  (((((result = rc__split_fields) and (result1 = rc__split_fields1)) and
  ((r__split_fields = rc__split_fields2) and
  (r__split_fields1 = rc__split_fields3))) and
  (rc__attr__tag = r__attr__tag)) -> (((((result2 = cc__split_fields) and
  (result3 = cc__split_fields1)) and
  ((c__split_fields1 = cc__split_fields2) and (hide_ext__(c__split_fields,
  c__split_fields2) = cc__split_fields3))) and
  (cc__attr__tag = c__attr__tag)) -> (((({ us_split_fields1 = {
  rec__dispatch__root__f = usq_; rec__ext__ = usq_1 }; attr__tag = usq_2
  } = init1(rc__attr__tag, void)) and (((usq_ = temp___222) and
  (usq_1 = temp___2221)) and (rc__attr__tag = temp___2222))) and
  (((result4 = rc__split_fields2) and (result5 = rc__split_fields3)) and
  ((temp___222 = rc__split_fields4) and
  (temp___2221 = rc__split_fields5)))) -> (((({ us_split_fields1 = {
  rec__dispatch__root__f = usq_3; rec__ext__ = usq_4 }; attr__tag = usq_5
  } = init1(cc__attr__tag, void)) and (((usq_3 = temp___223) and
  (usq_4 = temp___2231)) and (cc__attr__tag = temp___2232))) and
  (((result6 = cc__split_fields2) and (result7 = cc__split_fields3)) and
  ((temp___223 = cc__split_fields4) and
  (temp___2231 = cc__split_fields5)))) ->
  (to_rep(rc__split_fields4) = to_rep(cc__split_fields4)))))))))
