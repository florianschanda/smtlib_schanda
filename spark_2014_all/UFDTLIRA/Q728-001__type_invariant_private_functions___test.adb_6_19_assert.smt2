(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__test_type__t__f integer)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) integer (rec__test_type__t__f a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__test_type__t__f (us_split_fields1 a))) (to_rep (rec__test_type__t__f (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const test_type__t__f__first__bit Int)
(declare-const test_type__t__f__last__bit Int)
(declare-const test_type__t__f__position Int)
(assert (<= 0 test_type__t__f__first__bit))
(assert (< test_type__t__f__first__bit test_type__t__f__last__bit))
(assert (<= 0 test_type__t__f__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-fun decr (us_rep) us_rep)
(declare-fun decr__function_guard (us_rep us_rep) Bool)
(declare-fun decr_int (us_rep) us_rep)
(declare-fun decr_int__function_guard (us_rep us_rep) Bool)
(declare-fun saturate (us_rep) us_rep)
(declare-fun saturate__function_guard (us_rep us_rep) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_158 us_rep) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (= temp___do_typ_inv_157 true) (in_range1 (to_rep (rec__test_type__t__f (us_split_fields1 temp___expr_158))))))
(define-fun default_initial_assumption ((temp___expr_160 us_rep) (temp___skip_top_level_161 Bool)) Bool (= (to_rep (rec__test_type__t__f (us_split_fields1 temp___expr_160))) 0))
(define-fun type_invariant ((temp___162 us_rep)) Bool (in_range1 (to_rep (rec__test_type__t__f (us_split_fields1 temp___162)))))
(assert (forall ((x us_rep)) (! (=> (dynamic_invariant x true true true true) (dynamic_invariant (decr x) true false true true)) :pattern ((decr x)))))
(assert (forall ((x us_rep)) (! (=> (dynamic_invariant x true true true true) (= (decr x) (saturate (decr_int x)))) :pattern ((decr x)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(assert (forall ((x us_rep)) (! (=> (and (dynamic_invariant x true true true true) (< (- 2147483648) (to_rep (rec__test_type__t__f (us_split_fields1 x))))) (dynamic_invariant (decr_int x) true false true false)) :pattern ((decr_int x)))))
(assert (forall ((x us_rep)) (! (=> (dynamic_invariant x true true true true) (= (decr_int x) (mk___rep (mk___split_fields (of_rep (- (to_rep (rec__test_type__t__f (us_split_fields1 x))) 1)))))) :pattern ((decr_int x)))))
(assert (forall ((x us_rep)) (! (=> (dynamic_invariant x true true true true) (dynamic_invariant (saturate x) true false true false)) :pattern ((saturate x)))))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 0))
(assert (forall ((x us_rep)) (! (=> (dynamic_invariant x true true true true) (= (saturate x) (ite (< (to_rep (rec__test_type__t__f (us_split_fields1 x))) 0) (mk___rep (mk___split_fields rliteral)) x))) :pattern ((saturate x)))))
(declare-const x__split_fields integer)
(declare-const y__split_fields integer)
(declare-const test__y__assume integer)
(declare-const result integer)
(declare-const y__split_fields1 integer)
(define-fun test__y__assume1 () us_rep (mk___rep (mk___split_fields test__y__assume)))
(assert (= (to_rep x__split_fields) 0))
(assert (in_range1 (to_rep x__split_fields)))
(assert (and (= test__y__assume1 (decr (mk___rep (mk___split_fields x__split_fields)))) (and (in_range1 (to_rep test__y__assume)) (= test__y__assume1 (saturate (decr_int (mk___rep (mk___split_fields x__split_fields))))))))
(assert (= result y__split_fields))
(assert (= test__y__assume y__split_fields1))
(assert (in_range1 (to_rep y__split_fields1)))
(assert (not (not (= (bool_eq (mk___rep (mk___split_fields x__split_fields)) (mk___rep (mk___split_fields y__split_fields1))) true))))
(check-sat)
(exit)
