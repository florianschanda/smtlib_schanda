(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__default_init__discr__b : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__default_init__discr__b

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__default_init__discr__f : natural
}

function us_split_fields_F__4__projection(a: us_split_fields) : natural =
  (a).rec__default_init__discr__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___5__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate default_init__discr__f__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__default_init__discr__b) = 1)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((((a).us_split_discrs1).rec__default_init__discr__b = ((b).us_split_discrs1).rec__default_init__discr__b) and
  (default_init__discr__f__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__default_init__discr__f) = to_rep(((b).us_split_fields1).rec__default_init__discr__f)))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__default_init__discr__b = ((b).us_split_discrs1).rec__default_init__discr__b) and
  (default_init__discr__f__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__default_init__discr__f) = to_rep(((b).us_split_fields1).rec__default_init__discr__f))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:natural. (0 <= object__size({ us_split_discrs1 =
  { rec__default_init__discr__b = a }; us_split_fields1 = {
  rec__default_init__discr__f = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:natural. (0 <= object__alignment({
  us_split_discrs1 = { rec__default_init__discr__b = a }; us_split_fields1 =
  { rec__default_init__discr__f = a1 } })))

logic default_init__discr__b__first__bit : int

logic default_init__discr__b__last__bit : int

logic default_init__discr__b__position : int

axiom default_init__discr__b__first__bit_axiom :
  (0 <= default_init__discr__b__first__bit)

axiom default_init__discr__b__last__bit_axiom :
  (default_init__discr__b__first__bit <  default_init__discr__b__last__bit)

axiom default_init__discr__b__position_axiom :
  (0 <= default_init__discr__b__position)

logic default_init__discr__f__first__bit : int

logic default_init__discr__f__last__bit : int

logic default_init__discr__f__position : int

axiom default_init__discr__f__first__bit_axiom :
  (0 <= default_init__discr__f__first__bit)

axiom default_init__discr__f__last__bit_axiom :
  (default_init__discr__f__first__bit <  default_init__discr__f__last__bit)

axiom default_init__discr__f__position_axiom :
  (0 <= default_init__discr__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : bool

logic dummy2 : natural

type discr__ref = { discr__content : us_rep
}

function discr__ref___projection(a: discr__ref) : us_rep = (a).discr__content

logic init : int -> int

logic init__function_guard : int, int -> prop

axiom init__post_axiom :
  (forall x:int [init(x)]. (in_range1(x) -> in_range1(init(x))))

type us_split_discrs2 = { rec__default_init__mut_discr__b : bool
}

function us_split_discrs___2__projection(a: us_split_discrs2) : bool =
  (a).rec__default_init__mut_discr__b

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__default_init__mut_discr__f : natural
}

function us_split_fields_F__5__projection(a: us_split_fields2) : natural =
  (a).rec__default_init__mut_discr__f

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2; attr__constrained : bool
}

function us_rep___6__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___7__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___8__projection(a: us_rep1) : bool = (a).attr__constrained

predicate default_init__mut_discr__f__pred(a: us_rep1) =
  (to_int(((a).us_split_discrs3).rec__default_init__mut_discr__b) = 1)

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((((a).us_split_discrs3).rec__default_init__mut_discr__b = ((b).us_split_discrs3).rec__default_init__mut_discr__b) and
  (default_init__mut_discr__f__pred(a) ->
  (to_rep(((a).us_split_fields3).rec__default_init__mut_discr__f) = to_rep(((b).us_split_fields3).rec__default_init__mut_discr__f)))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((((a).us_split_discrs3).rec__default_init__mut_discr__b = ((b).us_split_discrs3).rec__default_init__mut_discr__b) and
  (default_init__mut_discr__f__pred(a) ->
  (to_rep(((a).us_split_fields3).rec__default_init__mut_discr__f) = to_rep(((b).us_split_fields3).rec__default_init__mut_discr__f))))) ->
  (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size1({
  us_split_discrs3 = { rec__default_init__mut_discr__b = a };
  us_split_fields3 = { rec__default_init__mut_discr__f = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs3 = {
  rec__default_init__mut_discr__b = a }; us_split_fields3 = {
  rec__default_init__mut_discr__f = a1 }; attr__constrained = a2 })))

logic default_init__mut_discr__b__first__bit : int

logic default_init__mut_discr__b__last__bit : int

logic default_init__mut_discr__b__position : int

axiom default_init__mut_discr__b__first__bit_axiom :
  (0 <= default_init__mut_discr__b__first__bit)

axiom default_init__mut_discr__b__last__bit_axiom :
  (default_init__mut_discr__b__first__bit <  default_init__mut_discr__b__last__bit)

axiom default_init__mut_discr__b__position_axiom :
  (0 <= default_init__mut_discr__b__position)

logic default_init__mut_discr__f__first__bit : int

logic default_init__mut_discr__f__last__bit : int

logic default_init__mut_discr__f__position : int

axiom default_init__mut_discr__f__first__bit_axiom :
  (0 <= default_init__mut_discr__f__first__bit)

axiom default_init__mut_discr__f__last__bit_axiom :
  (default_init__mut_discr__f__first__bit <  default_init__mut_discr__f__last__bit)

axiom default_init__mut_discr__f__position_axiom :
  (0 <= default_init__mut_discr__f__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : bool

logic dummy4 : natural

logic dummy5 : bool

type mut_discr__ref = { mut_discr__content : us_rep1
}

function mut_discr__ref___projection(a: mut_discr__ref) : us_rep1 =
  (a).mut_discr__content

logic mut_discr_ok : us_rep1 -> bool

logic mut_discr_ok__function_guard : bool, us_rep1 -> prop

predicate in_range2(rec__default_init__discr__b1: bool, a: us_rep) =
  (rec__default_init__discr__b1 = ((a).us_split_discrs1).rec__default_init__discr__b)

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:natural. (0 <= object__size2({ us_split_discrs1 =
  { rec__default_init__discr__b = a }; us_split_fields1 = {
  rec__default_init__discr__f = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:natural. (0 <= object__alignment2({
  us_split_discrs1 = { rec__default_init__discr__b = a }; us_split_fields1 =
  { rec__default_init__discr__f = a1 } })))

logic default_init__discr__b__first__bit1 : int

logic default_init__discr__b__last__bit1 : int

logic default_init__discr__b__position1 : int

axiom default_init__discr__b__first__bit_axiom1 :
  (0 <= default_init__discr__b__first__bit1)

axiom default_init__discr__b__last__bit_axiom1 :
  (default_init__discr__b__first__bit1 <  default_init__discr__b__last__bit1)

axiom default_init__discr__b__position_axiom1 :
  (0 <= default_init__discr__b__position1)

logic default_init__discr__f__first__bit1 : int

logic default_init__discr__f__last__bit1 : int

logic default_init__discr__f__position1 : int

axiom default_init__discr__f__first__bit_axiom1 :
  (0 <= default_init__discr__f__first__bit1)

axiom default_init__discr__f__last__bit_axiom1 :
  (default_init__discr__f__first__bit1 <  default_init__discr__f__last__bit1)

axiom default_init__discr__f__position_axiom1 :
  (0 <= default_init__discr__f__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy6 : bool

logic dummy7 : natural

type td1S__ref = { td1S__content : us_rep
}

function td1S__ref___projection(a: td1S__ref) : us_rep = (a).td1S__content

logic discr_ok : us_rep -> bool

logic discr_ok__function_guard : bool, us_rep -> prop

logic d1__split_discrs : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range3(rec__default_init__discr__b1: bool, a: us_rep) =
  (rec__default_init__discr__b1 = ((a).us_split_discrs1).rec__default_init__discr__b)

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:bool. forall a1:natural. (0 <= object__size3({ us_split_discrs1 =
  { rec__default_init__discr__b = a }; us_split_fields1 = {
  rec__default_init__discr__f = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:bool. forall a1:natural. (0 <= object__alignment3({
  us_split_discrs1 = { rec__default_init__discr__b = a }; us_split_fields1 =
  { rec__default_init__discr__f = a1 } })))

logic default_init__discr__b__first__bit2 : int

logic default_init__discr__b__last__bit2 : int

logic default_init__discr__b__position2 : int

axiom default_init__discr__b__first__bit_axiom2 :
  (0 <= default_init__discr__b__first__bit2)

axiom default_init__discr__b__last__bit_axiom2 :
  (default_init__discr__b__first__bit2 <  default_init__discr__b__last__bit2)

axiom default_init__discr__b__position_axiom2 :
  (0 <= default_init__discr__b__position2)

logic default_init__discr__f__first__bit2 : int

logic default_init__discr__f__last__bit2 : int

logic default_init__discr__f__position2 : int

axiom default_init__discr__f__first__bit_axiom2 :
  (0 <= default_init__discr__f__first__bit2)

axiom default_init__discr__f__last__bit_axiom2 :
  (default_init__discr__f__first__bit2 <  default_init__discr__f__last__bit2)

axiom default_init__discr__f__position_axiom2 :
  (0 <= default_init__discr__f__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy8 : bool

logic dummy9 : natural

type td2S__ref = { td2S__content : us_rep
}

function td2S__ref___projection(a: td2S__ref) : us_rep = (a).td2S__content

logic d2__split_discrs : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic d3__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range4(rec__default_init__mut_discr__b1: bool, a: us_rep1) =
  (rec__default_init__mut_discr__b1 = ((a).us_split_discrs3).rec__default_init__mut_discr__b)

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size4({
  us_split_discrs3 = { rec__default_init__mut_discr__b = a };
  us_split_fields3 = { rec__default_init__mut_discr__f = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment4({ us_split_discrs3 = {
  rec__default_init__mut_discr__b = a }; us_split_fields3 = {
  rec__default_init__mut_discr__f = a1 }; attr__constrained = a2 })))

logic default_init__mut_discr__b__first__bit1 : int

logic default_init__mut_discr__b__last__bit1 : int

logic default_init__mut_discr__b__position1 : int

axiom default_init__mut_discr__b__first__bit_axiom1 :
  (0 <= default_init__mut_discr__b__first__bit1)

axiom default_init__mut_discr__b__last__bit_axiom1 :
  (default_init__mut_discr__b__first__bit1 <  default_init__mut_discr__b__last__bit1)

axiom default_init__mut_discr__b__position_axiom1 :
  (0 <= default_init__mut_discr__b__position1)

logic default_init__mut_discr__f__first__bit1 : int

logic default_init__mut_discr__f__last__bit1 : int

logic default_init__mut_discr__f__position1 : int

axiom default_init__mut_discr__f__first__bit_axiom1 :
  (0 <= default_init__mut_discr__f__first__bit1)

axiom default_init__mut_discr__f__last__bit_axiom1 :
  (default_init__mut_discr__f__first__bit1 <  default_init__mut_discr__f__last__bit1)

axiom default_init__mut_discr__f__position_axiom1 :
  (0 <= default_init__mut_discr__f__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy10 : bool

logic dummy11 : natural

logic dummy12 : bool

type td4S__ref = { td4S__content : us_rep1
}

function td4S__ref___projection(a: td4S__ref) : us_rep1 = (a).td4S__content

logic d4__split_discrs : bool

logic d4__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate in_range5(rec__default_init__mut_discr__b1: bool, a: us_rep1) =
  (rec__default_init__mut_discr__b1 = ((a).us_split_discrs3).rec__default_init__mut_discr__b)

logic value__size5 : int

logic object__size5 : us_rep1 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep1 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size5({
  us_split_discrs3 = { rec__default_init__mut_discr__b = a };
  us_split_fields3 = { rec__default_init__mut_discr__f = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment5({ us_split_discrs3 = {
  rec__default_init__mut_discr__b = a }; us_split_fields3 = {
  rec__default_init__mut_discr__f = a1 }; attr__constrained = a2 })))

logic default_init__mut_discr__b__first__bit2 : int

logic default_init__mut_discr__b__last__bit2 : int

logic default_init__mut_discr__b__position2 : int

axiom default_init__mut_discr__b__first__bit_axiom2 :
  (0 <= default_init__mut_discr__b__first__bit2)

axiom default_init__mut_discr__b__last__bit_axiom2 :
  (default_init__mut_discr__b__first__bit2 <  default_init__mut_discr__b__last__bit2)

axiom default_init__mut_discr__b__position_axiom2 :
  (0 <= default_init__mut_discr__b__position2)

logic default_init__mut_discr__f__first__bit2 : int

logic default_init__mut_discr__f__last__bit2 : int

logic default_init__mut_discr__f__position2 : int

axiom default_init__mut_discr__f__first__bit_axiom2 :
  (0 <= default_init__mut_discr__f__first__bit2)

axiom default_init__mut_discr__f__last__bit_axiom2 :
  (default_init__mut_discr__f__first__bit2 <  default_init__mut_discr__f__last__bit2)

axiom default_init__mut_discr__f__position_axiom2 :
  (0 <= default_init__mut_discr__f__position2)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy13 : bool

logic dummy14 : natural

logic dummy15 : bool

type td5S__ref = { td5S__content : us_rep1
}

function td5S__ref___projection(a: td5S__ref) : us_rep1 = (a).td5S__content

logic d5__split_discrs : bool

logic d5__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom discr_ok__post_axiom : true

axiom discr_ok__def_axiom :
  (forall x:bool. forall x1:natural [discr_ok({ us_split_discrs1 = {
  rec__default_init__discr__b = x }; us_split_fields1 = {
  rec__default_init__discr__f = x1 } })]. ((discr_ok({ us_split_discrs1 = {
  rec__default_init__discr__b = x }; us_split_fields1 = {
  rec__default_init__discr__f = x1 } }) = true) <-> ((x = true) ->
  (to_rep(x1) = 0))))

axiom mut_discr_ok__post_axiom : true

axiom mut_discr_ok__def_axiom :
  (forall x:bool. forall x1:natural. forall x2:bool [mut_discr_ok({
  us_split_discrs3 = { rec__default_init__mut_discr__b = x };
  us_split_fields3 = { rec__default_init__mut_discr__f = x1 };
  attr__constrained = x2 })]. ((mut_discr_ok({ us_split_discrs3 = {
  rec__default_init__mut_discr__b = x }; us_split_fields3 = {
  rec__default_init__mut_discr__f = x1 }; attr__constrained = x2
  }) = true) <-> (not (x = true))))

 (* File "default_init.adb", line 54, characters 0-0 *)
goal WP_parameter_def :
  (forall d1__split_fields:natural. forall d2__split_fields:natural.
  forall d3__split_fields:natural. forall d3__split_discrs:bool.
  forall d4__split_fields:natural. forall d5__split_fields:natural.
  ((((d1__split_discrs = of_int(1)) and ((to_int(d1__split_discrs) = 1) ->
  (to_rep(d1__split_fields) = 0))) and (discr_ok({ us_split_discrs1 = {
  rec__default_init__discr__b = d1__split_discrs }; us_split_fields1 = {
  rec__default_init__discr__f = d1__split_fields } }) = true)) ->
  ((of_int(1) = d1__split_discrs) -> ((((d2__split_discrs = of_int(0)) and
  ((to_int(d2__split_discrs) = 1) -> (to_rep(d2__split_fields) = 0))) and
  (discr_ok({ us_split_discrs1 = { rec__default_init__discr__b =
  d2__split_discrs }; us_split_fields1 = { rec__default_init__discr__f =
  d2__split_fields } }) = true)) -> ((of_int(0) = d2__split_discrs) ->
  ((((d3__attr__constrained = false) and ((d3__split_discrs = of_int(0)) and
  ((to_int(d3__split_discrs) = 1) ->
  (to_rep(d3__split_fields) = init(0))))) and (mut_discr_ok({
  us_split_discrs3 = { rec__default_init__mut_discr__b = d3__split_discrs };
  us_split_fields3 = { rec__default_init__mut_discr__f = d3__split_fields };
  attr__constrained = d3__attr__constrained }) = true)) ->
  ((((d4__attr__constrained = true) and ((d4__split_discrs = of_int(0)) and
  ((to_int(d4__split_discrs) = 1) ->
  (to_rep(d4__split_fields) = init(0))))) and (mut_discr_ok({
  us_split_discrs3 = { rec__default_init__mut_discr__b = d4__split_discrs };
  us_split_fields3 = { rec__default_init__mut_discr__f = d4__split_fields };
  attr__constrained = d4__attr__constrained }) = true)) ->
  (((of_int(0) = d4__split_discrs) and (d4__attr__constrained = true)) ->
  ((((d5__attr__constrained = true) and ((d5__split_discrs = of_int(1)) and
  ((to_int(d5__split_discrs) = 1) ->
  (to_rep(d5__split_fields) = init(0))))) and (mut_discr_ok({
  us_split_discrs3 = { rec__default_init__mut_discr__b = d5__split_discrs };
  us_split_fields3 = { rec__default_init__mut_discr__f = d5__split_fields };
  attr__constrained = d5__attr__constrained }) = true)) ->
  (((of_int(1) = d5__split_discrs) and (d5__attr__constrained = true)) ->
  (to_int(d1__split_discrs) = 1)))))))))))
