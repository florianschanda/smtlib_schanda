(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type px_coord

predicate in_range(x: int) = (((- 1) <= x) and (x <= 9))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : px_coord, px_coord -> bool

logic dummy : px_coord

type px_coord__ref = { px_coord__content : px_coord
}

function px_coord__ref___projection(a: px_coord__ref) : px_coord =
  (a).px_coord__content

logic to_rep : px_coord -> int

logic of_rep : int -> px_coord

axiom inversion_axiom :
  (forall x:px_coord [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:px_coord [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type py_coord

predicate in_range1(x: int) = (((- 1) <= x) and (x <= 49))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : py_coord, py_coord -> bool

logic dummy1 : py_coord

type py_coord__ref = { py_coord__content : py_coord
}

function py_coord__ref___projection(a: py_coord__ref) : py_coord =
  (a).py_coord__content

logic to_rep1 : py_coord -> int

logic of_rep1 : int -> py_coord

axiom inversion_axiom1 :
  (forall x:py_coord [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:py_coord [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type direction

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : direction, direction -> bool

logic dummy2 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

logic to_rep2 : direction -> int

logic of_rep2 : int -> direction

axiom inversion_axiom2 :
  (forall x:direction [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:direction [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type shape

predicate in_range3(x: int) = ((1 <= x) and (x <= 7))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : shape, shape -> bool

logic dummy3 : shape

type shape__ref = { shape__content : shape
}

function shape__ref___projection(a: shape__ref) : shape = (a).shape__content

logic to_rep3 : shape -> int

logic of_rep3 : int -> shape

axiom inversion_axiom3 :
  (forall x:shape [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:shape [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__tetris_integrity__piece__s : shape;
rec__tetris_integrity__piece__d : direction; rec__tetris_integrity__piece__x
: px_coord; rec__tetris_integrity__piece__y : py_coord
}

function us_split_fields_S__projection(a: us_split_fields) : shape =
  (a).rec__tetris_integrity__piece__s

function us_split_fields_D__projection(a: us_split_fields) : direction =
  (a).rec__tetris_integrity__piece__d

function us_split_fields_X__projection(a: us_split_fields) : px_coord =
  (a).rec__tetris_integrity__piece__x

function us_split_fields_Y__projection(a: us_split_fields) : py_coord =
  (a).rec__tetris_integrity__piece__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((((to_rep3(((a).us_split_fields1).rec__tetris_integrity__piece__s) = to_rep3(((b).us_split_fields1).rec__tetris_integrity__piece__s)) and
  (to_rep2(((a).us_split_fields1).rec__tetris_integrity__piece__d) = to_rep2(((b).us_split_fields1).rec__tetris_integrity__piece__d))) and
  (to_rep(((a).us_split_fields1).rec__tetris_integrity__piece__x) = to_rep(((b).us_split_fields1).rec__tetris_integrity__piece__x))) and
  (to_rep1(((a).us_split_fields1).rec__tetris_integrity__piece__y) = to_rep1(((b).us_split_fields1).rec__tetris_integrity__piece__y))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((((to_rep3(((a).us_split_fields1).rec__tetris_integrity__piece__s) = to_rep3(((b).us_split_fields1).rec__tetris_integrity__piece__s)) and
  (to_rep2(((a).us_split_fields1).rec__tetris_integrity__piece__d) = to_rep2(((b).us_split_fields1).rec__tetris_integrity__piece__d))) and
  (to_rep(((a).us_split_fields1).rec__tetris_integrity__piece__x) = to_rep(((b).us_split_fields1).rec__tetris_integrity__piece__x))) and
  (to_rep1(((a).us_split_fields1).rec__tetris_integrity__piece__y) = to_rep1(((b).us_split_fields1).rec__tetris_integrity__piece__y)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:shape. forall a1:direction. forall a2:px_coord.
  forall a3:py_coord. (0 <= object__size({ us_split_fields1 = {
  rec__tetris_integrity__piece__s = a; rec__tetris_integrity__piece__d = a1;
  rec__tetris_integrity__piece__x = a2; rec__tetris_integrity__piece__y = a3
  } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:shape. forall a1:direction. forall a2:px_coord.
  forall a3:py_coord. (0 <= object__alignment({ us_split_fields1 = {
  rec__tetris_integrity__piece__s = a; rec__tetris_integrity__piece__d = a1;
  rec__tetris_integrity__piece__x = a2; rec__tetris_integrity__piece__y = a3
  } })))

logic tetris_integrity__piece__s__first__bit : int

logic tetris_integrity__piece__s__last__bit : int

logic tetris_integrity__piece__s__position : int

axiom tetris_integrity__piece__s__first__bit_axiom :
  (0 <= tetris_integrity__piece__s__first__bit)

axiom tetris_integrity__piece__s__last__bit_axiom :
  (tetris_integrity__piece__s__first__bit <  tetris_integrity__piece__s__last__bit)

axiom tetris_integrity__piece__s__position_axiom :
  (0 <= tetris_integrity__piece__s__position)

logic tetris_integrity__piece__d__first__bit : int

logic tetris_integrity__piece__d__last__bit : int

logic tetris_integrity__piece__d__position : int

axiom tetris_integrity__piece__d__first__bit_axiom :
  (0 <= tetris_integrity__piece__d__first__bit)

axiom tetris_integrity__piece__d__last__bit_axiom :
  (tetris_integrity__piece__d__first__bit <  tetris_integrity__piece__d__last__bit)

axiom tetris_integrity__piece__d__position_axiom :
  (0 <= tetris_integrity__piece__d__position)

logic tetris_integrity__piece__x__first__bit : int

logic tetris_integrity__piece__x__last__bit : int

logic tetris_integrity__piece__x__position : int

axiom tetris_integrity__piece__x__first__bit_axiom :
  (0 <= tetris_integrity__piece__x__first__bit)

axiom tetris_integrity__piece__x__last__bit_axiom :
  (tetris_integrity__piece__x__first__bit <  tetris_integrity__piece__x__last__bit)

axiom tetris_integrity__piece__x__position_axiom :
  (0 <= tetris_integrity__piece__x__position)

logic tetris_integrity__piece__y__first__bit : int

logic tetris_integrity__piece__y__last__bit : int

logic tetris_integrity__piece__y__position : int

axiom tetris_integrity__piece__y__first__bit_axiom :
  (0 <= tetris_integrity__piece__y__first__bit)

axiom tetris_integrity__piece__y__last__bit_axiom :
  (tetris_integrity__piece__y__first__bit <  tetris_integrity__piece__y__last__bit)

axiom tetris_integrity__piece__y__position_axiom :
  (0 <= tetris_integrity__piece__y__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : shape

logic dummy5 : direction

logic dummy6 : px_coord

logic dummy7 : py_coord

type piece__ref = { piece__content : us_rep
}

function piece__ref___projection(a: piece__ref) : us_rep = (a).piece__content

type action

predicate in_range4(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : action, action -> bool

logic dummy8 : action

type action__ref = { action__content : action
}

function action__ref___projection(a: action__ref) : action =
  (a).action__content

type turn_action

predicate in_range5(x: int) = ((3 <= x) and (x <= 4))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : turn_action, turn_action -> bool

logic dummy9 : turn_action

type turn_action__ref = { turn_action__content : turn_action
}

function turn_action__ref___projection(a: turn_action__ref) : turn_action =
  (a).turn_action__content

logic turn_direction : int, int -> int

logic turn_direction__function_guard : int, int, int -> prop

axiom turn_direction__post_axiom :
  (forall d:int. forall t:int [turn_direction(d, t)]. ((in_range2(d) and
  in_range5(t)) -> in_range2(turn_direction(d, t))))

axiom turn_direction__def_axiom :
  (forall d:int. forall t:int [turn_direction(d, t)]. ((in_range2(d) and
  in_range5(t)) -> (((t = 3) -> (((d = 0) -> (turn_direction(d, t) = 3)) and
  ((not (d = 0)) -> (turn_direction(d, t) = (d - 1))))) and ((not (t = 3)) ->
  (((d = 3) -> (turn_direction(d, t) = 0)) and ((not (d = 3)) ->
  (turn_direction(d, t) = (d + 1))))))))

logic move_is_possible : us_rep, int -> bool

logic move_is_possible__function_guard : bool, us_rep, int -> prop

axiom move_is_possible__post_axiom : true

axiom move_is_possible__def_axiom :
  (forall p:shape. forall p1:direction. forall p2:px_coord.
  forall p3:py_coord.
  (forall a:int [move_is_possible({ us_split_fields1 = {
  rec__tetris_integrity__piece__s = p; rec__tetris_integrity__piece__d = p1;
  rec__tetris_integrity__piece__x = p2; rec__tetris_integrity__piece__y = p3
  } }, a)]. (((move_is_possible({ us_split_fields1 = {
  rec__tetris_integrity__piece__s = p; rec__tetris_integrity__piece__d = p1;
  rec__tetris_integrity__piece__x = p2; rec__tetris_integrity__piece__y = p3
  } }, a) = true) -> (((a = 0) -> in_range((to_rep(p2) - 1))) and
  ((not (a = 0)) -> (((a = 1) -> in_range((to_rep(p2) + 1))) and
  ((not (a = 1)) -> ((a = 2) -> in_range1((to_rep1(p3) + 1)))))))) and
  ((((a = 0) and in_range((to_rep(p2) - 1))) or ((not (a = 0)) and
  (((a = 1) and in_range((to_rep(p2) + 1))) or ((not (a = 1)) and ((a = 2) ->
  in_range1((to_rep1(p3) + 1))))))) -> (move_is_possible({ us_split_fields1 =
  { rec__tetris_integrity__piece__s = p; rec__tetris_integrity__piece__d =
  p1; rec__tetris_integrity__piece__x = p2; rec__tetris_integrity__piece__y =
  p3 } }, a) = true)))))

logic p : shape

logic p1 : direction

logic p2 : px_coord

logic p3 : py_coord

logic attr__ATTRIBUTE_ADDRESS : int

logic a : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "tetris_integrity.ads", line 65, characters 0-0 *)
goal WP_parameter_def : (in_range4(a) -> ((move_is_possible({
  us_split_fields1 = { rec__tetris_integrity__piece__s = p;
  rec__tetris_integrity__piece__d = p1; rec__tetris_integrity__piece__x = p2;
  rec__tetris_integrity__piece__y = p3 } }, a) = true) -> ((a = 0) ->
  in_range((to_rep(p2) - 1)))))
