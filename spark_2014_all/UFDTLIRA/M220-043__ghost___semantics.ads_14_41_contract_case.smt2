(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun ghost_func (tuple0) Int)
(declare-fun ghost_func__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (ghost_func us_void_param) true false true) :pattern ((ghost_func us_void_param)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t1b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (t1b t1b) Bool)
(declare-const dummy1 t1b)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const formal Int)
(declare-const i Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const temp___135 Int)
(declare-const temp___134 Int)
(declare-const temp___136 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const us Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const formal1 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 Int)
(declare-const formal2 Int)
(declare-const formal3 Int)
(declare-const i2 Int)
(declare-const temp___1361 Int)
(declare-const result2 Int)
(declare-const temp___1362 Int)
(declare-const result3 Int)
(declare-const i3 Int)
(declare-const result4 Int)
(declare-const formal4 Int)
(declare-const formal5 Int)
(declare-const i4 Int)
(declare-const temp___1363 Int)
(declare-const formal6 Int)
(declare-const i5 Int)
(declare-const temp___1364 Int)
(declare-const formal7 Int)
(declare-const i6 Int)
(declare-const formal8 Int)
(declare-const i7 Int)
(declare-const formal9 Int)
(declare-const i8 Int)
(declare-const formal10 Int)
(declare-const i9 Int)
(declare-const formal11 Int)
(declare-const i10 Int)
(declare-const formal12 Int)
(declare-const i11 Int)
(assert (in_range1 formal))
(assert (= formal (ghost_func Tuple0)))
(assert (and (and (< 0 (+ formal (ghost_func Tuple0))) (and (< 0 (+ formal (ghost_func Tuple0))) (and (and (= (mk_int__ref result) (mk_int__ref i)) (= i1 1)) (ite (and (<= 1 i1) (<= i1 2)) (and (and (and (= temp___135 i1) (and (= temp___134 formal) (and (= 0 temp___136) (and (and (and (= o6 (+ formal 1)) (in_range1 (+ formal 1))) (and (= (mk_int__ref result1) (mk_int__ref formal)) (= formal2 o6))) (and (< 0 (+ formal3 (ghost_func Tuple0))) (and (and (and (in_range1 formal3) (=> (<= 1 2) (in_range2 i2))) (and (<= 1 i2) (<= i2 2))) (and (and (= temp___1361 result2) (= temp___1362 (+ formal3 (ghost_func Tuple0)))) (= i2 2)))))))) (and (and (= i2 i6) (= formal3 formal7)) (and (= i7 i2) (= formal8 formal3)))) (and (and (= (mk_int__ref i8) (mk_int__ref i6)) (= (mk_int__ref formal9) (mk_int__ref formal7))) (and (= i9 i7) (= formal10 formal8)))) (and (and (= i1 i8) (= (mk_int__ref formal9) (mk_int__ref formal))) (and (= i9 i1) (= formal10 formal1))))))) (and (and (= (mk_int__ref i10) (mk_int__ref i8)) (= (mk_int__ref formal11) (mk_int__ref formal9))) (and (= i11 i9) (= formal12 formal10)))))
(assert (=> (= (= formal 0) true) (= formal11 (ghost_func Tuple0))))
(assert (not (= (= formal 0) true)))
(assert (not (= formal11 (+ (ghost_func Tuple0) 1))))
(check-sat)
(exit)
