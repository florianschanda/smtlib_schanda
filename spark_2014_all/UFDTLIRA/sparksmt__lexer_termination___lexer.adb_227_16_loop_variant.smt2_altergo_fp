(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq5 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type file__ref = { file__content : us_rep
}

function file__ref___projection(a: file__ref) : us_rep = (a).file__content

type read_status

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : read_status, read_status -> bool

logic dummy4 : read_status

type read_status__ref = { read_status__content : read_status
}

function read_status__ref___projection(a: read_status__ref) : read_status =
  (a).read_status__content

logic to_rep1 : read_status -> int

logic of_rep1 : int -> read_status

axiom inversion_axiom1 :
  (forall x:read_status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:read_status [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__file_io__read_result__status : read_status
}

function us_split_discrs___projection(a: us_split_discrs) : read_status =
  (a).rec__file_io__read_result__status

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__file_io__read_result__c : character
}

function us_split_fields_C__projection(a: us_split_fields) : character =
  (a).rec__file_io__read_result__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___4__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function us_rep___5__projection(a: us_rep1) : bool = (a).attr__constrained

predicate file_io__read_result__c__pred(a: us_rep1) =
  (to_rep1(((a).us_split_discrs1).rec__file_io__read_result__status) = 0)

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__file_io__read_result__status) = to_rep1(((b).us_split_discrs1).rec__file_io__read_result__status)) and
  (file_io__read_result__c__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__file_io__read_result__c) = to_rep(((b).us_split_fields1).rec__file_io__read_result__c)))) ->
  (bool_eq7(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__file_io__read_result__status) = to_rep1(((b).us_split_discrs1).rec__file_io__read_result__status)) and
  (file_io__read_result__c__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__file_io__read_result__c) = to_rep(((b).us_split_fields1).rec__file_io__read_result__c))))) ->
  (bool_eq7(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:read_status. forall a1:character. forall a2:bool.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__file_io__read_result__status = a }; us_split_fields1 = {
  rec__file_io__read_result__c = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:read_status. forall a1:character. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__file_io__read_result__status = a }; us_split_fields1 = {
  rec__file_io__read_result__c = a1 }; attr__constrained = a2 })))

logic file_io__read_result__status__first__bit : int

logic file_io__read_result__status__last__bit : int

logic file_io__read_result__status__position : int

axiom file_io__read_result__status__first__bit_axiom :
  (0 <= file_io__read_result__status__first__bit)

axiom file_io__read_result__status__last__bit_axiom :
  (file_io__read_result__status__first__bit <  file_io__read_result__status__last__bit)

axiom file_io__read_result__status__position_axiom :
  (0 <= file_io__read_result__status__position)

logic file_io__read_result__c__first__bit : int

logic file_io__read_result__c__last__bit : int

logic file_io__read_result__c__position : int

axiom file_io__read_result__c__first__bit_axiom :
  (0 <= file_io__read_result__c__first__bit)

axiom file_io__read_result__c__last__bit_axiom :
  (file_io__read_result__c__first__bit <  file_io__read_result__c__last__bit)

axiom file_io__read_result__c__position_axiom :
  (0 <= file_io__read_result__c__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : read_status

logic dummy6 : character

logic dummy7 : bool

type read_result__ref = { read_result__content : us_rep1
}

function read_result__ref___projection(a: read_result__ref) : us_rep1 =
  (a).read_result__content

logic attr__ATTRIBUTE_ADDRESS : int

logic current_read__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic next_read__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic local_invariant : us_rep, us_split_fields, us_split_discrs, int,
  us_split_fields, us_split_discrs, int -> bool

logic local_invariant__function_guard : bool, us_rep, us_split_fields,
  us_split_discrs, int, us_split_fields, us_split_discrs, int -> prop

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

logic index : us_rep -> int

logic index__function_guard : int, us_rep -> prop

axiom local_invariant__def_axiom :
  (forall lexer__the_file:us_rep.
  (forall lexer__current_read__fields:character.
  forall lexer__next_read__fields:character.
  (forall lexer__current_read__discrs:read_status.
  forall lexer__next_read__discrs:read_status.
  (forall lexer__current_idx:int. forall lexer__next_idx:int
  [local_invariant(lexer__the_file, { rec__file_io__read_result__c =
  lexer__current_read__fields }, { rec__file_io__read_result__status =
  lexer__current_read__discrs }, lexer__current_idx, {
  rec__file_io__read_result__c = lexer__next_read__fields }, {
  rec__file_io__read_result__status = lexer__next_read__discrs },
  lexer__next_idx)]. (((local_invariant(lexer__the_file, {
  rec__file_io__read_result__c = lexer__current_read__fields }, {
  rec__file_io__read_result__status = lexer__current_read__discrs },
  lexer__current_idx, { rec__file_io__read_result__c =
  lexer__next_read__fields }, { rec__file_io__read_result__status =
  lexer__next_read__discrs }, lexer__next_idx) = true) ->
  (((((((not (current_read__attr__constrained = true)) and
  (not (next_read__attr__constrained = true))) and
  (lexer__current_idx <= size(lexer__the_file))) and
  (lexer__next_idx <= size(lexer__the_file))) and
  (lexer__next_idx = index(lexer__the_file))) and
  (lexer__current_idx <= lexer__next_idx)) and
  (((to_rep1(lexer__next_read__discrs) = 0) ->
  ((to_rep1(lexer__current_read__discrs) = 0) and
  (lexer__current_idx = (lexer__next_idx - 1)))) and
  ((not (to_rep1(lexer__next_read__discrs) = 0)) ->
  (lexer__current_idx = lexer__next_idx))))) and
  ((((((((not (current_read__attr__constrained = true)) and
  (not (next_read__attr__constrained = true))) and
  (lexer__current_idx <= size(lexer__the_file))) and
  (lexer__next_idx <= size(lexer__the_file))) and
  (lexer__next_idx = index(lexer__the_file))) and
  (lexer__current_idx <= lexer__next_idx)) and
  (((to_rep1(lexer__next_read__discrs) = 0) and
  ((to_rep1(lexer__current_read__discrs) = 0) and
  (lexer__current_idx = (lexer__next_idx - 1)))) or
  ((not (to_rep1(lexer__next_read__discrs) = 0)) and
  (lexer__current_idx = lexer__next_idx)))) ->
  (local_invariant(lexer__the_file, { rec__file_io__read_result__c =
  lexer__current_read__fields }, { rec__file_io__read_result__status =
  lexer__current_read__discrs }, lexer__current_idx, {
  rec__file_io__read_result__c = lexer__next_read__fields }, {
  rec__file_io__read_result__status = lexer__next_read__discrs },
  lexer__next_idx) = true)))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "lexer.adb", line 291, characters 0-0 *)
goal WP_parameter_def :
  (forall the_file:us_rep. forall current_read__split_fields:character.
  forall current_read__split_discrs:read_status. forall current_line:int.
  forall current_col:int. forall current_idx:int.
  forall next_read__split_fields:character.
  forall next_read__split_discrs:read_status. forall next_idx:int.
  forall o:bool. forall result:bool. forall the_file1:us_rep.
  forall current_read__split_fields1:character.
  forall current_read__split_discrs1:read_status. forall current_line1:int.
  forall current_col1:int. forall current_idx1:int.
  forall next_read__split_fields1:character.
  forall next_read__split_discrs1:read_status. forall next_idx1:int.
  forall temp___1041:int. forall temp___1040:int. forall result1:int.
  forall temp___10411:int. forall result2:int. forall temp___10401:int.
  forall the_file2:us_rep. forall current_read__split_fields2:character.
  forall current_read__split_discrs2:read_status. forall current_line2:int.
  forall current_col2:int. forall current_idx2:int.
  forall next_read__split_fields2:character.
  forall next_read__split_discrs2:read_status. forall next_idx2:int.
  forall result3:bool. ((current_read__attr__constrained = false) ->
  (in_range2(current_line) -> (in_range1(current_col) ->
  (in_range1(current_idx) -> ((next_read__attr__constrained = false) ->
  (in_range1(next_idx) -> ((local_invariant(the_file, {
  rec__file_io__read_result__c = current_read__split_fields }, {
  rec__file_io__read_result__status = current_read__split_discrs },
  current_idx, { rec__file_io__read_result__c = next_read__split_fields }, {
  rec__file_io__read_result__status = next_read__split_discrs },
  next_idx) = true) -> ((((to_rep1(current_read__split_discrs) = 0) and
  ((((to_rep(current_read__split_fields) = 10) or
  ((to_rep(current_read__split_fields) = 13) or
  ((to_rep(current_read__split_fields) = 32) or
  (to_rep(current_read__split_fields) = 9)))) and (result = true)) or
  ((not ((to_rep(current_read__split_fields) = 10) or
  ((to_rep(current_read__split_fields) = 13) or
  ((to_rep(current_read__split_fields) = 32) or
  (to_rep(current_read__split_fields) = 9))))) and (result = false)))) or
  ((not (to_rep1(current_read__split_discrs) = 0)) and (result = false))) ->
  ((result = true) -> (((local_invariant(the_file1, {
  rec__file_io__read_result__c = current_read__split_fields1 }, {
  rec__file_io__read_result__status = current_read__split_discrs1 },
  current_idx1, { rec__file_io__read_result__c = next_read__split_fields1 },
  { rec__file_io__read_result__status = next_read__split_discrs1 },
  next_idx1) = true) and (current_idx <= current_idx1)) ->
  (((((in_range2(current_line1) and in_range1(current_col1)) and
  in_range1(current_idx1)) and in_range1(next_idx1)) and
  ((to_rep1(current_read__split_discrs1) = 0) and
  ((to_rep(current_read__split_fields1) = 10) or
  ((to_rep(current_read__split_fields1) = 13) or
  ((to_rep(current_read__split_fields1) = 32) or
  (to_rep(current_read__split_fields1) = 9)))))) ->
  (((result1 = temp___1041) and (temp___10411 = next_idx1)) ->
  (((result2 = temp___1040) and (((to_rep1(next_read__split_discrs1) = 0) and
  (temp___10401 = to_int(true))) or
  ((not (to_rep1(next_read__split_discrs1) = 0)) and
  (temp___10401 = to_int(false))))) -> ((((((local_invariant(the_file2, {
  rec__file_io__read_result__c = current_read__split_fields2 }, {
  rec__file_io__read_result__status = current_read__split_discrs2 },
  current_idx2, { rec__file_io__read_result__c = next_read__split_fields2 },
  { rec__file_io__read_result__status = next_read__split_discrs2 },
  next_idx2) = true) and (bool_eq7({ us_split_discrs1 = {
  rec__file_io__read_result__status = current_read__split_discrs2 };
  us_split_fields1 = { rec__file_io__read_result__c =
  current_read__split_fields2 }; attr__constrained =
  current_read__attr__constrained }, { us_split_discrs1 = {
  rec__file_io__read_result__status = next_read__split_discrs1 };
  us_split_fields1 = { rec__file_io__read_result__c =
  next_read__split_fields1 }; attr__constrained =
  next_read__attr__constrained }) = true)) and
  (current_idx2 = next_idx1)) and (current_idx1 <= current_idx2)) and
  (((in_range2(current_line2) and in_range1(current_col2)) and
  in_range1(current_idx2)) and in_range1(next_idx2))) ->
  ((((((to_rep1(current_read__split_discrs2) = 0) and
  ((((to_rep(current_read__split_fields2) = 10) or
  ((to_rep(current_read__split_fields2) = 13) or
  ((to_rep(current_read__split_fields2) = 32) or
  (to_rep(current_read__split_fields2) = 9)))) and (o = true)) or
  ((not ((to_rep(current_read__split_fields2) = 10) or
  ((to_rep(current_read__split_fields2) = 13) or
  ((to_rep(current_read__split_fields2) = 32) or
  (to_rep(current_read__split_fields2) = 9))))) and (o = false)))) or
  ((not (to_rep1(current_read__split_discrs2) = 0)) and (o = false))) and
  (((not (o = true)) and (result3 = true)) or ((o = true) and
  (result3 = false)))) and (not (result3 = true))) ->
  ((temp___10411 <  next_idx2) or ((next_idx2 = temp___10411) and
  (to_int(bool_eq(to_rep1(next_read__split_discrs2),
  0)) <  temp___10401)))))))))))))))))))
