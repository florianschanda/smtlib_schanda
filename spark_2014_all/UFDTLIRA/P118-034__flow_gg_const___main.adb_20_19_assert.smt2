(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun read_variable (us_private) Bool)
(declare-fun read_variable__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun simply_true (tuple0) Bool)
(declare-fun simply_true__function_guard (Bool tuple0) Bool)
(assert true)
(declare-fun both_are_true (tuple0) Bool)
(declare-fun both_are_true__function_guard (Bool tuple0) Bool)
(declare-const variable_constant Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const ordinary_constant Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (= (both_are_true us_void_param) true) (and (= variable_constant true) (= ordinary_constant true))) :pattern ((both_are_true us_void_param)))))
(assert (= ordinary_constant (simply_true Tuple0)))
(declare-const var us_private)
(declare-const main__variable_constant__assume Bool)
(declare-const main__ordinary_constant__assume Bool)
(assert (= main__variable_constant__assume (read_variable var)))
(assert (= main__variable_constant__assume variable_constant))
(assert (= main__ordinary_constant__assume (simply_true Tuple0)))
(assert (= main__ordinary_constant__assume ordinary_constant))
(assert (not (= (both_are_true Tuple0) true)))
(check-sat)
(exit)
