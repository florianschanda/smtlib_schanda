(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort tserial_numberB 0)
(declare-fun tserial_numberBqtint (tserial_numberB) Int)
(assert (forall ((i tserial_numberB)) (and (<= (- 2147483648) (tserial_numberBqtint i)) (<= (tserial_numberBqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (tserial_numberB tserial_numberB) Bool)
(declare-const dummy tserial_numberB)
(declare-datatypes () ((tserial_numberB__ref (mk_tserial_numberB__ref (tserial_numberB__content tserial_numberB)))))
(define-fun tserial_numberB__ref___projection ((a tserial_numberB__ref)) tserial_numberB (tserial_numberB__content a))
(declare-sort serial_number 0)
(declare-fun serial_numberqtint (serial_number) Int)
(assert (forall ((i serial_number)) (and (<= 1000 (serial_numberqtint i)) (<= (serial_numberqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1000 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (serial_number serial_number) Bool)
(declare-const dummy1 serial_number)
(declare-datatypes () ((serial_number__ref (mk_serial_number__ref (serial_number__content serial_number)))))
(define-fun serial_number__ref___projection ((a serial_number__ref)) serial_number (serial_number__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 1000 2147483647)) (in_range1 temp___expr_158)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const number Int)
(declare-const next_number Int)
(declare-const result Int)
(declare-const number1 Int)
(assert (in_range1 next_number))
(assert (=> (<= 1000 2147483647) (in_range1 number)))
(assert (= result number))
(assert (= number1 next_number))
(assert (not (in_range (+ next_number 1))))
(check-sat)
(exit)
