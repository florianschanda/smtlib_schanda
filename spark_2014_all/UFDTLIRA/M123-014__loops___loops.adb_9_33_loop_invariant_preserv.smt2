(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t1b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (t1b t1b) Bool)
(declare-const dummy1 t1b)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a t2b__ref)) integer (t2b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const count Int)
(declare-const i Int)
(declare-const temp___169 Int)
(declare-const temp___168 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result Int)
(declare-const count1 Int)
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const count2 Int)
(declare-const i2 Int)
(declare-const k Int)
(declare-const result2 Int)
(declare-const count3 Int)
(declare-const result3 Int)
(declare-const k1 Int)
(declare-const result4 Int)
(declare-const count4 Int)
(declare-const count5 Int)
(declare-const k2 Int)
(declare-const result5 Int)
(declare-const k3 Int)
(declare-const result6 Int)
(declare-const count6 Int)
(declare-const count7 Int)
(declare-const k4 Int)
(declare-const count8 Int)
(declare-const k5 Int)
(declare-const count9 Int)
(declare-const k6 Int)
(declare-const count10 Int)
(declare-const k7 Int)
(declare-const count11 Int)
(declare-const k8 Int)
(declare-const count12 Int)
(declare-const k9 Int)
(declare-const result7 Int)
(declare-const i3 Int)
(declare-const count13 Int)
(declare-const i4 Int)
(declare-const k10 Int)
(declare-const count14 Int)
(declare-const i5 Int)
(declare-const k11 Int)
(assert (= result count))
(assert (= count1 0))
(assert (in_range1 count1))
(assert (= result1 i))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 5))
(assert (= count2 (- i2 1)))
(assert (and (and (=> (<= 1 5) (in_range2 i2)) (=> (<= (- 2147483648) 2147483647) (in_range1 count2))) (and (<= 1 i2) (<= i2 5))))
(assert (= count2 result2))
(assert (= count3 0))
(assert (= k result3))
(assert (= k1 1))
(assert (<= 1 k1))
(assert (<= k1 i2))
(assert (and (= o (+ count3 1)) (in_range1 (+ count3 1))))
(assert (= count3 result4))
(assert (= count4 o))
(assert (= count5 k2))
(assert (and (and (=> (<= 1 i2) (dynamic_property 1 i2 k2)) (=> (<= (- 2147483648) 2147483647) (in_range1 count5))) (and (<= 1 k2) (<= k2 i2))))
(assert (not (= k2 i2)))
(assert (= k2 result5))
(assert (= k3 (+ k2 1)))
(assert (and (= o1 (+ count5 1)) (in_range1 (+ count5 1))))
(assert (= result6 count5))
(assert (= count6 o1))
(assert (not (= count6 k3)))
(check-sat)
(exit)
