(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort myp 0)
(declare-fun mypqtint (myp) Int)
(assert (forall ((i myp)) (and (<= 1 (mypqtint i)) (<= (mypqtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (myp myp) Bool)
(declare-const dummy myp)
(declare-datatypes () ((myp__ref (mk_myp__ref (myp__content myp)))))
(define-fun myp__ref___projection ((a myp__ref)) myp (myp__content a))
(define-fun to_rep ((x myp)) Int (mypqtint x))
(declare-fun of_rep (Int) myp)
(assert (forall ((x myp)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x myp)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__bt__o__t__f1 myp) (rec__bt__o__t__f2 myp)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) myp (rec__bt__o__t__f1 a))
(define-fun us_split_fields_F2__projection ((a us_split_fields)) myp (rec__bt__o__t__f2 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__bt__o__t__f1 (us_split_fields1 a))) (to_rep (rec__bt__o__t__f1 (us_split_fields1 b)))) (= (to_rep (rec__bt__o__t__f2 (us_split_fields1 a))) (to_rep (rec__bt__o__t__f2 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const bt__o__t__f1__first__bit Int)
(declare-const bt__o__t__f1__last__bit Int)
(declare-const bt__o__t__f1__position Int)
(assert (<= 0 bt__o__t__f1__first__bit))
(assert (< bt__o__t__f1__first__bit bt__o__t__f1__last__bit))
(assert (<= 0 bt__o__t__f1__position))
(declare-const bt__o__t__f2__first__bit Int)
(declare-const bt__o__t__f2__last__bit Int)
(declare-const bt__o__t__f2__position Int)
(assert (<= 0 bt__o__t__f2__first__bit))
(assert (< bt__o__t__f2__first__bit bt__o__t__f2__last__bit))
(assert (<= 0 bt__o__t__f2__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-fun sf (us_rep) Int)
(declare-fun sf__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 1 10)) (in_range1 temp___expr_158)))
(assert (forall ((s us_rep)) (! (dynamic_invariant (sf s) true false true true) :pattern ((sf s)))))
(declare-datatypes () ((os__ref (mk_os__ref (os__content us_rep)))))
(define-fun os__ref___projection ((a os__ref)) us_rep (os__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__f__r1__f1 us_rep)))))
(define-fun us_split_fields_F1__2__projection ((a us_split_fields2)) us_rep (rec__f__r1__f1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (bool_eq (rec__f__r1__f1 (us_split_fields3 a)) (rec__f__r1__f1 (us_split_fields3 b))) true) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const f__r1__f1__first__bit Int)
(declare-const f__r1__f1__last__bit Int)
(declare-const f__r1__f1__position Int)
(assert (<= 0 f__r1__f1__first__bit))
(assert (< f__r1__f1__first__bit f__r1__f1__last__bit))
(assert (<= 0 f__r1__f1__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((r1__ref (mk_r1__ref (r1__content us_rep1)))))
(define-fun r1__ref___projection ((a r1__ref)) us_rep1 (r1__content a))
(declare-const x us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const y Int)
(declare-const f__v__result Bool)
(declare-const o Int)
(declare-const result Int)
(declare-const y1 Int)
(declare-const result1 Bool)
(declare-const f__v__result1 Bool)
(declare-const f__v__result2 Bool)
(declare-const f__v__result3 Bool)
(declare-const y2 Int)
(declare-const f__v__result4 Bool)
(declare-const y3 Int)
(declare-const f__v__result5 Bool)
(declare-const result2 Bool)
(assert (=> (<= 1 10) (in_range1 y)))
(assert (and (= o (sf (rec__f__r1__f1 (us_split_fields3 x)))) (in_range1 o)))
(assert (= result y))
(assert (= y1 o))
(assert (= f__v__result1 f__v__result2))
(assert (= f__v__result3 f__v__result1))
(assert (= result1 f__v__result))
(assert (= f__v__result1 (ite (= y1 2) true false)))
(assert (= (mk_bool__ref f__v__result4) (mk_bool__ref f__v__result2)))
(assert (= y2 y1))
(assert (= f__v__result5 f__v__result3))
(assert (= y3 y1))
(assert (= result2 f__v__result4))
(assert (= (sf (rec__f__r1__f1 (us_split_fields3 x))) 2))
(assert (not (= f__v__result4 true)))
(check-sat)
(exit)
