(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort barrier_limit 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (barrier_limit barrier_limit) Bool)
(declare-const dummy barrier_limit)
(declare-datatypes () ((barrier_limit__ref (mk_barrier_limit__ref (barrier_limit__content barrier_limit)))))
(define-fun barrier_limit__ref___projection ((a barrier_limit__ref)) barrier_limit (barrier_limit__content a))
(declare-fun to_rep (barrier_limit) Int)
(declare-fun of_rep (Int) barrier_limit)
(assert (forall ((x barrier_limit)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x barrier_limit)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__synchronous_barriers__synchronous_barrier__release_threshold barrier_limit)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) barrier_limit (rec__synchronous_barriers__synchronous_barrier__release_threshold a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const synchronous_barriers__synchronous_barrier__release_threshold__first__bit Int)
(declare-const synchronous_barriers__synchronous_barrier__release_threshold__last__bit Int)
(declare-const synchronous_barriers__synchronous_barrier__release_threshold__position Int)
(assert (<= 0 synchronous_barriers__synchronous_barrier__release_threshold__first__bit))
(assert (< synchronous_barriers__synchronous_barrier__release_threshold__first__bit synchronous_barriers__synchronous_barrier__release_threshold__last__bit))
(assert (<= 0 synchronous_barriers__synchronous_barrier__release_threshold__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-datatypes () ((synchronous_barrier__ref (mk_synchronous_barrier__ref (synchronous_barrier__content us_rep)))))
(define-fun synchronous_barrier__ref___projection ((a synchronous_barrier__ref)) us_rep (synchronous_barrier__content a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs2 us_split_discrs)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_discrs (us_split_discrs2 a))
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)))
(define-fun in_range1 ((rec__synchronous_barriers__synchronous_barrier__release_threshold1 Int) (a us_rep)) Bool (= rec__synchronous_barriers__synchronous_barrier__release_threshold1 (to_rep (rec__synchronous_barriers__synchronous_barrier__release_threshold (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const synchronous_barriers__synchronous_barrier__release_threshold__first__bit1 Int)
(declare-const synchronous_barriers__synchronous_barrier__release_threshold__last__bit1 Int)
(declare-const synchronous_barriers__synchronous_barrier__release_threshold__position1 Int)
(assert (<= 0 synchronous_barriers__synchronous_barrier__release_threshold__first__bit1))
(assert (< synchronous_barriers__synchronous_barrier__release_threshold__first__bit1 synchronous_barriers__synchronous_barrier__release_threshold__last__bit1))
(assert (<= 0 synchronous_barriers__synchronous_barrier__release_threshold__position1))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-datatypes () ((tTsbSP__ref (mk_tTsbSP__ref (tTsbSP__content us_rep1)))))
(define-fun tTsbSP__ref___projection ((a tTsbSP__ref)) us_rep1 (tTsbSP__content a))
(declare-const sb__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_171 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool)) Bool (=> (or (= temp___is_init_168 true) (<= 1 2147483647)) (in_range temp___expr_171)))
(assert (not (in_range 1)))
(check-sat)
(exit)
