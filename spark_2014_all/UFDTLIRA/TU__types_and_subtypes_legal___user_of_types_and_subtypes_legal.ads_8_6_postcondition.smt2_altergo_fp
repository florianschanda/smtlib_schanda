(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type node__ref = { node__content : us_rep
}

function node__ref___projection(a: node__ref) : us_rep = (a).node__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq(a, b)]. (user_eq(a, b) = oeq(a,
  b)))

logic get_data : us_rep -> int

logic get_data__function_guard : int, us_rep -> prop

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

axiom get_data__post_axiom :
  (forall n:us_rep [get_data(n)]. in_range(get_data(n)))

logic get_next : us_rep -> us_rep

logic get_next__function_guard : us_rep, us_rep -> prop

axiom get_next__post_axiom : true

logic n : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall x:us_rep. forall y:us_rep [oeq(x, y)]. ((oeq(x, y) = true) <->
  (get_data(x) = get_data(y))))

 (* File "user_of_types_and_subtypes_legal.ads", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall user_of_types_and_subtypes_legal__same_as_next__result:bool.
  forall o:us_rep. forall o1:int. forall o2:int. forall o3:bool.
  forall result:bool.
  forall user_of_types_and_subtypes_legal__same_as_next__result1:bool.
  forall user_of_types_and_subtypes_legal__same_as_next__result2:bool.
  forall user_of_types_and_subtypes_legal__same_as_next__result3:bool.
  forall user_of_types_and_subtypes_legal__same_as_next__result4:bool.
  forall user_of_types_and_subtypes_legal__same_as_next__result5:bool.
  (forall result1:bool.
  ((((((user_of_types_and_subtypes_legal__same_as_next__result1 = user_of_types_and_subtypes_legal__same_as_next__result2) and
  (user_of_types_and_subtypes_legal__same_as_next__result3 = user_of_types_and_subtypes_legal__same_as_next__result1)) and
  ((((o = get_next(n)) and ((o1 = get_data(o)) and in_range(o1))) and
  (((o2 = get_data(n)) and in_range(o2)) and (((o2 = o1) and (o3 = true)) or
  ((not (o2 = o1)) and (o3 = false))))) and
  ((result = user_of_types_and_subtypes_legal__same_as_next__result) and
  (user_of_types_and_subtypes_legal__same_as_next__result1 = o3)))) and
  ((user_of_types_and_subtypes_legal__same_as_next__result4 = user_of_types_and_subtypes_legal__same_as_next__result2) and
  (user_of_types_and_subtypes_legal__same_as_next__result5 = user_of_types_and_subtypes_legal__same_as_next__result3))) and
  (result1 = user_of_types_and_subtypes_legal__same_as_next__result4)) ->
  ((not (get_data(n) = get_data(get_next(n)))) ->
  (not (user_of_types_and_subtypes_legal__same_as_next__result4 = true))))))
