(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type positive

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> integer

logic set : map, int, int, integer -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:integer [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:integer [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq3 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def2 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq3(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  (((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) and
  (to_rep1(get(a, temp___idx_154, temp___idx_155)) = to_rep1(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155))))) or
  (not (((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))))))) ->
  (bool_eq3(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep1(get(a, temp___idx_154, temp___idx_155)) = to_rep1(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155)))))))) -> (bool_eq3(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq3(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep1(get(a, temp___idx_154, temp___idx_155)) = to_rep1(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type t1

logic first1 : t1 -> integer

logic last1 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first1(mk1(f, l))) = f) and (to_rep1(last1(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : map; rt : t; rt_2 : t1
}

function to_array(a: us_t) : map = (a).elts

function of_array(a: map, f: int, l: int, f2: int, l2: int) : us_t = { elts =
  a; rt = mk(f, l); rt_2 = mk1(f2, l2) }

function first2(a: us_t) : int = to_rep1(first((a).rt))

function last2(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first2(a) <= last2(a)) ->
  (length(a) = ((last2(a) - first2(a)) + 1))) and
  ((not (first2(a) <= last2(a))) -> (length(a) = 0))))

function first_2(a: us_t) : int = to_rep1(first1((a).rt_2))

function last_2(a: us_t) : int = to_rep1(last1((a).rt_2))

logic length_2 : us_t -> int

axiom length_2_def :
  (forall a:us_t [length_2(a)]. (((first_2(a) <= last_2(a)) ->
  (length_2(a) = ((last_2(a) - first_2(a)) + 1))) and
  ((not (first_2(a) <= last_2(a))) -> (length_2(a) = 0))))

predicate dynamic_property2(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property(range_first1, range_last1, f1, l1) and
  dynamic_property1(range_first2, range_last2, f2, l2))

logic value__size : int

logic object__size : map -> int

logic value__component__size : int

logic object__component__size : map -> int

logic value__alignment : int

logic object__alignment : map -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:map. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:map. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom : (forall a:map. (0 <= object__alignment(a)))

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), to_rep1(first1((x).rt_2)),
  to_rep1(last1((x).rt_2)), (y).elts, to_rep1(first((y).rt)),
  to_rep1(last((y).rt)), to_rep1(first1((y).rt_2)), to_rep1(last1((y).rt_2)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : map

logic dummy3 : t

logic dummy4 : t1

type t_array__ref = { t_array__content : us_t
}

function t_array__ref___projection(a: t_array__ref) : us_t =
  (a).t_array__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy5 : integer

type t1s__ref = { t1s__content : integer
}

function t1s__ref___projection(a: t1s__ref) : integer = (a).t1s__content

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy6 : integer

type t2s__ref = { t2s__content : integer
}

function t2s__ref___projection(a: t2s__ref) : integer = (a).t2s__content

type t2

logic first3 : t2 -> integer

logic last3 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first3(mk2(f, l))) = f) and (to_rep1(last3(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type t3

logic first4 : t3 -> integer

logic last4 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk3(f, l))) = f) and (to_rep1(last4(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t1 = { elts1 : map; rt1 : t2; rt_21 : t3
}

function to_array1(a: us_t1) : map = (a).elts1

function of_array1(a: map, f: int, l: int, f2: int, l2: int) : us_t1 = {
  elts1 = a; rt1 = mk2(f, l); rt_21 = mk3(f2, l2) }

function first5(a: us_t1) : int = to_rep1(first3((a).rt1))

function last5(a: us_t1) : int = to_rep1(last3((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first5(a) <= last5(a)) ->
  (length1(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length1(a) = 0))))

function first_21(a: us_t1) : int = to_rep1(first4((a).rt_21))

function last_21(a: us_t1) : int = to_rep1(last4((a).rt_21))

logic length_21 : us_t1 -> int

axiom length_2_def1 :
  (forall a:us_t1 [length_21(a)]. (((first_21(a) <= last_21(a)) ->
  (length_21(a) = ((last_21(a) - first_21(a)) + 1))) and
  ((not (first_21(a) <= last_21(a))) -> (length_21(a) = 0))))

predicate dynamic_property7(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property5(range_first1, range_last1, f1, l1) and
  dynamic_property6(range_first2, range_last2, f2, l2))

logic value__size1 : int

logic object__size1 : map -> int

logic value__component__size1 : int

logic object__component__size1 : map -> int

logic value__alignment1 : int

logic object__alignment1 : map -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:map. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:map. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 : (forall a:map. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq3((x).elts1,
  to_rep1(first3((x).rt1)), to_rep1(last3((x).rt1)),
  to_rep1(first4((x).rt_21)), to_rep1(last4((x).rt_21)), (y).elts1,
  to_rep1(first3((y).rt1)), to_rep1(last3((y).rt1)),
  to_rep1(first4((y).rt_21)), to_rep1(last4((y).rt_21)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy7 : map

logic dummy8 : t2

logic dummy9 : t3

type t3s__ref = { t3s__content : us_t1
}

function t3s__ref___projection(a: t3s__ref) : us_t1 = (a).t3s__content

type us_split_discrs = { rec__discr__t_record__row_first : positive;
rec__discr__t_record__row_last : positive; rec__discr__t_record__col_first :
positive; rec__discr__t_record__col_last : positive
}

function us_split_discrs___projection(a: us_split_discrs) : positive =
  (a).rec__discr__t_record__row_first

function us_split_discrs___2__projection(a: us_split_discrs) : positive =
  (a).rec__discr__t_record__row_last

function us_split_discrs___3__projection(a: us_split_discrs) : positive =
  (a).rec__discr__t_record__col_first

function us_split_discrs___4__projection(a: us_split_discrs) : positive =
  (a).rec__discr__t_record__col_last

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__discr__t_record__data : us_t1
}

function us_split_fields_Data__projection(a: us_split_fields) : us_t1 =
  (a).rec__discr__t_record__data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  (((((((to_rep(((a).us_split_discrs1).rec__discr__t_record__row_first) = to_rep(((b).us_split_discrs1).rec__discr__t_record__row_first)) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__row_last) = to_rep(((b).us_split_discrs1).rec__discr__t_record__row_last))) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__col_first) = to_rep(((b).us_split_discrs1).rec__discr__t_record__col_first))) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__col_last) = to_rep(((b).us_split_discrs1).rec__discr__t_record__col_last))) and
  (bool_eq7(((a).us_split_fields1).rec__discr__t_record__data,
  ((b).us_split_fields1).rec__discr__t_record__data) = true)) -> (bool_eq8(a,
  b) = true)) and
  ((not (((((to_rep(((a).us_split_discrs1).rec__discr__t_record__row_first) = to_rep(((b).us_split_discrs1).rec__discr__t_record__row_first)) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__row_last) = to_rep(((b).us_split_discrs1).rec__discr__t_record__row_last))) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__col_first) = to_rep(((b).us_split_discrs1).rec__discr__t_record__col_first))) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__col_last) = to_rep(((b).us_split_discrs1).rec__discr__t_record__col_last))) and
  (bool_eq7(((a).us_split_fields1).rec__discr__t_record__data,
  ((b).us_split_fields1).rec__discr__t_record__data) = true))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:positive. forall a1:positive. forall a2:positive.
  forall a3:positive. forall a4:map. forall a5:t2. forall a6:t3.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__discr__t_record__row_first = a; rec__discr__t_record__row_last = a1;
  rec__discr__t_record__col_first = a2; rec__discr__t_record__col_last = a3
  }; us_split_fields1 = { rec__discr__t_record__data = { elts1 = a4; rt1 =
  a5; rt_21 = a6 } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:positive. forall a1:positive. forall a2:positive.
  forall a3:positive. forall a4:map. forall a5:t2. forall a6:t3.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__discr__t_record__row_first = a; rec__discr__t_record__row_last = a1;
  rec__discr__t_record__col_first = a2; rec__discr__t_record__col_last = a3
  }; us_split_fields1 = { rec__discr__t_record__data = { elts1 = a4; rt1 =
  a5; rt_21 = a6 } } })))

logic discr__t_record__row_first__first__bit : int

logic discr__t_record__row_first__last__bit : int

logic discr__t_record__row_first__position : int

axiom discr__t_record__row_first__first__bit_axiom :
  (0 <= discr__t_record__row_first__first__bit)

axiom discr__t_record__row_first__last__bit_axiom :
  (discr__t_record__row_first__first__bit <  discr__t_record__row_first__last__bit)

axiom discr__t_record__row_first__position_axiom :
  (0 <= discr__t_record__row_first__position)

logic discr__t_record__row_last__first__bit : int

logic discr__t_record__row_last__last__bit : int

logic discr__t_record__row_last__position : int

axiom discr__t_record__row_last__first__bit_axiom :
  (0 <= discr__t_record__row_last__first__bit)

axiom discr__t_record__row_last__last__bit_axiom :
  (discr__t_record__row_last__first__bit <  discr__t_record__row_last__last__bit)

axiom discr__t_record__row_last__position_axiom :
  (0 <= discr__t_record__row_last__position)

logic discr__t_record__col_first__first__bit : int

logic discr__t_record__col_first__last__bit : int

logic discr__t_record__col_first__position : int

axiom discr__t_record__col_first__first__bit_axiom :
  (0 <= discr__t_record__col_first__first__bit)

axiom discr__t_record__col_first__last__bit_axiom :
  (discr__t_record__col_first__first__bit <  discr__t_record__col_first__last__bit)

axiom discr__t_record__col_first__position_axiom :
  (0 <= discr__t_record__col_first__position)

logic discr__t_record__col_last__first__bit : int

logic discr__t_record__col_last__last__bit : int

logic discr__t_record__col_last__position : int

axiom discr__t_record__col_last__first__bit_axiom :
  (0 <= discr__t_record__col_last__first__bit)

axiom discr__t_record__col_last__last__bit_axiom :
  (discr__t_record__col_last__first__bit <  discr__t_record__col_last__last__bit)

axiom discr__t_record__col_last__position_axiom :
  (0 <= discr__t_record__col_last__position)

logic discr__t_record__data__first__bit : int

logic discr__t_record__data__last__bit : int

logic discr__t_record__data__position : int

axiom discr__t_record__data__first__bit_axiom :
  (0 <= discr__t_record__data__first__bit)

axiom discr__t_record__data__last__bit_axiom :
  (discr__t_record__data__first__bit <  discr__t_record__data__last__bit)

axiom discr__t_record__data__position_axiom :
  (0 <= discr__t_record__data__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy10 : positive

logic dummy11 : positive

logic dummy12 : positive

logic dummy13 : positive

logic dummy14 : map

logic dummy15 : t2

logic dummy16 : t3

type t_record__ref = { t_record__content : us_rep
}

function t_record__ref___projection(a: t_record__ref) : us_rep =
  (a).t_record__content

logic rec__ : positive

logic rec__1 : positive

logic rec__2 : positive

logic rec__3 : positive

logic rec__4 : map

logic rec__5 : t2

logic rec__6 : t3

logic attr__ATTRIBUTE_ADDRESS : int

logic data_copy__first : integer

logic data_copy__last : integer

logic data_copy__first_2 : integer

logic data_copy__last_2 : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "discr.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall data_copy:map. forall us:int. forall us1:int. forall us2:int.
  forall us3:int. forall result:map. forall data_copy1:map.
  (((dynamic_property7(to_rep(rec__), to_rep(rec__1),
  to_rep1(first3(rec__5)), to_rep1(last3(rec__5)), to_rep(rec__2),
  to_rep(rec__3), to_rep1(first4(rec__6)), to_rep1(last4(rec__6))) and
  ((to_rep1(first3(rec__5)) = to_rep(rec__)) and
  (to_rep1(last3(rec__5)) = to_rep(rec__1)))) and
  ((to_rep1(first4(rec__6)) = to_rep(rec__2)) and
  (to_rep1(last4(rec__6)) = to_rep(rec__3)))) -> (((us = to_rep(rec__3)) and
  in_range(to_rep(rec__3))) -> (((us1 = to_rep(rec__2)) and
  in_range(to_rep(rec__2))) -> (((us2 = to_rep(rec__1)) and
  in_range(to_rep(rec__1))) -> (((us3 = to_rep(rec__)) and
  in_range(to_rep(rec__))) -> ((((result = data_copy) and
  (data_copy1 = rec__4)) and
  ((to_rep1(data_copy__first) = to_rep1(first(mk(to_rep1(first3(rec__5)),
  to_rep1(last3(rec__5)))))) and
  ((to_rep1(data_copy__last) = to_rep1(last(mk(to_rep1(first3(rec__5)),
  to_rep1(last3(rec__5)))))) and
  ((to_rep1(data_copy__first_2) = to_rep1(first1(mk1(to_rep1(first4(rec__6)),
  to_rep1(last4(rec__6)))))) and
  (to_rep1(data_copy__last_2) = to_rep1(last1(mk1(to_rep1(first4(rec__6)),
  to_rep1(last4(rec__6)))))))))) -> (dynamic_property2(1, 2147483647,
  to_rep1(data_copy__first), to_rep1(data_copy__last), 1, 2147483647,
  to_rep1(data_copy__first_2), to_rep1(data_copy__last_2)) ->
  (bool_eq3(data_copy1, to_rep1(data_copy__first), to_rep1(data_copy__last),
  to_rep1(data_copy__first_2), to_rep1(data_copy__last_2), rec__4,
  to_rep1(first3(rec__5)), to_rep1(last3(rec__5)), to_rep1(first4(rec__6)),
  to_rep1(last4(rec__6))) = true)))))))))
