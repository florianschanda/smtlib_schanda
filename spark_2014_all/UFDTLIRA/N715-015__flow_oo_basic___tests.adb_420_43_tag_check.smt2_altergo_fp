(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic us_compatible_tags : int, int -> prop

axiom us_compatible_tags_refl :
  (forall tag:int. us_compatible_tags(tag, tag))

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)]. (bool_eq3(a,
  b) = true))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__size({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__alignment({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_private

logic dummy3 : int

type root_t__ref = { root_t__content : us_rep
}

function root_t__ref___projection(a: root_t__ref) : us_rep =
  (a).root_t__content

type us_split_fields2 = { rec__foo__widget_t__x : integer;
rec__foo__widget_t__y : integer; rec__ext__1 : us_private
}

function us_split_fields_X__projection(a: us_split_fields2) : integer =
  (a).rec__foo__widget_t__x

function us_split_fields_Y__projection(a: us_split_fields2) : integer =
  (a).rec__foo__widget_t__y

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, integer, us_private -> us_private

logic extract__x : us_private -> integer

axiom extract__x__conv :
  (forall x:integer. forall y:integer.
  (forall rec__ext__2:us_private. (extract__x(hide_ext__(x, y,
  rec__ext__2)) = x)))

logic extract__y : us_private -> integer

axiom extract__y__conv :
  (forall x:integer. forall y:integer.
  (forall rec__ext__2:us_private. (extract__y(hide_ext__(x, y,
  rec__ext__2)) = y)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__foo__widget_t__x,
  ((a).us_split_fields3).rec__foo__widget_t__y,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__foo__widget_t__x = extract__x(((r).us_split_fields1).rec__ext__);
  rec__foo__widget_t__y = extract__y(((r).us_split_fields1).rec__ext__);
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__foo__widget_t__x) = to_rep(((b).us_split_fields3).rec__foo__widget_t__x)) and
  (to_rep(((a).us_split_fields3).rec__foo__widget_t__y) = to_rep(((b).us_split_fields3).rec__foo__widget_t__y))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__foo__widget_t__x) = to_rep(((b).us_split_fields3).rec__foo__widget_t__x)) and
  (to_rep(((a).us_split_fields3).rec__foo__widget_t__y) = to_rep(((b).us_split_fields3).rec__foo__widget_t__y)))) ->
  (bool_eq4(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size1({ us_split_fields3 = { rec__foo__widget_t__x = a;
  rec__foo__widget_t__y = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment1({ us_split_fields3 = { rec__foo__widget_t__x = a;
  rec__foo__widget_t__y = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic foo__widget_t__x__first__bit : int

logic foo__widget_t__x__last__bit : int

logic foo__widget_t__x__position : int

axiom foo__widget_t__x__first__bit_axiom :
  (0 <= foo__widget_t__x__first__bit)

axiom foo__widget_t__x__last__bit_axiom :
  (foo__widget_t__x__first__bit <  foo__widget_t__x__last__bit)

axiom foo__widget_t__x__position_axiom : (0 <= foo__widget_t__x__position)

logic foo__widget_t__y__first__bit : int

logic foo__widget_t__y__last__bit : int

logic foo__widget_t__y__position : int

axiom foo__widget_t__y__first__bit_axiom :
  (0 <= foo__widget_t__y__first__bit)

axiom foo__widget_t__y__last__bit_axiom :
  (foo__widget_t__y__first__bit <  foo__widget_t__y__last__bit)

axiom foo__widget_t__y__position_axiom : (0 <= foo__widget_t__y__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : us_private

logic dummy7 : int

type widget_t__ref = { widget_t__content : us_rep1
}

function widget_t__ref___projection(a: widget_t__ref) : us_rep1 =
  (a).widget_t__content

logic hash__2 : us_rep1 -> int

logic hash__2__function_guard : int, us_rep1 -> prop

logic hash__21 : int, us_rep1 -> int

logic hash__2__function_guard1 : int, int, us_rep1 -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq5 : bool, bool -> bool

axiom bool_eq_def4 :
  (forall x:bool. forall y:bool [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

type us_split_fields4 = { rec__foo__nice_widget_t__round : bool;
rec__foo__widget_t__x1 : integer; rec__foo__widget_t__y1 : integer;
rec__ext__2 : us_private
}

function us_split_fields_Round__projection(a: us_split_fields4) : bool =
  (a).rec__foo__nice_widget_t__round

function us_split_fields_X__2__projection(a: us_split_fields4) : integer =
  (a).rec__foo__widget_t__x1

function us_split_fields_Y__2__projection(a: us_split_fields4) : integer =
  (a).rec__foo__widget_t__y1

function us_split_fields___3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag2 : int
}

function us_rep___5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___6__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : bool, integer, integer, us_private -> us_private

logic extract__round : us_private -> bool

axiom extract__round__conv :
  (forall round:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__3:us_private. (to_int(extract__round(hide_ext__1(round,
  x, y, rec__ext__3))) = to_int(round)))))

axiom extract__x__conv1 :
  (forall round:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__3:us_private. (extract__x(hide_ext__1(round, x, y,
  rec__ext__3)) = x))))

axiom extract__y__conv1 :
  (forall round:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__3:us_private. (extract__y(hide_ext__1(round, x, y,
  rec__ext__3)) = y))))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__foo__nice_widget_t__round,
  ((a).us_split_fields5).rec__foo__widget_t__x1,
  ((a).us_split_fields5).rec__foo__widget_t__y1,
  ((a).us_split_fields5).rec__ext__2) }; attr__tag = (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_fields5 = {
  rec__foo__nice_widget_t__round =
  extract__round(((r).us_split_fields1).rec__ext__); rec__foo__widget_t__x1 =
  extract__x(((r).us_split_fields1).rec__ext__); rec__foo__widget_t__y1 =
  extract__y(((r).us_split_fields1).rec__ext__); rec__ext__2 =
  extract__ext__1(((r).us_split_fields1).rec__ext__) }; attr__tag2 =
  (r).attr__tag }

logic bool_eq6 : us_rep2, us_rep2 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq6(a, b)].
  (((((((a).us_split_fields5).rec__foo__nice_widget_t__round = ((b).us_split_fields5).rec__foo__nice_widget_t__round) and
  (to_rep(((a).us_split_fields5).rec__foo__widget_t__x1) = to_rep(((b).us_split_fields5).rec__foo__widget_t__x1))) and
  (to_rep(((a).us_split_fields5).rec__foo__widget_t__y1) = to_rep(((b).us_split_fields5).rec__foo__widget_t__y1))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((((a).us_split_fields5).rec__foo__nice_widget_t__round = ((b).us_split_fields5).rec__foo__nice_widget_t__round) and
  (to_rep(((a).us_split_fields5).rec__foo__widget_t__x1) = to_rep(((b).us_split_fields5).rec__foo__widget_t__x1))) and
  (to_rep(((a).us_split_fields5).rec__foo__widget_t__y1) = to_rep(((b).us_split_fields5).rec__foo__widget_t__y1)))) ->
  (bool_eq6(a, b) = false))))

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:us_private.
  forall a4:int. (0 <= object__size2({ us_split_fields5 = {
  rec__foo__nice_widget_t__round = a; rec__foo__widget_t__x1 = a1;
  rec__foo__widget_t__y1 = a2; rec__ext__2 = a3 }; attr__tag2 = a4 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:us_private.
  forall a4:int. (0 <= object__alignment2({ us_split_fields5 = {
  rec__foo__nice_widget_t__round = a; rec__foo__widget_t__x1 = a1;
  rec__foo__widget_t__y1 = a2; rec__ext__2 = a3 }; attr__tag2 = a4 })))

logic foo__nice_widget_t__round__first__bit : int

logic foo__nice_widget_t__round__last__bit : int

logic foo__nice_widget_t__round__position : int

axiom foo__nice_widget_t__round__first__bit_axiom :
  (0 <= foo__nice_widget_t__round__first__bit)

axiom foo__nice_widget_t__round__last__bit_axiom :
  (foo__nice_widget_t__round__first__bit <  foo__nice_widget_t__round__last__bit)

axiom foo__nice_widget_t__round__position_axiom :
  (0 <= foo__nice_widget_t__round__position)

logic foo__widget_t__x__first__bit1 : int

logic foo__widget_t__x__last__bit1 : int

logic foo__widget_t__x__position1 : int

axiom foo__widget_t__x__first__bit_axiom1 :
  (0 <= foo__widget_t__x__first__bit1)

axiom foo__widget_t__x__last__bit_axiom1 :
  (foo__widget_t__x__first__bit1 <  foo__widget_t__x__last__bit1)

axiom foo__widget_t__x__position_axiom1 : (0 <= foo__widget_t__x__position1)

logic foo__widget_t__y__first__bit1 : int

logic foo__widget_t__y__last__bit1 : int

logic foo__widget_t__y__position1 : int

axiom foo__widget_t__y__first__bit_axiom1 :
  (0 <= foo__widget_t__y__first__bit1)

axiom foo__widget_t__y__last__bit_axiom1 :
  (foo__widget_t__y__first__bit1 <  foo__widget_t__y__last__bit1)

axiom foo__widget_t__y__position_axiom1 : (0 <= foo__widget_t__y__position1)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy8 : bool

logic dummy9 : integer

logic dummy10 : integer

logic dummy11 : us_private

logic dummy12 : int

type nice_widget_t__ref = { nice_widget_t__content : us_rep2
}

function nice_widget_t__ref___projection(a: nice_widget_t__ref) : us_rep2 =
  (a).nice_widget_t__content

logic hash__3 : us_rep2 -> int

logic hash__3__function_guard : int, us_rep2 -> prop

logic hash__31 : int, us_rep2 -> int

logic hash__3__function_guard1 : int, int, us_rep2 -> prop

type us_split_fields6 = { rec__foo__magic_widget_t__magic : bool;
rec__foo__widget_t__x2 : integer; rec__foo__widget_t__y2 : integer;
rec__ext__3 : us_private
}

function us_split_fields_Magic__projection(a: us_split_fields6) : bool =
  (a).rec__foo__magic_widget_t__magic

function us_split_fields_X__3__projection(a: us_split_fields6) : integer =
  (a).rec__foo__widget_t__x2

function us_split_fields_Y__3__projection(a: us_split_fields6) : integer =
  (a).rec__foo__widget_t__y2

function us_split_fields___4__projection(a: us_split_fields6) : us_private =
  (a).rec__ext__3

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6; attr__tag3 : int
}

function us_rep___7__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function us_rep___8__projection(a: us_rep3) : int = (a).attr__tag3

logic hide_ext__2 : bool, integer, integer, us_private -> us_private

logic extract__magic : us_private -> bool

axiom extract__magic__conv :
  (forall magic:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__4:us_private. (to_int(extract__magic(hide_ext__2(magic,
  x, y, rec__ext__4))) = to_int(magic)))))

axiom extract__x__conv2 :
  (forall magic:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__4:us_private. (extract__x(hide_ext__2(magic, x, y,
  rec__ext__4)) = x))))

axiom extract__y__conv2 :
  (forall magic:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__4:us_private. (extract__y(hide_ext__2(magic, x, y,
  rec__ext__4)) = y))))

logic extract__ext__2 : us_private -> us_private

function to_base2(a: us_rep3) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__2(((a).us_split_fields7).rec__foo__magic_widget_t__magic,
  ((a).us_split_fields7).rec__foo__widget_t__x2,
  ((a).us_split_fields7).rec__foo__widget_t__y2,
  ((a).us_split_fields7).rec__ext__3) }; attr__tag = (a).attr__tag3 }

function of_base2(r: us_rep) : us_rep3 = { us_split_fields7 = {
  rec__foo__magic_widget_t__magic =
  extract__magic(((r).us_split_fields1).rec__ext__); rec__foo__widget_t__x2 =
  extract__x(((r).us_split_fields1).rec__ext__); rec__foo__widget_t__y2 =
  extract__y(((r).us_split_fields1).rec__ext__); rec__ext__3 =
  extract__ext__2(((r).us_split_fields1).rec__ext__) }; attr__tag3 =
  (r).attr__tag }

logic bool_eq7 : us_rep3, us_rep3 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq7(a, b)].
  (((((((a).us_split_fields7).rec__foo__magic_widget_t__magic = ((b).us_split_fields7).rec__foo__magic_widget_t__magic) and
  (to_rep(((a).us_split_fields7).rec__foo__widget_t__x2) = to_rep(((b).us_split_fields7).rec__foo__widget_t__x2))) and
  (to_rep(((a).us_split_fields7).rec__foo__widget_t__y2) = to_rep(((b).us_split_fields7).rec__foo__widget_t__y2))) ->
  (bool_eq7(a, b) = true)) and
  ((not (((((a).us_split_fields7).rec__foo__magic_widget_t__magic = ((b).us_split_fields7).rec__foo__magic_widget_t__magic) and
  (to_rep(((a).us_split_fields7).rec__foo__widget_t__x2) = to_rep(((b).us_split_fields7).rec__foo__widget_t__x2))) and
  (to_rep(((a).us_split_fields7).rec__foo__widget_t__y2) = to_rep(((b).us_split_fields7).rec__foo__widget_t__y2)))) ->
  (bool_eq7(a, b) = false))))

logic us_tag3 : int

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:us_private.
  forall a4:int. (0 <= object__size3({ us_split_fields7 = {
  rec__foo__magic_widget_t__magic = a; rec__foo__widget_t__x2 = a1;
  rec__foo__widget_t__y2 = a2; rec__ext__3 = a3 }; attr__tag3 = a4 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:us_private.
  forall a4:int. (0 <= object__alignment3({ us_split_fields7 = {
  rec__foo__magic_widget_t__magic = a; rec__foo__widget_t__x2 = a1;
  rec__foo__widget_t__y2 = a2; rec__ext__3 = a3 }; attr__tag3 = a4 })))

logic foo__magic_widget_t__magic__first__bit : int

logic foo__magic_widget_t__magic__last__bit : int

logic foo__magic_widget_t__magic__position : int

axiom foo__magic_widget_t__magic__first__bit_axiom :
  (0 <= foo__magic_widget_t__magic__first__bit)

axiom foo__magic_widget_t__magic__last__bit_axiom :
  (foo__magic_widget_t__magic__first__bit <  foo__magic_widget_t__magic__last__bit)

axiom foo__magic_widget_t__magic__position_axiom :
  (0 <= foo__magic_widget_t__magic__position)

logic foo__widget_t__x__first__bit2 : int

logic foo__widget_t__x__last__bit2 : int

logic foo__widget_t__x__position2 : int

axiom foo__widget_t__x__first__bit_axiom2 :
  (0 <= foo__widget_t__x__first__bit2)

axiom foo__widget_t__x__last__bit_axiom2 :
  (foo__widget_t__x__first__bit2 <  foo__widget_t__x__last__bit2)

axiom foo__widget_t__x__position_axiom2 : (0 <= foo__widget_t__x__position2)

logic foo__widget_t__y__first__bit2 : int

logic foo__widget_t__y__last__bit2 : int

logic foo__widget_t__y__position2 : int

axiom foo__widget_t__y__first__bit_axiom2 :
  (0 <= foo__widget_t__y__first__bit2)

axiom foo__widget_t__y__last__bit_axiom2 :
  (foo__widget_t__y__first__bit2 <  foo__widget_t__y__last__bit2)

axiom foo__widget_t__y__position_axiom2 : (0 <= foo__widget_t__y__position2)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy13 : bool

logic dummy14 : integer

logic dummy15 : integer

logic dummy16 : us_private

logic dummy17 : int

type magic_widget_t__ref = { magic_widget_t__content : us_rep3
}

function magic_widget_t__ref___projection(a: magic_widget_t__ref) : us_rep3 =
  (a).magic_widget_t__content

logic hash__4 : us_rep3 -> int

logic hash__4__function_guard : int, us_rep3 -> prop

logic hash__41 : int, us_rep3 -> int

logic hash__4__function_guard1 : int, int, us_rep3 -> prop

axiom hash__2__post_axiom :
  (forall obj:integer. forall obj1:integer. forall obj2:us_private.
  forall obj3:int [hash__2({ us_split_fields3 = { rec__foo__widget_t__x =
  obj; rec__foo__widget_t__y = obj1; rec__ext__1 = obj2 }; attr__tag1 = obj3
  })]. in_range1(hash__2({ us_split_fields3 = { rec__foo__widget_t__x = obj;
  rec__foo__widget_t__y = obj1; rec__ext__1 = obj2 }; attr__tag1 = obj3 })))

axiom hash__2__post__dispatch_axiom :
  (forall attr__tag4:int.
  (forall obj:integer. forall obj1:integer. forall obj2:us_private.
  forall obj3:int [hash__21(attr__tag4, { us_split_fields3 = {
  rec__foo__widget_t__x = obj; rec__foo__widget_t__y = obj1; rec__ext__1 =
  obj2 }; attr__tag1 = obj3 })]. in_range1(hash__21(attr__tag4, {
  us_split_fields3 = { rec__foo__widget_t__x = obj; rec__foo__widget_t__y =
  obj1; rec__ext__1 = obj2 }; attr__tag1 = obj3 }))))

axiom foo__widget_t__compat_axiom :
  (forall obj:integer. forall obj1:integer. forall obj2:us_private.
  forall obj3:int [hash__21(us_tag1, { us_split_fields3 = {
  rec__foo__widget_t__x = obj; rec__foo__widget_t__y = obj1; rec__ext__1 =
  obj2 }; attr__tag1 = obj3 })]. (hash__2({ us_split_fields3 = {
  rec__foo__widget_t__x = obj; rec__foo__widget_t__y = obj1; rec__ext__1 =
  obj2 }; attr__tag1 = obj3 }) = hash__21(us_tag1, { us_split_fields3 = {
  rec__foo__widget_t__x = obj; rec__foo__widget_t__y = obj1; rec__ext__1 =
  obj2 }; attr__tag1 = obj3 })))

axiom foo__nice_widget_t__compat_axiom :
  (forall obj:integer. forall obj1:integer. forall obj2:us_private.
  forall obj3:int [hash__21(us_tag2, { us_split_fields3 = {
  rec__foo__widget_t__x = obj; rec__foo__widget_t__y = obj1; rec__ext__1 =
  obj2 }; attr__tag1 = obj3 })]. (hash__3(of_base1({ us_split_fields1 = {
  rec__ext__ = hide_ext__(obj, obj1, obj2) }; attr__tag = obj3
  })) = hash__21(us_tag2, { us_split_fields3 = { rec__foo__widget_t__x = obj;
  rec__foo__widget_t__y = obj1; rec__ext__1 = obj2 }; attr__tag1 = obj3 })))

axiom foo__magic_widget_t__compat_axiom :
  (forall obj:integer. forall obj1:integer. forall obj2:us_private.
  forall obj3:int [hash__21(us_tag3, { us_split_fields3 = {
  rec__foo__widget_t__x = obj; rec__foo__widget_t__y = obj1; rec__ext__1 =
  obj2 }; attr__tag1 = obj3 })]. (hash__4(of_base2({ us_split_fields1 = {
  rec__ext__ = hide_ext__(obj, obj1, obj2) }; attr__tag = obj3
  })) = hash__21(us_tag3, { us_split_fields3 = { rec__foo__widget_t__x = obj;
  rec__foo__widget_t__y = obj1; rec__ext__1 = obj2 }; attr__tag1 = obj3 })))

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic x__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic y__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic z__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom hash__3__post_axiom :
  (forall obj:bool. forall obj1:integer. forall obj2:integer.
  forall obj3:us_private. forall obj4:int [hash__3({ us_split_fields5 = {
  rec__foo__nice_widget_t__round = obj; rec__foo__widget_t__x1 = obj1;
  rec__foo__widget_t__y1 = obj2; rec__ext__2 = obj3 }; attr__tag2 = obj4 })].
  in_range1(hash__3({ us_split_fields5 = { rec__foo__nice_widget_t__round =
  obj; rec__foo__widget_t__x1 = obj1; rec__foo__widget_t__y1 = obj2;
  rec__ext__2 = obj3 }; attr__tag2 = obj4 })))

axiom hash__3__post__dispatch_axiom :
  (forall attr__tag4:int.
  (forall obj:bool. forall obj1:integer. forall obj2:integer.
  forall obj3:us_private. forall obj4:int [hash__31(attr__tag4, {
  us_split_fields5 = { rec__foo__nice_widget_t__round = obj;
  rec__foo__widget_t__x1 = obj1; rec__foo__widget_t__y1 = obj2; rec__ext__2 =
  obj3 }; attr__tag2 = obj4 })]. in_range1(hash__31(attr__tag4, {
  us_split_fields5 = { rec__foo__nice_widget_t__round = obj;
  rec__foo__widget_t__x1 = obj1; rec__foo__widget_t__y1 = obj2; rec__ext__2 =
  obj3 }; attr__tag2 = obj4 }))))

axiom foo__nice_widget_t__compat_axiom1 :
  (forall obj:bool. forall obj1:integer. forall obj2:integer.
  forall obj3:us_private. forall obj4:int [hash__31(us_tag2, {
  us_split_fields5 = { rec__foo__nice_widget_t__round = obj;
  rec__foo__widget_t__x1 = obj1; rec__foo__widget_t__y1 = obj2; rec__ext__2 =
  obj3 }; attr__tag2 = obj4 })]. (hash__3({ us_split_fields5 = {
  rec__foo__nice_widget_t__round = obj; rec__foo__widget_t__x1 = obj1;
  rec__foo__widget_t__y1 = obj2; rec__ext__2 = obj3 }; attr__tag2 = obj4
  }) = hash__31(us_tag2, { us_split_fields5 = {
  rec__foo__nice_widget_t__round = obj; rec__foo__widget_t__x1 = obj1;
  rec__foo__widget_t__y1 = obj2; rec__ext__2 = obj3 }; attr__tag2 = obj4 })))

axiom hash__4__post_axiom :
  (forall obj:bool. forall obj1:integer. forall obj2:integer.
  forall obj3:us_private. forall obj4:int [hash__4({ us_split_fields7 = {
  rec__foo__magic_widget_t__magic = obj; rec__foo__widget_t__x2 = obj1;
  rec__foo__widget_t__y2 = obj2; rec__ext__3 = obj3 }; attr__tag3 = obj4 })].
  in_range1(hash__4({ us_split_fields7 = { rec__foo__magic_widget_t__magic =
  obj; rec__foo__widget_t__x2 = obj1; rec__foo__widget_t__y2 = obj2;
  rec__ext__3 = obj3 }; attr__tag3 = obj4 })))

axiom hash__4__post__dispatch_axiom :
  (forall attr__tag4:int.
  (forall obj:bool. forall obj1:integer. forall obj2:integer.
  forall obj3:us_private. forall obj4:int [hash__41(attr__tag4, {
  us_split_fields7 = { rec__foo__magic_widget_t__magic = obj;
  rec__foo__widget_t__x2 = obj1; rec__foo__widget_t__y2 = obj2; rec__ext__3 =
  obj3 }; attr__tag3 = obj4 })]. in_range1(hash__41(attr__tag4, {
  us_split_fields7 = { rec__foo__magic_widget_t__magic = obj;
  rec__foo__widget_t__x2 = obj1; rec__foo__widget_t__y2 = obj2; rec__ext__3 =
  obj3 }; attr__tag3 = obj4 }))))

axiom foo__magic_widget_t__compat_axiom1 :
  (forall obj:bool. forall obj1:integer. forall obj2:integer.
  forall obj3:us_private. forall obj4:int [hash__41(us_tag3, {
  us_split_fields7 = { rec__foo__magic_widget_t__magic = obj;
  rec__foo__widget_t__x2 = obj1; rec__foo__widget_t__y2 = obj2; rec__ext__3 =
  obj3 }; attr__tag3 = obj4 })]. (hash__4({ us_split_fields7 = {
  rec__foo__magic_widget_t__magic = obj; rec__foo__widget_t__x2 = obj1;
  rec__foo__widget_t__y2 = obj2; rec__ext__3 = obj3 }; attr__tag3 = obj4
  }) = hash__41(us_tag3, { us_split_fields7 = {
  rec__foo__magic_widget_t__magic = obj; rec__foo__widget_t__x2 = obj1;
  rec__foo__widget_t__y2 = obj2; rec__ext__3 = obj3 }; attr__tag3 = obj4 })))

 (* File "foo.ads", line 39, characters 0-0 *)
goal WP_parameter_def :
  (forall n:int. forall m:int. forall x__split_fields:bool.
  forall x__split_fields1:integer. forall x__split_fields2:integer.
  forall x__split_fields3:us_private. forall y__split_fields:integer.
  forall y__split_fields1:integer. forall y__split_fields2:us_private.
  forall o:integer. forall o1:integer. forall o2:bool. forall o3:integer.
  forall o4:integer. forall o5:us_private.
  forall tests__test_20__x__assume:bool.
  forall tests__test_20__x__assume1:integer.
  forall tests__test_20__x__assume2:integer.
  forall tests__test_20__x__assume3:us_private.
  forall tests__test_20__x__assume4:int. forall result:bool.
  forall result1:integer. forall result2:integer. forall result3:us_private.
  forall x__split_fields4:bool. forall x__split_fields5:integer.
  forall x__split_fields6:integer. forall x__split_fields7:us_private.
  forall result4:integer. forall result5:integer. forall result6:us_private.
  forall y__split_fields3:integer. forall y__split_fields4:integer.
  forall y__split_fields5:us_private. (in_range(a) -> (((0 <= 2147483647) ->
  in_range1(n)) -> (((0 <= 2147483647) -> in_range1(m)) ->
  (((((to_rep(o) = a) and ((to_rep(o1) = a) and ((b = o2) and ((o1 = o3) and
  ((o = o4) and (us_null_ext__ = o5)))))) and
  (((tests__test_20__x__assume = o2) and
  ((tests__test_20__x__assume1 = o3) and
  ((tests__test_20__x__assume2 = o4) and
  (tests__test_20__x__assume3 = o5)))) and
  (us_tag2 = tests__test_20__x__assume4))) and
  ((((result = x__split_fields) and ((result1 = x__split_fields1) and
  ((result2 = x__split_fields2) and (result3 = x__split_fields3)))) and
  ((tests__test_20__x__assume = x__split_fields4) and
  ((tests__test_20__x__assume1 = x__split_fields5) and
  ((tests__test_20__x__assume2 = x__split_fields6) and
  (tests__test_20__x__assume3 = x__split_fields7))))) and
  (x__attr__tag = us_tag2))) -> (((((result4 = y__split_fields) and
  ((result5 = y__split_fields1) and (result6 = y__split_fields2))) and ({
  rec__foo__widget_t__x = y__split_fields3; rec__foo__widget_t__y =
  y__split_fields4; rec__ext__1 = y__split_fields5 } = (of_base({
  us_split_fields1 = { rec__ext__ = hide_ext__1(x__split_fields4,
  x__split_fields5, x__split_fields6, x__split_fields7) }; attr__tag =
  x__attr__tag })).us_split_fields3)) and (y__attr__tag = (of_base({
  us_split_fields1 = { rec__ext__ = hide_ext__1(x__split_fields4,
  x__split_fields5, x__split_fields6, x__split_fields7) }; attr__tag =
  x__attr__tag })).attr__tag1)) -> us_compatible_tags(y__attr__tag,
  us_tag2)))))))
