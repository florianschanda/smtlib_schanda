(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__user_eq__nested__r1__a integer) (rec__user_eq__nested__r1__b integer)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) integer (rec__user_eq__nested__r1__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) integer (rec__user_eq__nested__r1__b a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__user_eq__nested__r1__a (us_split_fields1 a))) (to_rep (rec__user_eq__nested__r1__a (us_split_fields1 b)))) (= (to_rep (rec__user_eq__nested__r1__b (us_split_fields1 a))) (to_rep (rec__user_eq__nested__r1__b (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const user_eq__nested__r1__a__first__bit Int)
(declare-const user_eq__nested__r1__a__last__bit Int)
(declare-const user_eq__nested__r1__a__position Int)
(assert (<= 0 user_eq__nested__r1__a__first__bit))
(assert (< user_eq__nested__r1__a__first__bit user_eq__nested__r1__a__last__bit))
(assert (<= 0 user_eq__nested__r1__a__position))
(declare-const user_eq__nested__r1__b__first__bit Int)
(declare-const user_eq__nested__r1__b__last__bit Int)
(declare-const user_eq__nested__r1__b__position Int)
(assert (<= 0 user_eq__nested__r1__b__first__bit))
(assert (< user_eq__nested__r1__b__first__bit user_eq__nested__r1__b__last__bit))
(assert (<= 0 user_eq__nested__r1__b__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((r1__ref (mk_r1__ref (r1__content us_rep)))))
(define-fun r1__ref___projection ((a r1__ref)) us_rep (r1__content a))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const user_eq__nested__r1__a__first__bit1 Int)
(declare-const user_eq__nested__r1__a__last__bit1 Int)
(declare-const user_eq__nested__r1__a__position1 Int)
(assert (<= 0 user_eq__nested__r1__a__first__bit1))
(assert (< user_eq__nested__r1__a__first__bit1 user_eq__nested__r1__a__last__bit1))
(assert (<= 0 user_eq__nested__r1__a__position1))
(declare-const user_eq__nested__r1__b__first__bit1 Int)
(declare-const user_eq__nested__r1__b__last__bit1 Int)
(declare-const user_eq__nested__r1__b__position1 Int)
(assert (<= 0 user_eq__nested__r1__b__first__bit1))
(assert (< user_eq__nested__r1__b__first__bit1 user_eq__nested__r1__b__last__bit1))
(assert (<= 0 user_eq__nested__r1__b__position1))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((r2__ref (mk_r2__ref (r2__content us_rep)))))
(define-fun r2__ref___projection ((a r2__ref)) us_rep (r2__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__user_eq__rr1__f us_rep)))))
(define-fun us_split_fields_F__projection ((a us_split_fields2)) us_rep (rec__user_eq__rr1__f a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (user_eq1 (rec__user_eq__rr1__f (us_split_fields3 a)) (rec__user_eq__rr1__f (us_split_fields3 b))) true) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const user_eq__rr1__f__first__bit Int)
(declare-const user_eq__rr1__f__last__bit Int)
(declare-const user_eq__rr1__f__position Int)
(assert (<= 0 user_eq__rr1__f__first__bit))
(assert (< user_eq__rr1__f__first__bit user_eq__rr1__f__last__bit))
(assert (<= 0 user_eq__rr1__f__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((rr1__ref (mk_rr1__ref (rr1__content us_rep1)))))
(define-fun rr1__ref___projection ((a rr1__ref)) us_rep1 (rr1__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__user_eq__rr2__f us_rep)))))
(define-fun us_split_fields_F__2__projection ((a us_split_fields4)) us_rep (rec__user_eq__rr2__f a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (= (user_eq2 (rec__user_eq__rr2__f (us_split_fields5 a)) (rec__user_eq__rr2__f (us_split_fields5 b))) true) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const user_eq__rr2__f__first__bit Int)
(declare-const user_eq__rr2__f__last__bit Int)
(declare-const user_eq__rr2__f__position Int)
(assert (<= 0 user_eq__rr2__f__first__bit))
(assert (< user_eq__rr2__f__first__bit user_eq__rr2__f__last__bit))
(assert (<= 0 user_eq__rr2__f__position))
(declare-fun user_eq4 (us_rep2 us_rep2) Bool)
(declare-const dummy4 us_rep2)
(declare-datatypes () ((rr2__ref (mk_rr2__ref (rr2__content us_rep2)))))
(define-fun rr2__ref___projection ((a rr2__ref)) us_rep2 (rr2__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)))))
(assert true)
(assert (forall ((x us_rep) (y us_rep)) (! (= (= (oeq x y) true) (= (to_rep (rec__user_eq__nested__r1__a (us_split_fields1 x))) (to_rep (rec__user_eq__nested__r1__a (us_split_fields1 y))))) :pattern ((oeq x y)))))
(declare-fun oeq1 (us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq2 a b) (oeq1 a b)) :pattern ((user_eq2 a b)))))
(assert true)
(assert (forall ((x us_rep) (y us_rep)) (! (= (= (oeq1 x y) true) (= (to_rep (rec__user_eq__nested__r1__b (us_split_fields1 x))) (to_rep (rec__user_eq__nested__r1__b (us_split_fields1 y))))) :pattern ((oeq1 x y)))))
(declare-const x__split_fields integer)
(declare-const x__split_fields1 integer)
(declare-const y__split_fields integer)
(declare-const y__split_fields1 integer)
(declare-const z__split_fields integer)
(declare-const z__split_fields1 integer)
(declare-const w__split_fields integer)
(declare-const w__split_fields1 integer)
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const o4 integer)
(declare-const o5 integer)
(declare-const o6 integer)
(declare-const o7 integer)
(declare-const user_eq__x__assume us_rep1)
(declare-const o8 integer)
(declare-const o9 integer)
(declare-const o10 us_split_fields)
(declare-const o11 us_rep)
(declare-const o12 us_split_fields2)
(declare-const user_eq__y__assume us_rep1)
(declare-const o13 integer)
(declare-const o14 integer)
(declare-const o15 us_split_fields)
(declare-const o16 us_rep)
(declare-const o17 us_split_fields4)
(declare-const user_eq__z__assume us_rep2)
(declare-const o18 integer)
(declare-const o19 integer)
(declare-const o20 us_split_fields)
(declare-const o21 us_rep)
(declare-const o22 us_split_fields4)
(declare-const user_eq__w__assume us_rep2)
(declare-const result us_split_fields__ref1)
(declare-const x__split_fields2 us_split_fields2)
(declare-const result1 us_split_fields__ref1)
(declare-const y__split_fields2 us_split_fields2)
(declare-const result2 us_split_fields__ref2)
(declare-const z__split_fields2 us_split_fields4)
(declare-const result3 us_split_fields__ref2)
(declare-const w__split_fields2 us_split_fields4)
(assert (= (to_rep o) 1))
(assert (= (to_rep o1) 1))
(assert (= o1 o2))
(assert (= o o3))
(assert (= o4 o2))
(assert (= o5 o3))
(assert (= o6 o4))
(assert (= o7 o5))
(assert (= user_eq__x__assume (mk___rep1 (mk___split_fields1 (mk___rep (mk___split_fields o6 o7))))))
(assert (= result (mk___split_fields__ref1 (mk___split_fields1 (mk___rep (mk___split_fields x__split_fields x__split_fields1))))))
(assert (= x__split_fields2 (us_split_fields3 user_eq__x__assume)))
(assert (= (to_rep o8) 2))
(assert (= (to_rep o9) 1))
(assert (= o10 (mk___split_fields o9 o8)))
(assert (= o11 (mk___rep o10)))
(assert (= o12 (mk___split_fields1 o11)))
(assert (= user_eq__y__assume (mk___rep1 o12)))
(assert (= result1 (mk___split_fields__ref1 (mk___split_fields1 (mk___rep (mk___split_fields y__split_fields y__split_fields1))))))
(assert (= y__split_fields2 (us_split_fields3 user_eq__y__assume)))
(assert (= (to_rep o13) 1))
(assert (= (to_rep o14) 1))
(assert (= o15 (mk___split_fields o14 o13)))
(assert (= o16 (mk___rep o15)))
(assert (= o17 (mk___split_fields2 o16)))
(assert (= user_eq__z__assume (mk___rep2 o17)))
(assert (= result2 (mk___split_fields__ref2 (mk___split_fields2 (mk___rep (mk___split_fields z__split_fields z__split_fields1))))))
(assert (= z__split_fields2 (us_split_fields5 user_eq__z__assume)))
(assert (= (to_rep o18) 2))
(assert (= (to_rep o19) 1))
(assert (= o20 (mk___split_fields o19 o18)))
(assert (= o21 (mk___rep o20)))
(assert (= o22 (mk___split_fields2 o21)))
(assert (= user_eq__w__assume (mk___rep2 o22)))
(assert (= result3 (mk___split_fields__ref2 (mk___split_fields2 (mk___rep (mk___split_fields w__split_fields w__split_fields1))))))
(assert (= w__split_fields2 (us_split_fields5 user_eq__w__assume)))
(assert (= (bool_eq1 (mk___rep1 x__split_fields2) (mk___rep1 y__split_fields2)) true))
(assert (not (= (bool_eq2 (mk___rep2 z__split_fields2) (mk___rep2 w__split_fields2)) true)))
(check-sat)
(exit)
