(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort type_0 0)
(declare-fun type_0qtint (type_0) Int)
(assert (forall ((i type_0)) (and (<= (- 2147483648) (type_0qtint i)) (<= (type_0qtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (type_0 type_0) Bool)
(declare-const dummy type_0)
(declare-datatypes () ((type_0__ref (mk_type_0__ref (type_0__content type_0)))))
(define-fun type_0__ref___projection ((a type_0__ref)) type_0 (type_0__content a))
(define-fun to_rep ((x type_0)) Int (type_0qtint x))
(declare-fun of_rep (Int) type_0)
(assert (forall ((x type_0)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x type_0)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__p__type_1__field_0 type_0) (rec__p__type_1__field_1 type_0) (rec__p__type_1__field_2 type_0) (rec__p__type_1__field_3 type_0) (rec__p__type_1__field_4 type_0) (rec__p__type_1__field_5 type_0) (rec__p__type_1__field_6 type_0) (rec__p__type_1__field_7 type_0)))))
(define-fun us_split_fields_Field_0__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_0 a))
(define-fun us_split_fields_Field_1__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_1 a))
(define-fun us_split_fields_Field_2__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_2 a))
(define-fun us_split_fields_Field_3__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_3 a))
(define-fun us_split_fields_Field_4__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_4 a))
(define-fun us_split_fields_Field_5__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_5 a))
(define-fun us_split_fields_Field_6__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_6 a))
(define-fun us_split_fields_Field_7__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_7 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_0 (us_split_fields1 b)))) (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_1 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_2 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_3 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_4 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_5 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_6 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_7 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const p__type_1__field_0__first__bit Int)
(declare-const p__type_1__field_0__last__bit Int)
(declare-const p__type_1__field_0__position Int)
(assert (<= 0 p__type_1__field_0__first__bit))
(assert (< p__type_1__field_0__first__bit p__type_1__field_0__last__bit))
(assert (<= 0 p__type_1__field_0__position))
(declare-const p__type_1__field_1__first__bit Int)
(declare-const p__type_1__field_1__last__bit Int)
(declare-const p__type_1__field_1__position Int)
(assert (<= 0 p__type_1__field_1__first__bit))
(assert (< p__type_1__field_1__first__bit p__type_1__field_1__last__bit))
(assert (<= 0 p__type_1__field_1__position))
(declare-const p__type_1__field_2__first__bit Int)
(declare-const p__type_1__field_2__last__bit Int)
(declare-const p__type_1__field_2__position Int)
(assert (<= 0 p__type_1__field_2__first__bit))
(assert (< p__type_1__field_2__first__bit p__type_1__field_2__last__bit))
(assert (<= 0 p__type_1__field_2__position))
(declare-const p__type_1__field_3__first__bit Int)
(declare-const p__type_1__field_3__last__bit Int)
(declare-const p__type_1__field_3__position Int)
(assert (<= 0 p__type_1__field_3__first__bit))
(assert (< p__type_1__field_3__first__bit p__type_1__field_3__last__bit))
(assert (<= 0 p__type_1__field_3__position))
(declare-const p__type_1__field_4__first__bit Int)
(declare-const p__type_1__field_4__last__bit Int)
(declare-const p__type_1__field_4__position Int)
(assert (<= 0 p__type_1__field_4__first__bit))
(assert (< p__type_1__field_4__first__bit p__type_1__field_4__last__bit))
(assert (<= 0 p__type_1__field_4__position))
(declare-const p__type_1__field_5__first__bit Int)
(declare-const p__type_1__field_5__last__bit Int)
(declare-const p__type_1__field_5__position Int)
(assert (<= 0 p__type_1__field_5__first__bit))
(assert (< p__type_1__field_5__first__bit p__type_1__field_5__last__bit))
(assert (<= 0 p__type_1__field_5__position))
(declare-const p__type_1__field_6__first__bit Int)
(declare-const p__type_1__field_6__last__bit Int)
(declare-const p__type_1__field_6__position Int)
(assert (<= 0 p__type_1__field_6__first__bit))
(assert (< p__type_1__field_6__first__bit p__type_1__field_6__last__bit))
(assert (<= 0 p__type_1__field_6__position))
(declare-const p__type_1__field_7__first__bit Int)
(declare-const p__type_1__field_7__last__bit Int)
(declare-const p__type_1__field_7__position Int)
(assert (<= 0 p__type_1__field_7__first__bit))
(assert (< p__type_1__field_7__first__bit p__type_1__field_7__last__bit))
(assert (<= 0 p__type_1__field_7__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((type_1__ref (mk_type_1__ref (type_1__content us_rep)))))
(define-fun type_1__ref___projection ((a type_1__ref)) us_rep (type_1__content a))
(declare-fun create_type_1 (tuple0) us_rep)
(declare-fun create_type_1__function_guard (us_rep tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (let ((result (create_type_1 us_void_param))) (and (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 result))) 0) (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 result))) 0))))))))) :pattern ((create_type_1 us_void_param)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__p__type_2__field_0 us_rep) (rec__p__type_2__field_1 us_rep) (rec__p__type_2__field_2 us_rep) (rec__p__type_2__field_3 us_rep) (rec__p__type_2__field_4 us_rep)))))
(define-fun us_split_fields_Field_0__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_0 a))
(define-fun us_split_fields_Field_1__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_1 a))
(define-fun us_split_fields_Field_2__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_2 a))
(define-fun us_split_fields_Field_3__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_3 a))
(define-fun us_split_fields_Field_4__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_4 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (and (= (bool_eq (rec__p__type_2__field_0 (us_split_fields3 a)) (rec__p__type_2__field_0 (us_split_fields3 b))) true) (= (bool_eq (rec__p__type_2__field_1 (us_split_fields3 a)) (rec__p__type_2__field_1 (us_split_fields3 b))) true)) (= (bool_eq (rec__p__type_2__field_2 (us_split_fields3 a)) (rec__p__type_2__field_2 (us_split_fields3 b))) true)) (= (bool_eq (rec__p__type_2__field_3 (us_split_fields3 a)) (rec__p__type_2__field_3 (us_split_fields3 b))) true)) (= (bool_eq (rec__p__type_2__field_4 (us_split_fields3 a)) (rec__p__type_2__field_4 (us_split_fields3 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const p__type_2__field_0__first__bit Int)
(declare-const p__type_2__field_0__last__bit Int)
(declare-const p__type_2__field_0__position Int)
(assert (<= 0 p__type_2__field_0__first__bit))
(assert (< p__type_2__field_0__first__bit p__type_2__field_0__last__bit))
(assert (<= 0 p__type_2__field_0__position))
(declare-const p__type_2__field_1__first__bit Int)
(declare-const p__type_2__field_1__last__bit Int)
(declare-const p__type_2__field_1__position Int)
(assert (<= 0 p__type_2__field_1__first__bit))
(assert (< p__type_2__field_1__first__bit p__type_2__field_1__last__bit))
(assert (<= 0 p__type_2__field_1__position))
(declare-const p__type_2__field_2__first__bit Int)
(declare-const p__type_2__field_2__last__bit Int)
(declare-const p__type_2__field_2__position Int)
(assert (<= 0 p__type_2__field_2__first__bit))
(assert (< p__type_2__field_2__first__bit p__type_2__field_2__last__bit))
(assert (<= 0 p__type_2__field_2__position))
(declare-const p__type_2__field_3__first__bit Int)
(declare-const p__type_2__field_3__last__bit Int)
(declare-const p__type_2__field_3__position Int)
(assert (<= 0 p__type_2__field_3__first__bit))
(assert (< p__type_2__field_3__first__bit p__type_2__field_3__last__bit))
(assert (<= 0 p__type_2__field_3__position))
(declare-const p__type_2__field_4__first__bit Int)
(declare-const p__type_2__field_4__last__bit Int)
(declare-const p__type_2__field_4__position Int)
(assert (<= 0 p__type_2__field_4__first__bit))
(assert (< p__type_2__field_4__first__bit p__type_2__field_4__last__bit))
(assert (<= 0 p__type_2__field_4__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((type_2__ref (mk_type_2__ref (type_2__content us_rep1)))))
(define-fun type_2__ref___projection ((a type_2__ref)) us_rep1 (type_2__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_158)))
(declare-const p__create_type_2__result type_2__ref)
(declare-const o type_0)
(declare-const o1 type_0)
(declare-const o2 type_0)
(declare-const o3 type_0)
(declare-const o4 type_0)
(declare-const o5 type_0)
(declare-const o6 type_0)
(declare-const o7 type_0)
(declare-const o8 type_0)
(declare-const o9 type_0)
(declare-const o10 type_0)
(declare-const o11 type_0)
(declare-const o12 type_0)
(declare-const o13 type_0)
(declare-const o14 type_0)
(declare-const o15 type_0)
(declare-const o16 type_0)
(declare-const o17 type_0)
(declare-const o18 type_0)
(declare-const o19 type_0)
(declare-const o20 type_0)
(declare-const o21 type_0)
(declare-const o22 type_0)
(declare-const o23 type_0)
(declare-const o24 type_0)
(declare-const o25 type_0)
(declare-const o26 type_0)
(declare-const o27 type_0)
(declare-const o28 type_0)
(declare-const o29 type_0)
(declare-const o30 type_0)
(declare-const o31 type_0)
(declare-const o32 type_0)
(declare-const o33 type_0)
(declare-const o34 type_0)
(declare-const o35 type_0)
(declare-const o36 type_0)
(declare-const o37 type_0)
(declare-const o38 type_0)
(declare-const o39 type_0)
(declare-const o40 us_split_fields2)
(declare-const o41 us_rep1)
(declare-const result type_2__ref)
(declare-const p__create_type_2__result1 us_rep1)
(declare-const p__create_type_2__result2 type_2__ref)
(declare-const p__create_type_2__result3 us_rep1)
(declare-const p__create_type_2__result4 type_2__ref)
(declare-const p__create_type_2__result5 us_rep1)
(define-fun o42 () us_rep (mk___rep (mk___split_fields o32 o33 o34 o35 o36 o37 o38 o39)))
(define-fun o43 () us_rep (mk___rep (mk___split_fields o24 o25 o26 o27 o28 o29 o30 o31)))
(define-fun o44 () us_rep (mk___rep (mk___split_fields o16 o17 o18 o19 o20 o21 o22 o23)))
(define-fun o45 () us_rep (mk___rep (mk___split_fields o8 o9 o10 o11 o12 o13 o14 o15)))
(define-fun o46 () us_rep (mk___rep (mk___split_fields o o1 o2 o3 o4 o5 o6 o7)))
(declare-const result1 us_rep1)
(assert (= p__create_type_2__result2 (let ((subject p__create_type_2__result)) (mk_type_2__ref p__create_type_2__result1))))
(assert (= p__create_type_2__result3 p__create_type_2__result1))
(assert (and (= o46 (create_type_1 Tuple0)) (and (= (to_rep o) 0) (and (= (to_rep o1) 0) (and (= (to_rep o2) 0) (and (= (to_rep o3) 0) (and (= (to_rep o4) 0) (and (= (to_rep o5) 0) (and (= (to_rep o6) 0) (= (to_rep o7) 0))))))))))
(assert (and (= o45 (create_type_1 Tuple0)) (and (= (to_rep o8) 0) (and (= (to_rep o9) 0) (and (= (to_rep o10) 0) (and (= (to_rep o11) 0) (and (= (to_rep o12) 0) (and (= (to_rep o13) 0) (and (= (to_rep o14) 0) (= (to_rep o15) 0))))))))))
(assert (and (= o44 (create_type_1 Tuple0)) (and (= (to_rep o16) 0) (and (= (to_rep o17) 0) (and (= (to_rep o18) 0) (and (= (to_rep o19) 0) (and (= (to_rep o20) 0) (and (= (to_rep o21) 0) (and (= (to_rep o22) 0) (= (to_rep o23) 0))))))))))
(assert (and (= o43 (create_type_1 Tuple0)) (and (= (to_rep o24) 0) (and (= (to_rep o25) 0) (and (= (to_rep o26) 0) (and (= (to_rep o27) 0) (and (= (to_rep o28) 0) (and (= (to_rep o29) 0) (and (= (to_rep o30) 0) (= (to_rep o31) 0))))))))))
(assert (and (= o42 (create_type_1 Tuple0)) (and (= (to_rep o32) 0) (and (= (to_rep o33) 0) (and (= (to_rep o34) 0) (and (= (to_rep o35) 0) (and (= (to_rep o36) 0) (and (= (to_rep o37) 0) (and (= (to_rep o38) 0) (= (to_rep o39) 0))))))))))
(assert (= o40 (mk___split_fields1 o42 o43 o44 o45 o46)))
(assert (= o41 (mk___rep1 o40)))
(assert (= result p__create_type_2__result))
(assert (= (let ((subject p__create_type_2__result)) p__create_type_2__result1) o41))
(assert (= p__create_type_2__result4 p__create_type_2__result2))
(assert (= p__create_type_2__result5 p__create_type_2__result3))
(assert (= result1 (type_2__content p__create_type_2__result4)))
(assert (not (= (bool_eq (rec__p__type_2__field_1 (us_split_fields3 (type_2__content p__create_type_2__result4))) (create_type_1 Tuple0)) true)))
(check-sat)
(exit)
