(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__foo__thing__d natural)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) natural (rec__foo__thing__d a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__foo__thing__a Bool) (rec__foo__thing__x Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) Bool (rec__foo__thing__a a))
(define-fun us_split_fields_X__projection ((a us_split_fields)) Bool (rec__foo__thing__x a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___30__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___31__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___32__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const foo__thing__d__first__bit Int)
(declare-const foo__thing__d__last__bit Int)
(declare-const foo__thing__d__position Int)
(assert (<= 0 foo__thing__d__first__bit))
(assert (< foo__thing__d__first__bit foo__thing__d__last__bit))
(assert (<= 0 foo__thing__d__position))
(declare-const foo__thing__a__first__bit Int)
(declare-const foo__thing__a__last__bit Int)
(declare-const foo__thing__a__position Int)
(assert (<= 0 foo__thing__a__first__bit))
(assert (< foo__thing__a__first__bit foo__thing__a__last__bit))
(assert (<= 0 foo__thing__a__position))
(declare-const foo__thing__x__first__bit Int)
(declare-const foo__thing__x__last__bit Int)
(declare-const foo__thing__x__position Int)
(assert (<= 0 foo__thing__x__first__bit))
(assert (< foo__thing__x__first__bit foo__thing__x__last__bit))
(assert (<= 0 foo__thing__x__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-datatypes () ((thing__ref (mk_thing__ref (thing__content us_rep)))))
(define-fun thing__ref___projection ((a thing__ref)) us_rep (thing__content a))
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b Bool)
(declare-const self__ natural)
(declare-const self__1 Bool)
(declare-const self__2 Bool)
(declare-const result natural)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const self__3 natural)
(declare-const self__4 Bool)
(declare-const self__5 Bool)
(declare-const self__6 natural)
(declare-const self__7 Bool)
(declare-const self__8 Bool)
(declare-const self__9 natural)
(declare-const self__10 Bool)
(declare-const self__11 Bool)
(assert (in_range1 n))
(assert (and (and (< 10 n) (= b true)) (= self__1 true)))
(assert (= result self__))
(assert (= result1 self__1))
(assert (= result2 self__2))
(assert (= self__ self__3))
(assert (= self__1 self__4))
(assert (= (distinct 0 0) self__5))
(assert (= self__6 self__3))
(assert (= self__7 self__4))
(assert (= self__8 self__5))
(assert (= self__9 self__3))
(assert (= self__10 self__4))
(assert (= self__11 self__5))
(assert (not (= b true)))
(check-sat)
(exit)
