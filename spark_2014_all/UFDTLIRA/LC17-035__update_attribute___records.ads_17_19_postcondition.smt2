(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range temp___expr_33)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort my_range 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (my_range my_range) Bool)
(declare-const dummy2 my_range)
(declare-datatypes () ((my_range__ref (mk_my_range__ref (my_range__content my_range)))))
(define-fun my_range__ref___projection ((a my_range__ref)) my_range (my_range__content a))
(declare-fun to_rep2 (my_range) Int)
(declare-fun of_rep2 (Int) my_range)
(assert (forall ((x my_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x my_range)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__types__rec__s1 integer) (rec__types__rec__s2 natural) (rec__types__rec__s3 my_range) (rec__types__rec__s4 integer)))))
(define-fun us_split_fields_S1__projection ((a us_split_fields)) integer (rec__types__rec__s1 a))
(define-fun us_split_fields_S2__projection ((a us_split_fields)) natural (rec__types__rec__s2 a))
(define-fun us_split_fields_S3__projection ((a us_split_fields)) my_range (rec__types__rec__s3 a))
(define-fun us_split_fields_S4__projection ((a us_split_fields)) integer (rec__types__rec__s4 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep1 (rec__types__rec__s1 (us_split_fields1 a))) (to_rep1 (rec__types__rec__s1 (us_split_fields1 b)))) (= (to_rep (rec__types__rec__s2 (us_split_fields1 a))) (to_rep (rec__types__rec__s2 (us_split_fields1 b))))) (= (to_rep2 (rec__types__rec__s3 (us_split_fields1 a))) (to_rep2 (rec__types__rec__s3 (us_split_fields1 b))))) (= (to_rep1 (rec__types__rec__s4 (us_split_fields1 a))) (to_rep1 (rec__types__rec__s4 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const types__rec__s1__first__bit Int)
(declare-const types__rec__s1__last__bit Int)
(declare-const types__rec__s1__position Int)
(assert (<= 0 types__rec__s1__first__bit))
(assert (< types__rec__s1__first__bit types__rec__s1__last__bit))
(assert (<= 0 types__rec__s1__position))
(declare-const types__rec__s2__first__bit Int)
(declare-const types__rec__s2__last__bit Int)
(declare-const types__rec__s2__position Int)
(assert (<= 0 types__rec__s2__first__bit))
(assert (< types__rec__s2__first__bit types__rec__s2__last__bit))
(assert (<= 0 types__rec__s2__position))
(declare-const types__rec__s3__first__bit Int)
(declare-const types__rec__s3__last__bit Int)
(declare-const types__rec__s3__position Int)
(assert (<= 0 types__rec__s3__first__bit))
(assert (< types__rec__s3__first__bit types__rec__s3__last__bit))
(assert (<= 0 types__rec__s3__position))
(declare-const types__rec__s4__first__bit Int)
(declare-const types__rec__s4__last__bit Int)
(declare-const types__rec__s4__position Int)
(assert (<= 0 types__rec__s4__first__bit))
(assert (< types__rec__s4__first__bit types__rec__s4__last__bit))
(assert (<= 0 types__rec__s4__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const new_data Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_185 Int) (temp___is_init_182 Bool) (temp___skip_constant_183 Bool) (temp___do_toplevel_184 Bool)) Bool (=> (or (= temp___is_init_182 true) (<= 1 10)) (in_range2 temp___expr_185)))
(declare-const r__split_fields integer)
(declare-const r__split_fields1 natural)
(declare-const r__split_fields2 my_range)
(declare-const r__split_fields3 integer)
(declare-const o natural)
(declare-const o1 integer)
(declare-const o2 natural)
(declare-const o3 my_range)
(declare-const o4 integer)
(declare-const temp___214 integer)
(declare-const temp___2141 natural)
(declare-const temp___2142 my_range)
(declare-const temp___2143 integer)
(declare-const result integer)
(declare-const result1 natural)
(declare-const result2 my_range)
(declare-const result3 integer)
(declare-const r__split_fields4 integer)
(declare-const r__split_fields5 natural)
(declare-const r__split_fields6 my_range)
(declare-const r__split_fields7 integer)
(declare-const r__split_fields8 integer)
(declare-const r__split_fields9 natural)
(declare-const r__split_fields10 my_range)
(declare-const r__split_fields11 integer)
(declare-const r__split_fields12 integer)
(declare-const r__split_fields13 natural)
(declare-const r__split_fields14 my_range)
(declare-const r__split_fields15 integer)
(assert (in_range new_data))
(assert (= (to_rep o) new_data))
(assert (= r__split_fields o1))
(assert (= o o2))
(assert (= r__split_fields2 o3))
(assert (= r__split_fields3 o4))
(assert (= temp___214 o1))
(assert (= temp___2141 o2))
(assert (= temp___2142 o3))
(assert (= temp___2143 o4))
(assert (= result r__split_fields))
(assert (= result1 r__split_fields1))
(assert (= result2 r__split_fields2))
(assert (= result3 r__split_fields3))
(assert (= temp___214 r__split_fields4))
(assert (= temp___2141 r__split_fields5))
(assert (= temp___2142 r__split_fields6))
(assert (= temp___2143 r__split_fields7))
(assert (= r__split_fields8 r__split_fields4))
(assert (= r__split_fields9 r__split_fields5))
(assert (= r__split_fields10 r__split_fields6))
(assert (= r__split_fields11 r__split_fields7))
(assert (= r__split_fields12 r__split_fields4))
(assert (= r__split_fields13 r__split_fields5))
(assert (= r__split_fields14 r__split_fields6))
(assert (= r__split_fields15 r__split_fields7))
(assert (not (= (bool_eq (mk___rep (mk___split_fields r__split_fields8 r__split_fields9 r__split_fields10 r__split_fields11)) (mk___rep (mk___split_fields r__split_fields (of_rep new_data) r__split_fields2 r__split_fields3))) true)))
(check-sat)
(exit)
