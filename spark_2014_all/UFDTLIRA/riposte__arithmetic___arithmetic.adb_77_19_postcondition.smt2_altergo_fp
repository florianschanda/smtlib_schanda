(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type t21b__ref = { t21b__content : integer
}

function t21b__ref___projection(a1: t21b__ref) : integer = (a1).t21b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type t22b__ref = { t22b__content : integer
}

function t22b__ref___projection(a1: t22b__ref) : integer = (a1).t22b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall r:int. forall i:int. forall i1:int.
  forall arithmetic__plus__result:int. forall temp___193:int.
  forall temp___192:int. forall temp___194:int. forall o:int. forall o1:int.
  forall temp___188:int. forall temp___187:int. forall temp___189:int.
  forall o2:int. forall o3:int. forall i2:int. forall i3:int.
  forall result:int. forall r1:int. forall result1:int. forall i4:int.
  forall result2:int. forall r2:int. forall r3:int. forall i5:int.
  forall r4:int. forall i6:int. forall r5:int. forall i7:int. forall r6:int.
  forall i8:int. forall r7:int. forall i9:int. forall result3:int.
  forall i10:int. forall result4:int. forall r8:int. forall r9:int.
  forall i11:int. forall r10:int. forall i12:int. forall r11:int.
  forall i13:int. forall r12:int. forall i14:int. forall r13:int.
  forall i15:int. forall r14:int. forall i16:int. forall i17:int.
  forall r15:int. forall i18:int. forall i19:int. forall result5:int.
  forall arithmetic__plus__result1:int. forall arithmetic__plus__result2:int.
  forall arithmetic__plus__result3:int. forall r16:int. forall i20:int.
  forall i21:int. forall arithmetic__plus__result4:int. forall r17:int.
  forall i22:int. forall i23:int. forall arithmetic__plus__result5:int.
  (forall result6:int. ((in_range1(a) and (in_range1(b) and
  (in_range1((a + b)) and ((((((- 2147483648) <= 2147483647) ->
  in_range1(r)) and ((({ int__content = result } = { int__content = r }) and
  (r1 = a)) and ((((0 <= b) and (((({ int__content = result1 } = {
  int__content = i }) and (i4 = 1)) and ((((1 <= i4) and (i4 <= b)) and
  ((((temp___193 = i4) and ((temp___192 = r1) and ((temp___194 = b) and
  (((((o = r1) and (not (r1 = 2147483647))) and (o1 = (o + 1))) and
  ((r1 = result2) and (r2 = o1))) and (((r3 = (a + i5)) and
  (b = temp___194)) and ((((((- 2147483648) <= 2147483647) ->
  in_range1(r3)) and ((1 <= b) -> dynamic_property(1, b, i5))) and
  ((1 <= i5) and (i5 <= b))) and (i5 = b))))))) and (((i5 = i6) and
  (r3 = r4)) and ((i7 = i5) and (r5 = r3)))) and ((({ int__content = i8 } = {
  int__content = i6 }) and ({ int__content = r6 } = { int__content = r4
  })) and ((i9 = i7) and (r7 = r5))))) or ((not ((1 <= i4) and
  (i4 <= b))) and (((i4 = i8) and (r1 = r6)) and ((i9 = i4) and
  (r7 = r1)))))) and ((({ int__content = i17 } = { int__content = i1 }) and
  (({ int__content = i16 } = { int__content = i8 }) and ({ int__content = r14
  } = { int__content = r6 }))) and ((i19 = i3) and ((i18 = i9) and
  (r15 = r7)))))) or ((not (0 <= b)) and (((({ int__content = result3 } = {
  int__content = i1 }) and (i10 = (- 1))) and ((((b <= i10) and
  (i10 <= (- 1))) and ((((temp___188 = i10) and ((temp___187 = r1) and
  ((temp___189 = b) and (((((o2 = r1) and (not (r1 = (- 2147483648)))) and
  (o3 = (o2 - 1))) and ((r1 = result4) and (r8 = o3))) and
  (((r9 = (a + i11)) and (b = temp___189)) and
  ((((((- 2147483648) <= 2147483647) -> in_range1(r9)) and ((b <= (- 1)) ->
  dynamic_property1(b, (- 1), i11))) and ((b <= i11) and (i11 <= (- 1)))) and
  (i11 = b))))))) and (((i11 = i12) and (r9 = r10)) and ((i13 = i11) and
  (r11 = r9)))) and ((({ int__content = i14 } = { int__content = i12 }) and
  ({ int__content = r12 } = { int__content = r10 })) and ((i15 = i13) and
  (r13 = r11))))) or ((not ((b <= i10) and (i10 <= (- 1)))) and
  (((i10 = i14) and (r1 = r12)) and ((i15 = i10) and (r13 = r1)))))) and ((({
  int__content = i17 } = { int__content = i14 }) and (({ int__content = i16
  } = { int__content = i }) and ({ int__content = r14 } = { int__content =
  r12 }))) and ((i19 = i15) and ((i18 = i2) and (r15 = r13))))))) and
  (((arithmetic__plus__result1 = arithmetic__plus__result2) and
  (arithmetic__plus__result3 = arithmetic__plus__result1)) and
  ((result5 = arithmetic__plus__result) and
  (arithmetic__plus__result1 = r14)))))) and ((({ int__content =
  arithmetic__plus__result4 } = { int__content = arithmetic__plus__result2
  }) and ((i21 = i17) and ((i20 = i16) and (r16 = r14)))) and
  ((arithmetic__plus__result5 = arithmetic__plus__result3) and
  ((i23 = i19) and ((i22 = i18) and (r17 = r15)))))) and
  (result6 = arithmetic__plus__result4))))) ->
  (arithmetic__plus__result4 = (a + b)))))
