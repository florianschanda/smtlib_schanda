(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__indefinite_bounded_tagged__t__c integer) (rec__ext__ us_private)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) integer (rec__indefinite_bounded_tagged__t__c a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__indefinite_bounded_tagged__t__c (us_split_fields1 a))) (to_rep (rec__indefinite_bounded_tagged__t__c (us_split_fields1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const indefinite_bounded_tagged__t__c__first__bit Int)
(declare-const indefinite_bounded_tagged__t__c__last__bit Int)
(declare-const indefinite_bounded_tagged__t__c__position Int)
(assert (<= 0 indefinite_bounded_tagged__t__c__first__bit))
(assert (< indefinite_bounded_tagged__t__c__first__bit indefinite_bounded_tagged__t__c__last__bit))
(assert (<= 0 indefinite_bounded_tagged__t__c__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-sort capacity_range 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (capacity_range capacity_range) Bool)
(declare-const dummy2 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__indefinite_bounded_tagged__vect__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range (rec__indefinite_bounded_tagged__vect__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__indefinite_bounded_tagged__vect__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type (rec__indefinite_bounded_tagged__vect__vector a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const indefinite_bounded_tagged__vect__vector__capacity__first__bit Int)
(declare-const indefinite_bounded_tagged__vect__vector__capacity__last__bit Int)
(declare-const indefinite_bounded_tagged__vect__vector__capacity__position Int)
(assert (<= 0 indefinite_bounded_tagged__vect__vector__capacity__first__bit))
(assert (< indefinite_bounded_tagged__vect__vector__capacity__first__bit indefinite_bounded_tagged__vect__vector__capacity__last__bit))
(assert (<= 0 indefinite_bounded_tagged__vect__vector__capacity__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content a))
(declare-fun to_rep1 (capacity_range) Int)
(declare-fun of_rep1 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x capacity_range)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun capacity ((container us_rep1)) Int (ite (= (distinct 1 0) true) (to_rep1 (rec__indefinite_bounded_tagged__vect__vector__capacity (us_split_discrs1 container))) 2147483647))
(declare-fun capacity__function_guard (Int us_rep1) Bool)
(define-fun dynamic_invariant ((temp___expr_285 Int) (temp___is_init_281 Bool) (temp___skip_constant_282 Bool) (temp___do_toplevel_283 Bool) (temp___do_typ_inv_284 Bool)) Bool (=> (or (= temp___is_init_281 true) (<= 0 2147483647)) (in_range2 temp___expr_285)))
(declare-fun length (us_rep1) Int)
(declare-fun length__function_guard (Int us_rep1) Bool)
(assert (forall ((container us_rep1)) (! (let ((result (length container))) (and (<= result (capacity container)) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(declare-fun empty_vector (tuple0) us_rep1)
(declare-fun empty_vector__function_guard (us_rep1 tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (= (length (empty_vector us_void_param)) 0) :pattern ((empty_vector us_void_param)))))
(declare-fun oeq (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq1 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq4 (us_rep2 us_rep2) Bool)
(declare-const dummy4 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(define-fun last ((container us_rep2)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(declare-fun get (us_rep2 Int) us_rep)
(declare-fun get__function_guard (us_rep us_rep2 Int) Bool)
(define-fun oeq1 ((left us_rep2) (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (let ((temp___155 (get right n))) (let ((temp___154 (get left n))) (and (ite (= (attr__tag temp___154) (attr__tag temp___155)) true false) (us_dispatch_eq temp___154 temp___155)))) true))) true false)))
(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)
(declare-fun model__ (us_rep1) us_rep2)
(declare-fun model____function_guard (us_rep2 us_rep1) Bool)
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (oeq left right) true) (= (oeq1 (model__ left) (model__ right)) true)) :pattern ((oeq left right)))))
(define-fun last_index ((container us_rep1)) Int (last (model__ container)))
(declare-fun last_index__function_guard (Int us_rep1) Bool)
(declare-sort extended_index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq5 (extended_index extended_index) Bool)
(declare-const dummy5 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant1 ((temp___expr_278 Int) (temp___is_init_274 Bool) (temp___skip_constant_275 Bool) (temp___do_toplevel_276 Bool) (temp___do_typ_inv_277 Bool)) Bool (=> (or (= temp___is_init_274 true) (<= 0 2147483647)) (in_range3 temp___expr_278)))
(declare-fun is_empty (us_rep1) Bool)
(declare-fun is_empty__function_guard (Bool us_rep1) Bool)
(assert (forall ((container us_rep1)) (! (= (= (is_empty container) true) (= (length container) 0)) :pattern ((is_empty container)))))
(declare-fun copy (us_rep1 Int) us_rep1)
(declare-fun copy__function_guard (us_rep1 us_rep1 Int) Bool)
(assert (forall ((source us_rep1)) (forall ((capacity1 Int)) (! (=> (and (dynamic_invariant capacity1 true true true true) (=> (= (distinct 1 0) true) (or (= capacity1 0) (<= (length source) capacity1)))) (let ((result (copy source capacity1))) (and (= (oeq1 (model__ result) (model__ source)) true) (ite (= capacity1 0) (= (to_rep1 (rec__indefinite_bounded_tagged__vect__vector__capacity (us_split_discrs1 result))) (length source)) (= (to_rep1 (rec__indefinite_bounded_tagged__vect__vector__capacity (us_split_discrs1 result))) capacity1))))) :pattern ((copy source capacity1))))))
(declare-fun first_index__function_guard (Int us_rep1) Bool)
(declare-sort index_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (index_type index_type) Bool)
(declare-const dummy6 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_266 Int) (temp___is_init_262 Bool) (temp___skip_constant_263 Bool) (temp___do_toplevel_264 Bool) (temp___do_typ_inv_265 Bool)) Bool (=> (or (= temp___is_init_262 true) (<= 1 2147483647)) (in_range4 temp___expr_266)))
(define-fun element ((container us_rep1) (index Int)) us_rep (get (model__ container) index))
(declare-fun element__function_guard (us_rep us_rep1 Int) Bool)
(define-fun default_initial_assumption ((temp___expr_249 us_rep) (temp___skip_top_level_250 Bool)) Bool (= (attr__tag temp___expr_249) us_tag))
(define-fun equal_except ((left us_rep2) (right us_rep2) (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (not (= i position)) (= (let ((temp___163 (get right i))) (let ((temp___162 (get left i))) (and (ite (= (attr__tag temp___162) (attr__tag temp___163)) true false) (us_dispatch_eq temp___162 temp___163)))) true)))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(define-fun ole ((left us_rep2) (right us_rep2)) Bool (and (<= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (let ((temp___159 (get right n))) (let ((temp___158 (get left n))) (and (ite (= (attr__tag temp___158) (attr__tag temp___159)) true false) (us_dispatch_eq temp___158 temp___159)))) true))) true false)))
(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)
(define-fun range_shifted ((left us_rep2) (right us_rep2) (fst Int) (lst Int) (offset Int)) Bool (and (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (let ((temp___169 (get right (+ i offset)))) (let ((temp___168 (get left i))) (and (ite (= (attr__tag temp___168) (attr__tag temp___169)) true false) (us_dispatch_eq temp___168 temp___169)))) true))) true false) (ite (forall ((i Int)) (=> (and (<= (+ fst offset) i) (<= i (+ lst offset))) (= (let ((temp___171 (get right i))) (let ((temp___170 (get left (- i offset)))) (and (ite (= (attr__tag temp___170) (attr__tag temp___171)) true false) (us_dispatch_eq temp___170 temp___171)))) true))) true false)))
(declare-fun range_shifted__function_guard (Bool us_rep2 us_rep2 Int Int Int) Bool)
(define-fun olt ((left us_rep2) (right us_rep2)) Bool (and (< (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (let ((temp___157 (get right n))) (let ((temp___156 (get left n))) (and (ite (= (attr__tag temp___156) (attr__tag temp___157)) true false) (us_dispatch_eq temp___156 temp___157)))) true))) true false)))
(declare-fun olt__function_guard (Bool us_rep2 us_rep2) Bool)
(define-fun m_elements_reversed ((left us_rep2) (right us_rep2)) Bool (and (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (= (let ((temp___179 (get right (+ (- (last left) i) 1)))) (let ((temp___178 (get left i))) (and (ite (= (attr__tag temp___178) (attr__tag temp___179)) true false) (us_dispatch_eq temp___178 temp___179)))) true))) true false)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last right))) (= (let ((temp___181 (get left (+ (- (last left) i) 1)))) (let ((temp___180 (get right i))) (and (ite (= (attr__tag temp___180) (attr__tag temp___181)) true false) (us_dispatch_eq temp___180 temp___181)))) true))) true false)))
(declare-fun m_elements_reversed__function_guard (Bool us_rep2 us_rep2) Bool)
(define-fun equal_except__2 ((left us_rep2) (right us_rep2) (x Int) (y Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (and (not (= i x)) (not (= i y))) (= (let ((temp___165 (get right i))) (let ((temp___164 (get left i))) (and (ite (= (attr__tag temp___164) (attr__tag temp___165)) true false) (us_dispatch_eq temp___164 temp___165)))) true)))) true false)))
(declare-fun equal_except__2__function_guard (Bool us_rep2 us_rep2 Int Int) Bool)
(define-fun m_elements_swapped ((left us_rep2) (right us_rep2) (x Int) (y Int)) Bool (and (and (and (= (length1 left) (length1 right)) (let ((temp___183 (get right y))) (let ((temp___182 (get left x))) (and (ite (= (attr__tag temp___182) (attr__tag temp___183)) true false) (us_dispatch_eq temp___182 temp___183))))) (let ((temp___185 (get right x))) (let ((temp___184 (get left y))) (and (ite (= (attr__tag temp___184) (attr__tag temp___185)) true false) (us_dispatch_eq temp___184 temp___185))))) (equal_except__2 left right x y)))
(declare-fun m_elements_swapped__function_guard (Bool us_rep2 us_rep2 Int Int) Bool)
(define-fun first_element ((container us_rep1)) us_rep (get (model__ container) 1))
(declare-fun first_element__function_guard (us_rep us_rep1) Bool)
(define-fun last_element ((container us_rep1)) us_rep (get (model__ container) (last_index container)))
(declare-fun last_element__function_guard (us_rep us_rep1) Bool)
(declare-fun find_index (us_rep1 us_rep Int) Int)
(declare-fun find_index__function_guard (Int us_rep1 us_rep Int) Bool)
(define-fun contains ((container us_rep2) (fst Int) (lst Int) (item us_rep)) Bool (ite (exists ((i Int)) (and (and (<= fst i) (<= i lst)) (= (let ((temp___160 (get container i))) (and (ite (= (attr__tag temp___160) (attr__tag item)) true false) (us_dispatch_eq temp___160 item))) true))) true false))
(declare-fun contains__function_guard (Bool us_rep2 Int Int us_rep) Bool)
(assert (forall ((container us_rep1)) (forall ((item us_rep)) (forall ((index Int)) (! (=> (dynamic_invariant2 index true true true true) (let ((result (find_index container item index))) (and (ite (or (< (last_index container) index) (not (= (contains (model__ container) index (last_index container) item) true))) (= result 0) (and (and (and (<= index result) (<= result (last_index container))) (= (let ((temp___483 (get (model__ container) result))) (and (ite (= (attr__tag temp___483) (attr__tag item)) true false) (us_dispatch_eq temp___483 item))) true)) (not (= (contains (model__ container) index (- result 1) item) true)))) (dynamic_invariant1 result true false true true)))) :pattern ((find_index container item index)))))))
(declare-fun reverse_find_index (us_rep1 us_rep Int) Int)
(declare-fun reverse_find_index__function_guard (Int us_rep1 us_rep Int) Bool)
(assert (forall ((container us_rep1)) (forall ((item us_rep)) (forall ((index Int)) (! (=> (dynamic_invariant2 index true true true true) (let ((result (reverse_find_index container item index))) (and (ite (not (= (contains (model__ container) 1 (ite (<= index (last_index container)) index (last_index container)) item) true)) (= result 0) (and (and (and (and (<= 1 result) (<= result index)) (<= result (last_index container))) (= (let ((temp___487 (get (model__ container) result))) (and (ite (= (attr__tag temp___487) (attr__tag item)) true false) (us_dispatch_eq temp___487 item))) true)) (not (= (contains (model__ container) (+ result 1) (ite (<= index (last_index container)) index (last_index container)) item) true)))) (dynamic_invariant1 result true false true true)))) :pattern ((reverse_find_index container item index)))))))
(declare-fun contains1 (us_rep1 us_rep) Bool)
(declare-fun contains__function_guard1 (Bool us_rep1 us_rep) Bool)
(assert (forall ((container us_rep1)) (forall ((item us_rep)) (! (= (= (contains1 container item) true) (= (contains (model__ container) 1 (last_index container) item) true)) :pattern ((contains1 container item))))))
(define-fun has_element ((container us_rep1) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last_index container)) true false)))
(declare-fun has_element__function_guard (Bool us_rep1 Int) Bool)
(declare-fun f (Int) us_rep)
(declare-fun f__function_guard (us_rep Int) Bool)
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert true)
(assert (forall ((x Int)) (! (=> (dynamic_invariant3 x true true true true) (= (f x) (mk___rep (mk___split_fields (of_rep x) us_null_ext__) us_tag))) :pattern ((f x)))))
(declare-fun is_sorted (us_rep1) Bool)
(declare-fun is_sorted__function_guard (Bool us_rep1) Bool)
(declare-fun lt (us_rep us_rep) Bool)
(declare-fun lt__function_guard (Bool us_rep us_rep) Bool)
(define-fun m_elements_sorted ((container us_rep2)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last container))) (forall ((j Int)) (=> (and (<= i j) (<= j (last container))) (or (= (let ((temp___187 (get container j))) (let ((temp___186 (get container i))) (and (ite (= (attr__tag temp___186) (attr__tag temp___187)) true false) (us_dispatch_eq temp___186 temp___187)))) true) (= (lt (get container i) (get container j)) true)))))) true false))
(declare-fun m_elements_sorted__function_guard (Bool us_rep2) Bool)
(assert (forall ((container us_rep1)) (! (= (= (is_sorted container) true) (= (m_elements_sorted (model__ container)) true)) :pattern ((is_sorted container)))))
(define-fun m_elements_included ((left us_rep2) (l_fst Int) (l_lst Int) (right us_rep2) (r_fst Int) (r_lst Int)) Bool (ite (forall ((i Int)) (=> (and (<= l_fst i) (<= i l_lst)) (exists ((j Int)) (and (and (<= r_fst j) (<= j r_lst)) (= (let ((temp___177 (get right j))) (let ((temp___176 (get left i))) (and (ite (= (attr__tag temp___176) (attr__tag temp___177)) true false) (us_dispatch_eq temp___176 temp___177)))) true))))) true false))
(declare-fun m_elements_included__function_guard (Bool us_rep2 Int Int us_rep2 Int Int) Bool)
(define-fun in_range5 ((rec__indefinite_bounded_tagged__vect__vector__capacity1 Int) (a us_rep1)) Bool (= rec__indefinite_bounded_tagged__vect__vector__capacity1 (to_rep1 (rec__indefinite_bounded_tagged__vect__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const indefinite_bounded_tagged__vect__vector__capacity__first__bit1 Int)
(declare-const indefinite_bounded_tagged__vect__vector__capacity__last__bit1 Int)
(declare-const indefinite_bounded_tagged__vect__vector__capacity__position1 Int)
(assert (<= 0 indefinite_bounded_tagged__vect__vector__capacity__first__bit1))
(assert (< indefinite_bounded_tagged__vect__vector__capacity__first__bit1 indefinite_bounded_tagged__vect__vector__capacity__last__bit1))
(assert (<= 0 indefinite_bounded_tagged__vect__vector__capacity__position1))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((tvS__ref (mk_tvS__ref (tvS__content us_rep1)))))
(define-fun tvS__ref___projection ((a tvS__ref)) us_rep1 (tvS__content a))
(define-fun dynamic_invariant4 ((temp___expr_509 us_rep1) (temp___is_init_505 Bool) (temp___skip_constant_506 Bool) (temp___do_toplevel_507 Bool) (temp___do_typ_inv_508 Bool)) Bool (=> (not (= temp___skip_constant_506 true)) (in_range5 5 temp___expr_509)))
(define-fun default_initial_assumption1 ((temp___expr_511 us_rep1) (temp___skip_top_level_512 Bool)) Bool (and (= (to_rep1 (rec__indefinite_bounded_tagged__vect__vector__capacity (us_split_discrs1 temp___expr_511))) 5) (=> (not (= temp___skip_top_level_512 true)) (= (is_empty temp___expr_511) true))))
(declare-const v__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const w__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert true)
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (lt left right) true) (< (to_rep (rec__indefinite_bounded_tagged__t__c (us_split_fields1 left))) (to_rep (rec__indefinite_bounded_tagged__t__c (us_split_fields1 right))))) :pattern ((lt left right)))))
(declare-sort count_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (count_type count_type) Bool)
(declare-const dummy8 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant5 ((temp___expr_241 Int) (temp___is_init_237 Bool) (temp___skip_constant_238 Bool) (temp___do_toplevel_239 Bool) (temp___do_typ_inv_240 Bool)) Bool (=> (or (= temp___is_init_237 true) (<= 0 2147483647)) (in_range6 temp___expr_241)))
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq4 a b) (oeq1 a b)) :pattern ((user_eq4 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_322 us_rep2) (temp___skip_top_level_323 Bool)) Bool (=> (not (= temp___skip_top_level_323 true)) (= (length1 temp___expr_322) 0)))
(assert (forall ((container us_rep1)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(declare-sort extended_index1 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (extended_index1 extended_index1) Bool)
(declare-const dummy9 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant6 ((temp___expr_314 Int) (temp___is_init_310 Bool) (temp___skip_constant_311 Bool) (temp___do_toplevel_312 Bool) (temp___do_typ_inv_313 Bool)) Bool (=> (or (= temp___is_init_310 true) (<= 0 2147483647)) (in_range7 temp___expr_314)))
(assert (forall ((container us_rep2)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant5 result true false true true))) :pattern ((length1 container)))))
(assert true)
(declare-const v__split_fields us_main_type)
(declare-const w__split_fields us_main_type)
(declare-const us Int)
(declare-const o integer)
(declare-const o1 us_private)
(declare-const o2 Int)
(declare-const o3 integer)
(declare-const o4 us_private)
(declare-const o5 Int)
(declare-const o6 integer)
(declare-const o7 us_private)
(declare-const o8 Int)
(declare-const indefinite_bounded_tagged__test__B_1__w__assume us_rep1)
(declare-const o9 us_rep1)
(declare-const o10 us_rep)
(declare-const temp___629 us_rep)
(declare-const indefinite_bounded_tagged__vect__clear__container__fields us_split_fields2)
(declare-const result us_split_fields__ref1)
(declare-const v__split_fields1 us_split_fields2)
(declare-const indefinite_bounded_tagged__vect__append__2__container__fields us_split_fields2)
(declare-const result1 us_split_fields__ref1)
(declare-const v__split_fields2 us_split_fields2)
(declare-const indefinite_bounded_tagged__vect__append__2__container__fields1 us_split_fields2)
(declare-const result2 us_split_fields__ref1)
(declare-const v__split_fields3 us_split_fields2)
(declare-const indefinite_bounded_tagged__vect__append__2__container__fields2 us_split_fields2)
(declare-const result3 us_split_fields__ref1)
(declare-const v__split_fields4 us_split_fields2)
(declare-const indefinite_bounded_tagged__vect__reserve_capacity__container__fields us_split_fields2)
(declare-const result4 us_split_fields__ref1)
(declare-const v__split_fields5 us_split_fields2)
(declare-const result5 us_split_fields__ref1)
(declare-const w__split_fields1 us_split_fields2)
(declare-const w__split_fields2 us_split_fields2)
(declare-const w__split_fields3 us_split_fields2)
(declare-const indefinite_bounded_tagged__vect__replace_element__container__fields us_split_fields2)
(declare-const result6 us_split_fields__ref1)
(declare-const v__split_fields6 us_split_fields2)
(define-fun o11 () us_rep (mk___rep (mk___split_fields o6 o7) o8))
(define-fun o12 () us_rep (mk___rep (mk___split_fields o3 o4) o5))
(define-fun o13 () us_rep (mk___rep (mk___split_fields o o1) o2))
(assert (and (= us 5) (in_range2 5)))
(assert (default_initial_assumption1 (mk___rep1 v__split_discrs (mk___split_fields1 v__split_fields)) false))
(assert (= 5 (to_rep1 (rec__indefinite_bounded_tagged__vect__vector__capacity v__split_discrs))))
(assert (= (length (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__clear__container__fields)) 0))
(assert (= result (mk___split_fields__ref1 (mk___split_fields1 v__split_fields))))
(assert (= v__split_fields1 indefinite_bounded_tagged__vect__clear__container__fields))
(assert (= (is_empty (mk___rep1 v__split_discrs v__split_fields1)) true))
(assert (= (oeq (mk___rep1 v__split_discrs v__split_fields1) (empty_vector Tuple0)) true))
(assert (= (capacity (mk___rep1 v__split_discrs v__split_fields1)) 5))
(assert (and (= o13 (f 1)) (and (and (= (of_rep 1) o) (= us_null_ext__ o1)) (= us_tag o2))))
(assert (and (and (= (length (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields)) (+ (length (mk___rep1 v__split_discrs v__split_fields1)) 1)) (= (olt (model__ (mk___rep1 v__split_discrs v__split_fields1)) (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields))) true)) (= (let ((temp___452 (get (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields)) (+ (last (model__ (mk___rep1 v__split_discrs v__split_fields1))) 1)))) (ite (= (attr__tag temp___452) o2) (us_dispatch_eq temp___452 o13) false)) true)))
(assert (= result1 (mk___split_fields__ref1 v__split_fields1)))
(assert (= v__split_fields2 indefinite_bounded_tagged__vect__append__2__container__fields))
(assert (and (= o12 (f 2)) (and (and (= (of_rep 2) o3) (= us_null_ext__ o4)) (= us_tag o5))))
(assert (and (and (= (length (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields1)) (+ (length (mk___rep1 v__split_discrs v__split_fields2)) 1)) (= (olt (model__ (mk___rep1 v__split_discrs v__split_fields2)) (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields1))) true)) (= (let ((temp___452 (get (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields1)) (+ (last (model__ (mk___rep1 v__split_discrs v__split_fields2))) 1)))) (ite (= (attr__tag temp___452) o5) (us_dispatch_eq temp___452 o12) false)) true)))
(assert (= result2 (mk___split_fields__ref1 v__split_fields2)))
(assert (= v__split_fields3 indefinite_bounded_tagged__vect__append__2__container__fields1))
(assert (and (= o11 (f 3)) (and (and (= (of_rep 3) o6) (= us_null_ext__ o7)) (= us_tag o8))))
(assert (and (and (= (length (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields2)) (+ (length (mk___rep1 v__split_discrs v__split_fields3)) 1)) (= (olt (model__ (mk___rep1 v__split_discrs v__split_fields3)) (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields2))) true)) (= (let ((temp___452 (get (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__append__2__container__fields2)) (+ (last (model__ (mk___rep1 v__split_discrs v__split_fields3))) 1)))) (ite (= (attr__tag temp___452) o8) (us_dispatch_eq temp___452 o11) false)) true)))
(assert (= result3 (mk___split_fields__ref1 v__split_fields3)))
(assert (= v__split_fields4 indefinite_bounded_tagged__vect__append__2__container__fields2))
(assert (not (= (is_empty (mk___rep1 v__split_discrs v__split_fields4)) true)))
(assert (= (length (mk___rep1 v__split_discrs v__split_fields4)) 3))
(assert (= (capacity (mk___rep1 v__split_discrs v__split_fields4)) 5))
(assert (= (let ((temp___581 (f 1))) (let ((temp___580 (get (model__ (mk___rep1 v__split_discrs v__split_fields4)) 1))) (ite (= (attr__tag temp___580) (attr__tag temp___581)) (us_dispatch_eq temp___580 temp___581) false))) true))
(assert (= (let ((temp___585 (f 2))) (let ((temp___584 (get (model__ (mk___rep1 v__split_discrs v__split_fields4)) 2))) (ite (= (attr__tag temp___584) (attr__tag temp___585)) (us_dispatch_eq temp___584 temp___585) false))) true))
(assert (= (let ((temp___589 (f 3))) (let ((temp___588 (get (model__ (mk___rep1 v__split_discrs v__split_fields4)) 3))) (ite (= (attr__tag temp___588) (attr__tag temp___589)) (us_dispatch_eq temp___588 temp___589) false))) true))
(assert (= (oeq1 (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__reserve_capacity__container__fields)) (model__ (mk___rep1 v__split_discrs v__split_fields4))) true))
(assert (= result4 (mk___split_fields__ref1 v__split_fields4)))
(assert (= v__split_fields5 indefinite_bounded_tagged__vect__reserve_capacity__container__fields))
(assert (not (= (is_empty (mk___rep1 v__split_discrs v__split_fields5)) true)))
(assert (= (length (mk___rep1 v__split_discrs v__split_fields5)) 3))
(assert (= (capacity (mk___rep1 v__split_discrs v__split_fields5)) 5))
(assert (and (= indefinite_bounded_tagged__test__B_1__w__assume (copy (mk___rep1 v__split_discrs v__split_fields5) 6)) (and (= (oeq1 (model__ indefinite_bounded_tagged__test__B_1__w__assume) (model__ (mk___rep1 v__split_discrs v__split_fields5))) true) (ite (= 6 0) (= (to_rep1 (rec__indefinite_bounded_tagged__vect__vector__capacity (us_split_discrs1 indefinite_bounded_tagged__test__B_1__w__assume))) (length (mk___rep1 v__split_discrs v__split_fields5))) (= (to_rep1 (rec__indefinite_bounded_tagged__vect__vector__capacity (us_split_discrs1 indefinite_bounded_tagged__test__B_1__w__assume))) 6)))))
(assert (= result5 (mk___split_fields__ref1 (mk___split_fields1 w__split_fields))))
(assert (= w__split_fields1 (us_split_fields3 indefinite_bounded_tagged__test__B_1__w__assume)))
(assert (= w__split_discrs (us_split_discrs1 indefinite_bounded_tagged__test__B_1__w__assume)))
(assert (not (= (is_empty (mk___rep1 w__split_discrs w__split_fields1)) true)))
(assert (= (length (mk___rep1 w__split_discrs w__split_fields1)) 3))
(assert (= (capacity (mk___rep1 w__split_discrs w__split_fields1)) 6))
(assert (= (let ((temp___594 (f 1))) (let ((temp___593 (get (model__ (mk___rep1 w__split_discrs w__split_fields1)) 1))) (ite (= (attr__tag temp___593) (attr__tag temp___594)) (us_dispatch_eq temp___593 temp___594) false))) true))
(assert (= (let ((temp___598 (f 2))) (let ((temp___597 (get (model__ (mk___rep1 w__split_discrs w__split_fields1)) 2))) (ite (= (attr__tag temp___597) (attr__tag temp___598)) (us_dispatch_eq temp___597 temp___598) false))) true))
(assert (= (let ((temp___602 (f 3))) (let ((temp___601 (get (model__ (mk___rep1 w__split_discrs w__split_fields1)) 3))) (ite (= (attr__tag temp___601) (attr__tag temp___602)) (us_dispatch_eq temp___601 temp___602) false))) true))
(assert (and (and (= (length (mk___rep1 w__split_discrs w__split_fields2)) (+ (length (mk___rep1 w__split_discrs w__split_fields1)) (length (mk___rep1 v__split_discrs v__split_fields5)))) (= (ole (model__ (mk___rep1 w__split_discrs w__split_fields1)) (model__ (mk___rep1 w__split_discrs w__split_fields2))) true)) (=> (< 0 (length (mk___rep1 v__split_discrs v__split_fields5))) (= (range_shifted (model__ (mk___rep1 v__split_discrs v__split_fields5)) (model__ (mk___rep1 w__split_discrs w__split_fields2)) 1 (last (model__ (mk___rep1 v__split_discrs v__split_fields5))) (+ (- (last (model__ (mk___rep1 w__split_discrs w__split_fields1))) 1) 1)) true))))
(assert (not (= (is_empty (mk___rep1 w__split_discrs w__split_fields2)) true)))
(assert (= (length (mk___rep1 w__split_discrs w__split_fields2)) 6))
(assert (= (capacity (mk___rep1 w__split_discrs w__split_fields2)) 6))
(assert (= (let ((temp___606 (f 1))) (let ((temp___605 (get (model__ (mk___rep1 w__split_discrs w__split_fields2)) 1))) (ite (= (attr__tag temp___605) (attr__tag temp___606)) (us_dispatch_eq temp___605 temp___606) false))) true))
(assert (= (let ((temp___610 (f 2))) (let ((temp___609 (get (model__ (mk___rep1 w__split_discrs w__split_fields2)) 2))) (ite (= (attr__tag temp___609) (attr__tag temp___610)) (us_dispatch_eq temp___609 temp___610) false))) true))
(assert (= (let ((temp___614 (f 3))) (let ((temp___613 (get (model__ (mk___rep1 w__split_discrs w__split_fields2)) 3))) (ite (= (attr__tag temp___613) (attr__tag temp___614)) (us_dispatch_eq temp___613 temp___614) false))) true))
(assert (= (let ((temp___618 (f 1))) (let ((temp___617 (get (model__ (mk___rep1 w__split_discrs w__split_fields2)) 4))) (ite (= (attr__tag temp___617) (attr__tag temp___618)) (us_dispatch_eq temp___617 temp___618) false))) true))
(assert (= (let ((temp___622 (f 2))) (let ((temp___621 (get (model__ (mk___rep1 w__split_discrs w__split_fields2)) 5))) (ite (= (attr__tag temp___621) (attr__tag temp___622)) (us_dispatch_eq temp___621 temp___622) false))) true))
(assert (= (let ((temp___626 (f 3))) (let ((temp___625 (get (model__ (mk___rep1 w__split_discrs w__split_fields2)) 6))) (ite (= (attr__tag temp___625) (attr__tag temp___626)) (us_dispatch_eq temp___625 temp___626) false))) true))
(assert (and (= o9 (empty_vector Tuple0)) (= (length o9) 0)))
(assert (= (oeq1 (model__ (mk___rep1 w__split_discrs w__split_fields3)) (model__ o9)) true))
(assert (= (is_empty (mk___rep1 w__split_discrs w__split_fields3)) true))
(assert (= (oeq (mk___rep1 w__split_discrs w__split_fields3) (empty_vector Tuple0)) true))
(assert (and (= o10 (f 4)) (= o10 (mk___rep (mk___split_fields (of_rep 4) us_null_ext__) us_tag))))
(assert (and (and (= (length (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__replace_element__container__fields)) (length (mk___rep1 v__split_discrs v__split_fields5))) (= (let ((temp___430 (get (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__replace_element__container__fields)) 2))) (ite (= (attr__tag temp___430) (attr__tag o10)) (us_dispatch_eq temp___430 o10) false)) true)) (= (equal_except (model__ (mk___rep1 v__split_discrs v__split_fields5)) (model__ (mk___rep1 v__split_discrs indefinite_bounded_tagged__vect__replace_element__container__fields)) 2) true)))
(assert (= result6 (mk___split_fields__ref1 v__split_fields5)))
(assert (= v__split_fields6 indefinite_bounded_tagged__vect__replace_element__container__fields))
(assert (and (= temp___629 (f 1)) (= temp___629 (mk___rep (mk___split_fields (of_rep 1) us_null_ext__) us_tag))))
(assert (not (<= 1 1)))
(check-sat)
(exit)
