(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ext__ us_private)))))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__extension_pkg__ext__flag Bool) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Flag__projection ((a us_split_fields2)) Bool (rec__extension_pkg__ext__flag a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (Bool us_private) us_private)
(declare-fun extract__flag (us_private) Bool)
(assert (forall ((flag Bool)) (forall ((rec__ext__2 us_private)) (= (to_int1 (extract__flag (hide_ext__ flag rec__ext__2))) (to_int1 flag)))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (hide_ext__ (rec__extension_pkg__ext__flag (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__flag (rec__ext__ (us_split_fields1 r))) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (rec__extension_pkg__ext__flag (us_split_fields3 a)) (rec__extension_pkg__ext__flag (us_split_fields3 b))) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const extension_pkg__ext__flag__first__bit Int)
(declare-const extension_pkg__ext__flag__last__bit Int)
(declare-const extension_pkg__ext__flag__position Int)
(assert (<= 0 extension_pkg__ext__flag__first__bit))
(assert (< extension_pkg__ext__flag__first__bit extension_pkg__ext__flag__last__bit))
(assert (<= 0 extension_pkg__ext__flag__position))
(declare-fun user_eq1 (us_rep1 us_rep1) Bool)
(declare-const dummy1 us_rep1)
(declare-datatypes () ((ext__ref (mk_ext__ref (ext__content us_rep1)))))
(define-fun ext__ref___projection ((a ext__ref)) us_rep1 (ext__content a))
(define-fun default_initial_assumption ((temp___expr_146 us_rep1) (temp___skip_top_level_147 Bool)) Bool (= (attr__tag1 temp___expr_146) us_tag1))
(declare-fun get (us_rep1 Bool) Bool)
(declare-fun get__function_guard (Bool us_rep1 Bool) Bool)
(declare-fun get1 (Int us_rep1 Bool) Bool)
(declare-fun get__function_guard1 (Bool Int us_rep1 Bool) Bool)
(declare-const x us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert true)
(assert true)
(assert (forall ((x1 us_rep1)) (forall ((extension_pkg__body_elaborated Bool)) (! (= (to_int1 (get x1 extension_pkg__body_elaborated)) (to_int1 (get1 us_tag1 x1 extension_pkg__body_elaborated))) :pattern ((get1 us_tag1 x1 extension_pkg__body_elaborated))))))
(assert (forall ((x1 us_rep1)) (forall ((extension_pkg__body_elaborated Bool)) (! (= (= (get x1 extension_pkg__body_elaborated) true) (= extension_pkg__body_elaborated true)) :pattern ((get x1 extension_pkg__body_elaborated))))))
(define-fun default_initial_assumption1 ((temp___expr_136 us_rep) (temp___skip_top_level_137 Bool)) Bool (= (attr__tag temp___expr_136) us_tag))
(declare-const body_elaborated Bool)
(assert (= (get x body_elaborated) true))
(assert (not (= body_elaborated true)))
(check-sat)
(exit)
