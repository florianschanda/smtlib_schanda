(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index_type

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type element_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : element_type, element_type -> bool

logic dummy1 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___3__projection(a: element_type__ref) : element_type =
  (a).element_type__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq4 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type set__ref = { set__content : us_rep
}

function set__ref___2__projection(a: set__ref) : us_rep = (a).set__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic contains : us_rep, int -> bool

logic contains__function_guard : bool, us_rep, int -> prop

axiom contains__post_axiom :
  (forall container:us_rep.
  (forall item:int [contains(container, item)]. (in_range2(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range2(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : count_type, count_type -> bool

logic dummy3 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom length__post_axiom :
  (forall container:us_rep [length(container)]. in_range3(length(container)))

logic ole : us_rep, us_rep -> bool

logic ole__function_guard : bool, us_rep, us_rep -> prop

logic included_except : us_rep, us_rep, int -> bool

logic included_except__function_guard : bool, us_rep, us_rep, int -> prop

logic add : us_rep, int -> us_rep

logic add__function_guard : us_rep, us_rep, int -> prop

axiom add__post_axiom :
  (forall container:us_rep.
  (forall item:int [add(container, item)]. ((in_range2(item) and
  ((not (contains(container, item) = true)) and
  (length(container) <  2147483647))) -> ((((length(add(container,
  item)) = (length(container) + 1)) and (contains(add(container, item),
  item) = true)) and (ole(container, add(container, item)) = true)) and
  (included_except(add(container, item), container, item) = true)))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom ole__post_axiom :
  (forall left:us_rep. forall right:us_rep [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range2(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:int. (not (in_range2(item) and (contains(container,
  item) = true))))) and ((is_empty(container) = true) <->
  (length(container) = 0))))

axiom included_except__post_axiom :
  (forall left:us_rep. forall right:us_rep.
  (forall item:int [included_except(left, right, item)]. (in_range2(item) ->
  ((included_except(left, right, item) = true) <->
  (forall e:int. ((in_range2(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or (e = item))))))))

logic s : us_rep

logic i : int

logic binary_trees__all_indexes__result : us_rep

logic temp___1047 : int

logic temp___1046 : us_rep

logic j : int

logic o : int

logic j1 : int

logic o1 : bool

logic o2 : us_rep

logic s1 : us_rep

logic result : int

logic i1 : int

logic s2 : us_rep

logic i2 : int

logic result1 : us_rep

logic s3 : us_rep

logic result2 : int

logic i3 : int

logic s4 : us_rep

logic i4 : int

logic s5 : us_rep

logic i5 : int

logic s6 : us_rep

logic i6 : int

logic s7 : us_rep

logic i7 : int

logic result3 : us_rep

logic binary_trees__all_indexes__result1 : us_rep

logic binary_trees__all_indexes__result2 : us_rep

logic binary_trees__all_indexes__result3 : us_rep

logic s8 : us_rep

logic i8 : int

logic binary_trees__all_indexes__result4 : us_rep

logic s9 : us_rep

logic i9 : int

logic binary_trees__all_indexes__result5 : us_rep

axiom H : (is_empty(s) = true)

axiom H1 : (result = i)

axiom H2 : (i1 = 1)

axiom H3 : (1 <= i1)

axiom H4 : (i1 <= 100)

 (* File "a-cofuse.ads", line 49, characters 0-0 *)
goal WP_parameter_def : (length(s) = (i1 - 1))
