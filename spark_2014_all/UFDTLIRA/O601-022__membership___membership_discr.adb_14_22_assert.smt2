(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__membership_discr__root__c natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural (rec__membership_discr__root__c a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ext__ us_private)))))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__membership_discr__root__c (us_split_discrs1 a))) (to_rep (rec__membership_discr__root__c (us_split_discrs1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const membership_discr__root__c__first__bit Int)
(declare-const membership_discr__root__c__last__bit Int)
(declare-const membership_discr__root__c__position Int)
(assert (<= 0 membership_discr__root__c__first__bit))
(assert (< membership_discr__root__c__first__bit membership_discr__root__c__last__bit))
(assert (<= 0 membership_discr__root__c__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))
(declare-const us_tag1 Int)
(define-fun in_range2 ((rec__membership_discr__root__c1 Int) (a us_rep)) Bool (= rec__membership_discr__root__c1 (to_rep (rec__membership_discr__root__c (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const membership_discr__root__c__first__bit1 Int)
(declare-const membership_discr__root__c__last__bit1 Int)
(declare-const membership_discr__root__c__position1 Int)
(assert (<= 0 membership_discr__root__c__first__bit1))
(assert (< membership_discr__root__c__first__bit1 membership_discr__root__c__last__bit1))
(assert (<= 0 membership_discr__root__c__position1))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((root_02__ref (mk_root_02__ref (root_02__content us_rep)))))
(define-fun root_02__ref___projection ((a root_02__ref)) us_rep (root_02__content a))
(declare-const us_tag2 Int)
(define-fun in_range3 ((rec__membership_discr__root__c1 Int) (a us_rep)) Bool (= rec__membership_discr__root__c1 (to_rep (rec__membership_discr__root__c (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const membership_discr__root__c__first__bit2 Int)
(declare-const membership_discr__root__c__last__bit2 Int)
(declare-const membership_discr__root__c__position2 Int)
(assert (<= 0 membership_discr__root__c__first__bit2))
(assert (< membership_discr__root__c__first__bit2 membership_discr__root__c__last__bit2))
(assert (<= 0 membership_discr__root__c__position2))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((tr1S__ref (mk_tr1S__ref (tr1S__content us_rep)))))
(define-fun tr1S__ref___projection ((a tr1S__ref)) us_rep (tr1S__content a))
(define-fun dynamic_invariant ((temp___expr_266 us_rep) (temp___is_init_262 Bool) (temp___skip_constant_263 Bool) (temp___do_toplevel_264 Bool) (temp___do_typ_inv_265 Bool)) Bool (=> (not (= temp___skip_constant_263 true)) (in_range3 1 temp___expr_266)))
(define-fun default_initial_assumption ((temp___expr_268 us_rep) (temp___skip_top_level_269 Bool)) Bool (and (= (attr__tag temp___expr_268) us_tag2) (= (to_rep (rec__membership_discr__root__c (us_split_discrs1 temp___expr_268))) 1)))
(declare-const r1__split_discrs us_split_discrs)
(declare-const r1__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_215 us_rep) (temp___is_init_211 Bool) (temp___skip_constant_212 Bool) (temp___do_toplevel_213 Bool) (temp___do_typ_inv_214 Bool)) Bool (=> (not (= temp___skip_constant_212 true)) (in_range2 0 temp___expr_215)))
(define-fun default_initial_assumption1 ((temp___expr_217 us_rep) (temp___skip_top_level_218 Bool)) Bool (and (= (attr__tag temp___expr_217) us_tag1) (= (to_rep (rec__membership_discr__root__c (us_split_discrs1 temp___expr_217))) 0)))
(declare-const us Int)
(assert (and (= us 1) (in_range1 1)))
(assert (and (= r1__attr__tag us_tag2) (= (to_rep (rec__membership_discr__root__c r1__split_discrs)) 1)))
(assert (= 1 (to_rep (rec__membership_discr__root__c r1__split_discrs))))
(assert (not (= 0 (to_rep (rec__membership_discr__root__c r1__split_discrs)))))
(check-sat)
(exit)
