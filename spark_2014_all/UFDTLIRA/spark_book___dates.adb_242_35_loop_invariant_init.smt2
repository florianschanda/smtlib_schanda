(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort day_advance_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 36524) x) (<= x 36524)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (day_advance_type day_advance_type) Bool)
(declare-const dummy day_advance_type)
(declare-datatypes () ((day_advance_type__ref (mk_day_advance_type__ref (day_advance_type__content day_advance_type)))))
(define-fun day_advance_type__ref___projection ((a day_advance_type__ref)) day_advance_type (day_advance_type__content a))
(define-fun dynamic_invariant ((temp___expr_222 Int) (temp___is_init_218 Bool) (temp___skip_constant_219 Bool) (temp___do_toplevel_220 Bool) (temp___do_typ_inv_221 Bool)) Bool (=> (or (= temp___is_init_218 true) (<= (- 36524) 36524)) (in_range1 temp___expr_222)))
(declare-sort year_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (year_type year_type) Bool)
(declare-const dummy1 year_type)
(declare-datatypes () ((year_type__ref (mk_year_type__ref (year_type__content year_type)))))
(define-fun year_type__ref___projection ((a year_type__ref)) year_type (year_type__content a))
(declare-fun to_rep (year_type) Int)
(declare-fun of_rep (Int) year_type)
(assert (forall ((x year_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x year_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort month_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (month_type month_type) Bool)
(declare-const dummy2 month_type)
(declare-datatypes () ((month_type__ref (mk_month_type__ref (month_type__content month_type)))))
(define-fun month_type__ref___projection ((a month_type__ref)) month_type (month_type__content a))
(declare-fun to_rep1 (month_type) Int)
(declare-fun of_rep1 (Int) month_type)
(assert (forall ((x month_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x month_type)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort day_type 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (day_type day_type) Bool)
(declare-const dummy3 day_type)
(declare-datatypes () ((day_type__ref (mk_day_type__ref (day_type__content day_type)))))
(define-fun day_type__ref___projection ((a day_type__ref)) day_type (day_type__content a))
(declare-fun to_rep2 (day_type) Int)
(declare-fun of_rep2 (Int) day_type)
(assert (forall ((x day_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x day_type)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dates__date__day day_type) (rec__dates__date__month month_type) (rec__dates__date__year year_type)))))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) day_type (rec__dates__date__day a))
(define-fun us_split_fields_Month__projection ((a us_split_fields)) month_type (rec__dates__date__month a))
(define-fun us_split_fields_Year__projection ((a us_split_fields)) year_type (rec__dates__date__year a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep2 (rec__dates__date__day (us_split_fields1 a))) (to_rep2 (rec__dates__date__day (us_split_fields1 b)))) (= (to_rep1 (rec__dates__date__month (us_split_fields1 a))) (to_rep1 (rec__dates__date__month (us_split_fields1 b))))) (= (to_rep (rec__dates__date__year (us_split_fields1 a))) (to_rep (rec__dates__date__year (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dates__date__day__first__bit Int)
(declare-const dates__date__day__last__bit Int)
(declare-const dates__date__day__position Int)
(assert (<= 0 dates__date__day__first__bit))
(assert (< dates__date__day__first__bit dates__date__day__last__bit))
(assert (<= 0 dates__date__day__position))
(declare-const dates__date__month__first__bit Int)
(declare-const dates__date__month__last__bit Int)
(declare-const dates__date__month__position Int)
(assert (<= 0 dates__date__month__first__bit))
(assert (< dates__date__month__first__bit dates__date__month__last__bit))
(assert (<= 0 dates__date__month__position))
(declare-const dates__date__year__first__bit Int)
(declare-const dates__date__year__last__bit Int)
(declare-const dates__date__year__position Int)
(assert (<= 0 dates__date__year__first__bit))
(assert (< dates__date__year__first__bit dates__date__year__last__bit))
(assert (<= 0 dates__date__year__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((date__ref (mk_date__ref (date__content us_rep)))))
(define-fun date__ref___projection ((a date__ref)) us_rep (date__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const by__ Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun maximum_date (tuple0) us_rep)
(declare-fun maximum_date__function_guard (us_rep tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (maximum_date us_void_param) (mk___rep (mk___split_fields (of_rep2 31) (of_rep1 12) (of_rep 2099)))) :pattern ((maximum_date us_void_param)))))
(declare-fun minimum_date (tuple0) us_rep)
(declare-fun minimum_date__function_guard (us_rep tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (minimum_date us_void_param) (mk___rep (mk___split_fields (of_rep2 1) (of_rep1 1) (of_rep 2000)))) :pattern ((minimum_date us_void_param)))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const r36b Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort integer 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep3 (integer) Int)
(declare-fun of_rep3 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x integer)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t37b__ref (mk_t37b__ref (t37b__content integer)))))
(define-fun t37b__ref___projection ((a t37b__ref)) integer (t37b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const r38b Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (integer integer) Bool)
(declare-const dummy7 integer)
(declare-datatypes () ((t39b__ref (mk_t39b__ref (t39b__content integer)))))
(define-fun t39b__ref___projection ((a t39b__ref)) integer (t39b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range5 temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 2000 2099)) (in_range2 temp___expr_173)))
(define-fun dynamic_invariant3 ((temp___expr_180 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 1 12)) (in_range3 temp___expr_180)))
(define-fun dynamic_invariant4 ((temp___expr_187 Int) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool) (temp___do_typ_inv_186 Bool)) Bool (=> (or (= temp___is_init_183 true) (<= 1 31)) (in_range4 temp___expr_187)))
(declare-const current_date__split_fields day_type)
(declare-const current_date__split_fields1 month_type)
(declare-const current_date__split_fields2 year_type)
(declare-const valid Bool)
(declare-const steps Int)
(declare-const i Int)
(declare-const o day_type)
(declare-const o1 month_type)
(declare-const o2 year_type)
(declare-const result Bool)
(declare-const valid1 Bool)
(declare-const result1 Int)
(declare-const steps1 Int)
(declare-const result2 int__ref)
(declare-const i1 Int)
(declare-const result3 Bool)
(declare-const valid2 Bool)
(define-fun o3 () us_rep (mk___rep (mk___split_fields o o1 o2)))
(assert (in_range1 by__))
(assert (=> (<= (- 36524) 36524) (in_range1 steps)))
(assert (= result valid))
(assert (= valid1 (distinct 1 0)))
(assert (not (<= 0 by__)))
(assert (= result1 steps))
(assert (= steps1 (- by__)))
(assert (= steps1 r38b))
(assert (in_range1 r38b))
(assert (= result2 (mk_int__ref i)))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 r38b))
(assert (and (= o3 (minimum_date Tuple0)) (and (= (of_rep2 1) o) (and (= (of_rep1 1) o1) (= (of_rep 2000) o2)))))
(assert (= result3 (bool_eq (mk___rep (mk___split_fields current_date__split_fields current_date__split_fields1 current_date__split_fields2)) o3)))
(assert (not (= result3 true)))
(assert (= valid2 valid1))
(assert (not (not (= (bool_eq (mk___rep (mk___split_fields current_date__split_fields current_date__split_fields1 current_date__split_fields2)) (minimum_date Tuple0)) true))))
(check-sat)
(exit)
