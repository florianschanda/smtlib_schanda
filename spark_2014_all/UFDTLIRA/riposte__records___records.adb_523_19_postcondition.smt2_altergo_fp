(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type command_t

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : command_t, command_t -> bool

logic dummy : command_t

type command_t__ref = { command_t__content : command_t
}

function command_t__ref___projection(a: command_t__ref) : command_t =
  (a).command_t__content

logic to_rep : command_t -> int

logic of_rep : int -> command_t

axiom inversion_axiom :
  (forall x:command_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:command_t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type unsigned_byte

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : unsigned_byte, unsigned_byte -> bool

logic dummy1 : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref___projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

logic to_rep1 : unsigned_byte -> int

logic of_rep1 : int -> unsigned_byte

axiom inversion_axiom1 :
  (forall x:unsigned_byte [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:unsigned_byte [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__records_prooffuncs__pair__a : unsigned_byte;
rec__records_prooffuncs__pair__b : unsigned_byte
}

function us_split_fields_A__projection(a: us_split_fields) : unsigned_byte =
  (a).rec__records_prooffuncs__pair__a

function us_split_fields_B__projection(a: us_split_fields) : unsigned_byte =
  (a).rec__records_prooffuncs__pair__b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__records_prooffuncs__pair__a) = to_rep1(((b).us_split_fields1).rec__records_prooffuncs__pair__a)) and
  (to_rep1(((a).us_split_fields1).rec__records_prooffuncs__pair__b) = to_rep1(((b).us_split_fields1).rec__records_prooffuncs__pair__b))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__records_prooffuncs__pair__a) = to_rep1(((b).us_split_fields1).rec__records_prooffuncs__pair__a)) and
  (to_rep1(((a).us_split_fields1).rec__records_prooffuncs__pair__b) = to_rep1(((b).us_split_fields1).rec__records_prooffuncs__pair__b)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:unsigned_byte. forall a1:unsigned_byte. (0 <= object__size({
  us_split_fields1 = { rec__records_prooffuncs__pair__a = a;
  rec__records_prooffuncs__pair__b = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:unsigned_byte. forall a1:unsigned_byte. (0 <= object__alignment({
  us_split_fields1 = { rec__records_prooffuncs__pair__a = a;
  rec__records_prooffuncs__pair__b = a1 } })))

logic records_prooffuncs__pair__a__first__bit : int

logic records_prooffuncs__pair__a__last__bit : int

logic records_prooffuncs__pair__a__position : int

axiom records_prooffuncs__pair__a__first__bit_axiom :
  (0 <= records_prooffuncs__pair__a__first__bit)

axiom records_prooffuncs__pair__a__last__bit_axiom :
  (records_prooffuncs__pair__a__first__bit <  records_prooffuncs__pair__a__last__bit)

axiom records_prooffuncs__pair__a__position_axiom :
  (0 <= records_prooffuncs__pair__a__position)

logic records_prooffuncs__pair__b__first__bit : int

logic records_prooffuncs__pair__b__last__bit : int

logic records_prooffuncs__pair__b__position : int

axiom records_prooffuncs__pair__b__first__bit_axiom :
  (0 <= records_prooffuncs__pair__b__first__bit)

axiom records_prooffuncs__pair__b__last__bit_axiom :
  (records_prooffuncs__pair__b__first__bit <  records_prooffuncs__pair__b__last__bit)

axiom records_prooffuncs__pair__b__position_axiom :
  (0 <= records_prooffuncs__pair__b__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : unsigned_byte

logic dummy3 : unsigned_byte

type pair__ref = { pair__content : us_rep
}

function pair__ref___projection(a: pair__ref) : us_rep = (a).pair__content

type us_split_fields2 = { rec__records_prooffuncs__packet__data : us_rep;
rec__records_prooffuncs__packet__command : command_t
}

function us_split_fields_Data__projection(a: us_split_fields2) : us_rep =
  (a).rec__records_prooffuncs__packet__data

function us_split_fields_Command__projection(a: us_split_fields2) : command_t =
  (a).rec__records_prooffuncs__packet__command

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  ((((bool_eq4(((a).us_split_fields3).rec__records_prooffuncs__packet__data,
  ((b).us_split_fields3).rec__records_prooffuncs__packet__data) = true) and
  (to_rep(((a).us_split_fields3).rec__records_prooffuncs__packet__command) = to_rep(((b).us_split_fields3).rec__records_prooffuncs__packet__command))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((bool_eq4(((a).us_split_fields3).rec__records_prooffuncs__packet__data,
  ((b).us_split_fields3).rec__records_prooffuncs__packet__data) = true) and
  (to_rep(((a).us_split_fields3).rec__records_prooffuncs__packet__command) = to_rep(((b).us_split_fields3).rec__records_prooffuncs__packet__command)))) ->
  (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:unsigned_byte. forall a1:unsigned_byte. forall a2:command_t.
  (0 <= object__size1({ us_split_fields3 = {
  rec__records_prooffuncs__packet__data = { us_split_fields1 = {
  rec__records_prooffuncs__pair__a = a; rec__records_prooffuncs__pair__b = a1
  } }; rec__records_prooffuncs__packet__command = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:unsigned_byte. forall a1:unsigned_byte. forall a2:command_t.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__records_prooffuncs__packet__data = { us_split_fields1 = {
  rec__records_prooffuncs__pair__a = a; rec__records_prooffuncs__pair__b = a1
  } }; rec__records_prooffuncs__packet__command = a2 } })))

logic records_prooffuncs__packet__data__first__bit : int

logic records_prooffuncs__packet__data__last__bit : int

logic records_prooffuncs__packet__data__position : int

axiom records_prooffuncs__packet__data__first__bit_axiom :
  (0 <= records_prooffuncs__packet__data__first__bit)

axiom records_prooffuncs__packet__data__last__bit_axiom :
  (records_prooffuncs__packet__data__first__bit <  records_prooffuncs__packet__data__last__bit)

axiom records_prooffuncs__packet__data__position_axiom :
  (0 <= records_prooffuncs__packet__data__position)

logic records_prooffuncs__packet__command__first__bit : int

logic records_prooffuncs__packet__command__last__bit : int

logic records_prooffuncs__packet__command__position : int

axiom records_prooffuncs__packet__command__first__bit_axiom :
  (0 <= records_prooffuncs__packet__command__first__bit)

axiom records_prooffuncs__packet__command__last__bit_axiom :
  (records_prooffuncs__packet__command__first__bit <  records_prooffuncs__packet__command__last__bit)

axiom records_prooffuncs__packet__command__position_axiom :
  (0 <= records_prooffuncs__packet__command__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : unsigned_byte

logic dummy5 : unsigned_byte

logic dummy6 : command_t

type packet__ref = { packet__content : us_rep1
}

function packet__ref___projection(a: packet__ref) : us_rep1 =
  (a).packet__content

type record_subtype__ref = { record_subtype__content : us_rep1
}

function record_subtype__ref___projection(a: record_subtype__ref) : us_rep1 =
  (a).record_subtype__content

logic r1 : unsigned_byte

logic r11 : unsigned_byte

logic r12 : command_t

logic attr__ATTRIBUTE_ADDRESS : int

logic r2 : unsigned_byte

logic r21 : unsigned_byte

logic r22 : command_t

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "records.adb", line 520, characters 0-0 *)
goal WP_parameter_def :
  (forall records__test_record_subtype__result:bool. forall result:bool.
  forall records__test_record_subtype__result1:bool.
  forall records__test_record_subtype__result2:bool.
  forall records__test_record_subtype__result3:bool.
  forall records__test_record_subtype__result4:bool.
  forall records__test_record_subtype__result5:bool.
  (forall result1:bool.
  ((((((records__test_record_subtype__result1 = records__test_record_subtype__result2) and
  (records__test_record_subtype__result3 = records__test_record_subtype__result1)) and
  ((result = records__test_record_subtype__result) and
  (((to_rep(r12) = to_rep(r22)) and
  (records__test_record_subtype__result1 = match_bool(bool_eq4({
  us_split_fields1 = { rec__records_prooffuncs__pair__a = r1;
  rec__records_prooffuncs__pair__b = r11 } }, { us_split_fields1 = {
  rec__records_prooffuncs__pair__a = r2; rec__records_prooffuncs__pair__b =
  r21 } }), true, false))) or ((not (to_rep(r12) = to_rep(r22))) and
  (records__test_record_subtype__result1 = match_bool(bool_eq4({
  us_split_fields1 = { rec__records_prooffuncs__pair__a = r1;
  rec__records_prooffuncs__pair__b = r11 } }, { us_split_fields1 = {
  rec__records_prooffuncs__pair__a = r2; rec__records_prooffuncs__pair__b =
  r21 } }), false, false)))))) and
  ((records__test_record_subtype__result4 = records__test_record_subtype__result2) and
  (records__test_record_subtype__result5 = records__test_record_subtype__result3))) and
  (result1 = records__test_record_subtype__result4)) ->
  ((records__test_record_subtype__result4 = true) -> (bool_eq5({
  us_split_fields3 = { rec__records_prooffuncs__packet__data = {
  us_split_fields1 = { rec__records_prooffuncs__pair__a = r1;
  rec__records_prooffuncs__pair__b = r11 } };
  rec__records_prooffuncs__packet__command = r12 } }, { us_split_fields3 = {
  rec__records_prooffuncs__packet__data = { us_split_fields1 = {
  rec__records_prooffuncs__pair__a = r2; rec__records_prooffuncs__pair__b =
  r21 } }; rec__records_prooffuncs__packet__command = r22 } }) = true)))))
