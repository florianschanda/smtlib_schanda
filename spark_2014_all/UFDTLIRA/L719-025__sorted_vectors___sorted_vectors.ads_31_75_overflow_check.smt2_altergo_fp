(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type element_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : element_type, element_type -> bool

logic dummy1 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type index_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type index_type1

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index_type1, index_type1 -> bool

logic dummy3 : index_type1

type index_type__ref1 = { index_type__content1 : index_type1
}

function index_type__ref___2__projection(a: index_type__ref1) : index_type1 =
  (a).index_type__content1

type capacity_range

predicate in_range5(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : capacity_range, capacity_range -> bool

logic dummy4 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

logic to_rep : capacity_range -> int

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range5(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range5(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__sorted_vectors__my_vectors__vector__capacity :
capacity_range
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range =
  (a).rec__sorted_vectors__my_vectors__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__sorted_vectors__my_vectors__vector :
us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__sorted_vectors__my_vectors__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity = a
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity = a
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = a1 } })))

logic sorted_vectors__my_vectors__vector__capacity__first__bit : int

logic sorted_vectors__my_vectors__vector__capacity__last__bit : int

logic sorted_vectors__my_vectors__vector__capacity__position : int

axiom sorted_vectors__my_vectors__vector__capacity__first__bit_axiom :
  (0 <= sorted_vectors__my_vectors__vector__capacity__first__bit)

axiom sorted_vectors__my_vectors__vector__capacity__last__bit_axiom :
  (sorted_vectors__my_vectors__vector__capacity__first__bit <  sorted_vectors__my_vectors__vector__capacity__last__bit)

axiom sorted_vectors__my_vectors__vector__capacity__position_axiom :
  (0 <= sorted_vectors__my_vectors__vector__capacity__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : capacity_range

logic dummy6 : us_main_type

type vector__ref = { vector__content : us_rep
}

function vector__ref___projection(a: vector__ref) : us_rep =
  (a).vector__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic capacity__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container1 } })]. ((((of_int(1) = true) -> (length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  }) <= to_rep(container))) and ((not (of_int(1) = true)) -> (length({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container1 } }) <= 100))) and in_range5(length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  }))))

type extended_index

predicate in_range6(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : extended_index, extended_index -> bool

logic dummy7 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq8 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy8 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref___projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

type element_type1

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : element_type1, element_type1 -> bool

logic dummy9 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___3__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic last__function_guard : int, us_rep1 -> prop

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq7(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq7(a, b) = match_bool(bool_eq1(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq7(a, b) = match_bool(bool_eq1(length1(a), length1(b)), false,
  false)))))

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)]. ((in_range6(position) and
  ((1 <= position) and (position <= (0 + length1(container))))) ->
  in_range7(get(container, position)))))

logic model__ : us_rep -> us_rep1

logic model____function_guard : us_rep1, us_rep -> prop

axiom model____post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container1 } })]. (length1(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  })) = length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  })))

logic first_index__function_guard : int, us_rep -> prop

logic element__function_guard : int, us_rep, int -> prop

type element_type2

predicate in_range8(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : element_type2, element_type2 -> bool

logic dummy10 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___2__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

logic last_index__function_guard : int, us_rep -> prop

logic range_equal__function_guard : bool, us_rep1, us_rep1, int, int -> prop

logic range_shifted__function_guard : bool, us_rep1, us_rep1, int, int,
  int -> prop

logic my_lt : int, int -> bool

logic my_lt__function_guard : bool, int, int -> prop

logic m_elements_sorted__function_guard : bool, us_rep1 -> prop

logic is_sorted : us_rep -> bool

logic is_sorted__function_guard : bool, us_rep -> prop

axiom is_sorted__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type
  [is_sorted({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  })]. ((is_sorted({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  }) = true) <->
  (forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container1 } }))))) ->
  (forall j:int. (((i <= j) and (j <= (0 + length1(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container1 } }))))) -> ((get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  }), i) = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  }), j)) or (my_lt(get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  }), i), get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector = container1 }
  }), j)) = true))))))))

logic container__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS : int

logic new_item : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom my_lt__post_axiom : true

axiom my_lt__def_axiom :
  (forall i1:int. forall i2:int [my_lt(i1, i2)]. ((my_lt(i1, i2) = true) <->
  (i1 <  i2)))

type count_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : count_type, count_type -> bool

logic dummy11 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

type extended_index1

predicate in_range10(x: int) = ((0 <= x) and (x <= 101))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq11 : extended_index1, extended_index1 -> bool

logic dummy12 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep1 [length1(container)].
  (((0 + length1(container)) <= 100) and in_range9(length1(container))))

 (* File "a-cofove.ads", line 855, characters 0-0 *)
goal WP_parameter_def :
  (forall container__split_fields:us_main_type. forall position:int.
  forall o:int. forall o1:int. forall o2:int. forall temp___404:int.
  forall o3:int. forall o4:int. forall o5:int. forall o6:bool. forall i:int.
  forall o7:int. forall o8:bool. forall o9:bool. forall o10:int.
  forall o11:int. forall o12:int. forall o13:int. forall o14:bool.
  forall o15:bool. forall result:int. forall position1:int.
  forall result1:bool. forall result2:bool. forall position2:int.
  forall result3:int. forall position3:int. forall result4:bool.
  forall result5:bool. forall position4:int. forall position5:int.
  forall position6:int. forall position7:int.
  forall container__split_fields1:us_main_type.
  forall container__split_fields2:us_main_type. forall position8:int.
  forall container__split_fields3:us_main_type. forall position9:int.
  forall result6:bool. forall result7:bool. forall result8:bool.
  forall result9:bool. forall result10:bool. (in_range2(new_item) ->
  (((1 <= 100) -> in_range3(position)) -> ((length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }) <  to_rep(container__split_discrs)) ->
  ((((((o = 1) and (in_range4(o) and (o = 1))) and (({ int__content = result
  } = { int__content = position }) and (position1 = o))) and
  ((((((o2 = length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } })) and (in_range5(o2) and
  (((of_int(1) = true) and (o2 <= to_rep(container__split_discrs))) or
  ((not (of_int(1) = true)) and (o2 <= 100))))) and (((position1 <= o2) and
  (result2 = true)) or ((not (position1 <= o2)) and (result2 = false)))) and
  (((result2 = true) and (((o1 = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }), position1)) and (in_range8(o1) and
  (o1 = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }), position1)))) and (((o1 <  new_item) and
  (result1 = true)) or ((not (o1 <  new_item)) and (result1 = false))))) or
  ((not (result2 = true)) and (result1 = false)))) and (((result1 = true) and
  ((((temp___404 = position1) and (((position2 = 1) or (get(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
  (position2 - 1)) <  new_item)) and (((1 <= 100) ->
  in_range3(position2)) and ((((o3 = (position2 + 1)) and
  in_range3((position2 + 1))) and ((position2 = result3) and
  (position3 = o3))) and ((((((o5 = length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } })) and (in_range5(o5) and
  (((of_int(1) = true) and (o5 <= to_rep(container__split_discrs))) or
  ((not (of_int(1) = true)) and (o5 <= 100))))) and (((position3 <= o5) and
  (result5 = true)) or ((not (position3 <= o5)) and (result5 = false)))) and
  (((result5 = true) and (((o4 = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }), position3)) and (in_range8(o4) and
  (o4 = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }), position3)))) and (((o4 <  new_item) and
  (o6 = true)) or ((not (o4 <  new_item)) and (o6 = false))))) or
  ((not (result5 = true)) and (o6 = false)))) and (((not (o6 = true)) and
  (result4 = true)) or ((o6 = true) and (result4 = false)))) and
  (result4 = true)))))) and ((position3 = position4) and
  (position5 = position3))) and (({ int__content = position6 } = {
  int__content = position4 }) and (position7 = position5)))) or
  ((not (result1 = true)) and ((position1 = position6) and
  (position7 = position1))))) and ((((length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields1 } }) = (length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }) + 1)) and
  (forall i1:int. (((1 <= i1) and (i1 <= (position6 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
  i1) = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields1 } }), i1))))) and (get(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 } }),
  position6) = new_item)) and
  ((forall i1:int. (((position6 <= i1) and (i1 <= (0 + length1(model__({
   us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
   container__split_discrs }; us_split_fields1 = {
   rec__sorted_vectors__my_vectors__vector = container__split_fields }
   }))))) -> (get(model__({ us_split_discrs1 = {
   rec__sorted_vectors__my_vectors__vector__capacity =
   container__split_discrs }; us_split_fields1 = {
   rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
   i1) = get(model__({ us_split_discrs1 = {
   rec__sorted_vectors__my_vectors__vector__capacity =
   container__split_discrs }; us_split_fields1 = {
   rec__sorted_vectors__my_vectors__vector = container__split_fields1 } }),
   (i1 + 1))))) and
  (forall i1:int. ((((position6 + 1) <= i1) and
  (i1 <= ((0 + length1(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }))) + 1))) -> (get(model__({ us_split_discrs1 =
  { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
  (i1 - 1)) = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields1 } }), i1)))))))) and ((({ int__content = position8
  } = { int__content = position6 }) and
  (container__split_fields2 = container__split_fields1)) and
  ((position9 = position7) and ({ rec__sorted_vectors__my_vectors__vector =
  container__split_fields3 } = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields1 })))) -> (((((o13 = length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields2 } })) and (in_range5(o13) and
  (((of_int(1) = true) and (o13 <= to_rep(container__split_discrs))) or
  ((not (of_int(1) = true)) and (o13 <= 100))))) and (((position8 <= o13) and
  (o14 = true)) or ((not (position8 <= o13)) and (o14 = false)))) and
  ((((o12 = 1) and (in_range4(o12) and (o12 = 1))) and
  (((o12 <= position8) and (o15 = true)) or ((not (o12 <= position8)) and
  (o15 = false)))) and (result6 = match_bool(o15, o14, false)))) ->
  ((result6 = true) -> ((((o11 = length({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields2 } })) and (in_range5(o11) and
  (((of_int(1) = true) and (o11 <= to_rep(container__split_discrs))) or
  ((not (of_int(1) = true)) and (o11 <= 100))))) and (((o11 = (length({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields }
  }) + 1)) and (result7 = true)) or ((not (o11 = (length({ us_split_discrs1 =
  { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields }
  }) + 1))) and (result7 = false)))) -> ((result7 = true) ->
  ((((o10 = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields2 } }), position8)) and (in_range8(o10) and
  (o10 = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields2 } }), position8)))) and (((o10 = new_item) and
  (result8 = true)) or ((not (o10 = new_item)) and (result8 = false)))) ->
  ((result8 = true) ->
  ((((((forall i1:int. (((1 <= i1) and (i1 <= (0 + length1(model__({
       us_split_discrs1 = {
       rec__sorted_vectors__my_vectors__vector__capacity =
       container__split_discrs }; us_split_fields1 = {
       rec__sorted_vectors__my_vectors__vector = container__split_fields }
       }))))) ->
       (forall j:int. (((i1 <= j) and (j <= (0 + length1(model__({
       us_split_discrs1 = {
       rec__sorted_vectors__my_vectors__vector__capacity =
       container__split_discrs }; us_split_fields1 = {
       rec__sorted_vectors__my_vectors__vector = container__split_fields }
       }))))) -> ((get(model__({ us_split_discrs1 = {
       rec__sorted_vectors__my_vectors__vector__capacity =
       container__split_discrs }; us_split_fields1 = {
       rec__sorted_vectors__my_vectors__vector = container__split_fields }
       }), i1) = get(model__({ us_split_discrs1 = {
       rec__sorted_vectors__my_vectors__vector__capacity =
       container__split_discrs }; us_split_fields1 = {
       rec__sorted_vectors__my_vectors__vector = container__split_fields }
       }), j)) or (my_lt(get(model__({ us_split_discrs1 = {
       rec__sorted_vectors__my_vectors__vector__capacity =
       container__split_discrs }; us_split_fields1 = {
       rec__sorted_vectors__my_vectors__vector = container__split_fields }
       }), i1), get(model__({ us_split_discrs1 = {
       rec__sorted_vectors__my_vectors__vector__capacity =
       container__split_discrs }; us_split_fields1 = {
       rec__sorted_vectors__my_vectors__vector = container__split_fields }
       }), j)) = true)))))) and
  (result9 = true)) or
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (0 + length1(model__({
        us_split_discrs1 = {
        rec__sorted_vectors__my_vectors__vector__capacity =
        container__split_discrs }; us_split_fields1 = {
        rec__sorted_vectors__my_vectors__vector = container__split_fields }
        }))))) ->
        (forall j:int. (((i1 <= j) and (j <= (0 + length1(model__({
        us_split_discrs1 = {
        rec__sorted_vectors__my_vectors__vector__capacity =
        container__split_discrs }; us_split_fields1 = {
        rec__sorted_vectors__my_vectors__vector = container__split_fields }
        }))))) -> ((get(model__({ us_split_discrs1 = {
        rec__sorted_vectors__my_vectors__vector__capacity =
        container__split_discrs }; us_split_fields1 = {
        rec__sorted_vectors__my_vectors__vector = container__split_fields }
        }), i1) = get(model__({ us_split_discrs1 = {
        rec__sorted_vectors__my_vectors__vector__capacity =
        container__split_discrs }; us_split_fields1 = {
        rec__sorted_vectors__my_vectors__vector = container__split_fields }
        }), j)) or (my_lt(get(model__({ us_split_discrs1 = {
        rec__sorted_vectors__my_vectors__vector__capacity =
        container__split_discrs }; us_split_fields1 = {
        rec__sorted_vectors__my_vectors__vector = container__split_fields }
        }), i1), get(model__({ us_split_discrs1 = {
        rec__sorted_vectors__my_vectors__vector__capacity =
        container__split_discrs }; us_split_fields1 = {
        rec__sorted_vectors__my_vectors__vector = container__split_fields }
        }), j)) = true))))))) and
  (result9 = false))) and ((result9 = true) <->
  (forall i1:int. (((1 <= i1) and (i1 <= (0 + length1(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields }
  }))))) ->
  (forall j:int. (((i1 <= j) and (j <= (0 + length1(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields }
  }))))) -> ((get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }), i1) = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }), j)) or (my_lt(get(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
  i1), get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }), j)) = true)))))))) and (((result9 = true) and
  ((o9 = is_sorted({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields2 } })) and ((o9 = true) <->
  (forall i1:int. (((1 <= i1) and (i1 <= (0 + length1(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields2 }
  }))))) ->
  (forall j:int. (((i1 <= j) and (j <= (0 + length1(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields2 }
  }))))) -> ((get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields2 } }), i1) = get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields2 } }), j)) or (my_lt(get(model__({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields2 } }),
  i1), get(model__({ us_split_discrs1 = {
  rec__sorted_vectors__my_vectors__vector__capacity = container__split_discrs
  }; us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields2 } }), j)) = true))))))))) or
  ((not (result9 = true)) and (o9 = of_int(1))))) -> (((((o7 = length({
  us_split_discrs1 = { rec__sorted_vectors__my_vectors__vector__capacity =
  container__split_discrs }; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields2 }
  })) and (in_range5(o7) and (((of_int(1) = true) and
  (o7 <= to_rep(container__split_discrs))) or ((not (of_int(1) = true)) and
  (o7 <= 100))))) and (((i <= o7) and (o8 = true)) or ((not (i <= o7)) and
  (o8 = false)))) and ((((position8 + 1) <= i) and (result10 = o8)) or
  ((not ((position8 + 1) <= i)) and (result10 = false)))) ->
  ((result10 = true) -> in_range1((i - 1))))))))))))))))
