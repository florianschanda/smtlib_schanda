(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type enum

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : enum, enum -> bool

logic dummy1 : enum

type enum__ref = { enum__content : enum
}

function enum__ref___projection(a: enum__ref) : enum = (a).enum__content

logic to_rep1 : enum -> int

logic of_rep1 : int -> enum

axiom inversion_axiom1 :
  (forall x:enum [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:enum [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__p_init__t__e : enum
}

function us_split_discrs___projection(a: us_split_discrs) : enum =
  (a).rec__p_init__t__e

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p_init__t__x1 : integer; rec__p_init__t__x2 :
integer
}

function us_split_fields_X1__projection(a: us_split_fields) : integer =
  (a).rec__p_init__t__x1

function us_split_fields_X2__projection(a: us_split_fields) : integer =
  (a).rec__p_init__t__x2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate p_init__t__x2__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__p_init__t__e) = 1)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__p_init__t__e) = to_rep1(((b).us_split_discrs1).rec__p_init__t__e)) and
  ((to_rep(((a).us_split_fields1).rec__p_init__t__x1) = to_rep(((b).us_split_fields1).rec__p_init__t__x1)) and
  (p_init__t__x2__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__p_init__t__x2) = to_rep(((b).us_split_fields1).rec__p_init__t__x2))))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__p_init__t__e) = to_rep1(((b).us_split_discrs1).rec__p_init__t__e)) and
  ((to_rep(((a).us_split_fields1).rec__p_init__t__x1) = to_rep(((b).us_split_fields1).rec__p_init__t__x1)) and
  (p_init__t__x2__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__p_init__t__x2) = to_rep(((b).us_split_fields1).rec__p_init__t__x2)))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit : int

logic p_init__t__e__last__bit : int

logic p_init__t__e__position : int

axiom p_init__t__e__first__bit_axiom : (0 <= p_init__t__e__first__bit)

axiom p_init__t__e__last__bit_axiom :
  (p_init__t__e__first__bit <  p_init__t__e__last__bit)

axiom p_init__t__e__position_axiom : (0 <= p_init__t__e__position)

logic p_init__t__x1__first__bit : int

logic p_init__t__x1__last__bit : int

logic p_init__t__x1__position : int

axiom p_init__t__x1__first__bit_axiom : (0 <= p_init__t__x1__first__bit)

axiom p_init__t__x1__last__bit_axiom :
  (p_init__t__x1__first__bit <  p_init__t__x1__last__bit)

axiom p_init__t__x1__position_axiom : (0 <= p_init__t__x1__position)

logic p_init__t__x2__first__bit : int

logic p_init__t__x2__last__bit : int

logic p_init__t__x2__position : int

axiom p_init__t__x2__first__bit_axiom : (0 <= p_init__t__x2__first__bit)

axiom p_init__t__x2__last__bit_axiom :
  (p_init__t__x2__first__bit <  p_init__t__x2__last__bit)

axiom p_init__t__x2__position_axiom : (0 <= p_init__t__x2__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : enum

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : bool

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic y1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic y2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range2(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep1(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size1({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit1 : int

logic p_init__t__e__last__bit1 : int

logic p_init__t__e__position1 : int

axiom p_init__t__e__first__bit_axiom1 : (0 <= p_init__t__e__first__bit1)

axiom p_init__t__e__last__bit_axiom1 :
  (p_init__t__e__first__bit1 <  p_init__t__e__last__bit1)

axiom p_init__t__e__position_axiom1 : (0 <= p_init__t__e__position1)

logic p_init__t__x2__first__bit1 : int

logic p_init__t__x2__last__bit1 : int

logic p_init__t__x2__position1 : int

axiom p_init__t__x2__first__bit_axiom1 : (0 <= p_init__t__x2__first__bit1)

axiom p_init__t__x2__last__bit_axiom1 :
  (p_init__t__x2__first__bit1 <  p_init__t__x2__last__bit1)

axiom p_init__t__x2__position_axiom1 : (0 <= p_init__t__x2__position1)

logic p_init__t__x1__first__bit1 : int

logic p_init__t__x1__last__bit1 : int

logic p_init__t__x1__position1 : int

axiom p_init__t__x1__first__bit_axiom1 : (0 <= p_init__t__x1__first__bit1)

axiom p_init__t__x1__last__bit_axiom1 :
  (p_init__t__x1__first__bit1 <  p_init__t__x1__last__bit1)

axiom p_init__t__x1__position_axiom1 : (0 <= p_init__t__x1__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy6 : enum

logic dummy7 : integer

logic dummy8 : integer

logic dummy9 : bool

type tz1S__ref = { tz1S__content : us_rep
}

function tz1S__ref___projection(a: tz1S__ref) : us_rep = (a).tz1S__content

logic z1__split_discrs : enum

logic z1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range3(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep1(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size2({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit2 : int

logic p_init__t__e__last__bit2 : int

logic p_init__t__e__position2 : int

axiom p_init__t__e__first__bit_axiom2 : (0 <= p_init__t__e__first__bit2)

axiom p_init__t__e__last__bit_axiom2 :
  (p_init__t__e__first__bit2 <  p_init__t__e__last__bit2)

axiom p_init__t__e__position_axiom2 : (0 <= p_init__t__e__position2)

logic p_init__t__x1__first__bit2 : int

logic p_init__t__x1__last__bit2 : int

logic p_init__t__x1__position2 : int

axiom p_init__t__x1__first__bit_axiom2 : (0 <= p_init__t__x1__first__bit2)

axiom p_init__t__x1__last__bit_axiom2 :
  (p_init__t__x1__first__bit2 <  p_init__t__x1__last__bit2)

axiom p_init__t__x1__position_axiom2 : (0 <= p_init__t__x1__position2)

logic p_init__t__x2__first__bit2 : int

logic p_init__t__x2__last__bit2 : int

logic p_init__t__x2__position2 : int

axiom p_init__t__x2__first__bit_axiom2 : (0 <= p_init__t__x2__first__bit2)

axiom p_init__t__x2__last__bit_axiom2 :
  (p_init__t__x2__first__bit2 <  p_init__t__x2__last__bit2)

axiom p_init__t__x2__position_axiom2 : (0 <= p_init__t__x2__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy10 : enum

logic dummy11 : integer

logic dummy12 : integer

logic dummy13 : bool

type tz2S__ref = { tz2S__content : us_rep
}

function tz2S__ref___projection(a: tz2S__ref) : us_rep = (a).tz2S__content

logic z2__split_discrs : enum

logic z2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate in_range4(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep1(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size3({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment3({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit3 : int

logic p_init__t__e__last__bit3 : int

logic p_init__t__e__position3 : int

axiom p_init__t__e__first__bit_axiom3 : (0 <= p_init__t__e__first__bit3)

axiom p_init__t__e__last__bit_axiom3 :
  (p_init__t__e__first__bit3 <  p_init__t__e__last__bit3)

axiom p_init__t__e__position_axiom3 : (0 <= p_init__t__e__position3)

logic p_init__t__x2__first__bit3 : int

logic p_init__t__x2__last__bit3 : int

logic p_init__t__x2__position3 : int

axiom p_init__t__x2__first__bit_axiom3 : (0 <= p_init__t__x2__first__bit3)

axiom p_init__t__x2__last__bit_axiom3 :
  (p_init__t__x2__first__bit3 <  p_init__t__x2__last__bit3)

axiom p_init__t__x2__position_axiom3 : (0 <= p_init__t__x2__position3)

logic p_init__t__x1__first__bit3 : int

logic p_init__t__x1__last__bit3 : int

logic p_init__t__x1__position3 : int

axiom p_init__t__x1__first__bit_axiom3 : (0 <= p_init__t__x1__first__bit3)

axiom p_init__t__x1__last__bit_axiom3 :
  (p_init__t__x1__first__bit3 <  p_init__t__x1__last__bit3)

axiom p_init__t__x1__position_axiom3 : (0 <= p_init__t__x1__position3)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy14 : enum

logic dummy15 : integer

logic dummy16 : integer

logic dummy17 : bool

type tc1S__ref = { tc1S__content : us_rep
}

function tc1S__ref___projection(a: tc1S__ref) : us_rep = (a).tc1S__content

predicate in_range5(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep1(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size4({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment4({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit4 : int

logic p_init__t__e__last__bit4 : int

logic p_init__t__e__position4 : int

axiom p_init__t__e__first__bit_axiom4 : (0 <= p_init__t__e__first__bit4)

axiom p_init__t__e__last__bit_axiom4 :
  (p_init__t__e__first__bit4 <  p_init__t__e__last__bit4)

axiom p_init__t__e__position_axiom4 : (0 <= p_init__t__e__position4)

logic p_init__t__x2__first__bit4 : int

logic p_init__t__x2__last__bit4 : int

logic p_init__t__x2__position4 : int

axiom p_init__t__x2__first__bit_axiom4 : (0 <= p_init__t__x2__first__bit4)

axiom p_init__t__x2__last__bit_axiom4 :
  (p_init__t__x2__first__bit4 <  p_init__t__x2__last__bit4)

axiom p_init__t__x2__position_axiom4 : (0 <= p_init__t__x2__position4)

logic p_init__t__x1__first__bit4 : int

logic p_init__t__x1__last__bit4 : int

logic p_init__t__x1__position4 : int

axiom p_init__t__x1__first__bit_axiom4 : (0 <= p_init__t__x1__first__bit4)

axiom p_init__t__x1__last__bit_axiom4 :
  (p_init__t__x1__first__bit4 <  p_init__t__x1__last__bit4)

axiom p_init__t__x1__position_axiom4 : (0 <= p_init__t__x1__position4)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy18 : enum

logic dummy19 : integer

logic dummy20 : integer

logic dummy21 : bool

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref___projection(a: t1b__ref) : us_rep = (a).t1b__content

logic c1 : enum

logic c11 : integer

logic c12 : integer

logic c13 : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate in_range6(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep1(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size5({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment5({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit5 : int

logic p_init__t__e__last__bit5 : int

logic p_init__t__e__position5 : int

axiom p_init__t__e__first__bit_axiom5 : (0 <= p_init__t__e__first__bit5)

axiom p_init__t__e__last__bit_axiom5 :
  (p_init__t__e__first__bit5 <  p_init__t__e__last__bit5)

axiom p_init__t__e__position_axiom5 : (0 <= p_init__t__e__position5)

logic p_init__t__x1__first__bit5 : int

logic p_init__t__x1__last__bit5 : int

logic p_init__t__x1__position5 : int

axiom p_init__t__x1__first__bit_axiom5 : (0 <= p_init__t__x1__first__bit5)

axiom p_init__t__x1__last__bit_axiom5 :
  (p_init__t__x1__first__bit5 <  p_init__t__x1__last__bit5)

axiom p_init__t__x1__position_axiom5 : (0 <= p_init__t__x1__position5)

logic p_init__t__x2__first__bit5 : int

logic p_init__t__x2__last__bit5 : int

logic p_init__t__x2__position5 : int

axiom p_init__t__x2__first__bit_axiom5 : (0 <= p_init__t__x2__first__bit5)

axiom p_init__t__x2__last__bit_axiom5 :
  (p_init__t__x2__first__bit5 <  p_init__t__x2__last__bit5)

axiom p_init__t__x2__position_axiom5 : (0 <= p_init__t__x2__position5)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy22 : enum

logic dummy23 : integer

logic dummy24 : integer

logic dummy25 : bool

type tc2S__ref = { tc2S__content : us_rep
}

function tc2S__ref___projection(a: tc2S__ref) : us_rep = (a).tc2S__content

predicate in_range7(rec__p_init__t__e1: int, a: us_rep) =
  (rec__p_init__t__e1 = to_rep1(((a).us_split_discrs1).rec__p_init__t__e))

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size6({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment6({ us_split_discrs1 = { rec__p_init__t__e = a };
  us_split_fields1 = { rec__p_init__t__x1 = a1; rec__p_init__t__x2 = a2 };
  attr__constrained = a3 })))

logic p_init__t__e__first__bit6 : int

logic p_init__t__e__last__bit6 : int

logic p_init__t__e__position6 : int

axiom p_init__t__e__first__bit_axiom6 : (0 <= p_init__t__e__first__bit6)

axiom p_init__t__e__last__bit_axiom6 :
  (p_init__t__e__first__bit6 <  p_init__t__e__last__bit6)

axiom p_init__t__e__position_axiom6 : (0 <= p_init__t__e__position6)

logic p_init__t__x1__first__bit6 : int

logic p_init__t__x1__last__bit6 : int

logic p_init__t__x1__position6 : int

axiom p_init__t__x1__first__bit_axiom6 : (0 <= p_init__t__x1__first__bit6)

axiom p_init__t__x1__last__bit_axiom6 :
  (p_init__t__x1__first__bit6 <  p_init__t__x1__last__bit6)

axiom p_init__t__x1__position_axiom6 : (0 <= p_init__t__x1__position6)

logic p_init__t__x2__first__bit6 : int

logic p_init__t__x2__last__bit6 : int

logic p_init__t__x2__position6 : int

axiom p_init__t__x2__first__bit_axiom6 : (0 <= p_init__t__x2__first__bit6)

axiom p_init__t__x2__last__bit_axiom6 :
  (p_init__t__x2__first__bit6 <  p_init__t__x2__last__bit6)

axiom p_init__t__x2__position_axiom6 : (0 <= p_init__t__x2__position6)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy26 : enum

logic dummy27 : integer

logic dummy28 : integer

logic dummy29 : bool

type t2b__ref = { t2b__content : us_rep
}

function t2b__ref___projection(a: t2b__ref) : us_rep = (a).t2b__content

logic c2 : enum

logic c21 : integer

logic c22 : integer

logic c23 : bool

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom c1__def_axiom : ((c1 = of_rep1(0)) and (((c11 = of_rep(1)) and
  (c12 = dummy)) and (c13 = true)))

axiom c2__def_axiom : ((c2 = of_rep1(1)) and (((c21 = of_rep(1)) and
  (c22 = of_rep(2))) and (c23 = true)))

logic y1__split_fields : integer

logic y1__split_fields1 : integer

logic y1__split_discrs : enum

logic y2__split_fields : integer

logic y2__split_fields1 : integer

logic y2__split_discrs : enum

logic z1__split_fields : integer

logic z1__split_fields1 : integer

logic us : int

logic o : enum

logic o1 : integer

logic o2 : integer

logic o3 : integer

logic o4 : enum

logic o5 : enum

logic o6 : integer

logic o7 : integer

logic o8 : bool

logic o9 : enum

logic o10 : integer

logic o11 : integer

logic o12 : bool

logic o13 : enum

logic o14 : integer

logic o15 : integer

logic o16 : bool

logic run__c1__assume : enum

logic run__c1__assume1 : integer

logic run__c1__assume2 : integer

logic run__c1__assume3 : bool

logic us1 : int

logic o17 : enum

logic o18 : integer

logic o19 : integer

logic o20 : integer

logic o21 : integer

logic o22 : enum

logic o23 : enum

logic o24 : integer

logic o25 : integer

logic o26 : bool

logic o27 : enum

logic o28 : integer

logic o29 : integer

logic o30 : bool

logic o31 : enum

logic o32 : integer

logic o33 : integer

logic o34 : bool

logic run__c2__assume : enum

logic run__c2__assume1 : integer

logic run__c2__assume2 : integer

logic run__c2__assume3 : bool

logic us2 : int

logic us3 : int

logic result : integer

logic result1 : integer

logic y1__split_fields2 : integer

logic y1__split_fields3 : integer

logic result2 : enum

logic y1__split_discrs1 : enum

logic result3 : integer

logic result4 : integer

logic y2__split_fields2 : integer

logic y2__split_fields3 : integer

logic result5 : enum

logic y2__split_discrs1 : enum

logic result6 : integer

logic result7 : integer

logic z1__split_fields2 : integer

logic z1__split_fields3 : integer

axiom H : ((us = 0) and in_range1(0))

axiom H1 : (to_rep(o1) = 1)

axiom H2 : (o1 = o2)

axiom H3 : (dummy = o3)

axiom H4 : (to_rep1(o) = 0)

axiom H5 : (o = o4)

axiom H6 : (o5 = o4)

axiom H7 : (o6 = o2)

axiom H8 : (o7 = o3)

axiom H9 : (true = o8)

axiom H10 : ((o9 = o5) and (((o10 = o6) and (o11 = o7)) and (o12 = o8)))

axiom H11 : ((o13 = o9) and (((o14 = o10) and (o15 = o11)) and (o16 = o12)))

axiom H12 : ((run__c1__assume = o13) and (((run__c1__assume1 = o14) and
  (run__c1__assume2 = o15)) and (run__c1__assume3 = o16)))

axiom H13 : ((run__c1__assume = c1) and (((run__c1__assume1 = c11) and
  (run__c1__assume2 = c12)) and (run__c1__assume3 = c13)))

axiom H14 : ((0 = to_rep1(c1)) and (c13 = true))

axiom H15 : ((us1 = 1) and in_range1(1))

axiom H16 : (to_rep(o18) = 2)

axiom H17 : (to_rep(o19) = 1)

axiom H18 : ((o20 = o19) and (o21 = o18))

axiom H19 : (to_rep1(o17) = 1)

axiom H20 : (o22 = o17)

axiom H21 : ((o23 = o22) and (((o24 = o20) and (o25 = o21)) and
  (o26 = true)))

axiom H22 : ((o27 = o23) and (((o28 = o24) and (o29 = o25)) and (o30 = o26)))

axiom H23 : ((o31 = o27) and (((o32 = o28) and (o33 = o29)) and (o34 = o30)))

axiom H24 : ((run__c2__assume = o31) and (((run__c2__assume1 = o32) and
  (run__c2__assume2 = o33)) and (run__c2__assume3 = o34)))

axiom H25 : ((run__c2__assume = c2) and (((run__c2__assume1 = c21) and
  (run__c2__assume2 = c22)) and (run__c2__assume3 = c23)))

axiom H26 : ((1 = to_rep1(c2)) and (c23 = true))

axiom H27 : ((result = y1__split_fields) and (result1 = y1__split_fields1))

axiom H28 : ((y1__split_fields2 = c11) and (y1__split_fields3 = c12))

axiom H29 : (result2 = y1__split_discrs)

axiom H30 : (y1__split_discrs1 = c1)

axiom H31 : (y1__attr__constrained = false)

axiom H32 : ((result3 = y2__split_fields) and (result4 = y2__split_fields1))

axiom H33 : ((y2__split_fields2 = c21) and (y2__split_fields3 = c22))

axiom H34 : (result5 = y2__split_discrs)

axiom H35 : (y2__split_discrs1 = c2)

axiom H36 : (y2__attr__constrained = false)

 (* File "run.adb", line 15, characters 0-0 *)
goal WP_parameter_def : in_range1(0)
