(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type minutes_t

predicate in_range3(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : minutes_t, minutes_t -> bool

logic dummy2 : minutes_t

type minutes_t__ref = { minutes_t__content : minutes_t
}

function minutes_t__ref___projection(a: minutes_t__ref) : minutes_t =
  (a).minutes_t__content

logic to_rep1 : minutes_t -> int

logic of_rep1 : int -> minutes_t

axiom inversion_axiom1 :
  (forall x:minutes_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:minutes_t [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type seconds_t

predicate in_range4(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : seconds_t, seconds_t -> bool

logic dummy3 : seconds_t

type seconds_t__ref = { seconds_t__content : seconds_t
}

function seconds_t__ref___projection(a: seconds_t__ref) : seconds_t =
  (a).seconds_t__content

logic to_rep2 : seconds_t -> int

logic of_rep2 : int -> seconds_t

axiom inversion_axiom2 :
  (forall x:seconds_t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:seconds_t [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__time__t__hours : natural; rec__time__t__minutes
: minutes_t; rec__time__t__seconds : seconds_t
}

function us_split_fields_Hours__projection(a: us_split_fields) : natural =
  (a).rec__time__t__hours

function us_split_fields_Minutes__projection(a: us_split_fields) : minutes_t =
  (a).rec__time__t__minutes

function us_split_fields_Seconds__projection(a: us_split_fields) : seconds_t =
  (a).rec__time__t__seconds

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__time__t__hours) = to_rep(((b).us_split_fields1).rec__time__t__hours)) and
  (to_rep1(((a).us_split_fields1).rec__time__t__minutes) = to_rep1(((b).us_split_fields1).rec__time__t__minutes))) and
  (to_rep2(((a).us_split_fields1).rec__time__t__seconds) = to_rep2(((b).us_split_fields1).rec__time__t__seconds))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__time__t__hours) = to_rep(((b).us_split_fields1).rec__time__t__hours)) and
  (to_rep1(((a).us_split_fields1).rec__time__t__minutes) = to_rep1(((b).us_split_fields1).rec__time__t__minutes))) and
  (to_rep2(((a).us_split_fields1).rec__time__t__seconds) = to_rep2(((b).us_split_fields1).rec__time__t__seconds)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:minutes_t. forall a2:seconds_t.
  (0 <= object__size({ us_split_fields1 = { rec__time__t__hours = a;
  rec__time__t__minutes = a1; rec__time__t__seconds = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:minutes_t. forall a2:seconds_t.
  (0 <= object__alignment({ us_split_fields1 = { rec__time__t__hours = a;
  rec__time__t__minutes = a1; rec__time__t__seconds = a2 } })))

logic time__t__hours__first__bit : int

logic time__t__hours__last__bit : int

logic time__t__hours__position : int

axiom time__t__hours__first__bit_axiom : (0 <= time__t__hours__first__bit)

axiom time__t__hours__last__bit_axiom :
  (time__t__hours__first__bit <  time__t__hours__last__bit)

axiom time__t__hours__position_axiom : (0 <= time__t__hours__position)

logic time__t__minutes__first__bit : int

logic time__t__minutes__last__bit : int

logic time__t__minutes__position : int

axiom time__t__minutes__first__bit_axiom :
  (0 <= time__t__minutes__first__bit)

axiom time__t__minutes__last__bit_axiom :
  (time__t__minutes__first__bit <  time__t__minutes__last__bit)

axiom time__t__minutes__position_axiom : (0 <= time__t__minutes__position)

logic time__t__seconds__first__bit : int

logic time__t__seconds__last__bit : int

logic time__t__seconds__position : int

axiom time__t__seconds__first__bit_axiom :
  (0 <= time__t__seconds__first__bit)

axiom time__t__seconds__last__bit_axiom :
  (time__t__seconds__first__bit <  time__t__seconds__last__bit)

axiom time__t__seconds__position_axiom : (0 <= time__t__seconds__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : natural

logic dummy5 : minutes_t

logic dummy6 : seconds_t

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic max : natural

logic max1 : minutes_t

logic max2 : seconds_t

logic attr__ATTRIBUTE_ADDRESS : int

logic x : natural

logic x1 : minutes_t

logic x2 : seconds_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom max__def_axiom : ((max = of_rep(2147483647)) and
  ((max1 = of_rep1(59)) and (max2 = of_rep2(59))))

logic result____split_fields : natural

logic result____split_fields1 : minutes_t

logic result____split_fields2 : seconds_t

logic time__t_increment__result : natural

logic time__t_increment__result1 : minutes_t

logic time__t_increment__result2 : seconds_t

logic o : seconds_t

logic o1 : minutes_t

logic o2 : natural

logic o3 : natural

logic o4 : minutes_t

logic o5 : seconds_t

logic temp___166 : natural

logic temp___1661 : minutes_t

logic temp___1662 : seconds_t

logic o6 : int

logic o7 : seconds_t

logic o8 : natural

logic o9 : minutes_t

logic o10 : seconds_t

logic temp___165 : natural

logic temp___1651 : minutes_t

logic temp___1652 : seconds_t

logic o11 : seconds_t

logic o12 : natural

logic o13 : minutes_t

logic o14 : seconds_t

logic temp___157 : natural

logic temp___1571 : minutes_t

logic temp___1572 : seconds_t

logic o15 : int

logic o16 : minutes_t

logic o17 : natural

logic o18 : minutes_t

logic o19 : seconds_t

logic temp___163 : natural

logic temp___1631 : minutes_t

logic temp___1632 : seconds_t

logic o20 : minutes_t

logic o21 : natural

logic o22 : minutes_t

logic o23 : seconds_t

logic temp___159 : natural

logic temp___1591 : minutes_t

logic temp___1592 : seconds_t

logic o24 : int

logic o25 : natural

logic o26 : natural

logic o27 : minutes_t

logic o28 : seconds_t

logic temp___161 : natural

logic temp___1611 : minutes_t

logic temp___1612 : seconds_t

logic o29 : int

logic result : natural

logic result1 : minutes_t

logic result2 : seconds_t

logic result____split_fields3 : natural

logic result____split_fields4 : minutes_t

logic result____split_fields5 : seconds_t

logic result3 : natural

logic result4 : minutes_t

logic result5 : seconds_t

logic result____split_fields6 : natural

logic result____split_fields7 : minutes_t

logic result____split_fields8 : seconds_t

logic result6 : natural

logic result7 : minutes_t

logic result8 : seconds_t

logic time__t_increment__result3 : natural

logic time__t_increment__result4 : minutes_t

logic time__t_increment__result5 : seconds_t

logic result9 : natural

logic result10 : minutes_t

logic result11 : seconds_t

logic result____split_fields9 : natural

logic result____split_fields10 : minutes_t

logic result____split_fields11 : seconds_t

logic result12 : natural

logic result13 : minutes_t

logic result14 : seconds_t

logic result____split_fields12 : natural

logic result____split_fields13 : minutes_t

logic result____split_fields14 : seconds_t

logic result15 : natural

logic result16 : minutes_t

logic result17 : seconds_t

logic time__t_increment__result6 : natural

logic time__t_increment__result7 : minutes_t

logic time__t_increment__result8 : seconds_t

logic result18 : natural

logic result19 : minutes_t

logic result20 : seconds_t

logic result____split_fields15 : natural

logic result____split_fields16 : minutes_t

logic result____split_fields17 : seconds_t

logic result21 : natural

logic result22 : minutes_t

logic result23 : seconds_t

logic result____split_fields18 : natural

logic result____split_fields19 : minutes_t

logic result____split_fields20 : seconds_t

logic result24 : natural

logic result25 : minutes_t

logic result26 : seconds_t

logic time__t_increment__result9 : natural

logic time__t_increment__result10 : minutes_t

logic time__t_increment__result11 : seconds_t

logic result____split_fields21 : natural

logic result____split_fields22 : minutes_t

logic result____split_fields23 : seconds_t

logic time__t_increment__result12 : natural

logic time__t_increment__result13 : minutes_t

logic time__t_increment__result14 : seconds_t

logic result____split_fields24 : natural

logic result____split_fields25 : minutes_t

logic result____split_fields26 : seconds_t

logic time__t_increment__result15 : natural

logic time__t_increment__result16 : minutes_t

logic time__t_increment__result17 : seconds_t

logic result____split_fields27 : natural

logic result____split_fields28 : minutes_t

logic result____split_fields29 : seconds_t

logic time__t_increment__result18 : natural

logic time__t_increment__result19 : minutes_t

logic time__t_increment__result20 : seconds_t

logic result____split_fields30 : natural

logic result____split_fields31 : minutes_t

logic result____split_fields32 : seconds_t

logic time__t_increment__result21 : natural

logic time__t_increment__result22 : minutes_t

logic time__t_increment__result23 : seconds_t

logic result____split_fields33 : natural

logic result____split_fields34 : minutes_t

logic result____split_fields35 : seconds_t

logic time__t_increment__result24 : natural

logic time__t_increment__result25 : minutes_t

logic time__t_increment__result26 : seconds_t

logic result____split_fields36 : natural

logic result____split_fields37 : minutes_t

logic result____split_fields38 : seconds_t

logic time__t_increment__result27 : natural

logic time__t_increment__result28 : minutes_t

logic time__t_increment__result29 : seconds_t

logic result____split_fields39 : natural

logic result____split_fields40 : minutes_t

logic result____split_fields41 : seconds_t

logic time__t_increment__result30 : natural

logic time__t_increment__result31 : minutes_t

logic time__t_increment__result32 : seconds_t

logic result____split_fields42 : natural

logic result____split_fields43 : minutes_t

logic result____split_fields44 : seconds_t

logic time__t_increment__result33 : natural

logic time__t_increment__result34 : minutes_t

logic time__t_increment__result35 : seconds_t

axiom H : (to_rep2(o) = 59)

axiom H1 : (to_rep1(o1) = 59)

axiom H2 : (to_rep(o2) = 2147483647)

axiom H3 : (o2 = o3)

axiom H4 : (o1 = o4)

axiom H5 : (o = o5)

axiom H6 : (temp___166 = o3)

axiom H7 : (temp___1661 = o4)

axiom H8 : (temp___1662 = o5)

axiom H9 : ((temp___166 = max) and ((temp___1661 = max1) and
  (temp___1662 = max2)))

axiom H10 : (not (bool_eq6({ us_split_fields1 = { rec__time__t__hours = x;
  rec__time__t__minutes = x1; rec__time__t__seconds = x2 } }, {
  us_split_fields1 = { rec__time__t__hours = max; rec__time__t__minutes =
  max1; rec__time__t__seconds = max2 } }) = true))

axiom H11 : ((result = result____split_fields) and
  ((result1 = result____split_fields1) and
  (result2 = result____split_fields2)))

axiom H12 : ((result____split_fields3 = x) and
  ((result____split_fields4 = x1) and (result____split_fields5 = x2)))

axiom H13 :
  (((((time__t_increment__result24 = time__t_increment__result18) and
  ((time__t_increment__result25 = time__t_increment__result19) and
  (time__t_increment__result26 = time__t_increment__result20))) and
  ((result____split_fields33 = result____split_fields27) and
  ((result____split_fields34 = result____split_fields28) and
  (result____split_fields35 = result____split_fields29)))) and
  (((time__t_increment__result27 = time__t_increment__result21) and
  ((time__t_increment__result28 = time__t_increment__result22) and
  (time__t_increment__result29 = time__t_increment__result23))) and
  ((result____split_fields36 = result____split_fields30) and
  ((result____split_fields37 = result____split_fields31) and
  (result____split_fields38 = result____split_fields32))))) and
  (((to_rep2(x2) <  59) ->
  (((((time__t_increment__result18 = time__t_increment__result3) and
  ((time__t_increment__result19 = time__t_increment__result4) and
  (time__t_increment__result20 = time__t_increment__result5))) and
  ((result____split_fields27 = result____split_fields6) and
  ((result____split_fields28 = result____split_fields7) and
  (result____split_fields29 = result____split_fields8)))) and
  (((time__t_increment__result21 = time__t_increment__result3) and
  ((time__t_increment__result22 = time__t_increment__result4) and
  (time__t_increment__result23 = time__t_increment__result5))) and
  ((result____split_fields30 = result____split_fields6) and
  ((result____split_fields31 = result____split_fields7) and
  (result____split_fields32 = result____split_fields8))))) and
  (((((((o6 = (to_rep2(result____split_fields5) + 1)) and
  in_range4((to_rep2(result____split_fields5) + 1))) and
  (to_rep2(o7) = o6)) and ((result____split_fields3 = o8) and
  ((result____split_fields4 = o9) and (o7 = o10)))) and
  ((temp___165 = o8) and ((temp___1651 = o9) and (temp___1652 = o10)))) and
  (((result3 = result____split_fields3) and
  ((result4 = result____split_fields4) and
  (result5 = result____split_fields5))) and
  ((result____split_fields6 = temp___165) and
  ((result____split_fields7 = temp___1651) and
  (result____split_fields8 = temp___1652))))) and
  (((result6 = time__t_increment__result) and
  ((result7 = time__t_increment__result1) and
  (result8 = time__t_increment__result2))) and
  ((time__t_increment__result3 = result____split_fields6) and
  ((time__t_increment__result4 = result____split_fields7) and
  (time__t_increment__result5 = result____split_fields8))))))) and
  ((not (to_rep2(x2) <  59)) ->
  (((((time__t_increment__result18 = time__t_increment__result12) and
  ((time__t_increment__result19 = time__t_increment__result13) and
  (time__t_increment__result20 = time__t_increment__result14))) and
  ((result____split_fields27 = result____split_fields21) and
  ((result____split_fields28 = result____split_fields22) and
  (result____split_fields29 = result____split_fields23)))) and
  (((time__t_increment__result21 = time__t_increment__result15) and
  ((time__t_increment__result22 = time__t_increment__result16) and
  (time__t_increment__result23 = time__t_increment__result17))) and
  ((result____split_fields30 = result____split_fields24) and
  ((result____split_fields31 = result____split_fields25) and
  (result____split_fields32 = result____split_fields26))))) and
  (((((to_rep2(o11) = 0) and ((result____split_fields3 = o12) and
  ((result____split_fields4 = o13) and (o11 = o14)))) and
  ((temp___157 = o12) and ((temp___1571 = o13) and (temp___1572 = o14)))) and
  (((result9 = result____split_fields3) and
  ((result10 = result____split_fields4) and
  (result11 = result____split_fields5))) and
  ((result____split_fields9 = temp___157) and
  ((result____split_fields10 = temp___1571) and
  (result____split_fields11 = temp___1572))))) and (((to_rep1(x1) <  59) ->
  (((((time__t_increment__result12 = time__t_increment__result6) and
  ((time__t_increment__result13 = time__t_increment__result7) and
  (time__t_increment__result14 = time__t_increment__result8))) and
  ((result____split_fields21 = result____split_fields12) and
  ((result____split_fields22 = result____split_fields13) and
  (result____split_fields23 = result____split_fields14)))) and
  (((time__t_increment__result15 = time__t_increment__result6) and
  ((time__t_increment__result16 = time__t_increment__result7) and
  (time__t_increment__result17 = time__t_increment__result8))) and
  ((result____split_fields24 = result____split_fields12) and
  ((result____split_fields25 = result____split_fields13) and
  (result____split_fields26 = result____split_fields14))))) and
  (((((((o15 = (to_rep1(result____split_fields10) + 1)) and
  in_range3((to_rep1(result____split_fields10) + 1))) and
  (to_rep1(o16) = o15)) and ((result____split_fields9 = o17) and
  ((o16 = o18) and (result____split_fields11 = o19)))) and
  ((temp___163 = o17) and ((temp___1631 = o18) and (temp___1632 = o19)))) and
  (((result12 = result____split_fields9) and
  ((result13 = result____split_fields10) and
  (result14 = result____split_fields11))) and
  ((result____split_fields12 = temp___163) and
  ((result____split_fields13 = temp___1631) and
  (result____split_fields14 = temp___1632))))) and
  (((result15 = time__t_increment__result) and
  ((result16 = time__t_increment__result1) and
  (result17 = time__t_increment__result2))) and
  ((time__t_increment__result6 = result____split_fields12) and
  ((time__t_increment__result7 = result____split_fields13) and
  (time__t_increment__result8 = result____split_fields14))))))) and
  ((not (to_rep1(x1) <  59)) ->
  (((((time__t_increment__result12 = time__t_increment__result9) and
  ((time__t_increment__result13 = time__t_increment__result10) and
  (time__t_increment__result14 = time__t_increment__result11))) and
  ((result____split_fields21 = result____split_fields18) and
  ((result____split_fields22 = result____split_fields19) and
  (result____split_fields23 = result____split_fields20)))) and
  (((time__t_increment__result15 = time__t_increment__result9) and
  ((time__t_increment__result16 = time__t_increment__result10) and
  (time__t_increment__result17 = time__t_increment__result11))) and
  ((result____split_fields24 = result____split_fields18) and
  ((result____split_fields25 = result____split_fields19) and
  (result____split_fields26 = result____split_fields20))))) and
  (((((to_rep1(o20) = 0) and ((result____split_fields9 = o21) and
  ((o20 = o22) and (result____split_fields11 = o23)))) and
  ((temp___159 = o21) and ((temp___1591 = o22) and (temp___1592 = o23)))) and
  (((result18 = result____split_fields9) and
  ((result19 = result____split_fields10) and
  (result20 = result____split_fields11))) and
  ((result____split_fields15 = temp___159) and
  ((result____split_fields16 = temp___1591) and
  (result____split_fields17 = temp___1592))))) and
  (((((((o24 = (to_rep(result____split_fields15) + 1)) and
  in_range1((to_rep(result____split_fields15) + 1))) and
  (to_rep(o25) = o24)) and ((o25 = o26) and
  ((result____split_fields16 = o27) and
  (result____split_fields17 = o28)))) and ((temp___161 = o26) and
  ((temp___1611 = o27) and (temp___1612 = o28)))) and
  (((result21 = result____split_fields15) and
  ((result22 = result____split_fields16) and
  (result23 = result____split_fields17))) and
  ((result____split_fields18 = temp___161) and
  ((result____split_fields19 = temp___1611) and
  (result____split_fields20 = temp___1612))))) and
  (((result24 = time__t_increment__result) and
  ((result25 = time__t_increment__result1) and
  (result26 = time__t_increment__result2))) and
  ((time__t_increment__result9 = result____split_fields18) and
  ((time__t_increment__result10 = result____split_fields19) and
  (time__t_increment__result11 = result____split_fields20))))))))))))))

axiom H14 : ((time__t_increment__result30 = time__t_increment__result24) and
  ((time__t_increment__result31 = time__t_increment__result25) and
  (time__t_increment__result32 = time__t_increment__result26)))

axiom H15 : ((result____split_fields39 = result____split_fields33) and
  ((result____split_fields40 = result____split_fields34) and
  (result____split_fields41 = result____split_fields35)))

axiom H16 : ((time__t_increment__result33 = time__t_increment__result27) and
  ((time__t_increment__result34 = time__t_increment__result28) and
  (time__t_increment__result35 = time__t_increment__result29)))

axiom H17 : ((result____split_fields42 = result____split_fields36) and
  ((result____split_fields43 = result____split_fields37) and
  (result____split_fields44 = result____split_fields38)))

axiom H18 : ((bool_lt(to_rep2(x2), 59) = true) ->
  (((to_rep2(time__t_increment__result32) = (to_rep2(x2) + 1)) and
  (to_rep1(time__t_increment__result31) = to_rep1(x1))) and
  (to_rep(time__t_increment__result30) = to_rep(x))))

axiom H19 : ((match_bool(bool_eq(to_rep2(x2), 59), bool_lt(to_rep1(x1), 59),
  false) = true) -> (((to_rep2(time__t_increment__result32) = 0) and
  (to_rep1(time__t_increment__result31) = (to_rep1(x1) + 1))) and
  (to_rep(time__t_increment__result30) = to_rep(x))))

axiom H20 : (match_bool(bool_eq(to_rep2(x2), 59), bool_eq(to_rep1(x1), 59),
  false) = true)

 (* File "time.ads", line 6, characters 0-0 *)
goal WP_parameter_def : (to_rep2(time__t_increment__result32) = 0)
