(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dispatching_result__root__f1 natural) (rec__ext__ us_private)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) natural (rec__dispatching_result__root__f1 a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__dispatching_result__root__f1 (us_split_fields1 a))) (to_rep (rec__dispatching_result__root__f1 (us_split_fields1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dispatching_result__root__f1__first__bit Int)
(declare-const dispatching_result__root__f1__last__bit Int)
(declare-const dispatching_result__root__f1__position Int)
(assert (<= 0 dispatching_result__root__f1__first__bit))
(assert (< dispatching_result__root__f1__first__bit dispatching_result__root__f1__last__bit))
(assert (<= 0 dispatching_result__root__f1__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))
(declare-const v Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun default_initial_assumption ((temp___expr_159 us_rep) (temp___skip_top_level_160 Bool)) Bool (= (attr__tag temp___expr_159) us_tag))
(declare-const dispatching_result__init__result natural)
(declare-const dispatching_result__init__result1 us_private)
(declare-const dispatching_result__init__result2 Int)
(declare-const o natural)
(declare-const o1 natural)
(declare-const o2 us_private)
(declare-const o3 natural)
(declare-const o4 us_private)
(declare-const o5 Int)
(declare-const result natural)
(declare-const result1 us_private)
(declare-const result2 Int)
(declare-const dispatching_result__init__result3 natural)
(declare-const dispatching_result__init__result4 us_private)
(declare-const dispatching_result__init__result5 Int)
(declare-const dispatching_result__init__result6 natural)
(declare-const dispatching_result__init__result7 us_private)
(declare-const dispatching_result__init__result8 Int)
(declare-const dispatching_result__init__result9 natural)
(declare-const dispatching_result__init__result10 us_private)
(declare-const dispatching_result__init__result11 Int)
(declare-const dispatching_result__init__result12 natural)
(declare-const dispatching_result__init__result13 us_private)
(declare-const dispatching_result__init__result14 Int)
(declare-const dispatching_result__init__result15 natural)
(declare-const dispatching_result__init__result16 us_private)
(declare-const dispatching_result__init__result17 Int)
(define-fun dispatching_result__init__result18 () us_rep (mk___rep (mk___split_fields dispatching_result__init__result3 dispatching_result__init__result4) dispatching_result__init__result5))
(declare-const result3 natural)
(declare-const result4 us_private)
(declare-const result5 Int)
(assert (in_range v))
(assert (= dispatching_result__init__result6 dispatching_result__init__result3))
(assert (= dispatching_result__init__result7 dispatching_result__init__result4))
(assert (= dispatching_result__init__result8 dispatching_result__init__result5))
(assert (= (mk___rep (mk___split_fields dispatching_result__init__result9 dispatching_result__init__result10) dispatching_result__init__result11) dispatching_result__init__result18))
(assert (= (to_rep o) v))
(assert (= o o1))
(assert (= us_null_ext__ o2))
(assert (= o3 o1))
(assert (= o4 o2))
(assert (= us_tag o5))
(assert (= result dispatching_result__init__result))
(assert (= result1 dispatching_result__init__result1))
(assert (= result2 dispatching_result__init__result2))
(assert (= dispatching_result__init__result18 (mk___rep (mk___split_fields o3 o4) o5)))
(assert (= (mk_root__ref (mk___rep (mk___split_fields dispatching_result__init__result12 dispatching_result__init__result13) dispatching_result__init__result14)) (mk_root__ref (mk___rep (mk___split_fields dispatching_result__init__result6 dispatching_result__init__result7) dispatching_result__init__result8))))
(assert (= dispatching_result__init__result15 dispatching_result__init__result9))
(assert (= dispatching_result__init__result16 dispatching_result__init__result10))
(assert (= dispatching_result__init__result17 dispatching_result__init__result11))
(assert (= result3 dispatching_result__init__result12))
(assert (= result4 dispatching_result__init__result13))
(assert (= result5 dispatching_result__init__result14))
(assert (not (= (to_rep dispatching_result__init__result12) v)))
(check-sat)
(exit)
