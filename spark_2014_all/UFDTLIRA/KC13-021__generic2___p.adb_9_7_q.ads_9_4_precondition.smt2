(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun qf1 (Int) Int)
(declare-fun qf1__function_guard (Int Int) Bool)
(assert (forall ((j Int)) (! (=> (dynamic_invariant j true true true) (dynamic_invariant (qf1 j) true false true)) :pattern ((qf1 j)))))
(declare-sort t1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (t1 t1) Bool)
(declare-const dummy1 t1)
(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content t1)))))
(define-fun t1__ref___projection ((a t1__ref)) t1 (t1__content a))
(define-fun dynamic_invariant1 ((temp___expr_135 Int) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_135)))
(declare-fun to_rep1 (t1) Int)
(declare-fun of_rep1 (Int) t1)
(assert (forall ((x t1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x t1)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t3 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (t3 t3) Bool)
(declare-const dummy2 t3)
(declare-datatypes () ((t3__ref (mk_t3__ref (t3__content t3)))))
(define-fun t3__ref___projection ((a t3__ref)) t3 (t3__content a))
(define-fun dynamic_invariant2 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 0 2147483647)) (in_range2 temp___expr_141)))
(declare-fun to_rep2 (t3) Int)
(declare-fun of_rep2 (Int) t3)
(assert (forall ((x t3)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x t3)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__q__p1__r__a t1) (rec__q__p1__r__b Bool) (rec__q__p1__r__c t3) (rec__q__p1__r__d integer)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) t1 (rec__q__p1__r__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) Bool (rec__q__p1__r__b a))
(define-fun us_split_fields_C__projection ((a us_split_fields)) t3 (rec__q__p1__r__c a))
(define-fun us_split_fields_D__projection ((a us_split_fields)) integer (rec__q__p1__r__d a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep1 (rec__q__p1__r__a (us_split_fields1 a))) (to_rep1 (rec__q__p1__r__a (us_split_fields1 b)))) (= (rec__q__p1__r__b (us_split_fields1 a)) (rec__q__p1__r__b (us_split_fields1 b)))) (= (to_rep2 (rec__q__p1__r__c (us_split_fields1 a))) (to_rep2 (rec__q__p1__r__c (us_split_fields1 b))))) (= (to_rep (rec__q__p1__r__d (us_split_fields1 a))) (to_rep (rec__q__p1__r__d (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const q__p1__r__a__first__bit Int)
(declare-const q__p1__r__a__last__bit Int)
(declare-const q__p1__r__a__position Int)
(assert (<= 0 q__p1__r__a__first__bit))
(assert (< q__p1__r__a__first__bit q__p1__r__a__last__bit))
(assert (<= 0 q__p1__r__a__position))
(declare-const q__p1__r__b__first__bit Int)
(declare-const q__p1__r__b__last__bit Int)
(declare-const q__p1__r__b__position Int)
(assert (<= 0 q__p1__r__b__first__bit))
(assert (< q__p1__r__b__first__bit q__p1__r__b__last__bit))
(assert (<= 0 q__p1__r__b__position))
(declare-const q__p1__r__c__first__bit Int)
(declare-const q__p1__r__c__last__bit Int)
(declare-const q__p1__r__c__position Int)
(assert (<= 0 q__p1__r__c__first__bit))
(assert (< q__p1__r__c__first__bit q__p1__r__c__last__bit))
(assert (<= 0 q__p1__r__c__position))
(declare-const q__p1__r__d__first__bit Int)
(declare-const q__p1__r__d__last__bit Int)
(declare-const q__p1__r__d__position Int)
(assert (<= 0 q__p1__r__d__first__bit))
(assert (< q__p1__r__d__first__bit q__p1__r__d__last__bit))
(assert (<= 0 q__p1__r__d__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const tmp Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const result Int)
(declare-const tmp1 Int)
(declare-const result1 Int)
(declare-const tmp2 Int)
(declare-const tmp3 Int)
(assert (in_range1 a))
(assert (in_range2 c))
(assert (=> (<= (- 2147483648) 2147483647) (in_range tmp)))
(assert (= result tmp))
(assert (= tmp1 1))
(assert (and (= o (qf1 2)) (in_range o)))
(assert (= o1 (+ tmp1 o)))
(assert (and (= o2 o1) (in_range o1)))
(assert (= o3 (+ o2 7)))
(assert (and (= o4 o3) (in_range o3)))
(assert (= result1 tmp1))
(assert (= tmp2 o4))
(assert (not (< tmp2 2147483647)))
(check-sat)
(exit)
