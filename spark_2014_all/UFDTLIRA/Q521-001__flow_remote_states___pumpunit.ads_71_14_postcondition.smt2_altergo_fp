(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

logic is_ready : int -> bool

logic is_ready__function_guard : bool, int -> prop

type internal_state

predicate in_range(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : internal_state, internal_state -> bool

logic dummy : internal_state

type internal_state__ref = { internal_state__content : internal_state
}

function internal_state__ref___projection(a: internal_state__ref) : internal_state =
  (a).internal_state__content

axiom is_ready__post_axiom : true

axiom is_ready__def_axiom :
  (forall pumpunit__cur_state:int [is_ready(pumpunit__cur_state)].
  ((is_ready(pumpunit__cur_state) = true) <-> (pumpunit__cur_state = 1)))

logic is_pumping : int -> bool

logic is_pumping__function_guard : bool, int -> prop

axiom is_pumping__post_axiom : true

axiom is_pumping__def_axiom :
  (forall pumpunit__cur_state:int [is_pumping(pumpunit__cur_state)].
  ((is_pumping(pumpunit__cur_state) = true) <-> (pumpunit__cur_state = 0)))

 (* File "pumpunit.ads", line 65, characters 0-0 *)
goal WP_parameter_def :
  (forall cur_state:int. forall cur_state1:int. forall result:int.
  forall cur_state2:int. forall cur_state3:int. forall cur_state4:int.
  ((in_range(cur_state) and ((is_pumping(cur_state) = true) and
  ((((cur_state = 0) and ((result = cur_state) and (cur_state2 = 1))) or
  ((not (cur_state = 0)) and ((cur_state2 = cur_state) and
  (cur_state2 = cur_state1)))) and ((cur_state2 = cur_state3) and
  (cur_state4 = cur_state2))))) -> (is_ready(cur_state3) = true)))
