(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__test_type__t__f : integer
}

function us_split_fields_F__projection(a: us_split_fields) : integer =
  (a).rec__test_type__t__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__test_type__t__f) = to_rep(((b).us_split_fields1).rec__test_type__t__f)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__test_type__t__f) = to_rep(((b).us_split_fields1).rec__test_type__t__f))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. (0 <= object__size({ us_split_fields1 = {
  rec__test_type__t__f = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. (0 <= object__alignment({ us_split_fields1 = {
  rec__test_type__t__f = a } })))

logic test_type__t__f__first__bit : int

logic test_type__t__f__last__bit : int

logic test_type__t__f__position : int

axiom test_type__t__f__first__bit_axiom : (0 <= test_type__t__f__first__bit)

axiom test_type__t__f__last__bit_axiom :
  (test_type__t__f__first__bit <  test_type__t__f__last__bit)

axiom test_type__t__f__position_axiom : (0 <= test_type__t__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic decr : us_rep -> us_rep

logic decr__function_guard : us_rep, us_rep -> prop

logic decr_int : us_rep -> us_rep

logic decr_int__function_guard : us_rep, us_rep -> prop

logic saturate : us_rep -> us_rep

logic saturate__function_guard : us_rep, us_rep -> prop

axiom decr__post_axiom :
  (forall x:integer [decr({ us_split_fields1 = { rec__test_type__t__f = x }
  })]. (in_range1(to_rep(x)) -> in_range1(to_rep(((decr({ us_split_fields1 =
  { rec__test_type__t__f = x } })).us_split_fields1).rec__test_type__t__f))))

axiom decr__def_axiom :
  (forall x:integer [decr({ us_split_fields1 = { rec__test_type__t__f = x }
  })]. (in_range1(to_rep(x)) -> (decr({ us_split_fields1 = {
  rec__test_type__t__f = x } }) = saturate(decr_int({ us_split_fields1 = {
  rec__test_type__t__f = x } })))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom decr_int__post_axiom : true

axiom decr_int__def_axiom :
  (forall x:integer [decr_int({ us_split_fields1 = { rec__test_type__t__f = x
  } })]. (in_range1(to_rep(x)) -> (decr_int({ us_split_fields1 = {
  rec__test_type__t__f = x } }) = { us_split_fields1 = {
  rec__test_type__t__f = of_rep((to_rep(x) - 1)) } })))

axiom saturate__post_axiom : true

axiom saturate__def_axiom :
  (forall x:integer [saturate({ us_split_fields1 = { rec__test_type__t__f = x
  } })]. (in_range1(to_rep(x)) -> (((to_rep(x) <  0) -> (saturate({
  us_split_fields1 = { rec__test_type__t__f = x } }) = { us_split_fields1 = {
  rec__test_type__t__f = of_rep(0) } })) and ((not (to_rep(x) <  0)) ->
  (saturate({ us_split_fields1 = { rec__test_type__t__f = x } }) = {
  us_split_fields1 = { rec__test_type__t__f = x } })))))

 (* File "test.adb", line 2, characters 0-0 *)
goal WP_parameter_def :
  (forall x__split_fields:integer. forall y__split_fields:integer.
  forall test__y__assume:integer. forall result:integer.
  forall y__split_fields1:integer. ((to_rep(x__split_fields) = 0) ->
  (in_range1(to_rep(x__split_fields)) -> (((({ us_split_fields1 = {
  rec__test_type__t__f = test__y__assume } } = decr({ us_split_fields1 = {
  rec__test_type__t__f = x__split_fields } })) and
  (in_range1(to_rep(test__y__assume)) and ({ us_split_fields1 = {
  rec__test_type__t__f = test__y__assume } } = saturate(decr_int({
  us_split_fields1 = { rec__test_type__t__f = x__split_fields } }))))) and
  ((result = y__split_fields) and (test__y__assume = y__split_fields1))) ->
  (in_range1(to_rep(y__split_fields1)) -> (not (bool_eq2({ us_split_fields1 =
  { rec__test_type__t__f = x__split_fields } }, { us_split_fields1 = {
  rec__test_type__t__f = y__split_fields1 } }) = true)))))))
