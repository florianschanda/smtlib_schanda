(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort element 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (element element) Bool)
(declare-const dummy element)
(declare-datatypes () ((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 100)) (in_range temp___expr_158)))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun to_rep1 (element) Int)
(declare-fun of_rep1 (Int) element)
(assert (forall ((x element)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x element)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__alias__my_rec__content element) (rec__alias__my_rec__modulus natural)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) element (rec__alias__my_rec__content a))
(define-fun us_split_fields_Modulus__projection ((a us_split_fields)) natural (rec__alias__my_rec__modulus a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__alias__my_rec__content (us_split_fields1 a))) (to_rep1 (rec__alias__my_rec__content (us_split_fields1 b)))) (= (to_rep (rec__alias__my_rec__modulus (us_split_fields1 a))) (to_rep (rec__alias__my_rec__modulus (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const alias__my_rec__content__first__bit Int)
(declare-const alias__my_rec__content__last__bit Int)
(declare-const alias__my_rec__content__position Int)
(assert (<= 0 alias__my_rec__content__first__bit))
(assert (< alias__my_rec__content__first__bit alias__my_rec__content__last__bit))
(assert (<= 0 alias__my_rec__content__position))
(declare-const alias__my_rec__modulus__first__bit Int)
(declare-const alias__my_rec__modulus__last__bit Int)
(declare-const alias__my_rec__modulus__position Int)
(assert (<= 0 alias__my_rec__modulus__first__bit))
(assert (< alias__my_rec__modulus__first__bit alias__my_rec__modulus__last__bit))
(assert (<= 0 alias__my_rec__modulus__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep (my_rec__content a))
(declare-fun get_content (us_rep) Int)
(declare-fun get_content__function_guard (Int us_rep) Bool)
(define-fun default_initial_assumption ((temp___expr_166 us_rep) (temp___skip_top_level_167 Bool)) Bool (and (= (to_rep1 (rec__alias__my_rec__content (us_split_fields1 temp___expr_166))) 0) (= (to_rep (rec__alias__my_rec__modulus (us_split_fields1 temp___expr_166))) 0)))
(assert (forall ((r us_rep)) (! (=> (< 0 (to_rep (rec__alias__my_rec__modulus (us_split_fields1 r)))) (dynamic_invariant (get_content r) true false true true)) :pattern ((get_content r)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const alias__my_rec__content__first__bit1 Int)
(declare-const alias__my_rec__content__last__bit1 Int)
(declare-const alias__my_rec__content__position1 Int)
(assert (<= 0 alias__my_rec__content__first__bit1))
(assert (< alias__my_rec__content__first__bit1 alias__my_rec__content__last__bit1))
(assert (<= 0 alias__my_rec__content__position1))
(declare-const alias__my_rec__modulus__first__bit1 Int)
(declare-const alias__my_rec__modulus__last__bit1 Int)
(declare-const alias__my_rec__modulus__position1 Int)
(assert (<= 0 alias__my_rec__modulus__first__bit1))
(assert (< alias__my_rec__modulus__first__bit1 alias__my_rec__modulus__last__bit1))
(assert (<= 0 alias__my_rec__modulus__position1))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((my_alias__ref (mk_my_alias__ref (my_alias__content us_rep)))))
(define-fun my_alias__ref___projection ((a my_alias__ref)) us_rep (my_alias__content a))
(define-fun default_initial_assumption1 ((temp___expr_173 us_rep) (temp___skip_top_level_174 Bool)) Bool (and (= (to_rep1 (rec__alias__my_rec__content (us_split_fields1 temp___expr_173))) 0) (= (to_rep (rec__alias__my_rec__modulus (us_split_fields1 temp___expr_173))) 0)))
(declare-const r us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(assert (in_range x))
(assert (not (< 0 (to_rep (rec__alias__my_rec__modulus (us_split_fields1 r))))))
(check-sat)
(exit)
