(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

type t1b

predicate in_range2(x: int) = ((1 <= x) and (x <= 5))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t1b, t1b -> bool

logic dummy1 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref___projection(a: t1b__ref) : t1b = (a).t1b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type t2b__ref = { t2b__content : integer
}

function t2b__ref___projection(a: t2b__ref) : integer = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "loops.adb", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall count:int. forall i:int. forall temp___197:int.
  forall temp___196:int. forall o:int. forall result:int. forall count1:int.
  forall result1:int. forall i1:int. forall count2:int. forall i2:int.
  forall k:int. forall result2:int. forall count3:int. forall result3:int.
  forall k1:int. forall result4:int. forall count4:int. forall count5:int.
  forall k2:int. forall count6:int. forall k3:int. forall count7:int.
  forall k4:int. forall count8:int. forall k5:int. forall count9:int.
  forall k6:int. forall result5:int. forall i3:int. forall count10:int.
  forall i4:int. forall k7:int. forall count11:int. forall i5:int.
  forall k8:int. (((result = count) and (count1 = 0)) ->
  (in_range1(count1) -> (((result1 = i) and (i1 = 1)) -> (((1 <= i1) and
  (i1 <= 5)) -> ((count2 = (i2 - 1)) -> (((((((1 <= 5) -> in_range2(i2)) and
  (((- 2147483648) <= 2147483647) -> in_range1(count2))) and ((1 <= i2) and
  (i2 <= 5))) and (((count2 = result2) and (count3 = 0)) and
  ((((k = result3) and (k1 = 1)) and ((((1 <= k1) and (k1 <= i2)) and
  ((((temp___197 = count3) and ((temp___196 = k1) and
  ((((o = (count3 + 1)) and in_range1((count3 + 1))) and
  ((count3 = result4) and (count4 = o))) and ((count5 = k2) and
  (((((1 <= i2) -> dynamic_property(1, i2, k2)) and
  (((- 2147483648) <= 2147483647) -> in_range1(count5))) and ((1 <= k2) and
  (k2 <= i2))) and (k2 = i2)))))) and (((k2 = k3) and (count5 = count6)) and
  ((k4 = k2) and (count7 = count5)))) and (((k5 = k3) and ({ int__content =
  count8 } = { int__content = count6 })) and ((k6 = k4) and
  (count9 = count7))))) or ((not ((1 <= k1) and (k1 <= i2))) and
  (((k1 = k5) and (count3 = count8)) and ((k6 = k1) and
  (count9 = count3)))))) and ((not (i2 = 5)) and ((result5 = i2) and
  (i3 = (i2 + 1))))))) and (((k7 = k5) and ((i3 = i4) and
  (count10 = count8))) and ((k8 = k6) and ((i5 = i3) and
  (count11 = count9))))) -> (count10 = (i4 - 1)))))))))
