(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__foo__r__x : integer; rec__foo__r__y : integer;
rec__foo__r__z : integer
}

function us_split_fields_X__projection(a: us_split_fields) : integer =
  (a).rec__foo__r__x

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__foo__r__y

function us_split_fields_Z__projection(a: us_split_fields) : integer =
  (a).rec__foo__r__z

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__foo__r__x) = to_rep(((b).us_split_fields1).rec__foo__r__x)) and
  (to_rep(((a).us_split_fields1).rec__foo__r__y) = to_rep(((b).us_split_fields1).rec__foo__r__y))) and
  (to_rep(((a).us_split_fields1).rec__foo__r__z) = to_rep(((b).us_split_fields1).rec__foo__r__z))) ->
  (bool_eq2(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__foo__r__x) = to_rep(((b).us_split_fields1).rec__foo__r__x)) and
  (to_rep(((a).us_split_fields1).rec__foo__r__y) = to_rep(((b).us_split_fields1).rec__foo__r__y))) and
  (to_rep(((a).us_split_fields1).rec__foo__r__z) = to_rep(((b).us_split_fields1).rec__foo__r__z)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. forall a2:integer.
  (0 <= object__size({ us_split_fields1 = { rec__foo__r__x = a;
  rec__foo__r__y = a1; rec__foo__r__z = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. forall a2:integer.
  (0 <= object__alignment({ us_split_fields1 = { rec__foo__r__x = a;
  rec__foo__r__y = a1; rec__foo__r__z = a2 } })))

logic foo__r__x__first__bit : int

logic foo__r__x__last__bit : int

logic foo__r__x__position : int

axiom foo__r__x__first__bit_axiom : (0 <= foo__r__x__first__bit)

axiom foo__r__x__last__bit_axiom :
  (foo__r__x__first__bit <  foo__r__x__last__bit)

axiom foo__r__x__position_axiom : (0 <= foo__r__x__position)

logic foo__r__y__first__bit : int

logic foo__r__y__last__bit : int

logic foo__r__y__position : int

axiom foo__r__y__first__bit_axiom : (0 <= foo__r__y__first__bit)

axiom foo__r__y__last__bit_axiom :
  (foo__r__y__first__bit <  foo__r__y__last__bit)

axiom foo__r__y__position_axiom : (0 <= foo__r__y__position)

logic foo__r__z__first__bit : int

logic foo__r__z__last__bit : int

logic foo__r__z__position : int

axiom foo__r__z__first__bit_axiom : (0 <= foo__r__z__first__bit)

axiom foo__r__z__last__bit_axiom :
  (foo__r__z__first__bit <  foo__r__z__last__bit)

axiom foo__r__z__position_axiom : (0 <= foo__r__z__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

logic dummy3 : integer

type r__ref = { r__content : us_rep
}

function r__ref___projection(a: r__ref) : us_rep = (a).r__content

type us_split_fields2 = { rec__foo__t__f : us_rep; rec__foo__t__g : us_rep
}

function us_split_fields_F__projection(a: us_split_fields2) : us_rep =
  (a).rec__foo__t__f

function us_split_fields_G__projection(a: us_split_fields2) : us_rep =
  (a).rec__foo__t__g

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  ((((bool_eq2(((a).us_split_fields3).rec__foo__t__f,
  ((b).us_split_fields3).rec__foo__t__f) = true) and
  (bool_eq2(((a).us_split_fields3).rec__foo__t__g,
  ((b).us_split_fields3).rec__foo__t__g) = true)) -> (bool_eq3(a,
  b) = true)) and ((not ((bool_eq2(((a).us_split_fields3).rec__foo__t__f,
  ((b).us_split_fields3).rec__foo__t__f) = true) and
  (bool_eq2(((a).us_split_fields3).rec__foo__t__g,
  ((b).us_split_fields3).rec__foo__t__g) = true))) -> (bool_eq3(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:integer. forall a3:integer.
  forall a4:integer. forall a5:integer. (0 <= object__size1({
  us_split_fields3 = { rec__foo__t__f = { us_split_fields1 = {
  rec__foo__r__x = a; rec__foo__r__y = a1; rec__foo__r__z = a2 } };
  rec__foo__t__g = { us_split_fields1 = { rec__foo__r__x = a3;
  rec__foo__r__y = a4; rec__foo__r__z = a5 } } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:integer. forall a3:integer.
  forall a4:integer. forall a5:integer. (0 <= object__alignment1({
  us_split_fields3 = { rec__foo__t__f = { us_split_fields1 = {
  rec__foo__r__x = a; rec__foo__r__y = a1; rec__foo__r__z = a2 } };
  rec__foo__t__g = { us_split_fields1 = { rec__foo__r__x = a3;
  rec__foo__r__y = a4; rec__foo__r__z = a5 } } } })))

logic foo__t__f__first__bit : int

logic foo__t__f__last__bit : int

logic foo__t__f__position : int

axiom foo__t__f__first__bit_axiom : (0 <= foo__t__f__first__bit)

axiom foo__t__f__last__bit_axiom :
  (foo__t__f__first__bit <  foo__t__f__last__bit)

axiom foo__t__f__position_axiom : (0 <= foo__t__f__position)

logic foo__t__g__first__bit : int

logic foo__t__g__last__bit : int

logic foo__t__g__position : int

axiom foo__t__g__first__bit_axiom : (0 <= foo__t__g__first__bit)

axiom foo__t__g__last__bit_axiom :
  (foo__t__g__first__bit <  foo__t__g__last__bit)

axiom foo__t__g__position_axiom : (0 <= foo__t__g__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : integer

logic dummy7 : integer

logic dummy8 : integer

logic dummy9 : integer

type t__ref = { t__content : us_rep1
}

function t__ref___projection(a: t__ref) : us_rep1 = (a).t__content

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "foo.adb", line 52, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. forall tmp__split_fields:integer.
  forall tmp__split_fields1:integer. forall tmp__split_fields2:integer.
  forall tmp__split_fields3:integer. forall tmp__split_fields4:integer.
  forall tmp__split_fields5:integer. forall o1:integer. forall o2:integer.
  forall o3:integer. forall o4:integer. forall o5:integer. forall o6:integer.
  forall o7:integer. forall o8:integer. forall o9:integer.
  forall o10:integer. forall o11:integer. forall o12:integer.
  forall o13:integer. forall temp___243:integer. forall temp___2431:integer.
  forall temp___2432:integer. forall temp___2433:integer.
  forall temp___2434:integer. forall temp___2435:integer. forall o14:int.
  forall result:integer. forall result1:integer. forall result2:integer.
  forall result3:integer. forall result4:integer. forall result5:integer.
  forall tmp__split_fields6:integer. forall tmp__split_fields7:integer.
  forall tmp__split_fields8:integer. forall tmp__split_fields9:integer.
  forall tmp__split_fields10:integer. forall tmp__split_fields11:integer.
  (in_range(a) -> (in_range(b) -> ((((- 2147483648) <= 2147483647) ->
  in_range(o)) -> (((((((to_rep(o1) = a) and ((o1 = o2) and
  ((tmp__split_fields1 = o3) and (tmp__split_fields2 = o4)))) and
  ((o5 = o2) and ((o6 = o3) and (o7 = o4)))) and (((o8 = o5) and
  ((o9 = o6) and (o10 = o7))) and ((tmp__split_fields3 = o11) and
  ((tmp__split_fields4 = o12) and (tmp__split_fields5 = o13))))) and
  (((temp___243 = o8) and ((temp___2431 = o9) and (temp___2432 = o10))) and
  ((temp___2433 = o11) and ((temp___2434 = o12) and
  (temp___2435 = o13))))) and ((((result = tmp__split_fields) and
  ((result1 = tmp__split_fields1) and (result2 = tmp__split_fields2))) and
  ((result3 = tmp__split_fields3) and ((result4 = tmp__split_fields4) and
  (result5 = tmp__split_fields5)))) and
  (((temp___243 = tmp__split_fields6) and
  ((temp___2431 = tmp__split_fields7) and
  (temp___2432 = tmp__split_fields8))) and
  ((temp___2433 = tmp__split_fields9) and
  ((temp___2434 = tmp__split_fields10) and
  (temp___2435 = tmp__split_fields11)))))) ->
  (((o14 = (a + to_rep(tmp__split_fields6))) and
  in_range((a + to_rep(tmp__split_fields6)))) -> in_range(o14)))))))
