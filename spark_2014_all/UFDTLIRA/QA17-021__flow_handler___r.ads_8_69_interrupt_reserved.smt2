(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort interrupt_id 0)
(declare-fun interrupt_idqtint (interrupt_id) Int)
(assert (forall ((i interrupt_id)) (and (<= 0 (interrupt_idqtint i)) (<= (interrupt_idqtint i) 63))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 63)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (interrupt_id interrupt_id) Bool)
(declare-const dummy interrupt_id)
(declare-datatypes () ((interrupt_id__ref (mk_interrupt_id__ref (interrupt_id__content interrupt_id)))))
(define-fun interrupt_id__ref___2__projection ((a interrupt_id__ref)) interrupt_id (interrupt_id__content a))
(define-fun to_rep ((x interrupt_id)) Int (interrupt_idqtint x))
(declare-fun of_rep (Int) interrupt_id)
(assert (forall ((x interrupt_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x interrupt_id)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__r__pt__irq interrupt_id)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) interrupt_id (rec__r__pt__irq a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs)))))
(define-fun us_rep___33__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const r__pt__irq__first__bit Int)
(declare-const r__pt__irq__last__bit Int)
(declare-const r__pt__irq__position Int)
(assert (<= 0 r__pt__irq__first__bit))
(assert (< r__pt__irq__first__bit r__pt__irq__last__bit))
(assert (<= 0 r__pt__irq__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-datatypes () ((pt__ref (mk_pt__ref (pt__content us_rep)))))
(define-fun pt__ref___projection ((a pt__ref)) us_rep (pt__content a))
(define-fun dynamic_invariant ((temp___expr_1762 Int) (temp___is_init_1758 Bool) (temp___skip_constant_1759 Bool) (temp___do_toplevel_1760 Bool) (temp___do_typ_inv_1761 Bool)) Bool (=> (or (= temp___is_init_1758 true) (<= 0 63)) (in_range temp___expr_1762)))
(declare-const self__ us_rep)
(declare-const temp___1853 Bool)
(assert (not (= temp___1853 false)))
(check-sat)
(exit)
