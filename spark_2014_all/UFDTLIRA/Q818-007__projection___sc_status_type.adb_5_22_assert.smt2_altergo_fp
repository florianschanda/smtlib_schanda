(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_split_fields = { rec__sc_status_type__bit_pattern_type__x_1 : bool;
rec__sc_status_type__bit_pattern_type__x_12 : bool
}

function us_split_fields_X_1__2__projection(a: us_split_fields) : bool =
  (a).rec__sc_status_type__bit_pattern_type__x_1

function us_split_fields_X_12__projection(a: us_split_fields) : bool =
  (a).rec__sc_status_type__bit_pattern_type__x_12

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)].
  ((((((a).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_1 = ((b).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_1) and
  (((a).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_12 = ((b).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_12)) ->
  (bool_eq(a, b) = true)) and
  ((not ((((a).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_1 = ((b).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_1) and
  (((a).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_12 = ((b).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_12))) ->
  (bool_eq(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:bool. (0 <= object__size({ us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a;
  rec__sc_status_type__bit_pattern_type__x_12 = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:bool. (0 <= object__alignment({
  us_split_fields1 = { rec__sc_status_type__bit_pattern_type__x_1 = a;
  rec__sc_status_type__bit_pattern_type__x_12 = a1 } })))

logic sc_status_type__bit_pattern_type__x_1__first__bit : int

logic sc_status_type__bit_pattern_type__x_1__last__bit : int

logic sc_status_type__bit_pattern_type__x_1__position : int

axiom sc_status_type__bit_pattern_type__x_1__first__bit_axiom :
  (0 <= sc_status_type__bit_pattern_type__x_1__first__bit)

axiom sc_status_type__bit_pattern_type__x_1__last__bit_axiom :
  (sc_status_type__bit_pattern_type__x_1__first__bit <  sc_status_type__bit_pattern_type__x_1__last__bit)

axiom sc_status_type__bit_pattern_type__x_1__position_axiom :
  (0 <= sc_status_type__bit_pattern_type__x_1__position)

logic sc_status_type__bit_pattern_type__x_12__first__bit : int

logic sc_status_type__bit_pattern_type__x_12__last__bit : int

logic sc_status_type__bit_pattern_type__x_12__position : int

axiom sc_status_type__bit_pattern_type__x_12__first__bit_axiom :
  (0 <= sc_status_type__bit_pattern_type__x_12__first__bit)

axiom sc_status_type__bit_pattern_type__x_12__last__bit_axiom :
  (sc_status_type__bit_pattern_type__x_12__first__bit <  sc_status_type__bit_pattern_type__x_12__last__bit)

axiom sc_status_type__bit_pattern_type__x_12__position_axiom :
  (0 <= sc_status_type__bit_pattern_type__x_12__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : bool

logic dummy1 : bool

type bit_pattern_type__ref = { bit_pattern_type__content : us_rep
}

function bit_pattern_type__ref___projection(a: bit_pattern_type__ref) : us_rep =
  (a).bit_pattern_type__content

type us_split_fields2 = { rec__sc_status_type__duplicate_status_type__prime :
us_rep; rec__sc_status_type__duplicate_status_type__shadow : us_rep
}

function us_split_fields_Prime__projection(a: us_split_fields2) : us_rep =
  (a).rec__sc_status_type__duplicate_status_type__prime

function us_split_fields_Shadow__projection(a: us_split_fields2) : us_rep =
  (a).rec__sc_status_type__duplicate_status_type__shadow

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq1 : us_rep1, us_rep1 -> bool

axiom bool_eq_def1 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq1(a, b)].
  ((((bool_eq(((a).us_split_fields3).rec__sc_status_type__duplicate_status_type__prime,
  ((b).us_split_fields3).rec__sc_status_type__duplicate_status_type__prime) = true) and
  (bool_eq(((a).us_split_fields3).rec__sc_status_type__duplicate_status_type__shadow,
  ((b).us_split_fields3).rec__sc_status_type__duplicate_status_type__shadow) = true)) ->
  (bool_eq1(a, b) = true)) and
  ((not ((bool_eq(((a).us_split_fields3).rec__sc_status_type__duplicate_status_type__prime,
  ((b).us_split_fields3).rec__sc_status_type__duplicate_status_type__prime) = true) and
  (bool_eq(((a).us_split_fields3).rec__sc_status_type__duplicate_status_type__shadow,
  ((b).us_split_fields3).rec__sc_status_type__duplicate_status_type__shadow) = true))) ->
  (bool_eq1(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:bool. forall a2:bool. forall a3:bool.
  (0 <= object__size1({ us_split_fields3 = {
  rec__sc_status_type__duplicate_status_type__prime = { us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a;
  rec__sc_status_type__bit_pattern_type__x_12 = a1 } };
  rec__sc_status_type__duplicate_status_type__shadow = { us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a2;
  rec__sc_status_type__bit_pattern_type__x_12 = a3 } } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:bool. forall a2:bool. forall a3:bool.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__sc_status_type__duplicate_status_type__prime = { us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a;
  rec__sc_status_type__bit_pattern_type__x_12 = a1 } };
  rec__sc_status_type__duplicate_status_type__shadow = { us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a2;
  rec__sc_status_type__bit_pattern_type__x_12 = a3 } } } })))

logic sc_status_type__duplicate_status_type__prime__first__bit : int

logic sc_status_type__duplicate_status_type__prime__last__bit : int

logic sc_status_type__duplicate_status_type__prime__position : int

axiom sc_status_type__duplicate_status_type__prime__first__bit_axiom :
  (0 <= sc_status_type__duplicate_status_type__prime__first__bit)

axiom sc_status_type__duplicate_status_type__prime__last__bit_axiom :
  (sc_status_type__duplicate_status_type__prime__first__bit <  sc_status_type__duplicate_status_type__prime__last__bit)

axiom sc_status_type__duplicate_status_type__prime__position_axiom :
  (0 <= sc_status_type__duplicate_status_type__prime__position)

logic sc_status_type__duplicate_status_type__shadow__first__bit : int

logic sc_status_type__duplicate_status_type__shadow__last__bit : int

logic sc_status_type__duplicate_status_type__shadow__position : int

axiom sc_status_type__duplicate_status_type__shadow__first__bit_axiom :
  (0 <= sc_status_type__duplicate_status_type__shadow__first__bit)

axiom sc_status_type__duplicate_status_type__shadow__last__bit_axiom :
  (sc_status_type__duplicate_status_type__shadow__first__bit <  sc_status_type__duplicate_status_type__shadow__last__bit)

axiom sc_status_type__duplicate_status_type__shadow__position_axiom :
  (0 <= sc_status_type__duplicate_status_type__shadow__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy2 : bool

logic dummy3 : bool

logic dummy4 : bool

logic dummy5 : bool

type duplicate_status_type__ref = { duplicate_status_type__content : us_rep1
}

function duplicate_status_type__ref___projection(a: duplicate_status_type__ref) : us_rep1 =
  (a).duplicate_status_type__content

type us_split_fields4 = { rec__sc_status_type__object_type__sc_state :
us_rep1
}

function us_split_fields_Sc_State__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__sc_status_type__object_type__sc_state

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___4__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq2 : us_rep2, us_rep2 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq2(a, b)].
  (((bool_eq1(((a).us_split_fields5).rec__sc_status_type__object_type__sc_state,
  ((b).us_split_fields5).rec__sc_status_type__object_type__sc_state) = true) ->
  (bool_eq2(a, b) = true)) and
  ((not (bool_eq1(((a).us_split_fields5).rec__sc_status_type__object_type__sc_state,
  ((b).us_split_fields5).rec__sc_status_type__object_type__sc_state) = true)) ->
  (bool_eq2(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:bool. forall a2:bool. forall a3:bool.
  (0 <= object__size2({ us_split_fields5 = {
  rec__sc_status_type__object_type__sc_state = { us_split_fields3 = {
  rec__sc_status_type__duplicate_status_type__prime = { us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a;
  rec__sc_status_type__bit_pattern_type__x_12 = a1 } };
  rec__sc_status_type__duplicate_status_type__shadow = { us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a2;
  rec__sc_status_type__bit_pattern_type__x_12 = a3 } } } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:bool. forall a2:bool. forall a3:bool.
  (0 <= object__alignment2({ us_split_fields5 = {
  rec__sc_status_type__object_type__sc_state = { us_split_fields3 = {
  rec__sc_status_type__duplicate_status_type__prime = { us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a;
  rec__sc_status_type__bit_pattern_type__x_12 = a1 } };
  rec__sc_status_type__duplicate_status_type__shadow = { us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = a2;
  rec__sc_status_type__bit_pattern_type__x_12 = a3 } } } } } })))

logic sc_status_type__object_type__sc_state__first__bit : int

logic sc_status_type__object_type__sc_state__last__bit : int

logic sc_status_type__object_type__sc_state__position : int

axiom sc_status_type__object_type__sc_state__first__bit_axiom :
  (0 <= sc_status_type__object_type__sc_state__first__bit)

axiom sc_status_type__object_type__sc_state__last__bit_axiom :
  (sc_status_type__object_type__sc_state__first__bit <  sc_status_type__object_type__sc_state__last__bit)

axiom sc_status_type__object_type__sc_state__position_axiom :
  (0 <= sc_status_type__object_type__sc_state__position)

logic user_eq2 : us_rep2, us_rep2 -> bool

logic dummy6 : bool

logic dummy7 : bool

logic dummy8 : bool

logic dummy9 : bool

type object_type__ref = { object_type__content : us_rep2
}

function object_type__ref___projection(a: object_type__ref) : us_rep2 =
  (a).object_type__content

logic this : bool

logic this1 : bool

logic this2 : bool

logic this3 : bool

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "sc_status_type.ads", line 16, characters 0-0 *)
goal WP_parameter_def : (bool_eq({ us_split_fields1 = {
  rec__sc_status_type__bit_pattern_type__x_1 = this;
  rec__sc_status_type__bit_pattern_type__x_12 = this1 } }, {
  us_split_fields1 = { rec__sc_status_type__bit_pattern_type__x_1 = this2;
  rec__sc_status_type__bit_pattern_type__x_12 = this3 } }) = true)
