(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun blocking_true (tuple0) Bool)
(declare-fun blocking_true__function_guard (Bool tuple0) Bool)
(declare-sort t 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (t t) Bool)
(declare-const dummy t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))
(define-fun dynamic_invariant ((temp___expr_171 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool)) Bool (and (=> (or (= temp___is_init_168 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_171)) (=> (= temp___do_toplevel_170 true) (=> (= temp___is_init_168 true) (= (blocking_true Tuple0) true)))))
(define-fun dynamic_predicate ((temp___175 Int)) Bool (= (blocking_true Tuple0) true))
(declare-sort pt 0)
(declare-fun user_eq1 (pt pt) Bool)
(declare-const value__size Int)
(declare-fun object__size (pt) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (pt) Int)
(assert (<= 0 value__size))
(assert (forall ((a pt)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a pt)) (<= 0 (object__alignment a))))
(declare-datatypes () ((pt__ref (mk_pt__ref (pt__content pt)))))
(define-fun pt__ref___projection ((a pt__ref)) pt (pt__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (forall ((us_void_param tuple0)) (! (= (blocking_true us_void_param) true) :pattern ((blocking_true us_void_param)))))
(assert (not (= (blocking_true Tuple0) true)))
(check-sat)
(exit)
