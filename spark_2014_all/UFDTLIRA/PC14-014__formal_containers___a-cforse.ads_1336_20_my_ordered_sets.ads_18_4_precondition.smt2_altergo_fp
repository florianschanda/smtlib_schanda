(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__my_ordered_sets__n__set__capacity : count_type
}

function us_split_discrs___2__projection(a: us_split_discrs) : count_type =
  (a).rec__my_ordered_sets__n__set__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_ordered_sets__n__set : us_main_type
}

function us_split_fields_Set__2__projection(a: us_split_fields) : us_main_type =
  (a).rec__my_ordered_sets__n__set

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___11__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___12__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__my_ordered_sets__n__set__capacity) = to_rep(((b).us_split_discrs1).rec__my_ordered_sets__n__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__my_ordered_sets__n__set,
  ((b).us_split_fields1).rec__my_ordered_sets__n__set) = true)) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__my_ordered_sets__n__set__capacity) = to_rep(((b).us_split_discrs1).rec__my_ordered_sets__n__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__my_ordered_sets__n__set,
  ((b).us_split_fields1).rec__my_ordered_sets__n__set) = true))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = a };
  us_split_fields1 = { rec__my_ordered_sets__n__set = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = a };
  us_split_fields1 = { rec__my_ordered_sets__n__set = a1 } })))

logic my_ordered_sets__n__set__capacity__first__bit : int

logic my_ordered_sets__n__set__capacity__last__bit : int

logic my_ordered_sets__n__set__capacity__position : int

axiom my_ordered_sets__n__set__capacity__first__bit_axiom :
  (0 <= my_ordered_sets__n__set__capacity__first__bit)

axiom my_ordered_sets__n__set__capacity__last__bit_axiom :
  (my_ordered_sets__n__set__capacity__first__bit <  my_ordered_sets__n__set__capacity__last__bit)

axiom my_ordered_sets__n__set__capacity__position_axiom :
  (0 <= my_ordered_sets__n__set__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : count_type

logic dummy2 : us_main_type

type set__ref = { set__content : us_rep
}

function set__ref___3__projection(a: set__ref) : us_rep = (a).set__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq1({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = b1 } })]. (user_eq1({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = b1 } }) = oeq({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = a }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = b }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = b1 } })))

type us_split_fields2 = { rec__my_ordered_sets__n__cursor__node : count_type
}

function us_split_fields_Node__2__projection(a: us_split_fields2) : count_type =
  (a).rec__my_ordered_sets__n__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___13__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  (((to_rep(((a).us_split_fields3).rec__my_ordered_sets__n__cursor__node) = to_rep(((b).us_split_fields3).rec__my_ordered_sets__n__cursor__node)) ->
  (bool_eq4(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__my_ordered_sets__n__cursor__node) = to_rep(((b).us_split_fields3).rec__my_ordered_sets__n__cursor__node))) ->
  (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = a } })))

logic my_ordered_sets__n__cursor__node__first__bit : int

logic my_ordered_sets__n__cursor__node__last__bit : int

logic my_ordered_sets__n__cursor__node__position : int

axiom my_ordered_sets__n__cursor__node__first__bit_axiom :
  (0 <= my_ordered_sets__n__cursor__node__first__bit)

axiom my_ordered_sets__n__cursor__node__last__bit_axiom :
  (my_ordered_sets__n__cursor__node__first__bit <  my_ordered_sets__n__cursor__node__last__bit)

axiom my_ordered_sets__n__cursor__node__position_axiom :
  (0 <= my_ordered_sets__n__cursor__node__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___2__projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic length1 : int, us_rep -> int

logic length__function_guard1 : int, int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container1 } })].
  ((length({ us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity =
  container }; us_split_fields1 = { rec__my_ordered_sets__n__set = container1
  } }) <= to_rep(container)) and in_range1(length({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [length1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } })].
  in_range1(length1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type map__ref = { map__content : us_rep2
}

function map__ref___2__projection(a: map__ref) : us_rep2 = (a).map__content

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref___2__projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

logic get : us_rep2, us_rep1 -> int

logic get__function_guard : int, us_rep2, us_rep1 -> prop

type element_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : element_type, element_type -> bool

logic dummy5 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___8__projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic length2 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

logic has_key : us_rep2, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep2, us_rep1 -> prop

logic witness : us_rep2, us_rep1 -> int

logic witness__function_guard : int, us_rep2, us_rep1 -> prop

logic w_get : us_rep2, int -> int

logic w_get__function_guard : int, us_rep2, int -> prop

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall key:count_type [get(container, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } })]. ((has_key(container, {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = key }
  }) = true) -> (((of_int(0) = true) -> ((get(container, { us_split_fields3 =
  { rec__my_ordered_sets__n__cursor__node = key } }) = w_get(container,
  witness(container, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = k } }) = true) -> ((bool_eq4({
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = k } }, {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = key }
  }) = true) <-> (witness(container, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } }) = witness(container, {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = k } }))))))) and
  in_range2(get(container, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } }))))))

logic positions : us_rep -> us_rep2

logic positions__function_guard : us_rep2, us_rep -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container1 } })].
  ((not (has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = no_element } }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = i } }) = true) ->
  (((1 <= get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = i } })) and (get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container1 } }), {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = i }
  }) <= length({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = j } }) = true) -> ((get(positions({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container1 } }), {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = i }
  }) = get(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = j } })) -> (bool_eq4({
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = i } }, {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = j }
  }) = true)))))))))

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic has_element : int, us_rep, us_rep1 -> bool

logic has_element__function_guard1 : bool, int, us_rep, us_rep1 -> prop

axiom has_element__post__dispatch_axiom : true

logic container : count_type

logic container1 : us_main_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic position : count_type

logic attr__ATTRIBUTE_ADDRESS2 : int

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : natural, natural -> bool

logic dummy7 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields4 = { rec__my_ordered_sets__my_rec__f : natural;
rec__my_ordered_sets__my_rec__g : integer
}

function us_split_fields_F__projection(a: us_split_fields4) : natural =
  (a).rec__my_ordered_sets__my_rec__f

function us_split_fields_G__projection(a: us_split_fields4) : integer =
  (a).rec__my_ordered_sets__my_rec__g

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___10__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq9 : us_rep3, us_rep3 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq9(a, b)].
  ((((to_rep2(((a).us_split_fields5).rec__my_ordered_sets__my_rec__f) = to_rep2(((b).us_split_fields5).rec__my_ordered_sets__my_rec__f)) and
  (to_rep1(((a).us_split_fields5).rec__my_ordered_sets__my_rec__g) = to_rep1(((b).us_split_fields5).rec__my_ordered_sets__my_rec__g))) ->
  (bool_eq9(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields5).rec__my_ordered_sets__my_rec__f) = to_rep2(((b).us_split_fields5).rec__my_ordered_sets__my_rec__f)) and
  (to_rep1(((a).us_split_fields5).rec__my_ordered_sets__my_rec__g) = to_rep1(((b).us_split_fields5).rec__my_ordered_sets__my_rec__g)))) ->
  (bool_eq9(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:integer. (0 <= object__size3({
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = a;
  rec__my_ordered_sets__my_rec__g = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:integer. (0 <= object__alignment3({
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = a;
  rec__my_ordered_sets__my_rec__g = a1 } })))

logic my_ordered_sets__my_rec__f__first__bit : int

logic my_ordered_sets__my_rec__f__last__bit : int

logic my_ordered_sets__my_rec__f__position : int

axiom my_ordered_sets__my_rec__f__first__bit_axiom :
  (0 <= my_ordered_sets__my_rec__f__first__bit)

axiom my_ordered_sets__my_rec__f__last__bit_axiom :
  (my_ordered_sets__my_rec__f__first__bit <  my_ordered_sets__my_rec__f__last__bit)

axiom my_ordered_sets__my_rec__f__position_axiom :
  (0 <= my_ordered_sets__my_rec__f__position)

logic my_ordered_sets__my_rec__g__first__bit : int

logic my_ordered_sets__my_rec__g__last__bit : int

logic my_ordered_sets__my_rec__g__position : int

axiom my_ordered_sets__my_rec__g__first__bit_axiom :
  (0 <= my_ordered_sets__my_rec__g__first__bit)

axiom my_ordered_sets__my_rec__g__last__bit_axiom :
  (my_ordered_sets__my_rec__g__first__bit <  my_ordered_sets__my_rec__g__last__bit)

axiom my_ordered_sets__my_rec__g__position_axiom :
  (0 <= my_ordered_sets__my_rec__g__position)

logic user_eq7 : us_rep3, us_rep3 -> bool

logic dummy8 : natural

logic dummy9 : integer

type my_rec__ref = { my_rec__content : us_rep3
}

function my_rec__ref___projection(a: my_rec__ref) : us_rep3 =
  (a).my_rec__content

logic my_lt__function_guard : bool, us_rep3, us_rep3 -> prop

type element_type__ref1 = { element_type__content1 : us_rep3
}

function element_type__ref___5__projection(a: element_type__ref1) : us_rep3 =
  (a).element_type__content1

logic equivalent_elements__function_guard : bool, us_rep3, us_rep3 -> prop

axiom no_element__def_axiom : (no_element = of_rep(0))

type element_type__ref2 = { element_type__content2 : us_rep3
}

function element_type__ref___7__projection(a: element_type__ref2) : us_rep3 =
  (a).element_type__content2

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep4

logic bool_eq10 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep4. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep4. (0 <= object__alignment4(a)))

logic user_eq8 : us_rep4, us_rep4 -> bool

logic dummy10 : us_rep4

type sequence__ref = { sequence__content : us_rep4
}

function sequence__ref___2__projection(a: sequence__ref) : us_rep4 =
  (a).sequence__content

logic length3 : us_rep4 -> int

logic length__function_guard3 : int, us_rep4 -> prop

logic get1 : us_rep4, int -> us_rep3

logic get__function_guard1 : us_rep3, us_rep4, int -> prop

logic e_bigger_than_range__function_guard : bool, us_rep4, int, int,
  us_rep3 -> prop

logic e_smaller_than_range__function_guard : bool, us_rep4, int, int,
  us_rep3 -> prop

logic e_is_find__function_guard : bool, us_rep4, us_rep3, int -> prop

logic last__function_guard : int, us_rep4 -> prop

logic oeq__function_guard2 : bool, us_rep4, us_rep4 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep4. forall b:us_rep4 [user_eq8(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length3(a)))) ->
    (bool_eq9(get1(a, n), get1(b, n)) = true))) ->
  (user_eq8(a, b) = match_bool(bool_eq(length3(a), length3(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length3(a)))) ->
        (bool_eq9(get1(a, n), get1(b, n)) = true)))) ->
  (user_eq8(a, b) = match_bool(bool_eq(length3(a), length3(b)), false,
  false)))))

logic find : us_rep4, us_rep3 -> int

logic find__function_guard : int, us_rep4, us_rep3 -> prop

axiom find__post_axiom :
  (forall container2:us_rep4.
  (forall item:natural. forall item1:integer [find(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } })]. (((0 <  find(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } })) -> ((find(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) <= length3(container2)) and
  ((not (bool_lt(to_rep2(item), to_rep2(((get1(container2, find(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 }
  }))).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true)) and
  ((bool_lt(to_rep2(item), to_rep2(((get1(container2, find(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 }
  }))).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = false) ->
  (not (bool_lt(to_rep2(((get1(container2, find(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 }
  }))).us_split_fields5).rec__my_ordered_sets__my_rec__f),
  to_rep2(item)) = true)))))) and in_range1(find(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } })))))

logic e_elements_included__function_guard : bool, us_rep4, us_rep4 -> prop

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep5

logic bool_eq11 : us_rep5, us_rep5 -> bool

logic value__size5 : int

logic object__size5 : us_rep5 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep5 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep5. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep5. (0 <= object__alignment5(a)))

logic user_eq9 : us_rep5, us_rep5 -> bool

logic dummy11 : us_rep5

type set__ref1 = { set__content1 : us_rep5
}

function set__ref___4__projection(a: set__ref1) : us_rep5 = (a).set__content1

logic is_empty1 : us_rep5 -> bool

logic is_empty__function_guard1 : bool, us_rep5 -> prop

logic length4 : us_rep5 -> int

logic length__function_guard4 : int, us_rep5 -> prop

logic model__ : us_rep -> us_rep5

logic model____function_guard : us_rep5, us_rep -> prop

axiom model____post_axiom :
  (forall container2:count_type. forall container3:us_main_type [model__({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } })].
  (length4(model__({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } })) = length({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } })))

type element_type__ref3 = { element_type__content3 : us_rep3
}

function element_type__ref___6__projection(a: element_type__ref3) : us_rep3 =
  (a).element_type__content3

logic contains : us_rep5, us_rep3 -> bool

logic contains__function_guard : bool, us_rep5, us_rep3 -> prop

type extended_index

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq10 : extended_index, extended_index -> bool

logic dummy12 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

logic iter_has_element__function_guard : bool, us_rep4, int -> prop

logic elements : us_rep -> us_rep4

logic elements__function_guard : us_rep4, us_rep -> prop

axiom elements__post_axiom :
  (forall container2:count_type. forall container3:us_main_type [elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } })].
  ((((length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } })) = length({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } })) and
  (forall temp___683:int. ((in_range5(temp___683) and ((1 <= temp___683) and
  (temp___683 <= (0 + length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } })))))) -> (contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }), temp___683)) = true)))) and
  (forall item:natural. forall item1:integer. ((contains(model__({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }), {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) = true) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }), { us_split_fields5 = {
  rec__my_ordered_sets__my_rec__f = item; rec__my_ordered_sets__my_rec__g =
  item1 } })) and ((not (bool_lt(to_rep2(((get1(elements({ us_split_discrs1 =
  { rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
  { rec__my_ordered_sets__n__set = container3 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }), {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 }
  }))).us_split_fields5).rec__my_ordered_sets__my_rec__f),
  to_rep2(item)) = true)) and ((bool_lt(to_rep2(((get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }),
  find(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }), { us_split_fields5 = {
  rec__my_ordered_sets__my_rec__f = item; rec__my_ordered_sets__my_rec__g =
  item1 } }))).us_split_fields5).rec__my_ordered_sets__my_rec__f),
  to_rep2(item)) = false) -> (not (bool_lt(to_rep2(item),
  to_rep2(((get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }), find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }), {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 }
  }))).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }))) -> ((find(elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2 };
  us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }),
  get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }), i)) = i) and (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) ->
    (bool_lt(to_rep2(((get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
    { rec__my_ordered_sets__n__set = container3 } }),
    i1)).us_split_fields5).rec__my_ordered_sets__my_rec__f),
    to_rep2(((get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
    { rec__my_ordered_sets__n__set = container3 } }),
    i)).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true))) ->
  (((i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
    us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2
    }; us_split_fields1 = { rec__my_ordered_sets__n__set = container3 }
    })))) -> (bool_lt(to_rep2(((get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
    { rec__my_ordered_sets__n__set = container3 } }),
    i)).us_split_fields5).rec__my_ordered_sets__my_rec__f),
    to_rep2(((get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
    { rec__my_ordered_sets__n__set = container3 } }),
    i1)).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity =
        container2 }; us_split_fields1 = { rec__my_ordered_sets__n__set =
        container3 } })))) -> (bool_lt(to_rep2(((get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity =
        container2 }; us_split_fields1 = { rec__my_ordered_sets__n__set =
        container3 } }),
        i)).us_split_fields5).rec__my_ordered_sets__my_rec__f),
        to_rep2(((get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__n__set__capacity = container2 };
        us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }),
        i1)).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true)))) ->
  (match_bool(true, false, false) = true)))) and
  ((not (i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } })))) -> (match_bool(true,
  of_int(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) ->
        (bool_lt(to_rep2(((get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__n__set__capacity = container2 };
        us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }),
        i1)).us_split_fields5).rec__my_ordered_sets__my_rec__f),
        to_rep2(((get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__n__set__capacity = container2 };
        us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }),
        i)).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true)))) ->
  (((i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
    us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2
    }; us_split_fields1 = { rec__my_ordered_sets__n__set = container3 }
    })))) -> (bool_lt(to_rep2(((get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
    { rec__my_ordered_sets__n__set = container3 } }),
    i)).us_split_fields5).rec__my_ordered_sets__my_rec__f),
    to_rep2(((get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
    { rec__my_ordered_sets__n__set = container3 } }),
    i1)).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity =
        container2 }; us_split_fields1 = { rec__my_ordered_sets__n__set =
        container3 } })))) -> (bool_lt(to_rep2(((get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity =
        container2 }; us_split_fields1 = { rec__my_ordered_sets__n__set =
        container3 } }),
        i)).us_split_fields5).rec__my_ordered_sets__my_rec__f),
        to_rep2(((get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__n__set__capacity = container2 };
        us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }),
        i1)).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true)))) ->
  (match_bool(false, false, false) = true)))) and
  ((not (i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } })))) -> (match_bool(false,
  of_int(1), false) = true)))))) and ((not (0 <  i)) ->
  (((i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
    us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = container2
    }; us_split_fields1 = { rec__my_ordered_sets__n__set = container3 }
    })))) -> (bool_lt(to_rep2(((get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
    { rec__my_ordered_sets__n__set = container3 } }),
    i)).us_split_fields5).rec__my_ordered_sets__my_rec__f),
    to_rep2(((get1(elements({ us_split_discrs1 = {
    rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 =
    { rec__my_ordered_sets__n__set = container3 } }),
    i1)).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity =
        container2 }; us_split_fields1 = { rec__my_ordered_sets__n__set =
        container3 } })))) -> (bool_lt(to_rep2(((get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity =
        container2 }; us_split_fields1 = { rec__my_ordered_sets__n__set =
        container3 } }),
        i)).us_split_fields5).rec__my_ordered_sets__my_rec__f),
        to_rep2(((get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__n__set__capacity = container2 };
        us_split_fields1 = { rec__my_ordered_sets__n__set = container3 } }),
        i1)).us_split_fields5).rec__my_ordered_sets__my_rec__f)) = true)))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container2 }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container3 } })))) -> (match_bool(of_int(1),
  of_int(1), false) = true))))))))))

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [oeq({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__n__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__n__set = right1 } })]. (((oeq({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__n__set = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__n__set = right1 } }) = true) ->
  (((bool_eq(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = left1 } })), length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__n__set = right1 }
  }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = left };
  us_split_fields1 = { rec__my_ordered_sets__n__set = left1 } }))))) ->
  (bool_eq9(get1(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = left1 } }), n), get1(elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__n__set = right1 } }),
  n)) = true)))) and (not (bool_eq(length3(elements({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = left1 } })), length3(elements({
  us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right };
  us_split_fields1 = { rec__my_ordered_sets__n__set = right1 }
  }))) = false)))) and ((not (oeq({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = left }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = left1 } }, { us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = right }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = right1 } }) = true)) ->
  ((not (forall i:int. (((1 <= i) and (i <= length3(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = left };
        us_split_fields1 = { rec__my_ordered_sets__n__set = left1 } })))) ->
        ((0 <  find(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__n__set__capacity = right }; us_split_fields1 =
        { rec__my_ordered_sets__n__set = right1 } }), get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = left };
        us_split_fields1 = { rec__my_ordered_sets__n__set = left1 } }),
        i))) and (bool_eq9(get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__n__set__capacity = right }; us_split_fields1 =
        { rec__my_ordered_sets__n__set = right1 } }), find(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right
        }; us_split_fields1 = { rec__my_ordered_sets__n__set = right1 } }),
        get1(elements({ us_split_discrs1 = {
        rec__my_ordered_sets__n__set__capacity = left }; us_split_fields1 = {
        rec__my_ordered_sets__n__set = left1 } }), i))), get1(elements({
        us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = left };
        us_split_fields1 = { rec__my_ordered_sets__n__set = left1 } }),
        i)) = true))))) or
  (not (forall i:int. (((1 <= i) and (i <= length3(elements({
       us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right };
       us_split_fields1 = { rec__my_ordered_sets__n__set = right1 } })))) ->
       ((0 <  find(elements({ us_split_discrs1 = {
       rec__my_ordered_sets__n__set__capacity = left }; us_split_fields1 = {
       rec__my_ordered_sets__n__set = left1 } }), get1(elements({
       us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right };
       us_split_fields1 = { rec__my_ordered_sets__n__set = right1 } }),
       i))) and (bool_eq9(get1(elements({ us_split_discrs1 = {
       rec__my_ordered_sets__n__set__capacity = left }; us_split_fields1 = {
       rec__my_ordered_sets__n__set = left1 } }), find(elements({
       us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = left };
       us_split_fields1 = { rec__my_ordered_sets__n__set = left1 } }),
       get1(elements({ us_split_discrs1 = {
       rec__my_ordered_sets__n__set__capacity = right }; us_split_fields1 = {
       rec__my_ordered_sets__n__set = right1 } }), i))), get1(elements({
       us_split_discrs1 = { rec__my_ordered_sets__n__set__capacity = right };
       us_split_fields1 = { rec__my_ordered_sets__n__set = right1 } }),
       i)) = true)))))))))

axiom oeq__post__dispatch_axiom : true

axiom contains__post_axiom :
  (forall container2:us_rep5.
  (forall item:natural. forall item1:integer [contains(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } })]. ((of_int(1) = true) ->
  ((exists e:natural. exists e1:integer. ((contains(container2, {
   us_split_fields5 = { rec__my_ordered_sets__my_rec__f = e;
   rec__my_ordered_sets__my_rec__g = e1 } }) = true) and
   ((bool_lt(to_rep2(e), to_rep2(item)) = false) and (bool_lt(to_rep2(item),
   to_rep2(e)) = false)))) ->
  (contains(container2, { us_split_fields5 = {
  rec__my_ordered_sets__my_rec__f = item; rec__my_ordered_sets__my_rec__g =
  item1 } }) = true)))))

axiom length__post_axiom1 :
  (forall container2:us_rep5 [length4(container2)].
  in_range1(length4(container2)))

axiom is_empty__post_axiom :
  (forall container2:us_rep5 [is_empty1(container2)].
  (((is_empty1(container2) = true) <->
  (forall item:natural. forall item1:integer. (not (contains(container2, {
  us_split_fields5 = { rec__my_ordered_sets__my_rec__f = item;
  rec__my_ordered_sets__my_rec__g = item1 } }) = true)))) and
  ((is_empty1(container2) = true) <-> (length4(container2) = 0))))

axiom length__post_axiom2 :
  (forall container2:us_rep4 [length3(container2)].
  (((0 + length3(container2)) <= 2147483647) and
  in_range1(length3(container2))))

axiom get__post_axiom1 : true

axiom has_key__post_axiom :
  (forall container2:us_rep2.
  (forall key:count_type [has_key(container2, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } })]. ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container2, { us_split_fields3 = {
   rec__my_ordered_sets__n__cursor__node = k } }) = true) and (bool_eq4({
   us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = k } }, {
   us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = key }
   }) = true))) ->
  (has_key(container2, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } }) = true)))))

axiom length__post_axiom3 :
  (forall container2:us_rep2 [length2(container2)].
  in_range1(length2(container2)))

axiom is_empty__post_axiom1 :
  (forall container2:us_rep2 [is_empty(container2)].
  ((is_empty(container2) = true) <->
  (forall key:count_type. (not (has_key(container2, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } }) = true)))))

logic has_witness : us_rep2, int -> bool

logic has_witness__function_guard : bool, us_rep2, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container2:us_rep2.
  (forall key:count_type [witness(container2, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } })]. ((has_key(container2, {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = key }
  }) = true) -> ((has_witness(container2, witness(container2, {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = key }
  })) = true) and in_range1(witness(container2, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = key } }))))))

axiom w_get__post_axiom :
  (forall container2:us_rep2.
  (forall witness1:int [w_get(container2, witness1)].
  ((in_range1(witness1) and (has_witness(container2, witness1) = true)) ->
  in_range2(w_get(container2, witness1)))))

 (* File "a-cforse.ads", line 1308, characters 0-0 *)
goal WP_parameter_def :
  (forall o:count_type. forall o1:count_type. forall temp___1072:count_type.
  forall o2:us_rep2. forall o3:int. (((((to_rep(o) = 0) and (o = o1)) and
  (temp___1072 = o1)) and (temp___1072 = no_element)) ->
  (((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }), { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = position } }) = true) or
  (bool_eq4({ us_split_fields3 = { rec__my_ordered_sets__n__cursor__node =
  position } }, { us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = no_element } }) = true)) ->
  ((not (bool_eq4({ us_split_fields3 = {
  rec__my_ordered_sets__n__cursor__node = position } }, { us_split_fields3 =
  { rec__my_ordered_sets__n__cursor__node = no_element } }) = true)) ->
  (((o3 = length({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } })) and (in_range1(o3) and
  (o3 <= to_rep(container)))) -> (((o2 = positions({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } })) and ((not (has_key(o2, {
  us_split_fields3 = { rec__my_ordered_sets__n__cursor__node = no_element }
  }) = true)) and
  (forall i:us_rep1. ((has_key(o2, i) = true) -> (((1 <= get(o2, i)) and
  (get(o2, i) <= length({ us_split_discrs1 = {
  rec__my_ordered_sets__n__set__capacity = container }; us_split_fields1 = {
  rec__my_ordered_sets__n__set = container1 } }))) and
  (forall j:us_rep1. ((has_key(o2, j) = true) -> ((get(o2, i) = get(o2,
  j)) -> (bool_eq4(i, j) = true))))))))) -> (has_key(o2, { us_split_fields3 =
  { rec__my_ordered_sets__n__cursor__node = position } }) = true)))))))
