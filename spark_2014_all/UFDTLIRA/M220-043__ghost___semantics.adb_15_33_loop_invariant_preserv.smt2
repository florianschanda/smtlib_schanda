(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun ghost_func (tuple0) Int)
(declare-fun ghost_func__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (ghost_func us_void_param) true false true true) :pattern ((ghost_func us_void_param)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t1b 0)
(declare-fun t1bqtint (t1b) Int)
(assert (forall ((i t1b)) (and (<= 1 (t1bqtint i)) (<= (t1bqtint i) 2))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (t1b t1b) Bool)
(declare-const dummy1 t1b)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const formal Int)
(declare-const i Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 Int)
(declare-const formal1 Int)
(declare-const formal2 Int)
(declare-const i2 Int)
(declare-const temp___160 Int)
(declare-const result2 Int)
(declare-const temp___1601 Int)
(declare-const result3 Int)
(declare-const i3 Int)
(declare-const result4 Int)
(declare-const formal3 Int)
(assert (in_range1 formal))
(assert (= formal (ghost_func Tuple0)))
(assert (< 0 (+ formal (ghost_func Tuple0))))
(assert (< 0 (+ formal (ghost_func Tuple0))))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 2))
(assert (and (= o (+ formal 1)) (in_range1 (+ formal 1))))
(assert (= (mk_int__ref result1) (mk_int__ref formal)))
(assert (= formal1 o))
(assert (< 0 (+ formal2 (ghost_func Tuple0))))
(assert (and (and (in_range1 formal2) (=> (<= 1 2) (in_range2 i2))) (and (<= 1 i2) (<= i2 2))))
(assert (= temp___160 result2))
(assert (= temp___1601 (+ formal2 (ghost_func Tuple0))))
(assert (not (= i2 2)))
(assert (= i2 result3))
(assert (= i3 (+ i2 1)))
(assert (and (= o1 (+ formal2 1)) (in_range1 (+ formal2 1))))
(assert (= formal2 result4))
(assert (= formal3 o1))
(assert (not (< 0 (+ formal3 (ghost_func Tuple0)))))
(check-sat)
(exit)
