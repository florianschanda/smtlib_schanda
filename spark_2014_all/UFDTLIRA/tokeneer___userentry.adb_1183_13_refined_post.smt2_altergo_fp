(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type yearst

predicate in_range1(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : yearst, yearst -> bool

logic dummy : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep : yearst -> int

logic of_rep : int -> yearst

axiom inversion_axiom :
  (forall x:yearst [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:yearst [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type monthst

predicate in_range2(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : monthst, monthst -> bool

logic dummy1 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep1 : monthst -> int

logic of_rep1 : int -> monthst

axiom inversion_axiom1 :
  (forall x:monthst [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:monthst [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type dayst

predicate in_range3(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : dayst, dayst -> bool

logic dummy2 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep2 : dayst -> int

logic of_rep2 : int -> dayst

axiom inversion_axiom2 :
  (forall x:dayst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:dayst [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type millisecst

predicate in_range4(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : millisecst, millisecst -> bool

logic dummy3 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep3 : millisecst -> int

logic of_rep3 : int -> millisecst

axiom inversion_axiom3 :
  (forall x:millisecst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:millisecst [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((((to_rep(((a).us_split_fields1).rec__clock__timet__year) = to_rep(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep1(((a).us_split_fields1).rec__clock__timet__month) = to_rep1(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__day) = to_rep2(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep3(((b).us_split_fields1).rec__clock__timet__millisec))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields1).rec__clock__timet__year) = to_rep(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep1(((a).us_split_fields1).rec__clock__timet__month) = to_rep1(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__day) = to_rep2(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep3(((b).us_split_fields1).rec__clock__timet__millisec)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : yearst

logic dummy5 : monthst

logic dummy6 : dayst

logic dummy7 : millisecst

type timet__ref = { timet__content : us_rep
}

function timet__ref___projection(a: timet__ref) : us_rep = (a).timet__content

logic thecurrenttime : us_private -> us_rep

logic thecurrenttime__function_guard : us_rep, us_private -> prop

axiom thecurrenttime__post_axiom : true

logic greaterthanorequal : us_rep, us_rep -> bool

logic greaterthanorequal__function_guard : bool, us_rep, us_rep -> prop

axiom greaterthanorequal__post_axiom : true

logic islocked : us_private -> bool

logic islocked__function_guard : bool, us_private -> prop

axiom islocked__post_axiom : true

logic alarm_timeout : us_private -> us_rep

logic alarm_timeout__function_guard : us_rep, us_private -> prop

axiom alarm_timeout__post_axiom : true

logic thecurrentdoor : us_private -> int

logic thecurrentdoor__function_guard : int, us_private -> prop

type t

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : t, t -> bool

logic dummy8 : t

type t__ref = { t__content : t
}

function t__ref___3__projection(a: t__ref) : t = (a).t__content

axiom thecurrentdoor__post_axiom :
  (forall door__state:us_private [thecurrentdoor(door__state)].
  in_range5(thecurrentdoor(door__state)))

logic thedooralarm : us_private -> int

logic thedooralarm__function_guard : int, us_private -> prop

type statust

predicate in_range6(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : statust, statust -> bool

logic dummy9 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

axiom thedooralarm__post_axiom :
  (forall door__state:us_private [thedooralarm(door__state)].
  in_range6(thedooralarm(door__state)))

logic privatekeypresent : us_private -> bool

logic privatekeypresent__function_guard : bool, us_private -> prop

axiom privatekeypresent__post_axiom : true

type statscount

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : statscount, statscount -> bool

logic dummy10 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep4 : statscount -> int

logic of_rep4 : int -> statscount

axiom inversion_axiom4 :
  (forall x:statscount [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:statscount [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields2 = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields2) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___14__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq10(a, b)].
  ((((((to_rep4(((a).us_split_fields3).rec__stats__t__successentry) = to_rep4(((b).us_split_fields3).rec__stats__t__successentry)) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__failentry) = to_rep4(((b).us_split_fields3).rec__stats__t__failentry))) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__successbio) = to_rep4(((b).us_split_fields3).rec__stats__t__successbio))) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__failbio) = to_rep4(((b).us_split_fields3).rec__stats__t__failbio))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((to_rep4(((a).us_split_fields3).rec__stats__t__successentry) = to_rep4(((b).us_split_fields3).rec__stats__t__successentry)) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__failentry) = to_rep4(((b).us_split_fields3).rec__stats__t__failentry))) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__successbio) = to_rep4(((b).us_split_fields3).rec__stats__t__successbio))) and
  (to_rep4(((a).us_split_fields3).rec__stats__t__failbio) = to_rep4(((b).us_split_fields3).rec__stats__t__failbio)))) ->
  (bool_eq10(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size1({ us_split_fields3 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment1({ us_split_fields3 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy11 : statscount

logic dummy12 : statscount

logic dummy13 : statscount

logic dummy14 : statscount

type t__ref1 = { t__content1 : us_rep1
}

function t__ref___4__projection(a: t__ref1) : us_rep1 = (a).t__content1

logic attr__ATTRIBUTE_ADDRESS : int

logic currentactivitypossible : us_private, int -> bool

logic currentactivitypossible__function_guard : bool, us_private, int -> prop

logic inprogress : int -> bool

logic inprogress__function_guard : bool, int -> prop

type statust1

predicate in_range8(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : statust1, statust1 -> bool

logic dummy15 : statust1

type statust__ref1 = { statust__content1 : statust1
}

function statust__ref___2__projection(a: statust__ref1) : statust1 =
  (a).statust__content1

logic userhasdeparted : us_private, int -> bool

logic userhasdeparted__function_guard : bool, us_private, int -> prop

axiom currentactivitypossible__post_axiom : true

axiom currentactivitypossible__def_axiom :
  (forall usertoken__state:us_private.
  (forall userentry__status:int [currentactivitypossible(usertoken__state,
  userentry__status)]. ((currentactivitypossible(usertoken__state,
  userentry__status) = true) <-> ((inprogress(userentry__status) = true) or
  (userhasdeparted(usertoken__state, userentry__status) = true)))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type activestatust

predicate in_range9(x: int) = ((1 <= x) and (x <= 7))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : activestatust, activestatust -> bool

logic dummy16 : activestatust

type activestatust__ref = { activestatust__content : activestatust
}

function activestatust__ref___projection(a: activestatust__ref) : activestatust =
  (a).activestatust__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic ispresent : us_private -> bool

logic ispresent__function_guard : bool, us_private -> prop

axiom userhasdeparted__post_axiom : true

axiom userhasdeparted__def_axiom :
  (forall usertoken__state:us_private.
  (forall userentry__status:int [userhasdeparted(usertoken__state,
  userentry__status)]. ((userhasdeparted(usertoken__state,
  userentry__status) = true) <-> ((0 <  userentry__status) and
  (not (ispresent(usertoken__state) = true))))))

axiom inprogress__post_axiom : true

axiom inprogress__def_axiom :
  (forall userentry__status:int [inprogress(userentry__status)].
  ((inprogress(userentry__status) = true) <-> ((0 <  userentry__status) and
  (userentry__status <  7))))

axiom ispresent__post_axiom : true

 (* File "userentry.adb", line 1000, characters 0-0 *)
goal WP_parameter_def :
  (forall status:int. forall fingertimeout__split_fields:yearst.
  forall fingertimeout__split_fields1:monthst.
  forall fingertimeout__split_fields2:dayst.
  forall fingertimeout__split_fields3:millisecst.
  forall tokenremovaltimeout__split_fields:yearst.
  forall tokenremovaltimeout__split_fields1:monthst.
  forall tokenremovaltimeout__split_fields2:dayst.
  forall tokenremovaltimeout__split_fields3:millisecst.
  forall localstatus:int. forall currenttime:us_private.
  forall state:us_private. forall state1:us_private.
  forall filestate:us_private. forall state2:us_private.
  forall state3:us_private. forall state4:us_private.
  forall status1:us_private. forall output:us_private. forall o:int.
  forall fingertimeout__split_fields4:yearst.
  forall fingertimeout__split_fields5:monthst.
  forall fingertimeout__split_fields6:dayst.
  forall fingertimeout__split_fields7:millisecst.
  forall tokenremovaltimeout__split_fields4:yearst.
  forall tokenremovaltimeout__split_fields5:monthst.
  forall tokenremovaltimeout__split_fields6:dayst.
  forall tokenremovaltimeout__split_fields7:millisecst.
  forall state5:us_private. forall state6:us_private.
  forall filestate1:us_private. forall state7:us_private.
  forall status2:us_private. forall output1:us_private. forall result:int.
  forall localstatus1:int. forall thestats__split_fields:statscount.
  forall thestats__split_fields1:statscount.
  forall thestats__split_fields2:statscount.
  forall thestats__split_fields3:statscount. forall status3:int.
  forall fingertimeout__split_fields8:yearst.
  forall fingertimeout__split_fields9:monthst.
  forall fingertimeout__split_fields10:dayst.
  forall fingertimeout__split_fields11:millisecst. forall state8:us_private.
  forall filestate2:us_private. forall state9:us_private.
  forall state10:us_private. forall status4:us_private.
  forall thestats__split_fields4:statscount.
  forall thestats__split_fields5:statscount.
  forall thestats__split_fields6:statscount.
  forall thestats__split_fields7:statscount. forall status5:int.
  forall state11:us_private. forall filestate3:us_private.
  forall state12:us_private. forall state13:us_private.
  forall thestats__split_fields8:statscount.
  forall thestats__split_fields9:statscount.
  forall thestats__split_fields10:statscount.
  forall thestats__split_fields11:statscount. forall status6:int.
  forall state14:us_private. forall filestate4:us_private.
  forall state15:us_private. forall state16:us_private.
  forall thestats__split_fields12:statscount.
  forall thestats__split_fields13:statscount.
  forall thestats__split_fields14:statscount.
  forall thestats__split_fields15:statscount. forall status7:int.
  forall state17:us_private. forall filestate5:us_private.
  forall filestate6:us_private. forall state18:us_private.
  forall state19:us_private. forall state20:us_private.
  forall status8:us_private. forall output2:us_private.
  forall thestats__split_fields16:statscount.
  forall thestats__split_fields17:statscount.
  forall thestats__split_fields18:statscount.
  forall thestats__split_fields19:statscount. forall status9:int.
  forall tokenremovaltimeout__split_fields8:yearst.
  forall tokenremovaltimeout__split_fields9:monthst.
  forall tokenremovaltimeout__split_fields10:dayst.
  forall tokenremovaltimeout__split_fields11:millisecst.
  forall state21:us_private. forall filestate7:us_private.
  forall state22:us_private. forall state23:us_private.
  forall thestats__split_fields20:statscount.
  forall thestats__split_fields21:statscount.
  forall thestats__split_fields22:statscount.
  forall thestats__split_fields23:statscount. forall status10:int.
  forall state24:us_private. forall filestate8:us_private.
  forall state25:us_private. forall state26:us_private.
  forall state27:us_private. forall state28:us_private.
  forall thestats__split_fields24:statscount.
  forall thestats__split_fields25:statscount.
  forall thestats__split_fields26:statscount.
  forall thestats__split_fields27:statscount. forall status11:int.
  forall state29:us_private. forall filestate9:us_private.
  forall state30:us_private. forall state31:us_private.
  forall thestats__split_fields28:statscount.
  forall thestats__split_fields29:statscount.
  forall thestats__split_fields30:statscount.
  forall thestats__split_fields31:statscount. forall status12:int.
  forall fingertimeout__split_fields12:yearst.
  forall fingertimeout__split_fields13:monthst.
  forall fingertimeout__split_fields14:dayst.
  forall fingertimeout__split_fields15:millisecst.
  forall tokenremovaltimeout__split_fields12:yearst.
  forall tokenremovaltimeout__split_fields13:monthst.
  forall tokenremovaltimeout__split_fields14:dayst.
  forall tokenremovaltimeout__split_fields15:millisecst.
  forall localstatus2:int. forall state32:us_private.
  forall filestate10:us_private. forall state33:us_private__ref.
  forall state34:us_private__ref. forall filestate11:us_private__ref.
  forall state35:us_private__ref. forall state36:us_private__ref.
  forall state37:us_private__ref. forall status13:us_private__ref.
  forall output3:us_private__ref.
  forall thestats__split_fields32:us_split_fields2. forall status14:int.
  forall fingertimeout__split_fields16:us_split_fields.
  forall tokenremovaltimeout__split_fields16:us_split_fields.
  forall localstatus3:int. forall state38:us_private.
  forall filestate12:us_private. forall state39:us_private.
  forall state40:us_private. forall filestate13:us_private.
  forall state41:us_private. forall state42:us_private.
  forall state43:us_private. forall status15:us_private.
  forall output4:us_private. (in_range8(status) ->
  ((((currentactivitypossible(state4, status) = true) and
  (privatekeypresent(state3) = true)) and ((((islocked(state) = true) and
  (thecurrentdoor(state1) = 0)) and
  (greaterthanorequal(thecurrenttime(currenttime),
  alarm_timeout(state1)) = true)) <-> (thedooralarm(state1) = 0))) ->
  (((((1 <= 7) -> in_range9(localstatus)) and ((((o = status) and
  in_range9(status)) and ((result = localstatus) and (localstatus1 = o))) and
  (((localstatus1 = 1) and (in_range8(status3) and (((output2 = output) and
  ((state18 = state2) and ((filestate6 = filestate) and
  ((state26 = state1) and ((state25 = state) and
  ((tokenremovaltimeout__split_fields = tokenremovaltimeout__split_fields8) and
  ((tokenremovaltimeout__split_fields1 = tokenremovaltimeout__split_fields9) and
  ((tokenremovaltimeout__split_fields2 = tokenremovaltimeout__split_fields10) and
  (tokenremovaltimeout__split_fields3 = tokenremovaltimeout__split_fields11))))))))) and
  ((output2 = output1) and ((state18 = state7) and
  ((filestate6 = filestate1) and ((state26 = state6) and
  ((state25 = state5) and ({ rec__clock__timet__year =
  tokenremovaltimeout__split_fields8; rec__clock__timet__month =
  tokenremovaltimeout__split_fields9; rec__clock__timet__day =
  tokenremovaltimeout__split_fields10; rec__clock__timet__millisec =
  tokenremovaltimeout__split_fields11 } = { rec__clock__timet__year =
  tokenremovaltimeout__split_fields4; rec__clock__timet__month =
  tokenremovaltimeout__split_fields5; rec__clock__timet__day =
  tokenremovaltimeout__split_fields6; rec__clock__timet__millisec =
  tokenremovaltimeout__split_fields7 }))))))))) or
  ((not (localstatus1 = 1)) and ((((localstatus1 = 2) and
  (in_range8(status5) and (((output2 = output) and ((status8 = status1) and
  ((state18 = state2) and ((filestate6 = filestate) and
  ((state26 = state1) and ((state25 = state) and
  ((tokenremovaltimeout__split_fields = tokenremovaltimeout__split_fields8) and
  ((tokenremovaltimeout__split_fields1 = tokenremovaltimeout__split_fields9) and
  ((tokenremovaltimeout__split_fields2 = tokenremovaltimeout__split_fields10) and
  (tokenremovaltimeout__split_fields3 = tokenremovaltimeout__split_fields11)))))))))) and
  ((output2 = output1) and ((status8 = status2) and ((state18 = state7) and
  ((filestate6 = filestate1) and ((state26 = state6) and
  ((state25 = state5) and ({ rec__clock__timet__year =
  tokenremovaltimeout__split_fields8; rec__clock__timet__month =
  tokenremovaltimeout__split_fields9; rec__clock__timet__day =
  tokenremovaltimeout__split_fields10; rec__clock__timet__millisec =
  tokenremovaltimeout__split_fields11 } = { rec__clock__timet__year =
  tokenremovaltimeout__split_fields4; rec__clock__timet__month =
  tokenremovaltimeout__split_fields5; rec__clock__timet__day =
  tokenremovaltimeout__split_fields6; rec__clock__timet__millisec =
  tokenremovaltimeout__split_fields7 })))))))))) or
  ((not (localstatus1 = 2)) and ((((localstatus1 = 3) and
  (in_range8(status6) and (((output2 = output) and ((status8 = status1) and
  ((state18 = state2) and ((filestate6 = filestate) and
  ((state26 = state1) and ((state25 = state) and
  ((tokenremovaltimeout__split_fields = tokenremovaltimeout__split_fields8) and
  ((tokenremovaltimeout__split_fields1 = tokenremovaltimeout__split_fields9) and
  ((tokenremovaltimeout__split_fields2 = tokenremovaltimeout__split_fields10) and
  (tokenremovaltimeout__split_fields3 = tokenremovaltimeout__split_fields11)))))))))) and
  ((output2 = output1) and ((status8 = status2) and ((state18 = state7) and
  ((filestate6 = filestate1) and ((state26 = state6) and
  ((state25 = state5) and ({ rec__clock__timet__year =
  tokenremovaltimeout__split_fields8; rec__clock__timet__month =
  tokenremovaltimeout__split_fields9; rec__clock__timet__day =
  tokenremovaltimeout__split_fields10; rec__clock__timet__millisec =
  tokenremovaltimeout__split_fields11 } = { rec__clock__timet__year =
  tokenremovaltimeout__split_fields4; rec__clock__timet__month =
  tokenremovaltimeout__split_fields5; rec__clock__timet__day =
  tokenremovaltimeout__split_fields6; rec__clock__timet__millisec =
  tokenremovaltimeout__split_fields7 })))))))))) or
  ((not (localstatus1 = 3)) and ((((localstatus1 = 4) and
  (in_range8(status7) and (((state26 = state1) and ((state25 = state) and
  ((tokenremovaltimeout__split_fields = tokenremovaltimeout__split_fields8) and
  ((tokenremovaltimeout__split_fields1 = tokenremovaltimeout__split_fields9) and
  ((tokenremovaltimeout__split_fields2 = tokenremovaltimeout__split_fields10) and
  (tokenremovaltimeout__split_fields3 = tokenremovaltimeout__split_fields11)))))) and
  ((state26 = state6) and ((state25 = state5) and ({
  rec__clock__timet__year = tokenremovaltimeout__split_fields8;
  rec__clock__timet__month = tokenremovaltimeout__split_fields9;
  rec__clock__timet__day = tokenremovaltimeout__split_fields10;
  rec__clock__timet__millisec = tokenremovaltimeout__split_fields11 } = {
  rec__clock__timet__year = tokenremovaltimeout__split_fields4;
  rec__clock__timet__month = tokenremovaltimeout__split_fields5;
  rec__clock__timet__day = tokenremovaltimeout__split_fields6;
  rec__clock__timet__millisec = tokenremovaltimeout__split_fields7 })))))) or
  ((not (localstatus1 = 4)) and ((((localstatus1 = 5) and
  (in_range8(status9) and (((state26 = state1) and (state25 = state)) and
  ((state26 = state6) and (state25 = state5))))) or
  ((not (localstatus1 = 5)) and ((((localstatus1 = 6) and
  (((((islocked(state25) = true) and (thecurrentdoor(state26) = 0)) and
  (greaterthanorequal(thecurrenttime(currenttime),
  alarm_timeout(state26)) = true)) <-> (thedooralarm(state26) = 0)) and
  in_range8(status10))) or ((not (localstatus1 = 6)) and
  (in_range8(status11) and (((state28 = state31) and ((state27 = state30) and
  ((state26 = state1) and ((state25 = state) and
  ((filestate8 = filestate9) and ((state24 = state29) and
  ((status10 = status11) and ({ rec__stats__t__successentry =
  thestats__split_fields20; rec__stats__t__failentry =
  thestats__split_fields21; rec__stats__t__successbio =
  thestats__split_fields22; rec__stats__t__failbio = thestats__split_fields23
  } = { rec__stats__t__successentry = thestats__split_fields24;
  rec__stats__t__failentry = thestats__split_fields25;
  rec__stats__t__successbio = thestats__split_fields26;
  rec__stats__t__failbio = thestats__split_fields27 })))))))) and
  ((state28 = state31) and ((state27 = state30) and ((state26 = state6) and
  ((state25 = state5) and ((filestate8 = filestate9) and
  ((state24 = state29) and ((status10 = status11) and ({
  rec__stats__t__successentry = thestats__split_fields20;
  rec__stats__t__failentry = thestats__split_fields21;
  rec__stats__t__successbio = thestats__split_fields22;
  rec__stats__t__failbio = thestats__split_fields23 } = {
  rec__stats__t__successentry = thestats__split_fields24;
  rec__stats__t__failentry = thestats__split_fields25;
  rec__stats__t__successbio = thestats__split_fields26;
  rec__stats__t__failbio = thestats__split_fields27 })))))))))))) and
  (((state23 = state28) and ((state22 = state27) and
  ((filestate7 = filestate8) and ((state21 = state24) and
  (((tokenremovaltimeout__split_fields = tokenremovaltimeout__split_fields8) and
  ((tokenremovaltimeout__split_fields1 = tokenremovaltimeout__split_fields9) and
  ((tokenremovaltimeout__split_fields2 = tokenremovaltimeout__split_fields10) and
  (tokenremovaltimeout__split_fields3 = tokenremovaltimeout__split_fields11)))) and
  ((status9 = status10) and ({ rec__stats__t__successentry =
  thestats__split_fields16; rec__stats__t__failentry =
  thestats__split_fields17; rec__stats__t__successbio =
  thestats__split_fields18; rec__stats__t__failbio = thestats__split_fields19
  } = { rec__stats__t__successentry = thestats__split_fields20;
  rec__stats__t__failentry = thestats__split_fields21;
  rec__stats__t__successbio = thestats__split_fields22;
  rec__stats__t__failbio = thestats__split_fields23 }))))))) and
  ((state23 = state28) and ((state22 = state27) and
  ((filestate7 = filestate8) and ((state21 = state24) and (({
  rec__clock__timet__year = tokenremovaltimeout__split_fields8;
  rec__clock__timet__month = tokenremovaltimeout__split_fields9;
  rec__clock__timet__day = tokenremovaltimeout__split_fields10;
  rec__clock__timet__millisec = tokenremovaltimeout__split_fields11 } = {
  rec__clock__timet__year = tokenremovaltimeout__split_fields4;
  rec__clock__timet__month = tokenremovaltimeout__split_fields5;
  rec__clock__timet__day = tokenremovaltimeout__split_fields6;
  rec__clock__timet__millisec = tokenremovaltimeout__split_fields7 }) and
  ((status9 = status10) and ({ rec__stats__t__successentry =
  thestats__split_fields16; rec__stats__t__failentry =
  thestats__split_fields17; rec__stats__t__successbio =
  thestats__split_fields18; rec__stats__t__failbio = thestats__split_fields19
  } = { rec__stats__t__successentry = thestats__split_fields20;
  rec__stats__t__failentry = thestats__split_fields21;
  rec__stats__t__successbio = thestats__split_fields22;
  rec__stats__t__failbio = thestats__split_fields23 }))))))))))) and
  (((output2 = output) and ((status8 = status1) and ((state20 = state23) and
  ((state19 = state22) and ((state18 = state2) and
  ((filestate6 = filestate) and ((filestate5 = filestate7) and
  ((state17 = state21) and ((status7 = status9) and ({
  rec__stats__t__successentry = thestats__split_fields12;
  rec__stats__t__failentry = thestats__split_fields13;
  rec__stats__t__successbio = thestats__split_fields14;
  rec__stats__t__failbio = thestats__split_fields15 } = {
  rec__stats__t__successentry = thestats__split_fields16;
  rec__stats__t__failentry = thestats__split_fields17;
  rec__stats__t__successbio = thestats__split_fields18;
  rec__stats__t__failbio = thestats__split_fields19 })))))))))) and
  ((output2 = output1) and ((status8 = status2) and ((state20 = state23) and
  ((state19 = state22) and ((state18 = state7) and
  ((filestate6 = filestate1) and ((filestate5 = filestate7) and
  ((state17 = state21) and ((status7 = status9) and ({
  rec__stats__t__successentry = thestats__split_fields12;
  rec__stats__t__failentry = thestats__split_fields13;
  rec__stats__t__successbio = thestats__split_fields14;
  rec__stats__t__failbio = thestats__split_fields15 } = {
  rec__stats__t__successentry = thestats__split_fields16;
  rec__stats__t__failentry = thestats__split_fields17;
  rec__stats__t__successbio = thestats__split_fields18;
  rec__stats__t__failbio = thestats__split_fields19 })))))))))))))) and
  ((state16 = state20) and ((state15 = state19) and
  ((filestate4 = filestate5) and ((state14 = state17) and
  ((status6 = status7) and ({ rec__stats__t__successentry =
  thestats__split_fields8; rec__stats__t__failentry =
  thestats__split_fields9; rec__stats__t__successbio =
  thestats__split_fields10; rec__stats__t__failbio = thestats__split_fields11
  } = { rec__stats__t__successentry = thestats__split_fields12;
  rec__stats__t__failentry = thestats__split_fields13;
  rec__stats__t__successbio = thestats__split_fields14;
  rec__stats__t__failbio = thestats__split_fields15 }))))))))) and
  ((state13 = state16) and ((state12 = state15) and
  ((filestate3 = filestate4) and ((state11 = state14) and
  ((status5 = status6) and ({ rec__stats__t__successentry =
  thestats__split_fields4; rec__stats__t__failentry =
  thestats__split_fields5; rec__stats__t__successbio =
  thestats__split_fields6; rec__stats__t__failbio = thestats__split_fields7
  } = { rec__stats__t__successentry = thestats__split_fields8;
  rec__stats__t__failentry = thestats__split_fields9;
  rec__stats__t__successbio = thestats__split_fields10;
  rec__stats__t__failbio = thestats__split_fields11 }))))))))) and
  (((status4 = status8) and ((state10 = state13) and ((state9 = state12) and
  ((filestate2 = filestate3) and ((state8 = state11) and
  (((fingertimeout__split_fields = fingertimeout__split_fields8) and
  ((fingertimeout__split_fields1 = fingertimeout__split_fields9) and
  ((fingertimeout__split_fields2 = fingertimeout__split_fields10) and
  (fingertimeout__split_fields3 = fingertimeout__split_fields11)))) and
  ((status3 = status5) and ({ rec__stats__t__successentry =
  thestats__split_fields; rec__stats__t__failentry = thestats__split_fields1;
  rec__stats__t__successbio = thestats__split_fields2;
  rec__stats__t__failbio = thestats__split_fields3 } = {
  rec__stats__t__successentry = thestats__split_fields4;
  rec__stats__t__failentry = thestats__split_fields5;
  rec__stats__t__successbio = thestats__split_fields6;
  rec__stats__t__failbio = thestats__split_fields7 })))))))) and
  ((status4 = status8) and ((state10 = state13) and ((state9 = state12) and
  ((filestate2 = filestate3) and ((state8 = state11) and
  (((fingertimeout__split_fields4 = fingertimeout__split_fields8) and
  ((fingertimeout__split_fields5 = fingertimeout__split_fields9) and
  ((fingertimeout__split_fields6 = fingertimeout__split_fields10) and
  (fingertimeout__split_fields7 = fingertimeout__split_fields11)))) and
  ((status3 = status5) and ({ rec__stats__t__successentry =
  thestats__split_fields; rec__stats__t__failentry = thestats__split_fields1;
  rec__stats__t__successbio = thestats__split_fields2;
  rec__stats__t__failbio = thestats__split_fields3 } = {
  rec__stats__t__successentry = thestats__split_fields4;
  rec__stats__t__failentry = thestats__split_fields5;
  rec__stats__t__successbio = thestats__split_fields6;
  rec__stats__t__failbio = thestats__split_fields7 })))))))))))))) and
  (((output3 = { us_private__content = output2 }) and ((status13 = {
  us_private__content = status4 }) and ((state37 = { us_private__content =
  state10 }) and ((state36 = { us_private__content = state9 }) and
  ((state35 = { us_private__content = state18 }) and ((filestate11 = {
  us_private__content = filestate6 }) and ((state34 = { us_private__content =
  state26 }) and ((state33 = { us_private__content = state25 }) and
  ((filestate10 = filestate2) and ((state32 = state8) and
  ((localstatus2 = localstatus1) and
  (((tokenremovaltimeout__split_fields12 = tokenremovaltimeout__split_fields8) and
  ((tokenremovaltimeout__split_fields13 = tokenremovaltimeout__split_fields9) and
  ((tokenremovaltimeout__split_fields14 = tokenremovaltimeout__split_fields10) and
  (tokenremovaltimeout__split_fields15 = tokenremovaltimeout__split_fields11)))) and
  (((fingertimeout__split_fields12 = fingertimeout__split_fields8) and
  ((fingertimeout__split_fields13 = fingertimeout__split_fields9) and
  ((fingertimeout__split_fields14 = fingertimeout__split_fields10) and
  (fingertimeout__split_fields15 = fingertimeout__split_fields11)))) and
  ((status12 = status3) and
  ((thestats__split_fields28 = thestats__split_fields) and
  ((thestats__split_fields29 = thestats__split_fields1) and
  ((thestats__split_fields30 = thestats__split_fields2) and
  (thestats__split_fields31 = thestats__split_fields3)))))))))))))))))) and
  ((output4 = output2) and ((status15 = status4) and ((state43 = state10) and
  ((state42 = state9) and ((state41 = state18) and
  ((filestate13 = filestate6) and ((state40 = state26) and
  ((state39 = state25) and ((filestate12 = filestate2) and
  ((state38 = state8) and ((localstatus3 = localstatus1) and
  ((tokenremovaltimeout__split_fields16 = { rec__clock__timet__year =
  tokenremovaltimeout__split_fields8; rec__clock__timet__month =
  tokenremovaltimeout__split_fields9; rec__clock__timet__day =
  tokenremovaltimeout__split_fields10; rec__clock__timet__millisec =
  tokenremovaltimeout__split_fields11 }) and
  ((fingertimeout__split_fields16 = { rec__clock__timet__year =
  fingertimeout__split_fields8; rec__clock__timet__month =
  fingertimeout__split_fields9; rec__clock__timet__day =
  fingertimeout__split_fields10; rec__clock__timet__millisec =
  fingertimeout__split_fields11 }) and ((status14 = status3) and
  (thestats__split_fields32 = { rec__stats__t__successentry =
  thestats__split_fields; rec__stats__t__failentry = thestats__split_fields1;
  rec__stats__t__successbio = thestats__split_fields2;
  rec__stats__t__failbio = thestats__split_fields3 }))))))))))))))))) ->
  ((((islocked((state33).us_private__content) = true) and
  (thecurrentdoor((state34).us_private__content) = 0)) and
  (greaterthanorequal(thecurrenttime(currenttime),
  alarm_timeout((state34).us_private__content)) = true)) ->
  (thedooralarm((state34).us_private__content) = 0))))))
