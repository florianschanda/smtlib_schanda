(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun contains ((container us_rep) (fst Int) (lst Int) (item Int)) Bool (ite (exists ((i Int)) (and (and (<= fst i) (<= i lst)) (= (get container i) item))) true false))
(declare-fun contains__function_guard (Bool us_rep Int Int Int) Bool)
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const first Int)
(declare-const last Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content integer)))))
(define-fun index_type__ref___3__projection ((a index_type__ref)) integer (index_type__content a))
(define-fun last1 ((container us_rep)) Int (+ (- first 1) (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-sort tcount_typeB 0)
(declare-fun tcount_typeBqtint (tcount_typeB) Int)
(assert (forall ((i tcount_typeB)) (and (<= (- 2147483648) (tcount_typeBqtint i)) (<= (tcount_typeBqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tcount_typeB tcount_typeB) Bool)
(declare-const dummy3 tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(define-fun to_rep1 ((x tcount_typeB)) Int (tcount_typeBqtint x))
(declare-fun of_rep1 (Int) tcount_typeB)
(assert (forall ((x tcount_typeB)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x tcount_typeB)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const last2 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (tcount_typeB tcount_typeB) Bool)
(declare-const dummy4 tcount_typeB)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content tcount_typeB)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) tcount_typeB (capacity_range__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__use_vectors__my_vectors__vector__capacity tcount_typeB)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) tcount_typeB (rec__use_vectors__my_vectors__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__use_vectors__my_vectors__vector us_main_type1)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type1 (rec__use_vectors__my_vectors__vector a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const use_vectors__my_vectors__vector__capacity__first__bit Int)
(declare-const use_vectors__my_vectors__vector__capacity__last__bit Int)
(declare-const use_vectors__my_vectors__vector__capacity__position Int)
(assert (<= 0 use_vectors__my_vectors__vector__capacity__first__bit))
(assert (< use_vectors__my_vectors__vector__capacity__first__bit use_vectors__my_vectors__vector__capacity__last__bit))
(assert (<= 0 use_vectors__my_vectors__vector__capacity__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content a))
(declare-fun model__ (us_rep1) us_rep)
(declare-fun model____function_guard (us_rep us_rep1) Bool)
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun dynamic_invariant ((temp___expr_270 us_rep1) (temp___is_init_266 Bool) (temp___skip_constant_267 Bool) (temp___do_toplevel_268 Bool) (temp___do_typ_inv_269 Bool)) Bool (dynamic_property1 0 last2 (to_rep1 (rec__use_vectors__my_vectors__vector__capacity (us_split_discrs1 temp___expr_270)))))
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= first n) (<= n (last1 left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq a b) (oeq a b)) :pattern ((user_eq a b)))))
(define-fun default_initial_assumption ((temp___expr_302 us_rep) (temp___skip_top_level_303 Bool)) Bool (=> (not (= temp___skip_top_level_303 true)) (= (length temp___expr_302) 0)))
(assert (forall ((container us_rep1)) (! (=> (dynamic_invariant container true true true true) (= (length (model__ container)) (length1 container))) :pattern ((model__ container)))))
(define-fun last_index ((container us_rep1)) Int (last1 (model__ container)))
(declare-fun last_index__function_guard (Int us_rep1) Bool)
(declare-const first1 Int)
(declare-const last3 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((index_type__ref1 (mk_index_type__ref1 (index_type__content1 integer)))))
(define-fun index_type__ref___2__projection ((a index_type__ref1)) integer (index_type__content1 a))
(declare-const first2 Int)
(declare-const last4 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (integer integer) Bool)
(declare-const dummy7 integer)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content integer)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) integer (extended_index__content a))
(define-fun dynamic_invariant1 ((temp___expr_256 Int) (temp___is_init_252 Bool) (temp___skip_constant_253 Bool) (temp___do_toplevel_254 Bool) (temp___do_typ_inv_255 Bool)) Bool (=> (or (= temp___is_init_252 true) (<= first2 last4)) (dynamic_property3 first2 last4 temp___expr_256)))
(assert (= first2 (- first1 1)))
(assert (= last4 (+ (ite (< 2147483646 last3) 2147483646 last3) 1)))
(declare-const fst Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const lst Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_242 Int) (temp___is_init_238 Bool) (temp___skip_constant_239 Bool) (temp___do_toplevel_240 Bool) (temp___do_typ_inv_241 Bool)) Bool (=> (or (= temp___is_init_238 true) (<= first1 last3)) (dynamic_property2 first1 last3 temp___expr_242)))
(assert (= first1 fst))
(assert (= last3 lst))
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= (- 2147483648) (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (element_type element_type) Bool)
(declare-const dummy8 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___2__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_249 Int) (temp___is_init_245 Bool) (temp___skip_constant_246 Bool) (temp___do_toplevel_247 Bool) (temp___do_typ_inv_248 Bool)) Bool (=> (or (= temp___is_init_245 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_249)))
(declare-const first3 Int)
(declare-const last5 Int)
(define-fun dynamic_property4 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (integer integer) Bool)
(declare-const dummy9 integer)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 integer)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) integer (extended_index__content1 a))
(declare-const container us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const item Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const index Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun id (Int Int Int) Int)
(declare-fun id__function_guard (Int Int Int Int) Bool)
(assert (forall ((x Int) (f Int) (l Int)) (! (=> (and (and (dynamic_invariant4 x true true true true) (dynamic_invariant4 f true true true true)) (dynamic_invariant4 l true true true true)) (let ((result (id x f l))) (and (=> (and (<= f x) (<= x l)) (and (<= f result) (<= result l))) (dynamic_invariant4 result true false true true)))) :pattern ((id x f l)))))
(assert (= fst (id 1 (- 2147483647) 2147483647)))
(assert (= lst (id 2147483647 fst 2147483647)))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq10 (count_type count_type) Bool)
(declare-const dummy10 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant5 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 2147483647)) (in_range4 temp___expr_165)))
(declare-const last_count Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(assert (= last_count (ite (< last3 first1) 0 (ite (or (< last3 (- 1)) (< (- last3 2147483647) first1)) (+ (- last3 first1) 1) 2147483647))))
(define-fun dynamic_invariant6 ((temp___expr_263 Int) (temp___is_init_259 Bool) (temp___skip_constant_260 Bool) (temp___do_toplevel_261 Bool) (temp___do_typ_inv_262 Bool)) Bool (=> (or (= temp___is_init_259 true) (<= 0 last2)) (dynamic_property1 0 last2 temp___expr_263)))
(assert (= last2 last_count))
(define-fun capacity ((container1 us_rep1)) Int (ite (= (distinct 0 0) true) (to_rep1 (rec__use_vectors__my_vectors__vector__capacity (us_split_discrs1 container1))) last2))
(declare-fun capacity__function_guard (Int us_rep1) Bool)
(assert (forall ((container1 us_rep1)) (! (=> (dynamic_invariant container1 true true true true) (let ((result (length1 container1))) (and (<= result (capacity container1)) (dynamic_invariant6 result true false true true)))) :pattern ((length1 container1)))))
(define-fun dynamic_invariant7 ((temp___expr_294 Int) (temp___is_init_290 Bool) (temp___skip_constant_291 Bool) (temp___do_toplevel_292 Bool) (temp___do_typ_inv_293 Bool)) Bool (=> (or (= temp___is_init_290 true) (<= first3 last5)) (dynamic_property4 first3 last5 temp___expr_294)))
(assert (= first3 (- first 1)))
(assert (= last5 last))
(assert (forall ((container1 us_rep)) (! (let ((result (length container1))) (and (<= (+ (- first 1) result) last) (dynamic_invariant5 result true false true true))) :pattern ((length container1)))))
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= (- 2147483648) (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq11 (element_type1 element_type1) Bool)
(declare-const dummy11 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___3__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant8 ((temp___expr_287 Int) (temp___is_init_283 Bool) (temp___skip_constant_284 Bool) (temp___do_toplevel_285 Bool) (temp___do_typ_inv_286 Bool)) Bool (=> (or (= temp___is_init_283 true) (<= (- 2147483648) 2147483647)) (in_range5 temp___expr_287)))
(assert (forall ((container1 us_rep)) (forall ((position Int)) (! (=> (and (dynamic_invariant7 position true true true true) (and (<= first position) (<= position (last1 container1)))) (dynamic_invariant8 (get container1 position) true false true true)) :pattern ((get container1 position))))))
(define-fun dynamic_invariant9 ((temp___expr_280 Int) (temp___is_init_276 Bool) (temp___skip_constant_277 Bool) (temp___do_toplevel_278 Bool) (temp___do_typ_inv_279 Bool)) Bool (=> (or (= temp___is_init_276 true) (<= first last)) (dynamic_property first last temp___expr_280)))
(assert (= first fst))
(assert (= last lst))
(declare-const o us_rep)
(declare-const us Int)
(declare-const o1 Int)
(declare-const temp___460 Int)
(declare-const us1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result Bool)
(assert (dynamic_property1 0 last2 (to_rep1 (rec__use_vectors__my_vectors__vector__capacity (us_split_discrs1 container)))))
(assert (in_range3 item))
(assert (dynamic_property2 first1 last3 index))
(assert (and (= o3 (last1 (model__ container))) (and (dynamic_property3 first2 last4 o3) (= o3 (last1 (model__ container))))))
(assert (= result (ite (< o3 index) true false)))
(assert (not (= result true)))
(assert (and (= temp___460 (last1 (model__ container))) (and (dynamic_property3 first2 last4 temp___460) (= temp___460 (last1 (model__ container))))))
(assert (and (= us1 temp___460) (dynamic_property4 first3 last5 temp___460)))
(assert (= o2 temp___460))
(assert (and (= us index) (dynamic_property first last index)))
(assert (= o1 index))
(assert (and (= o (model__ container)) (= (length o) (length1 container))))
(assert (not (<= o2 (last1 o))))
(check-sat)
(exit)
