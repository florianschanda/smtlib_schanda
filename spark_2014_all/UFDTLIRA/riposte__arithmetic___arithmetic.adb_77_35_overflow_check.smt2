(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((t21b__ref (mk_t21b__ref (t21b__content integer)))))
(define-fun t21b__ref___projection ((a1 t21b__ref)) integer (t21b__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((t22b__ref (mk_t22b__ref (t22b__content integer)))))
(define-fun t22b__ref___projection ((a1 t22b__ref)) integer (t22b__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const r Int)
(declare-const i Int)
(declare-const i1 Int)
(declare-const arithmetic__plus__result Int)
(declare-const temp___195 Int)
(declare-const temp___194 Int)
(declare-const temp___196 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const temp___190 Int)
(declare-const temp___189 Int)
(declare-const temp___191 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const i2 Int)
(declare-const i3 Int)
(declare-const result Int)
(declare-const r1 Int)
(declare-const result1 Int)
(declare-const i4 Int)
(declare-const result2 Int)
(declare-const r2 Int)
(declare-const r3 Int)
(declare-const i5 Int)
(declare-const r4 Int)
(declare-const i6 Int)
(declare-const r5 Int)
(declare-const i7 Int)
(declare-const r6 Int)
(declare-const i8 Int)
(declare-const r7 Int)
(declare-const i9 Int)
(declare-const result3 Int)
(declare-const i10 Int)
(declare-const result4 Int)
(declare-const r8 Int)
(declare-const r9 Int)
(declare-const i11 Int)
(declare-const r10 int__ref)
(declare-const i12 int__ref)
(declare-const r11 Int)
(declare-const i13 Int)
(declare-const r12 int__ref)
(declare-const i14 int__ref)
(declare-const r13 Int)
(declare-const i15 Int)
(declare-const r14 int__ref)
(declare-const i16 int__ref)
(declare-const i17 int__ref)
(declare-const r15 Int)
(declare-const i18 Int)
(declare-const i19 Int)
(declare-const result5 int__ref)
(declare-const arithmetic__plus__result1 Int)
(declare-const arithmetic__plus__result2 int__ref)
(declare-const arithmetic__plus__result3 Int)
(declare-const r16 int__ref)
(declare-const i20 int__ref)
(declare-const i21 int__ref)
(declare-const arithmetic__plus__result4 int__ref)
(declare-const r17 Int)
(declare-const i22 Int)
(declare-const i23 Int)
(declare-const arithmetic__plus__result5 Int)
(define-fun i24 () int__ref (mk_int__ref i8))
(define-fun r18 () int__ref (mk_int__ref r6))
(define-fun i25 () int__ref (mk_int__ref i1))
(define-fun i26 () int__ref (mk_int__ref i))
(assert (in_range1 a))
(assert (in_range1 b))
(assert (in_range1 (+ a b)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 r)))
(assert (= (mk_int__ref result) (mk_int__ref r)))
(assert (= r1 a))
(assert (=> (<= 0 b) (= (mk_int__ref result1) i26)))
(assert (=> (<= 0 b) (= i4 1)))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= temp___195 i4))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= temp___194 r1))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= temp___196 b))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (and (= o r1) (not (= r1 2147483647))))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= o1 (+ o 1)))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= r1 result2))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= r2 o1))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (and (= r3 (+ a i5)) (= b temp___196)))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 r3)) (=> (<= 1 b) (dynamic_property 1 b i5))) (and (<= 1 i5) (<= i5 b))))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= i5 b))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= i5 i6))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= r3 r4))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= i7 i5))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= r5 r3))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= i24 (mk_int__ref i6)))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= r18 (mk_int__ref r4)))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= i9 i7))))
(assert (=> (<= 0 b) (=> (and (<= 1 i4) (<= i4 b)) (= r7 r5))))
(assert (=> (<= 0 b) (=> (not (and (<= 1 i4) (<= i4 b))) (= i4 i8))))
(assert (=> (<= 0 b) (=> (not (and (<= 1 i4) (<= i4 b))) (= r1 r6))))
(assert (=> (<= 0 b) (=> (not (and (<= 1 i4) (<= i4 b))) (= i9 i4))))
(assert (=> (<= 0 b) (=> (not (and (<= 1 i4) (<= i4 b))) (= r7 r1))))
(assert (=> (<= 0 b) (= i17 i25)))
(assert (=> (<= 0 b) (= i16 i24)))
(assert (=> (<= 0 b) (= r14 r18)))
(assert (=> (<= 0 b) (= i19 i3)))
(assert (=> (<= 0 b) (= i18 i9)))
(assert (=> (<= 0 b) (= r15 r7)))
(assert (=> (not (<= 0 b)) (= (mk_int__ref result3) i25)))
(assert (=> (not (<= 0 b)) (= i10 (- 1))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= temp___190 i10))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= temp___189 r1))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= temp___191 b))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (and (= o2 r1) (not (= r1 (- 2147483648)))))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= o3 (- o2 1)))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= r1 result4))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= r8 o3))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (and (= r9 (+ a i11)) (= b temp___191)))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 r9)) (=> (<= b (- 1)) (dynamic_property1 b (- 1) i11))) (and (<= b i11) (<= i11 (- 1)))))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= i11 b))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= i12 (mk_int__ref i11)))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= r10 (mk_int__ref r9)))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= i13 i11))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= r11 r9))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= i14 i12))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= r12 r10))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= i15 i13))))
(assert (=> (not (<= 0 b)) (=> (and (<= b i10) (<= i10 (- 1))) (= r13 r11))))
(assert (=> (not (<= 0 b)) (=> (not (and (<= b i10) (<= i10 (- 1)))) (= i14 (mk_int__ref i10)))))
(assert (=> (not (<= 0 b)) (=> (not (and (<= b i10) (<= i10 (- 1)))) (= r12 (mk_int__ref r1)))))
(assert (=> (not (<= 0 b)) (=> (not (and (<= b i10) (<= i10 (- 1)))) (= i15 i10))))
(assert (=> (not (<= 0 b)) (=> (not (and (<= b i10) (<= i10 (- 1)))) (= r13 r1))))
(assert (=> (not (<= 0 b)) (= i17 i14)))
(assert (=> (not (<= 0 b)) (= i16 i26)))
(assert (=> (not (<= 0 b)) (= r14 r12)))
(assert (=> (not (<= 0 b)) (= i19 i15)))
(assert (=> (not (<= 0 b)) (= i18 i2)))
(assert (=> (not (<= 0 b)) (= r15 r13)))
(assert (= arithmetic__plus__result2 (mk_int__ref arithmetic__plus__result1)))
(assert (= arithmetic__plus__result3 arithmetic__plus__result1))
(assert (= result5 (mk_int__ref arithmetic__plus__result)))
(assert (= arithmetic__plus__result1 (int__content r14)))
(assert (= arithmetic__plus__result4 arithmetic__plus__result2))
(assert (= i21 i17))
(assert (= i20 i16))
(assert (= r16 r14))
(assert (= arithmetic__plus__result5 arithmetic__plus__result3))
(assert (= i23 i19))
(assert (= i22 i18))
(assert (= r17 r15))
(assert (not (in_range1 (+ a b))))
(check-sat)
(exit)
