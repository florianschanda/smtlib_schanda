(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__ints__int__min : integer; rec__ints__int__max :
integer; rec__ints__int__value : integer; rec__ext__ : us_private
}

function us_split_fields_Min__projection(a: us_split_fields) : integer =
  (a).rec__ints__int__min

function us_split_fields_Max__projection(a: us_split_fields) : integer =
  (a).rec__ints__int__max

function us_split_fields_Value__projection(a: us_split_fields) : integer =
  (a).rec__ints__int__value

function us_split_fields___2__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___4__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__ints__int__min) = to_rep(((b).us_split_fields1).rec__ints__int__min)) and
  (to_rep(((a).us_split_fields1).rec__ints__int__max) = to_rep(((b).us_split_fields1).rec__ints__int__max))) and
  (to_rep(((a).us_split_fields1).rec__ints__int__value) = to_rep(((b).us_split_fields1).rec__ints__int__value))) ->
  (bool_eq3(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__ints__int__min) = to_rep(((b).us_split_fields1).rec__ints__int__min)) and
  (to_rep(((a).us_split_fields1).rec__ints__int__max) = to_rep(((b).us_split_fields1).rec__ints__int__max))) and
  (to_rep(((a).us_split_fields1).rec__ints__int__value) = to_rep(((b).us_split_fields1).rec__ints__int__value)))) ->
  (bool_eq3(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. forall a2:integer.
  forall a3:us_private. forall a4:int. (0 <= object__size({
  us_split_fields1 = { rec__ints__int__min = a; rec__ints__int__max = a1;
  rec__ints__int__value = a2; rec__ext__ = a3 }; attr__tag = a4 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. forall a2:integer.
  forall a3:us_private. forall a4:int. (0 <= object__alignment({
  us_split_fields1 = { rec__ints__int__min = a; rec__ints__int__max = a1;
  rec__ints__int__value = a2; rec__ext__ = a3 }; attr__tag = a4 })))

logic ints__int__min__first__bit : int

logic ints__int__min__last__bit : int

logic ints__int__min__position : int

axiom ints__int__min__first__bit_axiom : (0 <= ints__int__min__first__bit)

axiom ints__int__min__last__bit_axiom :
  (ints__int__min__first__bit <  ints__int__min__last__bit)

axiom ints__int__min__position_axiom : (0 <= ints__int__min__position)

logic ints__int__max__first__bit : int

logic ints__int__max__last__bit : int

logic ints__int__max__position : int

axiom ints__int__max__first__bit_axiom : (0 <= ints__int__max__first__bit)

axiom ints__int__max__last__bit_axiom :
  (ints__int__max__first__bit <  ints__int__max__last__bit)

axiom ints__int__max__position_axiom : (0 <= ints__int__max__position)

logic ints__int__value__first__bit : int

logic ints__int__value__last__bit : int

logic ints__int__value__position : int

axiom ints__int__value__first__bit_axiom :
  (0 <= ints__int__value__first__bit)

axiom ints__int__value__last__bit_axiom :
  (ints__int__value__first__bit <  ints__int__value__last__bit)

axiom ints__int__value__position_axiom : (0 <= ints__int__value__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : integer

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : us_private

logic dummy6 : int

type int____ref = { int____content : us_rep
}

function int____ref___3__projection(a: int____ref) : us_rep =
  (a).int____content

type us_split_fields2 = { rec__ints__approx_int__precision : natural;
rec__ints__int__min1 : integer; rec__ints__int__max1 : integer;
rec__ints__int__value1 : integer; rec__ext__1 : us_private
}

function us_split_fields_Precision__projection(a: us_split_fields2) : natural =
  (a).rec__ints__approx_int__precision

function us_split_fields_Min__2__projection(a: us_split_fields2) : integer =
  (a).rec__ints__int__min1

function us_split_fields_Max__2__projection(a: us_split_fields2) : integer =
  (a).rec__ints__int__max1

function us_split_fields_Value__2__projection(a: us_split_fields2) : integer =
  (a).rec__ints__int__value1

function us_split_fields___3__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___6__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : natural, us_private -> us_private

logic extract__precision : us_private -> natural

axiom extract__precision__conv :
  (forall precision:natural.
  (forall rec__ext__2:us_private. (extract__precision(hide_ext__(precision,
  rec__ext__2)) = precision)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__ints__int__min = ((a).us_split_fields3).rec__ints__int__min1;
  rec__ints__int__max = ((a).us_split_fields3).rec__ints__int__max1;
  rec__ints__int__value = ((a).us_split_fields3).rec__ints__int__value1;
  rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__ints__approx_int__precision,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__ints__approx_int__precision =
  extract__precision(((r).us_split_fields1).rec__ext__);
  rec__ints__int__min1 = ((r).us_split_fields1).rec__ints__int__min;
  rec__ints__int__max1 = ((r).us_split_fields1).rec__ints__int__max;
  rec__ints__int__value1 = ((r).us_split_fields1).rec__ints__int__value;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((((to_rep1(((a).us_split_fields3).rec__ints__approx_int__precision) = to_rep1(((b).us_split_fields3).rec__ints__approx_int__precision)) and
  (to_rep(((a).us_split_fields3).rec__ints__int__min1) = to_rep(((b).us_split_fields3).rec__ints__int__min1))) and
  (to_rep(((a).us_split_fields3).rec__ints__int__max1) = to_rep(((b).us_split_fields3).rec__ints__int__max1))) and
  (to_rep(((a).us_split_fields3).rec__ints__int__value1) = to_rep(((b).us_split_fields3).rec__ints__int__value1))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields3).rec__ints__approx_int__precision) = to_rep1(((b).us_split_fields3).rec__ints__approx_int__precision)) and
  (to_rep(((a).us_split_fields3).rec__ints__int__min1) = to_rep(((b).us_split_fields3).rec__ints__int__min1))) and
  (to_rep(((a).us_split_fields3).rec__ints__int__max1) = to_rep(((b).us_split_fields3).rec__ints__int__max1))) and
  (to_rep(((a).us_split_fields3).rec__ints__int__value1) = to_rep(((b).us_split_fields3).rec__ints__int__value1)))) ->
  (bool_eq4(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:integer. forall a2:integer. forall a3:integer.
  forall a4:us_private. forall a5:int. (0 <= object__size1({
  us_split_fields3 = { rec__ints__approx_int__precision = a;
  rec__ints__int__min1 = a1; rec__ints__int__max1 = a2;
  rec__ints__int__value1 = a3; rec__ext__1 = a4 }; attr__tag1 = a5 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:integer. forall a2:integer. forall a3:integer.
  forall a4:us_private. forall a5:int. (0 <= object__alignment1({
  us_split_fields3 = { rec__ints__approx_int__precision = a;
  rec__ints__int__min1 = a1; rec__ints__int__max1 = a2;
  rec__ints__int__value1 = a3; rec__ext__1 = a4 }; attr__tag1 = a5 })))

logic ints__approx_int__precision__first__bit : int

logic ints__approx_int__precision__last__bit : int

logic ints__approx_int__precision__position : int

axiom ints__approx_int__precision__first__bit_axiom :
  (0 <= ints__approx_int__precision__first__bit)

axiom ints__approx_int__precision__last__bit_axiom :
  (ints__approx_int__precision__first__bit <  ints__approx_int__precision__last__bit)

axiom ints__approx_int__precision__position_axiom :
  (0 <= ints__approx_int__precision__position)

logic ints__int__min__first__bit1 : int

logic ints__int__min__last__bit1 : int

logic ints__int__min__position1 : int

axiom ints__int__min__first__bit_axiom1 : (0 <= ints__int__min__first__bit1)

axiom ints__int__min__last__bit_axiom1 :
  (ints__int__min__first__bit1 <  ints__int__min__last__bit1)

axiom ints__int__min__position_axiom1 : (0 <= ints__int__min__position1)

logic ints__int__max__first__bit1 : int

logic ints__int__max__last__bit1 : int

logic ints__int__max__position1 : int

axiom ints__int__max__first__bit_axiom1 : (0 <= ints__int__max__first__bit1)

axiom ints__int__max__last__bit_axiom1 :
  (ints__int__max__first__bit1 <  ints__int__max__last__bit1)

axiom ints__int__max__position_axiom1 : (0 <= ints__int__max__position1)

logic ints__int__value__first__bit1 : int

logic ints__int__value__last__bit1 : int

logic ints__int__value__position1 : int

axiom ints__int__value__first__bit_axiom1 :
  (0 <= ints__int__value__first__bit1)

axiom ints__int__value__last__bit_axiom1 :
  (ints__int__value__first__bit1 <  ints__int__value__last__bit1)

axiom ints__int__value__position_axiom1 : (0 <= ints__int__value__position1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy7 : natural

logic dummy8 : integer

logic dummy9 : integer

logic dummy10 : integer

logic dummy11 : us_private

logic dummy12 : int

type approx_int__ref = { approx_int__content : us_rep1
}

function approx_int__ref___projection(a: approx_int__ref) : us_rep1 =
  (a).approx_int__content

logic arg__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "ints.ads", line 25, characters 0-0 *)
goal WP_parameter_def :
  (forall arg__split_fields:natural. forall arg__split_fields1:integer.
  forall arg__split_fields2:integer. forall arg__split_fields3:integer.
  forall arg__split_fields4:us_private. forall o:int. forall o1:integer.
  forall o2:natural. forall o3:integer. forall o4:integer. forall o5:integer.
  forall o6:us_private. forall temp___664:natural.
  forall temp___6641:integer. forall temp___6642:integer.
  forall temp___6643:integer. forall temp___6644:us_private.
  forall temp___6645:int. forall result:natural. forall result1:integer.
  forall result2:integer. forall result3:integer. forall result4:us_private.
  forall arg__split_fields5:natural. forall arg__split_fields6:integer.
  forall arg__split_fields7:integer. forall arg__split_fields8:integer.
  forall arg__split_fields9:us_private. forall arg__split_fields10:natural.
  forall arg__split_fields11:integer. forall arg__split_fields12:integer.
  forall arg__split_fields13:integer. forall arg__split_fields14:us_private.
  forall arg__split_fields15:natural. forall arg__split_fields16:integer.
  forall arg__split_fields17:integer. forall arg__split_fields18:integer.
  forall arg__split_fields19:us_private.
  (((to_rep(arg__split_fields3) <  (to_rep(arg__split_fields2) - 10)) and
  (((((((o = (to_rep(arg__split_fields3) + 10)) and
  in_range((to_rep(arg__split_fields3) + 10))) and (to_rep(o1) = o)) and
  ((arg__split_fields = o2) and ((arg__split_fields1 = o3) and
  ((arg__split_fields2 = o4) and ((o1 = o5) and
  (arg__split_fields4 = o6)))))) and (((temp___664 = o2) and
  ((temp___6641 = o3) and ((temp___6642 = o4) and ((temp___6643 = o5) and
  (temp___6644 = o6))))) and (arg__attr__tag = temp___6645))) and
  (((result = arg__split_fields) and ((result1 = arg__split_fields1) and
  ((result2 = arg__split_fields2) and ((result3 = arg__split_fields3) and
  (result4 = arg__split_fields4))))) and
  ((temp___664 = arg__split_fields5) and
  ((temp___6641 = arg__split_fields6) and
  ((temp___6642 = arg__split_fields7) and
  ((temp___6643 = arg__split_fields8) and
  (temp___6644 = arg__split_fields9))))))) and
  (((arg__split_fields10 = arg__split_fields5) and
  ((arg__split_fields11 = arg__split_fields6) and
  ((arg__split_fields12 = arg__split_fields7) and
  ((arg__split_fields13 = arg__split_fields8) and
  (arg__split_fields14 = arg__split_fields9))))) and
  ((arg__split_fields15 = arg__split_fields5) and
  ((arg__split_fields16 = arg__split_fields6) and
  ((arg__split_fields17 = arg__split_fields7) and
  ((arg__split_fields18 = arg__split_fields8) and
  (arg__split_fields19 = arg__split_fields9)))))))) ->
  (to_rep(arg__split_fields3) <  to_rep(arg__split_fields13))))
