(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((file__ref (mk_file__ref (file__content us_rep)))))
(define-fun file__ref___projection ((a file__ref)) us_rep (file__content a))
(declare-sort read_status 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (read_status read_status) Bool)
(declare-const dummy4 read_status)
(declare-datatypes () ((read_status__ref (mk_read_status__ref (read_status__content read_status)))))
(define-fun read_status__ref___projection ((a read_status__ref)) read_status (read_status__content a))
(declare-fun to_rep1 (read_status) Int)
(declare-fun of_rep1 (Int) read_status)
(assert (forall ((x read_status)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x read_status)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__file_io__read_result__status read_status)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) read_status (rec__file_io__read_result__status a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__file_io__read_result__c character)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) character (rec__file_io__read_result__c a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___5__projection ((a us_rep1)) Bool (attr__constrained a))
(define-fun file_io__read_result__c__pred ((a us_rep1)) Bool (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 a))) 0))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 a))) (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 b)))) (=> (file_io__read_result__c__pred a) (= (to_rep (rec__file_io__read_result__c (us_split_fields1 a))) (to_rep (rec__file_io__read_result__c (us_split_fields1 b)))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const file_io__read_result__status__first__bit Int)
(declare-const file_io__read_result__status__last__bit Int)
(declare-const file_io__read_result__status__position Int)
(assert (<= 0 file_io__read_result__status__first__bit))
(assert (< file_io__read_result__status__first__bit file_io__read_result__status__last__bit))
(assert (<= 0 file_io__read_result__status__position))
(declare-const file_io__read_result__c__first__bit Int)
(declare-const file_io__read_result__c__last__bit Int)
(declare-const file_io__read_result__c__position Int)
(assert (<= 0 file_io__read_result__c__first__bit))
(assert (< file_io__read_result__c__first__bit file_io__read_result__c__last__bit))
(assert (<= 0 file_io__read_result__c__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((read_result__ref (mk_read_result__ref (read_result__content us_rep1)))))
(define-fun read_result__ref___projection ((a read_result__ref)) us_rep1 (read_result__content a))
(define-fun default_initial_assumption ((temp___expr_463 us_rep1) (temp___skip_top_level_464 Bool)) Bool (and (= (attr__constrained temp___expr_463) false) (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 temp___expr_463))) 2)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const current_read__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const next_read__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun local_invariant (us_rep us_split_fields us_split_discrs Int us_split_fields us_split_discrs Int) Bool)
(declare-fun local_invariant__function_guard (Bool us_rep us_split_fields us_split_discrs Int us_split_fields us_split_discrs Int) Bool)
(declare-fun size (us_rep) Int)
(declare-fun size__function_guard (Int us_rep) Bool)
(declare-fun index (us_rep) Int)
(declare-fun index__function_guard (Int us_rep) Bool)
(assert (forall ((lexer__the_file us_rep)) (forall ((lexer__current_read__fields us_split_fields) (lexer__next_read__fields us_split_fields)) (forall ((lexer__current_read__discrs us_split_discrs) (lexer__next_read__discrs us_split_discrs)) (forall ((lexer__current_idx Int) (lexer__next_idx Int)) (! (= (= (local_invariant lexer__the_file lexer__current_read__fields lexer__current_read__discrs lexer__current_idx lexer__next_read__fields lexer__next_read__discrs lexer__next_idx) true) (and (and (and (and (and (and (not (= (attr__constrained (mk___rep lexer__current_read__discrs lexer__current_read__fields current_read__attr__constrained)) true)) (not (= (attr__constrained (mk___rep lexer__next_read__discrs lexer__next_read__fields next_read__attr__constrained)) true))) (<= lexer__current_idx (size lexer__the_file))) (<= lexer__next_idx (size lexer__the_file))) (= lexer__next_idx (index lexer__the_file))) (<= lexer__current_idx lexer__next_idx)) (ite (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 (mk___rep lexer__next_read__discrs lexer__next_read__fields next_read__attr__constrained)))) 0) (and (= (to_rep1 (rec__file_io__read_result__status (us_split_discrs1 (mk___rep lexer__current_read__discrs lexer__current_read__fields current_read__attr__constrained)))) 0) (= lexer__current_idx (- lexer__next_idx 1))) (= lexer__current_idx lexer__next_idx)))) :pattern ((local_invariant lexer__the_file lexer__current_read__fields lexer__current_read__discrs lexer__current_idx lexer__next_read__fields lexer__next_read__discrs lexer__next_idx))))))))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(define-fun dynamic_invariant3 ((temp___expr_455 Int) (temp___is_init_452 Bool) (temp___skip_constant_453 Bool) (temp___do_toplevel_454 Bool)) Bool (=> (or (= temp___is_init_452 true) (<= 0 2)) (in_range4 temp___expr_455)))
(declare-const the_file us_rep)
(declare-const current_read__split_fields character)
(declare-const current_read__split_discrs read_status)
(declare-const current_line Int)
(declare-const current_col Int)
(declare-const current_idx Int)
(declare-const next_read__split_fields character)
(declare-const next_read__split_discrs read_status)
(declare-const next_idx Int)
(declare-const temp___959 Int)
(declare-const temp___958 us_rep)
(declare-const temp___960 Int)
(declare-const temp___957 read_status)
(declare-const temp___9571 character)
(declare-const temp___9572 Bool)
(declare-const temp___956 Int)
(declare-const temp___955 Int)
(declare-const temp___954 Int)
(declare-const temp___953 read_status)
(declare-const temp___9531 character)
(declare-const temp___9532 Bool)
(declare-const temp___962 Int)
(declare-const temp___961 Int)
(declare-const o Bool)
(declare-const the_file1 us_rep)
(declare-const current_read__split_fields1 us_split_fields)
(declare-const current_read__split_discrs1 us_split_discrs)
(declare-const current_line1 Int)
(declare-const current_col1 Int)
(declare-const current_idx1 Int)
(declare-const next_read__split_fields1 us_split_fields)
(declare-const next_read__split_discrs1 us_split_discrs)
(declare-const next_idx1 Int)
(declare-const result Bool)
(declare-const the_file2 us_rep)
(declare-const current_read__split_fields2 us_split_fields)
(declare-const current_read__split_discrs2 us_split_discrs)
(declare-const current_line2 Int)
(declare-const current_col2 Int)
(declare-const current_idx2 Int)
(declare-const next_read__split_fields2 us_split_fields)
(declare-const next_read__split_discrs2 us_split_discrs)
(declare-const next_idx2 Int)
(declare-const temp___9621 Int)
(declare-const temp___9611 Int)
(declare-const result1 int__ref)
(declare-const temp___9622 Int)
(declare-const result2 int__ref)
(declare-const temp___9612 Int)
(declare-const the_file3 us_rep)
(declare-const current_read__split_fields3 us_split_fields)
(declare-const current_read__split_discrs3 us_split_discrs)
(declare-const current_line3 Int)
(declare-const current_col3 Int)
(declare-const current_idx3 Int)
(declare-const next_read__split_fields3 us_split_fields)
(declare-const next_read__split_discrs3 us_split_discrs)
(declare-const next_idx3 Int)
(declare-const result3 Bool)
(declare-const the_file4 file__ref)
(declare-const current_read__split_fields4 us_split_fields__ref)
(declare-const current_read__split_discrs4 us_split_discrs__ref)
(declare-const current_line4 int__ref)
(declare-const current_col4 int__ref)
(declare-const current_idx4 int__ref)
(declare-const next_read__split_fields4 us_split_fields__ref)
(declare-const next_read__split_discrs4 us_split_discrs__ref)
(declare-const next_idx4 int__ref)
(declare-const temp___9623 int__ref)
(declare-const temp___9613 int__ref)
(declare-const the_file5 us_rep)
(declare-const current_read__split_fields5 us_split_fields)
(declare-const current_read__split_discrs5 us_split_discrs)
(declare-const current_line5 Int)
(declare-const current_col5 Int)
(declare-const current_idx5 Int)
(declare-const next_read__split_fields5 us_split_fields)
(declare-const next_read__split_discrs5 us_split_discrs)
(declare-const next_idx5 Int)
(declare-const temp___9624 Int)
(declare-const temp___9614 Int)
(declare-const the_file6 file__ref)
(declare-const current_read__split_fields6 us_split_fields__ref)
(declare-const current_read__split_discrs6 us_split_discrs__ref)
(declare-const current_line6 int__ref)
(declare-const current_col6 int__ref)
(declare-const current_idx6 int__ref)
(declare-const next_read__split_fields6 us_split_fields__ref)
(declare-const next_read__split_discrs6 us_split_discrs__ref)
(declare-const next_idx6 int__ref)
(declare-const the_file7 us_rep)
(declare-const current_read__split_fields7 us_split_fields)
(declare-const current_read__split_discrs7 us_split_discrs)
(declare-const current_line7 Int)
(declare-const current_col7 Int)
(declare-const current_idx7 Int)
(declare-const next_read__split_fields7 us_split_fields)
(declare-const next_read__split_discrs7 us_split_discrs)
(declare-const next_idx7 Int)
(declare-const the_file8 file__ref)
(declare-const current_read__split_fields8 us_split_fields__ref)
(declare-const current_read__split_discrs8 us_split_discrs__ref)
(declare-const current_line8 int__ref)
(declare-const current_col8 int__ref)
(declare-const current_idx8 int__ref)
(declare-const next_read__split_fields8 us_split_fields__ref)
(declare-const next_read__split_discrs8 us_split_discrs__ref)
(declare-const next_idx8 int__ref)
(declare-const the_file9 us_rep)
(declare-const current_read__split_fields9 us_split_fields)
(declare-const current_read__split_discrs9 us_split_discrs)
(declare-const current_line9 Int)
(declare-const current_col9 Int)
(declare-const current_idx9 Int)
(declare-const next_read__split_fields9 us_split_fields)
(declare-const next_read__split_discrs9 us_split_discrs)
(declare-const next_idx9 Int)
(declare-const the_file10 file__ref)
(declare-const current_read__split_fields10 us_split_fields__ref)
(declare-const current_read__split_discrs10 us_split_discrs__ref)
(declare-const current_line10 int__ref)
(declare-const current_col10 int__ref)
(declare-const current_idx10 int__ref)
(declare-const next_read__split_fields10 us_split_fields__ref)
(declare-const next_read__split_discrs10 us_split_discrs__ref)
(declare-const next_idx10 int__ref)
(declare-const the_file11 us_rep)
(declare-const current_read__split_fields11 us_split_fields)
(declare-const current_read__split_discrs11 us_split_discrs)
(declare-const current_line11 Int)
(declare-const current_col11 Int)
(declare-const current_idx11 Int)
(declare-const next_read__split_fields11 us_split_fields)
(declare-const next_read__split_discrs11 us_split_discrs)
(declare-const next_idx11 Int)
(assert (= current_read__attr__constrained false))
(assert (in_range2 current_line))
(assert (in_range1 current_col))
(assert (in_range1 current_idx))
(assert (= next_read__attr__constrained false))
(assert (in_range1 next_idx))
(assert (and (= (local_invariant the_file (mk___split_fields current_read__split_fields) (mk___split_discrs current_read__split_discrs) current_idx (mk___split_fields next_read__split_fields) (mk___split_discrs next_read__split_discrs) next_idx) true) (and (= (to_rep1 current_read__split_discrs) 0) (= (to_rep current_read__split_fields) 59))))
(assert (and (and (and (and (and (and (= (local_invariant the_file1 current_read__split_fields1 current_read__split_discrs1 current_idx1 next_read__split_fields1 next_read__split_discrs1 next_idx1) true) (= (bool_eq1 (mk___rep current_read__split_discrs1 current_read__split_fields1 current_read__attr__constrained) (mk___rep (mk___split_discrs next_read__split_discrs) (mk___split_fields next_read__split_fields) next_read__attr__constrained)) true)) (= current_idx1 next_idx)) (<= current_idx current_idx1)) (and (and (and (in_range2 current_line1) (in_range1 current_col1)) (in_range1 current_idx1)) (in_range1 next_idx1))) (and (ite (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs1)) 0) (= result (ite (not (= (to_rep (rec__file_io__read_result__c current_read__split_fields1)) 10)) true false)) (= result false)) (ite (= result true) (and (and (and (= temp___959 next_idx1) (and (= temp___958 the_file1) (and (= temp___960 current_idx1) (and (and (= (mk___split_discrs temp___957) next_read__split_discrs1) (and (= (mk___split_fields temp___9571) next_read__split_fields1) (= temp___9572 next_read__attr__constrained))) (and (= temp___956 current_idx1) (and (= temp___955 current_col1) (and (= temp___954 current_line1) (and (and (= (mk___split_discrs temp___953) current_read__split_discrs1) (and (= (mk___split_fields temp___9531) current_read__split_fields1) (= temp___9532 current_read__attr__constrained))) (and (= 0 temp___962) (and (= 0 temp___961) (and (and (= (local_invariant the_file2 current_read__split_fields2 current_read__split_discrs2 current_idx2 next_read__split_fields2 next_read__split_discrs2 next_idx2) true) (<= temp___960 current_idx2)) (and (and (and (and (and (in_range2 current_line2) (in_range1 current_col2)) (in_range1 current_idx2)) (in_range1 next_idx2)) (and (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs2)) 0) (not (= (to_rep (rec__file_io__read_result__c current_read__split_fields2)) 10)))) (and (and (= result1 (mk_int__ref temp___9621)) (= temp___9622 next_idx2)) (and (and (= result2 (mk_int__ref temp___9611)) (= temp___9612 (to_int1 (ite (= (to_rep1 (rec__file_io__read_result__status next_read__split_discrs2)) 0) true false)))) (and (and (and (and (and (= (local_invariant the_file3 current_read__split_fields3 current_read__split_discrs3 current_idx3 next_read__split_fields3 next_read__split_discrs3 next_idx3) true) (= (bool_eq1 (mk___rep current_read__split_discrs3 current_read__split_fields3 current_read__attr__constrained) (mk___rep next_read__split_discrs2 next_read__split_fields2 next_read__attr__constrained)) true)) (= current_idx3 next_idx2)) (<= current_idx2 current_idx3)) (and (and (and (in_range2 current_line3) (in_range1 current_col3)) (in_range1 current_idx3)) (in_range1 next_idx3))) (and (and (ite (= (to_rep1 (rec__file_io__read_result__status current_read__split_discrs3)) 0) (= o (ite (not (= (to_rep (rec__file_io__read_result__c current_read__split_fields3)) 10)) true false)) (= o false)) (= result3 (ite (not (= o true)) true false))) (= result3 true))))))))))))))))) (and (and (= next_idx6 (mk_int__ref next_idx3)) (and (= next_read__split_discrs6 (mk___split_discrs__ref next_read__split_discrs3)) (and (= next_read__split_fields6 (mk___split_fields__ref next_read__split_fields3)) (and (= current_idx6 (mk_int__ref current_idx3)) (and (= current_col6 (mk_int__ref current_col3)) (and (= current_line6 (mk_int__ref current_line3)) (and (= current_read__split_discrs6 (mk___split_discrs__ref current_read__split_discrs3)) (and (= current_read__split_fields6 (mk___split_fields__ref current_read__split_fields3)) (= the_file6 (mk_file__ref the_file3)))))))))) (and (= next_idx7 next_idx3) (and (= next_read__split_discrs7 next_read__split_discrs3) (and (= next_read__split_fields7 next_read__split_fields3) (and (= current_idx7 current_idx3) (and (= current_col7 current_col3) (and (= current_line7 current_line3) (and (= current_read__split_discrs7 current_read__split_discrs3) (and (= current_read__split_fields7 current_read__split_fields3) (= the_file7 the_file3))))))))))) (and (and (= next_idx8 next_idx6) (and (= next_read__split_discrs8 next_read__split_discrs6) (and (= next_read__split_fields8 next_read__split_fields6) (and (= current_idx8 current_idx6) (and (= current_col8 current_col6) (and (= current_line8 current_line6) (and (= current_read__split_discrs8 current_read__split_discrs6) (and (= current_read__split_fields8 current_read__split_fields6) (= the_file8 the_file6))))))))) (and (= next_idx9 next_idx7) (and (= next_read__split_discrs9 next_read__split_discrs7) (and (= next_read__split_fields9 next_read__split_fields7) (and (= current_idx9 current_idx7) (and (= current_col9 current_col7) (and (= current_line9 current_line7) (and (= current_read__split_discrs9 current_read__split_discrs7) (and (= current_read__split_fields9 current_read__split_fields7) (= the_file9 the_file7))))))))))) (and (and (= next_idx8 (mk_int__ref next_idx1)) (and (= next_read__split_discrs8 (mk___split_discrs__ref next_read__split_discrs1)) (and (= next_read__split_fields8 (mk___split_fields__ref next_read__split_fields1)) (and (= current_idx8 (mk_int__ref current_idx1)) (and (= current_col8 (mk_int__ref current_col1)) (and (= current_line8 (mk_int__ref current_line1)) (and (= current_read__split_discrs8 (mk___split_discrs__ref current_read__split_discrs1)) (and (= current_read__split_fields8 (mk___split_fields__ref current_read__split_fields1)) (= the_file8 (mk_file__ref the_file1)))))))))) (and (= next_idx9 next_idx1) (and (= next_read__split_discrs9 next_read__split_discrs1) (and (= next_read__split_fields9 next_read__split_fields1) (and (= current_idx9 current_idx1) (and (= current_col9 current_col1) (and (= current_line9 current_line1) (and (= current_read__split_discrs9 current_read__split_discrs1) (and (= current_read__split_fields9 current_read__split_fields1) (= the_file9 the_file1))))))))))))) (and (and (= next_idx10 next_idx8) (and (= next_read__split_discrs10 next_read__split_discrs8) (and (= next_read__split_fields10 next_read__split_fields8) (and (= current_idx10 current_idx8) (and (= current_col10 current_col8) (and (= current_line10 current_line8) (and (= current_read__split_discrs10 current_read__split_discrs8) (and (= current_read__split_fields10 current_read__split_fields8) (= the_file10 the_file8))))))))) (and (= next_idx11 next_idx9) (and (= next_read__split_discrs11 next_read__split_discrs9) (and (= next_read__split_fields11 next_read__split_fields9) (and (= current_idx11 current_idx9) (and (= current_col11 current_col9) (and (= current_line11 current_line9) (and (= current_read__split_discrs11 current_read__split_discrs9) (and (= current_read__split_fields11 current_read__split_fields9) (= the_file11 the_file9))))))))))))
(assert (not (= (local_invariant (file__content the_file10) (us_split_fields__content current_read__split_fields10) (us_split_discrs__content current_read__split_discrs10) (int__content current_idx10) (us_split_fields__content next_read__split_fields10) (us_split_discrs__content next_read__split_discrs10) (int__content next_idx10)) true)))
(check-sat)
(exit)
