(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun state_a (Bool Int) Bool)
(declare-fun state_a__function_guard (Bool Bool Int) Bool)
(assert true)
(assert (forall ((state_machine__flag Bool)) (forall ((state_machine__num Int)) (! (= (= (state_a state_machine__flag state_machine__num) true) (and (= state_machine__flag true) (< 0 state_machine__num))) :pattern ((state_a state_machine__flag state_machine__num))))))
(declare-fun state_b (Bool Int) Bool)
(declare-fun state_b__function_guard (Bool Bool Int) Bool)
(assert true)
(assert (forall ((state_machine__flag Bool)) (forall ((state_machine__num Int)) (! (= (= (state_b state_machine__flag state_machine__num) true) (and (= state_machine__flag true) (<= state_machine__num 0))) :pattern ((state_b state_machine__flag state_machine__num))))))
(declare-fun state_c (Bool Int) Bool)
(declare-fun state_c__function_guard (Bool Bool Int) Bool)
(assert true)
(assert (forall ((state_machine__flag Bool)) (forall ((state_machine__num Int)) (! (= (= (state_c state_machine__flag state_machine__num) true) (and (not (= state_machine__flag true)) (< 0 state_machine__num))) :pattern ((state_c state_machine__flag state_machine__num))))))
(declare-fun state_d (Bool Int) Bool)
(declare-fun state_d__function_guard (Bool Bool Int) Bool)
(assert true)
(assert (forall ((state_machine__flag Bool)) (forall ((state_machine__num Int)) (! (= (= (state_d state_machine__flag state_machine__num) true) (and (not (= state_machine__flag true)) (< state_machine__num 0))) :pattern ((state_d state_machine__flag state_machine__num))))))
(declare-const flag Bool)
(declare-const num Int)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Bool)
(assert (in_range1 num))
(assert (and (= result (state_a flag num)) (= (= result true) (and (= flag true) (< 0 num)))))
(assert (not (= result true)))
(assert (and (= result1 (state_b flag num)) (= (= result1 true) (and (= flag true) (<= num 0)))))
(assert (not (= result1 true)))
(assert (and (= result2 (state_c flag num)) (= (= result2 true) (and (not (= flag true)) (< 0 num)))))
(assert (not (= result2 true)))
(assert (and (= result3 (state_d flag num)) (= (= result3 true) (and (not (= flag true)) (< num 0)))))
(assert (= result3 true))
(assert (not (in_range1 (+ num 1))))
(check-sat)
(exit)
