(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort ta4D2 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (ta4D2 ta4D2) Bool)
(declare-const dummy1 ta4D2)
(declare-datatypes () ((ta4D2__ref (mk_ta4D2__ref (ta4D2__content ta4D2)))))
(define-fun ta4D2__ref___projection ((a ta4D2__ref)) ta4D2 (ta4D2__content a))
(declare-sort map1 0)
(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int Int) integer)
(declare-fun set (map1 Int Int integer) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((a integer)) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a integer)) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide (map1 Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get (slide a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_133 Int) (temp___idx_134 Int)) (=> (and (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (and (<= a__first_2 temp___idx_134) (<= temp___idx_134 a__last_2))) (= (to_rep (get a temp___idx_133 temp___idx_134)) (to_rep (get b (+ (- b__first a__first) temp___idx_133) (+ (- b__first_2 a__first_2) temp___idx_134))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_133 Int) (temp___idx_134 Int)) (=> (and (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (and (<= a__first_2 temp___idx_134) (<= temp___idx_134 a__last_2))) (= (to_rep (get a temp___idx_133 temp___idx_134)) (to_rep (get b (+ (- b__first a__first) temp___idx_133) (+ (- b__first_2 a__first_2) temp___idx_134)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun temp___159 (Int Int Int Int) map1)
(assert (forall ((temp___161 Int) (temp___162 Int) (temp___163 Int) (temp___164 Int)) (let ((temp___160 (temp___159 temp___161 temp___162 temp___163 temp___164))) (and (and (= (get temp___160 1 1) (of_rep temp___161)) (= (get temp___160 1 2) (of_rep temp___162))) (and (= (get temp___160 2 1) (of_rep temp___163)) (= (get temp___160 2 2) (of_rep temp___164)))))))
(declare-fun temp___167 (Int) map1)
(assert (forall ((temp___169 Int)) (forall ((temp___170 Int) (temp___171 Int)) (= (get (temp___167 temp___169) temp___170 temp___171) (of_rep temp___169)))))
(declare-fun temp___172 (Int Int Int) map1)
(assert (forall ((temp___174 Int) (temp___175 Int) (temp___176 Int)) (let ((temp___173 (temp___172 temp___174 temp___175 temp___176))) (forall ((temp___177 Int) (temp___178 Int)) (ite (= temp___177 1) (ite (= temp___178 1) (= (get temp___173 temp___177 temp___178) (of_rep temp___174)) (= (get temp___173 temp___177 temp___178) (of_rep temp___175))) (=> (= temp___177 2) (= (get temp___173 temp___177 temp___178) (of_rep temp___176))))))))
(declare-fun temp___179 (Int Int Int) map1)
(assert (forall ((temp___181 Int) (temp___182 Int) (temp___183 Int)) (let ((temp___180 (temp___179 temp___181 temp___182 temp___183))) (forall ((temp___184 Int) (temp___185 Int)) (ite (= temp___184 1) (ite (= temp___185 1) (= (get temp___180 temp___184 temp___185) (of_rep temp___181)) (= (get temp___180 temp___184 temp___185) (of_rep temp___182))) (=> (= temp___184 2) (= (get temp___180 temp___184 temp___185) (of_rep temp___183))))))))
(declare-fun temp___186 (Int Int Int Int) map1)
(assert (forall ((temp___188 Int) (temp___189 Int) (temp___190 Int) (temp___191 Int)) (let ((temp___187 (temp___186 temp___188 temp___189 temp___190 temp___191))) (forall ((temp___192 Int) (temp___193 Int)) (ite (= temp___192 2) (ite (= temp___193 1) (= (get temp___187 temp___192 temp___193) (of_rep temp___188)) (=> (= temp___193 2) (= (get temp___187 temp___192 temp___193) (of_rep temp___189)))) (ite (= temp___193 1) (= (get temp___187 temp___192 temp___193) (of_rep temp___190)) (=> (= temp___193 2) (= (get temp___187 temp___192 temp___193) (of_rep temp___191)))))))))
(declare-const one Int)
(declare-const a map1)
(declare-const k Int)
(declare-const result map1)
(declare-const a1 map1)
(declare-const result1 map1)
(declare-const a2 map1)
(declare-const result2 map1)
(declare-const a3 map1)
(declare-const result3 map1)
(declare-const a4 map1)
(declare-const result4 map1)
(declare-const a5 map1)
(declare-const a6 map1)
(declare-const a7 map1)
(assert (in_range1 one))
(assert (in_range1 b))
(assert (= one 1))
(assert (=> (= b 1) (= (mk_map__ref result) (mk_map__ref a))))
(assert (=> (= b 1) (= a1 (temp___159 one 2 one 2))))
(assert (=> (not (= b 1)) (=> (= b 2) (= (mk_map__ref result1) (mk_map__ref a)))))
(assert (=> (not (= b 1)) (=> (= b 2) (= a2 (temp___167 one)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (mk_map__ref result2) (mk_map__ref a))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= a3 (temp___172 one one one))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (mk_map__ref result3) (mk_map__ref a)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= a4 (temp___179 2 one one)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (mk_map__ref result4) (mk_map__ref a)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a5 (temp___186 2 one one one)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a4 a5))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (= a3 a4)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (= a2 a3))))
(assert (=> (not (= b 1)) (= a1 a2)))
(assert (= a1 a6))
(assert (= a7 a1))
(assert (= b 1))
(declare-const k1 Int)
(assert (<= 1 k1))
(assert (<= k1 2))
(assert (not (= (to_rep (get a6 k1 one)) one)))
(check-sat)
(exit)
