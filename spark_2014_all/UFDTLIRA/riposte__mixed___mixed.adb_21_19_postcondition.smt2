(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort enum_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (enum_t enum_t) Bool)
(declare-const dummy1 enum_t)
(declare-datatypes () ((enum_t__ref (mk_enum_t__ref (enum_t__content enum_t)))))
(define-fun enum_t__ref___projection ((a enum_t__ref)) enum_t (enum_t__content a))
(declare-fun to_rep1 (enum_t) Int)
(declare-fun of_rep1 (Int) enum_t)
(assert (forall ((x enum_t)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x enum_t)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__mixed__rec__b Bool) (rec__mixed__rec__e enum_t) (rec__mixed__rec__i integer)))))
(define-fun us_split_fields_B__projection ((a us_split_fields)) Bool (rec__mixed__rec__b a))
(define-fun us_split_fields_E__projection ((a us_split_fields)) enum_t (rec__mixed__rec__e a))
(define-fun us_split_fields_I__projection ((a us_split_fields)) integer (rec__mixed__rec__i a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (rec__mixed__rec__b (us_split_fields1 a)) (rec__mixed__rec__b (us_split_fields1 b))) (= (to_rep1 (rec__mixed__rec__e (us_split_fields1 a))) (to_rep1 (rec__mixed__rec__e (us_split_fields1 b))))) (= (to_rep (rec__mixed__rec__i (us_split_fields1 a))) (to_rep (rec__mixed__rec__i (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const mixed__rec__b__first__bit Int)
(declare-const mixed__rec__b__last__bit Int)
(declare-const mixed__rec__b__position Int)
(assert (<= 0 mixed__rec__b__first__bit))
(assert (< mixed__rec__b__first__bit mixed__rec__b__last__bit))
(assert (<= 0 mixed__rec__b__position))
(declare-const mixed__rec__e__first__bit Int)
(declare-const mixed__rec__e__last__bit Int)
(declare-const mixed__rec__e__position Int)
(assert (<= 0 mixed__rec__e__first__bit))
(assert (< mixed__rec__e__first__bit mixed__rec__e__last__bit))
(assert (<= 0 mixed__rec__e__position))
(declare-const mixed__rec__i__first__bit Int)
(declare-const mixed__rec__i__last__bit Int)
(declare-const mixed__rec__i__position Int)
(assert (<= 0 mixed__rec__i__first__bit))
(assert (< mixed__rec__i__first__bit mixed__rec__i__last__bit))
(assert (<= 0 mixed__rec__i__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content a))
(declare-const r us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 0 2)) (in_range1 temp___expr_141)))
(declare-const mixed__id__result Bool)
(declare-const mixed__id__result1 enum_t)
(declare-const mixed__id__result2 integer)
(declare-const result Bool)
(declare-const result1 enum_t)
(declare-const result2 integer)
(declare-const mixed__id__result3 Bool)
(declare-const mixed__id__result4 enum_t)
(declare-const mixed__id__result5 integer)
(declare-const mixed__id__result6 Bool)
(declare-const mixed__id__result7 enum_t)
(declare-const mixed__id__result8 integer)
(declare-const mixed__id__result9 Bool)
(declare-const mixed__id__result10 enum_t)
(declare-const mixed__id__result11 integer)
(declare-const mixed__id__result12 Bool)
(declare-const mixed__id__result13 enum_t)
(declare-const mixed__id__result14 integer)
(declare-const mixed__id__result15 Bool)
(declare-const mixed__id__result16 enum_t)
(declare-const mixed__id__result17 integer)
(define-fun mixed__id__result18 () us_rep (mk___rep (mk___split_fields mixed__id__result3 mixed__id__result4 mixed__id__result5)))
(declare-const result3 Bool)
(declare-const result4 enum_t)
(declare-const result5 integer)
(assert (= mixed__id__result6 mixed__id__result3))
(assert (= mixed__id__result7 mixed__id__result4))
(assert (= mixed__id__result8 mixed__id__result5))
(assert (= (mk___rep (mk___split_fields mixed__id__result9 mixed__id__result10 mixed__id__result11)) mixed__id__result18))
(assert (= result mixed__id__result))
(assert (= result1 mixed__id__result1))
(assert (= result2 mixed__id__result2))
(assert (= mixed__id__result18 r))
(assert (= (mk_rec____ref (mk___rep (mk___split_fields mixed__id__result12 mixed__id__result13 mixed__id__result14))) (mk_rec____ref (mk___rep (mk___split_fields mixed__id__result6 mixed__id__result7 mixed__id__result8)))))
(assert (= mixed__id__result15 mixed__id__result9))
(assert (= mixed__id__result16 mixed__id__result10))
(assert (= mixed__id__result17 mixed__id__result11))
(assert (= result3 mixed__id__result12))
(assert (= result4 mixed__id__result13))
(assert (= result5 mixed__id__result14))
(assert (not (= (bool_eq r (mk___rep (mk___split_fields mixed__id__result12 mixed__id__result13 mixed__id__result14))) true)))
(check-sat)
(exit)
