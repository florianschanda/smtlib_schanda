(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((my_int__ref (mk_my_int__ref (my_int__content us_rep)))))
(define-fun my_int__ref___projection ((a my_int__ref)) us_rep (my_int__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq a b) (oeq a b)) :pattern ((user_eq a b)))))
(declare-const o us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun is_zero (us_rep) Bool)
(declare-fun is_zero__function_guard (Bool us_rep) Bool)
(assert true)
(declare-fun p (us_rep) us_rep)
(declare-fun p__function_guard (us_rep us_rep) Bool)
(assert true)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((u__ref (mk_u__ref (u__content us_rep)))))
(define-fun u__ref___projection ((a u__ref)) us_rep (u__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const y us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x_i us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const x us_rep)
(declare-const x1 us_rep)
(declare-const result Bool)
(declare-const x2 us_rep)
(assert (= x x_i))
(assert (= result (is_zero y)))
(assert (not (= result true)))
(assert (= x2 x))
(assert (= x2 x1))
(assert (not (not (= (is_zero y) true))))
(check-sat)
(exit)
