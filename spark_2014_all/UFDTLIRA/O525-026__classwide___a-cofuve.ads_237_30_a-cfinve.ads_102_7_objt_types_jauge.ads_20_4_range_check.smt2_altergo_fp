(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tcount_typeB

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type index_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___2__projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index

predicate in_range3(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : extended_index, extended_index -> bool

logic dummy2 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq5 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep1) : int = (a).attr__tag

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)]. (bool_eq6(a,
  b) = true))

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_private. forall a1:int. (0 <= object__size1({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_private. forall a1:int. (0 <= object__alignment1({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_private

logic dummy5 : int

type tinterface_jauge__ref = { tinterface_jauge__content : us_rep1
}

function tinterface_jauge__ref___projection(a: tinterface_jauge__ref) : us_rep1 =
  (a).tinterface_jauge__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> us_rep1

logic get__function_guard : us_rep1, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq3(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> ((((get(a,
    n)).attr__tag = (get(b, n)).attr__tag) and (us_dispatch_eq(get(a, n),
    get(b, n)) = true)) or ((not ((get(a, n)).attr__tag = (get(b,
    n)).attr__tag)) and (false = true))))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> ((((get(a,
        n)).attr__tag = (get(b, n)).attr__tag) -> (us_dispatch_eq(get(a, n),
        get(b, n)) = true)) and ((not ((get(a, n)).attr__tag = (get(b,
        n)).attr__tag)) -> (false = true)))))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

type count_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : count_type, count_type -> bool

logic dummy6 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 4) and in_range4(length(container))))

logic left : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic fst : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic lst : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic offset : int

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom get__post_axiom : true

 (* File "a-cofuve.ads", line 201, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. forall o1:int. forall result:bool. forall result1:bool.
  (in_range2(fst) -> (in_range3(lst) -> (in_range1(offset) ->
  ((((o1 = (0 + length(left))) and (in_range3(o1) and
  (o1 = (0 + length(left))))) and (((lst <= o1) and (result = true)) or
  ((not (lst <= o1)) and (result = false)))) -> ((result = true) ->
  ((((offset <  0) and (((o = ((-2147483648) - offset)) and
  in_range1(((-2147483648) - offset))) and (((o <= 1) and
  (result1 = true)) or ((not (o <= 1)) and (result1 = false))))) or
  ((not (offset <  0)) and (result1 = of_int(1)))) -> ((result1 = true) ->
  ((fst <= lst) -> in_range1(lst))))))))))
