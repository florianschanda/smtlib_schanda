(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__base__t__c : integer; rec__ext__ : us_private
}

function us_split_fields_C__projection(a: us_split_fields) : integer =
  (a).rec__base__t__c

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__base__t__c) = to_rep(((b).us_split_fields1).rec__base__t__c)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__base__t__c) = to_rep(((b).us_split_fields1).rec__base__t__c))) ->
  (bool_eq2(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = { rec__base__t__c = a; rec__ext__ =
  a1 }; attr__tag = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = { rec__base__t__c = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

logic base__t__c__first__bit : int

logic base__t__c__last__bit : int

logic base__t__c__position : int

axiom base__t__c__first__bit_axiom : (0 <= base__t__c__first__bit)

axiom base__t__c__last__bit_axiom :
  (base__t__c__first__bit <  base__t__c__last__bit)

axiom base__t__c__position_axiom : (0 <= base__t__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : us_private

logic dummy3 : int

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic sum : us_rep -> int

logic sum__function_guard : int, us_rep -> prop

logic sum1 : int, us_rep -> int

logic sum__function_guard1 : int, int, us_rep -> prop

type us_split_fields2 = { rec__ext__u__d : integer; rec__base__t__c1 :
integer; rec__ext__1 : us_private
}

function us_split_fields_D__projection(a: us_split_fields2) : integer =
  (a).rec__ext__u__d

function us_split_fields_C__2__projection(a: us_split_fields2) : integer =
  (a).rec__base__t__c1

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__d : us_private -> integer

axiom extract__d__conv :
  (forall d:integer.
  (forall rec__ext__2:us_private. (extract__d(hide_ext__(d,
  rec__ext__2)) = d)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__base__t__c = ((a).us_split_fields3).rec__base__t__c1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__ext__u__d,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__ext__u__d = extract__d(((r).us_split_fields1).rec__ext__);
  rec__base__t__c1 = ((r).us_split_fields1).rec__base__t__c; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__ext__u__d) = to_rep(((b).us_split_fields3).rec__ext__u__d)) and
  (to_rep(((a).us_split_fields3).rec__base__t__c1) = to_rep(((b).us_split_fields3).rec__base__t__c1))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__ext__u__d) = to_rep(((b).us_split_fields3).rec__ext__u__d)) and
  (to_rep(((a).us_split_fields3).rec__base__t__c1) = to_rep(((b).us_split_fields3).rec__base__t__c1)))) ->
  (bool_eq3(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size1({ us_split_fields3 = { rec__ext__u__d = a;
  rec__base__t__c1 = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment1({ us_split_fields3 = { rec__ext__u__d = a;
  rec__base__t__c1 = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic ext__u__d__first__bit : int

logic ext__u__d__last__bit : int

logic ext__u__d__position : int

axiom ext__u__d__first__bit_axiom : (0 <= ext__u__d__first__bit)

axiom ext__u__d__last__bit_axiom :
  (ext__u__d__first__bit <  ext__u__d__last__bit)

axiom ext__u__d__position_axiom : (0 <= ext__u__d__position)

logic base__t__c__first__bit1 : int

logic base__t__c__last__bit1 : int

logic base__t__c__position1 : int

axiom base__t__c__first__bit_axiom1 : (0 <= base__t__c__first__bit1)

axiom base__t__c__last__bit_axiom1 :
  (base__t__c__first__bit1 <  base__t__c__last__bit1)

axiom base__t__c__position_axiom1 : (0 <= base__t__c__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : us_private

logic dummy7 : int

type u__ref = { u__content : us_rep1
}

function u__ref___projection(a: u__ref) : us_rep1 = (a).u__content

logic sum__2 : us_rep1 -> int

logic sum__2__function_guard : int, us_rep1 -> prop

logic sum__21 : int, us_rep1 -> int

logic sum__2__function_guard1 : int, int, us_rep1 -> prop

axiom sum__post_axiom :
  (forall x:integer. forall x1:us_private. forall x2:int [sum({
  us_split_fields1 = { rec__base__t__c = x; rec__ext__ = x1 }; attr__tag = x2
  })]. in_range(sum({ us_split_fields1 = { rec__base__t__c = x; rec__ext__ =
  x1 }; attr__tag = x2 })))

axiom sum__post__dispatch_axiom :
  (forall attr__tag2:int.
  (forall x:integer. forall x1:us_private. forall x2:int [sum1(attr__tag2, {
  us_split_fields1 = { rec__base__t__c = x; rec__ext__ = x1 }; attr__tag = x2
  })]. in_range(sum1(attr__tag2, { us_split_fields1 = { rec__base__t__c = x;
  rec__ext__ = x1 }; attr__tag = x2 }))))

axiom ext__u__compat_axiom :
  (forall x:integer. forall x1:us_private. forall x2:int [sum1(us_tag1, {
  us_split_fields1 = { rec__base__t__c = x; rec__ext__ = x1 }; attr__tag = x2
  })]. (sum__2(of_base({ us_split_fields1 = { rec__base__t__c = x;
  rec__ext__ = x1 }; attr__tag = x2 })) = sum1(us_tag1, { us_split_fields1 =
  { rec__base__t__c = x; rec__ext__ = x1 }; attr__tag = x2 })))

axiom base__t__compat_axiom :
  (forall x:integer. forall x1:us_private. forall x2:int [sum1(us_tag, {
  us_split_fields1 = { rec__base__t__c = x; rec__ext__ = x1 }; attr__tag = x2
  })]. (sum({ us_split_fields1 = { rec__base__t__c = x; rec__ext__ = x1 };
  attr__tag = x2 }) = sum1(us_tag, { us_split_fields1 = { rec__base__t__c =
  x; rec__ext__ = x1 }; attr__tag = x2 })))

axiom sum__def_axiom :
  (forall x:integer. forall x1:us_private. forall x2:int [sum({
  us_split_fields1 = { rec__base__t__c = x; rec__ext__ = x1 }; attr__tag = x2
  })]. (sum({ us_split_fields1 = { rec__base__t__c = x; rec__ext__ = x1 };
  attr__tag = x2 }) = to_rep(x)))

logic create : int -> us_rep

logic create__function_guard : us_rep, int -> prop

logic create1 : int, int -> us_rep

logic create__function_guard1 : us_rep, int, int -> prop

logic create__2 : int -> us_rep1

logic create__2__function_guard : us_rep1, int -> prop

logic create__21 : int, int -> us_rep1

logic create__2__function_guard1 : us_rep1, int, int -> prop

axiom create__2__post_axiom :
  (forall c:int [create__2(c)]. (in_range(c) ->
  ((create__2(c)).attr__tag1 = us_tag1)))

axiom create__2__post__dispatch_axiom :
  (forall attr__tag2:int. forall c:int [create__21(attr__tag2, c)].
  (in_range(c) -> ((create__21(attr__tag2, c)).attr__tag1 = attr__tag2)))

axiom ext__u__compat_axiom1 :
  (forall c:int [create__21(us_tag1, c)]. (create__2(c) = create__21(us_tag1,
  c)))

axiom create__2__def_axiom :
  (forall c:int [create__2(c)]. (in_range(c) -> (create__2(c) = {
  us_split_fields3 = { rec__ext__u__d = of_rep(0); rec__base__t__c1 =
  ((create(c)).us_split_fields1).rec__base__t__c; rec__ext__1 = us_null_ext__
  }; attr__tag1 = us_tag1 })))

logic a : integer

logic a1 : integer

logic a2 : us_private

logic a3 : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : integer

logic b1 : integer

logic b2 : us_private

logic b3 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom a__def_axiom : ({ us_split_fields3 = { rec__ext__u__d = a;
  rec__base__t__c1 = a1; rec__ext__1 = a2 }; attr__tag1 = a3
  } = create__2(1))

axiom b__def_axiom : ({ us_split_fields3 = { rec__ext__u__d = b;
  rec__base__t__c1 = b1; rec__ext__1 = b2 }; attr__tag1 = b3
  } = create__2(2))

axiom sum__2__post_axiom :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [sum__2({ us_split_fields3 = { rec__ext__u__d = x; rec__base__t__c1 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 })]. in_range(sum__2({
  us_split_fields3 = { rec__ext__u__d = x; rec__base__t__c1 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 })))

axiom sum__2__post__dispatch_axiom :
  (forall attr__tag2:int.
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [sum__21(attr__tag2, { us_split_fields3 = { rec__ext__u__d = x;
  rec__base__t__c1 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })].
  in_range(sum__21(attr__tag2, { us_split_fields3 = { rec__ext__u__d = x;
  rec__base__t__c1 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 }))))

axiom ext__u__compat_axiom2 :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [sum__21(us_tag1, { us_split_fields3 = { rec__ext__u__d = x;
  rec__base__t__c1 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })]. (sum__2({
  us_split_fields3 = { rec__ext__u__d = x; rec__base__t__c1 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 }) = sum__21(us_tag1, {
  us_split_fields3 = { rec__ext__u__d = x; rec__base__t__c1 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 })))

axiom sum__2__def_axiom :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [sum__2({ us_split_fields3 = { rec__ext__u__d = x; rec__base__t__c1 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 })]. (sum__2({ us_split_fields3 = {
  rec__ext__u__d = x; rec__base__t__c1 = x1; rec__ext__1 = x2 }; attr__tag1 =
  x3 }) = (sum({ us_split_fields1 = { rec__base__t__c = x1; rec__ext__ =
  hide_ext__(x, x2) }; attr__tag = x3 }) + to_rep(x))))

axiom create__post_axiom :
  (forall c:int [create(c)]. (in_range(c) -> ((sum(create(c)) = c) and
  ((create(c)).attr__tag = us_tag))))

axiom create__post__dispatch_axiom :
  (forall attr__tag2:int. forall c:int [create1(attr__tag2, c)].
  (in_range(c) -> ((create1(attr__tag2, c)).attr__tag = attr__tag2)))

axiom ext__u__compat_axiom3 :
  (forall c:int [create1(us_tag1, c)]. ({ us_split_fields1 = {
  rec__base__t__c = ((create__2(c)).us_split_fields3).rec__base__t__c1;
  rec__ext__ = hide_ext__(((create__2(c)).us_split_fields3).rec__ext__u__d,
  ((create__2(c)).us_split_fields3).rec__ext__1) }; attr__tag =
  (create__2(c)).attr__tag1 } = create1(us_tag1, c)))

axiom base__t__compat_axiom1 :
  (forall c:int [create1(us_tag, c)]. (create(c) = create1(us_tag, c)))

axiom create__def_axiom :
  (forall c:int [create(c)]. (in_range(c) -> (create(c) = {
  us_split_fields1 = { rec__base__t__c = of_rep(c); rec__ext__ =
  us_null_ext__ }; attr__tag = us_tag })))

 (* File "ext.ads", line 15, characters 0-0 *)
goal WP_parameter_def :
  (forall ext__test__a__assume:integer. forall ext__test__a__assume1:integer.
  forall ext__test__a__assume2:us_private. forall ext__test__a__assume3:int.
  forall ext__test__b__assume:integer. forall ext__test__b__assume1:integer.
  forall ext__test__b__assume2:us_private. forall ext__test__b__assume3:int.
  (((({ us_split_fields3 = { rec__ext__u__d = ext__test__a__assume;
  rec__base__t__c1 = ext__test__a__assume1; rec__ext__1 =
  ext__test__a__assume2 }; attr__tag1 = ext__test__a__assume3
  } = create__2(1)) and (((of_rep(0) = ext__test__a__assume) and
  ((((create(1)).us_split_fields1).rec__base__t__c = ext__test__a__assume1) and
  (us_null_ext__ = ext__test__a__assume2))) and
  (us_tag1 = ext__test__a__assume3))) and (((ext__test__a__assume = a) and
  ((ext__test__a__assume1 = a1) and (ext__test__a__assume2 = a2))) and
  (us_tag1 = a3))) -> (((({ us_split_fields3 = { rec__ext__u__d =
  ext__test__b__assume; rec__base__t__c1 = ext__test__b__assume1;
  rec__ext__1 = ext__test__b__assume2 }; attr__tag1 = ext__test__b__assume3
  } = create__2(2)) and (((of_rep(0) = ext__test__b__assume) and
  ((((create(2)).us_split_fields1).rec__base__t__c = ext__test__b__assume1) and
  (us_null_ext__ = ext__test__b__assume2))) and
  (us_tag1 = ext__test__b__assume3))) and (((ext__test__b__assume = b) and
  ((ext__test__b__assume1 = b1) and (ext__test__b__assume2 = b2))) and
  (us_tag1 = b3))) -> (sum({ us_split_fields1 = { rec__base__t__c = a1;
  rec__ext__ = hide_ext__(a, a2) }; attr__tag = a3 }) = sum({
  us_split_fields1 = { rec__base__t__c = b1; rec__ext__ = hide_ext__(b, b2)
  }; attr__tag = b3 })))))
