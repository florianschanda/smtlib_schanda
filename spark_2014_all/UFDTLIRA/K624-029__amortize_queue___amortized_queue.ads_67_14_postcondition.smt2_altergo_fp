(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type capacity_range

predicate in_range(x: int) = ((0 <= x) and (x <= 1000))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__amortized_queue__my_vectors__vector__capacity :
capacity_range
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range =
  (a).rec__amortized_queue__my_vectors__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__amortized_queue__my_vectors__vector :
us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__amortized_queue__my_vectors__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = a
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 }
  })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = a
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 }
  })))

logic amortized_queue__my_vectors__vector__capacity__first__bit : int

logic amortized_queue__my_vectors__vector__capacity__last__bit : int

logic amortized_queue__my_vectors__vector__capacity__position : int

axiom amortized_queue__my_vectors__vector__capacity__first__bit_axiom :
  (0 <= amortized_queue__my_vectors__vector__capacity__first__bit)

axiom amortized_queue__my_vectors__vector__capacity__last__bit_axiom :
  (amortized_queue__my_vectors__vector__capacity__first__bit <  amortized_queue__my_vectors__vector__capacity__last__bit)

axiom amortized_queue__my_vectors__vector__capacity__position_axiom :
  (0 <= amortized_queue__my_vectors__vector__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : capacity_range

logic dummy2 : us_main_type

type vector__ref = { vector__content : us_rep
}

function vector__ref___projection(a: vector__ref) : us_rep =
  (a).vector__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

logic to_rep : capacity_range -> int

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic capacity__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  container }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = container1 } })].
  ((((of_int(1) = true) -> (length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } }) <= to_rep(container))) and ((not (of_int(1) = true)) -> (length({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  container }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = container1 } }) <= 1000))) and
  in_range(length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq3 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref___projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic model__ : us_rep -> us_rep1

logic model____function_guard : us_rep1, us_rep -> prop

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic last__function_guard : int, us_rep1 -> prop

logic last_index__function_guard : int, us_rep -> prop

logic last_element__function_guard : int, us_rep -> prop

type element_type

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : element_type, element_type -> bool

logic dummy4 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

predicate in_range3(rec__amortized_queue__my_vectors__vector__capacity1: int,
  a: us_rep) =
  (rec__amortized_queue__my_vectors__vector__capacity1 = to_rep(((a).us_split_discrs1).rec__amortized_queue__my_vectors__vector__capacity))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size2({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = a
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 }
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = a };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 } })))

logic amortized_queue__my_vectors__vector__capacity__first__bit1 : int

logic amortized_queue__my_vectors__vector__capacity__last__bit1 : int

logic amortized_queue__my_vectors__vector__capacity__position1 : int

axiom amortized_queue__my_vectors__vector__capacity__first__bit_axiom1 :
  (0 <= amortized_queue__my_vectors__vector__capacity__first__bit1)

axiom amortized_queue__my_vectors__vector__capacity__last__bit_axiom1 :
  (amortized_queue__my_vectors__vector__capacity__first__bit1 <  amortized_queue__my_vectors__vector__capacity__last__bit1)

axiom amortized_queue__my_vectors__vector__capacity__position_axiom1 :
  (0 <= amortized_queue__my_vectors__vector__capacity__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : capacity_range

logic dummy6 : us_main_type

type constrained_vector__ref = { constrained_vector__content : us_rep
}

function constrained_vector__ref___projection(a: constrained_vector__ref) : us_rep =
  (a).constrained_vector__content

type us_split_fields2 = { rec__amortized_queue__queue__front : us_rep;
rec__amortized_queue__queue__rear : us_rep
}

function us_split_fields_Front__projection(a: us_split_fields2) : us_rep =
  (a).rec__amortized_queue__queue__front

function us_split_fields_Rear__projection(a: us_split_fields2) : us_rep =
  (a).rec__amortized_queue__queue__rear

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type. forall a2:capacity_range.
  forall a3:us_main_type. (0 <= object__size3({ us_split_fields3 = {
  rec__amortized_queue__queue__front = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = a };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = a2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a3 } } }
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type. forall a2:capacity_range.
  forall a3:us_main_type. (0 <= object__alignment3({ us_split_fields3 = {
  rec__amortized_queue__queue__front = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = a };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = a2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a3 } } }
  })))

logic amortized_queue__queue__front__first__bit : int

logic amortized_queue__queue__front__last__bit : int

logic amortized_queue__queue__front__position : int

axiom amortized_queue__queue__front__first__bit_axiom :
  (0 <= amortized_queue__queue__front__first__bit)

axiom amortized_queue__queue__front__last__bit_axiom :
  (amortized_queue__queue__front__first__bit <  amortized_queue__queue__front__last__bit)

axiom amortized_queue__queue__front__position_axiom :
  (0 <= amortized_queue__queue__front__position)

logic amortized_queue__queue__rear__first__bit : int

logic amortized_queue__queue__rear__last__bit : int

logic amortized_queue__queue__rear__position : int

axiom amortized_queue__queue__rear__first__bit_axiom :
  (0 <= amortized_queue__queue__rear__first__bit)

axiom amortized_queue__queue__rear__last__bit_axiom :
  (amortized_queue__queue__rear__first__bit <  amortized_queue__queue__rear__last__bit)

axiom amortized_queue__queue__rear__position_axiom :
  (0 <= amortized_queue__queue__rear__position)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy7 : capacity_range

logic dummy8 : us_main_type

logic dummy9 : capacity_range

logic dummy10 : us_main_type

type queue__ref = { queue__content : us_rep2
}

function queue__ref___projection(a: queue__ref) : us_rep2 =
  (a).queue__content

logic inv : us_rep2 -> bool

logic inv__function_guard : bool, us_rep2 -> prop

axiom inv__post_axiom : true

axiom inv__def_axiom :
  (forall q:capacity_range. forall q1:us_main_type. forall q2:capacity_range.
  forall q3:us_main_type [inv({ us_split_fields3 = {
  rec__amortized_queue__queue__front = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } }
  })]. ((inv({ us_split_fields3 = { rec__amortized_queue__queue__front = {
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = q
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } }
  }) = true) <-> (((length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 }
  }) <= length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 }
  })) and (length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 }
  }) <= (to_rep(q) - length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 }
  })))) and (to_rep(q) = to_rep(q2)))))

logic model__1 : us_rep2 -> us_rep

logic model____function_guard1 : us_rep, us_rep2 -> prop

logic is_model : us_rep2, us_rep -> bool

logic is_model__function_guard : bool, us_rep2, us_rep -> prop

axiom model____post_axiom :
  (forall q:capacity_range. forall q1:us_main_type. forall q2:capacity_range.
  forall q3:us_main_type [model__1({ us_split_fields3 = {
  rec__amortized_queue__queue__front = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } }
  })]. ((((1000 = to_rep(q)) and (1000 = to_rep(q2))) and (inv({
  us_split_fields3 = { rec__amortized_queue__queue__front = {
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = q
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } }
  }) = true)) -> (is_model({ us_split_fields3 = {
  rec__amortized_queue__queue__front = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } } },
  model__1({ us_split_fields3 = { rec__amortized_queue__queue__front = {
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = q
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } }
  })) = true)))

logic q : capacity_range

logic q1 : us_main_type

logic q2 : capacity_range

logic q3 : us_main_type

logic attr__ATTRIBUTE_ADDRESS : int

logic element__function_guard : int, us_rep, int -> prop

axiom is_model__post_axiom : true

axiom is_model__def_axiom :
  (forall q4:capacity_range. forall q5:us_main_type.
  forall q6:capacity_range. forall q7:us_main_type.
  (forall m:capacity_range. forall m1:us_main_type [is_model({
  us_split_fields3 = { rec__amortized_queue__queue__front = {
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  q4 }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q5 }
  }; rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q6 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q7 } } } },
  { us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  m }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = m1 }
  })]. ((is_model({ us_split_fields3 = { rec__amortized_queue__queue__front =
  { us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  q4 }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q5 }
  }; rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q6 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q7 } } } },
  { us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  m }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = m1 }
  }) = true) <-> (((((length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q4 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q5 }
  }) + length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q6 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q7 }
  })) = length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = m };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = m1 }
  })) and (length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = m };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = m1 }
  }) <= 1000)) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q6 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q7 }
  }))) -> (get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = m };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = m1 } }),
  i) = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q6 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q7 } }),
  ((length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q6 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q7 }
  }) - i) + 1)))))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q4 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q5 }
  }))) -> (get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = m };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = m1 } }),
  (i + length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q6 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q7 }
  }))) = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q4 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q5 } }),
  i))))))))

type count_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : count_type, count_type -> bool

logic dummy11 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

type extended_index

predicate in_range5(x: int) = ((0 <= x) and (x <= 1001))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : extended_index, extended_index -> bool

logic dummy12 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq2(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq2(a, b) = match_bool(bool_eq(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq2(a, b) = match_bool(bool_eq(length1(a), length1(b)), false,
  false)))))

axiom model____post_axiom1 :
  (forall container:capacity_range. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  container }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = container1 } })].
  (length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } })) = length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } })))

axiom is_empty__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type
  [is_empty({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } })]. ((is_empty({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } }) = true) <-> (length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } }) = 0)))

logic first_index__function_guard : int, us_rep -> prop

type index_type

predicate in_range6(x: int) = ((1 <= x) and (x <= 1000))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : index_type, index_type -> bool

logic dummy13 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index1

predicate in_range7(x: int) = ((0 <= x) and (x <= 1000))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : extended_index1, extended_index1 -> bool

logic dummy14 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep1 [length1(container)].
  (((0 + length1(container)) <= 1000) and in_range4(length1(container))))

type element_type1

predicate in_range8(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : element_type1, element_type1 -> bool

logic dummy15 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)]. ((in_range7(position) and
  ((1 <= position) and (position <= (0 + length1(container))))) ->
  in_range8(get(container, position)))))

logic amortized_queue__front__result : int

logic o : int

logic o1 : capacity_range

logic o2 : us_main_type

logic o3 : int

logic result : int

logic amortized_queue__front__result1 : int

logic amortized_queue__front__result2 : int

logic amortized_queue__front__result3 : int

logic amortized_queue__front__result4 : int

logic amortized_queue__front__result5 : int

logic result1 : int

axiom H : ((1000 = to_rep(q)) and (1000 = to_rep(q2)))

axiom H1 : ((inv({ us_split_fields3 = { rec__amortized_queue__queue__front =
  { us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  q }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 }
  }; rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } }
  }) = true) and (0 <  length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } })))

axiom H2 :
  (amortized_queue__front__result1 = amortized_queue__front__result2)

axiom H3 :
  (amortized_queue__front__result3 = amortized_queue__front__result1)

axiom H4 : ((o = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } }),
  (0 + length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 }
  }))))) and (in_range2(o) and (o = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } }),
  (0 + length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 }
  })))))))

axiom H5 : (result = amortized_queue__front__result)

axiom H6 : (amortized_queue__front__result1 = o)

axiom H7 :
  (amortized_queue__front__result4 = amortized_queue__front__result2)

axiom H8 :
  (amortized_queue__front__result5 = amortized_queue__front__result3)

axiom H9 : (result1 = amortized_queue__front__result4)

 (* File "amortized_queue.ads", line 8, characters 0-0 *)
goal WP_parameter_def : (get(model__(model__1({ us_split_fields3 = {
  rec__amortized_queue__queue__front = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } }
  })), (0 + length1(model__(model__1({ us_split_fields3 = {
  rec__amortized_queue__queue__front = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q1 } };
  rec__amortized_queue__queue__rear = { us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = q2 };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = q3 } } }
  }))))) = amortized_queue__front__result4)
