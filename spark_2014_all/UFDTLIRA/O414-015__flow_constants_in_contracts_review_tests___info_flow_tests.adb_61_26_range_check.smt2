(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const c1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const c2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort tt1B 0)
(declare-fun tt1Bqtint (tt1B) Int)
(assert (forall ((i tt1B)) (and (<= (- 2147483648) (tt1Bqtint i)) (<= (tt1Bqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (tt1B tt1B) Bool)
(declare-const dummy1 tt1B)
(declare-datatypes () ((tt1B__ref (mk_tt1B__ref (tt1B__content tt1B)))))
(define-fun tt1B__ref___3__projection ((a tt1B__ref)) tt1B (tt1B__content a))
(define-fun to_rep ((x tt1B)) Int (tt1Bqtint x))
(declare-fun of_rep (Int) tt1B)
(assert (forall ((x tt1B)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x tt1B)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const last Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (tt1B tt1B) Bool)
(declare-const dummy2 tt1B)
(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content tt1B)))))
(define-fun t1__ref___3__projection ((a t1__ref)) tt1B (t1__content a))
(declare-sort tt2B 0)
(declare-fun tt2Bqtint (tt2B) Int)
(assert (forall ((i tt2B)) (and (<= (- 2147483648) (tt2Bqtint i)) (<= (tt2Bqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tt2B tt2B) Bool)
(declare-const dummy3 tt2B)
(declare-datatypes () ((tt2B__ref (mk_tt2B__ref (tt2B__content tt2B)))))
(define-fun tt2B__ref___3__projection ((a tt2B__ref)) tt2B (tt2B__content a))
(define-fun to_rep1 ((x tt2B)) Int (tt2Bqtint x))
(declare-fun of_rep1 (Int) tt2B)
(assert (forall ((x tt2B)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x tt2B)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const last1 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (tt2B tt2B) Bool)
(declare-const dummy4 tt2B)
(declare-datatypes () ((t2__ref (mk_t2__ref (t2__content tt2B)))))
(define-fun t2__ref___3__projection ((a t2__ref)) tt2B (t2__content a))
(define-fun dynamic_invariant1 ((temp___expr_186 Int) (temp___is_init_182 Bool) (temp___skip_constant_183 Bool) (temp___do_toplevel_184 Bool) (temp___do_typ_inv_185 Bool)) Bool (=> (or (= temp___is_init_182 true) (<= 0 last)) (dynamic_property 0 last temp___expr_186)))
(assert (= last c1))
(define-fun dynamic_invariant2 ((temp___expr_193 Int) (temp___is_init_189 Bool) (temp___skip_constant_190 Bool) (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool (=> (or (= temp___is_init_189 true) (<= 0 last1)) (dynamic_property1 0 last1 temp___expr_193)))
(assert (= last1 c2))
(declare-const a Int)
(declare-const b Int)
(declare-const o Int)
(declare-const result Int)
(declare-const a1 Int)
(assert (=> (<= 0 2147483647) (in_range a)))
(assert (=> (<= 0 2147483647) (in_range b)))
(assert (in_range c1))
(assert (in_range c2))
(assert (and (= o last1) (in_range last1)))
(assert (= result a))
(assert (= a1 o))
(assert (not (in_range last)))
(check-sat)
(exit)
