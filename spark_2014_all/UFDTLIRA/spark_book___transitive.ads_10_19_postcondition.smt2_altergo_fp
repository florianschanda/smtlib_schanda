(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic property : int, int -> bool

logic property__function_guard : bool, int, int -> prop

axiom property__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS : int

logic prop_transitive : int, int, int -> bool

logic prop_transitive__function_guard : bool, int, int, int -> prop

axiom prop_transitive__post_axiom :
  (forall a:int. forall b:int. forall c:int [prop_transitive(a, b, c)].
  (((in_range1(a) and in_range1(b)) and in_range1(c)) ->
  ((((prop_transitive(a, b, c) = true) and (property(a, b) = true)) and
  (property(b, c) = true)) -> (property(a, c) = true))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type t3b

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t3b, t3b -> bool

logic dummy1 : t3b

type t3b__ref = { t3b__content : t3b
}

function t3b__ref___projection(a: t3b__ref) : t3b = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "transitive.ads", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall x:int. forall x_last:int. forall i:int. forall temp___158:int.
  forall temp___157:int. forall temp___156:int. forall temp___154:int.
  forall temp___155:int. forall x1:int. forall x_last1:int.
  forall result:int. forall i1:int. forall x2:int. forall x_last2:int.
  forall i2:int. forall result1:int. forall x_last3:int. forall x3:int.
  forall x4:int. forall x_last4:int. forall i3:int. forall x5:int.
  forall x_last5:int. forall i4:int. forall x6:int. forall x_last6:int.
  forall i5:int. forall x7:int. forall x_last7:int. forall i6:int.
  forall x8:int. forall x_last8:int. forall i7:int. forall x9:int.
  forall x_last9:int. forall i8:int. ((in_range1(x) and
  ((((0 <= 2147483647) -> in_range1(x_last)) and ((property(x, x) = true) and
  ((({ int__content = result } = { int__content = i }) and (i1 = 1)) and
  ((((1 <= i1) and (i1 <= 10)) and ((((temp___158 = x) and
  ((temp___157 = x) and ((temp___156 = i1) and ((temp___154 = x) and
  ((temp___155 = x_last) and ((property(temp___158, x2) = true) and
  ((((((0 <= 2147483647) -> in_range1(x_last2)) and ((1 <= 10) ->
  in_range2(i2))) and in_range1(x2)) and ((1 <= i2) and (i2 <= 10))) and
  (((x_last2 = result1) and (x_last3 = x2)) and (((property(x2,
  x3) = true) and in_range1(x3)) and ((prop_transitive(temp___154, x_last3,
  x3) = true) and (i2 = 10))))))))))) and (((i2 = i3) and
  ((x_last3 = x_last4) and (x3 = x4))) and ((i4 = i2) and
  ((x_last5 = x_last3) and (x5 = x3))))) and (((i5 = i3) and (({
  int__content = x_last6 } = { int__content = x_last4 }) and ({
  int__content = x6 } = { int__content = x4 }))) and ((i6 = i4) and
  ((x_last7 = x_last5) and (x7 = x5)))))) or ((not ((1 <= i1) and
  (i1 <= 10))) and (((i1 = i5) and ((x_last = x_last6) and (x = x6))) and
  ((i6 = i1) and ((x_last7 = x_last1) and (x7 = x1))))))))) and
  (((i7 = i5) and ((x_last8 = x_last6) and (x8 = x6))) and ((i8 = i6) and
  ((x_last9 = x_last7) and (x9 = x7)))))) -> (property(x, x8) = true)))
