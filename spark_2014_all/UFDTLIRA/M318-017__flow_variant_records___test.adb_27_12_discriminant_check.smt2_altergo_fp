(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type dt

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : dt, dt -> bool

logic dummy1 : dt

type dt__ref = { dt__content : dt
}

function dt__ref___projection(a: dt__ref) : dt = (a).dt__content

logic to_rep1 : dt -> int

logic of_rep1 : int -> dt

axiom inversion_axiom1 :
  (forall x:dt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:dt [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__test__wibble__d : dt
}

function us_split_discrs___projection(a: us_split_discrs) : dt =
  (a).rec__test__wibble__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test__wibble__flag : bool; rec__test__wibble__x
: integer; rec__test__wibble__y : bool; rec__test__wibble__z : dt
}

function us_split_fields_Flag__projection(a: us_split_fields) : bool =
  (a).rec__test__wibble__flag

function us_split_fields_X__projection(a: us_split_fields) : integer =
  (a).rec__test__wibble__x

function us_split_fields_Y__projection(a: us_split_fields) : bool =
  (a).rec__test__wibble__y

function us_split_fields_Z__projection(a: us_split_fields) : dt =
  (a).rec__test__wibble__z

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate test__wibble__x__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__test__wibble__d) = 0)

predicate test__wibble__y__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__test__wibble__d) = 1)

predicate test__wibble__z__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__test__wibble__d) = 2)

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__test__wibble__d) = to_rep1(((b).us_split_discrs1).rec__test__wibble__d)) and
  ((((((a).us_split_fields1).rec__test__wibble__flag = ((b).us_split_fields1).rec__test__wibble__flag) and
  (test__wibble__x__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__test__wibble__x) = to_rep(((b).us_split_fields1).rec__test__wibble__x)))) and
  (test__wibble__y__pred(a) ->
  (((a).us_split_fields1).rec__test__wibble__y = ((b).us_split_fields1).rec__test__wibble__y))) and
  (test__wibble__z__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__test__wibble__z) = to_rep1(((b).us_split_fields1).rec__test__wibble__z))))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__test__wibble__d) = to_rep1(((b).us_split_discrs1).rec__test__wibble__d)) and
  ((((((a).us_split_fields1).rec__test__wibble__flag = ((b).us_split_fields1).rec__test__wibble__flag) and
  (test__wibble__x__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__test__wibble__x) = to_rep(((b).us_split_fields1).rec__test__wibble__x)))) and
  (test__wibble__y__pred(a) ->
  (((a).us_split_fields1).rec__test__wibble__y = ((b).us_split_fields1).rec__test__wibble__y))) and
  (test__wibble__z__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__test__wibble__z) = to_rep1(((b).us_split_fields1).rec__test__wibble__z)))))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:dt. forall a1:bool. forall a2:integer. forall a3:bool.
  forall a4:dt. (0 <= object__size({ us_split_discrs1 = {
  rec__test__wibble__d = a }; us_split_fields1 = { rec__test__wibble__flag =
  a1; rec__test__wibble__x = a2; rec__test__wibble__y = a3;
  rec__test__wibble__z = a4 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:dt. forall a1:bool. forall a2:integer. forall a3:bool.
  forall a4:dt. (0 <= object__alignment({ us_split_discrs1 = {
  rec__test__wibble__d = a }; us_split_fields1 = { rec__test__wibble__flag =
  a1; rec__test__wibble__x = a2; rec__test__wibble__y = a3;
  rec__test__wibble__z = a4 } })))

logic test__wibble__d__first__bit : int

logic test__wibble__d__last__bit : int

logic test__wibble__d__position : int

axiom test__wibble__d__first__bit_axiom : (0 <= test__wibble__d__first__bit)

axiom test__wibble__d__last__bit_axiom :
  (test__wibble__d__first__bit <  test__wibble__d__last__bit)

axiom test__wibble__d__position_axiom : (0 <= test__wibble__d__position)

logic test__wibble__flag__first__bit : int

logic test__wibble__flag__last__bit : int

logic test__wibble__flag__position : int

axiom test__wibble__flag__first__bit_axiom :
  (0 <= test__wibble__flag__first__bit)

axiom test__wibble__flag__last__bit_axiom :
  (test__wibble__flag__first__bit <  test__wibble__flag__last__bit)

axiom test__wibble__flag__position_axiom :
  (0 <= test__wibble__flag__position)

logic test__wibble__x__first__bit : int

logic test__wibble__x__last__bit : int

logic test__wibble__x__position : int

axiom test__wibble__x__first__bit_axiom : (0 <= test__wibble__x__first__bit)

axiom test__wibble__x__last__bit_axiom :
  (test__wibble__x__first__bit <  test__wibble__x__last__bit)

axiom test__wibble__x__position_axiom : (0 <= test__wibble__x__position)

logic test__wibble__y__first__bit : int

logic test__wibble__y__last__bit : int

logic test__wibble__y__position : int

axiom test__wibble__y__first__bit_axiom : (0 <= test__wibble__y__first__bit)

axiom test__wibble__y__last__bit_axiom :
  (test__wibble__y__first__bit <  test__wibble__y__last__bit)

axiom test__wibble__y__position_axiom : (0 <= test__wibble__y__position)

logic test__wibble__z__first__bit : int

logic test__wibble__z__last__bit : int

logic test__wibble__z__position : int

axiom test__wibble__z__first__bit_axiom : (0 <= test__wibble__z__first__bit)

axiom test__wibble__z__last__bit_axiom :
  (test__wibble__z__first__bit <  test__wibble__z__last__bit)

axiom test__wibble__z__position_axiom : (0 <= test__wibble__z__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : dt

logic dummy3 : bool

logic dummy4 : integer

logic dummy5 : bool

logic dummy6 : dt

type wibble__ref = { wibble__content : us_rep
}

function wibble__ref___projection(a: wibble__ref) : us_rep =
  (a).wibble__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic r__split_discrs : dt

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r6b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range3(rec__test__wibble__d1: int, a: us_rep) =
  (rec__test__wibble__d1 = to_rep1(((a).us_split_discrs1).rec__test__wibble__d))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:dt. forall a1:bool. forall a2:integer. forall a3:bool.
  forall a4:dt. (0 <= object__size1({ us_split_discrs1 = {
  rec__test__wibble__d = a }; us_split_fields1 = { rec__test__wibble__flag =
  a1; rec__test__wibble__x = a2; rec__test__wibble__y = a3;
  rec__test__wibble__z = a4 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:dt. forall a1:bool. forall a2:integer. forall a3:bool.
  forall a4:dt. (0 <= object__alignment1({ us_split_discrs1 = {
  rec__test__wibble__d = a }; us_split_fields1 = { rec__test__wibble__flag =
  a1; rec__test__wibble__x = a2; rec__test__wibble__y = a3;
  rec__test__wibble__z = a4 } })))

logic test__wibble__d__first__bit1 : int

logic test__wibble__d__last__bit1 : int

logic test__wibble__d__position1 : int

axiom test__wibble__d__first__bit_axiom1 :
  (0 <= test__wibble__d__first__bit1)

axiom test__wibble__d__last__bit_axiom1 :
  (test__wibble__d__first__bit1 <  test__wibble__d__last__bit1)

axiom test__wibble__d__position_axiom1 : (0 <= test__wibble__d__position1)

logic test__wibble__y__first__bit1 : int

logic test__wibble__y__last__bit1 : int

logic test__wibble__y__position1 : int

axiom test__wibble__y__first__bit_axiom1 :
  (0 <= test__wibble__y__first__bit1)

axiom test__wibble__y__last__bit_axiom1 :
  (test__wibble__y__first__bit1 <  test__wibble__y__last__bit1)

axiom test__wibble__y__position_axiom1 : (0 <= test__wibble__y__position1)

logic test__wibble__z__first__bit1 : int

logic test__wibble__z__last__bit1 : int

logic test__wibble__z__position1 : int

axiom test__wibble__z__first__bit_axiom1 :
  (0 <= test__wibble__z__first__bit1)

axiom test__wibble__z__last__bit_axiom1 :
  (test__wibble__z__first__bit1 <  test__wibble__z__last__bit1)

axiom test__wibble__z__position_axiom1 : (0 <= test__wibble__z__position1)

logic test__wibble__flag__first__bit1 : int

logic test__wibble__flag__last__bit1 : int

logic test__wibble__flag__position1 : int

axiom test__wibble__flag__first__bit_axiom1 :
  (0 <= test__wibble__flag__first__bit1)

axiom test__wibble__flag__last__bit_axiom1 :
  (test__wibble__flag__first__bit1 <  test__wibble__flag__last__bit1)

axiom test__wibble__flag__position_axiom1 :
  (0 <= test__wibble__flag__position1)

logic test__wibble__x__first__bit1 : int

logic test__wibble__x__last__bit1 : int

logic test__wibble__x__position1 : int

axiom test__wibble__x__first__bit_axiom1 :
  (0 <= test__wibble__x__first__bit1)

axiom test__wibble__x__last__bit_axiom1 :
  (test__wibble__x__first__bit1 <  test__wibble__x__last__bit1)

axiom test__wibble__x__position_axiom1 : (0 <= test__wibble__x__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy7 : dt

logic dummy8 : bool

logic dummy9 : integer

logic dummy10 : bool

logic dummy11 : dt

type t7b__ref = { t7b__content : us_rep
}

function t7b__ref___projection(a: t7b__ref) : us_rep = (a).t7b__content

logic r9b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate in_range4(rec__test__wibble__d1: int, a: us_rep) =
  (rec__test__wibble__d1 = to_rep1(((a).us_split_discrs1).rec__test__wibble__d))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:dt. forall a1:bool. forall a2:integer. forall a3:bool.
  forall a4:dt. (0 <= object__size2({ us_split_discrs1 = {
  rec__test__wibble__d = a }; us_split_fields1 = { rec__test__wibble__flag =
  a1; rec__test__wibble__x = a2; rec__test__wibble__y = a3;
  rec__test__wibble__z = a4 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:dt. forall a1:bool. forall a2:integer. forall a3:bool.
  forall a4:dt. (0 <= object__alignment2({ us_split_discrs1 = {
  rec__test__wibble__d = a }; us_split_fields1 = { rec__test__wibble__flag =
  a1; rec__test__wibble__x = a2; rec__test__wibble__y = a3;
  rec__test__wibble__z = a4 } })))

logic test__wibble__d__first__bit2 : int

logic test__wibble__d__last__bit2 : int

logic test__wibble__d__position2 : int

axiom test__wibble__d__first__bit_axiom2 :
  (0 <= test__wibble__d__first__bit2)

axiom test__wibble__d__last__bit_axiom2 :
  (test__wibble__d__first__bit2 <  test__wibble__d__last__bit2)

axiom test__wibble__d__position_axiom2 : (0 <= test__wibble__d__position2)

logic test__wibble__x__first__bit2 : int

logic test__wibble__x__last__bit2 : int

logic test__wibble__x__position2 : int

axiom test__wibble__x__first__bit_axiom2 :
  (0 <= test__wibble__x__first__bit2)

axiom test__wibble__x__last__bit_axiom2 :
  (test__wibble__x__first__bit2 <  test__wibble__x__last__bit2)

axiom test__wibble__x__position_axiom2 : (0 <= test__wibble__x__position2)

logic test__wibble__y__first__bit2 : int

logic test__wibble__y__last__bit2 : int

logic test__wibble__y__position2 : int

axiom test__wibble__y__first__bit_axiom2 :
  (0 <= test__wibble__y__first__bit2)

axiom test__wibble__y__last__bit_axiom2 :
  (test__wibble__y__first__bit2 <  test__wibble__y__last__bit2)

axiom test__wibble__y__position_axiom2 : (0 <= test__wibble__y__position2)

logic test__wibble__flag__first__bit2 : int

logic test__wibble__flag__last__bit2 : int

logic test__wibble__flag__position2 : int

axiom test__wibble__flag__first__bit_axiom2 :
  (0 <= test__wibble__flag__first__bit2)

axiom test__wibble__flag__last__bit_axiom2 :
  (test__wibble__flag__first__bit2 <  test__wibble__flag__last__bit2)

axiom test__wibble__flag__position_axiom2 :
  (0 <= test__wibble__flag__position2)

logic test__wibble__z__first__bit2 : int

logic test__wibble__z__last__bit2 : int

logic test__wibble__z__position2 : int

axiom test__wibble__z__first__bit_axiom2 :
  (0 <= test__wibble__z__first__bit2)

axiom test__wibble__z__last__bit_axiom2 :
  (test__wibble__z__first__bit2 <  test__wibble__z__last__bit2)

axiom test__wibble__z__position_axiom2 : (0 <= test__wibble__z__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy12 : dt

logic dummy13 : bool

logic dummy14 : integer

logic dummy15 : bool

logic dummy16 : dt

type t10b__ref = { t10b__content : us_rep
}

function t10b__ref___projection(a: t10b__ref) : us_rep = (a).t10b__content

 (* File "test.adb", line 61, characters 0-0 *)
goal WP_parameter_def :
  (forall o:dt. forall o1:dt. forall o2:bool. forall o3:integer.
  forall o4:bool. forall o5:dt. forall o6:dt. forall temp___272:dt.
  forall temp___2721:bool. forall temp___2722:integer.
  forall temp___2723:bool. forall temp___2724:dt. (in_range1(x) ->
  ((not (0 <  x)) -> (((to_rep1(r__split_discrs) = r9b) and
  in_range2(r9b)) -> ((((to_rep1(o1) = 1) and ((of_int(0) = o2) and
  ((dummy = o3) and ((true = o4) and (o1 = o5))))) and (((to_rep1(o) = 2) and
  (o = o6)) and ((temp___272 = o6) and ((temp___2721 = o2) and
  ((temp___2722 = o3) and ((temp___2723 = o4) and (temp___2724 = o5))))))) ->
  (temp___272 = r__split_discrs))))))
