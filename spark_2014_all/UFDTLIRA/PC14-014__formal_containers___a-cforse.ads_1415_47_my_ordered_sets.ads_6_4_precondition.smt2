(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (count_type count_type) Bool)
(declare-const dummy count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__my_ordered_sets__m__set__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__my_ordered_sets__m__set__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__my_ordered_sets__m__set us_main_type)))))
(define-fun us_split_fields_Set__projection ((a us_split_fields)) us_main_type (rec__my_ordered_sets__m__set a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__my_ordered_sets__m__set__capacity (us_split_discrs1 a))) (to_rep (rec__my_ordered_sets__m__set__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__my_ordered_sets__m__set (us_split_fields1 a)) (rec__my_ordered_sets__m__set (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const my_ordered_sets__m__set__capacity__first__bit Int)
(declare-const my_ordered_sets__m__set__capacity__last__bit Int)
(declare-const my_ordered_sets__m__set__capacity__position Int)
(assert (<= 0 my_ordered_sets__m__set__capacity__first__bit))
(assert (< my_ordered_sets__m__set__capacity__first__bit my_ordered_sets__m__set__capacity__last__bit))
(assert (<= 0 my_ordered_sets__m__set__capacity__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep)))))
(define-fun set__ref___projection ((a set__ref)) us_rep (set__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range1 temp___expr_166)))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)))))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__my_ordered_sets__m__set__capacity (us_split_discrs1 container)))) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(declare-fun first_element (us_rep) Int)
(declare-fun first_element__function_guard (Int us_rep) Bool)
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-fun get (us_rep1 Int) Int)
(declare-fun get__function_guard (Int us_rep1 Int) Bool)
(define-fun e_smaller_than_range ((container us_rep1) (fst Int) (lst Int) (item Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< item (get container i)))) true false))
(declare-fun e_smaller_than_range__function_guard (Bool us_rep1 Int Int Int) Bool)
(declare-fun elements (us_rep) us_rep1)
(declare-fun elements__function_guard (us_rep1 us_rep) Bool)
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq3 (element_type element_type) Bool)
(declare-const dummy3 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_316 Int) (temp___is_init_312 Bool) (temp___skip_constant_313 Bool) (temp___do_toplevel_314 Bool) (temp___do_typ_inv_315 Bool)) Bool (=> (or (= temp___is_init_312 true) (<= 0 2147483647)) (in_range2 temp___expr_316)))
(assert (forall ((container us_rep)) (! (=> (not (= (is_empty container) true)) (let ((result (first_element container))) (and (and (= result (get (elements container) 1)) (= (e_smaller_than_range (elements container) 2 (length container) result) true)) (dynamic_invariant1 result true false true true)))) :pattern ((first_element container)))))
(declare-const container us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const item Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun equivalent_elements ((left Int) (right Int)) Bool (and (not (< left right)) (not (< right left))))
(declare-fun equivalent_elements__function_guard (Bool Int Int) Bool)
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun e_bigger_than_range ((container1 us_rep1) (fst Int) (lst Int) (item1 Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< (get container1 i) item1))) true false))
(declare-fun e_bigger_than_range__function_guard (Bool us_rep1 Int Int Int) Bool)
(define-fun e_is_find ((container1 us_rep1) (item1 Int) (position Int)) Bool (and (ite (< 0 position) (e_bigger_than_range container1 1 (- position 1) item1) (distinct 1 0)) (ite (< position (length1 container1)) (e_smaller_than_range container1 (+ position 1) (length1 container1) item1) (distinct 1 0))))
(declare-fun e_is_find__function_guard (Bool us_rep1 Int Int) Bool)
(declare-fun find (us_rep1 Int) Int)
(declare-fun find__function_guard (Int us_rep1 Int) Bool)
(define-fun last ((container1 us_rep1)) Int (+ 0 (length1 container1)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(define-fun oeq1 ((left us_rep1) (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq2 a b) (oeq1 a b)) :pattern ((user_eq2 a b)))))
(define-fun default_initial_assumption ((temp___expr_390 us_rep1) (temp___skip_top_level_391 Bool)) Bool (=> (not (= temp___skip_top_level_391 true)) (= (length1 temp___expr_390) 0)))
(assert (forall ((container1 us_rep1)) (forall ((item1 Int)) (! (=> (dynamic_invariant1 item1 true true true true) (let ((result (find container1 item1))) (and (=> (< 0 result) (and (<= result (length1 container1)) (= (equivalent_elements item1 (get container1 result)) true))) (dynamic_invariant result true false true true)))) :pattern ((find container1 item1))))))
(define-fun e_elements_included ((left us_rep1) (right us_rep1)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (length1 left))) (and (< 0 (find right (get left i))) (= (get right (find right (get left i))) (get left i))))) true false))
(declare-fun e_elements_included__function_guard (Bool us_rep1 us_rep1) Bool)
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq4 (us_rep2 us_rep2) Bool)
(declare-const dummy4 us_rep2)
(declare-datatypes () ((set__ref1 (mk_set__ref1 (set__content1 us_rep2)))))
(define-fun set__ref___2__projection ((a set__ref1)) us_rep2 (set__content1 a))
(declare-fun length2 (us_rep2) Int)
(declare-fun length__function_guard2 (Int us_rep2) Bool)
(declare-fun model__ (us_rep) us_rep2)
(declare-fun model____function_guard (us_rep2 us_rep) Bool)
(declare-fun is_empty1 (us_rep2) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep2) Bool)
(define-fun default_initial_assumption1 ((temp___expr_354 us_rep2) (temp___skip_top_level_355 Bool)) Bool (=> (not (= temp___skip_top_level_355 true)) (= (is_empty1 temp___expr_354) true)))
(assert (forall ((container1 us_rep)) (! (= (length2 (model__ container1)) (length container1)) :pattern ((model__ container1)))))
(declare-fun contains (us_rep2 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)
(define-fun iter_has_element ((container1 us_rep1) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container1)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep1 Int) Bool)
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= 0 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq5 (element_type1 element_type1) Bool)
(declare-const dummy5 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (extended_index extended_index) Bool)
(declare-const dummy6 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(assert (forall ((container1 us_rep)) (! (let ((result (elements container1))) (and (and (and (= (length1 result) (length container1)) (forall ((temp___428 Int)) (=> (and (in_range4 temp___428) (= (iter_has_element result temp___428) true)) (= (contains (model__ container1) (get result temp___428)) true)))) (forall ((item1 Int)) (=> (and (in_range3 item1) (= (contains (model__ container1) item1) true)) (and (< 0 (find result item1)) (= (equivalent_elements (get result (find result item1)) item1) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container1))) (and (= (find result (get result i)) i) (= (e_is_find result (get result i) i) true)))))) :pattern ((elements container1)))))
(assert (forall ((left us_rep) (right us_rep)) (! (ite (= (oeq left right) true) (= (oeq1 (elements left) (elements right)) true) (or (not (= (e_elements_included (elements left) (elements right)) true)) (not (= (e_elements_included (elements right) (elements left)) true)))) :pattern ((oeq left right)))))
(assert (forall ((container1 us_rep)) (! (= (= (is_empty container1) true) (= (length container1) 0)) :pattern ((is_empty container1)))))
(define-fun dynamic_invariant2 ((temp___expr_346 Int) (temp___is_init_342 Bool) (temp___skip_constant_343 Bool) (temp___do_toplevel_344 Bool) (temp___do_typ_inv_345 Bool)) Bool (=> (or (= temp___is_init_342 true) (<= 0 2147483647)) (in_range3 temp___expr_346)))
(assert (forall ((container1 us_rep2)) (forall ((item1 Int)) (! (=> (dynamic_invariant2 item1 true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range3 e) (= (contains container1 e) true)) (= (equivalent_elements e item1) true))) (= (contains container1 item1) true)))) :pattern ((contains container1 item1))))))
(assert (forall ((container1 us_rep2)) (! (dynamic_invariant (length2 container1) true false true true) :pattern ((length2 container1)))))
(assert (forall ((container1 us_rep2)) (! (let ((result (is_empty1 container1))) (and (= (= result true) (forall ((item1 Int)) (not (and (in_range3 item1) (= (contains container1 item1) true))))) (= (= result true) (= (length2 container1) 0)))) :pattern ((is_empty1 container1)))))
(define-fun dynamic_invariant3 ((temp___expr_382 Int) (temp___is_init_378 Bool) (temp___skip_constant_379 Bool) (temp___do_toplevel_380 Bool) (temp___do_typ_inv_381 Bool)) Bool (=> (or (= temp___is_init_378 true) (<= 0 2147483647)) (in_range4 temp___expr_382)))
(assert (forall ((container1 us_rep1)) (! (let ((result (length1 container1))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true true))) :pattern ((length1 container1)))))
(declare-sort element_type2 0)
(declare-fun element_typeqtint2 (element_type2) Int)
(assert (forall ((i element_type2)) (and (<= 0 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (element_type2 element_type2) Bool)
(declare-const dummy7 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant4 ((temp___expr_375 Int) (temp___is_init_371 Bool) (temp___skip_constant_372 Bool) (temp___do_toplevel_373 Bool) (temp___do_typ_inv_374 Bool)) Bool (=> (or (= temp___is_init_371 true) (<= 0 2147483647)) (in_range5 temp___expr_375)))
(assert (forall ((container1 us_rep1)) (forall ((position Int)) (! (=> (and (dynamic_invariant3 position true true true true) (and (<= 1 position) (<= position (last container1)))) (dynamic_invariant4 (get container1 position) true false true true)) :pattern ((get container1 position))))))
(declare-const o Int)
(declare-const result Bool)
(assert (in_range2 item))
(assert (and (= o (length container)) (and (in_range1 o) (<= o (to_rep (rec__my_ordered_sets__m__set__capacity (us_split_discrs1 container)))))))
(assert (= result (ite (= o 0) true false)))
(assert (not (= result true)))
(assert (not (not (= (is_empty container) true))))
(check-sat)
(exit)
