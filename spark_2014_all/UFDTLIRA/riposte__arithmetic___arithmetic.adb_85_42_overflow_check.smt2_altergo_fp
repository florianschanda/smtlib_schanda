(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type t21b__ref = { t21b__content : integer
}

function t21b__ref___projection(a1: t21b__ref) : integer = (a1).t21b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type t22b__ref = { t22b__content : integer
}

function t22b__ref___projection(a1: t22b__ref) : integer = (a1).t22b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r : int

logic i : int

logic i1 : int

logic arithmetic__plus__result : int

logic o : int

logic temp___167 : int

logic temp___166 : int

logic temp___168 : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic temp___162 : int

logic temp___161 : int

logic temp___163 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic i2 : int

logic i3 : int

logic result : int

logic r1 : int

logic result1 : int

logic i4 : int

logic result2 : int

logic r2 : int

logic r3 : int

logic i5 : int

logic result3 : int

logic i6 : int

logic result4 : int

logic r4 : int

logic r5 : int

logic i7 : int

logic r6 : int

logic i8 : int

logic r7 : int

logic i9 : int

logic r8 : int

logic i10 : int

logic r9 : int

logic i11 : int

logic r10 : int

logic i12 : int

logic result5 : int

logic i13 : int

logic result6 : int

logic r11 : int

logic r12 : int

logic i14 : int

logic result7 : int

logic i15 : int

logic result8 : int

logic r13 : int

logic r14 : int

logic i16 : int

logic r15 : int

logic i17 : int

logic r16 : int

logic i18 : int

logic r17 : int

logic i19 : int

logic r18 : int

logic i20 : int

logic r19 : int

logic i21 : int

logic r20 : int

logic i22 : int

logic i23 : int

logic r21 : int

logic i24 : int

logic i25 : int

logic result9 : int

logic arithmetic__plus__result1 : int

logic arithmetic__plus__result2 : int

logic arithmetic__plus__result3 : int

logic r22 : int

logic i26 : int

logic i27 : int

logic arithmetic__plus__result4 : int

logic r23 : int

logic i28 : int

logic i29 : int

logic arithmetic__plus__result5 : int

axiom H : in_range1(a)

axiom H1 : in_range1(b)

axiom H2 : in_range1((a + b))

axiom H3 : (((- 2147483648) <= 2147483647) -> in_range1(r))

axiom H4 : (result = r)

axiom H5 : (r1 = a)

axiom H6 : (0 <= b)

axiom H7 : (result1 = i)

axiom H8 : (i4 = 1)

axiom H9 : (1 <= i4)

axiom H10 : (i4 <= b)

axiom H11 : ((o1 = r1) and (not (r1 = 2147483647)))

axiom H12 : (o2 = (o1 + 1))

axiom H13 : (r1 = result2)

axiom H14 : (r2 = o2)

axiom H15 : (r3 = (a + i5))

axiom H16 : (((((- 2147483648) <= 2147483647) -> in_range1(r3)) and
  ((1 <= b) -> dynamic_property(1, b, i5))) and ((1 <= i5) and (i5 <= b)))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1((a + i5))
