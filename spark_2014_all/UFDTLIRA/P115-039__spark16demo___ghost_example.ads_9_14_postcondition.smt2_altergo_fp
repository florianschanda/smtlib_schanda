(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type state_t

predicate in_range1(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : state_t, state_t -> bool

logic dummy : state_t

type state_t__ref = { state_t__content : state_t
}

function state_t__ref___projection(a: state_t__ref) : state_t =
  (a).state_t__content

logic attr__ATTRIBUTE_ADDRESS : int

logic cur_state : int -> int

logic cur_state__function_guard : int, int -> prop

axiom cur_state__post_axiom :
  (forall ghost_example__state:int [cur_state(ghost_example__state)].
  (in_range1(ghost_example__state) ->
  in_range1(cur_state(ghost_example__state))))

axiom cur_state__def_axiom :
  (forall ghost_example__state:int [cur_state(ghost_example__state)].
  (in_range1(ghost_example__state) ->
  (cur_state(ghost_example__state) = ghost_example__state)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic done__ : bool

logic state : int

logic successful : bool

logic state1 : int

logic result : bool

logic successful1 : bool

logic result1 : bool

logic done__1 : bool

logic result2 : int

logic state2 : int

logic result3 : bool

logic done__2 : bool

logic done__3 : bool

logic state3 : int

logic successful2 : bool

logic done__4 : bool

logic state4 : int

logic successful3 : bool

axiom H : in_range1(state)

axiom H1 : (cur_state(state) = 1)

axiom H2 : (result = successful)

axiom H3 : (successful1 = of_int(0))

axiom H4 : ((successful1 = true) -> (result1 = done__))

axiom H5 : ((successful1 = true) -> (done__1 = of_int(1)))

axiom H6 : ((successful1 = true) -> (result2 = state))

axiom H7 : ((successful1 = true) -> (state2 = 2))

axiom H8 : ((not (successful1 = true)) -> (result3 = done__))

axiom H9 : ((not (successful1 = true)) -> (done__2 = of_int(0)))

axiom H10 : ((not (successful1 = true)) -> (state2 = state))

axiom H11 : ((not (successful1 = true)) -> (done__1 = done__2))

axiom H12 : ((not (successful1 = true)) -> (state2 = state1))

axiom H13 : ((not (successful1 = true)) -> (done__1 = done__2))

axiom H14 : (successful2 = successful1)

axiom H15 : (state2 = state3)

axiom H16 : (done__1 = done__3)

axiom H17 : (successful3 = successful1)

axiom H18 : (state4 = state2)

axiom H19 : (done__4 = done__1)

 (* File "ghost_example.ads", line 3, characters 0-0 *)
goal WP_parameter_def : (((done__3 = true) -> (cur_state(state3) = 2)) and
  ((not (done__3 = true)) -> (cur_state(state3) = 1)))
