(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort type_0 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (type_0 type_0) Bool)
(declare-const dummy type_0)
(declare-datatypes () ((type_0__ref (mk_type_0__ref (type_0__content type_0)))))
(define-fun type_0__ref___projection ((a type_0__ref)) type_0 (type_0__content a))
(declare-fun to_rep (type_0) Int)
(declare-fun of_rep (Int) type_0)
(assert (forall ((x type_0)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x type_0)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__p__type_1__field_0 type_0) (rec__p__type_1__field_1 type_0) (rec__p__type_1__field_2 type_0) (rec__p__type_1__field_3 type_0) (rec__p__type_1__field_4 type_0) (rec__p__type_1__field_5 type_0) (rec__p__type_1__field_6 type_0) (rec__p__type_1__field_7 type_0)))))
(define-fun us_split_fields_Field_0__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_0 a))
(define-fun us_split_fields_Field_1__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_1 a))
(define-fun us_split_fields_Field_2__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_2 a))
(define-fun us_split_fields_Field_3__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_3 a))
(define-fun us_split_fields_Field_4__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_4 a))
(define-fun us_split_fields_Field_5__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_5 a))
(define-fun us_split_fields_Field_6__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_6 a))
(define-fun us_split_fields_Field_7__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_7 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_0 (us_split_fields1 b)))) (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_1 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_2 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_3 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_4 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_5 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_6 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_7 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const p__type_1__field_0__first__bit Int)
(declare-const p__type_1__field_0__last__bit Int)
(declare-const p__type_1__field_0__position Int)
(assert (<= 0 p__type_1__field_0__first__bit))
(assert (< p__type_1__field_0__first__bit p__type_1__field_0__last__bit))
(assert (<= 0 p__type_1__field_0__position))
(declare-const p__type_1__field_1__first__bit Int)
(declare-const p__type_1__field_1__last__bit Int)
(declare-const p__type_1__field_1__position Int)
(assert (<= 0 p__type_1__field_1__first__bit))
(assert (< p__type_1__field_1__first__bit p__type_1__field_1__last__bit))
(assert (<= 0 p__type_1__field_1__position))
(declare-const p__type_1__field_2__first__bit Int)
(declare-const p__type_1__field_2__last__bit Int)
(declare-const p__type_1__field_2__position Int)
(assert (<= 0 p__type_1__field_2__first__bit))
(assert (< p__type_1__field_2__first__bit p__type_1__field_2__last__bit))
(assert (<= 0 p__type_1__field_2__position))
(declare-const p__type_1__field_3__first__bit Int)
(declare-const p__type_1__field_3__last__bit Int)
(declare-const p__type_1__field_3__position Int)
(assert (<= 0 p__type_1__field_3__first__bit))
(assert (< p__type_1__field_3__first__bit p__type_1__field_3__last__bit))
(assert (<= 0 p__type_1__field_3__position))
(declare-const p__type_1__field_4__first__bit Int)
(declare-const p__type_1__field_4__last__bit Int)
(declare-const p__type_1__field_4__position Int)
(assert (<= 0 p__type_1__field_4__first__bit))
(assert (< p__type_1__field_4__first__bit p__type_1__field_4__last__bit))
(assert (<= 0 p__type_1__field_4__position))
(declare-const p__type_1__field_5__first__bit Int)
(declare-const p__type_1__field_5__last__bit Int)
(declare-const p__type_1__field_5__position Int)
(assert (<= 0 p__type_1__field_5__first__bit))
(assert (< p__type_1__field_5__first__bit p__type_1__field_5__last__bit))
(assert (<= 0 p__type_1__field_5__position))
(declare-const p__type_1__field_6__first__bit Int)
(declare-const p__type_1__field_6__last__bit Int)
(declare-const p__type_1__field_6__position Int)
(assert (<= 0 p__type_1__field_6__first__bit))
(assert (< p__type_1__field_6__first__bit p__type_1__field_6__last__bit))
(assert (<= 0 p__type_1__field_6__position))
(declare-const p__type_1__field_7__first__bit Int)
(declare-const p__type_1__field_7__last__bit Int)
(declare-const p__type_1__field_7__position Int)
(assert (<= 0 p__type_1__field_7__first__bit))
(assert (< p__type_1__field_7__first__bit p__type_1__field_7__last__bit))
(assert (<= 0 p__type_1__field_7__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((type_1__ref (mk_type_1__ref (type_1__content us_rep)))))
(define-fun type_1__ref___projection ((a type_1__ref)) us_rep (type_1__content a))
(declare-fun create_type_1 (tuple0) us_rep)
(declare-fun create_type_1__function_guard (us_rep tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (let ((result (create_type_1 us_void_param))) (and (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 result))) 0) (and (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 result))) 0) (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 result))) 0))))))))) :pattern ((create_type_1 us_void_param)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__p__type_2__field_0 us_rep) (rec__p__type_2__field_1 us_rep) (rec__p__type_2__field_2 us_rep) (rec__p__type_2__field_3 us_rep) (rec__p__type_2__field_4 us_rep)))))
(define-fun us_split_fields_Field_0__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_0 a))
(define-fun us_split_fields_Field_1__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_1 a))
(define-fun us_split_fields_Field_2__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_2 a))
(define-fun us_split_fields_Field_3__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_3 a))
(define-fun us_split_fields_Field_4__2__projection ((a us_split_fields2)) us_rep (rec__p__type_2__field_4 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (and (= (bool_eq (rec__p__type_2__field_0 (us_split_fields3 a)) (rec__p__type_2__field_0 (us_split_fields3 b))) true) (= (bool_eq (rec__p__type_2__field_1 (us_split_fields3 a)) (rec__p__type_2__field_1 (us_split_fields3 b))) true)) (= (bool_eq (rec__p__type_2__field_2 (us_split_fields3 a)) (rec__p__type_2__field_2 (us_split_fields3 b))) true)) (= (bool_eq (rec__p__type_2__field_3 (us_split_fields3 a)) (rec__p__type_2__field_3 (us_split_fields3 b))) true)) (= (bool_eq (rec__p__type_2__field_4 (us_split_fields3 a)) (rec__p__type_2__field_4 (us_split_fields3 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const p__type_2__field_0__first__bit Int)
(declare-const p__type_2__field_0__last__bit Int)
(declare-const p__type_2__field_0__position Int)
(assert (<= 0 p__type_2__field_0__first__bit))
(assert (< p__type_2__field_0__first__bit p__type_2__field_0__last__bit))
(assert (<= 0 p__type_2__field_0__position))
(declare-const p__type_2__field_1__first__bit Int)
(declare-const p__type_2__field_1__last__bit Int)
(declare-const p__type_2__field_1__position Int)
(assert (<= 0 p__type_2__field_1__first__bit))
(assert (< p__type_2__field_1__first__bit p__type_2__field_1__last__bit))
(assert (<= 0 p__type_2__field_1__position))
(declare-const p__type_2__field_2__first__bit Int)
(declare-const p__type_2__field_2__last__bit Int)
(declare-const p__type_2__field_2__position Int)
(assert (<= 0 p__type_2__field_2__first__bit))
(assert (< p__type_2__field_2__first__bit p__type_2__field_2__last__bit))
(assert (<= 0 p__type_2__field_2__position))
(declare-const p__type_2__field_3__first__bit Int)
(declare-const p__type_2__field_3__last__bit Int)
(declare-const p__type_2__field_3__position Int)
(assert (<= 0 p__type_2__field_3__first__bit))
(assert (< p__type_2__field_3__first__bit p__type_2__field_3__last__bit))
(assert (<= 0 p__type_2__field_3__position))
(declare-const p__type_2__field_4__first__bit Int)
(declare-const p__type_2__field_4__last__bit Int)
(declare-const p__type_2__field_4__position Int)
(assert (<= 0 p__type_2__field_4__first__bit))
(assert (< p__type_2__field_4__first__bit p__type_2__field_4__last__bit))
(assert (<= 0 p__type_2__field_4__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((type_2__ref (mk_type_2__ref (type_2__content us_rep1)))))
(define-fun type_2__ref___projection ((a type_2__ref)) us_rep1 (type_2__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__p__type_4__field_0 us_rep) (rec__p__type_4__field_1 us_rep) (rec__p__type_4__field_2 us_rep1) (rec__p__type_4__field_3 us_rep1)))))
(define-fun us_split_fields_Field_0__3__projection ((a us_split_fields4)) us_rep (rec__p__type_4__field_0 a))
(define-fun us_split_fields_Field_1__3__projection ((a us_split_fields4)) us_rep (rec__p__type_4__field_1 a))
(define-fun us_split_fields_Field_2__3__projection ((a us_split_fields4)) us_rep1 (rec__p__type_4__field_2 a))
(define-fun us_split_fields_Field_3__3__projection ((a us_split_fields4)) us_rep1 (rec__p__type_4__field_3 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (= (bool_eq (rec__p__type_4__field_0 (us_split_fields5 a)) (rec__p__type_4__field_0 (us_split_fields5 b))) true) (= (bool_eq (rec__p__type_4__field_1 (us_split_fields5 a)) (rec__p__type_4__field_1 (us_split_fields5 b))) true)) (= (bool_eq1 (rec__p__type_4__field_2 (us_split_fields5 a)) (rec__p__type_4__field_2 (us_split_fields5 b))) true)) (= (bool_eq1 (rec__p__type_4__field_3 (us_split_fields5 a)) (rec__p__type_4__field_3 (us_split_fields5 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const p__type_4__field_0__first__bit Int)
(declare-const p__type_4__field_0__last__bit Int)
(declare-const p__type_4__field_0__position Int)
(assert (<= 0 p__type_4__field_0__first__bit))
(assert (< p__type_4__field_0__first__bit p__type_4__field_0__last__bit))
(assert (<= 0 p__type_4__field_0__position))
(declare-const p__type_4__field_1__first__bit Int)
(declare-const p__type_4__field_1__last__bit Int)
(declare-const p__type_4__field_1__position Int)
(assert (<= 0 p__type_4__field_1__first__bit))
(assert (< p__type_4__field_1__first__bit p__type_4__field_1__last__bit))
(assert (<= 0 p__type_4__field_1__position))
(declare-const p__type_4__field_2__first__bit Int)
(declare-const p__type_4__field_2__last__bit Int)
(declare-const p__type_4__field_2__position Int)
(assert (<= 0 p__type_4__field_2__first__bit))
(assert (< p__type_4__field_2__first__bit p__type_4__field_2__last__bit))
(assert (<= 0 p__type_4__field_2__position))
(declare-const p__type_4__field_3__first__bit Int)
(declare-const p__type_4__field_3__last__bit Int)
(declare-const p__type_4__field_3__position Int)
(assert (<= 0 p__type_4__field_3__first__bit))
(assert (< p__type_4__field_3__first__bit p__type_4__field_3__last__bit))
(assert (<= 0 p__type_4__field_3__position))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((type_4__ref (mk_type_4__ref (type_4__content us_rep2)))))
(define-fun type_4__ref___projection ((a type_4__ref)) us_rep2 (type_4__content a))
(declare-fun create_type_4 (tuple0) us_rep2)
(declare-fun create_type_4__function_guard (us_rep2 tuple0) Bool)
(declare-fun create_type_2 (tuple0) us_rep1)
(declare-fun create_type_2__function_guard (us_rep1 tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (let ((result (create_type_4 us_void_param))) (and (= (bool_eq (rec__p__type_4__field_0 (us_split_fields5 result)) (create_type_1 Tuple0)) true) (and (= (bool_eq (rec__p__type_4__field_1 (us_split_fields5 result)) (create_type_1 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_4__field_2 (us_split_fields5 result)) (create_type_2 Tuple0)) true) (= (bool_eq1 (rec__p__type_4__field_3 (us_split_fields5 result)) (create_type_2 Tuple0)) true))))) :pattern ((create_type_4 us_void_param)))))
(declare-sort type_3 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq4 (type_3 type_3) Bool)
(declare-const dummy4 type_3)
(declare-datatypes () ((type_3__ref (mk_type_3__ref (type_3__content type_3)))))
(define-fun type_3__ref___projection ((a type_3__ref)) type_3 (type_3__content a))
(declare-fun to_rep1 (type_3) Int)
(declare-fun of_rep1 (Int) type_3)
(assert (forall ((x type_3)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x type_3)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__p__type_5__field_0 type_3) (rec__p__type_5__field_1 us_rep2) (rec__p__type_5__field_2 us_rep1) (rec__p__type_5__field_3 us_rep2) (rec__p__type_5__field_4 us_rep2)))))
(define-fun us_split_fields_Field_0__4__projection ((a us_split_fields6)) type_3 (rec__p__type_5__field_0 a))
(define-fun us_split_fields_Field_1__4__projection ((a us_split_fields6)) us_rep2 (rec__p__type_5__field_1 a))
(define-fun us_split_fields_Field_2__4__projection ((a us_split_fields6)) us_rep1 (rec__p__type_5__field_2 a))
(define-fun us_split_fields_Field_3__4__projection ((a us_split_fields6)) us_rep2 (rec__p__type_5__field_3 a))
(define-fun us_split_fields_Field_4__3__projection ((a us_split_fields6)) us_rep2 (rec__p__type_5__field_4 a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___4__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq3 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (and (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 a))) (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 b)))) (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 a)) (rec__p__type_5__field_1 (us_split_fields7 b))) true)) (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 a)) (rec__p__type_5__field_2 (us_split_fields7 b))) true)) (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 a)) (rec__p__type_5__field_3 (us_split_fields7 b))) true)) (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 a)) (rec__p__type_5__field_4 (us_split_fields7 b))) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const p__type_5__field_0__first__bit Int)
(declare-const p__type_5__field_0__last__bit Int)
(declare-const p__type_5__field_0__position Int)
(assert (<= 0 p__type_5__field_0__first__bit))
(assert (< p__type_5__field_0__first__bit p__type_5__field_0__last__bit))
(assert (<= 0 p__type_5__field_0__position))
(declare-const p__type_5__field_1__first__bit Int)
(declare-const p__type_5__field_1__last__bit Int)
(declare-const p__type_5__field_1__position Int)
(assert (<= 0 p__type_5__field_1__first__bit))
(assert (< p__type_5__field_1__first__bit p__type_5__field_1__last__bit))
(assert (<= 0 p__type_5__field_1__position))
(declare-const p__type_5__field_2__first__bit Int)
(declare-const p__type_5__field_2__last__bit Int)
(declare-const p__type_5__field_2__position Int)
(assert (<= 0 p__type_5__field_2__first__bit))
(assert (< p__type_5__field_2__first__bit p__type_5__field_2__last__bit))
(assert (<= 0 p__type_5__field_2__position))
(declare-const p__type_5__field_3__first__bit Int)
(declare-const p__type_5__field_3__last__bit Int)
(declare-const p__type_5__field_3__position Int)
(assert (<= 0 p__type_5__field_3__first__bit))
(assert (< p__type_5__field_3__first__bit p__type_5__field_3__last__bit))
(assert (<= 0 p__type_5__field_3__position))
(declare-const p__type_5__field_4__first__bit Int)
(declare-const p__type_5__field_4__last__bit Int)
(declare-const p__type_5__field_4__position Int)
(assert (<= 0 p__type_5__field_4__first__bit))
(assert (< p__type_5__field_4__first__bit p__type_5__field_4__last__bit))
(assert (<= 0 p__type_5__field_4__position))
(declare-fun user_eq5 (us_rep3 us_rep3) Bool)
(declare-const dummy5 us_rep3)
(declare-datatypes () ((type_5__ref (mk_type_5__ref (type_5__content us_rep3)))))
(define-fun type_5__ref___projection ((a type_5__ref)) us_rep3 (type_5__content a))
(declare-fun create_type_5 (tuple0) us_rep3)
(declare-fun create_type_5__function_guard (us_rep3 tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (let ((result (create_type_5 us_void_param))) (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 result))) 0) (and (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 result)) (create_type_4 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 result)) (create_type_2 Tuple0)) true) (and (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 result)) (create_type_4 Tuple0)) true) (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 result)) (create_type_4 Tuple0)) true)))))) :pattern ((create_type_5 us_void_param)))))
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__p__type_6__field_0 us_rep) (rec__p__type_6__field_1 us_rep3) (rec__p__type_6__field_2 us_rep1) (rec__p__type_6__field_3 us_rep3)))))
(define-fun us_split_fields_Field_0__5__projection ((a us_split_fields8)) us_rep (rec__p__type_6__field_0 a))
(define-fun us_split_fields_Field_1__5__projection ((a us_split_fields8)) us_rep3 (rec__p__type_6__field_1 a))
(define-fun us_split_fields_Field_2__5__projection ((a us_split_fields8)) us_rep1 (rec__p__type_6__field_2 a))
(define-fun us_split_fields_Field_3__5__projection ((a us_split_fields8)) us_rep3 (rec__p__type_6__field_3 a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___5__projection ((a us_rep4)) us_split_fields8 (us_split_fields9 a))
(define-fun bool_eq4 ((a us_rep4) (b us_rep4)) Bool (ite (and (and (and (= (bool_eq (rec__p__type_6__field_0 (us_split_fields9 a)) (rec__p__type_6__field_0 (us_split_fields9 b))) true) (= (bool_eq3 (rec__p__type_6__field_1 (us_split_fields9 a)) (rec__p__type_6__field_1 (us_split_fields9 b))) true)) (= (bool_eq1 (rec__p__type_6__field_2 (us_split_fields9 a)) (rec__p__type_6__field_2 (us_split_fields9 b))) true)) (= (bool_eq3 (rec__p__type_6__field_3 (us_split_fields9 a)) (rec__p__type_6__field_3 (us_split_fields9 b))) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-const p__type_6__field_0__first__bit Int)
(declare-const p__type_6__field_0__last__bit Int)
(declare-const p__type_6__field_0__position Int)
(assert (<= 0 p__type_6__field_0__first__bit))
(assert (< p__type_6__field_0__first__bit p__type_6__field_0__last__bit))
(assert (<= 0 p__type_6__field_0__position))
(declare-const p__type_6__field_1__first__bit Int)
(declare-const p__type_6__field_1__last__bit Int)
(declare-const p__type_6__field_1__position Int)
(assert (<= 0 p__type_6__field_1__first__bit))
(assert (< p__type_6__field_1__first__bit p__type_6__field_1__last__bit))
(assert (<= 0 p__type_6__field_1__position))
(declare-const p__type_6__field_2__first__bit Int)
(declare-const p__type_6__field_2__last__bit Int)
(declare-const p__type_6__field_2__position Int)
(assert (<= 0 p__type_6__field_2__first__bit))
(assert (< p__type_6__field_2__first__bit p__type_6__field_2__last__bit))
(assert (<= 0 p__type_6__field_2__position))
(declare-const p__type_6__field_3__first__bit Int)
(declare-const p__type_6__field_3__last__bit Int)
(declare-const p__type_6__field_3__position Int)
(assert (<= 0 p__type_6__field_3__first__bit))
(assert (< p__type_6__field_3__first__bit p__type_6__field_3__last__bit))
(assert (<= 0 p__type_6__field_3__position))
(declare-fun user_eq6 (us_rep4 us_rep4) Bool)
(declare-const dummy6 us_rep4)
(declare-datatypes () ((type_6__ref (mk_type_6__ref (type_6__content us_rep4)))))
(define-fun type_6__ref___projection ((a type_6__ref)) us_rep4 (type_6__content a))
(declare-fun create_type_6 (tuple0) us_rep4)
(declare-fun create_type_6__function_guard (us_rep4 tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (let ((result (create_type_6 us_void_param))) (and (= (bool_eq (rec__p__type_6__field_0 (us_split_fields9 result)) (create_type_1 Tuple0)) true) (and (= (bool_eq3 (rec__p__type_6__field_1 (us_split_fields9 result)) (create_type_5 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_6__field_2 (us_split_fields9 result)) (create_type_2 Tuple0)) true) (= (bool_eq3 (rec__p__type_6__field_3 (us_split_fields9 result)) (create_type_5 Tuple0)) true))))) :pattern ((create_type_6 us_void_param)))))
(declare-sort type_7 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq7 (type_7 type_7) Bool)
(declare-const dummy7 type_7)
(declare-datatypes () ((type_7__ref (mk_type_7__ref (type_7__content type_7)))))
(define-fun type_7__ref___projection ((a type_7__ref)) type_7 (type_7__content a))
(declare-fun to_rep2 (type_7) Int)
(declare-fun of_rep2 (Int) type_7)
(assert (forall ((x type_7)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x type_7)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields10 (mk___split_fields5 (rec__p__type_8__field_0 us_rep2) (rec__p__type_8__field_1 us_rep3) (rec__p__type_8__field_2 us_rep2) (rec__p__type_8__field_3 us_rep4) (rec__p__type_8__field_4 us_rep3) (rec__p__type_8__field_5 type_7) (rec__p__type_8__field_6 us_rep) (rec__p__type_8__field_7 us_rep3)))))
(define-fun us_split_fields_Field_0__6__projection ((a us_split_fields10)) us_rep2 (rec__p__type_8__field_0 a))
(define-fun us_split_fields_Field_1__6__projection ((a us_split_fields10)) us_rep3 (rec__p__type_8__field_1 a))
(define-fun us_split_fields_Field_2__6__projection ((a us_split_fields10)) us_rep2 (rec__p__type_8__field_2 a))
(define-fun us_split_fields_Field_3__6__projection ((a us_split_fields10)) us_rep4 (rec__p__type_8__field_3 a))
(define-fun us_split_fields_Field_4__4__projection ((a us_split_fields10)) us_rep3 (rec__p__type_8__field_4 a))
(define-fun us_split_fields_Field_5__2__projection ((a us_split_fields10)) type_7 (rec__p__type_8__field_5 a))
(define-fun us_split_fields_Field_6__2__projection ((a us_split_fields10)) us_rep (rec__p__type_8__field_6 a))
(define-fun us_split_fields_Field_7__2__projection ((a us_split_fields10)) us_rep3 (rec__p__type_8__field_7 a))
(declare-datatypes () ((us_split_fields__ref5 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref5)) us_split_fields10 (us_split_fields__content5 a))
(declare-datatypes () ((us_rep5 (mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___6__projection ((a us_rep5)) us_split_fields10 (us_split_fields11 a))
(define-fun bool_eq5 ((a us_rep5) (b us_rep5)) Bool (ite (and (and (and (and (and (and (and (= (bool_eq2 (rec__p__type_8__field_0 (us_split_fields11 a)) (rec__p__type_8__field_0 (us_split_fields11 b))) true) (= (bool_eq3 (rec__p__type_8__field_1 (us_split_fields11 a)) (rec__p__type_8__field_1 (us_split_fields11 b))) true)) (= (bool_eq2 (rec__p__type_8__field_2 (us_split_fields11 a)) (rec__p__type_8__field_2 (us_split_fields11 b))) true)) (= (bool_eq4 (rec__p__type_8__field_3 (us_split_fields11 a)) (rec__p__type_8__field_3 (us_split_fields11 b))) true)) (= (bool_eq3 (rec__p__type_8__field_4 (us_split_fields11 a)) (rec__p__type_8__field_4 (us_split_fields11 b))) true)) (= (to_rep2 (rec__p__type_8__field_5 (us_split_fields11 a))) (to_rep2 (rec__p__type_8__field_5 (us_split_fields11 b))))) (= (bool_eq (rec__p__type_8__field_6 (us_split_fields11 a)) (rec__p__type_8__field_6 (us_split_fields11 b))) true)) (= (bool_eq3 (rec__p__type_8__field_7 (us_split_fields11 a)) (rec__p__type_8__field_7 (us_split_fields11 b))) true)) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep5) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep5) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))
(declare-const p__type_8__field_0__first__bit Int)
(declare-const p__type_8__field_0__last__bit Int)
(declare-const p__type_8__field_0__position Int)
(assert (<= 0 p__type_8__field_0__first__bit))
(assert (< p__type_8__field_0__first__bit p__type_8__field_0__last__bit))
(assert (<= 0 p__type_8__field_0__position))
(declare-const p__type_8__field_1__first__bit Int)
(declare-const p__type_8__field_1__last__bit Int)
(declare-const p__type_8__field_1__position Int)
(assert (<= 0 p__type_8__field_1__first__bit))
(assert (< p__type_8__field_1__first__bit p__type_8__field_1__last__bit))
(assert (<= 0 p__type_8__field_1__position))
(declare-const p__type_8__field_2__first__bit Int)
(declare-const p__type_8__field_2__last__bit Int)
(declare-const p__type_8__field_2__position Int)
(assert (<= 0 p__type_8__field_2__first__bit))
(assert (< p__type_8__field_2__first__bit p__type_8__field_2__last__bit))
(assert (<= 0 p__type_8__field_2__position))
(declare-const p__type_8__field_3__first__bit Int)
(declare-const p__type_8__field_3__last__bit Int)
(declare-const p__type_8__field_3__position Int)
(assert (<= 0 p__type_8__field_3__first__bit))
(assert (< p__type_8__field_3__first__bit p__type_8__field_3__last__bit))
(assert (<= 0 p__type_8__field_3__position))
(declare-const p__type_8__field_4__first__bit Int)
(declare-const p__type_8__field_4__last__bit Int)
(declare-const p__type_8__field_4__position Int)
(assert (<= 0 p__type_8__field_4__first__bit))
(assert (< p__type_8__field_4__first__bit p__type_8__field_4__last__bit))
(assert (<= 0 p__type_8__field_4__position))
(declare-const p__type_8__field_5__first__bit Int)
(declare-const p__type_8__field_5__last__bit Int)
(declare-const p__type_8__field_5__position Int)
(assert (<= 0 p__type_8__field_5__first__bit))
(assert (< p__type_8__field_5__first__bit p__type_8__field_5__last__bit))
(assert (<= 0 p__type_8__field_5__position))
(declare-const p__type_8__field_6__first__bit Int)
(declare-const p__type_8__field_6__last__bit Int)
(declare-const p__type_8__field_6__position Int)
(assert (<= 0 p__type_8__field_6__first__bit))
(assert (< p__type_8__field_6__first__bit p__type_8__field_6__last__bit))
(assert (<= 0 p__type_8__field_6__position))
(declare-const p__type_8__field_7__first__bit Int)
(declare-const p__type_8__field_7__last__bit Int)
(declare-const p__type_8__field_7__position Int)
(assert (<= 0 p__type_8__field_7__first__bit))
(assert (< p__type_8__field_7__first__bit p__type_8__field_7__last__bit))
(assert (<= 0 p__type_8__field_7__position))
(declare-fun user_eq8 (us_rep5 us_rep5) Bool)
(declare-const dummy8 us_rep5)
(declare-datatypes () ((type_8__ref (mk_type_8__ref (type_8__content us_rep5)))))
(define-fun type_8__ref___projection ((a type_8__ref)) us_rep5 (type_8__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_158)))
(assert (forall ((us_void_param tuple0)) (! (let ((result (create_type_2 us_void_param))) (and (= (bool_eq (rec__p__type_2__field_0 (us_split_fields3 result)) (create_type_1 Tuple0)) true) (and (= (bool_eq (rec__p__type_2__field_1 (us_split_fields3 result)) (create_type_1 Tuple0)) true) (and (= (bool_eq (rec__p__type_2__field_2 (us_split_fields3 result)) (create_type_1 Tuple0)) true) (and (= (bool_eq (rec__p__type_2__field_3 (us_split_fields3 result)) (create_type_1 Tuple0)) true) (= (bool_eq (rec__p__type_2__field_4 (us_split_fields3 result)) (create_type_1 Tuple0)) true)))))) :pattern ((create_type_2 us_void_param)))))
(define-fun dynamic_invariant1 ((temp___expr_232 Int) (temp___is_init_228 Bool) (temp___skip_constant_229 Bool) (temp___do_toplevel_230 Bool) (temp___do_typ_inv_231 Bool)) Bool (=> (or (= temp___is_init_228 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_232)))
(define-fun dynamic_invariant2 ((temp___expr_1567 Int) (temp___is_init_1563 Bool) (temp___skip_constant_1564 Bool) (temp___do_toplevel_1565 Bool) (temp___do_typ_inv_1566 Bool)) Bool (=> (or (= temp___is_init_1563 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_1567)))
(declare-const p__create_type_8__result type_8__ref)
(declare-const o us_rep3)
(declare-const o1 type_0)
(declare-const o2 type_0)
(declare-const o3 type_0)
(declare-const o4 type_0)
(declare-const o5 type_0)
(declare-const o6 type_0)
(declare-const o7 type_0)
(declare-const o8 type_0)
(declare-const o9 type_7)
(declare-const o10 us_rep3)
(declare-const o11 us_rep4)
(declare-const o12 us_rep2)
(declare-const o13 us_rep3)
(declare-const o14 us_rep2)
(declare-const o15 us_split_fields10)
(declare-const o16 us_rep5)
(declare-const result type_8__ref)
(declare-const p__create_type_8__result1 us_rep5)
(declare-const p__create_type_8__result2 type_8__ref)
(declare-const p__create_type_8__result3 us_rep5)
(declare-const p__create_type_8__result4 type_8__ref)
(declare-const p__create_type_8__result5 us_rep5)
(define-fun o17 () us_rep (mk___rep (mk___split_fields o1 o2 o3 o4 o5 o6 o7 o8)))
(declare-const result1 us_rep5)
(assert (= p__create_type_8__result2 (let ((subject p__create_type_8__result)) (mk_type_8__ref p__create_type_8__result1))))
(assert (= p__create_type_8__result3 p__create_type_8__result1))
(assert (and (= o (create_type_5 Tuple0)) (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 o))) 0) (and (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 o)) (create_type_4 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 o)) (create_type_2 Tuple0)) true) (and (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 o)) (create_type_4 Tuple0)) true) (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 o)) (create_type_4 Tuple0)) true)))))))
(assert (and (= o17 (create_type_1 Tuple0)) (and (= (to_rep o1) 0) (and (= (to_rep o2) 0) (and (= (to_rep o3) 0) (and (= (to_rep o4) 0) (and (= (to_rep o5) 0) (and (= (to_rep o6) 0) (and (= (to_rep o7) 0) (= (to_rep o8) 0))))))))))
(assert (= (to_rep2 o9) 0))
(assert (and (= o10 (create_type_5 Tuple0)) (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 o10))) 0) (and (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 o10)) (create_type_4 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 o10)) (create_type_2 Tuple0)) true) (and (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 o10)) (create_type_4 Tuple0)) true) (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 o10)) (create_type_4 Tuple0)) true)))))))
(assert (and (= o11 (create_type_6 Tuple0)) (and (= (bool_eq (rec__p__type_6__field_0 (us_split_fields9 o11)) (create_type_1 Tuple0)) true) (and (= (bool_eq3 (rec__p__type_6__field_1 (us_split_fields9 o11)) (create_type_5 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_6__field_2 (us_split_fields9 o11)) (create_type_2 Tuple0)) true) (= (bool_eq3 (rec__p__type_6__field_3 (us_split_fields9 o11)) (create_type_5 Tuple0)) true))))))
(assert (and (= o12 (create_type_4 Tuple0)) (and (= (bool_eq (rec__p__type_4__field_0 (us_split_fields5 o12)) (create_type_1 Tuple0)) true) (and (= (bool_eq (rec__p__type_4__field_1 (us_split_fields5 o12)) (create_type_1 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_4__field_2 (us_split_fields5 o12)) (create_type_2 Tuple0)) true) (= (bool_eq1 (rec__p__type_4__field_3 (us_split_fields5 o12)) (create_type_2 Tuple0)) true))))))
(assert (and (= o13 (create_type_5 Tuple0)) (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 o13))) 0) (and (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 o13)) (create_type_4 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 o13)) (create_type_2 Tuple0)) true) (and (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 o13)) (create_type_4 Tuple0)) true) (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 o13)) (create_type_4 Tuple0)) true)))))))
(assert (and (= o14 (create_type_4 Tuple0)) (and (= (bool_eq (rec__p__type_4__field_0 (us_split_fields5 o14)) (create_type_1 Tuple0)) true) (and (= (bool_eq (rec__p__type_4__field_1 (us_split_fields5 o14)) (create_type_1 Tuple0)) true) (and (= (bool_eq1 (rec__p__type_4__field_2 (us_split_fields5 o14)) (create_type_2 Tuple0)) true) (= (bool_eq1 (rec__p__type_4__field_3 (us_split_fields5 o14)) (create_type_2 Tuple0)) true))))))
(assert (= o15 (mk___split_fields5 o14 o13 o12 o11 o10 o9 o17 o)))
(assert (= o16 (mk___rep5 o15)))
(assert (= result p__create_type_8__result))
(assert (= (let ((subject p__create_type_8__result)) p__create_type_8__result1) o16))
(assert (= p__create_type_8__result4 p__create_type_8__result2))
(assert (= p__create_type_8__result5 p__create_type_8__result3))
(assert (= result1 (type_8__content p__create_type_8__result4)))
(assert (not (= (bool_eq2 (rec__p__type_8__field_0 (us_split_fields11 (type_8__content p__create_type_8__result4))) (create_type_4 Tuple0)) true)))
(check-sat)
(exit)
