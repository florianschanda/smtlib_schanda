(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort value_kind 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (value_kind value_kind) Bool)
(declare-const dummy1 value_kind)
(declare-datatypes () ((value_kind__ref (mk_value_kind__ref (value_kind__content value_kind)))))
(define-fun value_kind__ref___projection ((a value_kind__ref)) value_kind (value_kind__content a))
(declare-fun to_rep1 (value_kind) Int)
(declare-fun of_rep1 (Int) value_kind)
(assert (forall ((x value_kind)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x value_kind)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__foo__value__kind value_kind)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) value_kind (rec__foo__value__kind a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__foo__value__bool_field Bool) (rec__foo__value__int_field integer)))))
(define-fun us_split_fields_Bool_Field__projection ((a us_split_fields)) Bool (rec__foo__value__bool_field a))
(define-fun us_split_fields_Int_Field__projection ((a us_split_fields)) integer (rec__foo__value__int_field a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun foo__value__bool_field__pred ((a us_rep)) Bool (= (to_rep1 (rec__foo__value__kind (us_split_discrs1 a))) 1))
(define-fun foo__value__int_field__pred ((a us_rep)) Bool (= (to_rep1 (rec__foo__value__kind (us_split_discrs1 a))) 2))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__foo__value__kind (us_split_discrs1 a))) (to_rep1 (rec__foo__value__kind (us_split_discrs1 b)))) (and (=> (foo__value__bool_field__pred a) (= (rec__foo__value__bool_field (us_split_fields1 a)) (rec__foo__value__bool_field (us_split_fields1 b)))) (=> (foo__value__int_field__pred a) (= (to_rep (rec__foo__value__int_field (us_split_fields1 a))) (to_rep (rec__foo__value__int_field (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const foo__value__kind__first__bit Int)
(declare-const foo__value__kind__last__bit Int)
(declare-const foo__value__kind__position Int)
(assert (<= 0 foo__value__kind__first__bit))
(assert (< foo__value__kind__first__bit foo__value__kind__last__bit))
(assert (<= 0 foo__value__kind__position))
(declare-const foo__value__bool_field__first__bit Int)
(declare-const foo__value__bool_field__last__bit Int)
(declare-const foo__value__bool_field__position Int)
(assert (<= 0 foo__value__bool_field__first__bit))
(assert (< foo__value__bool_field__first__bit foo__value__bool_field__last__bit))
(assert (<= 0 foo__value__bool_field__position))
(declare-const foo__value__int_field__first__bit Int)
(declare-const foo__value__int_field__last__bit Int)
(declare-const foo__value__int_field__position Int)
(assert (<= 0 foo__value__int_field__first__bit))
(assert (< foo__value__int_field__first__bit foo__value__int_field__last__bit))
(assert (<= 0 foo__value__int_field__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((value__ref (mk_value__ref (value__content us_rep)))))
(define-fun value__ref___projection ((a value__ref)) us_rep (value__content a))
(define-fun in_range2 ((rec__foo__value__kind1 Int) (a us_rep)) Bool (= rec__foo__value__kind1 (to_rep1 (rec__foo__value__kind (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const foo__value__kind__first__bit1 Int)
(declare-const foo__value__kind__last__bit1 Int)
(declare-const foo__value__kind__position1 Int)
(assert (<= 0 foo__value__kind__first__bit1))
(assert (< foo__value__kind__first__bit1 foo__value__kind__last__bit1))
(assert (<= 0 foo__value__kind__position1))
(declare-const foo__value__int_field__first__bit1 Int)
(declare-const foo__value__int_field__last__bit1 Int)
(declare-const foo__value__int_field__position1 Int)
(assert (<= 0 foo__value__int_field__first__bit1))
(assert (< foo__value__int_field__first__bit1 foo__value__int_field__last__bit1))
(assert (<= 0 foo__value__int_field__position1))
(declare-const foo__value__bool_field__first__bit1 Int)
(declare-const foo__value__bool_field__last__bit1 Int)
(declare-const foo__value__bool_field__position1 Int)
(assert (<= 0 foo__value__bool_field__first__bit1))
(assert (< foo__value__bool_field__first__bit1 foo__value__bool_field__last__bit1))
(assert (<= 0 foo__value__bool_field__position1))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep (t1b__content a))
(define-fun in_range3 ((rec__foo__value__kind1 Int) (a us_rep)) Bool (= rec__foo__value__kind1 (to_rep1 (rec__foo__value__kind (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const foo__value__kind__first__bit2 Int)
(declare-const foo__value__kind__last__bit2 Int)
(declare-const foo__value__kind__position2 Int)
(assert (<= 0 foo__value__kind__first__bit2))
(assert (< foo__value__kind__first__bit2 foo__value__kind__last__bit2))
(assert (<= 0 foo__value__kind__position2))
(declare-const foo__value__bool_field__first__bit2 Int)
(declare-const foo__value__bool_field__last__bit2 Int)
(declare-const foo__value__bool_field__position2 Int)
(assert (<= 0 foo__value__bool_field__first__bit2))
(assert (< foo__value__bool_field__first__bit2 foo__value__bool_field__last__bit2))
(assert (<= 0 foo__value__bool_field__position2))
(declare-const foo__value__int_field__first__bit2 Int)
(declare-const foo__value__int_field__last__bit2 Int)
(declare-const foo__value__int_field__position2 Int)
(assert (<= 0 foo__value__int_field__first__bit2))
(assert (< foo__value__int_field__first__bit2 foo__value__int_field__last__bit2))
(assert (<= 0 foo__value__int_field__position2))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content us_rep)))))
(define-fun t2b__ref___projection ((a t2b__ref)) us_rep (t2b__content a))
(define-fun in_range4 ((rec__foo__value__kind1 Int) (a us_rep)) Bool (= rec__foo__value__kind1 (to_rep1 (rec__foo__value__kind (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const foo__value__kind__first__bit3 Int)
(declare-const foo__value__kind__last__bit3 Int)
(declare-const foo__value__kind__position3 Int)
(assert (<= 0 foo__value__kind__first__bit3))
(assert (< foo__value__kind__first__bit3 foo__value__kind__last__bit3))
(assert (<= 0 foo__value__kind__position3))
(declare-const foo__value__bool_field__first__bit3 Int)
(declare-const foo__value__bool_field__last__bit3 Int)
(declare-const foo__value__bool_field__position3 Int)
(assert (<= 0 foo__value__bool_field__first__bit3))
(assert (< foo__value__bool_field__first__bit3 foo__value__bool_field__last__bit3))
(assert (<= 0 foo__value__bool_field__position3))
(declare-const foo__value__int_field__first__bit3 Int)
(declare-const foo__value__int_field__last__bit3 Int)
(declare-const foo__value__int_field__position3 Int)
(assert (<= 0 foo__value__int_field__first__bit3))
(assert (< foo__value__int_field__first__bit3 foo__value__int_field__last__bit3))
(assert (<= 0 foo__value__int_field__position3))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content us_rep)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_rep (t3b__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__foo__record_a__x us_rep) (rec__foo__record_a__y us_rep) (rec__foo__record_a__z us_rep)))))
(define-fun us_split_fields_X__projection ((a us_split_fields2)) us_rep (rec__foo__record_a__x a))
(define-fun us_split_fields_Y__projection ((a us_split_fields2)) us_rep (rec__foo__record_a__y a))
(define-fun us_split_fields_Z__projection ((a us_split_fields2)) us_rep (rec__foo__record_a__z a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (bool_eq (rec__foo__record_a__x (us_split_fields3 a)) (rec__foo__record_a__x (us_split_fields3 b))) true) (= (bool_eq (rec__foo__record_a__y (us_split_fields3 a)) (rec__foo__record_a__y (us_split_fields3 b))) true)) (= (bool_eq (rec__foo__record_a__z (us_split_fields3 a)) (rec__foo__record_a__z (us_split_fields3 b))) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const foo__record_a__x__first__bit Int)
(declare-const foo__record_a__x__last__bit Int)
(declare-const foo__record_a__x__position Int)
(assert (<= 0 foo__record_a__x__first__bit))
(assert (< foo__record_a__x__first__bit foo__record_a__x__last__bit))
(assert (<= 0 foo__record_a__x__position))
(declare-const foo__record_a__y__first__bit Int)
(declare-const foo__record_a__y__last__bit Int)
(declare-const foo__record_a__y__position Int)
(assert (<= 0 foo__record_a__y__first__bit))
(assert (< foo__record_a__y__first__bit foo__record_a__y__last__bit))
(assert (<= 0 foo__record_a__y__position))
(declare-const foo__record_a__z__first__bit Int)
(declare-const foo__record_a__z__last__bit Int)
(declare-const foo__record_a__z__position Int)
(assert (<= 0 foo__record_a__z__first__bit))
(assert (< foo__record_a__z__first__bit foo__record_a__z__last__bit))
(assert (<= 0 foo__record_a__z__position))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((record_a__ref (mk_record_a__ref (record_a__content us_rep1)))))
(define-fun record_a__ref___projection ((a record_a__ref)) us_rep1 (record_a__content a))
(define-fun dynamic_invariant ((temp___expr_176 us_rep1) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (and (and (and (and (in_range2 1 (rec__foo__record_a__x (us_split_fields3 temp___expr_176))) (= (attr__constrained (rec__foo__record_a__x (us_split_fields3 temp___expr_176))) true)) (= (attr__constrained (rec__foo__record_a__x (us_split_fields3 temp___expr_176))) true)) (and (and (in_range3 2 (rec__foo__record_a__y (us_split_fields3 temp___expr_176))) (= (attr__constrained (rec__foo__record_a__y (us_split_fields3 temp___expr_176))) true)) (= (attr__constrained (rec__foo__record_a__y (us_split_fields3 temp___expr_176))) true))) (and (and (in_range4 0 (rec__foo__record_a__z (us_split_fields3 temp___expr_176))) (= (attr__constrained (rec__foo__record_a__z (us_split_fields3 temp___expr_176))) true)) (= (attr__constrained (rec__foo__record_a__z (us_split_fields3 temp___expr_176))) true))))
(define-fun default_initial_assumption ((temp___expr_180 us_rep1) (temp___skip_top_level_181 Bool)) Bool (and (and (and (= (attr__constrained (rec__foo__record_a__x (us_split_fields3 temp___expr_180))) true) (= (to_rep1 (rec__foo__value__kind (us_split_discrs1 (rec__foo__record_a__x (us_split_fields3 temp___expr_180))))) 1)) (and (= (attr__constrained (rec__foo__record_a__y (us_split_fields3 temp___expr_180))) true) (= (to_rep1 (rec__foo__value__kind (us_split_discrs1 (rec__foo__record_a__y (us_split_fields3 temp___expr_180))))) 2))) (and (= (attr__constrained (rec__foo__record_a__z (us_split_fields3 temp___expr_180))) true) (= (to_rep1 (rec__foo__value__kind (us_split_discrs1 (rec__foo__record_a__z (us_split_fields3 temp___expr_180))))) 0))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 2)) (in_range1 temp___expr_158)))
(define-fun default_initial_assumption1 ((temp___expr_167 us_rep) (temp___skip_top_level_168 Bool)) Bool (and (= (attr__constrained temp___expr_167) false) (= (to_rep1 (rec__foo__value__kind (us_split_discrs1 temp___expr_167))) 0)))
(declare-const v__split_fields us_split_fields__ref1)
(assert (dynamic_invariant (mk___rep1 (us_split_fields__content1 v__split_fields)) true false true true))
(assert (not (= (to_rep1 (rec__foo__value__kind (us_split_discrs1 (rec__foo__record_a__y (us_split_fields__content1 v__split_fields))))) 2)))
(check-sat)
(exit)
