(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__check_lsp__p_overridden__root__f integer) (rec__ext__ us_private)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) integer (rec__check_lsp__p_overridden__root__f a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__check_lsp__p_overridden__root__f (us_split_fields1 a))) (to_rep (rec__check_lsp__p_overridden__root__f (us_split_fields1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const check_lsp__p_overridden__root__f__first__bit Int)
(declare-const check_lsp__p_overridden__root__f__last__bit Int)
(declare-const check_lsp__p_overridden__root__f__position Int)
(assert (<= 0 check_lsp__p_overridden__root__f__first__bit))
(assert (< check_lsp__p_overridden__root__f__first__bit check_lsp__p_overridden__root__f__last__bit))
(assert (<= 0 check_lsp__p_overridden__root__f__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__check_lsp__p_overridden__child__g integer) (rec__check_lsp__p_overridden__root__f1 integer) (rec__ext__1 us_private)))))
(define-fun us_split_fields_G__projection ((a us_split_fields2)) integer (rec__check_lsp__p_overridden__child__g a))
(define-fun us_split_fields_F__2__projection ((a us_split_fields2)) integer (rec__check_lsp__p_overridden__root__f1 a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (integer us_private) us_private)
(declare-fun extract__g (us_private) integer)
(assert (forall ((g integer)) (forall ((rec__ext__2 us_private)) (= (extract__g (hide_ext__ g rec__ext__2)) g))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__check_lsp__p_overridden__root__f1 (us_split_fields3 a)) (hide_ext__ (rec__check_lsp__p_overridden__child__g (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__g (rec__ext__ (us_split_fields1 r))) (rec__check_lsp__p_overridden__root__f (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__check_lsp__p_overridden__child__g (us_split_fields3 a))) (to_rep (rec__check_lsp__p_overridden__child__g (us_split_fields3 b)))) (= (to_rep (rec__check_lsp__p_overridden__root__f1 (us_split_fields3 a))) (to_rep (rec__check_lsp__p_overridden__root__f1 (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const check_lsp__p_overridden__child__g__first__bit Int)
(declare-const check_lsp__p_overridden__child__g__last__bit Int)
(declare-const check_lsp__p_overridden__child__g__position Int)
(assert (<= 0 check_lsp__p_overridden__child__g__first__bit))
(assert (< check_lsp__p_overridden__child__g__first__bit check_lsp__p_overridden__child__g__last__bit))
(assert (<= 0 check_lsp__p_overridden__child__g__position))
(declare-const check_lsp__p_overridden__root__f__first__bit1 Int)
(declare-const check_lsp__p_overridden__root__f__last__bit1 Int)
(declare-const check_lsp__p_overridden__root__f__position1 Int)
(assert (<= 0 check_lsp__p_overridden__root__f__first__bit1))
(assert (< check_lsp__p_overridden__root__f__first__bit1 check_lsp__p_overridden__root__f__last__bit1))
(assert (<= 0 check_lsp__p_overridden__root__f__position1))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((child__ref (mk_child__ref (child__content us_rep1)))))
(define-fun child__ref___projection ((a child__ref)) us_rep1 (child__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__check_lsp__p_overridden__grand_child__h integer) (rec__check_lsp__p_overridden__root__f2 integer) (rec__check_lsp__p_overridden__child__g1 integer) (rec__ext__2 us_private)))))
(define-fun us_split_fields_H__projection ((a us_split_fields4)) integer (rec__check_lsp__p_overridden__grand_child__h a))
(define-fun us_split_fields_F__3__projection ((a us_split_fields4)) integer (rec__check_lsp__p_overridden__root__f2 a))
(define-fun us_split_fields_G__2__projection ((a us_split_fields4)) integer (rec__check_lsp__p_overridden__child__g1 a))
(define-fun us_split_fields___3__projection ((a us_split_fields4)) us_private (rec__ext__2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4) (attr__tag2 Int)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___6__projection ((a us_rep2)) Int (attr__tag2 a))
(declare-fun hide_ext__1 (integer integer us_private) us_private)
(declare-fun extract__h (us_private) integer)
(assert (forall ((h integer) (g integer)) (forall ((rec__ext__3 us_private)) (= (extract__h (hide_ext__1 h g rec__ext__3)) h))))
(assert (forall ((h integer) (g integer)) (forall ((rec__ext__3 us_private)) (= (extract__g (hide_ext__1 h g rec__ext__3)) g))))
(declare-fun extract__ext__1 (us_private) us_private)
(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (mk___split_fields (rec__check_lsp__p_overridden__root__f2 (us_split_fields5 a)) (hide_ext__1 (rec__check_lsp__p_overridden__grand_child__h (us_split_fields5 a)) (rec__check_lsp__p_overridden__child__g1 (us_split_fields5 a)) (rec__ext__2 (us_split_fields5 a)))) (attr__tag2 a)))
(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (mk___split_fields2 (extract__h (rec__ext__ (us_split_fields1 r))) (rec__check_lsp__p_overridden__root__f (us_split_fields1 r)) (extract__g (rec__ext__ (us_split_fields1 r))) (extract__ext__1 (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (to_rep (rec__check_lsp__p_overridden__grand_child__h (us_split_fields5 a))) (to_rep (rec__check_lsp__p_overridden__grand_child__h (us_split_fields5 b)))) (= (to_rep (rec__check_lsp__p_overridden__root__f2 (us_split_fields5 a))) (to_rep (rec__check_lsp__p_overridden__root__f2 (us_split_fields5 b))))) (= (to_rep (rec__check_lsp__p_overridden__child__g1 (us_split_fields5 a))) (to_rep (rec__check_lsp__p_overridden__child__g1 (us_split_fields5 b))))) true false))
(declare-const us_tag2 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const check_lsp__p_overridden__grand_child__h__first__bit Int)
(declare-const check_lsp__p_overridden__grand_child__h__last__bit Int)
(declare-const check_lsp__p_overridden__grand_child__h__position Int)
(assert (<= 0 check_lsp__p_overridden__grand_child__h__first__bit))
(assert (< check_lsp__p_overridden__grand_child__h__first__bit check_lsp__p_overridden__grand_child__h__last__bit))
(assert (<= 0 check_lsp__p_overridden__grand_child__h__position))
(declare-const check_lsp__p_overridden__root__f__first__bit2 Int)
(declare-const check_lsp__p_overridden__root__f__last__bit2 Int)
(declare-const check_lsp__p_overridden__root__f__position2 Int)
(assert (<= 0 check_lsp__p_overridden__root__f__first__bit2))
(assert (< check_lsp__p_overridden__root__f__first__bit2 check_lsp__p_overridden__root__f__last__bit2))
(assert (<= 0 check_lsp__p_overridden__root__f__position2))
(declare-const check_lsp__p_overridden__child__g__first__bit1 Int)
(declare-const check_lsp__p_overridden__child__g__last__bit1 Int)
(declare-const check_lsp__p_overridden__child__g__position1 Int)
(assert (<= 0 check_lsp__p_overridden__child__g__first__bit1))
(assert (< check_lsp__p_overridden__child__g__first__bit1 check_lsp__p_overridden__child__g__last__bit1))
(assert (<= 0 check_lsp__p_overridden__child__g__position1))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((grand_child__ref (mk_grand_child__ref (grand_child__content us_rep2)))))
(define-fun grand_child__ref___projection ((a grand_child__ref)) us_rep2 (grand_child__content a))
(define-fun default_initial_assumption ((temp___expr_186 us_rep2) (temp___skip_top_level_187 Bool)) Bool (= (attr__tag2 temp___expr_186) us_tag2))
(declare-const x us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun default_initial_assumption1 ((temp___expr_159 us_rep) (temp___skip_top_level_160 Bool)) Bool (= (attr__tag temp___expr_159) us_tag))
(define-fun default_initial_assumption2 ((temp___expr_172 us_rep1) (temp___skip_top_level_173 Bool)) Bool (= (attr__tag1 temp___expr_172) us_tag1))
(declare-const check_lsp__p_overridden__get_f__3__result Int)
(declare-const result Int)
(declare-const check_lsp__p_overridden__get_f__3__result1 Int)
(declare-const check_lsp__p_overridden__get_f__3__result2 Int)
(declare-const check_lsp__p_overridden__get_f__3__result3 Int)
(declare-const check_lsp__p_overridden__get_f__3__result4 Int)
(declare-const check_lsp__p_overridden__get_f__3__result5 Int)
(declare-const result1 Int)
(assert (= check_lsp__p_overridden__get_f__3__result1 check_lsp__p_overridden__get_f__3__result2))
(assert (= check_lsp__p_overridden__get_f__3__result3 check_lsp__p_overridden__get_f__3__result1))
(assert (= result check_lsp__p_overridden__get_f__3__result))
(assert (= check_lsp__p_overridden__get_f__3__result1 (to_rep (rec__check_lsp__p_overridden__grand_child__h (us_split_fields5 x)))))
(assert (= (mk_int__ref check_lsp__p_overridden__get_f__3__result4) (mk_int__ref check_lsp__p_overridden__get_f__3__result2)))
(assert (= check_lsp__p_overridden__get_f__3__result5 check_lsp__p_overridden__get_f__3__result3))
(assert (= result1 check_lsp__p_overridden__get_f__3__result4))
(assert (not (= check_lsp__p_overridden__get_f__3__result4 (to_rep (rec__check_lsp__p_overridden__root__f2 (us_split_fields5 x))))))
(check-sat)
(exit)
