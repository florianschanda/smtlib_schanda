(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun get_highest_reading (Int) Int)
(declare-fun get_highest_reading__function_guard (Int Int) Bool)
(declare-sort reading 0)
(declare-fun readingqtint (reading) Int)
(assert (forall ((i reading)) (and (<= (- 1) (readingqtint i)) (<= (readingqtint i) 100))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 1) x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (reading reading) Bool)
(declare-const dummy reading)
(declare-datatypes () ((reading__ref (mk_reading__ref (reading__content reading)))))
(define-fun reading__ref___projection ((a reading__ref)) reading (reading__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= (- 1) 100)) (in_range1 temp___expr_158)))
(assert (forall ((refinement__high_reading Int)) (! (=> (dynamic_invariant refinement__high_reading true true true true) (dynamic_invariant (get_highest_reading refinement__high_reading) true false true true)) :pattern ((get_highest_reading refinement__high_reading)))))
(assert (forall ((refinement__high_reading Int)) (! (=> (dynamic_invariant refinement__high_reading true true true true) (= (get_highest_reading refinement__high_reading) refinement__high_reading)) :pattern ((get_highest_reading refinement__high_reading)))))
(declare-const r Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const high_reading Int)
(declare-const high_reading1 Int)
(assert (in_range1 high_reading))
(assert (in_range1 r))
(assert (and (<= 0 r) (<= r 100)))
(assert (< (- 1) (get_highest_reading high_reading1)))
(assert (in_range1 high_reading1))
(assert (not (< (- 1) (get_highest_reading high_reading1))))
(check-sat)
(exit)
