(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range1 temp___expr_166)))
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq a b) (oeq a b)) :pattern ((user_eq a b)))))
(define-fun default_initial_assumption ((temp___expr_215 us_rep) (temp___skip_top_level_216 Bool)) Bool (=> (not (= temp___skip_top_level_216 true)) (= (length temp___expr_215) 0)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 10000))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (element_type element_type) Bool)
(declare-const dummy2 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_200 Int) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool (=> (or (= temp___is_init_196 true) (<= 0 10000)) (in_range2 temp___expr_200)))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (extended_index extended_index) Bool)
(declare-const dummy3 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant2 ((temp___expr_207 Int) (temp___is_init_203 Bool) (temp___skip_constant_204 Bool) (temp___do_toplevel_205 Bool) (temp___do_typ_inv_206 Bool)) Bool (=> (or (= temp___is_init_203 true) (<= 0 2147483647)) (in_range3 temp___expr_207)))
(assert (forall ((container us_rep)) (forall ((position Int)) (! (=> (and (dynamic_invariant2 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant1 (get container position) true false true true)) :pattern ((get container position))))))
(define-fun ole ((left us_rep) (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)
(declare-fun add (us_rep Int) us_rep)
(declare-fun add__function_guard (us_rep us_rep Int) Bool)
(assert (forall ((container us_rep)) (forall ((new_item Int)) (! (=> (and (dynamic_invariant1 new_item true true true true) (and (< (length container) 2147483647) (< (last container) 2147483647))) (let ((result (add container new_item))) (and (= (length result) (+ (length container) 1)) (and (= (get result (last result)) new_item) (= (ole container result) true))))) :pattern ((add container new_item))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep1)))))
(define-fun set__ref___projection ((a set__ref)) us_rep1 (set__content a))
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(declare-fun is_empty (us_rep1) Bool)
(declare-fun is_empty__function_guard (Bool us_rep1) Bool)
(define-fun default_initial_assumption1 ((temp___expr_230 us_rep1) (temp___skip_top_level_231 Bool)) Bool (=> (not (= temp___skip_top_level_231 true)) (= (is_empty temp___expr_230) true)))
(assert (forall ((container us_rep1)) (! (dynamic_invariant (length1 container) true false true true) :pattern ((length1 container)))))
(declare-fun contains (us_rep1 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep1 Int) Bool)
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= 0 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 10000))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (element_type1 element_type1) Bool)
(declare-const dummy5 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(assert (forall ((container us_rep1)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range4 item) (= (contains container item) true))))) (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty container)))))
(declare-fun contains1 (us_rep Int) Bool)
(declare-fun contains__function_guard1 (Bool us_rep Int) Bool)
(declare-sort resource 0)
(declare-fun resourceqtint (resource) Int)
(assert (forall ((i resource)) (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 10000))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (resource resource) Bool)
(declare-const dummy6 resource)
(declare-datatypes () ((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content a))
(define-fun dynamic_invariant3 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 0 10000)) (in_range5 temp___expr_173)))
(assert true)
(assert (forall ((s us_rep)) (forall ((e Int)) (! (= (= (contains1 s e) true) (exists ((i Int)) (and (and (<= 1 i) (<= i (length s))) (= (get s i) e)))) :pattern ((contains1 s e))))))
(declare-sort valid_resource 0)
(declare-fun valid_resourceqtint (valid_resource) Int)
(assert (forall ((i valid_resource)) (and (<= 1 (valid_resourceqtint i)) (<= (valid_resourceqtint i) 10000))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (valid_resource valid_resource) Bool)
(declare-const dummy7 valid_resource)
(declare-datatypes () ((valid_resource__ref (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource (valid_resource__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__list_allocator__m__t__available us_rep) (rec__list_allocator__m__t__allocated us_rep1)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) us_rep (rec__list_allocator__m__t__available a))
(define-fun us_split_fields_Allocated__projection ((a us_split_fields)) us_rep1 (rec__list_allocator__m__t__allocated a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep2 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep2)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (user_eq (rec__list_allocator__m__t__available (us_split_fields1 a)) (rec__list_allocator__m__t__available (us_split_fields1 b))) true) (= (bool_eq1 (rec__list_allocator__m__t__allocated (us_split_fields1 a)) (rec__list_allocator__m__t__allocated (us_split_fields1 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const list_allocator__m__t__available__first__bit Int)
(declare-const list_allocator__m__t__available__last__bit Int)
(declare-const list_allocator__m__t__available__position Int)
(assert (<= 0 list_allocator__m__t__available__first__bit))
(assert (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))
(assert (<= 0 list_allocator__m__t__available__position))
(declare-const list_allocator__m__t__allocated__first__bit Int)
(declare-const list_allocator__m__t__allocated__last__bit Int)
(declare-const list_allocator__m__t__allocated__position Int)
(assert (<= 0 list_allocator__m__t__allocated__first__bit))
(assert (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))
(assert (<= 0 list_allocator__m__t__allocated__position))
(declare-fun user_eq8 (us_rep2 us_rep2) Bool)
(declare-const dummy8 us_rep2)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep2)))))
(define-fun t__ref___projection ((a t__ref)) us_rep2 (t__content a))
(declare-fun oeq1 (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq8 a b) (oeq1 a b)) :pattern ((user_eq8 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_245 us_rep2) (temp___skip_top_level_246 Bool)) Bool (and (= (length (rec__list_allocator__m__t__available (us_split_fields1 temp___expr_245))) 0) (= (is_empty (rec__list_allocator__m__t__allocated (us_split_fields1 temp___expr_245))) true)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant4 ((temp___expr_180 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 1 10000)) (in_range6 temp___expr_180)))
(declare-fun oeq2 (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep1 us_rep1) Bool)
(assert true)
(assert (forall ((x us_rep2) (y us_rep2)) (! (= (= (oeq1 x y) true) (and (= (oeq (rec__list_allocator__m__t__available (us_split_fields1 x)) (rec__list_allocator__m__t__available (us_split_fields1 y))) true) (= (oeq2 (rec__list_allocator__m__t__allocated (us_split_fields1 x)) (rec__list_allocator__m__t__allocated (us_split_fields1 y))) true))) :pattern ((oeq1 x y)))))
(define-fun dynamic_invariant5 ((temp___expr_222 Int) (temp___is_init_218 Bool) (temp___skip_constant_219 Bool) (temp___do_toplevel_220 Bool) (temp___do_typ_inv_221 Bool)) Bool (=> (or (= temp___is_init_218 true) (<= 0 10000)) (in_range4 temp___expr_222)))
(assert (forall ((container us_rep1)) (forall ((item Int)) (! (=> (dynamic_invariant5 item true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range4 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-fun ole1 (us_rep1 us_rep1) Bool)
(declare-fun ole__function_guard1 (Bool us_rep1 us_rep1) Bool)
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (ole1 left right) true) (forall ((item Int)) (=> (and (in_range4 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole1 left right)))))
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (oeq2 left right) true) (and (= (ole1 left right) true) (= (ole1 right left) true))) :pattern ((oeq2 left right)))))
(declare-const model____split_fields us_rep)
(declare-const model____split_fields1 us_rep1)
(declare-const r Int)
(declare-const temp___305 us_rep)
(declare-const temp___3051 us_rep1)
(declare-const temp___304 Int)
(declare-const o us_rep)
(declare-const o1 us_rep)
(declare-const o2 us_rep1)
(declare-const temp___303 us_rep)
(declare-const temp___3031 us_rep1)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const model____split_fields2 us_rep)
(declare-const model____split_fields3 us_rep1)
(declare-const result Int)
(declare-const r1 Int)
(declare-const result1 us_rep)
(declare-const result2 us_rep1)
(declare-const model____split_fields4 us_rep)
(declare-const model____split_fields5 us_rep1)
(declare-const model____split_fields6 us_rep)
(declare-const model____split_fields7 us_rep1)
(declare-const r2 Int)
(declare-const model____split_fields8 us_split_fields__ref)
(declare-const r3 int__ref)
(declare-const model____split_fields9 us_split_fields)
(declare-const r4 Int)
(declare-const model____split_fields10 us_split_fields__ref)
(declare-const r5 int__ref)
(declare-const model____split_fields11 us_split_fields)
(declare-const r6 Int)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(define-fun model____split_fields12 () us_split_fields (mk___split_fields model____split_fields6 model____split_fields7))
(define-fun model____split_fields13 () us_split_fields__ref (mk___split_fields__ref (mk___split_fields model____split_fields model____split_fields1)))
(assert (and (= (length model____split_fields) 0) (= (is_empty model____split_fields1) true)))
(assert (= (length model____split_fields) 0))
(assert (= (mk_int__ref result) (mk_int__ref r)))
(assert (= r1 1))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (and (= model____split_fields temp___305) (= model____split_fields1 temp___3051))))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= temp___304 r1)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (and (= o (add model____split_fields r1)) (and (= (length o) (+ (length model____split_fields) 1)) (and (= (get o (last o)) r1) (= (ole model____split_fields o) true))))))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= o o1)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= model____split_fields1 o2)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= temp___303 o1)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= temp___3031 o2)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= (mk___split_fields__ref (mk___split_fields result1 result2)) model____split_fields13)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= temp___303 model____split_fields4)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= temp___3031 model____split_fields5)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= (is_empty model____split_fields7) true)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= (length1 model____split_fields7) 0)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= (length model____split_fields6) r2)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= (get model____split_fields6 1) 1)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (forall ((rr Int)) (=> (and (<= 1 rr) (<= rr r2)) (= (get model____split_fields6 rr) rr)))))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (forall ((rr Int)) (=> (and (<= 1 rr) (<= rr r2)) (= (contains1 model____split_fields6 rr) true)))))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (and (and (=> (<= 1 10000) (in_range6 r2)) (= model____split_fields7 temp___3051)) (and (<= 1 r2) (<= r2 10000)))))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= r2 10000)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= r3 (mk_int__ref r2))))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= model____split_fields8 (mk___split_fields__ref model____split_fields12))))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= r4 r2)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= model____split_fields9 model____split_fields12)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= r5 r3)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= model____split_fields10 model____split_fields8)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= r6 r4)))
(assert (=> (and (<= 1 r1) (<= r1 10000)) (= model____split_fields11 model____split_fields9)))
(assert (=> (not (and (<= 1 r1) (<= r1 10000))) (= r5 (mk_int__ref r1))))
(assert (=> (not (and (<= 1 r1) (<= r1 10000))) (= model____split_fields10 model____split_fields13)))
(assert (=> (not (and (<= 1 r1) (<= r1 10000))) (= r6 r1)))
(assert (=> (not (and (<= 1 r1) (<= r1 10000))) (= model____split_fields11 (mk___split_fields model____split_fields2 model____split_fields3))))
(assert (= (length (rec__list_allocator__m__t__available (us_split_fields__content model____split_fields10))) 10000))
(assert (and (= result5 (is_empty (rec__list_allocator__m__t__allocated (us_split_fields__content model____split_fields10)))) (and (= (= result5 true) (forall ((item Int)) (not (and (in_range4 item) (= (contains (rec__list_allocator__m__t__allocated (us_split_fields__content model____split_fields10)) item) true))))) (= (= result5 true) (= (length1 (rec__list_allocator__m__t__allocated (us_split_fields__content model____split_fields10))) 0)))))
(assert (=> (= result5 true) (and (= o4 (length1 (rec__list_allocator__m__t__allocated (us_split_fields__content model____split_fields10)))) (in_range1 o4))))
(assert (=> (= result5 true) (= result4 (ite (= o4 0) true false))))
(assert (=> (not (= result5 true)) (= result4 false)))
(assert (=> (= result4 true) (and (= o3 (length (rec__list_allocator__m__t__available (us_split_fields__content model____split_fields10)))) (and (in_range1 o3) (<= (+ 0 o3) 2147483647)))))
(assert (=> (= result4 true) (= result3 (ite (= o3 10000) true false))))
(assert (=> (not (= result4 true)) (= result3 false)))
(assert (= result3 true))
(assert (not (<= 1 1)))
(check-sat)
(exit)
