(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun type_invariant ((temp___155 Int)) Bool (not (= temp___155 0)))
(declare-sort t 0)
(declare-fun tqtint (t) Int)
(assert (forall ((i t)) (and (<= (- 2147483648) (tqtint i)) (<= (tqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (t t) Bool)
(declare-const dummy t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))
(define-fun to_rep ((x t)) Int (tqtint x))
(declare-fun of_rep (Int) t)
(assert (forall ((x t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x t)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__aggregates__rec_t__a t) (rec__aggregates__rec_t__b t)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) t (rec__aggregates__rec_t__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) t (rec__aggregates__rec_t__b a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__aggregates__rec_t__a (us_split_fields1 a))) (to_rep (rec__aggregates__rec_t__a (us_split_fields1 b)))) (= (to_rep (rec__aggregates__rec_t__b (us_split_fields1 a))) (to_rep (rec__aggregates__rec_t__b (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const aggregates__rec_t__a__first__bit Int)
(declare-const aggregates__rec_t__a__last__bit Int)
(declare-const aggregates__rec_t__a__position Int)
(assert (<= 0 aggregates__rec_t__a__first__bit))
(assert (< aggregates__rec_t__a__first__bit aggregates__rec_t__a__last__bit))
(assert (<= 0 aggregates__rec_t__a__position))
(declare-const aggregates__rec_t__b__first__bit Int)
(declare-const aggregates__rec_t__b__last__bit Int)
(declare-const aggregates__rec_t__b__position Int)
(assert (<= 0 aggregates__rec_t__b__first__bit))
(assert (< aggregates__rec_t__b__first__bit aggregates__rec_t__b__last__bit))
(assert (<= 0 aggregates__rec_t__b__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((rec_t__ref (mk_rec_t__ref (rec_t__content us_rep)))))
(define-fun rec_t__ref___projection ((a rec_t__ref)) us_rep (rec_t__content a))
(define-fun default_initial_assumption ((temp___expr_179 us_rep) (temp___skip_top_level_180 Bool)) Bool (and (= (to_rep (rec__aggregates__rec_t__a (us_split_fields1 temp___expr_179))) 42) (= (to_rep (rec__aggregates__rec_t__b (us_split_fields1 temp___expr_179))) 42)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_161 Int) (temp___is_init_157 Bool) (temp___skip_constant_158 Bool) (temp___do_toplevel_159 Bool) (temp___do_typ_inv_160 Bool)) Bool (=> (or (= temp___is_init_157 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_161)))
(declare-const rliteral t)
(assert (= (tqtint rliteral) 1))
(declare-const x__split_fields t)
(declare-const x__split_fields1 t)
(declare-const result t)
(declare-const result1 t)
(declare-const x__split_fields2 t)
(declare-const x__split_fields3 t)
(declare-const x__split_fields4 t)
(declare-const x__split_fields5 t)
(declare-const x__split_fields6 t)
(declare-const x__split_fields7 t)
(assert (= result x__split_fields))
(assert (= result1 x__split_fields1))
(assert (= rliteral x__split_fields2))
(assert (= rliteral x__split_fields3))
(assert (= x__split_fields4 x__split_fields2))
(assert (= x__split_fields5 x__split_fields3))
(assert (= x__split_fields6 x__split_fields2))
(assert (= x__split_fields7 x__split_fields3))
(assert (not (type_invariant (to_rep x__split_fields5))))
(check-sat)
(exit)
