(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort sub_int_bad 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (sub_int_bad sub_int_bad) Bool)
(declare-const dummy sub_int_bad)
(declare-datatypes () ((sub_int_bad__ref (mk_sub_int_bad__ref (sub_int_bad__content sub_int_bad)))))
(define-fun sub_int_bad__ref___projection ((a sub_int_bad__ref)) sub_int_bad (sub_int_bad__content a))
(define-fun dynamic_invariant ((temp___expr_175 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool)) Bool (and (=> (or (= temp___is_init_172 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_175)) (=> (= temp___do_toplevel_174 true) (=> (= temp___is_init_172 true) (or (and (<= (- 2147483648) temp___expr_175) (<= temp___expr_175 (- 1))) (and (<= 1 temp___expr_175) (<= temp___expr_175 2147483647)))))))
(define-fun dynamic_predicate ((temp___179 Int)) Bool (or (and (<= (- 2147483648) temp___179) (<= temp___179 (- 1))) (and (<= 1 temp___179) (<= temp___179 2147483647))))
(declare-fun to_rep (sub_int_bad) Int)
(declare-fun of_rep (Int) sub_int_bad)
(assert (forall ((x sub_int_bad)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x sub_int_bad)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const i13s Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x Int)
(declare-const temp___331 sub_int_bad)
(assert (dynamic_invariant i13s true false true))
(assert (dynamic_invariant x false false true))
(assert (= (to_rep temp___331) 0))
(define-fun temp___333 () Int (to_rep temp___331))
(assert (not (or (and (<= (- 2147483648) temp___333) (<= temp___333 (- 1))) (and (<= 1 temp___333) (<= temp___333 2147483647)))))
(check-sat)
(exit)
