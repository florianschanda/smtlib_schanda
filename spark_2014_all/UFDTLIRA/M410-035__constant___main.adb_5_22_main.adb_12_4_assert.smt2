(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-const e Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun f (tuple0) Bool)
(declare-fun f__function_guard (Bool tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (f us_void_param) true) :pattern ((f us_void_param)))))
(declare-fun h (tuple0) Bool)
(declare-fun h__function_guard (Bool tuple0) Bool)
(declare-const m Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun g (tuple0) Bool)
(declare-fun g__function_guard (Bool tuple0) Bool)
(assert (= e (g Tuple0)))
(declare-fun k (tuple0) Bool)
(declare-fun k__function_guard (Bool tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (k us_void_param) true) :pattern ((k us_void_param)))))
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (= (h us_void_param) true) (= (k Tuple0) true)) :pattern ((h us_void_param)))))
(assert (= m (h Tuple0)))
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (= (g us_void_param) true) (= (f Tuple0) true)) :pattern ((g us_void_param)))))
(assert (= (g Tuple0) e))
(assert (= (h Tuple0) m))
(assert (= (f Tuple0) true))
(assert (not (= e true)))
(check-sat)
(exit)
