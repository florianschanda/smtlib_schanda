(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nat_ok (Int) Bool)
(declare-fun nat_ok__function_guard (Bool Int) Bool)
(declare-sort nat 0)
(declare-fun natqtint (nat) Int)
(assert (forall ((i nat)) (and (<= 0 (natqtint i)) (<= (natqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (nat nat) Bool)
(declare-const dummy nat)
(declare-datatypes () ((nat__ref (mk_nat__ref (nat__content nat)))))
(define-fun nat__ref___projection ((a nat__ref)) nat (nat__content a))
(define-fun dynamic_invariant ((temp___expr_202 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool) (temp___do_typ_inv_201 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= 0 2147483647)) (in_range temp___expr_202)))
(define-fun default_initial_assumption ((temp___expr_203 Int) (temp___skip_top_level_204 Bool)) Bool (and (= temp___expr_203 0) (=> (not (= temp___skip_top_level_204 true)) (= (nat_ok temp___expr_203) true))))
(assert true)
(assert (forall ((x Int)) (! (= (= (nat_ok x) true) (= x 0)) :pattern ((nat_ok x)))))
(declare-const us Int)
(declare-const temp___314 Int)
(assert (and (= us 0) (in_range 0)))
(assert (and (in_range temp___314) (= temp___314 0)))
(assert (not (= (nat_ok temp___314) true)))
(check-sat)
(exit)
