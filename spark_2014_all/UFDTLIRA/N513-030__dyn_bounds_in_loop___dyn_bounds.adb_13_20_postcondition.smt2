(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content integer)))))
(define-fun t1b__ref___projection ((a t1b__ref)) integer (t1b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun last (Int) Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((simple__ref (mk_simple__ref (simple__content integer)))))
(define-fun simple__ref___projection ((a simple__ref)) integer (simple__content a))
(define-fun dynamic_invariant1 ((temp___expr_135 Int) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool) (dyn_bounds__L_1__i Int)) Bool (=> (or (= temp___is_init_132 true) (<= 0 (last dyn_bounds__L_1__i))) (dynamic_property1 0 (last dyn_bounds__L_1__i) temp___expr_135)))
(assert (forall ((dyn_bounds__L_1__i Int)) (! (= (last dyn_bounds__L_1__i) dyn_bounds__L_1__i) :pattern ((last dyn_bounds__L_1__i)))))
(declare-const c1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const i Int)
(declare-const dyn_bounds__B_2__f_simple_2__result Int)
(declare-const temp___146 Int)
(declare-const us Int)
(declare-const o Int)
(declare-const result Int)
(declare-const dyn_bounds__B_2__f_simple_2__result1 Int)
(declare-const dyn_bounds__B_2__f_simple_2__result2 Int)
(declare-const dyn_bounds__B_2__f_simple_2__result3 Int)
(declare-const dyn_bounds__B_2__f_simple_2__result4 Int)
(declare-const dyn_bounds__B_2__f_simple_2__result5 Int)
(declare-const result1 Int)
(assert (in_range1 c))
(assert (dynamic_property 1 c i))
(assert (dynamic_invariant1 c1 true false true i))
(assert (< c1 (last i)))
(assert (= dyn_bounds__B_2__f_simple_2__result1 dyn_bounds__B_2__f_simple_2__result2))
(assert (= dyn_bounds__B_2__f_simple_2__result3 dyn_bounds__B_2__f_simple_2__result1))
(assert (and (= temp___146 (+ c1 1)) (in_range (+ c1 1))))
(assert (and (= us temp___146) (dynamic_property1 0 (last i) temp___146)))
(assert (= o temp___146))
(assert (= result dyn_bounds__B_2__f_simple_2__result))
(assert (= dyn_bounds__B_2__f_simple_2__result1 o))
(assert (= (mk_int__ref dyn_bounds__B_2__f_simple_2__result4) (mk_int__ref dyn_bounds__B_2__f_simple_2__result2)))
(assert (= dyn_bounds__B_2__f_simple_2__result5 dyn_bounds__B_2__f_simple_2__result3))
(assert (= result1 dyn_bounds__B_2__f_simple_2__result4))
(assert (not (< 0 dyn_bounds__B_2__f_simple_2__result4)))
(check-sat)
(exit)
