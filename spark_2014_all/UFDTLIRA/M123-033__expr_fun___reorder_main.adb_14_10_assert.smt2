(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun g1 (tuple0) Int)
(declare-fun g1__function_guard (Int tuple0) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (g1 us_void_param) true false true true) :pattern ((g1 us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (g1 us_void_param) 1) :pattern ((g1 us_void_param)))))
(declare-fun g2 (tuple0) Int)
(declare-fun g2__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (g2 us_void_param) true false true true) :pattern ((g2 us_void_param)))))
(declare-fun g3 (tuple0) Int)
(declare-fun g3__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (g3 us_void_param) true false true true) :pattern ((g3 us_void_param)))))
(declare-fun g4 (tuple0) Int)
(declare-fun g4__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (g4 us_void_param) true false true true) :pattern ((g4 us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (g4 us_void_param) (- (+ (g1 Tuple0) (g3 Tuple0)) 1)) :pattern ((g4 us_void_param)))))
(declare-fun f1 (tuple0) Int)
(declare-fun f1__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (f1 us_void_param) true false true true) :pattern ((f1 us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (f1 us_void_param) 1) :pattern ((f1 us_void_param)))))
(declare-fun f2 (tuple0) Int)
(declare-fun f2__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (f2 us_void_param) true false true true) :pattern ((f2 us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (f2 us_void_param) (- (+ (f1 Tuple0) (g1 Tuple0)) 1)) :pattern ((f2 us_void_param)))))
(declare-fun f3 (tuple0) Int)
(declare-fun f3__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (f3 us_void_param) true false true true) :pattern ((f3 us_void_param)))))
(declare-fun f4 (tuple0) Int)
(declare-fun f4__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (f4 us_void_param) true false true true) :pattern ((f4 us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (f4 us_void_param) (- (+ (f3 Tuple0) (g3 Tuple0)) 1)) :pattern ((f4 us_void_param)))))
(declare-fun value (tuple0) Int)
(declare-fun value__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (value us_void_param) true false true true) :pattern ((value us_void_param)))))
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Bool)
(assert (and (= o (value Tuple0)) (in_range o)))
(assert (= result (ite (= o 0) true false)))
(assert (not (= result true)))
(assert (and (= o1 (value Tuple0)) (in_range o1)))
(assert (= result1 (ite (= o1 1) true false)))
(assert (not (= result1 true)))
(assert (and (= o2 (value Tuple0)) (in_range o2)))
(assert (= result2 (ite (= o2 2) true false)))
(assert (not (= result2 true)))
(assert (and (= o3 (value Tuple0)) (in_range o3)))
(assert (= result3 (ite (= o3 3) true false)))
(assert (= result3 true))
(assert (not (= (f4 Tuple0) 1)))
(check-sat)
(exit)
