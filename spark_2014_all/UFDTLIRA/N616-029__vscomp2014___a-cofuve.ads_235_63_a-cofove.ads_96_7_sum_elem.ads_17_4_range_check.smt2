(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort tcount_typeB 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (tcount_typeB tcount_typeB) Bool)
(declare-const dummy tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-sort index_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index_type index_type) Bool)
(declare-const dummy1 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___2__projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant ((temp___expr_244 Int) (temp___is_init_241 Bool) (temp___skip_constant_242 Bool) (temp___do_toplevel_243 Bool)) Bool (=> (or (= temp___is_init_241 true) (<= 0 10000)) (in_range2 temp___expr_244)))
(declare-sort extended_index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (extended_index extended_index) Bool)
(declare-const dummy2 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant1 ((temp___expr_258 Int) (temp___is_init_255 Bool) (temp___skip_constant_256 Bool) (temp___do_toplevel_257 Bool)) Bool (=> (or (= temp___is_init_255 true) (<= (- 1) 10000)) (in_range3 temp___expr_258)))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (index index) Bool)
(declare-const dummy4 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-fun to_rep (index) Int)
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__sum_elem__interval__first index) (rec__sum_elem__interval__last index)))))
(define-fun us_split_fields_First__projection ((a us_split_fields)) index (rec__sum_elem__interval__first a))
(define-fun us_split_fields_Last__projection ((a us_split_fields)) index (rec__sum_elem__interval__last a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__sum_elem__interval__first (us_split_fields1 a))) (to_rep (rec__sum_elem__interval__first (us_split_fields1 b)))) (= (to_rep (rec__sum_elem__interval__last (us_split_fields1 a))) (to_rep (rec__sum_elem__interval__last (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const sum_elem__interval__first__first__bit Int)
(declare-const sum_elem__interval__first__last__bit Int)
(declare-const sum_elem__interval__first__position Int)
(assert (<= 0 sum_elem__interval__first__first__bit))
(assert (< sum_elem__interval__first__first__bit sum_elem__interval__first__last__bit))
(assert (<= 0 sum_elem__interval__first__position))
(declare-const sum_elem__interval__last__first__bit Int)
(declare-const sum_elem__interval__last__last__bit Int)
(declare-const sum_elem__interval__last__position Int)
(assert (<= 0 sum_elem__interval__last__first__bit))
(assert (< sum_elem__interval__last__first__bit sum_elem__interval__last__last__bit))
(assert (<= 0 sum_elem__interval__last__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((interval__ref (mk_interval__ref (interval__content us_rep1)))))
(define-fun interval__ref___projection ((a interval__ref)) us_rep1 (interval__content a))
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content us_rep1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref)) us_rep1 (element_type__content a))
(define-fun last ((container us_rep)) Int (+ (- 1) (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) us_rep1)
(declare-fun get__function_guard (us_rep1 us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 0 n) (<= n (last left))) (= (bool_eq1 (get left n) (get right n)) true))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(define-fun default_initial_assumption ((temp___expr_265 us_rep) (temp___skip_top_level_266 Bool)) Bool (=> (not (= temp___skip_top_level_266 true)) (= (length temp___expr_265) 0)))
(declare-sort count_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (count_type count_type) Bool)
(declare-const dummy6 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 0 2147483647)) (in_range5 temp___expr_141)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ (- 1) result) 10000) (dynamic_invariant2 result true false true))) :pattern ((length container)))))
(declare-const left us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const right us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const fst Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const lst Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const offset Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant3 ((temp___expr_189 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool)) Bool (=> (or (= temp___is_init_186 true) (<= 0 5)) (in_range4 temp___expr_189)))
(assert true)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Bool)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const result Bool)
(declare-const result1 Bool)
(assert (in_range2 fst))
(assert (in_range3 lst))
(assert (in_range1 offset))
(assert (and (= o8 (last left)) (and (in_range3 o8) (= o8 (+ (- 1) (length left))))))
(assert (= result (ite (<= lst o8) true false)))
(assert (= result true))
(assert (=> (< offset 0) (and (= o7 (- (- 32768) offset)) (in_range1 (- (- 32768) offset)))))
(assert (=> (< offset 0) (= result1 (ite (<= o7 0) true false))))
(assert (=> (not (< offset 0)) (= result1 (of_int 1))))
(assert (= result1 true))
(assert (<= fst lst))
(assert (and (= o2 lst) (in_range1 lst)))
(assert (and (= o1 (length right)) (and (in_range5 o1) (<= (+ (- 1) o1) 10000))))
(assert (= o3 (+ (- 1) o1)))
(assert (= o4 (- o3 o2)))
(assert (and (= o5 o4) (in_range1 o4)))
(assert (= o6 (ite (<= offset o5) true false)))
(assert (not (in_range1 fst)))
(check-sat)
(exit)
