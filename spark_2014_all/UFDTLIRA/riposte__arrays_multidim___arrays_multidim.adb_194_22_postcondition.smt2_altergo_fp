(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type index

predicate in_range(x: int) = ((0 <= x) and (x <= 1001))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type value

predicate in_range1(x: int) = (((- 23) <= x) and (x <= 69))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : value, value -> bool

logic dummy1 : value

type value__ref = { value__content : value
}

function value__ref___projection(a: value__ref) : value = (a).value__content

logic to_rep : value -> int

logic of_rep : int -> value

axiom inversion_axiom : (forall x:value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int, int -> value

logic set : map, int, int, int, value -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall k:int.
  (forall a:value [set(m, i, j, k, a)]. (get(set(m, i, j, k, a), i, j,
  k) = a))))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall k:int. forall k2:int.
  (forall a:value [get(set(m, i, j, k, a), i2, j2, k2)| set(m, i, j, k, a),
  get(m, i2, j2, k2)]. ((not ((i = i2) and ((j = j2) and (k = k2)))) ->
  (get(set(m, i, j, k, a), i2, j2, k2) = get(m, i2, j2, k2))))))))

logic slide : map, int, int, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall old_first:int. forall new_first:int.
  (forall old_first_2:int. forall new_first_2:int.
  (forall old_first_3:int. forall new_first_3:int.
  (forall i:int.
  (forall j:int.
  (forall k:int [get(slide(a, old_first, new_first, old_first_2, new_first_2,
  old_first_3, new_first_3), i, j, k)]. (get(slide(a, old_first, new_first,
  old_first_2, new_first_2, old_first_3, new_first_3), i, j, k) = get(a,
  (i - (new_first - old_first)), (j - (new_first_2 - old_first_2)),
  (k - (new_first_3 - old_first_3)))))))))))

logic bool_eq3 : map, int, int, int, int, int, int, map, int, int, int, int,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall a__first_3:int.
  forall a__last_3:int. forall b:map. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int [bool_eq3(a, a__first, a__last,
  a__first_2, a__last_2, a__first_3, a__last_3, b, b__first, b__last,
  b__first_2, b__last_2, b__first_3, b__last_3)].
  ((((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (((a__first_3 <= a__last_3) and ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) or
  ((not (a__first_3 <= a__last_3)) and (b__last_3 <  b__first_3)))) and
  (forall temp___idx_158:int. forall temp___idx_159:int.
  forall temp___idx_160:int. ((((((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) and ((a__first_2 <= temp___idx_159) and
  (temp___idx_159 <= a__last_2))) and ((a__first_3 <= temp___idx_160) and
  (temp___idx_160 <= a__last_3))) and (to_rep(get(a, temp___idx_158,
  temp___idx_159, temp___idx_160)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_158),
  ((b__first_2 - a__first_2) + temp___idx_159),
  ((b__first_3 - a__first_3) + temp___idx_160))))) or
  (not ((((a__first <= temp___idx_158) and (temp___idx_158 <= a__last)) and
  ((a__first_2 <= temp___idx_159) and (temp___idx_159 <= a__last_2))) and
  ((a__first_3 <= temp___idx_160) and (temp___idx_160 <= a__last_3))))))) ->
  (bool_eq3(a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3, b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3) = true)) and ((not ((((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (((a__first_3 <= a__last_3) -> ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) and
  ((not (a__first_3 <= a__last_3)) -> (b__last_3 <  b__first_3)))) and
  (forall temp___idx_158:int. forall temp___idx_159:int.
  forall temp___idx_160:int. (((((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) and ((a__first_2 <= temp___idx_159) and
  (temp___idx_159 <= a__last_2))) and ((a__first_3 <= temp___idx_160) and
  (temp___idx_160 <= a__last_3))) -> (to_rep(get(a, temp___idx_158,
  temp___idx_159, temp___idx_160)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_158),
  ((b__first_2 - a__first_2) + temp___idx_159),
  ((b__first_3 - a__first_3) + temp___idx_160)))))))) -> (bool_eq3(a,
  a__first, a__last, a__first_2, a__last_2, a__first_3, a__last_3, b,
  b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq3(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (((a__first_3 <= a__last_3) -> ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) and
  ((not (a__first_3 <= a__last_3)) -> (b__last_3 <  b__first_3)))) and
  (forall temp___idx_158:int. forall temp___idx_159:int.
  forall temp___idx_160:int. (((((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) and ((a__first_2 <= temp___idx_159) and
  (temp___idx_159 <= a__last_2))) and ((a__first_3 <= temp___idx_160) and
  (temp___idx_160 <= a__last_3))) -> (to_rep(get(a, temp___idx_158,
  temp___idx_159, temp___idx_160)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_158),
  ((b__first_2 - a__first_2) + temp___idx_159),
  ((b__first_3 - a__first_3) + temp___idx_160))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "arrays_multidim.adb", line 179, characters 0-0 *)
goal WP_parameter_def :
  (forall a:map. forall tmp:int. forall o:value. forall o1:map.
  forall o2:value. forall o3:map. forall result:int. forall tmp1:int.
  forall result1:map. forall a1:map. forall result2:map. forall a2:map.
  forall a3:map. forall tmp2:int. forall a4:map. forall tmp3:int.
  ((in_range(i) and (in_range(j) and (in_range(k) and ((not (i = j)) and
  (((((- 23) <= 69) -> in_range1(tmp)) and (((result = tmp) and
  (tmp1 = to_rep(get(a, i, j, k)))) and ((((to_rep(o) = to_rep(get(a, j, i,
  k))) and (o1 = set(a, i, j, k, o))) and ((result1 = a) and (a1 = o1))) and
  (((to_rep(o2) = tmp1) and (o3 = set(a1, j, i, k, o2))) and
  ((result2 = a1) and (a2 = o3)))))) and (((tmp2 = tmp1) and (a2 = a3)) and
  ((tmp3 = tmp1) and (a4 = a2)))))))) -> (not (bool_eq3(a3, 0, 1001, 0, 1001,
  0, 1001, a, 0, 1001, 0, 1001, 0, 1001) = true))))
