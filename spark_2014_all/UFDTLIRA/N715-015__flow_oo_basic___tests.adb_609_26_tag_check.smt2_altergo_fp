(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)]. (bool_eq(a, b) = true))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__size({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__alignment({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_private

logic dummy1 : int

type root_t__ref = { root_t__content : us_rep
}

function root_t__ref___projection(a: root_t__ref) : us_rep =
  (a).root_t__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields2 = { rec__foo__widget_t__x : integer;
rec__foo__widget_t__y : integer; rec__ext__1 : us_private
}

function us_split_fields_X__projection(a: us_split_fields2) : integer =
  (a).rec__foo__widget_t__x

function us_split_fields_Y__projection(a: us_split_fields2) : integer =
  (a).rec__foo__widget_t__y

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, integer, us_private -> us_private

logic extract__x : us_private -> integer

axiom extract__x__conv :
  (forall x:integer. forall y:integer.
  (forall rec__ext__2:us_private. (extract__x(hide_ext__(x, y,
  rec__ext__2)) = x)))

logic extract__y : us_private -> integer

axiom extract__y__conv :
  (forall x:integer. forall y:integer.
  (forall rec__ext__2:us_private. (extract__y(hide_ext__(x, y,
  rec__ext__2)) = y)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__foo__widget_t__x,
  ((a).us_split_fields3).rec__foo__widget_t__y,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__foo__widget_t__x = extract__x(((r).us_split_fields1).rec__ext__);
  rec__foo__widget_t__y = extract__y(((r).us_split_fields1).rec__ext__);
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__foo__widget_t__x) = to_rep(((b).us_split_fields3).rec__foo__widget_t__x)) and
  (to_rep(((a).us_split_fields3).rec__foo__widget_t__y) = to_rep(((b).us_split_fields3).rec__foo__widget_t__y))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__foo__widget_t__x) = to_rep(((b).us_split_fields3).rec__foo__widget_t__x)) and
  (to_rep(((a).us_split_fields3).rec__foo__widget_t__y) = to_rep(((b).us_split_fields3).rec__foo__widget_t__y)))) ->
  (bool_eq3(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size1({ us_split_fields3 = { rec__foo__widget_t__x = a;
  rec__foo__widget_t__y = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment1({ us_split_fields3 = { rec__foo__widget_t__x = a;
  rec__foo__widget_t__y = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic foo__widget_t__x__first__bit : int

logic foo__widget_t__x__last__bit : int

logic foo__widget_t__x__position : int

axiom foo__widget_t__x__first__bit_axiom :
  (0 <= foo__widget_t__x__first__bit)

axiom foo__widget_t__x__last__bit_axiom :
  (foo__widget_t__x__first__bit <  foo__widget_t__x__last__bit)

axiom foo__widget_t__x__position_axiom : (0 <= foo__widget_t__x__position)

logic foo__widget_t__y__first__bit : int

logic foo__widget_t__y__last__bit : int

logic foo__widget_t__y__position : int

axiom foo__widget_t__y__first__bit_axiom :
  (0 <= foo__widget_t__y__first__bit)

axiom foo__widget_t__y__last__bit_axiom :
  (foo__widget_t__y__first__bit <  foo__widget_t__y__last__bit)

axiom foo__widget_t__y__position_axiom : (0 <= foo__widget_t__y__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : us_private

logic dummy6 : int

type widget_t__ref = { widget_t__content : us_rep1
}

function widget_t__ref___projection(a: widget_t__ref) : us_rep1 =
  (a).widget_t__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq4 : bool, bool -> bool

axiom bool_eq_def3 :
  (forall x:bool. forall y:bool [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type us_split_fields4 = { rec__foo__nice_widget_t__round : bool;
rec__foo__widget_t__x1 : integer; rec__foo__widget_t__y1 : integer;
rec__ext__2 : us_private
}

function us_split_fields_Round__projection(a: us_split_fields4) : bool =
  (a).rec__foo__nice_widget_t__round

function us_split_fields_X__2__projection(a: us_split_fields4) : integer =
  (a).rec__foo__widget_t__x1

function us_split_fields_Y__2__projection(a: us_split_fields4) : integer =
  (a).rec__foo__widget_t__y1

function us_split_fields___3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag2 : int
}

function us_rep___5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___6__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : bool, integer, integer, us_private -> us_private

logic extract__round : us_private -> bool

axiom extract__round__conv :
  (forall round:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__3:us_private. (to_int(extract__round(hide_ext__1(round,
  x, y, rec__ext__3))) = to_int(round)))))

axiom extract__x__conv1 :
  (forall round:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__3:us_private. (extract__x(hide_ext__1(round, x, y,
  rec__ext__3)) = x))))

axiom extract__y__conv1 :
  (forall round:bool.
  (forall x:integer. forall y:integer.
  (forall rec__ext__3:us_private. (extract__y(hide_ext__1(round, x, y,
  rec__ext__3)) = y))))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__foo__nice_widget_t__round,
  ((a).us_split_fields5).rec__foo__widget_t__x1,
  ((a).us_split_fields5).rec__foo__widget_t__y1,
  ((a).us_split_fields5).rec__ext__2) }; attr__tag = (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_fields5 = {
  rec__foo__nice_widget_t__round =
  extract__round(((r).us_split_fields1).rec__ext__); rec__foo__widget_t__x1 =
  extract__x(((r).us_split_fields1).rec__ext__); rec__foo__widget_t__y1 =
  extract__y(((r).us_split_fields1).rec__ext__); rec__ext__2 =
  extract__ext__1(((r).us_split_fields1).rec__ext__) }; attr__tag2 =
  (r).attr__tag }

logic bool_eq5 : us_rep2, us_rep2 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq5(a, b)].
  (((((((a).us_split_fields5).rec__foo__nice_widget_t__round = ((b).us_split_fields5).rec__foo__nice_widget_t__round) and
  (to_rep(((a).us_split_fields5).rec__foo__widget_t__x1) = to_rep(((b).us_split_fields5).rec__foo__widget_t__x1))) and
  (to_rep(((a).us_split_fields5).rec__foo__widget_t__y1) = to_rep(((b).us_split_fields5).rec__foo__widget_t__y1))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((((a).us_split_fields5).rec__foo__nice_widget_t__round = ((b).us_split_fields5).rec__foo__nice_widget_t__round) and
  (to_rep(((a).us_split_fields5).rec__foo__widget_t__x1) = to_rep(((b).us_split_fields5).rec__foo__widget_t__x1))) and
  (to_rep(((a).us_split_fields5).rec__foo__widget_t__y1) = to_rep(((b).us_split_fields5).rec__foo__widget_t__y1)))) ->
  (bool_eq5(a, b) = false))))

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:us_private.
  forall a4:int. (0 <= object__size2({ us_split_fields5 = {
  rec__foo__nice_widget_t__round = a; rec__foo__widget_t__x1 = a1;
  rec__foo__widget_t__y1 = a2; rec__ext__2 = a3 }; attr__tag2 = a4 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:integer. forall a2:integer. forall a3:us_private.
  forall a4:int. (0 <= object__alignment2({ us_split_fields5 = {
  rec__foo__nice_widget_t__round = a; rec__foo__widget_t__x1 = a1;
  rec__foo__widget_t__y1 = a2; rec__ext__2 = a3 }; attr__tag2 = a4 })))

logic foo__nice_widget_t__round__first__bit : int

logic foo__nice_widget_t__round__last__bit : int

logic foo__nice_widget_t__round__position : int

axiom foo__nice_widget_t__round__first__bit_axiom :
  (0 <= foo__nice_widget_t__round__first__bit)

axiom foo__nice_widget_t__round__last__bit_axiom :
  (foo__nice_widget_t__round__first__bit <  foo__nice_widget_t__round__last__bit)

axiom foo__nice_widget_t__round__position_axiom :
  (0 <= foo__nice_widget_t__round__position)

logic foo__widget_t__x__first__bit1 : int

logic foo__widget_t__x__last__bit1 : int

logic foo__widget_t__x__position1 : int

axiom foo__widget_t__x__first__bit_axiom1 :
  (0 <= foo__widget_t__x__first__bit1)

axiom foo__widget_t__x__last__bit_axiom1 :
  (foo__widget_t__x__first__bit1 <  foo__widget_t__x__last__bit1)

axiom foo__widget_t__x__position_axiom1 : (0 <= foo__widget_t__x__position1)

logic foo__widget_t__y__first__bit1 : int

logic foo__widget_t__y__last__bit1 : int

logic foo__widget_t__y__position1 : int

axiom foo__widget_t__y__first__bit_axiom1 :
  (0 <= foo__widget_t__y__first__bit1)

axiom foo__widget_t__y__last__bit_axiom1 :
  (foo__widget_t__y__first__bit1 <  foo__widget_t__y__last__bit1)

axiom foo__widget_t__y__position_axiom1 : (0 <= foo__widget_t__y__position1)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy7 : bool

logic dummy8 : integer

logic dummy9 : integer

logic dummy10 : us_private

logic dummy11 : int

type nice_widget_t__ref = { nice_widget_t__content : us_rep2
}

function nice_widget_t__ref___projection(a: nice_widget_t__ref) : us_rep2 =
  (a).nice_widget_t__content

type us_split_fields6 = { rec__tests__pair__a : us_rep1; rec__tests__pair__b
: us_rep2
}

function us_split_fields_A__projection(a: us_split_fields6) : us_rep1 =
  (a).rec__tests__pair__a

function us_split_fields_B__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__tests__pair__b

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___11__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq6 : us_rep3, us_rep3 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq6(a, b)].
  ((((bool_eq3(((a).us_split_fields7).rec__tests__pair__a,
  ((b).us_split_fields7).rec__tests__pair__a) = true) and
  (bool_eq5(((a).us_split_fields7).rec__tests__pair__b,
  ((b).us_split_fields7).rec__tests__pair__b) = true)) -> (bool_eq6(a,
  b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields7).rec__tests__pair__a,
  ((b).us_split_fields7).rec__tests__pair__a) = true) and
  (bool_eq5(((a).us_split_fields7).rec__tests__pair__b,
  ((b).us_split_fields7).rec__tests__pair__b) = true))) -> (bool_eq6(a,
  b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  forall a4:bool. forall a5:integer. forall a6:integer. forall a7:us_private.
  forall a8:int. (0 <= object__size3({ us_split_fields7 = {
  rec__tests__pair__a = { us_split_fields3 = { rec__foo__widget_t__x = a;
  rec__foo__widget_t__y = a1; rec__ext__1 = a2 }; attr__tag1 = a3 };
  rec__tests__pair__b = { us_split_fields5 = {
  rec__foo__nice_widget_t__round = a4; rec__foo__widget_t__x1 = a5;
  rec__foo__widget_t__y1 = a6; rec__ext__2 = a7 }; attr__tag2 = a8 } } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  forall a4:bool. forall a5:integer. forall a6:integer. forall a7:us_private.
  forall a8:int. (0 <= object__alignment3({ us_split_fields7 = {
  rec__tests__pair__a = { us_split_fields3 = { rec__foo__widget_t__x = a;
  rec__foo__widget_t__y = a1; rec__ext__1 = a2 }; attr__tag1 = a3 };
  rec__tests__pair__b = { us_split_fields5 = {
  rec__foo__nice_widget_t__round = a4; rec__foo__widget_t__x1 = a5;
  rec__foo__widget_t__y1 = a6; rec__ext__2 = a7 }; attr__tag2 = a8 } } })))

logic tests__pair__a__first__bit : int

logic tests__pair__a__last__bit : int

logic tests__pair__a__position : int

axiom tests__pair__a__first__bit_axiom : (0 <= tests__pair__a__first__bit)

axiom tests__pair__a__last__bit_axiom :
  (tests__pair__a__first__bit <  tests__pair__a__last__bit)

axiom tests__pair__a__position_axiom : (0 <= tests__pair__a__position)

logic tests__pair__b__first__bit : int

logic tests__pair__b__last__bit : int

logic tests__pair__b__position : int

axiom tests__pair__b__first__bit_axiom : (0 <= tests__pair__b__first__bit)

axiom tests__pair__b__last__bit_axiom :
  (tests__pair__b__first__bit <  tests__pair__b__last__bit)

axiom tests__pair__b__position_axiom : (0 <= tests__pair__b__position)

logic user_eq4 : us_rep3, us_rep3 -> bool

logic dummy12 : integer

logic dummy13 : integer

logic dummy14 : us_private

logic dummy15 : int

logic dummy16 : bool

logic dummy17 : integer

logic dummy18 : integer

logic dummy19 : us_private

logic dummy20 : int

type pair__ref = { pair__content : us_rep3
}

function pair__ref___projection(a: pair__ref) : us_rep3 = (a).pair__content

logic a__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic nw : bool

logic nw1 : integer

logic nw2 : integer

logic nw3 : us_private

logic nw4 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c : integer

logic c1 : integer

logic c2 : us_private

logic c3 : int

logic c4 : bool

logic c5 : integer

logic c6 : integer

logic c7 : us_private

logic c8 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic d__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic e__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic f__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic g__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic h__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic a__split_fields : integer

logic a__split_fields1 : integer

logic a__split_fields2 : us_private

logic b__split_fields : integer

logic b__split_fields1 : integer

logic b__split_fields2 : us_private

logic b__split_fields3 : int

logic b__split_fields4 : bool

logic b__split_fields5 : integer

logic b__split_fields6 : integer

logic b__split_fields7 : us_private

logic b__split_fields8 : int

logic d__split_fields : integer

logic d__split_fields1 : integer

logic d__split_fields2 : us_private

logic e__split_fields : integer

logic e__split_fields1 : integer

logic e__split_fields2 : us_private

logic f__split_fields : integer

logic f__split_fields1 : integer

logic f__split_fields2 : us_private

logic g__split_fields : integer

logic g__split_fields1 : integer

logic g__split_fields2 : us_private

logic usq_ : integer

logic usq_1 : integer

logic usq_2 : us_private

logic usq_3 : int

logic temp___451 : integer

logic temp___4511 : integer

logic temp___4512 : us_private

logic temp___4513 : int

logic usq_4 : integer

logic usq_5 : integer

logic usq_6 : us_private

logic usq_7 : int

logic temp___453 : integer

logic temp___4531 : integer

logic temp___4532 : us_private

logic temp___4533 : int

logic usq_8 : integer

logic usq_9 : integer

logic usq_10 : us_private

logic usq_11 : int

logic temp___455 : integer

logic temp___4551 : integer

logic temp___4552 : us_private

logic temp___4553 : int

logic result : integer

logic result1 : integer

logic result2 : us_private

logic result3 : int

logic result4 : bool

logic result5 : integer

logic result6 : integer

logic result7 : us_private

logic result8 : int

logic b__split_fields9 : integer

logic b__split_fields10 : integer

logic b__split_fields11 : us_private

logic b__split_fields12 : int

logic b__split_fields13 : bool

logic b__split_fields14 : integer

logic b__split_fields15 : integer

logic b__split_fields16 : us_private

logic b__split_fields17 : int

logic result9 : integer

logic result10 : integer

logic result11 : us_private

logic result12 : int

logic result13 : bool

logic result14 : integer

logic result15 : integer

logic result16 : us_private

logic result17 : int

logic b__split_fields18 : integer

logic b__split_fields19 : integer

logic b__split_fields20 : us_private

logic b__split_fields21 : int

logic b__split_fields22 : bool

logic b__split_fields23 : integer

logic b__split_fields24 : integer

logic b__split_fields25 : us_private

logic b__split_fields26 : int

logic result18 : integer

logic result19 : integer

logic result20 : us_private

logic a__split_fields3 : integer

logic a__split_fields4 : integer

logic a__split_fields5 : us_private

logic result21 : integer

logic result22 : integer

logic result23 : us_private

logic d__split_fields3 : integer

logic d__split_fields4 : integer

logic d__split_fields5 : us_private

logic result24 : integer

logic result25 : integer

logic result26 : us_private

logic e__split_fields3 : integer

logic e__split_fields4 : integer

logic e__split_fields5 : us_private

logic result27 : integer

logic result28 : integer

logic result29 : us_private

logic f__split_fields3 : integer

logic f__split_fields4 : integer

logic f__split_fields5 : us_private

logic result30 : integer

logic result31 : integer

logic result32 : us_private

logic g__split_fields3 : integer

logic g__split_fields4 : integer

logic g__split_fields5 : us_private

axiom H : ((((result = b__split_fields) and ((result1 = b__split_fields1) and
  (result2 = b__split_fields2))) and (result3 = b__split_fields3)) and
  (((result4 = b__split_fields4) and ((result5 = b__split_fields5) and
  ((result6 = b__split_fields6) and (result7 = b__split_fields7)))) and
  (result8 = b__split_fields8)))

axiom H1 : ((((b__split_fields9 = a__split_fields) and
  ((b__split_fields10 = a__split_fields1) and
  (b__split_fields11 = a__split_fields2))) and
  (b__split_fields12 = b__split_fields3)) and
  (((b__split_fields13 = b__split_fields4) and
  ((b__split_fields14 = b__split_fields5) and
  ((b__split_fields15 = b__split_fields6) and
  (b__split_fields16 = b__split_fields7)))) and
  (b__split_fields17 = b__split_fields8)))

axiom H2 : ((((result9 = b__split_fields9) and
  ((result10 = b__split_fields10) and (result11 = b__split_fields11))) and
  (result12 = b__split_fields12)) and (((result13 = b__split_fields13) and
  ((result14 = b__split_fields14) and ((result15 = b__split_fields15) and
  (result16 = b__split_fields16)))) and (result17 = b__split_fields17)))

axiom H3 : ((((b__split_fields18 = b__split_fields9) and
  ((b__split_fields19 = b__split_fields10) and
  (b__split_fields20 = b__split_fields11))) and
  (b__split_fields21 = b__split_fields12)) and (({
  rec__foo__nice_widget_t__round = b__split_fields22;
  rec__foo__widget_t__x1 = b__split_fields23; rec__foo__widget_t__y1 =
  b__split_fields24; rec__ext__2 = b__split_fields25 } = (of_base1({
  us_split_fields1 = { rec__ext__ = hide_ext__(a__split_fields,
  a__split_fields1, a__split_fields2) }; attr__tag = a__attr__tag
  })).us_split_fields5) and (b__split_fields26 = b__split_fields17)))

axiom H4 : ((result18 = a__split_fields) and
  ((result19 = a__split_fields1) and (result20 = a__split_fields2)))

axiom H5 : ((a__split_fields3 = c) and ((a__split_fields4 = c1) and
  (a__split_fields5 = c2)))

axiom H6 : ((result21 = d__split_fields) and
  ((result22 = d__split_fields1) and (result23 = d__split_fields2)))

axiom H7 : ((d__split_fields3 = c) and ((d__split_fields4 = c1) and
  (d__split_fields5 = c2)))

axiom H8 : (e__attr__tag = c3)

axiom H9 : (((usq_ = c) and ((usq_1 = c1) and (usq_2 = c2))) and
  (usq_3 = c3))

axiom H10 : (usq_ = temp___451)

axiom H11 : (usq_1 = temp___4511)

axiom H12 : (usq_2 = temp___4512)

axiom H13 : (e__attr__tag = temp___4513)

axiom H14 : ((result24 = e__split_fields) and
  ((result25 = e__split_fields1) and (result26 = e__split_fields2)))

axiom H15 : ((e__split_fields3 = temp___451) and
  ((e__split_fields4 = temp___4511) and (e__split_fields5 = temp___4512)))

axiom H16 : (f__attr__tag = a__attr__tag)

axiom H17 : (((usq_4 = a__split_fields3) and ((usq_5 = a__split_fields4) and
  (usq_6 = a__split_fields5))) and (usq_7 = a__attr__tag))

axiom H18 : (((temp___453 = usq_4) and ((temp___4531 = usq_5) and
  (temp___4532 = usq_6))) and (temp___4533 = f__attr__tag))

axiom H19 : ((result27 = f__split_fields) and
  ((result28 = f__split_fields1) and (result29 = f__split_fields2)))

axiom H20 : ((f__split_fields3 = temp___453) and
  ((f__split_fields4 = temp___4531) and (f__split_fields5 = temp___4532)))

axiom H21 : (g__attr__tag = (of_base({ us_split_fields1 = { rec__ext__ =
  hide_ext__1(c4, c5, c6, c7) }; attr__tag = c8 })).attr__tag1)

axiom H22 : ({ us_split_fields3 = { rec__foo__widget_t__x = usq_8;
  rec__foo__widget_t__y = usq_9; rec__ext__1 = usq_10 }; attr__tag1 = usq_11
  } = of_base({ us_split_fields1 = { rec__ext__ = hide_ext__1(c4, c5, c6, c7)
  }; attr__tag = c8 }))

axiom H23 : (((temp___455 = usq_8) and ((temp___4551 = usq_9) and
  (temp___4552 = usq_10))) and (temp___4553 = g__attr__tag))

axiom H24 : ((result30 = g__split_fields) and
  ((result31 = g__split_fields1) and (result32 = g__split_fields2)))

axiom H25 : ((g__split_fields3 = temp___455) and
  ((g__split_fields4 = temp___4551) and (g__split_fields5 = temp___4552)))

 (* File "tests.adb", line 573, characters 0-0 *)
goal WP_parameter_def : (h__attr__tag = (of_base({ us_split_fields1 = {
  rec__ext__ = hide_ext__1(nw, nw1, nw2, nw3) }; attr__tag = nw4
  })).attr__tag1)
