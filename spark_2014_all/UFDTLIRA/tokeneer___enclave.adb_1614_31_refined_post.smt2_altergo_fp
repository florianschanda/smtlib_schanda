(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic privatekeypresent : us_private -> bool

logic privatekeypresent__function_guard : bool, us_private -> prop

axiom privatekeypresent__post_axiom : true

type statust

predicate in_range1(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : statust, statust -> bool

logic dummy : statust

type statust__ref = { statust__content : statust
}

function statust__ref___2__projection(a: statust__ref) : statust =
  (a).statust__content

logic attr__ATTRIBUTE_ADDRESS : int

logic statusisenclavequiescent : int -> bool

logic statusisenclavequiescent__function_guard : bool, int -> prop

axiom statusisenclavequiescent__post_axiom : true

axiom statusisenclavequiescent__def_axiom :
  (forall enclave__status:int [statusisenclavequiescent(enclave__status)].
  ((statusisenclavequiescent(enclave__status) = true) <->
  (enclave__status = 3)))

logic enrolmentisinprogress : int -> bool

logic enrolmentisinprogress__function_guard : bool, int -> prop

type enrolmentstates

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : enrolmentstates, enrolmentstates -> bool

logic dummy1 : enrolmentstates

type enrolmentstates__ref = { enrolmentstates__content : enrolmentstates
}

function enrolmentstates__ref___projection(a: enrolmentstates__ref) : enrolmentstates =
  (a).enrolmentstates__content

axiom enrolmentisinprogress__post_axiom : true

axiom enrolmentisinprogress__def_axiom :
  (forall enclave__status:int [enrolmentisinprogress(enclave__status)].
  ((enrolmentisinprogress(enclave__status) = true) <->
  in_range2(enclave__status)))

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "enclave.adb", line 1572, characters 0-0 *)
goal WP_parameter_def :
  (forall status:int. forall localstatus:int. forall state:us_private.
  forall store1:us_private. forall state1:us_private. forall o:int.
  forall state2:us_private. forall store2:us_private.
  forall state3:us_private. forall result:int. forall localstatus1:int.
  forall status1:int. forall state4:us_private. forall filestate:us_private.
  forall state5:us_private. forall state6:us_private.
  forall state7:us_private. forall status2:int. forall state8:us_private.
  forall filestate1:us_private. forall state9:us_private.
  forall store3:us_private. forall state10:us_private.
  forall state11:us_private. forall status3:int. forall state12:us_private.
  forall filestate2:us_private. forall state13:us_private.
  forall state14:us_private. forall status4:int. forall localstatus2:int.
  forall state15:us_private. forall filestate3:us_private.
  forall state16:us_private. forall store4:us_private.
  forall state17:us_private. forall state18:us_private.
  forall state19:us_private. forall status5:int. forall localstatus3:int.
  forall state20:us_private. forall filestate4:us_private.
  forall state21:us_private. forall store5:us_private.
  forall state22:us_private. forall state23:us_private.
  forall state24:us_private. (in_range1(status) ->
  (((enrolmentisinprogress(status) = true) and
  (not (privatekeypresent(state) = true))) -> (((((0 <= 2) ->
  in_range2(localstatus)) and ((((o = status) and in_range2(status)) and (({
  int__content = result } = { int__content = localstatus }) and
  (localstatus1 = o))) and (((localstatus1 = 0) and ((in_range2(status1) and
  in_range1(status1)) and (((store3 = store1) and (state9 = state)) and
  ((store3 = store2) and (state9 = state2))))) or
  ((not (localstatus1 = 0)) and ((((localstatus1 = 1) and
  ((((status2 = 3) and (privatekeypresent(state9) = true)) or
  ((status2 = 2) and (not (privatekeypresent(state9) = true)))) and
  in_range1(status2))) or ((not (localstatus1 = 1)) and ((((status3 = 2) or
  (status3 = 0)) and in_range1(status3)) and (((state11 = state14) and
  ((state10 = state13) and ((store3 = store1) and ((state9 = state) and
  ((filestate1 = filestate2) and ((state8 = state12) and
  (status2 = status3))))))) and ((state11 = state14) and
  ((state10 = state13) and ((store3 = store2) and ((state9 = state2) and
  ((filestate1 = filestate2) and ((state8 = state12) and
  (status2 = status3))))))))))) and (((state7 = state11) and
  ((state6 = state1) and ((state5 = state10) and
  ((filestate = filestate1) and ((state4 = state8) and
  (status1 = status2)))))) and ((state7 = state11) and ((state6 = state3) and
  ((state5 = state10) and ((filestate = filestate1) and
  ((state4 = state8) and (status1 = status2)))))))))))) and
  (((state19 = state7) and ((state18 = state6) and ((state17 = state5) and
  ((store4 = store3) and ((state9 = state16) and
  ((filestate3 = filestate) and ((state15 = state4) and
  ((localstatus2 = localstatus1) and (status1 = status4))))))))) and
  ((state24 = state7) and ((state23 = state6) and ((state22 = state5) and
  ((store5 = store3) and ((state21 = state9) and
  ((filestate4 = filestate) and ((state20 = state4) and
  ((localstatus3 = localstatus1) and (status5 = status1))))))))))) ->
  ((privatekeypresent(state16) = true) ->
  (not (enrolmentisinprogress(status4) = true)))))))
