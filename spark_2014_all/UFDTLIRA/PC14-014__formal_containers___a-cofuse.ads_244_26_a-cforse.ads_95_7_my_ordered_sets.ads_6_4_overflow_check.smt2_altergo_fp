(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type tcount_typeB

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq2 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type set__ref = { set__content : us_rep
}

function set__ref___2__projection(a: set__ref) : us_rep = (a).set__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : count_type, count_type -> bool

logic dummy2 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom length__post_axiom :
  (forall container:us_rep [length(container)]. in_range1(length(container)))

logic num_overlaps : us_rep, us_rep -> int

logic num_overlaps__function_guard : int, us_rep, us_rep -> prop

logic ole : us_rep, us_rep -> bool

logic ole__function_guard : bool, us_rep, us_rep -> prop

logic no_overlap : us_rep, us_rep -> bool

logic no_overlap__function_guard : bool, us_rep, us_rep -> prop

logic intersection : us_rep, us_rep -> us_rep

logic intersection__function_guard : us_rep, us_rep, us_rep -> prop

axiom num_overlaps__post_axiom :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  (((((num_overlaps(left, right) = length(intersection(left, right))) and
  (((ole(left, right) = true) -> (num_overlaps(left,
  right) = length(left))) and ((not (ole(left, right) = true)) ->
  (num_overlaps(left, right) <  length(left))))) and (((ole(right,
  left) = true) -> (num_overlaps(left, right) = length(right))) and
  ((not (ole(right, left) = true)) -> (num_overlaps(left,
  right) <  length(right))))) and ((num_overlaps(left, right) = 0) <->
  (no_overlap(left, right) = true))) and in_range1(num_overlaps(left,
  right))))

logic left : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq4 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

logic equivalent_elements__function_guard : bool, int, int -> prop

type element_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : element_type, element_type -> bool

logic dummy3 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___2__projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic contains : us_rep, int -> bool

logic contains__function_guard : bool, us_rep, int -> prop

axiom contains__post_axiom :
  (forall container:us_rep.
  (forall item:int [contains(container, item)]. (in_range3(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range3(e) and (contains(container, e) = true)) and
   ((bool_lt(e, item) = false) and (bool_lt(item, e) = false)))) ->
  (contains(container, item) = true))))))

axiom ole__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [ole(left1, right1)].
  ((ole(left1, right1) = true) <->
  (forall item:int. ((in_range3(item) and (contains(left1, item) = true)) ->
  (contains(right1, item) = true)))))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:int. (not (in_range3(item) and (contains(container,
  item) = true))))) and ((is_empty(container) = true) <->
  (length(container) = 0))))

logic includes_intersection : us_rep, us_rep, us_rep -> bool

logic includes_intersection__function_guard : bool, us_rep, us_rep,
  us_rep -> prop

axiom includes_intersection__post_axiom :
  (forall container:us_rep. forall left1:us_rep. forall right1:us_rep
  [includes_intersection(container, left1, right1)].
  ((includes_intersection(container, left1, right1) = true) <->
  (forall item:int. ((in_range3(item) and (contains(left1, item) = true)) ->
  ((contains(right1, item) = true) -> (contains(container, item) = true))))))

axiom no_overlap__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [no_overlap(left1, right1)].
  ((no_overlap(left1, right1) = true) <->
  (forall item:int. ((in_range3(item) and (contains(left1, item) = true)) ->
  (not (contains(right1, item) = true))))))

axiom intersection__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [intersection(left1, right1)].
  (((ole(intersection(left1, right1), left1) = true) and
  (ole(intersection(left1, right1), right1) = true)) and
  (includes_intersection(intersection(left1, right1), left1,
  right1) = true)))

 (* File "a-cofuse.ads", line 218, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. forall o1:int. ((((o = length(right)) and in_range1(o)) and
  (o1 = (2147483647 - o))) -> in_range(o1)))
