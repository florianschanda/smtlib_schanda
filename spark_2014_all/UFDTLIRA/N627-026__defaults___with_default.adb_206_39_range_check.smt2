(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range temp___expr_33)))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun to_rep1 (positive) Int)
(declare-fun of_rep1 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x positive)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__with_default__bad_nested_defaults1__empty_rec__d positive)))))
(define-fun us_split_discrs___9__projection ((a us_split_discrs)) positive (rec__with_default__bad_nested_defaults1__empty_rec__d a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___9__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (attr__constrained Bool)))))
(define-fun us_rep___25__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___26__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep1 (rec__with_default__bad_nested_defaults1__empty_rec__d (us_split_discrs1 a))) (to_rep1 (rec__with_default__bad_nested_defaults1__empty_rec__d (us_split_discrs1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const with_default__bad_nested_defaults1__empty_rec__d__first__bit Int)
(declare-const with_default__bad_nested_defaults1__empty_rec__d__last__bit Int)
(declare-const with_default__bad_nested_defaults1__empty_rec__d__position Int)
(assert (<= 0 with_default__bad_nested_defaults1__empty_rec__d__first__bit))
(assert (< with_default__bad_nested_defaults1__empty_rec__d__first__bit with_default__bad_nested_defaults1__empty_rec__d__last__bit))
(assert (<= 0 with_default__bad_nested_defaults1__empty_rec__d__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((empty_rec__ref (mk_empty_rec__ref (empty_rec__content us_rep)))))
(define-fun empty_rec__ref___projection ((a empty_rec__ref)) us_rep (empty_rec__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__with_default__bad_nested_defaults1__non_init__e us_rep) (rec__with_default__bad_nested_defaults1__non_init__f natural)))))
(define-fun us_split_fields_E__projection ((a us_split_fields)) us_rep (rec__with_default__bad_nested_defaults1__non_init__e a))
(define-fun us_split_fields_F__projection ((a us_split_fields)) natural (rec__with_default__bad_nested_defaults1__non_init__f a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___27__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq (rec__with_default__bad_nested_defaults1__non_init__e (us_split_fields1 a)) (rec__with_default__bad_nested_defaults1__non_init__e (us_split_fields1 b))) true) (= (to_rep (rec__with_default__bad_nested_defaults1__non_init__f (us_split_fields1 a))) (to_rep (rec__with_default__bad_nested_defaults1__non_init__f (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const with_default__bad_nested_defaults1__non_init__e__first__bit Int)
(declare-const with_default__bad_nested_defaults1__non_init__e__last__bit Int)
(declare-const with_default__bad_nested_defaults1__non_init__e__position Int)
(assert (<= 0 with_default__bad_nested_defaults1__non_init__e__first__bit))
(assert (< with_default__bad_nested_defaults1__non_init__e__first__bit with_default__bad_nested_defaults1__non_init__e__last__bit))
(assert (<= 0 with_default__bad_nested_defaults1__non_init__e__position))
(declare-const with_default__bad_nested_defaults1__non_init__f__first__bit Int)
(declare-const with_default__bad_nested_defaults1__non_init__f__last__bit Int)
(declare-const with_default__bad_nested_defaults1__non_init__f__position Int)
(assert (<= 0 with_default__bad_nested_defaults1__non_init__f__first__bit))
(assert (< with_default__bad_nested_defaults1__non_init__f__first__bit with_default__bad_nested_defaults1__non_init__f__last__bit))
(assert (<= 0 with_default__bad_nested_defaults1__non_init__f__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((non_init__ref (mk_non_init__ref (non_init__content us_rep1)))))
(define-fun non_init__ref___projection ((a non_init__ref)) us_rep1 (non_init__content a))
(define-fun dynamic_invariant1 ((temp___expr_516 us_rep1) (temp___is_init_513 Bool) (temp___skip_constant_514 Bool) (temp___do_toplevel_515 Bool)) Bool (= (attr__constrained (rec__with_default__bad_nested_defaults1__non_init__e (us_split_fields1 temp___expr_516))) false))
(define-fun default_initial_assumption ((temp___expr_518 us_rep1) (temp___skip_top_level_519 Bool)) Bool (and (= (attr__constrained (rec__with_default__bad_nested_defaults1__non_init__e (us_split_fields1 temp___expr_518))) false) (= (to_rep1 (rec__with_default__bad_nested_defaults1__empty_rec__d (us_split_discrs1 (rec__with_default__bad_nested_defaults1__non_init__e (us_split_fields1 temp___expr_518))))) c)))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(define-fun default_initial_assumption1 ((temp___expr_510 us_rep) (temp___skip_top_level_511 Bool)) Bool (and (= (attr__constrained temp___expr_510) false) (= (to_rep1 (rec__with_default__bad_nested_defaults1__empty_rec__d (us_split_discrs1 temp___expr_510))) c)))
(declare-const temp___658 Int)
(assert (in_range c))
(assert (not (in_range1 c)))
(check-sat)
(exit)
