(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep (cursor__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ext__ us_private)))))
(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag a))
(declare-fun us_dispatch_eq (us_rep1 us_rep1) Bool)
(declare-const us_tag Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq1 (us_rep1 us_rep1) Bool)
(declare-const dummy1 us_rep1)
(declare-datatypes () ((limited_base_list__ref (mk_limited_base_list__ref (limited_base_list__content us_rep1)))))
(define-fun limited_base_list__ref___projection ((a limited_base_list__ref)) us_rep1 (limited_base_list__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list us_main_type1) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Nodes_List__projection ((a us_split_fields2)) us_main_type1 (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list a))
(define-fun us_split_fields___4__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___10__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___11__projection ((a us_rep2)) Int (attr__tag1 a))
(declare-fun hide_ext__ (us_main_type1 us_private) us_private)
(declare-fun extract__nodes_list (us_private) us_main_type1)
(assert (forall ((nodes_list us_main_type1)) (forall ((rec__ext__2 us_private)) (= (extract__nodes_list (hide_ext__ nodes_list rec__ext__2)) nodes_list))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep2)) us_rep1 (mk___rep (mk___split_fields (hide_ext__ (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep1)) us_rep2 (mk___rep1 (mk___split_fields1 (extract__nodes_list (rec__ext__ (us_split_fields1 r))) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(declare-const us_tag1 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq2 (us_rep2 us_rep2) Bool)
(declare-const dummy2 us_rep2)
(declare-datatypes () ((nodes_list__ref (mk_nodes_list__ref (nodes_list__content us_rep2)))))
(define-fun nodes_list__ref___projection ((a nodes_list__ref)) us_rep2 (nodes_list__content a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1 us_main_type1) (rec__use_lists__my_lists__element_lists__lists__list us_main_type2) (rec__ext__2 us_private)))))
(define-fun us_split_fields_Nodes_List__2__projection ((a us_split_fields4)) us_main_type1 (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1 a))
(define-fun us_split_fields_List__projection ((a us_split_fields4)) us_main_type2 (rec__use_lists__my_lists__element_lists__lists__list a))
(define-fun us_split_fields___5__projection ((a us_split_fields4)) us_private (rec__ext__2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4) (attr__tag2 Int)))))
(define-fun us_rep___12__projection ((a us_rep3)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___13__projection ((a us_rep3)) Int (attr__tag2 a))
(declare-fun hide_ext__1 (us_main_type1 us_main_type2 us_private) us_private)
(assert (forall ((nodes_list us_main_type1)) (forall ((list us_main_type2)) (forall ((rec__ext__3 us_private)) (= (extract__nodes_list (hide_ext__1 nodes_list list rec__ext__3)) nodes_list)))))
(declare-fun extract__list (us_private) us_main_type2)
(assert (forall ((nodes_list us_main_type1)) (forall ((list us_main_type2)) (forall ((rec__ext__3 us_private)) (= (extract__list (hide_ext__1 nodes_list list rec__ext__3)) list)))))
(declare-fun extract__ext__1 (us_private) us_private)
(define-fun to_base1 ((a us_rep3)) us_rep1 (mk___rep (mk___split_fields (hide_ext__1 (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1 (us_split_fields5 a)) (rec__use_lists__my_lists__element_lists__lists__list (us_split_fields5 a)) (rec__ext__2 (us_split_fields5 a)))) (attr__tag2 a)))
(define-fun of_base1 ((r us_rep1)) us_rep3 (mk___rep2 (mk___split_fields2 (extract__nodes_list (rec__ext__ (us_split_fields1 r))) (extract__list (rec__ext__ (us_split_fields1 r))) (extract__ext__1 (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(declare-const us_tag2 Int)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq3 (us_rep3 us_rep3) Bool)
(declare-const dummy3 us_rep3)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep3)))))
(define-fun list__ref___projection ((a list__ref)) us_rep3 (list__content a))
(declare-fun has_element (us_rep3 us_rep) Bool)
(declare-fun has_element__function_guard (Bool us_rep3 us_rep) Bool)
(declare-fun element (us_rep3 us_rep) Int)
(declare-fun element__function_guard (Int us_rep3 us_rep) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= (- 2147483648) (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq4 (element_type element_type) Bool)
(declare-const dummy4 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___5__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant ((temp___expr_447 Int) (temp___is_init_443 Bool) (temp___skip_constant_444 Bool) (temp___do_toplevel_445 Bool) (temp___do_typ_inv_446 Bool)) Bool (=> (or (= temp___is_init_443 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_447)))
(define-fun default_initial_assumption ((temp___expr_441 us_rep3) (temp___skip_top_level_442 Bool)) Bool (= (attr__tag2 temp___expr_441) us_tag2))
(declare-const self us_rep3)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const position us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun default_initial_assumption1 ((temp___expr_252 us_rep1) (temp___skip_top_level_253 Bool)) Bool (= (attr__tag temp___expr_252) us_tag))
(define-fun default_initial_assumption2 ((temp___expr_422 us_rep2) (temp___skip_top_level_423 Bool)) Bool (= (attr__tag1 temp___expr_422) us_tag1))
(assert (not (= (has_element self position) true)))
(check-sat)
(exit)
