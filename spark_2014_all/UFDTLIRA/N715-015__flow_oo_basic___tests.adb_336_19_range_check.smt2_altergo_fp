(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = {
rec__tests__test_15__record_with_mutable_discrs__present : bool
}

function us_split_discrs___3__projection(a: us_split_discrs) : bool =
  (a).rec__tests__test_15__record_with_mutable_discrs__present

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__tests__test_15__record_with_mutable_discrs__field : natural
}

function us_split_fields_Field__3__projection(a: us_split_fields) : natural =
  (a).rec__tests__test_15__record_with_mutable_discrs__field

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___16__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___17__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___18__projection(a: us_rep) : bool = (a).attr__constrained

predicate tests__test_15__record_with_mutable_discrs__field__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present) = 1)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((((a).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present = ((b).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present) and
  (tests__test_15__record_with_mutable_discrs__field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__tests__test_15__record_with_mutable_discrs__field) = to_rep(((b).us_split_fields1).rec__tests__test_15__record_with_mutable_discrs__field)))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present = ((b).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present) and
  (tests__test_15__record_with_mutable_discrs__field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__tests__test_15__record_with_mutable_discrs__field) = to_rep(((b).us_split_fields1).rec__tests__test_15__record_with_mutable_discrs__field))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size({
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic tests__test_15__record_with_mutable_discrs__present__first__bit : int

logic tests__test_15__record_with_mutable_discrs__present__last__bit : int

logic tests__test_15__record_with_mutable_discrs__present__position : int

axiom tests__test_15__record_with_mutable_discrs__present__first__bit_axiom :
  (0 <= tests__test_15__record_with_mutable_discrs__present__first__bit)

axiom tests__test_15__record_with_mutable_discrs__present__last__bit_axiom :
  (tests__test_15__record_with_mutable_discrs__present__first__bit <  tests__test_15__record_with_mutable_discrs__present__last__bit)

axiom tests__test_15__record_with_mutable_discrs__present__position_axiom :
  (0 <= tests__test_15__record_with_mutable_discrs__present__position)

logic tests__test_15__record_with_mutable_discrs__field__first__bit : int

logic tests__test_15__record_with_mutable_discrs__field__last__bit : int

logic tests__test_15__record_with_mutable_discrs__field__position : int

axiom tests__test_15__record_with_mutable_discrs__field__first__bit_axiom :
  (0 <= tests__test_15__record_with_mutable_discrs__field__first__bit)

axiom tests__test_15__record_with_mutable_discrs__field__last__bit_axiom :
  (tests__test_15__record_with_mutable_discrs__field__first__bit <  tests__test_15__record_with_mutable_discrs__field__last__bit)

axiom tests__test_15__record_with_mutable_discrs__field__position_axiom :
  (0 <= tests__test_15__record_with_mutable_discrs__field__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : bool

logic dummy2 : natural

logic dummy3 : bool

type record_with_mutable_discrs__ref = { record_with_mutable_discrs__content
: us_rep
}

function record_with_mutable_discrs__ref___2__projection(a: record_with_mutable_discrs__ref) : us_rep =
  (a).record_with_mutable_discrs__content

predicate in_range2(rec__tests__test_15__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__tests__test_15__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present)

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size1({
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic tests__test_15__record_with_mutable_discrs__present__first__bit1 : int

logic tests__test_15__record_with_mutable_discrs__present__last__bit1 : int

logic tests__test_15__record_with_mutable_discrs__present__position1 : int

axiom tests__test_15__record_with_mutable_discrs__present__first__bit_axiom1 :
  (0 <= tests__test_15__record_with_mutable_discrs__present__first__bit1)

axiom tests__test_15__record_with_mutable_discrs__present__last__bit_axiom1 :
  (tests__test_15__record_with_mutable_discrs__present__first__bit1 <  tests__test_15__record_with_mutable_discrs__present__last__bit1)

axiom tests__test_15__record_with_mutable_discrs__present__position_axiom1 :
  (0 <= tests__test_15__record_with_mutable_discrs__present__position1)

logic tests__test_15__record_with_mutable_discrs__field__first__bit1 : int

logic tests__test_15__record_with_mutable_discrs__field__last__bit1 : int

logic tests__test_15__record_with_mutable_discrs__field__position1 : int

axiom tests__test_15__record_with_mutable_discrs__field__first__bit_axiom1 :
  (0 <= tests__test_15__record_with_mutable_discrs__field__first__bit1)

axiom tests__test_15__record_with_mutable_discrs__field__last__bit_axiom1 :
  (tests__test_15__record_with_mutable_discrs__field__first__bit1 <  tests__test_15__record_with_mutable_discrs__field__last__bit1)

axiom tests__test_15__record_with_mutable_discrs__field__position_axiom1 :
  (0 <= tests__test_15__record_with_mutable_discrs__field__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy4 : bool

logic dummy5 : natural

logic dummy6 : bool

type t14b__ref = { t14b__content : us_rep
}

function t14b__ref___projection(a: t14b__ref) : us_rep = (a).t14b__content

type us_split_discrs2 = { rec__tests__test_15__holder__present : bool
}

function us_split_discrs___4__projection(a: us_split_discrs2) : bool =
  (a).rec__tests__test_15__holder__present

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___4__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__tests__test_15__holder__content : us_rep
}

function us_split_fields_Content__projection(a: us_split_fields2) : us_rep =
  (a).rec__tests__test_15__holder__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___19__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___20__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((((a).us_split_discrs3).rec__tests__test_15__holder__present = ((b).us_split_discrs3).rec__tests__test_15__holder__present) and
  (bool_eq3(((a).us_split_fields3).rec__tests__test_15__holder__content,
  ((b).us_split_fields3).rec__tests__test_15__holder__content) = true)) ->
  (bool_eq4(a, b) = true)) and
  ((not ((((a).us_split_discrs3).rec__tests__test_15__holder__present = ((b).us_split_discrs3).rec__tests__test_15__holder__present) and
  (bool_eq3(((a).us_split_fields3).rec__tests__test_15__holder__content,
  ((b).us_split_fields3).rec__tests__test_15__holder__content) = true))) ->
  (bool_eq4(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__size2({ us_split_discrs3 = {
  rec__tests__test_15__holder__present = a }; us_split_fields3 = {
  rec__tests__test_15__holder__content = { us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__alignment2({ us_split_discrs3 = {
  rec__tests__test_15__holder__present = a }; us_split_fields3 = {
  rec__tests__test_15__holder__content = { us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

logic tests__test_15__holder__present__first__bit : int

logic tests__test_15__holder__present__last__bit : int

logic tests__test_15__holder__present__position : int

axiom tests__test_15__holder__present__first__bit_axiom :
  (0 <= tests__test_15__holder__present__first__bit)

axiom tests__test_15__holder__present__last__bit_axiom :
  (tests__test_15__holder__present__first__bit <  tests__test_15__holder__present__last__bit)

axiom tests__test_15__holder__present__position_axiom :
  (0 <= tests__test_15__holder__present__position)

logic tests__test_15__holder__content__first__bit : int

logic tests__test_15__holder__content__last__bit : int

logic tests__test_15__holder__content__position : int

axiom tests__test_15__holder__content__first__bit_axiom :
  (0 <= tests__test_15__holder__content__first__bit)

axiom tests__test_15__holder__content__last__bit_axiom :
  (tests__test_15__holder__content__first__bit <  tests__test_15__holder__content__last__bit)

axiom tests__test_15__holder__content__position_axiom :
  (0 <= tests__test_15__holder__content__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy7 : bool

logic dummy8 : bool

logic dummy9 : natural

logic dummy10 : bool

type holder__ref = { holder__content : us_rep1
}

function holder__ref___projection(a: holder__ref) : us_rep1 =
  (a).holder__content

logic id : us_rep1 -> us_rep1

logic id__function_guard : us_rep1, us_rep1 -> prop

axiom id__post_axiom :
  (forall h:bool. forall h1:bool. forall h2:natural. forall h3:bool [id({
  us_split_discrs3 = { rec__tests__test_15__holder__present = h };
  us_split_fields3 = { rec__tests__test_15__holder__content = {
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h2 };
  attr__constrained = h3 } } })]. ((((h = h1) and (h3 = true)) and
  (h3 = true)) -> (((((id({ us_split_discrs3 = {
  rec__tests__test_15__holder__present = h }; us_split_fields3 = {
  rec__tests__test_15__holder__content = { us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h2 };
  attr__constrained = h3 } }
  })).us_split_discrs3).rec__tests__test_15__holder__present = ((((id({
  us_split_discrs3 = { rec__tests__test_15__holder__present = h };
  us_split_fields3 = { rec__tests__test_15__holder__content = {
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h2 };
  attr__constrained = h3 } }
  })).us_split_fields3).rec__tests__test_15__holder__content).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present) and
  ((((id({ us_split_discrs3 = { rec__tests__test_15__holder__present = h };
  us_split_fields3 = { rec__tests__test_15__holder__content = {
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h2 };
  attr__constrained = h3 } }
  })).us_split_fields3).rec__tests__test_15__holder__content).attr__constrained = true)) and
  ((((id({ us_split_discrs3 = { rec__tests__test_15__holder__present = h };
  us_split_fields3 = { rec__tests__test_15__holder__content = {
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h2 };
  attr__constrained = h3 } }
  })).us_split_fields3).rec__tests__test_15__holder__content).attr__constrained = true))))

axiom id__def_axiom :
  (forall h:bool. forall h1:bool. forall h2:natural. forall h3:bool [id({
  us_split_discrs3 = { rec__tests__test_15__holder__present = h };
  us_split_fields3 = { rec__tests__test_15__holder__content = {
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h2 };
  attr__constrained = h3 } } })]. ((((h = h1) and (h3 = true)) and
  (h3 = true)) -> (id({ us_split_discrs3 = {
  rec__tests__test_15__holder__present = h }; us_split_fields3 = {
  rec__tests__test_15__holder__content = { us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h2 };
  attr__constrained = h3 } } }) = { us_split_discrs3 = {
  rec__tests__test_15__holder__present = h }; us_split_fields3 = {
  rec__tests__test_15__holder__content = { us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h2 };
  attr__constrained = h3 } } })))

predicate in_range3(rec__tests__test_15__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__tests__test_15__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present)

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size3({
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic tests__test_15__record_with_mutable_discrs__present__first__bit2 : int

logic tests__test_15__record_with_mutable_discrs__present__last__bit2 : int

logic tests__test_15__record_with_mutable_discrs__present__position2 : int

axiom tests__test_15__record_with_mutable_discrs__present__first__bit_axiom2 :
  (0 <= tests__test_15__record_with_mutable_discrs__present__first__bit2)

axiom tests__test_15__record_with_mutable_discrs__present__last__bit_axiom2 :
  (tests__test_15__record_with_mutable_discrs__present__first__bit2 <  tests__test_15__record_with_mutable_discrs__present__last__bit2)

axiom tests__test_15__record_with_mutable_discrs__present__position_axiom2 :
  (0 <= tests__test_15__record_with_mutable_discrs__present__position2)

logic tests__test_15__record_with_mutable_discrs__field__first__bit2 : int

logic tests__test_15__record_with_mutable_discrs__field__last__bit2 : int

logic tests__test_15__record_with_mutable_discrs__field__position2 : int

axiom tests__test_15__record_with_mutable_discrs__field__first__bit_axiom2 :
  (0 <= tests__test_15__record_with_mutable_discrs__field__first__bit2)

axiom tests__test_15__record_with_mutable_discrs__field__last__bit_axiom2 :
  (tests__test_15__record_with_mutable_discrs__field__first__bit2 <  tests__test_15__record_with_mutable_discrs__field__last__bit2)

axiom tests__test_15__record_with_mutable_discrs__field__position_axiom2 :
  (0 <= tests__test_15__record_with_mutable_discrs__field__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy11 : bool

logic dummy12 : natural

logic dummy13 : bool

type t15b__ref = { t15b__content : us_rep
}

function t15b__ref___projection(a: t15b__ref) : us_rep = (a).t15b__content

type us_split_fields4 = { rec__tests__test_15__holder__content1 : us_rep
}

function us_split_fields_Content__2__projection(a: us_split_fields4) : us_rep =
  (a).rec__tests__test_15__holder__content1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___21__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs4

function us_rep___22__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function to_base(a: us_rep2) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs4; us_split_fields3 = {
  rec__tests__test_15__holder__content =
  ((a).us_split_fields5).rec__tests__test_15__holder__content1 } }

function of_base(r: us_rep1) : us_rep2 = { us_split_discrs4 =
  (r).us_split_discrs3; us_split_fields5 = {
  rec__tests__test_15__holder__content1 =
  ((r).us_split_fields3).rec__tests__test_15__holder__content } }

logic bool_eq5 : us_rep2, us_rep2 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq5(a, b)].
  ((((((a).us_split_discrs4).rec__tests__test_15__holder__present = ((b).us_split_discrs4).rec__tests__test_15__holder__present) and
  (bool_eq3(((a).us_split_fields5).rec__tests__test_15__holder__content1,
  ((b).us_split_fields5).rec__tests__test_15__holder__content1) = true)) ->
  (bool_eq5(a, b) = true)) and
  ((not ((((a).us_split_discrs4).rec__tests__test_15__holder__present = ((b).us_split_discrs4).rec__tests__test_15__holder__present) and
  (bool_eq3(((a).us_split_fields5).rec__tests__test_15__holder__content1,
  ((b).us_split_fields5).rec__tests__test_15__holder__content1) = true))) ->
  (bool_eq5(a, b) = false))))

predicate in_range4(rec__tests__test_15__holder__present1: bool,
  a: us_rep1) =
  (rec__tests__test_15__holder__present1 = ((a).us_split_discrs3).rec__tests__test_15__holder__present)

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__size4({ us_split_discrs4 = {
  rec__tests__test_15__holder__present = a }; us_split_fields5 = {
  rec__tests__test_15__holder__content1 = { us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:bool. forall a1:bool. forall a2:natural. forall a3:bool.
  (0 <= object__alignment4({ us_split_discrs4 = {
  rec__tests__test_15__holder__present = a }; us_split_fields5 = {
  rec__tests__test_15__holder__content1 = { us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a1 };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a2 };
  attr__constrained = a3 } } })))

logic tests__test_15__holder__present__first__bit1 : int

logic tests__test_15__holder__present__last__bit1 : int

logic tests__test_15__holder__present__position1 : int

axiom tests__test_15__holder__present__first__bit_axiom1 :
  (0 <= tests__test_15__holder__present__first__bit1)

axiom tests__test_15__holder__present__last__bit_axiom1 :
  (tests__test_15__holder__present__first__bit1 <  tests__test_15__holder__present__last__bit1)

axiom tests__test_15__holder__present__position_axiom1 :
  (0 <= tests__test_15__holder__present__position1)

logic tests__test_15__holder__content__first__bit1 : int

logic tests__test_15__holder__content__last__bit1 : int

logic tests__test_15__holder__content__position1 : int

axiom tests__test_15__holder__content__first__bit_axiom1 :
  (0 <= tests__test_15__holder__content__first__bit1)

axiom tests__test_15__holder__content__last__bit_axiom1 :
  (tests__test_15__holder__content__first__bit1 <  tests__test_15__holder__content__last__bit1)

axiom tests__test_15__holder__content__position_axiom1 :
  (0 <= tests__test_15__holder__content__position1)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy14 : bool

logic dummy15 : bool

logic dummy16 : natural

logic dummy17 : bool

type th1S__ref = { th1S__content : us_rep2
}

function th1S__ref___projection(a: th1S__ref) : us_rep2 = (a).th1S__content

logic h1__split_discrs : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r17b : bool

logic r17b1 : bool

logic r17b2 : natural

logic r17b3 : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range5(rec__tests__test_15__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__tests__test_15__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__tests__test_15__record_with_mutable_discrs__present)

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size5({
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment5({ us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic tests__test_15__record_with_mutable_discrs__present__first__bit3 : int

logic tests__test_15__record_with_mutable_discrs__present__last__bit3 : int

logic tests__test_15__record_with_mutable_discrs__present__position3 : int

axiom tests__test_15__record_with_mutable_discrs__present__first__bit_axiom3 :
  (0 <= tests__test_15__record_with_mutable_discrs__present__first__bit3)

axiom tests__test_15__record_with_mutable_discrs__present__last__bit_axiom3 :
  (tests__test_15__record_with_mutable_discrs__present__first__bit3 <  tests__test_15__record_with_mutable_discrs__present__last__bit3)

axiom tests__test_15__record_with_mutable_discrs__present__position_axiom3 :
  (0 <= tests__test_15__record_with_mutable_discrs__present__position3)

logic tests__test_15__record_with_mutable_discrs__field__first__bit3 : int

logic tests__test_15__record_with_mutable_discrs__field__last__bit3 : int

logic tests__test_15__record_with_mutable_discrs__field__position3 : int

axiom tests__test_15__record_with_mutable_discrs__field__first__bit_axiom3 :
  (0 <= tests__test_15__record_with_mutable_discrs__field__first__bit3)

axiom tests__test_15__record_with_mutable_discrs__field__last__bit_axiom3 :
  (tests__test_15__record_with_mutable_discrs__field__first__bit3 <  tests__test_15__record_with_mutable_discrs__field__last__bit3)

axiom tests__test_15__record_with_mutable_discrs__field__position_axiom3 :
  (0 <= tests__test_15__record_with_mutable_discrs__field__position3)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy18 : bool

logic dummy19 : natural

logic dummy20 : bool

type s18b__ref = { s18b__content : us_rep
}

function s18b__ref___projection(a: s18b__ref) : us_rep = (a).s18b__content

 (* File "tests.adb", line 301, characters 0-0 *)
goal WP_parameter_def :
  (forall h1__split_fields:bool. forall h1__split_fields1:natural.
  forall h1__split_fields2:bool. forall tests__test_15__R17b__assume:bool.
  forall tests__test_15__R17b__assume1:bool.
  forall tests__test_15__R17b__assume2:natural.
  forall tests__test_15__R17b__assume3:bool.
  (((h1__split_discrs = of_int(0)) and ((h1__split_fields2 = true) and
  (h1__split_fields = of_int(0)))) -> (((of_int(0) = h1__split_discrs) and
  (((of_int(0) = h1__split_fields) and (h1__split_fields2 = true)) and
  (h1__split_fields2 = true))) -> ((((({ us_split_discrs3 = {
  rec__tests__test_15__holder__present = tests__test_15__R17b__assume };
  us_split_fields3 = { rec__tests__test_15__holder__content = {
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present =
  tests__test_15__R17b__assume1 }; us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field =
  tests__test_15__R17b__assume2 }; attr__constrained =
  tests__test_15__R17b__assume3 } } } = id({ us_split_discrs3 = {
  rec__tests__test_15__holder__present = h1__split_discrs };
  us_split_fields3 = { rec__tests__test_15__holder__content = {
  us_split_discrs1 = {
  rec__tests__test_15__record_with_mutable_discrs__present = h1__split_fields
  }; us_split_fields1 = {
  rec__tests__test_15__record_with_mutable_discrs__field = h1__split_fields1
  }; attr__constrained = h1__split_fields2 } } })) and
  ((((tests__test_15__R17b__assume = tests__test_15__R17b__assume1) and
  (tests__test_15__R17b__assume3 = true)) and
  (tests__test_15__R17b__assume3 = true)) and
  ((h1__split_discrs = tests__test_15__R17b__assume) and
  ((h1__split_fields = tests__test_15__R17b__assume1) and
  ((h1__split_fields1 = tests__test_15__R17b__assume2) and
  (h1__split_fields2 = tests__test_15__R17b__assume3)))))) and
  ((r17b = tests__test_15__R17b__assume) and
  ((r17b1 = tests__test_15__R17b__assume1) and
  ((r17b2 = tests__test_15__R17b__assume2) and
  (r17b3 = tests__test_15__R17b__assume3))))) and (((r17b = r17b1) and
  (r17b3 = true)) and (r17b3 = true))) -> in_range(to_int(r17b))))))
