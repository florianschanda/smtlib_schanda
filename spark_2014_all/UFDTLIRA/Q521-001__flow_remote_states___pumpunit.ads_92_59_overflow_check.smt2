(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun get_outstanding (Int) Int)
(declare-fun get_outstanding__function_guard (Int Int) Bool)
(assert (forall ((pumpunit__outstanding Int)) (! (=> (dynamic_invariant pumpunit__outstanding true true true true) (dynamic_invariant (get_outstanding pumpunit__outstanding) true false true true)) :pattern ((get_outstanding pumpunit__outstanding)))))
(assert (forall ((pumpunit__outstanding Int)) (! (=> (dynamic_invariant pumpunit__outstanding true true true true) (= (get_outstanding pumpunit__outstanding) pumpunit__outstanding)) :pattern ((get_outstanding pumpunit__outstanding)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun get_total (Int) Int)
(declare-fun get_total__function_guard (Int Int) Bool)
(assert (forall ((pumpunit__total_pay Int)) (! (=> (dynamic_invariant pumpunit__total_pay true true true true) (dynamic_invariant (get_total pumpunit__total_pay) true false true true)) :pattern ((get_total pumpunit__total_pay)))))
(assert (forall ((pumpunit__total_pay Int)) (! (=> (dynamic_invariant pumpunit__total_pay true true true true) (= (get_total pumpunit__total_pay) pumpunit__total_pay)) :pattern ((get_total pumpunit__total_pay)))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun is_waiting (Int) Bool)
(declare-fun is_waiting__function_guard (Bool Int) Bool)
(declare-sort internal_state 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (internal_state internal_state) Bool)
(declare-const dummy2 internal_state)
(declare-datatypes () ((internal_state__ref (mk_internal_state__ref (internal_state__content internal_state)))))
(define-fun internal_state__ref___projection ((a internal_state__ref)) internal_state (internal_state__content a))
(define-fun dynamic_invariant1 ((temp___expr_624 Int) (temp___is_init_620 Bool) (temp___skip_constant_621 Bool) (temp___do_toplevel_622 Bool) (temp___do_typ_inv_623 Bool)) Bool (=> (or (= temp___is_init_620 true) (<= 0 3)) (in_range2 temp___expr_624)))
(assert true)
(assert (forall ((pumpunit__cur_state Int)) (! (= (= (is_waiting pumpunit__cur_state) true) (= pumpunit__cur_state 2)) :pattern ((is_waiting pumpunit__cur_state)))))
(declare-fun is_base (Int) Bool)
(declare-fun is_base__function_guard (Bool Int) Bool)
(assert true)
(assert (forall ((pumpunit__cur_state Int)) (! (= (= (is_base pumpunit__cur_state) true) (= pumpunit__cur_state 3)) :pattern ((is_base pumpunit__cur_state)))))
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-const cur_state Int)
(declare-const total_pay Int)
(declare-const outstanding Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result Bool)
(assert (in_range2 cur_state))
(assert (in_range1 total_pay))
(assert (in_range1 outstanding))
(assert (and (= result (is_waiting cur_state)) (= (= result true) (= cur_state 2))))
(assert (= result true))
(assert (and (= o (get_outstanding outstanding)) (and (in_range1 o) (= o outstanding))))
(assert (= o1 (- 2147483647 o)))
(assert (not (in_range o1)))
(check-sat)
(exit)
