(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dispatch_in_contract__root__f1 integer) (rec__ext__ us_private)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) integer (rec__dispatch_in_contract__root__f1 a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__dispatch_in_contract__root__f1 (us_split_fields1 a))) (to_rep (rec__dispatch_in_contract__root__f1 (us_split_fields1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dispatch_in_contract__root__f1__first__bit Int)
(declare-const dispatch_in_contract__root__f1__last__bit Int)
(declare-const dispatch_in_contract__root__f1__position Int)
(assert (<= 0 dispatch_in_contract__root__f1__first__bit))
(assert (< dispatch_in_contract__root__f1__first__bit dispatch_in_contract__root__f1__last__bit))
(assert (<= 0 dispatch_in_contract__root__f1__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))
(declare-fun less_than_max (us_rep) Bool)
(declare-fun less_than_max__function_guard (Bool us_rep) Bool)
(declare-fun less_than_max1 (Int us_rep) Bool)
(declare-fun less_than_max__function_guard1 (Bool Int us_rep) Bool)
(define-fun default_initial_assumption ((temp___expr_159 us_rep) (temp___skip_top_level_160 Bool)) Bool (= (attr__tag temp___expr_159) us_tag))
(declare-const o__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__dispatch_in_contract__child__f2 integer) (rec__dispatch_in_contract__root__f11 integer) (rec__ext__1 us_private)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) integer (rec__dispatch_in_contract__child__f2 a))
(define-fun us_split_fields_F1__2__projection ((a us_split_fields2)) integer (rec__dispatch_in_contract__root__f11 a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (integer us_private) us_private)
(declare-fun extract__f2 (us_private) integer)
(assert (forall ((f2 integer)) (forall ((rec__ext__2 us_private)) (= (extract__f2 (hide_ext__ f2 rec__ext__2)) f2))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__dispatch_in_contract__root__f11 (us_split_fields3 a)) (hide_ext__ (rec__dispatch_in_contract__child__f2 (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__f2 (rec__ext__ (us_split_fields1 r))) (rec__dispatch_in_contract__root__f1 (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__dispatch_in_contract__child__f2 (us_split_fields3 a))) (to_rep (rec__dispatch_in_contract__child__f2 (us_split_fields3 b)))) (= (to_rep (rec__dispatch_in_contract__root__f11 (us_split_fields3 a))) (to_rep (rec__dispatch_in_contract__root__f11 (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const dispatch_in_contract__child__f2__first__bit Int)
(declare-const dispatch_in_contract__child__f2__last__bit Int)
(declare-const dispatch_in_contract__child__f2__position Int)
(assert (<= 0 dispatch_in_contract__child__f2__first__bit))
(assert (< dispatch_in_contract__child__f2__first__bit dispatch_in_contract__child__f2__last__bit))
(assert (<= 0 dispatch_in_contract__child__f2__position))
(declare-const dispatch_in_contract__root__f1__first__bit1 Int)
(declare-const dispatch_in_contract__root__f1__last__bit1 Int)
(declare-const dispatch_in_contract__root__f1__position1 Int)
(assert (<= 0 dispatch_in_contract__root__f1__first__bit1))
(assert (< dispatch_in_contract__root__f1__first__bit1 dispatch_in_contract__root__f1__last__bit1))
(assert (<= 0 dispatch_in_contract__root__f1__position1))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((child__ref (mk_child__ref (child__content us_rep1)))))
(define-fun child__ref___projection ((a child__ref)) us_rep1 (child__content a))
(declare-fun less_than_max__2 (us_rep1) Bool)
(declare-fun less_than_max__2__function_guard (Bool us_rep1) Bool)
(declare-fun less_than_max__21 (Int us_rep1) Bool)
(declare-fun less_than_max__2__function_guard1 (Bool Int us_rep1) Bool)
(declare-const us_tag2 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const dispatch_in_contract__root__f1__first__bit2 Int)
(declare-const dispatch_in_contract__root__f1__last__bit2 Int)
(declare-const dispatch_in_contract__root__f1__position2 Int)
(assert (<= 0 dispatch_in_contract__root__f1__first__bit2))
(assert (< dispatch_in_contract__root__f1__first__bit2 dispatch_in_contract__root__f1__last__bit2))
(assert (<= 0 dispatch_in_contract__root__f1__position2))
(declare-const dispatch_in_contract__child__f2__first__bit1 Int)
(declare-const dispatch_in_contract__child__f2__last__bit1 Int)
(declare-const dispatch_in_contract__child__f2__position1 Int)
(assert (<= 0 dispatch_in_contract__child__f2__first__bit1))
(assert (< dispatch_in_contract__child__f2__first__bit1 dispatch_in_contract__child__f2__last__bit1))
(assert (<= 0 dispatch_in_contract__child__f2__position1))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((grand_child__ref (mk_grand_child__ref (grand_child__content us_rep1)))))
(define-fun grand_child__ref___projection ((a grand_child__ref)) us_rep1 (grand_child__content a))
(declare-fun less_than_max__3 (us_rep1) Bool)
(declare-fun less_than_max__3__function_guard (Bool us_rep1) Bool)
(declare-fun less_than_max__31 (Int us_rep1) Bool)
(declare-fun less_than_max__3__function_guard1 (Bool Int us_rep1) Bool)
(assert true)
(assert true)
(assert (forall ((o us_rep)) (! (= (ite (less_than_max o) 1 0) (ite (less_than_max1 us_tag o) 1 0)) :pattern ((less_than_max1 us_tag o)))))
(assert (forall ((o us_rep)) (! (= (ite (less_than_max__2 (of_base o)) 1 0) (ite (less_than_max1 us_tag1 o) 1 0)) :pattern ((less_than_max1 us_tag1 o)))))
(assert (forall ((o us_rep)) (! (= (ite (less_than_max__3 (of_base o)) 1 0) (ite (less_than_max1 us_tag2 o) 1 0)) :pattern ((less_than_max1 us_tag2 o)))))
(assert (forall ((o us_rep)) (! (= (= (less_than_max o) true) (< (to_rep (rec__dispatch_in_contract__root__f1 (us_split_fields1 o))) 2147483647)) :pattern ((less_than_max o)))))
(define-fun default_initial_assumption1 ((temp___expr_175 us_rep1) (temp___skip_top_level_176 Bool)) Bool (= (attr__tag1 temp___expr_175) us_tag1))
(assert true)
(assert true)
(assert (forall ((o us_rep1)) (! (= (ite (less_than_max__2 o) 1 0) (ite (less_than_max__21 us_tag1 o) 1 0)) :pattern ((less_than_max__21 us_tag1 o)))))
(assert (forall ((o us_rep1)) (! (= (ite (less_than_max__3 o) 1 0) (ite (less_than_max__21 us_tag2 o) 1 0)) :pattern ((less_than_max__21 us_tag2 o)))))
(assert (forall ((o us_rep1)) (! (= (= (less_than_max__2 o) true) (and (< (to_rep (rec__dispatch_in_contract__root__f11 (us_split_fields3 o))) 2147483647) (< (to_rep (rec__dispatch_in_contract__child__f2 (us_split_fields3 o))) 2147483647))) :pattern ((less_than_max__2 o)))))
(define-fun default_initial_assumption2 ((temp___expr_191 us_rep1) (temp___skip_top_level_192 Bool)) Bool (= (attr__tag1 temp___expr_191) us_tag2))
(assert true)
(assert true)
(assert (forall ((o us_rep1)) (! (= (ite (less_than_max__3 o) 1 0) (ite (less_than_max__31 us_tag2 o) 1 0)) :pattern ((less_than_max__31 us_tag2 o)))))
(assert (forall ((o us_rep1)) (! (= (= (less_than_max__3 o) true) (< (to_rep (rec__dispatch_in_contract__root__f11 (us_split_fields3 o))) 2147483647)) :pattern ((less_than_max__3 o)))))
(declare-const o__split_fields integer)
(declare-const o__split_fields1 us_private)
(assert (= (less_than_max (mk___rep (mk___split_fields o__split_fields o__split_fields1) o__attr__tag)) true))
(assert (not (in_range (+ (to_rep o__split_fields) 1))))
(check-sat)
(exit)
