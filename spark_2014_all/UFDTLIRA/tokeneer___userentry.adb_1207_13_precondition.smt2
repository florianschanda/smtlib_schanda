(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort yearst 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (yearst yearst) Bool)
(declare-const dummy yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(declare-fun to_rep (yearst) Int)
(declare-fun of_rep (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x yearst)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort monthst 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (monthst monthst) Bool)
(declare-const dummy1 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(declare-fun to_rep1 (monthst) Int)
(declare-fun of_rep1 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x monthst)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort dayst 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (dayst dayst) Bool)
(declare-const dummy2 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(declare-fun to_rep2 (dayst) Int)
(declare-fun of_rep2 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x dayst)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort millisecst 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (millisecst millisecst) Bool)
(declare-const dummy3 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(declare-fun to_rep3 (millisecst) Int)
(declare-fun of_rep3 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x millisecst)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__projection ((a us_split_fields)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep (rec__clock__timet__year (us_split_fields1 a))) (to_rep (rec__clock__timet__year (us_split_fields1 b)))) (= (to_rep1 (rec__clock__timet__month (us_split_fields1 a))) (to_rep1 (rec__clock__timet__month (us_split_fields1 b))))) (= (to_rep2 (rec__clock__timet__day (us_split_fields1 a))) (to_rep2 (rec__clock__timet__day (us_split_fields1 b))))) (= (to_rep3 (rec__clock__timet__millisec (us_split_fields1 a))) (to_rep3 (rec__clock__timet__millisec (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep (timet__content a))
(declare-fun thecurrenttime (us_private) us_rep)
(declare-fun thecurrenttime__function_guard (us_rep us_private) Bool)
(assert true)
(declare-fun greaterthanorequal (us_rep us_rep) Bool)
(declare-fun greaterthanorequal__function_guard (Bool us_rep us_rep) Bool)
(assert true)
(declare-fun islocked (us_private) Bool)
(declare-fun islocked__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun alarm_timeout (us_private) us_rep)
(declare-fun alarm_timeout__function_guard (us_rep us_private) Bool)
(assert true)
(declare-fun thecurrentdoor (us_private) Int)
(declare-fun thecurrentdoor__function_guard (Int us_private) Bool)
(declare-sort t 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (t t) Bool)
(declare-const dummy5 t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___3__projection ((a t__ref)) t (t__content a))
(define-fun dynamic_invariant ((temp___expr_843 Int) (temp___is_init_840 Bool) (temp___skip_constant_841 Bool) (temp___do_toplevel_842 Bool)) Bool (=> (or (= temp___is_init_840 true) (<= 0 1)) (in_range5 temp___expr_843)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant (thecurrentdoor door__state) true false true) :pattern ((thecurrentdoor door__state)))))
(declare-fun thedooralarm (us_private) Int)
(declare-fun thedooralarm__function_guard (Int us_private) Bool)
(declare-sort statust 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (statust statust) Bool)
(declare-const dummy6 statust)
(declare-datatypes () ((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content a))
(define-fun dynamic_invariant1 ((temp___expr_316 Int) (temp___is_init_313 Bool) (temp___skip_constant_314 Bool) (temp___do_toplevel_315 Bool)) Bool (=> (or (= temp___is_init_313 true) (<= 0 1)) (in_range6 temp___expr_316)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant1 (thedooralarm door__state) true false true) :pattern ((thedooralarm door__state)))))
(declare-fun privatekeypresent (us_private) Bool)
(declare-fun privatekeypresent__function_guard (Bool us_private) Bool)
(assert true)
(declare-sort statscount 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (statscount statscount) Bool)
(declare-const dummy7 statscount)
(declare-datatypes () ((statscount__ref (mk_statscount__ref (statscount__content statscount)))))
(define-fun statscount__ref___projection ((a statscount__ref)) statscount (statscount__content a))
(declare-fun to_rep4 (statscount) Int)
(declare-fun of_rep4 (Int) statscount)
(assert (forall ((x statscount)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x statscount)) (! (in_range7 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__stats__t__successentry statscount) (rec__stats__t__failentry statscount) (rec__stats__t__successbio statscount) (rec__stats__t__failbio statscount)))))
(define-fun us_split_fields_SuccessEntry__projection ((a us_split_fields2)) statscount (rec__stats__t__successentry a))
(define-fun us_split_fields_FailEntry__projection ((a us_split_fields2)) statscount (rec__stats__t__failentry a))
(define-fun us_split_fields_SuccessBio__projection ((a us_split_fields2)) statscount (rec__stats__t__successbio a))
(define-fun us_split_fields_FailBio__projection ((a us_split_fields2)) statscount (rec__stats__t__failbio a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___13__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___14__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep4 (rec__stats__t__successentry (us_split_fields3 a))) (to_rep4 (rec__stats__t__successentry (us_split_fields3 b)))) (= (to_rep4 (rec__stats__t__failentry (us_split_fields3 a))) (to_rep4 (rec__stats__t__failentry (us_split_fields3 b))))) (= (to_rep4 (rec__stats__t__successbio (us_split_fields3 a))) (to_rep4 (rec__stats__t__successbio (us_split_fields3 b))))) (= (to_rep4 (rec__stats__t__failbio (us_split_fields3 a))) (to_rep4 (rec__stats__t__failbio (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const stats__t__successentry__first__bit Int)
(declare-const stats__t__successentry__last__bit Int)
(declare-const stats__t__successentry__position Int)
(assert (<= 0 stats__t__successentry__first__bit))
(assert (< stats__t__successentry__first__bit stats__t__successentry__last__bit))
(assert (<= 0 stats__t__successentry__position))
(declare-const stats__t__failentry__first__bit Int)
(declare-const stats__t__failentry__last__bit Int)
(declare-const stats__t__failentry__position Int)
(assert (<= 0 stats__t__failentry__first__bit))
(assert (< stats__t__failentry__first__bit stats__t__failentry__last__bit))
(assert (<= 0 stats__t__failentry__position))
(declare-const stats__t__successbio__first__bit Int)
(declare-const stats__t__successbio__last__bit Int)
(declare-const stats__t__successbio__position Int)
(assert (<= 0 stats__t__successbio__first__bit))
(assert (< stats__t__successbio__first__bit stats__t__successbio__last__bit))
(assert (<= 0 stats__t__successbio__position))
(declare-const stats__t__failbio__first__bit Int)
(declare-const stats__t__failbio__last__bit Int)
(declare-const stats__t__failbio__position Int)
(assert (<= 0 stats__t__failbio__first__bit))
(assert (< stats__t__failbio__first__bit stats__t__failbio__last__bit))
(assert (<= 0 stats__t__failbio__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 us_rep1)))))
(define-fun t__ref___4__projection ((a t__ref1)) us_rep1 (t__content1 a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun currentactivitypossible (us_private Int) Bool)
(declare-fun currentactivitypossible__function_guard (Bool us_private Int) Bool)
(declare-fun inprogress (Int) Bool)
(declare-fun inprogress__function_guard (Bool Int) Bool)
(declare-sort statust1 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (statust1 statust1) Bool)
(declare-const dummy9 statust1)
(declare-datatypes () ((statust__ref1 (mk_statust__ref1 (statust__content1 statust1)))))
(define-fun statust__ref___2__projection ((a statust__ref1)) statust1 (statust__content1 a))
(define-fun dynamic_invariant2 ((temp___expr_1683 Int) (temp___is_init_1680 Bool) (temp___skip_constant_1681 Bool) (temp___do_toplevel_1682 Bool)) Bool (=> (or (= temp___is_init_1680 true) (<= 0 7)) (in_range8 temp___expr_1683)))
(declare-fun userhasdeparted (us_private Int) Bool)
(declare-fun userhasdeparted__function_guard (Bool us_private Int) Bool)
(assert true)
(assert (forall ((usertoken__state us_private)) (forall ((userentry__status Int)) (! (= (= (currentactivitypossible usertoken__state userentry__status) true) (or (= (inprogress userentry__status) true) (= (userhasdeparted usertoken__state userentry__status) true))) :pattern ((currentactivitypossible usertoken__state userentry__status))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort activestatust 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq10 (activestatust activestatust) Bool)
(declare-const dummy10 activestatust)
(declare-datatypes () ((activestatust__ref (mk_activestatust__ref (activestatust__content activestatust)))))
(define-fun activestatust__ref___projection ((a activestatust__ref)) activestatust (activestatust__content a))
(define-fun dynamic_invariant3 ((temp___expr_1691 Int) (temp___is_init_1688 Bool) (temp___skip_constant_1689 Bool) (temp___do_toplevel_1690 Bool)) Bool (=> (or (= temp___is_init_1688 true) (<= 1 7)) (in_range9 temp___expr_1691)))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun ispresent (us_private) Bool)
(declare-fun ispresent__function_guard (Bool us_private) Bool)
(assert true)
(assert (forall ((usertoken__state us_private)) (forall ((userentry__status Int)) (! (= (= (userhasdeparted usertoken__state userentry__status) true) (and (< 0 userentry__status) (not (= (ispresent usertoken__state) true)))) :pattern ((userhasdeparted usertoken__state userentry__status))))))
(assert true)
(assert (forall ((userentry__status Int)) (! (= (= (inprogress userentry__status) true) (and (< 0 userentry__status) (< userentry__status 7))) :pattern ((inprogress userentry__status)))))
(define-fun dynamic_invariant4 ((temp___expr_376 Int) (temp___is_init_373 Bool) (temp___skip_constant_374 Bool) (temp___do_toplevel_375 Bool)) Bool (=> (or (= temp___is_init_373 true) (<= 1901 2099)) (in_range1 temp___expr_376)))
(define-fun dynamic_invariant5 ((temp___expr_382 Int) (temp___is_init_379 Bool) (temp___skip_constant_380 Bool) (temp___do_toplevel_381 Bool)) Bool (=> (or (= temp___is_init_379 true) (<= 1 12)) (in_range2 temp___expr_382)))
(define-fun dynamic_invariant6 ((temp___expr_388 Int) (temp___is_init_385 Bool) (temp___skip_constant_386 Bool) (temp___do_toplevel_387 Bool)) Bool (=> (or (= temp___is_init_385 true) (<= 1 31)) (in_range3 temp___expr_388)))
(define-fun dynamic_invariant7 ((temp___expr_412 Int) (temp___is_init_409 Bool) (temp___skip_constant_410 Bool) (temp___do_toplevel_411 Bool)) Bool (=> (or (= temp___is_init_409 true) (<= 0 86399999)) (in_range4 temp___expr_412)))
(define-fun dynamic_invariant8 ((temp___expr_1028 Int) (temp___is_init_1025 Bool) (temp___skip_constant_1026 Bool) (temp___do_toplevel_1027 Bool)) Bool (=> (or (= temp___is_init_1025 true) (<= 0 2147483647)) (in_range7 temp___expr_1028)))
(assert true)
(declare-const status Int)
(declare-const localstatus Int)
(declare-const currenttime us_private)
(declare-const state us_private)
(declare-const state1 us_private)
(declare-const state2 us_private)
(declare-const state3 us_private)
(declare-const o Int)
(declare-const result int__ref)
(declare-const localstatus1 Int)
(assert (in_range8 status))
(assert (and (and (= (currentactivitypossible state3 status) true) (= (privatekeypresent state2) true)) (= (and (and (= (islocked state) true) (= (thecurrentdoor state1) 0)) (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state1)) true)) (= (thedooralarm state1) 0))))
(assert (=> (<= 1 7) (in_range9 localstatus)))
(assert (and (= o status) (in_range9 status)))
(assert (= result (mk_int__ref localstatus)))
(assert (= localstatus1 o))
(assert (not (= localstatus1 1)))
(assert (not (= localstatus1 2)))
(assert (not (= localstatus1 3)))
(assert (= localstatus1 4))
(assert (not (= (privatekeypresent state2) true)))
(check-sat)
(exit)
