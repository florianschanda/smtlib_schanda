(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq3 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref___projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq4 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type trace__ref = { trace__content : us_rep1
}

function trace__ref___projection(a: trace__ref) : us_rep1 =
  (a).trace__content

logic empty : unit -> us_rep1

logic empty__function_guard : us_rep1, unit -> prop

axiom empty__post_axiom : true

type element_type

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : element_type, element_type -> bool

logic dummy3 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic append : us_rep1, int -> us_rep1

logic append__function_guard : us_rep1, us_rep1, int -> prop

axiom append__post_axiom : true

logic element : us_rep1, us_rep -> int

logic element__function_guard : int, us_rep1, us_rep -> prop

axiom element__post_axiom :
  (forall t:us_rep1.
  (forall c:us_rep [element(t, c)]. in_range2(element(t, c))))

logic has_element : us_rep1, us_rep -> bool

logic has_element__function_guard : bool, us_rep1, us_rep -> prop

axiom has_element__post_axiom : true

logic previous : us_rep1, us_rep -> us_rep

logic previous__function_guard : us_rep, us_rep1, us_rep -> prop

axiom previous__post_axiom : true

logic is_first : us_rep1, us_rep -> bool

logic is_first__function_guard : bool, us_rep1, us_rep -> prop

axiom is_first__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic trace : us_rep1

logic i : int

logic o : us_rep1

logic temp___153 : us_rep1

logic o1 : us_rep1

logic c : us_rep

logic o2 : bool

logic o3 : bool

logic o4 : bool

logic o5 : us_rep

logic o6 : int

logic o7 : int

logic o8 : int

logic result : us_rep1

logic trace1 : us_rep1

logic state : us_private

logic result1 : int

logic i1 : int

logic trace2 : us_rep1

logic i2 : int

logic result2 : us_rep1

logic trace3 : us_rep1

logic state1 : us_private

logic trace4 : us_rep1

logic i3 : int

logic state2 : us_private

logic trace5 : us_rep1

logic i4 : int

logic state3 : us_private

logic trace6 : us_rep1

logic i5 : int

logic state4 : us_private

logic trace7 : us_rep1

logic i6 : int

logic state5 : us_private

logic trace8 : us_rep1

logic i7 : int

logic state6 : us_private

logic trace9 : us_rep1

logic i8 : int

logic state7 : us_private

logic result3 : bool

logic result4 : bool

axiom H : (o = empty(void))

axiom H1 : (result = trace)

axiom H2 : (trace1 = o)

axiom H3 : (result1 = i)

axiom H4 : (i1 = 1)

axiom H5 : (((1 <= i1) and (i1 <= 100)) -> (temp___153 = trace1))

axiom H6 : (((1 <= i1) and (i1 <= 100)) -> ((1 <= i2) and (i2 <= 100)))

axiom H7 : (((1 <= i1) and (i1 <= 100)) -> (o1 = append(trace2, i2)))

axiom H8 : (((1 <= i1) and (i1 <= 100)) -> (trace2 = result2))

axiom H9 : (((1 <= i1) and (i1 <= 100)) -> (trace3 = o1))

axiom H10 : (((1 <= i1) and (i1 <= 100)) -> (i2 = 100))

axiom H11 : (((1 <= i1) and (i1 <= 100)) -> (state1 = state2))

axiom H12 : (((1 <= i1) and (i1 <= 100)) -> (i2 = i3))

axiom H13 : (((1 <= i1) and (i1 <= 100)) -> (trace3 = trace4))

axiom H14 : (((1 <= i1) and (i1 <= 100)) -> (state3 = state1))

axiom H15 : (((1 <= i1) and (i1 <= 100)) -> (i4 = i2))

axiom H16 : (((1 <= i1) and (i1 <= 100)) -> (trace5 = trace3))

axiom H17 : (((1 <= i1) and (i1 <= 100)) -> (state4 = state2))

axiom H18 : (((1 <= i1) and (i1 <= 100)) -> (i5 = i3))

axiom H19 : (((1 <= i1) and (i1 <= 100)) -> (trace6 = trace4))

axiom H20 : (((1 <= i1) and (i1 <= 100)) -> (state5 = state3))

axiom H21 : (((1 <= i1) and (i1 <= 100)) -> (i6 = i4))

axiom H22 : (((1 <= i1) and (i1 <= 100)) -> (trace7 = trace5))

axiom H23 : ((not ((1 <= i1) and (i1 <= 100))) -> (state = state4))

axiom H24 : ((not ((1 <= i1) and (i1 <= 100))) -> (i1 = i5))

axiom H25 : ((not ((1 <= i1) and (i1 <= 100))) -> (trace1 = trace6))

axiom H26 : ((not ((1 <= i1) and (i1 <= 100))) -> (state5 = state))

axiom H27 : ((not ((1 <= i1) and (i1 <= 100))) -> (i6 = i1))

axiom H28 : ((not ((1 <= i1) and (i1 <= 100))) -> (trace7 = trace1))

axiom H29 : (state6 = state4)

axiom H30 : (i7 = i5)

axiom H31 : (trace8 = trace6)

axiom H32 : (state7 = state5)

axiom H33 : (i8 = i6)

axiom H34 : (trace9 = trace7)

axiom H35 : (o2 = has_element(trace8, c))

axiom H36 : (o3 = true)

axiom H37 : (result3 = match_bool(o3, o2, false))

axiom H38 : (result3 = true)

axiom H39 : (o4 = is_first(trace8, c))

axiom H40 : (((not (o4 = true)) -> (result4 = true)) and ((o4 = true) ->
  (result4 = false)))

axiom H41 : (result4 = true)

axiom H42 : (o5 = previous(trace8, c))

axiom H43 : ((o6 = element(trace8, o5)) and in_range2(o6))

axiom H44 : (o7 = (o6 + 1))

 (* File "traces.ads", line 37, characters 0-0 *)
goal WP_parameter_def : in_range1(o7)
