(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-const par1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const par2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun return_x (Int Int) Int)
(declare-fun return_x__function_guard (Int Int Int) Bool)
(assert (forall ((test__unused_variables_2__x Int) (test__unused_variables_2__y Int)) (! (=> (and (dynamic_invariant test__unused_variables_2__x true true true true) (dynamic_invariant test__unused_variables_2__y true true true true)) (dynamic_invariant (return_x test__unused_variables_2__x test__unused_variables_2__y) true false true true)) :pattern ((return_x test__unused_variables_2__x test__unused_variables_2__y)))))
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result Int)
(declare-const x1 Int)
(declare-const result1 Int)
(declare-const y1 Int)
(assert (in_range par1))
(assert (in_range par2))
(assert (=> (<= (- 2147483648) 2147483647) (in_range x)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range y)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range z)))
(assert (= result x))
(assert (= x1 (- 11)))
(assert (= result1 y))
(assert (= y1 2))
(assert (and (= o (return_x x1 y1)) (in_range o)))
(assert (= o1 (+ o par1)))
(assert (and (= o2 o1) (in_range o1)))
(assert (= o3 (- o2 y1)))
(assert (not (in_range o3)))
(check-sat)
(exit)
