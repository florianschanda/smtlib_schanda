(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort tcoordinate_typeB 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (tcoordinate_typeB tcoordinate_typeB) Bool)
(declare-const dummy tcoordinate_typeB)
(declare-datatypes () ((tcoordinate_typeB__ref (mk_tcoordinate_typeB__ref (tcoordinate_typeB__content tcoordinate_typeB)))))
(define-fun tcoordinate_typeB__ref___projection ((a tcoordinate_typeB__ref)) tcoordinate_typeB (tcoordinate_typeB__content a))
(declare-sort coordinate_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (coordinate_type coordinate_type) Bool)
(declare-const dummy1 coordinate_type)
(declare-datatypes () ((coordinate_type__ref (mk_coordinate_type__ref (coordinate_type__content coordinate_type)))))
(define-fun coordinate_type__ref___projection ((a coordinate_type__ref)) coordinate_type (coordinate_type__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 1 100)) (in_range1 temp___expr_158)))
(declare-fun to_rep (coordinate_type) Int)
(declare-fun of_rep (Int) coordinate_type)
(assert (forall ((x coordinate_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x coordinate_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__raster_graphics__point__x coordinate_type) (rec__raster_graphics__point__y coordinate_type)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) coordinate_type (rec__raster_graphics__point__x a))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) coordinate_type (rec__raster_graphics__point__y a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__raster_graphics__point__x (us_split_fields1 a))) (to_rep (rec__raster_graphics__point__x (us_split_fields1 b)))) (= (to_rep (rec__raster_graphics__point__y (us_split_fields1 a))) (to_rep (rec__raster_graphics__point__y (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const raster_graphics__point__x__first__bit Int)
(declare-const raster_graphics__point__x__last__bit Int)
(declare-const raster_graphics__point__x__position Int)
(assert (<= 0 raster_graphics__point__x__first__bit))
(assert (< raster_graphics__point__x__first__bit raster_graphics__point__x__last__bit))
(assert (<= 0 raster_graphics__point__x__position))
(declare-const raster_graphics__point__y__first__bit Int)
(declare-const raster_graphics__point__y__last__bit Int)
(declare-const raster_graphics__point__y__position Int)
(assert (<= 0 raster_graphics__point__y__first__bit))
(assert (< raster_graphics__point__y__first__bit raster_graphics__point__y__last__bit))
(assert (<= 0 raster_graphics__point__y__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((point__ref (mk_point__ref (point__content us_rep)))))
(define-fun point__ref___projection ((a point__ref)) us_rep (point__content a))
(declare-sort status_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq3 (status_type status_type) Bool)
(declare-const dummy3 status_type)
(declare-datatypes () ((status_type__ref (mk_status_type__ref (status_type__content status_type)))))
(define-fun status_type__ref___projection ((a status_type__ref)) status_type (status_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_181 Int) (temp___is_init_177 Bool) (temp___skip_constant_178 Bool) (temp___do_toplevel_179 Bool) (temp___do_typ_inv_180 Bool)) Bool (=> (or (= temp___is_init_177 true) (<= 0 2)) (in_range2 temp___expr_181)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const a us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const min Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const min_distance Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(assert (= min_distance min))
(declare-const status Int)
(declare-const delta_x Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result Int)
(declare-const delta_x1 Int)
(assert (in_range1 min))
(assert (in_range1 min_distance))
(assert (= min min_distance))
(assert (=> (<= 0 2) (in_range2 status)))
(assert (and (= o (abs (- (to_rep (rec__raster_graphics__point__x (us_split_fields1 a))) (to_rep (rec__raster_graphics__point__x (us_split_fields1 b)))))) (in_range (abs (- (to_rep (rec__raster_graphics__point__x (us_split_fields1 a))) (to_rep (rec__raster_graphics__point__x (us_split_fields1 b))))))))
(assert (and (= o1 o) (in_range1 o)))
(assert (= result delta_x))
(assert (= delta_x1 o1))
(assert (in_range1 delta_x1))
(assert (not (in_range (abs (- (to_rep (rec__raster_graphics__point__y (us_split_fields1 a))) (to_rep (rec__raster_graphics__point__y (us_split_fields1 b))))))))
(check-sat)
(exit)
