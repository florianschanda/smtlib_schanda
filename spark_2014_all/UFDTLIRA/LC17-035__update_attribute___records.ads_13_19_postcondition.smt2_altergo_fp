(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type my_range

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : my_range, my_range -> bool

logic dummy2 : my_range

type my_range__ref = { my_range__content : my_range
}

function my_range__ref___projection(a: my_range__ref) : my_range =
  (a).my_range__content

logic to_rep2 : my_range -> int

logic of_rep2 : int -> my_range

axiom inversion_axiom2 :
  (forall x:my_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:my_range [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__types__rec__s1 : integer; rec__types__rec__s2 :
natural; rec__types__rec__s3 : my_range; rec__types__rec__s4 : integer
}

function us_split_fields_S1__projection(a: us_split_fields) : integer =
  (a).rec__types__rec__s1

function us_split_fields_S2__projection(a: us_split_fields) : natural =
  (a).rec__types__rec__s2

function us_split_fields_S3__projection(a: us_split_fields) : my_range =
  (a).rec__types__rec__s3

function us_split_fields_S4__projection(a: us_split_fields) : integer =
  (a).rec__types__rec__s4

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((((to_rep(((a).us_split_fields1).rec__types__rec__s1) = to_rep(((b).us_split_fields1).rec__types__rec__s1)) and
  (to_rep1(((a).us_split_fields1).rec__types__rec__s2) = to_rep1(((b).us_split_fields1).rec__types__rec__s2))) and
  (to_rep2(((a).us_split_fields1).rec__types__rec__s3) = to_rep2(((b).us_split_fields1).rec__types__rec__s3))) and
  (to_rep(((a).us_split_fields1).rec__types__rec__s4) = to_rep(((b).us_split_fields1).rec__types__rec__s4))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields1).rec__types__rec__s1) = to_rep(((b).us_split_fields1).rec__types__rec__s1)) and
  (to_rep1(((a).us_split_fields1).rec__types__rec__s2) = to_rep1(((b).us_split_fields1).rec__types__rec__s2))) and
  (to_rep2(((a).us_split_fields1).rec__types__rec__s3) = to_rep2(((b).us_split_fields1).rec__types__rec__s3))) and
  (to_rep(((a).us_split_fields1).rec__types__rec__s4) = to_rep(((b).us_split_fields1).rec__types__rec__s4)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:natural. forall a2:my_range.
  forall a3:integer. (0 <= object__size({ us_split_fields1 = {
  rec__types__rec__s1 = a; rec__types__rec__s2 = a1; rec__types__rec__s3 =
  a2; rec__types__rec__s4 = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:natural. forall a2:my_range.
  forall a3:integer. (0 <= object__alignment({ us_split_fields1 = {
  rec__types__rec__s1 = a; rec__types__rec__s2 = a1; rec__types__rec__s3 =
  a2; rec__types__rec__s4 = a3 } })))

logic types__rec__s1__first__bit : int

logic types__rec__s1__last__bit : int

logic types__rec__s1__position : int

axiom types__rec__s1__first__bit_axiom : (0 <= types__rec__s1__first__bit)

axiom types__rec__s1__last__bit_axiom :
  (types__rec__s1__first__bit <  types__rec__s1__last__bit)

axiom types__rec__s1__position_axiom : (0 <= types__rec__s1__position)

logic types__rec__s2__first__bit : int

logic types__rec__s2__last__bit : int

logic types__rec__s2__position : int

axiom types__rec__s2__first__bit_axiom : (0 <= types__rec__s2__first__bit)

axiom types__rec__s2__last__bit_axiom :
  (types__rec__s2__first__bit <  types__rec__s2__last__bit)

axiom types__rec__s2__position_axiom : (0 <= types__rec__s2__position)

logic types__rec__s3__first__bit : int

logic types__rec__s3__last__bit : int

logic types__rec__s3__position : int

axiom types__rec__s3__first__bit_axiom : (0 <= types__rec__s3__first__bit)

axiom types__rec__s3__last__bit_axiom :
  (types__rec__s3__first__bit <  types__rec__s3__last__bit)

axiom types__rec__s3__position_axiom : (0 <= types__rec__s3__position)

logic types__rec__s4__first__bit : int

logic types__rec__s4__last__bit : int

logic types__rec__s4__position : int

axiom types__rec__s4__first__bit_axiom : (0 <= types__rec__s4__first__bit)

axiom types__rec__s4__last__bit_axiom :
  (types__rec__s4__first__bit <  types__rec__s4__last__bit)

axiom types__rec__s4__position_axiom : (0 <= types__rec__s4__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : integer

logic dummy4 : natural

logic dummy5 : my_range

logic dummy6 : integer

type rec____ref = { rec____content : us_rep
}

function rec____ref___projection(a: rec____ref) : us_rep = (a).rec____content

logic attr__ATTRIBUTE_ADDRESS : int

logic new_data : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r__split_fields : integer

logic r__split_fields1 : natural

logic r__split_fields2 : my_range

logic r__split_fields3 : integer

logic o : integer

logic o1 : integer

logic o2 : natural

logic o3 : my_range

logic o4 : integer

logic temp___205 : integer

logic temp___2051 : natural

logic temp___2052 : my_range

logic temp___2053 : integer

logic o5 : integer

logic o6 : integer

logic o7 : natural

logic o8 : my_range

logic o9 : integer

logic temp___207 : integer

logic temp___2071 : natural

logic temp___2072 : my_range

logic temp___2073 : integer

logic o10 : natural

logic o11 : integer

logic o12 : natural

logic o13 : my_range

logic o14 : integer

logic temp___209 : integer

logic temp___2091 : natural

logic temp___2092 : my_range

logic temp___2093 : integer

logic o15 : my_range

logic o16 : integer

logic o17 : natural

logic o18 : my_range

logic o19 : integer

logic temp___211 : integer

logic temp___2111 : natural

logic temp___2112 : my_range

logic temp___2113 : integer

logic result : integer

logic result1 : natural

logic result2 : my_range

logic result3 : integer

logic r__split_fields4 : integer

logic r__split_fields5 : natural

logic r__split_fields6 : my_range

logic r__split_fields7 : integer

logic result4 : integer

logic result5 : natural

logic result6 : my_range

logic result7 : integer

logic r__split_fields8 : integer

logic r__split_fields9 : natural

logic r__split_fields10 : my_range

logic r__split_fields11 : integer

logic result8 : integer

logic result9 : natural

logic result10 : my_range

logic result11 : integer

logic r__split_fields12 : integer

logic r__split_fields13 : natural

logic r__split_fields14 : my_range

logic r__split_fields15 : integer

logic result12 : integer

logic result13 : natural

logic result14 : my_range

logic result15 : integer

logic r__split_fields16 : integer

logic r__split_fields17 : natural

logic r__split_fields18 : my_range

logic r__split_fields19 : integer

logic r__split_fields20 : integer

logic r__split_fields21 : natural

logic r__split_fields22 : my_range

logic r__split_fields23 : integer

logic r__split_fields24 : integer

logic r__split_fields25 : natural

logic r__split_fields26 : my_range

logic r__split_fields27 : integer

axiom H : in_range1(new_data)

axiom H1 : (to_rep(o) = to_rep(r__split_fields))

axiom H2 : (r__split_fields = o1)

axiom H3 : (r__split_fields1 = o2)

axiom H4 : (r__split_fields2 = o3)

axiom H5 : (o = o4)

axiom H6 : (temp___205 = o1)

axiom H7 : (temp___2051 = o2)

axiom H8 : (temp___2052 = o3)

axiom H9 : (temp___2053 = o4)

axiom H10 : (result = r__split_fields)

axiom H11 : (result1 = r__split_fields1)

axiom H12 : (result2 = r__split_fields2)

axiom H13 : (result3 = r__split_fields3)

axiom H14 : (temp___205 = r__split_fields4)

axiom H15 : (temp___2051 = r__split_fields5)

axiom H16 : (temp___2052 = r__split_fields6)

axiom H17 : (temp___2053 = r__split_fields7)

axiom H18 : (to_rep(o5) = 3)

axiom H19 : (o5 = o6)

axiom H20 : (r__split_fields5 = o7)

axiom H21 : (r__split_fields6 = o8)

axiom H22 : (r__split_fields7 = o9)

axiom H23 : (temp___207 = o6)

axiom H24 : (temp___2071 = o7)

axiom H25 : (temp___2072 = o8)

axiom H26 : (temp___2073 = o9)

axiom H27 : (result4 = r__split_fields4)

axiom H28 : (result5 = r__split_fields5)

axiom H29 : (result6 = r__split_fields6)

axiom H30 : (result7 = r__split_fields7)

axiom H31 : (temp___207 = r__split_fields8)

axiom H32 : (temp___2071 = r__split_fields9)

axiom H33 : (temp___2072 = r__split_fields10)

axiom H34 : (temp___2073 = r__split_fields11)

axiom H35 : (to_rep1(o10) = new_data)

axiom H36 : (r__split_fields8 = o11)

axiom H37 : (o10 = o12)

axiom H38 : (r__split_fields10 = o13)

axiom H39 : (r__split_fields11 = o14)

axiom H40 : (temp___209 = o11)

axiom H41 : (temp___2091 = o12)

axiom H42 : (temp___2092 = o13)

axiom H43 : (temp___2093 = o14)

axiom H44 : (result8 = r__split_fields8)

axiom H45 : (result9 = r__split_fields9)

axiom H46 : (result10 = r__split_fields10)

axiom H47 : (result11 = r__split_fields11)

axiom H48 : ((r__split_fields12 = temp___209) and
  ((r__split_fields13 = temp___2091) and
  ((r__split_fields14 = temp___2092) and (r__split_fields15 = temp___2093))))

axiom H49 : (to_rep2(o15) = 4)

axiom H50 : (r__split_fields12 = o16)

axiom H51 : (r__split_fields13 = o17)

axiom H52 : (o15 = o18)

axiom H53 : (r__split_fields15 = o19)

axiom H54 : (temp___211 = o16)

axiom H55 : (temp___2111 = o17)

axiom H56 : (temp___2112 = o18)

axiom H57 : (temp___2113 = o19)

axiom H58 : ((result12 = r__split_fields12) and
  ((result13 = r__split_fields13) and ((result14 = r__split_fields14) and
  (result15 = r__split_fields15))))

axiom H59 : ((r__split_fields16 = temp___211) and
  ((r__split_fields17 = temp___2111) and
  ((r__split_fields18 = temp___2112) and (r__split_fields19 = temp___2113))))

axiom H60 : ((r__split_fields20 = r__split_fields16) and
  ((r__split_fields21 = r__split_fields17) and
  ((r__split_fields22 = r__split_fields18) and
  (r__split_fields23 = r__split_fields19))))

axiom H61 : ((r__split_fields24 = r__split_fields16) and
  ((r__split_fields25 = r__split_fields17) and
  ((r__split_fields26 = r__split_fields18) and
  (r__split_fields27 = r__split_fields19))))

 (* File "records.ads", line 44, characters 0-0 *)
goal WP_parameter_def : (bool_eq4({ us_split_fields1 = {
  rec__types__rec__s1 = r__split_fields20; rec__types__rec__s2 =
  r__split_fields21; rec__types__rec__s3 = r__split_fields22;
  rec__types__rec__s4 = r__split_fields23 } }, { us_split_fields1 = {
  rec__types__rec__s1 = of_rep(3); rec__types__rec__s2 = of_rep1(new_data);
  rec__types__rec__s3 = of_rep2(4); rec__types__rec__s4 = r__split_fields }
  }) = true)
