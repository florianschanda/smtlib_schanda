(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic z : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x1:integer [to_rep(x1)]. (of_rep(to_rep(x1)) = x1))

axiom range_axiom : (forall x1:integer [to_rep(x1)]. in_range(to_rep(x1)))

axiom coerce_axiom :
  (forall x1:int [to_rep(of_rep(x1))]. (in_range(x1) ->
  (to_rep(of_rep(x1)) = x1)))

logic last : int

predicate dynamic_property(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x1:int. forall y:int [bool_eq3(x1, y)]. (((x1 = y) -> (bool_eq3(x1,
  y) = true)) and ((not (x1 = y)) -> (bool_eq3(x1, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type a__ref = { a__content : integer
}

function a__ref___projection(a: a__ref) : integer = (a).a__content

axiom last__def_axiom : (last = x)

logic last1 : int

predicate dynamic_property1(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x1:int. forall y:int [bool_eq4(x1, y)]. (((x1 = y) -> (bool_eq4(x1,
  y) = true)) and ((not (x1 = y)) -> (bool_eq4(x1, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type b__ref = { b__content : integer
}

function b__ref___projection(a: b__ref) : integer = (a).b__content

axiom last__def_axiom1 : (last1 = z)

logic first : int

predicate dynamic_property2(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x1:int. forall y:int [bool_eq5(x1, y)]. (((x1 = y) -> (bool_eq5(x1,
  y) = true)) and ((not (x1 = y)) -> (bool_eq5(x1, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type e__ref = { e__content : integer
}

function e__ref___projection(a: e__ref) : integer = (a).e__content

axiom first__def_axiom : (first = x)

logic first1 : int

predicate dynamic_property3(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x1:int. forall y:int [bool_eq6(x1, y)]. (((x1 = y) -> (bool_eq6(x1,
  y) = true)) and ((not (x1 = y)) -> (bool_eq6(x1, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type f__ref = { f__content : integer
}

function f__ref___projection(a: f__ref) : integer = (a).f__content

axiom first__def_axiom1 : (first1 = z)

logic first2 : int

predicate dynamic_property4(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x1:int. forall y:int [bool_eq7(x1, y)]. (((x1 = y) -> (bool_eq7(x1,
  y) = true)) and ((not (x1 = y)) -> (bool_eq7(x1, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type g__ref = { g__content : integer
}

function g__ref___projection(a: g__ref) : integer = (a).g__content

axiom first__def_axiom2 : (first2 = z)

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom z__def_axiom : (z = (x + 1))

logic m : int

logic oa : int

logic ob : int

logic oe : int

logic of_o : int

logic og : int

logic dynamic__p__result : int

logic dynamic__p__z__assume : int

logic o : int

logic us : int

logic o1 : int

logic us1 : int

logic o2 : int

logic us2 : int

logic o3 : int

logic us3 : int

logic o4 : int

logic us4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic result : int

logic m1 : int

logic result1 : int

logic oa1 : int

logic result2 : int

logic ob1 : int

logic result3 : int

logic oe1 : int

logic result4 : int

logic of_o1 : int

logic result5 : int

logic og1 : int

logic result6 : int

logic m2 : int

logic result7 : int

logic dynamic__p__result1 : int

logic dynamic__p__result2 : int

logic dynamic__p__result3 : int

logic m3 : int

logic oa2 : int

logic ob2 : int

logic oe2 : int

logic of_o2 : int

logic og2 : int

logic dynamic__p__result4 : int

logic m4 : int

logic oa3 : int

logic ob3 : int

logic oe3 : int

logic of_o3 : int

logic og3 : int

logic dynamic__p__result5 : int

logic result8 : int

axiom H : in_range1(x)

axiom H1 : (x <= 10)

axiom H2 : ((dynamic__p__z__assume = (x + 1)) and in_range((x + 1)))

axiom H3 : (dynamic__p__z__assume = z)

axiom H4 : in_range(z)

axiom H5 : ((o = (x + 2)) and in_range((x + 2)))

axiom H6 : (result = m)

axiom H7 : (m1 = o)

axiom H8 : in_range(m1)

axiom H9 : ((us = 1) and dynamic_property(1, last, 1))

axiom H10 : (o1 = 1)

axiom H11 : (result1 = oa)

axiom H12 : (oa1 = o1)

axiom H13 : dynamic_property(1, last, oa1)

axiom H14 : ((us1 = 2) and dynamic_property1(2, last1, 2))

axiom H15 : (o2 = 2)

axiom H16 : (result2 = ob)

axiom H17 : (ob1 = o2)

axiom H18 : dynamic_property1(2, last1, ob1)

axiom H19 : ((us2 = x) and dynamic_property2(first, 10, x))

axiom H20 : (o3 = x)

axiom H21 : (result3 = oe)

axiom H22 : (oe1 = o3)

axiom H23 : dynamic_property2(first, 10, oe1)

axiom H24 : ((us3 = 10) and dynamic_property3(first1, 10, 10))

axiom H25 : (o4 = 10)

axiom H26 : (result4 = of_o)

axiom H27 : (of_o1 = o4)

axiom H28 : dynamic_property3(first1, 10, of_o1)

axiom H29 : ((us4 = 10) and dynamic_property4(first2, 10, 10))

axiom H30 : (o5 = 10)

axiom H31 : (result5 = og)

axiom H32 : (og1 = o5)

axiom H33 : dynamic_property4(first2, 10, og1)

axiom H34 : ((o6 = (m1 + 1)) and in_range((m1 + 1)))

axiom H35 : (m1 = result6)

axiom H36 : (m2 = o6)

axiom H37 : (dynamic__p__result1 = dynamic__p__result2)

axiom H38 : (dynamic__p__result3 = dynamic__p__result1)

axiom H39 : (result7 = dynamic__p__result)

axiom H40 : (dynamic__p__result1 = og1)

axiom H41 : (dynamic__p__result4 = dynamic__p__result2)

axiom H42 : (og2 = og1)

axiom H43 : (of_o1 = of_o2)

axiom H44 : (oe1 = oe2)

axiom H45 : (ob1 = ob2)

axiom H46 : (oa1 = oa2)

axiom H47 : (m2 = m3)

axiom H48 : (dynamic__p__result5 = dynamic__p__result3)

axiom H49 : (og3 = og1)

axiom H50 : (of_o3 = of_o1)

axiom H51 : (oe3 = oe1)

axiom H52 : (ob3 = ob1)

axiom H53 : (oa3 = oa1)

axiom H54 : (m4 = m2)

axiom H55 : (result8 = dynamic__p__result4)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : ((x + 2) <= dynamic__p__result4)
