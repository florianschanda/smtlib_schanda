(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__types__t__d : integer
}

function us_split_discrs___projection(a: us_split_discrs) : integer =
  (a).rec__types__t__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__types__t__c : integer; rec__ext__ : us_private
}

function us_split_fields_C__projection(a: us_split_fields) : integer =
  (a).rec__types__t__c

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__types__t__d) = to_rep(((b).us_split_discrs1).rec__types__t__d)) and
  (to_rep(((a).us_split_fields1).rec__types__t__c) = to_rep(((b).us_split_fields1).rec__types__t__c))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__types__t__d) = to_rep(((b).us_split_discrs1).rec__types__t__d)) and
  (to_rep(((a).us_split_fields1).rec__types__t__c) = to_rep(((b).us_split_fields1).rec__types__t__c)))) ->
  (bool_eq2(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size({ us_split_discrs1 = { rec__types__t__d = a };
  us_split_fields1 = { rec__types__t__c = a1; rec__ext__ = a2 }; attr__tag =
  a3 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment({ us_split_discrs1 = { rec__types__t__d = a };
  us_split_fields1 = { rec__types__t__c = a1; rec__ext__ = a2 }; attr__tag =
  a3 })))

logic types__t__d__first__bit : int

logic types__t__d__last__bit : int

logic types__t__d__position : int

axiom types__t__d__first__bit_axiom : (0 <= types__t__d__first__bit)

axiom types__t__d__last__bit_axiom :
  (types__t__d__first__bit <  types__t__d__last__bit)

axiom types__t__d__position_axiom : (0 <= types__t__d__position)

logic types__t__c__first__bit : int

logic types__t__c__last__bit : int

logic types__t__c__position : int

axiom types__t__c__first__bit_axiom : (0 <= types__t__c__first__bit)

axiom types__t__c__last__bit_axiom :
  (types__t__c__first__bit <  types__t__c__last__bit)

axiom types__t__c__position_axiom : (0 <= types__t__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

logic dummy3 : us_private

logic dummy4 : int

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic valid : us_rep -> bool

logic valid__function_guard : bool, us_rep -> prop

logic valid1 : int, us_rep -> bool

logic valid__function_guard1 : bool, int, us_rep -> prop

axiom valid__post_axiom : true

axiom valid__post__dispatch_axiom : true

axiom valid__def_axiom :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [valid({ us_split_discrs1 = { rec__types__t__d = x }; us_split_fields1 = {
  rec__types__t__c = x1; rec__ext__ = x2 }; attr__tag = x3 })]. (valid({
  us_split_discrs1 = { rec__types__t__d = x }; us_split_fields1 = {
  rec__types__t__c = x1; rec__ext__ = x2 }; attr__tag = x3 }) = true))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall temp___164:int. forall temp___165:integer.
  forall temp___1651:integer. forall temp___1652:us_private.
  forall temp___1653:int. (in_range(temp___164) -> ((temp___1653 = us_tag) ->
  (valid({ us_split_discrs1 = { rec__types__t__d = temp___165 };
  us_split_fields1 = { rec__types__t__c = temp___1651; rec__ext__ =
  temp___1652 }; attr__tag = temp___1653 }) = true))))
