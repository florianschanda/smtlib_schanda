(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dic2__nested__parent us_main_type) (rec__ext__ us_private)))))
(define-fun us_split_fields_Parent__projection ((a us_split_fields)) us_main_type (rec__dic2__nested__parent a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (us_main_eq (rec__dic2__nested__parent (us_split_fields1 a)) (rec__dic2__nested__parent (us_split_fields1 b))) true) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((child__ref (mk_child__ref (child__content us_rep)))))
(define-fun child__ref___projection ((a child__ref)) us_rep (child__content a))
(declare-fun is_ok (us_rep) Bool)
(declare-fun is_ok__function_guard (Bool us_rep) Bool)
(declare-fun is_ok1 (Int us_rep) Bool)
(declare-fun is_ok__function_guard1 (Bool Int us_rep) Bool)
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((parent__ref (mk_parent__ref (parent__content us_rep)))))
(define-fun parent__ref___projection ((a parent__ref)) us_rep (parent__content a))
(declare-fun is_ok2 (us_rep) Bool)
(declare-fun is_ok__function_guard2 (Bool us_rep) Bool)
(declare-fun is_ok3 (Int us_rep) Bool)
(declare-fun is_ok__function_guard3 (Bool Int us_rep) Bool)
(assert (forall ((obj us_rep)) (! (= (ite (is_ok obj) 1 0) (ite (is_ok1 us_tag obj) 1 0)) :pattern ((is_ok1 us_tag obj)))))
(assert (forall ((obj us_rep)) (! (= (= (is_ok obj) true) (not (= (is_ok2 obj) true))) :pattern ((is_ok obj)))))
(define-fun default_initial_assumption ((temp___expr_167 us_rep) (temp___skip_top_level_168 Bool)) Bool (and (= (attr__tag temp___expr_167) us_tag) (=> (not (= temp___skip_top_level_168 true)) (= (is_ok temp___expr_167) true))))
(define-fun default_initial_assumption1 ((temp___expr_159 us_rep) (temp___skip_top_level_160 Bool)) Bool (and (= (attr__tag temp___expr_159) us_tag1) (=> (not (= temp___skip_top_level_160 true)) (= (is_ok2 temp___expr_159) true))))
(assert (forall ((obj us_rep)) (! (= (ite (is_ok2 obj) 1 0) (ite (is_ok3 us_tag1 obj) 1 0)) :pattern ((is_ok3 us_tag1 obj)))))
(assert (forall ((obj us_rep)) (! (= (ite (is_ok obj) 1 0) (ite (is_ok3 us_tag obj) 1 0)) :pattern ((is_ok3 us_tag obj)))))
(declare-const temp___174 us_main_type)
(declare-const temp___1741 us_private)
(declare-const temp___1742 Int)
(assert (= temp___1742 us_tag))
(assert (not (= (is_ok (mk___rep (mk___split_fields temp___174 temp___1741) temp___1742)) true)))
(check-sat)
(exit)
