(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__private_with_attributes__root_private_tagged us_main_type) (rec__ext__ us_private)))))
(define-fun us_split_fields_Root_Private_Tagged__projection ((a us_split_fields)) us_main_type (rec__private_with_attributes__root_private_tagged a))
(define-fun us_split_fields___3__projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___5__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___6__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (us_main_eq (rec__private_with_attributes__root_private_tagged (us_split_fields1 a)) (rec__private_with_attributes__root_private_tagged (us_split_fields1 b))) true) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((root_private_tagged__ref (mk_root_private_tagged__ref (root_private_tagged__content us_rep)))))
(define-fun root_private_tagged__ref___projection ((a root_private_tagged__ref)) us_rep (root_private_tagged__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__private_with_attributes__root_private_tagged1 us_main_type) (rec__private_with_attributes__child_private_tagged us_main_type1) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Root_Private_Tagged__2__projection ((a us_split_fields2)) us_main_type (rec__private_with_attributes__root_private_tagged1 a))
(define-fun us_split_fields_Child_Private_Tagged__projection ((a us_split_fields2)) us_main_type1 (rec__private_with_attributes__child_private_tagged a))
(define-fun us_split_fields___4__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___7__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___8__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (us_main_type1 us_private) us_private)
(declare-fun extract__child_private_tagged (us_private) us_main_type1)
(assert (forall ((child_private_tagged us_main_type1)) (forall ((rec__ext__2 us_private)) (= (extract__child_private_tagged (hide_ext__ child_private_tagged rec__ext__2)) child_private_tagged))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__private_with_attributes__root_private_tagged1 (us_split_fields3 a)) (hide_ext__ (rec__private_with_attributes__child_private_tagged (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (rec__private_with_attributes__root_private_tagged (us_split_fields1 r)) (extract__child_private_tagged (rec__ext__ (us_split_fields1 r))) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (us_main_eq (rec__private_with_attributes__root_private_tagged1 (us_split_fields3 a)) (rec__private_with_attributes__root_private_tagged1 (us_split_fields3 b))) true) (= (us_main_eq1 (rec__private_with_attributes__child_private_tagged (us_split_fields3 a)) (rec__private_with_attributes__child_private_tagged (us_split_fields3 b))) true)) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((child_private_tagged__ref (mk_child_private_tagged__ref (child_private_tagged__content us_rep1)))))
(define-fun child_private_tagged__ref___projection ((a child_private_tagged__ref)) us_rep1 (child_private_tagged__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__private_with_attributes__root_private_tagged2 us_main_type) (rec__private_with_attributes__child_private_tagged1 us_main_type1) (rec__public_derives_private__private_grand_child_private_tagged__f2 natural) (rec__ext__2 us_private)))))
(define-fun us_split_fields_Root_Private_Tagged__5__projection ((a us_split_fields4)) us_main_type (rec__private_with_attributes__root_private_tagged2 a))
(define-fun us_split_fields_Child_Private_Tagged__4__projection ((a us_split_fields4)) us_main_type1 (rec__private_with_attributes__child_private_tagged1 a))
(define-fun us_split_fields_F2__4__projection ((a us_split_fields4)) natural (rec__public_derives_private__private_grand_child_private_tagged__f2 a))
(define-fun us_split_fields___10__projection ((a us_split_fields4)) us_private (rec__ext__2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4) (attr__tag2 Int)))))
(define-fun us_rep___24__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___25__projection ((a us_rep2)) Int (attr__tag2 a))
(declare-fun hide_ext__1 (us_main_type1 natural us_private) us_private)
(assert (forall ((child_private_tagged us_main_type1)) (forall ((f2 natural)) (forall ((rec__ext__3 us_private)) (= (extract__child_private_tagged (hide_ext__1 child_private_tagged f2 rec__ext__3)) child_private_tagged)))))
(declare-fun extract__f2 (us_private) natural)
(assert (forall ((child_private_tagged us_main_type1)) (forall ((f2 natural)) (forall ((rec__ext__3 us_private)) (= (extract__f2 (hide_ext__1 child_private_tagged f2 rec__ext__3)) f2)))))
(declare-fun extract__ext__1 (us_private) us_private)
(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (mk___split_fields (rec__private_with_attributes__root_private_tagged2 (us_split_fields5 a)) (hide_ext__1 (rec__private_with_attributes__child_private_tagged1 (us_split_fields5 a)) (rec__public_derives_private__private_grand_child_private_tagged__f2 (us_split_fields5 a)) (rec__ext__2 (us_split_fields5 a)))) (attr__tag2 a)))
(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (mk___split_fields2 (rec__private_with_attributes__root_private_tagged (us_split_fields1 r)) (extract__child_private_tagged (rec__ext__ (us_split_fields1 r))) (extract__f2 (rec__ext__ (us_split_fields1 r))) (extract__ext__1 (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (us_main_eq (rec__private_with_attributes__root_private_tagged2 (us_split_fields5 a)) (rec__private_with_attributes__root_private_tagged2 (us_split_fields5 b))) true) (= (us_main_eq1 (rec__private_with_attributes__child_private_tagged1 (us_split_fields5 a)) (rec__private_with_attributes__child_private_tagged1 (us_split_fields5 b))) true)) (= (to_rep (rec__public_derives_private__private_grand_child_private_tagged__f2 (us_split_fields5 a))) (to_rep (rec__public_derives_private__private_grand_child_private_tagged__f2 (us_split_fields5 b))))) true false))
(declare-const us_tag2 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const public_derives_private__private_grand_child_private_tagged__f2__first__bit Int)
(declare-const public_derives_private__private_grand_child_private_tagged__f2__last__bit Int)
(declare-const public_derives_private__private_grand_child_private_tagged__f2__position Int)
(assert (<= 0 public_derives_private__private_grand_child_private_tagged__f2__first__bit))
(assert (< public_derives_private__private_grand_child_private_tagged__f2__first__bit public_derives_private__private_grand_child_private_tagged__f2__last__bit))
(assert (<= 0 public_derives_private__private_grand_child_private_tagged__f2__position))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((private_grand_child_private_tagged__ref (mk_private_grand_child_private_tagged__ref (private_grand_child_private_tagged__content us_rep2)))))
(define-fun private_grand_child_private_tagged__ref___projection ((a private_grand_child_private_tagged__ref)) us_rep2 (private_grand_child_private_tagged__content a))
(declare-fun get_f2 (us_rep2) Int)
(declare-fun get_f2__function_guard (Int us_rep2) Bool)
(define-fun default_initial_assumption ((temp___expr_241 us_rep2) (temp___skip_top_level_242 Bool)) Bool (and (= (attr__tag2 temp___expr_241) us_tag2) (= (to_rep (rec__public_derives_private__private_grand_child_private_tagged__f2 (us_split_fields5 temp___expr_241))) 0)))
(assert (forall ((g us_rep2)) (! (dynamic_invariant (get_f2 g) true false true true) :pattern ((get_f2 g)))))
(assert (forall ((g us_rep2)) (! (= (get_f2 g) (to_rep (rec__public_derives_private__private_grand_child_private_tagged__f2 (us_split_fields5 g)))) :pattern ((get_f2 g)))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__private_with_attributes__root__f natural) (rec__ext__3 us_private)))))
(define-fun us_split_fields_F__projection ((a us_split_fields6)) natural (rec__private_with_attributes__root__f a))
(define-fun us_split_fields___projection ((a us_split_fields6)) us_private (rec__ext__3 a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6) (attr__tag3 Int)))))
(define-fun us_rep___projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun us_rep___2__projection ((a us_rep3)) Int (attr__tag3 a))
(define-fun bool_eq3 ((a us_rep3) (b us_rep3)) Bool (ite (= (to_rep (rec__private_with_attributes__root__f (us_split_fields7 a))) (to_rep (rec__private_with_attributes__root__f (us_split_fields7 b)))) true false))
(declare-fun us_dispatch_eq1 (us_rep3 us_rep3) Bool)
(declare-const us_tag3 Int)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const private_with_attributes__root__f__first__bit Int)
(declare-const private_with_attributes__root__f__last__bit Int)
(declare-const private_with_attributes__root__f__position Int)
(assert (<= 0 private_with_attributes__root__f__first__bit))
(assert (< private_with_attributes__root__f__first__bit private_with_attributes__root__f__last__bit))
(assert (<= 0 private_with_attributes__root__f__position))
(declare-fun user_eq4 (us_rep3 us_rep3) Bool)
(declare-const dummy4 us_rep3)
(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep3)))))
(define-fun root__ref___projection ((a root__ref)) us_rep3 (root__content a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__private_with_attributes__child us_main_type2) (rec__private_with_attributes__root__f1 natural) (rec__ext__4 us_private)))))
(define-fun us_split_fields_Child__projection ((a us_split_fields8)) us_main_type2 (rec__private_with_attributes__child a))
(define-fun us_split_fields_F__2__projection ((a us_split_fields8)) natural (rec__private_with_attributes__root__f1 a))
(define-fun us_split_fields___2__projection ((a us_split_fields8)) us_private (rec__ext__4 a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8) (attr__tag4 Int)))))
(define-fun us_rep___3__projection ((a us_rep4)) us_split_fields8 (us_split_fields9 a))
(define-fun us_rep___4__projection ((a us_rep4)) Int (attr__tag4 a))
(declare-fun hide_ext__2 (us_main_type2 us_private) us_private)
(declare-fun extract__child (us_private) us_main_type2)
(assert (forall ((child us_main_type2)) (forall ((rec__ext__5 us_private)) (= (extract__child (hide_ext__2 child rec__ext__5)) child))))
(declare-fun extract__ext__2 (us_private) us_private)
(define-fun to_base2 ((a us_rep4)) us_rep3 (mk___rep3 (mk___split_fields3 (rec__private_with_attributes__root__f1 (us_split_fields9 a)) (hide_ext__2 (rec__private_with_attributes__child (us_split_fields9 a)) (rec__ext__4 (us_split_fields9 a)))) (attr__tag4 a)))
(define-fun of_base2 ((r us_rep3)) us_rep4 (mk___rep4 (mk___split_fields4 (extract__child (rec__ext__3 (us_split_fields7 r))) (rec__private_with_attributes__root__f (us_split_fields7 r)) (extract__ext__2 (rec__ext__3 (us_split_fields7 r)))) (attr__tag3 r)))
(define-fun bool_eq4 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (us_main_eq2 (rec__private_with_attributes__child (us_split_fields9 a)) (rec__private_with_attributes__child (us_split_fields9 b))) true) (= (to_rep (rec__private_with_attributes__root__f1 (us_split_fields9 a))) (to_rep (rec__private_with_attributes__root__f1 (us_split_fields9 b))))) true false))
(declare-const us_tag4 Int)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-const private_with_attributes__root__f__first__bit1 Int)
(declare-const private_with_attributes__root__f__last__bit1 Int)
(declare-const private_with_attributes__root__f__position1 Int)
(assert (<= 0 private_with_attributes__root__f__first__bit1))
(assert (< private_with_attributes__root__f__first__bit1 private_with_attributes__root__f__last__bit1))
(assert (<= 0 private_with_attributes__root__f__position1))
(declare-fun user_eq5 (us_rep4 us_rep4) Bool)
(declare-const dummy5 us_rep4)
(declare-datatypes () ((child__ref (mk_child__ref (child__content us_rep4)))))
(define-fun child__ref___projection ((a child__ref)) us_rep4 (child__content a))
(define-fun default_initial_assumption1 ((temp___expr_167 us_rep4) (temp___skip_top_level_168 Bool)) Bool (= (attr__tag4 temp___expr_167) us_tag4))
(define-fun default_initial_assumption2 ((temp___expr_175 us_rep) (temp___skip_top_level_176 Bool)) Bool (= (attr__tag temp___expr_175) us_tag))
(define-fun default_initial_assumption3 ((temp___expr_182 us_rep1) (temp___skip_top_level_183 Bool)) Bool (= (attr__tag1 temp___expr_182) us_tag1))
(declare-const c1 us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const c2 us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((us_split_fields10 (mk___split_fields5 (rec__private_with_attributes__root_private_tagged3 us_main_type) (rec__private_with_attributes__child_private_tagged2 us_main_type1) (rec__public_derives_private__grand_child_private_tagged__f2 natural) (rec__ext__5 us_private)))))
(define-fun us_split_fields_Root_Private_Tagged__3__projection ((a us_split_fields10)) us_main_type (rec__private_with_attributes__root_private_tagged3 a))
(define-fun us_split_fields_Child_Private_Tagged__2__projection ((a us_split_fields10)) us_main_type1 (rec__private_with_attributes__child_private_tagged2 a))
(define-fun us_split_fields_F2__projection ((a us_split_fields10)) natural (rec__public_derives_private__grand_child_private_tagged__f2 a))
(define-fun us_split_fields___6__projection ((a us_split_fields10)) us_private (rec__ext__5 a))
(declare-datatypes () ((us_split_fields__ref5 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref5)) us_split_fields10 (us_split_fields__content5 a))
(declare-datatypes () ((us_rep5 (mk___rep5 (us_split_fields11 us_split_fields10) (attr__tag5 Int)))))
(define-fun us_rep___15__projection ((a us_rep5)) us_split_fields10 (us_split_fields11 a))
(define-fun us_rep___16__projection ((a us_rep5)) Int (attr__tag5 a))
(declare-fun hide_ext__3 (us_main_type1 natural us_private) us_private)
(assert (forall ((child_private_tagged us_main_type1)) (forall ((f2 natural)) (forall ((rec__ext__6 us_private)) (= (extract__child_private_tagged (hide_ext__3 child_private_tagged f2 rec__ext__6)) child_private_tagged)))))
(declare-fun extract__f21 (us_private) natural)
(assert (forall ((child_private_tagged us_main_type1)) (forall ((f2 natural)) (forall ((rec__ext__6 us_private)) (= (extract__f21 (hide_ext__3 child_private_tagged f2 rec__ext__6)) f2)))))
(declare-fun extract__ext__3 (us_private) us_private)
(define-fun to_base3 ((a us_rep5)) us_rep (mk___rep (mk___split_fields (rec__private_with_attributes__root_private_tagged3 (us_split_fields11 a)) (hide_ext__3 (rec__private_with_attributes__child_private_tagged2 (us_split_fields11 a)) (rec__public_derives_private__grand_child_private_tagged__f2 (us_split_fields11 a)) (rec__ext__5 (us_split_fields11 a)))) (attr__tag5 a)))
(define-fun of_base3 ((r us_rep)) us_rep5 (mk___rep5 (mk___split_fields5 (rec__private_with_attributes__root_private_tagged (us_split_fields1 r)) (extract__child_private_tagged (rec__ext__ (us_split_fields1 r))) (extract__f21 (rec__ext__ (us_split_fields1 r))) (extract__ext__3 (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq5 ((a us_rep5) (b us_rep5)) Bool (ite (and (and (= (us_main_eq (rec__private_with_attributes__root_private_tagged3 (us_split_fields11 a)) (rec__private_with_attributes__root_private_tagged3 (us_split_fields11 b))) true) (= (us_main_eq1 (rec__private_with_attributes__child_private_tagged2 (us_split_fields11 a)) (rec__private_with_attributes__child_private_tagged2 (us_split_fields11 b))) true)) (= (to_rep (rec__public_derives_private__grand_child_private_tagged__f2 (us_split_fields11 a))) (to_rep (rec__public_derives_private__grand_child_private_tagged__f2 (us_split_fields11 b))))) true false))
(declare-const us_tag5 Int)
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep5) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep5) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))
(declare-const public_derives_private__grand_child_private_tagged__f2__first__bit Int)
(declare-const public_derives_private__grand_child_private_tagged__f2__last__bit Int)
(declare-const public_derives_private__grand_child_private_tagged__f2__position Int)
(assert (<= 0 public_derives_private__grand_child_private_tagged__f2__first__bit))
(assert (< public_derives_private__grand_child_private_tagged__f2__first__bit public_derives_private__grand_child_private_tagged__f2__last__bit))
(assert (<= 0 public_derives_private__grand_child_private_tagged__f2__position))
(declare-fun user_eq6 (us_rep5 us_rep5) Bool)
(declare-const dummy6 us_rep5)
(declare-datatypes () ((grand_child_private_tagged__ref (mk_grand_child_private_tagged__ref (grand_child_private_tagged__content us_rep5)))))
(define-fun grand_child_private_tagged__ref___projection ((a grand_child_private_tagged__ref)) us_rep5 (grand_child_private_tagged__content a))
(define-fun default_initial_assumption4 ((temp___expr_213 us_rep5) (temp___skip_top_level_214 Bool)) Bool (and (= (attr__tag5 temp___expr_213) us_tag5) (= (to_rep (rec__public_derives_private__grand_child_private_tagged__f2 (us_split_fields11 temp___expr_213))) 0)))
(declare-datatypes () ((us_split_fields12 (mk___split_fields6 (rec__private_with_attributes__child1 us_main_type2) (rec__public_derives_private__grand_child__f2 natural) (rec__private_with_attributes__root__f2 natural) (rec__ext__6 us_private)))))
(define-fun us_split_fields_Child__2__projection ((a us_split_fields12)) us_main_type2 (rec__private_with_attributes__child1 a))
(define-fun us_split_fields_F2__3__projection ((a us_split_fields12)) natural (rec__public_derives_private__grand_child__f2 a))
(define-fun us_split_fields_F__3__projection ((a us_split_fields12)) natural (rec__private_with_attributes__root__f2 a))
(define-fun us_split_fields___8__projection ((a us_split_fields12)) us_private (rec__ext__6 a))
(declare-datatypes () ((us_split_fields__ref6 (mk___split_fields__ref6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref6)) us_split_fields12 (us_split_fields__content6 a))
(declare-datatypes () ((us_rep6 (mk___rep6 (us_split_fields13 us_split_fields12) (attr__tag6 Int)))))
(define-fun us_rep___19__projection ((a us_rep6)) us_split_fields12 (us_split_fields13 a))
(define-fun us_rep___20__projection ((a us_rep6)) Int (attr__tag6 a))
(declare-fun hide_ext__4 (us_main_type2 natural us_private) us_private)
(assert (forall ((child us_main_type2)) (forall ((f2 natural)) (forall ((rec__ext__7 us_private)) (= (extract__child (hide_ext__4 child f2 rec__ext__7)) child)))))
(declare-fun extract__f22 (us_private) natural)
(assert (forall ((child us_main_type2)) (forall ((f2 natural)) (forall ((rec__ext__7 us_private)) (= (extract__f22 (hide_ext__4 child f2 rec__ext__7)) f2)))))
(declare-fun extract__ext__4 (us_private) us_private)
(define-fun to_base4 ((a us_rep6)) us_rep3 (mk___rep3 (mk___split_fields3 (rec__private_with_attributes__root__f2 (us_split_fields13 a)) (hide_ext__4 (rec__private_with_attributes__child1 (us_split_fields13 a)) (rec__public_derives_private__grand_child__f2 (us_split_fields13 a)) (rec__ext__6 (us_split_fields13 a)))) (attr__tag6 a)))
(define-fun of_base4 ((r us_rep3)) us_rep6 (mk___rep6 (mk___split_fields6 (extract__child (rec__ext__3 (us_split_fields7 r))) (extract__f22 (rec__ext__3 (us_split_fields7 r))) (rec__private_with_attributes__root__f (us_split_fields7 r)) (extract__ext__4 (rec__ext__3 (us_split_fields7 r)))) (attr__tag3 r)))
(define-fun bool_eq6 ((a us_rep6) (b us_rep6)) Bool (ite (and (and (= (us_main_eq2 (rec__private_with_attributes__child1 (us_split_fields13 a)) (rec__private_with_attributes__child1 (us_split_fields13 b))) true) (= (to_rep (rec__public_derives_private__grand_child__f2 (us_split_fields13 a))) (to_rep (rec__public_derives_private__grand_child__f2 (us_split_fields13 b))))) (= (to_rep (rec__private_with_attributes__root__f2 (us_split_fields13 a))) (to_rep (rec__private_with_attributes__root__f2 (us_split_fields13 b))))) true false))
(declare-const us_tag6 Int)
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep6) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep6) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep6)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep6)) (<= 0 (object__alignment6 a))))
(declare-const public_derives_private__grand_child__f2__first__bit Int)
(declare-const public_derives_private__grand_child__f2__last__bit Int)
(declare-const public_derives_private__grand_child__f2__position Int)
(assert (<= 0 public_derives_private__grand_child__f2__first__bit))
(assert (< public_derives_private__grand_child__f2__first__bit public_derives_private__grand_child__f2__last__bit))
(assert (<= 0 public_derives_private__grand_child__f2__position))
(declare-const private_with_attributes__root__f__first__bit2 Int)
(declare-const private_with_attributes__root__f__last__bit2 Int)
(declare-const private_with_attributes__root__f__position2 Int)
(assert (<= 0 private_with_attributes__root__f__first__bit2))
(assert (< private_with_attributes__root__f__first__bit2 private_with_attributes__root__f__last__bit2))
(assert (<= 0 private_with_attributes__root__f__position2))
(declare-fun user_eq7 (us_rep6 us_rep6) Bool)
(declare-const dummy7 us_rep6)
(declare-datatypes () ((grand_child__ref (mk_grand_child__ref (grand_child__content us_rep6)))))
(define-fun grand_child__ref___projection ((a grand_child__ref)) us_rep6 (grand_child__content a))
(define-fun default_initial_assumption5 ((temp___expr_227 us_rep6) (temp___skip_top_level_228 Bool)) Bool (and (= (attr__tag6 temp___expr_227) us_tag6) (= (to_rep (rec__public_derives_private__grand_child__f2 (us_split_fields13 temp___expr_227))) 0)))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const f__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const g__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const p__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const rc__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const fc__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const g1__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const g2__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun default_initial_assumption6 ((temp___expr_159 us_rep3) (temp___skip_top_level_160 Bool)) Bool (= (attr__tag3 temp___expr_159) us_tag3))
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 1))
(declare-const r__split_fields us_main_type)
(declare-const r__split_fields1 us_private)
(declare-const f__split_fields us_main_type)
(declare-const f__split_fields1 us_main_type1)
(declare-const f__split_fields2 us_private)
(declare-const g__split_fields natural)
(declare-const p__split_fields natural)
(declare-const rc__split_fields us_main_type)
(declare-const rc__split_fields1 us_private)
(declare-const fc__split_fields us_main_type)
(declare-const fc__split_fields1 us_private)
(declare-const g1__split_fields us_main_type2)
(declare-const g1__split_fields1 natural)
(declare-const g1__split_fields2 natural)
(declare-const g1__split_fields3 us_private)
(declare-const g2__split_fields us_main_type2)
(declare-const g2__split_fields1 natural)
(declare-const g2__split_fields2 natural)
(declare-const g2__split_fields3 us_private)
(declare-const result us_main_type)
(declare-const result1 us_private)
(declare-const rc__split_fields2 us_main_type)
(declare-const rc__split_fields3 us_private)
(declare-const result2 us_main_type)
(declare-const result3 us_private)
(declare-const fc__split_fields2 us_split_fields)
(declare-const result4 us_split_fields__ref6)
(declare-const g1__split_fields4 us_split_fields12)
(declare-const result5 us_split_fields__ref6)
(declare-const g2__split_fields4 us_split_fields12)
(assert (in_range1 c))
(assert (= r__attr__tag us_tag))
(assert (= f__attr__tag us_tag1))
(assert (and (= g__attr__tag us_tag5) (= (to_rep g__split_fields) 0)))
(assert (and (= p__attr__tag us_tag2) (= (to_rep p__split_fields) 0)))
(assert (= result rc__split_fields))
(assert (= result1 rc__split_fields1))
(assert (= r__split_fields rc__split_fields2))
(assert (= r__split_fields1 rc__split_fields3))
(assert (= rc__attr__tag r__attr__tag))
(assert (= result2 fc__split_fields))
(assert (= result3 fc__split_fields1))
(assert (= fc__split_fields2 (mk___split_fields f__split_fields (hide_ext__ f__split_fields1 f__split_fields2))))
(assert (= fc__attr__tag f__attr__tag))
(assert (= result4 (mk___split_fields__ref6 (mk___split_fields6 g1__split_fields g1__split_fields1 g1__split_fields2 g1__split_fields3))))
(assert (= g1__split_fields4 (mk___split_fields6 (rec__private_with_attributes__child (us_split_fields9 c1)) rliteral (rec__private_with_attributes__root__f1 (us_split_fields9 c1)) us_null_ext__)))
(assert (= g1__attr__tag us_tag6))
(assert (= result5 (mk___split_fields__ref6 (mk___split_fields6 g2__split_fields g2__split_fields1 g2__split_fields2 g2__split_fields3))))
(assert (= g2__split_fields4 (mk___split_fields6 (rec__private_with_attributes__child (us_split_fields9 c2)) rliteral (rec__private_with_attributes__root__f1 (us_split_fields9 c2)) us_null_ext__)))
(assert (= g2__attr__tag us_tag6))
(assert (not (= (bool_eq4 c1 c2) true)))
(assert (not (= (to_rep (rec__private_with_attributes__root__f1 (us_split_fields9 c1))) (to_rep (rec__private_with_attributes__root__f1 (us_split_fields9 c2))))))
(check-sat)
(exit)
