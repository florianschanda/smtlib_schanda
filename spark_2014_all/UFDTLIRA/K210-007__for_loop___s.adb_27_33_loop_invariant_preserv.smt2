(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t8b 0)
(declare-fun t8bqtint (t8b) Int)
(assert (forall ((i t8b)) (and (<= 1 (t8bqtint i)) (<= (t8bqtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (t8b t8b) Bool)
(declare-const dummy1 t8b)
(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content t8b)))))
(define-fun t8b__ref___projection ((a t8b__ref)) t8b (t8b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t9b 0)
(declare-fun t9bqtint (t9b) Int)
(assert (forall ((i t9b)) (and (<= 1 (t9bqtint i)) (<= (t9bqtint i) 10))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (t9b t9b) Bool)
(declare-const dummy2 t9b)
(declare-datatypes () ((t9b__ref (mk_t9b__ref (t9b__content t9b)))))
(define-fun t9b__ref___projection ((a t9b__ref)) t9b (t9b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const t Int)
(declare-const index Int)
(declare-const index1 Int)
(declare-const temp___189 Int)
(declare-const temp___188 Int)
(declare-const result Int)
(declare-const t1 Int)
(declare-const result1 Int)
(declare-const index2 Int)
(declare-const t2 Int)
(declare-const index3 Int)
(declare-const result2 Int)
(declare-const t3 Int)
(declare-const t4 Int)
(declare-const index4 Int)
(declare-const t5 Int)
(declare-const index5 Int)
(declare-const t6 Int)
(declare-const index6 Int)
(declare-const t7 Int)
(declare-const index7 Int)
(declare-const result3 Int)
(declare-const t8 Int)
(declare-const result4 Int)
(declare-const index8 Int)
(declare-const t9 Int)
(declare-const index9 Int)
(declare-const result5 Int)
(declare-const t10 Int)
(declare-const result6 Int)
(declare-const index10 Int)
(declare-const t11 Int)
(declare-const index11 Int)
(declare-const t12 Int)
(declare-const index12 Int)
(assert (= result t))
(assert (= t1 0))
(assert (in_range1 t1))
(assert (= (mk_int__ref result1) (mk_int__ref index)))
(assert (= index2 1))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= temp___189 index2)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= temp___188 t1)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= t2 (- index3 1))))
(assert (=> (and (<= 1 index2) (<= index2 10)) (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 t2)) (=> (<= 1 10) (in_range2 index3))) (and (<= 1 index3) (<= index3 10)))))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= t2 result2)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= t3 index3)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= index3 10)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= index3 index4)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= t3 t4)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= index5 index3)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= t5 t3)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= (mk_int__ref index6) (mk_int__ref index4))))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= (mk_int__ref t6) (mk_int__ref t4))))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= index7 index5)))
(assert (=> (and (<= 1 index2) (<= index2 10)) (= t7 t5)))
(assert (=> (not (and (<= 1 index2) (<= index2 10))) (= index2 index6)))
(assert (=> (not (and (<= 1 index2) (<= index2 10))) (= t1 t6)))
(assert (=> (not (and (<= 1 index2) (<= index2 10))) (= index7 index2)))
(assert (=> (not (and (<= 1 index2) (<= index2 10))) (= t7 t1)))
(assert (= t6 10))
(assert (= result3 t6))
(assert (= t8 11))
(assert (= (mk_int__ref result4) (mk_int__ref index1)))
(assert (= index8 10))
(assert (<= 1 index8))
(assert (<= index8 10))
(assert (= t9 (+ index9 1)))
(assert (and (and (=> (<= 1 10) (in_range3 index9)) (=> (<= (- 2147483648) 2147483647) (in_range1 t9))) (and (<= 1 index9) (<= index9 10))))
(assert (= t9 result5))
(assert (= t10 index9))
(assert (not (= index9 1)))
(assert (= result6 index9))
(assert (= index10 (- index9 1)))
(assert (= index10 index11))
(assert (= t10 t11))
(assert (= index12 index10))
(assert (= t12 t10))
(assert (not (= t11 (+ index11 1))))
(check-sat)
(exit)
