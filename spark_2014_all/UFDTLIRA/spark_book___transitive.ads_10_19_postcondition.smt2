(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-fun property (Int Int) Bool)
(declare-fun property__function_guard (Bool Int Int) Bool)
(assert true)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun prop_transitive (Int Int Int) Bool)
(declare-fun prop_transitive__function_guard (Bool Int Int Int) Bool)
(assert (forall ((a Int) (b Int) (c Int)) (! (=> (and (and (dynamic_invariant a true true true) (dynamic_invariant b true true true)) (dynamic_invariant c true true true)) (=> (and (and (= (prop_transitive a b c) true) (= (property a b) true)) (= (property b c) true)) (= (property a c) true))) :pattern ((prop_transitive a b c)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t3b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (t3b t3b) Bool)
(declare-const dummy1 t3b)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content t3b)))))
(define-fun t3b__ref___projection ((a t3b__ref)) t3b (t3b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x Int)
(declare-const x_last Int)
(declare-const i Int)
(declare-const temp___136 Int)
(declare-const temp___135 Int)
(declare-const temp___134 Int)
(declare-const temp___132 Int)
(declare-const temp___133 Int)
(declare-const x1 Int)
(declare-const x_last1 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const x2 Int)
(declare-const x_last2 Int)
(declare-const i2 Int)
(declare-const result1 Int)
(declare-const x_last3 Int)
(declare-const x3 Int)
(declare-const x4 Int)
(declare-const x_last4 Int)
(declare-const i3 Int)
(declare-const x5 Int)
(declare-const x_last5 Int)
(declare-const i4 Int)
(declare-const x6 Int)
(declare-const x_last6 Int)
(declare-const i5 Int)
(declare-const x7 Int)
(declare-const x_last7 Int)
(declare-const i6 Int)
(declare-const x8 Int)
(declare-const x_last8 Int)
(declare-const i7 Int)
(declare-const x9 Int)
(declare-const x_last9 Int)
(declare-const i8 Int)
(define-fun x_last10 () int__ref (mk_int__ref x_last6))
(define-fun x10 () int__ref (mk_int__ref x6))
(assert (in_range1 x))
(assert (=> (<= 0 2147483647) (in_range1 x_last)))
(assert (= (property x x) true))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___136 x)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___135 x)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___134 i1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___132 x)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= temp___133 x_last)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= (property temp___136 x2) true)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (and (and (and (=> (<= 0 2147483647) (in_range1 x_last2)) (=> (<= 1 10) (in_range2 i2))) (in_range1 x2)) (and (<= 1 i2) (<= i2 10)))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x_last2 result1)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x_last3 x2)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (and (= (property x2 x3) true) (in_range1 x3))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= (prop_transitive temp___132 x_last3 x3) true)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 10)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x_last3 x_last4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x3 x4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x_last5 x_last3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x5 x3)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= (mk_int__ref i5) (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x_last10 (mk_int__ref x_last4))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x10 (mk_int__ref x4))))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= i6 i4)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x_last7 x_last5)))
(assert (=> (and (<= 1 i1) (<= i1 10)) (= x7 x5)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= x_last10 (mk_int__ref x_last))))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= x10 (mk_int__ref x))))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= i6 i1)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= x_last7 x_last1)))
(assert (=> (not (and (<= 1 i1) (<= i1 10))) (= x7 x1)))
(assert (= i7 i5))
(assert (= x_last8 x_last6))
(assert (= (mk_int__ref x8) x10))
(assert (= i8 i6))
(assert (= x_last9 x_last7))
(assert (= x9 x7))
(assert (not (= (property x x8) true)))
(check-sat)
(exit)
