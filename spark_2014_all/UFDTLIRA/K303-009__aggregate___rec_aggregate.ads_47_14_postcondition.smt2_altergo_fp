(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__rec_aggregate__r2__x : integer;
rec__rec_aggregate__r2__y : integer
}

function us_split_fields_X__2__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__x

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__rec_aggregate__r2__x = a;
  rec__rec_aggregate__r2__y = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__rec_aggregate__r2__x = a;
  rec__rec_aggregate__r2__y = a1 } })))

logic rec_aggregate__r2__x__first__bit : int

logic rec_aggregate__r2__x__last__bit : int

logic rec_aggregate__r2__x__position : int

axiom rec_aggregate__r2__x__first__bit_axiom :
  (0 <= rec_aggregate__r2__x__first__bit)

axiom rec_aggregate__r2__x__last__bit_axiom :
  (rec_aggregate__r2__x__first__bit <  rec_aggregate__r2__x__last__bit)

axiom rec_aggregate__r2__x__position_axiom :
  (0 <= rec_aggregate__r2__x__position)

logic rec_aggregate__r2__y__first__bit : int

logic rec_aggregate__r2__y__last__bit : int

logic rec_aggregate__r2__y__position : int

axiom rec_aggregate__r2__y__first__bit_axiom :
  (0 <= rec_aggregate__r2__y__first__bit)

axiom rec_aggregate__r2__y__last__bit_axiom :
  (rec_aggregate__r2__y__first__bit <  rec_aggregate__r2__y__last__bit)

axiom rec_aggregate__r2__y__position_axiom :
  (0 <= rec_aggregate__r2__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type r2__ref = { r2__content : us_rep
}

function r2__ref___projection(a: r2__ref) : us_rep = (a).r2__content

type us_split_fields2 = { rec__rec_aggregate__r3__x : integer;
rec__rec_aggregate__r3__y : integer; rec__rec_aggregate__r3__z : us_rep
}

function us_split_fields_X__3__projection(a: us_split_fields2) : integer =
  (a).rec__rec_aggregate__r3__x

function us_split_fields_Y__2__projection(a: us_split_fields2) : integer =
  (a).rec__rec_aggregate__r3__y

function us_split_fields_Z__projection(a: us_split_fields2) : us_rep =
  (a).rec__rec_aggregate__r3__z

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  (((((to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__x) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__x)) and
  (to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__y) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__y))) and
  (bool_eq2(((a).us_split_fields3).rec__rec_aggregate__r3__z,
  ((b).us_split_fields3).rec__rec_aggregate__r3__z) = true)) -> (bool_eq3(a,
  b) = true)) and
  ((not (((to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__x) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__x)) and
  (to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__y) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__y))) and
  (bool_eq2(((a).us_split_fields3).rec__rec_aggregate__r3__z,
  ((b).us_split_fields3).rec__rec_aggregate__r3__z) = true))) -> (bool_eq3(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:integer. forall a3:integer.
  (0 <= object__size1({ us_split_fields3 = { rec__rec_aggregate__r3__x = a;
  rec__rec_aggregate__r3__y = a1; rec__rec_aggregate__r3__z = {
  us_split_fields1 = { rec__rec_aggregate__r2__x = a2;
  rec__rec_aggregate__r2__y = a3 } } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:integer. forall a3:integer.
  (0 <= object__alignment1({ us_split_fields3 = { rec__rec_aggregate__r3__x =
  a; rec__rec_aggregate__r3__y = a1; rec__rec_aggregate__r3__z = {
  us_split_fields1 = { rec__rec_aggregate__r2__x = a2;
  rec__rec_aggregate__r2__y = a3 } } } })))

logic rec_aggregate__r3__x__first__bit : int

logic rec_aggregate__r3__x__last__bit : int

logic rec_aggregate__r3__x__position : int

axiom rec_aggregate__r3__x__first__bit_axiom :
  (0 <= rec_aggregate__r3__x__first__bit)

axiom rec_aggregate__r3__x__last__bit_axiom :
  (rec_aggregate__r3__x__first__bit <  rec_aggregate__r3__x__last__bit)

axiom rec_aggregate__r3__x__position_axiom :
  (0 <= rec_aggregate__r3__x__position)

logic rec_aggregate__r3__y__first__bit : int

logic rec_aggregate__r3__y__last__bit : int

logic rec_aggregate__r3__y__position : int

axiom rec_aggregate__r3__y__first__bit_axiom :
  (0 <= rec_aggregate__r3__y__first__bit)

axiom rec_aggregate__r3__y__last__bit_axiom :
  (rec_aggregate__r3__y__first__bit <  rec_aggregate__r3__y__last__bit)

axiom rec_aggregate__r3__y__position_axiom :
  (0 <= rec_aggregate__r3__y__position)

logic rec_aggregate__r3__z__first__bit : int

logic rec_aggregate__r3__z__last__bit : int

logic rec_aggregate__r3__z__position : int

axiom rec_aggregate__r3__z__first__bit_axiom :
  (0 <= rec_aggregate__r3__z__first__bit)

axiom rec_aggregate__r3__z__last__bit_axiom :
  (rec_aggregate__r3__z__first__bit <  rec_aggregate__r3__z__last__bit)

axiom rec_aggregate__r3__z__position_axiom :
  (0 <= rec_aggregate__r3__z__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : integer

type r3__ref = { r3__content : us_rep1
}

function r3__ref___projection(a: r3__ref) : us_rep1 = (a).r3__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic one : int

logic r__split_fields : integer

logic r__split_fields1 : integer

logic r__split_fields2 : integer

logic r__split_fields3 : integer

logic o : integer

logic o1 : integer

logic o2 : integer

logic o3 : integer

logic o4 : integer

logic o5 : integer

logic o6 : integer

logic o7 : integer

logic o8 : integer

logic o9 : integer

logic o10 : integer

logic o11 : integer

logic temp___178 : integer

logic temp___1781 : integer

logic temp___1782 : integer

logic temp___1783 : integer

logic o12 : integer

logic o13 : integer

logic o14 : integer

logic o15 : integer

logic o16 : integer

logic o17 : integer

logic o18 : integer

logic o19 : integer

logic o20 : integer

logic o21 : integer

logic o22 : integer

logic o23 : integer

logic temp___179 : integer

logic temp___1791 : integer

logic temp___1792 : integer

logic temp___1793 : integer

logic o24 : integer

logic o25 : integer

logic o26 : integer

logic o27 : integer

logic o28 : integer

logic o29 : integer

logic o30 : integer

logic o31 : integer

logic o32 : integer

logic o33 : integer

logic o34 : integer

logic o35 : integer

logic temp___180 : integer

logic temp___1801 : integer

logic temp___1802 : integer

logic temp___1803 : integer

logic o36 : integer

logic o37 : integer

logic o38 : integer

logic o39 : integer

logic o40 : integer

logic o41 : integer

logic o42 : integer

logic o43 : integer

logic o44 : integer

logic o45 : integer

logic o46 : integer

logic o47 : integer

logic temp___181 : integer

logic temp___1811 : integer

logic temp___1812 : integer

logic temp___1813 : integer

logic o48 : integer

logic o49 : integer

logic o50 : integer

logic o51 : integer

logic o52 : integer

logic o53 : integer

logic o54 : integer

logic o55 : integer

logic o56 : integer

logic o57 : integer

logic o58 : integer

logic o59 : integer

logic temp___182 : integer

logic temp___1821 : integer

logic temp___1822 : integer

logic temp___1823 : integer

logic result : integer

logic result1 : integer

logic result2 : integer

logic result3 : integer

logic r__split_fields4 : integer

logic r__split_fields5 : integer

logic r__split_fields6 : integer

logic r__split_fields7 : integer

logic result4 : integer

logic result5 : integer

logic result6 : integer

logic result7 : integer

logic r__split_fields8 : integer

logic r__split_fields9 : integer

logic r__split_fields10 : integer

logic r__split_fields11 : integer

logic result8 : integer

logic result9 : integer

logic result10 : integer

logic result11 : integer

logic r__split_fields12 : integer

logic r__split_fields13 : integer

logic r__split_fields14 : integer

logic r__split_fields15 : integer

logic result12 : integer

logic result13 : integer

logic result14 : integer

logic result15 : integer

logic r__split_fields16 : integer

logic r__split_fields17 : integer

logic r__split_fields18 : integer

logic r__split_fields19 : integer

logic result16 : integer

logic result17 : integer

logic result18 : integer

logic result19 : integer

logic r__split_fields20 : integer

logic r__split_fields21 : integer

logic r__split_fields22 : integer

logic r__split_fields23 : integer

logic r__split_fields24 : integer

logic r__split_fields25 : integer

logic r__split_fields26 : integer

logic r__split_fields27 : integer

logic r__split_fields28 : integer

logic r__split_fields29 : integer

logic r__split_fields30 : integer

logic r__split_fields31 : integer

axiom H : in_range(one)

axiom H1 : in_range(b)

axiom H2 : (one = 1)

axiom H3 : ((b = 1) -> (to_rep(o) = 2))

axiom H4 : ((b = 1) -> (to_rep(o1) = one))

axiom H5 : ((b = 1) -> (o1 = o2))

axiom H6 : ((b = 1) -> (o = o3))

axiom H7 : ((b = 1) -> (o4 = o2))

axiom H8 : ((b = 1) -> (o5 = o3))

axiom H9 : ((b = 1) -> (to_rep(o6) = 2))

axiom H10 : ((b = 1) -> (to_rep(o7) = one))

axiom H11 : ((b = 1) -> (o7 = o8))

axiom H12 : ((b = 1) -> (o6 = o9))

axiom H13 : ((b = 1) -> (o10 = o4))

axiom H14 : ((b = 1) -> (o11 = o5))

axiom H15 : ((b = 1) -> (temp___178 = o8))

axiom H16 : ((b = 1) -> (temp___1781 = o9))

axiom H17 : ((b = 1) -> (temp___1782 = o10))

axiom H18 : ((b = 1) -> (temp___1783 = o11))

axiom H19 : ((b = 1) -> ((result = r__split_fields) and
  ((result1 = r__split_fields1) and ((result2 = r__split_fields2) and
  (result3 = r__split_fields3)))))

axiom H20 : ((b = 1) -> ((r__split_fields4 = temp___178) and
  ((r__split_fields5 = temp___1781) and ((r__split_fields6 = temp___1782) and
  (r__split_fields7 = temp___1783)))))

axiom H21 : ((not (b = 1)) -> ((b = 2) -> (to_rep(o12) = one)))

axiom H22 : ((not (b = 1)) -> ((b = 2) -> (to_rep(o13) = one)))

axiom H23 : ((not (b = 1)) -> ((b = 2) -> (o13 = o14)))

axiom H24 : ((not (b = 1)) -> ((b = 2) -> (o12 = o15)))

axiom H25 : ((not (b = 1)) -> ((b = 2) -> (o16 = o14)))

axiom H26 : ((not (b = 1)) -> ((b = 2) -> (o17 = o15)))

axiom H27 : ((not (b = 1)) -> ((b = 2) -> (to_rep(o18) = one)))

axiom H28 : ((not (b = 1)) -> ((b = 2) -> (to_rep(o19) = one)))

axiom H29 : ((not (b = 1)) -> ((b = 2) -> (o19 = o20)))

axiom H30 : ((not (b = 1)) -> ((b = 2) -> (o18 = o21)))

axiom H31 : ((not (b = 1)) -> ((b = 2) -> (o22 = o16)))

axiom H32 : ((not (b = 1)) -> ((b = 2) -> (o23 = o17)))

axiom H33 : ((not (b = 1)) -> ((b = 2) -> ((temp___179 = o20) and
  ((temp___1791 = o21) and ((temp___1792 = o22) and (temp___1793 = o23))))))

axiom H34 : ((not (b = 1)) -> ((b = 2) -> ((result4 = r__split_fields) and
  ((result5 = r__split_fields1) and ((result6 = r__split_fields2) and
  (result7 = r__split_fields3))))))

axiom H35 : ((not (b = 1)) -> ((b = 2) ->
  ((r__split_fields8 = temp___179) and ((r__split_fields9 = temp___1791) and
  ((r__split_fields10 = temp___1792) and
  (r__split_fields11 = temp___1793))))))

axiom H36 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  (to_rep(o24) = one))))

axiom H37 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  (to_rep(o25) = 1))))

axiom H38 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) -> ((o26 = o25) and
  (o27 = o24)))))

axiom H39 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) -> ((o28 = o26) and
  (o29 = o27)))))

axiom H40 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  (to_rep(o30) = one))))

axiom H41 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  (to_rep(o31) = one))))

axiom H42 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) -> ((o32 = o31) and
  ((o33 = o30) and ((o34 = o28) and (o35 = o29)))))))

axiom H43 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  ((temp___180 = o32) and ((temp___1801 = o33) and ((temp___1802 = o34) and
  (temp___1803 = o35)))))))

axiom H44 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  ((result8 = r__split_fields) and ((result9 = r__split_fields1) and
  ((result10 = r__split_fields2) and (result11 = r__split_fields3)))))))

axiom H45 : ((not (b = 1)) -> ((not (b = 2)) -> ((b = 3) ->
  ((r__split_fields12 = temp___180) and
  ((r__split_fields13 = temp___1801) and
  ((r__split_fields14 = temp___1802) and
  (r__split_fields15 = temp___1803)))))))

axiom H46 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (to_rep(o36) = one)))))

axiom H47 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (to_rep(o37) = 2)))))

axiom H48 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  ((o38 = o37) and (o39 = o36))))))

axiom H49 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  ((o40 = o38) and (o41 = o39))))))

axiom H50 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (to_rep(o42) = one)))))

axiom H51 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (to_rep(o43) = 2)))))

axiom H52 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  ((o44 = o43) and ((o45 = o42) and ((o46 = o40) and (o47 = o41))))))))

axiom H53 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  ((temp___181 = o44) and ((temp___1811 = o45) and ((temp___1812 = o46) and
  (temp___1813 = o47))))))))

axiom H54 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  ((result12 = r__split_fields) and ((result13 = r__split_fields1) and
  ((result14 = r__split_fields2) and (result15 = r__split_fields3))))))))

axiom H55 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  ((r__split_fields16 = temp___181) and
  ((r__split_fields17 = temp___1811) and
  ((r__split_fields18 = temp___1812) and
  (r__split_fields19 = temp___1813))))))))

axiom H56 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (to_rep(o48) = 2)))))

axiom H57 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (to_rep(o49) = one)))))

axiom H58 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((o50 = o49) and (o51 = o48))))))

axiom H59 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((o52 = o50) and (o53 = o51))))))

axiom H60 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (to_rep(o54) = 2)))))

axiom H61 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> (to_rep(o55) = one)))))

axiom H62 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((o56 = o55) and ((o57 = o54) and ((o58 = o52) and
  (o59 = o53))))))))

axiom H63 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((temp___182 = o56) and ((temp___1821 = o57) and
  ((temp___1822 = o58) and (temp___1823 = o59))))))))

axiom H64 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((result16 = r__split_fields) and
  ((result17 = r__split_fields1) and ((result18 = r__split_fields2) and
  (result19 = r__split_fields3))))))))

axiom H65 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((r__split_fields20 = temp___182) and
  ((r__split_fields21 = temp___1821) and
  ((r__split_fields22 = temp___1822) and
  (r__split_fields23 = temp___1823))))))))

axiom H66 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((not (b = 4)) -> ((r__split_fields16 = r__split_fields20) and
  ((r__split_fields17 = r__split_fields21) and
  ((r__split_fields18 = r__split_fields22) and
  (r__split_fields19 = r__split_fields23))))))))

axiom H67 : ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) ->
  ((r__split_fields12 = r__split_fields16) and
  ((r__split_fields13 = r__split_fields17) and
  ((r__split_fields14 = r__split_fields18) and
  (r__split_fields15 = r__split_fields19)))))))

axiom H68 : ((not (b = 1)) -> ((not (b = 2)) ->
  ((r__split_fields8 = r__split_fields12) and
  ((r__split_fields9 = r__split_fields13) and
  ((r__split_fields10 = r__split_fields14) and
  (r__split_fields11 = r__split_fields15))))))

axiom H69 : ((not (b = 1)) -> ((r__split_fields4 = r__split_fields8) and
  ((r__split_fields5 = r__split_fields9) and
  ((r__split_fields6 = r__split_fields10) and
  (r__split_fields7 = r__split_fields11)))))

axiom H70 : ((r__split_fields24 = r__split_fields4) and
  ((r__split_fields25 = r__split_fields5) and
  ((r__split_fields26 = r__split_fields6) and
  (r__split_fields27 = r__split_fields7))))

axiom H71 : ((r__split_fields28 = r__split_fields4) and
  ((r__split_fields29 = r__split_fields5) and
  ((r__split_fields30 = r__split_fields6) and
  (r__split_fields31 = r__split_fields7))))

axiom H72 : (b = 1)

 (* File "rec_aggregate.ads", line 43, characters 0-0 *)
goal WP_parameter_def : (bool_eq3({ us_split_fields3 = {
  rec__rec_aggregate__r3__x = r__split_fields24; rec__rec_aggregate__r3__y =
  r__split_fields25; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = r__split_fields26; rec__rec_aggregate__r2__y =
  r__split_fields27 } } } }, { us_split_fields3 = {
  rec__rec_aggregate__r3__x = of_rep(one); rec__rec_aggregate__r3__y =
  of_rep(2); rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = of_rep(one); rec__rec_aggregate__r2__y =
  of_rep(2) } } } }) = true)
