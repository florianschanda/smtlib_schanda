(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__rec_aggregate__r2__x : integer;
rec__rec_aggregate__r2__y : integer
}

function us_split_fields_X__2__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__x

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__rec_aggregate__r2__x = a;
  rec__rec_aggregate__r2__y = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__rec_aggregate__r2__x = a;
  rec__rec_aggregate__r2__y = a1 } })))

logic rec_aggregate__r2__x__first__bit : int

logic rec_aggregate__r2__x__last__bit : int

logic rec_aggregate__r2__x__position : int

axiom rec_aggregate__r2__x__first__bit_axiom :
  (0 <= rec_aggregate__r2__x__first__bit)

axiom rec_aggregate__r2__x__last__bit_axiom :
  (rec_aggregate__r2__x__first__bit <  rec_aggregate__r2__x__last__bit)

axiom rec_aggregate__r2__x__position_axiom :
  (0 <= rec_aggregate__r2__x__position)

logic rec_aggregate__r2__y__first__bit : int

logic rec_aggregate__r2__y__last__bit : int

logic rec_aggregate__r2__y__position : int

axiom rec_aggregate__r2__y__first__bit_axiom :
  (0 <= rec_aggregate__r2__y__first__bit)

axiom rec_aggregate__r2__y__last__bit_axiom :
  (rec_aggregate__r2__y__first__bit <  rec_aggregate__r2__y__last__bit)

axiom rec_aggregate__r2__y__position_axiom :
  (0 <= rec_aggregate__r2__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type r2__ref = { r2__content : us_rep
}

function r2__ref___projection(a: r2__ref) : us_rep = (a).r2__content

type us_split_fields2 = { rec__rec_aggregate__r3__x : integer;
rec__rec_aggregate__r3__y : integer; rec__rec_aggregate__r3__z : us_rep
}

function us_split_fields_X__3__projection(a: us_split_fields2) : integer =
  (a).rec__rec_aggregate__r3__x

function us_split_fields_Y__2__projection(a: us_split_fields2) : integer =
  (a).rec__rec_aggregate__r3__y

function us_split_fields_Z__projection(a: us_split_fields2) : us_rep =
  (a).rec__rec_aggregate__r3__z

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  (((((to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__x) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__x)) and
  (to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__y) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__y))) and
  (bool_eq2(((a).us_split_fields3).rec__rec_aggregate__r3__z,
  ((b).us_split_fields3).rec__rec_aggregate__r3__z) = true)) -> (bool_eq3(a,
  b) = true)) and
  ((not (((to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__x) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__x)) and
  (to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__y) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__y))) and
  (bool_eq2(((a).us_split_fields3).rec__rec_aggregate__r3__z,
  ((b).us_split_fields3).rec__rec_aggregate__r3__z) = true))) -> (bool_eq3(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:integer. forall a3:integer.
  (0 <= object__size1({ us_split_fields3 = { rec__rec_aggregate__r3__x = a;
  rec__rec_aggregate__r3__y = a1; rec__rec_aggregate__r3__z = {
  us_split_fields1 = { rec__rec_aggregate__r2__x = a2;
  rec__rec_aggregate__r2__y = a3 } } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:integer. forall a3:integer.
  (0 <= object__alignment1({ us_split_fields3 = { rec__rec_aggregate__r3__x =
  a; rec__rec_aggregate__r3__y = a1; rec__rec_aggregate__r3__z = {
  us_split_fields1 = { rec__rec_aggregate__r2__x = a2;
  rec__rec_aggregate__r2__y = a3 } } } })))

logic rec_aggregate__r3__x__first__bit : int

logic rec_aggregate__r3__x__last__bit : int

logic rec_aggregate__r3__x__position : int

axiom rec_aggregate__r3__x__first__bit_axiom :
  (0 <= rec_aggregate__r3__x__first__bit)

axiom rec_aggregate__r3__x__last__bit_axiom :
  (rec_aggregate__r3__x__first__bit <  rec_aggregate__r3__x__last__bit)

axiom rec_aggregate__r3__x__position_axiom :
  (0 <= rec_aggregate__r3__x__position)

logic rec_aggregate__r3__y__first__bit : int

logic rec_aggregate__r3__y__last__bit : int

logic rec_aggregate__r3__y__position : int

axiom rec_aggregate__r3__y__first__bit_axiom :
  (0 <= rec_aggregate__r3__y__first__bit)

axiom rec_aggregate__r3__y__last__bit_axiom :
  (rec_aggregate__r3__y__first__bit <  rec_aggregate__r3__y__last__bit)

axiom rec_aggregate__r3__y__position_axiom :
  (0 <= rec_aggregate__r3__y__position)

logic rec_aggregate__r3__z__first__bit : int

logic rec_aggregate__r3__z__last__bit : int

logic rec_aggregate__r3__z__position : int

axiom rec_aggregate__r3__z__first__bit_axiom :
  (0 <= rec_aggregate__r3__z__first__bit)

axiom rec_aggregate__r3__z__last__bit_axiom :
  (rec_aggregate__r3__z__first__bit <  rec_aggregate__r3__z__last__bit)

axiom rec_aggregate__r3__z__position_axiom :
  (0 <= rec_aggregate__r3__z__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : integer

type r3__ref = { r3__content : us_rep1
}

function r3__ref___projection(a: r3__ref) : us_rep1 = (a).r3__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "rec_aggregate.ads", line 43, characters 0-0 *)
goal WP_parameter_def :
  (forall one:int. forall r__split_fields:integer.
  forall r__split_fields1:integer. forall r__split_fields2:integer.
  forall r__split_fields3:integer. forall o:integer. forall o1:integer.
  forall o2:integer. forall o3:integer. forall o4:integer. forall o5:integer.
  forall o6:integer. forall o7:integer. forall o8:integer. forall o9:integer.
  forall o10:integer. forall o11:integer. forall temp___178:integer.
  forall temp___1781:integer. forall temp___1782:integer.
  forall temp___1783:integer. forall o12:integer. forall o13:integer.
  forall o14:integer. forall o15:integer. forall o16:integer.
  forall o17:integer. forall o18:integer. forall o19:integer.
  forall o20:integer. forall o21:integer. forall o22:integer.
  forall o23:integer. forall temp___179:integer. forall temp___1791:integer.
  forall temp___1792:integer. forall temp___1793:integer. forall o24:integer.
  forall o25:integer. forall o26:integer. forall o27:integer.
  forall o28:integer. forall o29:integer. forall o30:integer.
  forall o31:integer. forall o32:integer. forall o33:integer.
  forall o34:integer. forall o35:integer. forall temp___180:integer.
  forall temp___1801:integer. forall temp___1802:integer.
  forall temp___1803:integer. forall o36:integer. forall o37:integer.
  forall o38:integer. forall o39:integer. forall o40:integer.
  forall o41:integer. forall o42:integer. forall o43:integer.
  forall o44:integer. forall o45:integer. forall o46:integer.
  forall o47:integer. forall temp___181:integer. forall temp___1811:integer.
  forall temp___1812:integer. forall temp___1813:integer. forall o48:integer.
  forall o49:integer. forall o50:us_split_fields. forall o51:us_rep.
  forall o52:integer. forall o53:integer. forall o54:us_split_fields2.
  forall temp___182:us_rep1. forall result:us_split_fields__ref1.
  forall r__split_fields4:us_split_fields2.
  forall result1:us_split_fields__ref1.
  forall r__split_fields5:us_split_fields2.
  forall result2:us_split_fields__ref1.
  forall r__split_fields6:us_split_fields2.
  forall result3:us_split_fields__ref1.
  forall r__split_fields7:us_split_fields2.
  forall result4:us_split_fields__ref1.
  forall r__split_fields8:us_split_fields2.
  forall r__split_fields9:us_split_fields__ref1.
  forall r__split_fields10:us_split_fields2. ((in_range(one) and
  (in_range(b) and ((one = 1) and ((((b = 1) and ((((((to_rep(o) = 2) and
  ((to_rep(o1) = one) and ((o1 = o2) and (o = o3)))) and ((o4 = o2) and
  (o5 = o3))) and ((to_rep(o6) = 2) and ((to_rep(o7) = one) and
  ((o7 = o8) and ((o6 = o9) and ((o10 = o4) and (o11 = o5))))))) and
  ((temp___178 = o8) and ((temp___1781 = o9) and ((temp___1782 = o10) and
  (temp___1783 = o11))))) and ((result = { us_split_fields__content1 = {
  rec__rec_aggregate__r3__x = r__split_fields; rec__rec_aggregate__r3__y =
  r__split_fields1; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = r__split_fields2; rec__rec_aggregate__r2__y =
  r__split_fields3 } } } }) and (r__split_fields4 = {
  rec__rec_aggregate__r3__x = temp___178; rec__rec_aggregate__r3__y =
  temp___1781; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = temp___1782; rec__rec_aggregate__r2__y =
  temp___1783 } } })))) or ((not (b = 1)) and ((((b = 2) and
  ((((((to_rep(o12) = one) and ((to_rep(o13) = one) and ((o13 = o14) and
  (o12 = o15)))) and ((o16 = o14) and (o17 = o15))) and
  ((to_rep(o18) = one) and ((to_rep(o19) = one) and ((o19 = o20) and
  ((o18 = o21) and ((o22 = o16) and (o23 = o17))))))) and
  ((o20 = temp___179) and ((o21 = temp___1791) and ((o22 = temp___1792) and
  (o23 = temp___1793))))) and ((result1 = { us_split_fields__content1 = {
  rec__rec_aggregate__r3__x = r__split_fields; rec__rec_aggregate__r3__y =
  r__split_fields1; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = r__split_fields2; rec__rec_aggregate__r2__y =
  r__split_fields3 } } } }) and (r__split_fields5 = {
  rec__rec_aggregate__r3__x = temp___179; rec__rec_aggregate__r3__y =
  temp___1791; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = temp___1792; rec__rec_aggregate__r2__y =
  temp___1793 } } })))) or ((not (b = 2)) and ((((b = 3) and
  ((((((to_rep(o24) = one) and ((to_rep(o25) = 1) and ((o25 = o26) and
  (o24 = o27)))) and ((o28 = o26) and (o29 = o27))) and
  ((to_rep(o30) = one) and ((to_rep(o31) = one) and ((o31 = o32) and
  ((o30 = o33) and ((o34 = o28) and (o35 = o29))))))) and
  ((temp___180 = o32) and ((temp___1801 = o33) and ((temp___1802 = o34) and
  (temp___1803 = o35))))) and ((result2 = { us_split_fields__content1 = {
  rec__rec_aggregate__r3__x = r__split_fields; rec__rec_aggregate__r3__y =
  r__split_fields1; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = r__split_fields2; rec__rec_aggregate__r2__y =
  r__split_fields3 } } } }) and (r__split_fields6 = {
  rec__rec_aggregate__r3__x = temp___180; rec__rec_aggregate__r3__y =
  temp___1801; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = temp___1802; rec__rec_aggregate__r2__y =
  temp___1803 } } })))) or ((not (b = 3)) and ((((b = 4) and
  ((((((to_rep(o36) = one) and ((to_rep(o37) = 2) and ((o37 = o38) and
  (o36 = o39)))) and ((o40 = o38) and (o41 = o39))) and
  ((to_rep(o42) = one) and ((to_rep(o43) = 2) and ((o43 = o44) and
  ((o42 = o45) and ((o46 = o40) and (o47 = o41))))))) and
  ((temp___181 = o44) and ((temp___1811 = o45) and ((temp___1812 = o46) and
  (temp___1813 = o47))))) and ((result3 = { us_split_fields__content1 = {
  rec__rec_aggregate__r3__x = r__split_fields; rec__rec_aggregate__r3__y =
  r__split_fields1; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = r__split_fields2; rec__rec_aggregate__r2__y =
  r__split_fields3 } } } }) and (r__split_fields7 = {
  rec__rec_aggregate__r3__x = temp___181; rec__rec_aggregate__r3__y =
  temp___1811; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = temp___1812; rec__rec_aggregate__r2__y =
  temp___1813 } } })))) or ((not (b = 4)) and (((((((to_rep(o48) = 2) and
  ((to_rep(o49) = one) and (o50 = { rec__rec_aggregate__r2__x = o49;
  rec__rec_aggregate__r2__y = o48 }))) and (o51 = { us_split_fields1 = o50
  })) and ((to_rep(o52) = 2) and ((to_rep(o53) = one) and (o54 = {
  rec__rec_aggregate__r3__x = o53; rec__rec_aggregate__r3__y = o52;
  rec__rec_aggregate__r3__z = o51 })))) and (temp___182 = {
  us_split_fields3 = o54 })) and ((result4 = { us_split_fields__content1 = {
  rec__rec_aggregate__r3__x = r__split_fields; rec__rec_aggregate__r3__y =
  r__split_fields1; rec__rec_aggregate__r3__z = { us_split_fields1 = {
  rec__rec_aggregate__r2__x = r__split_fields2; rec__rec_aggregate__r2__y =
  r__split_fields3 } } } }) and
  (r__split_fields8 = (temp___182).us_split_fields3))) and
  (r__split_fields7 = r__split_fields8)))) and
  (r__split_fields6 = r__split_fields7)))) and
  (r__split_fields5 = r__split_fields6)))) and
  (r__split_fields4 = r__split_fields5)))) and ((r__split_fields9 = {
  us_split_fields__content1 = r__split_fields4 }) and
  (r__split_fields10 = r__split_fields4)))))) -> ((b = 1) -> (bool_eq3({
  us_split_fields3 = (r__split_fields9).us_split_fields__content1 }, {
  us_split_fields3 = { rec__rec_aggregate__r3__x = of_rep(one);
  rec__rec_aggregate__r3__y = of_rep(2); rec__rec_aggregate__r3__z = {
  us_split_fields1 = { rec__rec_aggregate__r2__x = of_rep(one);
  rec__rec_aggregate__r2__y = of_rep(2) } } } }) = true))))
