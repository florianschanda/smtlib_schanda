(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range temp___expr_33)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__private_discr__p_no_default__c natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural (rec__private_discr__p_no_default__c a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__private_discr__p_no_default us_main_type)))))
(define-fun us_split_fields_P_No_Default__projection ((a us_split_fields)) us_main_type (rec__private_discr__p_no_default a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__private_discr__p_no_default__c (us_split_discrs1 a))) (to_rep (rec__private_discr__p_no_default__c (us_split_discrs1 b)))) (= (us_main_eq (rec__private_discr__p_no_default (us_split_fields1 a)) (rec__private_discr__p_no_default (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const private_discr__p_no_default__c__first__bit Int)
(declare-const private_discr__p_no_default__c__last__bit Int)
(declare-const private_discr__p_no_default__c__position Int)
(assert (<= 0 private_discr__p_no_default__c__first__bit))
(assert (< private_discr__p_no_default__c__first__bit private_discr__p_no_default__c__last__bit))
(assert (<= 0 private_discr__p_no_default__c__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((p_no_default__ref (mk_p_no_default__ref (p_no_default__content us_rep)))))
(define-fun p_no_default__ref___projection ((a p_no_default__ref)) us_rep (p_no_default__content a))
(declare-fun new_no_default (Int) us_rep)
(declare-fun new_no_default__function_guard (us_rep Int) Bool)
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const d__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const d__split_fields us_main_type)
(declare-const discr__p1__d__assume natural)
(declare-const discr__p1__d__assume1 us_main_type)
(declare-const temp___308 natural)
(declare-const temp___3081 us_main_type)
(declare-const result us_main_type)
(declare-const d__split_fields1 us_main_type)
(assert (in_range c))
(assert (and (= (mk___rep (mk___split_discrs discr__p1__d__assume) (mk___split_fields discr__p1__d__assume1)) (new_no_default c)) (= (to_rep discr__p1__d__assume) c)))
(assert (= result d__split_fields))
(assert (= discr__p1__d__assume1 d__split_fields1))
(assert (= d__split_discrs (mk___split_discrs discr__p1__d__assume)))
(assert (and (= (mk___rep (mk___split_discrs temp___308) (mk___split_fields temp___3081)) (new_no_default c)) (= (to_rep temp___308) c)))
(assert (not (= temp___308 (rec__private_discr__p_no_default__c d__split_discrs))))
(check-sat)
(exit)
