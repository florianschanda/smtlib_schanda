(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type it2

predicate in_range1(x: int) = ((1 <= x) and (x <= 5))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : it2, it2 -> bool

logic dummy1 : it2

type it2__ref = { it2__content : it2
}

function it2__ref___projection(a: it2__ref) : it2 = (a).it2__content

type it3

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : it3, it3 -> bool

logic dummy2 : it3

type it3__ref = { it3__content : it3
}

function it3__ref___projection(a: it3__ref) : it3 = (a).it3__content

type et1

predicate in_range3(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : et1, et1 -> bool

logic dummy3 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int, int -> et1

logic set : map, int, int, int, et1 -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall k:int.
  (forall a:et1 [set(m, i, j, k, a)]. (get(set(m, i, j, k, a), i, j, k) = a))))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall k:int. forall k2:int.
  (forall a:et1 [get(set(m, i, j, k, a), i2, j2, k2)| set(m, i, j, k, a),
  get(m, i2, j2, k2)]. ((not ((i = i2) and ((j = j2) and (k = k2)))) ->
  (get(set(m, i, j, k, a), i2, j2, k2) = get(m, i2, j2, k2))))))))

logic slide : map, int, int, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall old_first:int. forall new_first:int.
  (forall old_first_2:int. forall new_first_2:int.
  (forall old_first_3:int. forall new_first_3:int.
  (forall i:int.
  (forall j:int.
  (forall k:int [get(slide(a, old_first, new_first, old_first_2, new_first_2,
  old_first_3, new_first_3), i, j, k)]. (get(slide(a, old_first, new_first,
  old_first_2, new_first_2, old_first_3, new_first_3), i, j, k) = get(a,
  (i - (new_first - old_first)), (j - (new_first_2 - old_first_2)),
  (k - (new_first_3 - old_first_3)))))))))))

logic bool_eq5 : map, int, int, int, int, int, int, map, int, int, int, int,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall a__first_3:int.
  forall a__last_3:int. forall b:map. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int [bool_eq5(a, a__first, a__last,
  a__first_2, a__last_2, a__first_3, a__last_3, b, b__first, b__last,
  b__first_2, b__last_2, b__first_3, b__last_3)].
  ((((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (((a__first_3 <= a__last_3) and ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) or
  ((not (a__first_3 <= a__last_3)) and (b__last_3 <  b__first_3)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  forall temp___idx_134:int. ((((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and ((a__first_2 <= temp___idx_133) and
  (temp___idx_133 <= a__last_2))) and ((a__first_3 <= temp___idx_134) and
  (temp___idx_134 <= a__last_3))) and (to_rep(get(a, temp___idx_132,
  temp___idx_133, temp___idx_134)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133),
  ((b__first_3 - a__first_3) + temp___idx_134))))) or
  (not ((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) and
  ((a__first_3 <= temp___idx_134) and (temp___idx_134 <= a__last_3))))))) ->
  (bool_eq5(a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3, b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3) = true)) and ((not ((((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (((a__first_3 <= a__last_3) -> ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) and
  ((not (a__first_3 <= a__last_3)) -> (b__last_3 <  b__first_3)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  forall temp___idx_134:int. (((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and ((a__first_2 <= temp___idx_133) and
  (temp___idx_133 <= a__last_2))) and ((a__first_3 <= temp___idx_134) and
  (temp___idx_134 <= a__last_3))) -> (to_rep(get(a, temp___idx_132,
  temp___idx_133, temp___idx_134)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133),
  ((b__first_3 - a__first_3) + temp___idx_134)))))))) -> (bool_eq5(a,
  a__first, a__last, a__first_2, a__last_2, a__first_3, a__last_3, b,
  b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq5(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (((a__first_3 <= a__last_3) -> ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) and
  ((not (a__first_3 <= a__last_3)) -> (b__last_3 <  b__first_3)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  forall temp___idx_134:int. (((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and ((a__first_2 <= temp___idx_133) and
  (temp___idx_133 <= a__last_2))) and ((a__first_3 <= temp___idx_134) and
  (temp___idx_134 <= a__last_3))) -> (to_rep(get(a, temp___idx_132,
  temp___idx_133, temp___idx_134)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133),
  ((b__first_3 - a__first_3) + temp___idx_134))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic z : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic new_val : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___238 : map, int, int, int, int -> map

axiom def_axiom :
  (forall temp___240:map.
  (forall temp___241:int. forall temp___242:int. forall temp___243:int.
  forall temp___244:int.
  (forall temp___245:int. forall temp___246:int. forall temp___247:int.
  (((((temp___245 = temp___241) and (temp___246 = temp___242)) and
  (temp___247 = temp___243)) -> (get(temp___238(temp___240, temp___241,
  temp___242, temp___243, temp___244), temp___245, temp___246,
  temp___247) = of_rep(temp___244))) and
  ((not (((temp___245 = temp___241) and (temp___246 = temp___242)) and
  (temp___247 = temp___243))) -> (get(temp___238(temp___240, temp___241,
  temp___242, temp___243, temp___244), temp___245, temp___246,
  temp___247) = get(temp___240, temp___245, temp___246, temp___247)))))))

 (* File "update_checks.adb", line 10, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. forall o1:int. (in_range(x) -> (in_range1(y) ->
  (in_range2(z) -> (in_range3(new_val) -> (((o = (new_val + 1)) and
  in_range3((new_val + 1))) -> (((o1 = (z + 1)) and in_range2((z + 1))) ->
  in_range1((y - 1)))))))))
