(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_type index_type) Bool)
(declare-const dummy index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-sort element_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (element_type element_type) Bool)
(declare-const dummy1 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) element_type (element_type__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep)))))
(define-fun set__ref___2__projection ((a set__ref)) us_rep (set__content a))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(define-fun default_initial_assumption ((temp___expr_431 us_rep) (temp___skip_top_level_432 Bool)) Bool (=> (not (= temp___skip_top_level_432 true)) (= (is_empty temp___expr_431) true)))
(declare-fun contains (us_rep Int) Bool)
(declare-fun contains__function_guard (Bool us_rep Int) Bool)
(define-fun dynamic_invariant ((temp___expr_424 Int) (temp___is_init_421 Bool) (temp___skip_constant_422 Bool) (temp___do_toplevel_423 Bool)) Bool (=> (or (= temp___is_init_421 true) (<= 1 100)) (in_range2 temp___expr_424)))
(assert (forall ((container us_rep)) (forall ((item Int)) (! (=> (dynamic_invariant item true true true) (=> (= (of_int 1) true) (=> (exists ((e Int)) (and (and (in_range2 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort count_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (count_type count_type) Bool)
(declare-const dummy3 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_144 Int) (temp___is_init_141 Bool) (temp___skip_constant_142 Bool) (temp___do_toplevel_143 Bool)) Bool (=> (or (= temp___is_init_141 true) (<= 0 2147483647)) (in_range3 temp___expr_144)))
(assert (forall ((container us_rep)) (! (dynamic_invariant1 (length container) true false true) :pattern ((length container)))))
(declare-fun ole (us_rep us_rep) Bool)
(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)
(declare-fun included_except (us_rep us_rep Int) Bool)
(declare-fun included_except__function_guard (Bool us_rep us_rep Int) Bool)
(declare-fun add (us_rep Int) us_rep)
(declare-fun add__function_guard (us_rep us_rep Int) Bool)
(assert (forall ((container us_rep)) (forall ((item Int)) (! (=> (and (dynamic_invariant item true true true) (and (not (= (contains container item) true)) (< (length container) 2147483647))) (let ((result (add container item))) (and (and (and (= (length result) (+ (length container) 1)) (= (contains result item) true)) (= (ole container result) true)) (= (included_except result container item) true)))) :pattern ((add container item))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_150 Int) (temp___is_init_147 Bool) (temp___skip_constant_148 Bool) (temp___do_toplevel_149 Bool)) Bool (=> (or (= temp___is_init_147 true) (<= 1 100)) (in_range1 temp___expr_150)))
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (ole left right) true) (forall ((item Int)) (=> (and (in_range2 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole left right)))))
(assert (forall ((container us_rep)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range2 item) (= (contains container item) true))))) (= (= result true) (= (length container) 0)))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep) (right us_rep)) (forall ((item Int)) (! (=> (dynamic_invariant item true true true) (= (= (included_except left right item) true) (forall ((e Int)) (=> (and (in_range2 e) (= (contains left e) true)) (or (= (contains right e) true) (= e item)))))) :pattern ((included_except left right item))))))
(declare-const s us_rep)
(declare-const i Int)
(declare-const binary_trees__all_indexes__result us_rep)
(declare-const temp___1047 Int)
(declare-const temp___1046 us_rep)
(declare-const j Int)
(declare-const o Int)
(declare-const j1 Int)
(declare-const o1 Bool)
(declare-const o2 us_rep)
(declare-const s1 us_rep)
(declare-const result Int)
(declare-const i1 Int)
(declare-const s2 us_rep)
(declare-const i2 Int)
(declare-const result1 us_rep)
(declare-const s3 us_rep)
(declare-const result2 Int)
(declare-const i3 Int)
(declare-const s4 us_rep)
(declare-const i4 Int)
(declare-const s5 us_rep)
(declare-const i5 Int)
(declare-const s6 us_rep)
(declare-const i6 Int)
(declare-const s7 us_rep)
(declare-const i7 Int)
(declare-const result3 us_rep)
(declare-const binary_trees__all_indexes__result1 us_rep)
(declare-const binary_trees__all_indexes__result2 us_rep)
(declare-const binary_trees__all_indexes__result3 us_rep)
(declare-const s8 us_rep)
(declare-const i8 Int)
(declare-const binary_trees__all_indexes__result4 us_rep)
(declare-const s9 us_rep)
(declare-const i9 Int)
(declare-const binary_trees__all_indexes__result5 us_rep)
(assert (= (is_empty s) true))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 100))
(assert (= (length s2) (- i2 1)))
(assert (forall ((j2 Int)) (=> (and (<= 1 j2) (<= j2 (- i2 1))) (= (contains s2 j2) true))))
(assert (forall ((j2 Int)) (=> (and (in_range2 j2) (= (contains s2 j2) true)) (< j2 i2))))
(assert (and (=> (<= 1 100) (in_range1 i2)) (and (<= 1 i2) (<= i2 100))))
(assert (and (= o2 (add s2 i2)) (and (and (and (= (length o2) (+ (length s2) 1)) (= (contains o2 i2) true)) (= (ole s2 o2) true)) (= (included_except o2 s2 i2) true))))
(assert (= s2 result1))
(assert (= s3 o2))
(assert (not (= i2 100)))
(assert (= result2 i2))
(assert (= i3 (+ i2 1)))
(assert (not (= (length s3) (- i3 1))))
(check-sat)
(exit)
