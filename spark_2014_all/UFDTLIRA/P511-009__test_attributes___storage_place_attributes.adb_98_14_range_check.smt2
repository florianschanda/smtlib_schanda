(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort my_integer 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (my_integer my_integer) Bool)
(declare-const dummy my_integer)
(declare-datatypes () ((my_integer__ref (mk_my_integer__ref (my_integer__content my_integer)))))
(define-fun my_integer__ref___projection ((a my_integer__ref)) my_integer (my_integer__content a))
(declare-fun to_rep (my_integer) Int)
(declare-fun of_rep (Int) my_integer)
(assert (forall ((x my_integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x my_integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__storage_place_attributes__r2__d1 my_integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) my_integer (rec__storage_place_attributes__r2__d1 a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__storage_place_attributes__r2__d3 integer) (rec__storage_place_attributes__r2__d2 Bool)))))
(define-fun us_split_fields_D3__projection ((a us_split_fields)) integer (rec__storage_place_attributes__r2__d3 a))
(define-fun us_split_fields_D2__projection ((a us_split_fields)) Bool (rec__storage_place_attributes__r2__d2 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___5__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun storage_place_attributes__r2__d2__pred ((a us_rep)) Bool (= (to_rep (rec__storage_place_attributes__r2__d1 (us_split_discrs1 a))) 5))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__storage_place_attributes__r2__d1 (us_split_discrs1 a))) (to_rep (rec__storage_place_attributes__r2__d1 (us_split_discrs1 b)))) (= (to_rep1 (rec__storage_place_attributes__r2__d3 (us_split_fields1 a))) (to_rep1 (rec__storage_place_attributes__r2__d3 (us_split_fields1 b))))) (=> (storage_place_attributes__r2__d2__pred a) (= (rec__storage_place_attributes__r2__d2 (us_split_fields1 a)) (rec__storage_place_attributes__r2__d2 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const storage_place_attributes__r2__d1__first__bit Int)
(declare-const storage_place_attributes__r2__d1__last__bit Int)
(declare-const storage_place_attributes__r2__d1__position Int)
(assert (<= 0 storage_place_attributes__r2__d1__first__bit))
(assert (< storage_place_attributes__r2__d1__first__bit storage_place_attributes__r2__d1__last__bit))
(assert (<= 0 storage_place_attributes__r2__d1__position))
(declare-const storage_place_attributes__r2__d3__first__bit Int)
(declare-const storage_place_attributes__r2__d3__last__bit Int)
(declare-const storage_place_attributes__r2__d3__position Int)
(assert (<= 0 storage_place_attributes__r2__d3__first__bit))
(assert (< storage_place_attributes__r2__d3__first__bit storage_place_attributes__r2__d3__last__bit))
(assert (<= 0 storage_place_attributes__r2__d3__position))
(declare-const storage_place_attributes__r2__d2__first__bit Int)
(declare-const storage_place_attributes__r2__d2__last__bit Int)
(declare-const storage_place_attributes__r2__d2__position Int)
(assert (<= 0 storage_place_attributes__r2__d2__first__bit))
(assert (< storage_place_attributes__r2__d2__first__bit storage_place_attributes__r2__d2__last__bit))
(assert (<= 0 storage_place_attributes__r2__d2__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((r2__ref (mk_r2__ref (r2__content us_rep)))))
(define-fun r2__ref___projection ((a r2__ref)) us_rep (r2__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)
(define-fun default_initial_assumption ((temp___expr_191 us_rep) (temp___skip_top_level_192 Bool)) Bool (and (= (attr__constrained temp___expr_191) false) (and (and (= (to_rep (rec__storage_place_attributes__r2__d1 (us_split_discrs1 temp___expr_191))) 1) (= (to_rep1 (rec__storage_place_attributes__r2__d3 (us_split_fields1 temp___expr_191))) 0)) (=> (storage_place_attributes__r2__d2__pred temp___expr_191) (= (rec__storage_place_attributes__r2__d2 (us_split_fields1 temp___expr_191)) (of_int 0))))))
(declare-const x us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_172 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 1 10)) (in_range temp___expr_172)))
(assert (not (in_range (to_rep (rec__storage_place_attributes__r2__d1 (us_split_discrs1 x))))))
(check-sat)
(exit)
