(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__pack__t1__x Bool)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) Bool (rec__pack__t1__x a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (rec__pack__t1__x (us_split_fields1 a)) (rec__pack__t1__x (us_split_fields1 b))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const pack__t1__x__first__bit Int)
(declare-const pack__t1__x__last__bit Int)
(declare-const pack__t1__x__position Int)
(assert (<= 0 pack__t1__x__first__bit))
(assert (< pack__t1__x__first__bit pack__t1__x__last__bit))
(assert (<= 0 pack__t1__x__position))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content us_rep)))))
(define-fun t1__ref___projection ((a t1__ref)) us_rep (t1__content a))
(declare-const x1 us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (= x1 (mk___rep (mk___split_fields (of_int 1)))))
(declare-const pack__query_x1__result Bool)
(declare-const result Bool)
(declare-const pack__query_x1__result1 Bool)
(declare-const pack__query_x1__result2 Bool)
(declare-const pack__query_x1__result3 Bool)
(declare-const pack__query_x1__result4 Bool)
(declare-const pack__query_x1__result5 Bool)
(declare-const result1 Bool)
(assert (= (mk___rep (mk___split_fields (of_int 1))) x1))
(assert (= pack__query_x1__result1 pack__query_x1__result2))
(assert (= pack__query_x1__result3 pack__query_x1__result1))
(assert (= result pack__query_x1__result))
(assert (= pack__query_x1__result1 (rec__pack__t1__x (us_split_fields1 x1))))
(assert (= (mk_bool__ref pack__query_x1__result4) (mk_bool__ref pack__query_x1__result2)))
(assert (= pack__query_x1__result5 pack__query_x1__result3))
(assert (= result1 pack__query_x1__result4))
(assert (= pack__query_x1__result4 true))
(assert (not true))
(check-sat)
(exit)
