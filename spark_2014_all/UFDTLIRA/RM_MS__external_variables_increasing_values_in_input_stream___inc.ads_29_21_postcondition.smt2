(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__inc__increasing_indicator__valid Bool) (rec__inc__increasing_indicator__first integer) (rec__inc__increasing_indicator__second integer)))))
(define-fun us_split_fields_Valid__projection ((a us_split_fields)) Bool (rec__inc__increasing_indicator__valid a))
(define-fun us_split_fields_First__projection ((a us_split_fields)) integer (rec__inc__increasing_indicator__first a))
(define-fun us_split_fields_Second__projection ((a us_split_fields)) integer (rec__inc__increasing_indicator__second a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (rec__inc__increasing_indicator__valid (us_split_fields1 a)) (rec__inc__increasing_indicator__valid (us_split_fields1 b))) (= (to_rep (rec__inc__increasing_indicator__first (us_split_fields1 a))) (to_rep (rec__inc__increasing_indicator__first (us_split_fields1 b))))) (= (to_rep (rec__inc__increasing_indicator__second (us_split_fields1 a))) (to_rep (rec__inc__increasing_indicator__second (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const inc__increasing_indicator__valid__first__bit Int)
(declare-const inc__increasing_indicator__valid__last__bit Int)
(declare-const inc__increasing_indicator__valid__position Int)
(assert (<= 0 inc__increasing_indicator__valid__first__bit))
(assert (< inc__increasing_indicator__valid__first__bit inc__increasing_indicator__valid__last__bit))
(assert (<= 0 inc__increasing_indicator__valid__position))
(declare-const inc__increasing_indicator__first__first__bit Int)
(declare-const inc__increasing_indicator__first__last__bit Int)
(declare-const inc__increasing_indicator__first__position Int)
(assert (<= 0 inc__increasing_indicator__first__first__bit))
(assert (< inc__increasing_indicator__first__first__bit inc__increasing_indicator__first__last__bit))
(assert (<= 0 inc__increasing_indicator__first__position))
(declare-const inc__increasing_indicator__second__first__bit Int)
(declare-const inc__increasing_indicator__second__last__bit Int)
(declare-const inc__increasing_indicator__second__position Int)
(assert (<= 0 inc__increasing_indicator__second__first__bit))
(assert (< inc__increasing_indicator__second__first__bit inc__increasing_indicator__second__last__bit))
(assert (<= 0 inc__increasing_indicator__second__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((increasing_indicator__ref (mk_increasing_indicator__ref (increasing_indicator__content us_rep)))))
(define-fun increasing_indicator__ref___projection ((a increasing_indicator__ref)) us_rep (increasing_indicator__content a))
(declare-fun first (us_rep) Int)
(declare-fun first__function_guard (Int us_rep) Bool)
(assert (forall ((indicator us_rep)) (! (dynamic_invariant (first indicator) true false true) :pattern ((first indicator)))))
(assert (forall ((indicator us_rep)) (! (= (first indicator) (to_rep (rec__inc__increasing_indicator__first (us_split_fields1 indicator)))) :pattern ((first indicator)))))
(declare-fun second (us_rep) Int)
(declare-fun second__function_guard (Int us_rep) Bool)
(assert (forall ((indicator us_rep)) (! (dynamic_invariant (second indicator) true false true) :pattern ((second indicator)))))
(assert (forall ((indicator us_rep)) (! (= (second indicator) (to_rep (rec__inc__increasing_indicator__second (us_split_fields1 indicator)))) :pattern ((second indicator)))))
(declare-fun is_valid (us_rep) Bool)
(declare-fun is_valid__function_guard (Bool us_rep) Bool)
(assert true)
(assert (forall ((indicator us_rep)) (! (= (= (is_valid indicator) true) (= (rec__inc__increasing_indicator__valid (us_split_fields1 indicator)) true)) :pattern ((is_valid indicator)))))
(declare-fun is_increasing (us_rep) Bool)
(declare-fun is_increasing__function_guard (Bool us_rep) Bool)
(assert true)
(assert (forall ((indicator us_rep)) (! (= (= (is_increasing indicator) true) (< (to_rep (rec__inc__increasing_indicator__first (us_split_fields1 indicator))) (to_rep (rec__inc__increasing_indicator__second (us_split_fields1 indicator))))) :pattern ((is_increasing indicator)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const result____split_fields Bool)
(declare-const result____split_fields1 integer)
(declare-const result____split_fields2 integer)
(declare-const s Int)
(declare-const o integer)
(declare-const o1 Bool)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const temp___209 Bool)
(declare-const temp___2091 integer)
(declare-const temp___2092 integer)
(declare-const o4 integer)
(declare-const o5 Bool)
(declare-const o6 integer)
(declare-const o7 integer)
(declare-const temp___215 Bool)
(declare-const temp___2151 integer)
(declare-const temp___2152 integer)
(declare-const o8 integer)
(declare-const o9 Bool)
(declare-const o10 integer)
(declare-const o11 integer)
(declare-const temp___213 Bool)
(declare-const temp___2131 integer)
(declare-const temp___2132 integer)
(declare-const inc__read__valid Bool)
(declare-const inc__read__v Int)
(declare-const result Bool)
(declare-const result1 integer)
(declare-const result2 integer)
(declare-const result____split_fields3 Bool)
(declare-const result____split_fields4 integer)
(declare-const result____split_fields5 integer)
(declare-const result3 Bool)
(declare-const result4 integer)
(declare-const result5 integer)
(declare-const result____split_fields6 Bool)
(declare-const result____split_fields7 integer)
(declare-const result____split_fields8 integer)
(declare-const inc__read__valid1 Bool)
(declare-const inc__read__v1 Int)
(declare-const result6 Bool)
(declare-const result7 integer)
(declare-const result8 integer)
(declare-const result____split_fields9 Bool)
(declare-const result____split_fields10 integer)
(declare-const result____split_fields11 integer)
(declare-const result9 us_split_fields__ref)
(declare-const result____split_fields12 us_split_fields)
(declare-const result10 us_split_fields__ref)
(declare-const result____split_fields13 us_split_fields)
(declare-const result____split_fields14 us_split_fields__ref)
(declare-const result____split_fields15 us_split_fields)
(assert (in_range1 s))
(assert (in_range1 inc__read__v))
(assert (= (to_rep o) inc__read__v))
(assert (= result____split_fields o1))
(assert (= o o2))
(assert (= result____split_fields2 o3))
(assert (= temp___209 o1))
(assert (= temp___2091 o2))
(assert (= temp___2092 o3))
(assert (= (mk___split_fields__ref (mk___split_fields result result1 result2)) (mk___split_fields__ref (mk___split_fields result____split_fields result____split_fields1 result____split_fields2))))
(assert (= temp___209 result____split_fields3))
(assert (= temp___2091 result____split_fields4))
(assert (= temp___2092 result____split_fields5))
(assert (= result3 result____split_fields3))
(assert (= result4 result____split_fields4))
(assert (= result5 result____split_fields5))
(assert (= inc__read__valid result____split_fields6))
(assert (= result____split_fields4 result____split_fields7))
(assert (= result____split_fields5 result____split_fields8))
(assert (=> (= result____split_fields6 true) (in_range1 inc__read__v1)))
(assert (=> (= result____split_fields6 true) (= (to_rep o4) inc__read__v1)))
(assert (=> (= result____split_fields6 true) (= result____split_fields6 o5)))
(assert (=> (= result____split_fields6 true) (= result____split_fields7 o6)))
(assert (=> (= result____split_fields6 true) (= o4 o7)))
(assert (=> (= result____split_fields6 true) (= temp___215 o5)))
(assert (=> (= result____split_fields6 true) (= temp___2151 o6)))
(assert (=> (= result____split_fields6 true) (= temp___2152 o7)))
(assert (=> (= result____split_fields6 true) (= result6 result____split_fields6)))
(assert (=> (= result____split_fields6 true) (= result7 result____split_fields7)))
(assert (=> (= result____split_fields6 true) (= result8 result____split_fields8)))
(assert (=> (= result____split_fields6 true) (= temp___215 result____split_fields9)))
(assert (=> (= result____split_fields6 true) (= temp___2151 result____split_fields10)))
(assert (=> (= result____split_fields6 true) (= temp___2152 result____split_fields11)))
(assert (=> (= result____split_fields6 true) (= result9 (mk___split_fields__ref (mk___split_fields result____split_fields9 result____split_fields10 result____split_fields11)))))
(assert (=> (= result____split_fields6 true) (= result____split_fields12 (mk___split_fields inc__read__valid1 result____split_fields10 result____split_fields11))))
(assert (=> (not (= result____split_fields6 true)) (= (to_rep o8) 0)))
(assert (=> (not (= result____split_fields6 true)) (= result____split_fields6 o9)))
(assert (=> (not (= result____split_fields6 true)) (= result____split_fields7 o10)))
(assert (=> (not (= result____split_fields6 true)) (= o8 o11)))
(assert (=> (not (= result____split_fields6 true)) (= temp___213 o9)))
(assert (=> (not (= result____split_fields6 true)) (= temp___2131 o10)))
(assert (=> (not (= result____split_fields6 true)) (= temp___2132 o11)))
(assert (=> (not (= result____split_fields6 true)) (= result10 (mk___split_fields__ref (mk___split_fields result____split_fields6 result____split_fields7 result____split_fields8)))))
(assert (=> (not (= result____split_fields6 true)) (= result____split_fields13 (mk___split_fields temp___213 temp___2131 temp___2132))))
(assert (=> (not (= result____split_fields6 true)) (= result____split_fields12 result____split_fields13)))
(assert (= result____split_fields14 (mk___split_fields__ref result____split_fields12)))
(assert (= result____split_fields15 result____split_fields12))
(assert (= (is_valid (mk___rep (us_split_fields__content result____split_fields14))) true))
(assert (= (is_increasing (mk___rep (us_split_fields__content result____split_fields14))) true))
(assert (not (< (first (mk___rep (us_split_fields__content result____split_fields14))) (second (mk___rep (us_split_fields__content result____split_fields14))))))
(check-sat)
(exit)
