(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort positive 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range temp___expr_39)))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__types_with_invariants__my_integer__sign Bool) (rec__types_with_invariants__my_integer__val natural)))))
(define-fun us_split_fields_Sign__projection ((a us_split_fields)) Bool (rec__types_with_invariants__my_integer__sign a))
(define-fun us_split_fields_Val__projection ((a us_split_fields)) natural (rec__types_with_invariants__my_integer__val a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (rec__types_with_invariants__my_integer__sign (us_split_fields1 a)) (rec__types_with_invariants__my_integer__sign (us_split_fields1 b))) (= (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 a))) (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const types_with_invariants__my_integer__sign__first__bit Int)
(declare-const types_with_invariants__my_integer__sign__last__bit Int)
(declare-const types_with_invariants__my_integer__sign__position Int)
(assert (<= 0 types_with_invariants__my_integer__sign__first__bit))
(assert (< types_with_invariants__my_integer__sign__first__bit types_with_invariants__my_integer__sign__last__bit))
(assert (<= 0 types_with_invariants__my_integer__sign__position))
(declare-const types_with_invariants__my_integer__val__first__bit Int)
(declare-const types_with_invariants__my_integer__val__last__bit Int)
(declare-const types_with_invariants__my_integer__val__position Int)
(assert (<= 0 types_with_invariants__my_integer__val__first__bit))
(assert (< types_with_invariants__my_integer__val__first__bit types_with_invariants__my_integer__val__last__bit))
(assert (<= 0 types_with_invariants__my_integer__val__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((my_integer__ref (mk_my_integer__ref (my_integer__content us_rep)))))
(define-fun my_integer__ref___projection ((a my_integer__ref)) us_rep (my_integer__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)
(define-fun default_initial_assumption ((temp___expr_138 us_rep) (temp___skip_top_level_139 Bool)) Bool (and (= (rec__types_with_invariants__my_integer__sign (us_split_fields1 temp___expr_138)) (of_int 1)) (= (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 temp___expr_138))) 0)))
(define-fun type_invariant ((temp___140 us_rep)) Bool (=> (= (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 temp___140))) 0) (= (rec__types_with_invariants__my_integer__sign (us_split_fields1 temp___140)) true)))
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const e us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun to_integer (us_rep) Int)
(declare-fun to_integer__function_guard (Int us_rep) Bool)
(declare-sort integer 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_15)))
(assert (forall ((x us_rep)) (! (dynamic_invariant1 (to_integer x) true false true) :pattern ((to_integer x)))))
(assert (forall ((x us_rep)) (! (= (to_integer x) (ite (= (rec__types_with_invariants__my_integer__sign (us_split_fields1 x)) true) (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 x))) (- (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 x)))))) :pattern ((to_integer x)))))
(declare-fun from_integer (Int) us_rep)
(declare-fun from_integer__function_guard (us_rep Int) Bool)
(assert true)
(assert (forall ((x Int)) (! (=> (dynamic_invariant1 x true true true) (= (from_integer x) (mk___rep (mk___split_fields (>= x 0) (of_rep (abs x)))))) :pattern ((from_integer x)))))
(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-const o Int)
(declare-const o1 Bool)
(declare-const o2 natural)
(declare-const temp___265 Bool)
(declare-const temp___2651 natural)
(assert (in_range i))
(assert (let ((temp___141 e)) (=> (= (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 temp___141))) 0) (= (rec__types_with_invariants__my_integer__sign (us_split_fields1 temp___141)) true))))
(assert (and (= o (to_integer e)) (and (in_range3 o) (= o (ite (= (rec__types_with_invariants__my_integer__sign (us_split_fields1 e)) true) (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 e))) (- (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 e)))))))))
(assert (not (< (- 2147483648) o)))
(check-sat)
(exit)
