(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort tcount_typeB 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (tcount_typeB tcount_typeB) Bool)
(declare-const dummy tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-sort count_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(declare-fun to_rep (count_type) Int)
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__use_ordered_sets__my_sets__set__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__use_ordered_sets__my_sets__set__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__use_ordered_sets__my_sets__set us_main_type)))))
(define-fun us_split_fields_Set__projection ((a us_split_fields)) us_main_type (rec__use_ordered_sets__my_sets__set a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__use_ordered_sets__my_sets__set__capacity (us_split_discrs1 a))) (to_rep (rec__use_ordered_sets__my_sets__set__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__use_ordered_sets__my_sets__set (us_split_fields1 a)) (rec__use_ordered_sets__my_sets__set (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const use_ordered_sets__my_sets__set__capacity__first__bit Int)
(declare-const use_ordered_sets__my_sets__set__capacity__last__bit Int)
(declare-const use_ordered_sets__my_sets__set__capacity__position Int)
(assert (<= 0 use_ordered_sets__my_sets__set__capacity__first__bit))
(assert (< use_ordered_sets__my_sets__set__capacity__first__bit use_ordered_sets__my_sets__set__capacity__last__bit))
(assert (<= 0 use_ordered_sets__my_sets__set__capacity__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep)))))
(define-fun set__ref___projection ((a set__ref)) us_rep (set__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-fun oeq1 (Int us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)))))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-fun length1 (Int us_rep) Int)
(declare-fun length__function_guard1 (Int Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range2 temp___expr_166)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__use_ordered_sets__my_sets__set__capacity (us_split_discrs1 container)))) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (! (dynamic_invariant (length1 attr__tag container) true false true true) :pattern ((length1 attr__tag container))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((set__ref1 (mk_set__ref1 (set__content1 us_rep1)))))
(define-fun set__ref___2__projection ((a set__ref1)) us_rep1 (set__content1 a))
(declare-fun contains (us_rep1 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep1 Int) Bool)
(define-fun equivalent_elements ((left Int) (right Int)) Bool (and (not (< left right)) (not (< right left))))
(declare-fun equivalent_elements__function_guard (Bool Int Int) Bool)
(declare-sort element_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (element_type element_type) Bool)
(declare-const dummy4 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_353 Int) (temp___is_init_349 Bool) (temp___skip_constant_350 Bool) (temp___do_toplevel_351 Bool) (temp___do_typ_inv_352 Bool)) Bool (=> (or (= temp___is_init_349 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_353)))
(declare-fun is_empty (us_rep1) Bool)
(declare-fun is_empty__function_guard (Bool us_rep1) Bool)
(define-fun default_initial_assumption ((temp___expr_361 us_rep1) (temp___skip_top_level_362 Bool)) Bool (=> (not (= temp___skip_top_level_362 true)) (= (is_empty temp___expr_361) true)))
(assert (forall ((container us_rep1)) (forall ((item Int)) (! (=> (dynamic_invariant1 item true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range3 e) (= (contains container e) true)) (= (equivalent_elements e item) true))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-fun ole (us_rep1 us_rep1) Bool)
(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (ole left right) true) (forall ((item Int)) (=> (and (in_range3 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole left right)))))
(declare-sort extended_index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (extended_index extended_index) Bool)
(declare-const dummy5 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun get (us_rep2 Int) Int)
(declare-fun get__function_guard (Int us_rep2 Int) Bool)
(declare-sort element_type1 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (element_type1 element_type1) Bool)
(declare-const dummy7 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___4__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant2 ((temp___expr_382 Int) (temp___is_init_378 Bool) (temp___skip_constant_379 Bool) (temp___do_toplevel_380 Bool) (temp___do_typ_inv_381 Bool)) Bool (=> (or (= temp___is_init_378 true) (<= (- 2147483648) 2147483647)) (in_range5 temp___expr_382)))
(define-fun dynamic_invariant3 ((temp___expr_389 Int) (temp___is_init_385 Bool) (temp___skip_constant_386 Bool) (temp___do_toplevel_387 Bool) (temp___do_typ_inv_388 Bool)) Bool (=> (or (= temp___is_init_385 true) (<= 0 2147483647)) (in_range4 temp___expr_389)))
(declare-fun length2 (us_rep2) Int)
(declare-fun length__function_guard2 (Int us_rep2) Bool)
(define-fun last ((container us_rep2)) Int (+ 0 (length2 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(define-fun oeq2 ((left us_rep2) (right us_rep2)) Bool (and (= (length2 left) (length2 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq6 a b) (oeq2 a b)) :pattern ((user_eq6 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_397 us_rep2) (temp___skip_top_level_398 Bool)) Bool (=> (not (= temp___skip_top_level_398 true)) (= (length2 temp___expr_397) 0)))
(assert (forall ((container us_rep2)) (forall ((position Int)) (! (=> (and (dynamic_invariant3 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant2 (get container position) true false true true)) :pattern ((get container position))))))
(define-fun iter_has_element ((container us_rep2) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep2 Int) Bool)
(declare-fun model__ (us_rep) us_rep1)
(declare-fun model____function_guard (us_rep1 us_rep) Bool)
(declare-fun length3 (us_rep1) Int)
(declare-fun length__function_guard3 (Int us_rep1) Bool)
(assert (forall ((container us_rep)) (! (= (length3 (model__ container)) (length container)) :pattern ((model__ container)))))
(declare-fun elements (us_rep) us_rep2)
(declare-fun elements__function_guard (us_rep2 us_rep) Bool)
(define-fun e_bigger_than_range ((container us_rep2) (fst Int) (lst Int) (item Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< (get container i) item))) true false))
(declare-fun e_bigger_than_range__function_guard (Bool us_rep2 Int Int Int) Bool)
(define-fun e_smaller_than_range ((container us_rep2) (fst Int) (lst Int) (item Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< item (get container i)))) true false))
(declare-fun e_smaller_than_range__function_guard (Bool us_rep2 Int Int Int) Bool)
(define-fun e_is_find ((container us_rep2) (item Int) (position Int)) Bool (and (ite (< 0 position) (e_bigger_than_range container 1 (- position 1) item) (distinct 1 0)) (ite (< position (length2 container)) (e_smaller_than_range container (+ position 1) (length2 container) item) (distinct 1 0))))
(declare-fun e_is_find__function_guard (Bool us_rep2 Int Int) Bool)
(declare-fun find (us_rep2 Int) Int)
(declare-fun find__function_guard (Int us_rep2 Int) Bool)
(assert (forall ((container us_rep)) (! (let ((result (elements container))) (and (and (and (= (length2 result) (length container)) (forall ((temp___435 Int)) (=> (and (in_range4 temp___435) (= (iter_has_element result temp___435) true)) (= (contains (model__ container) (get result temp___435)) true)))) (forall ((item Int)) (=> (and (in_range3 item) (= (contains (model__ container) item) true)) (and (< 0 (find result item)) (= (equivalent_elements (get result (find result item)) item) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container))) (and (= (find result (get result i)) i) (= (e_is_find result (get result i) i) true)))))) :pattern ((elements container)))))
(define-fun contains1 ((container us_rep) (item Int)) Bool (contains (model__ container) item))
(declare-fun contains__function_guard1 (Bool us_rep Int) Bool)
(declare-fun contains2 (Int us_rep Int) Bool)
(declare-fun contains__function_guard2 (Bool Int us_rep Int) Bool)
(declare-sort element_type2 0)
(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (element_type2 element_type2) Bool)
(declare-const dummy8 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___2__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant4 ((temp___expr_323 Int) (temp___is_init_319 Bool) (temp___skip_constant_320 Bool) (temp___do_toplevel_321 Bool) (temp___do_typ_inv_322 Bool)) Bool (=> (or (= temp___is_init_319 true) (<= (- 2147483648) 2147483647)) (in_range6 temp___expr_323)))
(assert true)
(declare-fun oeq3 (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard3 (Bool us_rep1 us_rep1) Bool)
(declare-fun included_except (us_rep1 us_rep1 Int) Bool)
(declare-fun included_except__function_guard (Bool us_rep1 us_rep1 Int) Bool)
(define-fun equal_except ((left us_rep2) (right us_rep2) (position Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (not (= i position)) (= (get left i) (get right i))))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(define-fun range_equal ((left us_rep2) (right us_rep2) (fst Int) (lst Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right i)))) true false))
(declare-fun range_equal__function_guard (Bool us_rep2 us_rep2 Int Int) Bool)
(define-fun range_shifted ((left us_rep2) (right us_rep2) (fst Int) (lst Int) (offset Int)) Bool (and (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right (+ i offset))))) true false) (ite (forall ((i Int)) (=> (and (<= (+ fst offset) i) (<= i (+ lst offset))) (= (get left (- i offset)) (get right i)))) true false)))
(declare-fun range_shifted__function_guard (Bool us_rep2 us_rep2 Int Int Int) Bool)
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq9 (us_rep3 us_rep3) Bool)
(declare-const dummy9 us_rep3)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep3)))))
(define-fun map__ref___projection ((a map__ref)) us_rep3 (map__content a))
(declare-fun oeq4 (us_rep3 us_rep3) Bool)
(declare-fun oeq__function_guard4 (Bool us_rep3 us_rep3) Bool)
(declare-fun p_positions_shifted (us_rep3 us_rep3 Int Int) Bool)
(declare-fun p_positions_shifted__function_guard (Bool us_rep3 us_rep3 Int Int) Bool)
(declare-fun positions (us_rep) us_rep3)
(declare-fun positions__function_guard (us_rep3 us_rep) Bool)
(declare-fun include__specific_post (Int us_split_fields us_split_discrs Int us_split_fields) Bool)
(declare-const s__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__use_ordered_sets__my_sets__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type (rec__use_ordered_sets__my_sets__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep4 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___9__projection ((a us_rep4)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq4 ((a us_rep4) (b us_rep4)) Bool (ite (= (to_rep (rec__use_ordered_sets__my_sets__cursor__node (us_split_fields3 a))) (to_rep (rec__use_ordered_sets__my_sets__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-const use_ordered_sets__my_sets__cursor__node__first__bit Int)
(declare-const use_ordered_sets__my_sets__cursor__node__last__bit Int)
(declare-const use_ordered_sets__my_sets__cursor__node__position Int)
(assert (<= 0 use_ordered_sets__my_sets__cursor__node__first__bit))
(assert (< use_ordered_sets__my_sets__cursor__node__first__bit use_ordered_sets__my_sets__cursor__node__last__bit))
(assert (<= 0 use_ordered_sets__my_sets__cursor__node__position))
(declare-fun user_eq10 (us_rep4 us_rep4) Bool)
(declare-const dummy10 us_rep4)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep4)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep4 (cursor__content a))
(declare-const no_element us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))
(declare-sort positive_count_type 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (positive_count_type positive_count_type) Bool)
(declare-const dummy11 positive_count_type)
(declare-datatypes () ((positive_count_type__ref (mk_positive_count_type__ref (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___projection ((a positive_count_type__ref)) positive_count_type (positive_count_type__content a))
(define-fun dynamic_invariant5 ((temp___expr_346 Int) (temp___is_init_342 Bool) (temp___skip_constant_343 Bool) (temp___do_toplevel_344 Bool) (temp___do_typ_inv_345 Bool)) Bool (=> (or (= temp___is_init_342 true) (<= 1 2147483647)) (in_range7 temp___expr_346)))
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true true) (let ((result (find container item))) (and (=> (< 0 result) (and (<= result (length2 container)) (= (equivalent_elements item (get container result)) true))) (dynamic_invariant result true false true true)))) :pattern ((find container item))))))
(define-fun e_elements_included ((left us_rep2) (right us_rep2)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (length2 left))) (and (< 0 (find right (get left i))) (= (get right (find right (get left i))) (get left i))))) true false))
(declare-fun e_elements_included__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep4)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep4 (key_type__content a))
(declare-fun length4 (us_rep3) Int)
(declare-fun length__function_guard4 (Int us_rep3) Bool)
(declare-fun is_empty1 (us_rep3) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep3) Bool)
(define-fun default_initial_assumption2 ((temp___expr_420 us_rep3) (temp___skip_top_level_421 Bool)) Bool (=> (not (= temp___skip_top_level_421 true)) (and (= (is_empty1 temp___expr_420) true) (= (length4 temp___expr_420) 0))))
(declare-fun has_key (us_rep3 us_rep4) Bool)
(declare-fun has_key__function_guard (Bool us_rep3 us_rep4) Bool)
(declare-fun get1 (us_rep3 us_rep4) Int)
(declare-fun get__function_guard1 (Int us_rep3 us_rep4) Bool)
(declare-fun keys_included (us_rep3 us_rep3) Bool)
(declare-fun keys_included__function_guard (Bool us_rep3 us_rep3) Bool)
(assert (forall ((small us_rep3) (big us_rep3)) (forall ((cut Int) (count Int)) (! (=> (and (dynamic_invariant5 cut true true true true) (dynamic_invariant count true true true true)) (= (= (p_positions_shifted small big cut count) true) (and (and (= (keys_included small big) true) (forall ((i us_rep4)) (=> (= (has_key small i) true) (ite (< (get1 small i) cut) (= (get1 big i) (get1 small i)) (= (- (get1 big i) count) (get1 small i)))))) (forall ((i us_rep4)) (=> (= (has_key big i) true) (or (= (has_key small i) true) (and (<= (- cut count) (- (get1 big i) count)) (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted small big cut count))))))
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep4)) (=> (= (has_key result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length container))) (forall ((j us_rep4)) (=> (= (has_key result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq4 i j) true))))))))) :pattern ((positions container)))))
(assert (forall ((left us_rep) (right us_rep)) (! (ite (= (oeq left right) true) (= (oeq2 (elements left) (elements right)) true) (or (not (= (e_elements_included (elements left) (elements right)) true)) (not (= (e_elements_included (elements right) (elements left)) true)))) :pattern ((oeq left right)))))
(assert true)
(assert (forall ((container us_rep1)) (! (dynamic_invariant (length3 container) true false true true) :pattern ((length3 container)))))
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (oeq3 left right) true) (and (= (ole left right) true) (= (ole right left) true))) :pattern ((oeq3 left right)))))
(assert (forall ((container us_rep1)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range3 item) (= (contains container item) true))))) (= (= result true) (= (length3 container) 0)))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep1) (right us_rep1)) (forall ((item Int)) (! (=> (dynamic_invariant1 item true true true true) (= (= (included_except left right item) true) (forall ((e Int)) (=> (and (in_range3 e) (= (contains left e) true)) (or (= (contains right e) true) (= (equivalent_elements e item) true)))))) :pattern ((included_except left right item))))))
(assert (forall ((container us_rep2)) (! (let ((result (length2 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true true))) :pattern ((length2 container)))))
(assert (forall ((container us_rep3)) (forall ((key us_rep4)) (! (=> (= (distinct 0 0) true) (=> (exists ((k us_rep4)) (and (= (has_key container k) true) (= (bool_eq4 k key) true))) (= (has_key container key) true))) :pattern ((has_key container key))))))
(declare-sort element_type3 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (element_type3 element_type3) Bool)
(declare-const dummy12 element_type3)
(declare-datatypes () ((element_type__ref3 (mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref___5__projection ((a element_type__ref3)) element_type3 (element_type__content3 a))
(define-fun dynamic_invariant6 ((temp___expr_412 Int) (temp___is_init_408 Bool) (temp___skip_constant_409 Bool) (temp___do_toplevel_410 Bool) (temp___do_typ_inv_411 Bool)) Bool (=> (or (= temp___is_init_408 true) (<= 1 2147483647)) (in_range8 temp___expr_412)))
(declare-fun witness (us_rep3 us_rep4) Int)
(declare-fun witness__function_guard (Int us_rep3 us_rep4) Bool)
(declare-fun w_get (us_rep3 Int) Int)
(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)
(assert (forall ((container us_rep3)) (forall ((key us_rep4)) (! (=> (= (has_key container key) true) (let ((result (get1 container key))) (and (=> (= (distinct 0 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep4)) (=> (= (has_key container k) true) (= (= (bool_eq4 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant6 result true false true true)))) :pattern ((get1 container key))))))
(assert (forall ((container us_rep3)) (! (dynamic_invariant (length4 container) true false true true) :pattern ((length4 container)))))
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (oeq4 left right) true) (and (forall ((key us_rep4)) (=> (= (has_key left key) true) (and (= (has_key right key) true) (= (get1 right key) (get1 left key))))) (forall ((key us_rep4)) (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern ((oeq4 left right)))))
(assert (forall ((container us_rep3)) (! (= (= (is_empty1 container) true) (forall ((key us_rep4)) (not (= (has_key container key) true)))) :pattern ((is_empty1 container)))))
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (keys_included left right) true) (forall ((key us_rep4)) (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern ((keys_included left right)))))
(declare-fun has_witness (us_rep3 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)
(assert true)
(assert (forall ((container us_rep3)) (forall ((key us_rep4)) (! (=> (= (has_key container key) true) (let ((result (witness container key))) (and (= (has_witness container result) true) (dynamic_invariant result true false true true)))) :pattern ((witness container key))))))
(assert (forall ((container us_rep3)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant witness1 true true true true) (= (has_witness container witness1) true)) (dynamic_invariant6 (w_get container witness1) true false true true)) :pattern ((w_get container witness1))))))
(declare-const s__split_fields us_main_type)
(declare-const o us_rep1)
(declare-const o1 Bool)
(declare-const o2 Bool)
(declare-const temp___857 us_rep2)
(declare-const temp___856 Int)
(declare-const o3 Bool)
(declare-const o4 Bool)
(declare-const o5 Bool)
(declare-const s__split_fields1 us_main_type)
(declare-const s__split_fields2 us_main_type)
(declare-const s__split_fields3 us_main_type)
(declare-const s__split_fields4 us_main_type)
(declare-const s__split_fields5 us_main_type)
(declare-const s__split_fields6 us_main_type)
(declare-const s__split_fields7 us_main_type)
(declare-const result Bool)
(define-fun s__split_fields8 () us_split_fields (mk___split_fields s__split_fields5))
(define-fun s__split_fields9 () us_split_fields (mk___split_fields s__split_fields4))
(define-fun s__split_fields10 () us_split_fields (mk___split_fields s__split_fields3))
(define-fun s__split_fields11 () us_split_fields (mk___split_fields s__split_fields2))
(define-fun s__split_fields12 () us_split_fields (mk___split_fields s__split_fields1))
(assert (< (length (mk___rep s__split_discrs (mk___split_fields s__split_fields))) (- (to_rep (rec__use_ordered_sets__my_sets__set__capacity s__split_discrs)) 5)))
(assert (and (= (contains (model__ (mk___rep s__split_discrs s__split_fields12)) 1) true) (ite (= (contains (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields))) 1) true) (and (and (and (= (oeq3 (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields))) (model__ (mk___rep s__split_discrs s__split_fields12))) true) (= (oeq4 (positions (mk___rep s__split_discrs s__split_fields12)) (positions (mk___rep s__split_discrs (mk___split_fields s__split_fields)))) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields12)) (find (elements (mk___rep s__split_discrs s__split_fields12)) 1)) 1)) (= (equal_except (elements (mk___rep s__split_discrs (mk___split_fields s__split_fields))) (elements (mk___rep s__split_discrs s__split_fields12)) (find (elements (mk___rep s__split_discrs s__split_fields12)) 1)) true)) (and (and (and (and (and (and (= (length (mk___rep s__split_discrs s__split_fields12)) (+ (length (mk___rep s__split_discrs (mk___split_fields s__split_fields))) 1)) (= (ole (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields))) (model__ (mk___rep s__split_discrs s__split_fields12))) true)) (= (included_except (model__ (mk___rep s__split_discrs s__split_fields12)) (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields))) 1) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields12)) (find (elements (mk___rep s__split_discrs s__split_fields12)) 1)) 1)) (= (range_equal (elements (mk___rep s__split_discrs (mk___split_fields s__split_fields))) (elements (mk___rep s__split_discrs s__split_fields12)) 1 (- (find (elements (mk___rep s__split_discrs s__split_fields12)) 1) 1)) true)) (= (range_shifted (elements (mk___rep s__split_discrs (mk___split_fields s__split_fields))) (elements (mk___rep s__split_discrs s__split_fields12)) (find (elements (mk___rep s__split_discrs s__split_fields12)) 1) (length (mk___rep s__split_discrs (mk___split_fields s__split_fields))) 1) true)) (= (p_positions_shifted (positions (mk___rep s__split_discrs (mk___split_fields s__split_fields))) (positions (mk___rep s__split_discrs s__split_fields12)) (find (elements (mk___rep s__split_discrs s__split_fields12)) 1) 1) true)))))
(assert (and (= (contains (model__ (mk___rep s__split_discrs s__split_fields11)) 2) true) (ite (= (contains (model__ (mk___rep s__split_discrs s__split_fields12)) 2) true) (and (and (and (= (oeq3 (model__ (mk___rep s__split_discrs s__split_fields12)) (model__ (mk___rep s__split_discrs s__split_fields11))) true) (= (oeq4 (positions (mk___rep s__split_discrs s__split_fields11)) (positions (mk___rep s__split_discrs s__split_fields12))) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields11)) (find (elements (mk___rep s__split_discrs s__split_fields11)) 2)) 2)) (= (equal_except (elements (mk___rep s__split_discrs s__split_fields12)) (elements (mk___rep s__split_discrs s__split_fields11)) (find (elements (mk___rep s__split_discrs s__split_fields11)) 2)) true)) (and (and (and (and (and (and (= (length (mk___rep s__split_discrs s__split_fields11)) (+ (length (mk___rep s__split_discrs s__split_fields12)) 1)) (= (ole (model__ (mk___rep s__split_discrs s__split_fields12)) (model__ (mk___rep s__split_discrs s__split_fields11))) true)) (= (included_except (model__ (mk___rep s__split_discrs s__split_fields11)) (model__ (mk___rep s__split_discrs s__split_fields12)) 2) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields11)) (find (elements (mk___rep s__split_discrs s__split_fields11)) 2)) 2)) (= (range_equal (elements (mk___rep s__split_discrs s__split_fields12)) (elements (mk___rep s__split_discrs s__split_fields11)) 1 (- (find (elements (mk___rep s__split_discrs s__split_fields11)) 2) 1)) true)) (= (range_shifted (elements (mk___rep s__split_discrs s__split_fields12)) (elements (mk___rep s__split_discrs s__split_fields11)) (find (elements (mk___rep s__split_discrs s__split_fields11)) 2) (length (mk___rep s__split_discrs s__split_fields12)) 1) true)) (= (p_positions_shifted (positions (mk___rep s__split_discrs s__split_fields12)) (positions (mk___rep s__split_discrs s__split_fields11)) (find (elements (mk___rep s__split_discrs s__split_fields11)) 2) 1) true)))))
(assert (and (= (contains (model__ (mk___rep s__split_discrs s__split_fields10)) 3) true) (ite (= (contains (model__ (mk___rep s__split_discrs s__split_fields11)) 3) true) (and (and (and (= (oeq3 (model__ (mk___rep s__split_discrs s__split_fields11)) (model__ (mk___rep s__split_discrs s__split_fields10))) true) (= (oeq4 (positions (mk___rep s__split_discrs s__split_fields10)) (positions (mk___rep s__split_discrs s__split_fields11))) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields10)) (find (elements (mk___rep s__split_discrs s__split_fields10)) 3)) 3)) (= (equal_except (elements (mk___rep s__split_discrs s__split_fields11)) (elements (mk___rep s__split_discrs s__split_fields10)) (find (elements (mk___rep s__split_discrs s__split_fields10)) 3)) true)) (and (and (and (and (and (and (= (length (mk___rep s__split_discrs s__split_fields10)) (+ (length (mk___rep s__split_discrs s__split_fields11)) 1)) (= (ole (model__ (mk___rep s__split_discrs s__split_fields11)) (model__ (mk___rep s__split_discrs s__split_fields10))) true)) (= (included_except (model__ (mk___rep s__split_discrs s__split_fields10)) (model__ (mk___rep s__split_discrs s__split_fields11)) 3) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields10)) (find (elements (mk___rep s__split_discrs s__split_fields10)) 3)) 3)) (= (range_equal (elements (mk___rep s__split_discrs s__split_fields11)) (elements (mk___rep s__split_discrs s__split_fields10)) 1 (- (find (elements (mk___rep s__split_discrs s__split_fields10)) 3) 1)) true)) (= (range_shifted (elements (mk___rep s__split_discrs s__split_fields11)) (elements (mk___rep s__split_discrs s__split_fields10)) (find (elements (mk___rep s__split_discrs s__split_fields10)) 3) (length (mk___rep s__split_discrs s__split_fields11)) 1) true)) (= (p_positions_shifted (positions (mk___rep s__split_discrs s__split_fields11)) (positions (mk___rep s__split_discrs s__split_fields10)) (find (elements (mk___rep s__split_discrs s__split_fields10)) 3) 1) true)))))
(assert (and (= (contains (model__ (mk___rep s__split_discrs s__split_fields9)) 4) true) (ite (= (contains (model__ (mk___rep s__split_discrs s__split_fields10)) 4) true) (and (and (and (= (oeq3 (model__ (mk___rep s__split_discrs s__split_fields10)) (model__ (mk___rep s__split_discrs s__split_fields9))) true) (= (oeq4 (positions (mk___rep s__split_discrs s__split_fields9)) (positions (mk___rep s__split_discrs s__split_fields10))) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields9)) (find (elements (mk___rep s__split_discrs s__split_fields9)) 4)) 4)) (= (equal_except (elements (mk___rep s__split_discrs s__split_fields10)) (elements (mk___rep s__split_discrs s__split_fields9)) (find (elements (mk___rep s__split_discrs s__split_fields9)) 4)) true)) (and (and (and (and (and (and (= (length (mk___rep s__split_discrs s__split_fields9)) (+ (length (mk___rep s__split_discrs s__split_fields10)) 1)) (= (ole (model__ (mk___rep s__split_discrs s__split_fields10)) (model__ (mk___rep s__split_discrs s__split_fields9))) true)) (= (included_except (model__ (mk___rep s__split_discrs s__split_fields9)) (model__ (mk___rep s__split_discrs s__split_fields10)) 4) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields9)) (find (elements (mk___rep s__split_discrs s__split_fields9)) 4)) 4)) (= (range_equal (elements (mk___rep s__split_discrs s__split_fields10)) (elements (mk___rep s__split_discrs s__split_fields9)) 1 (- (find (elements (mk___rep s__split_discrs s__split_fields9)) 4) 1)) true)) (= (range_shifted (elements (mk___rep s__split_discrs s__split_fields10)) (elements (mk___rep s__split_discrs s__split_fields9)) (find (elements (mk___rep s__split_discrs s__split_fields9)) 4) (length (mk___rep s__split_discrs s__split_fields10)) 1) true)) (= (p_positions_shifted (positions (mk___rep s__split_discrs s__split_fields10)) (positions (mk___rep s__split_discrs s__split_fields9)) (find (elements (mk___rep s__split_discrs s__split_fields9)) 4) 1) true)))))
(assert (and (= (contains (model__ (mk___rep s__split_discrs s__split_fields8)) 5) true) (ite (= (contains (model__ (mk___rep s__split_discrs s__split_fields9)) 5) true) (and (and (and (= (oeq3 (model__ (mk___rep s__split_discrs s__split_fields9)) (model__ (mk___rep s__split_discrs s__split_fields8))) true) (= (oeq4 (positions (mk___rep s__split_discrs s__split_fields8)) (positions (mk___rep s__split_discrs s__split_fields9))) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields8)) (find (elements (mk___rep s__split_discrs s__split_fields8)) 5)) 5)) (= (equal_except (elements (mk___rep s__split_discrs s__split_fields9)) (elements (mk___rep s__split_discrs s__split_fields8)) (find (elements (mk___rep s__split_discrs s__split_fields8)) 5)) true)) (and (and (and (and (and (and (= (length (mk___rep s__split_discrs s__split_fields8)) (+ (length (mk___rep s__split_discrs s__split_fields9)) 1)) (= (ole (model__ (mk___rep s__split_discrs s__split_fields9)) (model__ (mk___rep s__split_discrs s__split_fields8))) true)) (= (included_except (model__ (mk___rep s__split_discrs s__split_fields8)) (model__ (mk___rep s__split_discrs s__split_fields9)) 5) true)) (= (get (elements (mk___rep s__split_discrs s__split_fields8)) (find (elements (mk___rep s__split_discrs s__split_fields8)) 5)) 5)) (= (range_equal (elements (mk___rep s__split_discrs s__split_fields9)) (elements (mk___rep s__split_discrs s__split_fields8)) 1 (- (find (elements (mk___rep s__split_discrs s__split_fields8)) 5) 1)) true)) (= (range_shifted (elements (mk___rep s__split_discrs s__split_fields9)) (elements (mk___rep s__split_discrs s__split_fields8)) (find (elements (mk___rep s__split_discrs s__split_fields8)) 5) (length (mk___rep s__split_discrs s__split_fields9)) 1) true)) (= (p_positions_shifted (positions (mk___rep s__split_discrs s__split_fields9)) (positions (mk___rep s__split_discrs s__split_fields8)) (find (elements (mk___rep s__split_discrs s__split_fields8)) 5) 1) true)))))
(assert (= s__split_fields6 s__split_fields5))
(assert (= (mk___split_fields s__split_fields7) s__split_fields8))
(assert (and (= temp___857 (elements (mk___rep s__split_discrs (mk___split_fields s__split_fields6)))) (and (and (and (= (length2 temp___857) (length (mk___rep s__split_discrs (mk___split_fields s__split_fields6)))) (forall ((temp___432 Int)) (=> (and (in_range4 temp___432) (= (iter_has_element temp___857 temp___432) true)) (= (contains (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields6))) (get temp___857 temp___432)) true)))) (forall ((item Int)) (=> (and (in_range3 item) (= (contains (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields6))) item) true)) (and (< 0 (find temp___857 item)) (= (equivalent_elements (get temp___857 (find temp___857 item)) item) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length (mk___rep s__split_discrs (mk___split_fields s__split_fields6))))) (and (= (find temp___857 (get temp___857 i)) i) (= (e_is_find temp___857 (get temp___857 i) i) true)))))))
(assert (and (= o3 (iter_has_element temp___857 temp___856)) (= (= o3 true) (and (<= 1 temp___856) (<= temp___856 (last temp___857))))))
(assert (= (= o4 true) (in_range4 temp___856)))
(assert (= result (ite (= o4 true) o3 false)))
(assert (= (= o5 true) (let ((temp___860 (elements (mk___rep s__split_discrs (mk___split_fields s__split_fields6))))) (forall ((temp___859 Int)) (=> (and (in_range4 temp___859) (= (iter_has_element temp___860 temp___859) true)) (let ((e (get temp___860 temp___859))) (or (= (contains (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields))) e) true) (and (<= 1 e) (<= e 5)))))))))
(assert (= (= o2 true) (forall ((e Int)) (=> (and (<= 1 e) (<= e 5)) (= (contains (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields6))) e) true)))))
(assert (and (= o (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields6)))) (= (length3 o) (length (mk___rep s__split_discrs (mk___split_fields s__split_fields6))))))
(assert (and (= o1 (ole (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields))) o)) (= (= o1 true) (forall ((item Int)) (=> (and (in_range3 item) (= (contains (model__ (mk___rep s__split_discrs (mk___split_fields s__split_fields))) item) true)) (= (contains o item) true))))))
(assert (not (in_range1 (+ (length (mk___rep s__split_discrs (mk___split_fields s__split_fields))) 5))))
(check-sat)
(exit)
