(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> natural

logic set : map, int, int, natural -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:natural [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:natural [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq4 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def3 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq4(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  (((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) and
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133))))) or
  (not (((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))))))) ->
  (bool_eq4(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  ((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133)))))))) -> (bool_eq4(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq4(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  ((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133))))))))))

type tTmSP1

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tTmSP1, tTmSP1 -> bool

logic dummy2 : tTmSP1

type tTmSP1__ref = { tTmSP1__content : tTmSP1
}

function tTmSP1__ref___projection(a: tTmSP1__ref) : tTmSP1 =
  (a).tTmSP1__content

type tTmSP2

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tTmSP2, tTmSP2 -> bool

logic dummy3 : tTmSP2

type tTmSP2__ref = { tTmSP2__content : tTmSP2
}

function tTmSP2__ref___projection(a: tTmSP2__ref) : tTmSP2 =
  (a).tTmSP2__content

logic attr__ATTRIBUTE_ADDRESS : int

logic c62b : map

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t64b

predicate in_range5(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : t64b, t64b -> bool

logic dummy4 : t64b

type t64b__ref = { t64b__content : t64b
}

function t64b__ref___projection(a: t64b__ref) : t64b = (a).t64b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic c77b : map

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type t79b

predicate in_range6(x: int) = ((0 <= x) and (x <= 9))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : t79b, t79b -> bool

logic dummy5 : t79b

type t79b__ref = { t79b__content : t79b
}

function t79b__ref___projection(a: t79b__ref) : t79b = (a).t79b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic c96b : map

logic attr__ATTRIBUTE_ADDRESS7 : int

type t98b

predicate in_range7(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : t98b, t98b -> bool

logic dummy6 : t98b

type t98b__ref = { t98b__content : t98b
}

function t98b__ref___projection(a: t98b__ref) : t98b = (a).t98b__content

logic attr__ATTRIBUTE_ADDRESS8 : int

logic temp___220 : int, int, int -> map

axiom def_axiom :
  (forall temp___222:int. forall temp___223:int. forall temp___224:int.
  (forall temp___225:int. forall temp___226:int. (((temp___225 = 7) ->
  (get(temp___220(temp___222, temp___223, temp___224), temp___225,
  temp___226) = of_rep(temp___223))) and ((not (temp___225 = 7)) ->
  (((temp___225 = 5) -> (get(temp___220(temp___222, temp___223, temp___224),
  temp___225, temp___226) = of_rep(temp___222))) and
  ((not (temp___225 = 5)) -> (get(temp___220(temp___222, temp___223,
  temp___224), temp___225, temp___226) = of_rep(temp___224))))))))

logic temp___236 : int, int, int -> map

axiom def_axiom1 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  (forall temp___241:int. forall temp___242:int. (((temp___241 = 7) ->
  (get(temp___236(temp___238, temp___239, temp___240), temp___241,
  temp___242) = of_rep(temp___239))) and ((not (temp___241 = 7)) ->
  (((temp___241 = 5) -> (get(temp___236(temp___238, temp___239, temp___240),
  temp___241, temp___242) = of_rep(temp___238))) and
  ((not (temp___241 = 5)) -> (get(temp___236(temp___238, temp___239,
  temp___240), temp___241, temp___242) = of_rep(temp___240))))))))

logic temp___254 : int -> map

axiom def_axiom2 :
  (forall temp___256:int.
  (forall temp___257:int. forall temp___258:int. (get(temp___254(temp___256),
  temp___257, temp___258) = of_rep(temp___256))))

logic m : map

logic tmp : int

logic c : int

logic tmp1 : int

logic c1 : int

logic i : int

logic temp___231 : int

logic temp___228 : map

logic temp___233 : map

logic temp___232 : map

logic temp___227 : int

logic i1 : int

logic o : int

logic o1 : natural

logic o2 : int

logic o3 : int

logic o4 : natural

logic o5 : int

logic o6 : natural

logic o7 : int

logic o8 : int

logic o9 : bool

logic o10 : natural

logic o11 : map

logic o12 : natural

logic o13 : map

logic temp___250 : map

logic temp___247 : int

logic temp___244 : map

logic temp___243 : int

logic temp___249 : map

logic temp___248 : map

logic temp___251 : map

logic i2 : int

logic o14 : int

logic o15 : natural

logic o16 : int

logic o17 : int

logic o18 : natural

logic o19 : int

logic o20 : natural

logic o21 : int

logic o22 : int

logic o23 : bool

logic i3 : int

logic o24 : int

logic o25 : natural

logic o26 : int

logic o27 : int

logic o28 : natural

logic o29 : int

logic o30 : natural

logic o31 : int

logic o32 : int

logic o33 : bool

logic o34 : natural

logic o35 : map

logic o36 : natural

logic o37 : map

logic temp___264 : map

logic temp___262 : int

logic temp___259 : map

logic temp___263 : map

logic k : int

logic o38 : int

logic o39 : int

logic o40 : int

logic o41 : natural

logic o42 : int

logic o43 : int

logic o44 : int

logic k1 : int

logic h : int

logic o45 : int

logic o46 : int

logic o47 : int

logic o48 : natural

logic o49 : int

logic o50 : int

logic o51 : natural

logic o52 : map

logic tmp2 : int

logic tmp3 : int

logic result : map

logic m1 : map

logic result1 : int

logic c2 : int

logic m2 : map

logic tmp4 : int

logic c3 : int

logic result2 : int

logic tmp5 : int

logic result3 : map

logic m3 : map

logic result4 : map

logic m4 : map

logic result5 : int

logic c4 : int

logic m5 : map

logic tmp6 : int

logic c5 : int

logic m6 : map

logic tmp7 : int

logic c6 : int

logic m7 : map

logic tmp8 : int

logic c7 : int

logic m8 : map

logic tmp9 : int

logic c8 : int

logic m9 : map

logic tmp10 : int

logic c9 : int

logic m10 : map

logic tmp11 : int

logic c10 : int

logic result6 : map

logic m11 : map

logic result7 : int

logic c11 : int

logic m12 : map

logic tmp12 : int

logic c12 : int

logic result8 : int

logic tmp13 : int

logic result9 : map

logic m13 : map

logic result10 : map

logic m14 : map

logic result11 : int

logic c13 : int

logic m15 : map

logic tmp14 : int

logic c14 : int

logic m16 : map

logic tmp15 : int

logic c15 : int

logic m17 : map

logic tmp16 : int

logic c16 : int

logic m18 : map

logic tmp17 : int

logic c17 : int

logic m19 : map

logic tmp18 : int

logic c18 : int

logic m20 : map

logic tmp19 : int

logic c19 : int

logic result12 : map

logic m21 : map

logic result13 : int

logic i4 : int

logic m22 : map

logic i5 : int

logic result14 : map

logic m23 : map

logic result15 : int

logic i6 : int

logic m24 : map

logic i7 : int

logic m25 : map

logic i8 : int

logic m26 : map

logic i9 : int

logic m27 : map

logic i10 : int

logic m28 : map

logic i11 : int

logic m29 : map

logic i12 : int

axiom H : (result = m)

axiom H1 : (m1 = temp___220(1, 2, 0))

axiom H2 : (m1 = c62b)

axiom H3 : ((0 <= 2147483647) -> in_range2(tmp))

axiom H4 : (result1 = c)

axiom H5 : (c2 = 1)

axiom H6 : (((1 <= c2) and (c2 <= 10)) -> (((temp___231 = c2) and
  ((temp___228 = m1) and ((temp___233 = m1) and ((temp___232 = m1) and
  ((temp___227 = tmp) and
  ((forall i13:int. (((1 <= i13) and (i13 <= (c3 - 1))) -> ((to_rep(get(m2,
   5, i13)) = to_rep(get(temp___232, 7, i13))) and (to_rep(get(m2, 7,
   i13)) = to_rep(get(temp___233, 5, i13)))))) and ((((((0 <= 2147483647) ->
  in_range2(tmp4)) and
  (forall temp___229:int. forall temp___230:int. ((((1 <= temp___229) and
  (temp___229 <= 10)) and ((1 <= temp___230) and (temp___230 <= 10))) ->
  ((((c3 <= temp___230) or (not (7 = temp___229))) and ((c3 <= temp___230) or
  (not (5 = temp___229)))) -> (get(m2, temp___229,
  temp___230) = get(temp___228, temp___229, temp___230)))))) and
  ((1 <= 10) -> in_range5(c3))) and ((1 <= c3) and (c3 <= 10))) and
  (((tmp4 = result2) and (tmp5 = to_rep(get(m2, 5, c3)))) and
  ((((to_rep(o10) = to_rep(get(m2, 7, c3))) and (o11 = set(m2, 5, c3,
  o10))) and ((m2 = result3) and (m3 = o11))) and ((((to_rep(o12) = tmp5) and
  (o13 = set(m3, 7, c3, o12))) and ((m3 = result4) and (m4 = o13))) and
  (c3 = 10))))))))))) and (((c3 = c7) and ((tmp5 = tmp8) and (m4 = m7))) and
  ((c8 = c3) and ((tmp9 = tmp5) and (m8 = m4))))))

axiom H7 : (((1 <= c2) and (c2 <= 10)) -> (c9 = c7))

axiom H8 : (((1 <= c2) and (c2 <= 10)) -> (tmp10 = tmp8))

axiom H9 : (((1 <= c2) and (c2 <= 10)) -> (m9 = m7))

axiom H10 : (((1 <= c2) and (c2 <= 10)) -> (c10 = c8))

axiom H11 : (((1 <= c2) and (c2 <= 10)) -> (tmp11 = tmp9))

axiom H12 : (((1 <= c2) and (c2 <= 10)) -> (m10 = m8))

axiom H13 : ((not ((1 <= c2) and (c2 <= 10))) -> (c2 = c9))

axiom H14 : ((not ((1 <= c2) and (c2 <= 10))) -> (tmp10 = tmp))

axiom H15 : ((not ((1 <= c2) and (c2 <= 10))) -> (m1 = m9))

axiom H16 : ((not ((1 <= c2) and (c2 <= 10))) -> (c10 = c2))

axiom H17 : ((not ((1 <= c2) and (c2 <= 10))) -> (tmp11 = tmp2))

axiom H18 : ((not ((1 <= c2) and (c2 <= 10))) -> (m10 = m1))

axiom H19 :
  (forall i13:int. (((1 <= i13) and (i13 <= 10)) ->
  (forall j:int. (((1 <= j) and (j <= 10)) -> (((i13 = 5) -> (to_rep(get(m9,
  i13, j)) = 2)) and ((not (i13 = 5)) -> (((i13 = 7) -> (to_rep(get(m9, i13,
  j)) = 1)) and ((not (i13 = 7)) -> (to_rep(get(m9, i13, j)) = 0)))))))))

axiom H20 : (result6 = m9)

axiom H21 : (m11 = temp___236(1, 2, 0))

axiom H22 : (m11 = c77b)

axiom H23 : ((0 <= 2147483647) -> in_range2(tmp1))

axiom H24 : (result7 = c1)

axiom H25 : (c11 = 0)

axiom H26 : (0 <= c11)

axiom H27 : (c11 <= 9)

axiom H28 :
  (forall i13:int. (((1 <= i13) and (i13 <= c12)) -> ((to_rep(get(m12, 5,
  i13)) = to_rep(get(m11, 7, i13))) and (to_rep(get(m12, 7,
  i13)) = to_rep(get(m11, 5, i13))))))

axiom H29 :
  (forall i13:int. ((((c12 + 1) <= i13) and (i13 <= 10)) -> ((to_rep(get(m12,
  5, i13)) = to_rep(get(m11, 5, i13))) and (to_rep(get(m12, 7,
  i13)) = to_rep(get(m11, 7, i13))))))

axiom H30 : (((((0 <= 9) -> in_range6(c12)) and
  (forall temp___245:int. forall temp___246:int. ((((1 <= temp___245) and
  (temp___245 <= 10)) and ((1 <= temp___246) and (temp___246 <= 10))) ->
  (((not (7 = temp___245)) and (not (5 = temp___245))) -> (get(m12,
  temp___245, temp___246) = get(m11, temp___245, temp___246)))))) and
  ((0 <= 2147483647) -> in_range2(tmp12))) and ((0 <= c12) and (c12 <= 9)))

axiom H31 : (1 <= i2)

axiom H32 : (i2 <= c12)

axiom H33 : ((1 <= i2) and (i2 <= 10))

axiom H34 : (o19 = i2)

axiom H35 : (o20 = get(m11, 5, o19))

axiom H36 : (o21 = to_rep(o20))

 (* File "test_swap_lines.adb", line 1, characters 0-0 *)
goal WP_parameter_def : (1 <= i2)
