(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type tcount_typeB

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tcount_typeB, tcount_typeB -> bool

logic dummy1 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type val__

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : val__, val__ -> bool

logic dummy2 : val__

type val____ref = { val____content : val__
}

function val____ref___projection(a: val____ref) : val__ = (a).val____content

type index_type

predicate in_range4(x: int) = ((1 <= x) and (x <= 1000))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index_type, index_type -> bool

logic dummy3 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index

predicate in_range5(x: int) = ((0 <= x) and (x <= 1001))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : extended_index, extended_index -> bool

logic dummy4 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type capacity_range

predicate in_range6(x: int) = ((0 <= x) and (x <= 1000))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : capacity_range, capacity_range -> bool

logic dummy5 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__amortized_queue__my_vectors__vector__capacity :
capacity_range
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range =
  (a).rec__amortized_queue__my_vectors__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__amortized_queue__my_vectors__vector :
us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__amortized_queue__my_vectors__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = a
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 }
  })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = a
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 }
  })))

logic amortized_queue__my_vectors__vector__capacity__first__bit : int

logic amortized_queue__my_vectors__vector__capacity__last__bit : int

logic amortized_queue__my_vectors__vector__capacity__position : int

axiom amortized_queue__my_vectors__vector__capacity__first__bit_axiom :
  (0 <= amortized_queue__my_vectors__vector__capacity__first__bit)

axiom amortized_queue__my_vectors__vector__capacity__last__bit_axiom :
  (amortized_queue__my_vectors__vector__capacity__first__bit <  amortized_queue__my_vectors__vector__capacity__last__bit)

axiom amortized_queue__my_vectors__vector__capacity__position_axiom :
  (0 <= amortized_queue__my_vectors__vector__capacity__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : capacity_range

logic dummy7 : us_main_type

type vector__ref = { vector__content : us_rep
}

function vector__ref___projection(a: vector__ref) : us_rep =
  (a).vector__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic to_rep : capacity_range -> int

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range6(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range6(x) ->
  (to_rep(of_rep(x)) = x)))

logic capacity__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  container }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = container1 } })].
  ((((of_int(1) = true) -> (length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } }) <= to_rep(container))) and ((not (of_int(1) = true)) -> (length({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  container }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = container1 } }) <= 1000))) and
  in_range6(length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq8 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy8 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref___projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic last__function_guard : int, us_rep1 -> prop

logic model__ : us_rep -> us_rep1

logic model____function_guard : us_rep1, us_rep -> prop

logic last_index__function_guard : int, us_rep -> prop

logic first_index__function_guard : int, us_rep -> prop

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic element__function_guard : int, us_rep, int -> prop

type element_type

predicate in_range7(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : element_type, element_type -> bool

logic dummy9 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic olt__function_guard : bool, us_rep1, us_rep1 -> prop

logic left : int

logic attr__ATTRIBUTE_ADDRESS : int

logic right : capacity_range

logic right1 : us_main_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r21b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range8(rec__amortized_queue__my_vectors__vector__capacity1: int,
  a: us_rep) =
  (rec__amortized_queue__my_vectors__vector__capacity1 = to_rep(((a).us_split_discrs1).rec__amortized_queue__my_vectors__vector__capacity))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size2({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity = a
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 }
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = a };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = a1 } })))

logic amortized_queue__my_vectors__vector__capacity__first__bit1 : int

logic amortized_queue__my_vectors__vector__capacity__last__bit1 : int

logic amortized_queue__my_vectors__vector__capacity__position1 : int

axiom amortized_queue__my_vectors__vector__capacity__first__bit_axiom1 :
  (0 <= amortized_queue__my_vectors__vector__capacity__first__bit1)

axiom amortized_queue__my_vectors__vector__capacity__last__bit_axiom1 :
  (amortized_queue__my_vectors__vector__capacity__first__bit1 <  amortized_queue__my_vectors__vector__capacity__last__bit1)

axiom amortized_queue__my_vectors__vector__capacity__position_axiom1 :
  (0 <= amortized_queue__my_vectors__vector__capacity__position1)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy10 : capacity_range

logic dummy11 : us_main_type

type tresultS__ref = { tresultS__content : us_rep
}

function tresultS__ref___2__projection(a: tresultS__ref) : us_rep =
  (a).tresultS__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic result____split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r23b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r24b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy12 : integer

type t25b__ref = { t25b__content : integer
}

function t25b__ref___projection(a: t25b__ref) : integer = (a).t25b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

type count_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : count_type, count_type -> bool

logic dummy13 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq7(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq7(a, b) = match_bool(bool_eq1(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq7(a, b) = match_bool(bool_eq1(length1(a), length1(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  container }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = container1 } })].
  (length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } })) = length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } })))

axiom is_empty__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type
  [is_empty({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } })]. ((is_empty({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } }) = true) <-> (length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = container };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = container1
  } }) = 0)))

type extended_index1

predicate in_range10(x: int) = ((0 <= x) and (x <= 1000))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : extended_index1, extended_index1 -> bool

logic dummy14 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep1 [length1(container)].
  (((0 + length1(container)) <= 1000) and in_range9(length1(container))))

type element_type1

predicate in_range11(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq13 : element_type1, element_type1 -> bool

logic dummy15 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)]. ((in_range10(position) and
  ((1 <= position) and (position <= (0 + length1(container))))) ->
  in_range11(get(container, position)))))

logic result____split_fields : us_main_type

logic idx : int

logic amortized_queue__Oconcat__2__result : capacity_range

logic amortized_queue__Oconcat__2__result1 : us_main_type

logic o : int

logic amortized_queue__Oconcat__2__R20b__R21b__assume : int

logic us : int

logic amortized_queue__Oconcat__2__L_3__R23b__assume : int

logic amortized_queue__Oconcat__2__L_3__R24b__assume : int

logic temp___512 : int

logic temp___511 : capacity_range

logic temp___5111 : us_main_type

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic i : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic i1 : int

logic o12 : int

logic o13 : bool

logic o14 : int

logic o15 : int

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : int

logic o22 : int

logic amortized_queue__my_vectors__append__2__container__fields : us_main_type

logic result : us_main_type

logic result____split_fields1 : us_main_type

logic result1 : int

logic idx1 : int

logic amortized_queue__my_vectors__append__2__container__fields1 : us_main_type

logic result2 : us_main_type

logic result____split_fields2 : us_main_type

logic result____split_fields3 : us_main_type

logic idx2 : int

logic result3 : int

logic idx3 : int

logic amortized_queue__my_vectors__append__2__container__fields2 : us_main_type

logic result4 : us_main_type

logic result____split_fields4 : us_main_type

logic result____split_fields5 : us_main_type

logic idx4 : int

logic result____split_fields6 : us_main_type

logic idx5 : int

logic result____split_fields7 : us_main_type

logic idx6 : int

logic result____split_fields8 : us_main_type

logic idx7 : int

logic result5 : capacity_range

logic result6 : us_main_type

logic amortized_queue__Oconcat__2__result2 : capacity_range

logic amortized_queue__Oconcat__2__result3 : us_main_type

logic result____split_fields9 : us_main_type

logic idx8 : int

logic amortized_queue__Oconcat__2__result4 : capacity_range

logic amortized_queue__Oconcat__2__result5 : us_main_type

logic result____split_fields10 : us_main_type

logic idx9 : int

logic amortized_queue__Oconcat__2__result6 : capacity_range

logic amortized_queue__Oconcat__2__result7 : us_main_type

logic result____split_fields11 : us_main_type

logic idx10 : int

logic amortized_queue__Oconcat__2__result8 : capacity_range

logic amortized_queue__Oconcat__2__result9 : us_main_type

logic result____split_fields12 : us_main_type

logic idx11 : int

logic amortized_queue__Oconcat__2__result10 : capacity_range

logic amortized_queue__Oconcat__2__result11 : us_main_type

logic result7 : bool

logic result8 : bool

logic result9 : bool

axiom H : in_range3(left)

axiom H1 : ((1 + length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = right };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = right1 }
  })) <= 1000)

axiom H2 :
  (((((amortized_queue__Oconcat__2__result4 = amortized_queue__Oconcat__2__result2) and
  (amortized_queue__Oconcat__2__result5 = amortized_queue__Oconcat__2__result3)) and
  ((idx8 = idx6) and
  (result____split_fields9 = result____split_fields7))) and
  (((amortized_queue__Oconcat__2__result6 = amortized_queue__Oconcat__2__result2) and
  (amortized_queue__Oconcat__2__result7 = amortized_queue__Oconcat__2__result3)) and
  ((idx9 = idx7) and
  (result____split_fields10 = result____split_fields8)))) and
  ((((((o = length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = right };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = right1 }
  })) and (in_range6(o) and (((of_int(1) = true) -> (o <= to_rep(right))) and
  ((not (of_int(1) = true)) -> (o <= 1000))))) and
  (amortized_queue__Oconcat__2__R20b__R21b__assume = (1 + o))) and
  (amortized_queue__Oconcat__2__R20b__R21b__assume = r21b)) and
  in_range2(r21b)) and (((us = r21b) and in_range6(r21b)) and
  ((((to_rep(result____split_discrs) = r21b) and (is_empty({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  result____split_discrs }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = result____split_fields }
  }) = true)) and (r21b = to_rep(result____split_discrs))) and (((((length({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  result____split_discrs }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields } }) = (length({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  result____split_discrs }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = result____split_fields }
  }) + 1)) and (((bool_lt(length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields } })), length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  result____split_discrs }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = result____split_fields }
  }))))) -> (get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields } }), n) = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields } }), n))))) and
  (not (bool_lt(length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields } })), length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields }
  }))) = false)))) and (get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields } }),
  ((0 + length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields } }))) + 1)) = left)) and
  ((result = result____split_fields) and
  (result____split_fields1 = amortized_queue__my_vectors__append__2__container__fields))) and
  (((((amortized_queue__Oconcat__2__L_3__R23b__assume = 1) and
  (in_range4(amortized_queue__Oconcat__2__L_3__R23b__assume) and
  (amortized_queue__Oconcat__2__L_3__R23b__assume = 1))) and
  (amortized_queue__Oconcat__2__L_3__R23b__assume = r23b)) and
  in_range4(r23b)) and
  (((((amortized_queue__Oconcat__2__L_3__R24b__assume = (0 + length1(model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  right }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  right1 } })))) and
  (in_range5(amortized_queue__Oconcat__2__L_3__R24b__assume) and
  (amortized_queue__Oconcat__2__L_3__R24b__assume = (0 + length1(model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  right }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  right1 } })))))) and
  (amortized_queue__Oconcat__2__L_3__R24b__assume = r24b)) and
  in_range5(r24b)) and ((((result1 = idx) and (idx1 = r23b)) and
  ((((r23b <= idx1) and (idx1 <= r24b)) -> ((((temp___512 = idx1) and
  (((result____split_discrs = temp___511) and
  (temp___5111 = result____split_fields1)) and ((((((o1 = idx1) and
  in_range4(idx1)) and ((o2 = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = right };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = right1 }
  }), o1)) and (in_range7(o2) and (o2 = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = right };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = right1 }
  }), o1))))) and (((length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields1 } }) = (length({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  result____split_discrs }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = result____split_fields1 }
  }) + 1)) and (((bool_lt(length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields1 } })), length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields1 }
  }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  result____split_discrs }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = result____split_fields1 }
  }))))) -> (get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields1 } }), n) = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields1 } }), n))))) and
  (not (bool_lt(length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields1 } })), length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields1 }
  }))) = false)))) and (get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields1 } }),
  ((0 + length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields1 } }))) + 1)) = o2))) and
  ((result2 = result____split_fields1) and
  (result____split_fields2 = amortized_queue__my_vectors__append__2__container__fields1))) and
  (((length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = result____split_discrs
  }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  result____split_fields3 } }) = (1 + idx2)) and ((get(model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  result____split_discrs }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = result____split_fields3 } }),
  1) = left) and
  (forall i2:int. (((1 <= i2) and (i2 <= idx2)) -> (get(model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  result____split_discrs }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = result____split_fields3 } }),
  (1 + i2)) = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = right };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = right1 }
  }), i2)))))) and ((((r23b <= r24b) -> dynamic_property(r23b, r24b,
  idx2)) and ((r23b <= idx2) and (idx2 <= r24b))) and (idx2 = r24b)))))) and
  (((idx4 = idx2) and
  (result____split_fields5 = result____split_fields3)) and ((idx5 = idx2) and
  (result____split_fields6 = result____split_fields3)))) and
  (((idx6 = idx4) and
  (result____split_fields7 = result____split_fields5)) and ((idx7 = idx5) and
  (result____split_fields8 = result____split_fields6))))) and
  ((not ((r23b <= idx1) and (idx1 <= r24b))) -> (((idx6 = idx1) and
  (result____split_fields7 = result____split_fields1)) and ((idx7 = idx1) and
  (result____split_fields8 = result____split_fields1)))))) and
  (((result5 = amortized_queue__Oconcat__2__result) and
  (result6 = amortized_queue__Oconcat__2__result1)) and
  ((amortized_queue__Oconcat__2__result2 = result____split_discrs) and
  (amortized_queue__Oconcat__2__result3 = result____split_fields7)))))))))))

axiom H3 :
  ((amortized_queue__Oconcat__2__result8 = amortized_queue__Oconcat__2__result4) and
  (amortized_queue__Oconcat__2__result9 = amortized_queue__Oconcat__2__result5))

axiom H4 : (idx10 = idx8)

axiom H5 : (result____split_fields11 = result____split_fields9)

axiom H6 :
  ((amortized_queue__Oconcat__2__result10 = amortized_queue__Oconcat__2__result6) and
  (amortized_queue__Oconcat__2__result11 = amortized_queue__Oconcat__2__result7))

axiom H7 : (idx11 = idx9)

axiom H8 : (result____split_fields12 = result____split_fields10)

axiom H9 : ((o20 = length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = right };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = right1 }
  })) and (in_range6(o20) and (((of_int(1) = true) ->
  (o20 <= to_rep(right))) and ((not (of_int(1) = true)) -> (o20 <= 1000)))))

axiom H10 : (o21 = (1 + o20))

axiom H11 : ((o22 = length({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity =
  amortized_queue__Oconcat__2__result8 }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector =
  amortized_queue__Oconcat__2__result9 } })) and (in_range6(o22) and
  (((of_int(1) = true) ->
  (o22 <= to_rep(amortized_queue__Oconcat__2__result8))) and
  ((not (of_int(1) = true)) -> (o22 <= 1000)))))

axiom H12 : (((o22 = o21) -> (result7 = true)) and ((not (o22 = o21)) ->
  (result7 = false)))

axiom H13 : (result7 = true)

axiom H14 : ((o19 = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity =
  amortized_queue__Oconcat__2__result8 }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector =
  amortized_queue__Oconcat__2__result9 } }), 1)) and (in_range7(o19) and
  (o19 = get(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity =
  amortized_queue__Oconcat__2__result8 }; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector =
  amortized_queue__Oconcat__2__result9 } }), 1))))

axiom H15 : (((o19 = left) -> (result8 = true)) and ((not (o19 = left)) ->
  (result8 = false)))

axiom H16 : (result8 = true)

axiom H17 : ((o12 = (0 + length1(model__({ us_split_discrs1 = {
  rec__amortized_queue__my_vectors__vector__capacity = right };
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector = right1 }
  })))) and (in_range5(o12) and (o12 = (0 + length1(model__({
  us_split_discrs1 = { rec__amortized_queue__my_vectors__vector__capacity =
  right }; us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  right1 } }))))))

axiom H18 : (((i1 <= o12) -> (o13 = true)) and ((not (i1 <= o12)) ->
  (o13 = false)))

axiom H19 : (((1 <= i1) -> (result9 = o13)) and ((not (1 <= i1)) ->
  (result9 = false)))

axiom H20 : (result9 = true)

axiom H21 : ((o16 = i1) and in_range4(i1))

 (* File "a-cofove.ads", line 76, characters 0-0 *)
goal WP_parameter_def : (1 <= o16)
