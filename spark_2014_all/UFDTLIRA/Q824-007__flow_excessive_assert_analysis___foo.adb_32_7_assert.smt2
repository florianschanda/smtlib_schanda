(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__foo__level_0__a1 Bool) (rec__foo__level_0__a2 Bool) (rec__foo__level_0__a3 Bool) (rec__foo__level_0__a4 Bool) (rec__foo__level_0__a5 Bool)))))
(define-fun us_split_fields_A1__projection ((a us_split_fields)) Bool (rec__foo__level_0__a1 a))
(define-fun us_split_fields_A2__projection ((a us_split_fields)) Bool (rec__foo__level_0__a2 a))
(define-fun us_split_fields_A3__projection ((a us_split_fields)) Bool (rec__foo__level_0__a3 a))
(define-fun us_split_fields_A4__projection ((a us_split_fields)) Bool (rec__foo__level_0__a4 a))
(define-fun us_split_fields_A5__projection ((a us_split_fields)) Bool (rec__foo__level_0__a5 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (= (rec__foo__level_0__a1 (us_split_fields1 a)) (rec__foo__level_0__a1 (us_split_fields1 b))) (= (rec__foo__level_0__a2 (us_split_fields1 a)) (rec__foo__level_0__a2 (us_split_fields1 b)))) (= (rec__foo__level_0__a3 (us_split_fields1 a)) (rec__foo__level_0__a3 (us_split_fields1 b)))) (= (rec__foo__level_0__a4 (us_split_fields1 a)) (rec__foo__level_0__a4 (us_split_fields1 b)))) (= (rec__foo__level_0__a5 (us_split_fields1 a)) (rec__foo__level_0__a5 (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const foo__level_0__a1__first__bit Int)
(declare-const foo__level_0__a1__last__bit Int)
(declare-const foo__level_0__a1__position Int)
(assert (<= 0 foo__level_0__a1__first__bit))
(assert (< foo__level_0__a1__first__bit foo__level_0__a1__last__bit))
(assert (<= 0 foo__level_0__a1__position))
(declare-const foo__level_0__a2__first__bit Int)
(declare-const foo__level_0__a2__last__bit Int)
(declare-const foo__level_0__a2__position Int)
(assert (<= 0 foo__level_0__a2__first__bit))
(assert (< foo__level_0__a2__first__bit foo__level_0__a2__last__bit))
(assert (<= 0 foo__level_0__a2__position))
(declare-const foo__level_0__a3__first__bit Int)
(declare-const foo__level_0__a3__last__bit Int)
(declare-const foo__level_0__a3__position Int)
(assert (<= 0 foo__level_0__a3__first__bit))
(assert (< foo__level_0__a3__first__bit foo__level_0__a3__last__bit))
(assert (<= 0 foo__level_0__a3__position))
(declare-const foo__level_0__a4__first__bit Int)
(declare-const foo__level_0__a4__last__bit Int)
(declare-const foo__level_0__a4__position Int)
(assert (<= 0 foo__level_0__a4__first__bit))
(assert (< foo__level_0__a4__first__bit foo__level_0__a4__last__bit))
(assert (<= 0 foo__level_0__a4__position))
(declare-const foo__level_0__a5__first__bit Int)
(declare-const foo__level_0__a5__last__bit Int)
(declare-const foo__level_0__a5__position Int)
(assert (<= 0 foo__level_0__a5__first__bit))
(assert (< foo__level_0__a5__first__bit foo__level_0__a5__last__bit))
(assert (<= 0 foo__level_0__a5__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((level_0__ref (mk_level_0__ref (level_0__content us_rep)))))
(define-fun level_0__ref___projection ((a level_0__ref)) us_rep (level_0__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__foo__level_1__b1 us_rep) (rec__foo__level_1__b2 us_rep) (rec__foo__level_1__b3 us_rep) (rec__foo__level_1__b4 us_rep)))))
(define-fun us_split_fields_B1__projection ((a us_split_fields2)) us_rep (rec__foo__level_1__b1 a))
(define-fun us_split_fields_B2__projection ((a us_split_fields2)) us_rep (rec__foo__level_1__b2 a))
(define-fun us_split_fields_B3__projection ((a us_split_fields2)) us_rep (rec__foo__level_1__b3 a))
(define-fun us_split_fields_B4__projection ((a us_split_fields2)) us_rep (rec__foo__level_1__b4 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (bool_eq (rec__foo__level_1__b1 (us_split_fields3 a)) (rec__foo__level_1__b1 (us_split_fields3 b))) true) (= (bool_eq (rec__foo__level_1__b2 (us_split_fields3 a)) (rec__foo__level_1__b2 (us_split_fields3 b))) true)) (= (bool_eq (rec__foo__level_1__b3 (us_split_fields3 a)) (rec__foo__level_1__b3 (us_split_fields3 b))) true)) (= (bool_eq (rec__foo__level_1__b4 (us_split_fields3 a)) (rec__foo__level_1__b4 (us_split_fields3 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const foo__level_1__b1__first__bit Int)
(declare-const foo__level_1__b1__last__bit Int)
(declare-const foo__level_1__b1__position Int)
(assert (<= 0 foo__level_1__b1__first__bit))
(assert (< foo__level_1__b1__first__bit foo__level_1__b1__last__bit))
(assert (<= 0 foo__level_1__b1__position))
(declare-const foo__level_1__b2__first__bit Int)
(declare-const foo__level_1__b2__last__bit Int)
(declare-const foo__level_1__b2__position Int)
(assert (<= 0 foo__level_1__b2__first__bit))
(assert (< foo__level_1__b2__first__bit foo__level_1__b2__last__bit))
(assert (<= 0 foo__level_1__b2__position))
(declare-const foo__level_1__b3__first__bit Int)
(declare-const foo__level_1__b3__last__bit Int)
(declare-const foo__level_1__b3__position Int)
(assert (<= 0 foo__level_1__b3__first__bit))
(assert (< foo__level_1__b3__first__bit foo__level_1__b3__last__bit))
(assert (<= 0 foo__level_1__b3__position))
(declare-const foo__level_1__b4__first__bit Int)
(declare-const foo__level_1__b4__last__bit Int)
(declare-const foo__level_1__b4__position Int)
(assert (<= 0 foo__level_1__b4__first__bit))
(assert (< foo__level_1__b4__first__bit foo__level_1__b4__last__bit))
(assert (<= 0 foo__level_1__b4__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((level_1__ref (mk_level_1__ref (level_1__content us_rep1)))))
(define-fun level_1__ref___projection ((a level_1__ref)) us_rep1 (level_1__content a))
(declare-fun invariant__ (us_rep1 us_rep1 us_rep1) Bool)
(declare-fun invariant____function_guard (Bool us_rep1 us_rep1 us_rep1) Bool)
(assert true)
(assert (forall ((a us_rep1) (b us_rep1) (c us_rep1)) (! (= (= (invariant__ a b c) true) (and (and (= (rec__foo__level_0__a1 (us_split_fields1 (rec__foo__level_1__b1 (us_split_fields3 a)))) true) (= (rec__foo__level_0__a2 (us_split_fields1 (rec__foo__level_1__b2 (us_split_fields3 b)))) true)) (= (rec__foo__level_0__a3 (us_split_fields1 (rec__foo__level_1__b3 (us_split_fields3 c)))) true))) :pattern ((invariant__ a b c)))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__foo__level_2__c1 us_rep1) (rec__foo__level_2__c2 us_rep1) (rec__foo__level_2__c3 us_rep1)))))
(define-fun us_split_fields_C1__projection ((a us_split_fields4)) us_rep1 (rec__foo__level_2__c1 a))
(define-fun us_split_fields_C2__projection ((a us_split_fields4)) us_rep1 (rec__foo__level_2__c2 a))
(define-fun us_split_fields_C3__projection ((a us_split_fields4)) us_rep1 (rec__foo__level_2__c3 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (bool_eq1 (rec__foo__level_2__c1 (us_split_fields5 a)) (rec__foo__level_2__c1 (us_split_fields5 b))) true) (= (bool_eq1 (rec__foo__level_2__c2 (us_split_fields5 a)) (rec__foo__level_2__c2 (us_split_fields5 b))) true)) (= (bool_eq1 (rec__foo__level_2__c3 (us_split_fields5 a)) (rec__foo__level_2__c3 (us_split_fields5 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const foo__level_2__c1__first__bit Int)
(declare-const foo__level_2__c1__last__bit Int)
(declare-const foo__level_2__c1__position Int)
(assert (<= 0 foo__level_2__c1__first__bit))
(assert (< foo__level_2__c1__first__bit foo__level_2__c1__last__bit))
(assert (<= 0 foo__level_2__c1__position))
(declare-const foo__level_2__c2__first__bit Int)
(declare-const foo__level_2__c2__last__bit Int)
(declare-const foo__level_2__c2__position Int)
(assert (<= 0 foo__level_2__c2__first__bit))
(assert (< foo__level_2__c2__first__bit foo__level_2__c2__last__bit))
(assert (<= 0 foo__level_2__c2__position))
(declare-const foo__level_2__c3__first__bit Int)
(declare-const foo__level_2__c3__last__bit Int)
(declare-const foo__level_2__c3__position Int)
(assert (<= 0 foo__level_2__c3__first__bit))
(assert (< foo__level_2__c3__first__bit foo__level_2__c3__last__bit))
(assert (<= 0 foo__level_2__c3__position))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((level_2__ref (mk_level_2__ref (level_2__content us_rep2)))))
(define-fun level_2__ref___projection ((a level_2__ref)) us_rep2 (level_2__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const red__split_fields us_split_fields__ref2)
(declare-const black__split_fields us_split_fields__ref2)
(declare-const red__split_fields1 us_split_fields4)
(declare-const black__split_fields1 us_split_fields4)
(assert (in_range x))
(assert (< 1 x))
(assert (= (invariant__ (rec__foo__level_2__c1 (let ((subject red__split_fields)) red__split_fields1)) (rec__foo__level_2__c2 (let ((subject red__split_fields)) red__split_fields1)) (rec__foo__level_2__c3 (let ((subject red__split_fields)) red__split_fields1))) true))
(assert (not (= (invariant__ (rec__foo__level_2__c1 (let ((subject black__split_fields)) black__split_fields1)) (rec__foo__level_2__c2 (let ((subject black__split_fields)) black__split_fields1)) (rec__foo__level_2__c3 (let ((subject black__split_fields)) black__split_fields1))) true)))
(check-sat)
(exit)
