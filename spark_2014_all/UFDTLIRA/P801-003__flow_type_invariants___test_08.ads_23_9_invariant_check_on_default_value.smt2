(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun is_positive_good (Int) Bool)
(declare-fun is_positive_good__function_guard (Bool Int) Bool)
(assert (forall ((n Int)) (! (=> (dynamic_invariant n true true true) (= (= (is_positive_good n) true) (<= 1 n))) :pattern ((is_positive_good n)))))
(declare-fun is_positive_bad (Int) Bool)
(declare-fun is_positive_bad__function_guard (Bool Int) Bool)
(assert (forall ((n Int)) (! (=> (dynamic_invariant n true true true) (= (= (is_positive_bad n) true) (<= 1 n))) :pattern ((is_positive_bad n)))))
(declare-fun is_positive_ugly (Int) Bool)
(declare-fun is_positive_ugly__function_guard (Bool Int) Bool)
(assert (forall ((n Int)) (! (=> (dynamic_invariant n true true true) (= (= (is_positive_ugly n) true) (<= 1 n))) :pattern ((is_positive_ugly n)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__test_08__t1__n integer)))))
(define-fun us_split_fields_N__projection ((a us_split_fields)) integer (rec__test_08__t1__n a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__test_08__t1__n (us_split_fields1 a))) (to_rep (rec__test_08__t1__n (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const test_08__t1__n__first__bit Int)
(declare-const test_08__t1__n__last__bit Int)
(declare-const test_08__t1__n__position Int)
(assert (<= 0 test_08__t1__n__first__bit))
(assert (< test_08__t1__n__first__bit test_08__t1__n__last__bit))
(assert (<= 0 test_08__t1__n__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content us_rep)))))
(define-fun t1__ref___projection ((a t1__ref)) us_rep (t1__content a))
(define-fun default_initial_assumption ((temp___expr_136 us_rep) (temp___skip_top_level_137 Bool)) Bool (= (to_rep (rec__test_08__t1__n (us_split_fields1 temp___expr_136))) 42))
(define-fun type_invariant ((temp___138 us_rep)) Bool (or (= (is_positive_good (to_rep (rec__test_08__t1__n (us_split_fields1 temp___138)))) true) (= (to_rep (rec__test_08__t1__n (us_split_fields1 temp___138))) (- 5))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__test_08__t2__n integer)))))
(define-fun us_split_fields_N__2__projection ((a us_split_fields2)) integer (rec__test_08__t2__n a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep (rec__test_08__t2__n (us_split_fields3 a))) (to_rep (rec__test_08__t2__n (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const test_08__t2__n__first__bit Int)
(declare-const test_08__t2__n__last__bit Int)
(declare-const test_08__t2__n__position Int)
(assert (<= 0 test_08__t2__n__first__bit))
(assert (< test_08__t2__n__first__bit test_08__t2__n__last__bit))
(assert (<= 0 test_08__t2__n__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((t2__ref (mk_t2__ref (t2__content us_rep1)))))
(define-fun t2__ref___projection ((a t2__ref)) us_rep1 (t2__content a))
(define-fun default_initial_assumption1 ((temp___expr_144 us_rep1) (temp___skip_top_level_145 Bool)) Bool (= (to_rep (rec__test_08__t2__n (us_split_fields3 temp___expr_144))) 42))
(define-fun type_invariant1 ((temp___146 us_rep1)) Bool (or (= (is_positive_bad (to_rep (rec__test_08__t2__n (us_split_fields3 temp___146)))) true) (= (to_rep (rec__test_08__t2__n (us_split_fields3 temp___146))) (- 5))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__test_08__t3__n integer)))))
(define-fun us_split_fields_N__3__projection ((a us_split_fields4)) integer (rec__test_08__t3__n a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (= (to_rep (rec__test_08__t3__n (us_split_fields5 a))) (to_rep (rec__test_08__t3__n (us_split_fields5 b)))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const test_08__t3__n__first__bit Int)
(declare-const test_08__t3__n__last__bit Int)
(declare-const test_08__t3__n__position Int)
(assert (<= 0 test_08__t3__n__first__bit))
(assert (< test_08__t3__n__first__bit test_08__t3__n__last__bit))
(assert (<= 0 test_08__t3__n__position))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((t3__ref (mk_t3__ref (t3__content us_rep2)))))
(define-fun t3__ref___projection ((a t3__ref)) us_rep2 (t3__content a))
(define-fun default_initial_assumption2 ((temp___expr_152 us_rep2) (temp___skip_top_level_153 Bool)) Bool (= (to_rep (rec__test_08__t3__n (us_split_fields5 temp___expr_152))) 42))
(define-fun type_invariant2 ((temp___154 us_rep2)) Bool (or (= (is_positive_ugly (to_rep (rec__test_08__t3__n (us_split_fields5 temp___154)))) true) (= (to_rep (rec__test_08__t3__n (us_split_fields5 temp___154))) (- 5))))
(declare-const temp___158 integer)
(declare-const temp___157 integer)
(declare-const temp___156 integer)
(assert (= (to_rep temp___156) 42))
(assert (not (type_invariant2 (mk___rep2 (mk___split_fields2 temp___156)))))
(check-sat)
(exit)
