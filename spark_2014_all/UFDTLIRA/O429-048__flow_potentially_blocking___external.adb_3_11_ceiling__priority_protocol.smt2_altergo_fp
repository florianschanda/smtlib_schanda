(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type priority

predicate in_range(x: int) = ((0 <= x) and (x <= 97))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : priority, priority -> bool

logic dummy : priority

type priority__ref = { priority__content : priority
}

function priority__ref___projection(a: priority__ref) : priority =
  (a).priority__content

type po_procT

logic user_eq1 : po_procT, po_procT -> bool

logic value__size : int

logic object__size : po_procT -> int

logic value__alignment : int

logic object__alignment : po_procT -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:po_procT. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:po_procT. (0 <= object__alignment(a)))

type po_procT__ref = { po_procT__content : po_procT
}

function po_procT__ref___projection(a: po_procT__ref) : po_procT =
  (a).po_procT__content

logic attr__ATTRIBUTE_ADDRESS : int

type po_funcT

logic user_eq2 : po_funcT, po_funcT -> bool

logic value__size1 : int

logic object__size1 : po_funcT -> int

logic value__alignment1 : int

logic object__alignment1 : po_funcT -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:po_funcT. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:po_funcT. (0 <= object__alignment1(a)))

type po_funcT__ref = { po_funcT__content : po_funcT
}

function po_funcT__ref___projection(a: po_funcT__ref) : po_funcT =
  (a).po_funcT__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type po_safeT

logic user_eq3 : po_safeT, po_safeT -> bool

logic value__size2 : int

logic object__size2 : po_safeT -> int

logic value__alignment2 : int

logic object__alignment2 : po_safeT -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:po_safeT. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:po_safeT. (0 <= object__alignment2(a)))

type po_safeT__ref = { po_safeT__content : po_safeT
}

function po_safeT__ref___projection(a: po_safeT__ref) : po_safeT =
  (a).po_safeT__content

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "pack.ads", line 16, characters 0-0 *)
goal WP_parameter_def : (48 <= 97)
