(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort privileget 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (privileget privileget) Bool)
(declare-const dummy privileget)
(declare-datatypes () ((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget (privileget__content a))
(declare-fun to_rep (privileget) Int)
(declare-fun of_rep (Int) privileget)
(assert (forall ((x privileget)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort opandnullt 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (opandnullt opandnullt) Bool)
(declare-const dummy1 opandnullt)
(declare-datatypes () ((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt (opandnullt__content a))
(declare-fun to_rep1 (opandnullt) Int)
(declare-fun of_rep1 (Int) opandnullt)
(assert (forall ((x opandnullt)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x opandnullt)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__admin__t__rolepresent privileget) (rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget (rec__admin__t__rolepresent a))
(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt (rec__admin__t__currentop a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__admin__t__rolepresent (us_split_fields1 a))) (to_rep (rec__admin__t__rolepresent (us_split_fields1 b)))) (= (to_rep1 (rec__admin__t__currentop (us_split_fields1 a))) (to_rep1 (rec__admin__t__currentop (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const admin__t__rolepresent__first__bit Int)
(declare-const admin__t__rolepresent__last__bit Int)
(declare-const admin__t__rolepresent__position Int)
(assert (<= 0 admin__t__rolepresent__first__bit))
(assert (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))
(assert (<= 0 admin__t__rolepresent__position))
(declare-const admin__t__currentop__first__bit Int)
(declare-const admin__t__currentop__last__bit Int)
(declare-const admin__t__currentop__position Int)
(assert (<= 0 admin__t__currentop__first__bit))
(assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))
(assert (<= 0 admin__t__currentop__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-fun rolepresent (us_rep) Int)
(declare-fun rolepresent__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_179 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 0 3)) (in_range1 temp___expr_179)))
(assert (forall ((theadmin us_rep)) (! (dynamic_invariant (rolepresent theadmin) true false true) :pattern ((rolepresent theadmin)))))
(declare-fun isdoingop (us_rep) Bool)
(declare-fun isdoingop__function_guard (Bool us_rep) Bool)
(assert true)
(declare-fun thecurrentop (us_rep) Int)
(declare-fun thecurrentop__function_guard (Int us_rep) Bool)
(declare-sort opt 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (opt opt) Bool)
(declare-const dummy3 opt)
(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))
(define-fun dynamic_invariant1 ((temp___expr_267 Int) (temp___is_init_264 Bool) (temp___skip_constant_265 Bool) (temp___do_toplevel_266 Bool)) Bool (=> (or (= temp___is_init_264 true) (<= 1 4)) (in_range3 temp___expr_267)))
(assert (forall ((theadmin us_rep)) (! (=> (= (isdoingop theadmin) true) (dynamic_invariant1 (thecurrentop theadmin) true false true)) :pattern ((thecurrentop theadmin)))))
(declare-fun ispresent (us_rep) Bool)
(declare-fun ispresent__function_guard (Bool us_rep) Bool)
(assert true)
(declare-sort yearst 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (yearst yearst) Bool)
(declare-const dummy4 yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(declare-fun to_rep2 (yearst) Int)
(declare-fun of_rep2 (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x yearst)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort monthst 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (monthst monthst) Bool)
(declare-const dummy5 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(declare-fun to_rep3 (monthst) Int)
(declare-fun of_rep3 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x monthst)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort dayst 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (dayst dayst) Bool)
(declare-const dummy6 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(declare-fun to_rep4 (dayst) Int)
(declare-fun of_rep4 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x dayst)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-sort millisecst 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (millisecst millisecst) Bool)
(declare-const dummy7 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(declare-fun to_rep5 (millisecst) Int)
(declare-fun of_rep5 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x millisecst)) (! (in_range7 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields2)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__projection ((a us_split_fields2)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__projection ((a us_split_fields2)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields2)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep2 (rec__clock__timet__year (us_split_fields3 a))) (to_rep2 (rec__clock__timet__year (us_split_fields3 b)))) (= (to_rep3 (rec__clock__timet__month (us_split_fields3 a))) (to_rep3 (rec__clock__timet__month (us_split_fields3 b))))) (= (to_rep4 (rec__clock__timet__day (us_split_fields3 a))) (to_rep4 (rec__clock__timet__day (us_split_fields3 b))))) (= (to_rep5 (rec__clock__timet__millisec (us_split_fields3 a))) (to_rep5 (rec__clock__timet__millisec (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep1)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep1 (timet__content a))
(declare-fun thecurrenttime (us_private) us_rep1)
(declare-fun thecurrenttime__function_guard (us_rep1 us_private) Bool)
(assert true)
(declare-fun greaterthanorequal (us_rep1 us_rep1) Bool)
(declare-fun greaterthanorequal__function_guard (Bool us_rep1 us_rep1) Bool)
(assert true)
(declare-fun systemfaultoccurred (us_private) Bool)
(declare-fun systemfaultoccurred__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun privatekeypresent (us_private) Bool)
(declare-fun privatekeypresent__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun theauthcertrole (us_private) Int)
(declare-fun theauthcertrole__function_guard (Int us_private) Bool)
(assert (forall ((admintoken__state us_private)) (! (dynamic_invariant (theauthcertrole admintoken__state) true false true) :pattern ((theauthcertrole admintoken__state)))))
(declare-fun isgood (us_private) Bool)
(declare-fun isgood__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun authcertvalid (us_private) Bool)
(declare-fun authcertvalid__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun interfac_islocked (tuple0) Bool)
(declare-fun interfac_islocked__function_guard (Bool tuple0) Bool)
(declare-fun islocked (us_private) Bool)
(declare-fun islocked__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun alarm_timeout (us_private) us_rep1)
(declare-fun alarm_timeout__function_guard (us_rep1 us_private) Bool)
(assert true)
(declare-fun thecurrentdoor (us_private) Int)
(declare-fun thecurrentdoor__function_guard (Int us_private) Bool)
(declare-sort t 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (t t) Bool)
(declare-const dummy9 t)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 t)))))
(define-fun t__ref___4__projection ((a t__ref1)) t (t__content1 a))
(define-fun dynamic_invariant2 ((temp___expr_1036 Int) (temp___is_init_1033 Bool) (temp___skip_constant_1034 Bool) (temp___do_toplevel_1035 Bool)) Bool (=> (or (= temp___is_init_1033 true) (<= 0 1)) (in_range8 temp___expr_1036)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant2 (thecurrentdoor door__state) true false true) :pattern ((thecurrentdoor door__state)))))
(declare-fun isalarming (tuple0) Bool)
(declare-fun isalarming__function_guard (Bool tuple0) Bool)
(declare-sort statscount 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq10 (statscount statscount) Bool)
(declare-const dummy10 statscount)
(declare-datatypes () ((statscount__ref (mk_statscount__ref (statscount__content statscount)))))
(define-fun statscount__ref___projection ((a statscount__ref)) statscount (statscount__content a))
(declare-fun to_rep6 (statscount) Int)
(declare-fun of_rep6 (Int) statscount)
(assert (forall ((x statscount)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x statscount)) (! (in_range9 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6 (of_rep6 x))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__stats__t__successentry statscount) (rec__stats__t__failentry statscount) (rec__stats__t__successbio statscount) (rec__stats__t__failbio statscount)))))
(define-fun us_split_fields_SuccessEntry__projection ((a us_split_fields4)) statscount (rec__stats__t__successentry a))
(define-fun us_split_fields_FailEntry__projection ((a us_split_fields4)) statscount (rec__stats__t__failentry a))
(define-fun us_split_fields_SuccessBio__projection ((a us_split_fields4)) statscount (rec__stats__t__successbio a))
(define-fun us_split_fields_FailBio__projection ((a us_split_fields4)) statscount (rec__stats__t__failbio a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___17__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___18__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (= (to_rep6 (rec__stats__t__successentry (us_split_fields5 a))) (to_rep6 (rec__stats__t__successentry (us_split_fields5 b)))) (= (to_rep6 (rec__stats__t__failentry (us_split_fields5 a))) (to_rep6 (rec__stats__t__failentry (us_split_fields5 b))))) (= (to_rep6 (rec__stats__t__successbio (us_split_fields5 a))) (to_rep6 (rec__stats__t__successbio (us_split_fields5 b))))) (= (to_rep6 (rec__stats__t__failbio (us_split_fields5 a))) (to_rep6 (rec__stats__t__failbio (us_split_fields5 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const stats__t__successentry__first__bit Int)
(declare-const stats__t__successentry__last__bit Int)
(declare-const stats__t__successentry__position Int)
(assert (<= 0 stats__t__successentry__first__bit))
(assert (< stats__t__successentry__first__bit stats__t__successentry__last__bit))
(assert (<= 0 stats__t__successentry__position))
(declare-const stats__t__failentry__first__bit Int)
(declare-const stats__t__failentry__last__bit Int)
(declare-const stats__t__failentry__position Int)
(assert (<= 0 stats__t__failentry__first__bit))
(assert (< stats__t__failentry__first__bit stats__t__failentry__last__bit))
(assert (<= 0 stats__t__failentry__position))
(declare-const stats__t__successbio__first__bit Int)
(declare-const stats__t__successbio__last__bit Int)
(declare-const stats__t__successbio__position Int)
(assert (<= 0 stats__t__successbio__first__bit))
(assert (< stats__t__successbio__first__bit stats__t__successbio__last__bit))
(assert (<= 0 stats__t__successbio__position))
(declare-const stats__t__failbio__first__bit Int)
(declare-const stats__t__failbio__last__bit Int)
(declare-const stats__t__failbio__position Int)
(assert (<= 0 stats__t__failbio__first__bit))
(assert (< stats__t__failbio__first__bit stats__t__failbio__last__bit))
(assert (<= 0 stats__t__failbio__position))
(declare-fun user_eq11 (us_rep2 us_rep2) Bool)
(declare-const dummy11 us_rep2)
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 us_rep2)))))
(define-fun t__ref___5__projection ((a t__ref2)) us_rep2 (t__content2 a))
(declare-fun statusisgotadmintoken (us_private) Bool)
(declare-fun statusisgotadmintoken__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusiswaitingremoveadmintokenfail (us_private) Bool)
(declare-fun statusiswaitingremoveadmintokenfail__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusiswaitingstartadminop (us_private) Bool)
(declare-fun statusiswaitingstartadminop__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusiswaitingfinishadminop (us_private) Bool)
(declare-fun statusiswaitingfinishadminop__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusisenclavequiescent (us_private) Bool)
(declare-fun statusisenclavequiescent__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun statusisshutdown (us_private) Bool)
(declare-fun statusisshutdown__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun enrolmentisinprogress (us_private) Bool)
(declare-fun enrolmentisinprogress__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun hasshutdown (us_private) Bool)
(declare-fun hasshutdown__function_guard (Bool us_private) Bool)
(assert true)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant3 ((temp___expr_261 Int) (temp___is_init_258 Bool) (temp___skip_constant_259 Bool) (temp___do_toplevel_260 Bool)) Bool (=> (or (= temp___is_init_258 true) (<= 0 4)) (in_range2 temp___expr_261)))
(define-fun dynamic_invariant4 ((temp___expr_366 Int) (temp___is_init_363 Bool) (temp___skip_constant_364 Bool) (temp___do_toplevel_365 Bool)) Bool (=> (or (= temp___is_init_363 true) (<= 1901 2099)) (in_range4 temp___expr_366)))
(define-fun dynamic_invariant5 ((temp___expr_372 Int) (temp___is_init_369 Bool) (temp___skip_constant_370 Bool) (temp___do_toplevel_371 Bool)) Bool (=> (or (= temp___is_init_369 true) (<= 1 12)) (in_range5 temp___expr_372)))
(define-fun dynamic_invariant6 ((temp___expr_378 Int) (temp___is_init_375 Bool) (temp___skip_constant_376 Bool) (temp___do_toplevel_377 Bool)) Bool (=> (or (= temp___is_init_375 true) (<= 1 31)) (in_range6 temp___expr_378)))
(define-fun dynamic_invariant7 ((temp___expr_402 Int) (temp___is_init_399 Bool) (temp___skip_constant_400 Bool) (temp___do_toplevel_401 Bool)) Bool (=> (or (= temp___is_init_399 true) (<= 0 86399999)) (in_range7 temp___expr_402)))
(define-fun dynamic_invariant8 ((temp___expr_1240 Int) (temp___is_init_1237 Bool) (temp___skip_constant_1238 Bool) (temp___do_toplevel_1239 Bool)) Bool (=> (or (= temp___is_init_1237 true) (<= 0 2147483647)) (in_range9 temp___expr_1240)))
(declare-const state us_private__ref)
(declare-const output us_private__ref)
(declare-const state1 us_private__ref)
(declare-const output1 us_private__ref)
(declare-const state2 us_private__ref)
(declare-const o Int)
(declare-const o1 Bool)
(declare-const o2 Bool)
(declare-const o3 Bool)
(declare-const o4 Bool)
(declare-const o5 Bool)
(declare-const o6 Int)
(declare-const o7 Bool)
(declare-const o8 Bool)
(declare-const o9 Bool)
(declare-const o10 Bool)
(declare-const o11 Bool)
(declare-const o12 Bool)
(declare-const o13 Bool)
(declare-const o14 Bool)
(declare-const o15 Bool)
(declare-const o16 Bool)
(declare-const o17 Bool)
(declare-const o18 Bool)
(declare-const o19 Bool)
(declare-const o20 Bool)
(declare-const o21 Bool)
(declare-const o22 Int)
(declare-const o23 Bool)
(declare-const o24 Bool)
(declare-const o25 Bool)
(declare-const o26 Bool)
(declare-const o27 Bool)
(declare-const o28 Bool)
(declare-const o29 Bool)
(declare-const o30 Bool)
(declare-const theadmin__split_fields us_split_fields)
(declare-const state3 us_private)
(declare-const state4 us_private)
(declare-const state5 us_private)
(declare-const theadmin__split_fields1 us_split_fields)
(declare-const state6 us_private)
(declare-const state7 us_private)
(declare-const state8 us_private)
(declare-const state9 us_private)
(declare-const systemfault Bool)
(declare-const theadmin__split_fields2 us_split_fields)
(declare-const currenttime us_private)
(declare-const state10 us_private)
(declare-const filestate us_private)
(declare-const state11 us_private)
(declare-const state12 us_private)
(declare-const state13 us_private)
(declare-const output2 us_private)
(declare-const state14 us_private)
(declare-const output3 us_private)
(declare-const state15 us_private)
(declare-const output4 us_private)
(declare-const state16 us_private)
(declare-const output5 us_private)
(declare-const state17 us_private)
(declare-const shutdowncompleted Bool)
(declare-const theadmin__split_fields3 us_split_fields)
(declare-const state18 us_private)
(declare-const filestate1 us_private)
(declare-const state19 us_private)
(declare-const output6 us_private)
(declare-const state20 us_private)
(declare-const output7 us_private)
(declare-const state21 us_private)
(declare-const output8 us_private)
(declare-const state22 us_private)
(declare-const output9 us_private)
(declare-const result Bool)
(declare-const theadmin__split_fields4 us_split_fields)
(declare-const state23 us_private)
(declare-const filestate2 us_private)
(declare-const state24 us_private)
(declare-const output10 us_private)
(declare-const state25 us_private)
(declare-const output11 us_private)
(declare-const state26 us_private)
(declare-const output12 us_private)
(declare-const state27 us_private)
(declare-const output13 us_private)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const result7 Bool)
(declare-const result8 Bool)
(assert (and (and (and (and (and (and (and (and (and (and (= (not (= (enrolmentisinprogress (let ((subject state2)) state5)) true)) (= (privatekeypresent state3) true)) (or (= (enrolmentisinprogress (let ((subject state2)) state5)) true) (= (statusisenclavequiescent (let ((subject state2)) state5)) true))) (not (= (ispresent (mk___rep theadmin__split_fields)) true))) (not (= (isdoingop (mk___rep theadmin__split_fields)) true))) (not (= (rolepresent (mk___rep theadmin__split_fields)) 1))) (not (= (statusiswaitingstartadminop (let ((subject state2)) state5)) true))) (not (= (statusiswaitingfinishadminop (let ((subject state2)) state5)) true))) (not (= (statusisshutdown (let ((subject state2)) state5)) true))) (not (= (isgood state4) true))) (not (= (authcertvalid state4) true))) (not (= (theauthcertrole state4) 1))))
(assert (and (and (and (and (and (and (and (and (and (and (and (= (not (= (enrolmentisinprogress (let ((subject state2)) state9)) true)) (= (privatekeypresent state6) true)) (= (= (islocked state8) true) (= (interfac_islocked Tuple0) true))) (=> (= (rolepresent (mk___rep theadmin__split_fields1)) 1) (and (and (= (isgood state7) true) (= (authcertvalid state7) true)) (= (theauthcertrole state7) 1)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields1)) true) (= (thecurrentop (mk___rep theadmin__split_fields1)) 3)) (= (rolepresent (mk___rep theadmin__split_fields1)) 1))) (=> (= (rolepresent (mk___rep theadmin__split_fields1)) 1) (or (and (= (isdoingop (mk___rep theadmin__split_fields1)) true) (= (thecurrentop (mk___rep theadmin__split_fields1)) 3)) (not (= (isdoingop (mk___rep theadmin__split_fields1)) true))))) (=> (not (= (ispresent (mk___rep theadmin__split_fields1)) true)) (not (= (isdoingop (mk___rep theadmin__split_fields1)) true)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields1)) true) (= (thecurrentop (mk___rep theadmin__split_fields1)) 4)) (= (statusiswaitingstartadminop (let ((subject state2)) state9)) true))) (=> (or (= (statusisgotadmintoken (let ((subject state2)) state9)) true) (= (statusiswaitingremoveadmintokenfail (let ((subject state2)) state9)) true)) (not (= (ispresent (mk___rep theadmin__split_fields1)) true)))) (=> (or (= (statusiswaitingstartadminop (let ((subject state2)) state9)) true) (= (statusiswaitingfinishadminop (let ((subject state2)) state9)) true)) (and (= (ispresent (mk___rep theadmin__split_fields1)) true) (= (isdoingop (mk___rep theadmin__split_fields1)) true)))) (=> (= (statusisenclavequiescent (let ((subject state2)) state9)) true) (not (= (isdoingop (mk___rep theadmin__split_fields1)) true)))) (=> (= (statusisshutdown (let ((subject state2)) state9)) true) (and (not (= (isdoingop (mk___rep theadmin__split_fields1)) true)) (= (rolepresent (mk___rep theadmin__split_fields1)) 0)))) (=> (= (enrolmentisinprogress (let ((subject state2)) state9)) true) (and (not (= (ispresent (mk___rep theadmin__split_fields1)) true)) (not (= (isdoingop (mk___rep theadmin__split_fields1)) true))))))
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (not (= shutdowncompleted true)) (= (not (= (enrolmentisinprogress (let ((subject state2)) state17)) true)) (= (privatekeypresent state11) true))) (=> (and (and (= (islocked state13) true) (= (thecurrentdoor state14) 0)) (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state14)) true)) (or (= (isalarming Tuple0) true) (= systemfault true)))) (or (= (= (islocked state13) true) (= (interfac_islocked Tuple0) true)) (= systemfault true))) (=> (= (rolepresent (mk___rep theadmin__split_fields2)) 1) (and (and (= (isgood state12) true) (= (authcertvalid state12) true)) (= (theauthcertrole state12) 1)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields2)) true) (= (thecurrentop (mk___rep theadmin__split_fields2)) 3)) (= (rolepresent (mk___rep theadmin__split_fields2)) 1))) (=> (= (rolepresent (mk___rep theadmin__split_fields2)) 1) (or (and (= (isdoingop (mk___rep theadmin__split_fields2)) true) (= (thecurrentop (mk___rep theadmin__split_fields2)) 3)) (not (= (isdoingop (mk___rep theadmin__split_fields2)) true))))) (=> (not (= (ispresent (mk___rep theadmin__split_fields2)) true)) (not (= (isdoingop (mk___rep theadmin__split_fields2)) true)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields2)) true) (= (thecurrentop (mk___rep theadmin__split_fields2)) 4)) (= (statusiswaitingstartadminop (let ((subject state2)) state17)) true))) (=> (or (= (statusisgotadmintoken (let ((subject state2)) state17)) true) (= (statusiswaitingremoveadmintokenfail (let ((subject state2)) state17)) true)) (not (= (ispresent (mk___rep theadmin__split_fields2)) true)))) (=> (or (= (statusiswaitingstartadminop (let ((subject state2)) state17)) true) (= (statusiswaitingfinishadminop (let ((subject state2)) state17)) true)) (and (= (isdoingop (mk___rep theadmin__split_fields2)) true) (= (ispresent (mk___rep theadmin__split_fields2)) true)))) (=> (= (statusisenclavequiescent (let ((subject state2)) state17)) true) (not (= (isdoingop (mk___rep theadmin__split_fields2)) true)))) (=> (= (statusisshutdown (let ((subject state2)) state17)) true) (and (not (= (isdoingop (mk___rep theadmin__split_fields2)) true)) (= (rolepresent (mk___rep theadmin__split_fields2)) 0)))) (=> (= (enrolmentisinprogress (let ((subject state2)) state17)) true) (and (not (= (ispresent (mk___rep theadmin__split_fields2)) true)) (not (= (isdoingop (mk___rep theadmin__split_fields2)) true))))))
(assert (not (= systemfault true)))
(assert (= (let ((subject output1)) (mk___private__ref output9)) (let ((subject output1)) (mk___private__ref output5))))
(assert (= (let ((subject state1)) (mk___private__ref state22)) (let ((subject state1)) (mk___private__ref state16))))
(assert (= (let ((subject output)) (mk___private__ref output8)) (let ((subject output)) (mk___private__ref output4))))
(assert (= (let ((subject state)) (mk___private__ref state21)) (let ((subject state)) (mk___private__ref state15))))
(assert (= output7 output3))
(assert (= state20 state14))
(assert (= output6 output2))
(assert (= state19 state13))
(assert (= filestate1 filestate))
(assert (= state18 state10))
(assert (= theadmin__split_fields3 theadmin__split_fields2))
(assert (= output9 output5))
(assert (= state22 state16))
(assert (= output8 output4))
(assert (= state21 state15))
(assert (= output7 output3))
(assert (= state20 state14))
(assert (= output6 output2))
(assert (= state19 state13))
(assert (= filestate1 filestate))
(assert (= state18 state10))
(assert (= theadmin__split_fields3 theadmin__split_fields2))
(assert (= result (systemfaultoccurred state18)))
(assert (not (= result true)))
(assert (= (let ((subject output1)) (mk___private__ref output13)) (let ((subject output1)) (mk___private__ref output9))))
(assert (= (let ((subject state1)) (mk___private__ref state27)) (let ((subject state1)) (mk___private__ref state22))))
(assert (= (let ((subject output)) (mk___private__ref output12)) (let ((subject output)) (mk___private__ref output8))))
(assert (= (let ((subject state)) (mk___private__ref state26)) (let ((subject state)) (mk___private__ref state21))))
(assert (= output11 output7))
(assert (= state25 state20))
(assert (= output10 output6))
(assert (= state24 state19))
(assert (= filestate2 filestate1))
(assert (= state23 state18))
(assert (= theadmin__split_fields4 theadmin__split_fields3))
(assert (= output13 output9))
(assert (= state27 state22))
(assert (= output12 output8))
(assert (= state26 state21))
(assert (= output11 output7))
(assert (= state25 state20))
(assert (= output10 output6))
(assert (= state24 state19))
(assert (= filestate2 filestate1))
(assert (= state23 state18))
(assert (= theadmin__split_fields4 theadmin__split_fields3))
(assert (= result1 (enrolmentisinprogress (let ((subject state2)) state17))))
(assert (=> (= result1 true) (= o27 (isdoingop (mk___rep theadmin__split_fields4)))))
(assert (=> (= result1 true) (= o28 (ite (not (= o27 true)) true false))))
(assert (=> (= result1 true) (= o26 (ispresent (mk___rep theadmin__split_fields4)))))
(assert (=> (= result1 true) (= o29 (ite (not (= o26 true)) true false))))
(assert (=> (= result1 true) (= o30 (ite (= o29 true) o28 false))))
(assert (=> (not (= result1 true)) (= o30 (of_int 1))))
(assert (= result2 (statusisshutdown (let ((subject state2)) state17))))
(assert (=> (= result2 true) (and (= o22 (rolepresent (mk___rep theadmin__split_fields4))) (in_range1 o22))))
(assert (=> (= result2 true) (= o23 (ite (= o22 0) true false))))
(assert (=> (= result2 true) (= o21 (isdoingop (mk___rep theadmin__split_fields4)))))
(assert (=> (= result2 true) (= o24 (ite (not (= o21 true)) true false))))
(assert (=> (= result2 true) (= o25 (ite (= o24 true) o23 false))))
(assert (=> (not (= result2 true)) (= o25 (of_int 1))))
(assert (= result3 (statusisenclavequiescent (let ((subject state2)) state17))))
(assert (=> (= result3 true) (= o19 (isdoingop (mk___rep theadmin__split_fields4)))))
(assert (=> (= result3 true) (= o20 (ite (not (= o19 true)) true false))))
(assert (=> (not (= result3 true)) (= o20 (of_int 1))))
(assert (= o14 (statusiswaitingfinishadminop (let ((subject state2)) state17))))
(assert (= o15 (statusiswaitingstartadminop (let ((subject state2)) state17))))
(assert (= result4 (ite (= o15 false) o14 true)))
(assert (=> (= result4 true) (= o16 (ispresent (mk___rep theadmin__split_fields4)))))
(assert (=> (= result4 true) (= o17 (isdoingop (mk___rep theadmin__split_fields4)))))
(assert (=> (= result4 true) (= o18 (ite (= o17 true) o16 false))))
(assert (=> (not (= result4 true)) (= o18 (of_int 1))))
(assert (= o10 (statusiswaitingremoveadmintokenfail (let ((subject state2)) state17))))
(assert (= o11 (statusisgotadmintoken (let ((subject state2)) state17))))
(assert (= result5 (ite (= o11 false) o10 true)))
(assert (=> (= result5 true) (= o12 (ispresent (mk___rep theadmin__split_fields4)))))
(assert (=> (= result5 true) (= o13 (ite (not (= o12 true)) true false))))
(assert (=> (not (= result5 true)) (= o13 (of_int 1))))
(assert (and (= o6 (thecurrentop (mk___rep theadmin__split_fields4))) (in_range3 o6)))
(assert (= o7 (ite (= o6 4) true false)))
(assert (= o8 (isdoingop (mk___rep theadmin__split_fields4))))
(assert (= result6 (ite (= o8 true) o7 false)))
(assert (=> (= result6 true) (= o9 (statusiswaitingstartadminop (let ((subject state2)) state17)))))
(assert (=> (not (= result6 true)) (= o9 (of_int 1))))
(assert (= o3 (ispresent (mk___rep theadmin__split_fields4))))
(assert (= result7 (ite (not (= o3 true)) true false)))
(assert (=> (= result7 true) (= o4 (isdoingop (mk___rep theadmin__split_fields4)))))
(assert (=> (= result7 true) (= o5 (ite (not (= o4 true)) true false))))
(assert (=> (not (= result7 true)) (= o5 (of_int 1))))
(assert (and (= o (rolepresent (mk___rep theadmin__split_fields4))) (in_range1 o)))
(assert (= result8 (ite (= o 1) true false)))
(assert (= result8 true))
(assert (= o1 (isdoingop (mk___rep theadmin__split_fields4))))
(assert (= o2 (ite (not (= o1 true)) true false)))
(assert (not (= (isdoingop (mk___rep theadmin__split_fields4)) true)))
(check-sat)
(exit)
