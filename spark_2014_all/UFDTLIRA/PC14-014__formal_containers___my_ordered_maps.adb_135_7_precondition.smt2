(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__my_ordered_maps__n__map__capacity count_type)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) count_type (rec__my_ordered_maps__n__map__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__my_ordered_maps__n__map us_main_type)))))
(define-fun us_split_fields_Map__2__projection ((a us_split_fields)) us_main_type (rec__my_ordered_maps__n__map a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___11__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___12__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 a))) (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__my_ordered_maps__n__map (us_split_fields1 a)) (rec__my_ordered_maps__n__map (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const my_ordered_maps__n__map__capacity__first__bit Int)
(declare-const my_ordered_maps__n__map__capacity__last__bit Int)
(declare-const my_ordered_maps__n__map__capacity__position Int)
(assert (<= 0 my_ordered_maps__n__map__capacity__first__bit))
(assert (< my_ordered_maps__n__map__capacity__first__bit my_ordered_maps__n__map__capacity__last__bit))
(assert (<= 0 my_ordered_maps__n__map__capacity__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___4__projection ((a map__ref)) us_rep (map__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range2 temp___expr_166)))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)))))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 container)))) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__my_ordered_maps__my_rec__f integer) (rec__my_ordered_maps__my_rec__g integer)))))
(define-fun us_split_fields_F__projection ((a us_split_fields2)) integer (rec__my_ordered_maps__my_rec__f a))
(define-fun us_split_fields_G__projection ((a us_split_fields2)) integer (rec__my_ordered_maps__my_rec__g a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___10__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep1 (rec__my_ordered_maps__my_rec__f (us_split_fields3 a))) (to_rep1 (rec__my_ordered_maps__my_rec__f (us_split_fields3 b)))) (= (to_rep1 (rec__my_ordered_maps__my_rec__g (us_split_fields3 a))) (to_rep1 (rec__my_ordered_maps__my_rec__g (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const my_ordered_maps__my_rec__f__first__bit Int)
(declare-const my_ordered_maps__my_rec__f__last__bit Int)
(declare-const my_ordered_maps__my_rec__f__position Int)
(assert (<= 0 my_ordered_maps__my_rec__f__first__bit))
(assert (< my_ordered_maps__my_rec__f__first__bit my_ordered_maps__my_rec__f__last__bit))
(assert (<= 0 my_ordered_maps__my_rec__f__position))
(declare-const my_ordered_maps__my_rec__g__first__bit Int)
(declare-const my_ordered_maps__my_rec__g__last__bit Int)
(declare-const my_ordered_maps__my_rec__g__position Int)
(assert (<= 0 my_ordered_maps__my_rec__g__first__bit))
(assert (< my_ordered_maps__my_rec__g__first__bit my_ordered_maps__my_rec__g__last__bit))
(assert (<= 0 my_ordered_maps__my_rec__g__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep1)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep1 (my_rec__content a))
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content us_rep1)))))
(define-fun element_type__ref___7__projection ((a element_type__ref)) us_rep1 (element_type__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq4 (us_rep2 us_rep2) Bool)
(declare-const dummy4 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___2__projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun get (us_rep2 Int) us_rep1)
(declare-fun get__function_guard (us_rep1 us_rep2 Int) Bool)
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(define-fun last ((container us_rep2)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(define-fun iter_has_element ((container us_rep2) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep2 Int) Bool)
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__my_ordered_maps__n__cursor__node count_type)))))
(define-fun us_split_fields_Node__2__projection ((a us_split_fields4)) count_type (rec__my_ordered_maps__n__cursor__node a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___13__projection ((a us_rep3)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq3 ((a us_rep3) (b us_rep3)) Bool (ite (= (to_rep (rec__my_ordered_maps__n__cursor__node (us_split_fields5 a))) (to_rep (rec__my_ordered_maps__n__cursor__node (us_split_fields5 b)))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const my_ordered_maps__n__cursor__node__first__bit Int)
(declare-const my_ordered_maps__n__cursor__node__last__bit Int)
(declare-const my_ordered_maps__n__cursor__node__position Int)
(assert (<= 0 my_ordered_maps__n__cursor__node__first__bit))
(assert (< my_ordered_maps__n__cursor__node__first__bit my_ordered_maps__n__cursor__node__last__bit))
(assert (<= 0 my_ordered_maps__n__cursor__node__position))
(declare-fun user_eq5 (us_rep3 us_rep3) Bool)
(declare-const dummy5 us_rep3)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep3)))))
(define-fun cursor__ref___2__projection ((a cursor__ref)) us_rep3 (cursor__content a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep3)))))
(define-fun key_type__ref___6__projection ((a key_type__ref)) us_rep3 (key_type__content a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep4 0)
(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-fun user_eq6 (us_rep4 us_rep4) Bool)
(declare-const dummy6 us_rep4)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep4)))))
(define-fun map__ref___6__projection ((a map__ref1)) us_rep4 (map__content1 a))
(declare-fun has_key (us_rep4 us_rep3) Bool)
(declare-fun has_key__function_guard (Bool us_rep4 us_rep3) Bool)
(declare-fun get1 (us_rep4 us_rep3) Int)
(declare-fun get__function_guard1 (Int us_rep4 us_rep3) Bool)
(declare-fun keys (us_rep) us_rep2)
(declare-fun keys__function_guard (us_rep2 us_rep) Bool)
(declare-fun positions (us_rep) us_rep4)
(declare-fun positions__function_guard (us_rep4 us_rep) Bool)
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq7 (extended_index extended_index) Bool)
(declare-const dummy7 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (= (length container) 0)) :pattern ((is_empty container)))))
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-sort us_rep5 0)
(declare-fun bool_eq5 (us_rep5 us_rep5) Bool)
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep5) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep5) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))
(declare-fun user_eq8 (us_rep5 us_rep5) Bool)
(declare-const dummy8 us_rep5)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep5)))))
(define-fun map__ref___5__projection ((a map__ref2)) us_rep5 (map__content2 a))
(declare-fun oeq1 (us_rep5 us_rep5) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep5 us_rep5) Bool)
(define-fun oeq2 ((left us_rep2) (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (bool_eq1 (get left n) (get right n)) true))) true false)))
(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)
(declare-fun model__ (us_rep) us_rep5)
(declare-fun model____function_guard (us_rep5 us_rep) Bool)
(declare-datatypes () ((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep1)))))
(define-fun key_type__ref___4__projection ((a key_type__ref1)) us_rep1 (key_type__content1 a))
(declare-datatypes () ((key_type__ref2 (mk_key_type__ref2 (key_type__content2 us_rep1)))))
(define-fun key_type__ref___5__projection ((a key_type__ref2)) us_rep1 (key_type__content2 a))
(declare-fun get2 (us_rep5 us_rep1) Int)
(declare-fun get__function_guard2 (Int us_rep5 us_rep1) Bool)
(define-fun key ((container us_rep) (position us_rep3)) us_rep1 (get (keys container) (get1 (positions container) position)))
(declare-fun key__function_guard (us_rep1 us_rep us_rep3) Bool)
(define-fun element ((container us_rep) (position us_rep3)) Int (get2 (model__ container) (key container position)))
(declare-fun element__function_guard (Int us_rep us_rep3) Bool)
(define-fun has_element ((container us_rep) (position us_rep3)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep3) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= (- 2147483648) (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq9 (element_type element_type) Bool)
(declare-const dummy9 element_type)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type)))))
(define-fun element_type__ref___5__projection ((a element_type__ref1)) element_type (element_type__content1 a))
(define-fun dynamic_invariant1 ((temp___expr_546 Int) (temp___is_init_542 Bool) (temp___skip_constant_543 Bool) (temp___do_toplevel_544 Bool) (temp___do_typ_inv_545 Bool)) Bool (=> (or (= temp___is_init_542 true) (<= (- 2147483648) 2147483647)) (in_range4 temp___expr_546)))
(declare-fun keys_included (us_rep5 us_rep5) Bool)
(declare-fun keys_included__function_guard (Bool us_rep5 us_rep5) Bool)
(define-fun same_keys ((left us_rep5) (right us_rep5)) Bool (and (keys_included left right) (keys_included right left)))
(declare-fun same_keys__function_guard (Bool us_rep5 us_rep5) Bool)
(declare-fun elements_equal_except (us_rep5 us_rep5 us_rep1) Bool)
(declare-fun elements_equal_except__function_guard (Bool us_rep5 us_rep5 us_rep1) Bool)
(declare-fun oeq3 (us_rep4 us_rep4) Bool)
(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)
(declare-fun has_key1 (us_rep5 us_rep1) Bool)
(declare-fun has_key__function_guard1 (Bool us_rep5 us_rep1) Bool)
(define-fun contains ((container us_rep) (key1 us_rep1)) Bool (has_key1 (model__ container) key1))
(declare-fun contains__function_guard (Bool us_rep us_rep1) Bool)
(define-fun my_lt ((x us_rep1) (y us_rep1)) Bool (< (to_rep1 (rec__my_ordered_maps__my_rec__f (us_split_fields3 x))) (to_rep1 (rec__my_ordered_maps__my_rec__f (us_split_fields3 y)))))
(declare-fun my_lt__function_guard (Bool us_rep1 us_rep1) Bool)
(define-fun equivalent_keys ((left us_rep1) (right us_rep1)) Bool (and (not (my_lt left right)) (not (my_lt right left))))
(declare-fun equivalent_keys__function_guard (Bool us_rep1 us_rep1) Bool)
(declare-fun ole (us_rep5 us_rep5) Bool)
(declare-fun ole__function_guard (Bool us_rep5 us_rep5) Bool)
(declare-fun keys_included_except (us_rep5 us_rep5 us_rep1) Bool)
(declare-fun keys_included_except__function_guard (Bool us_rep5 us_rep5 us_rep1) Bool)
(define-fun range_equal ((left us_rep2) (right us_rep2) (fst Int) (lst Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (bool_eq1 (get left i) (get right i)) true))) true false))
(declare-fun range_equal__function_guard (Bool us_rep2 us_rep2 Int Int) Bool)
(define-fun range_shifted ((left us_rep2) (right us_rep2) (fst Int) (lst Int) (offset Int)) Bool (and (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (bool_eq1 (get left i) (get right (+ i offset))) true))) true false) (ite (forall ((i Int)) (=> (and (<= (+ fst offset) i) (<= i (+ lst offset))) (= (bool_eq1 (get left (- i offset)) (get right i)) true))) true false)))
(declare-fun range_shifted__function_guard (Bool us_rep2 us_rep2 Int Int Int) Bool)
(define-fun k_bigger_than_range ((container us_rep2) (fst Int) (lst Int) (key1 us_rep1)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (my_lt (get container i) key1) true))) true false))
(declare-fun k_bigger_than_range__function_guard (Bool us_rep2 Int Int us_rep1) Bool)
(define-fun k_smaller_than_range ((container us_rep2) (fst Int) (lst Int) (key1 us_rep1)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (my_lt key1 (get container i)) true))) true false))
(declare-fun k_smaller_than_range__function_guard (Bool us_rep2 Int Int us_rep1) Bool)
(define-fun k_is_find ((container us_rep2) (key1 us_rep1) (position Int)) Bool (and (ite (< 0 position) (k_bigger_than_range container 1 (- position 1) key1) (distinct 1 0)) (ite (< position (length1 container)) (k_smaller_than_range container (+ position 1) (length1 container) key1) (distinct 1 0))))
(declare-fun k_is_find__function_guard (Bool us_rep2 us_rep1 Int) Bool)
(declare-fun p_positions_shifted (us_rep4 us_rep4 Int Int) Bool)
(declare-fun p_positions_shifted__function_guard (Bool us_rep4 us_rep4 Int Int) Bool)
(declare-fun find (us_rep2 us_rep1) Int)
(declare-fun find__function_guard (Int us_rep2 us_rep1) Bool)
(define-fun element__2 ((container us_rep) (key1 us_rep1)) Int (get2 (model__ container) key1))
(declare-fun element__2__function_guard (Int us_rep us_rep1) Bool)
(define-fun equal_except ((left us_rep2) (right us_rep2) (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (not (= i position)) (= (bool_eq1 (get left i) (get right i)) true)))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(declare-const no_element us_rep3)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun first (us_rep) us_rep3)
(declare-fun first__function_guard (us_rep3 us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (first container))) (ite (= (length container) 0) (= (bool_eq3 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) 1)))) :pattern ((first container)))))
(declare-fun next (us_rep us_rep3) us_rep3)
(declare-fun next__function_guard (us_rep3 us_rep us_rep3) Bool)
(assert (forall ((container us_rep)) (forall ((position us_rep3)) (! (=> (or (= (has_element container position) true) (= (bool_eq3 position no_element) true)) (let ((result (next container position))) (ite (or (= (bool_eq3 position no_element) true) (= (get1 (positions container) position) (length container))) (= (bool_eq3 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (+ (get1 (positions container) position) 1)))))) :pattern ((next container position))))))
(declare-fun find1 (us_rep us_rep1) us_rep3)
(declare-fun find__function_guard1 (us_rep3 us_rep us_rep1) Bool)
(assert (forall ((container us_rep)) (forall ((key1 us_rep1)) (! (let ((result (find1 container key1))) (ite (not (= (has_key1 (model__ container) key1) true)) (and (not (= (has_key (positions container) result) true)) (= (bool_eq3 result no_element) true)) (and (and (= (has_key (positions container) result) true) (= (get1 (positions container) result) (find (keys container) key1))) (= (equivalent_keys (key container result) key1) true)))) :pattern ((find1 container key1))))))
(define-fun in_range5 ((rec__my_ordered_maps__n__map__capacity1 Int) (a us_rep)) Bool (= rec__my_ordered_maps__n__map__capacity1 (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))
(declare-const my_ordered_maps__n__map__capacity__first__bit1 Int)
(declare-const my_ordered_maps__n__map__capacity__last__bit1 Int)
(declare-const my_ordered_maps__n__map__capacity__position1 Int)
(assert (<= 0 my_ordered_maps__n__map__capacity__first__bit1))
(assert (< my_ordered_maps__n__map__capacity__first__bit1 my_ordered_maps__n__map__capacity__last__bit1))
(assert (<= 0 my_ordered_maps__n__map__capacity__position1))
(declare-fun user_eq10 (us_rep us_rep) Bool)
(declare-const dummy10 us_rep)
(declare-datatypes () ((tlS__ref (mk_tlS__ref (tlS__content us_rep)))))
(define-fun tlS__ref___3__projection ((a tlS__ref)) us_rep (tlS__content a))
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq10 a b) (oeq a b)) :pattern ((user_eq10 a b)))))
(define-fun dynamic_invariant2 ((temp___expr_795 us_rep) (temp___is_init_791 Bool) (temp___skip_constant_792 Bool) (temp___do_toplevel_793 Bool) (temp___do_typ_inv_794 Bool)) Bool (=> (not (= temp___skip_constant_792 true)) (in_range5 10 temp___expr_795)))
(define-fun default_initial_assumption ((temp___expr_797 us_rep) (temp___skip_top_level_798 Bool)) Bool (and (= (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 temp___expr_797))) 10) (=> (not (= temp___skip_top_level_798 true)) (= (is_empty temp___expr_797) true))))
(declare-const l__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range6 ((rec__my_ordered_maps__n__map__capacity1 Int) (a us_rep)) Bool (= rec__my_ordered_maps__n__map__capacity1 (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 a)))))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep)) (<= 0 (object__alignment7 a))))
(declare-const my_ordered_maps__n__map__capacity__first__bit2 Int)
(declare-const my_ordered_maps__n__map__capacity__last__bit2 Int)
(declare-const my_ordered_maps__n__map__capacity__position2 Int)
(assert (<= 0 my_ordered_maps__n__map__capacity__first__bit2))
(assert (< my_ordered_maps__n__map__capacity__first__bit2 my_ordered_maps__n__map__capacity__last__bit2))
(assert (<= 0 my_ordered_maps__n__map__capacity__position2))
(declare-fun user_eq11 (us_rep us_rep) Bool)
(declare-const dummy11 us_rep)
(declare-datatypes () ((tkS__ref (mk_tkS__ref (tkS__content us_rep)))))
(define-fun tkS__ref___3__projection ((a tkS__ref)) us_rep (tkS__content a))
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq11 a b) (oeq a b)) :pattern ((user_eq11 a b)))))
(define-fun dynamic_invariant3 ((temp___expr_805 us_rep) (temp___is_init_801 Bool) (temp___skip_constant_802 Bool) (temp___do_toplevel_803 Bool) (temp___do_typ_inv_804 Bool)) Bool (=> (not (= temp___skip_constant_802 true)) (in_range6 10 temp___expr_805)))
(define-fun default_initial_assumption1 ((temp___expr_807 us_rep) (temp___skip_top_level_808 Bool)) Bool (and (= (to_rep (rec__my_ordered_maps__n__map__capacity (us_split_discrs1 temp___expr_807))) 10) (=> (not (= temp___skip_top_level_808 true)) (= (is_empty temp___expr_807) true))))
(declare-const k__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const rliteral count_type)
(assert (= (count_typeqtint rliteral) 0))
(assert (= no_element (mk___rep2 (mk___split_fields2 rliteral))))
(declare-sort positive_count_type 0)
(declare-fun positive_count_typeqtint (positive_count_type) Int)
(assert (forall ((i positive_count_type)) (and (<= 1 (positive_count_typeqtint i)) (<= (positive_count_typeqtint i) 2147483647))))
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq12 (positive_count_type positive_count_type) Bool)
(declare-const dummy12 positive_count_type)
(declare-datatypes () ((positive_count_type__ref (mk_positive_count_type__ref (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___2__projection ((a positive_count_type__ref)) positive_count_type (positive_count_type__content a))
(define-fun dynamic_invariant5 ((temp___expr_569 Int) (temp___is_init_565 Bool) (temp___skip_constant_566 Bool) (temp___do_toplevel_567 Bool) (temp___do_typ_inv_568 Bool)) Bool (=> (or (= temp___is_init_565 true) (<= 1 2147483647)) (in_range7 temp___expr_569)))
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq4 a b) (oeq2 a b)) :pattern ((user_eq4 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_631 us_rep2) (temp___skip_top_level_632 Bool)) Bool (=> (not (= temp___skip_top_level_632 true)) (= (length1 temp___expr_631) 0)))
(assert (forall ((container us_rep2)) (forall ((key1 us_rep1)) (! (let ((result (find container key1))) (and (=> (< 0 result) (and (<= result (length1 container)) (= (equivalent_keys key1 (get container result)) true))) (dynamic_invariant result true false true true))) :pattern ((find container key1))))))
(declare-fun keys_included1 (us_rep4 us_rep4) Bool)
(declare-fun keys_included__function_guard1 (Bool us_rep4 us_rep4) Bool)
(declare-fun length2 (us_rep4) Int)
(declare-fun length__function_guard2 (Int us_rep4) Bool)
(declare-fun is_empty1 (us_rep4) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)
(define-fun default_initial_assumption3 ((temp___expr_654 us_rep4) (temp___skip_top_level_655 Bool)) Bool (=> (not (= temp___skip_top_level_655 true)) (and (= (is_empty1 temp___expr_654) true) (= (length2 temp___expr_654) 0))))
(assert (forall ((small us_rep4) (big us_rep4)) (forall ((cut Int) (count Int)) (! (=> (and (dynamic_invariant5 cut true true true true) (dynamic_invariant count true true true true)) (= (= (p_positions_shifted small big cut count) true) (and (and (= (keys_included1 small big) true) (forall ((i us_rep3)) (=> (= (has_key small i) true) (ite (< (get1 small i) cut) (= (get1 big i) (get1 small i)) (= (- (get1 big i) count) (get1 small i)))))) (forall ((i us_rep3)) (=> (= (has_key big i) true) (or (= (has_key small i) true) (and (<= (- cut count) (- (get1 big i) count)) (<= (- (get1 big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted small big cut count))))))
(declare-fun length3 (us_rep5) Int)
(declare-fun length__function_guard3 (Int us_rep5) Bool)
(declare-fun is_empty2 (us_rep5) Bool)
(declare-fun is_empty__function_guard2 (Bool us_rep5) Bool)
(define-fun default_initial_assumption4 ((temp___expr_593 us_rep5) (temp___skip_top_level_594 Bool)) Bool (=> (not (= temp___skip_top_level_594 true)) (and (= (is_empty2 temp___expr_593) true) (= (length3 temp___expr_593) 0))))
(assert true)
(assert (forall ((container us_rep)) (! (let ((result (keys container))) (and (and (and (= (length1 result) (length container)) (forall ((temp___669 Int)) (=> (and (in_range3 temp___669) (= (iter_has_element result temp___669) true)) (= (has_key1 (model__ container) (get result temp___669)) true)))) (forall ((key1 us_rep1)) (=> (= (has_key1 (model__ container) key1) true) (and (< 0 (find result key1)) (= (equivalent_keys (get result (find result key1)) key1) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container))) (and (= (find result (get result i)) i) (= (k_is_find result (get result i) i) true)))))) :pattern ((keys container)))))
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep3)) (=> (= (has_key result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length container))) (forall ((j us_rep3)) (=> (= (has_key result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq3 i j) true))))))))) :pattern ((positions container)))))
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (oeq left right) true) (= (oeq1 (model__ left) (model__ right)) true)) :pattern ((oeq left right)))))
(assert (forall ((container us_rep5)) (forall ((key1 us_rep1)) (! (=> (= (distinct 1 0) true) (=> (exists ((k us_rep1)) (and (= (has_key1 container k) true) (= (equivalent_keys k key1) true))) (= (has_key1 container key1) true))) :pattern ((has_key1 container key1))))))
(declare-fun witness (us_rep5 us_rep1) Int)
(declare-fun witness__function_guard (Int us_rep5 us_rep1) Bool)
(declare-fun w_get (us_rep5 Int) Int)
(declare-fun w_get__function_guard (Int us_rep5 Int) Bool)
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= (- 2147483648) (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))
(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq13 (element_type1 element_type1) Bool)
(declare-const dummy13 element_type1)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type1)))))
(define-fun element_type__ref___6__projection ((a element_type__ref2)) element_type1 (element_type__content2 a))
(define-fun dynamic_invariant6 ((temp___expr_585 Int) (temp___is_init_581 Bool) (temp___skip_constant_582 Bool) (temp___do_toplevel_583 Bool) (temp___do_typ_inv_584 Bool)) Bool (=> (or (= temp___is_init_581 true) (<= (- 2147483648) 2147483647)) (in_range8 temp___expr_585)))
(assert (forall ((container us_rep5)) (forall ((key1 us_rep1)) (! (=> (= (has_key1 container key1) true) (let ((result (get2 container key1))) (and (=> (= (distinct 1 0) true) (and (= result (w_get container (witness container key1))) (forall ((k us_rep1)) (=> (= (has_key1 container k) true) (= (= (equivalent_keys k key1) true) (= (witness container key1) (witness container k))))))) (dynamic_invariant6 result true false true true)))) :pattern ((get2 container key1))))))
(assert (forall ((container us_rep5)) (! (dynamic_invariant (length3 container) true false true true) :pattern ((length3 container)))))
(assert (forall ((left us_rep5) (right us_rep5)) (! (= (= (ole left right) true) (forall ((key1 us_rep1)) (=> (= (has_key1 left key1) true) (and (= (has_key1 right key1) true) (= (get2 right key1) (get2 left key1)))))) :pattern ((ole left right)))))
(assert (forall ((left us_rep5) (right us_rep5)) (! (= (= (oeq1 left right) true) (and (forall ((key1 us_rep1)) (=> (= (has_key1 left key1) true) (and (= (has_key1 right key1) true) (= (get2 right key1) (get2 left key1))))) (forall ((key1 us_rep1)) (=> (= (has_key1 right key1) true) (= (has_key1 left key1) true))))) :pattern ((oeq1 left right)))))
(assert (forall ((container us_rep5)) (! (= (= (is_empty2 container) true) (forall ((key1 us_rep1)) (not (= (has_key1 container key1) true)))) :pattern ((is_empty2 container)))))
(assert (forall ((left us_rep5) (right us_rep5)) (! (= (= (keys_included left right) true) (forall ((key1 us_rep1)) (=> (= (has_key1 left key1) true) (= (has_key1 right key1) true)))) :pattern ((keys_included left right)))))
(assert (forall ((left us_rep5) (right us_rep5)) (forall ((new_key us_rep1)) (! (= (= (keys_included_except left right new_key) true) (forall ((key1 us_rep1)) (=> (= (has_key1 left key1) true) (=> (not (= (equivalent_keys key1 new_key) true)) (= (has_key1 right key1) true))))) :pattern ((keys_included_except left right new_key))))))
(assert (forall ((left us_rep5) (right us_rep5)) (forall ((new_key us_rep1)) (! (= (= (elements_equal_except left right new_key) true) (forall ((key1 us_rep1)) (=> (= (has_key1 left key1) true) (=> (not (= (equivalent_keys key1 new_key) true)) (and (= (has_key1 right key1) true) (= (get2 left key1) (get2 right key1))))))) :pattern ((elements_equal_except left right new_key))))))
(declare-fun has_witness (us_rep5 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep5 Int) Bool)
(assert true)
(assert (forall ((container us_rep5)) (forall ((key1 us_rep1)) (! (=> (= (has_key1 container key1) true) (let ((result (witness container key1))) (and (= (has_witness container result) true) (dynamic_invariant result true false true true)))) :pattern ((witness container key1))))))
(assert (forall ((container us_rep5)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant witness1 true true true true) (= (has_witness container witness1) true)) (dynamic_invariant6 (w_get container witness1) true false true true)) :pattern ((w_get container witness1))))))
(define-fun dynamic_invariant7 ((temp___expr_623 Int) (temp___is_init_619 Bool) (temp___skip_constant_620 Bool) (temp___do_toplevel_621 Bool) (temp___do_typ_inv_622 Bool)) Bool (=> (or (= temp___is_init_619 true) (<= 0 2147483647)) (in_range3 temp___expr_623)))
(assert (forall ((container us_rep2)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true true))) :pattern ((length1 container)))))
(assert true)
(assert (forall ((container us_rep4)) (forall ((key1 us_rep3)) (! (=> (= (distinct 0 0) true) (=> (exists ((k us_rep3)) (and (= (has_key container k) true) (= (bool_eq3 k key1) true))) (= (has_key container key1) true))) :pattern ((has_key container key1))))))
(declare-fun witness1 (us_rep4 us_rep3) Int)
(declare-fun witness__function_guard1 (Int us_rep4 us_rep3) Bool)
(declare-fun w_get1 (us_rep4 Int) Int)
(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)
(declare-sort element_type2 0)
(declare-fun element_typeqtint2 (element_type2) Int)
(assert (forall ((i element_type2)) (and (<= 1 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 2147483647))))
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq14 (element_type2 element_type2) Bool)
(declare-const dummy14 element_type2)
(declare-datatypes () ((element_type__ref3 (mk_element_type__ref3 (element_type__content3 element_type2)))))
(define-fun element_type__ref___8__projection ((a element_type__ref3)) element_type2 (element_type__content3 a))
(define-fun dynamic_invariant8 ((temp___expr_646 Int) (temp___is_init_642 Bool) (temp___skip_constant_643 Bool) (temp___do_toplevel_644 Bool) (temp___do_typ_inv_645 Bool)) Bool (=> (or (= temp___is_init_642 true) (<= 1 2147483647)) (in_range9 temp___expr_646)))
(assert (forall ((container us_rep4)) (forall ((key1 us_rep3)) (! (=> (= (has_key container key1) true) (let ((result (get1 container key1))) (and (=> (= (distinct 0 0) true) (and (= result (w_get1 container (witness1 container key1))) (forall ((k us_rep3)) (=> (= (has_key container k) true) (= (= (bool_eq3 k key1) true) (= (witness1 container key1) (witness1 container k))))))) (dynamic_invariant8 result true false true true)))) :pattern ((get1 container key1))))))
(assert (forall ((container us_rep4)) (! (dynamic_invariant (length2 container) true false true true) :pattern ((length2 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (oeq3 left right) true) (and (forall ((key1 us_rep3)) (=> (= (has_key left key1) true) (and (= (has_key right key1) true) (= (get1 right key1) (get1 left key1))))) (forall ((key1 us_rep3)) (=> (= (has_key right key1) true) (= (has_key left key1) true))))) :pattern ((oeq3 left right)))))
(assert (forall ((container us_rep4)) (! (= (= (is_empty1 container) true) (forall ((key1 us_rep3)) (not (= (has_key container key1) true)))) :pattern ((is_empty1 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (keys_included1 left right) true) (forall ((key1 us_rep3)) (=> (= (has_key left key1) true) (= (has_key right key1) true)))) :pattern ((keys_included1 left right)))))
(declare-fun has_witness1 (us_rep4 Int) Bool)
(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)
(assert true)
(assert (forall ((container us_rep4)) (forall ((key1 us_rep3)) (! (=> (= (has_key container key1) true) (let ((result (witness1 container key1))) (and (= (has_witness1 container result) true) (dynamic_invariant result true false true true)))) :pattern ((witness1 container key1))))))
(assert (forall ((container us_rep4)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant witness2 true true true true) (= (has_witness1 container witness2) true)) (dynamic_invariant8 (w_get1 container witness2) true false true true)) :pattern ((w_get1 container witness2))))))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(declare-const rliteral2 integer)
(assert (= (integerqtint rliteral2) 2))
(declare-const rliteral3 integer)
(assert (= (integerqtint rliteral3) 4))
(declare-const rliteral4 integer)
(assert (= (integerqtint rliteral4) 3))
(declare-const rliteral5 integer)
(assert (= (integerqtint rliteral5) 5))
(declare-const l__split_fields us_main_type)
(declare-const k__split_fields us_main_type)
(declare-const c__split_fields count_type)
(declare-const us Int)
(declare-const us1 Int)
(declare-const temp___1041 count_type)
(declare-const temp___1042 count_type)
(declare-const temp___1054 count_type)
(declare-const result count_type)
(declare-const c__split_fields1 count_type)
(declare-const result1 count_type)
(declare-const c__split_fields2 count_type)
(declare-const my_ordered_maps__n__insert__2__container__fields us_split_fields)
(declare-const result2 us_split_fields__ref)
(declare-const l__split_fields1 us_split_fields)
(declare-const my_ordered_maps__n__insert__2__container__fields1 us_split_fields)
(declare-const result3 us_split_fields__ref)
(declare-const l__split_fields2 us_split_fields)
(declare-const c__split_fields3 us_split_fields4)
(declare-const b Bool)
(declare-const my_ordered_maps__n__insert__container__fields us_split_fields)
(declare-const result4 us_split_fields__ref)
(declare-const l__split_fields3 us_split_fields)
(declare-const my_ordered_maps__n__replace_element__container__fields us_split_fields)
(declare-const result5 us_split_fields__ref)
(declare-const l__split_fields4 us_split_fields)
(declare-const my_ordered_maps__n__replace__container__fields us_split_fields)
(declare-const result6 us_split_fields__ref)
(declare-const l__split_fields5 us_split_fields)
(declare-const my_ordered_maps__n__assign__target__fields us_split_fields)
(declare-const result7 us_split_fields__ref)
(declare-const k__split_fields1 us_split_fields)
(declare-const my_ordered_maps__n__move__source__fields us_split_fields)
(declare-const my_ordered_maps__n__move__target__fields us_split_fields)
(declare-const result8 us_split_fields__ref)
(declare-const l__split_fields6 us_split_fields)
(declare-const result9 us_split_fields__ref)
(declare-const k__split_fields2 us_split_fields)
(declare-const my_ordered_maps__n__include__container__fields us_split_fields)
(declare-const result10 us_split_fields__ref)
(declare-const l__split_fields7 us_split_fields)
(declare-const my_ordered_maps__n__include__container__fields1 us_split_fields)
(declare-const result11 us_split_fields__ref)
(declare-const l__split_fields8 us_split_fields)
(declare-const my_ordered_maps__n__delete__container__fields us_split_fields)
(declare-const result12 us_split_fields__ref)
(declare-const l__split_fields9 us_split_fields)
(declare-const result13 us_split_fields__ref2)
(declare-const c__split_fields4 us_split_fields4)
(define-fun c__split_fields5 () us_split_fields4 (mk___split_fields2 c__split_fields1))
(define-fun temp___10541 () us_rep3 (mk___rep2 (mk___split_fields2 temp___1054)))
(define-fun temp___10421 () us_rep3 (mk___rep2 (mk___split_fields2 temp___1042)))
(define-fun temp___10411 () us_rep3 (mk___rep2 (mk___split_fields2 temp___1041)))
(assert (= (mk___rep2 (mk___split_fields2 rliteral)) no_element))
(assert (and (= us 10) (in_range2 10)))
(assert (default_initial_assumption (mk___rep l__split_discrs (mk___split_fields l__split_fields)) false))
(assert (= 10 (to_rep (rec__my_ordered_maps__n__map__capacity l__split_discrs))))
(assert (and (= us1 10) (in_range2 10)))
(assert (default_initial_assumption1 (mk___rep k__split_discrs (mk___split_fields k__split_fields)) false))
(assert (= 10 (to_rep (rec__my_ordered_maps__n__map__capacity k__split_discrs))))
(assert (= (is_empty (mk___rep l__split_discrs (mk___split_fields l__split_fields))) true))
(assert (and (= temp___10411 (first (mk___rep l__split_discrs (mk___split_fields l__split_fields)))) (ite (= (= (length (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 0) true) (= (bool_eq3 temp___10411 no_element) true) (and (= (has_key (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) temp___10411) true) (= (get1 (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) temp___10411) 1)))))
(assert (= result c__split_fields))
(assert (= temp___1041 c__split_fields1))
(assert (and (= temp___10421 (next (mk___rep l__split_discrs (mk___split_fields l__split_fields)) (mk___rep2 c__split_fields5))) (ite (= (ite (= (bool_eq3 (mk___rep2 c__split_fields5) no_element) false) (= (get1 (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (mk___rep2 c__split_fields5)) (length (mk___rep l__split_discrs (mk___split_fields l__split_fields)))) true) true) (= (bool_eq3 temp___10421 no_element) true) (and (= (has_key (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) temp___10421) true) (= (get1 (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) temp___10421) (+ (get1 (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (mk___rep2 c__split_fields5)) 1))))))
(assert (= result1 c__split_fields1))
(assert (= c__split_fields2 temp___1042))
(assert (and (and (and (and (and (and (and (and (= (length (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (+ (length (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 1)) (= (has_key1 (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral1))) true)) (= (bool_eq1 (get (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral1)))) (mk___rep1 (mk___split_fields1 rliteral1 rliteral1))) true)) (= (get2 (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral1))) 1)) (= (ole (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields))) true)) (= (keys_included_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (mk___rep1 (mk___split_fields1 rliteral1 rliteral1))) true)) (= (range_equal (keys (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) 1 (- (find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral1))) 1)) true)) (= (range_shifted (keys (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral1))) (length (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 1) true)) (= (p_positions_shifted (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral1))) 1) true)))
(assert (= result2 (mk___split_fields__ref (mk___split_fields l__split_fields))))
(assert (= l__split_fields1 my_ordered_maps__n__insert__2__container__fields))
(assert (and (and (and (and (and (and (and (and (= (length (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (+ (length (mk___rep l__split_discrs l__split_fields1)) 1)) (= (has_key1 (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral2))) true)) (= (bool_eq1 (get (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral2)))) (mk___rep1 (mk___split_fields1 rliteral2 rliteral2))) true)) (= (get2 (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral2))) 2)) (= (ole (model__ (mk___rep l__split_discrs l__split_fields1)) (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1))) true)) (= (keys_included_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (model__ (mk___rep l__split_discrs l__split_fields1)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral2))) true)) (= (range_equal (keys (mk___rep l__split_discrs l__split_fields1)) (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) 1 (- (find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral2))) 1)) true)) (= (range_shifted (keys (mk___rep l__split_discrs l__split_fields1)) (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral2))) (length (mk___rep l__split_discrs l__split_fields1)) 1) true)) (= (p_positions_shifted (positions (mk___rep l__split_discrs l__split_fields1)) (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__2__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral2))) 1) true)))
(assert (= result3 (mk___split_fields__ref l__split_fields1)))
(assert (= l__split_fields2 my_ordered_maps__n__insert__2__container__fields1))
(assert (= (get2 (model__ (mk___rep l__split_discrs l__split_fields2)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral3))) 2))
(assert (and (and (and (and (= (has_key1 (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) true) (= (has_key (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (mk___rep2 c__split_fields3)) true)) (= (equivalent_keys (key (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields) (mk___rep2 c__split_fields3)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) true)) (= (k_is_find (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2)) (get1 (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (mk___rep2 c__split_fields3))) true)) (ite (= (has_key1 (model__ (mk___rep l__split_discrs l__split_fields2)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) true) (and (and (and (not (= b true)) (= (oeq1 (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields2))) true)) (= (oeq2 (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (keys (mk___rep l__split_discrs l__split_fields2))) true)) (= (oeq3 (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (positions (mk___rep l__split_discrs l__split_fields2))) true)) (and (and (and (and (and (and (and (and (= b true) (= (length (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (+ (length (mk___rep l__split_discrs l__split_fields2)) 1))) (= (bool_eq1 (key (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields) (mk___rep2 c__split_fields3)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) true)) (= (get2 (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) 3)) (= (ole (model__ (mk___rep l__split_discrs l__split_fields2)) (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields))) true)) (= (keys_included_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields2)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) true)) (= (range_equal (keys (mk___rep l__split_discrs l__split_fields2)) (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) 1 (- (get1 (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (mk___rep2 c__split_fields3)) 1)) true)) (= (range_shifted (keys (mk___rep l__split_discrs l__split_fields2)) (keys (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (get1 (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (mk___rep2 c__split_fields3)) (length (mk___rep l__split_discrs l__split_fields2)) 1) true)) (= (p_positions_shifted (positions (mk___rep l__split_discrs l__split_fields2)) (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (get1 (positions (mk___rep l__split_discrs my_ordered_maps__n__insert__container__fields)) (mk___rep2 c__split_fields3)) 1) true)))))
(assert (= result4 (mk___split_fields__ref l__split_fields2)))
(assert (= l__split_fields3 my_ordered_maps__n__insert__container__fields))
(assert (not (= (has_key1 (model__ (mk___rep l__split_discrs l__split_fields3)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral3))) true)))
(assert (not (= b true)))
(assert (= (element (mk___rep l__split_discrs l__split_fields3) (mk___rep2 c__split_fields3)) 1))
(assert (and (and (and (and (= (oeq2 (keys (mk___rep l__split_discrs my_ordered_maps__n__replace_element__container__fields)) (keys (mk___rep l__split_discrs l__split_fields3))) true) (= (oeq3 (positions (mk___rep l__split_discrs my_ordered_maps__n__replace_element__container__fields)) (positions (mk___rep l__split_discrs l__split_fields3))) true)) (= (element (mk___rep l__split_discrs my_ordered_maps__n__replace_element__container__fields) (mk___rep2 c__split_fields3)) 3)) (= (same_keys (model__ (mk___rep l__split_discrs my_ordered_maps__n__replace_element__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields3))) true)) (= (elements_equal_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__replace_element__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields3)) (key (mk___rep l__split_discrs my_ordered_maps__n__replace_element__container__fields) (mk___rep2 c__split_fields3))) true)))
(assert (= result5 (mk___split_fields__ref l__split_fields3)))
(assert (= l__split_fields4 my_ordered_maps__n__replace_element__container__fields))
(assert (and (and (and (and (and (= (oeq3 (positions (mk___rep l__split_discrs my_ordered_maps__n__replace__container__fields)) (positions (mk___rep l__split_discrs l__split_fields4))) true) (= (bool_eq1 (get (keys (mk___rep l__split_discrs my_ordered_maps__n__replace__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__replace__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2)))) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) true)) (= (equal_except (keys (mk___rep l__split_discrs l__split_fields4)) (keys (mk___rep l__split_discrs my_ordered_maps__n__replace__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__replace__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2)))) true)) (= (get2 (model__ (mk___rep l__split_discrs my_ordered_maps__n__replace__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) 1)) (= (same_keys (model__ (mk___rep l__split_discrs my_ordered_maps__n__replace__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields4))) true)) (= (elements_equal_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__replace__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields4)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral2))) true)))
(assert (= result6 (mk___split_fields__ref l__split_fields4)))
(assert (= l__split_fields5 my_ordered_maps__n__replace__container__fields))
(assert (let ((temp___675 (keys (mk___rep l__split_discrs l__split_fields5)))) (forall ((temp___674 Int)) (=> (and (in_range3 temp___674) (= (iter_has_element temp___675 temp___674) true)) (exists ((i us_rep3)) (and (= (has_key (positions (mk___rep l__split_discrs l__split_fields5)) i) true) (= (bool_eq1 (get (keys (mk___rep l__split_discrs l__split_fields5)) (get1 (positions (mk___rep l__split_discrs l__split_fields5)) i)) (get temp___675 temp___674)) true)))))))
(assert (and (and (= (oeq1 (model__ (mk___rep k__split_discrs my_ordered_maps__n__assign__target__fields)) (model__ (mk___rep l__split_discrs l__split_fields5))) true) (= (oeq2 (keys (mk___rep k__split_discrs my_ordered_maps__n__assign__target__fields)) (keys (mk___rep l__split_discrs l__split_fields5))) true)) (= (length (mk___rep l__split_discrs l__split_fields5)) (length (mk___rep k__split_discrs my_ordered_maps__n__assign__target__fields)))))
(assert (= result7 (mk___split_fields__ref (mk___split_fields k__split_fields))))
(assert (= k__split_fields1 my_ordered_maps__n__assign__target__fields))
(assert (and (and (and (= (oeq1 (model__ (mk___rep l__split_discrs my_ordered_maps__n__move__target__fields)) (model__ (mk___rep k__split_discrs k__split_fields1))) true) (= (oeq2 (keys (mk___rep l__split_discrs my_ordered_maps__n__move__target__fields)) (keys (mk___rep k__split_discrs k__split_fields1))) true)) (= (length (mk___rep k__split_discrs k__split_fields1)) (length (mk___rep l__split_discrs my_ordered_maps__n__move__target__fields)))) (= (length (mk___rep k__split_discrs my_ordered_maps__n__move__source__fields)) 0)))
(assert (= result8 (mk___split_fields__ref l__split_fields5)))
(assert (= l__split_fields6 my_ordered_maps__n__move__target__fields))
(assert (= result9 (mk___split_fields__ref k__split_fields1)))
(assert (= k__split_fields2 my_ordered_maps__n__move__source__fields))
(assert (= (has_key1 (model__ (mk___rep l__split_discrs l__split_fields6)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral3))) true))
(assert (and (and (= (has_key1 (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) true) (= (get2 (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) 3)) (ite (= (has_key1 (model__ (mk___rep l__split_discrs l__split_fields6)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) true) (and (and (and (and (= (oeq3 (positions (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (positions (mk___rep l__split_discrs l__split_fields6))) true) (= (bool_eq1 (get (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4)))) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) true)) (= (equal_except (keys (mk___rep l__split_discrs l__split_fields6)) (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4)))) true)) (= (same_keys (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields6))) true)) (= (elements_equal_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields6)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) true)) (and (and (and (and (and (and (= (length (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (+ (length (mk___rep l__split_discrs l__split_fields6)) 1)) (= (ole (model__ (mk___rep l__split_discrs l__split_fields6)) (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields))) true)) (= (keys_included_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields6)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) true)) (= (bool_eq1 (get (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4)))) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) true)) (= (range_equal (keys (mk___rep l__split_discrs l__split_fields6)) (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) 1 (- (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) 1)) true)) (= (range_shifted (keys (mk___rep l__split_discrs l__split_fields6)) (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) (length (mk___rep l__split_discrs l__split_fields6)) 1) true)) (= (p_positions_shifted (positions (mk___rep l__split_discrs l__split_fields6)) (positions (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields)) (mk___rep1 (mk___split_fields1 rliteral1 rliteral4))) 1) true)))))
(assert (= result10 (mk___split_fields__ref l__split_fields6)))
(assert (= l__split_fields7 my_ordered_maps__n__include__container__fields))
(assert (not (= (has_key1 (model__ (mk___rep l__split_discrs l__split_fields7)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral3))) true)))
(assert (and (and (= (has_key1 (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) true) (= (get2 (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) 3)) (ite (= (has_key1 (model__ (mk___rep l__split_discrs l__split_fields7)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) true) (and (and (and (and (= (oeq3 (positions (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (positions (mk___rep l__split_discrs l__split_fields7))) true) (= (bool_eq1 (get (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4)))) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) true)) (= (equal_except (keys (mk___rep l__split_discrs l__split_fields7)) (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4)))) true)) (= (same_keys (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (model__ (mk___rep l__split_discrs l__split_fields7))) true)) (= (elements_equal_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (model__ (mk___rep l__split_discrs l__split_fields7)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) true)) (and (and (and (and (and (and (= (length (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (+ (length (mk___rep l__split_discrs l__split_fields7)) 1)) (= (ole (model__ (mk___rep l__split_discrs l__split_fields7)) (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1))) true)) (= (keys_included_except (model__ (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (model__ (mk___rep l__split_discrs l__split_fields7)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) true)) (= (bool_eq1 (get (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4)))) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) true)) (= (range_equal (keys (mk___rep l__split_discrs l__split_fields7)) (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) 1 (- (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) 1)) true)) (= (range_shifted (keys (mk___rep l__split_discrs l__split_fields7)) (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) (length (mk___rep l__split_discrs l__split_fields7)) 1) true)) (= (p_positions_shifted (positions (mk___rep l__split_discrs l__split_fields7)) (positions (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (find (keys (mk___rep l__split_discrs my_ordered_maps__n__include__container__fields1)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral4))) 1) true)))))
(assert (= result11 (mk___split_fields__ref l__split_fields7)))
(assert (= l__split_fields8 my_ordered_maps__n__include__container__fields1))
(assert (and (and (and (and (and (and (= (length (mk___rep l__split_discrs my_ordered_maps__n__delete__container__fields)) (- (length (mk___rep l__split_discrs l__split_fields8)) 1)) (not (= (has_key1 (model__ (mk___rep l__split_discrs my_ordered_maps__n__delete__container__fields)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral5))) true))) (= (ole (model__ (mk___rep l__split_discrs my_ordered_maps__n__delete__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields8))) true)) (= (keys_included_except (model__ (mk___rep l__split_discrs l__split_fields8)) (model__ (mk___rep l__split_discrs my_ordered_maps__n__delete__container__fields)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral5))) true)) (= (range_equal (keys (mk___rep l__split_discrs l__split_fields8)) (keys (mk___rep l__split_discrs my_ordered_maps__n__delete__container__fields)) 1 (- (find (keys (mk___rep l__split_discrs l__split_fields8)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral5))) 1)) true)) (= (range_shifted (keys (mk___rep l__split_discrs my_ordered_maps__n__delete__container__fields)) (keys (mk___rep l__split_discrs l__split_fields8)) (find (keys (mk___rep l__split_discrs l__split_fields8)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral5))) (length (mk___rep l__split_discrs my_ordered_maps__n__delete__container__fields)) 1) true)) (= (p_positions_shifted (positions (mk___rep l__split_discrs my_ordered_maps__n__delete__container__fields)) (positions (mk___rep l__split_discrs l__split_fields8)) (find (keys (mk___rep l__split_discrs l__split_fields8)) (mk___rep1 (mk___split_fields1 rliteral4 rliteral5))) 1) true)))
(assert (= result12 (mk___split_fields__ref l__split_fields8)))
(assert (= l__split_fields9 my_ordered_maps__n__delete__container__fields))
(assert (and (= temp___10541 (find1 (mk___rep l__split_discrs l__split_fields9) (mk___rep1 (mk___split_fields1 rliteral2 rliteral3)))) (ite (ite (= (has_key1 (model__ (mk___rep l__split_discrs l__split_fields9)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral3))) false) true false) (and (not (= (has_key (positions (mk___rep l__split_discrs l__split_fields9)) temp___10541) true)) (= (bool_eq3 temp___10541 no_element) true)) (and (and (= (has_key (positions (mk___rep l__split_discrs l__split_fields9)) temp___10541) true) (= (get1 (positions (mk___rep l__split_discrs l__split_fields9)) temp___10541) (find (keys (mk___rep l__split_discrs l__split_fields9)) (mk___rep1 (mk___split_fields1 rliteral2 rliteral3))))) (= (equivalent_keys (key (mk___rep l__split_discrs l__split_fields9) temp___10541) (mk___rep1 (mk___split_fields1 rliteral2 rliteral3))) true)))))
(assert (= result13 (mk___split_fields__ref2 c__split_fields3)))
(assert (= c__split_fields4 (mk___split_fields2 temp___1054)))
(assert (not (= (bool_eq3 (mk___rep2 c__split_fields4) no_element) true)))
(assert (not (= (has_key (positions (mk___rep l__split_discrs l__split_fields9)) (mk___rep2 c__split_fields4)) true)))
(check-sat)
(exit)
