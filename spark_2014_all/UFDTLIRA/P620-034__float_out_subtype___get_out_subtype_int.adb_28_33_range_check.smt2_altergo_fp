(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic z : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t_rate

predicate in_range1(x1: int) = (((- 3000) <= x1) and (x1 <= 3000))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x1:int. forall y1:int [bool_eq2(x1, y1)]. (((x1 = y1) ->
  (bool_eq2(x1, y1) = true)) and ((not (x1 = y1)) -> (bool_eq2(x1,
  y1) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t_rate, t_rate -> bool

logic dummy1 : t_rate

type t_rate__ref = { t_rate__content : t_rate
}

function t_rate__ref___projection(a: t_rate__ref) : t_rate =
  (a).t_rate__content

logic to_rep : t_rate -> int

logic of_rep : int -> t_rate

axiom inversion_axiom :
  (forall x1:t_rate [to_rep(x1)]. (of_rep(to_rep(x1)) = x1))

axiom range_axiom : (forall x1:t_rate [to_rep(x1)]. in_range1(to_rep(x1)))

axiom coerce_axiom :
  (forall x1:int [to_rep(of_rep(x1))]. (in_range1(x1) ->
  (to_rep(of_rep(x1)) = x1)))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic roll_rate_desired : int

logic pitch_rate_desired : int

logic yaw_rate_desired : int

logic o : int

logic o1 : int

logic get_out_subtype_int__controller_get_desired_rate__pitch_rate_desired : int

logic o2 : int

logic o3 : int

logic o4 : t_rate

logic o5 : int

logic o6 : int

logic result : int

logic roll_rate_desired1 : int

logic result1 : int

logic pitch_rate_desired1 : int

logic result2 : int

logic yaw_rate_desired1 : int

logic get_out_subtype_int__controller_get_desired_rate__yaw_rate_desired : int

logic get_out_subtype_int__controller_get_desired_rate__pitch_rate_desired1 : int

logic get_out_subtype_int__controller_get_desired_rate__roll_rate_desired : int

logic result3 : int

logic roll_rate_desired2 : int

logic result4 : int

logic pitch_rate_desired2 : int

axiom H : in_range(x)

axiom H1 : in_range(y)

axiom H2 : in_range(z)

axiom H3 : (result = roll_rate_desired)

axiom H4 : (roll_rate_desired1 = 0)

axiom H5 : in_range1(roll_rate_desired1)

axiom H6 : (result1 = pitch_rate_desired)

axiom H7 : (pitch_rate_desired1 = 0)

axiom H8 : in_range1(pitch_rate_desired1)

axiom H9 : (result2 = yaw_rate_desired)

axiom H10 : (yaw_rate_desired1 = 0)

axiom H11 : in_range1(yaw_rate_desired1)

axiom H12 : ((o = pitch_rate_desired1) and in_range(pitch_rate_desired1))

axiom H13 : ((o1 = o) and in_range(o))

axiom H14 :
  (o1 = get_out_subtype_int__controller_get_desired_rate__pitch_rate_desired)

axiom H15 :
  ((in_range(get_out_subtype_int__controller_get_desired_rate__roll_rate_desired) and
  in_range(get_out_subtype_int__controller_get_desired_rate__pitch_rate_desired1)) and
  in_range(get_out_subtype_int__controller_get_desired_rate__yaw_rate_desired))

axiom H16 :
  ((o2 = get_out_subtype_int__controller_get_desired_rate__roll_rate_desired) and
  in_range1(get_out_subtype_int__controller_get_desired_rate__roll_rate_desired))

axiom H17 : (result3 = roll_rate_desired1)

axiom H18 : (roll_rate_desired2 = o2)

axiom H19 :
  ((o3 = get_out_subtype_int__controller_get_desired_rate__pitch_rate_desired1) and
  in_range1(get_out_subtype_int__controller_get_desired_rate__pitch_rate_desired1))

axiom H20 : (to_rep(o4) = o3)

axiom H21 : (o5 = to_rep(o4))

axiom H22 : (result4 = pitch_rate_desired1)

axiom H23 : (pitch_rate_desired2 = o5)

 (* File "get_out_subtype_int.adb", line 7, characters 0-0 *)
goal WP_parameter_def :
  in_range1(get_out_subtype_int__controller_get_desired_rate__yaw_rate_desired)
