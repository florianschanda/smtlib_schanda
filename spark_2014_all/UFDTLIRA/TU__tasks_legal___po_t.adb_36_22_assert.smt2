(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__po_t__p_intT__condition Bool) (rec__po_t__the_protected_int integer)))))
(define-fun us_split_fields_Condition__projection ((a us_split_fields)) Bool (rec__po_t__p_intT__condition a))
(define-fun us_split_fields_The_Protected_Int__projection ((a us_split_fields)) integer (rec__po_t__the_protected_int a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const po_t__p_intT__condition__first__bit Int)
(declare-const po_t__p_intT__condition__last__bit Int)
(declare-const po_t__p_intT__condition__position Int)
(assert (<= 0 po_t__p_intT__condition__first__bit))
(assert (< po_t__p_intT__condition__first__bit po_t__p_intT__condition__last__bit))
(assert (<= 0 po_t__p_intT__condition__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-datatypes () ((p_intT__ref (mk_p_intT__ref (p_intT__content us_rep)))))
(define-fun p_intT__ref___projection ((a p_intT__ref)) us_rep (p_intT__content a))
(declare-fun get (us_rep) Int)
(declare-fun get__function_guard (Int us_rep) Bool)
(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)
(define-fun default_initial_assumption ((temp___expr_201 us_rep) (temp___skip_top_level_202 Bool)) Bool (and (= (rec__po_t__p_intT__condition (us_split_fields1 temp___expr_201)) (distinct 1 0)) (= (to_rep (rec__po_t__the_protected_int (us_split_fields1 temp___expr_201))) 0)))
(assert (forall ((self__ us_rep)) (! (dynamic_invariant (get self__) true false true true) :pattern ((get self__)))))
(assert (forall ((self__ us_rep)) (! (= (get self__) (ite (<= 0 (to_rep (rec__po_t__the_protected_int (us_split_fields1 self__)))) (to_rep (rec__po_t__the_protected_int (us_split_fields1 self__))) (+ (to_rep (rec__po_t__the_protected_int (us_split_fields1 self__))) 10))) :pattern ((get self__)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__po_t__hidden_poT__the_protected_int integer) (rec__po_t__hidden_poT__switch Bool)))))
(define-fun us_split_fields_The_Protected_Int__2__projection ((a us_split_fields2)) integer (rec__po_t__hidden_poT__the_protected_int a))
(define-fun us_split_fields_Switch__projection ((a us_split_fields2)) Bool (rec__po_t__hidden_poT__switch a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const po_t__hidden_poT__the_protected_int__first__bit Int)
(declare-const po_t__hidden_poT__the_protected_int__last__bit Int)
(declare-const po_t__hidden_poT__the_protected_int__position Int)
(assert (<= 0 po_t__hidden_poT__the_protected_int__first__bit))
(assert (< po_t__hidden_poT__the_protected_int__first__bit po_t__hidden_poT__the_protected_int__last__bit))
(assert (<= 0 po_t__hidden_poT__the_protected_int__position))
(declare-const po_t__hidden_poT__switch__first__bit Int)
(declare-const po_t__hidden_poT__switch__last__bit Int)
(declare-const po_t__hidden_poT__switch__position Int)
(assert (<= 0 po_t__hidden_poT__switch__first__bit))
(assert (< po_t__hidden_poT__switch__first__bit po_t__hidden_poT__switch__last__bit))
(assert (<= 0 po_t__hidden_poT__switch__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-datatypes () ((hidden_poT__ref (mk_hidden_poT__ref (hidden_poT__content us_rep1)))))
(define-fun hidden_poT__ref___projection ((a hidden_poT__ref)) us_rep1 (hidden_poT__content a))
(declare-fun get1 (us_rep1) Int)
(declare-fun get__function_guard1 (Int us_rep1) Bool)
(define-fun default_initial_assumption1 ((temp___expr_208 us_rep1) (temp___skip_top_level_209 Bool)) Bool (and (= (to_rep (rec__po_t__hidden_poT__the_protected_int (us_split_fields3 temp___expr_208))) 0) (= (rec__po_t__hidden_poT__switch (us_split_fields3 temp___expr_208)) (distinct 1 0))))
(assert (forall ((self__ us_rep1)) (! (dynamic_invariant (get1 self__) true false true true) :pattern ((get1 self__)))))
(assert (forall ((self__ us_rep1)) (! (= (get1 self__) (ite (<= 0 (to_rep (rec__po_t__hidden_poT__the_protected_int (us_split_fields3 self__)))) (to_rep (rec__po_t__hidden_poT__the_protected_int (us_split_fields3 self__))) (+ (to_rep (rec__po_t__hidden_poT__the_protected_int (us_split_fields3 self__))) 10))) :pattern ((get1 self__)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const y Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const p_int__split_fields Bool)
(declare-const p_int__split_fields1 integer)
(declare-const hidden_po__split_fields integer)
(declare-const hidden_po__split_fields1 Bool)
(declare-const o Bool)
(declare-const o1 integer)
(declare-const us_self__compl Bool)
(declare-const us_self__compl1 integer)
(declare-const o2 integer)
(declare-const o3 Bool)
(declare-const us_self__compl2 integer)
(declare-const us_self__compl3 Bool)
(declare-const o4 Bool)
(declare-const o5 integer)
(declare-const po_t__B_1__x__assume Int)
(declare-const o6 integer)
(declare-const o7 Bool)
(declare-const po_t__B_1__y__assume Int)
(declare-const p_int__split_fields2 Bool)
(declare-const p_int__split_fields3 integer)
(declare-const us_self__compl4 Bool)
(declare-const us_self__compl5 integer)
(declare-const result us_split_fields__ref)
(declare-const p_int__split_fields4 us_split_fields)
(declare-const hidden_po__split_fields2 us_split_fields2)
(declare-const us_self__compl6 us_rep1)
(declare-const result1 us_split_fields__ref1)
(declare-const hidden_po__split_fields3 us_split_fields2)
(declare-const p_int__split_fields5 us_split_fields)
(declare-const hidden_po__split_fields4 us_split_fields2)
(assert (and (= p_int__split_fields (distinct 1 0)) (= (to_rep p_int__split_fields1) 0)))
(assert (and (= (to_rep hidden_po__split_fields) 0) (= hidden_po__split_fields1 (distinct 1 0))))
(assert (= o p_int__split_fields2))
(assert (= o1 p_int__split_fields3))
(assert (= us_self__compl o))
(assert (= us_self__compl1 o1))
(assert (= result (mk___split_fields__ref (mk___split_fields p_int__split_fields2 p_int__split_fields3))))
(assert (= p_int__split_fields4 (mk___split_fields us_self__compl4 us_self__compl5)))
(assert (= hidden_po__split_fields2 (mk___split_fields1 o2 o3)))
(assert (= us_self__compl2 o2))
(assert (= us_self__compl3 o3))
(assert (= result1 (mk___split_fields__ref1 hidden_po__split_fields2)))
(assert (= hidden_po__split_fields3 (us_split_fields3 us_self__compl6)))
(assert (= p_int__split_fields5 (mk___split_fields o4 o5)))
(assert (and (= po_t__B_1__x__assume (get (mk___rep (mk___split_fields o4 o5)))) (and (in_range po_t__B_1__x__assume) (= po_t__B_1__x__assume (ite (<= 0 (to_rep o5)) (to_rep o5) (+ (to_rep o5) 10))))))
(assert (= po_t__B_1__x__assume x))
(assert (in_range x))
(assert (= hidden_po__split_fields4 (mk___split_fields1 o6 o7)))
(assert (and (= po_t__B_1__y__assume (get1 (mk___rep1 (mk___split_fields1 o6 o7)))) (and (in_range po_t__B_1__y__assume) (= po_t__B_1__y__assume (ite (<= 0 (to_rep o6)) (to_rep o6) (+ (to_rep o6) 10))))))
(assert (= po_t__B_1__y__assume y))
(assert (in_range y))
(assert (not (= x y)))
(check-sat)
(exit)
