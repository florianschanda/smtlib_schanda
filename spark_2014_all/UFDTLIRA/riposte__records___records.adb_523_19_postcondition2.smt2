(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort unsigned_byte 0)
(declare-fun unsigned_byteqtint (unsigned_byte) Int)
(assert (forall ((i unsigned_byte)) (and (<= 0 (unsigned_byteqtint i)) (<= (unsigned_byteqtint i) 255))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (unsigned_byte unsigned_byte) Bool)
(declare-const dummy unsigned_byte)
(declare-datatypes () ((unsigned_byte__ref (mk_unsigned_byte__ref (unsigned_byte__content unsigned_byte)))))
(define-fun unsigned_byte__ref___projection ((a unsigned_byte__ref)) unsigned_byte (unsigned_byte__content a))
(define-fun to_rep ((x unsigned_byte)) Int (unsigned_byteqtint x))
(declare-fun of_rep (Int) unsigned_byte)
(assert (forall ((x unsigned_byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x unsigned_byte)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__records_prooffuncs__pair__a unsigned_byte) (rec__records_prooffuncs__pair__b unsigned_byte)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) unsigned_byte (rec__records_prooffuncs__pair__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) unsigned_byte (rec__records_prooffuncs__pair__b a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))) (= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const records_prooffuncs__pair__a__first__bit Int)
(declare-const records_prooffuncs__pair__a__last__bit Int)
(declare-const records_prooffuncs__pair__a__position Int)
(assert (<= 0 records_prooffuncs__pair__a__first__bit))
(assert (< records_prooffuncs__pair__a__first__bit records_prooffuncs__pair__a__last__bit))
(assert (<= 0 records_prooffuncs__pair__a__position))
(declare-const records_prooffuncs__pair__b__first__bit Int)
(declare-const records_prooffuncs__pair__b__last__bit Int)
(declare-const records_prooffuncs__pair__b__position Int)
(assert (<= 0 records_prooffuncs__pair__b__first__bit))
(assert (< records_prooffuncs__pair__b__first__bit records_prooffuncs__pair__b__last__bit))
(assert (<= 0 records_prooffuncs__pair__b__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((pair__ref (mk_pair__ref (pair__content us_rep)))))
(define-fun pair__ref___projection ((a pair__ref)) us_rep (pair__content a))
(declare-sort command_t 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (command_t command_t) Bool)
(declare-const dummy2 command_t)
(declare-datatypes () ((command_t__ref (mk_command_t__ref (command_t__content command_t)))))
(define-fun command_t__ref___projection ((a command_t__ref)) command_t (command_t__content a))
(declare-fun to_rep1 (command_t) Int)
(declare-fun of_rep1 (Int) command_t)
(assert (forall ((x command_t)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x command_t)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__records_prooffuncs__packet__data us_rep) (rec__records_prooffuncs__packet__command command_t)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields2)) us_rep (rec__records_prooffuncs__packet__data a))
(define-fun us_split_fields_Command__projection ((a us_split_fields2)) command_t (rec__records_prooffuncs__packet__command a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq (rec__records_prooffuncs__packet__data (us_split_fields3 a)) (rec__records_prooffuncs__packet__data (us_split_fields3 b))) true) (= (to_rep1 (rec__records_prooffuncs__packet__command (us_split_fields3 a))) (to_rep1 (rec__records_prooffuncs__packet__command (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const records_prooffuncs__packet__data__first__bit Int)
(declare-const records_prooffuncs__packet__data__last__bit Int)
(declare-const records_prooffuncs__packet__data__position Int)
(assert (<= 0 records_prooffuncs__packet__data__first__bit))
(assert (< records_prooffuncs__packet__data__first__bit records_prooffuncs__packet__data__last__bit))
(assert (<= 0 records_prooffuncs__packet__data__position))
(declare-const records_prooffuncs__packet__command__first__bit Int)
(declare-const records_prooffuncs__packet__command__last__bit Int)
(declare-const records_prooffuncs__packet__command__position Int)
(assert (<= 0 records_prooffuncs__packet__command__first__bit))
(assert (< records_prooffuncs__packet__command__first__bit records_prooffuncs__packet__command__last__bit))
(assert (<= 0 records_prooffuncs__packet__command__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((packet__ref (mk_packet__ref (packet__content us_rep1)))))
(define-fun packet__ref___projection ((a packet__ref)) us_rep1 (packet__content a))
(declare-datatypes () ((record_subtype__ref (mk_record_subtype__ref (record_subtype__content us_rep1)))))
(define-fun record_subtype__ref___projection ((a record_subtype__ref)) us_rep1 (record_subtype__content a))
(declare-const r1 us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const r2 us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_207 Int) (temp___is_init_203 Bool) (temp___skip_constant_204 Bool) (temp___do_toplevel_205 Bool) (temp___do_typ_inv_206 Bool)) Bool (=> (or (= temp___is_init_203 true) (<= 0 255)) (in_range1 temp___expr_207)))
(define-fun dynamic_invariant1 ((temp___expr_214 Int) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool) (temp___do_typ_inv_213 Bool)) Bool (=> (or (= temp___is_init_210 true) (<= 0 2)) (in_range2 temp___expr_214)))
(declare-const records__test_record_subtype__result Bool)
(declare-const result Bool)
(declare-const records__test_record_subtype__result1 Bool)
(declare-const records__test_record_subtype__result2 Bool)
(declare-const records__test_record_subtype__result3 Bool)
(declare-const records__test_record_subtype__result4 Bool)
(declare-const records__test_record_subtype__result5 Bool)
(declare-const result1 Bool)
(assert (= records__test_record_subtype__result1 records__test_record_subtype__result2))
(assert (= records__test_record_subtype__result3 records__test_record_subtype__result1))
(assert (= result records__test_record_subtype__result))
(assert (= records__test_record_subtype__result1 (ite (= (bool_eq (rec__records_prooffuncs__packet__data (us_split_fields3 r1)) (rec__records_prooffuncs__packet__data (us_split_fields3 r2))) true) (ite (= (to_rep1 (rec__records_prooffuncs__packet__command (us_split_fields3 r1))) (to_rep1 (rec__records_prooffuncs__packet__command (us_split_fields3 r2)))) true false) false)))
(assert (= (mk_bool__ref records__test_record_subtype__result4) (mk_bool__ref records__test_record_subtype__result2)))
(assert (= records__test_record_subtype__result5 records__test_record_subtype__result3))
(assert (= result1 records__test_record_subtype__result4))
(assert (= records__test_record_subtype__result4 true))
(assert (not (= (bool_eq1 r1 r2) true)))
(check-sat)
(exit)
