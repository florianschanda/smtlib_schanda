(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-sort index_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index_type index_type) Bool)
(declare-const dummy2 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-sort extended_index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 11)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (extended_index extended_index) Bool)
(declare-const dummy3 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(declare-sort capacity_range 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (capacity_range capacity_range) Bool)
(declare-const dummy4 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__my_vectors__v__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range (rec__my_vectors__v__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__my_vectors__v__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type (rec__my_vectors__v__vector a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const my_vectors__v__vector__capacity__first__bit Int)
(declare-const my_vectors__v__vector__capacity__last__bit Int)
(declare-const my_vectors__v__vector__capacity__position Int)
(assert (<= 0 my_vectors__v__vector__capacity__first__bit))
(assert (< my_vectors__v__vector__capacity__first__bit my_vectors__v__vector__capacity__last__bit))
(assert (<= 0 my_vectors__v__vector__capacity__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_261 Int) (temp___is_init_257 Bool) (temp___skip_constant_258 Bool) (temp___do_toplevel_259 Bool) (temp___do_typ_inv_260 Bool)) Bool (=> (or (= temp___is_init_257 true) (<= 0 10)) (in_range5 temp___expr_261)))
(declare-fun to_rep (capacity_range) Int)
(declare-fun of_rep (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x capacity_range)) (! (in_range5 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun capacity ((container us_rep)) Int (ite (= (distinct 0 0) true) (to_rep (rec__my_vectors__v__vector__capacity (us_split_discrs1 container))) 10))
(declare-fun capacity__function_guard (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (capacity container)) (dynamic_invariant1 result true false true true))) :pattern ((length container)))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(declare-fun model__ (us_rep) us_rep1)
(declare-fun model____function_guard (us_rep1 us_rep) Bool)
(define-fun last_index ((container us_rep)) Int (last (model__ container)))
(declare-fun last_index__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant2 ((temp___expr_254 Int) (temp___is_init_250 Bool) (temp___skip_constant_251 Bool) (temp___do_toplevel_252 Bool) (temp___do_typ_inv_253 Bool)) Bool (=> (or (= temp___is_init_250 true) (<= 0 11)) (in_range4 temp___expr_254)))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (= (length container) 0)) :pattern ((is_empty container)))))
(declare-fun get (us_rep1 Int) Int)
(declare-fun get__function_guard (Int us_rep1 Int) Bool)
(define-fun oeq ((left us_rep1) (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(declare-fun copy (us_rep Int) us_rep)
(declare-fun copy__function_guard (us_rep us_rep Int) Bool)
(assert (forall ((source us_rep)) (forall ((capacity1 Int)) (! (=> (and (dynamic_invariant1 capacity1 true true true true) (=> (= (distinct 0 0) true) (or (= capacity1 0) (<= (length source) capacity1)))) (let ((result (copy source capacity1))) (and (= (oeq (model__ result) (model__ source)) true) (ite (= capacity1 0) (= (to_rep (rec__my_vectors__v__vector__capacity (us_split_discrs1 result))) (length source)) (= (to_rep (rec__my_vectors__v__vector__capacity (us_split_discrs1 result))) capacity1))))) :pattern ((copy source capacity1))))))
(define-fun equal_except ((left us_rep1) (right us_rep1) (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (not (= i position)) (= (get left i) (get right i))))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep1 us_rep1 Int) Bool)
(declare-fun first_index__function_guard (Int us_rep) Bool)
(define-fun range_equal ((left us_rep1) (right us_rep1) (fst Int) (lst Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right i)))) true false))
(declare-fun range_equal__function_guard (Bool us_rep1 us_rep1 Int Int) Bool)
(define-fun range_shifted ((left us_rep1) (right us_rep1) (fst Int) (lst Int) (offset Int)) Bool (and (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right (+ i offset))))) true false) (ite (forall ((i Int)) (=> (and (<= (+ fst offset) i) (<= i (+ lst offset))) (= (get left (- i offset)) (get right i)))) true false)))
(declare-fun range_shifted__function_guard (Bool us_rep1 us_rep1 Int Int Int) Bool)
(define-fun constant_range ((container us_rep1) (fst Int) (lst Int) (item Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get container i) item))) true false))
(declare-fun constant_range__function_guard (Bool us_rep1 Int Int Int) Bool)
(define-fun olt ((left us_rep1) (right us_rep1)) Bool (and (< (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep1 us_rep1) Bool)
(define-fun ole ((left us_rep1) (right us_rep1)) Bool (and (<= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)
(define-fun m_elements_reversed ((left us_rep1) (right us_rep1)) Bool (and (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (= (get left i) (get right (+ (- (last left) i) 1))))) true false)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last right))) (= (get right i) (get left (+ (- (last left) i) 1))))) true false)))
(declare-fun m_elements_reversed__function_guard (Bool us_rep1 us_rep1) Bool)
(define-fun equal_except__2 ((left us_rep1) (right us_rep1) (x Int) (y Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (and (not (= i x)) (not (= i y))) (= (get left i) (get right i))))) true false)))
(declare-fun equal_except__2__function_guard (Bool us_rep1 us_rep1 Int Int) Bool)
(define-fun m_elements_swapped ((left us_rep1) (right us_rep1) (x Int) (y Int)) Bool (and (and (and (= (length1 left) (length1 right)) (= (get left x) (get right y))) (= (get left y) (get right x))) (equal_except__2 left right x y)))
(declare-fun m_elements_swapped__function_guard (Bool us_rep1 us_rep1 Int Int) Bool)
(declare-fun find_index (us_rep Int Int) Int)
(declare-fun find_index__function_guard (Int us_rep Int Int) Bool)
(define-fun dynamic_invariant3 ((temp___expr_240 Int) (temp___is_init_236 Bool) (temp___skip_constant_237 Bool) (temp___do_toplevel_238 Bool) (temp___do_typ_inv_239 Bool)) Bool (=> (or (= temp___is_init_236 true) (<= 1 10)) (in_range3 temp___expr_240)))
(declare-sort element_type 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (element_type element_type) Bool)
(declare-const dummy7 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant4 ((temp___expr_247 Int) (temp___is_init_243 Bool) (temp___skip_constant_244 Bool) (temp___do_toplevel_245 Bool) (temp___do_typ_inv_246 Bool)) Bool (=> (or (= temp___is_init_243 true) (<= 1 2147483647)) (in_range6 temp___expr_247)))
(define-fun contains ((container us_rep1) (fst Int) (lst Int) (item Int)) Bool (ite (exists ((i Int)) (and (and (<= fst i) (<= i lst)) (= (get container i) item))) true false))
(declare-fun contains__function_guard (Bool us_rep1 Int Int Int) Bool)
(assert (forall ((container us_rep)) (forall ((item Int) (index Int)) (! (=> (and (dynamic_invariant4 item true true true true) (dynamic_invariant3 index true true true true)) (let ((result (find_index container item index))) (and (ite (or (< (last_index container) index) (not (= (contains (model__ container) index (last_index container) item) true))) (= result 0) (and (and (and (<= index result) (<= result (last_index container))) (= (get (model__ container) result) item)) (not (= (contains (model__ container) index (- result 1) item) true)))) (dynamic_invariant2 result true false true true)))) :pattern ((find_index container item index))))))
(declare-fun reverse_find_index (us_rep Int Int) Int)
(declare-fun reverse_find_index__function_guard (Int us_rep Int Int) Bool)
(assert (forall ((container us_rep)) (forall ((item Int) (index Int)) (! (=> (and (dynamic_invariant4 item true true true true) (dynamic_invariant3 index true true true true)) (let ((result (reverse_find_index container item index))) (and (ite (not (= (contains (model__ container) 1 (ite (<= index (last_index container)) index (last_index container)) item) true)) (= result 0) (and (and (and (and (<= 1 result) (<= result index)) (<= result (last_index container))) (= (get (model__ container) result) item)) (not (= (contains (model__ container) (+ result 1) (ite (<= index (last_index container)) index (last_index container)) item) true)))) (dynamic_invariant2 result true false true true)))) :pattern ((reverse_find_index container item index))))))
(declare-fun is_sorted (us_rep) Bool)
(declare-fun is_sorted__function_guard (Bool us_rep) Bool)
(define-fun m_elements_sorted ((container us_rep1)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last container))) (forall ((j Int)) (=> (and (<= i j) (<= j (last container))) (or (= (get container i) (get container j)) (< (get container i) (get container j))))))) true false))
(declare-fun m_elements_sorted__function_guard (Bool us_rep1) Bool)
(assert (forall ((container us_rep)) (! (= (= (is_sorted container) true) (= (m_elements_sorted (model__ container)) true)) :pattern ((is_sorted container)))))
(define-fun m_elements_included ((left us_rep1) (l_fst Int) (l_lst Int) (right us_rep1) (r_fst Int) (r_lst Int)) Bool (ite (forall ((i Int)) (=> (and (<= l_fst i) (<= i l_lst)) (exists ((j Int)) (and (and (<= r_fst j) (<= j r_lst)) (= (get left i) (get right j)))))) true false))
(declare-fun m_elements_included__function_guard (Bool us_rep1 Int Int us_rep1 Int Int) Bool)
(define-fun m_elements_in_union ((container us_rep1) (left us_rep1) (right us_rep1)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last container))) (or (exists ((j Int)) (and (and (<= 1 j) (<= j (last left))) (= (get container i) (get left j)))) (exists ((j Int)) (and (and (<= 1 j) (<= j (last right))) (= (get container i) (get right j))))))) true false))
(declare-fun m_elements_in_union__function_guard (Bool us_rep1 us_rep1 us_rep1) Bool)
(define-fun in_range7 ((rec__my_vectors__v__vector__capacity1 Int) (a us_rep)) Bool (= rec__my_vectors__v__vector__capacity1 (to_rep (rec__my_vectors__v__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const my_vectors__v__vector__capacity__first__bit1 Int)
(declare-const my_vectors__v__vector__capacity__last__bit1 Int)
(declare-const my_vectors__v__vector__capacity__position1 Int)
(assert (<= 0 my_vectors__v__vector__capacity__first__bit1))
(assert (< my_vectors__v__vector__capacity__first__bit1 my_vectors__v__vector__capacity__last__bit1))
(assert (<= 0 my_vectors__v__vector__capacity__position1))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((tlS__ref (mk_tlS__ref (tlS__content us_rep)))))
(define-fun tlS__ref___projection ((a tlS__ref)) us_rep (tlS__content a))
(define-fun dynamic_invariant5 ((temp___expr_918 us_rep) (temp___is_init_914 Bool) (temp___skip_constant_915 Bool) (temp___do_toplevel_916 Bool) (temp___do_typ_inv_917 Bool)) Bool (=> (not (= temp___skip_constant_915 true)) (in_range7 10 temp___expr_918)))
(define-fun default_initial_assumption ((temp___expr_920 us_rep) (temp___skip_top_level_921 Bool)) Bool (and (= (to_rep (rec__my_vectors__v__vector__capacity (us_split_discrs1 temp___expr_920))) 10) (=> (not (= temp___skip_top_level_921 true)) (= (is_empty temp___expr_920) true))))
(declare-const l__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range8 ((rec__my_vectors__v__vector__capacity1 Int) (a us_rep)) Bool (= rec__my_vectors__v__vector__capacity1 (to_rep (rec__my_vectors__v__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const my_vectors__v__vector__capacity__first__bit2 Int)
(declare-const my_vectors__v__vector__capacity__last__bit2 Int)
(declare-const my_vectors__v__vector__capacity__position2 Int)
(assert (<= 0 my_vectors__v__vector__capacity__first__bit2))
(assert (< my_vectors__v__vector__capacity__first__bit2 my_vectors__v__vector__capacity__last__bit2))
(assert (<= 0 my_vectors__v__vector__capacity__position2))
(declare-fun user_eq9 (us_rep us_rep) Bool)
(declare-const dummy9 us_rep)
(declare-datatypes () ((tkS__ref (mk_tkS__ref (tkS__content us_rep)))))
(define-fun tkS__ref___projection ((a tkS__ref)) us_rep (tkS__content a))
(define-fun dynamic_invariant6 ((temp___expr_928 us_rep) (temp___is_init_924 Bool) (temp___skip_constant_925 Bool) (temp___do_toplevel_926 Bool) (temp___do_typ_inv_927 Bool)) Bool (=> (not (= temp___skip_constant_925 true)) (in_range8 10 temp___expr_928)))
(define-fun default_initial_assumption1 ((temp___expr_930 us_rep) (temp___skip_top_level_931 Bool)) Bool (and (= (to_rep (rec__my_vectors__v__vector__capacity (us_split_discrs1 temp___expr_930))) 10) (=> (not (= temp___skip_top_level_931 true)) (= (is_empty temp___expr_930) true))))
(declare-const k__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const i__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant7 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort count_type 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq10 (count_type count_type) Bool)
(declare-const dummy10 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant8 ((temp___expr_184 Int) (temp___is_init_180 Bool) (temp___skip_constant_181 Bool) (temp___do_toplevel_182 Bool) (temp___do_typ_inv_183 Bool)) Bool (=> (or (= temp___is_init_180 true) (<= 0 2147483647)) (in_range9 temp___expr_184)))
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_300 us_rep1) (temp___skip_top_level_301 Bool)) Bool (=> (not (= temp___skip_top_level_301 true)) (= (length1 temp___expr_300) 0)))
(assert (forall ((container us_rep)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(declare-sort extended_index1 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq11 (extended_index1 extended_index1) Bool)
(declare-const dummy11 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant9 ((temp___expr_292 Int) (temp___is_init_288 Bool) (temp___skip_constant_289 Bool) (temp___do_toplevel_290 Bool) (temp___do_typ_inv_291 Bool)) Bool (=> (or (= temp___is_init_288 true) (<= 0 10)) (in_range10 temp___expr_292)))
(assert (forall ((container us_rep1)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 10) (dynamic_invariant8 result true false true true))) :pattern ((length1 container)))))
(declare-sort element_type1 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq12 (element_type1 element_type1) Bool)
(declare-const dummy12 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant10 ((temp___expr_285 Int) (temp___is_init_281 Bool) (temp___skip_constant_282 Bool) (temp___do_toplevel_283 Bool) (temp___do_typ_inv_284 Bool)) Bool (=> (or (= temp___is_init_281 true) (<= 1 2147483647)) (in_range11 temp___expr_285)))
(assert (forall ((container us_rep1)) (forall ((position Int)) (! (=> (and (dynamic_invariant9 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant10 (get container position) true false true true)) :pattern ((get container position))))))
(declare-const l__split_fields us_main_type)
(declare-const k__split_fields us_main_type)
(declare-const c Int)
(declare-const us Int)
(declare-const us1 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result Int)
(declare-const c1 Int)
(declare-const my_vectors__v__append__2__container__fields us_main_type)
(declare-const result1 us_main_type)
(declare-const l__split_fields1 us_main_type)
(declare-const my_vectors__v__append__3__container__fields us_main_type)
(declare-const result2 us_main_type)
(declare-const l__split_fields2 us_main_type)
(declare-const my_vectors__v__delete_last__container__fields us_main_type)
(declare-const result3 us_main_type)
(declare-const l__split_fields3 us_split_fields)
(declare-const my_vectors__v__delete_last__2__container__fields us_split_fields)
(declare-const result4 us_split_fields__ref)
(declare-const l__split_fields4 us_split_fields)
(declare-const my_vectors__v__delete_last__2__container__fields1 us_split_fields)
(declare-const result5 us_split_fields__ref)
(declare-const l__split_fields5 us_split_fields)
(declare-const my_vectors__v__clear__container__fields us_split_fields)
(declare-const result6 us_split_fields__ref)
(declare-const l__split_fields6 us_split_fields)
(declare-const my_vectors__v__prepend__2__container__fields us_split_fields)
(declare-const result7 us_split_fields__ref)
(declare-const l__split_fields7 us_split_fields)
(declare-const my_vectors__v__prepend__3__container__fields us_split_fields)
(declare-const result8 us_split_fields__ref)
(declare-const l__split_fields8 us_split_fields)
(declare-const my_vectors__v__delete_first__container__fields us_split_fields)
(declare-const result9 us_split_fields__ref)
(declare-const l__split_fields9 us_split_fields)
(declare-const my_vectors__v__delete_first__2__container__fields us_split_fields)
(declare-const result10 us_split_fields__ref)
(declare-const l__split_fields10 us_split_fields)
(declare-const my_vectors__v__delete_first__2__container__fields1 us_split_fields)
(declare-const result11 us_split_fields__ref)
(declare-const l__split_fields11 us_split_fields)
(declare-const my_vectors__v__clear__container__fields1 us_split_fields)
(declare-const result12 us_split_fields__ref)
(declare-const l__split_fields12 us_split_fields)
(declare-const result13 int__ref)
(declare-const c2 Int)
(declare-const my_vectors__v__insert__2__container__fields us_split_fields)
(declare-const result14 us_split_fields__ref)
(declare-const l__split_fields13 us_split_fields)
(declare-const my_vectors__v__insert__3__container__fields us_split_fields)
(declare-const result15 us_split_fields__ref)
(declare-const l__split_fields14 us_split_fields)
(define-fun my_vectors__v__delete_last__container__fields1 () us_split_fields (mk___split_fields my_vectors__v__delete_last__container__fields))
(define-fun l__split_fields15 () us_split_fields (mk___split_fields l__split_fields2))
(define-fun my_vectors__v__append__3__container__fields1 () us_split_fields (mk___split_fields my_vectors__v__append__3__container__fields))
(define-fun l__split_fields16 () us_split_fields (mk___split_fields l__split_fields1))
(define-fun my_vectors__v__append__2__container__fields1 () us_split_fields (mk___split_fields my_vectors__v__append__2__container__fields))
(assert (and (= us 10) (in_range5 10)))
(assert (default_initial_assumption (mk___rep l__split_discrs (mk___split_fields l__split_fields)) false))
(assert (= 10 (to_rep (rec__my_vectors__v__vector__capacity l__split_discrs))))
(assert (and (= us1 10) (in_range5 10)))
(assert (default_initial_assumption1 (mk___rep k__split_discrs (mk___split_fields k__split_fields)) false))
(assert (= 10 (to_rep (rec__my_vectors__v__vector__capacity k__split_discrs))))
(assert (= result c))
(assert (= c1 0))
(assert (in_range2 c1))
(assert (= (is_empty (mk___rep l__split_discrs (mk___split_fields l__split_fields))) true))
(assert (and (and (= (length (mk___rep l__split_discrs my_vectors__v__append__2__container__fields1)) (+ (length (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 1)) (= (olt (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (model__ (mk___rep l__split_discrs my_vectors__v__append__2__container__fields1))) true)) (= (get (model__ (mk___rep l__split_discrs my_vectors__v__append__2__container__fields1)) (+ (last (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields)))) 1)) 10)))
(assert (= (mk___split_fields__ref (mk___split_fields result1)) (mk___split_fields__ref (mk___split_fields l__split_fields))))
(assert (= l__split_fields16 my_vectors__v__append__2__container__fields1))
(assert (and (and (= (length (mk___rep l__split_discrs my_vectors__v__append__3__container__fields1)) (+ (length (mk___rep l__split_discrs l__split_fields16)) 4)) (= (ole (model__ (mk___rep l__split_discrs l__split_fields16)) (model__ (mk___rep l__split_discrs my_vectors__v__append__3__container__fields1))) true)) (=> (< 0 4) (= (constant_range (model__ (mk___rep l__split_discrs my_vectors__v__append__3__container__fields1)) (+ (last (model__ (mk___rep l__split_discrs l__split_fields16))) 1) (+ (last (model__ (mk___rep l__split_discrs l__split_fields16))) 4) 9) true))))
(assert (= result2 l__split_fields1))
(assert (= l__split_fields15 my_vectors__v__append__3__container__fields1))
(assert (and (= (length (mk___rep l__split_discrs my_vectors__v__delete_last__container__fields1)) (- (length (mk___rep l__split_discrs l__split_fields15)) 1)) (= (olt (model__ (mk___rep l__split_discrs my_vectors__v__delete_last__container__fields1)) (model__ (mk___rep l__split_discrs l__split_fields15))) true)))
(assert (= result3 l__split_fields2))
(assert (= l__split_fields3 my_vectors__v__delete_last__container__fields1))
(assert (< 3 (length (mk___rep l__split_discrs l__split_fields3))))
(assert (ite (= (<= (length (mk___rep l__split_discrs l__split_fields3)) 3) true) (= (length (mk___rep l__split_discrs my_vectors__v__delete_last__2__container__fields)) 0) (and (= (length (mk___rep l__split_discrs my_vectors__v__delete_last__2__container__fields)) (- (length (mk___rep l__split_discrs l__split_fields3)) 3)) (= (ole (model__ (mk___rep l__split_discrs my_vectors__v__delete_last__2__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields3))) true))))
(assert (= result4 (mk___split_fields__ref l__split_fields3)))
(assert (= l__split_fields4 my_vectors__v__delete_last__2__container__fields))
(assert (<= (length (mk___rep l__split_discrs l__split_fields4)) 3))
(assert (ite (= (<= (length (mk___rep l__split_discrs l__split_fields4)) 3) true) (= (length (mk___rep l__split_discrs my_vectors__v__delete_last__2__container__fields1)) 0) (and (= (length (mk___rep l__split_discrs my_vectors__v__delete_last__2__container__fields1)) (- (length (mk___rep l__split_discrs l__split_fields4)) 3)) (= (ole (model__ (mk___rep l__split_discrs my_vectors__v__delete_last__2__container__fields1)) (model__ (mk___rep l__split_discrs l__split_fields4))) true))))
(assert (= result5 (mk___split_fields__ref l__split_fields4)))
(assert (= l__split_fields5 my_vectors__v__delete_last__2__container__fields1))
(assert (= (length (mk___rep l__split_discrs my_vectors__v__clear__container__fields)) 0))
(assert (= result6 (mk___split_fields__ref l__split_fields5)))
(assert (= l__split_fields6 my_vectors__v__clear__container__fields))
(assert (and (and (= (length (mk___rep l__split_discrs my_vectors__v__prepend__2__container__fields)) (+ (length (mk___rep l__split_discrs l__split_fields6)) 1)) (= (get (model__ (mk___rep l__split_discrs my_vectors__v__prepend__2__container__fields)) 1) 10)) (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields6)) (model__ (mk___rep l__split_discrs my_vectors__v__prepend__2__container__fields)) 1 (last (model__ (mk___rep l__split_discrs l__split_fields6))) 1) true)))
(assert (= result7 (mk___split_fields__ref l__split_fields6)))
(assert (= l__split_fields7 my_vectors__v__prepend__2__container__fields))
(assert (and (and (= (length (mk___rep l__split_discrs my_vectors__v__prepend__3__container__fields)) (+ (length (mk___rep l__split_discrs l__split_fields7)) 4)) (= (constant_range (model__ (mk___rep l__split_discrs my_vectors__v__prepend__3__container__fields)) 1 (+ 1 (- 4 1)) 9) true)) (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields7)) (model__ (mk___rep l__split_discrs my_vectors__v__prepend__3__container__fields)) 1 (last (model__ (mk___rep l__split_discrs l__split_fields7))) 4) true)))
(assert (= result8 (mk___split_fields__ref l__split_fields7)))
(assert (= l__split_fields8 my_vectors__v__prepend__3__container__fields))
(assert (and (= (length (mk___rep l__split_discrs my_vectors__v__delete_first__container__fields)) (- (length (mk___rep l__split_discrs l__split_fields8)) 1)) (= (range_shifted (model__ (mk___rep l__split_discrs my_vectors__v__delete_first__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields8)) 1 (last (model__ (mk___rep l__split_discrs my_vectors__v__delete_first__container__fields))) 1) true)))
(assert (= result9 (mk___split_fields__ref l__split_fields8)))
(assert (= l__split_fields9 my_vectors__v__delete_first__container__fields))
(assert (< 3 (length (mk___rep l__split_discrs l__split_fields9))))
(assert (ite (= (<= (length (mk___rep l__split_discrs l__split_fields9)) 3) true) (= (length (mk___rep l__split_discrs my_vectors__v__delete_first__2__container__fields)) 0) (and (= (length (mk___rep l__split_discrs my_vectors__v__delete_first__2__container__fields)) (- (length (mk___rep l__split_discrs l__split_fields9)) 3)) (= (range_shifted (model__ (mk___rep l__split_discrs my_vectors__v__delete_first__2__container__fields)) (model__ (mk___rep l__split_discrs l__split_fields9)) 1 (last (model__ (mk___rep l__split_discrs my_vectors__v__delete_first__2__container__fields))) 3) true))))
(assert (= result10 (mk___split_fields__ref l__split_fields9)))
(assert (= l__split_fields10 my_vectors__v__delete_first__2__container__fields))
(assert (<= (length (mk___rep l__split_discrs l__split_fields10)) 3))
(assert (ite (= (<= (length (mk___rep l__split_discrs l__split_fields10)) 3) true) (= (length (mk___rep l__split_discrs my_vectors__v__delete_first__2__container__fields1)) 0) (and (= (length (mk___rep l__split_discrs my_vectors__v__delete_first__2__container__fields1)) (- (length (mk___rep l__split_discrs l__split_fields10)) 3)) (= (range_shifted (model__ (mk___rep l__split_discrs my_vectors__v__delete_first__2__container__fields1)) (model__ (mk___rep l__split_discrs l__split_fields10)) 1 (last (model__ (mk___rep l__split_discrs my_vectors__v__delete_first__2__container__fields1))) 3) true))))
(assert (= result11 (mk___split_fields__ref l__split_fields10)))
(assert (= l__split_fields11 my_vectors__v__delete_first__2__container__fields1))
(assert (= (length (mk___rep l__split_discrs my_vectors__v__clear__container__fields1)) 0))
(assert (= result12 (mk___split_fields__ref l__split_fields11)))
(assert (= l__split_fields12 my_vectors__v__clear__container__fields1))
(assert (= result13 (mk_int__ref c1)))
(assert (= c2 1))
(assert (and (= o c2) (in_range4 c2)))
(assert (and (and (and (= (length (mk___rep l__split_discrs my_vectors__v__insert__2__container__fields)) (+ (length (mk___rep l__split_discrs l__split_fields12)) 1)) (= (range_equal (model__ (mk___rep l__split_discrs l__split_fields12)) (model__ (mk___rep l__split_discrs my_vectors__v__insert__2__container__fields)) 1 (- o 1)) true)) (= (get (model__ (mk___rep l__split_discrs my_vectors__v__insert__2__container__fields)) o) 8)) (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields12)) (model__ (mk___rep l__split_discrs my_vectors__v__insert__2__container__fields)) o (last (model__ (mk___rep l__split_discrs l__split_fields12))) 1) true)))
(assert (= result14 (mk___split_fields__ref l__split_fields12)))
(assert (= l__split_fields13 my_vectors__v__insert__2__container__fields))
(assert (and (= o1 c2) (in_range4 c2)))
(assert (and (and (and (= (length (mk___rep l__split_discrs my_vectors__v__insert__3__container__fields)) (+ (length (mk___rep l__split_discrs l__split_fields13)) 4)) (= (range_equal (model__ (mk___rep l__split_discrs l__split_fields13)) (model__ (mk___rep l__split_discrs my_vectors__v__insert__3__container__fields)) 1 (- o1 1)) true)) (=> (< 0 4) (= (constant_range (model__ (mk___rep l__split_discrs my_vectors__v__insert__3__container__fields)) o1 (+ o1 (- 4 1)) 7) true))) (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields13)) (model__ (mk___rep l__split_discrs my_vectors__v__insert__3__container__fields)) o1 (last (model__ (mk___rep l__split_discrs l__split_fields13))) 4) true)))
(assert (= result15 (mk___split_fields__ref l__split_fields13)))
(assert (= l__split_fields14 my_vectors__v__insert__3__container__fields))
(assert (not (= (is_empty (mk___rep l__split_discrs l__split_fields14)) true)))
(assert (and (= o2 (last (model__ (mk___rep l__split_discrs l__split_fields14)))) (and (in_range4 o2) (= o2 (last (model__ (mk___rep l__split_discrs l__split_fields14)))))))
(assert (= o3 (- o2 1)))
(assert (not (in_range2 o3)))
(check-sat)
(exit)
