(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic qf1 : int -> int

logic qf1__function_guard : int, int -> prop

axiom qf1__post_axiom :
  (forall j:int [qf1(j)]. (in_range(j) -> in_range(qf1(j))))

type t1

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t1, t1 -> bool

logic dummy1 : t1

type t1__ref = { t1__content : t1
}

function t1__ref___projection(a: t1__ref) : t1 = (a).t1__content

logic to_rep1 : t1 -> int

logic of_rep1 : int -> t1

axiom inversion_axiom1 :
  (forall x:t1 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:t1 [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t3

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : t3, t3 -> bool

logic dummy2 : t3

type t3__ref = { t3__content : t3
}

function t3__ref___projection(a: t3__ref) : t3 = (a).t3__content

logic to_rep2 : t3 -> int

logic of_rep2 : int -> t3

axiom inversion_axiom2 :
  (forall x:t3 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:t3 [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__q__p1__r__a : t1; rec__q__p1__r__b : bool;
rec__q__p1__r__c : t3; rec__q__p1__r__d : integer
}

function us_split_fields_A__projection(a: us_split_fields) : t1 =
  (a).rec__q__p1__r__a

function us_split_fields_B__projection(a: us_split_fields) : bool =
  (a).rec__q__p1__r__b

function us_split_fields_C__projection(a: us_split_fields) : t3 =
  (a).rec__q__p1__r__c

function us_split_fields_D__projection(a: us_split_fields) : integer =
  (a).rec__q__p1__r__d

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((((to_rep1(((a).us_split_fields1).rec__q__p1__r__a) = to_rep1(((b).us_split_fields1).rec__q__p1__r__a)) and
  (((a).us_split_fields1).rec__q__p1__r__b = ((b).us_split_fields1).rec__q__p1__r__b)) and
  (to_rep2(((a).us_split_fields1).rec__q__p1__r__c) = to_rep2(((b).us_split_fields1).rec__q__p1__r__c))) and
  (to_rep(((a).us_split_fields1).rec__q__p1__r__d) = to_rep(((b).us_split_fields1).rec__q__p1__r__d))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields1).rec__q__p1__r__a) = to_rep1(((b).us_split_fields1).rec__q__p1__r__a)) and
  (((a).us_split_fields1).rec__q__p1__r__b = ((b).us_split_fields1).rec__q__p1__r__b)) and
  (to_rep2(((a).us_split_fields1).rec__q__p1__r__c) = to_rep2(((b).us_split_fields1).rec__q__p1__r__c))) and
  (to_rep(((a).us_split_fields1).rec__q__p1__r__d) = to_rep(((b).us_split_fields1).rec__q__p1__r__d)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:t1. forall a1:bool. forall a2:t3. forall a3:integer.
  (0 <= object__size({ us_split_fields1 = { rec__q__p1__r__a = a;
  rec__q__p1__r__b = a1; rec__q__p1__r__c = a2; rec__q__p1__r__d = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:t1. forall a1:bool. forall a2:t3. forall a3:integer.
  (0 <= object__alignment({ us_split_fields1 = { rec__q__p1__r__a = a;
  rec__q__p1__r__b = a1; rec__q__p1__r__c = a2; rec__q__p1__r__d = a3 } })))

logic q__p1__r__a__first__bit : int

logic q__p1__r__a__last__bit : int

logic q__p1__r__a__position : int

axiom q__p1__r__a__first__bit_axiom : (0 <= q__p1__r__a__first__bit)

axiom q__p1__r__a__last__bit_axiom :
  (q__p1__r__a__first__bit <  q__p1__r__a__last__bit)

axiom q__p1__r__a__position_axiom : (0 <= q__p1__r__a__position)

logic q__p1__r__b__first__bit : int

logic q__p1__r__b__last__bit : int

logic q__p1__r__b__position : int

axiom q__p1__r__b__first__bit_axiom : (0 <= q__p1__r__b__first__bit)

axiom q__p1__r__b__last__bit_axiom :
  (q__p1__r__b__first__bit <  q__p1__r__b__last__bit)

axiom q__p1__r__b__position_axiom : (0 <= q__p1__r__b__position)

logic q__p1__r__c__first__bit : int

logic q__p1__r__c__last__bit : int

logic q__p1__r__c__position : int

axiom q__p1__r__c__first__bit_axiom : (0 <= q__p1__r__c__first__bit)

axiom q__p1__r__c__last__bit_axiom :
  (q__p1__r__c__first__bit <  q__p1__r__c__last__bit)

axiom q__p1__r__c__position_axiom : (0 <= q__p1__r__c__position)

logic q__p1__r__d__first__bit : int

logic q__p1__r__d__last__bit : int

logic q__p1__r__d__position : int

axiom q__p1__r__d__first__bit_axiom : (0 <= q__p1__r__d__first__bit)

axiom q__p1__r__d__last__bit_axiom :
  (q__p1__r__d__first__bit <  q__p1__r__d__last__bit)

axiom q__p1__r__d__position_axiom : (0 <= q__p1__r__d__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : t1

logic dummy4 : bool

logic dummy5 : t3

logic dummy6 : integer

type r__ref = { r__content : us_rep
}

function r__ref___projection(a: r__ref) : us_rep = (a).r__content

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic c : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "p.ads", line 16, characters 0-0 *)
goal WP_parameter_def :
  (forall tmp:int. forall o:int. forall o1:int. forall o2:int. forall o3:int.
  forall result:int. forall tmp1:int. (in_range1(a) -> (in_range2(c) ->
  ((((- 2147483648) <= 2147483647) -> in_range(tmp)) -> (((result = tmp) and
  (tmp1 = 1)) -> ((((((o = qf1(2)) and in_range(o)) and
  (o1 = (tmp1 + o))) and ((o2 = o1) and in_range(o1))) and
  (o3 = (o2 + 7))) -> in_range(o3)))))))
