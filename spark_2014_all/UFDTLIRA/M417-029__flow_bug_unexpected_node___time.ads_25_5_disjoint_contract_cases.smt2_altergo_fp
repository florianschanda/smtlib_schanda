(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type minutes_t

predicate in_range3(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : minutes_t, minutes_t -> bool

logic dummy2 : minutes_t

type minutes_t__ref = { minutes_t__content : minutes_t
}

function minutes_t__ref___projection(a: minutes_t__ref) : minutes_t =
  (a).minutes_t__content

logic to_rep1 : minutes_t -> int

logic of_rep1 : int -> minutes_t

axiom inversion_axiom1 :
  (forall x:minutes_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:minutes_t [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type seconds_t

predicate in_range4(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : seconds_t, seconds_t -> bool

logic dummy3 : seconds_t

type seconds_t__ref = { seconds_t__content : seconds_t
}

function seconds_t__ref___projection(a: seconds_t__ref) : seconds_t =
  (a).seconds_t__content

logic to_rep2 : seconds_t -> int

logic of_rep2 : int -> seconds_t

axiom inversion_axiom2 :
  (forall x:seconds_t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:seconds_t [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__time__t__hours : natural; rec__time__t__minutes
: minutes_t; rec__time__t__seconds : seconds_t
}

function us_split_fields_Hours__projection(a: us_split_fields) : natural =
  (a).rec__time__t__hours

function us_split_fields_Minutes__projection(a: us_split_fields) : minutes_t =
  (a).rec__time__t__minutes

function us_split_fields_Seconds__projection(a: us_split_fields) : seconds_t =
  (a).rec__time__t__seconds

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__time__t__hours) = to_rep(((b).us_split_fields1).rec__time__t__hours)) and
  (to_rep1(((a).us_split_fields1).rec__time__t__minutes) = to_rep1(((b).us_split_fields1).rec__time__t__minutes))) and
  (to_rep2(((a).us_split_fields1).rec__time__t__seconds) = to_rep2(((b).us_split_fields1).rec__time__t__seconds))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__time__t__hours) = to_rep(((b).us_split_fields1).rec__time__t__hours)) and
  (to_rep1(((a).us_split_fields1).rec__time__t__minutes) = to_rep1(((b).us_split_fields1).rec__time__t__minutes))) and
  (to_rep2(((a).us_split_fields1).rec__time__t__seconds) = to_rep2(((b).us_split_fields1).rec__time__t__seconds)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:minutes_t. forall a2:seconds_t.
  (0 <= object__size({ us_split_fields1 = { rec__time__t__hours = a;
  rec__time__t__minutes = a1; rec__time__t__seconds = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:minutes_t. forall a2:seconds_t.
  (0 <= object__alignment({ us_split_fields1 = { rec__time__t__hours = a;
  rec__time__t__minutes = a1; rec__time__t__seconds = a2 } })))

logic time__t__hours__first__bit : int

logic time__t__hours__last__bit : int

logic time__t__hours__position : int

axiom time__t__hours__first__bit_axiom : (0 <= time__t__hours__first__bit)

axiom time__t__hours__last__bit_axiom :
  (time__t__hours__first__bit <  time__t__hours__last__bit)

axiom time__t__hours__position_axiom : (0 <= time__t__hours__position)

logic time__t__minutes__first__bit : int

logic time__t__minutes__last__bit : int

logic time__t__minutes__position : int

axiom time__t__minutes__first__bit_axiom :
  (0 <= time__t__minutes__first__bit)

axiom time__t__minutes__last__bit_axiom :
  (time__t__minutes__first__bit <  time__t__minutes__last__bit)

axiom time__t__minutes__position_axiom : (0 <= time__t__minutes__position)

logic time__t__seconds__first__bit : int

logic time__t__seconds__last__bit : int

logic time__t__seconds__position : int

axiom time__t__seconds__first__bit_axiom :
  (0 <= time__t__seconds__first__bit)

axiom time__t__seconds__last__bit_axiom :
  (time__t__seconds__first__bit <  time__t__seconds__last__bit)

axiom time__t__seconds__position_axiom : (0 <= time__t__seconds__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : natural

logic dummy5 : minutes_t

logic dummy6 : seconds_t

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic max : natural

logic max1 : minutes_t

logic max2 : seconds_t

logic attr__ATTRIBUTE_ADDRESS : int

logic x : natural

logic x1 : minutes_t

logic x2 : seconds_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom max__def_axiom : ((max = of_rep(2147483647)) and
  ((max1 = of_rep1(59)) and (max2 = of_rep2(59))))

 (* File "time.ads", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall o:seconds_t. forall o1:minutes_t. forall o2:natural.
  forall o3:natural. forall o4:minutes_t. forall o5:seconds_t.
  forall temp___191:natural. forall temp___1911:minutes_t.
  forall temp___1912:seconds_t. (((((to_rep2(o) = 59) and
  ((to_rep1(o1) = 59) and ((to_rep(o2) = 2147483647) and ((o2 = o3) and
  ((o1 = o4) and (o = o5)))))) and ((temp___191 = o3) and
  ((temp___1911 = o4) and (temp___1912 = o5)))) and ((temp___191 = max) and
  ((temp___1911 = max1) and (temp___1912 = max2)))) -> ((not (bool_eq6({
  us_split_fields1 = { rec__time__t__hours = x; rec__time__t__minutes = x1;
  rec__time__t__seconds = x2 } }, { us_split_fields1 = {
  rec__time__t__hours = max; rec__time__t__minutes = max1;
  rec__time__t__seconds = max2 } }) = true)) -> (((bool_lt(to_rep2(x2),
  59) = true) -> (((match_bool(bool_eq(to_rep2(x2), 59), bool_lt(to_rep1(x1),
  59), false) = true) -> (((match_bool(bool_eq(to_rep2(x2), 59),
  bool_eq(to_rep1(x1), 59), false) = true) -> ((((0 + 1) + 1) + 1) <= 1)) and
  ((not (match_bool(bool_eq(to_rep2(x2), 59), bool_eq(to_rep1(x1), 59),
  false) = true)) -> ((((0 + 1) + 1) + 0) <= 1)))) and
  ((not (match_bool(bool_eq(to_rep2(x2), 59), bool_lt(to_rep1(x1), 59),
  false) = true)) -> (((match_bool(bool_eq(to_rep2(x2), 59),
  bool_eq(to_rep1(x1), 59), false) = true) -> ((((0 + 1) + 0) + 1) <= 1)) and
  ((not (match_bool(bool_eq(to_rep2(x2), 59), bool_eq(to_rep1(x1), 59),
  false) = true)) -> ((((0 + 1) + 0) + 0) <= 1)))))) and
  ((not (bool_lt(to_rep2(x2), 59) = true)) ->
  (((match_bool(bool_eq(to_rep2(x2), 59), bool_lt(to_rep1(x1), 59),
  false) = true) -> (((match_bool(bool_eq(to_rep2(x2), 59),
  bool_eq(to_rep1(x1), 59), false) = true) -> ((((0 + 0) + 1) + 1) <= 1)) and
  ((not (match_bool(bool_eq(to_rep2(x2), 59), bool_eq(to_rep1(x1), 59),
  false) = true)) -> ((((0 + 0) + 1) + 0) <= 1)))) and
  ((not (match_bool(bool_eq(to_rep2(x2), 59), bool_lt(to_rep1(x1), 59),
  false) = true)) -> (((match_bool(bool_eq(to_rep2(x2), 59),
  bool_eq(to_rep1(x1), 59), false) = true) -> ((((0 + 0) + 0) + 1) <= 1)) and
  ((not (match_bool(bool_eq(to_rep2(x2), 59), bool_eq(to_rep1(x1), 59),
  false) = true)) -> ((((0 + 0) + 0) + 0) <= 1))))))))))
