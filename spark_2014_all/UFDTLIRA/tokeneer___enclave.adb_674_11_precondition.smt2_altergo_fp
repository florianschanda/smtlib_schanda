(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type privileget

predicate in_range1(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : privileget, privileget -> bool

logic dummy : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep : privileget -> int

logic of_rep : int -> privileget

axiom inversion_axiom :
  (forall x:privileget [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:privileget [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type opandnullt

predicate in_range2(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : opandnullt, opandnullt -> bool

logic dummy1 : opandnullt

type opandnullt__ref = { opandnullt__content : opandnullt
}

function opandnullt__ref___projection(a: opandnullt__ref) : opandnullt =
  (a).opandnullt__content

logic to_rep1 : opandnullt -> int

logic of_rep1 : int -> opandnullt

axiom inversion_axiom1 :
  (forall x:opandnullt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:opandnullt [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__admin__t__rolepresent : privileget;
rec__admin__t__currentop : opandnullt
}

function us_split_fields_RolePresent__projection(a: us_split_fields) : privileget =
  (a).rec__admin__t__rolepresent

function us_split_fields_CurrentOp__projection(a: us_split_fields) : opandnullt =
  (a).rec__admin__t__currentop

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep1(((a).us_split_fields1).rec__admin__t__currentop) = to_rep1(((b).us_split_fields1).rec__admin__t__currentop))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep1(((a).us_split_fields1).rec__admin__t__currentop) = to_rep1(((b).us_split_fields1).rec__admin__t__currentop)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__size({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__alignment({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

logic admin__t__rolepresent__first__bit : int

logic admin__t__rolepresent__last__bit : int

logic admin__t__rolepresent__position : int

axiom admin__t__rolepresent__first__bit_axiom :
  (0 <= admin__t__rolepresent__first__bit)

axiom admin__t__rolepresent__last__bit_axiom :
  (admin__t__rolepresent__first__bit <  admin__t__rolepresent__last__bit)

axiom admin__t__rolepresent__position_axiom :
  (0 <= admin__t__rolepresent__position)

logic admin__t__currentop__first__bit : int

logic admin__t__currentop__last__bit : int

logic admin__t__currentop__position : int

axiom admin__t__currentop__first__bit_axiom :
  (0 <= admin__t__currentop__first__bit)

axiom admin__t__currentop__last__bit_axiom :
  (admin__t__currentop__first__bit <  admin__t__currentop__last__bit)

axiom admin__t__currentop__position_axiom :
  (0 <= admin__t__currentop__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : privileget

logic dummy3 : opandnullt

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic rolepresent : us_rep -> int

logic rolepresent__function_guard : int, us_rep -> prop

axiom rolepresent__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. in_range1(rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })))

logic isdoingop : us_rep -> bool

logic isdoingop__function_guard : bool, us_rep -> prop

axiom isdoingop__post_axiom : true

logic thecurrentop : us_rep -> int

logic thecurrentop__function_guard : int, us_rep -> prop

type opt

predicate in_range3(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : opt, opt -> bool

logic dummy4 : opt

type opt__ref = { opt__content : opt
}

function opt__ref___projection(a: opt__ref) : opt = (a).opt__content

axiom thecurrentop__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [thecurrentop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) ->
  in_range3(thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }))))

logic ispresent : us_rep -> bool

logic ispresent__function_guard : bool, us_rep -> prop

axiom ispresent__post_axiom : true

logic theauthcertrole : us_private -> int

logic theauthcertrole__function_guard : int, us_private -> prop

axiom theauthcertrole__post_axiom :
  (forall admintoken__state:us_private [theauthcertrole(admintoken__state)].
  in_range1(theauthcertrole(admintoken__state)))

logic isgood : us_private -> bool

logic isgood__function_guard : bool, us_private -> prop

axiom isgood__post_axiom : true

logic authcertvalid : us_private -> bool

logic authcertvalid__function_guard : bool, us_private -> prop

axiom authcertvalid__post_axiom : true

type statust

predicate in_range4(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : statust, statust -> bool

logic dummy5 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___2__projection(a: statust__ref) : statust =
  (a).statust__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "enclave.ads", line 50, characters 0-0 *)
goal WP_parameter_def :
  (forall status:int. forall theadmin__split_fields:privileget.
  forall theadmin__split_fields1:opandnullt. forall state:us_private.
  forall o:int. forall o1:bool. forall o2:bool. forall o3:int.
  forall o4:bool. forall o5:bool. forall o6:bool. forall o7:int.
  forall o8:bool. forall o9:bool. forall o10:int. forall o11:bool.
  forall o12:int. forall o13:int. forall o14:bool. forall o15:bool.
  forall o16:bool. forall o17:bool. forall o18:bool. forall o19:bool.
  forall result:bool. forall result1:bool. forall result2:bool.
  (in_range4(status) -> (((((o12 = rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  in_range1(o12)) and (((o12 = 1) and (result = true)) or
  ((not (o12 = 1)) and (result = false)))) and (((result = true) and
  (((o16 = isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } })) and (((not (o16 = true)) and (o17 = true)) or ((o16 = true) and
  (o17 = false)))) and (((((o13 = thecurrentop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  in_range3(o13)) and (((o13 = 3) and (o14 = true)) or ((not (o13 = 3)) and
  (o14 = false)))) and ((o15 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  (o18 = match_bool(o15, o14, false)))) and (o19 = match_bool(o18, true,
  o17))))) or ((not (result = true)) and (o19 = of_int(1))))) ->
  ((((((o7 = thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } })) and in_range3(o7)) and (((o7 = 3) and (o8 = true)) or
  ((not (o7 = 3)) and (o8 = false)))) and ((o9 = isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  (result1 = match_bool(o9, o8, false)))) and (((result1 = true) and
  (((o10 = rolepresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } })) and in_range1(o10)) and (((o10 = 1) and (o11 = true)) or
  ((not (o10 = 1)) and (o11 = false))))) or ((not (result1 = true)) and
  (o11 = of_int(1))))) -> (((((o = rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  in_range1(o)) and (((o = 1) and (result2 = true)) or ((not (o = 1)) and
  (result2 = false)))) and (((result2 = true) and
  ((((o3 = theauthcertrole(state)) and in_range1(o3)) and (((o3 = 1) and
  (o4 = true)) or ((not (o3 = 1)) and (o4 = false)))) and
  (((o1 = authcertvalid(state)) and ((o2 = isgood(state)) and
  (o5 = match_bool(o2, o1, false)))) and (o6 = match_bool(o5, o4,
  false))))) or ((not (result2 = true)) and (o6 = of_int(1))))) ->
  (isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true))))))
