(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic g1 : unit -> int

logic g1__function_guard : int, unit -> prop

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

axiom g1__post_axiom : in_range(g1(void))

axiom g1__def_axiom : (g1(void) = 1)

logic g2 : unit -> int

logic g2__function_guard : int, unit -> prop

axiom g2__post_axiom : in_range(g2(void))

logic g3 : unit -> int

logic g3__function_guard : int, unit -> prop

axiom g3__post_axiom : in_range(g3(void))

logic g4 : unit -> int

logic g4__function_guard : int, unit -> prop

axiom g4__post_axiom : in_range(g4(void))

axiom g4__def_axiom : (g4(void) = ((g1(void) + g3(void)) - 1))

logic f1 : unit -> int

logic f1__function_guard : int, unit -> prop

axiom f1__post_axiom : in_range(f1(void))

axiom f1__def_axiom : (f1(void) = 1)

logic f2 : unit -> int

logic f2__function_guard : int, unit -> prop

axiom f2__post_axiom : in_range(f2(void))

axiom f2__def_axiom : (f2(void) = ((f1(void) + g1(void)) - 1))

logic f3 : unit -> int

logic f3__function_guard : int, unit -> prop

axiom f3__post_axiom : in_range(f3(void))

logic f4 : unit -> int

logic f4__function_guard : int, unit -> prop

axiom f4__post_axiom : in_range(f4(void))

axiom f4__def_axiom : (f4(void) = ((f3(void) + g3(void)) - 1))

logic value : unit -> int

logic value__function_guard : int, unit -> prop

axiom value__post_axiom : in_range(value(void))

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : bool

logic result6 : bool

logic result7 : bool

axiom H : ((o = value(void)) and in_range(o))

axiom H1 : (((o = 0) -> (result = true)) and ((not (o = 0)) ->
  (result = false)))

axiom H2 : (not (result = true))

axiom H3 : ((o1 = value(void)) and in_range(o1))

axiom H4 : (((o1 = 1) -> (result1 = true)) and ((not (o1 = 1)) ->
  (result1 = false)))

axiom H5 : (not (result1 = true))

axiom H6 : ((o2 = value(void)) and in_range(o2))

axiom H7 : (((o2 = 2) -> (result2 = true)) and ((not (o2 = 2)) ->
  (result2 = false)))

axiom H8 : (result2 = true)

 (* File "private_main.adb", line 4, characters 0-0 *)
goal WP_parameter_def : (f3(void) = 1)
