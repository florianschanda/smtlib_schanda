(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type type_0

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : type_0, type_0 -> bool

logic dummy : type_0

type type_0__ref = { type_0__content : type_0
}

function type_0__ref___projection(a: type_0__ref) : type_0 =
  (a).type_0__content

logic to_rep : type_0 -> int

logic of_rep : int -> type_0

axiom inversion_axiom :
  (forall x:type_0 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:type_0 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p__type_1__field_0 : type_0;
rec__p__type_1__field_1 : type_0; rec__p__type_1__field_2 : type_0;
rec__p__type_1__field_3 : type_0; rec__p__type_1__field_4 : type_0;
rec__p__type_1__field_5 : type_0; rec__p__type_1__field_6 : type_0;
rec__p__type_1__field_7 : type_0
}

function us_split_fields_Field_0__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_0

function us_split_fields_Field_1__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_1

function us_split_fields_Field_2__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_2

function us_split_fields_Field_3__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_3

function us_split_fields_Field_4__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_4

function us_split_fields_Field_5__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_5

function us_split_fields_Field_6__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_6

function us_split_fields_Field_7__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_7

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((((((((to_rep(((a).us_split_fields1).rec__p__type_1__field_0) = to_rep(((b).us_split_fields1).rec__p__type_1__field_0)) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_1) = to_rep(((b).us_split_fields1).rec__p__type_1__field_1))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_2) = to_rep(((b).us_split_fields1).rec__p__type_1__field_2))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_3) = to_rep(((b).us_split_fields1).rec__p__type_1__field_3))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_4) = to_rep(((b).us_split_fields1).rec__p__type_1__field_4))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_5) = to_rep(((b).us_split_fields1).rec__p__type_1__field_5))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_6) = to_rep(((b).us_split_fields1).rec__p__type_1__field_6))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_7) = to_rep(((b).us_split_fields1).rec__p__type_1__field_7))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((((((((to_rep(((a).us_split_fields1).rec__p__type_1__field_0) = to_rep(((b).us_split_fields1).rec__p__type_1__field_0)) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_1) = to_rep(((b).us_split_fields1).rec__p__type_1__field_1))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_2) = to_rep(((b).us_split_fields1).rec__p__type_1__field_2))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_3) = to_rep(((b).us_split_fields1).rec__p__type_1__field_3))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_4) = to_rep(((b).us_split_fields1).rec__p__type_1__field_4))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_5) = to_rep(((b).us_split_fields1).rec__p__type_1__field_5))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_6) = to_rep(((b).us_split_fields1).rec__p__type_1__field_6))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_7) = to_rep(((b).us_split_fields1).rec__p__type_1__field_7)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:type_0. forall a1:type_0. forall a2:type_0. forall a3:type_0.
  forall a4:type_0. forall a5:type_0. forall a6:type_0. forall a7:type_0.
  (0 <= object__size({ us_split_fields1 = { rec__p__type_1__field_0 = a;
  rec__p__type_1__field_1 = a1; rec__p__type_1__field_2 = a2;
  rec__p__type_1__field_3 = a3; rec__p__type_1__field_4 = a4;
  rec__p__type_1__field_5 = a5; rec__p__type_1__field_6 = a6;
  rec__p__type_1__field_7 = a7 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:type_0. forall a1:type_0. forall a2:type_0. forall a3:type_0.
  forall a4:type_0. forall a5:type_0. forall a6:type_0. forall a7:type_0.
  (0 <= object__alignment({ us_split_fields1 = { rec__p__type_1__field_0 = a;
  rec__p__type_1__field_1 = a1; rec__p__type_1__field_2 = a2;
  rec__p__type_1__field_3 = a3; rec__p__type_1__field_4 = a4;
  rec__p__type_1__field_5 = a5; rec__p__type_1__field_6 = a6;
  rec__p__type_1__field_7 = a7 } })))

logic p__type_1__field_0__first__bit : int

logic p__type_1__field_0__last__bit : int

logic p__type_1__field_0__position : int

axiom p__type_1__field_0__first__bit_axiom :
  (0 <= p__type_1__field_0__first__bit)

axiom p__type_1__field_0__last__bit_axiom :
  (p__type_1__field_0__first__bit <  p__type_1__field_0__last__bit)

axiom p__type_1__field_0__position_axiom :
  (0 <= p__type_1__field_0__position)

logic p__type_1__field_1__first__bit : int

logic p__type_1__field_1__last__bit : int

logic p__type_1__field_1__position : int

axiom p__type_1__field_1__first__bit_axiom :
  (0 <= p__type_1__field_1__first__bit)

axiom p__type_1__field_1__last__bit_axiom :
  (p__type_1__field_1__first__bit <  p__type_1__field_1__last__bit)

axiom p__type_1__field_1__position_axiom :
  (0 <= p__type_1__field_1__position)

logic p__type_1__field_2__first__bit : int

logic p__type_1__field_2__last__bit : int

logic p__type_1__field_2__position : int

axiom p__type_1__field_2__first__bit_axiom :
  (0 <= p__type_1__field_2__first__bit)

axiom p__type_1__field_2__last__bit_axiom :
  (p__type_1__field_2__first__bit <  p__type_1__field_2__last__bit)

axiom p__type_1__field_2__position_axiom :
  (0 <= p__type_1__field_2__position)

logic p__type_1__field_3__first__bit : int

logic p__type_1__field_3__last__bit : int

logic p__type_1__field_3__position : int

axiom p__type_1__field_3__first__bit_axiom :
  (0 <= p__type_1__field_3__first__bit)

axiom p__type_1__field_3__last__bit_axiom :
  (p__type_1__field_3__first__bit <  p__type_1__field_3__last__bit)

axiom p__type_1__field_3__position_axiom :
  (0 <= p__type_1__field_3__position)

logic p__type_1__field_4__first__bit : int

logic p__type_1__field_4__last__bit : int

logic p__type_1__field_4__position : int

axiom p__type_1__field_4__first__bit_axiom :
  (0 <= p__type_1__field_4__first__bit)

axiom p__type_1__field_4__last__bit_axiom :
  (p__type_1__field_4__first__bit <  p__type_1__field_4__last__bit)

axiom p__type_1__field_4__position_axiom :
  (0 <= p__type_1__field_4__position)

logic p__type_1__field_5__first__bit : int

logic p__type_1__field_5__last__bit : int

logic p__type_1__field_5__position : int

axiom p__type_1__field_5__first__bit_axiom :
  (0 <= p__type_1__field_5__first__bit)

axiom p__type_1__field_5__last__bit_axiom :
  (p__type_1__field_5__first__bit <  p__type_1__field_5__last__bit)

axiom p__type_1__field_5__position_axiom :
  (0 <= p__type_1__field_5__position)

logic p__type_1__field_6__first__bit : int

logic p__type_1__field_6__last__bit : int

logic p__type_1__field_6__position : int

axiom p__type_1__field_6__first__bit_axiom :
  (0 <= p__type_1__field_6__first__bit)

axiom p__type_1__field_6__last__bit_axiom :
  (p__type_1__field_6__first__bit <  p__type_1__field_6__last__bit)

axiom p__type_1__field_6__position_axiom :
  (0 <= p__type_1__field_6__position)

logic p__type_1__field_7__first__bit : int

logic p__type_1__field_7__last__bit : int

logic p__type_1__field_7__position : int

axiom p__type_1__field_7__first__bit_axiom :
  (0 <= p__type_1__field_7__first__bit)

axiom p__type_1__field_7__last__bit_axiom :
  (p__type_1__field_7__first__bit <  p__type_1__field_7__last__bit)

axiom p__type_1__field_7__position_axiom :
  (0 <= p__type_1__field_7__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : type_0

logic dummy2 : type_0

logic dummy3 : type_0

logic dummy4 : type_0

logic dummy5 : type_0

logic dummy6 : type_0

logic dummy7 : type_0

logic dummy8 : type_0

type type_1__ref = { type_1__content : us_rep
}

function type_1__ref___projection(a: type_1__ref) : us_rep =
  (a).type_1__content

type us_split_fields2 = { rec__p__type_2__field_0 : us_rep;
rec__p__type_2__field_1 : us_rep; rec__p__type_2__field_2 : us_rep;
rec__p__type_2__field_3 : us_rep; rec__p__type_2__field_4 : us_rep
}

function us_split_fields_Field_0__2__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_0

function us_split_fields_Field_1__2__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_1

function us_split_fields_Field_2__2__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_2

function us_split_fields_Field_3__2__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_3

function us_split_fields_Field_4__2__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_4

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  (((((((bool_eq2(((a).us_split_fields3).rec__p__type_2__field_0,
  ((b).us_split_fields3).rec__p__type_2__field_0) = true) and
  (bool_eq2(((a).us_split_fields3).rec__p__type_2__field_1,
  ((b).us_split_fields3).rec__p__type_2__field_1) = true)) and
  (bool_eq2(((a).us_split_fields3).rec__p__type_2__field_2,
  ((b).us_split_fields3).rec__p__type_2__field_2) = true)) and
  (bool_eq2(((a).us_split_fields3).rec__p__type_2__field_3,
  ((b).us_split_fields3).rec__p__type_2__field_3) = true)) and
  (bool_eq2(((a).us_split_fields3).rec__p__type_2__field_4,
  ((b).us_split_fields3).rec__p__type_2__field_4) = true)) -> (bool_eq3(a,
  b) = true)) and
  ((not (((((bool_eq2(((a).us_split_fields3).rec__p__type_2__field_0,
  ((b).us_split_fields3).rec__p__type_2__field_0) = true) and
  (bool_eq2(((a).us_split_fields3).rec__p__type_2__field_1,
  ((b).us_split_fields3).rec__p__type_2__field_1) = true)) and
  (bool_eq2(((a).us_split_fields3).rec__p__type_2__field_2,
  ((b).us_split_fields3).rec__p__type_2__field_2) = true)) and
  (bool_eq2(((a).us_split_fields3).rec__p__type_2__field_3,
  ((b).us_split_fields3).rec__p__type_2__field_3) = true)) and
  (bool_eq2(((a).us_split_fields3).rec__p__type_2__field_4,
  ((b).us_split_fields3).rec__p__type_2__field_4) = true))) -> (bool_eq3(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic p__type_2__field_0__first__bit : int

logic p__type_2__field_0__last__bit : int

logic p__type_2__field_0__position : int

axiom p__type_2__field_0__first__bit_axiom :
  (0 <= p__type_2__field_0__first__bit)

axiom p__type_2__field_0__last__bit_axiom :
  (p__type_2__field_0__first__bit <  p__type_2__field_0__last__bit)

axiom p__type_2__field_0__position_axiom :
  (0 <= p__type_2__field_0__position)

logic p__type_2__field_1__first__bit : int

logic p__type_2__field_1__last__bit : int

logic p__type_2__field_1__position : int

axiom p__type_2__field_1__first__bit_axiom :
  (0 <= p__type_2__field_1__first__bit)

axiom p__type_2__field_1__last__bit_axiom :
  (p__type_2__field_1__first__bit <  p__type_2__field_1__last__bit)

axiom p__type_2__field_1__position_axiom :
  (0 <= p__type_2__field_1__position)

logic p__type_2__field_2__first__bit : int

logic p__type_2__field_2__last__bit : int

logic p__type_2__field_2__position : int

axiom p__type_2__field_2__first__bit_axiom :
  (0 <= p__type_2__field_2__first__bit)

axiom p__type_2__field_2__last__bit_axiom :
  (p__type_2__field_2__first__bit <  p__type_2__field_2__last__bit)

axiom p__type_2__field_2__position_axiom :
  (0 <= p__type_2__field_2__position)

logic p__type_2__field_3__first__bit : int

logic p__type_2__field_3__last__bit : int

logic p__type_2__field_3__position : int

axiom p__type_2__field_3__first__bit_axiom :
  (0 <= p__type_2__field_3__first__bit)

axiom p__type_2__field_3__last__bit_axiom :
  (p__type_2__field_3__first__bit <  p__type_2__field_3__last__bit)

axiom p__type_2__field_3__position_axiom :
  (0 <= p__type_2__field_3__position)

logic p__type_2__field_4__first__bit : int

logic p__type_2__field_4__last__bit : int

logic p__type_2__field_4__position : int

axiom p__type_2__field_4__first__bit_axiom :
  (0 <= p__type_2__field_4__first__bit)

axiom p__type_2__field_4__last__bit_axiom :
  (p__type_2__field_4__first__bit <  p__type_2__field_4__last__bit)

axiom p__type_2__field_4__position_axiom :
  (0 <= p__type_2__field_4__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy9 : type_0

logic dummy10 : type_0

logic dummy11 : type_0

logic dummy12 : type_0

logic dummy13 : type_0

logic dummy14 : type_0

logic dummy15 : type_0

logic dummy16 : type_0

logic dummy17 : type_0

logic dummy18 : type_0

logic dummy19 : type_0

logic dummy20 : type_0

logic dummy21 : type_0

logic dummy22 : type_0

logic dummy23 : type_0

logic dummy24 : type_0

logic dummy25 : type_0

logic dummy26 : type_0

logic dummy27 : type_0

logic dummy28 : type_0

logic dummy29 : type_0

logic dummy30 : type_0

logic dummy31 : type_0

logic dummy32 : type_0

logic dummy33 : type_0

logic dummy34 : type_0

logic dummy35 : type_0

logic dummy36 : type_0

logic dummy37 : type_0

logic dummy38 : type_0

logic dummy39 : type_0

logic dummy40 : type_0

logic dummy41 : type_0

logic dummy42 : type_0

logic dummy43 : type_0

logic dummy44 : type_0

logic dummy45 : type_0

logic dummy46 : type_0

logic dummy47 : type_0

logic dummy48 : type_0

type type_2__ref = { type_2__content : us_rep1
}

function type_2__ref___projection(a: type_2__ref) : us_rep1 =
  (a).type_2__content

logic create_type_2 : unit -> us_rep1

logic create_type_2__function_guard : us_rep1, unit -> prop

logic create_type_1 : unit -> us_rep

logic create_type_1__function_guard : us_rep, unit -> prop

axiom create_type_2__post_axiom :
  ((bool_eq2(((create_type_2(void)).us_split_fields3).rec__p__type_2__field_0,
  create_type_1(void)) = true) and
  ((bool_eq2(((create_type_2(void)).us_split_fields3).rec__p__type_2__field_1,
  create_type_1(void)) = true) and
  ((bool_eq2(((create_type_2(void)).us_split_fields3).rec__p__type_2__field_2,
  create_type_1(void)) = true) and
  ((bool_eq2(((create_type_2(void)).us_split_fields3).rec__p__type_2__field_3,
  create_type_1(void)) = true) and
  (bool_eq2(((create_type_2(void)).us_split_fields3).rec__p__type_2__field_4,
  create_type_1(void)) = true)))))

type type_3

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq3 : type_3, type_3 -> bool

logic dummy49 : type_3

type type_3__ref = { type_3__content : type_3
}

function type_3__ref___projection(a: type_3__ref) : type_3 =
  (a).type_3__content

logic to_rep1 : type_3 -> int

logic of_rep1 : int -> type_3

axiom inversion_axiom1 :
  (forall x:type_3 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:type_3 [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields4 = { rec__p__type_4__field_0 : us_rep;
rec__p__type_4__field_1 : us_rep; rec__p__type_4__field_2 : us_rep1;
rec__p__type_4__field_3 : us_rep1
}

function us_split_fields_Field_0__3__projection(a: us_split_fields4) : us_rep =
  (a).rec__p__type_4__field_0

function us_split_fields_Field_1__3__projection(a: us_split_fields4) : us_rep =
  (a).rec__p__type_4__field_1

function us_split_fields_Field_2__3__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__p__type_4__field_2

function us_split_fields_Field_3__3__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__p__type_4__field_3

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq5 : us_rep2, us_rep2 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq5(a, b)].
  ((((((bool_eq2(((a).us_split_fields5).rec__p__type_4__field_0,
  ((b).us_split_fields5).rec__p__type_4__field_0) = true) and
  (bool_eq2(((a).us_split_fields5).rec__p__type_4__field_1,
  ((b).us_split_fields5).rec__p__type_4__field_1) = true)) and
  (bool_eq3(((a).us_split_fields5).rec__p__type_4__field_2,
  ((b).us_split_fields5).rec__p__type_4__field_2) = true)) and
  (bool_eq3(((a).us_split_fields5).rec__p__type_4__field_3,
  ((b).us_split_fields5).rec__p__type_4__field_3) = true)) -> (bool_eq5(a,
  b) = true)) and
  ((not ((((bool_eq2(((a).us_split_fields5).rec__p__type_4__field_0,
  ((b).us_split_fields5).rec__p__type_4__field_0) = true) and
  (bool_eq2(((a).us_split_fields5).rec__p__type_4__field_1,
  ((b).us_split_fields5).rec__p__type_4__field_1) = true)) and
  (bool_eq3(((a).us_split_fields5).rec__p__type_4__field_2,
  ((b).us_split_fields5).rec__p__type_4__field_2) = true)) and
  (bool_eq3(((a).us_split_fields5).rec__p__type_4__field_3,
  ((b).us_split_fields5).rec__p__type_4__field_3) = true))) -> (bool_eq5(a,
  b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic p__type_4__field_0__first__bit : int

logic p__type_4__field_0__last__bit : int

logic p__type_4__field_0__position : int

axiom p__type_4__field_0__first__bit_axiom :
  (0 <= p__type_4__field_0__first__bit)

axiom p__type_4__field_0__last__bit_axiom :
  (p__type_4__field_0__first__bit <  p__type_4__field_0__last__bit)

axiom p__type_4__field_0__position_axiom :
  (0 <= p__type_4__field_0__position)

logic p__type_4__field_1__first__bit : int

logic p__type_4__field_1__last__bit : int

logic p__type_4__field_1__position : int

axiom p__type_4__field_1__first__bit_axiom :
  (0 <= p__type_4__field_1__first__bit)

axiom p__type_4__field_1__last__bit_axiom :
  (p__type_4__field_1__first__bit <  p__type_4__field_1__last__bit)

axiom p__type_4__field_1__position_axiom :
  (0 <= p__type_4__field_1__position)

logic p__type_4__field_2__first__bit : int

logic p__type_4__field_2__last__bit : int

logic p__type_4__field_2__position : int

axiom p__type_4__field_2__first__bit_axiom :
  (0 <= p__type_4__field_2__first__bit)

axiom p__type_4__field_2__last__bit_axiom :
  (p__type_4__field_2__first__bit <  p__type_4__field_2__last__bit)

axiom p__type_4__field_2__position_axiom :
  (0 <= p__type_4__field_2__position)

logic p__type_4__field_3__first__bit : int

logic p__type_4__field_3__last__bit : int

logic p__type_4__field_3__position : int

axiom p__type_4__field_3__first__bit_axiom :
  (0 <= p__type_4__field_3__first__bit)

axiom p__type_4__field_3__last__bit_axiom :
  (p__type_4__field_3__first__bit <  p__type_4__field_3__last__bit)

axiom p__type_4__field_3__position_axiom :
  (0 <= p__type_4__field_3__position)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy50 : type_0

logic dummy51 : type_0

logic dummy52 : type_0

logic dummy53 : type_0

logic dummy54 : type_0

logic dummy55 : type_0

logic dummy56 : type_0

logic dummy57 : type_0

logic dummy58 : type_0

logic dummy59 : type_0

logic dummy60 : type_0

logic dummy61 : type_0

logic dummy62 : type_0

logic dummy63 : type_0

logic dummy64 : type_0

logic dummy65 : type_0

logic dummy66 : type_0

logic dummy67 : type_0

logic dummy68 : type_0

logic dummy69 : type_0

logic dummy70 : type_0

logic dummy71 : type_0

logic dummy72 : type_0

logic dummy73 : type_0

logic dummy74 : type_0

logic dummy75 : type_0

logic dummy76 : type_0

logic dummy77 : type_0

logic dummy78 : type_0

logic dummy79 : type_0

logic dummy80 : type_0

logic dummy81 : type_0

logic dummy82 : type_0

logic dummy83 : type_0

logic dummy84 : type_0

logic dummy85 : type_0

logic dummy86 : type_0

logic dummy87 : type_0

logic dummy88 : type_0

logic dummy89 : type_0

logic dummy90 : type_0

logic dummy91 : type_0

logic dummy92 : type_0

logic dummy93 : type_0

logic dummy94 : type_0

logic dummy95 : type_0

logic dummy96 : type_0

logic dummy97 : type_0

logic dummy98 : type_0

logic dummy99 : type_0

logic dummy100 : type_0

logic dummy101 : type_0

logic dummy102 : type_0

logic dummy103 : type_0

logic dummy104 : type_0

logic dummy105 : type_0

logic dummy106 : type_0

logic dummy107 : type_0

logic dummy108 : type_0

logic dummy109 : type_0

logic dummy110 : type_0

logic dummy111 : type_0

logic dummy112 : type_0

logic dummy113 : type_0

logic dummy114 : type_0

logic dummy115 : type_0

logic dummy116 : type_0

logic dummy117 : type_0

logic dummy118 : type_0

logic dummy119 : type_0

logic dummy120 : type_0

logic dummy121 : type_0

logic dummy122 : type_0

logic dummy123 : type_0

logic dummy124 : type_0

logic dummy125 : type_0

logic dummy126 : type_0

logic dummy127 : type_0

logic dummy128 : type_0

logic dummy129 : type_0

logic dummy130 : type_0

logic dummy131 : type_0

logic dummy132 : type_0

logic dummy133 : type_0

logic dummy134 : type_0

logic dummy135 : type_0

logic dummy136 : type_0

logic dummy137 : type_0

logic dummy138 : type_0

logic dummy139 : type_0

logic dummy140 : type_0

logic dummy141 : type_0

logic dummy142 : type_0

logic dummy143 : type_0

logic dummy144 : type_0

logic dummy145 : type_0

type type_4__ref = { type_4__content : us_rep2
}

function type_4__ref___projection(a: type_4__ref) : us_rep2 =
  (a).type_4__content

logic create_type_4 : unit -> us_rep2

logic create_type_4__function_guard : us_rep2, unit -> prop

axiom create_type_4__post_axiom :
  ((bool_eq2(((create_type_4(void)).us_split_fields5).rec__p__type_4__field_0,
  create_type_1(void)) = true) and
  ((bool_eq2(((create_type_4(void)).us_split_fields5).rec__p__type_4__field_1,
  create_type_1(void)) = true) and
  ((bool_eq3(((create_type_4(void)).us_split_fields5).rec__p__type_4__field_2,
  create_type_2(void)) = true) and
  (bool_eq3(((create_type_4(void)).us_split_fields5).rec__p__type_4__field_3,
  create_type_2(void)) = true))))

type us_split_fields6 = { rec__p__type_5__field_0 : type_3;
rec__p__type_5__field_1 : us_rep2; rec__p__type_5__field_2 : us_rep1;
rec__p__type_5__field_3 : us_rep2; rec__p__type_5__field_4 : us_rep2
}

function us_split_fields_Field_0__4__projection(a: us_split_fields6) : type_3 =
  (a).rec__p__type_5__field_0

function us_split_fields_Field_1__4__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__p__type_5__field_1

function us_split_fields_Field_2__4__projection(a: us_split_fields6) : us_rep1 =
  (a).rec__p__type_5__field_2

function us_split_fields_Field_3__4__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__p__type_5__field_3

function us_split_fields_Field_4__3__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__p__type_5__field_4

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq6 : us_rep3, us_rep3 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq6(a, b)].
  (((((((to_rep1(((a).us_split_fields7).rec__p__type_5__field_0) = to_rep1(((b).us_split_fields7).rec__p__type_5__field_0)) and
  (bool_eq5(((a).us_split_fields7).rec__p__type_5__field_1,
  ((b).us_split_fields7).rec__p__type_5__field_1) = true)) and
  (bool_eq3(((a).us_split_fields7).rec__p__type_5__field_2,
  ((b).us_split_fields7).rec__p__type_5__field_2) = true)) and
  (bool_eq5(((a).us_split_fields7).rec__p__type_5__field_3,
  ((b).us_split_fields7).rec__p__type_5__field_3) = true)) and
  (bool_eq5(((a).us_split_fields7).rec__p__type_5__field_4,
  ((b).us_split_fields7).rec__p__type_5__field_4) = true)) -> (bool_eq6(a,
  b) = true)) and
  ((not (((((to_rep1(((a).us_split_fields7).rec__p__type_5__field_0) = to_rep1(((b).us_split_fields7).rec__p__type_5__field_0)) and
  (bool_eq5(((a).us_split_fields7).rec__p__type_5__field_1,
  ((b).us_split_fields7).rec__p__type_5__field_1) = true)) and
  (bool_eq3(((a).us_split_fields7).rec__p__type_5__field_2,
  ((b).us_split_fields7).rec__p__type_5__field_2) = true)) and
  (bool_eq5(((a).us_split_fields7).rec__p__type_5__field_3,
  ((b).us_split_fields7).rec__p__type_5__field_3) = true)) and
  (bool_eq5(((a).us_split_fields7).rec__p__type_5__field_4,
  ((b).us_split_fields7).rec__p__type_5__field_4) = true))) -> (bool_eq6(a,
  b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic p__type_5__field_0__first__bit : int

logic p__type_5__field_0__last__bit : int

logic p__type_5__field_0__position : int

axiom p__type_5__field_0__first__bit_axiom :
  (0 <= p__type_5__field_0__first__bit)

axiom p__type_5__field_0__last__bit_axiom :
  (p__type_5__field_0__first__bit <  p__type_5__field_0__last__bit)

axiom p__type_5__field_0__position_axiom :
  (0 <= p__type_5__field_0__position)

logic p__type_5__field_1__first__bit : int

logic p__type_5__field_1__last__bit : int

logic p__type_5__field_1__position : int

axiom p__type_5__field_1__first__bit_axiom :
  (0 <= p__type_5__field_1__first__bit)

axiom p__type_5__field_1__last__bit_axiom :
  (p__type_5__field_1__first__bit <  p__type_5__field_1__last__bit)

axiom p__type_5__field_1__position_axiom :
  (0 <= p__type_5__field_1__position)

logic p__type_5__field_2__first__bit : int

logic p__type_5__field_2__last__bit : int

logic p__type_5__field_2__position : int

axiom p__type_5__field_2__first__bit_axiom :
  (0 <= p__type_5__field_2__first__bit)

axiom p__type_5__field_2__last__bit_axiom :
  (p__type_5__field_2__first__bit <  p__type_5__field_2__last__bit)

axiom p__type_5__field_2__position_axiom :
  (0 <= p__type_5__field_2__position)

logic p__type_5__field_3__first__bit : int

logic p__type_5__field_3__last__bit : int

logic p__type_5__field_3__position : int

axiom p__type_5__field_3__first__bit_axiom :
  (0 <= p__type_5__field_3__first__bit)

axiom p__type_5__field_3__last__bit_axiom :
  (p__type_5__field_3__first__bit <  p__type_5__field_3__last__bit)

axiom p__type_5__field_3__position_axiom :
  (0 <= p__type_5__field_3__position)

logic p__type_5__field_4__first__bit : int

logic p__type_5__field_4__last__bit : int

logic p__type_5__field_4__position : int

axiom p__type_5__field_4__first__bit_axiom :
  (0 <= p__type_5__field_4__first__bit)

axiom p__type_5__field_4__last__bit_axiom :
  (p__type_5__field_4__first__bit <  p__type_5__field_4__last__bit)

axiom p__type_5__field_4__position_axiom :
  (0 <= p__type_5__field_4__position)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy146 : type_3

logic dummy147 : type_0

logic dummy148 : type_0

logic dummy149 : type_0

logic dummy150 : type_0

logic dummy151 : type_0

logic dummy152 : type_0

logic dummy153 : type_0

logic dummy154 : type_0

logic dummy155 : type_0

logic dummy156 : type_0

logic dummy157 : type_0

logic dummy158 : type_0

logic dummy159 : type_0

logic dummy160 : type_0

logic dummy161 : type_0

logic dummy162 : type_0

logic dummy163 : type_0

logic dummy164 : type_0

logic dummy165 : type_0

logic dummy166 : type_0

logic dummy167 : type_0

logic dummy168 : type_0

logic dummy169 : type_0

logic dummy170 : type_0

logic dummy171 : type_0

logic dummy172 : type_0

logic dummy173 : type_0

logic dummy174 : type_0

logic dummy175 : type_0

logic dummy176 : type_0

logic dummy177 : type_0

logic dummy178 : type_0

logic dummy179 : type_0

logic dummy180 : type_0

logic dummy181 : type_0

logic dummy182 : type_0

logic dummy183 : type_0

logic dummy184 : type_0

logic dummy185 : type_0

logic dummy186 : type_0

logic dummy187 : type_0

logic dummy188 : type_0

logic dummy189 : type_0

logic dummy190 : type_0

logic dummy191 : type_0

logic dummy192 : type_0

logic dummy193 : type_0

logic dummy194 : type_0

logic dummy195 : type_0

logic dummy196 : type_0

logic dummy197 : type_0

logic dummy198 : type_0

logic dummy199 : type_0

logic dummy200 : type_0

logic dummy201 : type_0

logic dummy202 : type_0

logic dummy203 : type_0

logic dummy204 : type_0

logic dummy205 : type_0

logic dummy206 : type_0

logic dummy207 : type_0

logic dummy208 : type_0

logic dummy209 : type_0

logic dummy210 : type_0

logic dummy211 : type_0

logic dummy212 : type_0

logic dummy213 : type_0

logic dummy214 : type_0

logic dummy215 : type_0

logic dummy216 : type_0

logic dummy217 : type_0

logic dummy218 : type_0

logic dummy219 : type_0

logic dummy220 : type_0

logic dummy221 : type_0

logic dummy222 : type_0

logic dummy223 : type_0

logic dummy224 : type_0

logic dummy225 : type_0

logic dummy226 : type_0

logic dummy227 : type_0

logic dummy228 : type_0

logic dummy229 : type_0

logic dummy230 : type_0

logic dummy231 : type_0

logic dummy232 : type_0

logic dummy233 : type_0

logic dummy234 : type_0

logic dummy235 : type_0

logic dummy236 : type_0

logic dummy237 : type_0

logic dummy238 : type_0

logic dummy239 : type_0

logic dummy240 : type_0

logic dummy241 : type_0

logic dummy242 : type_0

logic dummy243 : type_0

logic dummy244 : type_0

logic dummy245 : type_0

logic dummy246 : type_0

logic dummy247 : type_0

logic dummy248 : type_0

logic dummy249 : type_0

logic dummy250 : type_0

logic dummy251 : type_0

logic dummy252 : type_0

logic dummy253 : type_0

logic dummy254 : type_0

logic dummy255 : type_0

logic dummy256 : type_0

logic dummy257 : type_0

logic dummy258 : type_0

logic dummy259 : type_0

logic dummy260 : type_0

logic dummy261 : type_0

logic dummy262 : type_0

logic dummy263 : type_0

logic dummy264 : type_0

logic dummy265 : type_0

logic dummy266 : type_0

logic dummy267 : type_0

logic dummy268 : type_0

logic dummy269 : type_0

logic dummy270 : type_0

logic dummy271 : type_0

logic dummy272 : type_0

logic dummy273 : type_0

logic dummy274 : type_0

logic dummy275 : type_0

logic dummy276 : type_0

logic dummy277 : type_0

logic dummy278 : type_0

logic dummy279 : type_0

logic dummy280 : type_0

logic dummy281 : type_0

logic dummy282 : type_0

logic dummy283 : type_0

logic dummy284 : type_0

logic dummy285 : type_0

logic dummy286 : type_0

logic dummy287 : type_0

logic dummy288 : type_0

logic dummy289 : type_0

logic dummy290 : type_0

logic dummy291 : type_0

logic dummy292 : type_0

logic dummy293 : type_0

logic dummy294 : type_0

logic dummy295 : type_0

logic dummy296 : type_0

logic dummy297 : type_0

logic dummy298 : type_0

logic dummy299 : type_0

logic dummy300 : type_0

logic dummy301 : type_0

logic dummy302 : type_0

logic dummy303 : type_0

logic dummy304 : type_0

logic dummy305 : type_0

logic dummy306 : type_0

logic dummy307 : type_0

logic dummy308 : type_0

logic dummy309 : type_0

logic dummy310 : type_0

logic dummy311 : type_0

logic dummy312 : type_0

logic dummy313 : type_0

logic dummy314 : type_0

logic dummy315 : type_0

logic dummy316 : type_0

logic dummy317 : type_0

logic dummy318 : type_0

logic dummy319 : type_0

logic dummy320 : type_0

logic dummy321 : type_0

logic dummy322 : type_0

logic dummy323 : type_0

logic dummy324 : type_0

logic dummy325 : type_0

logic dummy326 : type_0

logic dummy327 : type_0

logic dummy328 : type_0

logic dummy329 : type_0

logic dummy330 : type_0

logic dummy331 : type_0

logic dummy332 : type_0

logic dummy333 : type_0

logic dummy334 : type_0

logic dummy335 : type_0

logic dummy336 : type_0

logic dummy337 : type_0

logic dummy338 : type_0

logic dummy339 : type_0

logic dummy340 : type_0

logic dummy341 : type_0

logic dummy342 : type_0

logic dummy343 : type_0

logic dummy344 : type_0

logic dummy345 : type_0

logic dummy346 : type_0

logic dummy347 : type_0

logic dummy348 : type_0

logic dummy349 : type_0

logic dummy350 : type_0

logic dummy351 : type_0

logic dummy352 : type_0

logic dummy353 : type_0

logic dummy354 : type_0

logic dummy355 : type_0

logic dummy356 : type_0

logic dummy357 : type_0

logic dummy358 : type_0

logic dummy359 : type_0

logic dummy360 : type_0

logic dummy361 : type_0

logic dummy362 : type_0

logic dummy363 : type_0

logic dummy364 : type_0

logic dummy365 : type_0

logic dummy366 : type_0

logic dummy367 : type_0

logic dummy368 : type_0

logic dummy369 : type_0

logic dummy370 : type_0

logic dummy371 : type_0

logic dummy372 : type_0

logic dummy373 : type_0

logic dummy374 : type_0

logic dummy375 : type_0

logic dummy376 : type_0

logic dummy377 : type_0

logic dummy378 : type_0

logic dummy379 : type_0

logic dummy380 : type_0

logic dummy381 : type_0

logic dummy382 : type_0

logic dummy383 : type_0

logic dummy384 : type_0

logic dummy385 : type_0

logic dummy386 : type_0

logic dummy387 : type_0

logic dummy388 : type_0

logic dummy389 : type_0

logic dummy390 : type_0

logic dummy391 : type_0

logic dummy392 : type_0

logic dummy393 : type_0

logic dummy394 : type_0

logic dummy395 : type_0

logic dummy396 : type_0

logic dummy397 : type_0

logic dummy398 : type_0

logic dummy399 : type_0

logic dummy400 : type_0

logic dummy401 : type_0

logic dummy402 : type_0

logic dummy403 : type_0

logic dummy404 : type_0

logic dummy405 : type_0

logic dummy406 : type_0

logic dummy407 : type_0

logic dummy408 : type_0

logic dummy409 : type_0

logic dummy410 : type_0

logic dummy411 : type_0

logic dummy412 : type_0

logic dummy413 : type_0

logic dummy414 : type_0

logic dummy415 : type_0

logic dummy416 : type_0

logic dummy417 : type_0

logic dummy418 : type_0

logic dummy419 : type_0

logic dummy420 : type_0

logic dummy421 : type_0

logic dummy422 : type_0

logic dummy423 : type_0

logic dummy424 : type_0

logic dummy425 : type_0

logic dummy426 : type_0

logic dummy427 : type_0

logic dummy428 : type_0

logic dummy429 : type_0

logic dummy430 : type_0

logic dummy431 : type_0

logic dummy432 : type_0

logic dummy433 : type_0

logic dummy434 : type_0

logic dummy435 : type_0

logic dummy436 : type_0

logic dummy437 : type_0

logic dummy438 : type_0

logic dummy439 : type_0

logic dummy440 : type_0

logic dummy441 : type_0

logic dummy442 : type_0

logic dummy443 : type_0

logic dummy444 : type_0

logic dummy445 : type_0

logic dummy446 : type_0

logic dummy447 : type_0

logic dummy448 : type_0

logic dummy449 : type_0

logic dummy450 : type_0

logic dummy451 : type_0

logic dummy452 : type_0

logic dummy453 : type_0

logic dummy454 : type_0

logic dummy455 : type_0

logic dummy456 : type_0

logic dummy457 : type_0

logic dummy458 : type_0

logic dummy459 : type_0

logic dummy460 : type_0

logic dummy461 : type_0

logic dummy462 : type_0

logic dummy463 : type_0

logic dummy464 : type_0

logic dummy465 : type_0

logic dummy466 : type_0

logic dummy467 : type_0

logic dummy468 : type_0

logic dummy469 : type_0

logic dummy470 : type_0

logic dummy471 : type_0

logic dummy472 : type_0

logic dummy473 : type_0

logic dummy474 : type_0

type type_5__ref = { type_5__content : us_rep3
}

function type_5__ref___projection(a: type_5__ref) : us_rep3 =
  (a).type_5__content

axiom create_type_1__post_axiom :
  ((to_rep(((create_type_1(void)).us_split_fields1).rec__p__type_1__field_0) = 0) and
  ((to_rep(((create_type_1(void)).us_split_fields1).rec__p__type_1__field_1) = 0) and
  ((to_rep(((create_type_1(void)).us_split_fields1).rec__p__type_1__field_2) = 0) and
  ((to_rep(((create_type_1(void)).us_split_fields1).rec__p__type_1__field_3) = 0) and
  ((to_rep(((create_type_1(void)).us_split_fields1).rec__p__type_1__field_4) = 0) and
  ((to_rep(((create_type_1(void)).us_split_fields1).rec__p__type_1__field_5) = 0) and
  ((to_rep(((create_type_1(void)).us_split_fields1).rec__p__type_1__field_6) = 0) and
  (to_rep(((create_type_1(void)).us_split_fields1).rec__p__type_1__field_7) = 0))))))))

 (* File "p.ads", line 59, characters 0-0 *)
goal WP_parameter_def :
  (forall p__create_type_5__result:type_5__ref. forall o:us_rep2.
  forall o1:us_rep2. forall o2:us_rep1. forall o3:us_rep2. forall o4:type_3.
  forall o5:us_split_fields6. forall o6:us_rep3. forall result:type_5__ref.
  forall p__create_type_5__result1:us_rep3.
  forall p__create_type_5__result2:type_5__ref.
  forall p__create_type_5__result3:us_rep3.
  forall p__create_type_5__result4:type_5__ref.
  forall p__create_type_5__result5:us_rep3.
  (forall result1:us_rep3. ((((((p__create_type_5__result2 = {
  type_5__content = p__create_type_5__result1 }) and
  (p__create_type_5__result3 = p__create_type_5__result1)) and
  (((((o = create_type_4(void)) and
  ((bool_eq2(((o).us_split_fields5).rec__p__type_4__field_0,
  create_type_1(void)) = true) and
  ((bool_eq2(((o).us_split_fields5).rec__p__type_4__field_1,
  create_type_1(void)) = true) and
  ((bool_eq3(((o).us_split_fields5).rec__p__type_4__field_2,
  create_type_2(void)) = true) and
  (bool_eq3(((o).us_split_fields5).rec__p__type_4__field_3,
  create_type_2(void)) = true))))) and (((o1 = create_type_4(void)) and
  ((bool_eq2(((o1).us_split_fields5).rec__p__type_4__field_0,
  create_type_1(void)) = true) and
  ((bool_eq2(((o1).us_split_fields5).rec__p__type_4__field_1,
  create_type_1(void)) = true) and
  ((bool_eq3(((o1).us_split_fields5).rec__p__type_4__field_2,
  create_type_2(void)) = true) and
  (bool_eq3(((o1).us_split_fields5).rec__p__type_4__field_3,
  create_type_2(void)) = true))))) and (((o2 = create_type_2(void)) and
  ((bool_eq2(((o2).us_split_fields3).rec__p__type_2__field_0,
  create_type_1(void)) = true) and
  ((bool_eq2(((o2).us_split_fields3).rec__p__type_2__field_1,
  create_type_1(void)) = true) and
  ((bool_eq2(((o2).us_split_fields3).rec__p__type_2__field_2,
  create_type_1(void)) = true) and
  ((bool_eq2(((o2).us_split_fields3).rec__p__type_2__field_3,
  create_type_1(void)) = true) and
  (bool_eq2(((o2).us_split_fields3).rec__p__type_2__field_4,
  create_type_1(void)) = true)))))) and (((o3 = create_type_4(void)) and
  ((bool_eq2(((o3).us_split_fields5).rec__p__type_4__field_0,
  create_type_1(void)) = true) and
  ((bool_eq2(((o3).us_split_fields5).rec__p__type_4__field_1,
  create_type_1(void)) = true) and
  ((bool_eq3(((o3).us_split_fields5).rec__p__type_4__field_2,
  create_type_2(void)) = true) and
  (bool_eq3(((o3).us_split_fields5).rec__p__type_4__field_3,
  create_type_2(void)) = true))))) and ((to_rep1(o4) = 0) and (o5 = {
  rec__p__type_5__field_0 = o4; rec__p__type_5__field_1 = o3;
  rec__p__type_5__field_2 = o2; rec__p__type_5__field_3 = o1;
  rec__p__type_5__field_4 = o })))))) and (o6 = { us_split_fields7 = o5
  })) and ((result = p__create_type_5__result) and
  (p__create_type_5__result1 = o6)))) and
  ((p__create_type_5__result4 = p__create_type_5__result2) and
  (p__create_type_5__result5 = p__create_type_5__result3))) and
  (result1 = (p__create_type_5__result4).type_5__content)) ->
  (to_rep1((((p__create_type_5__result4).type_5__content).us_split_fields7).rec__p__type_5__field_0) = 0))))
