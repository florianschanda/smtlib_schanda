(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((name_id__ref (mk_name_id__ref (name_id__content us_rep)))))
(define-fun name_id__ref___projection ((a name_id__ref)) us_rep (name_id__content a))
(declare-sort token_kind 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq1 (token_kind token_kind) Bool)
(declare-const dummy1 token_kind)
(declare-datatypes () ((token_kind__ref (mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind (token_kind__content a))
(declare-fun to_rep (token_kind) Int)
(declare-fun of_rep (Int) token_kind)
(assert (forall ((x token_kind)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x token_kind)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) token_kind (rec__lexer__token__kind a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__lexer__token__name us_rep)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) us_rep (rec__lexer__token__name a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep1)) Bool (attr__constrained a))
(define-fun lexer__token__name__pred ((a us_rep1)) Bool (= (to_rep (rec__lexer__token__kind (us_split_discrs1 a))) 0))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__lexer__token__kind (us_split_discrs1 a))) (to_rep (rec__lexer__token__kind (us_split_discrs1 b)))) (=> (lexer__token__name__pred a) (= (bool_eq (rec__lexer__token__name (us_split_fields1 a)) (rec__lexer__token__name (us_split_fields1 b))) true))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const lexer__token__kind__first__bit Int)
(declare-const lexer__token__kind__last__bit Int)
(declare-const lexer__token__kind__position Int)
(assert (<= 0 lexer__token__kind__first__bit))
(assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))
(assert (<= 0 lexer__token__kind__position))
(declare-const lexer__token__name__first__bit Int)
(declare-const lexer__token__name__last__bit Int)
(declare-const lexer__token__name__position Int)
(assert (<= 0 lexer__token__name__first__bit))
(assert (< lexer__token__name__first__bit lexer__token__name__last__bit))
(assert (<= 0 lexer__token__name__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((token__ref (mk_token__ref (token__content us_rep1)))))
(define-fun token__ref___projection ((a token__ref)) us_rep1 (token__content a))
(define-fun default_initial_assumption ((temp___expr_185 us_rep1) (temp___skip_top_level_186 Bool)) Bool (and (= (attr__constrained temp___expr_185) false) (= (to_rep (rec__lexer__token__kind (us_split_discrs1 temp___expr_185))) 1)))
(declare-const t__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range1 ((rec__lexer__token__kind1 Int) (a us_rep1)) Bool (= rec__lexer__token__kind1 (to_rep (rec__lexer__token__kind (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const lexer__token__kind__first__bit1 Int)
(declare-const lexer__token__kind__last__bit1 Int)
(declare-const lexer__token__kind__position1 Int)
(assert (<= 0 lexer__token__kind__first__bit1))
(assert (< lexer__token__kind__first__bit1 lexer__token__kind__last__bit1))
(assert (<= 0 lexer__token__kind__position1))
(declare-const lexer__token__name__first__bit1 Int)
(declare-const lexer__token__name__last__bit1 Int)
(declare-const lexer__token__name__position1 Int)
(assert (<= 0 lexer__token__name__first__bit1))
(assert (< lexer__token__name__first__bit1 lexer__token__name__last__bit1))
(assert (<= 0 lexer__token__name__position1))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep1)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep1 (t1b__content a))
(define-fun dynamic_invariant ((temp___expr_177 Int) (temp___is_init_174 Bool) (temp___skip_constant_175 Bool) (temp___do_toplevel_176 Bool)) Bool (=> (or (= temp___is_init_174 true) (<= 0 1)) (in_range temp___expr_177)))
(declare-const t__split_discrs token_kind)
(declare-const o token_kind)
(declare-const o1 token_kind)
(declare-const temp___194 token_kind)
(declare-const temp___1941 us_rep)
(declare-const temp___1942 Bool)
(assert (and (= t__attr__constrained false) (= (to_rep t__split_discrs) 1)))
(assert (= (to_rep o) 1))
(assert (= o o1))
(assert (= temp___194 o1))
(assert (= dummy temp___1941))
(assert (= true temp___1942))
(assert (= t__attr__constrained true))
(assert (not (= temp___194 t__split_discrs)))
(check-sat)
(exit)
