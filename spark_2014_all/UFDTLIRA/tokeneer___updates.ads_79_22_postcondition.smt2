(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun latchislocked (tuple0) Bool)
(declare-fun latchislocked__function_guard (Bool tuple0) Bool)
(declare-fun islocked (us_private) Bool)
(declare-fun islocked__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun thedooralarm (us_private) Int)
(declare-fun thedooralarm__function_guard (Int us_private) Bool)
(declare-sort statust 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (statust statust) Bool)
(declare-const dummy statust)
(declare-datatypes () ((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content a))
(define-fun dynamic_invariant ((temp___expr_303 Int) (temp___is_init_300 Bool) (temp___skip_constant_301 Bool) (temp___do_toplevel_302 Bool)) Bool (=> (or (= temp___is_init_300 true) (<= 0 1)) (in_range1 temp___expr_303)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant (thedooralarm door__state) true false true) :pattern ((thedooralarm door__state)))))
(declare-fun isalarming (tuple0) Bool)
(declare-fun isalarming__function_guard (Bool tuple0) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const state us_private)
(declare-const state1 us_private)
(declare-const systemfault Bool)
(declare-const state2 us_private)
(declare-const filestate us_private)
(declare-const output us_private)
(declare-const output1 us_private)
(declare-const systemfault1 Bool)
(declare-const state3 us_private)
(declare-const filestate1 us_private)
(declare-const output2 us_private)
(declare-const output3 us_private)
(declare-const systemfault2 Bool)
(declare-const state4 us_private)
(declare-const filestate2 us_private)
(declare-const output4 us_private)
(declare-const output5 us_private)
(assert (or (= (= (islocked state) true) (= (latchislocked Tuple0) true)) (= systemfault true)))
(assert (<= (to_int1 (= (thedooralarm state1) 0)) (to_int1 (isalarming Tuple0))))
(assert (= output3 output1))
(assert (= output2 output))
(assert (= filestate1 filestate))
(assert (= state3 state2))
(assert (= systemfault systemfault1))
(assert (= output5 output1))
(assert (= output4 output))
(assert (= filestate2 filestate))
(assert (= state4 state2))
(assert (= systemfault2 systemfault))
(assert (= (thedooralarm state1) 0))
(assert (not (= (isalarming Tuple0) true)))
(check-sat)
(exit)
