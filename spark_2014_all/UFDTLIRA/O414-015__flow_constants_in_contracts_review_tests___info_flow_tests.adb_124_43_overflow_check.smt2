(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-fun f1 (Int) Int)
(declare-fun f1__function_guard (Int Int) Bool)
(declare-fun f4 (Int Int) Int)
(declare-fun f4__function_guard (Int Int Int) Bool)
(declare-const c2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const c3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const c4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const c5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const c6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const c7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(assert (forall ((x Int)) (! (=> (dynamic_invariant x true true true) (dynamic_invariant (f1 x) true false true)) :pattern ((f1 x)))))
(assert (forall ((x Int)) (! (=> (dynamic_invariant x true true true) (= (f1 x) x)) :pattern ((f1 x)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (and (dynamic_invariant x true true true) (dynamic_invariant y true true true)) (< 0 y)) (and (< 0 y) (dynamic_invariant (f4 x y) true false true))) :pattern ((f4 x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true) (dynamic_invariant y true true true)) (= (f4 x y) x)) :pattern ((f4 x y)))))
(assert (= c2 (f1 5)))
(assert (= c6 (f4 5 c3)))
(assert (= c7 (f4 c3 c4)))
(declare-const x Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(assert (in_range1 c2))
(assert (= (f1 5) c2))
(assert (in_range1 c4))
(assert (in_range1 c6))
(assert (= (f4 5 c3) c6))
(assert (in_range1 c4))
(assert (in_range1 c3))
(assert (in_range1 c5))
(assert (in_range1 c7))
(assert (= (f4 c3 c4) c7))
(assert (=> (<= 0 2147483647) (in_range1 x)))
(assert (and (= o (+ 5 c2)) (in_range (+ 5 c2))))
(assert (= o1 (+ o c3)))
(assert (and (= o2 o1) (in_range o1)))
(assert (= o3 (+ o2 c4)))
(assert (and (= o4 o3) (in_range o3)))
(assert (= o5 (+ o4 c5)))
(assert (and (= o6 o5) (in_range o5)))
(assert (= o7 (+ o6 c6)))
(assert (and (= o8 o7) (in_range o7)))
(assert (= o9 (+ o8 c7)))
(assert (not (in_range o9)))
(check-sat)
(exit)
