(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort ta4D2 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (ta4D2 ta4D2) Bool)
(declare-const dummy1 ta4D2)
(declare-datatypes () ((ta4D2__ref (mk_ta4D2__ref (ta4D2__content ta4D2)))))
(define-fun ta4D2__ref___projection ((a ta4D2__ref)) ta4D2 (ta4D2__content a))
(declare-sort map1 0)
(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int Int) integer)
(declare-fun set (map1 Int Int integer) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((a integer)) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a integer)) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide (map1 Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get (slide a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_155 Int) (temp___idx_156 Int)) (=> (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2))) (= (to_rep (get a temp___idx_155 temp___idx_156)) (to_rep (get b (+ (- b__first a__first) temp___idx_155) (+ (- b__first_2 a__first_2) temp___idx_156))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_155 Int) (temp___idx_156 Int)) (=> (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2))) (= (to_rep (get a temp___idx_155 temp___idx_156)) (to_rep (get b (+ (- b__first a__first) temp___idx_155) (+ (- b__first_2 a__first_2) temp___idx_156)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun temp___183 (Int Int Int Int) map1)
(declare-fun temp___191 (Int) map1)
(declare-fun temp___196 (Int Int Int) map1)
(declare-fun temp___203 (Int Int Int) map1)
(declare-fun temp___210 (Int Int Int Int) map1)
(assert (forall ((temp___185 Int) (temp___186 Int) (temp___187 Int) (temp___188 Int)) (let ((temp___184 (temp___183 temp___185 temp___186 temp___187 temp___188))) (=> (and (and (and (dynamic_invariant temp___185 true true true true) (dynamic_invariant temp___186 true true true true)) (dynamic_invariant temp___187 true true true true)) (dynamic_invariant temp___188 true true true true)) (and (and (= (to_rep (get temp___184 1 1)) temp___185) (= (to_rep (get temp___184 1 2)) temp___186)) (and (= (to_rep (get temp___184 2 1)) temp___187) (= (to_rep (get temp___184 2 2)) temp___188)))))))
(assert (forall ((temp___193 Int)) (=> (dynamic_invariant temp___193 true true true true) (forall ((temp___194 Int) (temp___195 Int)) (= (to_rep (get (temp___191 temp___193) temp___194 temp___195)) temp___193)))))
(assert (forall ((temp___198 Int) (temp___199 Int) (temp___200 Int)) (let ((temp___197 (temp___196 temp___198 temp___199 temp___200))) (=> (and (and (dynamic_invariant temp___198 true true true true) (dynamic_invariant temp___199 true true true true)) (dynamic_invariant temp___200 true true true true)) (forall ((temp___201 Int) (temp___202 Int)) (ite (= temp___201 1) (ite (= temp___202 1) (= (to_rep (get temp___197 temp___201 temp___202)) temp___198) (= (to_rep (get temp___197 temp___201 temp___202)) temp___199)) (=> (= temp___201 2) (= (to_rep (get temp___197 temp___201 temp___202)) temp___200))))))))
(assert (forall ((temp___205 Int) (temp___206 Int) (temp___207 Int)) (let ((temp___204 (temp___203 temp___205 temp___206 temp___207))) (=> (and (and (dynamic_invariant temp___205 true true true true) (dynamic_invariant temp___206 true true true true)) (dynamic_invariant temp___207 true true true true)) (forall ((temp___208 Int) (temp___209 Int)) (ite (= temp___208 1) (ite (= temp___209 1) (= (to_rep (get temp___204 temp___208 temp___209)) temp___205) (= (to_rep (get temp___204 temp___208 temp___209)) temp___206)) (=> (= temp___208 2) (= (to_rep (get temp___204 temp___208 temp___209)) temp___207))))))))
(assert (forall ((temp___212 Int) (temp___213 Int) (temp___214 Int) (temp___215 Int)) (let ((temp___211 (temp___210 temp___212 temp___213 temp___214 temp___215))) (=> (and (and (and (dynamic_invariant temp___212 true true true true) (dynamic_invariant temp___213 true true true true)) (dynamic_invariant temp___214 true true true true)) (dynamic_invariant temp___215 true true true true)) (forall ((temp___216 Int) (temp___217 Int)) (ite (= temp___216 2) (ite (= temp___217 1) (= (to_rep (get temp___211 temp___216 temp___217)) temp___212) (=> (= temp___217 2) (= (to_rep (get temp___211 temp___216 temp___217)) temp___213))) (ite (= temp___217 1) (= (to_rep (get temp___211 temp___216 temp___217)) temp___214) (=> (= temp___217 2) (= (to_rep (get temp___211 temp___216 temp___217)) temp___215)))))))))
(declare-const one Int)
(declare-const a map1)
(declare-const k Int)
(declare-const result map1)
(declare-const a1 map1)
(declare-const result1 map1)
(declare-const a2 map1)
(declare-const result2 map1)
(declare-const a3 map1)
(declare-const result3 map1)
(declare-const a4 map1)
(declare-const result4 map1)
(declare-const a5 map1)
(declare-const a6 map1)
(declare-const a7 map1)
(define-fun a8 () map__ref (mk_map__ref a))
(assert (in_range1 one))
(assert (in_range1 b))
(assert (= one 1))
(assert (=> (= b 1) (= (mk_map__ref result) a8)))
(assert (=> (= b 1) (= a1 (temp___183 one 2 one 2))))
(assert (=> (not (= b 1)) (=> (= b 2) (= (mk_map__ref result1) a8))))
(assert (=> (not (= b 1)) (=> (= b 2) (= a2 (temp___191 one)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (mk_map__ref result2) a8)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= a3 (temp___196 one one one))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (mk_map__ref result3) a8))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= a4 (temp___203 2 one one)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (mk_map__ref result4) a8))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a5 (temp___210 2 one one one)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a4 a5))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (= a3 a4)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (= a2 a3))))
(assert (=> (not (= b 1)) (= a1 a2)))
(assert (= a1 a6))
(assert (= a7 a1))
(assert (= b 1))
(assert (<= 1 k))
(assert (<= k 2))
(assert (not (<= 1 one)))
(check-sat)
(exit)
