(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__my_ordered_sets__my_rec__f : natural;
rec__my_ordered_sets__my_rec__g : integer
}

function us_split_fields_F__projection(a: us_split_fields) : natural =
  (a).rec__my_ordered_sets__my_rec__f

function us_split_fields_G__projection(a: us_split_fields) : integer =
  (a).rec__my_ordered_sets__my_rec__g

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___10__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__my_ordered_sets__my_rec__f) = to_rep(((b).us_split_fields1).rec__my_ordered_sets__my_rec__f)) and
  (to_rep1(((a).us_split_fields1).rec__my_ordered_sets__my_rec__g) = to_rep1(((b).us_split_fields1).rec__my_ordered_sets__my_rec__g))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__my_ordered_sets__my_rec__f) = to_rep(((b).us_split_fields1).rec__my_ordered_sets__my_rec__f)) and
  (to_rep1(((a).us_split_fields1).rec__my_ordered_sets__my_rec__g) = to_rep1(((b).us_split_fields1).rec__my_ordered_sets__my_rec__g)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = a;
  rec__my_ordered_sets__my_rec__g = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__my_ordered_sets__my_rec__f = a;
  rec__my_ordered_sets__my_rec__g = a1 } })))

logic my_ordered_sets__my_rec__f__first__bit : int

logic my_ordered_sets__my_rec__f__last__bit : int

logic my_ordered_sets__my_rec__f__position : int

axiom my_ordered_sets__my_rec__f__first__bit_axiom :
  (0 <= my_ordered_sets__my_rec__f__first__bit)

axiom my_ordered_sets__my_rec__f__last__bit_axiom :
  (my_ordered_sets__my_rec__f__first__bit <  my_ordered_sets__my_rec__f__last__bit)

axiom my_ordered_sets__my_rec__f__position_axiom :
  (0 <= my_ordered_sets__my_rec__f__position)

logic my_ordered_sets__my_rec__g__first__bit : int

logic my_ordered_sets__my_rec__g__last__bit : int

logic my_ordered_sets__my_rec__g__position : int

axiom my_ordered_sets__my_rec__g__first__bit_axiom :
  (0 <= my_ordered_sets__my_rec__g__first__bit)

axiom my_ordered_sets__my_rec__g__last__bit_axiom :
  (my_ordered_sets__my_rec__g__first__bit <  my_ordered_sets__my_rec__g__last__bit)

axiom my_ordered_sets__my_rec__g__position_axiom :
  (0 <= my_ordered_sets__my_rec__g__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : natural

logic dummy4 : integer

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref___projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

logic x : natural

logic x1 : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic my_ordered_sets__get_f__result : int

logic o : int

logic result : int

logic my_ordered_sets__get_f__result1 : int

logic my_ordered_sets__get_f__result2 : int

logic my_ordered_sets__get_f__result3 : int

logic my_ordered_sets__get_f__result4 : int

logic my_ordered_sets__get_f__result5 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1(to_rep(x))
