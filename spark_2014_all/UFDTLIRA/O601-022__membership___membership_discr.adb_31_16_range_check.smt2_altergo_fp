(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__membership_discr__root__c : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__membership_discr__root__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((to_rep(((a).us_split_discrs1).rec__membership_discr__root__c) = to_rep(((b).us_split_discrs1).rec__membership_discr__root__c)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep(((a).us_split_discrs1).rec__membership_discr__root__c) = to_rep(((b).us_split_discrs1).rec__membership_discr__root__c))) ->
  (bool_eq3(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit : int

logic membership_discr__root__c__last__bit : int

logic membership_discr__root__c__position : int

axiom membership_discr__root__c__first__bit_axiom :
  (0 <= membership_discr__root__c__first__bit)

axiom membership_discr__root__c__last__bit_axiom :
  (membership_discr__root__c__first__bit <  membership_discr__root__c__last__bit)

axiom membership_discr__root__c__position_axiom :
  (0 <= membership_discr__root__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : natural

logic dummy2 : us_private

logic dummy3 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

logic us_tag1 : int

predicate in_range2(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size1({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit1 : int

logic membership_discr__root__c__last__bit1 : int

logic membership_discr__root__c__position1 : int

axiom membership_discr__root__c__first__bit_axiom1 :
  (0 <= membership_discr__root__c__first__bit1)

axiom membership_discr__root__c__last__bit_axiom1 :
  (membership_discr__root__c__first__bit1 <  membership_discr__root__c__last__bit1)

axiom membership_discr__root__c__position_axiom1 :
  (0 <= membership_discr__root__c__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy4 : natural

logic dummy5 : us_private

logic dummy6 : int

type root_02__ref = { root_02__content : us_rep
}

function root_02__ref___projection(a: root_02__ref) : us_rep =
  (a).root_02__content

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size2({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit2 : int

logic membership_discr__root__c__last__bit2 : int

logic membership_discr__root__c__position2 : int

axiom membership_discr__root__c__first__bit_axiom2 :
  (0 <= membership_discr__root__c__first__bit2)

axiom membership_discr__root__c__last__bit_axiom2 :
  (membership_discr__root__c__first__bit2 <  membership_discr__root__c__last__bit2)

axiom membership_discr__root__c__position_axiom2 :
  (0 <= membership_discr__root__c__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy7 : natural

logic dummy8 : us_private

logic dummy9 : int

type child__ref = { child__content : us_rep
}

function child__ref___projection(a: child__ref) : us_rep = (a).child__content

logic us_tag3 : int

predicate in_range3(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size3({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit3 : int

logic membership_discr__root__c__last__bit3 : int

logic membership_discr__root__c__position3 : int

axiom membership_discr__root__c__first__bit_axiom3 :
  (0 <= membership_discr__root__c__first__bit3)

axiom membership_discr__root__c__last__bit_axiom3 :
  (membership_discr__root__c__first__bit3 <  membership_discr__root__c__last__bit3)

axiom membership_discr__root__c__position_axiom3 :
  (0 <= membership_discr__root__c__position3)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy10 : natural

logic dummy11 : us_private

logic dummy12 : int

type child_01__ref = { child_01__content : us_rep
}

function child_01__ref___projection(a: child_01__ref) : us_rep =
  (a).child_01__content

logic us_tag4 : int

predicate in_range4(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size4({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment4({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit4 : int

logic membership_discr__root__c__last__bit4 : int

logic membership_discr__root__c__position4 : int

axiom membership_discr__root__c__first__bit_axiom4 :
  (0 <= membership_discr__root__c__first__bit4)

axiom membership_discr__root__c__last__bit_axiom4 :
  (membership_discr__root__c__first__bit4 <  membership_discr__root__c__last__bit4)

axiom membership_discr__root__c__position_axiom4 :
  (0 <= membership_discr__root__c__position4)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy13 : natural

logic dummy14 : us_private

logic dummy15 : int

type child_02__ref = { child_02__content : us_rep
}

function child_02__ref___projection(a: child_02__ref) : us_rep =
  (a).child_02__content

logic us_tag5 : int

predicate in_range5(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size5({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment5({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit5 : int

logic membership_discr__root__c__last__bit5 : int

logic membership_discr__root__c__position5 : int

axiom membership_discr__root__c__first__bit_axiom5 :
  (0 <= membership_discr__root__c__first__bit5)

axiom membership_discr__root__c__last__bit_axiom5 :
  (membership_discr__root__c__first__bit5 <  membership_discr__root__c__last__bit5)

axiom membership_discr__root__c__position_axiom5 :
  (0 <= membership_discr__root__c__position5)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy16 : natural

logic dummy17 : us_private

logic dummy18 : int

type child_03__ref = { child_03__content : us_rep
}

function child_03__ref___projection(a: child_03__ref) : us_rep =
  (a).child_03__content

logic us_tag6 : int

predicate in_range6(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size6({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment6({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit6 : int

logic membership_discr__root__c__last__bit6 : int

logic membership_discr__root__c__position6 : int

axiom membership_discr__root__c__first__bit_axiom6 :
  (0 <= membership_discr__root__c__first__bit6)

axiom membership_discr__root__c__last__bit_axiom6 :
  (membership_discr__root__c__first__bit6 <  membership_discr__root__c__last__bit6)

axiom membership_discr__root__c__position_axiom6 :
  (0 <= membership_discr__root__c__position6)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy19 : natural

logic dummy20 : us_private

logic dummy21 : int

type child_04__ref = { child_04__content : us_rep
}

function child_04__ref___projection(a: child_04__ref) : us_rep =
  (a).child_04__content

logic us_tag7 : int

predicate in_range7(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size7 : int

logic object__size7 : us_rep -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size7({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment7({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit7 : int

logic membership_discr__root__c__last__bit7 : int

logic membership_discr__root__c__position7 : int

axiom membership_discr__root__c__first__bit_axiom7 :
  (0 <= membership_discr__root__c__first__bit7)

axiom membership_discr__root__c__last__bit_axiom7 :
  (membership_discr__root__c__first__bit7 <  membership_discr__root__c__last__bit7)

axiom membership_discr__root__c__position_axiom7 :
  (0 <= membership_discr__root__c__position7)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy22 : natural

logic dummy23 : us_private

logic dummy24 : int

type tr00S__ref = { tr00S__content : us_rep
}

function tr00S__ref___projection(a: tr00S__ref) : us_rep = (a).tr00S__content

logic r00__split_discrs : natural

logic r00__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic us_tag8 : int

predicate in_range8(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size8 : int

logic object__size8 : us_rep -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size8({ us_split_discrs1 = { rec__membership_discr__root__c =
  a }; us_split_fields1 = { rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment8({ us_split_discrs1 = {
  rec__membership_discr__root__c = a }; us_split_fields1 = { rec__ext__ = a1
  }; attr__tag = a2 })))

logic membership_discr__root__c__first__bit8 : int

logic membership_discr__root__c__last__bit8 : int

logic membership_discr__root__c__position8 : int

axiom membership_discr__root__c__first__bit_axiom8 :
  (0 <= membership_discr__root__c__first__bit8)

axiom membership_discr__root__c__last__bit_axiom8 :
  (membership_discr__root__c__first__bit8 <  membership_discr__root__c__last__bit8)

axiom membership_discr__root__c__position_axiom8 :
  (0 <= membership_discr__root__c__position8)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy25 : natural

logic dummy26 : us_private

logic dummy27 : int

type tc00S__ref = { tc00S__content : us_rep
}

function tc00S__ref___projection(a: tc00S__ref) : us_rep = (a).tc00S__content

logic c00__split_discrs : natural

logic c00__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic c01__split_discrs : natural

logic c01__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c02__split_discrs : natural

logic c02__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic c03__split_discrs : natural

logic c03__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic us : int

logic us1 : int

logic us2 : int

logic us3 : int

logic us4 : int

logic us5 : int

logic us6 : int

logic us7 : int

axiom H : ((us = 0) and in_range1(0))

axiom H1 : ((us1 = 0) and in_range1(0))

axiom H2 : ((us2 = 0) and in_range1(0))

axiom H3 : ((us3 = 0) and in_range1(0))

axiom H4 : ((us4 = 0) and in_range1(0))

axiom H5 : ((us5 = 0) and in_range1(0))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : in_range1(0)
