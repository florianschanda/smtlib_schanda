(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort year_type 0)
(define-fun in_range ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (year_type year_type) Bool)
(declare-const dummy year_type)
(declare-datatypes () ((year_type__ref (mk_year_type__ref (year_type__content year_type)))))
(define-fun year_type__ref___projection ((a year_type__ref)) year_type (year_type__content a))
(declare-fun to_rep (year_type) Int)
(declare-fun of_rep (Int) year_type)
(assert (forall ((x year_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x year_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort month_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (month_type month_type) Bool)
(declare-const dummy1 month_type)
(declare-datatypes () ((month_type__ref (mk_month_type__ref (month_type__content month_type)))))
(define-fun month_type__ref___projection ((a month_type__ref)) month_type (month_type__content a))
(declare-fun to_rep1 (month_type) Int)
(declare-fun of_rep1 (Int) month_type)
(assert (forall ((x month_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x month_type)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort day_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (day_type day_type) Bool)
(declare-const dummy2 day_type)
(declare-datatypes () ((day_type__ref (mk_day_type__ref (day_type__content day_type)))))
(define-fun day_type__ref___projection ((a day_type__ref)) day_type (day_type__content a))
(declare-fun to_rep2 (day_type) Int)
(declare-fun of_rep2 (Int) day_type)
(assert (forall ((x day_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x day_type)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dates__date__day day_type) (rec__dates__date__month month_type) (rec__dates__date__year year_type)))))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) day_type (rec__dates__date__day a))
(define-fun us_split_fields_Month__projection ((a us_split_fields)) month_type (rec__dates__date__month a))
(define-fun us_split_fields_Year__projection ((a us_split_fields)) year_type (rec__dates__date__year a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep2 (rec__dates__date__day (us_split_fields1 a))) (to_rep2 (rec__dates__date__day (us_split_fields1 b)))) (= (to_rep1 (rec__dates__date__month (us_split_fields1 a))) (to_rep1 (rec__dates__date__month (us_split_fields1 b))))) (= (to_rep (rec__dates__date__year (us_split_fields1 a))) (to_rep (rec__dates__date__year (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dates__date__day__first__bit Int)
(declare-const dates__date__day__last__bit Int)
(declare-const dates__date__day__position Int)
(assert (<= 0 dates__date__day__first__bit))
(assert (< dates__date__day__first__bit dates__date__day__last__bit))
(assert (<= 0 dates__date__day__position))
(declare-const dates__date__month__first__bit Int)
(declare-const dates__date__month__last__bit Int)
(declare-const dates__date__month__position Int)
(assert (<= 0 dates__date__month__first__bit))
(assert (< dates__date__month__first__bit dates__date__month__last__bit))
(assert (<= 0 dates__date__month__position))
(declare-const dates__date__year__first__bit Int)
(declare-const dates__date__year__last__bit Int)
(declare-const dates__date__year__position Int)
(assert (<= 0 dates__date__year__first__bit))
(assert (< dates__date__year__first__bit dates__date__year__last__bit))
(assert (<= 0 dates__date__year__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((date__ref (mk_date__ref (date__content us_rep)))))
(define-fun date__ref___projection ((a date__ref)) us_rep (date__content a))
(declare-fun maximum_date (tuple0) us_rep)
(declare-fun maximum_date__function_guard (us_rep tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (maximum_date us_void_param) (mk___rep (mk___split_fields (of_rep2 31) (of_rep1 12) (of_rep 2099)))) :pattern ((maximum_date us_void_param)))))
(define-fun dynamic_invariant ((temp___expr_150 Int) (temp___is_init_147 Bool) (temp___skip_constant_148 Bool) (temp___do_toplevel_149 Bool)) Bool (=> (or (= temp___is_init_147 true) (<= 2000 2099)) (in_range temp___expr_150)))
(define-fun dynamic_invariant1 ((temp___expr_156 Int) (temp___is_init_153 Bool) (temp___skip_constant_154 Bool) (temp___do_toplevel_155 Bool)) Bool (=> (or (= temp___is_init_153 true) (<= 1 12)) (in_range1 temp___expr_156)))
(define-fun dynamic_invariant2 ((temp___expr_162 Int) (temp___is_init_159 Bool) (temp___skip_constant_160 Bool) (temp___do_toplevel_161 Bool)) Bool (=> (or (= temp___is_init_159 true) (<= 1 31)) (in_range2 temp___expr_162)))
(declare-fun get_month_length (Int Int) Int)
(declare-fun get_month_length__function_guard (Int Int Int) Bool)
(assert (forall ((year Int) (month Int)) (! (=> (and (dynamic_invariant year true true true) (dynamic_invariant1 month true true true)) (let ((result (get_month_length year month))) (and (and (and (and (and (and (and (and (and (and (and (and (=> (= month 1) (= result 31)) (=> (= month 2) (or (= result 28) (= result 29)))) (=> (= month 3) (= result 31))) (=> (= month 4) (= result 30))) (=> (= month 5) (= result 31))) (=> (= month 6) (= result 30))) (=> (= month 7) (= result 31))) (=> (= month 8) (= result 31))) (=> (= month 9) (= result 30))) (=> (= month 10) (= result 31))) (=> (= month 11) (= result 30))) (=> (= month 12) (= result 31))) (dynamic_invariant2 result true false true)))) :pattern ((get_month_length year month)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const current_date__split_fields day_type)
(declare-const current_date__split_fields1 month_type)
(declare-const current_date__split_fields2 year_type)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 day_type)
(declare-const o3 day_type)
(declare-const o4 month_type)
(declare-const o5 year_type)
(declare-const temp___265 day_type)
(declare-const temp___2651 month_type)
(declare-const temp___2652 year_type)
(declare-const o6 Int)
(declare-const o7 day_type)
(declare-const o8 day_type)
(declare-const o9 month_type)
(declare-const o10 year_type)
(declare-const temp___259 day_type)
(declare-const temp___2591 month_type)
(declare-const temp___2592 year_type)
(declare-const o11 month_type)
(declare-const o12 day_type)
(declare-const o13 month_type)
(declare-const o14 year_type)
(declare-const temp___261 day_type)
(declare-const temp___2611 month_type)
(declare-const temp___2612 year_type)
(declare-const o15 Int)
(declare-const result Bool)
(declare-const result1 day_type)
(declare-const result2 month_type)
(declare-const result3 year_type)
(declare-const current_date__split_fields3 day_type)
(declare-const current_date__split_fields4 month_type)
(declare-const current_date__split_fields5 year_type)
(declare-const result4 day_type)
(declare-const result5 month_type)
(declare-const result6 year_type)
(declare-const current_date__split_fields6 day_type)
(declare-const current_date__split_fields7 month_type)
(declare-const current_date__split_fields8 year_type)
(declare-const result7 day_type)
(declare-const result8 month_type)
(declare-const result9 year_type)
(declare-const current_date__split_fields9 day_type)
(declare-const current_date__split_fields10 month_type)
(declare-const current_date__split_fields11 year_type)
(assert (not (= (bool_eq (mk___rep (mk___split_fields current_date__split_fields current_date__split_fields1 current_date__split_fields2)) (maximum_date Tuple0)) true)))
(assert (and (= o (get_month_length (to_rep current_date__split_fields2) (to_rep1 current_date__split_fields1))) (and (in_range2 o) (and (and (and (and (and (and (and (and (and (and (and (=> (= (to_rep1 current_date__split_fields1) 1) (= o 31)) (=> (= (to_rep1 current_date__split_fields1) 2) (or (= o 28) (= o 29)))) (=> (= (to_rep1 current_date__split_fields1) 3) (= o 31))) (=> (= (to_rep1 current_date__split_fields1) 4) (= o 30))) (=> (= (to_rep1 current_date__split_fields1) 5) (= o 31))) (=> (= (to_rep1 current_date__split_fields1) 6) (= o 30))) (=> (= (to_rep1 current_date__split_fields1) 7) (= o 31))) (=> (= (to_rep1 current_date__split_fields1) 8) (= o 31))) (=> (= (to_rep1 current_date__split_fields1) 9) (= o 30))) (=> (= (to_rep1 current_date__split_fields1) 10) (= o 31))) (=> (= (to_rep1 current_date__split_fields1) 11) (= o 30))) (=> (= (to_rep1 current_date__split_fields1) 12) (= o 31))))))
(assert (= result (ite (< (to_rep2 current_date__split_fields) o) true false)))
(assert (not (= result true)))
(assert (= (to_rep1 current_date__split_fields1) 12))
(assert (= (to_rep2 o7) 1))
(assert (= o7 o8))
(assert (= current_date__split_fields1 o9))
(assert (= current_date__split_fields2 o10))
(assert (= temp___259 o8))
(assert (= temp___2591 o9))
(assert (= temp___2592 o10))
(assert (= result4 current_date__split_fields))
(assert (= result5 current_date__split_fields1))
(assert (= result6 current_date__split_fields2))
(assert (= temp___259 current_date__split_fields6))
(assert (= temp___2591 current_date__split_fields7))
(assert (= temp___2592 current_date__split_fields8))
(assert (= (to_rep1 o11) 1))
(assert (= current_date__split_fields6 o12))
(assert (= o11 o13))
(assert (= current_date__split_fields8 o14))
(assert (= temp___261 o12))
(assert (= temp___2611 o13))
(assert (= temp___2612 o14))
(assert (= result7 current_date__split_fields6))
(assert (= result8 current_date__split_fields7))
(assert (= result9 current_date__split_fields8))
(assert (= temp___261 current_date__split_fields9))
(assert (= temp___2611 current_date__split_fields10))
(assert (= temp___2612 current_date__split_fields11))
(assert (not (in_range (+ (to_rep current_date__split_fields11) 1))))
(check-sat)
(exit)
