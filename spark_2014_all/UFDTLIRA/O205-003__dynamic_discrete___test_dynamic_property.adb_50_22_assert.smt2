(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range temp___expr_46)))
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const last Int)
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((dynamic_discrete__ref (mk_dynamic_discrete__ref (dynamic_discrete__content integer)))))
(define-fun dynamic_discrete__ref___projection ((a dynamic_discrete__ref)) integer (dynamic_discrete__content a))
(define-fun dynamic_invariant1 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 last)) (dynamic_property 0 last temp___expr_165)))
(assert (= last c))
(declare-fun dyn_return (Int) Int)
(declare-fun dyn_return__function_guard (Int Int) Bool)
(declare-const last1 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((pos_dynamic_discrete__ref (mk_pos_dynamic_discrete__ref (pos_dynamic_discrete__content integer)))))
(define-fun pos_dynamic_discrete__ref___projection ((a pos_dynamic_discrete__ref)) integer (pos_dynamic_discrete__content a))
(define-fun dynamic_invariant2 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 1 last1)) (dynamic_property1 1 last1 temp___expr_158)))
(assert (= last1 c))
(assert (forall ((x Int)) (! (=> (dynamic_invariant x true true true true) (dynamic_invariant2 (dyn_return x) true false true true)) :pattern ((dyn_return x)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const x Int)
(declare-const y Int)
(declare-const us Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const us1 Int)
(declare-const o2 Int)
(declare-const test_dynamic_property__dyn_param__x Int)
(declare-const us2 Int)
(declare-const o3 Int)
(declare-const result Int)
(declare-const x1 Int)
(declare-const result1 Int)
(declare-const x2 Int)
(declare-const x3 Int)
(declare-const test_dynamic_property__dyn_param__x1 Int)
(declare-const result2 Int)
(declare-const y1 Int)
(assert (in_range c))
(assert (and (= us c) (dynamic_property1 1 last1 c)))
(assert (= o c))
(assert (= result x))
(assert (= x1 o))
(assert (dynamic_property1 1 last1 x1))
(assert (dynamic_property 0 last y))
(assert (and (= o1 (dyn_return 30)) (dynamic_property1 1 last1 o1)))
(assert (= result1 x1))
(assert (= x2 o1))
(assert (<= x2 c))
(assert (<= (dyn_return 40) c))
(assert (dynamic_property1 1 last1 x3))
(assert (<= x3 c))
(assert (< 0 y))
(assert (and (= us1 y) (dynamic_property1 1 last1 y)))
(assert (= o2 y))
(assert (= o2 test_dynamic_property__dyn_param__x))
(assert (dynamic_property1 1 last1 test_dynamic_property__dyn_param__x1))
(assert (and (= us2 test_dynamic_property__dyn_param__x1) (dynamic_property 0 last test_dynamic_property__dyn_param__x1)))
(assert (= o3 test_dynamic_property__dyn_param__x1))
(assert (= (mk_int__ref result2) (mk_int__ref y)))
(assert (= y1 o3))
(assert (not (<= y1 c)))
(check-sat)
(exit)
