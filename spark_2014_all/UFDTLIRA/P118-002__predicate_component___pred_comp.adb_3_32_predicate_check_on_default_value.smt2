(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort ct 0)
(declare-fun user_eq (ct ct) Bool)
(declare-const value__size Int)
(declare-fun object__size (ct) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (ct) Int)
(assert (<= 0 value__size))
(assert (forall ((a ct)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a ct)) (<= 0 (object__alignment a))))
(declare-const dummy ct)
(declare-datatypes () ((ct__ref (mk_ct__ref (ct__content ct)))))
(define-fun ct__ref___projection ((a ct__ref)) ct (ct__content a))
(define-fun dynamic_invariant ((temp___expr_200 ct) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool (=> (= temp___do_toplevel_198 true) (not (= temp___is_init_196 true))))
(define-fun dynamic_predicate ((temp___204 ct)) Bool false)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__pred_comp__r__c ct)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) ct (rec__pred_comp__r__c a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const pred_comp__r__c__first__bit Int)
(declare-const pred_comp__r__c__last__bit Int)
(declare-const pred_comp__r__c__position Int)
(assert (<= 0 pred_comp__r__c__first__bit))
(assert (< pred_comp__r__c__first__bit pred_comp__r__c__last__bit))
(assert (<= 0 pred_comp__r__c__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))
(define-fun dynamic_invariant1 ((temp___expr_210 us_rep) (temp___is_init_206 Bool) (temp___skip_constant_207 Bool) (temp___do_toplevel_208 Bool) (temp___do_typ_inv_209 Bool)) Bool (not (= temp___is_init_206 true)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const c3b ct)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const temp___217 ct)
(assert (not (dynamic_predicate temp___217)))
(check-sat)
(exit)
