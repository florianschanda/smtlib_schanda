(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort statust 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (statust statust) Bool)
(declare-const dummy statust)
(declare-datatypes () ((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content a))
(define-fun dynamic_invariant ((temp___expr_152 Int) (temp___is_init_149 Bool) (temp___skip_constant_150 Bool) (temp___do_toplevel_151 Bool)) Bool (=> (or (= temp___is_init_149 true) (<= 0 1)) (in_range1 temp___expr_152)))
(declare-fun theauditalarm (us_private) Int)
(declare-fun theauditalarm__function_guard (Int us_private) Bool)
(assert (forall ((auditlog__state us_private)) (! (dynamic_invariant (theauditalarm auditlog__state) true false true) :pattern ((theauditalarm auditlog__state)))))
(declare-fun thedooralarm (us_private) Int)
(declare-fun thedooralarm__function_guard (Int us_private) Bool)
(assert (forall ((door__state us_private)) (! (dynamic_invariant (thedooralarm door__state) true false true) :pattern ((thedooralarm door__state)))))
(declare-fun isalarming (tuple0) Bool)
(declare-fun isalarming__function_guard (Bool tuple0) Bool)
(declare-fun isalarming1 (tuple0) Bool)
(declare-fun isalarming__function_guard1 (Bool tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (= (= (isalarming us_void_param) true) (= (isalarming1 Tuple0) true)) :pattern ((isalarming us_void_param)))))
(declare-const state us_private)
(declare-const state1 us_private)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Bool)
(declare-const o3 Bool)
(declare-const result Bool)
(declare-const output us_private)
(declare-const output1 us_private)
(declare-const output2 us_private)
(declare-const output3 us_private)
(assert (and (= o1 (theauditalarm state)) (in_range1 o1)))
(assert (= o2 (ite (= o1 0) true false)))
(assert (and (= o (thedooralarm state1)) (in_range1 o)))
(assert (= o3 (ite (= o 0) true false)))
(assert (= result (ite (= o3 false) o2 true)))
(assert (=> (= result true) (= (isalarming1 Tuple0) true)))
(assert (=> (not (= result true)) (not (= (isalarming1 Tuple0) true))))
(assert (=> (not (= result true)) (= output output1)))
(assert (= output2 output))
(assert (= output3 output))
(assert (not (<= (to_int1 (= (thedooralarm state1) 0)) (to_int1 (isalarming1 Tuple0)))))
(check-sat)
(exit)
