(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__unit1__t1__c1 : integer; rec__ext__ :
us_private
}

function us_split_fields_C1__projection(a: us_split_fields) : integer =
  (a).rec__unit1__t1__c1

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__unit1__t1__c1) = to_rep(((b).us_split_fields1).rec__unit1__t1__c1)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__unit1__t1__c1) = to_rep(((b).us_split_fields1).rec__unit1__t1__c1))) ->
  (bool_eq2(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = { rec__unit1__t1__c1 = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = { rec__unit1__t1__c1 = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

logic unit1__t1__c1__first__bit : int

logic unit1__t1__c1__last__bit : int

logic unit1__t1__c1__position : int

axiom unit1__t1__c1__first__bit_axiom : (0 <= unit1__t1__c1__first__bit)

axiom unit1__t1__c1__last__bit_axiom :
  (unit1__t1__c1__first__bit <  unit1__t1__c1__last__bit)

axiom unit1__t1__c1__position_axiom : (0 <= unit1__t1__c1__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : us_private

logic dummy3 : int

type t1__ref = { t1__content : us_rep
}

function t1__ref___projection(a: t1__ref) : us_rep = (a).t1__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq3 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

logic is_max : us_rep -> bool

logic is_max__function_guard : bool, us_rep -> prop

logic is_max1 : int, us_rep -> bool

logic is_max__function_guard1 : bool, int, us_rep -> prop

logic next : us_rep -> us_rep

logic next__function_guard : us_rep, us_rep -> prop

logic next1 : int, us_rep -> us_rep

logic next__function_guard1 : us_rep, int, us_rep -> prop

type us_split_fields2 = { rec__unit2__t2__c2 : integer; rec__unit1__t1__c11 :
integer; rec__ext__1 : us_private
}

function us_split_fields_C2__projection(a: us_split_fields2) : integer =
  (a).rec__unit2__t2__c2

function us_split_fields_C1__2__projection(a: us_split_fields2) : integer =
  (a).rec__unit1__t1__c11

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__c2 : us_private -> integer

axiom extract__c2__conv :
  (forall c2:integer.
  (forall rec__ext__2:us_private. (extract__c2(hide_ext__(c2,
  rec__ext__2)) = c2)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__unit1__t1__c1 = ((a).us_split_fields3).rec__unit1__t1__c11;
  rec__ext__ = hide_ext__(((a).us_split_fields3).rec__unit2__t2__c2,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__unit2__t2__c2 = extract__c2(((r).us_split_fields1).rec__ext__);
  rec__unit1__t1__c11 = ((r).us_split_fields1).rec__unit1__t1__c1;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__unit2__t2__c2) = to_rep(((b).us_split_fields3).rec__unit2__t2__c2)) and
  (to_rep(((a).us_split_fields3).rec__unit1__t1__c11) = to_rep(((b).us_split_fields3).rec__unit1__t1__c11))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__unit2__t2__c2) = to_rep(((b).us_split_fields3).rec__unit2__t2__c2)) and
  (to_rep(((a).us_split_fields3).rec__unit1__t1__c11) = to_rep(((b).us_split_fields3).rec__unit1__t1__c11)))) ->
  (bool_eq4(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size1({ us_split_fields3 = { rec__unit2__t2__c2 = a;
  rec__unit1__t1__c11 = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment1({ us_split_fields3 = { rec__unit2__t2__c2 = a;
  rec__unit1__t1__c11 = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic unit2__t2__c2__first__bit : int

logic unit2__t2__c2__last__bit : int

logic unit2__t2__c2__position : int

axiom unit2__t2__c2__first__bit_axiom : (0 <= unit2__t2__c2__first__bit)

axiom unit2__t2__c2__last__bit_axiom :
  (unit2__t2__c2__first__bit <  unit2__t2__c2__last__bit)

axiom unit2__t2__c2__position_axiom : (0 <= unit2__t2__c2__position)

logic unit1__t1__c1__first__bit1 : int

logic unit1__t1__c1__last__bit1 : int

logic unit1__t1__c1__position1 : int

axiom unit1__t1__c1__first__bit_axiom1 : (0 <= unit1__t1__c1__first__bit1)

axiom unit1__t1__c1__last__bit_axiom1 :
  (unit1__t1__c1__first__bit1 <  unit1__t1__c1__last__bit1)

axiom unit1__t1__c1__position_axiom1 : (0 <= unit1__t1__c1__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : us_private

logic dummy7 : int

type t2__ref = { t2__content : us_rep1
}

function t2__ref___projection(a: t2__ref) : us_rep1 = (a).t2__content

logic bump__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom unit2__t2__compat_axiom :
  (forall unit1__bump__x__fields:integer.
  forall unit1__bump__x__fields1:us_private.
  forall unit1__bump__x__old__fields:integer.
  forall unit1__bump__x__old__fields1:us_private.
  (forall x__attr__tag:int [bump__specific_post(us_tag1, {
  rec__unit1__t1__c1 = unit1__bump__x__fields; rec__ext__ =
  unit1__bump__x__fields1 }, x__attr__tag, { rec__unit1__t1__c1 =
  unit1__bump__x__old__fields; rec__ext__ = unit1__bump__x__old__fields1 })].
  (bump__specific_post(us_tag1, { rec__unit1__t1__c1 =
  unit1__bump__x__fields; rec__ext__ = unit1__bump__x__fields1 },
  x__attr__tag, { rec__unit1__t1__c1 = unit1__bump__x__old__fields;
  rec__ext__ = unit1__bump__x__old__fields1 }) -> ((to_rep(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__fields;
  rec__ext__ = unit1__bump__x__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit1__t1__c11) = (to_rep(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__old__fields;
  rec__ext__ = unit1__bump__x__old__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit1__t1__c11) + 1)) and (to_rep(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__fields;
  rec__ext__ = unit1__bump__x__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit2__t2__c2) = (to_rep(((of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__old__fields;
  rec__ext__ = unit1__bump__x__old__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit2__t2__c2) + 1))))))

axiom unit1__t1__compat_axiom :
  (forall unit1__bump__x__fields:integer.
  forall unit1__bump__x__fields1:us_private.
  forall unit1__bump__x__old__fields:integer.
  forall unit1__bump__x__old__fields1:us_private.
  (forall x__attr__tag:int [bump__specific_post(us_tag, {
  rec__unit1__t1__c1 = unit1__bump__x__fields; rec__ext__ =
  unit1__bump__x__fields1 }, x__attr__tag, { rec__unit1__t1__c1 =
  unit1__bump__x__old__fields; rec__ext__ = unit1__bump__x__old__fields1 })].
  (bump__specific_post(us_tag, { rec__unit1__t1__c1 = unit1__bump__x__fields;
  rec__ext__ = unit1__bump__x__fields1 }, x__attr__tag, {
  rec__unit1__t1__c1 = unit1__bump__x__old__fields; rec__ext__ =
  unit1__bump__x__old__fields1 }) ->
  (to_rep(unit1__bump__x__fields) = (to_rep(unit1__bump__x__old__fields) + 1)))))

logic is_max2 : us_rep1 -> bool

logic is_max__function_guard2 : bool, us_rep1 -> prop

logic is_max3 : int, us_rep1 -> bool

logic is_max__function_guard3 : bool, int, us_rep1 -> prop

logic x__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

axiom is_max__post_axiom : true

axiom is_max__post__dispatch_axiom : true

axiom unit2__t2__compat_axiom1 :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [is_max3(us_tag1, { us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })].
  (to_int(is_max2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3
  })) = to_int(is_max3(us_tag1, { us_split_fields3 = { rec__unit2__t2__c2 =
  x; rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 }))))

axiom is_max__def_axiom :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [is_max2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })].
  ((is_max2({ us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3
  }) = true) <-> ((is_max({ us_split_fields1 = { rec__unit1__t1__c1 = x1;
  rec__ext__ = hide_ext__(x, x2) }; attr__tag = x3 }) = true) or
  (to_rep(x) = 2147483647))))

logic next2 : us_rep1 -> us_rep1

logic next__function_guard2 : us_rep1, us_rep1 -> prop

logic next3 : int, us_rep1 -> us_rep1

logic next__function_guard3 : us_rep1, int, us_rep1 -> prop

axiom unit2__t2__compat_axiom2 :
  (forall x:integer. forall x1:integer. forall x2:us_private. forall x3:int
  [next3(us_tag1, { us_split_fields3 = { rec__unit2__t2__c2 = x;
  rec__unit1__t1__c11 = x1; rec__ext__1 = x2 }; attr__tag1 = x3 })]. (next2({
  us_split_fields3 = { rec__unit2__t2__c2 = x; rec__unit1__t1__c11 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 }) = next3(us_tag1, {
  us_split_fields3 = { rec__unit2__t2__c2 = x; rec__unit1__t1__c11 = x1;
  rec__ext__1 = x2 }; attr__tag1 = x3 })))

axiom is_max__post_axiom1 : true

axiom is_max__post__dispatch_axiom1 : true

axiom unit2__t2__compat_axiom3 :
  (forall x:integer. forall x1:us_private. forall x2:int [is_max1(us_tag1, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (to_int(is_max2(of_base({ us_split_fields1 = { rec__unit1__t1__c1 =
  x; rec__ext__ = x1 }; attr__tag = x2 }))) = to_int(is_max1(us_tag1, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))))

axiom unit1__t1__compat_axiom1 :
  (forall x:integer. forall x1:us_private. forall x2:int [is_max1(us_tag, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (to_int(is_max({ us_split_fields1 = { rec__unit1__t1__c1 = x;
  rec__ext__ = x1 }; attr__tag = x2 })) = to_int(is_max1(us_tag, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))))

axiom is_max__def_axiom1 :
  (forall x:integer. forall x1:us_private. forall x2:int [is_max({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. ((is_max({ us_split_fields1 = { rec__unit1__t1__c1 = x;
  rec__ext__ = x1 }; attr__tag = x2 }) = true) <-> (to_rep(x) = 2147483647)))

axiom unit2__t2__compat_axiom4 :
  (forall x:integer. forall x1:us_private. forall x2:int [next1(us_tag1, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. ({ us_split_fields1 = { rec__unit1__t1__c1 = ((next2(of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))).us_split_fields3).rec__unit1__t1__c11; rec__ext__ =
  hide_ext__(((next2(of_base({ us_split_fields1 = { rec__unit1__t1__c1 = x;
  rec__ext__ = x1 }; attr__tag = x2
  }))).us_split_fields3).rec__unit2__t2__c2, ((next2(of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))).us_split_fields3).rec__ext__1) }; attr__tag = (next2(of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 }))).attr__tag1 } = next1(us_tag1, { us_split_fields1 = {
  rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag = x2 })))

axiom unit1__t1__compat_axiom2 :
  (forall x:integer. forall x1:us_private. forall x2:int [next1(us_tag, {
  us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (next({ us_split_fields1 = { rec__unit1__t1__c1 = x; rec__ext__ =
  x1 }; attr__tag = x2 }) = next1(us_tag, { us_split_fields1 = {
  rec__unit1__t1__c1 = x; rec__ext__ = x1 }; attr__tag = x2 })))

 (* File "unit2.ads", line 20, characters 0-0 *)
goal WP_parameter_def :
  (forall x__split_fields:integer. forall x__split_fields1:integer.
  forall x__split_fields2:us_private. forall o:int. forall o1:integer.
  forall o2:integer. forall o3:integer. forall o4:us_private.
  forall temp___201:integer. forall temp___2011:integer.
  forall temp___2012:us_private. forall temp___2013:int.
  forall unit1__bump__x__fields:integer.
  forall unit1__bump__x__fields1:us_private. forall result:integer.
  forall result1:integer. forall result2:us_private.
  forall x__split_fields3:integer. forall x__split_fields4:integer.
  forall x__split_fields5:us_private. forall result3:integer.
  forall result4:integer. forall result5:us_private.
  forall x__split_fields6:integer. forall x__split_fields7:integer.
  forall x__split_fields8:us_private. forall x__split_fields9:integer.
  forall x__split_fields10:integer. forall x__split_fields11:us_private.
  forall x__split_fields12:integer. forall x__split_fields13:integer.
  forall x__split_fields14:us_private. (((not (is_max2({ us_split_fields3 = {
  rec__unit2__t2__c2 = x__split_fields; rec__unit1__t1__c11 =
  x__split_fields1; rec__ext__1 = x__split_fields2 }; attr__tag1 =
  x__attr__tag }) = true)) and
  ((((to_rep(unit1__bump__x__fields) = (to_rep(x__split_fields1) + 1)) and
  (({ us_split_fields__content1 = { rec__unit2__t2__c2 = result;
  rec__unit1__t1__c11 = result1; rec__ext__1 = result2 } } = {
  us_split_fields__content1 = { rec__unit2__t2__c2 = x__split_fields;
  rec__unit1__t1__c11 = x__split_fields1; rec__ext__1 = x__split_fields2 }
  }) and ({ rec__unit2__t2__c2 = x__split_fields3; rec__unit1__t1__c11 =
  x__split_fields4; rec__ext__1 = x__split_fields5 } = (of_base({
  us_split_fields1 = { rec__unit1__t1__c1 = unit1__bump__x__fields;
  rec__ext__ = unit1__bump__x__fields1 }; attr__tag = x__attr__tag
  })).us_split_fields3))) and ((((((o = (to_rep(x__split_fields3) + 1)) and
  in_range((to_rep(x__split_fields3) + 1))) and (to_rep(o1) = o)) and
  ((o1 = o2) and ((x__split_fields4 = o3) and (x__split_fields5 = o4)))) and
  (((temp___201 = o2) and ((temp___2011 = o3) and (temp___2012 = o4))) and
  (x__attr__tag = temp___2013))) and (((result3 = x__split_fields3) and
  ((result4 = x__split_fields4) and (result5 = x__split_fields5))) and
  ((temp___201 = x__split_fields6) and ((temp___2011 = x__split_fields7) and
  (temp___2012 = x__split_fields8)))))) and
  (((x__split_fields9 = x__split_fields6) and
  ((x__split_fields10 = x__split_fields7) and
  (x__split_fields11 = x__split_fields8))) and ({ rec__unit2__t2__c2 =
  x__split_fields12; rec__unit1__t1__c11 = x__split_fields13; rec__ext__1 =
  x__split_fields14 } = { rec__unit2__t2__c2 = x__split_fields6;
  rec__unit1__t1__c11 = x__split_fields7; rec__ext__1 = x__split_fields8
  })))) -> (to_rep(x__split_fields10) = (to_rep(x__split_fields1) + 1))))
