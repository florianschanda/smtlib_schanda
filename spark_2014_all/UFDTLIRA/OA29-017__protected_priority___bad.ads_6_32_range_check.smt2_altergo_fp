(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type any_priority

predicate in_range1(x: int) = ((0 <= x) and (x <= 98))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : any_priority, any_priority -> bool

logic dummy1 : any_priority

type any_priority__ref = { any_priority__content : any_priority
}

function any_priority__ref___projection(a: any_priority__ref) : any_priority =
  (a).any_priority__content

logic too_big : unit -> int

logic too_big__function_guard : int, unit -> prop

axiom too_big__post_axiom : in_range(too_big(void))

axiom too_big__def_axiom : (too_big(void) = 99)

logic r1s : int

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_discrs = { rec__interrupt_priority__no_interrupt_needed_1__c :
any_priority
}

function us_split_discrs___projection(a: us_split_discrs) : any_priority =
  (a).rec__interrupt_priority__no_interrupt_needed_1__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__interrupt_priority__no_interrupt_needed_1__i :
integer
}

function us_split_fields_I__projection(a: us_split_fields) : integer =
  (a).rec__interrupt_priority__no_interrupt_needed_1__i

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:any_priority. forall a1:integer. (0 <= object__size({
  us_split_discrs1 = { rec__interrupt_priority__no_interrupt_needed_1__c = a
  }; us_split_fields1 = { rec__interrupt_priority__no_interrupt_needed_1__i =
  a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:any_priority. forall a1:integer. (0 <= object__alignment({
  us_split_discrs1 = { rec__interrupt_priority__no_interrupt_needed_1__c = a
  }; us_split_fields1 = { rec__interrupt_priority__no_interrupt_needed_1__i =
  a1 } })))

logic interrupt_priority__no_interrupt_needed_1__c__first__bit : int

logic interrupt_priority__no_interrupt_needed_1__c__last__bit : int

logic interrupt_priority__no_interrupt_needed_1__c__position : int

axiom interrupt_priority__no_interrupt_needed_1__c__first__bit_axiom :
  (0 <= interrupt_priority__no_interrupt_needed_1__c__first__bit)

axiom interrupt_priority__no_interrupt_needed_1__c__last__bit_axiom :
  (interrupt_priority__no_interrupt_needed_1__c__first__bit <  interrupt_priority__no_interrupt_needed_1__c__last__bit)

axiom interrupt_priority__no_interrupt_needed_1__c__position_axiom :
  (0 <= interrupt_priority__no_interrupt_needed_1__c__position)

logic interrupt_priority__no_interrupt_needed_1__i__first__bit : int

logic interrupt_priority__no_interrupt_needed_1__i__last__bit : int

logic interrupt_priority__no_interrupt_needed_1__i__position : int

axiom interrupt_priority__no_interrupt_needed_1__i__first__bit_axiom :
  (0 <= interrupt_priority__no_interrupt_needed_1__i__first__bit)

axiom interrupt_priority__no_interrupt_needed_1__i__last__bit_axiom :
  (interrupt_priority__no_interrupt_needed_1__i__first__bit <  interrupt_priority__no_interrupt_needed_1__i__last__bit)

axiom interrupt_priority__no_interrupt_needed_1__i__position_axiom :
  (0 <= interrupt_priority__no_interrupt_needed_1__i__position)

logic user_eq2 : us_rep, us_rep -> bool

type no_interrupt_needed_1__ref = { no_interrupt_needed_1__content : us_rep
}

function no_interrupt_needed_1__ref___projection(a: no_interrupt_needed_1__ref) : us_rep =
  (a).no_interrupt_needed_1__content

type us_split_fields2 = { rec__interrupt_priority__no_interrupt_needed_1__i1
: integer
}

function us_split_fields_I__2__projection(a: us_split_fields2) : integer =
  (a).rec__interrupt_priority__no_interrupt_needed_1__i1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__interrupt_priority__no_interrupt_needed_1__i =
  ((a).us_split_fields3).rec__interrupt_priority__no_interrupt_needed_1__i1 }
  }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__interrupt_priority__no_interrupt_needed_1__i1 =
  ((r).us_split_fields1).rec__interrupt_priority__no_interrupt_needed_1__i }
  }

logic to_rep : any_priority -> int

logic of_rep : int -> any_priority

axiom inversion_axiom :
  (forall x:any_priority [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:any_priority [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

predicate in_range2(rec__interrupt_priority__no_interrupt_needed_1__c1: int,
  a: us_rep) =
  (rec__interrupt_priority__no_interrupt_needed_1__c1 = to_rep(((a).us_split_discrs1).rec__interrupt_priority__no_interrupt_needed_1__c))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:any_priority. forall a1:integer. (0 <= object__size1({
  us_split_discrs2 = { rec__interrupt_priority__no_interrupt_needed_1__c = a
  }; us_split_fields3 = {
  rec__interrupt_priority__no_interrupt_needed_1__i1 = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:any_priority. forall a1:integer. (0 <= object__alignment1({
  us_split_discrs2 = { rec__interrupt_priority__no_interrupt_needed_1__c = a
  }; us_split_fields3 = {
  rec__interrupt_priority__no_interrupt_needed_1__i1 = a1 } })))

logic interrupt_priority__no_interrupt_needed_1__c__first__bit1 : int

logic interrupt_priority__no_interrupt_needed_1__c__last__bit1 : int

logic interrupt_priority__no_interrupt_needed_1__c__position1 : int

axiom interrupt_priority__no_interrupt_needed_1__c__first__bit_axiom1 :
  (0 <= interrupt_priority__no_interrupt_needed_1__c__first__bit1)

axiom interrupt_priority__no_interrupt_needed_1__c__last__bit_axiom1 :
  (interrupt_priority__no_interrupt_needed_1__c__first__bit1 <  interrupt_priority__no_interrupt_needed_1__c__last__bit1)

axiom interrupt_priority__no_interrupt_needed_1__c__position_axiom1 :
  (0 <= interrupt_priority__no_interrupt_needed_1__c__position1)

logic interrupt_priority__no_interrupt_needed_1__i__first__bit1 : int

logic interrupt_priority__no_interrupt_needed_1__i__last__bit1 : int

logic interrupt_priority__no_interrupt_needed_1__i__position1 : int

axiom interrupt_priority__no_interrupt_needed_1__i__first__bit_axiom1 :
  (0 <= interrupt_priority__no_interrupt_needed_1__i__first__bit1)

axiom interrupt_priority__no_interrupt_needed_1__i__last__bit_axiom1 :
  (interrupt_priority__no_interrupt_needed_1__i__first__bit1 <  interrupt_priority__no_interrupt_needed_1__i__last__bit1)

axiom interrupt_priority__no_interrupt_needed_1__i__position_axiom1 :
  (0 <= interrupt_priority__no_interrupt_needed_1__i__position1)

logic user_eq3 : us_rep1, us_rep1 -> bool

type tp1S__ref = { tp1S__content : us_rep1
}

function tp1S__ref___projection(a: tp1S__ref) : us_rep1 = (a).tp1S__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic p1__split_discrs : any_priority

logic attr__ATTRIBUTE_ADDRESS1 : int

logic bad__R1s__assume : int

logic us : int

axiom H : ((bad__R1s__assume = too_big(void)) and
  (in_range(bad__R1s__assume) and (bad__R1s__assume = 99)))

axiom H1 : (bad__R1s__assume = r1s)

axiom H2 : in_range(r1s)

 (* File "bad.ads", line 5, characters 0-0 *)
goal WP_parameter_def : in_range1(r1s)
