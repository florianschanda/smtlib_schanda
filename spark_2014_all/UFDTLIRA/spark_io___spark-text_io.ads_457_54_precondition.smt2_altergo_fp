(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq1 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref___2__projection(a: file_type__ref) : us_rep =
  (a).file_type__content

type positive_count

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive_count, positive_count -> bool

logic dummy1 : positive_count

type positive_count__ref = { positive_count__content : positive_count
}

function positive_count__ref___2__projection(a: positive_count__ref) : positive_count =
  (a).positive_count__content

logic is_readable : us_rep -> bool

logic is_readable__function_guard : bool, us_rep -> prop

logic is_open : us_rep -> bool

logic is_open__function_guard : bool, us_rep -> prop

logic mode__2 : us_rep -> int

logic mode__2__function_guard : int, us_rep -> prop

axiom is_readable__def_axiom :
  (forall file:us_rep [is_readable(file)]. ((is_readable(file) = true) <->
  ((is_open(file) = true) and (mode__2(file) = 0))))

logic is_writable : us_rep -> bool

logic is_writable__function_guard : bool, us_rep -> prop

axiom is_writable__def_axiom :
  (forall file:us_rep [is_writable(file)]. ((is_writable(file) = true) <->
  ((is_open(file) = true) and ((mode__2(file) = 1) or (mode__2(file) = 2)))))

logic page_length__2 : us_rep -> int

logic page_length__2__function_guard : int, us_rep -> prop

type count

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : count, count -> bool

logic dummy2 : count

type count__ref = { count__content : count
}

function count__ref___2__projection(a: count__ref) : count =
  (a).count__content

logic end_of_file : us_rep -> bool

logic end_of_file__function_guard : bool, us_rep -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic to__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type file_mode

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : file_mode, file_mode -> bool

logic dummy3 : file_mode

type file_mode__ref = { file_mode__content : file_mode
}

function file_mode__ref___3__projection(a: file_mode__ref) : file_mode =
  (a).file_mode__content

 (* File "spark-text_io.ads", line 498, characters 0-0 *)
goal WP_parameter_def :
  (forall file:us_rep. forall o:int. forall result:bool. forall result1:bool.
  forall result2:bool. (in_range1(to__) -> (((result = is_writable(file)) and
  ((result = true) <-> ((is_open(file) = true) and ((mode__2(file) = 1) or
  (mode__2(file) = 2))))) -> ((result = true) ->
  ((((o = page_length__2(file)) and in_range2(o)) and (((0 <  o) and
  (result1 = true)) or ((not (0 <  o)) and (result1 = false)))) ->
  ((not (result1 = true)) -> (((result2 = is_readable(file)) and
  ((result2 = true) <-> ((is_open(file) = true) and (mode__2(file) = 0)))) ->
  ((result2 = true) -> (is_readable(file) = true)))))))))
