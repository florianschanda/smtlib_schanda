(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort unsigned_byte 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (unsigned_byte unsigned_byte) Bool)
(declare-const dummy unsigned_byte)
(declare-datatypes () ((unsigned_byte__ref (mk_unsigned_byte__ref (unsigned_byte__content unsigned_byte)))))
(define-fun unsigned_byte__ref___projection ((a unsigned_byte__ref)) unsigned_byte (unsigned_byte__content a))
(define-fun dynamic_invariant ((temp___expr_180 Int) (temp___is_init_177 Bool) (temp___skip_constant_178 Bool) (temp___do_toplevel_179 Bool)) Bool (=> (or (= temp___is_init_177 true) (<= 0 255)) (in_range1 temp___expr_180)))
(declare-fun to_rep (unsigned_byte) Int)
(declare-fun of_rep (Int) unsigned_byte)
(assert (forall ((x unsigned_byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x unsigned_byte)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__records_prooffuncs__pair__a unsigned_byte) (rec__records_prooffuncs__pair__b unsigned_byte)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) unsigned_byte (rec__records_prooffuncs__pair__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) unsigned_byte (rec__records_prooffuncs__pair__b a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 a))) (to_rep (rec__records_prooffuncs__pair__a (us_split_fields1 b)))) (= (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 a))) (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const records_prooffuncs__pair__a__first__bit Int)
(declare-const records_prooffuncs__pair__a__last__bit Int)
(declare-const records_prooffuncs__pair__a__position Int)
(assert (<= 0 records_prooffuncs__pair__a__first__bit))
(assert (< records_prooffuncs__pair__a__first__bit records_prooffuncs__pair__a__last__bit))
(assert (<= 0 records_prooffuncs__pair__a__position))
(declare-const records_prooffuncs__pair__b__first__bit Int)
(declare-const records_prooffuncs__pair__b__last__bit Int)
(declare-const records_prooffuncs__pair__b__position Int)
(assert (<= 0 records_prooffuncs__pair__b__first__bit))
(assert (< records_prooffuncs__pair__b__first__bit records_prooffuncs__pair__b__last__bit))
(assert (<= 0 records_prooffuncs__pair__b__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((pair__ref (mk_pair__ref (pair__content us_rep)))))
(define-fun pair__ref___projection ((a pair__ref)) us_rep (pair__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__records_prooffuncs__optional_pair__exists Bool) (rec__records_prooffuncs__optional_pair__the_pair us_rep)))))
(define-fun us_split_fields_Exists__projection ((a us_split_fields2)) Bool (rec__records_prooffuncs__optional_pair__exists a))
(define-fun us_split_fields_The_Pair__projection ((a us_split_fields2)) us_rep (rec__records_prooffuncs__optional_pair__the_pair a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (rec__records_prooffuncs__optional_pair__exists (us_split_fields3 a)) (rec__records_prooffuncs__optional_pair__exists (us_split_fields3 b))) (= (bool_eq (rec__records_prooffuncs__optional_pair__the_pair (us_split_fields3 a)) (rec__records_prooffuncs__optional_pair__the_pair (us_split_fields3 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const records_prooffuncs__optional_pair__exists__first__bit Int)
(declare-const records_prooffuncs__optional_pair__exists__last__bit Int)
(declare-const records_prooffuncs__optional_pair__exists__position Int)
(assert (<= 0 records_prooffuncs__optional_pair__exists__first__bit))
(assert (< records_prooffuncs__optional_pair__exists__first__bit records_prooffuncs__optional_pair__exists__last__bit))
(assert (<= 0 records_prooffuncs__optional_pair__exists__position))
(declare-const records_prooffuncs__optional_pair__the_pair__first__bit Int)
(declare-const records_prooffuncs__optional_pair__the_pair__last__bit Int)
(declare-const records_prooffuncs__optional_pair__the_pair__position Int)
(assert (<= 0 records_prooffuncs__optional_pair__the_pair__first__bit))
(assert (< records_prooffuncs__optional_pair__the_pair__first__bit records_prooffuncs__optional_pair__the_pair__last__bit))
(assert (<= 0 records_prooffuncs__optional_pair__the_pair__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((optional_pair__ref (mk_optional_pair__ref (optional_pair__content us_rep1)))))
(define-fun optional_pair__ref___projection ((a optional_pair__ref)) us_rep1 (optional_pair__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x_old us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x__split_fields Bool)
(declare-const x__split_fields1 unsigned_byte)
(declare-const x__split_fields2 unsigned_byte)
(declare-const tmp Int)
(declare-const o unsigned_byte)
(declare-const o1 unsigned_byte)
(declare-const o2 unsigned_byte)
(declare-const o3 unsigned_byte)
(declare-const o4 unsigned_byte)
(declare-const o5 Bool)
(declare-const o6 unsigned_byte)
(declare-const o7 unsigned_byte)
(declare-const temp___317 us_rep1)
(declare-const tmp1 Int)
(declare-const x__split_fields3 us_split_fields2)
(declare-const result us_split_fields__ref1)
(declare-const x__split_fields4 us_split_fields2)
(declare-const x__split_fields5 us_split_fields__ref1)
(declare-const tmp2 int__ref)
(declare-const x__split_fields6 us_split_fields2)
(declare-const tmp3 Int)
(assert (=> (<= 0 255) (in_range1 tmp)))
(assert (= (mk___rep1 (mk___split_fields1 x__split_fields (mk___rep (mk___split_fields x__split_fields1 x__split_fields2)))) x_old))
(assert (and (= (bool_eq1 (mk___rep1 x__split_fields3) (mk___rep1 (mk___split_fields1 (rec__records_prooffuncs__optional_pair__exists (us_split_fields3 x_old)) (mk___rep (mk___split_fields (rec__records_prooffuncs__pair__b (us_split_fields1 (rec__records_prooffuncs__optional_pair__the_pair (us_split_fields3 x_old)))) (rec__records_prooffuncs__pair__b (us_split_fields1 (rec__records_prooffuncs__optional_pair__the_pair (us_split_fields3 x_old))))))))) true) (= tmp1 (to_rep (rec__records_prooffuncs__pair__b (us_split_fields1 (rec__records_prooffuncs__optional_pair__the_pair (us_split_fields3 x_old))))))))
(assert (=> (<= 0 255) (in_range1 tmp1)))
(assert (= (to_rep o) tmp1))
(assert (= (rec__records_prooffuncs__pair__a (us_split_fields1 (rec__records_prooffuncs__optional_pair__the_pair x__split_fields3))) o1))
(assert (= o o2))
(assert (= o3 o1))
(assert (= o4 o2))
(assert (= (rec__records_prooffuncs__optional_pair__exists x__split_fields3) o5))
(assert (= o6 o3))
(assert (= o7 o4))
(assert (= temp___317 (mk___rep1 (mk___split_fields1 o5 (mk___rep (mk___split_fields o6 o7))))))
(assert (= result (mk___split_fields__ref1 x__split_fields3)))
(assert (= x__split_fields4 (us_split_fields3 temp___317)))
(assert (= tmp2 (mk_int__ref tmp1)))
(assert (= x__split_fields5 (mk___split_fields__ref1 x__split_fields4)))
(assert (= tmp3 tmp1))
(assert (= x__split_fields6 x__split_fields4))
(assert (= (rec__records_prooffuncs__optional_pair__exists (us_split_fields__content1 x__split_fields5)) true))
(assert (not (= x__split_fields true)))
(check-sat)
(exit)
