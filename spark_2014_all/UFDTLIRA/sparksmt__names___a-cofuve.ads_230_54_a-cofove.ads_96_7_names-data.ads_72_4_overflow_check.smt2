(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-const dummy us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___2__projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range1 temp___expr_166)))
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun to_rep ((x positive)) Int (positiveqtint x))
(declare-fun of_rep (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x positive)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort name_id 0)
(declare-fun name_idqtint (name_id) Int)
(assert (forall ((i name_id)) (and (<= 0 (name_idqtint i)) (<= (name_idqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (name_id name_id) Bool)
(declare-const dummy3 name_id)
(declare-datatypes () ((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content a))
(define-fun to_rep1 ((x name_id)) Int (name_idqtint x))
(declare-fun of_rep1 (Int) name_id)
(assert (forall ((x name_id)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x name_id)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort char_table_index 0)
(declare-fun char_table_indexqtint (char_table_index) Int)
(assert (forall ((i char_table_index)) (and (<= 0 (char_table_indexqtint i)) (<= (char_table_indexqtint i) 2147483646))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (char_table_index char_table_index) Bool)
(declare-const dummy4 char_table_index)
(declare-datatypes () ((char_table_index__ref (mk_char_table_index__ref (char_table_index__content char_table_index)))))
(define-fun char_table_index__ref___projection ((a char_table_index__ref)) char_table_index (char_table_index__content a))
(define-fun to_rep2 ((x char_table_index)) Int (char_table_indexqtint x))
(declare-fun of_rep2 (Int) char_table_index)
(assert (forall ((x char_table_index)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x char_table_index)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__names__data__name_entry__table_index char_table_index) (rec__names__data__name_entry__length positive) (rec__names__data__name_entry__next_hash name_id)))))
(define-fun us_split_fields_Table_Index__projection ((a us_split_fields)) char_table_index (rec__names__data__name_entry__table_index a))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) positive (rec__names__data__name_entry__length a))
(define-fun us_split_fields_Next_Hash__projection ((a us_split_fields)) name_id (rec__names__data__name_entry__next_hash a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep2 (rec__names__data__name_entry__table_index (us_split_fields1 a))) (to_rep2 (rec__names__data__name_entry__table_index (us_split_fields1 b)))) (= (to_rep (rec__names__data__name_entry__length (us_split_fields1 a))) (to_rep (rec__names__data__name_entry__length (us_split_fields1 b))))) (= (to_rep1 (rec__names__data__name_entry__next_hash (us_split_fields1 a))) (to_rep1 (rec__names__data__name_entry__next_hash (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const names__data__name_entry__table_index__first__bit Int)
(declare-const names__data__name_entry__table_index__last__bit Int)
(declare-const names__data__name_entry__table_index__position Int)
(assert (<= 0 names__data__name_entry__table_index__first__bit))
(assert (< names__data__name_entry__table_index__first__bit names__data__name_entry__table_index__last__bit))
(assert (<= 0 names__data__name_entry__table_index__position))
(declare-const names__data__name_entry__length__first__bit Int)
(declare-const names__data__name_entry__length__last__bit Int)
(declare-const names__data__name_entry__length__position Int)
(assert (<= 0 names__data__name_entry__length__first__bit))
(assert (< names__data__name_entry__length__first__bit names__data__name_entry__length__last__bit))
(assert (<= 0 names__data__name_entry__length__position))
(declare-const names__data__name_entry__next_hash__first__bit Int)
(declare-const names__data__name_entry__next_hash__last__bit Int)
(declare-const names__data__name_entry__next_hash__position Int)
(assert (<= 0 names__data__name_entry__next_hash__first__bit))
(assert (< names__data__name_entry__next_hash__first__bit names__data__name_entry__next_hash__last__bit))
(assert (<= 0 names__data__name_entry__next_hash__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((name_entry__ref (mk_name_entry__ref (name_entry__content us_rep1)))))
(define-fun name_entry__ref___projection ((a name_entry__ref)) us_rep1 (name_entry__content a))
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content us_rep1)))))
(define-fun element_type__ref___4__projection ((a element_type__ref)) us_rep1 (element_type__content a))
(declare-fun get (us_rep Int) us_rep1)
(declare-fun get__function_guard (us_rep1 us_rep Int) Bool)
(define-fun oeq ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (bool_eq1 (get left n) (get right n)) true))) true false)))
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq a b) (oeq a b)) :pattern ((user_eq a b)))))
(define-fun default_initial_assumption ((temp___expr_483 us_rep) (temp___skip_top_level_484 Bool)) Bool (=> (not (= temp___skip_top_level_484 true)) (= (length temp___expr_483) 0)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (extended_index extended_index) Bool)
(declare-const dummy6 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___4__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant1 ((temp___expr_475 Int) (temp___is_init_471 Bool) (temp___skip_constant_472 Bool) (temp___do_toplevel_473 Bool) (temp___do_typ_inv_474 Bool)) Bool (=> (or (= temp___is_init_471 true) (<= 0 2147483647)) (in_range5 temp___expr_475)))
(declare-sort tcount_typeB 0)
(declare-fun tcount_typeBqtint (tcount_typeB) Int)
(assert (forall ((i tcount_typeB)) (and (<= (- 2147483648) (tcount_typeBqtint i)) (<= (tcount_typeBqtint i) 2147483647))))
(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (tcount_typeB tcount_typeB) Bool)
(declare-const dummy7 tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 2147483647))))
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (index_type index_type) Bool)
(declare-const dummy8 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___4__projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_458 Int) (temp___is_init_454 Bool) (temp___skip_constant_455 Bool) (temp___do_toplevel_456 Bool) (temp___do_typ_inv_457 Bool)) Bool (=> (or (= temp___is_init_454 true) (<= 1 2147483647)) (in_range7 temp___expr_458)))
(declare-const left us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const right us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const fst Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const lst Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const offset Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant4 ((temp___expr_249 Int) (temp___is_init_245 Bool) (temp___skip_constant_246 Bool) (temp___do_toplevel_247 Bool) (temp___do_typ_inv_248 Bool)) Bool (=> (or (= temp___is_init_245 true) (<= 0 2147483646)) (in_range4 temp___expr_249)))
(define-fun dynamic_invariant5 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 0 2147483647)) (in_range3 temp___expr_173)))
(assert true)
(declare-const o Int)
(declare-const result Bool)
(assert (in_range7 fst))
(assert (in_range5 lst))
(assert (in_range6 offset))
(assert (and (= o (last left)) (and (in_range5 o) (= o (+ 0 (length left))))))
(assert (= result (ite (<= lst o) true false)))
(assert (= result true))
(assert (< offset 0))
(assert (not (in_range6 (- (- 2147483648) offset))))
(check-sat)
(exit)
