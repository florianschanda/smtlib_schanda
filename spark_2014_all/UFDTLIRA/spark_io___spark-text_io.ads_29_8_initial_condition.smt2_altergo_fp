(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq1 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref___2__projection(a: file_type__ref) : us_rep =
  (a).file_type__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic status : us_rep -> int

logic status__function_guard : int, us_rep -> prop

type file_status

predicate in_range1(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : file_status, file_status -> bool

logic dummy1 : file_status

type file_status__ref = { file_status__content : file_status
}

function file_status__ref___2__projection(a: file_status__ref) : file_status =
  (a).file_status__content

logic is_readable : us_rep -> bool

logic is_readable__function_guard : bool, us_rep -> prop

logic is_open : us_rep -> bool

logic is_open__function_guard : bool, us_rep -> prop

logic mode__2 : us_rep -> int

logic mode__2__function_guard : int, us_rep -> prop

axiom is_readable__def_axiom :
  (forall file:us_rep [is_readable(file)]. ((is_readable(file) = true) <->
  ((is_open(file) = true) and (mode__2(file) = 0))))

logic is_writable : us_rep -> bool

logic is_writable__function_guard : bool, us_rep -> prop

axiom is_writable__def_axiom :
  (forall file:us_rep [is_writable(file)]. ((is_writable(file) = true) <->
  ((is_open(file) = true) and ((mode__2(file) = 1) or (mode__2(file) = 2)))))

type file_mode

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : file_mode, file_mode -> bool

logic dummy2 : file_mode

type file_mode__ref = { file_mode__content : file_mode
}

function file_mode__ref___3__projection(a: file_mode__ref) : file_mode =
  (a).file_mode__content

logic standard_input : us_rep

logic standard_output : us_rep

logic standard_error : us_rep

logic o : bool

logic o1 : bool

logic o2 : bool

logic o3 : bool

logic o4 : int

logic o5 : bool

logic o6 : bool

logic o7 : int

logic o8 : bool

logic o9 : bool

logic o10 : int

logic o11 : bool

logic o12 : bool

logic result : bool

axiom H : ((o10 = status(standard_error)) and in_range1(o10))

axiom H1 : (((o10 = 1) -> (o11 = true)) and ((not (o10 = 1)) ->
  (o11 = false)))

axiom H2 : ((o7 = status(standard_output)) and in_range1(o7))

axiom H3 : (((o7 = 1) -> (o8 = true)) and ((not (o7 = 1)) -> (o8 = false)))

axiom H4 : ((o4 = status(standard_input)) and in_range1(o4))

axiom H5 : (((o4 = 1) -> (o5 = true)) and ((not (o4 = 1)) -> (o5 = false)))

axiom H6 : ((o2 = is_writable(standard_error)) and ((o2 = true) <->
  ((is_open(standard_error) = true) and ((mode__2(standard_error) = 1) or
  (mode__2(standard_error) = 2)))))

axiom H7 : ((o = is_writable(standard_output)) and ((o = true) <->
  ((is_open(standard_output) = true) and ((mode__2(standard_output) = 1) or
  (mode__2(standard_output) = 2)))))

axiom H8 : ((o1 = is_readable(standard_input)) and ((o1 = true) <->
  ((is_open(standard_input) = true) and (mode__2(standard_input) = 0))))

axiom H9 : (o3 = match_bool(o1, o, false))

axiom H10 : (o6 = match_bool(o3, o2, false))

axiom H11 : (o9 = match_bool(o6, o5, false))

axiom H12 : (o12 = match_bool(o9, o8, false))

axiom H13 : (result = match_bool(o12, o11, false))

 (* File "spark-text_io.ads", line 81, characters 0-0 *)
goal WP_parameter_def : (is_readable(standard_input) = true)
