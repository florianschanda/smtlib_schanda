(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic attr__ATTRIBUTE_ADDRESS : int

logic f1 : int -> int

logic f1__function_guard : int, int -> prop

axiom f1__post_axiom :
  (forall x:int [f1(x)]. (in_range(x) -> in_range(f1(x))))

axiom f1__def_axiom : (forall x:int [f1(x)]. (in_range(x) -> (f1(x) = x)))

logic f2 : int, int -> int

logic f2__function_guard : int, int, int -> prop

axiom f2__post_axiom :
  (forall x:int. forall info_flow_tests__test_04__a:int [f2(x,
  info_flow_tests__test_04__a)]. ((in_range(x) and
  in_range(info_flow_tests__test_04__a)) -> in_range(f2(x,
  info_flow_tests__test_04__a))))

axiom f2__def_axiom :
  (forall x:int. forall info_flow_tests__test_04__a:int [f2(x,
  info_flow_tests__test_04__a)]. ((in_range(x) and
  in_range(info_flow_tests__test_04__a)) -> (f2(x,
  info_flow_tests__test_04__a) = (info_flow_tests__test_04__a + x))))

logic f3 : int, int -> int

logic f3__function_guard : int, int, int -> prop

axiom f3__post_axiom :
  (forall x:int. forall info_flow_tests__test_04__a:int [f3(x,
  info_flow_tests__test_04__a)]. (((in_range(x) and
  in_range(info_flow_tests__test_04__a)) and
  (0 <= info_flow_tests__test_04__a)) -> in_range(f3(x,
  info_flow_tests__test_04__a))))

axiom f3__def_axiom :
  (forall x:int. forall info_flow_tests__test_04__a:int [f3(x,
  info_flow_tests__test_04__a)]. ((in_range(x) and
  in_range(info_flow_tests__test_04__a)) -> (f3(x,
  info_flow_tests__test_04__a) = x)))

logic f4 : int, int -> int

logic f4__function_guard : int, int, int -> prop

axiom f4__post_axiom :
  (forall x:int. forall y:int [f4(x, y)]. (((in_range(x) and in_range(y)) and
  (0 <  y)) -> ((0 <  y) and in_range(f4(x, y)))))

axiom f4__def_axiom :
  (forall x:int. forall y:int [f4(x, y)]. ((in_range(x) and in_range(y)) ->
  (f4(x, y) = x)))

logic c1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic c2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c3 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic c4 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c5 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic c6 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic c7 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom c1__def_axiom : (c1 = 5)

axiom c2__def_axiom : (c2 = f1(5))

axiom c6__def_axiom : (c6 = f4(5, c3))

axiom c7__def_axiom : (c7 = f4(c3, c4))

logic a : int

logic info_flow_tests__test_04__c2__assume : int

logic info_flow_tests__test_04__c3__assume : int

logic info_flow_tests__test_04__c4__assume : int

logic info_flow_tests__test_04__c6__assume : int

logic info_flow_tests__test_04__c7__assume : int

axiom H : in_range(a)

axiom H1 : in_range(c1)

axiom H2 : ((info_flow_tests__test_04__c2__assume = f1(5)) and
  (in_range(info_flow_tests__test_04__c2__assume) and
  (info_flow_tests__test_04__c2__assume = 5)))

axiom H3 : (info_flow_tests__test_04__c2__assume = c2)

axiom H4 : in_range(c2)

axiom H5 : ((info_flow_tests__test_04__c3__assume = f2(5, a)) and
  (in_range(info_flow_tests__test_04__c3__assume) and
  (info_flow_tests__test_04__c3__assume = (a + 5))))

axiom H6 : (info_flow_tests__test_04__c3__assume = c3)

axiom H7 : in_range(c3)

axiom H8 : ((info_flow_tests__test_04__c4__assume = f3(5, a)) and
  (in_range(info_flow_tests__test_04__c4__assume) and
  (info_flow_tests__test_04__c4__assume = 5)))

axiom H9 : (info_flow_tests__test_04__c4__assume = c4)

axiom H10 : in_range(c4)

axiom H11 : (a = c5)

axiom H12 : in_range(c5)

 (* File "info_flow_tests.adb", line 53, characters 0-0 *)
goal WP_parameter_def : (0 <  c3)
