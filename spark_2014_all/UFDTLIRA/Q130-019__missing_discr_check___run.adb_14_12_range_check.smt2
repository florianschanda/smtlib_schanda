(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort enum 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (enum enum) Bool)
(declare-const dummy1 enum)
(declare-datatypes () ((enum__ref (mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))
(declare-fun to_rep1 (enum) Int)
(declare-fun of_rep1 (Int) enum)
(assert (forall ((x enum)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x enum)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__p_init__t__e enum)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) enum (rec__p_init__t__e a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__p_init__t__x1 integer) (rec__p_init__t__x2 integer)))))
(define-fun us_split_fields_X1__projection ((a us_split_fields)) integer (rec__p_init__t__x1 a))
(define-fun us_split_fields_X2__projection ((a us_split_fields)) integer (rec__p_init__t__x2 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun p_init__t__x2__pred ((a us_rep)) Bool (= (to_rep1 (rec__p_init__t__e (us_split_discrs1 a))) 1))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__p_init__t__e (us_split_discrs1 a))) (to_rep1 (rec__p_init__t__e (us_split_discrs1 b)))) (and (= (to_rep (rec__p_init__t__x1 (us_split_fields1 a))) (to_rep (rec__p_init__t__x1 (us_split_fields1 b)))) (=> (p_init__t__x2__pred a) (= (to_rep (rec__p_init__t__x2 (us_split_fields1 a))) (to_rep (rec__p_init__t__x2 (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const p_init__t__e__first__bit Int)
(declare-const p_init__t__e__last__bit Int)
(declare-const p_init__t__e__position Int)
(assert (<= 0 p_init__t__e__first__bit))
(assert (< p_init__t__e__first__bit p_init__t__e__last__bit))
(assert (<= 0 p_init__t__e__position))
(declare-const p_init__t__x1__first__bit Int)
(declare-const p_init__t__x1__last__bit Int)
(declare-const p_init__t__x1__position Int)
(assert (<= 0 p_init__t__x1__first__bit))
(assert (< p_init__t__x1__first__bit p_init__t__x1__last__bit))
(assert (<= 0 p_init__t__x1__position))
(declare-const p_init__t__x2__first__bit Int)
(declare-const p_init__t__x2__last__bit Int)
(declare-const p_init__t__x2__position Int)
(assert (<= 0 p_init__t__x2__first__bit))
(assert (< p_init__t__x2__first__bit p_init__t__x2__last__bit))
(assert (<= 0 p_init__t__x2__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(define-fun default_initial_assumption ((temp___expr_167 us_rep) (temp___skip_top_level_168 Bool)) Bool (and (= (attr__constrained temp___expr_167) false) (= (to_rep1 (rec__p_init__t__e (us_split_discrs1 temp___expr_167))) 0)))
(declare-const y1__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y2__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range2 ((rec__p_init__t__e1 Int) (a us_rep)) Bool (= rec__p_init__t__e1 (to_rep1 (rec__p_init__t__e (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const p_init__t__e__first__bit1 Int)
(declare-const p_init__t__e__last__bit1 Int)
(declare-const p_init__t__e__position1 Int)
(assert (<= 0 p_init__t__e__first__bit1))
(assert (< p_init__t__e__first__bit1 p_init__t__e__last__bit1))
(assert (<= 0 p_init__t__e__position1))
(declare-const p_init__t__x2__first__bit1 Int)
(declare-const p_init__t__x2__last__bit1 Int)
(declare-const p_init__t__x2__position1 Int)
(assert (<= 0 p_init__t__x2__first__bit1))
(assert (< p_init__t__x2__first__bit1 p_init__t__x2__last__bit1))
(assert (<= 0 p_init__t__x2__position1))
(declare-const p_init__t__x1__first__bit1 Int)
(declare-const p_init__t__x1__last__bit1 Int)
(declare-const p_init__t__x1__position1 Int)
(assert (<= 0 p_init__t__x1__first__bit1))
(assert (< p_init__t__x1__first__bit1 p_init__t__x1__last__bit1))
(assert (<= 0 p_init__t__x1__position1))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((tz1S__ref (mk_tz1S__ref (tz1S__content us_rep)))))
(define-fun tz1S__ref___projection ((a tz1S__ref)) us_rep (tz1S__content a))
(declare-const z1__split_discrs us_split_discrs)
(declare-const z1__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant ((temp___expr_228 us_rep) (temp___is_init_224 Bool) (temp___skip_constant_225 Bool) (temp___do_toplevel_226 Bool) (temp___do_typ_inv_227 Bool)) Bool (and (=> (not (= temp___skip_constant_225 true)) (in_range2 0 temp___expr_228)) (= (attr__constrained temp___expr_228) true)))
(define-fun default_initial_assumption1 ((temp___expr_230 us_rep) (temp___skip_top_level_231 Bool)) Bool (and (= (attr__constrained temp___expr_230) true) (= (to_rep1 (rec__p_init__t__e (us_split_discrs1 temp___expr_230))) 0)))
(define-fun in_range3 ((rec__p_init__t__e1 Int) (a us_rep)) Bool (= rec__p_init__t__e1 (to_rep1 (rec__p_init__t__e (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const p_init__t__e__first__bit2 Int)
(declare-const p_init__t__e__last__bit2 Int)
(declare-const p_init__t__e__position2 Int)
(assert (<= 0 p_init__t__e__first__bit2))
(assert (< p_init__t__e__first__bit2 p_init__t__e__last__bit2))
(assert (<= 0 p_init__t__e__position2))
(declare-const p_init__t__x1__first__bit2 Int)
(declare-const p_init__t__x1__last__bit2 Int)
(declare-const p_init__t__x1__position2 Int)
(assert (<= 0 p_init__t__x1__first__bit2))
(assert (< p_init__t__x1__first__bit2 p_init__t__x1__last__bit2))
(assert (<= 0 p_init__t__x1__position2))
(declare-const p_init__t__x2__first__bit2 Int)
(declare-const p_init__t__x2__last__bit2 Int)
(declare-const p_init__t__x2__position2 Int)
(assert (<= 0 p_init__t__x2__first__bit2))
(assert (< p_init__t__x2__first__bit2 p_init__t__x2__last__bit2))
(assert (<= 0 p_init__t__x2__position2))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((tz2S__ref (mk_tz2S__ref (tz2S__content us_rep)))))
(define-fun tz2S__ref___projection ((a tz2S__ref)) us_rep (tz2S__content a))
(declare-const z2__split_discrs us_split_discrs)
(declare-const z2__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant1 ((temp___expr_239 us_rep) (temp___is_init_235 Bool) (temp___skip_constant_236 Bool) (temp___do_toplevel_237 Bool) (temp___do_typ_inv_238 Bool)) Bool (and (=> (not (= temp___skip_constant_236 true)) (in_range3 1 temp___expr_239)) (= (attr__constrained temp___expr_239) true)))
(define-fun default_initial_assumption2 ((temp___expr_241 us_rep) (temp___skip_top_level_242 Bool)) Bool (and (= (attr__constrained temp___expr_241) true) (= (to_rep1 (rec__p_init__t__e (us_split_discrs1 temp___expr_241))) 1)))
(define-fun in_range4 ((rec__p_init__t__e1 Int) (a us_rep)) Bool (= rec__p_init__t__e1 (to_rep1 (rec__p_init__t__e (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const p_init__t__e__first__bit3 Int)
(declare-const p_init__t__e__last__bit3 Int)
(declare-const p_init__t__e__position3 Int)
(assert (<= 0 p_init__t__e__first__bit3))
(assert (< p_init__t__e__first__bit3 p_init__t__e__last__bit3))
(assert (<= 0 p_init__t__e__position3))
(declare-const p_init__t__x2__first__bit3 Int)
(declare-const p_init__t__x2__last__bit3 Int)
(declare-const p_init__t__x2__position3 Int)
(assert (<= 0 p_init__t__x2__first__bit3))
(assert (< p_init__t__x2__first__bit3 p_init__t__x2__last__bit3))
(assert (<= 0 p_init__t__x2__position3))
(declare-const p_init__t__x1__first__bit3 Int)
(declare-const p_init__t__x1__last__bit3 Int)
(declare-const p_init__t__x1__position3 Int)
(assert (<= 0 p_init__t__x1__first__bit3))
(assert (< p_init__t__x1__first__bit3 p_init__t__x1__last__bit3))
(assert (<= 0 p_init__t__x1__position3))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((tc1S__ref (mk_tc1S__ref (tc1S__content us_rep)))))
(define-fun tc1S__ref___projection ((a tc1S__ref)) us_rep (tc1S__content a))
(define-fun dynamic_invariant2 ((temp___expr_206 us_rep) (temp___is_init_202 Bool) (temp___skip_constant_203 Bool) (temp___do_toplevel_204 Bool) (temp___do_typ_inv_205 Bool)) Bool (and (=> (not (= temp___skip_constant_203 true)) (in_range4 0 temp___expr_206)) (= (attr__constrained temp___expr_206) true)))
(define-fun default_initial_assumption3 ((temp___expr_208 us_rep) (temp___skip_top_level_209 Bool)) Bool (and (= (attr__constrained temp___expr_208) true) (= (to_rep1 (rec__p_init__t__e (us_split_discrs1 temp___expr_208))) 0)))
(define-fun in_range5 ((rec__p_init__t__e1 Int) (a us_rep)) Bool (= rec__p_init__t__e1 (to_rep1 (rec__p_init__t__e (us_split_discrs1 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))
(declare-const p_init__t__e__first__bit4 Int)
(declare-const p_init__t__e__last__bit4 Int)
(declare-const p_init__t__e__position4 Int)
(assert (<= 0 p_init__t__e__first__bit4))
(assert (< p_init__t__e__first__bit4 p_init__t__e__last__bit4))
(assert (<= 0 p_init__t__e__position4))
(declare-const p_init__t__x2__first__bit4 Int)
(declare-const p_init__t__x2__last__bit4 Int)
(declare-const p_init__t__x2__position4 Int)
(assert (<= 0 p_init__t__x2__first__bit4))
(assert (< p_init__t__x2__first__bit4 p_init__t__x2__last__bit4))
(assert (<= 0 p_init__t__x2__position4))
(declare-const p_init__t__x1__first__bit4 Int)
(declare-const p_init__t__x1__last__bit4 Int)
(declare-const p_init__t__x1__position4 Int)
(assert (<= 0 p_init__t__x1__first__bit4))
(assert (< p_init__t__x1__first__bit4 p_init__t__x1__last__bit4))
(assert (<= 0 p_init__t__x1__position4))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep (t1b__content a))
(declare-const c1 us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun in_range6 ((rec__p_init__t__e1 Int) (a us_rep)) Bool (= rec__p_init__t__e1 (to_rep1 (rec__p_init__t__e (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))
(declare-const p_init__t__e__first__bit5 Int)
(declare-const p_init__t__e__last__bit5 Int)
(declare-const p_init__t__e__position5 Int)
(assert (<= 0 p_init__t__e__first__bit5))
(assert (< p_init__t__e__first__bit5 p_init__t__e__last__bit5))
(assert (<= 0 p_init__t__e__position5))
(declare-const p_init__t__x1__first__bit5 Int)
(declare-const p_init__t__x1__last__bit5 Int)
(declare-const p_init__t__x1__position5 Int)
(assert (<= 0 p_init__t__x1__first__bit5))
(assert (< p_init__t__x1__first__bit5 p_init__t__x1__last__bit5))
(assert (<= 0 p_init__t__x1__position5))
(declare-const p_init__t__x2__first__bit5 Int)
(declare-const p_init__t__x2__last__bit5 Int)
(declare-const p_init__t__x2__position5 Int)
(assert (<= 0 p_init__t__x2__first__bit5))
(assert (< p_init__t__x2__first__bit5 p_init__t__x2__last__bit5))
(assert (<= 0 p_init__t__x2__position5))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((tc2S__ref (mk_tc2S__ref (tc2S__content us_rep)))))
(define-fun tc2S__ref___projection ((a tc2S__ref)) us_rep (tc2S__content a))
(define-fun dynamic_invariant3 ((temp___expr_217 us_rep) (temp___is_init_213 Bool) (temp___skip_constant_214 Bool) (temp___do_toplevel_215 Bool) (temp___do_typ_inv_216 Bool)) Bool (and (=> (not (= temp___skip_constant_214 true)) (in_range6 1 temp___expr_217)) (= (attr__constrained temp___expr_217) true)))
(define-fun default_initial_assumption4 ((temp___expr_219 us_rep) (temp___skip_top_level_220 Bool)) Bool (and (= (attr__constrained temp___expr_219) true) (= (to_rep1 (rec__p_init__t__e (us_split_discrs1 temp___expr_219))) 1)))
(define-fun in_range7 ((rec__p_init__t__e1 Int) (a us_rep)) Bool (= rec__p_init__t__e1 (to_rep1 (rec__p_init__t__e (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))
(declare-const p_init__t__e__first__bit6 Int)
(declare-const p_init__t__e__last__bit6 Int)
(declare-const p_init__t__e__position6 Int)
(assert (<= 0 p_init__t__e__first__bit6))
(assert (< p_init__t__e__first__bit6 p_init__t__e__last__bit6))
(assert (<= 0 p_init__t__e__position6))
(declare-const p_init__t__x1__first__bit6 Int)
(declare-const p_init__t__x1__last__bit6 Int)
(declare-const p_init__t__x1__position6 Int)
(assert (<= 0 p_init__t__x1__first__bit6))
(assert (< p_init__t__x1__first__bit6 p_init__t__x1__last__bit6))
(assert (<= 0 p_init__t__x1__position6))
(declare-const p_init__t__x2__first__bit6 Int)
(declare-const p_init__t__x2__last__bit6 Int)
(declare-const p_init__t__x2__position6 Int)
(assert (<= 0 p_init__t__x2__first__bit6))
(assert (< p_init__t__x2__first__bit6 p_init__t__x2__last__bit6))
(assert (<= 0 p_init__t__x2__position6))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content us_rep)))))
(define-fun t2b__ref___projection ((a t2b__ref)) us_rep (t2b__content a))
(declare-const c2 us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 1))
(assert (= c1 (mk___rep (mk___split_discrs (of_rep1 0)) (mk___split_fields rliteral dummy) true)))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 2))
(assert (= c2 (mk___rep (mk___split_discrs (of_rep1 1)) (mk___split_fields rliteral rliteral1) true)))
(define-fun dynamic_invariant5 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 1)) (in_range1 temp___expr_158)))
(declare-const y1__split_fields integer)
(declare-const y1__split_fields1 integer)
(declare-const y1__split_discrs enum)
(declare-const y2__split_fields integer)
(declare-const y2__split_fields1 integer)
(declare-const y2__split_discrs enum)
(declare-const us Int)
(declare-const o enum)
(declare-const o1 enum)
(declare-const o2 enum)
(declare-const o3 integer)
(declare-const o4 integer)
(declare-const o5 Bool)
(declare-const o6 enum)
(declare-const o7 integer)
(declare-const o8 integer)
(declare-const o9 Bool)
(declare-const o10 enum)
(declare-const o11 integer)
(declare-const o12 integer)
(declare-const o13 Bool)
(declare-const run__c1__assume enum)
(declare-const run__c1__assume1 integer)
(declare-const run__c1__assume2 integer)
(declare-const run__c1__assume3 Bool)
(declare-const us1 Int)
(declare-const o14 enum)
(declare-const o15 us_split_discrs)
(declare-const o16 us_rep)
(declare-const o17 us_rep)
(declare-const o18 us_rep)
(declare-const run__c2__assume us_rep)
(declare-const result us_split_fields__ref)
(declare-const y1__split_fields2 us_split_fields)
(declare-const result1 us_split_discrs__ref)
(declare-const y1__split_discrs1 us_split_discrs)
(declare-const result2 us_split_fields__ref)
(declare-const y2__split_fields2 us_split_fields)
(declare-const result3 us_split_discrs__ref)
(declare-const y2__split_discrs1 us_split_discrs)
(define-fun run__c1__assume4 () us_rep (mk___rep (mk___split_discrs run__c1__assume) (mk___split_fields run__c1__assume1 run__c1__assume2) run__c1__assume3))
(define-fun o19 () us_rep (mk___rep (mk___split_discrs o10) (mk___split_fields o11 o12) o13))
(define-fun o20 () us_rep (mk___rep (mk___split_discrs o6) (mk___split_fields o7 o8) o9))
(assert (and (= us 0) (in_range1 0)))
(assert (= (to_rep1 o) 0))
(assert (= o o1))
(assert (= o2 o1))
(assert (= rliteral o3))
(assert (= dummy o4))
(assert (= true o5))
(assert (= o20 (mk___rep (mk___split_discrs o2) (mk___split_fields o3 o4) o5)))
(assert (= o19 o20))
(assert (= run__c1__assume4 o19))
(assert (= run__c1__assume4 c1))
(assert (and (= 0 (to_rep1 (rec__p_init__t__e (us_split_discrs1 c1)))) (= (attr__constrained c1) true)))
(assert (and (= us1 1) (in_range1 1)))
(assert (= (to_rep1 o14) 1))
(assert (= o15 (mk___split_discrs o14)))
(assert (= o16 (mk___rep o15 (mk___split_fields rliteral rliteral1) true)))
(assert (= o17 o16))
(assert (= o18 o17))
(assert (= run__c2__assume o18))
(assert (= run__c2__assume c2))
(assert (and (= 1 (to_rep1 (rec__p_init__t__e (us_split_discrs1 c2)))) (= (attr__constrained c2) true)))
(assert (= result (mk___split_fields__ref (mk___split_fields y1__split_fields y1__split_fields1))))
(assert (= y1__split_fields2 (us_split_fields1 c1)))
(assert (= result1 (mk___split_discrs__ref (mk___split_discrs y1__split_discrs))))
(assert (= y1__split_discrs1 (us_split_discrs1 c1)))
(assert (= y1__attr__constrained false))
(assert (= result2 (mk___split_fields__ref (mk___split_fields y2__split_fields y2__split_fields1))))
(assert (= y2__split_fields2 (us_split_fields1 c2)))
(assert (= result3 (mk___split_discrs__ref (mk___split_discrs y2__split_discrs))))
(assert (= y2__split_discrs1 (us_split_discrs1 c2)))
(assert (= y2__attr__constrained false))
(assert (not (in_range1 0)))
(check-sat)
(exit)
