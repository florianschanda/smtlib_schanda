(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tcount_typeB

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

logic first : int

logic last : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type index_type__ref = { index_type__content : integer
}

function index_type__ref___3__projection(a: index_type__ref) : integer =
  (a).index_type__content

logic fst : int

logic attr__ATTRIBUTE_ADDRESS : int

logic lst : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom first__def_axiom : (first = fst)

axiom last__def_axiom : (last = lst)

logic first1 : int

logic last1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type extended_index__ref = { extended_index__content : integer
}

function extended_index__ref___2__projection(a: extended_index__ref) : integer =
  (a).extended_index__content

axiom first__def_axiom1 : (first1 = (first - 1))

axiom last__def_axiom1 : (last1 = last)

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq6 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq4(a, b)].
  (((forall n:int. (((first <= n) and (n <= ((first - 1) + length(a)))) ->
    (get(a, n) = get(b, n)))) ->
  (user_eq4(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((first <= n) and
        (n <= ((first - 1) + length(a)))) -> (get(a, n) = get(b, n))))) ->
  (user_eq4(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

type count_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : count_type, count_type -> bool

logic dummy5 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  ((((first - 1) + length(container)) <= last) and
  in_range3(length(container))))

logic left : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS3 : int

logic fst1 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic lst1 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic offset : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic id : int, int, int -> int

logic id__function_guard : int, int, int, int -> prop

axiom id__post_axiom :
  (forall x:int. forall f:int. forall l:int [id(x, f, l)].
  (((in_range2(x) and in_range2(f)) and in_range2(l)) -> ((((f <= x) and
  (x <= l)) -> ((f <= id(x, f, l)) and (id(x, f, l) <= l))) and
  in_range2(id(x, f, l)))))

axiom fst__def_axiom : (fst = id(1, (- 2147483647), 2147483647))

axiom lst__def_axiom : (lst = id(2147483647, fst, 2147483647))

type element_type

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___3__projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position:int [get(container, position)].
  ((dynamic_property1(first1, last1, position) and ((first <= position) and
  (position <= ((first - 1) + length(container))))) ->
  in_range4(get(container, position)))))

 (* File "a-cofuve.ads", line 201, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. forall o1:int. forall o2:int. forall o3:int. forall o4:int.
  forall o5:int. forall o6:int. forall o7:int. forall o8:int. forall o9:int.
  forall o10:int. forall result:bool. forall result1:bool.
  (dynamic_property(first, last, fst1) -> (dynamic_property1(first1, last1,
  lst1) -> (in_range1(offset) -> ((((o10 = ((first - 1) + length(left))) and
  (dynamic_property1(first1, last1, o10) and
  (o10 = ((first - 1) + length(left))))) and (((lst1 <= o10) and
  (result = true)) or ((not (lst1 <= o10)) and (result = false)))) ->
  ((result = true) -> ((((offset <  0) and (((o8 = first) and
  in_range1(first)) and (((o9 = ((- 2147483648) - offset)) and
  in_range1(((- 2147483648) - offset))) and (((o9 <= o8) and
  (result1 = true)) or ((not (o9 <= o8)) and (result1 = false)))))) or
  ((not (offset <  0)) and (result1 = of_int(1)))) -> ((result1 = true) ->
  ((fst1 <= lst1) -> ((((o5 = lst1) and in_range1(lst1)) and
  (((((o2 = length(right)) and (in_range3(o2) and
  (((first - 1) + o2) <= last))) and (((((o = first) and
  in_range1(first)) and (o1 = (o - 1))) and ((o3 = o1) and
  in_range1(o1))) and (o4 = (o3 + o2)))) and ((o6 = o4) and
  in_range1(o4))) and (o7 = (o6 - o5)))) -> in_range1(o7)))))))))))
