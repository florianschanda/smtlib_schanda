(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__alarm__blinken_poT__blinken_state Bool) (rec__alarm__the_light Bool)))))
(define-fun us_split_fields_Blinken_State__projection ((a us_split_fields)) Bool (rec__alarm__blinken_poT__blinken_state a))
(define-fun us_split_fields_The_Light__projection ((a us_split_fields)) Bool (rec__alarm__the_light a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const alarm__blinken_poT__blinken_state__first__bit Int)
(declare-const alarm__blinken_poT__blinken_state__last__bit Int)
(declare-const alarm__blinken_poT__blinken_state__position Int)
(assert (<= 0 alarm__blinken_poT__blinken_state__first__bit))
(assert (< alarm__blinken_poT__blinken_state__first__bit alarm__blinken_poT__blinken_state__last__bit))
(assert (<= 0 alarm__blinken_poT__blinken_state__position))
(declare-fun user_eq (us_rep us_rep) Bool)
(declare-datatypes () ((blinken_poT__ref (mk_blinken_poT__ref (blinken_poT__content us_rep)))))
(define-fun blinken_poT__ref___projection ((a blinken_poT__ref)) us_rep (blinken_poT__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(define-fun default_initial_assumption ((temp___expr_236 us_rep) (temp___skip_top_level_237 Bool)) Bool (and (= (rec__alarm__blinken_poT__blinken_state (us_split_fields1 temp___expr_236)) (distinct 0 0)) (= (rec__alarm__the_light (us_split_fields1 temp___expr_236)) (distinct 0 0))))
(declare-sort priority 0)
(declare-fun priorityqtint (priority) Int)
(assert (forall ((i priority)) (and (<= 0 (priorityqtint i)) (<= (priorityqtint i) 97))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 97)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (priority priority) Bool)
(declare-const dummy priority)
(declare-datatypes () ((priority__ref (mk_priority__ref (priority__content priority)))))
(define-fun priority__ref___projection ((a priority__ref)) priority (priority__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_187 Int) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool) (temp___do_typ_inv_186 Bool)) Bool (=> (or (= temp___is_init_183 true) (<= 0 97)) (in_range1 temp___expr_187)))
(assert (not (<= 97 97)))
(check-sat)
(exit)
