(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun get_current_cycles (Int) Int)
(declare-fun get_current_cycles__function_guard (Int Int) Bool)
(declare-fun get_current_cycles1 (Int) Int)
(declare-fun get_current_cycles__function_guard1 (Int Int) Bool)
(assert (forall ((entities__current_cycles Int)) (! (=> (dynamic_invariant entities__current_cycles true true true true) (dynamic_invariant (get_current_cycles entities__current_cycles) true false true true)) :pattern ((get_current_cycles entities__current_cycles)))))
(assert (forall ((entities__current_cycles Int)) (! (=> (dynamic_invariant entities__current_cycles true true true true) (let ((result (get_current_cycles1 entities__current_cycles))) (and (= result entities__current_cycles) (dynamic_invariant result true false true true)))) :pattern ((get_current_cycles1 entities__current_cycles)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun get_current_id (Int) Int)
(declare-fun get_current_id__function_guard (Int Int) Bool)
(declare-fun get_current_id1 (Int) Int)
(declare-fun get_current_id__function_guard1 (Int Int) Bool)
(declare-sort id_index 0)
(declare-fun id_indexqtint (id_index) Int)
(assert (forall ((i id_index)) (and (<= 1 (id_indexqtint i)) (<= (id_indexqtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (id_index id_index) Bool)
(declare-const dummy1 id_index)
(declare-datatypes () ((id_index__ref (mk_id_index__ref (id_index__content id_index)))))
(define-fun id_index__ref___projection ((a id_index__ref)) id_index (id_index__content a))
(define-fun dynamic_invariant1 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 1 10)) (in_range2 temp___expr_158)))
(assert (forall ((entities__current_id Int)) (! (=> (dynamic_invariant1 entities__current_id true true true true) (dynamic_invariant1 (get_current_id entities__current_id) true false true true)) :pattern ((get_current_id entities__current_id)))))
(assert (forall ((entities__current_id Int)) (! (=> (dynamic_invariant1 entities__current_id true true true true) (let ((result (get_current_id1 entities__current_id))) (and (= result entities__current_id) (dynamic_invariant1 result true false true true)))) :pattern ((get_current_id1 entities__current_id)))))
(declare-const value Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const current_id Int)
(declare-const current_cycles Int)
(declare-const current_id1 Int)
(assert (=> (<= 1 10) (in_range2 current_id)))
(assert (in_range1 current_cycles))
(assert (in_range2 value))
(assert (= current_id1 value))
(assert (in_range2 current_id1))
(assert (not (= (get_current_id1 current_id1) value)))
(check-sat)
(exit)
