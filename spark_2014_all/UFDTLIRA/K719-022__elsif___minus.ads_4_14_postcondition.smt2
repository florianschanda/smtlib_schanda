(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const minus__minus__result Int)
(declare-const minus__minus__result1 Int)
(declare-const result Int)
(declare-const minus__minus__result2 Int)
(declare-const result1 Int)
(declare-const minus__minus__result3 Int)
(declare-const result2 Int)
(declare-const minus__minus__result4 Int)
(declare-const minus__minus__result5 Int)
(declare-const minus__minus__result6 Int)
(declare-const minus__minus__result7 Int)
(declare-const minus__minus__result8 Int)
(declare-const result3 Int)
(declare-const minus__minus__result9 Int)
(declare-const minus__minus__result10 Int)
(declare-const minus__minus__result11 Int)
(declare-const minus__minus__result12 Int)
(declare-const minus__minus__result13 Int)
(declare-const minus__minus__result14 Int)
(declare-const minus__minus__result15 Int)
(define-fun minus__minus__result16 () int__ref (mk_int__ref minus__minus__result12))
(define-fun minus__minus__result17 () int__ref (mk_int__ref minus__minus__result7))
(declare-const result4 Int)
(assert (in_range1 x))
(assert (and (<= 1 x) (<= x 3)))
(assert (or (and (and (= minus__minus__result16 minus__minus__result17) (= minus__minus__result13 minus__minus__result8)) (ite (= x 1) (and (and (= minus__minus__result2 minus__minus__result7) (= minus__minus__result8 minus__minus__result2)) (and (= result minus__minus__result) (= minus__minus__result2 0))) (and (and (= minus__minus__result17 (mk_int__ref minus__minus__result5)) (= minus__minus__result8 minus__minus__result6)) (ite (= x 2) (and (and (= minus__minus__result3 minus__minus__result5) (= minus__minus__result6 minus__minus__result3)) (and (= result1 minus__minus__result) (= minus__minus__result3 1))) (and (and (= minus__minus__result4 minus__minus__result5) (= minus__minus__result6 minus__minus__result4)) (and (= x 3) (and (= result2 minus__minus__result) (= minus__minus__result4 2)))))))) (and (and (not (= x 1)) (and (and (not (= x 2)) (and (and (not (= x 3)) (and (= minus__minus__result4 minus__minus__result) (= minus__minus__result4 minus__minus__result1))) (= minus__minus__result3 minus__minus__result4))) (= minus__minus__result2 minus__minus__result3))) (and (and (= minus__minus__result16 (mk_int__ref minus__minus__result10)) (= minus__minus__result13 minus__minus__result11)) (and (and (= minus__minus__result9 minus__minus__result10) (= minus__minus__result11 minus__minus__result9)) (and (= result3 minus__minus__result2) (= minus__minus__result9 x)))))))
(assert (= (mk_int__ref minus__minus__result14) minus__minus__result16))
(assert (= minus__minus__result15 minus__minus__result13))
(assert (= result4 minus__minus__result14))
(assert (not (= minus__minus__result14 (- x 1))))
(check-sat)
(exit)
