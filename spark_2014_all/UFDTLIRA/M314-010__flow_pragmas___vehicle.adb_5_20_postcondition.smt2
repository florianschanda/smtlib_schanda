(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort state_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (state_type state_type) Bool)
(declare-const dummy state_type)
(declare-datatypes () ((state_type__ref (mk_state_type__ref (state_type__content state_type)))))
(define-fun state_type__ref___projection ((a state_type__ref)) state_type (state_type__content a))
(define-fun dynamic_invariant ((temp___expr_135 Int) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (<= 0 2)) (in_range1 temp___expr_135)))
(declare-sort speed_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 100) x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (speed_type speed_type) Bool)
(declare-const dummy1 speed_type)
(declare-datatypes () ((speed_type__ref (mk_speed_type__ref (speed_type__content speed_type)))))
(define-fun speed_type__ref___projection ((a speed_type__ref)) speed_type (speed_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_153 Int) (temp___is_init_150 Bool) (temp___skip_constant_151 Bool) (temp___do_toplevel_152 Bool)) Bool (=> (or (= temp___is_init_150 true) (<= (- 100) 100)) (in_range2 temp___expr_153)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun speed_is_valid (Int Int) Bool)
(declare-fun speed_is_valid__function_guard (Bool Int Int) Bool)
(assert true)
(assert (forall ((vehicle__speed Int) (vehicle__state Int)) (! (= (= (speed_is_valid vehicle__speed vehicle__state) true) (ite (= vehicle__state 0) (= vehicle__speed 0) (ite (= vehicle__state 1) (< 0 vehicle__speed) (< vehicle__speed 0)))) :pattern ((speed_is_valid vehicle__speed vehicle__state)))))
(declare-const speed Int)
(declare-const state Int)
(declare-const temp___157 Int)
(declare-const temp___156 Int)
(declare-const speed1 Int)
(declare-const state1 Int)
(declare-const speed2 Int)
(declare-const state2 Int)
(declare-const speed3 Int)
(declare-const state3 Int)
(declare-const speed4 Int)
(declare-const state4 Int)
(declare-const speed5 Int)
(declare-const state5 Int)
(declare-const speed6 Int)
(declare-const state6 Int)
(declare-const speed7 Int)
(declare-const state7 Int)
(declare-const speed8 Int)
(declare-const state8 Int)
(declare-const speed9 Int)
(declare-const state9 Int)
(declare-const speed10 Int)
(declare-const state10 Int)
(declare-const speed11 Int)
(declare-const state11 Int)
(declare-const speed12 Int)
(declare-const state12 Int)
(assert (in_range2 speed))
(assert (in_range1 state))
(assert (= (speed_is_valid speed state) true))
(assert (=> (not (= state 0)) (and (and (= temp___157 speed) (and (= temp___156 state) (and (= (speed_is_valid speed2 state2) true) (and (and (and (in_range1 state2) (in_range2 speed2)) (not (= state2 0))) (and (ite (< 0 speed2) (and (= (speed_is_valid speed3 state3) true) (and (in_range1 state3) (in_range2 speed3))) (and (and (= (speed_is_valid speed4 state4) true) (and (in_range1 state4) (in_range2 speed4))) (and (= state3 state4) (= speed3 speed4)))) (= state3 0)))))) (and (and (= state3 state7) (= speed3 speed7)) (and (= state8 state3) (= speed8 speed3))))))
(assert (=> (not (= state 0)) (= (mk_int__ref state9) (mk_int__ref state7))))
(assert (=> (not (= state 0)) (= (mk_int__ref speed9) (mk_int__ref speed7))))
(assert (=> (not (= state 0)) (= state10 state8)))
(assert (=> (not (= state 0)) (= speed10 speed8)))
(assert (=> (= state 0) (= (mk_int__ref state9) (mk_int__ref state))))
(assert (=> (= state 0) (= (mk_int__ref speed9) (mk_int__ref speed))))
(assert (=> (= state 0) (= state10 state1)))
(assert (=> (= state 0) (= speed10 speed1)))
(assert (= (mk_int__ref state11) (mk_int__ref state9)))
(assert (= (mk_int__ref speed11) (mk_int__ref speed9)))
(assert (= state12 state10))
(assert (= speed12 speed10))
(assert (not (= state11 0)))
(check-sat)
(exit)
