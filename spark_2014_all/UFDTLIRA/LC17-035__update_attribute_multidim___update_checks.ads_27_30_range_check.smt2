(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it1 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it1 it1) Bool)
(declare-const dummy it1)
(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))
(define-fun dynamic_invariant ((temp___expr_144 Int) (temp___is_init_141 Bool) (temp___skip_constant_142 Bool) (temp___do_toplevel_143 Bool)) Bool (=> (or (= temp___is_init_141 true) (<= 1 3)) (in_range temp___expr_144)))
(declare-sort it2 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (it2 it2) Bool)
(declare-const dummy1 it2)
(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))
(define-fun dynamic_invariant1 ((temp___expr_150 Int) (temp___is_init_147 Bool) (temp___skip_constant_148 Bool) (temp___do_toplevel_149 Bool)) Bool (=> (or (= temp___is_init_147 true) (<= 1 5)) (in_range1 temp___expr_150)))
(declare-sort it3 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (it3 it3) Bool)
(declare-const dummy2 it3)
(declare-datatypes () ((it3__ref (mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))
(define-fun dynamic_invariant2 ((temp___expr_156 Int) (temp___is_init_153 Bool) (temp___skip_constant_154 Bool) (temp___do_toplevel_155 Bool)) Bool (=> (or (= temp___is_init_153 true) (<= 1 10)) (in_range2 temp___expr_156)))
(declare-sort et1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (et1 et1) Bool)
(declare-const dummy3 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant3 ((temp___expr_162 Int) (temp___is_init_159 Bool) (temp___skip_constant_160 Bool) (temp___do_toplevel_161 Bool)) Bool (=> (or (= temp___is_init_159 true) (<= 0 99)) (in_range3 temp___expr_162)))
(declare-fun to_rep (et1) Int)
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort map1 0)
(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int Int Int) et1)
(declare-fun set (map1 Int Int Int et1) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((k Int)) (forall ((a et1)) (! (= (get (set m i j k a) i j k) a) :pattern ((set m i j k a)))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((k Int) (k2 Int)) (forall ((a et1)) (! (=> (not (and (= i i2) (and (= j j2) (= k k2)))) (= (get (set m i j k a) i2 j2 k2) (get m i2 j2 k2))) :pattern ((get (set m i j k a) i2 j2 k2)) :pattern ((set m i j k a) (get m i2 j2 k2)))))))))
(declare-fun slide (map1 Int Int Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((old_first Int) (new_first Int)) (forall ((old_first_2 Int) (new_first_2 Int)) (forall ((old_first_3 Int) (new_first_3 Int)) (forall ((i Int)) (forall ((j Int)) (forall ((k Int)) (! (= (get (slide a old_first new_first old_first_2 new_first_2 old_first_3 new_first_3) i j k) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)) (- k (- new_first_3 old_first_3)))) :pattern ((get (slide a old_first new_first old_first_2 new_first_2 old_first_3 new_first_3) i j k)))))))))))
(define-fun bool_eq ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (a__first_3 Int) (a__last_3 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int) (b__first_3 Int) (b__last_3 Int)) Bool (ite (and (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (ite (<= a__first_3 a__last_3) (and (<= b__first_3 b__last_3) (= (- a__last_3 a__first_3) (- b__last_3 b__first_3))) (< b__last_3 b__first_3))) (forall ((temp___idx_132 Int) (temp___idx_133 Int) (temp___idx_134 Int)) (=> (and (and (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (and (<= a__first_2 temp___idx_133) (<= temp___idx_133 a__last_2))) (and (<= a__first_3 temp___idx_134) (<= temp___idx_134 a__last_3))) (= (to_rep (get a temp___idx_132 temp___idx_133 temp___idx_134)) (to_rep (get b (+ (- b__first a__first) temp___idx_132) (+ (- b__first_2 a__first_2) temp___idx_133) (+ (- b__first_3 a__first_3) temp___idx_134))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (a__first_3 Int) (a__last_3 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int) (b__first_3 Int) (b__last_3 Int)) (=> (= (bool_eq b b__first b__last b__first_2 b__last_2 b__first_3 b__last_3 a a__first a__last a__first_2 a__last_2 a__first_3 a__last_3) true) (and (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (ite (<= a__first_3 a__last_3) (and (<= b__first_3 b__last_3) (= (- a__last_3 a__first_3) (- b__last_3 b__first_3))) (< b__last_3 b__first_3))) (forall ((temp___idx_132 Int) (temp___idx_133 Int) (temp___idx_134 Int)) (=> (and (and (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (and (<= a__first_2 temp___idx_133) (<= temp___idx_133 a__last_2))) (and (<= a__first_3 temp___idx_134) (<= temp___idx_134 a__last_3))) (= (to_rep (get a temp___idx_132 temp___idx_133 temp___idx_134)) (to_rep (get b (+ (- b__first a__first) temp___idx_132) (+ (- b__first_2 a__first_2) temp___idx_133) (+ (- b__first_3 a__first_3) temp___idx_134)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const x1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const y1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const y2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const y3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const z1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const z2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const z3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const new_val_1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const new_val_2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-fun temp___178 (map1 Int Int Int Int Int Int Int Int Int Int Int) map1)
(assert (forall ((temp___180 map1)) (forall ((temp___181 Int) (temp___182 Int) (temp___183 Int) (temp___184 Int) (temp___185 Int) (temp___186 Int) (temp___187 Int) (temp___188 Int) (temp___189 Int) (temp___190 Int) (temp___191 Int)) (let ((temp___179 (temp___178 temp___180 temp___181 temp___182 temp___183 temp___184 temp___185 temp___186 temp___187 temp___188 temp___189 temp___190 temp___191))) (forall ((temp___192 Int) (temp___193 Int) (temp___194 Int)) (ite (and (and (= temp___192 temp___188) (= temp___193 temp___189)) (= temp___194 temp___190)) (= (get temp___179 temp___192 temp___193 temp___194) (of_rep temp___191)) (ite (or (and (and (= temp___192 temp___181) (= temp___193 temp___182)) (= temp___194 temp___183)) (and (and (= temp___192 temp___184) (= temp___193 temp___185)) (= temp___194 temp___186))) (= (get temp___179 temp___192 temp___193 temp___194) (of_rep temp___187)) (= (get temp___179 temp___192 temp___193 temp___194) (get temp___180 temp___192 temp___193 temp___194)))))))))
(declare-fun temp___202 (map1 Int Int Int Int Int Int Int Int Int Int Int) map1)
(assert (forall ((temp___204 map1)) (forall ((temp___205 Int) (temp___206 Int) (temp___207 Int) (temp___208 Int) (temp___209 Int) (temp___210 Int) (temp___211 Int) (temp___212 Int) (temp___213 Int) (temp___214 Int) (temp___215 Int)) (let ((temp___203 (temp___202 temp___204 temp___205 temp___206 temp___207 temp___208 temp___209 temp___210 temp___211 temp___212 temp___213 temp___214 temp___215))) (forall ((temp___216 Int) (temp___217 Int) (temp___218 Int)) (ite (and (and (= temp___216 temp___212) (= temp___217 temp___213)) (= temp___218 temp___214)) (= (get temp___203 temp___216 temp___217 temp___218) (of_rep temp___215)) (ite (or (and (and (= temp___216 temp___205) (= temp___217 temp___206)) (= temp___218 temp___207)) (and (and (= temp___216 temp___208) (= temp___217 temp___209)) (= temp___218 temp___210))) (= (get temp___203 temp___216 temp___217 temp___218) (of_rep temp___211)) (= (get temp___203 temp___216 temp___217 temp___218) (get temp___204 temp___216 temp___217 temp___218)))))))))
(declare-const a map1)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 map1)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const result map1)
(declare-const a1 map1)
(declare-const a2 map1)
(declare-const a3 map1)
(assert (in_range x1))
(assert (in_range x2))
(assert (in_range x3))
(assert (in_range1 y1))
(assert (in_range1 y2))
(assert (in_range1 y3))
(assert (in_range2 z1))
(assert (in_range2 z2))
(assert (in_range2 z3))
(assert (in_range3 new_val_1))
(assert (in_range3 new_val_2))
(assert (and (< 1 x1) (and (< 1 y1) (and (< 1 z1) (and (< x2 3) (and (< y2 5) (and (< z2 10) (and (< x3 3) (and (< y3 5) (and (< z3 10) (and (< new_val_1 99) (< 0 new_val_2))))))))))))
(assert (and (= o (- new_val_2 1)) (in_range3 (- new_val_2 1))))
(assert (and (= o1 (+ z3 1)) (in_range2 (+ z3 1))))
(assert (and (= o2 (+ y3 1)) (in_range1 (+ y3 1))))
(assert (and (= o3 (+ x3 1)) (in_range (+ x3 1))))
(assert (and (= o4 (+ new_val_1 1)) (in_range3 (+ new_val_1 1))))
(assert (and (= o5 (+ z2 1)) (in_range2 (+ z2 1))))
(assert (and (= o6 (+ y2 1)) (in_range1 (+ y2 1))))
(assert (and (= o7 (+ x2 1)) (in_range (+ x2 1))))
(assert (and (= o8 (- z1 1)) (in_range2 (- z1 1))))
(assert (and (= o9 (- y1 1)) (in_range1 (- y1 1))))
(assert (and (= o10 (- x1 1)) (in_range (- x1 1))))
(assert (= o11 (temp___202 a o10 o9 o8 o7 o6 o5 o4 o3 o2 o1 o)))
(assert (= (mk_map__ref result) (mk_map__ref a)))
(assert (= a1 o11))
(assert (= a1 a2))
(assert (= a3 a1))
(assert (and (= o12 (- new_val_2 1)) (in_range3 (- new_val_2 1))))
(assert (and (= o13 (+ z3 1)) (in_range2 (+ z3 1))))
(assert (and (= o14 (+ y3 1)) (in_range1 (+ y3 1))))
(assert (and (= o15 (+ x3 1)) (in_range (+ x3 1))))
(assert (and (= o16 (+ new_val_1 1)) (in_range3 (+ new_val_1 1))))
(assert (and (= o17 (+ z2 1)) (in_range2 (+ z2 1))))
(assert (and (= o18 (+ y2 1)) (in_range1 (+ y2 1))))
(assert (not (in_range (+ x2 1))))
(check-sat)
(exit)
