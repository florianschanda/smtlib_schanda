(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

logic read_partial_0 : int -> int

logic read_partial_0__function_guard : int, int -> prop

axiom read_partial_0__post_axiom :
  (forall levels__x0:int [read_partial_0(levels__x0)].
  (in_range(levels__x0) -> in_range(read_partial_0(levels__x0))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic read_partial_1 : int -> int

logic read_partial_1__function_guard : int, int -> prop

axiom read_partial_1__post_axiom :
  (forall levels__nested_1__x1:int [read_partial_1(levels__nested_1__x1)].
  (in_range(levels__nested_1__x1) ->
  in_range(read_partial_1(levels__nested_1__x1))))

logic read_partial_1_inner : int, int -> int

logic read_partial_1_inner__function_guard : int, int, int -> prop

axiom read_partial_1_inner__post_axiom :
  (forall levels__nested_1__nested_2__x2:int.
  forall levels__nested_1__nested_2__y2:int
  [read_partial_1_inner(levels__nested_1__nested_2__x2,
  levels__nested_1__nested_2__y2)].
  ((in_range(levels__nested_1__nested_2__x2) and
  in_range(levels__nested_1__nested_2__y2)) ->
  in_range(read_partial_1_inner(levels__nested_1__nested_2__x2,
  levels__nested_1__nested_2__y2))))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic read_partial_2 : int -> int

logic read_partial_2__function_guard : int, int -> prop

axiom read_partial_2__post_axiom :
  (forall levels__nested_1__nested_2__x2:int
  [read_partial_2(levels__nested_1__nested_2__x2)].
  (in_range(levels__nested_1__nested_2__x2) ->
  in_range(read_partial_2(levels__nested_1__nested_2__x2))))

logic x0 : int

logic a : int

logic x1 : int

logic x2 : int

logic y2 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : int

logic o17 : int

logic result : int

logic a1 : int

logic a2 : int

logic a3 : int

axiom H : in_range(x0)

axiom H1 : (((- 2147483648) <= 2147483647) -> in_range(a))

axiom H2 : in_range(x1)

axiom H3 : in_range(x2)

axiom H4 : in_range(y2)

axiom H5 : ((o = read_partial_2(x2)) and in_range(o))

axiom H6 : ((o1 = (x0 + x1)) and in_range((x0 + x1)))

axiom H7 : (o2 = (o1 + o))

axiom H8 : ((o3 = o2) and in_range(o2))

axiom H9 : (result = a)

axiom H10 : (a1 = o3)

axiom H11 : (a1 = a2)

axiom H12 : (a3 = a1)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (a2 = ((read_partial_0(x0) + read_partial_1(x1)) + read_partial_2(x2)))
