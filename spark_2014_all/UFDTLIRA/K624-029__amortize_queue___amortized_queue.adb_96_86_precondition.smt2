(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort capacity_range 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (capacity_range capacity_range) Bool)
(declare-const dummy capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__amortized_queue__my_vectors__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range (rec__amortized_queue__my_vectors__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__amortized_queue__my_vectors__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type (rec__amortized_queue__my_vectors__vector a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const amortized_queue__my_vectors__vector__capacity__first__bit Int)
(declare-const amortized_queue__my_vectors__vector__capacity__last__bit Int)
(declare-const amortized_queue__my_vectors__vector__capacity__position Int)
(assert (<= 0 amortized_queue__my_vectors__vector__capacity__first__bit))
(assert (< amortized_queue__my_vectors__vector__capacity__first__bit amortized_queue__my_vectors__vector__capacity__last__bit))
(assert (<= 0 amortized_queue__my_vectors__vector__capacity__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_213 Int) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool)) Bool (=> (or (= temp___is_init_210 true) (<= 0 1000)) (in_range temp___expr_213)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)
(declare-fun to_rep (capacity_range) Int)
(declare-fun of_rep (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x capacity_range)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun capacity ((container us_rep)) Int (ite (= (of_int 1) true) (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 container))) 1000))
(declare-fun capacity__function_guard (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (capacity container)) (dynamic_invariant result true false true))) :pattern ((length container)))))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(declare-fun get (us_rep1 Int) Int)
(declare-fun get__function_guard (Int us_rep1 Int) Bool)
(define-fun oeq1 ((left us_rep1) (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)
(declare-fun model__ (us_rep) us_rep1)
(declare-fun model____function_guard (us_rep1 us_rep) Bool)
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (oeq left right) true) (= (oeq1 (model__ left) (model__ right)) true)) :pattern ((oeq left right)))))
(declare-fun copy (us_rep Int) us_rep)
(declare-fun copy__function_guard (us_rep us_rep Int) Bool)
(assert (forall ((source us_rep)) (forall ((capacity1 Int)) (! (=> (and (dynamic_invariant capacity1 true true true) (=> (= (of_int 1) true) (or (= capacity1 0) (<= (length source) capacity1)))) (let ((result (copy source capacity1))) (and (= (oeq1 (model__ result) (model__ source)) true) (ite (= capacity1 0) (= (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 result))) (length source)) (= (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 result))) capacity1))))) :pattern ((copy source capacity1))))))
(define-fun olt ((left us_rep1) (right us_rep1)) Bool (and (< (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep1 us_rep1) Bool)
(define-fun last_index ((container us_rep)) Int (last (model__ container)))
(declare-fun last_index__function_guard (Int us_rep) Bool)
(define-fun last_element ((container us_rep)) Int (get (model__ container) (last_index container)))
(declare-fun last_element__function_guard (Int us_rep) Bool)
(declare-sort element_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq3 (element_type element_type) Bool)
(declare-const dummy3 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_201 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_201)))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(declare-fun oconcat__3 (us_rep Int) us_rep)
(declare-fun oconcat__3__function_guard (us_rep us_rep Int) Bool)
(declare-sort val__ 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (val__ val__) Bool)
(declare-const dummy4 val__)
(declare-datatypes () ((val____ref (mk_val____ref (val____content val__)))))
(define-fun val____ref___projection ((a val____ref)) val__ (val____content a))
(define-fun dynamic_invariant2 ((temp___expr_189 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool)) Bool (=> (or (= temp___is_init_186 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_189)))
(define-fun element ((container us_rep) (index Int)) Int (get (model__ container) index))
(declare-fun element__function_guard (Int us_rep Int) Bool)
(assert (forall ((left us_rep)) (forall ((right Int)) (! (=> (and (dynamic_invariant2 right true true true) (<= (+ (length left) 1) 1000)) (let ((result (oconcat__3 left right))) (and (= (length result) (+ (length left) 1)) (and (forall ((i Int)) (=> (and (<= 1 i) (<= i (last_index left))) (= (element result i) (element left i)))) (= (element result (+ (last_index left) 1)) right))))) :pattern ((oconcat__3 left right))))))
(define-fun in_range4 ((rec__amortized_queue__my_vectors__vector__capacity1 Int) (a us_rep)) Bool (= rec__amortized_queue__my_vectors__vector__capacity1 (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const amortized_queue__my_vectors__vector__capacity__first__bit1 Int)
(declare-const amortized_queue__my_vectors__vector__capacity__last__bit1 Int)
(declare-const amortized_queue__my_vectors__vector__capacity__position1 Int)
(assert (<= 0 amortized_queue__my_vectors__vector__capacity__first__bit1))
(assert (< amortized_queue__my_vectors__vector__capacity__first__bit1 amortized_queue__my_vectors__vector__capacity__last__bit1))
(assert (<= 0 amortized_queue__my_vectors__vector__capacity__position1))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((constrained_vector__ref (mk_constrained_vector__ref (constrained_vector__content us_rep)))))
(define-fun constrained_vector__ref___projection ((a constrained_vector__ref)) us_rep (constrained_vector__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__amortized_queue__queue__front us_rep) (rec__amortized_queue__queue__rear us_rep)))))
(define-fun us_split_fields_Front__projection ((a us_split_fields2)) us_rep (rec__amortized_queue__queue__front a))
(define-fun us_split_fields_Rear__projection ((a us_split_fields2)) us_rep (rec__amortized_queue__queue__rear a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const amortized_queue__queue__front__first__bit Int)
(declare-const amortized_queue__queue__front__last__bit Int)
(declare-const amortized_queue__queue__front__position Int)
(assert (<= 0 amortized_queue__queue__front__first__bit))
(assert (< amortized_queue__queue__front__first__bit amortized_queue__queue__front__last__bit))
(assert (<= 0 amortized_queue__queue__front__position))
(declare-const amortized_queue__queue__rear__first__bit Int)
(declare-const amortized_queue__queue__rear__last__bit Int)
(declare-const amortized_queue__queue__rear__position Int)
(assert (<= 0 amortized_queue__queue__rear__first__bit))
(assert (< amortized_queue__queue__rear__first__bit amortized_queue__queue__rear__last__bit))
(assert (<= 0 amortized_queue__queue__rear__position))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((queue__ref (mk_queue__ref (queue__content us_rep2)))))
(define-fun queue__ref___projection ((a queue__ref)) us_rep2 (queue__content a))
(define-fun dynamic_invariant3 ((temp___expr_360 us_rep2) (temp___is_init_357 Bool) (temp___skip_constant_358 Bool) (temp___do_toplevel_359 Bool)) Bool (and (in_range4 1000 (rec__amortized_queue__queue__front (us_split_fields3 temp___expr_360))) (in_range4 1000 (rec__amortized_queue__queue__rear (us_split_fields3 temp___expr_360)))))
(define-fun default_initial_assumption ((temp___expr_363 us_rep2) (temp___skip_top_level_364 Bool)) Bool (and (and (= (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__front (us_split_fields3 temp___expr_363))))) 1000) (= (is_empty (rec__amortized_queue__queue__front (us_split_fields3 temp___expr_363))) true)) (and (= (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__rear (us_split_fields3 temp___expr_363))))) 1000) (= (is_empty (rec__amortized_queue__queue__rear (us_split_fields3 temp___expr_363))) true))))
(declare-fun inv (us_rep2) Bool)
(declare-fun inv__function_guard (Bool us_rep2) Bool)
(assert true)
(assert (forall ((q us_rep2)) (! (= (= (inv q) true) (and (and (<= (length (rec__amortized_queue__queue__rear (us_split_fields3 q))) (length (rec__amortized_queue__queue__front (us_split_fields3 q)))) (<= (length (rec__amortized_queue__queue__rear (us_split_fields3 q))) (- (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__front (us_split_fields3 q))))) (length (rec__amortized_queue__queue__front (us_split_fields3 q)))))) (= (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__front (us_split_fields3 q))))) (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__rear (us_split_fields3 q)))))))) :pattern ((inv q)))))
(declare-fun model__1 (us_rep2) us_rep)
(declare-fun model____function_guard1 (us_rep us_rep2) Bool)
(declare-fun is_model (us_rep2 us_rep) Bool)
(declare-fun is_model__function_guard (Bool us_rep2 us_rep) Bool)
(assert (forall ((q us_rep2)) (! (=> (and (dynamic_invariant3 q true true true) (= (inv q) true)) (= (is_model q (model__1 q)) true)) :pattern ((model__1 q)))))
(declare-const q us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant4 ((temp___expr_351 us_rep) (temp___is_init_348 Bool) (temp___skip_constant_349 Bool) (temp___do_toplevel_350 Bool)) Bool (=> (not (= temp___skip_constant_349 true)) (in_range4 1000 temp___expr_351)))
(define-fun default_initial_assumption1 ((temp___expr_353 us_rep) (temp___skip_top_level_354 Bool)) Bool (and (= (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 temp___expr_353))) 1000) (=> (not (= temp___skip_top_level_354 true)) (= (is_empty temp___expr_353) true))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert true)
(assert (forall ((q1 us_rep2)) (forall ((m us_rep)) (! (= (= (is_model q1 m) true) (and (and (and (= (+ (length (rec__amortized_queue__queue__front (us_split_fields3 q1))) (length (rec__amortized_queue__queue__rear (us_split_fields3 q1)))) (length m)) (<= (length m) 1000)) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length (rec__amortized_queue__queue__rear (us_split_fields3 q1))))) (= (element m i) (element (rec__amortized_queue__queue__rear (us_split_fields3 q1)) (+ (- (length (rec__amortized_queue__queue__rear (us_split_fields3 q1))) i) 1)))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length (rec__amortized_queue__queue__front (us_split_fields3 q1))))) (= (element m (+ i (length (rec__amortized_queue__queue__rear (us_split_fields3 q1))))) (element (rec__amortized_queue__queue__front (us_split_fields3 q1)) i)))))) :pattern ((is_model q1 m))))))
(declare-sort count_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (count_type count_type) Bool)
(declare-const dummy7 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant5 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 0 2147483647)) (in_range5 temp___expr_141)))
(declare-sort extended_index 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1001)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (extended_index extended_index) Bool)
(declare-const dummy8 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant6 ((temp___expr_207 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 1001)) (in_range6 temp___expr_207)))
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq2 a b) (oeq1 a b)) :pattern ((user_eq2 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_247 us_rep1) (temp___skip_top_level_248 Bool)) Bool (=> (not (= temp___skip_top_level_248 true)) (= (length1 temp___expr_247) 0)))
(assert (forall ((container us_rep)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (= (length container) 0)) :pattern ((is_empty container)))))
(declare-fun first_index__function_guard (Int us_rep) Bool)
(declare-sort index_type 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (index_type index_type) Bool)
(declare-const dummy9 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(define-fun dynamic_invariant7 ((temp___expr_195 Int) (temp___is_init_192 Bool) (temp___skip_constant_193 Bool) (temp___do_toplevel_194 Bool)) Bool (=> (or (= temp___is_init_192 true) (<= 1 1000)) (in_range7 temp___expr_195)))
(declare-sort extended_index1 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq10 (extended_index1 extended_index1) Bool)
(declare-const dummy10 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant8 ((temp___expr_240 Int) (temp___is_init_237 Bool) (temp___skip_constant_238 Bool) (temp___do_toplevel_239 Bool)) Bool (=> (or (= temp___is_init_237 true) (<= 0 1000)) (in_range8 temp___expr_240)))
(assert (forall ((container us_rep1)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 1000) (dynamic_invariant5 result true false true))) :pattern ((length1 container)))))
(declare-sort element_type1 0)
(define-fun in_range9 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq11 (element_type1 element_type1) Bool)
(declare-const dummy11 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant9 ((temp___expr_234 Int) (temp___is_init_231 Bool) (temp___skip_constant_232 Bool) (temp___do_toplevel_233 Bool)) Bool (=> (or (= temp___is_init_231 true) (<= (- 2147483648) 2147483647)) (in_range9 temp___expr_234)))
(assert (forall ((container us_rep1)) (forall ((position Int)) (! (=> (and (dynamic_invariant8 position true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant9 (get container position) true false true)) :pattern ((get container position))))))
(declare-const result____split_fields capacity_range)
(declare-const result____split_fields1 us_main_type)
(declare-const result____split_fields2 capacity_range)
(declare-const result____split_fields3 us_main_type)
(declare-const o capacity_range)
(declare-const o1 us_main_type)
(declare-const o2 capacity_range)
(declare-const o3 us_main_type)
(declare-const o4 us_rep)
(declare-const o5 us_rep)
(declare-const o6 us_rep)
(declare-const o7 us_rep)
(declare-const o8 us_split_fields2)
(declare-const amortized_queue__tail__R62b__result__assume us_rep2)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const result us_split_fields__ref1)
(declare-const result____split_fields4 us_split_fields2)
(declare-const amortized_queue__my_vectors__delete_last__container__fields us_split_fields)
(declare-const result1 us_split_fields__ref1)
(declare-const result____split_fields5 us_split_fields2)
(declare-const result2 Bool)
(define-fun o11 () us_rep (mk___rep (mk___split_discrs o2) (mk___split_fields o3)))
(define-fun o12 () us_rep (mk___rep (mk___split_discrs o) (mk___split_fields o1)))
(assert (and (= 1000 (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__front (us_split_fields3 q)))))) (= 1000 (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__rear (us_split_fields3 q))))))))
(assert (and (= (inv q) true) (< 0 (length (rec__amortized_queue__queue__front (us_split_fields3 q))))))
(assert (and (= o4 (copy (rec__amortized_queue__queue__rear (us_split_fields3 q)) 1000)) (and (= (oeq1 (model__ o4) (model__ (rec__amortized_queue__queue__rear (us_split_fields3 q)))) true) (ite (= 1000 0) (= (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 o4))) (length (rec__amortized_queue__queue__rear (us_split_fields3 q)))) (= (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 o4))) 1000)))))
(assert (= o5 o4))
(assert (= o6 o5))
(assert (and (= o12 (copy (rec__amortized_queue__queue__front (us_split_fields3 q)) 1000)) (and (= (oeq1 (model__ o12) (model__ (rec__amortized_queue__queue__front (us_split_fields3 q)))) true) (ite (= 1000 0) (= (to_rep o) (length (rec__amortized_queue__queue__front (us_split_fields3 q)))) (= (to_rep o) 1000)))))
(assert (= o11 o12))
(assert (= o7 o11))
(assert (= o8 (mk___split_fields1 o7 o6)))
(assert (= amortized_queue__tail__R62b__result__assume (mk___rep1 o8)))
(assert (= result (mk___split_fields__ref1 (mk___split_fields1 (mk___rep (mk___split_discrs result____split_fields) (mk___split_fields result____split_fields1)) (mk___rep (mk___split_discrs result____split_fields2) (mk___split_fields result____split_fields3))))))
(assert (= result____split_fields4 (us_split_fields3 amortized_queue__tail__R62b__result__assume)))
(assert (and (= 1000 (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__front result____split_fields4))))) (= 1000 (to_rep (rec__amortized_queue__my_vectors__vector__capacity (us_split_discrs1 (rec__amortized_queue__queue__rear result____split_fields4)))))))
(assert (and (= (length (mk___rep (us_split_discrs1 (rec__amortized_queue__queue__front result____split_fields4)) amortized_queue__my_vectors__delete_last__container__fields)) (- (length (mk___rep (us_split_discrs1 (rec__amortized_queue__queue__front result____split_fields4)) (us_split_fields1 (rec__amortized_queue__queue__front result____split_fields4)))) 1)) (= (olt (model__ (mk___rep (us_split_discrs1 (rec__amortized_queue__queue__front result____split_fields4)) amortized_queue__my_vectors__delete_last__container__fields)) (model__ (mk___rep (us_split_discrs1 (rec__amortized_queue__queue__front result____split_fields4)) (us_split_fields1 (rec__amortized_queue__queue__front result____split_fields4))))) true)))
(assert (= result1 (mk___split_fields__ref1 result____split_fields4)))
(assert (= result____split_fields5 (mk___split_fields1 (mk___rep (us_split_discrs1 (rec__amortized_queue__queue__front result____split_fields4)) amortized_queue__my_vectors__delete_last__container__fields) (rec__amortized_queue__queue__rear result____split_fields4))))
(assert (and (= o9 (length (rec__amortized_queue__queue__rear result____split_fields5))) (and (in_range o9) (<= o9 (capacity (rec__amortized_queue__queue__rear result____split_fields5))))))
(assert (and (= o10 (length (rec__amortized_queue__queue__front result____split_fields5))) (and (in_range o10) (<= o10 (capacity (rec__amortized_queue__queue__front result____split_fields5))))))
(assert (= result2 (ite (< o10 o9) true false)))
(assert (= result2 true))
(assert (= (of_int 1) true))
(assert (not (or (= 1000 0) (<= (length (rec__amortized_queue__queue__rear result____split_fields5)) 1000))))
(check-sat)
(exit)
