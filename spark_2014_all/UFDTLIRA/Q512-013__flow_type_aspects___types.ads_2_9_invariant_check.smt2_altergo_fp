(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic r : unit -> bool

logic r__function_guard : bool, unit -> prop

logic func : unit -> bool

logic func__function_guard : bool, unit -> prop

axiom func__def_axiom : ((func(void) = true) <-> (r(void) = true))

type tt1B

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tt1B, tt1B -> bool

logic dummy : tt1B

type tt1B__ref = { tt1B__content : tt1B
}

function tt1B__ref___projection(a: tt1B__ref) : tt1B = (a).tt1B__content

type t1

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t1, t1 -> bool

logic dummy1 : t1

type t1__ref = { t1__content : t1
}

function t1__ref___projection(a: t1__ref) : t1 = (a).t1__content

type t2

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t2, t2 -> bool

logic dummy2 : t2

type t2__ref = { t2__content : t2
}

function t2__ref___projection(a: t2__ref) : t2 = (a).t2__content

type us_split_fields = { rec__types__t3__c : bool
}

function us_split_fields_C__projection(a: us_split_fields) : bool =
  (a).rec__types__t3__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((a).us_split_fields1).rec__types__t3__c = ((b).us_split_fields1).rec__types__t3__c) ->
  (bool_eq5(a, b) = true)) and
  ((not (((a).us_split_fields1).rec__types__t3__c = ((b).us_split_fields1).rec__types__t3__c)) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. (0 <= object__size({ us_split_fields1 = {
  rec__types__t3__c = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. (0 <= object__alignment({ us_split_fields1 = {
  rec__types__t3__c = a } })))

logic types__t3__c__first__bit : int

logic types__t3__c__last__bit : int

logic types__t3__c__position : int

axiom types__t3__c__first__bit_axiom : (0 <= types__t3__c__first__bit)

axiom types__t3__c__last__bit_axiom :
  (types__t3__c__first__bit <  types__t3__c__last__bit)

axiom types__t3__c__position_axiom : (0 <= types__t3__c__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : bool

type t3__ref = { t3__content : us_rep
}

function t3__ref___projection(a: t3__ref) : us_rep = (a).t3__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic to1 : int

logic to2 : int

logic to3__split_fields : bool

logic temp___166 : int

logic o : int

logic usobject : bool

logic result : int

logic to11 : int

logic result1 : int

logic to21 : int

logic to22 : int

axiom H : (result = to1)

axiom H1 : (to11 = 3)

axiom H2 : in_range2(to11)

axiom H3 : ((not (of_int(1) = true)) and (r(void) = true))

axiom H4 : (o = 1)

axiom H5 : (result1 = to2)

axiom H6 : (to21 = o)

axiom H7 : (in_range3(to21) and ((not (of_int(to21) = true)) and
  (r(void) = true)))

axiom H8 : ((to3__split_fields = of_int(1)) and ((r(void) = true) and
  (func(void) = true)))

axiom H9 : (in_range3(to22) and ((not (of_int(to22) = true)) and
  (r(void) = true)))

 (* File "types.ads", line 24, characters 0-0 *)
goal WP_parameter_def : (r(void) = true)
