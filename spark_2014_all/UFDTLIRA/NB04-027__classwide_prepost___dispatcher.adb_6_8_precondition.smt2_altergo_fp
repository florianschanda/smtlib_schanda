(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_split_fields = { rec__object__t__b : bool; rec__ext__ : us_private
}

function us_split_fields_B__projection(a: us_split_fields) : bool =
  (a).rec__object__t__b

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)].
  (((((a).us_split_fields1).rec__object__t__b = ((b).us_split_fields1).rec__object__t__b) ->
  (bool_eq(a, b) = true)) and
  ((not (((a).us_split_fields1).rec__object__t__b = ((b).us_split_fields1).rec__object__t__b)) ->
  (bool_eq(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:us_private. forall a2:int. (0 <= object__size({
  us_split_fields1 = { rec__object__t__b = a; rec__ext__ = a1 }; attr__tag =
  a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = { rec__object__t__b = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

logic object__t__b__first__bit : int

logic object__t__b__last__bit : int

logic object__t__b__position : int

axiom object__t__b__first__bit_axiom : (0 <= object__t__b__first__bit)

axiom object__t__b__last__bit_axiom :
  (object__t__b__first__bit <  object__t__b__last__bit)

axiom object__t__b__position_axiom : (0 <= object__t__b__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : bool

logic dummy1 : us_private

logic dummy2 : int

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic is_valid : us_rep -> bool

logic is_valid__function_guard : bool, us_rep -> prop

logic is_valid1 : int, us_rep -> bool

logic is_valid__function_guard1 : bool, int, us_rep -> prop

logic do_stuff__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom object__t__compat_axiom : true

logic x__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

axiom is_valid__post_axiom : true

axiom is_valid__post__dispatch_axiom : true

axiom object__t__compat_axiom1 :
  (forall x:bool. forall x1:us_private. forall x2:int [is_valid1(us_tag, {
  us_split_fields1 = { rec__object__t__b = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. (to_int(is_valid({ us_split_fields1 = { rec__object__t__b = x;
  rec__ext__ = x1 }; attr__tag = x2 })) = to_int(is_valid1(us_tag, {
  us_split_fields1 = { rec__object__t__b = x; rec__ext__ = x1 }; attr__tag =
  x2 }))))

axiom is_valid__def_axiom :
  (forall x:bool. forall x1:us_private. forall x2:int [is_valid({
  us_split_fields1 = { rec__object__t__b = x; rec__ext__ = x1 }; attr__tag =
  x2 })]. ((is_valid({ us_split_fields1 = { rec__object__t__b = x;
  rec__ext__ = x1 }; attr__tag = x2 }) = true) <-> (x = true)))

 (* File "dispatcher.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall x__split_fields:bool. forall x__split_fields1:us_private.
  ((x__split_fields = true) -> (is_valid1(x__attr__tag, { us_split_fields1 =
  { rec__object__t__b = x__split_fields; rec__ext__ = x__split_fields1 };
  attr__tag = x__attr__tag }) = true)))
