(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort int20 0)
(declare-fun int20qtint (int20) Int)
(assert (forall ((i int20)) (and (<= 1 (int20qtint i)) (<= (int20qtint i) 20))))
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (int20 int20) Bool)
(declare-const dummy int20)
(declare-datatypes () ((int20__ref (mk_int20__ref (int20__content int20)))))
(define-fun int20__ref___projection ((a int20__ref)) int20 (int20__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 1 20)) (in_range temp___expr_158)))
(declare-sort int10 0)
(declare-fun int10qtint (int10) Int)
(assert (forall ((i int10)) (and (<= 1 (int10qtint i)) (<= (int10qtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (int10 int10) Bool)
(declare-const dummy1 int10)
(declare-datatypes () ((int10__ref (mk_int10__ref (int10__content int10)))))
(define-fun int10__ref___projection ((a int10__ref)) int10 (int10__content a))
(define-fun dynamic_invariant1 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 1 10)) (in_range1 temp___expr_165)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x Int)
(declare-const y Int)
(declare-const o Int)
(declare-const inrange__add_out__i Int)
(declare-const result Int)
(declare-const x1 Int)
(declare-const result1 Int)
(declare-const y1 Int)
(declare-const inrange__add_out__i1 Int)
(assert (= (mk_int__ref result) (mk_int__ref x)))
(assert (= x1 10))
(assert (in_range1 x1))
(assert (= (mk_int__ref result1) (mk_int__ref y)))
(assert (= y1 10))
(assert (in_range1 y1))
(assert (and (= o x1) (in_range x1)))
(assert (= o inrange__add_out__i))
(assert (and (= inrange__add_out__i1 (+ inrange__add_out__i y1)) (in_range inrange__add_out__i1)))
(assert (not (in_range1 inrange__add_out__i1)))
(check-sat)
(exit)
