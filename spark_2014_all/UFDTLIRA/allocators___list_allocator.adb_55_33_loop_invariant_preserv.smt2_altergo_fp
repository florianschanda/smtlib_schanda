(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type resource

predicate in_range1(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : resource, resource -> bool

logic dummy : resource

type resource__ref = { resource__content : resource
}

function resource__ref___projection(a: resource__ref) : resource =
  (a).resource__content

type valid_resource

predicate in_range2(x: int) = ((1 <= x) and (x <= 10000))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : valid_resource, valid_resource -> bool

logic dummy1 : valid_resource

type valid_resource__ref = { valid_resource__content : valid_resource
}

function valid_resource__ref___projection(a: valid_resource__ref) : valid_resource =
  (a).valid_resource__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq4 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : count_type, count_type -> bool

logic dummy3 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq2(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq2(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq2(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range3(length(container))))

type element_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : element_type, element_type -> bool

logic dummy4 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type extended_index

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy5 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position:int [get(container, position)]. ((in_range5(position) and
  ((1 <= position) and (position <= (0 + length(container))))) ->
  in_range4(get(container, position)))))

logic ole__function_guard : bool, us_rep, us_rep -> prop

logic add : us_rep, int -> us_rep

logic add__function_guard : us_rep, us_rep, int -> prop

axiom add__post_axiom :
  (forall container:us_rep.
  (forall new_item:int [add(container, new_item)]. ((in_range4(new_item) and
  ((length(container) <  2147483647) and
  ((0 + length(container)) <  2147483647))) -> ((length(add(container,
  new_item)) = (length(container) + 1)) and ((get(add(container, new_item),
  (0 + length(add(container, new_item)))) = new_item) and
  (((bool_le(length(container), length(add(container, new_item))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(container)))) ->
  (get(container, n) = get(add(container, new_item), n))))) and
  (not (bool_le(length(container), length(add(container,
  new_item))) = false))))))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq8 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type set__ref = { set__content : us_rep1
}

function set__ref___projection(a: set__ref) : us_rep1 = (a).set__content

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic is_empty : us_rep1 -> bool

logic is_empty__function_guard : bool, us_rep1 -> prop

axiom length__post_axiom1 :
  (forall container:us_rep1 [length1(container)].
  in_range3(length1(container)))

type element_type1

predicate in_range6(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : element_type1, element_type1 -> bool

logic dummy7 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

logic contains : us_rep1, int -> bool

logic contains__function_guard : bool, us_rep1, int -> prop

axiom is_empty__post_axiom :
  (forall container:us_rep1 [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:int. (not (in_range6(item) and (contains(container,
  item) = true))))) and ((is_empty(container) = true) <->
  (length1(container) = 0))))

type us_split_fields = { rec__list_allocator__m__t__available : us_rep;
rec__list_allocator__m__t__allocated : us_rep1
}

function us_split_fields_Available__projection(a: us_split_fields) : us_rep =
  (a).rec__list_allocator__m__t__available

function us_split_fields_Allocated__projection(a: us_split_fields) : us_rep1 =
  (a).rec__list_allocator__m__t__allocated

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep2 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep2) : us_split_fields =
  (a).us_split_fields1

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  ((((user_eq2(((a).us_split_fields1).rec__list_allocator__m__t__available,
  ((b).us_split_fields1).rec__list_allocator__m__t__available) = true) and
  (bool_eq8(((a).us_split_fields1).rec__list_allocator__m__t__allocated,
  ((b).us_split_fields1).rec__list_allocator__m__t__allocated) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not ((user_eq2(((a).us_split_fields1).rec__list_allocator__m__t__available,
  ((b).us_split_fields1).rec__list_allocator__m__t__available) = true) and
  (bool_eq8(((a).us_split_fields1).rec__list_allocator__m__t__allocated,
  ((b).us_split_fields1).rec__list_allocator__m__t__allocated) = true))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_rep. forall a1:us_rep1. (0 <= object__size2({
  us_split_fields1 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep. forall a1:us_rep1. (0 <= object__alignment2({
  us_split_fields1 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } })))

logic list_allocator__m__t__available__first__bit : int

logic list_allocator__m__t__available__last__bit : int

logic list_allocator__m__t__available__position : int

axiom list_allocator__m__t__available__first__bit_axiom :
  (0 <= list_allocator__m__t__available__first__bit)

axiom list_allocator__m__t__available__last__bit_axiom :
  (list_allocator__m__t__available__first__bit <  list_allocator__m__t__available__last__bit)

axiom list_allocator__m__t__available__position_axiom :
  (0 <= list_allocator__m__t__available__position)

logic list_allocator__m__t__allocated__first__bit : int

logic list_allocator__m__t__allocated__last__bit : int

logic list_allocator__m__t__allocated__position : int

axiom list_allocator__m__t__allocated__first__bit_axiom :
  (0 <= list_allocator__m__t__allocated__first__bit)

axiom list_allocator__m__t__allocated__last__bit_axiom :
  (list_allocator__m__t__allocated__first__bit <  list_allocator__m__t__allocated__last__bit)

axiom list_allocator__m__t__allocated__position_axiom :
  (0 <= list_allocator__m__t__allocated__position)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep

logic dummy9 : us_rep1

type t__ref = { t__content : us_rep2
}

function t__ref___projection(a: t__ref) : us_rep2 = (a).t__content

logic oeq : us_rep2, us_rep2 -> bool

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall a1:us_rep1. forall b:us_rep. forall b1:us_rep1
  [user_eq8({ us_split_fields1 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields1 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } })]. (user_eq8({
  us_split_fields1 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields1 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } }) = oeq({ us_split_fields1 = {
  rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields1 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } })))

logic contains1 : us_rep, int -> bool

logic contains__function_guard1 : bool, us_rep, int -> prop

axiom contains__post_axiom : true

axiom contains__def_axiom :
  (forall s:us_rep.
  (forall e:int [contains1(s, e)]. ((contains1(s, e) = true) <->
  (exists i:int. (((1 <= i) and (i <= length(s))) and (get(s, i) = e))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic oeq1 : us_rep1, us_rep1 -> bool

logic oeq__function_guard2 : bool, us_rep1, us_rep1 -> prop

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall x:us_rep. forall x1:us_rep1. forall y:us_rep. forall y1:us_rep1
  [oeq({ us_split_fields1 = { rec__list_allocator__m__t__available = x;
  rec__list_allocator__m__t__allocated = x1 } }, { us_split_fields1 = {
  rec__list_allocator__m__t__available = y;
  rec__list_allocator__m__t__allocated = y1 } })]. (((oeq({
  us_split_fields1 = { rec__list_allocator__m__t__available = x;
  rec__list_allocator__m__t__allocated = x1 } }, { us_split_fields1 = {
  rec__list_allocator__m__t__available = y;
  rec__list_allocator__m__t__allocated = y1 } }) = true) ->
  ((((bool_eq1(length(x), length(y)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(x)))) -> (get(x,
  n) = get(y, n))))) and (not (bool_eq1(length(x), length(y)) = false))) and
  (oeq1(x1, y1) = true))) and ((((bool_eq1(length(x), length(y)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(x)))) -> (get(x,
  n) = get(y, n))))) and (oeq1(x1, y1) = true)) -> (oeq({ us_split_fields1 =
  { rec__list_allocator__m__t__available = x;
  rec__list_allocator__m__t__allocated = x1 } }, { us_split_fields1 = {
  rec__list_allocator__m__t__available = y;
  rec__list_allocator__m__t__allocated = y1 } }) = true))))

axiom contains__post_axiom1 :
  (forall container:us_rep1.
  (forall item:int [contains(container, item)]. (in_range6(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range6(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

logic ole : us_rep1, us_rep1 -> bool

logic ole__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom ole__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range6(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom oeq__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [oeq1(left, right)].
  ((oeq1(left, right) = true) <-> ((ole(left, right) = true) and (ole(right,
  left) = true))))

 (* File "list_allocator.adb", line 21, characters 0-0 *)
goal WP_parameter_def :
  (forall model____split_fields:us_rep.
  forall model____split_fields1:us_rep1. forall r:int. forall o:us_rep.
  forall o1:us_rep. forall o2:us_rep1. forall temp___301:us_rep.
  forall temp___3011:us_rep1. forall o3:us_rep. forall o4:us_rep.
  forall o5:us_rep1. forall temp___3012:us_rep. forall temp___3013:us_rep1.
  forall result:int. forall r1:int. forall result1:us_rep.
  forall result2:us_rep1. forall model____split_fields2:us_rep.
  forall model____split_fields3:us_rep1.
  forall model____split_fields4:us_rep.
  forall model____split_fields5:us_rep1. forall r2:int. forall result3:int.
  forall r3:int. forall result4:us_rep. forall result5:us_rep1.
  forall model____split_fields6:us_rep.
  forall model____split_fields7:us_rep1.
  (((length(model____split_fields) = 0) and
  (is_empty(model____split_fields1) = true)) ->
  ((length(model____split_fields) = 0) -> ((({ int__content = result } = {
  int__content = r }) and (r1 = 1)) -> (((1 <= r1) and (r1 <= 10000)) ->
  ((((((o = add(model____split_fields, r1)) and
  ((length(o) = (length(model____split_fields) + 1)) and ((get(o,
  (0 + length(o))) = r1) and ((bool_le(length(model____split_fields),
  length(o)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length(model____split_fields)))) -> (get(model____split_fields,
  n) = get(o, n)))))))) and ((o = o1) and (model____split_fields1 = o2))) and
  ((temp___301 = o1) and (temp___3011 = o2))) and (({
  us_split_fields__content = { rec__list_allocator__m__t__available =
  result1; rec__list_allocator__m__t__allocated = result2 } } = {
  us_split_fields__content = { rec__list_allocator__m__t__available =
  model____split_fields; rec__list_allocator__m__t__allocated =
  model____split_fields1 } }) and ((temp___301 = model____split_fields2) and
  (temp___3011 = model____split_fields3)))) ->
  (((is_empty(model____split_fields5) = true) and
  ((length1(model____split_fields5) = 0) and
  ((length(model____split_fields4) = r2) and ((get(model____split_fields4,
  1) = 1) and
  ((forall rr:int. (((1 <= rr) and (rr <= r2)) ->
   (get(model____split_fields4, rr) = rr))) and
  (forall rr:int. (((1 <= rr) and (rr <= r2)) ->
  (contains1(model____split_fields4, rr) = true)))))))) ->
  ((((((1 <= 10000) -> in_range2(r2)) and
  (model____split_fields5 = model____split_fields1)) and ((1 <= r2) and
  (r2 <= 10000))) and ((not (r2 = 10000)) and (((r2 = result3) and
  (r3 = (r2 + 1))) and (((((o3 = add(model____split_fields4, r3)) and
  ((length(o3) = (length(model____split_fields4) + 1)) and ((get(o3,
  (0 + length(o3))) = r3) and ((bool_le(length(model____split_fields4),
  length(o3)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length(model____split_fields4)))) ->
  (get(model____split_fields4, n) = get(o3, n)))))))) and ((o3 = o4) and
  (model____split_fields5 = o5))) and ((temp___3012 = o4) and
  (temp___3013 = o5))) and (((result4 = model____split_fields4) and
  (result5 = model____split_fields5)) and
  ((temp___3012 = model____split_fields6) and
  (temp___3013 = model____split_fields7))))))) ->
  (is_empty(model____split_fields7) = true)))))))))
