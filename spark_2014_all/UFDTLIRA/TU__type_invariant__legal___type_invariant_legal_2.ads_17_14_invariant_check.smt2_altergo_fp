(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type t

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t, t -> bool

logic dummy1 : t

type t__ref = { t__content : t
}

function t__ref___projection(a: t__ref) : t = (a).t__content

logic pub : int -> int

logic pub__function_guard : int, int -> prop

axiom pub__post_axiom :
  (forall x:int [pub(x)]. ((in_range1(x) and (not (x = 0))) ->
  in_range(pub(x))))

logic e_pub : int -> int

logic e_pub__function_guard : int, int -> prop

axiom e_pub__post_axiom :
  (forall x:int [e_pub(x)]. ((in_range1(x) and (not (x = 0))) ->
  in_range(e_pub(x))))

axiom e_pub__def_axiom :
  (forall x:int [e_pub(x)]. (in_range1(x) -> (e_pub(x) = 1)))

logic attr__ATTRIBUTE_ADDRESS : int

logic priv : int -> int

logic priv__function_guard : int, int -> prop

axiom priv__post_axiom :
  (forall x:int [priv(x)]. (in_range1(x) -> in_range(priv(x))))

logic e_priv : int -> int

logic e_priv__function_guard : int, int -> prop

axiom e_priv__post_axiom :
  (forall x:int [e_priv(x)]. (in_range1(x) -> in_range(e_priv(x))))

axiom e_priv__def_axiom :
  (forall x:int [e_priv(x)]. (in_range1(x) -> (e_priv(x) = 1)))

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "type_invariant_legal_2.ads", line 20, characters 0-0 *)
goal WP_parameter_def :
  (forall x:int. forall tmp:int. forall o:int. forall o1:int. forall o2:int.
  forall o3:int. forall o4:int. forall result:int. forall x1:int.
  forall result1:int. forall tmp1:int. forall result2:int. forall tmp2:int.
  forall x2:int. forall result3:int. forall tmp3:int. forall result4:int.
  forall tmp4:int. forall x3:int. forall tmp5:int. forall x4:int.
  forall tmp6:int. (in_range1(x) -> ((not (x = 0)) ->
  ((((((- 2147483648) <= 2147483647) -> in_range(tmp)) and
  ((((o = (x - 1)) and in_range1((x - 1))) and (({ int__content = result
  } = { int__content = x }) and (x1 = o))) and ((((not (x1 = 0)) and
  ((o1 = pub(x1)) and in_range(o1))) and (({ int__content = result1 } = {
  int__content = tmp }) and (tmp1 = o1))) and ((((o2 = priv(x1)) and
  in_range(o2)) and ((tmp1 = result2) and (tmp2 = o2))) and
  (in_range1(x2) and ((((not (x2 = 0)) and ((o3 = e_pub(x2)) and
  (in_range(o3) and (o3 = 1)))) and ((result3 = tmp2) and (tmp3 = o3))) and
  (((o4 = e_priv(x2)) and (in_range(o4) and (o4 = 1))) and
  ((result4 = tmp3) and (tmp4 = o4))))))))) and (((tmp4 = tmp5) and
  (x2 = x3)) and ((tmp6 = tmp4) and (x4 = x2)))) -> (not (x3 = 0))))))
