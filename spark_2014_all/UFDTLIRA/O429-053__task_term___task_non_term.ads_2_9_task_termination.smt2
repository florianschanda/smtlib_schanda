(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const a Int)
(declare-const f Int)
(declare-const tmp Int)
(declare-const temp___216 Int)
(declare-const temp___215 Int)
(declare-const temp___214 Int)
(declare-const o Int)
(declare-const tmp1 Int)
(declare-const result Int)
(declare-const a1 Int)
(declare-const result1 Int)
(declare-const f1 Int)
(declare-const a2 Int)
(declare-const f2 Int)
(declare-const tmp2 Int)
(declare-const result2 Int)
(declare-const tmp3 Int)
(declare-const result3 Int)
(declare-const f3 Int)
(declare-const result4 Int)
(declare-const a3 Int)
(declare-const a4 Int)
(declare-const f4 Int)
(declare-const tmp4 Int)
(declare-const a5 Int)
(declare-const f5 Int)
(declare-const tmp5 Int)
(declare-const a6 Int)
(declare-const f6 Int)
(declare-const tmp6 Int)
(declare-const a7 Int)
(declare-const f7 Int)
(declare-const tmp7 Int)
(define-fun tmp8 () int__ref (mk_int__ref tmp6))
(assert (not (not (and (and (= (mk_int__ref result) (mk_int__ref a)) (= a1 1)) (and (in_range1 a1) (and (and (= (mk_int__ref result1) (mk_int__ref f)) (= f1 1)) (and (in_range1 f1) (and (=> (<= (- 2147483648) 2147483647) (in_range1 tmp)) (ite (< f1 1000) (and (and (and (= temp___216 tmp) (and (= temp___215 f1) (and (= temp___214 a1) (and (and (and (and (=> (<= (- 2147483648) 2147483647) (in_range1 a2)) (=> (<= (- 2147483648) 2147483647) (in_range1 f2))) (=> (<= (- 2147483648) 2147483647) (in_range1 tmp2))) (< f2 1000)) (and (and (= tmp2 result2) (= tmp3 f2)) (and (and (and (= o (+ a2 f2)) (in_range1 (+ a2 f2))) (and (= result3 f2) (= f3 o))) (and (and (= result4 a2) (= a3 tmp3)) (not (< f3 1000))))))))) (and (and (= tmp3 tmp4) (and (= f3 f4) (= a3 a4))) (and (= tmp5 tmp3) (and (= f5 f3) (= a5 a3))))) (and (and (= tmp8 (mk_int__ref tmp4)) (and (= (mk_int__ref f6) (mk_int__ref f4)) (= (mk_int__ref a6) (mk_int__ref a4)))) (and (= tmp7 tmp5) (and (= f7 f5) (= a7 a5))))) (and (and (= tmp8 (mk_int__ref tmp)) (and (= f1 f6) (= a1 a6))) (and (= tmp7 tmp1) (and (= f7 f1) (= a7 a1)))))))))))))
(check-sat)
(exit)
