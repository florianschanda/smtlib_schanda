(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort count_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (count_type count_type) Bool)
(declare-const dummy count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(declare-fun to_rep (count_type) Int)
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__cursors__l__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields)) count_type (rec__cursors__l__cursor__node a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__cursors__l__cursor__node (us_split_fields1 a))) (to_rep (rec__cursors__l__cursor__node (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const cursors__l__cursor__node__first__bit Int)
(declare-const cursors__l__cursor__node__last__bit Int)
(declare-const cursors__l__cursor__node__position Int)
(assert (<= 0 cursors__l__cursor__node__first__bit))
(assert (< cursors__l__cursor__node__first__bit cursors__l__cursor__node__last__bit))
(assert (<= 0 cursors__l__cursor__node__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep (cursor__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__cursors__r__b Bool)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) Bool (rec__cursors__r__b a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__cursors__r__c us_rep)))))
(define-fun us_split_fields_C__projection ((a us_split_fields2)) us_rep (rec__cursors__r__c a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun cursors__r__c__pred ((a us_rep1)) Bool (= (to_int1 (rec__cursors__r__b (us_split_discrs1 a))) 1))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (rec__cursors__r__b (us_split_discrs1 a)) (rec__cursors__r__b (us_split_discrs1 b))) (=> (cursors__r__c__pred a) (= (bool_eq (rec__cursors__r__c (us_split_fields3 a)) (rec__cursors__r__c (us_split_fields3 b))) true))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const cursors__r__b__first__bit Int)
(declare-const cursors__r__b__last__bit Int)
(declare-const cursors__r__b__position Int)
(assert (<= 0 cursors__r__b__first__bit))
(assert (< cursors__r__b__first__bit cursors__r__b__last__bit))
(assert (<= 0 cursors__r__b__position))
(declare-const cursors__r__c__first__bit Int)
(declare-const cursors__r__c__last__bit Int)
(declare-const cursors__r__c__position Int)
(assert (<= 0 cursors__r__c__first__bit))
(assert (< cursors__r__c__first__bit cursors__r__c__last__bit))
(assert (<= 0 cursors__r__c__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep1)))))
(define-fun r__ref___projection ((a r__ref)) us_rep1 (r__content a))
(define-fun in_range2 ((rec__cursors__r__b1 Bool) (a us_rep1)) Bool (= rec__cursors__r__b1 (rec__cursors__r__b (us_split_discrs1 a))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const cursors__r__b__first__bit1 Int)
(declare-const cursors__r__b__last__bit1 Int)
(declare-const cursors__r__b__position1 Int)
(assert (<= 0 cursors__r__b__first__bit1))
(assert (< cursors__r__b__first__bit1 cursors__r__b__last__bit1))
(assert (<= 0 cursors__r__b__position1))
(declare-const cursors__r__c__first__bit1 Int)
(declare-const cursors__r__c__last__bit1 Int)
(declare-const cursors__r__c__position1 Int)
(assert (<= 0 cursors__r__c__first__bit1))
(assert (< cursors__r__c__first__bit1 cursors__r__c__last__bit1))
(assert (<= 0 cursors__r__c__position1))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((txS__ref (mk_txS__ref (txS__content us_rep1)))))
(define-fun txS__ref___projection ((a txS__ref)) us_rep1 (txS__content a))
(define-fun dynamic_invariant ((temp___expr_360 us_rep1) (temp___is_init_357 Bool) (temp___skip_constant_358 Bool) (temp___do_toplevel_359 Bool)) Bool (=> (not (= temp___skip_constant_358 true)) (in_range2 (of_int 0) temp___expr_360)))
(define-fun default_initial_assumption ((temp___expr_362 us_rep1) (temp___skip_top_level_363 Bool)) Bool (and (= (rec__cursors__r__b (us_split_discrs1 temp___expr_362)) (of_int 0)) (=> (cursors__r__c__pred temp___expr_362) (= (to_rep (rec__cursors__l__cursor__node (us_split_fields1 (rec__cursors__r__c (us_split_fields3 temp___expr_362))))) 0))))
(declare-const x__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant1 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 0 2147483647)) (in_range1 temp___expr_141)))
(define-fun default_initial_assumption1 ((temp___expr_195 us_rep) (temp___skip_top_level_196 Bool)) Bool (= (to_rep (rec__cursors__l__cursor__node (us_split_fields1 temp___expr_195))) 0))
(assert (not (in_range 0)))
(check-sat)
(exit)
