(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort rec_int_bad 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (rec_int_bad rec_int_bad) Bool)
(declare-const dummy rec_int_bad)
(declare-datatypes () ((rec_int_bad__ref (mk_rec_int_bad__ref (rec_int_bad__content rec_int_bad)))))
(define-fun rec_int_bad__ref___projection ((a rec_int_bad__ref)) rec_int_bad (rec_int_bad__content a))
(define-fun dynamic_invariant ((temp___expr_290 Int) (temp___is_init_287 Bool) (temp___skip_constant_288 Bool) (temp___do_toplevel_289 Bool)) Bool (and (=> (or (= temp___is_init_287 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_290)) (=> (= temp___do_toplevel_289 true) (=> (= temp___is_init_287 true) (or (and (<= (- 2147483648) temp___expr_290) (<= temp___expr_290 (- 1))) (and (<= 1 temp___expr_290) (<= temp___expr_290 2147483647)))))))
(define-fun dynamic_predicate ((temp___294 Int)) Bool (or (and (<= (- 2147483648) temp___294) (<= temp___294 (- 1))) (and (<= 1 temp___294) (<= temp___294 2147483647))))
(declare-fun to_rep (rec_int_bad) Int)
(declare-fun of_rep (Int) rec_int_bad)
(assert (forall ((x rec_int_bad)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x rec_int_bad)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const i45s Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__preds__rec_wrap_bad__x rec_int_bad)))))
(define-fun us_split_fields_X__4__projection ((a us_split_fields)) rec_int_bad (rec__preds__rec_wrap_bad__x a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__preds__rec_wrap_bad__x (us_split_fields1 a))) (to_rep (rec__preds__rec_wrap_bad__x (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const preds__rec_wrap_bad__x__first__bit Int)
(declare-const preds__rec_wrap_bad__x__last__bit Int)
(declare-const preds__rec_wrap_bad__x__position Int)
(assert (<= 0 preds__rec_wrap_bad__x__first__bit))
(assert (< preds__rec_wrap_bad__x__first__bit preds__rec_wrap_bad__x__last__bit))
(assert (<= 0 preds__rec_wrap_bad__x__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((rec_wrap_bad__ref (mk_rec_wrap_bad__ref (rec_wrap_bad__content us_rep)))))
(define-fun rec_wrap_bad__ref___projection ((a rec_wrap_bad__ref)) us_rep (rec_wrap_bad__content a))
(define-fun dynamic_invariant1 ((temp___expr_308 us_rep) (temp___is_init_305 Bool) (temp___skip_constant_306 Bool) (temp___do_toplevel_307 Bool)) Bool (=> (= temp___is_init_305 true) (let ((temp___310 (to_rep (rec__preds__rec_wrap_bad__x (us_split_fields1 temp___expr_308))))) (or (and (<= (- 2147483648) temp___310) (<= temp___310 (- 1))) (and (<= 1 temp___310) (<= temp___310 2147483647))))))
(define-fun default_initial_assumption ((temp___expr_311 us_rep) (temp___skip_top_level_312 Bool)) Bool (= (to_rep (rec__preds__rec_wrap_bad__x (us_split_fields1 temp___expr_311))) 0))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x__split_fields rec_int_bad)
(declare-const temp___387 Int)
(declare-const temp___389 rec_int_bad)
(assert (dynamic_invariant i45s true false true))
(assert (dynamic_invariant1 (mk___rep (mk___split_fields x__split_fields)) false false true))
(assert (not (in_range 0)))
(check-sat)
(exit)
