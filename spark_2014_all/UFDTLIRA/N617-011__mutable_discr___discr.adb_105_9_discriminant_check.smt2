(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__private_discr__p_with_default__c natural)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) natural (rec__private_discr__p_with_default__c a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__private_discr__p_with_default us_main_type)))))
(define-fun us_split_fields_P_With_Default__projection ((a us_split_fields)) us_main_type (rec__private_discr__p_with_default a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___5__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__private_discr__p_with_default__c (us_split_discrs1 a))) (to_rep (rec__private_discr__p_with_default__c (us_split_discrs1 b)))) (= (us_main_eq (rec__private_discr__p_with_default (us_split_fields1 a)) (rec__private_discr__p_with_default (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const private_discr__p_with_default__c__first__bit Int)
(declare-const private_discr__p_with_default__c__last__bit Int)
(declare-const private_discr__p_with_default__c__position Int)
(assert (<= 0 private_discr__p_with_default__c__first__bit))
(assert (< private_discr__p_with_default__c__first__bit private_discr__p_with_default__c__last__bit))
(assert (<= 0 private_discr__p_with_default__c__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((p_with_default__ref (mk_p_with_default__ref (p_with_default__content us_rep)))))
(define-fun p_with_default__ref___projection ((a p_with_default__ref)) us_rep (p_with_default__content a))
(define-fun default_initial_assumption ((temp___expr_166 us_rep) (temp___skip_top_level_167 Bool)) Bool (and (= (attr__constrained temp___expr_166) false) (= (to_rep (rec__private_discr__p_with_default__c (us_split_discrs1 temp___expr_166))) 0)))
(declare-fun new_with_default (Int) us_rep)
(declare-fun new_with_default__function_guard (us_rep Int) Bool)
(declare-const c Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const d__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range1 ((rec__private_discr__p_with_default__c1 Int) (a us_rep)) Bool (= rec__private_discr__p_with_default__c1 (to_rep (rec__private_discr__p_with_default__c (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const private_discr__p_with_default__c__first__bit1 Int)
(declare-const private_discr__p_with_default__c__last__bit1 Int)
(declare-const private_discr__p_with_default__c__position1 Int)
(assert (<= 0 private_discr__p_with_default__c__first__bit1))
(assert (< private_discr__p_with_default__c__first__bit1 private_discr__p_with_default__c__last__bit1))
(assert (<= 0 private_discr__p_with_default__c__position1))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((td1S__ref (mk_td1S__ref (td1S__content us_rep)))))
(define-fun td1S__ref___3__projection ((a td1S__ref)) us_rep (td1S__content a))
(define-fun dynamic_invariant1 ((temp___expr_264 us_rep) (temp___is_init_260 Bool) (temp___skip_constant_261 Bool) (temp___do_toplevel_262 Bool) (temp___do_typ_inv_263 Bool)) Bool (and (=> (not (= temp___skip_constant_261 true)) (in_range1 c temp___expr_264)) (= (attr__constrained temp___expr_264) true)))
(define-fun default_initial_assumption1 ((temp___expr_266 us_rep) (temp___skip_top_level_267 Bool)) Bool (and (= (attr__constrained temp___expr_266) true) (= (to_rep (rec__private_discr__p_with_default__c (us_split_discrs1 temp___expr_266))) c)))
(declare-const d1__split_discrs us_split_discrs)
(declare-const d1__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const d2__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const d__split_fields us_main_type)
(declare-const d__split_discrs natural)
(declare-const d2__split_discrs natural)
(declare-const discr__p2__d__assume natural)
(declare-const discr__p2__d__assume1 us_main_type)
(declare-const discr__p2__d__assume2 Bool)
(declare-const us Int)
(declare-const temp___358 natural)
(declare-const temp___3581 us_main_type)
(declare-const temp___3582 Bool)
(declare-const usq_ natural)
(declare-const usq_1 us_main_type)
(declare-const usq_2 Bool)
(declare-const temp___360 natural)
(declare-const temp___3601 us_main_type)
(declare-const temp___3602 Bool)
(declare-const temp___361 us_rep)
(declare-const result us_split_fields__ref)
(declare-const d__split_fields1 us_split_fields)
(declare-const result1 us_split_discrs__ref)
(declare-const d__split_discrs1 us_split_discrs)
(declare-const result2 us_split_fields__ref)
(declare-const d__split_fields2 us_split_fields)
(declare-const result3 us_split_discrs__ref)
(declare-const d__split_discrs2 us_split_discrs)
(define-fun temp___3583 () us_rep (mk___rep (mk___split_discrs temp___358) (mk___split_fields temp___3581) temp___3582))
(assert (in_range c))
(assert (and (= (mk___rep (mk___split_discrs discr__p2__d__assume) (mk___split_fields discr__p2__d__assume1) discr__p2__d__assume2) (new_with_default c)) (= (to_rep discr__p2__d__assume) c)))
(assert (= result (mk___split_fields__ref (mk___split_fields d__split_fields))))
(assert (= d__split_fields1 (mk___split_fields discr__p2__d__assume1)))
(assert (= result1 (mk___split_discrs__ref (mk___split_discrs d__split_discrs))))
(assert (= d__split_discrs1 (mk___split_discrs discr__p2__d__assume)))
(assert (= d__attr__constrained false))
(assert (and (= us c) (in_range c)))
(assert (and (= d1__attr__constrained true) (= (to_rep (rec__private_discr__p_with_default__c d1__split_discrs)) c)))
(assert (and (= c (to_rep (rec__private_discr__p_with_default__c d1__split_discrs))) (= d1__attr__constrained true)))
(assert (and (= d2__attr__constrained false) (= (to_rep d2__split_discrs) 0)))
(assert (not (= d__attr__constrained true)))
(assert (= d1__attr__constrained true))
(assert (and (= temp___3583 (new_with_default c)) (= (to_rep temp___358) c)))
(assert (=> (= d__attr__constrained true) (= temp___358 (rec__private_discr__p_with_default__c d__split_discrs1))))
(assert (= (mk___rep (mk___split_discrs usq_) (mk___split_fields usq_1) usq_2) temp___3583))
(assert (= usq_ temp___360))
(assert (= usq_1 temp___3601))
(assert (= d__attr__constrained temp___3602))
(assert (= result2 (mk___split_fields__ref d__split_fields1)))
(assert (= d__split_fields2 (mk___split_fields temp___3601)))
(assert (= result3 (mk___split_discrs__ref d__split_discrs1)))
(assert (= d__split_discrs2 (mk___split_discrs temp___360)))
(assert (and (= temp___361 (new_with_default 0)) (= (to_rep (rec__private_discr__p_with_default__c (us_split_discrs1 temp___361))) 0)))
(assert (= d__attr__constrained true))
(assert (not (= (rec__private_discr__p_with_default__c (us_split_discrs1 temp___361)) (rec__private_discr__p_with_default__c d__split_discrs2))))
(check-sat)
(exit)
