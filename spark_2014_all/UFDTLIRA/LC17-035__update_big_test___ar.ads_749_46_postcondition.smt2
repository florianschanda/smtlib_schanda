(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort et1 0)
(declare-fun et1qtint (et1) Int)
(assert (forall ((i et1)) (and (<= 0 (et1qtint i)) (<= (et1qtint i) 99))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (et1 et1) Bool)
(declare-const dummy et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun to_rep ((x et1)) Int (et1qtint x))
(declare-fun of_rep (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x et1)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort et2 0)
(declare-fun et2qtint (et2) Int)
(assert (forall ((i et2)) (and (<= 1 (et2qtint i)) (<= (et2qtint i) 25))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 25)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (et2 et2) Bool)
(declare-const dummy1 et2)
(declare-datatypes () ((et2__ref (mk_et2__ref (et2__content et2)))))
(define-fun et2__ref___projection ((a et2__ref)) et2 (et2__content a))
(define-fun to_rep1 ((x et2)) Int (et2qtint x))
(declare-fun of_rep1 (Int) et2)
(assert (forall ((x et2)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x et2)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ar__rec1t__f1 et1) (rec__ar__rec1t__g1 et2)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) et1 (rec__ar__rec1t__f1 a))
(define-fun us_split_fields_G1__projection ((a us_split_fields)) et2 (rec__ar__rec1t__g1 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__ar__rec1t__f1 (us_split_fields1 a))) (to_rep (rec__ar__rec1t__f1 (us_split_fields1 b)))) (= (to_rep1 (rec__ar__rec1t__g1 (us_split_fields1 a))) (to_rep1 (rec__ar__rec1t__g1 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const ar__rec1t__f1__first__bit Int)
(declare-const ar__rec1t__f1__last__bit Int)
(declare-const ar__rec1t__f1__position Int)
(assert (<= 0 ar__rec1t__f1__first__bit))
(assert (< ar__rec1t__f1__first__bit ar__rec1t__f1__last__bit))
(assert (<= 0 ar__rec1t__f1__position))
(declare-const ar__rec1t__g1__first__bit Int)
(declare-const ar__rec1t__g1__last__bit Int)
(declare-const ar__rec1t__g1__position Int)
(assert (<= 0 ar__rec1t__g1__first__bit))
(assert (< ar__rec1t__g1__first__bit ar__rec1t__g1__last__bit))
(assert (<= 0 ar__rec1t__g1__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((rec1t__ref (mk_rec1t__ref (rec1t__content us_rep)))))
(define-fun rec1t__ref___projection ((a rec1t__ref)) us_rep (rec1t__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const s us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_204 Int) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool (=> (or (= temp___is_init_200 true) (<= 0 99)) (in_range temp___expr_204)))
(define-fun dynamic_invariant1 ((temp___expr_211 Int) (temp___is_init_207 Bool) (temp___skip_constant_208 Bool) (temp___do_toplevel_209 Bool) (temp___do_typ_inv_210 Bool)) Bool (=> (or (= temp___is_init_207 true) (<= 1 25)) (in_range1 temp___expr_211)))
(declare-const rliteral et1)
(assert (= (et1qtint rliteral) 25))
(declare-const r__split_fields et1)
(declare-const r__split_fields1 et2)
(declare-const result et1)
(declare-const result1 et2)
(declare-const r__split_fields2 et1)
(declare-const r__split_fields3 et2)
(declare-const result2 et1)
(declare-const result3 et2)
(declare-const r__split_fields4 et1)
(declare-const r__split_fields5 et2)
(declare-const r__split_fields6 et1)
(declare-const r__split_fields7 et2)
(declare-const r__split_fields8 et1)
(declare-const r__split_fields9 et2)
(assert (= result r__split_fields))
(assert (= result1 r__split_fields1))
(assert (= (mk___split_fields r__split_fields2 r__split_fields3) (us_split_fields1 s)))
(assert (= result2 r__split_fields2))
(assert (= result3 r__split_fields3))
(assert (= rliteral r__split_fields4))
(assert (= r__split_fields3 r__split_fields5))
(assert (= r__split_fields6 r__split_fields4))
(assert (= r__split_fields7 r__split_fields5))
(assert (= r__split_fields8 r__split_fields4))
(assert (= r__split_fields9 r__split_fields5))
(assert (not (= (to_rep1 r__split_fields7) (to_rep1 (rec__ar__rec1t__g1 (us_split_fields1 s))))))
(check-sat)
(exit)
