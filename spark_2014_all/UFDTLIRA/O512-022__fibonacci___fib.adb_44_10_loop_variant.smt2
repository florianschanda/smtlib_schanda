(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-fun fibonacci (Int) Int)
(declare-fun fibonacci__function_guard (Int Int) Bool)
(assert (forall ((n Int)) (! (=> (and (dynamic_invariant n true true true) (<= n 23)) (dynamic_invariant (fibonacci n) true false true)) :pattern ((fibonacci n)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const n1 Int)
(declare-const n2 Int)
(declare-const l1 Int)
(declare-const l2 Int)
(declare-const a1 Int)
(declare-const a2 Int)
(declare-const b1 Int)
(declare-const b2 Int)
(declare-const i Int)
(declare-const copy_n1 Int)
(declare-const copy_n2 Int)
(declare-const temp___165 Int)
(declare-const temp___164 Int)
(declare-const temp___163 Int)
(declare-const temp___162 Int)
(declare-const temp___166 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const n11 Int)
(declare-const result Int)
(declare-const copy_n11 Int)
(declare-const result1 Int)
(declare-const copy_n21 Int)
(declare-const result2 Int)
(declare-const a11 Int)
(declare-const result3 Int)
(declare-const a21 Int)
(declare-const result4 Int)
(declare-const b11 Int)
(declare-const result5 Int)
(declare-const b21 Int)
(declare-const result6 Int)
(declare-const i1 Int)
(declare-const n12 Int)
(declare-const a12 Int)
(declare-const b12 Int)
(declare-const i2 Int)
(declare-const temp___1661 Int)
(declare-const result7 Int)
(declare-const temp___1662 Int)
(declare-const result8 int__ref)
(declare-const a13 Int)
(declare-const result9 int__ref)
(declare-const b13 Int)
(declare-const result10 int__ref)
(declare-const n13 Int)
(declare-const result11 int__ref)
(declare-const i3 Int)
(declare-const n14 int__ref)
(declare-const a14 int__ref)
(declare-const b14 int__ref)
(declare-const i4 int__ref)
(declare-const n15 Int)
(declare-const a15 Int)
(declare-const b15 Int)
(declare-const i5 Int)
(declare-const n16 int__ref)
(declare-const a16 int__ref)
(declare-const b16 int__ref)
(declare-const i6 int__ref)
(declare-const n17 Int)
(declare-const a17 Int)
(declare-const b17 Int)
(declare-const i7 Int)
(declare-const result12 int__ref)
(declare-const i8 Int)
(declare-const n21 Int)
(declare-const a22 Int)
(declare-const b22 Int)
(declare-const i9 Int)
(declare-const temp___171 Int)
(declare-const result13 int__ref)
(declare-const temp___1711 Int)
(declare-const result14 int__ref)
(declare-const a23 Int)
(declare-const result15 int__ref)
(declare-const b23 Int)
(declare-const result16 int__ref)
(declare-const n22 Int)
(declare-const result17 int__ref)
(declare-const i10 Int)
(assert (in_range1 n1))
(assert (in_range1 n2))
(assert (in_range1 l1))
(assert (in_range1 l2))
(assert (and (= n1 n2) (and (= l1 l2) (<= n1 23))))
(assert (=> (<= 0 2147483647) (in_range1 a1)))
(assert (=> (<= 0 2147483647) (in_range1 a2)))
(assert (=> (<= 0 2147483647) (in_range1 b1)))
(assert (=> (<= 0 2147483647) (in_range1 b2)))
(assert (=> (<= 0 2147483647) (in_range1 i)))
(assert (=> (<= 0 2147483647) (in_range1 copy_n1)))
(assert (=> (<= 0 2147483647) (in_range1 copy_n2)))
(assert (= (mk_int__ref result) (mk_int__ref copy_n1)))
(assert (= copy_n11 n1))
(assert (= (mk_int__ref result1) (mk_int__ref copy_n2)))
(assert (= copy_n21 n2))
(assert (= (mk_int__ref result2) (mk_int__ref a1)))
(assert (= a11 1))
(assert (= (mk_int__ref result3) (mk_int__ref a2)))
(assert (= a21 1))
(assert (= (mk_int__ref result4) (mk_int__ref b1)))
(assert (= b11 1))
(assert (= (mk_int__ref result5) (mk_int__ref b2)))
(assert (= b21 1))
(assert (= (mk_int__ref result6) (mk_int__ref i)))
(assert (= i1 2))
(assert (=> (< 2 n1) (= temp___165 i1)))
(assert (=> (< 2 n1) (= temp___164 b11)))
(assert (=> (< 2 n1) (= temp___163 n1)))
(assert (=> (< 2 n1) (= temp___162 a11)))
(assert (=> (< 2 n1) (= 0 temp___166)))
(assert (=> (< 2 n1) (and (and (and (= a12 (fibonacci i2)) (= b12 (fibonacci (- i2 1)))) (<= i2 23)) (= (- (+ n12 i2) 2) copy_n11))))
(assert (=> (< 2 n1) (and (and (and (=> (<= 0 2147483647) (in_range1 a12)) (in_range1 n12)) (=> (<= 0 2147483647) (in_range1 b12))) (=> (<= 0 2147483647) (in_range1 i2)))))
(assert (=> (< 2 n1) (= temp___1661 result7)))
(assert (=> (< 2 n1) (= temp___1662 n12)))
(assert (=> (< 2 n1) (and (= o (+ a12 b12)) (in_range (+ a12 b12)))))
(assert (=> (< 2 n1) (= result8 (mk_int__ref a12))))
(assert (=> (< 2 n1) (= a13 o)))
(assert (=> (< 2 n1) (and (= o1 (- a13 b12)) (in_range (- a13 b12)))))
(assert (=> (< 2 n1) (and (= o2 o1) (in_range1 o1))))
(assert (=> (< 2 n1) (= result9 (mk_int__ref b12))))
(assert (=> (< 2 n1) (= b13 o2)))
(assert (=> (< 2 n1) (and (= o3 (- n12 1)) (in_range1 (- n12 1)))))
(assert (=> (< 2 n1) (= result10 (mk_int__ref n12))))
(assert (=> (< 2 n1) (= n13 o3)))
(assert (=> (< 2 n1) (and (= o4 (+ i2 1)) (in_range (+ i2 1)))))
(assert (=> (< 2 n1) (= result11 (mk_int__ref i2))))
(assert (=> (< 2 n1) (= i3 o4)))
(assert (=> (< 2 n1) (not (< 2 n13))))
(assert (=> (< 2 n1) (= i4 (mk_int__ref i3))))
(assert (=> (< 2 n1) (= b14 (mk_int__ref b13))))
(assert (=> (< 2 n1) (= a14 (mk_int__ref a13))))
(assert (=> (< 2 n1) (= n14 (mk_int__ref n13))))
(assert (=> (< 2 n1) (= i5 i3)))
(assert (=> (< 2 n1) (= b15 b13)))
(assert (=> (< 2 n1) (= a15 a13)))
(assert (=> (< 2 n1) (= n15 n13)))
(assert (=> (< 2 n1) (= i6 i4)))
(assert (=> (< 2 n1) (= b16 b14)))
(assert (=> (< 2 n1) (= a16 a14)))
(assert (=> (< 2 n1) (= n16 n14)))
(assert (=> (< 2 n1) (= i7 i5)))
(assert (=> (< 2 n1) (= b17 b15)))
(assert (=> (< 2 n1) (= a17 a15)))
(assert (=> (< 2 n1) (= n17 n15)))
(assert (=> (not (< 2 n1)) (= i6 (mk_int__ref i1))))
(assert (=> (not (< 2 n1)) (= b16 (mk_int__ref b11))))
(assert (=> (not (< 2 n1)) (= a16 (mk_int__ref a11))))
(assert (=> (not (< 2 n1)) (= n16 (mk_int__ref n1))))
(assert (=> (not (< 2 n1)) (= i7 i1)))
(assert (=> (not (< 2 n1)) (= b17 b11)))
(assert (=> (not (< 2 n1)) (= a17 a11)))
(assert (=> (not (< 2 n1)) (= n17 n11)))
(assert (= result12 i6))
(assert (= i8 2))
(assert (< 2 n2))
(assert (and (and (and (= a22 (fibonacci i9)) (= b22 (fibonacci (- i9 1)))) (<= i9 23)) (= (- (+ n21 i9) 2) copy_n21)))
(assert (and (and (and (=> (<= 0 2147483647) (in_range1 a22)) (in_range1 n21)) (=> (<= 0 2147483647) (in_range1 b22))) (=> (<= 0 2147483647) (in_range1 i9))))
(assert (= result13 (mk_int__ref temp___171)))
(assert (= temp___1711 n21))
(assert (and (= o5 (+ a22 b22)) (in_range (+ a22 b22))))
(assert (= result14 (mk_int__ref a22)))
(assert (= a23 o5))
(assert (and (= o6 (- a23 b22)) (in_range (- a23 b22))))
(assert (and (= o7 o6) (in_range1 o6)))
(assert (= result15 (mk_int__ref b22)))
(assert (= b23 o7))
(assert (and (= o8 (- n21 1)) (in_range1 (- n21 1))))
(assert (= result16 (mk_int__ref n21)))
(assert (= n22 o8))
(assert (and (= o9 (+ i9 1)) (in_range (+ i9 1))))
(assert (= result17 (mk_int__ref i9)))
(assert (= i10 o9))
(assert (< 2 n22))
(assert (not (< n22 temp___1711)))
(check-sat)
(exit)
