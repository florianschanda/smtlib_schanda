(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort sub_int_ok 0)
(declare-fun sub_int_okqtint (sub_int_ok) Int)
(assert (forall ((i sub_int_ok)) (and (<= (- 2147483648) (sub_int_okqtint i)) (<= (sub_int_okqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (sub_int_ok sub_int_ok) Bool)
(declare-const dummy sub_int_ok)
(declare-datatypes () ((sub_int_ok__ref (mk_sub_int_ok__ref (sub_int_ok__content sub_int_ok)))))
(define-fun sub_int_ok__ref___projection ((a sub_int_ok__ref)) sub_int_ok (sub_int_ok__content a))
(define-fun dynamic_invariant ((temp___expr_193 Int) (temp___is_init_189 Bool) (temp___skip_constant_190 Bool) (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool (and (=> (or (= temp___is_init_189 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_193)) (=> (= temp___do_toplevel_191 true) (=> (= temp___is_init_189 true) (or (and (<= (- 2147483648) temp___expr_193) (<= temp___expr_193 (- 1))) (and (<= 1 temp___expr_193) (<= temp___expr_193 2147483647)))))))
(define-fun dynamic_predicate ((temp___197 Int)) Bool (or (and (<= (- 2147483648) temp___197) (<= temp___197 (- 1))) (and (<= 1 temp___197) (<= temp___197 2147483647))))
(define-fun to_rep ((x sub_int_ok)) Int (sub_int_okqtint x))
(declare-fun of_rep (Int) sub_int_ok)
(assert (forall ((x sub_int_ok)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x sub_int_ok)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const i11s Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x Int)
(declare-const temp___365 sub_int_ok)
(assert (dynamic_invariant i11s true false true true))
(assert (dynamic_invariant x false false true true))
(assert (= (to_rep temp___365) 1))
(define-fun temp___367 () Int (to_rep temp___365))
(assert (not (or (and (<= (- 2147483648) temp___367) (<= temp___367 (- 1))) (and (<= 1 temp___367) (<= temp___367 2147483647)))))
(check-sat)
(exit)
