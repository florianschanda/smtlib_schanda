(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq1 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type time__ref = { time__content : us_rep
}

function time__ref___projection(a: time__ref) : us_rep = (a).time__content

type us_split_fields = { rec__traffic_lights__lights_state__vehicles_green :
bool; rec__traffic_lights__lights_state__vehicles_yellow : bool;
rec__traffic_lights__lights_state__vehicles_red : bool;
rec__traffic_lights__lights_state__pedestrians_green : bool;
rec__traffic_lights__lights_state__pedestrians_red : bool
}

function us_split_fields_Vehicles_Green__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__vehicles_green

function us_split_fields_Vehicles_Yellow__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__vehicles_yellow

function us_split_fields_Vehicles_Red__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__vehicles_red

function us_split_fields_Pedestrians_Green__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__pedestrians_green

function us_split_fields_Pedestrians_Red__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__pedestrians_red

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___27__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___28__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep1, us_rep1 -> bool

axiom bool_eq_def1 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq2(a, b)].
  (((((((((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_green = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_green) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_yellow = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_yellow)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_red = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_red)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_green = ((b).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_green)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_red = ((b).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_red)) ->
  (bool_eq2(a, b) = true)) and
  ((not (((((((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_green = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_green) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_yellow = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_yellow)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_red = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_red)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_green = ((b).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_green)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_red = ((b).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_red))) ->
  (bool_eq2(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:bool. forall a2:bool. forall a3:bool.
  forall a4:bool. (0 <= object__size1({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = a;
  rec__traffic_lights__lights_state__vehicles_yellow = a1;
  rec__traffic_lights__lights_state__vehicles_red = a2;
  rec__traffic_lights__lights_state__pedestrians_green = a3;
  rec__traffic_lights__lights_state__pedestrians_red = a4 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:bool. forall a2:bool. forall a3:bool.
  forall a4:bool. (0 <= object__alignment1({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = a;
  rec__traffic_lights__lights_state__vehicles_yellow = a1;
  rec__traffic_lights__lights_state__vehicles_red = a2;
  rec__traffic_lights__lights_state__pedestrians_green = a3;
  rec__traffic_lights__lights_state__pedestrians_red = a4 } })))

logic traffic_lights__lights_state__vehicles_green__first__bit : int

logic traffic_lights__lights_state__vehicles_green__last__bit : int

logic traffic_lights__lights_state__vehicles_green__position : int

axiom traffic_lights__lights_state__vehicles_green__first__bit_axiom :
  (0 <= traffic_lights__lights_state__vehicles_green__first__bit)

axiom traffic_lights__lights_state__vehicles_green__last__bit_axiom :
  (traffic_lights__lights_state__vehicles_green__first__bit <  traffic_lights__lights_state__vehicles_green__last__bit)

axiom traffic_lights__lights_state__vehicles_green__position_axiom :
  (0 <= traffic_lights__lights_state__vehicles_green__position)

logic traffic_lights__lights_state__vehicles_yellow__first__bit : int

logic traffic_lights__lights_state__vehicles_yellow__last__bit : int

logic traffic_lights__lights_state__vehicles_yellow__position : int

axiom traffic_lights__lights_state__vehicles_yellow__first__bit_axiom :
  (0 <= traffic_lights__lights_state__vehicles_yellow__first__bit)

axiom traffic_lights__lights_state__vehicles_yellow__last__bit_axiom :
  (traffic_lights__lights_state__vehicles_yellow__first__bit <  traffic_lights__lights_state__vehicles_yellow__last__bit)

axiom traffic_lights__lights_state__vehicles_yellow__position_axiom :
  (0 <= traffic_lights__lights_state__vehicles_yellow__position)

logic traffic_lights__lights_state__vehicles_red__first__bit : int

logic traffic_lights__lights_state__vehicles_red__last__bit : int

logic traffic_lights__lights_state__vehicles_red__position : int

axiom traffic_lights__lights_state__vehicles_red__first__bit_axiom :
  (0 <= traffic_lights__lights_state__vehicles_red__first__bit)

axiom traffic_lights__lights_state__vehicles_red__last__bit_axiom :
  (traffic_lights__lights_state__vehicles_red__first__bit <  traffic_lights__lights_state__vehicles_red__last__bit)

axiom traffic_lights__lights_state__vehicles_red__position_axiom :
  (0 <= traffic_lights__lights_state__vehicles_red__position)

logic traffic_lights__lights_state__pedestrians_green__first__bit : int

logic traffic_lights__lights_state__pedestrians_green__last__bit : int

logic traffic_lights__lights_state__pedestrians_green__position : int

axiom traffic_lights__lights_state__pedestrians_green__first__bit_axiom :
  (0 <= traffic_lights__lights_state__pedestrians_green__first__bit)

axiom traffic_lights__lights_state__pedestrians_green__last__bit_axiom :
  (traffic_lights__lights_state__pedestrians_green__first__bit <  traffic_lights__lights_state__pedestrians_green__last__bit)

axiom traffic_lights__lights_state__pedestrians_green__position_axiom :
  (0 <= traffic_lights__lights_state__pedestrians_green__position)

logic traffic_lights__lights_state__pedestrians_red__first__bit : int

logic traffic_lights__lights_state__pedestrians_red__last__bit : int

logic traffic_lights__lights_state__pedestrians_red__position : int

axiom traffic_lights__lights_state__pedestrians_red__first__bit_axiom :
  (0 <= traffic_lights__lights_state__pedestrians_red__first__bit)

axiom traffic_lights__lights_state__pedestrians_red__last__bit_axiom :
  (traffic_lights__lights_state__pedestrians_red__first__bit <  traffic_lights__lights_state__pedestrians_red__last__bit)

axiom traffic_lights__lights_state__pedestrians_red__position_axiom :
  (0 <= traffic_lights__lights_state__pedestrians_red__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy1 : bool

logic dummy2 : bool

logic dummy3 : bool

logic dummy4 : bool

logic dummy5 : bool

type lights_state__ref = { lights_state__content : us_rep1
}

function lights_state__ref___projection(a: lights_state__ref) : us_rep1 =
  (a).lights_state__content

logic valid_combination : us_rep1 -> bool

logic valid_combination__function_guard : bool, us_rep1 -> prop

axiom valid_combination__post_axiom : true

axiom valid_combination__def_axiom :
  (forall ls:bool. forall ls1:bool. forall ls2:bool. forall ls3:bool.
  forall ls4:bool [valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = ls;
  rec__traffic_lights__lights_state__vehicles_yellow = ls1;
  rec__traffic_lights__lights_state__vehicles_red = ls2;
  rec__traffic_lights__lights_state__pedestrians_green = ls3;
  rec__traffic_lights__lights_state__pedestrians_red = ls4 } })].
  (((valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = ls;
  rec__traffic_lights__lights_state__vehicles_yellow = ls1;
  rec__traffic_lights__lights_state__vehicles_red = ls2;
  rec__traffic_lights__lights_state__pedestrians_green = ls3;
  rec__traffic_lights__lights_state__pedestrians_red = ls4 } }) = true) ->
  (((ls = true) -> ((((not (ls1 = true)) and (not (ls2 = true))) and
  (not (ls3 = true))) and (ls4 = true))) and ((not (ls = true)) ->
  (((ls3 = true) -> ((((not (ls = true)) and (not (ls1 = true))) and
  (ls2 = true)) and (not (ls4 = true)))) and ((not (ls3 = true)) ->
  ((not (ls3 = true)) and (ls4 = true))))))) and ((((ls = true) and
  ((((not (ls1 = true)) and (not (ls2 = true))) and (not (ls3 = true))) and
  (ls4 = true))) or ((not (ls = true)) and (((ls3 = true) and
  ((((not (ls = true)) and (not (ls1 = true))) and (ls2 = true)) and
  (not (ls4 = true)))) or ((not (ls3 = true)) and ((not (ls3 = true)) and
  (ls4 = true)))))) -> (valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = ls;
  rec__traffic_lights__lights_state__vehicles_yellow = ls1;
  rec__traffic_lights__lights_state__vehicles_red = ls2;
  rec__traffic_lights__lights_state__pedestrians_green = ls3;
  rec__traffic_lights__lights_state__pedestrians_red = ls4 } }) = true))))

type valid_lights_state__ref = { valid_lights_state__content : us_rep1
}

function valid_lights_state__ref___projection(a: valid_lights_state__ref) : us_rep1 =
  (a).valid_lights_state__content

type us_split_fields2 = {
rec__traffic_lights__traffic_lightT__last_state_change : us_rep;
rec__traffic_lights__traffic_lightT__change_state : bool;
rec__traffic_lights__traffic_lightT__lights : us_rep1
}

function us_split_fields_Last_State_Change__projection(a: us_split_fields2) : us_rep =
  (a).rec__traffic_lights__traffic_lightT__last_state_change

function us_split_fields_Change_State__projection(a: us_split_fields2) : bool =
  (a).rec__traffic_lights__traffic_lightT__change_state

function us_split_fields_Lights__projection(a: us_split_fields2) : us_rep1 =
  (a).rec__traffic_lights__traffic_lightT__lights

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___28__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___29__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_rep. forall a1:bool. forall a2:bool. forall a3:bool.
  forall a4:bool. forall a5:bool. forall a6:bool. (0 <= object__size2({
  us_split_fields3 = {
  rec__traffic_lights__traffic_lightT__last_state_change = a;
  rec__traffic_lights__traffic_lightT__change_state = a1;
  rec__traffic_lights__traffic_lightT__lights = { us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = a2;
  rec__traffic_lights__lights_state__vehicles_yellow = a3;
  rec__traffic_lights__lights_state__vehicles_red = a4;
  rec__traffic_lights__lights_state__pedestrians_green = a5;
  rec__traffic_lights__lights_state__pedestrians_red = a6 } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep. forall a1:bool. forall a2:bool. forall a3:bool.
  forall a4:bool. forall a5:bool. forall a6:bool. (0 <= object__alignment2({
  us_split_fields3 = {
  rec__traffic_lights__traffic_lightT__last_state_change = a;
  rec__traffic_lights__traffic_lightT__change_state = a1;
  rec__traffic_lights__traffic_lightT__lights = { us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = a2;
  rec__traffic_lights__lights_state__vehicles_yellow = a3;
  rec__traffic_lights__lights_state__vehicles_red = a4;
  rec__traffic_lights__lights_state__pedestrians_green = a5;
  rec__traffic_lights__lights_state__pedestrians_red = a6 } } } })))

logic traffic_lights__traffic_lightT__last_state_change__first__bit : int

logic traffic_lights__traffic_lightT__last_state_change__last__bit : int

logic traffic_lights__traffic_lightT__last_state_change__position : int

axiom traffic_lights__traffic_lightT__last_state_change__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__last_state_change__first__bit)

axiom traffic_lights__traffic_lightT__last_state_change__last__bit_axiom :
  (traffic_lights__traffic_lightT__last_state_change__first__bit <  traffic_lights__traffic_lightT__last_state_change__last__bit)

axiom traffic_lights__traffic_lightT__last_state_change__position_axiom :
  (0 <= traffic_lights__traffic_lightT__last_state_change__position)

logic traffic_lights__traffic_lightT__change_state__first__bit : int

logic traffic_lights__traffic_lightT__change_state__last__bit : int

logic traffic_lights__traffic_lightT__change_state__position : int

axiom traffic_lights__traffic_lightT__change_state__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__change_state__first__bit)

axiom traffic_lights__traffic_lightT__change_state__last__bit_axiom :
  (traffic_lights__traffic_lightT__change_state__first__bit <  traffic_lights__traffic_lightT__change_state__last__bit)

axiom traffic_lights__traffic_lightT__change_state__position_axiom :
  (0 <= traffic_lights__traffic_lightT__change_state__position)

logic traffic_lights__traffic_lightT__lights__first__bit : int

logic traffic_lights__traffic_lightT__lights__last__bit : int

logic traffic_lights__traffic_lightT__lights__position : int

axiom traffic_lights__traffic_lightT__lights__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__lights__first__bit)

axiom traffic_lights__traffic_lightT__lights__last__bit_axiom :
  (traffic_lights__traffic_lightT__lights__first__bit <  traffic_lights__traffic_lightT__lights__last__bit)

axiom traffic_lights__traffic_lightT__lights__position_axiom :
  (0 <= traffic_lights__traffic_lightT__lights__position)

logic user_eq2 : us_rep2, us_rep2 -> bool

type traffic_lightT__ref = { traffic_lightT__content : us_rep2
}

function traffic_lightT__ref___projection(a: traffic_lightT__ref) : us_rep2 =
  (a).traffic_lightT__content

logic time_first : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic ls__split_fields : bool

logic ls__split_fields1 : bool

logic ls__split_fields2 : bool

logic ls__split_fields3 : bool

logic ls__split_fields4 : bool

logic self__ : bool

logic self__1 : bool

logic self__2 : bool

logic self__3 : bool

logic self__4 : bool

logic self__5 : bool

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic ls__split_fields5 : bool

logic ls__split_fields6 : bool

logic ls__split_fields7 : bool

logic ls__split_fields8 : bool

logic ls__split_fields9 : bool

logic result5 : bool

logic result6 : bool

logic result7 : bool

logic result8 : bool

logic result9 : bool

logic ls__split_fields10 : bool

logic ls__split_fields11 : bool

logic ls__split_fields12 : bool

logic ls__split_fields13 : bool

logic ls__split_fields14 : bool

logic result10 : bool

logic result11 : bool

logic result12 : bool

logic result13 : bool

logic result14 : bool

logic ls__split_fields15 : bool

logic ls__split_fields16 : bool

logic ls__split_fields17 : bool

logic ls__split_fields18 : bool

logic ls__split_fields19 : bool

logic result15 : bool

logic result16 : bool

logic result17 : bool

logic result18 : bool

logic result19 : bool

logic ls__split_fields20 : bool

logic ls__split_fields21 : bool

logic ls__split_fields22 : bool

logic ls__split_fields23 : bool

logic ls__split_fields24 : bool

logic result20 : bool

logic result21 : bool

logic result22 : bool

logic result23 : bool

logic result24 : bool

logic ls__split_fields25 : bool

logic ls__split_fields26 : bool

logic ls__split_fields27 : bool

logic ls__split_fields28 : bool

logic ls__split_fields29 : bool

logic result25 : bool

logic result26 : bool

logic result27 : bool

logic result28 : bool

logic result29 : bool

logic ls__split_fields30 : bool

logic ls__split_fields31 : bool

logic ls__split_fields32 : bool

logic ls__split_fields33 : bool

logic ls__split_fields34 : bool

logic result30 : bool

logic result31 : bool

logic result32 : bool

logic result33 : bool

logic result34 : bool

logic ls__split_fields35 : bool

logic ls__split_fields36 : bool

logic ls__split_fields37 : bool

logic ls__split_fields38 : bool

logic ls__split_fields39 : bool

logic result35 : bool

logic result36 : bool

logic result37 : bool

logic result38 : bool

logic result39 : bool

logic ls__split_fields40 : bool

logic ls__split_fields41 : bool

logic ls__split_fields42 : bool

logic ls__split_fields43 : bool

logic ls__split_fields44 : bool

logic result40 : bool

logic result41 : bool

logic result42 : bool

logic result43 : bool

logic result44 : bool

logic ls__split_fields45 : bool

logic ls__split_fields46 : bool

logic ls__split_fields47 : bool

logic ls__split_fields48 : bool

logic ls__split_fields49 : bool

logic result45 : bool

logic result46 : bool

logic result47 : bool

logic result48 : bool

logic result49 : bool

logic ls__split_fields50 : bool

logic ls__split_fields51 : bool

logic ls__split_fields52 : bool

logic ls__split_fields53 : bool

logic ls__split_fields54 : bool

logic result50 : bool

logic result51 : bool

logic result52 : bool

logic result53 : bool

logic result54 : bool

logic ls__split_fields55 : bool

logic ls__split_fields56 : bool

logic ls__split_fields57 : bool

logic ls__split_fields58 : bool

logic ls__split_fields59 : bool

logic result55 : bool

logic result56 : bool

logic result57 : bool

logic result58 : bool

logic result59 : bool

logic ls__split_fields60 : bool

logic ls__split_fields61 : bool

logic ls__split_fields62 : bool

logic ls__split_fields63 : bool

logic ls__split_fields64 : bool

logic result60 : bool

logic result61 : bool

logic result62 : bool

logic result63 : bool

logic result64 : bool

logic ls__split_fields65 : bool

logic ls__split_fields66 : bool

logic ls__split_fields67 : bool

logic ls__split_fields68 : bool

logic ls__split_fields69 : bool

axiom H : (valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = self__1;
  rec__traffic_lights__lights_state__vehicles_yellow = self__2;
  rec__traffic_lights__lights_state__vehicles_red = self__3;
  rec__traffic_lights__lights_state__pedestrians_green = self__4;
  rec__traffic_lights__lights_state__pedestrians_red = self__5 } }) = true)

axiom H1 : (self__ = true)

axiom H2 : (result = ls__split_fields)

axiom H3 : (result1 = ls__split_fields1)

axiom H4 : (result2 = ls__split_fields2)

axiom H5 : (result3 = ls__split_fields3)

axiom H6 : (result4 = ls__split_fields4)

axiom H7 : (self__1 = ls__split_fields5)

axiom H8 : (self__2 = ls__split_fields6)

axiom H9 : (self__3 = ls__split_fields7)

axiom H10 : (self__4 = ls__split_fields8)

axiom H11 : (self__5 = ls__split_fields9)

axiom H12 : (valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = self__1;
  rec__traffic_lights__lights_state__vehicles_yellow = self__2;
  rec__traffic_lights__lights_state__vehicles_red = self__3;
  rec__traffic_lights__lights_state__pedestrians_green = self__4;
  rec__traffic_lights__lights_state__pedestrians_red = self__5 } }) = true)

axiom H13 : ((ls__split_fields5 = true) -> (result5 = ls__split_fields5))

axiom H14 : ((ls__split_fields5 = true) -> (result6 = ls__split_fields6))

axiom H15 : ((ls__split_fields5 = true) -> (result7 = ls__split_fields7))

axiom H16 : ((ls__split_fields5 = true) -> (result8 = ls__split_fields8))

axiom H17 : ((ls__split_fields5 = true) -> (result9 = ls__split_fields9))

axiom H18 : ((ls__split_fields5 = true) -> (of_int(0) = ls__split_fields10))

axiom H19 : ((ls__split_fields5 = true) ->
  (ls__split_fields6 = ls__split_fields11))

axiom H20 : ((ls__split_fields5 = true) ->
  (ls__split_fields7 = ls__split_fields12))

axiom H21 : ((ls__split_fields5 = true) ->
  (ls__split_fields8 = ls__split_fields13))

axiom H22 : ((ls__split_fields5 = true) ->
  (ls__split_fields9 = ls__split_fields14))

axiom H23 : ((ls__split_fields5 = true) -> (result10 = ls__split_fields10))

axiom H24 : ((ls__split_fields5 = true) -> (result11 = ls__split_fields11))

axiom H25 : ((ls__split_fields5 = true) -> (result12 = ls__split_fields12))

axiom H26 : ((ls__split_fields5 = true) -> (result13 = ls__split_fields13))

axiom H27 : ((ls__split_fields5 = true) -> (result14 = ls__split_fields14))

axiom H28 : ((ls__split_fields5 = true) ->
  (ls__split_fields10 = ls__split_fields15))

axiom H29 : ((ls__split_fields5 = true) -> (of_int(1) = ls__split_fields16))

axiom H30 : ((ls__split_fields5 = true) ->
  (ls__split_fields12 = ls__split_fields17))

axiom H31 : ((ls__split_fields5 = true) ->
  (ls__split_fields13 = ls__split_fields18))

axiom H32 : ((ls__split_fields5 = true) ->
  (ls__split_fields14 = ls__split_fields19))

axiom H33 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result15 = ls__split_fields5)))

axiom H34 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result16 = ls__split_fields6)))

axiom H35 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result17 = ls__split_fields7)))

axiom H36 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result18 = ls__split_fields8)))

axiom H37 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result19 = ls__split_fields9)))

axiom H38 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (ls__split_fields5 = ls__split_fields20)))

axiom H39 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (of_int(0) = ls__split_fields21)))

axiom H40 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (ls__split_fields7 = ls__split_fields22)))

axiom H41 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (ls__split_fields8 = ls__split_fields23)))

axiom H42 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (ls__split_fields9 = ls__split_fields24)))

axiom H43 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result20 = ls__split_fields20)))

axiom H44 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result21 = ls__split_fields21)))

axiom H45 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result22 = ls__split_fields22)))

axiom H46 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result23 = ls__split_fields23)))

axiom H47 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  (result24 = ls__split_fields24)))

axiom H48 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  ((ls__split_fields25 = ls__split_fields20) and
  ((ls__split_fields26 = ls__split_fields21) and
  ((ls__split_fields27 = of_int(1)) and
  ((ls__split_fields28 = ls__split_fields23) and
  (ls__split_fields29 = ls__split_fields24)))))))

axiom H49 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  ((result25 = ls__split_fields25) and ((result26 = ls__split_fields26) and
  ((result27 = ls__split_fields27) and ((result28 = ls__split_fields28) and
  (result29 = ls__split_fields29)))))))

axiom H50 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  ((ls__split_fields30 = ls__split_fields25) and
  ((ls__split_fields31 = ls__split_fields26) and
  ((ls__split_fields32 = ls__split_fields27) and
  ((ls__split_fields33 = of_int(1)) and
  (ls__split_fields34 = ls__split_fields29)))))))

axiom H51 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  ((result30 = ls__split_fields30) and ((result31 = ls__split_fields31) and
  ((result32 = ls__split_fields32) and ((result33 = ls__split_fields33) and
  (result34 = ls__split_fields34)))))))

axiom H52 : ((not (ls__split_fields5 = true)) ->
  (((ls__split_fields6 = true) and (not (ls__split_fields7 = true))) ->
  ((ls__split_fields35 = ls__split_fields30) and
  ((ls__split_fields36 = ls__split_fields31) and
  ((ls__split_fields37 = ls__split_fields32) and
  ((ls__split_fields38 = ls__split_fields33) and
  (ls__split_fields39 = of_int(0))))))))

axiom H53 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) -> (((ls__split_fields7 = true) and
  (not (ls__split_fields6 = true))) -> ((result35 = ls__split_fields5) and
  ((result36 = ls__split_fields6) and ((result37 = ls__split_fields7) and
  ((result38 = ls__split_fields8) and (result39 = ls__split_fields9))))))))

axiom H54 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) -> (((ls__split_fields7 = true) and
  (not (ls__split_fields6 = true))) ->
  ((ls__split_fields40 = ls__split_fields5) and
  ((ls__split_fields41 = of_int(1)) and
  ((ls__split_fields42 = ls__split_fields7) and
  ((ls__split_fields43 = ls__split_fields8) and
  (ls__split_fields44 = ls__split_fields9))))))))

axiom H55 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) -> (((ls__split_fields7 = true) and
  (not (ls__split_fields6 = true))) -> ((result40 = ls__split_fields40) and
  ((result41 = ls__split_fields41) and ((result42 = ls__split_fields42) and
  ((result43 = ls__split_fields43) and (result44 = ls__split_fields44))))))))

axiom H56 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) -> (((ls__split_fields7 = true) and
  (not (ls__split_fields6 = true))) ->
  ((ls__split_fields45 = ls__split_fields40) and
  ((ls__split_fields46 = ls__split_fields41) and
  ((ls__split_fields47 = ls__split_fields42) and
  ((ls__split_fields48 = of_int(0)) and
  (ls__split_fields49 = ls__split_fields44))))))))

axiom H57 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) -> (((ls__split_fields7 = true) and
  (not (ls__split_fields6 = true))) -> ((result45 = ls__split_fields45) and
  ((result46 = ls__split_fields46) and ((result47 = ls__split_fields47) and
  ((result48 = ls__split_fields48) and (result49 = ls__split_fields49))))))))

axiom H58 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) -> (((ls__split_fields7 = true) and
  (not (ls__split_fields6 = true))) ->
  ((ls__split_fields50 = ls__split_fields45) and
  ((ls__split_fields51 = ls__split_fields46) and
  ((ls__split_fields52 = ls__split_fields47) and
  ((ls__split_fields53 = ls__split_fields48) and
  (ls__split_fields54 = of_int(1)))))))))

axiom H59 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((not (((ls__split_fields7 = true) -> (not (ls__split_fields6 = true))) and
  (not (ls__split_fields7 = false)))) -> ((match_bool(ls__split_fields7,
  ls__split_fields6, false) = true) -> ((result50 = ls__split_fields5) and
  ((result51 = ls__split_fields6) and ((result52 = ls__split_fields7) and
  ((result53 = ls__split_fields8) and (result54 = ls__split_fields9)))))))))

axiom H60 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((not (((ls__split_fields7 = true) -> (not (ls__split_fields6 = true))) and
  (not (ls__split_fields7 = false)))) -> ((match_bool(ls__split_fields7,
  ls__split_fields6, false) = true) -> ((ls__split_fields55 = of_int(1)) and
  ((ls__split_fields56 = ls__split_fields6) and
  ((ls__split_fields57 = ls__split_fields7) and
  ((ls__split_fields58 = ls__split_fields8) and
  (ls__split_fields59 = ls__split_fields9)))))))))

axiom H61 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((not (((ls__split_fields7 = true) -> (not (ls__split_fields6 = true))) and
  (not (ls__split_fields7 = false)))) -> ((match_bool(ls__split_fields7,
  ls__split_fields6, false) = true) -> ((result55 = ls__split_fields55) and
  ((result56 = ls__split_fields56) and ((result57 = ls__split_fields57) and
  ((result58 = ls__split_fields58) and
  (result59 = ls__split_fields59)))))))))

axiom H62 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((not (((ls__split_fields7 = true) -> (not (ls__split_fields6 = true))) and
  (not (ls__split_fields7 = false)))) -> ((match_bool(ls__split_fields7,
  ls__split_fields6, false) = true) ->
  ((ls__split_fields60 = ls__split_fields55) and
  ((ls__split_fields61 = of_int(0)) and
  ((ls__split_fields62 = ls__split_fields57) and
  ((ls__split_fields63 = ls__split_fields58) and
  (ls__split_fields64 = ls__split_fields59)))))))))

axiom H63 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((not (((ls__split_fields7 = true) -> (not (ls__split_fields6 = true))) and
  (not (ls__split_fields7 = false)))) -> ((match_bool(ls__split_fields7,
  ls__split_fields6, false) = true) -> ((result60 = ls__split_fields60) and
  ((result61 = ls__split_fields61) and ((result62 = ls__split_fields62) and
  ((result63 = ls__split_fields63) and
  (result64 = ls__split_fields64)))))))))

axiom H64 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((not (((ls__split_fields7 = true) -> (not (ls__split_fields6 = true))) and
  (not (ls__split_fields7 = false)))) -> ((match_bool(ls__split_fields7,
  ls__split_fields6, false) = true) ->
  ((ls__split_fields65 = ls__split_fields60) and
  ((ls__split_fields66 = ls__split_fields61) and
  ((ls__split_fields67 = of_int(0)) and
  ((ls__split_fields68 = ls__split_fields63) and
  (ls__split_fields69 = ls__split_fields64)))))))))

axiom H65 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((not (((ls__split_fields7 = true) -> (not (ls__split_fields6 = true))) and
  (not (ls__split_fields7 = false)))) -> ((not (match_bool(ls__split_fields7,
  ls__split_fields6, false) = true)) ->
  ((ls__split_fields65 = ls__split_fields5) and
  ((ls__split_fields66 = ls__split_fields6) and
  ((ls__split_fields67 = ls__split_fields7) and
  ((ls__split_fields68 = ls__split_fields8) and
  (ls__split_fields69 = ls__split_fields9)))))))))

axiom H66 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((not (((ls__split_fields7 = true) -> (not (ls__split_fields6 = true))) and
  (not (ls__split_fields7 = false)))) ->
  ((ls__split_fields50 = ls__split_fields65) and
  ((ls__split_fields51 = ls__split_fields66) and
  ((ls__split_fields52 = ls__split_fields67) and
  ((ls__split_fields53 = ls__split_fields68) and
  (ls__split_fields54 = ls__split_fields69))))))))

axiom H67 : ((not (ls__split_fields5 = true)) ->
  ((not (((ls__split_fields6 = true) -> (not (ls__split_fields7 = true))) and
  (not (ls__split_fields6 = false)))) ->
  ((ls__split_fields35 = ls__split_fields50) and
  ((ls__split_fields36 = ls__split_fields51) and
  ((ls__split_fields37 = ls__split_fields52) and
  ((ls__split_fields38 = ls__split_fields53) and
  (ls__split_fields39 = ls__split_fields54)))))))

axiom H68 : ((not (ls__split_fields5 = true)) ->
  ((ls__split_fields15 = ls__split_fields35) and
  ((ls__split_fields16 = ls__split_fields36) and
  ((ls__split_fields17 = ls__split_fields37) and
  ((ls__split_fields18 = ls__split_fields38) and
  (ls__split_fields19 = ls__split_fields39))))))

 (* File "traffic_lights.ads", line 33, characters 0-0 *)
goal WP_parameter_def : (valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = ls__split_fields15;
  rec__traffic_lights__lights_state__vehicles_yellow = ls__split_fields16;
  rec__traffic_lights__lights_state__vehicles_red = ls__split_fields17;
  rec__traffic_lights__lights_state__pedestrians_green = ls__split_fields18;
  rec__traffic_lights__lights_state__pedestrians_red = ls__split_fields19 }
  }) = true)
