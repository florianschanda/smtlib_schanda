(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__constrained_attribute__mut_rec__d integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer (rec__constrained_attribute__mut_rec__d a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__constrained_attribute__mut_rec__f integer)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) integer (rec__constrained_attribute__mut_rec__f a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__constrained_attribute__mut_rec__d (us_split_discrs1 a))) (to_rep (rec__constrained_attribute__mut_rec__d (us_split_discrs1 b)))) (= (to_rep (rec__constrained_attribute__mut_rec__f (us_split_fields1 a))) (to_rep (rec__constrained_attribute__mut_rec__f (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const constrained_attribute__mut_rec__d__first__bit Int)
(declare-const constrained_attribute__mut_rec__d__last__bit Int)
(declare-const constrained_attribute__mut_rec__d__position Int)
(assert (<= 0 constrained_attribute__mut_rec__d__first__bit))
(assert (< constrained_attribute__mut_rec__d__first__bit constrained_attribute__mut_rec__d__last__bit))
(assert (<= 0 constrained_attribute__mut_rec__d__position))
(declare-const constrained_attribute__mut_rec__f__first__bit Int)
(declare-const constrained_attribute__mut_rec__f__last__bit Int)
(declare-const constrained_attribute__mut_rec__f__position Int)
(assert (<= 0 constrained_attribute__mut_rec__f__first__bit))
(assert (< constrained_attribute__mut_rec__f__first__bit constrained_attribute__mut_rec__f__last__bit))
(assert (<= 0 constrained_attribute__mut_rec__f__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((mut_rec__ref (mk_mut_rec__ref (mut_rec__content us_rep)))))
(define-fun mut_rec__ref___projection ((a mut_rec__ref)) us_rep (mut_rec__content a))
(define-fun default_initial_assumption ((temp___expr_137 us_rep) (temp___skip_top_level_138 Bool)) Bool (and (= (attr__constrained temp___expr_137) false) (and (= (to_rep (rec__constrained_attribute__mut_rec__d (us_split_discrs1 temp___expr_137))) 0) (= (to_rep (rec__constrained_attribute__mut_rec__f (us_split_fields1 temp___expr_137))) 0))))
(declare-fun is_constrained (us_rep) Bool)
(declare-fun is_constrained__function_guard (Bool us_rep) Bool)
(assert (forall ((r us_rep)) (! (= (is_constrained r) true) :pattern ((is_constrained r)))))
(assert (forall ((r us_rep)) (! (= (is_constrained r) true) :pattern ((is_constrained r)))))
(define-fun in_range1 ((rec__constrained_attribute__mut_rec__d1 Int) (a us_rep)) Bool (= rec__constrained_attribute__mut_rec__d1 (to_rep (rec__constrained_attribute__mut_rec__d (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const constrained_attribute__mut_rec__d__first__bit1 Int)
(declare-const constrained_attribute__mut_rec__d__last__bit1 Int)
(declare-const constrained_attribute__mut_rec__d__position1 Int)
(assert (<= 0 constrained_attribute__mut_rec__d__first__bit1))
(assert (< constrained_attribute__mut_rec__d__first__bit1 constrained_attribute__mut_rec__d__last__bit1))
(assert (<= 0 constrained_attribute__mut_rec__d__position1))
(declare-const constrained_attribute__mut_rec__f__first__bit1 Int)
(declare-const constrained_attribute__mut_rec__f__last__bit1 Int)
(declare-const constrained_attribute__mut_rec__f__position1 Int)
(assert (<= 0 constrained_attribute__mut_rec__f__first__bit1))
(assert (< constrained_attribute__mut_rec__f__first__bit1 constrained_attribute__mut_rec__f__last__bit1))
(assert (<= 0 constrained_attribute__mut_rec__f__position1))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep (t1b__content a))
(declare-const a__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range2 ((rec__constrained_attribute__mut_rec__d1 Int) (a us_rep)) Bool (= rec__constrained_attribute__mut_rec__d1 (to_rep (rec__constrained_attribute__mut_rec__d (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const constrained_attribute__mut_rec__d__first__bit2 Int)
(declare-const constrained_attribute__mut_rec__d__last__bit2 Int)
(declare-const constrained_attribute__mut_rec__d__position2 Int)
(assert (<= 0 constrained_attribute__mut_rec__d__first__bit2))
(assert (< constrained_attribute__mut_rec__d__first__bit2 constrained_attribute__mut_rec__d__last__bit2))
(assert (<= 0 constrained_attribute__mut_rec__d__position2))
(declare-const constrained_attribute__mut_rec__f__first__bit2 Int)
(declare-const constrained_attribute__mut_rec__f__last__bit2 Int)
(declare-const constrained_attribute__mut_rec__f__position2 Int)
(assert (<= 0 constrained_attribute__mut_rec__f__first__bit2))
(assert (< constrained_attribute__mut_rec__f__first__bit2 constrained_attribute__mut_rec__f__last__bit2))
(assert (<= 0 constrained_attribute__mut_rec__f__position2))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((tbS__ref (mk_tbS__ref (tbS__content us_rep)))))
(define-fun tbS__ref___projection ((a tbS__ref)) us_rep (tbS__content a))
(define-fun dynamic_invariant ((temp___expr_145 us_rep) (temp___is_init_142 Bool) (temp___skip_constant_143 Bool) (temp___do_toplevel_144 Bool)) Bool (and (=> (not (= temp___skip_constant_143 true)) (in_range2 0 temp___expr_145)) (= (attr__constrained temp___expr_145) true)))
(define-fun default_initial_assumption1 ((temp___expr_147 us_rep) (temp___skip_top_level_148 Bool)) Bool (and (= (attr__constrained temp___expr_147) true) (and (= (to_rep (rec__constrained_attribute__mut_rec__d (us_split_discrs1 temp___expr_147))) 0) (= (to_rep (rec__constrained_attribute__mut_rec__f (us_split_fields1 temp___expr_147))) 0))))
(declare-const b__split_discrs us_split_discrs)
(declare-const b__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const a__split_fields integer)
(declare-const a__split_discrs integer)
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const constrained_attribute__test__a__assume integer)
(declare-const constrained_attribute__test__a__assume1 integer)
(declare-const constrained_attribute__test__a__assume2 Bool)
(declare-const us Int)
(declare-const result integer)
(declare-const a__split_fields1 integer)
(declare-const result1 integer)
(declare-const a__split_discrs1 integer)
(assert (= (to_rep o1) 0))
(assert (= o1 o2))
(assert (= (to_rep o) 0))
(assert (= o o3))
(assert (= constrained_attribute__test__a__assume o3))
(assert (= constrained_attribute__test__a__assume1 o2))
(assert (= true constrained_attribute__test__a__assume2))
(assert (= result a__split_fields))
(assert (= constrained_attribute__test__a__assume1 a__split_fields1))
(assert (= result1 a__split_discrs))
(assert (= constrained_attribute__test__a__assume a__split_discrs1))
(assert (= a__attr__constrained false))
(assert (and (= us 0) (in_range 0)))
(assert (not (= 0 (to_rep a__split_discrs1))))
(check-sat)
(exit)
