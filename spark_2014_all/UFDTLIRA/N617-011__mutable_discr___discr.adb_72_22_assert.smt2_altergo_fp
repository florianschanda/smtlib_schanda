(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__discr__with_default__c : natural
}

function us_split_discrs___4__projection(a: us_split_discrs) : natural =
  (a).rec__discr__with_default__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___4__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs; attr__constrained : bool
}

function us_rep___8__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___9__projection(a: us_rep) : bool = (a).attr__constrained

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_discrs1).rec__discr__with_default__c) = to_rep(((b).us_split_discrs1).rec__discr__with_default__c)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_discrs1).rec__discr__with_default__c) = to_rep(((b).us_split_discrs1).rec__discr__with_default__c))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:bool. (0 <= object__size({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:bool. (0 <= object__alignment({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit : int

logic discr__with_default__c__last__bit : int

logic discr__with_default__c__position : int

axiom discr__with_default__c__first__bit_axiom :
  (0 <= discr__with_default__c__first__bit)

axiom discr__with_default__c__last__bit_axiom :
  (discr__with_default__c__first__bit <  discr__with_default__c__last__bit)

axiom discr__with_default__c__position_axiom :
  (0 <= discr__with_default__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : natural

logic dummy2 : bool

type with_default__ref = { with_default__content : us_rep
}

function with_default__ref___projection(a: with_default__ref) : us_rep =
  (a).with_default__content

type us_split_fields = { rec__discr__holder__content : us_rep
}

function us_split_fields_Content__2__projection(a: us_split_fields) : us_rep =
  (a).rec__discr__holder__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___10__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  (((bool_eq2(((a).us_split_fields1).rec__discr__holder__content,
  ((b).us_split_fields1).rec__discr__holder__content) = true) -> (bool_eq3(a,
  b) = true)) and
  ((not (bool_eq2(((a).us_split_fields1).rec__discr__holder__content,
  ((b).us_split_fields1).rec__discr__holder__content) = true)) ->
  (bool_eq3(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__discr__holder__content = { us_split_discrs1 = {
  rec__discr__with_default__c = a }; attr__constrained = a1 } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__discr__holder__content = { us_split_discrs1 = {
  rec__discr__with_default__c = a }; attr__constrained = a1 } } })))

logic discr__holder__content__first__bit : int

logic discr__holder__content__last__bit : int

logic discr__holder__content__position : int

axiom discr__holder__content__first__bit_axiom :
  (0 <= discr__holder__content__first__bit)

axiom discr__holder__content__last__bit_axiom :
  (discr__holder__content__first__bit <  discr__holder__content__last__bit)

axiom discr__holder__content__position_axiom :
  (0 <= discr__holder__content__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : natural

logic dummy4 : bool

type holder__ref = { holder__content : us_rep1
}

function holder__ref___projection(a: holder__ref) : us_rep1 =
  (a).holder__content

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range1(rec__discr__with_default__c1: int, a: us_rep) =
  (rec__discr__with_default__c1 = to_rep(((a).us_split_discrs1).rec__discr__with_default__c))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:bool. (0 <= object__size2({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment2({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit1 : int

logic discr__with_default__c__last__bit1 : int

logic discr__with_default__c__position1 : int

axiom discr__with_default__c__first__bit_axiom1 :
  (0 <= discr__with_default__c__first__bit1)

axiom discr__with_default__c__last__bit_axiom1 :
  (discr__with_default__c__first__bit1 <  discr__with_default__c__last__bit1)

axiom discr__with_default__c__position_axiom1 :
  (0 <= discr__with_default__c__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy5 : natural

logic dummy6 : bool

type td1S__ref = { td1S__content : us_rep
}

function td1S__ref___2__projection(a: td1S__ref) : us_rep = (a).td1S__content

predicate in_range2(rec__discr__with_default__c1: int, a: us_rep) =
  (rec__discr__with_default__c1 = to_rep(((a).us_split_discrs1).rec__discr__with_default__c))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:bool. (0 <= object__size3({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment3({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit2 : int

logic discr__with_default__c__last__bit2 : int

logic discr__with_default__c__position2 : int

axiom discr__with_default__c__first__bit_axiom2 :
  (0 <= discr__with_default__c__first__bit2)

axiom discr__with_default__c__last__bit_axiom2 :
  (discr__with_default__c__first__bit2 <  discr__with_default__c__last__bit2)

axiom discr__with_default__c__position_axiom2 :
  (0 <= discr__with_default__c__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy7 : natural

logic dummy8 : bool

type t20b__ref = { t20b__content : us_rep
}

function t20b__ref___projection(a: t20b__ref) : us_rep = (a).t20b__content

logic d1__split_discrs : natural

logic d1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range3(rec__discr__with_default__c1: int, a: us_rep) =
  (rec__discr__with_default__c1 = to_rep(((a).us_split_discrs1).rec__discr__with_default__c))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:bool. (0 <= object__size4({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment4({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit3 : int

logic discr__with_default__c__last__bit3 : int

logic discr__with_default__c__position3 : int

axiom discr__with_default__c__first__bit_axiom3 :
  (0 <= discr__with_default__c__first__bit3)

axiom discr__with_default__c__last__bit_axiom3 :
  (discr__with_default__c__first__bit3 <  discr__with_default__c__last__bit3)

axiom discr__with_default__c__position_axiom3 :
  (0 <= discr__with_default__c__position3)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy9 : natural

logic dummy10 : bool

type t21b__ref = { t21b__content : us_rep
}

function t21b__ref___projection(a: t21b__ref) : us_rep = (a).t21b__content

logic d2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic d2__split_discrs : natural

logic h__split_fields : natural

logic h__split_fields1 : bool

logic us : int

logic o : natural

logic o1 : natural

logic o2 : natural

logic o3 : bool

logic o4 : natural

logic o5 : bool

logic o6 : natural

logic o7 : bool

logic discr__r5__d1__assume : natural

logic discr__r5__d1__assume1 : bool

logic o8 : natural

logic o9 : natural

logic discr__r5__d2__assume : natural

logic discr__r5__d2__assume1 : bool

logic usq_ : natural

logic usq_1 : bool

logic o10 : natural

logic o11 : bool

logic o12 : natural

logic o13 : bool

logic temp___295 : natural

logic temp___2951 : bool

logic usq_2 : natural

logic usq_3 : bool

logic o14 : natural

logic o15 : bool

logic o16 : natural

logic o17 : bool

logic temp___299 : natural

logic temp___2991 : bool

logic result : natural

logic d2__split_discrs1 : natural

logic result1 : natural

logic result2 : bool

logic h__split_fields2 : natural

logic h__split_fields3 : bool

logic result3 : natural

logic result4 : bool

logic h__split_fields4 : natural

logic h__split_fields5 : bool

axiom H : in_range(c)

axiom H1 : ((us = c) and in_range(c))

axiom H2 : (to_rep(o) = c)

axiom H3 : (o = o1)

axiom H4 : (o2 = o1)

axiom H5 : (true = o3)

axiom H6 : ((o4 = o2) and (o5 = o3))

axiom H7 : ((o6 = o4) and (o7 = o5))

axiom H8 : ((discr__r5__d1__assume = o6) and (discr__r5__d1__assume1 = o7))

axiom H9 : (d1__split_discrs = discr__r5__d1__assume)

axiom H10 : (d1__attr__constrained = true)

axiom H11 : ((c = to_rep(d1__split_discrs)) and
  (d1__attr__constrained = true))

axiom H12 : (to_rep(o8) = c)

axiom H13 : (o8 = o9)

axiom H14 : (discr__r5__d2__assume = o9)

axiom H15 : (true = discr__r5__d2__assume1)

axiom H16 : (result = d2__split_discrs)

axiom H17 : (d2__split_discrs1 = discr__r5__d2__assume)

axiom H18 : (d2__attr__constrained = false)

axiom H19 : ((h__split_fields1 = false) and (to_rep(h__split_fields) = 0))

axiom H20 : (h__split_fields1 = false)

axiom H21 : (to_rep(h__split_fields) = 0)

axiom H22 : (not (h__split_fields1 = true))

axiom H23 : ((h__split_fields1 = true) ->
  (d1__split_discrs = h__split_fields))

axiom H24 : (d1__split_discrs = usq_)

axiom H25 : (d1__attr__constrained = usq_1)

axiom H26 : (usq_ = o10)

axiom H27 : (h__split_fields1 = o11)

axiom H28 : ((o12 = o10) and (o13 = o11))

axiom H29 : ((temp___295 = o12) and (temp___2951 = o13))

axiom H30 : ((result1 = h__split_fields) and (result2 = h__split_fields1))

axiom H31 : ((h__split_fields2 = temp___295) and
  (h__split_fields3 = temp___2951))

axiom H32 : (not (h__split_fields3 = true))

axiom H33 : (to_rep(h__split_fields2) = c)

axiom H34 : ((h__split_fields3 = true) ->
  (d2__split_discrs1 = h__split_fields2))

axiom H35 : ((usq_2 = d2__split_discrs1) and (usq_3 = d2__attr__constrained))

axiom H36 : ((o14 = usq_2) and (o15 = h__split_fields3))

axiom H37 : ((o16 = o14) and (o17 = o15))

axiom H38 : ((temp___299 = o16) and (temp___2991 = o17))

axiom H39 : ((result3 = h__split_fields2) and (result4 = h__split_fields3))

axiom H40 : ((h__split_fields4 = temp___299) and
  (h__split_fields5 = temp___2991))

 (* File "discr.adb", line 34, characters 0-0 *)
goal WP_parameter_def : (not (h__split_fields5 = true))
