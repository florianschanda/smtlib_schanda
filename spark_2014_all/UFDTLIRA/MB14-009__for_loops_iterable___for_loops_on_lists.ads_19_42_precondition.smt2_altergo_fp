(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type element_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : element_type, element_type -> bool

logic dummy1 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__for_loops_on_lists__my_lists__list__capacity :
count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__for_loops_on_lists__my_lists__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__for_loops_on_lists__my_lists__list :
us_main_type
}

function us_split_fields_List__projection(a: us_split_fields) : us_main_type =
  (a).rec__for_loops_on_lists__my_lists__list

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__for_loops_on_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__for_loops_on_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__for_loops_on_lists__my_lists__list,
  ((b).us_split_fields1).rec__for_loops_on_lists__my_lists__list) = true)) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__for_loops_on_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__for_loops_on_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__for_loops_on_lists__my_lists__list,
  ((b).us_split_fields1).rec__for_loops_on_lists__my_lists__list) = true))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity = a
  }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity = a
  }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = a1 } })))

logic for_loops_on_lists__my_lists__list__capacity__first__bit : int

logic for_loops_on_lists__my_lists__list__capacity__last__bit : int

logic for_loops_on_lists__my_lists__list__capacity__position : int

axiom for_loops_on_lists__my_lists__list__capacity__first__bit_axiom :
  (0 <= for_loops_on_lists__my_lists__list__capacity__first__bit)

axiom for_loops_on_lists__my_lists__list__capacity__last__bit_axiom :
  (for_loops_on_lists__my_lists__list__capacity__first__bit <  for_loops_on_lists__my_lists__list__capacity__last__bit)

axiom for_loops_on_lists__my_lists__list__capacity__position_axiom :
  (0 <= for_loops_on_lists__my_lists__list__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : count_type

logic dummy3 : us_main_type

type list__ref = { list__content : us_rep
}

function list__ref___projection(a: list__ref) : us_rep = (a).list__content

type us_split_fields2 = { rec__for_loops_on_lists__my_lists__cursor__node :
count_type
}

function us_split_fields_Node__projection(a: us_split_fields2) : count_type =
  (a).rec__for_loops_on_lists__my_lists__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  (((to_rep(((a).us_split_fields3).rec__for_loops_on_lists__my_lists__cursor__node) = to_rep(((b).us_split_fields3).rec__for_loops_on_lists__my_lists__cursor__node)) ->
  (bool_eq5(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__for_loops_on_lists__my_lists__cursor__node) = to_rep(((b).us_split_fields3).rec__for_loops_on_lists__my_lists__cursor__node))) ->
  (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = a } })))

logic for_loops_on_lists__my_lists__cursor__node__first__bit : int

logic for_loops_on_lists__my_lists__cursor__node__last__bit : int

logic for_loops_on_lists__my_lists__cursor__node__position : int

axiom for_loops_on_lists__my_lists__cursor__node__first__bit_axiom :
  (0 <= for_loops_on_lists__my_lists__cursor__node__first__bit)

axiom for_loops_on_lists__my_lists__cursor__node__last__bit_axiom :
  (for_loops_on_lists__my_lists__cursor__node__first__bit <  for_loops_on_lists__my_lists__cursor__node__last__bit)

axiom for_loops_on_lists__my_lists__cursor__node__position_axiom :
  (0 <= for_loops_on_lists__my_lists__cursor__node__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  container1 } })]. ((length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }) <= to_rep(container)) and in_range1(length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }))))

type extended_index

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : extended_index, extended_index -> bool

logic dummy5 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq7 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

type element_type1

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : element_type1, element_type1 -> bool

logic dummy7 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2 [user_eq5(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq5(a, b) = match_bool(bool_eq1(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq5(a, b) = match_bool(bool_eq1(length1(a), length1(b)), false,
  false)))))

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall position:int [get(container, position)]. ((in_range3(position) and
  ((1 <= position) and (position <= (0 + length1(container))))) ->
  in_range4(get(container, position)))))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq9 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq7 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type map__ref = { map__content : us_rep3
}

function map__ref___projection(a: map__ref) : us_rep3 = (a).map__content

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref___projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

logic get1 : us_rep3, us_rep1 -> int

logic get__function_guard1 : int, us_rep3, us_rep1 -> prop

type element_type2

predicate in_range5(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : element_type2, element_type2 -> bool

logic dummy9 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___3__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

logic length2 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

logic is_empty : us_rep3 -> bool

logic is_empty__function_guard : bool, us_rep3 -> prop

logic has_key : us_rep3, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep3, us_rep1 -> prop

logic witness : us_rep3, us_rep1 -> int

logic witness__function_guard : int, us_rep3, us_rep1 -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall key:count_type [get1(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } })].
  ((has_key(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }) = true) ->
  (((of_int(0) = true) -> ((get1(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key }
  }) = w_get(container, witness(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = k } }) = true) ->
  ((bool_eq5({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = k } }, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = key
  } }) = true) <-> (witness(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key }
  }) = witness(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = k } }))))))) and
  in_range5(get1(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }))))))

logic model__ : us_rep -> us_rep2

logic model____function_guard : us_rep2, us_rep -> prop

axiom model____post_axiom :
  (forall container:count_type. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  container1 } })]. (length1(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  })) = length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  })))

logic positions : us_rep -> us_rep3

logic positions__function_guard : us_rep3, us_rep -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  container1 } })]. ((not (has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = no_element }
  }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = i } }) = true) ->
  (((1 <= get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = i } })) and
  (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = i } }) <= length({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  container1 } }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = j } }) = true) ->
  ((get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = i } }) = get1(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  container1 } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = j } })) -> (bool_eq5({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = i }
  }, { us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  j } }) = true)))))))))

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic element__function_guard : int, us_rep, us_rep1 -> prop

logic equal_except__function_guard : bool, us_rep2, us_rep2, int -> prop

logic oeq : us_rep3, us_rep3 -> bool

logic oeq__function_guard1 : bool, us_rep3, us_rep3 -> prop

logic first : us_rep -> us_rep1

logic first__function_guard : us_rep1, us_rep -> prop

axiom first__post_axiom :
  (forall container:count_type. forall container1:us_main_type [first({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  container1 } })]. (((length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }) = 0) -> (bool_eq5(first({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = no_element }
  }) = true)) and ((not (length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }) = 0)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), first({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), first({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  })) = 1)))))

logic next : us_rep, us_rep1 -> us_rep1

logic next__function_guard : us_rep1, us_rep, us_rep1 -> prop

axiom next__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [next({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }, { us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  position } })]. (((has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = position } }) = true) or
  (bool_eq5({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = position } }, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }) = true)) -> ((((bool_eq5({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = position } }, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }) = true) or (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = position } }) = length({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  container1 } }))) -> (bool_eq5(next({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }, { us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  position } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = no_element }
  }) = true)) and ((not ((bool_eq5({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = position } }, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }) = true) or (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = position } }) = length({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  container1 } })))) -> ((has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), next({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }, { us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  position } })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), next({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }, { us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  position } })) = (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = container1 }
  }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = position } }) + 1))))))))

logic l__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom no_element__def_axiom : (no_element = of_rep(0))

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  (((0 + length1(container)) <= 2147483647) and
  in_range1(length1(container))))

axiom has_key__post_axiom :
  (forall container:us_rep3.
  (forall key:count_type [has_key(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } })].
  ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields3 = {
   rec__for_loops_on_lists__my_lists__cursor__node = k } }) = true) and
   (bool_eq5({ us_split_fields3 = {
   rec__for_loops_on_lists__my_lists__cursor__node = k } }, {
   us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = key
   } }) = true))) ->
  (has_key(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }) = true)))))

axiom length__post_axiom2 :
  (forall container:us_rep3 [length2(container)].
  in_range1(length2(container)))

axiom oeq__post_axiom :
  (forall left:us_rep3. forall right:us_rep3 [oeq(left, right)]. ((oeq(left,
  right) = true) <->
  ((forall key:count_type. ((has_key(left, { us_split_fields3 = {
   rec__for_loops_on_lists__my_lists__cursor__node = key } }) = true) ->
   ((has_key(right, { us_split_fields3 = {
   rec__for_loops_on_lists__my_lists__cursor__node = key } }) = true) and
   (get1(right, { us_split_fields3 = {
   rec__for_loops_on_lists__my_lists__cursor__node = key } }) = get1(left, {
   us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = key
   } }))))) and
  (forall key:count_type. ((has_key(right, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }) = true) ->
  (has_key(left, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }) = true))))))

axiom is_empty__post_axiom :
  (forall container:us_rep3 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key:count_type. (not (has_key(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }) = true)))))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep3.
  (forall key:count_type [witness(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } })].
  ((has_key(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }) = true) ->
  ((has_witness(container, witness(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } })) = true) and
  in_range1(witness(container, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = key } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep3.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range1(witness1) and (has_witness(container, witness1) = true)) ->
  in_range5(w_get(container, witness1)))))

 (* File "for_loops_on_lists.adb", line 16, characters 0-0 *)
goal WP_parameter_def :
  (forall l__split_fields:us_main_type. forall c__split_fields:count_type.
  forall cu:count_type. forall o:count_type. forall o1:count_type.
  forall temp___541:count_type. forall o2:count_type.
  forall temp___530:count_type. forall temp___532:count_type.
  forall temp___5321:us_main_type. forall temp___529:count_type.
  forall temp___5291:us_main_type. forall temp___528:count_type.
  forall temp___531:count_type. forall temp___5311:us_main_type.
  forall temp___533:count_type. forall temp___5331:us_main_type.
  forall temp___534:count_type. forall temp___5341:us_main_type.
  forall o3:int. forall o4:int. forall o5:int. forall o6:int.
  forall o7:count_type. forall o8:bool. forall o9:count_type. forall o10:int.
  forall l__split_fields1:us_main_type. forall c__split_fields1:count_type.
  forall result:count_type. forall cu1:count_type. forall result1:bool.
  forall result2:bool. forall result3:count_type.
  forall c__split_fields2:us_split_fields2.
  forall l__split_fields2:us_split_fields.
  forall c__split_fields3:us_split_fields2. forall cu2:us_rep1.
  forall l__split_fields3:us_split_fields. forall result4:bool.
  forall result5:cursor__ref. forall cu3:us_rep1. forall result6:bool.
  forall result7:us_split_fields__ref1.
  forall c__split_fields4:us_split_fields2.
  forall l__split_fields4:us_split_fields__ref.
  forall c__split_fields5:us_split_fields__ref1. forall cu4:cursor__ref.
  forall l__split_fields5:us_split_fields.
  forall c__split_fields6:us_split_fields2. forall cu5:us_rep1.
  forall l__split_fields6:us_split_fields__ref.
  forall c__split_fields7:us_split_fields__ref1. forall cu6:cursor__ref.
  forall l__split_fields7:us_split_fields.
  forall c__split_fields8:us_split_fields2. forall cu7:us_rep1.
  forall l__split_fields8:us_split_fields__ref.
  forall c__split_fields9:us_split_fields__ref1. forall cu8:cursor__ref.
  forall l__split_fields9:us_split_fields.
  forall c__split_fields10:us_split_fields2. forall cu9:us_rep1.
  forall result8:us_split_fields__ref1.
  forall c__split_fields11:us_split_fields2.
  forall l__split_fields10:us_split_fields__ref.
  forall c__split_fields12:us_split_fields__ref1. forall cu10:cursor__ref.
  forall l__split_fields11:us_split_fields.
  forall c__split_fields13:us_split_fields2. forall cu11:us_rep1.
  forall l__split_fields12:us_split_fields__ref.
  forall c__split_fields14:us_split_fields__ref1. forall cu12:cursor__ref.
  forall l__split_fields13:us_split_fields.
  forall c__split_fields15:us_split_fields2. forall cu13:us_rep1.
  forall result9:bool. (((((to_rep(o) = 0) and (o = o1)) and
  (temp___541 = o1)) and (no_element = temp___541)) -> (((((((cu10 = cu4) and
  ((c__split_fields12 = c__split_fields5) and
  (l__split_fields10 = l__split_fields4))) and ((cu11 = cu5) and
  ((c__split_fields13 = c__split_fields6) and
  (l__split_fields11 = l__split_fields5)))) and (((({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o2 } } = first({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = {
  rec__for_loops_on_lists__my_lists__list = l__split_fields } })) and
  (((bool_eq1(length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), 0) = true) and (bool_eq5({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o2 } }, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }) = true)) or ((not (bool_eq1(length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), 0) = true)) and ((has_key(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = {
  rec__for_loops_on_lists__my_lists__list = l__split_fields } }), {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o2 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o2 } }) = 1))))) and (({
  cursor__content = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = result } } } = {
  cursor__content = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu } } }) and ({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = cu1
  } } = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o2 } }))) and
  (((result1 = has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } })) and
  ((result1 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }) = true))) and
  ((result1 = true) and ((c__split_fields = temp___530) and
  (((l__split_discrs = temp___532) and (l__split_fields = temp___5321)) and
  (((l__split_discrs = temp___529) and (l__split_fields = temp___5291)) and
  (({ us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  temp___528 } } = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }) and
  (((l__split_discrs = temp___531) and (l__split_fields = temp___5311)) and
  (((l__split_discrs = temp___533) and (l__split_fields = temp___5331)) and
  (((l__split_discrs = temp___534) and (l__split_fields = temp___5341)) and
  (((((cu4 = { cursor__content = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } } }) and
  ((c__split_fields5 = { us_split_fields__content1 = c__split_fields2 }) and
  (l__split_fields4 = { us_split_fields__content = {
  rec__for_loops_on_lists__my_lists__list = l__split_fields } }))) and
  ((cu5 = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }) and
  ((c__split_fields6 = c__split_fields2) and (l__split_fields5 = {
  rec__for_loops_on_lists__my_lists__list = l__split_fields1 })))) and
  ((((o3 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }))) and
  (in_range2(o3) and (o3 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }))))) and
  (((o3 = 0) and (result2 = true)) or ((not (o3 = 0)) and
  (result2 = false)))) and ((result2 = true) and
  ((result3 = c__split_fields) and (c__split_fields2 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 }))))) or
  (((((o3 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }))) and
  (in_range2(o3) and (o3 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }))))) and
  (((o3 = 0) and (result2 = true)) or ((not (o3 = 0)) and
  (result2 = false)))) and ((not (result2 = true)) and ((c__split_fields2 = {
  rec__for_loops_on_lists__my_lists__cursor__node = c__split_fields }) and
  (c__split_fields2 = { rec__for_loops_on_lists__my_lists__cursor__node =
  c__split_fields1 })))) and ((((cu4 = { cursor__content = cu3 }) and
  ((c__split_fields5 = { us_split_fields__content1 = c__split_fields4 }) and
  (l__split_fields4 = { us_split_fields__content = l__split_fields3 }))) and
  ((cu5 = cu3) and ((c__split_fields6 = c__split_fields4) and
  (l__split_fields5 = l__split_fields3)))) and (((length({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }) = length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = temp___531 };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = temp___5311
  } })) and
  ((forall i:int. (((1 <= i) and (i <= (get1(positions({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), cu2) - 1))) ->
   ((0 <  get(model__({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = temp___532 };
   us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = temp___5321
   } }), i)) and (get(model__({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), i) = (get(model__({
   us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
   temp___533 }; us_split_fields1 = {
   rec__for_loops_on_lists__my_lists__list = temp___5331 } }), i) - 1))))) and
  ((forall i:int. (((get1(positions({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), cu2) <= i) and (i <= length({
   us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields2 }))) ->
   (get(model__({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), i) = get(model__({
   us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
   temp___534 }; us_split_fields1 = {
   rec__for_loops_on_lists__my_lists__list = temp___5341 } }), i)))) and
  (not (get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), cu2)) = 0))))) and
  ((has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), cu2) = true) and
  ((((((o4 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), cu2))) and (in_range2(o4) and
  (o4 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), cu2))))) and (o5 = (o4 - 1))) and
  ((o6 = o5) and in_range2(o5))) and ((((length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }) = length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 })) and (oeq(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }), positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 })) = true)) and
  (get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2)) = o6)) and
  ((bool_eq1(length1(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 })), length1(model__({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 }))) = true) and
  (forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }))))) ->
  ((not (i = get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2))) -> (get(model__({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }),
  i) = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), i)))))))) and (((((({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o7 }
  } = next({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }, cu2)) and
  (((match_bool(bool_eq5(cu2, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = no_element } }), true,
  bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2), length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }))) = true) and (bool_eq5({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o7 }
  }, { us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }) = true)) or ((not (match_bool(bool_eq5(cu2, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2), length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }))) = true)) and ((has_key(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 }), {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o7 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o7 }
  }) = (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2) + 1)))))) and
  ((o8 = has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o7 } })) and
  ((o8 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o7 } }) = true)))) and
  (((not (o8 = true)) and (result4 = true)) or ((o8 = true) and
  (result4 = false)))) and (not (result4 = true))) and (((({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o9 }
  } = next({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }, cu2)) and
  (((match_bool(bool_eq5(cu2, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = no_element } }), true,
  bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2), length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }))) = true) and (bool_eq5({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o9 }
  }, { us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }) = true)) or ((not (match_bool(bool_eq5(cu2, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2), length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }))) = true)) and ((has_key(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 }), {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o9 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o9 }
  }) = (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2) + 1)))))) and ((result5 = {
  cursor__content = cu2 }) and (cu3 = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o9 } }))) and
  ((((o10 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu3))) and (in_range2(o10) and
  (o10 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu3))))) and (((o10 = 0) and
  (result6 = true)) or ((not (o10 = 0)) and (result6 = false)))) and
  ((result6 = true) and ((result7 = { us_split_fields__content1 =
  c__split_fields3 }) and
  (c__split_fields4 = (cu3).us_split_fields3))))))))))))))))))))))) or ((((({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o2 }
  } = first({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } })) and (((bool_eq1(length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), 0) = true) and (bool_eq5({ us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o2 } }, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }) = true)) or ((not (bool_eq1(length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), 0) = true)) and ((has_key(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = {
  rec__for_loops_on_lists__my_lists__list = l__split_fields } }), {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o2 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o2 } }) = 1))))) and (({
  cursor__content = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = result } } } = {
  cursor__content = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu } } }) and ({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = cu1
  } } = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o2 } }))) and
  (((result1 = has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } })) and
  ((result1 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }) = true))) and
  (((result1 = true) and ((((c__split_fields = temp___530) and
  (((l__split_discrs = temp___532) and (l__split_fields = temp___5321)) and
  (((l__split_discrs = temp___529) and (l__split_fields = temp___5291)) and
  (({ us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  temp___528 } } = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }) and
  (((l__split_discrs = temp___531) and (l__split_fields = temp___5311)) and
  (((l__split_discrs = temp___533) and (l__split_fields = temp___5331)) and
  (((l__split_discrs = temp___534) and (l__split_fields = temp___5341)) and
  (((((o3 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }))) and
  (in_range2(o3) and (o3 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list =
  l__split_fields } }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }))))) and
  (((o3 = 0) and (result2 = true)) or ((not (o3 = 0)) and
  (result2 = false)))) and ((not (result2 = true)) and ((c__split_fields2 = {
  rec__for_loops_on_lists__my_lists__cursor__node = c__split_fields }) and
  (c__split_fields2 = { rec__for_loops_on_lists__my_lists__cursor__node =
  c__split_fields1 })))) and (((length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }) = length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = temp___531 };
  us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = temp___5311
  } })) and
  ((forall i:int. (((1 <= i) and (i <= (get1(positions({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), cu2) - 1))) ->
   ((0 <  get(model__({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = temp___532 };
   us_split_fields1 = { rec__for_loops_on_lists__my_lists__list = temp___5321
   } }), i)) and (get(model__({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), i) = (get(model__({
   us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
   temp___533 }; us_split_fields1 = {
   rec__for_loops_on_lists__my_lists__list = temp___5331 } }), i) - 1))))) and
  ((forall i:int. (((get1(positions({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), cu2) <= i) and (i <= length({
   us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields2 }))) ->
   (get(model__({ us_split_discrs1 = {
   rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
   us_split_fields1 = l__split_fields2 }), i) = get(model__({
   us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
   temp___534 }; us_split_fields1 = {
   rec__for_loops_on_lists__my_lists__list = temp___5341 } }), i)))) and
  (not (get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), cu2)) = 0))))) and
  ((has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), cu2) = true) and
  ((((((o4 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), cu2))) and (in_range2(o4) and
  (o4 = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 }), cu2))))) and (o5 = (o4 - 1))) and
  ((o6 = o5) and in_range2(o5))) and ((((length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }) = length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 })) and (oeq(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }), positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 })) = true)) and
  (get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), get1(positions({ us_split_discrs1 =
  { rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2)) = o6)) and
  ((bool_eq1(length1(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields2 })), length1(model__({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 }))) = true) and
  (forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }))))) ->
  ((not (i = get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2))) -> (get(model__({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields2 }),
  i) = get(model__({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), i)))))))) and ((((({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o7 }
  } = next({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }, cu2)) and
  (((match_bool(bool_eq5(cu2, { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = no_element } }), true,
  bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2), length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }))) = true) and (bool_eq5({
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o7 }
  }, { us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }) = true)) or ((not (match_bool(bool_eq5(cu2, {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node =
  no_element } }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2), length({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }))) = true)) and ((has_key(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields3 }), {
  us_split_fields3 = { rec__for_loops_on_lists__my_lists__cursor__node = o7 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o7 }
  }) = (get1(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), cu2) + 1)))))) and
  ((o8 = has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o7 } })) and
  ((o8 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields3 }), { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = o7 } }) = true)))) and
  (((not (o8 = true)) and (result4 = true)) or ((o8 = true) and
  (result4 = false)))) and (result4 = true))))))))))))) and (((cu6 = {
  cursor__content = cu2 }) and ((c__split_fields7 = {
  us_split_fields__content1 = c__split_fields3 }) and (l__split_fields6 = {
  us_split_fields__content = l__split_fields3 }))) and ((cu7 = cu2) and
  ((c__split_fields8 = c__split_fields3) and
  (l__split_fields7 = l__split_fields3))))) and (((cu8 = cu6) and
  ((c__split_fields9 = c__split_fields7) and
  (l__split_fields8 = l__split_fields6))) and ((cu9 = cu7) and
  ((c__split_fields10 = c__split_fields8) and
  (l__split_fields9 = l__split_fields7)))))) or ((not (result1 = true)) and
  (((cu8 = { cursor__content = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } } }) and
  ((c__split_fields9 = { us_split_fields__content1 = {
  rec__for_loops_on_lists__my_lists__cursor__node = c__split_fields } }) and
  (l__split_fields8 = { us_split_fields__content = {
  rec__for_loops_on_lists__my_lists__list = l__split_fields } }))) and
  ((cu9 = { us_split_fields3 = {
  rec__for_loops_on_lists__my_lists__cursor__node = cu1 } }) and
  ((c__split_fields10 = { rec__for_loops_on_lists__my_lists__cursor__node =
  c__split_fields1 }) and (l__split_fields9 = {
  rec__for_loops_on_lists__my_lists__list = l__split_fields1 })))))))) and
  ((((cu10 = cu8) and ((c__split_fields12 = { us_split_fields__content1 =
  c__split_fields11 }) and (l__split_fields10 = l__split_fields8))) and
  ((cu11 = cu9) and ((c__split_fields13 = c__split_fields11) and
  (l__split_fields11 = l__split_fields9)))) and
  ((result8 = c__split_fields9) and (c__split_fields11 = {
  rec__for_loops_on_lists__my_lists__cursor__node = no_element }))))) and
  (((cu12 = cu10) and ((c__split_fields14 = c__split_fields12) and
  (l__split_fields12 = l__split_fields10))) and ((cu13 = cu11) and
  ((c__split_fields15 = c__split_fields13) and
  (l__split_fields13 = l__split_fields11))))) ->
  (((result9 = has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = (l__split_fields12).us_split_fields__content }), {
  us_split_fields3 = (c__split_fields14).us_split_fields__content1 })) and
  ((result9 = true) <-> (has_key(positions({ us_split_discrs1 = {
  rec__for_loops_on_lists__my_lists__list__capacity = l__split_discrs };
  us_split_fields1 = (l__split_fields12).us_split_fields__content }), {
  us_split_fields3 = (c__split_fields14).us_split_fields__content1
  }) = true))) -> ((result9 = true) -> (has_key(positions({
  us_split_discrs1 = { rec__for_loops_on_lists__my_lists__list__capacity =
  l__split_discrs }; us_split_fields1 =
  (l__split_fields12).us_split_fields__content }), { us_split_fields3 =
  (c__split_fields14).us_split_fields__content1 }) = true))))))
