(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__inc__increasing_indicator__valid : bool;
rec__inc__increasing_indicator__first : integer;
rec__inc__increasing_indicator__second : integer
}

function us_split_fields_Valid__projection(a: us_split_fields) : bool =
  (a).rec__inc__increasing_indicator__valid

function us_split_fields_First__projection(a: us_split_fields) : integer =
  (a).rec__inc__increasing_indicator__first

function us_split_fields_Second__projection(a: us_split_fields) : integer =
  (a).rec__inc__increasing_indicator__second

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((((((a).us_split_fields1).rec__inc__increasing_indicator__valid = ((b).us_split_fields1).rec__inc__increasing_indicator__valid) and
  (to_rep(((a).us_split_fields1).rec__inc__increasing_indicator__first) = to_rep(((b).us_split_fields1).rec__inc__increasing_indicator__first))) and
  (to_rep(((a).us_split_fields1).rec__inc__increasing_indicator__second) = to_rep(((b).us_split_fields1).rec__inc__increasing_indicator__second))) ->
  (bool_eq3(a, b) = true)) and
  ((not (((((a).us_split_fields1).rec__inc__increasing_indicator__valid = ((b).us_split_fields1).rec__inc__increasing_indicator__valid) and
  (to_rep(((a).us_split_fields1).rec__inc__increasing_indicator__first) = to_rep(((b).us_split_fields1).rec__inc__increasing_indicator__first))) and
  (to_rep(((a).us_split_fields1).rec__inc__increasing_indicator__second) = to_rep(((b).us_split_fields1).rec__inc__increasing_indicator__second)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:integer. forall a2:integer. (0 <= object__size({
  us_split_fields1 = { rec__inc__increasing_indicator__valid = a;
  rec__inc__increasing_indicator__first = a1;
  rec__inc__increasing_indicator__second = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:integer. forall a2:integer.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = a;
  rec__inc__increasing_indicator__first = a1;
  rec__inc__increasing_indicator__second = a2 } })))

logic inc__increasing_indicator__valid__first__bit : int

logic inc__increasing_indicator__valid__last__bit : int

logic inc__increasing_indicator__valid__position : int

axiom inc__increasing_indicator__valid__first__bit_axiom :
  (0 <= inc__increasing_indicator__valid__first__bit)

axiom inc__increasing_indicator__valid__last__bit_axiom :
  (inc__increasing_indicator__valid__first__bit <  inc__increasing_indicator__valid__last__bit)

axiom inc__increasing_indicator__valid__position_axiom :
  (0 <= inc__increasing_indicator__valid__position)

logic inc__increasing_indicator__first__first__bit : int

logic inc__increasing_indicator__first__last__bit : int

logic inc__increasing_indicator__first__position : int

axiom inc__increasing_indicator__first__first__bit_axiom :
  (0 <= inc__increasing_indicator__first__first__bit)

axiom inc__increasing_indicator__first__last__bit_axiom :
  (inc__increasing_indicator__first__first__bit <  inc__increasing_indicator__first__last__bit)

axiom inc__increasing_indicator__first__position_axiom :
  (0 <= inc__increasing_indicator__first__position)

logic inc__increasing_indicator__second__first__bit : int

logic inc__increasing_indicator__second__last__bit : int

logic inc__increasing_indicator__second__position : int

axiom inc__increasing_indicator__second__first__bit_axiom :
  (0 <= inc__increasing_indicator__second__first__bit)

axiom inc__increasing_indicator__second__last__bit_axiom :
  (inc__increasing_indicator__second__first__bit <  inc__increasing_indicator__second__last__bit)

axiom inc__increasing_indicator__second__position_axiom :
  (0 <= inc__increasing_indicator__second__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : bool

logic dummy2 : integer

logic dummy3 : integer

type increasing_indicator__ref = { increasing_indicator__content : us_rep
}

function increasing_indicator__ref___projection(a: increasing_indicator__ref) : us_rep =
  (a).increasing_indicator__content

logic first : us_rep -> int

logic first__function_guard : int, us_rep -> prop

axiom first__post_axiom :
  (forall indicator:bool. forall indicator1:integer.
  forall indicator2:integer [first({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } })].
  in_range1(first({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } })))

axiom first__def_axiom :
  (forall indicator:bool. forall indicator1:integer.
  forall indicator2:integer [first({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } })]. (first({
  us_split_fields1 = { rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 }
  }) = to_rep(indicator1)))

logic second : us_rep -> int

logic second__function_guard : int, us_rep -> prop

axiom second__post_axiom :
  (forall indicator:bool. forall indicator1:integer.
  forall indicator2:integer [second({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } })].
  in_range1(second({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } })))

axiom second__def_axiom :
  (forall indicator:bool. forall indicator1:integer.
  forall indicator2:integer [second({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } })]. (second({
  us_split_fields1 = { rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 }
  }) = to_rep(indicator2)))

logic is_valid : us_rep -> bool

logic is_valid__function_guard : bool, us_rep -> prop

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall indicator:bool. forall indicator1:integer.
  forall indicator2:integer [is_valid({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } })]. ((is_valid({
  us_split_fields1 = { rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } }) = true) <->
  (indicator = true)))

logic is_increasing : us_rep -> bool

logic is_increasing__function_guard : bool, us_rep -> prop

axiom is_increasing__post_axiom : true

axiom is_increasing__def_axiom :
  (forall indicator:bool. forall indicator1:integer.
  forall indicator2:integer [is_increasing({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } })].
  ((is_increasing({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = indicator;
  rec__inc__increasing_indicator__first = indicator1;
  rec__inc__increasing_indicator__second = indicator2 } }) = true) <->
  (to_rep(indicator1) <  to_rep(indicator2))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic result____split_fields : bool

logic result____split_fields1 : integer

logic result____split_fields2 : integer

logic s : int

logic o : integer

logic o1 : bool

logic o2 : integer

logic o3 : integer

logic temp___209 : bool

logic temp___2091 : integer

logic temp___2092 : integer

logic o4 : integer

logic o5 : bool

logic o6 : integer

logic o7 : integer

logic temp___215 : bool

logic temp___2151 : integer

logic temp___2152 : integer

logic o8 : integer

logic o9 : bool

logic o10 : integer

logic o11 : integer

logic temp___213 : bool

logic temp___2131 : integer

logic temp___2132 : integer

logic o12 : bool

logic o13 : int

logic o14 : int

logic o15 : bool

logic o16 : int

logic inc__read__valid : bool

logic inc__read__v : int

logic result : bool

logic result1 : integer

logic result2 : integer

logic result____split_fields3 : bool

logic result____split_fields4 : integer

logic result____split_fields5 : integer

logic result3 : bool

logic result4 : integer

logic result5 : integer

logic result____split_fields6 : bool

logic result____split_fields7 : integer

logic result____split_fields8 : integer

logic inc__read__valid1 : bool

logic inc__read__v1 : int

logic result6 : bool

logic result7 : integer

logic result8 : integer

logic result____split_fields9 : bool

logic result____split_fields10 : integer

logic result____split_fields11 : integer

logic result9 : bool

logic result10 : integer

logic result11 : integer

logic result____split_fields12 : bool

logic result____split_fields13 : integer

logic result____split_fields14 : integer

logic result12 : bool

logic result13 : integer

logic result14 : integer

logic result____split_fields15 : bool

logic result____split_fields16 : integer

logic result____split_fields17 : integer

logic result____split_fields18 : bool

logic result____split_fields19 : integer

logic result____split_fields20 : integer

logic result____split_fields21 : bool

logic result____split_fields22 : integer

logic result____split_fields23 : integer

logic result15 : bool

axiom H : in_range1(s)

axiom H1 : in_range1(inc__read__v)

axiom H2 : (to_rep(o) = inc__read__v)

axiom H3 : (result____split_fields = o1)

axiom H4 : (o = o2)

axiom H5 : (result____split_fields2 = o3)

axiom H6 : (temp___209 = o1)

axiom H7 : (temp___2091 = o2)

axiom H8 : (temp___2092 = o3)

axiom H9 : ((result = result____split_fields) and
  ((result1 = result____split_fields1) and
  (result2 = result____split_fields2)))

axiom H10 : (temp___209 = result____split_fields3)

axiom H11 : (temp___2091 = result____split_fields4)

axiom H12 : (temp___2092 = result____split_fields5)

axiom H13 : (result3 = result____split_fields3)

axiom H14 : (result4 = result____split_fields4)

axiom H15 : (result5 = result____split_fields5)

axiom H16 : (inc__read__valid = result____split_fields6)

axiom H17 : (result____split_fields4 = result____split_fields7)

axiom H18 : (result____split_fields5 = result____split_fields8)

axiom H19 : ((result____split_fields6 = true) -> in_range1(inc__read__v1))

axiom H20 : ((result____split_fields6 = true) ->
  (to_rep(o4) = inc__read__v1))

axiom H21 : ((result____split_fields6 = true) ->
  (result____split_fields6 = o5))

axiom H22 : ((result____split_fields6 = true) ->
  (result____split_fields7 = o6))

axiom H23 : ((result____split_fields6 = true) -> (o4 = o7))

axiom H24 : ((result____split_fields6 = true) -> (temp___215 = o5))

axiom H25 : ((result____split_fields6 = true) -> (temp___2151 = o6))

axiom H26 : ((result____split_fields6 = true) -> (temp___2152 = o7))

axiom H27 : ((result____split_fields6 = true) ->
  (result6 = result____split_fields6))

axiom H28 : ((result____split_fields6 = true) ->
  (result7 = result____split_fields7))

axiom H29 : ((result____split_fields6 = true) ->
  (result8 = result____split_fields8))

axiom H30 : ((result____split_fields6 = true) ->
  (temp___215 = result____split_fields9))

axiom H31 : ((result____split_fields6 = true) ->
  (temp___2151 = result____split_fields10))

axiom H32 : ((result____split_fields6 = true) ->
  (temp___2152 = result____split_fields11))

axiom H33 : ((result____split_fields6 = true) ->
  ((result9 = result____split_fields9) and
  ((result10 = result____split_fields10) and
  (result11 = result____split_fields11))))

axiom H34 : ((result____split_fields6 = true) ->
  ((result____split_fields12 = inc__read__valid1) and
  ((result____split_fields13 = result____split_fields10) and
  (result____split_fields14 = result____split_fields11))))

axiom H35 : ((not (result____split_fields6 = true)) -> (to_rep(o8) = 0))

axiom H36 : ((not (result____split_fields6 = true)) ->
  (result____split_fields6 = o9))

axiom H37 : ((not (result____split_fields6 = true)) ->
  (result____split_fields7 = o10))

axiom H38 : ((not (result____split_fields6 = true)) -> (o8 = o11))

axiom H39 : ((not (result____split_fields6 = true)) -> (temp___213 = o9))

axiom H40 : ((not (result____split_fields6 = true)) -> (temp___2131 = o10))

axiom H41 : ((not (result____split_fields6 = true)) -> (temp___2132 = o11))

axiom H42 : ((not (result____split_fields6 = true)) ->
  ((result12 = result____split_fields6) and
  ((result13 = result____split_fields7) and
  (result14 = result____split_fields8))))

axiom H43 : ((not (result____split_fields6 = true)) ->
  ((result____split_fields15 = temp___213) and
  ((result____split_fields16 = temp___2131) and
  (result____split_fields17 = temp___2132))))

axiom H44 : ((not (result____split_fields6 = true)) ->
  ((result____split_fields12 = result____split_fields15) and
  ((result____split_fields13 = result____split_fields16) and
  (result____split_fields14 = result____split_fields17))))

axiom H45 : ((result____split_fields18 = result____split_fields12) and
  ((result____split_fields19 = result____split_fields13) and
  (result____split_fields20 = result____split_fields14)))

axiom H46 : ((result____split_fields21 = result____split_fields12) and
  ((result____split_fields22 = result____split_fields13) and
  (result____split_fields23 = result____split_fields14)))

axiom H47 : ((result15 = is_valid({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = result____split_fields18;
  rec__inc__increasing_indicator__first = result____split_fields19;
  rec__inc__increasing_indicator__second = result____split_fields20 } })) and
  ((result15 = true) <-> (result____split_fields18 = true)))

axiom H48 : (result15 = true)

axiom H49 : ((o13 = first({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = result____split_fields18;
  rec__inc__increasing_indicator__first = result____split_fields19;
  rec__inc__increasing_indicator__second = result____split_fields20 } })) and
  (in_range1(o13) and (o13 = to_rep(result____split_fields19))))

axiom H50 : ((o14 = second({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = result____split_fields18;
  rec__inc__increasing_indicator__first = result____split_fields19;
  rec__inc__increasing_indicator__second = result____split_fields20 } })) and
  (in_range1(o14) and (o14 = to_rep(result____split_fields20))))

axiom H51 : (((o13 <  o14) -> (o15 = true)) and ((not (o13 <  o14)) ->
  (o15 = false)))

axiom H52 : (o16 = to_int(o15))

 (* File "inc.adb", line 23, characters 0-0 *)
goal WP_parameter_def : (is_valid({ us_split_fields1 = {
  rec__inc__increasing_indicator__valid = result____split_fields18;
  rec__inc__increasing_indicator__first = result____split_fields19;
  rec__inc__increasing_indicator__second = result____split_fields20 }
  }) = true)
