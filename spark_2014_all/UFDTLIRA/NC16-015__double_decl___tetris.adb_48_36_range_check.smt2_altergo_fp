(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type x_coord

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : x_coord, x_coord -> bool

logic dummy : x_coord

type x_coord__ref = { x_coord__content : x_coord
}

function x_coord__ref___projection(a: x_coord__ref) : x_coord =
  (a).x_coord__content

logic to_rep : x_coord -> int

logic of_rep : int -> x_coord

axiom inversion_axiom :
  (forall x:x_coord [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:x_coord [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type y_coord

predicate in_range2(x: int) = ((1 <= x) and (x <= 16))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : y_coord, y_coord -> bool

logic dummy1 : y_coord

type y_coord__ref = { y_coord__content : y_coord
}

function y_coord__ref___projection(a: y_coord__ref) : y_coord =
  (a).y_coord__content

logic to_rep1 : y_coord -> int

logic of_rep1 : int -> y_coord

axiom inversion_axiom1 :
  (forall x:y_coord [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:y_coord [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type action_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : action_type, action_type -> bool

logic dummy2 : action_type

type action_type__ref = { action_type__content : action_type
}

function action_type__ref___projection(a: action_type__ref) : action_type =
  (a).action_type__content

type piece_type

predicate in_range4(x: int) = ((1 <= x) and (x <= 7))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : piece_type, piece_type -> bool

logic dummy3 : piece_type

type piece_type__ref = { piece_type__content : piece_type
}

function piece_type__ref___projection(a: piece_type__ref) : piece_type =
  (a).piece_type__content

logic to_rep2 : piece_type -> int

logic of_rep2 : int -> piece_type

axiom inversion_axiom2 :
  (forall x:piece_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:piece_type [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__tetris__piece__kind : piece_type;
rec__tetris__piece__y : y_coord; rec__tetris__piece__x : x_coord
}

function us_split_fields_Kind__2__projection(a: us_split_fields) : piece_type =
  (a).rec__tetris__piece__kind

function us_split_fields_Y__projection(a: us_split_fields) : y_coord =
  (a).rec__tetris__piece__y

function us_split_fields_X__projection(a: us_split_fields) : x_coord =
  (a).rec__tetris__piece__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((to_rep2(((a).us_split_fields1).rec__tetris__piece__kind) = to_rep2(((b).us_split_fields1).rec__tetris__piece__kind)) and
  (to_rep1(((a).us_split_fields1).rec__tetris__piece__y) = to_rep1(((b).us_split_fields1).rec__tetris__piece__y))) and
  (to_rep(((a).us_split_fields1).rec__tetris__piece__x) = to_rep(((b).us_split_fields1).rec__tetris__piece__x))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields1).rec__tetris__piece__kind) = to_rep2(((b).us_split_fields1).rec__tetris__piece__kind)) and
  (to_rep1(((a).us_split_fields1).rec__tetris__piece__y) = to_rep1(((b).us_split_fields1).rec__tetris__piece__y))) and
  (to_rep(((a).us_split_fields1).rec__tetris__piece__x) = to_rep(((b).us_split_fields1).rec__tetris__piece__x)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:piece_type. forall a1:y_coord. forall a2:x_coord.
  (0 <= object__size({ us_split_fields1 = { rec__tetris__piece__kind = a;
  rec__tetris__piece__y = a1; rec__tetris__piece__x = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:piece_type. forall a1:y_coord. forall a2:x_coord.
  (0 <= object__alignment({ us_split_fields1 = { rec__tetris__piece__kind =
  a; rec__tetris__piece__y = a1; rec__tetris__piece__x = a2 } })))

logic tetris__piece__kind__first__bit : int

logic tetris__piece__kind__last__bit : int

logic tetris__piece__kind__position : int

axiom tetris__piece__kind__first__bit_axiom :
  (0 <= tetris__piece__kind__first__bit)

axiom tetris__piece__kind__last__bit_axiom :
  (tetris__piece__kind__first__bit <  tetris__piece__kind__last__bit)

axiom tetris__piece__kind__position_axiom :
  (0 <= tetris__piece__kind__position)

logic tetris__piece__y__first__bit : int

logic tetris__piece__y__last__bit : int

logic tetris__piece__y__position : int

axiom tetris__piece__y__first__bit_axiom :
  (0 <= tetris__piece__y__first__bit)

axiom tetris__piece__y__last__bit_axiom :
  (tetris__piece__y__first__bit <  tetris__piece__y__last__bit)

axiom tetris__piece__y__position_axiom : (0 <= tetris__piece__y__position)

logic tetris__piece__x__first__bit : int

logic tetris__piece__x__last__bit : int

logic tetris__piece__x__position : int

axiom tetris__piece__x__first__bit_axiom :
  (0 <= tetris__piece__x__first__bit)

axiom tetris__piece__x__last__bit_axiom :
  (tetris__piece__x__first__bit <  tetris__piece__x__last__bit)

axiom tetris__piece__x__position_axiom : (0 <= tetris__piece__x__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : piece_type

logic dummy5 : y_coord

logic dummy6 : x_coord

type piece__ref = { piece__content : us_rep
}

function piece__ref___projection(a: piece__ref) : us_rep = (a).piece__content

logic attr__ATTRIBUTE_ADDRESS : int

logic direction : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_valid_move : us_rep, int -> bool

logic is_valid_move__function_guard : bool, us_rep, int -> prop

axiom is_valid_move__post_axiom : true

axiom is_valid_move__def_axiom :
  (forall the_piece:piece_type. forall the_piece1:y_coord.
  forall the_piece2:x_coord.
  (forall direction1:int [is_valid_move({ us_split_fields1 = {
  rec__tetris__piece__kind = the_piece; rec__tetris__piece__y = the_piece1;
  rec__tetris__piece__x = the_piece2 } }, direction1)]. ((is_valid_move({
  us_split_fields1 = { rec__tetris__piece__kind = the_piece;
  rec__tetris__piece__y = the_piece1; rec__tetris__piece__x = the_piece2 } },
  direction1) = true) <-> (not ((direction1 = 3) and
  (to_rep1(the_piece1) = 16))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "tetris.ads", line 59, characters 0-0 *)
goal WP_parameter_def :
  (forall the_piece__split_fields:piece_type.
  forall the_piece__split_fields1:y_coord.
  forall the_piece__split_fields2:x_coord. forall xnew:int. forall ynew:int.
  forall result:int. forall xnew1:int. forall result1:int. forall ynew1:int.
  (in_range3(direction) -> ((is_valid_move({ us_split_fields1 = {
  rec__tetris__piece__kind = the_piece__split_fields; rec__tetris__piece__y =
  the_piece__split_fields1; rec__tetris__piece__x = the_piece__split_fields2
  } }, direction) = true) -> (((result = xnew) and
  (xnew1 = to_rep(the_piece__split_fields2))) -> (in_range1(xnew1) ->
  (((result1 = ynew) and (ynew1 = to_rep1(the_piece__split_fields1))) ->
  (in_range2(ynew1) -> ((not (direction = 1)) -> ((not (direction = 2)) ->
  ((direction = 3) -> in_range2((ynew1 + 1))))))))))))
