(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ints__int__min integer) (rec__ints__int__max integer) (rec__ints__int__value integer) (rec__ext__ us_private)))))
(define-fun us_split_fields_Min__projection ((a us_split_fields)) integer (rec__ints__int__min a))
(define-fun us_split_fields_Max__projection ((a us_split_fields)) integer (rec__ints__int__max a))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) integer (rec__ints__int__value a))
(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___4__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__ints__int__min (us_split_fields1 a))) (to_rep (rec__ints__int__min (us_split_fields1 b)))) (= (to_rep (rec__ints__int__max (us_split_fields1 a))) (to_rep (rec__ints__int__max (us_split_fields1 b))))) (= (to_rep (rec__ints__int__value (us_split_fields1 a))) (to_rep (rec__ints__int__value (us_split_fields1 b))))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const ints__int__min__first__bit Int)
(declare-const ints__int__min__last__bit Int)
(declare-const ints__int__min__position Int)
(assert (<= 0 ints__int__min__first__bit))
(assert (< ints__int__min__first__bit ints__int__min__last__bit))
(assert (<= 0 ints__int__min__position))
(declare-const ints__int__max__first__bit Int)
(declare-const ints__int__max__last__bit Int)
(declare-const ints__int__max__position Int)
(assert (<= 0 ints__int__max__first__bit))
(assert (< ints__int__max__first__bit ints__int__max__last__bit))
(assert (<= 0 ints__int__max__position))
(declare-const ints__int__value__first__bit Int)
(declare-const ints__int__value__last__bit Int)
(declare-const ints__int__value__position Int)
(assert (<= 0 ints__int__value__first__bit))
(assert (< ints__int__value__first__bit ints__int__value__last__bit))
(assert (<= 0 ints__int__value__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((int____ref (mk_int____ref (int____content us_rep)))))
(define-fun int____ref___3__projection ((a int____ref)) us_rep (int____content a))
(define-fun default_initial_assumption ((temp___expr_509 us_rep) (temp___skip_top_level_510 Bool)) Bool (= (attr__tag temp___expr_509) us_tag))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep1 (natural) Int)
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__ints__approx_int__precision natural) (rec__ints__int__min1 integer) (rec__ints__int__max1 integer) (rec__ints__int__value1 integer) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Precision__projection ((a us_split_fields2)) natural (rec__ints__approx_int__precision a))
(define-fun us_split_fields_Min__2__projection ((a us_split_fields2)) integer (rec__ints__int__min1 a))
(define-fun us_split_fields_Max__2__projection ((a us_split_fields2)) integer (rec__ints__int__max1 a))
(define-fun us_split_fields_Value__2__projection ((a us_split_fields2)) integer (rec__ints__int__value1 a))
(define-fun us_split_fields___3__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___6__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (natural us_private) us_private)
(declare-fun extract__precision (us_private) natural)
(assert (forall ((precision natural)) (forall ((rec__ext__2 us_private)) (= (extract__precision (hide_ext__ precision rec__ext__2)) precision))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__ints__int__min1 (us_split_fields3 a)) (rec__ints__int__max1 (us_split_fields3 a)) (rec__ints__int__value1 (us_split_fields3 a)) (hide_ext__ (rec__ints__approx_int__precision (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__precision (rec__ext__ (us_split_fields1 r))) (rec__ints__int__min (us_split_fields1 r)) (rec__ints__int__max (us_split_fields1 r)) (rec__ints__int__value (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep1 (rec__ints__approx_int__precision (us_split_fields3 a))) (to_rep1 (rec__ints__approx_int__precision (us_split_fields3 b)))) (= (to_rep (rec__ints__int__min1 (us_split_fields3 a))) (to_rep (rec__ints__int__min1 (us_split_fields3 b))))) (= (to_rep (rec__ints__int__max1 (us_split_fields3 a))) (to_rep (rec__ints__int__max1 (us_split_fields3 b))))) (= (to_rep (rec__ints__int__value1 (us_split_fields3 a))) (to_rep (rec__ints__int__value1 (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const ints__approx_int__precision__first__bit Int)
(declare-const ints__approx_int__precision__last__bit Int)
(declare-const ints__approx_int__precision__position Int)
(assert (<= 0 ints__approx_int__precision__first__bit))
(assert (< ints__approx_int__precision__first__bit ints__approx_int__precision__last__bit))
(assert (<= 0 ints__approx_int__precision__position))
(declare-const ints__int__min__first__bit1 Int)
(declare-const ints__int__min__last__bit1 Int)
(declare-const ints__int__min__position1 Int)
(assert (<= 0 ints__int__min__first__bit1))
(assert (< ints__int__min__first__bit1 ints__int__min__last__bit1))
(assert (<= 0 ints__int__min__position1))
(declare-const ints__int__max__first__bit1 Int)
(declare-const ints__int__max__last__bit1 Int)
(declare-const ints__int__max__position1 Int)
(assert (<= 0 ints__int__max__first__bit1))
(assert (< ints__int__max__first__bit1 ints__int__max__last__bit1))
(assert (<= 0 ints__int__max__position1))
(declare-const ints__int__value__first__bit1 Int)
(declare-const ints__int__value__last__bit1 Int)
(declare-const ints__int__value__position1 Int)
(assert (<= 0 ints__int__value__first__bit1))
(assert (< ints__int__value__first__bit1 ints__int__value__last__bit1))
(assert (<= 0 ints__int__value__position1))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((approx_int__ref (mk_approx_int__ref (approx_int__content us_rep1)))))
(define-fun approx_int__ref___projection ((a approx_int__ref)) us_rep1 (approx_int__content a))
(declare-fun bump__specific_post (Int us_split_fields Int us_split_fields) Bool)
(assert (forall ((ints__bump__arg__fields us_split_fields) (ints__bump__arg__old__fields us_split_fields)) (forall ((arg__attr__tag Int)) (! (=> (bump__specific_post us_tag ints__bump__arg__fields arg__attr__tag ints__bump__arg__old__fields) (< (to_rep (rec__ints__int__value (us_split_fields1 (mk___rep ints__bump__arg__old__fields arg__attr__tag)))) (to_rep (rec__ints__int__value (us_split_fields1 (mk___rep ints__bump__arg__fields arg__attr__tag)))))) :pattern ((bump__specific_post us_tag ints__bump__arg__fields arg__attr__tag ints__bump__arg__old__fields))))))
(assert (forall ((ints__bump__arg__fields us_split_fields) (ints__bump__arg__old__fields us_split_fields)) (forall ((arg__attr__tag Int)) (! (=> (bump__specific_post us_tag1 ints__bump__arg__fields arg__attr__tag ints__bump__arg__old__fields) (< (to_rep (rec__ints__int__value1 (us_split_fields3 (of_base (mk___rep ints__bump__arg__old__fields arg__attr__tag))))) (to_rep (rec__ints__int__value1 (us_split_fields3 (of_base (mk___rep ints__bump__arg__fields arg__attr__tag))))))) :pattern ((bump__specific_post us_tag1 ints__bump__arg__fields arg__attr__tag ints__bump__arg__old__fields))))))
(declare-const arg__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(define-fun default_initial_assumption1 ((temp___expr_529 us_rep1) (temp___skip_top_level_530 Bool)) Bool (= (attr__tag1 temp___expr_529) us_tag1))
(declare-const arg__split_fields integer)
(declare-const arg__split_fields1 integer)
(declare-const arg__split_fields2 integer)
(declare-const arg__split_fields3 us_private)
(declare-const o Int)
(declare-const arg__split_fields4 integer)
(declare-const arg__split_fields5 integer)
(declare-const arg__split_fields6 integer)
(declare-const arg__split_fields7 us_private)
(declare-const arg__split_fields8 integer)
(declare-const arg__split_fields9 integer)
(declare-const arg__split_fields10 integer)
(declare-const arg__split_fields11 us_private)
(declare-const arg__split_fields12 integer)
(declare-const arg__split_fields13 integer)
(declare-const arg__split_fields14 integer)
(declare-const arg__split_fields15 us_private)
(assert (< (to_rep arg__split_fields2) (- (to_rep arg__split_fields1) 10)))
(assert (not (< (to_rep arg__split_fields2) (- (to_rep arg__split_fields1) 10))))
(check-sat)
(exit)
