(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(declare-fun fibonacci (Int) Int)
(declare-fun fibonacci__function_guard (Int Int) Bool)
(assert (forall ((n Int)) (! (=> (and (dynamic_invariant n true true true) (<= n 23)) (dynamic_invariant (fibonacci n) true false true)) :pattern ((fibonacci n)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-const n1 Int)
(declare-const n2 Int)
(declare-const l1 Int)
(declare-const l2 Int)
(declare-const a1 Int)
(declare-const a2 Int)
(declare-const b1 Int)
(declare-const b2 Int)
(declare-const i Int)
(declare-const copy_n1 Int)
(declare-const copy_n2 Int)
(declare-const result Int)
(declare-const copy_n11 Int)
(declare-const result1 Int)
(declare-const copy_n21 Int)
(declare-const result2 Int)
(declare-const a11 Int)
(declare-const result3 Int)
(declare-const a21 Int)
(declare-const result4 Int)
(declare-const b11 Int)
(declare-const result5 Int)
(declare-const b21 Int)
(declare-const result6 Int)
(declare-const i1 Int)
(declare-const n11 Int)
(declare-const a12 Int)
(declare-const b12 Int)
(declare-const i2 Int)
(assert (in_range1 n1))
(assert (in_range1 n2))
(assert (in_range1 l1))
(assert (in_range1 l2))
(assert (and (= n1 n2) (and (= l1 l2) (<= n1 23))))
(assert (=> (<= 0 2147483647) (in_range1 a1)))
(assert (=> (<= 0 2147483647) (in_range1 a2)))
(assert (=> (<= 0 2147483647) (in_range1 b1)))
(assert (=> (<= 0 2147483647) (in_range1 b2)))
(assert (=> (<= 0 2147483647) (in_range1 i)))
(assert (=> (<= 0 2147483647) (in_range1 copy_n1)))
(assert (=> (<= 0 2147483647) (in_range1 copy_n2)))
(assert (= (mk_int__ref result) (mk_int__ref copy_n1)))
(assert (= copy_n11 n1))
(assert (= (mk_int__ref result1) (mk_int__ref copy_n2)))
(assert (= copy_n21 n2))
(assert (= (mk_int__ref result2) (mk_int__ref a1)))
(assert (= a11 1))
(assert (= (mk_int__ref result3) (mk_int__ref a2)))
(assert (= a21 1))
(assert (= (mk_int__ref result4) (mk_int__ref b1)))
(assert (= b11 1))
(assert (= (mk_int__ref result5) (mk_int__ref b2)))
(assert (= b21 1))
(assert (= (mk_int__ref result6) (mk_int__ref i)))
(assert (= i1 2))
(assert (< 2 n1))
(assert (and (and (and (= a12 (fibonacci i2)) (= b12 (fibonacci (- i2 1)))) (<= i2 23)) (= (- (+ n11 i2) 2) copy_n11)))
(assert (and (and (and (=> (<= 0 2147483647) (in_range1 a12)) (in_range1 n11)) (=> (<= 0 2147483647) (in_range1 b12))) (=> (<= 0 2147483647) (in_range1 i2))))
(assert (not (<= i2 23)))
(check-sat)
(exit)
