(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type minutes_t

predicate in_range1(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : minutes_t, minutes_t -> bool

logic dummy1 : minutes_t

type minutes_t__ref = { minutes_t__content : minutes_t
}

function minutes_t__ref___projection(a: minutes_t__ref) : minutes_t =
  (a).minutes_t__content

logic to_rep1 : minutes_t -> int

logic of_rep1 : int -> minutes_t

axiom inversion_axiom1 :
  (forall x:minutes_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:minutes_t [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type seconds_t

predicate in_range2(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : seconds_t, seconds_t -> bool

logic dummy2 : seconds_t

type seconds_t__ref = { seconds_t__content : seconds_t
}

function seconds_t__ref___projection(a: seconds_t__ref) : seconds_t =
  (a).seconds_t__content

logic to_rep2 : seconds_t -> int

logic of_rep2 : int -> seconds_t

axiom inversion_axiom2 :
  (forall x:seconds_t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:seconds_t [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__time__t__hours : natural; rec__time__t__minutes
: minutes_t; rec__time__t__seconds : seconds_t
}

function us_split_fields_Hours__projection(a: us_split_fields) : natural =
  (a).rec__time__t__hours

function us_split_fields_Minutes__projection(a: us_split_fields) : minutes_t =
  (a).rec__time__t__minutes

function us_split_fields_Seconds__projection(a: us_split_fields) : seconds_t =
  (a).rec__time__t__seconds

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__time__t__hours) = to_rep(((b).us_split_fields1).rec__time__t__hours)) and
  (to_rep1(((a).us_split_fields1).rec__time__t__minutes) = to_rep1(((b).us_split_fields1).rec__time__t__minutes))) and
  (to_rep2(((a).us_split_fields1).rec__time__t__seconds) = to_rep2(((b).us_split_fields1).rec__time__t__seconds))) ->
  (bool_eq4(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__time__t__hours) = to_rep(((b).us_split_fields1).rec__time__t__hours)) and
  (to_rep1(((a).us_split_fields1).rec__time__t__minutes) = to_rep1(((b).us_split_fields1).rec__time__t__minutes))) and
  (to_rep2(((a).us_split_fields1).rec__time__t__seconds) = to_rep2(((b).us_split_fields1).rec__time__t__seconds)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:minutes_t. forall a2:seconds_t.
  (0 <= object__size({ us_split_fields1 = { rec__time__t__hours = a;
  rec__time__t__minutes = a1; rec__time__t__seconds = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:minutes_t. forall a2:seconds_t.
  (0 <= object__alignment({ us_split_fields1 = { rec__time__t__hours = a;
  rec__time__t__minutes = a1; rec__time__t__seconds = a2 } })))

logic time__t__hours__first__bit : int

logic time__t__hours__last__bit : int

logic time__t__hours__position : int

axiom time__t__hours__first__bit_axiom : (0 <= time__t__hours__first__bit)

axiom time__t__hours__last__bit_axiom :
  (time__t__hours__first__bit <  time__t__hours__last__bit)

axiom time__t__hours__position_axiom : (0 <= time__t__hours__position)

logic time__t__minutes__first__bit : int

logic time__t__minutes__last__bit : int

logic time__t__minutes__position : int

axiom time__t__minutes__first__bit_axiom :
  (0 <= time__t__minutes__first__bit)

axiom time__t__minutes__last__bit_axiom :
  (time__t__minutes__first__bit <  time__t__minutes__last__bit)

axiom time__t__minutes__position_axiom : (0 <= time__t__minutes__position)

logic time__t__seconds__first__bit : int

logic time__t__seconds__last__bit : int

logic time__t__seconds__position : int

axiom time__t__seconds__first__bit_axiom :
  (0 <= time__t__seconds__first__bit)

axiom time__t__seconds__last__bit_axiom :
  (time__t__seconds__first__bit <  time__t__seconds__last__bit)

axiom time__t__seconds__position_axiom : (0 <= time__t__seconds__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : natural

logic dummy4 : minutes_t

logic dummy5 : seconds_t

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic zero : natural

logic zero1 : minutes_t

logic zero2 : seconds_t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic get_current_time : us_split_fields -> us_rep

logic get_current_time__function_guard : us_rep, us_split_fields -> prop

axiom get_current_time__post_axiom : true

axiom get_current_time__def_axiom :
  (forall clock__current_time__fields:natural.
  forall clock__current_time__fields1:minutes_t.
  forall clock__current_time__fields2:seconds_t [get_current_time({
  rec__time__t__hours = clock__current_time__fields; rec__time__t__minutes =
  clock__current_time__fields1; rec__time__t__seconds =
  clock__current_time__fields2 })]. (get_current_time({ rec__time__t__hours =
  clock__current_time__fields; rec__time__t__minutes =
  clock__current_time__fields1; rec__time__t__seconds =
  clock__current_time__fields2 }) = { us_split_fields1 = {
  rec__time__t__hours = clock__current_time__fields; rec__time__t__minutes =
  clock__current_time__fields1; rec__time__t__seconds =
  clock__current_time__fields2 } }))

axiom zero__def_axiom : ((zero = of_rep(0)) and ((zero1 = of_rep1(0)) and
  (zero2 = of_rep2(0))))

 (* File "time.ads", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall current_time__split_fields:natural.
  forall current_time__split_fields1:minutes_t.
  forall current_time__split_fields2:seconds_t. forall o:seconds_t.
  forall o1:minutes_t. forall o2:natural. forall o3:natural.
  forall o4:minutes_t. forall o5:seconds_t. forall temp___180:natural.
  forall temp___1801:minutes_t. forall temp___1802:seconds_t.
  forall result:natural. forall result1:minutes_t. forall result2:seconds_t.
  forall current_time__split_fields3:natural.
  forall current_time__split_fields4:minutes_t.
  forall current_time__split_fields5:seconds_t.
  forall current_time__split_fields6:natural.
  forall current_time__split_fields7:minutes_t.
  forall current_time__split_fields8:seconds_t.
  forall current_time__split_fields9:natural.
  forall current_time__split_fields10:minutes_t.
  forall current_time__split_fields11:seconds_t. ((((((to_rep2(o) = 0) and
  ((to_rep1(o1) = 0) and ((to_rep(o2) = 0) and ((o2 = o3) and ((o1 = o4) and
  (o = o5)))))) and ((temp___180 = o3) and ((temp___1801 = o4) and
  (temp___1802 = o5)))) and ((temp___180 = zero) and
  ((temp___1801 = zero1) and (temp___1802 = zero2)))) and
  ((((result = current_time__split_fields) and
  ((result1 = current_time__split_fields1) and
  (result2 = current_time__split_fields2))) and
  ((current_time__split_fields3 = zero) and
  ((current_time__split_fields4 = zero1) and
  (current_time__split_fields5 = zero2)))) and
  (((current_time__split_fields6 = current_time__split_fields3) and
  ((current_time__split_fields7 = current_time__split_fields4) and
  (current_time__split_fields8 = current_time__split_fields5))) and
  ((current_time__split_fields9 = current_time__split_fields3) and
  ((current_time__split_fields10 = current_time__split_fields4) and
  (current_time__split_fields11 = current_time__split_fields5)))))) ->
  (bool_eq4(get_current_time({ rec__time__t__hours =
  current_time__split_fields6; rec__time__t__minutes =
  current_time__split_fields7; rec__time__t__seconds =
  current_time__split_fields8 }), { us_split_fields1 = {
  rec__time__t__hours = zero; rec__time__t__minutes = zero1;
  rec__time__t__seconds = zero2 } }) = true)))
