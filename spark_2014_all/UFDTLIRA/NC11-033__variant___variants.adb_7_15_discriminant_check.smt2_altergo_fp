(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type e

predicate in_range(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : e, e -> bool

logic dummy : e

type e__ref = { e__content : e
}

function e__ref___projection(a: e__ref) : e = (a).e__content

logic to_rep : e -> int

logic of_rep : int -> e

axiom inversion_axiom : (forall x:e [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:e [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__variants__t__c : e
}

function us_split_discrs___projection(a: us_split_discrs) : e =
  (a).rec__variants__t__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__variants__t__d : integer; rec__variants__t__e :
integer
}

function us_split_fields_D__projection(a: us_split_fields) : integer =
  (a).rec__variants__t__d

function us_split_fields_E__projection(a: us_split_fields) : integer =
  (a).rec__variants__t__e

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate variants__t__d__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__variants__t__c) = 0)

predicate variants__t__e__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__variants__t__c) = 1)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((((to_rep(((a).us_split_discrs1).rec__variants__t__c) = to_rep(((b).us_split_discrs1).rec__variants__t__c)) and
  (variants__t__d__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__variants__t__d) = to_rep1(((b).us_split_fields1).rec__variants__t__d)))) and
  (variants__t__e__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__variants__t__e) = to_rep1(((b).us_split_fields1).rec__variants__t__e)))) ->
  (bool_eq3(a, b) = true)) and
  ((not (((to_rep(((a).us_split_discrs1).rec__variants__t__c) = to_rep(((b).us_split_discrs1).rec__variants__t__c)) and
  (variants__t__d__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__variants__t__d) = to_rep1(((b).us_split_fields1).rec__variants__t__d)))) and
  (variants__t__e__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__variants__t__e) = to_rep1(((b).us_split_fields1).rec__variants__t__e))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:e. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size({ us_split_discrs1 = { rec__variants__t__c = a };
  us_split_fields1 = { rec__variants__t__d = a1; rec__variants__t__e = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:e. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__variants__t__c = a };
  us_split_fields1 = { rec__variants__t__d = a1; rec__variants__t__e = a2 };
  attr__constrained = a3 })))

logic variants__t__c__first__bit : int

logic variants__t__c__last__bit : int

logic variants__t__c__position : int

axiom variants__t__c__first__bit_axiom : (0 <= variants__t__c__first__bit)

axiom variants__t__c__last__bit_axiom :
  (variants__t__c__first__bit <  variants__t__c__last__bit)

axiom variants__t__c__position_axiom : (0 <= variants__t__c__position)

logic variants__t__d__first__bit : int

logic variants__t__d__last__bit : int

logic variants__t__d__position : int

axiom variants__t__d__first__bit_axiom : (0 <= variants__t__d__first__bit)

axiom variants__t__d__last__bit_axiom :
  (variants__t__d__first__bit <  variants__t__d__last__bit)

axiom variants__t__d__position_axiom : (0 <= variants__t__d__position)

logic variants__t__e__first__bit : int

logic variants__t__e__last__bit : int

logic variants__t__e__position : int

axiom variants__t__e__first__bit_axiom : (0 <= variants__t__e__first__bit)

axiom variants__t__e__last__bit_axiom :
  (variants__t__e__first__bit <  variants__t__e__last__bit)

axiom variants__t__e__position_axiom : (0 <= variants__t__e__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : e

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : bool

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

predicate in_range2(rec__variants__t__c1: int, a: us_rep) =
  (rec__variants__t__c1 = to_rep(((a).us_split_discrs1).rec__variants__t__c))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:e. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size1({ us_split_discrs1 = { rec__variants__t__c = a };
  us_split_fields1 = { rec__variants__t__d = a1; rec__variants__t__e = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:e. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__variants__t__c = a };
  us_split_fields1 = { rec__variants__t__d = a1; rec__variants__t__e = a2 };
  attr__constrained = a3 })))

logic variants__t__c__first__bit1 : int

logic variants__t__c__last__bit1 : int

logic variants__t__c__position1 : int

axiom variants__t__c__first__bit_axiom1 : (0 <= variants__t__c__first__bit1)

axiom variants__t__c__last__bit_axiom1 :
  (variants__t__c__first__bit1 <  variants__t__c__last__bit1)

axiom variants__t__c__position_axiom1 : (0 <= variants__t__c__position1)

logic variants__t__e__first__bit1 : int

logic variants__t__e__last__bit1 : int

logic variants__t__e__position1 : int

axiom variants__t__e__first__bit_axiom1 : (0 <= variants__t__e__first__bit1)

axiom variants__t__e__last__bit_axiom1 :
  (variants__t__e__first__bit1 <  variants__t__e__last__bit1)

axiom variants__t__e__position_axiom1 : (0 <= variants__t__e__position1)

logic variants__t__d__first__bit1 : int

logic variants__t__d__last__bit1 : int

logic variants__t__d__position1 : int

axiom variants__t__d__first__bit_axiom1 : (0 <= variants__t__d__first__bit1)

axiom variants__t__d__last__bit_axiom1 :
  (variants__t__d__first__bit1 <  variants__t__d__last__bit1)

axiom variants__t__d__position_axiom1 : (0 <= variants__t__d__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy6 : e

logic dummy7 : integer

logic dummy8 : integer

logic dummy9 : bool

type ta__ref = { ta__content : us_rep
}

function ta__ref___projection(a: ta__ref) : us_rep = (a).ta__content

predicate in_range3(rec__variants__t__c1: int, a: us_rep) =
  (rec__variants__t__c1 = to_rep(((a).us_split_discrs1).rec__variants__t__c))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:e. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__size2({ us_split_discrs1 = { rec__variants__t__c = a };
  us_split_fields1 = { rec__variants__t__d = a1; rec__variants__t__e = a2 };
  attr__constrained = a3 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:e. forall a1:integer. forall a2:integer. forall a3:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__variants__t__c = a };
  us_split_fields1 = { rec__variants__t__d = a1; rec__variants__t__e = a2 };
  attr__constrained = a3 })))

logic variants__t__c__first__bit2 : int

logic variants__t__c__last__bit2 : int

logic variants__t__c__position2 : int

axiom variants__t__c__first__bit_axiom2 : (0 <= variants__t__c__first__bit2)

axiom variants__t__c__last__bit_axiom2 :
  (variants__t__c__first__bit2 <  variants__t__c__last__bit2)

axiom variants__t__c__position_axiom2 : (0 <= variants__t__c__position2)

logic variants__t__d__first__bit2 : int

logic variants__t__d__last__bit2 : int

logic variants__t__d__position2 : int

axiom variants__t__d__first__bit_axiom2 : (0 <= variants__t__d__first__bit2)

axiom variants__t__d__last__bit_axiom2 :
  (variants__t__d__first__bit2 <  variants__t__d__last__bit2)

axiom variants__t__d__position_axiom2 : (0 <= variants__t__d__position2)

logic variants__t__e__first__bit2 : int

logic variants__t__e__last__bit2 : int

logic variants__t__e__position2 : int

axiom variants__t__e__first__bit_axiom2 : (0 <= variants__t__e__first__bit2)

axiom variants__t__e__last__bit_axiom2 :
  (variants__t__e__first__bit2 <  variants__t__e__last__bit2)

axiom variants__t__e__position_axiom2 : (0 <= variants__t__e__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy10 : e

logic dummy11 : integer

logic dummy12 : integer

logic dummy13 : bool

type tb__ref = { tb__content : us_rep
}

function tb__ref___projection(a: tb__ref) : us_rep = (a).tb__content

logic x : e

logic x1 : integer

logic x2 : integer

logic x3 : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic y__split_discrs : e

logic y__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic z__split_discrs : e

logic z__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "variants.ads", line 14, characters 0-0 *)
goal WP_parameter_def :
  (forall y__split_fields:integer. forall y__split_fields1:integer.
  forall z__split_fields:integer. forall z__split_fields1:integer.
  forall us:int. forall result:integer. forall result1:integer.
  forall z__split_fields2:integer. forall z__split_fields3:integer.
  (((0 = to_rep(y__split_discrs)) and (y__attr__constrained = true)) ->
  (((1 = to_rep(z__split_discrs)) and (z__attr__constrained = true)) ->
  (((us = to_rep(x)) and in_range(to_rep(x))) ->
  (((((result = z__split_fields) and (result1 = z__split_fields1)) and
  ((z__split_fields2 = y__split_fields) and
  (z__split_fields3 = y__split_fields1))) and
  (z__split_discrs = y__split_discrs)) -> (0 = to_rep(x)))))))
