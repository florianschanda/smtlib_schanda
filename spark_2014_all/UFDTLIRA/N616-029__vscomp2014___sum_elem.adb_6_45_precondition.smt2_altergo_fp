(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index

predicate in_range1(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep : index -> int

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type partition_index

predicate in_range2(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : partition_index, partition_index -> bool

logic dummy1 : partition_index

type partition_index__ref = { partition_index__content : partition_index
}

function partition_index__ref___projection(a: partition_index__ref) : partition_index =
  (a).partition_index__content

type index_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type us_split_fields = { rec__sum_elem__interval__first : index;
rec__sum_elem__interval__last : index
}

function us_split_fields_First__projection(a: us_split_fields) : index =
  (a).rec__sum_elem__interval__first

function us_split_fields_Last__projection(a: us_split_fields) : index =
  (a).rec__sum_elem__interval__last

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__sum_elem__interval__first) = to_rep(((b).us_split_fields1).rec__sum_elem__interval__first)) and
  (to_rep(((a).us_split_fields1).rec__sum_elem__interval__last) = to_rep(((b).us_split_fields1).rec__sum_elem__interval__last))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__sum_elem__interval__first) = to_rep(((b).us_split_fields1).rec__sum_elem__interval__first)) and
  (to_rep(((a).us_split_fields1).rec__sum_elem__interval__last) = to_rep(((b).us_split_fields1).rec__sum_elem__interval__last)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:index. forall a1:index. (0 <= object__size({ us_split_fields1 = {
  rec__sum_elem__interval__first = a; rec__sum_elem__interval__last = a1 }
  })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:index. forall a1:index. (0 <= object__alignment({
  us_split_fields1 = { rec__sum_elem__interval__first = a;
  rec__sum_elem__interval__last = a1 } })))

logic sum_elem__interval__first__first__bit : int

logic sum_elem__interval__first__last__bit : int

logic sum_elem__interval__first__position : int

axiom sum_elem__interval__first__first__bit_axiom :
  (0 <= sum_elem__interval__first__first__bit)

axiom sum_elem__interval__first__last__bit_axiom :
  (sum_elem__interval__first__first__bit <  sum_elem__interval__first__last__bit)

axiom sum_elem__interval__first__position_axiom :
  (0 <= sum_elem__interval__first__position)

logic sum_elem__interval__last__first__bit : int

logic sum_elem__interval__last__last__bit : int

logic sum_elem__interval__last__position : int

axiom sum_elem__interval__last__first__bit_axiom :
  (0 <= sum_elem__interval__last__first__bit)

axiom sum_elem__interval__last__last__bit_axiom :
  (sum_elem__interval__last__first__bit <  sum_elem__interval__last__last__bit)

axiom sum_elem__interval__last__position_axiom :
  (0 <= sum_elem__interval__last__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : index

logic dummy4 : index

type interval__ref = { interval__content : us_rep
}

function interval__ref___projection(a: interval__ref) : us_rep =
  (a).interval__content

type element_type__ref = { element_type__content : us_rep
}

function element_type__ref___projection(a: element_type__ref) : us_rep =
  (a).element_type__content

type capacity_range

predicate in_range4(x: int) = ((0 <= x) and (x <= 10001))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : capacity_range, capacity_range -> bool

logic dummy5 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__sum_elem__partitions__vector__capacity :
capacity_range
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range =
  (a).rec__sum_elem__partitions__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__sum_elem__partitions__vector : us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields2) : us_main_type =
  (a).rec__sum_elem__partitions__vector

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = { rec__sum_elem__partitions__vector__capacity = a };
  us_split_fields3 = { rec__sum_elem__partitions__vector = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__sum_elem__partitions__vector__capacity = a }; us_split_fields3 = {
  rec__sum_elem__partitions__vector = a1 } })))

logic sum_elem__partitions__vector__capacity__first__bit : int

logic sum_elem__partitions__vector__capacity__last__bit : int

logic sum_elem__partitions__vector__capacity__position : int

axiom sum_elem__partitions__vector__capacity__first__bit_axiom :
  (0 <= sum_elem__partitions__vector__capacity__first__bit)

axiom sum_elem__partitions__vector__capacity__last__bit_axiom :
  (sum_elem__partitions__vector__capacity__first__bit <  sum_elem__partitions__vector__capacity__last__bit)

axiom sum_elem__partitions__vector__capacity__position_axiom :
  (0 <= sum_elem__partitions__vector__capacity__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy6 : capacity_range

logic dummy7 : us_main_type

type vector__ref = { vector__content : us_rep1
}

function vector__ref___projection(a: vector__ref) : us_rep1 =
  (a).vector__content

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic to_rep1 : capacity_range -> int

logic of_rep1 : int -> capacity_range

axiom inversion_axiom1 :
  (forall x:capacity_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:capacity_range [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic capacity__function_guard : int, us_rep1 -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__sum_elem__partitions__vector__capacity =
  container }; us_split_fields3 = { rec__sum_elem__partitions__vector =
  container1 } })]. ((((of_int(1) = true) -> (length({ us_split_discrs1 = {
  rec__sum_elem__partitions__vector__capacity = container };
  us_split_fields3 = { rec__sum_elem__partitions__vector = container1 }
  }) <= to_rep1(container))) and ((not (of_int(1) = true)) -> (length({
  us_split_discrs1 = { rec__sum_elem__partitions__vector__capacity =
  container }; us_split_fields3 = { rec__sum_elem__partitions__vector =
  container1 } }) <= 10001))) and in_range4(length({ us_split_discrs1 = {
  rec__sum_elem__partitions__vector__capacity = container };
  us_split_fields3 = { rec__sum_elem__partitions__vector = container1 } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq7 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic model__ : us_rep1 -> us_rep2

logic model____function_guard : us_rep2, us_rep1 -> prop

logic last_index__function_guard : int, us_rep1 -> prop

type extended_index

predicate in_range5(x: int) = (((- 1) <= x) and (x <= 10001))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : extended_index, extended_index -> bool

logic dummy9 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

logic first_index__function_guard : int, us_rep1 -> prop

type element_type__ref1 = { element_type__content1 : us_rep
}

function element_type__ref___2__projection(a: element_type__ref1) : us_rep =
  (a).element_type__content1

logic get : us_rep2, int -> us_rep

logic get__function_guard : us_rep, us_rep2, int -> prop

logic element__function_guard : us_rep, us_rep1, int -> prop

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size3({
  us_split_discrs1 = { rec__sum_elem__partitions__vector__capacity = a };
  us_split_fields3 = { rec__sum_elem__partitions__vector = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__sum_elem__partitions__vector__capacity = a }; us_split_fields3 = {
  rec__sum_elem__partitions__vector = a1 } })))

logic sum_elem__partitions__vector__capacity__first__bit1 : int

logic sum_elem__partitions__vector__capacity__last__bit1 : int

logic sum_elem__partitions__vector__capacity__position1 : int

axiom sum_elem__partitions__vector__capacity__first__bit_axiom1 :
  (0 <= sum_elem__partitions__vector__capacity__first__bit1)

axiom sum_elem__partitions__vector__capacity__last__bit_axiom1 :
  (sum_elem__partitions__vector__capacity__first__bit1 <  sum_elem__partitions__vector__capacity__last__bit1)

axiom sum_elem__partitions__vector__capacity__position_axiom1 :
  (0 <= sum_elem__partitions__vector__capacity__position1)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy10 : capacity_range

logic dummy11 : us_main_type

type partition__ref = { partition__content : us_rep1
}

function partition__ref___projection(a: partition__ref) : us_rep1 =
  (a).partition__content

logic p : capacity_range

logic p1 : us_main_type

logic attr__ATTRIBUTE_ADDRESS : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type count_type

predicate in_range6(x1: int) = ((0 <= x1) and (x1 <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x1:int. forall y:int [bool_eq9(x1, y)]. (((x1 = y) -> (bool_eq9(x1,
  y) = true)) and ((not (x1 = y)) -> (bool_eq9(x1, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : count_type, count_type -> bool

logic dummy12 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2 [user_eq6(a, b)].
  (((forall n:int. (((0 <= n) and (n <= ((- 1) + length1(a)))) ->
    (bool_eq5(get(a, n), get(b, n)) = true))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((0 <= n) and (n <= ((- 1) + length1(a)))) ->
        (bool_eq5(get(a, n), get(b, n)) = true)))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length1(a), length1(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__sum_elem__partitions__vector__capacity =
  container }; us_split_fields3 = { rec__sum_elem__partitions__vector =
  container1 } })]. (length1(model__({ us_split_discrs1 = {
  rec__sum_elem__partitions__vector__capacity = container };
  us_split_fields3 = { rec__sum_elem__partitions__vector = container1 }
  })) = length({ us_split_discrs1 = {
  rec__sum_elem__partitions__vector__capacity = container };
  us_split_fields3 = { rec__sum_elem__partitions__vector = container1 } })))

type extended_index1

predicate in_range7(x1: int) = (((- 1) <= x1) and (x1 <= 10000))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x1:int. forall y:int [bool_eq10(x1, y)]. (((x1 = y) ->
  (bool_eq10(x1, y) = true)) and ((not (x1 = y)) -> (bool_eq10(x1,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : extended_index1, extended_index1 -> bool

logic dummy13 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  ((((- 1) + length1(container)) <= 10000) and
  in_range6(length1(container))))

axiom get__post_axiom : true

 (* File "a-cofove.ads", line 807, characters 0-0 *)
goal WP_parameter_def : (in_range2(x) -> ((((0 <= x) and (x <= (length({
  us_split_discrs1 = { rec__sum_elem__partitions__vector__capacity = p };
  us_split_fields3 = { rec__sum_elem__partitions__vector = p1 } }) - 1))) and
  (forall j:int. (((0 <= j) and (j <= ((- 1) + length1(model__({
  us_split_discrs1 = { rec__sum_elem__partitions__vector__capacity = p };
  us_split_fields3 = { rec__sum_elem__partitions__vector = p1 } }))))) ->
  in_range1((to_rep(((get(model__({ us_split_discrs1 = {
  rec__sum_elem__partitions__vector__capacity = p }; us_split_fields3 = {
  rec__sum_elem__partitions__vector = p1 } }),
  j)).us_split_fields1).rec__sum_elem__interval__first) + to_rep(((get(model__({
  us_split_discrs1 = { rec__sum_elem__partitions__vector__capacity = p };
  us_split_fields3 = { rec__sum_elem__partitions__vector = p1 } }),
  j)).us_split_fields1).rec__sum_elem__interval__last)))))) -> (0 <= x)))
