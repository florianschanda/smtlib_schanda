(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__dispatch_in_contract__root__f1 : integer;
rec__ext__ : us_private
}

function us_split_fields_F1__projection(a: us_split_fields) : integer =
  (a).rec__dispatch_in_contract__root__f1

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__dispatch_in_contract__root__f1) = to_rep(((b).us_split_fields1).rec__dispatch_in_contract__root__f1)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__dispatch_in_contract__root__f1) = to_rep(((b).us_split_fields1).rec__dispatch_in_contract__root__f1))) ->
  (bool_eq2(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = a; rec__ext__ = a1 }; attr__tag = a2
  })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = a; rec__ext__ = a1 }; attr__tag = a2
  })))

logic dispatch_in_contract__root__f1__first__bit : int

logic dispatch_in_contract__root__f1__last__bit : int

logic dispatch_in_contract__root__f1__position : int

axiom dispatch_in_contract__root__f1__first__bit_axiom :
  (0 <= dispatch_in_contract__root__f1__first__bit)

axiom dispatch_in_contract__root__f1__last__bit_axiom :
  (dispatch_in_contract__root__f1__first__bit <  dispatch_in_contract__root__f1__last__bit)

axiom dispatch_in_contract__root__f1__position_axiom :
  (0 <= dispatch_in_contract__root__f1__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : us_private

logic dummy3 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

logic less_than_max : us_rep -> bool

logic less_than_max__function_guard : bool, us_rep -> prop

logic less_than_max1 : int, us_rep -> bool

logic less_than_max__function_guard1 : bool, int, us_rep -> prop

logic o__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq3 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type us_split_fields2 = { rec__dispatch_in_contract__child__f2 : integer;
rec__dispatch_in_contract__root__f11 : integer; rec__ext__1 : us_private
}

function us_split_fields_F2__projection(a: us_split_fields2) : integer =
  (a).rec__dispatch_in_contract__child__f2

function us_split_fields_F1__2__projection(a: us_split_fields2) : integer =
  (a).rec__dispatch_in_contract__root__f11

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__f2 : us_private -> integer

axiom extract__f2__conv :
  (forall f2:integer.
  (forall rec__ext__2:us_private. (extract__f2(hide_ext__(f2,
  rec__ext__2)) = f2)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 =
  ((a).us_split_fields3).rec__dispatch_in_contract__root__f11; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__dispatch_in_contract__child__f2,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 =
  extract__f2(((r).us_split_fields1).rec__ext__);
  rec__dispatch_in_contract__root__f11 =
  ((r).us_split_fields1).rec__dispatch_in_contract__root__f1; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields3).rec__dispatch_in_contract__child__f2) = to_rep(((b).us_split_fields3).rec__dispatch_in_contract__child__f2)) and
  (to_rep(((a).us_split_fields3).rec__dispatch_in_contract__root__f11) = to_rep(((b).us_split_fields3).rec__dispatch_in_contract__root__f11))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields3).rec__dispatch_in_contract__child__f2) = to_rep(((b).us_split_fields3).rec__dispatch_in_contract__child__f2)) and
  (to_rep(((a).us_split_fields3).rec__dispatch_in_contract__root__f11) = to_rep(((b).us_split_fields3).rec__dispatch_in_contract__root__f11)))) ->
  (bool_eq4(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size1({ us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 = a;
  rec__dispatch_in_contract__root__f11 = a1; rec__ext__1 = a2 }; attr__tag1 =
  a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 = a;
  rec__dispatch_in_contract__root__f11 = a1; rec__ext__1 = a2 }; attr__tag1 =
  a3 })))

logic dispatch_in_contract__child__f2__first__bit : int

logic dispatch_in_contract__child__f2__last__bit : int

logic dispatch_in_contract__child__f2__position : int

axiom dispatch_in_contract__child__f2__first__bit_axiom :
  (0 <= dispatch_in_contract__child__f2__first__bit)

axiom dispatch_in_contract__child__f2__last__bit_axiom :
  (dispatch_in_contract__child__f2__first__bit <  dispatch_in_contract__child__f2__last__bit)

axiom dispatch_in_contract__child__f2__position_axiom :
  (0 <= dispatch_in_contract__child__f2__position)

logic dispatch_in_contract__root__f1__first__bit1 : int

logic dispatch_in_contract__root__f1__last__bit1 : int

logic dispatch_in_contract__root__f1__position1 : int

axiom dispatch_in_contract__root__f1__first__bit_axiom1 :
  (0 <= dispatch_in_contract__root__f1__first__bit1)

axiom dispatch_in_contract__root__f1__last__bit_axiom1 :
  (dispatch_in_contract__root__f1__first__bit1 <  dispatch_in_contract__root__f1__last__bit1)

axiom dispatch_in_contract__root__f1__position_axiom1 :
  (0 <= dispatch_in_contract__root__f1__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : us_private

logic dummy7 : int

type child__ref = { child__content : us_rep1
}

function child__ref___projection(a: child__ref) : us_rep1 =
  (a).child__content

logic less_than_max__2 : us_rep1 -> bool

logic less_than_max__2__function_guard : bool, us_rep1 -> prop

logic less_than_max__21 : int, us_rep1 -> bool

logic less_than_max__2__function_guard1 : bool, int, us_rep1 -> prop

axiom less_than_max__post_axiom : true

axiom less_than_max__post__dispatch_axiom : true

axiom dispatch_in_contract__root__compat_axiom :
  (forall o:integer. forall o1:us_private. forall o2:int
  [less_than_max1(us_tag, { us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = o; rec__ext__ = o1 }; attr__tag = o2
  })]. (to_int(less_than_max({ us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = o; rec__ext__ = o1 }; attr__tag = o2
  })) = to_int(less_than_max1(us_tag, { us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = o; rec__ext__ = o1 }; attr__tag = o2
  }))))

axiom dispatch_in_contract__child__compat_axiom :
  (forall o:integer. forall o1:us_private. forall o2:int
  [less_than_max1(us_tag1, { us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = o; rec__ext__ = o1 }; attr__tag = o2
  })]. (to_int(less_than_max__2(of_base({ us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = o; rec__ext__ = o1 }; attr__tag = o2
  }))) = to_int(less_than_max1(us_tag1, { us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = o; rec__ext__ = o1 }; attr__tag = o2
  }))))

axiom less_than_max__def_axiom :
  (forall o:integer. forall o1:us_private. forall o2:int [less_than_max({
  us_split_fields1 = { rec__dispatch_in_contract__root__f1 = o; rec__ext__ =
  o1 }; attr__tag = o2 })]. ((less_than_max({ us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = o; rec__ext__ = o1 }; attr__tag = o2
  }) = true) <-> (to_rep(o) <  2147483647)))

axiom less_than_max__2__post_axiom : true

axiom less_than_max__2__post__dispatch_axiom : true

axiom dispatch_in_contract__child__compat_axiom1 :
  (forall o:integer. forall o1:integer. forall o2:us_private. forall o3:int
  [less_than_max__21(us_tag1, { us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 = o;
  rec__dispatch_in_contract__root__f11 = o1; rec__ext__1 = o2 }; attr__tag1 =
  o3 })]. (to_int(less_than_max__2({ us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 = o;
  rec__dispatch_in_contract__root__f11 = o1; rec__ext__1 = o2 }; attr__tag1 =
  o3 })) = to_int(less_than_max__21(us_tag1, { us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 = o;
  rec__dispatch_in_contract__root__f11 = o1; rec__ext__1 = o2 }; attr__tag1 =
  o3 }))))

axiom less_than_max__2__def_axiom :
  (forall o:integer. forall o1:integer. forall o2:us_private. forall o3:int
  [less_than_max__2({ us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 = o;
  rec__dispatch_in_contract__root__f11 = o1; rec__ext__1 = o2 }; attr__tag1 =
  o3 })]. ((less_than_max__2({ us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 = o;
  rec__dispatch_in_contract__root__f11 = o1; rec__ext__1 = o2 }; attr__tag1 =
  o3 }) = true) <-> ((to_rep(o1) <  2147483647) and
  (to_rep(o) <  2147483647))))

logic o__split_fields : integer

logic o__split_fields1 : us_private

logic o : int

axiom H : (less_than_max({ us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 = o__split_fields; rec__ext__ =
  o__split_fields1 }; attr__tag = o__attr__tag }) = true)

 (* File "dispatch_in_contract.ads", line 6, characters 0-0 *)
goal WP_parameter_def : in_range((to_rep(o__split_fields) + 1))
