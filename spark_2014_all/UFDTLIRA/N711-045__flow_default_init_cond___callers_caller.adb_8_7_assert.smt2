(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dic__pr_record_t__x integer) (rec__dic__pr_record_t__y integer)))))
(define-fun us_split_fields_X__2__projection ((a us_split_fields)) integer (rec__dic__pr_record_t__x a))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer (rec__dic__pr_record_t__y a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__dic__pr_record_t__x (us_split_fields1 a))) (to_rep (rec__dic__pr_record_t__x (us_split_fields1 b)))) (= (to_rep (rec__dic__pr_record_t__y (us_split_fields1 a))) (to_rep (rec__dic__pr_record_t__y (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dic__pr_record_t__x__first__bit Int)
(declare-const dic__pr_record_t__x__last__bit Int)
(declare-const dic__pr_record_t__x__position Int)
(assert (<= 0 dic__pr_record_t__x__first__bit))
(assert (< dic__pr_record_t__x__first__bit dic__pr_record_t__x__last__bit))
(assert (<= 0 dic__pr_record_t__x__position))
(declare-const dic__pr_record_t__y__first__bit Int)
(declare-const dic__pr_record_t__y__last__bit Int)
(declare-const dic__pr_record_t__y__position Int)
(assert (<= 0 dic__pr_record_t__y__first__bit))
(assert (< dic__pr_record_t__y__first__bit dic__pr_record_t__y__last__bit))
(assert (<= 0 dic__pr_record_t__y__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((pr_record_t__ref (mk_pr_record_t__ref (pr_record_t__content us_rep)))))
(define-fun pr_record_t__ref___projection ((a pr_record_t__ref)) us_rep (pr_record_t__content a))
(declare-fun add3 (us_rep) Int)
(declare-fun add3__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-fun add2 (us_rep) Int)
(declare-fun add2__function_guard (Int us_rep) Bool)
(define-fun default_initial_assumption ((temp___expr_167 us_rep) (temp___skip_top_level_168 Bool)) Bool (and (= (to_rep (rec__dic__pr_record_t__x (us_split_fields1 temp___expr_167))) 0) (= (to_rep (rec__dic__pr_record_t__y (us_split_fields1 temp___expr_167))) 0)))
(assert (forall ((r us_rep)) (! (dynamic_invariant (add3 r) true false true true) :pattern ((add3 r)))))
(assert (forall ((r us_rep)) (! (= (add3 r) (add2 r)) :pattern ((add3 r)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (forall ((r us_rep)) (! (dynamic_invariant (add2 r) true false true true) :pattern ((add2 r)))))
(declare-const r__split_fields integer)
(declare-const r__split_fields1 integer)
(assert (and (= (to_rep r__split_fields) 0) (= (to_rep r__split_fields1) 0)))
(assert (not (= (add3 (mk___rep (mk___split_fields r__split_fields r__split_fields1))) 0)))
(check-sat)
(exit)
