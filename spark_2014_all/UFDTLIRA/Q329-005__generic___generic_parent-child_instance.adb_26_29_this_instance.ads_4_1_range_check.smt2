(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort element 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 9)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (element element) Bool)
(declare-const dummy element)
(declare-datatypes () ((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content a))
(define-fun dynamic_invariant ((temp___expr_586 Int) (temp___is_init_582 Bool) (temp___skip_constant_583 Bool) (temp___do_toplevel_584 Bool) (temp___do_typ_inv_585 Bool)) Bool (=> (or (= temp___is_init_582 true) (<= 0 9)) (in_range temp___expr_586)))
(declare-fun to_rep (element) Int)
(declare-fun of_rep (Int) element)
(assert (forall ((x element)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x element)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__this_parent__object__a element) (rec__ext__ us_private)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) element (rec__this_parent__object__a a))
(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___4__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__this_parent__object__a (us_split_fields1 a))) (to_rep (rec__this_parent__object__a (us_split_fields1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const this_parent__object__a__first__bit Int)
(declare-const this_parent__object__a__last__bit Int)
(declare-const this_parent__object__a__position Int)
(assert (<= 0 this_parent__object__a__first__bit))
(assert (< this_parent__object__a__first__bit this_parent__object__a__last__bit))
(assert (<= 0 this_parent__object__a__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((object__ref (mk_object__ref (object__content us_rep)))))
(define-fun object__ref___projection ((a object__ref)) us_rep (object__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__this_instance__object__b element) (rec__this_parent__object__a1 element) (rec__ext__1 us_private)))))
(define-fun us_split_fields_B__projection ((a us_split_fields2)) element (rec__this_instance__object__b a))
(define-fun us_split_fields_A__2__projection ((a us_split_fields2)) element (rec__this_parent__object__a1 a))
(define-fun us_split_fields___3__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___6__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (element us_private) us_private)
(declare-fun extract__b (us_private) element)
(assert (forall ((b element)) (forall ((rec__ext__2 us_private)) (= (extract__b (hide_ext__ b rec__ext__2)) b))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__this_parent__object__a1 (us_split_fields3 a)) (hide_ext__ (rec__this_instance__object__b (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__b (rec__ext__ (us_split_fields1 r))) (rec__this_parent__object__a (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__this_instance__object__b (us_split_fields3 a))) (to_rep (rec__this_instance__object__b (us_split_fields3 b)))) (= (to_rep (rec__this_parent__object__a1 (us_split_fields3 a))) (to_rep (rec__this_parent__object__a1 (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const this_instance__object__b__first__bit Int)
(declare-const this_instance__object__b__last__bit Int)
(declare-const this_instance__object__b__position Int)
(assert (<= 0 this_instance__object__b__first__bit))
(assert (< this_instance__object__b__first__bit this_instance__object__b__last__bit))
(assert (<= 0 this_instance__object__b__position))
(declare-const this_parent__object__a__first__bit1 Int)
(declare-const this_parent__object__a__last__bit1 Int)
(declare-const this_parent__object__a__position1 Int)
(assert (<= 0 this_parent__object__a__first__bit1))
(assert (< this_parent__object__a__first__bit1 this_parent__object__a__last__bit1))
(assert (<= 0 this_parent__object__a__position1))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((object__ref1 (mk_object__ref1 (object__content1 us_rep1)))))
(define-fun object__ref___2__projection ((a object__ref1)) us_rep1 (object__content1 a))
(define-fun default_initial_assumption ((temp___expr_606 us_rep1) (temp___skip_top_level_607 Bool)) Bool (= (attr__tag1 temp___expr_606) us_tag1))
(declare-const this__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun default_initial_assumption1 ((temp___expr_594 us_rep) (temp___skip_top_level_595 Bool)) Bool (= (attr__tag temp___expr_594) us_tag))
(declare-const this__split_fields element)
(declare-const this__split_fields1 element)
(declare-const this__split_fields2 us_private)
(declare-const step Int)
(declare-const o Int)
(declare-const o1 element)
(declare-const o2 element)
(declare-const o3 element)
(declare-const o4 us_private)
(declare-const temp___617 element)
(declare-const temp___6171 element)
(declare-const temp___6172 us_private)
(declare-const temp___6173 Int)
(declare-const this__split_fields3 element)
(declare-const this__split_fields4 element)
(declare-const this__split_fields5 us_private)
(declare-const result Int)
(declare-const step1 Int)
(declare-const result1 element)
(declare-const result2 element)
(declare-const result3 us_private)
(declare-const this__split_fields6 element)
(declare-const this__split_fields7 element)
(declare-const this__split_fields8 us_private)
(assert (= result step))
(assert (= step1 1))
(assert (in_range step1))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (and (= o (+ (to_rep this__split_fields1) step1)) (in_range (+ (to_rep this__split_fields1) step1)))))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= (to_rep o1) o)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= this__split_fields o2)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= o1 o3)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= this__split_fields2 o4)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= temp___617 o2)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= temp___6171 o3)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= temp___6172 o4)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= this__attr__tag temp___6173)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= result1 this__split_fields)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= result2 this__split_fields1)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= result3 this__split_fields2)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= temp___617 this__split_fields6)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= temp___6171 this__split_fields7)))
(assert (=> (<= (to_rep this__split_fields1) (- 9 step1)) (= temp___6172 this__split_fields8)))
(assert (=> (not (<= (to_rep this__split_fields1) (- 9 step1))) (= this__split_fields this__split_fields6)))
(assert (=> (not (<= (to_rep this__split_fields1) (- 9 step1))) (= this__split_fields1 this__split_fields7)))
(assert (=> (not (<= (to_rep this__split_fields1) (- 9 step1))) (= this__split_fields2 this__split_fields8)))
(assert (=> (not (<= (to_rep this__split_fields1) (- 9 step1))) (= this__split_fields3 this__split_fields6)))
(assert (=> (not (<= (to_rep this__split_fields1) (- 9 step1))) (= this__split_fields4 this__split_fields7)))
(assert (=> (not (<= (to_rep this__split_fields1) (- 9 step1))) (= this__split_fields5 this__split_fields8)))
(assert (<= (+ 0 step1) (to_rep this__split_fields6)))
(assert (not (in_range (- (to_rep this__split_fields6) step1))))
(check-sat)
(exit)
