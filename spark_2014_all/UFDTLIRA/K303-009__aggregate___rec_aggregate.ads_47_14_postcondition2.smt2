(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__rec_aggregate__r2__x integer) (rec__rec_aggregate__r2__y integer)))))
(define-fun us_split_fields_X__2__projection ((a us_split_fields)) integer (rec__rec_aggregate__r2__x a))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer (rec__rec_aggregate__r2__y a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__rec_aggregate__r2__x (us_split_fields1 a))) (to_rep (rec__rec_aggregate__r2__x (us_split_fields1 b)))) (= (to_rep (rec__rec_aggregate__r2__y (us_split_fields1 a))) (to_rep (rec__rec_aggregate__r2__y (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const rec_aggregate__r2__x__first__bit Int)
(declare-const rec_aggregate__r2__x__last__bit Int)
(declare-const rec_aggregate__r2__x__position Int)
(assert (<= 0 rec_aggregate__r2__x__first__bit))
(assert (< rec_aggregate__r2__x__first__bit rec_aggregate__r2__x__last__bit))
(assert (<= 0 rec_aggregate__r2__x__position))
(declare-const rec_aggregate__r2__y__first__bit Int)
(declare-const rec_aggregate__r2__y__last__bit Int)
(declare-const rec_aggregate__r2__y__position Int)
(assert (<= 0 rec_aggregate__r2__y__first__bit))
(assert (< rec_aggregate__r2__y__first__bit rec_aggregate__r2__y__last__bit))
(assert (<= 0 rec_aggregate__r2__y__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((r2__ref (mk_r2__ref (r2__content us_rep)))))
(define-fun r2__ref___projection ((a r2__ref)) us_rep (r2__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__rec_aggregate__r3__x integer) (rec__rec_aggregate__r3__y integer) (rec__rec_aggregate__r3__z us_rep)))))
(define-fun us_split_fields_X__3__projection ((a us_split_fields2)) integer (rec__rec_aggregate__r3__x a))
(define-fun us_split_fields_Y__2__projection ((a us_split_fields2)) integer (rec__rec_aggregate__r3__y a))
(define-fun us_split_fields_Z__projection ((a us_split_fields2)) us_rep (rec__rec_aggregate__r3__z a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep (rec__rec_aggregate__r3__x (us_split_fields3 a))) (to_rep (rec__rec_aggregate__r3__x (us_split_fields3 b)))) (= (to_rep (rec__rec_aggregate__r3__y (us_split_fields3 a))) (to_rep (rec__rec_aggregate__r3__y (us_split_fields3 b))))) (= (bool_eq (rec__rec_aggregate__r3__z (us_split_fields3 a)) (rec__rec_aggregate__r3__z (us_split_fields3 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const rec_aggregate__r3__x__first__bit Int)
(declare-const rec_aggregate__r3__x__last__bit Int)
(declare-const rec_aggregate__r3__x__position Int)
(assert (<= 0 rec_aggregate__r3__x__first__bit))
(assert (< rec_aggregate__r3__x__first__bit rec_aggregate__r3__x__last__bit))
(assert (<= 0 rec_aggregate__r3__x__position))
(declare-const rec_aggregate__r3__y__first__bit Int)
(declare-const rec_aggregate__r3__y__last__bit Int)
(declare-const rec_aggregate__r3__y__position Int)
(assert (<= 0 rec_aggregate__r3__y__first__bit))
(assert (< rec_aggregate__r3__y__first__bit rec_aggregate__r3__y__last__bit))
(assert (<= 0 rec_aggregate__r3__y__position))
(declare-const rec_aggregate__r3__z__first__bit Int)
(declare-const rec_aggregate__r3__z__last__bit Int)
(declare-const rec_aggregate__r3__z__position Int)
(assert (<= 0 rec_aggregate__r3__z__first__bit))
(assert (< rec_aggregate__r3__z__first__bit rec_aggregate__r3__z__last__bit))
(assert (<= 0 rec_aggregate__r3__z__position))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((r3__ref (mk_r3__ref (r3__content us_rep1)))))
(define-fun r3__ref___projection ((a r3__ref)) us_rep1 (r3__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 2))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(declare-const one Int)
(declare-const r__split_fields integer)
(declare-const r__split_fields1 integer)
(declare-const r__split_fields2 integer)
(declare-const r__split_fields3 integer)
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const o4 integer)
(declare-const o5 integer)
(declare-const o6 integer)
(declare-const o7 integer)
(declare-const o8 integer)
(declare-const o9 integer)
(declare-const temp___204 integer)
(declare-const temp___2041 integer)
(declare-const temp___2042 integer)
(declare-const temp___2043 integer)
(declare-const o10 integer)
(declare-const o11 integer)
(declare-const o12 integer)
(declare-const o13 integer)
(declare-const o14 integer)
(declare-const o15 integer)
(declare-const o16 integer)
(declare-const o17 integer)
(declare-const o18 integer)
(declare-const o19 integer)
(declare-const o20 integer)
(declare-const o21 integer)
(declare-const temp___205 us_rep1)
(declare-const o22 integer)
(declare-const o23 us_split_fields)
(declare-const o24 us_rep)
(declare-const o25 integer)
(declare-const o26 integer)
(declare-const o27 us_split_fields2)
(declare-const temp___206 us_rep1)
(declare-const o28 integer)
(declare-const o29 us_split_fields)
(declare-const o30 us_rep)
(declare-const o31 integer)
(declare-const o32 us_split_fields2)
(declare-const temp___207 us_rep1)
(declare-const o33 integer)
(declare-const o34 us_split_fields)
(declare-const o35 us_rep)
(declare-const o36 integer)
(declare-const o37 us_split_fields2)
(declare-const temp___208 us_rep1)
(declare-const result us_split_fields__ref1)
(declare-const r__split_fields4 us_split_fields2)
(declare-const result1 us_split_fields__ref1)
(declare-const r__split_fields5 us_split_fields2)
(declare-const result2 us_split_fields__ref1)
(declare-const r__split_fields6 us_split_fields2)
(declare-const result3 us_split_fields__ref1)
(declare-const r__split_fields7 us_split_fields2)
(declare-const result4 us_split_fields__ref1)
(declare-const r__split_fields8 us_split_fields2)
(declare-const r__split_fields9 us_split_fields__ref1)
(declare-const r__split_fields10 us_split_fields2)
(define-fun r__split_fields11 () us_split_fields__ref1 (mk___split_fields__ref1 (mk___split_fields1 r__split_fields r__split_fields1 (mk___rep (mk___split_fields r__split_fields2 r__split_fields3)))))
(assert (in_range one))
(assert (in_range b))
(assert (= one 1))
(assert (=> (= b 1) (= (to_rep o) one)))
(assert (=> (= b 1) (= o o1)))
(assert (=> (= b 1) (= rliteral o2)))
(assert (=> (= b 1) (= o3 o1)))
(assert (=> (= b 1) (= o4 o2)))
(assert (=> (= b 1) (= (to_rep o5) one)))
(assert (=> (= b 1) (= o5 o6)))
(assert (=> (= b 1) (= rliteral o7)))
(assert (=> (= b 1) (= o8 o3)))
(assert (=> (= b 1) (= o9 o4)))
(assert (=> (= b 1) (= temp___204 o6)))
(assert (=> (= b 1) (= temp___2041 o7)))
(assert (=> (= b 1) (= temp___2042 o8)))
(assert (=> (= b 1) (= temp___2043 o9)))
(assert (=> (= b 1) (= result r__split_fields11)))
(assert (=> (= b 1) (= r__split_fields4 (mk___split_fields1 temp___204 temp___2041 (mk___rep (mk___split_fields temp___2042 temp___2043))))))
(assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o10) one))))
(assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o11) one))))
(assert (=> (not (= b 1)) (=> (= b 2) (= o11 o12))))
(assert (=> (not (= b 1)) (=> (= b 2) (= o10 o13))))
(assert (=> (not (= b 1)) (=> (= b 2) (= o14 o12))))
(assert (=> (not (= b 1)) (=> (= b 2) (= o15 o13))))
(assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o16) one))))
(assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o17) one))))
(assert (=> (not (= b 1)) (=> (= b 2) (= o17 o18))))
(assert (=> (not (= b 1)) (=> (= b 2) (= o16 o19))))
(assert (=> (not (= b 1)) (=> (= b 2) (= o20 o14))))
(assert (=> (not (= b 1)) (=> (= b 2) (= o21 o15))))
(assert (=> (not (= b 1)) (=> (= b 2) (= temp___205 (mk___rep1 (mk___split_fields1 o18 o19 (mk___rep (mk___split_fields o20 o21))))))))
(assert (=> (not (= b 1)) (=> (= b 2) (= result1 r__split_fields11))))
(assert (=> (not (= b 1)) (=> (= b 2) (= r__split_fields5 (us_split_fields3 temp___205)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o22) one)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= o23 (mk___split_fields rliteral1 o22))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= o24 (mk___rep o23))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o25) one)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o26) one)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= o27 (mk___split_fields1 o26 o25 o24))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= temp___206 (mk___rep1 o27))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= result2 r__split_fields11)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= r__split_fields6 (us_split_fields3 temp___206))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (to_rep o28) one))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= o29 (mk___split_fields rliteral o28)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= o30 (mk___rep o29)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (to_rep o31) one))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= o32 (mk___split_fields1 rliteral o31 o30)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= temp___207 (mk___rep1 o32)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= result3 r__split_fields11))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= r__split_fields7 (us_split_fields3 temp___207)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (to_rep o33) one))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= o34 (mk___split_fields o33 rliteral)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= o35 (mk___rep o34)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (to_rep o36) one))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= o37 (mk___split_fields1 o36 rliteral o35)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= temp___208 (mk___rep1 o37)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= result4 r__split_fields11))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= r__split_fields8 (us_split_fields3 temp___208)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= r__split_fields7 r__split_fields8))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (= r__split_fields6 r__split_fields7)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (= r__split_fields5 r__split_fields6))))
(assert (=> (not (= b 1)) (= r__split_fields4 r__split_fields5)))
(assert (= r__split_fields9 (mk___split_fields__ref1 r__split_fields4)))
(assert (= r__split_fields10 r__split_fields4))
(assert (= b 1))
(assert (not (= (bool_eq1 (mk___rep1 (us_split_fields__content1 r__split_fields9)) (mk___rep1 (mk___split_fields1 (of_rep one) rliteral (mk___rep (mk___split_fields (of_rep one) rliteral))))) true)))
(check-sat)
(exit)
