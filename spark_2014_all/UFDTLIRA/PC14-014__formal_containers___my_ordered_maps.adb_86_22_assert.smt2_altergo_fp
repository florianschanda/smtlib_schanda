(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type count_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep1 : count_type -> int

logic of_rep1 : int -> count_type

axiom inversion_axiom1 :
  (forall x:count_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:count_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__my_ordered_maps__my_rec__f : integer;
rec__my_ordered_maps__my_rec__g : integer
}

function us_split_fields_F__projection(a: us_split_fields) : integer =
  (a).rec__my_ordered_maps__my_rec__f

function us_split_fields_G__projection(a: us_split_fields) : integer =
  (a).rec__my_ordered_maps__my_rec__g

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___10__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__my_ordered_maps__my_rec__f) = to_rep(((b).us_split_fields1).rec__my_ordered_maps__my_rec__f)) and
  (to_rep(((a).us_split_fields1).rec__my_ordered_maps__my_rec__g) = to_rep(((b).us_split_fields1).rec__my_ordered_maps__my_rec__g))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__my_ordered_maps__my_rec__f) = to_rep(((b).us_split_fields1).rec__my_ordered_maps__my_rec__f)) and
  (to_rep(((a).us_split_fields1).rec__my_ordered_maps__my_rec__g) = to_rep(((b).us_split_fields1).rec__my_ordered_maps__my_rec__g)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = a;
  rec__my_ordered_maps__my_rec__g = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = a;
  rec__my_ordered_maps__my_rec__g = a1 } })))

logic my_ordered_maps__my_rec__f__first__bit : int

logic my_ordered_maps__my_rec__f__last__bit : int

logic my_ordered_maps__my_rec__f__position : int

axiom my_ordered_maps__my_rec__f__first__bit_axiom :
  (0 <= my_ordered_maps__my_rec__f__first__bit)

axiom my_ordered_maps__my_rec__f__last__bit_axiom :
  (my_ordered_maps__my_rec__f__first__bit <  my_ordered_maps__my_rec__f__last__bit)

axiom my_ordered_maps__my_rec__f__position_axiom :
  (0 <= my_ordered_maps__my_rec__f__position)

logic my_ordered_maps__my_rec__g__first__bit : int

logic my_ordered_maps__my_rec__g__last__bit : int

logic my_ordered_maps__my_rec__g__position : int

axiom my_ordered_maps__my_rec__g__first__bit_axiom :
  (0 <= my_ordered_maps__my_rec__g__first__bit)

axiom my_ordered_maps__my_rec__g__last__bit_axiom :
  (my_ordered_maps__my_rec__g__first__bit <  my_ordered_maps__my_rec__g__last__bit)

axiom my_ordered_maps__my_rec__g__position_axiom :
  (0 <= my_ordered_maps__my_rec__g__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : integer

logic dummy3 : integer

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref___projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

type key_type__ref = { key_type__content : us_rep
}

function key_type__ref___4__projection(a: key_type__ref) : us_rep =
  (a).key_type__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__my_ordered_maps__n__map__capacity : count_type
}

function us_split_discrs___2__projection(a: us_split_discrs) : count_type =
  (a).rec__my_ordered_maps__n__map__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__my_ordered_maps__n__map : us_main_type
}

function us_split_fields_Map__2__projection(a: us_split_fields2) : us_main_type =
  (a).rec__my_ordered_maps__n__map

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___11__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___12__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  ((((to_rep1(((a).us_split_discrs1).rec__my_ordered_maps__n__map__capacity) = to_rep1(((b).us_split_discrs1).rec__my_ordered_maps__n__map__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__my_ordered_maps__n__map,
  ((b).us_split_fields3).rec__my_ordered_maps__n__map) = true)) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_discrs1).rec__my_ordered_maps__n__map__capacity) = to_rep1(((b).us_split_discrs1).rec__my_ordered_maps__n__map__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__my_ordered_maps__n__map,
  ((b).us_split_fields3).rec__my_ordered_maps__n__map) = true))) ->
  (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = a };
  us_split_fields3 = { rec__my_ordered_maps__n__map = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment1({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = a };
  us_split_fields3 = { rec__my_ordered_maps__n__map = a1 } })))

logic my_ordered_maps__n__map__capacity__first__bit : int

logic my_ordered_maps__n__map__capacity__last__bit : int

logic my_ordered_maps__n__map__capacity__position : int

axiom my_ordered_maps__n__map__capacity__first__bit_axiom :
  (0 <= my_ordered_maps__n__map__capacity__first__bit)

axiom my_ordered_maps__n__map__capacity__last__bit_axiom :
  (my_ordered_maps__n__map__capacity__first__bit <  my_ordered_maps__n__map__capacity__last__bit)

axiom my_ordered_maps__n__map__capacity__position_axiom :
  (0 <= my_ordered_maps__n__map__capacity__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : count_type

logic dummy5 : us_main_type

type map__ref = { map__content : us_rep1
}

function map__ref___4__projection(a: map__ref) : us_rep1 = (a).map__content

type us_split_fields4 = { rec__my_ordered_maps__n__cursor__node : count_type
}

function us_split_fields_Node__2__projection(a: us_split_fields4) : count_type =
  (a).rec__my_ordered_maps__n__cursor__node

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___13__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq6 : us_rep2, us_rep2 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq6(a, b)].
  (((to_rep1(((a).us_split_fields5).rec__my_ordered_maps__n__cursor__node) = to_rep1(((b).us_split_fields5).rec__my_ordered_maps__n__cursor__node)) ->
  (bool_eq6(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields5).rec__my_ordered_maps__n__cursor__node) = to_rep1(((b).us_split_fields5).rec__my_ordered_maps__n__cursor__node))) ->
  (bool_eq6(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:count_type. (0 <= object__size2({ us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = a } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:count_type. (0 <= object__alignment2({ us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = a } })))

logic my_ordered_maps__n__cursor__node__first__bit : int

logic my_ordered_maps__n__cursor__node__last__bit : int

logic my_ordered_maps__n__cursor__node__position : int

axiom my_ordered_maps__n__cursor__node__first__bit_axiom :
  (0 <= my_ordered_maps__n__cursor__node__first__bit)

axiom my_ordered_maps__n__cursor__node__last__bit_axiom :
  (my_ordered_maps__n__cursor__node__first__bit <  my_ordered_maps__n__cursor__node__last__bit)

axiom my_ordered_maps__n__cursor__node__position_axiom :
  (0 <= my_ordered_maps__n__cursor__node__position)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy6 : count_type

type cursor__ref = { cursor__content : us_rep2
}

function cursor__ref___2__projection(a: cursor__ref) : us_rep2 =
  (a).cursor__content

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic length1 : int, us_rep1 -> int

logic length__function_guard1 : int, int, us_rep1 -> prop

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

logic oeq1 : int, us_rep1, us_rep1 -> bool

logic oeq__function_guard1 : bool, int, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq3({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } })]. (user_eq3({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } }) = oeq({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } })))

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })].
  ((length({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  container }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1
  } }) <= to_rep1(container)) and in_range2(length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [length1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } })].
  in_range2(length1(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }))))

type element_type__ref = { element_type__content : us_rep
}

function element_type__ref___7__projection(a: element_type__ref) : us_rep =
  (a).element_type__content

type extended_index

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy7 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep3

logic bool_eq8 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq6 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref___2__projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic get : us_rep3, int -> us_rep

logic get__function_guard : us_rep, us_rep3, int -> prop

logic length2 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

logic last__function_guard : int, us_rep3 -> prop

logic iter_has_element__function_guard : bool, us_rep3, int -> prop

type key_type__ref1 = { key_type__content1 : us_rep2
}

function key_type__ref___6__projection(a: key_type__ref1) : us_rep2 =
  (a).key_type__content1

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep4

logic bool_eq9 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep4. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep4. (0 <= object__alignment4(a)))

logic user_eq7 : us_rep4, us_rep4 -> bool

logic dummy9 : us_rep4

type map__ref1 = { map__content1 : us_rep4
}

function map__ref___6__projection(a: map__ref1) : us_rep4 = (a).map__content1

logic has_key : us_rep4, us_rep2 -> bool

logic has_key__function_guard : bool, us_rep4, us_rep2 -> prop

logic get1 : us_rep4, us_rep2 -> int

logic get__function_guard1 : int, us_rep4, us_rep2 -> prop

logic keys : us_rep1 -> us_rep3

logic keys__function_guard : us_rep3, us_rep1 -> prop

logic positions : us_rep1 -> us_rep4

logic positions__function_guard : us_rep4, us_rep1 -> prop

logic is_empty : us_rep1 -> bool

logic is_empty__function_guard : bool, us_rep1 -> prop

logic is_empty1 : int, us_rep1 -> bool

logic is_empty__function_guard1 : bool, int, us_rep1 -> prop

axiom is_empty__post_axiom :
  (forall container:count_type. forall container1:us_main_type [is_empty({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })].
  ((is_empty({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  container }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1
  } }) = true) <-> (length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }) = 0)))

axiom is_empty__post__dispatch_axiom : true

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep5

logic bool_eq10 : us_rep5, us_rep5 -> bool

logic value__size5 : int

logic object__size5 : us_rep5 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep5 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep5. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep5. (0 <= object__alignment5(a)))

logic user_eq8 : us_rep5, us_rep5 -> bool

logic dummy10 : us_rep5

type map__ref2 = { map__content2 : us_rep5
}

function map__ref___5__projection(a: map__ref2) : us_rep5 = (a).map__content2

logic oeq2 : us_rep5, us_rep5 -> bool

logic oeq__function_guard2 : bool, us_rep5, us_rep5 -> prop

logic oeq__function_guard3 : bool, us_rep3, us_rep3 -> prop

logic model__ : us_rep1 -> us_rep5

logic model____function_guard : us_rep5, us_rep1 -> prop

logic assign__specific_post : int, us_split_fields2, us_split_discrs,
  us_rep1, us_split_fields2 -> prop

type key_type__ref2 = { key_type__content2 : us_rep
}

function key_type__ref___5__projection(a: key_type__ref2) : us_rep =
  (a).key_type__content2

logic get2 : us_rep5, us_rep -> int

logic get__function_guard2 : int, us_rep5, us_rep -> prop

logic key__function_guard : us_rep, us_rep1, us_rep2 -> prop

logic key : int, us_rep1, us_rep2 -> us_rep

logic key__function_guard1 : us_rep, int, us_rep1, us_rep2 -> prop

logic element__function_guard : int, us_rep1, us_rep2 -> prop

logic element : int, us_rep1, us_rep2 -> int

logic element__function_guard1 : int, int, us_rep1, us_rep2 -> prop

type element_type

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq9 : element_type, element_type -> bool

logic dummy11 : element_type

type element_type__ref1 = { element_type__content1 : element_type
}

function element_type__ref___5__projection(a: element_type__ref1) : element_type =
  (a).element_type__content1

logic has_element__function_guard : bool, us_rep1, us_rep2 -> prop

logic has_element : int, us_rep1, us_rep2 -> bool

logic has_element__function_guard1 : bool, int, us_rep1, us_rep2 -> prop

axiom element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [element(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } })].
  in_range4(element(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } })))))

logic keys_included : us_rep5, us_rep5 -> bool

logic keys_included__function_guard : bool, us_rep5, us_rep5 -> prop

logic same_keys__function_guard : bool, us_rep5, us_rep5 -> prop

logic elements_equal_except : us_rep5, us_rep5, us_rep -> bool

logic elements_equal_except__function_guard : bool, us_rep5, us_rep5,
  us_rep -> prop

logic oeq3 : us_rep4, us_rep4 -> bool

logic oeq__function_guard4 : bool, us_rep4, us_rep4 -> prop

logic replace_element__specific_post : int, us_split_fields2,
  us_split_discrs, us_rep2, int, us_split_fields2 -> prop

logic move__specific_post : int, us_split_fields2, us_split_discrs,
  us_split_fields2, us_split_discrs, us_split_fields2,
  us_split_fields2 -> prop

logic has_key1 : us_rep5, us_rep -> bool

logic has_key__function_guard1 : bool, us_rep5, us_rep -> prop

logic contains__function_guard : bool, us_rep1, us_rep -> prop

logic contains : int, us_rep1, us_rep -> bool

logic contains__function_guard1 : bool, int, us_rep1, us_rep -> prop

axiom contains__post__dispatch_axiom : true

logic my_lt__function_guard : bool, us_rep, us_rep -> prop

logic equivalent_keys__function_guard : bool, us_rep, us_rep -> prop

logic ole : us_rep5, us_rep5 -> bool

logic ole__function_guard : bool, us_rep5, us_rep5 -> prop

logic keys_included_except : us_rep5, us_rep5, us_rep -> bool

logic keys_included_except__function_guard : bool, us_rep5, us_rep5,
  us_rep -> prop

logic range_equal__function_guard : bool, us_rep3, us_rep3, int, int -> prop

logic range_shifted__function_guard : bool, us_rep3, us_rep3, int, int,
  int -> prop

logic k_bigger_than_range__function_guard : bool, us_rep3, int, int,
  us_rep -> prop

logic k_smaller_than_range__function_guard : bool, us_rep3, int, int,
  us_rep -> prop

logic k_is_find__function_guard : bool, us_rep3, us_rep, int -> prop

logic p_positions_shifted : us_rep4, us_rep4, int, int -> bool

logic p_positions_shifted__function_guard : bool, us_rep4, us_rep4, int,
  int -> prop

logic insert__specific_post : int, us_split_fields2, us_split_discrs, us_rep,
  int, us_split_fields4, bool, us_split_fields2, us_split_fields4,
  bool -> prop

logic find : us_rep3, us_rep -> int

logic find__function_guard : int, us_rep3, us_rep -> prop

logic insert__2__specific_post : int, us_split_fields2, us_split_discrs,
  us_rep, int, us_split_fields2 -> prop

logic equal_except__function_guard : bool, us_rep3, us_rep3, int -> prop

logic element__2__function_guard : int, us_rep1, us_rep -> prop

logic element__2 : int, us_rep1, us_rep -> int

logic element__2__function_guard1 : int, int, us_rep1, us_rep -> prop

logic include__specific_post : int, us_split_fields2, us_split_discrs,
  us_rep, int, us_split_fields2 -> prop

logic replace__specific_post : int, us_split_fields2, us_split_discrs,
  us_rep, int, us_split_fields2 -> prop

logic exclude__specific_post : int, us_split_fields2, us_split_discrs,
  us_rep, us_split_fields2 -> prop

logic delete__specific_post : int, us_split_fields2, us_split_discrs, us_rep,
  us_split_fields2 -> prop

logic delete__2__specific_post : int, us_split_fields2, us_split_discrs,
  us_split_fields4, us_split_fields2, us_split_fields4 -> prop

logic first : us_rep1 -> us_rep2

logic first__function_guard : us_rep2, us_rep1 -> prop

logic first1 : int, us_rep1 -> us_rep2

logic first__function_guard1 : us_rep2, int, us_rep1 -> prop

axiom first__post_axiom :
  (forall container:count_type. forall container1:us_main_type [first({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })].
  (((length({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  container }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1
  } }) = 0) -> (bool_eq6(first({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = no_element } }) = true)) and
  ((not (length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }) = 0)) ->
  ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), first({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
  { rec__my_ordered_maps__n__map = container1 } })) = true) and
  (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), first({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
  { rec__my_ordered_maps__n__map = container1 } })) = 1)))))

axiom first__post__dispatch_axiom : true

logic next : us_rep1, us_rep2 -> us_rep2

logic next__function_guard : us_rep2, us_rep1, us_rep2 -> prop

logic next1 : int, us_rep1, us_rep2 -> us_rep2

logic next__function_guard1 : us_rep2, int, us_rep1, us_rep2 -> prop

axiom next__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall position:count_type [next({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } })].
  (((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } }) = true) or
  (bool_eq6({ us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  position } }, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = no_element } }) = true)) ->
  ((((bool_eq6({ us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  position } }, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = no_element } }) = true) or
  (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } }) = length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }))) ->
  (bool_eq6(next({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } }), { us_split_fields5 =
  { rec__my_ordered_maps__n__cursor__node = no_element } }) = true)) and
  ((not ((bool_eq6({ us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } }, { us_split_fields5 =
  { rec__my_ordered_maps__n__cursor__node = no_element } }) = true) or
  (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } }) = length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })))) ->
  ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), next({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } })) = true) and
  (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), next({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = position } })) = (get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = position }
  }) + 1))))))))

axiom next__post__dispatch_axiom : true

logic find1 : us_rep1, us_rep -> us_rep2

logic find__function_guard1 : us_rep2, us_rep1, us_rep -> prop

logic find2 : int, us_rep1, us_rep -> us_rep2

logic find__function_guard2 : us_rep2, int, us_rep1, us_rep -> prop

axiom find__post_axiom :
  (forall container:count_type. forall container1:us_main_type.
  (forall key1:integer. forall key2:integer [find1({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } })]. (((not (has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }) = true)) -> ((not (has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), find1({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
  { rec__my_ordered_maps__n__map = container1 } }, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } })) = true)) and (bool_eq6(find1({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }), { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  no_element } }) = true))) and ((has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }) = true) -> (((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), find1({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
  { rec__my_ordered_maps__n__map = container1 } }, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), find1({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
  { rec__my_ordered_maps__n__map = container1 } }, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } })) = find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }))) and ((not (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
  find1({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  container }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1
  } }, { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 }
  })))).us_split_fields1).rec__my_ordered_maps__my_rec__f),
  to_rep(key1)) = true)) and ((bool_lt(to_rep(((get(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
  { rec__my_ordered_maps__n__map = container1 } }), get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
  find1({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  container }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1
  } }, { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 }
  })))).us_split_fields1).rec__my_ordered_maps__my_rec__f),
  to_rep(key1)) = false) -> (not (bool_lt(to_rep(key1), to_rep(((get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
  get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), find1({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
  { rec__my_ordered_maps__n__map = container1 } }, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 }
  })))).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))))))))

axiom find__post__dispatch_axiom : true

predicate in_range5(rec__my_ordered_maps__n__map__capacity1: int,
  a: us_rep1) =
  (rec__my_ordered_maps__n__map__capacity1 = to_rep1(((a).us_split_discrs1).rec__my_ordered_maps__n__map__capacity))

logic value__size6 : int

logic object__size6 : us_rep1 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep1 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size6({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = a };
  us_split_fields3 = { rec__my_ordered_maps__n__map = a1 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment6({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = a };
  us_split_fields3 = { rec__my_ordered_maps__n__map = a1 } })))

logic my_ordered_maps__n__map__capacity__first__bit1 : int

logic my_ordered_maps__n__map__capacity__last__bit1 : int

logic my_ordered_maps__n__map__capacity__position1 : int

axiom my_ordered_maps__n__map__capacity__first__bit_axiom1 :
  (0 <= my_ordered_maps__n__map__capacity__first__bit1)

axiom my_ordered_maps__n__map__capacity__last__bit_axiom1 :
  (my_ordered_maps__n__map__capacity__first__bit1 <  my_ordered_maps__n__map__capacity__last__bit1)

axiom my_ordered_maps__n__map__capacity__position_axiom1 :
  (0 <= my_ordered_maps__n__map__capacity__position1)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy12 : count_type

logic dummy13 : us_main_type

type tlS__ref = { tlS__content : us_rep1
}

function tlS__ref___2__projection(a: tlS__ref) : us_rep1 = (a).tlS__content

axiom user_eq__def_axiom1 :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq10({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } })]. (user_eq10({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } }) = oeq({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } })))

logic l__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range6(rec__my_ordered_maps__n__map__capacity1: int,
  a: us_rep1) =
  (rec__my_ordered_maps__n__map__capacity1 = to_rep1(((a).us_split_discrs1).rec__my_ordered_maps__n__map__capacity))

logic value__size7 : int

logic object__size7 : us_rep1 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep1 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size7({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = a };
  us_split_fields3 = { rec__my_ordered_maps__n__map = a1 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment7({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = a };
  us_split_fields3 = { rec__my_ordered_maps__n__map = a1 } })))

logic my_ordered_maps__n__map__capacity__first__bit2 : int

logic my_ordered_maps__n__map__capacity__last__bit2 : int

logic my_ordered_maps__n__map__capacity__position2 : int

axiom my_ordered_maps__n__map__capacity__first__bit_axiom2 :
  (0 <= my_ordered_maps__n__map__capacity__first__bit2)

axiom my_ordered_maps__n__map__capacity__last__bit_axiom2 :
  (my_ordered_maps__n__map__capacity__first__bit2 <  my_ordered_maps__n__map__capacity__last__bit2)

axiom my_ordered_maps__n__map__capacity__position_axiom2 :
  (0 <= my_ordered_maps__n__map__capacity__position2)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy14 : count_type

logic dummy15 : us_main_type

type tkS__ref = { tkS__content : us_rep1
}

function tkS__ref___2__projection(a: tkS__ref) : us_rep1 = (a).tkS__content

axiom user_eq__def_axiom2 :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq11({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } })]. (user_eq11({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } }) = oeq({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = a }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = a1 } }, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = b }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = b1 } })))

logic k__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom no_element__def_axiom : (no_element = of_rep1(0))

type positive_count_type

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq12 : positive_count_type, positive_count_type -> bool

logic dummy16 : positive_count_type

type positive_count_type__ref = { positive_count_type__content :
positive_count_type
}

function positive_count_type__ref___2__projection(a: positive_count_type__ref) : positive_count_type =
  (a).positive_count_type__content

axiom user_eq__def_axiom3 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq6(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) ->
    (bool_eq4(get(a, n), get(b, n)) = true))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length2(a), length2(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) ->
        (bool_eq4(get(a, n), get(b, n)) = true)))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length2(a), length2(b)), false,
  false)))))

axiom find__post_axiom1 :
  (forall container:us_rep3.
  (forall key1:integer. forall key2:integer [find(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })]. (((0 <  find(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })) -> ((find(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) <= length2(container)) and
  ((not (bool_lt(to_rep(key1), to_rep(((get(container, find(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 }
  }))).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)) and
  ((bool_lt(to_rep(key1), to_rep(((get(container, find(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 }
  }))).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = false) ->
  (not (bool_lt(to_rep(((get(container, find(container, { us_split_fields1 =
  { rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }))).us_split_fields1).rec__my_ordered_maps__my_rec__f),
  to_rep(key1)) = true)))))) and in_range2(find(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })))))

logic length3 : us_rep4 -> int

logic length__function_guard3 : int, us_rep4 -> prop

logic is_empty2 : us_rep4 -> bool

logic is_empty__function_guard2 : bool, us_rep4 -> prop

logic keys_included1 : us_rep4, us_rep4 -> bool

logic keys_included__function_guard1 : bool, us_rep4, us_rep4 -> prop

axiom p_positions_shifted__post_axiom :
  (forall small:us_rep4. forall big:us_rep4.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((in_range7(cut1) and in_range2(count)) ->
  (((p_positions_shifted(small, big, cut1, count) = true) ->
  (((keys_included1(small, big) = true) and
  (forall i:count_type. ((has_key(small, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) = true) -> (((get1(small, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) <  cut1) -> (get1(big, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) = get1(small, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i } }))) and
  ((not (get1(small, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) <  cut1)) -> ((get1(big, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) - count) = get1(small, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }))))))) and
  (forall i:count_type. ((has_key(big, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) = true) -> ((has_key(small,
  { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) = true) or (((cut1 - count) <= (get1(big, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) - count)) and ((get1(big, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) - count) <= (cut1 - 1)))))))) and ((((keys_included1(small,
  big) = true) and
  (forall i:count_type. ((has_key(small, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) = true) -> (((get1(small, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) <  cut1) and (get1(big, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) = get1(small, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i } }))) or
  ((not (get1(small, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) <  cut1)) and ((get1(big, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) - count) = get1(small, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }))))))) and
  (forall i:count_type. ((has_key(big, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) = true) -> ((has_key(small,
  { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) = true) or (((cut1 - count) <= (get1(big, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) - count)) and ((get1(big, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) - count) <= (cut1 - 1))))))) -> (p_positions_shifted(small, big, cut1,
  count) = true))))))

logic length4 : us_rep5 -> int

logic length__function_guard4 : int, us_rep5 -> prop

logic is_empty3 : us_rep5 -> bool

logic is_empty__function_guard3 : bool, us_rep5 -> prop

axiom model____post_axiom : true

axiom keys__post_axiom :
  (forall container:count_type. forall container1:us_main_type [keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })].
  ((((length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } })) = length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })) and
  (forall temp___608:int. ((in_range3(temp___608) and ((1 <= temp___608) and
  (temp___608 <= (0 + length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } })))))) -> (has_key1(model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
  get(keys({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  container }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1
  } }), temp___608)) = true)))) and
  (forall key1:integer. forall key2:integer. ((has_key1(model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) -> ((0 <  find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })) and
  ((not (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 }
  }))).us_split_fields1).rec__my_ordered_maps__my_rec__f),
  to_rep(key1)) = true)) and ((bool_lt(to_rep(((get(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
  { rec__my_ordered_maps__n__map = container1 } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 }
  }))).us_split_fields1).rec__my_ordered_maps__my_rec__f),
  to_rep(key1)) = false) -> (not (bool_lt(to_rep(key1), to_rep(((get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
  find(keys({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  container }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1
  } }), { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 }
  }))).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }))) -> ((find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
  get(keys({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  container }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1
  } }), i)) = i) and (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) ->
    (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
    { rec__my_ordered_maps__n__map = container1 } }),
    i1)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
    to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
    { rec__my_ordered_maps__n__map = container1 } }),
    i)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true))) ->
  (((i <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
    us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container
    }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1 }
    })))) -> (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
    { rec__my_ordered_maps__n__map = container1 } }),
    i)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
    to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
    { rec__my_ordered_maps__n__map = container1 } }),
    i1)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
        us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
        container }; us_split_fields3 = { rec__my_ordered_maps__n__map =
        container1 } })))) -> (bool_lt(to_rep(((get(keys({ us_split_discrs1 =
        { rec__my_ordered_maps__n__map__capacity = container };
        us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
        i)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
        to_rep(((get(keys({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = container };
        us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
        i1)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))) ->
  (match_bool(true, false, false) = true)))) and ((not (i <  length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })))) ->
  (match_bool(true, of_int(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) ->
        (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = container };
        us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
        i1)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
        to_rep(((get(keys({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = container };
        us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
        i)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))) ->
  (((i <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
    us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container
    }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1 }
    })))) -> (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
    { rec__my_ordered_maps__n__map = container1 } }),
    i)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
    to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
    { rec__my_ordered_maps__n__map = container1 } }),
    i1)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
        us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
        container }; us_split_fields3 = { rec__my_ordered_maps__n__map =
        container1 } })))) -> (bool_lt(to_rep(((get(keys({ us_split_discrs1 =
        { rec__my_ordered_maps__n__map__capacity = container };
        us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
        i)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
        to_rep(((get(keys({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = container };
        us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
        i1)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))) ->
  (match_bool(false, false, false) = true)))) and ((not (i <  length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })))) ->
  (match_bool(false, of_int(1), false) = true)))))) and ((not (0 <  i)) ->
  (((i <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
    us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container
    }; us_split_fields3 = { rec__my_ordered_maps__n__map = container1 }
    })))) -> (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
    { rec__my_ordered_maps__n__map = container1 } }),
    i)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
    to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 =
    { rec__my_ordered_maps__n__map = container1 } }),
    i1)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
        us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
        container }; us_split_fields3 = { rec__my_ordered_maps__n__map =
        container1 } })))) -> (bool_lt(to_rep(((get(keys({ us_split_discrs1 =
        { rec__my_ordered_maps__n__map__capacity = container };
        us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
        i)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
        to_rep(((get(keys({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = container };
        us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }),
        i1)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } })))) -> (match_bool(of_int(1),
  of_int(1), false) = true))))))))))

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } })].
  ((not (has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = no_element } }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) = true) ->
  (((1 <= get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } })) and (get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) <= length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = j } }) = true) ->
  ((get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = i } }) = get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = j } })) ->
  (bool_eq6({ us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i
  } }, { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = j }
  }) = true)))))))))

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [oeq({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = left };
  us_split_fields3 = { rec__my_ordered_maps__n__map = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = right };
  us_split_fields3 = { rec__my_ordered_maps__n__map = right1 } })]. ((oeq({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = left };
  us_split_fields3 = { rec__my_ordered_maps__n__map = left1 } }, {
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = right };
  us_split_fields3 = { rec__my_ordered_maps__n__map = right1 } }) = true) <->
  (oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = left }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = left1 } }), model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = right }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = right1 } })) = true)))

axiom oeq__post__dispatch_axiom : true

axiom key__post__dispatch_axiom : true

axiom element__2__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type.
  (forall key1:integer. forall key2:integer [element__2(attr__tag, {
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity = container };
  us_split_fields3 = { rec__my_ordered_maps__n__map = container1 } }, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })].
  in_range4(element__2(attr__tag, { us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = container }; us_split_fields3 = {
  rec__my_ordered_maps__n__map = container1 } }, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } })))))

axiom has_element__post__dispatch_axiom : true

axiom has_key__post_axiom :
  (forall container:us_rep5.
  (forall key1:integer. forall key2:integer [has_key1(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })]. ((of_int(1) = true) ->
  ((exists k:integer. exists k1:integer. ((has_key1(container, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = k;
   rec__my_ordered_maps__my_rec__g = k1 } }) = true) and ((bool_lt(to_rep(k),
   to_rep(key1)) = false) and (bool_lt(to_rep(key1), to_rep(k)) = false)))) ->
  (has_key1(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }) = true)))))

type element_type1

predicate in_range8(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq13 : element_type1, element_type1 -> bool

logic dummy17 : element_type1

type element_type__ref2 = { element_type__content2 : element_type1
}

function element_type__ref___6__projection(a: element_type__ref2) : element_type1 =
  (a).element_type__content2

logic witness : us_rep5, us_rep -> int

logic witness__function_guard : int, us_rep5, us_rep -> prop

logic w_get : us_rep5, int -> int

logic w_get__function_guard : int, us_rep5, int -> prop

axiom get__post_axiom :
  (forall container:us_rep5.
  (forall key1:integer. forall key2:integer [get2(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })]. ((has_key1(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) ->
  (((of_int(1) = true) -> ((get2(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }) = w_get(container, witness(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }))) and
  (forall k:integer. forall k1:integer. ((has_key1(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = k;
  rec__my_ordered_maps__my_rec__g = k1 } }) = true) -> ((((bool_lt(to_rep(k),
  to_rep(key1)) = false) and (bool_lt(to_rep(key1), to_rep(k)) = false)) ->
  (witness(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }) = witness(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = k; rec__my_ordered_maps__my_rec__g = k1 }
  }))) and ((witness(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }) = witness(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = k; rec__my_ordered_maps__my_rec__g = k1 }
  })) -> ((not (bool_lt(to_rep(k), to_rep(key1)) = true)) and
  ((bool_lt(to_rep(k), to_rep(key1)) = false) -> (not (bool_lt(to_rep(key1),
  to_rep(k)) = true)))))))))) and in_range8(get2(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }))))))

axiom length__post_axiom1 :
  (forall container:us_rep5 [length4(container)].
  in_range2(length4(container)))

axiom ole__post_axiom :
  (forall left:us_rep5. forall right:us_rep5 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall key1:integer. forall key2:integer. ((has_key1(left, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) -> ((has_key1(right, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) and (get2(right, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = get2(left, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })))))))

axiom oeq__post_axiom1 :
  (forall left:us_rep5. forall right:us_rep5 [oeq2(left, right)].
  ((oeq2(left, right) = true) <->
  ((forall key1:integer. forall key2:integer. ((has_key1(left, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }) = true) -> ((has_key1(right, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }) = true) and (get2(right, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }) = get2(left, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }))))) and
  (forall key1:integer. forall key2:integer. ((has_key1(right, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) -> (has_key1(left, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep5 [is_empty3(container)].
  ((is_empty3(container) = true) <->
  (forall key1:integer. forall key2:integer. (not (has_key1(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true)))))

axiom keys_included__post_axiom :
  (forall left:us_rep5. forall right:us_rep5 [keys_included(left, right)].
  ((keys_included(left, right) = true) <->
  (forall key1:integer. forall key2:integer. ((has_key1(left, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) -> (has_key1(right, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true)))))

axiom keys_included_except__post_axiom :
  (forall left:us_rep5. forall right:us_rep5.
  (forall new_key:integer. forall new_key1:integer
  [keys_included_except(left, right, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = new_key;
  rec__my_ordered_maps__my_rec__g = new_key1 } })].
  (((keys_included_except(left, right, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = new_key;
  rec__my_ordered_maps__my_rec__g = new_key1 } }) = true) ->
  (forall key1:integer. forall key2:integer. ((has_key1(left, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) ->
  ((not ((not (bool_lt(to_rep(key1), to_rep(new_key)) = true)) and
  ((bool_lt(to_rep(key1), to_rep(new_key)) = false) ->
  (not (bool_lt(to_rep(new_key), to_rep(key1)) = true))))) ->
  (has_key1(right, { us_split_fields1 = { rec__my_ordered_maps__my_rec__f =
  key1; rec__my_ordered_maps__my_rec__g = key2 } }) = true))))) and
  ((forall key1:integer. forall key2:integer. ((has_key1(left, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }) = true) ->
   ((not ((bool_lt(to_rep(key1), to_rep(new_key)) = false) and
   (bool_lt(to_rep(new_key), to_rep(key1)) = false))) -> (has_key1(right, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }) = true)))) ->
  (keys_included_except(left, right, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = new_key;
  rec__my_ordered_maps__my_rec__g = new_key1 } }) = true)))))

axiom elements_equal_except__post_axiom :
  (forall left:us_rep5. forall right:us_rep5.
  (forall new_key:integer. forall new_key1:integer
  [elements_equal_except(left, right, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = new_key;
  rec__my_ordered_maps__my_rec__g = new_key1 } })].
  (((elements_equal_except(left, right, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = new_key;
  rec__my_ordered_maps__my_rec__g = new_key1 } }) = true) ->
  (forall key1:integer. forall key2:integer. ((has_key1(left, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) ->
  ((not ((not (bool_lt(to_rep(key1), to_rep(new_key)) = true)) and
  ((bool_lt(to_rep(key1), to_rep(new_key)) = false) ->
  (not (bool_lt(to_rep(new_key), to_rep(key1)) = true))))) ->
  ((has_key1(right, { us_split_fields1 = { rec__my_ordered_maps__my_rec__f =
  key1; rec__my_ordered_maps__my_rec__g = key2 } }) = true) and (get2(left, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = get2(right, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }))))))) and
  ((forall key1:integer. forall key2:integer. ((has_key1(left, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }) = true) ->
   ((not ((bool_lt(to_rep(key1), to_rep(new_key)) = false) and
   (bool_lt(to_rep(new_key), to_rep(key1)) = false))) -> ((has_key1(right, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }) = true) and (get2(left, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } }) = get2(right, {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
   rec__my_ordered_maps__my_rec__g = key2 } })))))) ->
  (elements_equal_except(left, right, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = new_key;
  rec__my_ordered_maps__my_rec__g = new_key1 } }) = true)))))

logic has_witness : us_rep5, int -> bool

logic has_witness__function_guard : bool, us_rep5, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep5.
  (forall key1:integer. forall key2:integer [witness(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } })]. ((has_key1(container, {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = key1;
  rec__my_ordered_maps__my_rec__g = key2 } }) = true) ->
  ((has_witness(container, witness(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } })) = true) and in_range2(witness(container, { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = key1; rec__my_ordered_maps__my_rec__g =
  key2 } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep5.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range2(witness1) and (has_witness(container, witness1) = true)) ->
  in_range8(w_get(container, witness1)))))

axiom length__post_axiom2 :
  (forall container:us_rep3 [length2(container)].
  (((0 + length2(container)) <= 2147483647) and
  in_range2(length2(container))))

axiom get__post_axiom1 : true

axiom has_key__post_axiom1 :
  (forall container:us_rep4.
  (forall key1:count_type [has_key(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } })]. ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields5 = {
   rec__my_ordered_maps__n__cursor__node = k } }) = true) and (bool_eq6({
   us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = k } }, {
   us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = key1 }
   }) = true))) ->
  (has_key(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }) = true)))))

type element_type2

predicate in_range9(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq14 : element_type2, element_type2 -> bool

logic dummy18 : element_type2

type element_type__ref3 = { element_type__content3 : element_type2
}

function element_type__ref___8__projection(a: element_type__ref3) : element_type2 =
  (a).element_type__content3

logic witness1 : us_rep4, us_rep2 -> int

logic witness__function_guard1 : int, us_rep4, us_rep2 -> prop

logic w_get1 : us_rep4, int -> int

logic w_get__function_guard1 : int, us_rep4, int -> prop

axiom get__post_axiom2 :
  (forall container:us_rep4.
  (forall key1:count_type [get1(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } })]. ((has_key(container, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = key1 }
  }) = true) -> (((of_int(0) = true) -> ((get1(container, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = key1 }
  }) = w_get1(container, witness1(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = k } }) = true) -> ((bool_eq6({
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = k } }, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = key1 }
  }) = true) <-> (witness1(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }) = witness1(container, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = k } }))))))) and
  in_range9(get1(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }))))))

axiom length__post_axiom3 :
  (forall container:us_rep4 [length3(container)].
  in_range2(length3(container)))

axiom oeq__post_axiom2 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  ((oeq3(left, right) = true) <->
  ((forall key1:count_type. ((has_key(left, { us_split_fields5 = {
   rec__my_ordered_maps__n__cursor__node = key1 } }) = true) ->
   ((has_key(right, { us_split_fields5 = {
   rec__my_ordered_maps__n__cursor__node = key1 } }) = true) and (get1(right,
   { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = key1 }
   }) = get1(left, { us_split_fields5 = {
   rec__my_ordered_maps__n__cursor__node = key1 } }))))) and
  (forall key1:count_type. ((has_key(right, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }) = true) -> (has_key(left,
  { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = key1 }
  }) = true))))))

axiom is_empty__post_axiom2 :
  (forall container:us_rep4 [is_empty2(container)].
  ((is_empty2(container) = true) <->
  (forall key1:count_type. (not (has_key(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }) = true)))))

axiom keys_included__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4 [keys_included1(left, right)].
  ((keys_included1(left, right) = true) <->
  (forall key1:count_type. ((has_key(left, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }) = true) ->
  (has_key(right, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }) = true)))))

logic has_witness1 : us_rep4, int -> bool

logic has_witness__function_guard1 : bool, us_rep4, int -> prop

axiom has_witness__post_axiom1 : true

axiom witness__post_axiom1 :
  (forall container:us_rep4.
  (forall key1:count_type [witness1(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } })]. ((has_key(container, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = key1 }
  }) = true) -> ((has_witness1(container, witness1(container, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = key1 }
  })) = true) and in_range2(witness1(container, { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = key1 } }))))))

axiom w_get__post_axiom1 :
  (forall container:us_rep4.
  (forall witness2:int [w_get1(container, witness2)].
  ((in_range2(witness2) and (has_witness1(container, witness2) = true)) ->
  in_range9(w_get1(container, witness2)))))

logic l__split_fields : us_main_type

logic k__split_fields : us_main_type

logic c__split_fields : count_type

logic o : count_type

logic o1 : count_type

logic temp___965 : count_type

logic us : int

logic us1 : int

logic temp___947 : count_type

logic temp___948 : count_type

logic o2 : integer

logic o3 : integer

logic o4 : integer

logic o5 : integer

logic o6 : integer

logic o7 : integer

logic o8 : integer

logic o9 : integer

logic o10 : integer

logic o11 : integer

logic o12 : integer

logic o13 : integer

logic o14 : integer

logic o15 : integer

logic o16 : integer

logic o17 : integer

logic o18 : integer

logic o19 : integer

logic o20 : int

logic o21 : integer

logic o22 : integer

logic o23 : integer

logic o24 : integer

logic o25 : integer

logic o26 : integer

logic o27 : integer

logic o28 : integer

logic o29 : integer

logic o30 : integer

logic o31 : integer

logic o32 : integer

logic o33 : integer

logic o34 : integer

logic o35 : integer

logic o36 : integer

logic o37 : integer

logic o38 : integer

logic o39 : integer

logic o40 : integer

logic o41 : integer

logic o42 : integer

logic o43 : integer

logic o44 : integer

logic o45 : integer

logic o46 : integer

logic o47 : integer

logic o48 : integer

logic o49 : integer

logic o50 : integer

logic temp___960 : count_type

logic o51 : integer

logic o52 : integer

logic o53 : integer

logic o54 : integer

logic o55 : integer

logic o56 : integer

logic temp___962 : count_type

logic o57 : integer

logic o58 : integer

logic o59 : integer

logic o60 : integer

logic o61 : integer

logic o62 : integer

logic o63 : integer

logic o64 : integer

logic o65 : integer

logic o66 : integer

logic o67 : integer

logic o68 : integer

logic result : count_type

logic c__split_fields1 : count_type

logic result1 : count_type

logic c__split_fields2 : count_type

logic my_ordered_maps__n__insert__2__container__fields : us_main_type

logic result2 : us_main_type

logic l__split_fields1 : us_main_type

logic my_ordered_maps__n__insert__2__container__fields1 : us_main_type

logic result3 : us_main_type

logic l__split_fields2 : us_main_type

logic c__split_fields3 : count_type

logic b : bool

logic my_ordered_maps__n__insert__container__fields : us_main_type

logic result4 : us_main_type

logic l__split_fields3 : us_main_type

logic my_ordered_maps__n__replace_element__container__fields : us_main_type

logic result5 : us_main_type

logic l__split_fields4 : us_main_type

logic my_ordered_maps__n__replace__container__fields : us_main_type

logic result6 : us_main_type

logic l__split_fields5 : us_main_type

logic my_ordered_maps__n__assign__target__fields : us_main_type

logic result7 : us_main_type

logic k__split_fields1 : us_main_type

logic my_ordered_maps__n__move__source__fields : us_main_type

logic my_ordered_maps__n__move__target__fields : us_main_type

logic result8 : us_main_type

logic l__split_fields6 : us_main_type

logic result9 : us_main_type

logic k__split_fields2 : us_main_type

logic my_ordered_maps__n__include__container__fields : us_main_type

logic result10 : us_main_type

logic l__split_fields7 : us_main_type

logic my_ordered_maps__n__include__container__fields1 : us_main_type

logic result11 : us_main_type

logic l__split_fields8 : us_main_type

logic my_ordered_maps__n__delete__container__fields : us_main_type

logic result12 : us_main_type

logic l__split_fields9 : us_main_type

logic result13 : count_type

logic c__split_fields4 : count_type

logic c__split_fields5 : count_type

logic my_ordered_maps__n__delete__2__container__fields : us_main_type

logic result14 : us_main_type

logic l__split_fields10 : us_main_type

logic result15 : count_type

logic c__split_fields6 : count_type

logic my_ordered_maps__n__exclude__container__fields : us_main_type

logic result16 : us_main_type

logic l__split_fields11 : us_main_type

logic my_ordered_maps__n__exclude__container__fields1 : us_main_type

logic result17 : us_main_type

logic l__split_fields12 : us_main_type

axiom H : (to_rep1(o) = 0)

axiom H1 : (o = o1)

axiom H2 : (temp___965 = o1)

axiom H3 : (temp___965 = no_element)

axiom H4 : ((us = 10) and in_range2(10))

axiom H5 : ((to_rep1(l__split_discrs) = 10) and (is_empty({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields } }) = true))

axiom H6 : (10 = to_rep1(l__split_discrs))

axiom H7 : ((us1 = 10) and in_range2(10))

axiom H8 : ((to_rep1(k__split_discrs) = 10) and (is_empty({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  k__split_fields } }) = true))

axiom H9 : (10 = to_rep1(k__split_discrs))

axiom H10 : (is_empty({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields }
  }) = true)

axiom H11 : (({ us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  temp___947 } } = first({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields }
  })) and (((bool_eq1(length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }),
  0) = true) -> (bool_eq6({ us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = temp___947 } }, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = no_element }
  }) = true)) and ((not (bool_eq1(length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }),
  0) = true)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = temp___947 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = temp___947 }
  }) = 1)))))

axiom H12 : (result = c__split_fields)

axiom H13 : (c__split_fields1 = temp___947)

axiom H14 : (({ us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  temp___948 } } = next({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  c__split_fields1 } })) and (((match_bool(bool_eq6({ us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields1 } }, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = no_element }
  }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  c__split_fields1 } }), length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields }
  }))) = true) -> (bool_eq6({ us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = temp___948 } }, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = no_element }
  }) = true)) and ((not (match_bool(bool_eq6({ us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields1 } }, {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = no_element }
  }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  c__split_fields1 } }), length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields }
  }))) = true)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = temp___948 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = temp___948 }
  }) = (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  c__split_fields1 } }) + 1))))))

axiom H15 : (result1 = c__split_fields1)

axiom H16 : (c__split_fields2 = temp___948)

axiom H17 : (to_rep(o2) = 1)

axiom H18 : (to_rep(o3) = 1)

axiom H19 : (o3 = o4)

axiom H20 : (o2 = o5)

axiom H21 : (o6 = o4)

axiom H22 : (o7 = o5)

axiom H23 : (((((((((length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields } }) + 1)) and (has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), { us_split_fields1 =
  { rec__my_ordered_maps__my_rec__f = o6; rec__my_ordered_maps__my_rec__g =
  o7 } }) = true)) and (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), { us_split_fields1 =
  { rec__my_ordered_maps__my_rec__f = o6; rec__my_ordered_maps__my_rec__g =
  o7 } })), { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o6;
  rec__my_ordered_maps__my_rec__g = o7 } }) = true)) and (get2(model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), { us_split_fields1 =
  { rec__my_ordered_maps__my_rec__f = o6; rec__my_ordered_maps__my_rec__g =
  o7 } }) = 1)) and (ole(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }),
  model__({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } })) = true)) and
  (keys_included_except(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o6; rec__my_ordered_maps__my_rec__g = o7
  } }) = true)) and
  (forall i:int. (((1 <= i) and (i <= (find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), { us_split_fields1 =
  { rec__my_ordered_maps__my_rec__f = o6; rec__my_ordered_maps__my_rec__g =
  o7 } }) - 1))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }),
  i), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), i)) = true)))) and
  ((forall i:int. (((find(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map =
   my_ordered_maps__n__insert__2__container__fields } }), {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o6;
   rec__my_ordered_maps__my_rec__g = o7 } }) <= i) and (i <= length({
   us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
   l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
   l__split_fields } }))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }),
   i), get(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map =
   my_ordered_maps__n__insert__2__container__fields } }), (i + 1))) = true))) and
  (forall i:int. ((((find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), { us_split_fields1 =
  { rec__my_ordered_maps__my_rec__f = o6; rec__my_ordered_maps__my_rec__g =
  o7 } }) + 1) <= i) and (i <= (length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields }
  }) + 1))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }),
  (i - 1)), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), i)) = true))))) and
  (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields } }),
  positions({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields } }), { us_split_fields1 =
  { rec__my_ordered_maps__my_rec__f = o6; rec__my_ordered_maps__my_rec__g =
  o7 } }), 1) = true))

axiom H24 : (result2 = l__split_fields)

axiom H25 :
  (l__split_fields1 = my_ordered_maps__n__insert__2__container__fields)

axiom H26 : (to_rep(o8) = 2)

axiom H27 : (to_rep(o9) = 2)

axiom H28 : (o9 = o10)

axiom H29 : (o8 = o11)

axiom H30 : (o12 = o10)

axiom H31 : (o13 = o11)

axiom H32 : (((((((((length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }) = (length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields1 } }) + 1)) and (has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o12;
  rec__my_ordered_maps__my_rec__g = o13 } }) = true)) and
  (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o12;
  rec__my_ordered_maps__my_rec__g = o13 } })), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o12; rec__my_ordered_maps__my_rec__g =
  o13 } }) = true)) and (get2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o12;
  rec__my_ordered_maps__my_rec__g = o13 } }) = 2)) and (ole(model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields1 } }), model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } })) = true)) and
  (keys_included_except(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields1 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o12; rec__my_ordered_maps__my_rec__g =
  o13 } }) = true)) and
  (forall i:int. (((1 <= i) and (i <= (find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o12;
  rec__my_ordered_maps__my_rec__g = o13 } }) - 1))) -> (bool_eq4(get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields1 } }), i), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), i)) = true)))) and
  ((forall i:int. (((find(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map =
   my_ordered_maps__n__insert__2__container__fields1 } }), {
   us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o12;
   rec__my_ordered_maps__my_rec__g = o13 } }) <= i) and (i <= length({
   us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
   l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
   l__split_fields1 } }))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields1 } }),
   i), get(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map =
   my_ordered_maps__n__insert__2__container__fields1 } }),
   (i + 1))) = true))) and
  (forall i:int. ((((find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o12;
  rec__my_ordered_maps__my_rec__g = o13 } }) + 1) <= i) and (i <= (length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields1 } }) + 1))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields1 } }),
  (i - 1)), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), i)) = true))))) and
  (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields1 } }),
  positions({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__2__container__fields1 } }), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o12;
  rec__my_ordered_maps__my_rec__g = o13 } }), 1) = true))

axiom H33 : (result3 = l__split_fields1)

axiom H34 :
  (l__split_fields2 = my_ordered_maps__n__insert__2__container__fields1)

axiom H35 : (to_rep(o14) = 1)

axiom H36 : (to_rep(o15) = 1)

axiom H37 : (o15 = o16)

axiom H38 : (o14 = o17)

axiom H39 : ((o18 = o16) and (o19 = o17))

axiom H40 : (((((has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o18; rec__my_ordered_maps__my_rec__g =
  o19 } }) = true) and (has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 } }) = true)) and
  ((not (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }))).us_split_fields1).rec__my_ordered_maps__my_rec__f),
  to_rep(o18)) = true)) and ((bool_lt(to_rep(((get(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }))).us_split_fields1).rec__my_ordered_maps__my_rec__f),
  to_rep(o18)) = false) -> (not (bool_lt(to_rep(o18), to_rep(((get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }))).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true))))) and
  (((0 <  get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 } })) ->
  (((forall i:int. (((1 <= i) and (i <= (get1(positions({ us_split_discrs1 =
    { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 =
    { rec__my_ordered_maps__n__cursor__node = c__split_fields3 } }) - 1))) ->
    (bool_lt(to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } }),
    i)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
    to_rep(o18)) = true))) -> (((get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }) <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }))) ->
  (((forall i:int. ((((get1(positions({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 =
    { rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
    }) + 1) <= i) and (i <= length2(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } })))) ->
    (bool_lt(to_rep(o18), to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } }),
    i)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i:int. ((((get1(positions({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = l__split_discrs };
        us_split_fields3 = { rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } }), {
        us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
        c__split_fields3 } }) + 1) <= i) and (i <= length2(keys({
        us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
        l__split_discrs }; us_split_fields3 = {
        rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } })))) ->
        (bool_lt(to_rep(o18), to_rep(((get(keys({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = l__split_discrs };
        us_split_fields3 = { rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } }),
        i)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))) ->
  (match_bool(true, false, false) = true)))) and ((not (get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }) <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } })))) -> (match_bool(true,
  of_int(1), false) = true)))) and
  ((not (forall i:int. (((1 <= i) and (i <= (get1(positions({
        us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
        l__split_discrs }; us_split_fields3 = {
        rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } }), {
        us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
        c__split_fields3 } }) - 1))) -> (bool_lt(to_rep(((get(keys({
        us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
        l__split_discrs }; us_split_fields3 = {
        rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } }),
        i)).us_split_fields1).rec__my_ordered_maps__my_rec__f),
        to_rep(o18)) = true)))) -> (((get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }) <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }))) ->
  (((forall i:int. ((((get1(positions({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 =
    { rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
    }) + 1) <= i) and (i <= length2(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } })))) ->
    (bool_lt(to_rep(o18), to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } }),
    i)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i:int. ((((get1(positions({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = l__split_discrs };
        us_split_fields3 = { rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } }), {
        us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
        c__split_fields3 } }) + 1) <= i) and (i <= length2(keys({
        us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
        l__split_discrs }; us_split_fields3 = {
        rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } })))) ->
        (bool_lt(to_rep(o18), to_rep(((get(keys({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = l__split_discrs };
        us_split_fields3 = { rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } }),
        i)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))) ->
  (match_bool(false, false, false) = true)))) and ((not (get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }) <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } })))) -> (match_bool(false,
  of_int(1), false) = true)))))) and ((not (0 <  get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 } }))) ->
  (((get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }) <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }))) ->
  (((forall i:int. ((((get1(positions({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 =
    { rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
    }) + 1) <= i) and (i <= length2(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } })))) ->
    (bool_lt(to_rep(o18), to_rep(((get(keys({ us_split_discrs1 = {
    rec__my_ordered_maps__n__map__capacity = l__split_discrs };
    us_split_fields3 = { rec__my_ordered_maps__n__map =
    my_ordered_maps__n__insert__container__fields } }),
    i)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i:int. ((((get1(positions({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = l__split_discrs };
        us_split_fields3 = { rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } }), {
        us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
        c__split_fields3 } }) + 1) <= i) and (i <= length2(keys({
        us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
        l__split_discrs }; us_split_fields3 = {
        rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } })))) ->
        (bool_lt(to_rep(o18), to_rep(((get(keys({ us_split_discrs1 = {
        rec__my_ordered_maps__n__map__capacity = l__split_discrs };
        us_split_fields3 = { rec__my_ordered_maps__n__map =
        my_ordered_maps__n__insert__container__fields } }),
        i)).us_split_fields1).rec__my_ordered_maps__my_rec__f)) = true)))) ->
  (match_bool(of_int(1), false, false) = true)))) and ((not (get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }) <  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } })))) ->
  (match_bool(of_int(1), of_int(1), false) = true)))))) and
  (((has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields2 } }),
  { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o18;
  rec__my_ordered_maps__my_rec__g = o19 } }) = true) ->
  ((((not (b = true)) and (oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields2 } })) = true)) and (((bool_eq1(length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } })), length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields2 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length2(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }))))) ->
  (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), n), get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields2 } }), n)) = true)))) and (not (bool_eq1(length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } })), length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields2 } }))) = false)))) and (oeq3(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields2 } })) = true))) and ((not (has_key1(model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields2 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o18; rec__my_ordered_maps__my_rec__g =
  o19 } }) = true)) -> (((((((((b = true) and (length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields2 } }) + 1))) and (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 } })), {
  us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o18;
  rec__my_ordered_maps__my_rec__g = o19 } }) = true)) and (get2(model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o18; rec__my_ordered_maps__my_rec__g =
  o19 } }) = 3)) and (ole(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields2 } }),
  model__({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } })) = true)) and
  (keys_included_except(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields2 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o18; rec__my_ordered_maps__my_rec__g =
  o19 } }) = true)) and
  (forall i:int. (((1 <= i) and (i <= (get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 } }) - 1))) ->
  (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields2 } }),
  i), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), i)) = true)))) and
  ((forall i:int. (((get1(positions({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map =
   my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
   rec__my_ordered_maps__n__cursor__node = c__split_fields3 } }) <= i) and
   (i <= length({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields2 }
   }))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields2 } }),
   i), get(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map =
   my_ordered_maps__n__insert__container__fields } }), (i + 1))) = true))) and
  (forall i:int. ((((get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 }
  }) + 1) <= i) and (i <= (length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields2 }
  }) + 1))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields2 } }),
  (i - 1)), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), i)) = true))))) and
  (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields2 } }),
  positions({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), get1(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__insert__container__fields } }), { us_split_fields5 = {
  rec__my_ordered_maps__n__cursor__node = c__split_fields3 } }),
  1) = true)))))

axiom H41 : (result4 = l__split_fields2)

axiom H42 :
  (l__split_fields3 = my_ordered_maps__n__insert__container__fields)

axiom H43 : (not (has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields3 } }),
  { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = of_rep(3);
  rec__my_ordered_maps__my_rec__g = of_rep(4) } }) = true))

axiom H44 : (not (b = true))

axiom H45 : (get2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields3 } }),
  get(keys({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields3 } }), get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields3 } }),
  { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  c__split_fields3 } }))) = 1)

axiom H46 : (((((((bool_eq1(length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } })),
  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields3 }
  }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length2(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }))))) ->
  (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }), n), get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields3 } }), n)) = true)))) and (not (bool_eq1(length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } })),
  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields3 }
  }))) = false))) and (oeq3(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }), positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields3 } })) = true)) and (get2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }), get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }),
  get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  c__split_fields3 } }))) = 3)) and (match_bool(keys_included(model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields3 } })), keys_included(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields3 } }),
  model__({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } })),
  false) = true)) and (elements_equal_except(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields3 } }), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }),
  get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace_element__container__fields } }), {
  us_split_fields5 = { rec__my_ordered_maps__n__cursor__node =
  c__split_fields3 } }))) = true))

axiom H47 : (result5 = l__split_fields3)

axiom H48 :
  (l__split_fields4 = my_ordered_maps__n__replace_element__container__fields)

axiom H49 : (to_rep(o21) = 1)

axiom H50 : (to_rep(o22) = 1)

axiom H51 : ((o23 = o22) and (o24 = o21))

axiom H52 : ((o25 = o23) and (o26 = o24))

axiom H53 : ((((((oeq3(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }), positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields4 } })) = true) and (bool_eq4(get(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o25; rec__my_ordered_maps__my_rec__g =
  o26 } })), { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o25;
  rec__my_ordered_maps__my_rec__g = o26 } }) = true)) and
  (((bool_eq1(length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields4 } })),
  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }))) = true) ->
  (forall i:int. (((1 <= i) and (i <= (0 + length2(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields4 }
  }))))) -> ((not (i = find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o25; rec__my_ordered_maps__my_rec__g =
  o26 } }))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields4 } }),
  i), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }), i)) = true))))) and
  (not (bool_eq1(length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields4 } })),
  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }))) = false)))) and
  (get2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o25; rec__my_ordered_maps__my_rec__g =
  o26 } }) = 1)) and (match_bool(keys_included(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields4 } })), keys_included(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields4 } }),
  model__({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } })), false) = true)) and
  (elements_equal_except(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__replace__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields4 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o25; rec__my_ordered_maps__my_rec__g =
  o26 } }) = true))

axiom H54 : (result6 = l__split_fields4)

axiom H55 :
  (l__split_fields5 = my_ordered_maps__n__replace__container__fields)

axiom H56 :
  (forall temp___613:int. ((in_range3(temp___613) and ((1 <= temp___613) and
  (temp___613 <= (0 + length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields5 }
  })))))) ->
  (exists i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields5 } }),
  { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i }
  }) = true) and (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields5 } }),
  get1(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields5 } }),
  { us_split_fields5 = { rec__my_ordered_maps__n__cursor__node = i } })),
  get(keys({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields5 } }), temp___613)) = true)))))

axiom H57 : (((oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = k__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__assign__target__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields5 } })) = true) and (((bool_eq1(length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__assign__target__fields } })), length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields5 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length2(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = k__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__assign__target__fields } }))))) -> (bool_eq4(get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__assign__target__fields } }), n), get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields5 } }), n)) = true)))) and (not (bool_eq1(length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__assign__target__fields } })), length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields5 } }))) = false)))) and (length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields5 }
  }) = length({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__assign__target__fields } })))

axiom H58 : (result7 = k__split_fields)

axiom H59 : (k__split_fields1 = my_ordered_maps__n__assign__target__fields)

axiom H60 : ((((oeq2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__move__target__fields } }), model__({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = k__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = k__split_fields1 }
  })) = true) and (((bool_eq1(length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__move__target__fields } })), length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  k__split_fields1 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length2(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__move__target__fields } }))))) -> (bool_eq4(get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__move__target__fields } }), n), get(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  k__split_fields1 } }), n)) = true)))) and (not (bool_eq1(length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__move__target__fields } })), length2(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  k__split_fields1 } }))) = false)))) and (length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = k__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = k__split_fields1 }
  }) = length({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__move__target__fields } }))) and (length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  k__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__move__source__fields } }) = 0))

axiom H61 : (result8 = l__split_fields5)

axiom H62 : (l__split_fields6 = my_ordered_maps__n__move__target__fields)

axiom H63 : (result9 = k__split_fields1)

axiom H64 : (k__split_fields2 = my_ordered_maps__n__move__source__fields)

axiom H65 : (has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = of_rep(1);
  rec__my_ordered_maps__my_rec__g = of_rep(1) } }) = true)

axiom H66 : (to_rep(o27) = 1)

axiom H67 : (to_rep(o28) = 1)

axiom H68 : ((o29 = o28) and (o30 = o27))

axiom H69 : ((o31 = o29) and (o32 = o30))

axiom H70 : (((has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } }) = true) and (get2(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } }) = 3)) and (((has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o31;
  rec__my_ordered_maps__my_rec__g = o32 } }) = true) -> (((((oeq3(positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), positions({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields6 } })) = true) and (bool_eq4(get(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } })), { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o31;
  rec__my_ordered_maps__my_rec__g = o32 } }) = true)) and
  (((bool_eq1(length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } })),
  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }))) = true) ->
  (forall i:int. (((1 <= i) and (i <= (0 + length2(keys({ us_split_discrs1 =
  { rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 }
  }))))) -> ((not (i = find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } }))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  i), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), i)) = true))))) and
  (not (bool_eq1(length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } })),
  length2(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }))) = false)))) and
  (match_bool(keys_included(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields6 } })), keys_included(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  model__({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } })), false) = true)) and
  (elements_equal_except(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields6 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } }) = true))) and ((not (has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o31;
  rec__my_ordered_maps__my_rec__g = o32 } }) = true)) -> (((((((length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields6 } }) + 1)) and (ole(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  model__({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } })) = true)) and
  (keys_included_except(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), model__({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  l__split_fields6 } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } }) = true)) and (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } })), { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = o31;
  rec__my_ordered_maps__my_rec__g = o32 } }) = true)) and
  (forall i:int. (((1 <= i) and (i <= (find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } }) - 1))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  i), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), i)) = true)))) and
  ((forall i:int. (((find(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map =
   my_ordered_maps__n__include__container__fields } }), { us_split_fields1 =
   { rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
   o32 } }) <= i) and (i <= length({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 }
   }))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
   i), get(keys({ us_split_discrs1 = {
   rec__my_ordered_maps__n__map__capacity = l__split_discrs };
   us_split_fields3 = { rec__my_ordered_maps__n__map =
   my_ordered_maps__n__include__container__fields } }), (i + 1))) = true))) and
  (forall i:int. ((((find(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } }) + 1) <= i) and (i <= (length({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 }
  }) + 1))) -> (bool_eq4(get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  (i - 1)), get(keys({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), i)) = true))))) and
  (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields6 } }),
  positions({ us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), find(keys({
  us_split_discrs1 = { rec__my_ordered_maps__n__map__capacity =
  l__split_discrs }; us_split_fields3 = { rec__my_ordered_maps__n__map =
  my_ordered_maps__n__include__container__fields } }), { us_split_fields1 = {
  rec__my_ordered_maps__my_rec__f = o31; rec__my_ordered_maps__my_rec__g =
  o32 } }), 1) = true)))))

axiom H71 : (result10 = l__split_fields6)

axiom H72 :
  (l__split_fields7 = my_ordered_maps__n__include__container__fields)

 (* File "my_ordered_maps.adb", line 4, characters 0-0 *)
goal WP_parameter_def : (not (has_key1(model__({ us_split_discrs1 = {
  rec__my_ordered_maps__n__map__capacity = l__split_discrs };
  us_split_fields3 = { rec__my_ordered_maps__n__map = l__split_fields7 } }),
  { us_split_fields1 = { rec__my_ordered_maps__my_rec__f = of_rep(3);
  rec__my_ordered_maps__my_rec__g = of_rep(3) } }) = true))
