(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p2__s__x : integer
}

function us_split_fields_X__projection(a: us_split_fields) : integer =
  (a).rec__p2__s__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((to_rep(((a).us_split_fields1).rec__p2__s__x) = to_rep(((b).us_split_fields1).rec__p2__s__x)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__p2__s__x) = to_rep(((b).us_split_fields1).rec__p2__s__x))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. (0 <= object__size({ us_split_fields1 = {
  rec__p2__s__x = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. (0 <= object__alignment({ us_split_fields1 = {
  rec__p2__s__x = a } })))

logic p2__s__x__first__bit : int

logic p2__s__x__last__bit : int

logic p2__s__x__position : int

axiom p2__s__x__first__bit_axiom : (0 <= p2__s__x__first__bit)

axiom p2__s__x__last__bit_axiom :
  (p2__s__x__first__bit <  p2__s__x__last__bit)

axiom p2__s__x__position_axiom : (0 <= p2__s__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

type s__ref = { s__content : us_rep
}

function s__ref___projection(a: s__ref) : us_rep = (a).s__content

type us_split_discrs = { rec__p2__t2__d : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__p2__t2__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__p2__t2__c : us_rep
}

function us_split_fields_C__projection(a: us_split_fields2) : us_rep =
  (a).rec__p2__t2__c

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((((a).us_split_discrs1).rec__p2__t2__d = ((b).us_split_discrs1).rec__p2__t2__d) and
  (user_eq1(((a).us_split_fields3).rec__p2__t2__c,
  ((b).us_split_fields3).rec__p2__t2__c) = true)) -> (bool_eq4(a,
  b) = true)) and
  ((not ((((a).us_split_discrs1).rec__p2__t2__d = ((b).us_split_discrs1).rec__p2__t2__d) and
  (user_eq1(((a).us_split_fields3).rec__p2__t2__c,
  ((b).us_split_fields3).rec__p2__t2__c) = true))) -> (bool_eq4(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:integer. (0 <= object__size1({ us_split_discrs1 =
  { rec__p2__t2__d = a }; us_split_fields3 = { rec__p2__t2__c = {
  us_split_fields1 = { rec__p2__s__x = a1 } } } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:integer. (0 <= object__alignment1({
  us_split_discrs1 = { rec__p2__t2__d = a }; us_split_fields3 = {
  rec__p2__t2__c = { us_split_fields1 = { rec__p2__s__x = a1 } } } })))

logic p2__t2__d__first__bit : int

logic p2__t2__d__last__bit : int

logic p2__t2__d__position : int

axiom p2__t2__d__first__bit_axiom : (0 <= p2__t2__d__first__bit)

axiom p2__t2__d__last__bit_axiom :
  (p2__t2__d__first__bit <  p2__t2__d__last__bit)

axiom p2__t2__d__position_axiom : (0 <= p2__t2__d__position)

logic p2__t2__c__first__bit : int

logic p2__t2__c__last__bit : int

logic p2__t2__c__position : int

axiom p2__t2__c__first__bit_axiom : (0 <= p2__t2__c__first__bit)

axiom p2__t2__c__last__bit_axiom :
  (p2__t2__c__first__bit <  p2__t2__c__last__bit)

axiom p2__t2__c__position_axiom : (0 <= p2__t2__c__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : bool

logic dummy3 : integer

type t2__ref = { t2__content : us_rep1
}

function t2__ref___projection(a: t2__ref) : us_rep1 = (a).t2__content

logic x : bool

logic x1 : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic y : bool

logic y1 : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:integer. forall b:integer [user_eq1({ us_split_fields1 = {
  rec__p2__s__x = a } }, { us_split_fields1 = { rec__p2__s__x = b } })].
  (user_eq1({ us_split_fields1 = { rec__p2__s__x = a } }, {
  us_split_fields1 = { rec__p2__s__x = b } }) = oeq({ us_split_fields1 = {
  rec__p2__s__x = a } }, { us_split_fields1 = { rec__p2__s__x = b } })))

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall x2:integer. forall y2:integer [oeq({ us_split_fields1 = {
  rec__p2__s__x = x2 } }, { us_split_fields1 = { rec__p2__s__x = y2 } })].
  (not (oeq({ us_split_fields1 = { rec__p2__s__x = x2 } }, {
  us_split_fields1 = { rec__p2__s__x = y2 } }) = true)))

 (* File "p2.ads", line 11, characters 0-0 *)
goal WP_parameter_def :
  (forall p2__always_true__result:bool. forall result:bool.
  forall p2__always_true__result1:bool. forall p2__always_true__result2:bool.
  forall p2__always_true__result3:bool. forall p2__always_true__result4:bool.
  forall p2__always_true__result5:bool.
  (forall result1:bool.
  ((((((p2__always_true__result1 = p2__always_true__result2) and
  (p2__always_true__result3 = p2__always_true__result1)) and
  ((result = p2__always_true__result) and
  (p2__always_true__result1 = of_int(1)))) and
  ((p2__always_true__result4 = p2__always_true__result2) and
  (p2__always_true__result5 = p2__always_true__result3))) and
  (result1 = p2__always_true__result4)) ->
  (p2__always_true__result4 = true))))
