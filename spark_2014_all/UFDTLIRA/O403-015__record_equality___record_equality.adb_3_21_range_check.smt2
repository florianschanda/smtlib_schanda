(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__record_equality__root__c natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural (rec__record_equality__root__c a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__record_equality__root__f1 natural) (rec__ext__ us_private)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) natural (rec__record_equality__root__f1 a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__record_equality__root__c (us_split_discrs1 a))) (to_rep (rec__record_equality__root__c (us_split_discrs1 b)))) (= (to_rep (rec__record_equality__root__f1 (us_split_fields1 a))) (to_rep (rec__record_equality__root__f1 (us_split_fields1 b))))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const record_equality__root__c__first__bit Int)
(declare-const record_equality__root__c__last__bit Int)
(declare-const record_equality__root__c__position Int)
(assert (<= 0 record_equality__root__c__first__bit))
(assert (< record_equality__root__c__first__bit record_equality__root__c__last__bit))
(assert (<= 0 record_equality__root__c__position))
(declare-const record_equality__root__f1__first__bit Int)
(declare-const record_equality__root__f1__last__bit Int)
(declare-const record_equality__root__f1__position Int)
(assert (<= 0 record_equality__root__f1__first__bit))
(assert (< record_equality__root__f1__first__bit record_equality__root__f1__last__bit))
(assert (<= 0 record_equality__root__f1__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__record_equality__child__f2 natural) (rec__record_equality__root__f11 natural) (rec__ext__1 us_private)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) natural (rec__record_equality__child__f2 a))
(define-fun us_split_fields_F1__2__projection ((a us_split_fields2)) natural (rec__record_equality__root__f11 a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs2 us_split_discrs) (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_discrs (us_split_discrs2 a))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___6__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (natural us_private) us_private)
(declare-fun extract__f2 (us_private) natural)
(assert (forall ((f2 natural)) (forall ((rec__ext__2 us_private)) (= (extract__f2 (hide_ext__ f2 rec__ext__2)) f2))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a) (mk___split_fields (rec__record_equality__root__f11 (us_split_fields3 a)) (hide_ext__ (rec__record_equality__child__f2 (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r) (mk___split_fields1 (extract__f2 (rec__ext__ (us_split_fields1 r))) (rec__record_equality__root__f1 (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__record_equality__root__c (us_split_discrs2 a))) (to_rep (rec__record_equality__root__c (us_split_discrs2 b)))) (and (= (to_rep (rec__record_equality__child__f2 (us_split_fields3 a))) (to_rep (rec__record_equality__child__f2 (us_split_fields3 b)))) (= (to_rep (rec__record_equality__root__f11 (us_split_fields3 a))) (to_rep (rec__record_equality__root__f11 (us_split_fields3 b)))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const record_equality__root__c__first__bit1 Int)
(declare-const record_equality__root__c__last__bit1 Int)
(declare-const record_equality__root__c__position1 Int)
(assert (<= 0 record_equality__root__c__first__bit1))
(assert (< record_equality__root__c__first__bit1 record_equality__root__c__last__bit1))
(assert (<= 0 record_equality__root__c__position1))
(declare-const record_equality__child__f2__first__bit Int)
(declare-const record_equality__child__f2__last__bit Int)
(declare-const record_equality__child__f2__position Int)
(assert (<= 0 record_equality__child__f2__first__bit))
(assert (< record_equality__child__f2__first__bit record_equality__child__f2__last__bit))
(assert (<= 0 record_equality__child__f2__position))
(declare-const record_equality__root__f1__first__bit1 Int)
(declare-const record_equality__root__f1__last__bit1 Int)
(declare-const record_equality__root__f1__position1 Int)
(assert (<= 0 record_equality__root__f1__first__bit1))
(assert (< record_equality__root__f1__first__bit1 record_equality__root__f1__last__bit1))
(assert (<= 0 record_equality__root__f1__position1))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((child__ref (mk_child__ref (child__content us_rep1)))))
(define-fun child__ref___projection ((a child__ref)) us_rep1 (child__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__record_equality__grandchild__f3 natural) (rec__record_equality__root__f12 natural) (rec__record_equality__child__f21 natural) (rec__ext__2 us_private)))))
(define-fun us_split_fields_F3__projection ((a us_split_fields4)) natural (rec__record_equality__grandchild__f3 a))
(define-fun us_split_fields_F1__3__projection ((a us_split_fields4)) natural (rec__record_equality__root__f12 a))
(define-fun us_split_fields_F2__2__projection ((a us_split_fields4)) natural (rec__record_equality__child__f21 a))
(define-fun us_split_fields___3__projection ((a us_split_fields4)) us_private (rec__ext__2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs3 us_split_discrs) (us_split_fields5 us_split_fields4) (attr__tag2 Int)))))
(define-fun us_rep___7__projection ((a us_rep2)) us_split_discrs (us_split_discrs3 a))
(define-fun us_rep___8__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___9__projection ((a us_rep2)) Int (attr__tag2 a))
(declare-fun hide_ext__1 (natural natural us_private) us_private)
(declare-fun extract__f3 (us_private) natural)
(assert (forall ((f3 natural) (f2 natural)) (forall ((rec__ext__3 us_private)) (= (extract__f3 (hide_ext__1 f3 f2 rec__ext__3)) f3))))
(assert (forall ((f3 natural) (f2 natural)) (forall ((rec__ext__3 us_private)) (= (extract__f2 (hide_ext__1 f3 f2 rec__ext__3)) f2))))
(declare-fun extract__ext__1 (us_private) us_private)
(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (us_split_discrs3 a) (mk___split_fields (rec__record_equality__root__f12 (us_split_fields5 a)) (hide_ext__1 (rec__record_equality__grandchild__f3 (us_split_fields5 a)) (rec__record_equality__child__f21 (us_split_fields5 a)) (rec__ext__2 (us_split_fields5 a)))) (attr__tag2 a)))
(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (us_split_discrs1 r) (mk___split_fields2 (extract__f3 (rec__ext__ (us_split_fields1 r))) (rec__record_equality__root__f1 (us_split_fields1 r)) (extract__f2 (rec__ext__ (us_split_fields1 r))) (extract__ext__1 (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep (rec__record_equality__root__c (us_split_discrs3 a))) (to_rep (rec__record_equality__root__c (us_split_discrs3 b)))) (and (and (= (to_rep (rec__record_equality__grandchild__f3 (us_split_fields5 a))) (to_rep (rec__record_equality__grandchild__f3 (us_split_fields5 b)))) (= (to_rep (rec__record_equality__root__f12 (us_split_fields5 a))) (to_rep (rec__record_equality__root__f12 (us_split_fields5 b))))) (= (to_rep (rec__record_equality__child__f21 (us_split_fields5 a))) (to_rep (rec__record_equality__child__f21 (us_split_fields5 b)))))) true false))
(declare-const us_tag2 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const record_equality__root__c__first__bit2 Int)
(declare-const record_equality__root__c__last__bit2 Int)
(declare-const record_equality__root__c__position2 Int)
(assert (<= 0 record_equality__root__c__first__bit2))
(assert (< record_equality__root__c__first__bit2 record_equality__root__c__last__bit2))
(assert (<= 0 record_equality__root__c__position2))
(declare-const record_equality__grandchild__f3__first__bit Int)
(declare-const record_equality__grandchild__f3__last__bit Int)
(declare-const record_equality__grandchild__f3__position Int)
(assert (<= 0 record_equality__grandchild__f3__first__bit))
(assert (< record_equality__grandchild__f3__first__bit record_equality__grandchild__f3__last__bit))
(assert (<= 0 record_equality__grandchild__f3__position))
(declare-const record_equality__root__f1__first__bit2 Int)
(declare-const record_equality__root__f1__last__bit2 Int)
(declare-const record_equality__root__f1__position2 Int)
(assert (<= 0 record_equality__root__f1__first__bit2))
(assert (< record_equality__root__f1__first__bit2 record_equality__root__f1__last__bit2))
(assert (<= 0 record_equality__root__f1__position2))
(declare-const record_equality__child__f2__first__bit1 Int)
(declare-const record_equality__child__f2__last__bit1 Int)
(declare-const record_equality__child__f2__position1 Int)
(assert (<= 0 record_equality__child__f2__first__bit1))
(assert (< record_equality__child__f2__first__bit1 record_equality__child__f2__last__bit1))
(assert (<= 0 record_equality__child__f2__position1))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((grandchild__ref (mk_grandchild__ref (grandchild__content us_rep2)))))
(define-fun grandchild__ref___projection ((a grandchild__ref)) us_rep2 (grandchild__content a))
(declare-const us_tag3 Int)
(define-fun in_range2 ((rec__record_equality__root__c1 Int) (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep (rec__record_equality__root__c (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const record_equality__root__c__first__bit3 Int)
(declare-const record_equality__root__c__last__bit3 Int)
(declare-const record_equality__root__c__position3 Int)
(assert (<= 0 record_equality__root__c__first__bit3))
(assert (< record_equality__root__c__first__bit3 record_equality__root__c__last__bit3))
(assert (<= 0 record_equality__root__c__position3))
(declare-const record_equality__root__f1__first__bit3 Int)
(declare-const record_equality__root__f1__last__bit3 Int)
(declare-const record_equality__root__f1__position3 Int)
(assert (<= 0 record_equality__root__f1__first__bit3))
(assert (< record_equality__root__f1__first__bit3 record_equality__root__f1__last__bit3))
(assert (<= 0 record_equality__root__f1__position3))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((root_0__ref (mk_root_0__ref (root_0__content us_rep)))))
(define-fun root_0__ref___projection ((a root_0__ref)) us_rep (root_0__content a))
(define-fun dynamic_invariant1 ((temp___expr_176 us_rep) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (not (= temp___skip_constant_173 true)) (in_range2 0 temp___expr_176)))
(define-fun default_initial_assumption ((temp___expr_178 us_rep) (temp___skip_top_level_179 Bool)) Bool (and (= (attr__tag temp___expr_178) us_tag3) (and (= (to_rep (rec__record_equality__root__c (us_split_discrs1 temp___expr_178))) 0) (= (to_rep (rec__record_equality__root__f1 (us_split_fields1 temp___expr_178))) 0))))
(declare-const us_tag4 Int)
(define-fun in_range3 ((rec__record_equality__root__c1 Int) (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep (rec__record_equality__root__c (us_split_discrs1 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const record_equality__root__c__first__bit4 Int)
(declare-const record_equality__root__c__last__bit4 Int)
(declare-const record_equality__root__c__position4 Int)
(assert (<= 0 record_equality__root__c__first__bit4))
(assert (< record_equality__root__c__first__bit4 record_equality__root__c__last__bit4))
(assert (<= 0 record_equality__root__c__position4))
(declare-const record_equality__root__f1__first__bit4 Int)
(declare-const record_equality__root__f1__last__bit4 Int)
(declare-const record_equality__root__f1__position4 Int)
(assert (<= 0 record_equality__root__f1__first__bit4))
(assert (< record_equality__root__f1__first__bit4 record_equality__root__f1__last__bit4))
(assert (<= 0 record_equality__root__f1__position4))
(declare-const record_equality__child__f2__first__bit2 Int)
(declare-const record_equality__child__f2__last__bit2 Int)
(declare-const record_equality__child__f2__position2 Int)
(assert (<= 0 record_equality__child__f2__first__bit2))
(assert (< record_equality__child__f2__first__bit2 record_equality__child__f2__last__bit2))
(assert (<= 0 record_equality__child__f2__position2))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((child_0__ref (mk_child_0__ref (child_0__content us_rep1)))))
(define-fun child_0__ref___projection ((a child_0__ref)) us_rep1 (child_0__content a))
(define-fun dynamic_invariant2 ((temp___expr_185 us_rep1) (temp___is_init_181 Bool) (temp___skip_constant_182 Bool) (temp___do_toplevel_183 Bool) (temp___do_typ_inv_184 Bool)) Bool (=> (not (= temp___skip_constant_182 true)) (in_range3 0 (to_base temp___expr_185))))
(define-fun default_initial_assumption1 ((temp___expr_187 us_rep1) (temp___skip_top_level_188 Bool)) Bool (and (= (attr__tag1 temp___expr_187) us_tag4) (and (and (= (to_rep (rec__record_equality__root__c (us_split_discrs2 temp___expr_187))) 0) (= (to_rep (rec__record_equality__root__f11 (us_split_fields3 temp___expr_187))) 0)) (= (to_rep (rec__record_equality__child__f2 (us_split_fields3 temp___expr_187))) 0))))
(declare-const us_tag5 Int)
(define-fun in_range4 ((rec__record_equality__root__c1 Int) (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep (rec__record_equality__root__c (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))
(declare-const record_equality__root__c__first__bit5 Int)
(declare-const record_equality__root__c__last__bit5 Int)
(declare-const record_equality__root__c__position5 Int)
(assert (<= 0 record_equality__root__c__first__bit5))
(assert (< record_equality__root__c__first__bit5 record_equality__root__c__last__bit5))
(assert (<= 0 record_equality__root__c__position5))
(declare-const record_equality__root__f1__first__bit5 Int)
(declare-const record_equality__root__f1__last__bit5 Int)
(declare-const record_equality__root__f1__position5 Int)
(assert (<= 0 record_equality__root__f1__first__bit5))
(assert (< record_equality__root__f1__first__bit5 record_equality__root__f1__last__bit5))
(assert (<= 0 record_equality__root__f1__position5))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((tr_pu1S__ref (mk_tr_pu1S__ref (tr_pu1S__content us_rep)))))
(define-fun tr_pu1S__ref___projection ((a tr_pu1S__ref)) us_rep (tr_pu1S__content a))
(define-fun dynamic_invariant3 ((temp___expr_194 us_rep) (temp___is_init_190 Bool) (temp___skip_constant_191 Bool) (temp___do_toplevel_192 Bool) (temp___do_typ_inv_193 Bool)) Bool (=> (not (= temp___skip_constant_191 true)) (in_range4 0 temp___expr_194)))
(define-fun default_initial_assumption2 ((temp___expr_196 us_rep) (temp___skip_top_level_197 Bool)) Bool (and (= (attr__tag temp___expr_196) us_tag5) (and (= (to_rep (rec__record_equality__root__c (us_split_discrs1 temp___expr_196))) 0) (= (to_rep (rec__record_equality__root__f1 (us_split_fields1 temp___expr_196))) 0))))
(declare-const r_pu1__split_discrs us_split_discrs)
(declare-const r_pu1__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const r_pu2__split_discrs us_split_discrs)
(declare-const r_pu2__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const us_tag6 Int)
(define-fun in_range5 ((rec__record_equality__root__c1 Int) (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep (rec__record_equality__root__c (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep1) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep1) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep1)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment6 a))))
(declare-const record_equality__root__c__first__bit6 Int)
(declare-const record_equality__root__c__last__bit6 Int)
(declare-const record_equality__root__c__position6 Int)
(assert (<= 0 record_equality__root__c__first__bit6))
(assert (< record_equality__root__c__first__bit6 record_equality__root__c__last__bit6))
(assert (<= 0 record_equality__root__c__position6))
(declare-const record_equality__root__f1__first__bit6 Int)
(declare-const record_equality__root__f1__last__bit6 Int)
(declare-const record_equality__root__f1__position6 Int)
(assert (<= 0 record_equality__root__f1__first__bit6))
(assert (< record_equality__root__f1__first__bit6 record_equality__root__f1__last__bit6))
(assert (<= 0 record_equality__root__f1__position6))
(declare-const record_equality__child__f2__first__bit3 Int)
(declare-const record_equality__child__f2__last__bit3 Int)
(declare-const record_equality__child__f2__position3 Int)
(assert (<= 0 record_equality__child__f2__first__bit3))
(assert (< record_equality__child__f2__first__bit3 record_equality__child__f2__last__bit3))
(assert (<= 0 record_equality__child__f2__position3))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((tc_pu1S__ref (mk_tc_pu1S__ref (tc_pu1S__content us_rep1)))))
(define-fun tc_pu1S__ref___projection ((a tc_pu1S__ref)) us_rep1 (tc_pu1S__content a))
(define-fun dynamic_invariant4 ((temp___expr_203 us_rep1) (temp___is_init_199 Bool) (temp___skip_constant_200 Bool) (temp___do_toplevel_201 Bool) (temp___do_typ_inv_202 Bool)) Bool (=> (not (= temp___skip_constant_200 true)) (in_range5 0 (to_base temp___expr_203))))
(define-fun default_initial_assumption3 ((temp___expr_205 us_rep1) (temp___skip_top_level_206 Bool)) Bool (and (= (attr__tag1 temp___expr_205) us_tag6) (and (and (= (to_rep (rec__record_equality__root__c (us_split_discrs2 temp___expr_205))) 0) (= (to_rep (rec__record_equality__root__f11 (us_split_fields3 temp___expr_205))) 0)) (= (to_rep (rec__record_equality__child__f2 (us_split_fields3 temp___expr_205))) 0))))
(declare-const c_pu1__split_discrs us_split_discrs)
(declare-const c_pu1__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const c_pu2__split_discrs us_split_discrs)
(declare-const c_pu2__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const r2b Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const us_tag7 Int)
(define-fun in_range6 ((rec__record_equality__root__c1 Int) (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep (rec__record_equality__root__c (us_split_discrs1 a)))))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep2) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep2) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep2)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment7 a))))
(declare-const record_equality__root__c__first__bit7 Int)
(declare-const record_equality__root__c__last__bit7 Int)
(declare-const record_equality__root__c__position7 Int)
(assert (<= 0 record_equality__root__c__first__bit7))
(assert (< record_equality__root__c__first__bit7 record_equality__root__c__last__bit7))
(assert (<= 0 record_equality__root__c__position7))
(declare-const record_equality__root__f1__first__bit7 Int)
(declare-const record_equality__root__f1__last__bit7 Int)
(declare-const record_equality__root__f1__position7 Int)
(assert (<= 0 record_equality__root__f1__first__bit7))
(assert (< record_equality__root__f1__first__bit7 record_equality__root__f1__last__bit7))
(assert (<= 0 record_equality__root__f1__position7))
(declare-const record_equality__child__f2__first__bit4 Int)
(declare-const record_equality__child__f2__last__bit4 Int)
(declare-const record_equality__child__f2__position4 Int)
(assert (<= 0 record_equality__child__f2__first__bit4))
(assert (< record_equality__child__f2__first__bit4 record_equality__child__f2__last__bit4))
(assert (<= 0 record_equality__child__f2__position4))
(declare-const record_equality__grandchild__f3__first__bit1 Int)
(declare-const record_equality__grandchild__f3__last__bit1 Int)
(declare-const record_equality__grandchild__f3__position1 Int)
(assert (<= 0 record_equality__grandchild__f3__first__bit1))
(assert (< record_equality__grandchild__f3__first__bit1 record_equality__grandchild__f3__last__bit1))
(assert (<= 0 record_equality__grandchild__f3__position1))
(declare-fun user_eq8 (us_rep2 us_rep2) Bool)
(declare-const dummy8 us_rep2)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep2)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep2 (t1b__content a))
(declare-const g_pu1__split_discrs us_split_discrs)
(declare-const g_pu1__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const r4b Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const us_tag8 Int)
(define-fun in_range7 ((rec__record_equality__root__c1 Int) (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep (rec__record_equality__root__c (us_split_discrs1 a)))))
(declare-const value__size8 Int)
(declare-fun object__size8 (us_rep2) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 (us_rep2) Int)
(assert (<= 0 value__size8))
(assert (forall ((a us_rep2)) (<= 0 (object__size8 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment8 a))))
(declare-const record_equality__root__c__first__bit8 Int)
(declare-const record_equality__root__c__last__bit8 Int)
(declare-const record_equality__root__c__position8 Int)
(assert (<= 0 record_equality__root__c__first__bit8))
(assert (< record_equality__root__c__first__bit8 record_equality__root__c__last__bit8))
(assert (<= 0 record_equality__root__c__position8))
(declare-const record_equality__root__f1__first__bit8 Int)
(declare-const record_equality__root__f1__last__bit8 Int)
(declare-const record_equality__root__f1__position8 Int)
(assert (<= 0 record_equality__root__f1__first__bit8))
(assert (< record_equality__root__f1__first__bit8 record_equality__root__f1__last__bit8))
(assert (<= 0 record_equality__root__f1__position8))
(declare-const record_equality__child__f2__first__bit5 Int)
(declare-const record_equality__child__f2__last__bit5 Int)
(declare-const record_equality__child__f2__position5 Int)
(assert (<= 0 record_equality__child__f2__first__bit5))
(assert (< record_equality__child__f2__first__bit5 record_equality__child__f2__last__bit5))
(assert (<= 0 record_equality__child__f2__position5))
(declare-const record_equality__grandchild__f3__first__bit2 Int)
(declare-const record_equality__grandchild__f3__last__bit2 Int)
(declare-const record_equality__grandchild__f3__position2 Int)
(assert (<= 0 record_equality__grandchild__f3__first__bit2))
(assert (< record_equality__grandchild__f3__first__bit2 record_equality__grandchild__f3__last__bit2))
(assert (<= 0 record_equality__grandchild__f3__position2))
(declare-fun user_eq9 (us_rep2 us_rep2) Bool)
(declare-const dummy9 us_rep2)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content us_rep2)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_rep2 (t3b__content a))
(declare-const g_pu2__split_discrs us_split_discrs)
(declare-const g_pu2__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const c_gp1 us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const us_tag9 Int)
(define-fun in_range8 ((rec__record_equality__root__c1 Int) (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep (rec__record_equality__root__c (us_split_discrs1 a)))))
(declare-const value__size9 Int)
(declare-fun object__size9 (us_rep1) Int)
(declare-const value__alignment9 Int)
(declare-fun object__alignment9 (us_rep1) Int)
(assert (<= 0 value__size9))
(assert (forall ((a us_rep1)) (<= 0 (object__size9 a))))
(assert (<= 0 value__alignment9))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment9 a))))
(declare-const record_equality__root__c__first__bit9 Int)
(declare-const record_equality__root__c__last__bit9 Int)
(declare-const record_equality__root__c__position9 Int)
(assert (<= 0 record_equality__root__c__first__bit9))
(assert (< record_equality__root__c__first__bit9 record_equality__root__c__last__bit9))
(assert (<= 0 record_equality__root__c__position9))
(declare-const record_equality__root__f1__first__bit9 Int)
(declare-const record_equality__root__f1__last__bit9 Int)
(declare-const record_equality__root__f1__position9 Int)
(assert (<= 0 record_equality__root__f1__first__bit9))
(assert (< record_equality__root__f1__first__bit9 record_equality__root__f1__last__bit9))
(assert (<= 0 record_equality__root__f1__position9))
(declare-const record_equality__child__f2__first__bit6 Int)
(declare-const record_equality__child__f2__last__bit6 Int)
(declare-const record_equality__child__f2__position6 Int)
(assert (<= 0 record_equality__child__f2__first__bit6))
(assert (< record_equality__child__f2__first__bit6 record_equality__child__f2__last__bit6))
(assert (<= 0 record_equality__child__f2__position6))
(declare-fun user_eq10 (us_rep1 us_rep1) Bool)
(declare-const dummy10 us_rep1)
(declare-datatypes () ((tc_gp2S__ref (mk_tc_gp2S__ref (tc_gp2S__content us_rep1)))))
(define-fun tc_gp2S__ref___projection ((a tc_gp2S__ref)) us_rep1 (tc_gp2S__content a))
(define-fun dynamic_invariant5 ((temp___expr_212 us_rep1) (temp___is_init_208 Bool) (temp___skip_constant_209 Bool) (temp___do_toplevel_210 Bool) (temp___do_typ_inv_211 Bool)) Bool (=> (not (= temp___skip_constant_209 true)) (in_range8 0 (to_base temp___expr_212))))
(define-fun default_initial_assumption4 ((temp___expr_214 us_rep1) (temp___skip_top_level_215 Bool)) Bool (and (= (attr__tag1 temp___expr_214) us_tag9) (and (and (= (to_rep (rec__record_equality__root__c (us_split_discrs2 temp___expr_214))) 0) (= (to_rep (rec__record_equality__root__f11 (us_split_fields3 temp___expr_214))) 0)) (= (to_rep (rec__record_equality__child__f2 (us_split_fields3 temp___expr_214))) 0))))
(declare-const c_gp2 us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(assert (not (in_range1 0)))
(check-sat)
(exit)
