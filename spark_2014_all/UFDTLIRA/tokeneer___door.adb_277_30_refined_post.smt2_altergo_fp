(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type statust

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : statust, statust -> bool

logic dummy : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type yearst

predicate in_range2(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : yearst, yearst -> bool

logic dummy1 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep : yearst -> int

logic of_rep : int -> yearst

axiom inversion_axiom :
  (forall x:yearst [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:yearst [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type monthst

predicate in_range3(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : monthst, monthst -> bool

logic dummy2 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep1 : monthst -> int

logic of_rep1 : int -> monthst

axiom inversion_axiom1 :
  (forall x:monthst [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:monthst [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type dayst

predicate in_range4(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : dayst, dayst -> bool

logic dummy3 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep2 : dayst -> int

logic of_rep2 : int -> dayst

axiom inversion_axiom2 :
  (forall x:dayst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:dayst [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type millisecst

predicate in_range5(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : millisecst, millisecst -> bool

logic dummy4 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep3 : millisecst -> int

logic of_rep3 : int -> millisecst

axiom inversion_axiom3 :
  (forall x:millisecst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:millisecst [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  ((((((to_rep(((a).us_split_fields1).rec__clock__timet__year) = to_rep(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep1(((a).us_split_fields1).rec__clock__timet__month) = to_rep1(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__day) = to_rep2(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep3(((b).us_split_fields1).rec__clock__timet__millisec))) ->
  (bool_eq7(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields1).rec__clock__timet__year) = to_rep(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep1(((a).us_split_fields1).rec__clock__timet__month) = to_rep1(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__day) = to_rep2(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep3(((b).us_split_fields1).rec__clock__timet__millisec)))) ->
  (bool_eq7(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : yearst

logic dummy6 : monthst

logic dummy7 : dayst

logic dummy8 : millisecst

type timet__ref = { timet__content : us_rep
}

function timet__ref___projection(a: timet__ref) : us_rep = (a).timet__content

logic thecurrenttime : us_private -> us_rep

logic thecurrenttime__function_guard : us_rep, us_private -> prop

axiom thecurrenttime__post_axiom : true

logic greaterthanorequal : us_rep, us_rep -> bool

logic greaterthanorequal__function_guard : bool, us_rep, us_rep -> prop

axiom greaterthanorequal__post_axiom : true

logic addduration : us_rep, int -> us_rep

logic addduration__function_guard : us_rep, us_rep, int -> prop

type durationt

predicate in_range6(x: int) = ((0 <= x) and (x <= 2000))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : durationt, durationt -> bool

logic dummy9 : durationt

type durationt__ref = { durationt__content : durationt
}

function durationt__ref___2__projection(a: durationt__ref) : durationt =
  (a).durationt__content

logic thelatchunlockduration : us_private -> int

logic thelatchunlockduration__function_guard : int, us_private -> prop

axiom thelatchunlockduration__post_axiom :
  (forall configdata__state:us_private
  [thelatchunlockduration(configdata__state)].
  in_range6(thelatchunlockduration(configdata__state)))

logic thealarmsilentduration : us_private -> int

logic thealarmsilentduration__function_guard : int, us_private -> prop

axiom thealarmsilentduration__post_axiom :
  (forall configdata__state:us_private
  [thealarmsilentduration(configdata__state)].
  in_range6(thealarmsilentduration(configdata__state)))

logic latch_timeout : us_private -> us_rep

logic latch_timeout__function_guard : us_rep, us_private -> prop

axiom latch_timeout__post_axiom : true

logic islocked : us_private -> bool

logic islocked__function_guard : bool, us_private -> prop

axiom islocked__post_axiom : true

type t

predicate in_range7(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : t, t -> bool

logic dummy10 : t

type t__ref = { t__content : t
}

function t__ref___3__projection(a: t__ref) : t = (a).t__content

logic attr__ATTRIBUTE_ADDRESS : int

logic alarm_timeout : us_split_fields -> us_rep

logic alarm_timeout__function_guard : us_rep, us_split_fields -> prop

axiom alarm_timeout__post_axiom : true

axiom alarm_timeout__def_axiom :
  (forall door__alarmtimeout__fields:yearst.
  forall door__alarmtimeout__fields1:monthst.
  forall door__alarmtimeout__fields2:dayst.
  forall door__alarmtimeout__fields3:millisecst [alarm_timeout({
  rec__clock__timet__year = door__alarmtimeout__fields;
  rec__clock__timet__month = door__alarmtimeout__fields1;
  rec__clock__timet__day = door__alarmtimeout__fields2;
  rec__clock__timet__millisec = door__alarmtimeout__fields3 })].
  (alarm_timeout({ rec__clock__timet__year = door__alarmtimeout__fields;
  rec__clock__timet__month = door__alarmtimeout__fields1;
  rec__clock__timet__day = door__alarmtimeout__fields2;
  rec__clock__timet__millisec = door__alarmtimeout__fields3 }) = {
  us_split_fields1 = { rec__clock__timet__year = door__alarmtimeout__fields;
  rec__clock__timet__month = door__alarmtimeout__fields1;
  rec__clock__timet__day = door__alarmtimeout__fields2;
  rec__clock__timet__millisec = door__alarmtimeout__fields3 } }))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic thecurrentdoor : int -> int

logic thecurrentdoor__function_guard : int, int -> prop

axiom thecurrentdoor__post_axiom :
  (forall door__currentdoor:int [thecurrentdoor(door__currentdoor)].
  (in_range7(door__currentdoor) ->
  in_range7(thecurrentdoor(door__currentdoor))))

axiom thecurrentdoor__def_axiom :
  (forall door__currentdoor:int [thecurrentdoor(door__currentdoor)].
  (in_range7(door__currentdoor) ->
  (thecurrentdoor(door__currentdoor) = door__currentdoor)))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic thedooralarm : int -> int

logic thedooralarm__function_guard : int, int -> prop

axiom thedooralarm__post_axiom :
  (forall door__dooralarm:int [thedooralarm(door__dooralarm)].
  (in_range1(door__dooralarm) -> in_range1(thedooralarm(door__dooralarm))))

axiom thedooralarm__def_axiom :
  (forall door__dooralarm:int [thedooralarm(door__dooralarm)].
  (in_range1(door__dooralarm) ->
  (thedooralarm(door__dooralarm) = door__dooralarm)))

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "latch.ads", line 42, characters 0-0 *)
goal WP_parameter_def :
  (forall currentdoor:int. forall dooralarm:int.
  forall alarmtimeout__split_fields:yearst.
  forall alarmtimeout__split_fields1:monthst.
  forall alarmtimeout__split_fields2:dayst.
  forall alarmtimeout__split_fields3:millisecst.
  forall latchtimeout__split_fields:yearst.
  forall latchtimeout__split_fields1:monthst.
  forall latchtimeout__split_fields2:dayst.
  forall latchtimeout__split_fields3:millisecst.
  forall currenttime:us_private. forall state:us_private. forall o:yearst.
  forall o1:monthst. forall o2:dayst. forall o3:millisecst. forall o4:int.
  forall temp___857:yearst. forall temp___8571:monthst.
  forall temp___8572:dayst. forall temp___8573:millisecst. forall o5:int.
  forall temp___858:yearst. forall temp___8581:monthst.
  forall temp___8582:dayst. forall temp___8583:millisecst.
  forall result:yearst. forall result1:monthst. forall result2:dayst.
  forall result3:millisecst. forall latchtimeout__split_fields4:yearst.
  forall latchtimeout__split_fields5:monthst.
  forall latchtimeout__split_fields6:dayst.
  forall latchtimeout__split_fields7:millisecst. forall state1:us_private.
  forall result4:yearst. forall result5:monthst. forall result6:dayst.
  forall result7:millisecst. forall alarmtimeout__split_fields4:yearst.
  forall alarmtimeout__split_fields5:monthst.
  forall alarmtimeout__split_fields6:dayst.
  forall alarmtimeout__split_fields7:millisecst. forall state2:us_private.
  forall dooralarm1:int. forall state3:us_private.
  forall filestate:us_private. forall dooralarm2:int.
  forall alarmtimeout__split_fields8:yearst.
  forall alarmtimeout__split_fields9:monthst.
  forall alarmtimeout__split_fields10:dayst.
  forall alarmtimeout__split_fields11:millisecst.
  forall latchtimeout__split_fields8:yearst.
  forall latchtimeout__split_fields9:monthst.
  forall latchtimeout__split_fields10:dayst.
  forall latchtimeout__split_fields11:millisecst. forall state4:us_private.
  forall filestate1:us_private. forall state5:us_private.
  forall dooralarm3:int. forall alarmtimeout__split_fields12:yearst.
  forall alarmtimeout__split_fields13:monthst.
  forall alarmtimeout__split_fields14:dayst.
  forall alarmtimeout__split_fields15:millisecst.
  forall latchtimeout__split_fields12:yearst.
  forall latchtimeout__split_fields13:monthst.
  forall latchtimeout__split_fields14:dayst.
  forall latchtimeout__split_fields15:millisecst. forall state6:us_private.
  forall filestate2:us_private. forall state7:us_private.
  (in_range7(currentdoor) -> (in_range1(dooralarm) ->
  (((((((o4 = thelatchunlockduration(state)) and in_range6(o4)) and (({
  us_split_fields1 = { rec__clock__timet__year = o;
  rec__clock__timet__month = o1; rec__clock__timet__day = o2;
  rec__clock__timet__millisec = o3 } } = thecurrenttime(currenttime)) and ({
  us_split_fields1 = { rec__clock__timet__year = temp___857;
  rec__clock__timet__month = temp___8571; rec__clock__timet__day =
  temp___8572; rec__clock__timet__millisec = temp___8573 } } = addduration({
  us_split_fields1 = { rec__clock__timet__year = o;
  rec__clock__timet__month = o1; rec__clock__timet__day = o2;
  rec__clock__timet__millisec = o3 } }, o4)))) and
  (((result = latchtimeout__split_fields) and
  ((result1 = latchtimeout__split_fields1) and
  ((result2 = latchtimeout__split_fields2) and
  (result3 = latchtimeout__split_fields3)))) and
  ((temp___857 = latchtimeout__split_fields4) and
  ((temp___8571 = latchtimeout__split_fields5) and
  ((temp___8572 = latchtimeout__split_fields6) and
  (temp___8573 = latchtimeout__split_fields7)))))) and
  ((bool_eq7(latch_timeout(state1), { us_split_fields1 = {
  rec__clock__timet__year = latchtimeout__split_fields4;
  rec__clock__timet__month = latchtimeout__split_fields5;
  rec__clock__timet__day = latchtimeout__split_fields6;
  rec__clock__timet__millisec = latchtimeout__split_fields7 } }) = true) and
  (((((o5 = thealarmsilentduration(state)) and in_range6(o5)) and ({
  us_split_fields1 = { rec__clock__timet__year = temp___858;
  rec__clock__timet__month = temp___8581; rec__clock__timet__day =
  temp___8582; rec__clock__timet__millisec = temp___8583 } } = addduration({
  us_split_fields1 = { rec__clock__timet__year = latchtimeout__split_fields4;
  rec__clock__timet__month = latchtimeout__split_fields5;
  rec__clock__timet__day = latchtimeout__split_fields6;
  rec__clock__timet__millisec = latchtimeout__split_fields7 } }, o5))) and
  (((result4 = alarmtimeout__split_fields) and
  ((result5 = alarmtimeout__split_fields1) and
  ((result6 = alarmtimeout__split_fields2) and
  (result7 = alarmtimeout__split_fields3)))) and
  ((temp___858 = alarmtimeout__split_fields4) and
  ((temp___8581 = alarmtimeout__split_fields5) and
  ((temp___8582 = alarmtimeout__split_fields6) and
  (temp___8583 = alarmtimeout__split_fields7)))))) and
  ((((islocked(state2) = true) <->
  (greaterthanorequal(thecurrenttime(currenttime),
  latch_timeout(state2)) = true)) and (bool_eq7(latch_timeout(state2),
  latch_timeout(state1)) = true)) and (((((currentdoor = 0) and
  (islocked(state2) = true)) and
  (greaterthanorequal(thecurrenttime(currenttime), { us_split_fields1 = {
  rec__clock__timet__year = alarmtimeout__split_fields4;
  rec__clock__timet__month = alarmtimeout__split_fields5;
  rec__clock__timet__day = alarmtimeout__split_fields6;
  rec__clock__timet__millisec = alarmtimeout__split_fields7 } }) = true)) <->
  (dooralarm1 = 0)) and in_range1(dooralarm1)))))) and
  (((state2 = state5) and ((filestate1 = filestate) and
  ((state4 = state3) and
  (((latchtimeout__split_fields8 = latchtimeout__split_fields4) and
  ((latchtimeout__split_fields9 = latchtimeout__split_fields5) and
  ((latchtimeout__split_fields10 = latchtimeout__split_fields6) and
  (latchtimeout__split_fields11 = latchtimeout__split_fields7)))) and
  (((alarmtimeout__split_fields8 = alarmtimeout__split_fields4) and
  ((alarmtimeout__split_fields9 = alarmtimeout__split_fields5) and
  ((alarmtimeout__split_fields10 = alarmtimeout__split_fields6) and
  (alarmtimeout__split_fields11 = alarmtimeout__split_fields7)))) and
  (dooralarm1 = dooralarm2)))))) and ((state7 = state2) and
  ((filestate2 = filestate) and ((state6 = state3) and
  (((latchtimeout__split_fields12 = latchtimeout__split_fields4) and
  ((latchtimeout__split_fields13 = latchtimeout__split_fields5) and
  ((latchtimeout__split_fields14 = latchtimeout__split_fields6) and
  (latchtimeout__split_fields15 = latchtimeout__split_fields7)))) and
  (((alarmtimeout__split_fields12 = alarmtimeout__split_fields4) and
  ((alarmtimeout__split_fields13 = alarmtimeout__split_fields5) and
  ((alarmtimeout__split_fields14 = alarmtimeout__split_fields6) and
  (alarmtimeout__split_fields15 = alarmtimeout__split_fields7)))) and
  (dooralarm3 = dooralarm1)))))))) -> ((((currentdoor = 0) and
  (islocked(state5) = true)) and
  (greaterthanorequal(thecurrenttime(currenttime), { us_split_fields1 = {
  rec__clock__timet__year = alarmtimeout__split_fields8;
  rec__clock__timet__month = alarmtimeout__split_fields9;
  rec__clock__timet__day = alarmtimeout__split_fields10;
  rec__clock__timet__millisec = alarmtimeout__split_fields11 } }) = true)) ->
  (dooralarm2 = 0))))))
