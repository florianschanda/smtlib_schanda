(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

logic f1 : int -> bool

logic f1__function_guard : bool, int -> prop

axiom f1__post_axiom : true

axiom f1__def_axiom :
  (forall foo__c:int [f1(foo__c)]. ((f1(foo__c) = true) <-> (0 <  foo__c)))

logic f3 : int -> bool

logic f3__function_guard : bool, int -> prop

axiom f3__post_axiom : true

axiom f3__def_axiom :
  (forall foo__c:int [f3(foo__c)]. ((f3(foo__c) = true) <-> (0 <  foo__c)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic f4 : int, int -> bool

logic f4__function_guard : bool, int, int -> prop

logic get_a : int -> int

logic get_a__function_guard : int, int -> prop

axiom f4__post_axiom : true

axiom f4__def_axiom :
  (forall foo__c:int. forall foo__a:int [f4(foo__c, foo__a)]. ((f4(foo__c,
  foo__a) = true) <-> (foo__c = get_a(foo__a))))

axiom get_a__post_axiom :
  (forall foo__a:int [get_a(foo__a)]. (in_range1(foo__a) ->
  in_range1(get_a(foo__a))))

axiom get_a__def_axiom :
  (forall foo__a:int [get_a(foo__a)]. (in_range1(foo__a) ->
  (get_a(foo__a) = foo__a)))

logic get_c : int -> int

logic get_c__function_guard : int, int -> prop

axiom get_c__post_axiom :
  (forall foo__c:int [get_c(foo__c)]. (in_range1(foo__c) ->
  in_range1(get_c(foo__c))))

axiom get_c__def_axiom :
  (forall foo__c:int [get_c(foo__c)]. (in_range1(foo__c) ->
  (get_c(foo__c) = foo__c)))

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "foo.ads", line 23, characters 0-0 *)
goal WP_parameter_def :
  (forall c:int. forall a:int. forall b:int. forall o:bool. forall o1:bool.
  forall o2:bool. forall o3:bool. forall o4:int. forall o5:int.
  forall o6:bool. forall o7:bool. forall result:int. forall a1:int.
  forall result1:int. forall b1:int. forall result2:int. forall c1:int.
  (forall result3:bool. (((((- 2147483648) <= 2147483647) ->
  in_range1(c)) and ((((- 2147483648) <= 2147483647) -> in_range1(a)) and
  ((((- 2147483648) <= 2147483647) -> in_range1(b)) and (((result = a) and
  (a1 = 1)) and (((result1 = b) and (b1 = 2)) and (((result2 = c) and
  (c1 = 3)) and ((((o4 = get_c(c1)) and (in_range1(o4) and (o4 = c1))) and
  (((o5 = get_a(a1)) and (in_range1(o5) and (o5 = a1))) and (((o5 = o4) and
  (o6 = true)) or ((not (o5 = o4)) and (o6 = false))))) and ((((o2 = f4(c1,
  a1)) and ((o2 = true) <-> (c1 = get_a(a1)))) and ((((o = f3(c1)) and
  ((o = true) <-> (0 <  c1))) and (((o1 = f1(c1)) and ((o1 = true) <->
  (0 <  c1))) and (o3 = match_bool(o1, o, false)))) and (o7 = match_bool(o3,
  o2, false)))) and (result3 = match_bool(o7, o6, false)))))))))) ->
  (f1(c1) = true))))
