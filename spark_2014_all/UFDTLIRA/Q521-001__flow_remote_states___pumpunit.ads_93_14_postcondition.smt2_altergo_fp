(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic attr__ATTRIBUTE_ADDRESS : int

logic get_outstanding : int -> int

logic get_outstanding__function_guard : int, int -> prop

axiom get_outstanding__post_axiom :
  (forall pumpunit__outstanding:int [get_outstanding(pumpunit__outstanding)].
  (in_range1(pumpunit__outstanding) ->
  in_range1(get_outstanding(pumpunit__outstanding))))

axiom get_outstanding__def_axiom :
  (forall pumpunit__outstanding:int [get_outstanding(pumpunit__outstanding)].
  (in_range1(pumpunit__outstanding) ->
  (get_outstanding(pumpunit__outstanding) = pumpunit__outstanding)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic get_total : int -> int

logic get_total__function_guard : int, int -> prop

axiom get_total__post_axiom :
  (forall pumpunit__total_pay:int [get_total(pumpunit__total_pay)].
  (in_range1(pumpunit__total_pay) ->
  in_range1(get_total(pumpunit__total_pay))))

axiom get_total__def_axiom :
  (forall pumpunit__total_pay:int [get_total(pumpunit__total_pay)].
  (in_range1(pumpunit__total_pay) ->
  (get_total(pumpunit__total_pay) = pumpunit__total_pay)))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic is_waiting : int -> bool

logic is_waiting__function_guard : bool, int -> prop

type internal_state

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : internal_state, internal_state -> bool

logic dummy2 : internal_state

type internal_state__ref = { internal_state__content : internal_state
}

function internal_state__ref___projection(a: internal_state__ref) : internal_state =
  (a).internal_state__content

axiom is_waiting__post_axiom : true

axiom is_waiting__def_axiom :
  (forall pumpunit__cur_state:int [is_waiting(pumpunit__cur_state)].
  ((is_waiting(pumpunit__cur_state) = true) <-> (pumpunit__cur_state = 2)))

logic is_base : int -> bool

logic is_base__function_guard : bool, int -> prop

axiom is_base__post_axiom : true

axiom is_base__def_axiom :
  (forall pumpunit__cur_state:int [is_base(pumpunit__cur_state)].
  ((is_base(pumpunit__cur_state) = true) <-> (pumpunit__cur_state = 3)))

 (* File "pumpunit.ads", line 36, characters 0-0 *)
goal WP_parameter_def :
  (forall cur_state:int. forall total_pay:int. forall outstanding:int.
  forall o:int. forall cur_state1:int. forall total_pay1:int.
  forall outstanding1:int. forall result:bool. forall result1:int.
  forall total_pay2:int. forall result2:int. forall cur_state2:int.
  forall result3:int. forall outstanding2:int. forall cur_state3:int.
  forall total_pay3:int. forall outstanding3:int. forall cur_state4:int.
  forall total_pay4:int. forall outstanding4:int. ((in_range2(cur_state) and
  (in_range1(total_pay) and (in_range1(outstanding) and
  (((is_waiting(cur_state) = true) and
  (get_total(total_pay) <  (2147483647 - get_outstanding(outstanding)))) and
  ((((result = is_waiting(cur_state)) and ((result = true) <->
  (cur_state = 2))) and (((result = true) and
  ((((o = (total_pay + outstanding)) and
  in_range((total_pay + outstanding))) and (({ int__content = result1 } = {
  int__content = total_pay }) and (total_pay2 = o))) and ((({ int__content =
  result2 } = { int__content = cur_state }) and (cur_state2 = 3)) and (({
  int__content = result3 } = { int__content = outstanding }) and
  (outstanding2 = 0))))) or ((not (result = true)) and
  (((outstanding2 = outstanding) and ((total_pay2 = total_pay) and
  (cur_state2 = cur_state))) and ((outstanding2 = outstanding1) and
  ((total_pay2 = total_pay1) and (cur_state2 = cur_state1))))))) and
  (((outstanding2 = outstanding3) and ((total_pay2 = total_pay3) and
  (cur_state2 = cur_state3))) and ((outstanding4 = outstanding2) and
  ((total_pay4 = total_pay2) and (cur_state4 = cur_state2))))))))) ->
  (is_base(cur_state3) = true)))
