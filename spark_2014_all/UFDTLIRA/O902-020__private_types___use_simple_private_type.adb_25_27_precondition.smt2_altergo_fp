(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type my_int__ref = { my_int__content : us_rep
}

function my_int__ref___projection(a: my_int__ref) : us_rep =
  (a).my_int__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq(a, b)]. (user_eq(a, b) = oeq(a,
  b)))

logic o : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic is_zero : us_rep -> bool

logic is_zero__function_guard : bool, us_rep -> prop

axiom is_zero__post_axiom : true

logic p : us_rep -> us_rep

logic p__function_guard : us_rep, us_rep -> prop

axiom p__post_axiom : true

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. (0 <= object__alignment1(a)))

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic add : us_rep, us_rep -> us_rep

logic add__function_guard : us_rep, us_rep, us_rep -> prop

logic x : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic y : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

logic mul : us_rep, us_rep -> us_rep

logic mul__function_guard : us_rep, us_rep, us_rep -> prop

 (* File "use_simple_private_type.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall use_simple_private_type__mul__result:us_rep.
  forall use_simple_private_type__mul__result1:us_rep. forall result:bool.
  forall use_simple_private_type__mul__result2:us_rep.
  (((result = is_zero(x)) and ((not (result = true)) and
  ((use_simple_private_type__mul__result2 = use_simple_private_type__mul__result) and
  (use_simple_private_type__mul__result2 = use_simple_private_type__mul__result1)))) ->
  (not (is_zero(x) = true))))
