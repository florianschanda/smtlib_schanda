(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep1 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort map1 0)
(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int Int) natural)
(declare-fun set (map1 Int Int natural) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((a natural)) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a natural)) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide (map1 Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get (slide a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_154 Int) (temp___idx_155 Int)) (=> (and (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (and (<= a__first_2 temp___idx_155) (<= temp___idx_155 a__last_2))) (= (to_rep1 (get a temp___idx_154 temp___idx_155)) (to_rep1 (get b (+ (- b__first a__first) temp___idx_154) (+ (- b__first_2 a__first_2) temp___idx_155))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_154 Int) (temp___idx_155 Int)) (=> (and (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (and (<= a__first_2 temp___idx_155) (<= temp___idx_155 a__last_2))) (= (to_rep1 (get a temp___idx_154 temp___idx_155)) (to_rep1 (get b (+ (- b__first a__first) temp___idx_154) (+ (- b__first_2 a__first_2) temp___idx_155)))))))))))
(declare-fun new_m (tuple0) map1)
(declare-fun new_m__function_guard (map1 tuple0) Bool)
(assert true)
(declare-sort my_pos 0)
(declare-fun my_posqtint (my_pos) Int)
(assert (forall ((i my_pos)) (and (<= 1 (my_posqtint i)) (<= (my_posqtint i) 100))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (my_pos my_pos) Bool)
(declare-const dummy3 my_pos)
(declare-datatypes () ((my_pos__ref (mk_my_pos__ref (my_pos__content my_pos)))))
(define-fun my_pos__ref___projection ((a my_pos__ref)) my_pos (my_pos__content a))
(define-fun dynamic_invariant1 ((temp___expr_160 Int) (temp___is_init_156 Bool) (temp___skip_constant_157 Bool) (temp___do_toplevel_158 Bool) (temp___do_typ_inv_159 Bool)) Bool (=> (or (= temp___is_init_156 true) (<= 1 100)) (in_range3 temp___expr_160)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort tmmP1 0)
(declare-fun tmmP1qtint (tmmP1) Int)
(assert (forall ((i tmmP1)) (and (<= 1 (tmmP1qtint i)) (<= (tmmP1qtint i) 3))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (tmmP1 tmmP1) Bool)
(declare-const dummy4 tmmP1)
(declare-datatypes () ((tmmP1__ref (mk_tmmP1__ref (tmmP1__content tmmP1)))))
(define-fun tmmP1__ref___projection ((a tmmP1__ref)) tmmP1 (tmmP1__content a))
(declare-sort tmmP2 0)
(declare-fun tmmP2qtint (tmmP2) Int)
(assert (forall ((i tmmP2)) (and (<= 1 (tmmP2qtint i)) (<= (tmmP2qtint i) 3))))
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (tmmP2 tmmP2) Bool)
(declare-const dummy5 tmmP2)
(declare-datatypes () ((tmmP2__ref (mk_tmmP2__ref (tmmP2__content tmmP2)))))
(define-fun tmmP2__ref___projection ((a tmmP2__ref)) tmmP2 (tmmP2__content a))
(declare-const g Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort tTbSP1 0)
(declare-fun tTbSP1qtint (tTbSP1) Int)
(assert (forall ((i tTbSP1)) (and (<= 1 (tTbSP1qtint i)) (<= (tTbSP1qtint i) 3))))
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (tTbSP1 tTbSP1) Bool)
(declare-const dummy6 tTbSP1)
(declare-datatypes () ((tTbSP1__ref (mk_tTbSP1__ref (tTbSP1__content tTbSP1)))))
(define-fun tTbSP1__ref___projection ((a tTbSP1__ref)) tTbSP1 (tTbSP1__content a))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (integer integer) Bool)
(declare-const dummy7 integer)
(declare-datatypes () ((tTbSP2__ref (mk_tTbSP2__ref (tTbSP2__content integer)))))
(define-fun tTbSP2__ref___projection ((a tTbSP2__ref)) integer (tTbSP2__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range6 low) (in_range6 high))))))
(declare-sort t1 0)
(declare-fun first1 (t1) integer)
(declare-fun last1 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first1 (mk1 f l))) f) (= (to_rep (last1 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts map1) (rt t) (rt_2 t1)))))
(define-fun to_array ((a us_t)) map1 (elts a))
(define-fun of_array ((a map1) (f Int) (l Int) (f2 Int) (l2 Int)) us_t (mk___t a (mk f l) (mk1 f2 l2)))
(define-fun first2 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last2 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first2 a) (last2 a)) (+ (- (last2 a) (first2 a)) 1) 0))
(define-fun first_2 ((a us_t)) Int (to_rep (first1 (rt_2 a))))
(define-fun last_2 ((a us_t)) Int (to_rep (last1 (rt_2 a))))
(define-fun length_2 ((a us_t)) Int (ite (<= (first_2 a) (last_2 a)) (+ (- (last_2 a) (first_2 a)) 1) 0))
(define-fun dynamic_property3 ((range_first1 Int) (range_last1 Int) (f1 Int) (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int) (l2 Int)) Bool (and (dynamic_property1 range_first1 range_last1 f1 l1) (dynamic_property2 range_first2 range_last2 f2 l2)))
(declare-const value__size Int)
(declare-fun object__size (map1) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size (map1) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (map1) Int)
(assert (<= 0 value__size))
(assert (forall ((a map1)) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a map1)) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a map1)) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (to_rep (first1 (rt_2 x))) (to_rep (last1 (rt_2 x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y))) (to_rep (first1 (rt_2 y))) (to_rep (last1 (rt_2 y)))))
(declare-fun user_eq8 (us_t us_t) Bool)
(declare-const dummy8 us_t)
(declare-datatypes () ((tbS__ref (mk_tbS__ref (tbS__content us_t)))))
(define-fun tbS__ref___projection ((a tbS__ref)) us_t (tbS__content a))
(declare-const b__first integer)
(declare-const b__last integer)
(declare-const b__first_2 integer)
(declare-const b__last_2 integer)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant4 ((temp___expr_190 us_t) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool (=> (not (= temp___skip_constant_187 true)) (and (and (dynamic_property3 1 3 (first2 temp___expr_190) (last2 temp___expr_190) g (+ g 2) (first_2 temp___expr_190) (last_2 temp___expr_190)) (and (= (first2 temp___expr_190) 1) (= (last2 temp___expr_190) 3))) (and (= (first_2 temp___expr_190) g) (= (last_2 temp___expr_190) (+ g 2))))))
(declare-const x Int)
(declare-const b map1)
(declare-const temp___200 map1)
(declare-const array_types__b__assume map1)
(declare-const array_types__b__assume1 t)
(declare-const array_types__b__assume2 t1)
(declare-const result map1)
(declare-const b1 map1)
(assert (in_range3 x))
(assert (= x g))
(assert (in_range1 g))
(assert (= temp___200 (new_m Tuple0)))
(assert (= (ite (<= 1 3) (+ (- 3 1) 1) 0) (ite (<= g (+ g 2)) (+ (- (+ g 2) g) 1) 0)))
(assert (= (slide temp___200 1 1 1 g) array_types__b__assume))
(assert (= (mk 1 3) array_types__b__assume1))
(assert (= (mk1 g (+ g 2)) array_types__b__assume2))
(assert (= result b))
(assert (= b1 array_types__b__assume))
(assert (= (to_rep b__first) (to_rep (first array_types__b__assume1))))
(assert (= (to_rep b__last) (to_rep (last array_types__b__assume1))))
(assert (= (to_rep b__first_2) (to_rep (first1 array_types__b__assume2))))
(assert (= (to_rep b__last_2) (to_rep (last1 array_types__b__assume2))))
(assert (and (and (dynamic_property3 1 3 (to_rep b__first) (to_rep b__last) g (+ g 2) (to_rep b__first_2) (to_rep b__last_2)) (and (= (to_rep b__first) 1) (= (to_rep b__last) 3))) (and (= (to_rep b__first_2) g) (= (to_rep b__last_2) (+ g 2)))))
(assert (not (= (to_rep b__first_2) 1)))
(check-sat)
(exit)
