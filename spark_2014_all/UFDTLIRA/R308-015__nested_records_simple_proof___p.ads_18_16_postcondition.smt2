(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort type_0 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (type_0 type_0) Bool)
(declare-const dummy type_0)
(declare-datatypes () ((type_0__ref (mk_type_0__ref (type_0__content type_0)))))
(define-fun type_0__ref___projection ((a type_0__ref)) type_0 (type_0__content a))
(declare-fun to_rep (type_0) Int)
(declare-fun of_rep (Int) type_0)
(assert (forall ((x type_0)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x type_0)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__p__type_1__field_0 type_0) (rec__p__type_1__field_1 type_0) (rec__p__type_1__field_2 type_0) (rec__p__type_1__field_3 type_0) (rec__p__type_1__field_4 type_0) (rec__p__type_1__field_5 type_0) (rec__p__type_1__field_6 type_0) (rec__p__type_1__field_7 type_0)))))
(define-fun us_split_fields_Field_0__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_0 a))
(define-fun us_split_fields_Field_1__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_1 a))
(define-fun us_split_fields_Field_2__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_2 a))
(define-fun us_split_fields_Field_3__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_3 a))
(define-fun us_split_fields_Field_4__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_4 a))
(define-fun us_split_fields_Field_5__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_5 a))
(define-fun us_split_fields_Field_6__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_6 a))
(define-fun us_split_fields_Field_7__projection ((a us_split_fields)) type_0 (rec__p__type_1__field_7 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_0 (us_split_fields1 b)))) (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_1 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_2 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_3 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_4 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_5 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_6 (us_split_fields1 b))))) (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 a))) (to_rep (rec__p__type_1__field_7 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const p__type_1__field_0__first__bit Int)
(declare-const p__type_1__field_0__last__bit Int)
(declare-const p__type_1__field_0__position Int)
(assert (<= 0 p__type_1__field_0__first__bit))
(assert (< p__type_1__field_0__first__bit p__type_1__field_0__last__bit))
(assert (<= 0 p__type_1__field_0__position))
(declare-const p__type_1__field_1__first__bit Int)
(declare-const p__type_1__field_1__last__bit Int)
(declare-const p__type_1__field_1__position Int)
(assert (<= 0 p__type_1__field_1__first__bit))
(assert (< p__type_1__field_1__first__bit p__type_1__field_1__last__bit))
(assert (<= 0 p__type_1__field_1__position))
(declare-const p__type_1__field_2__first__bit Int)
(declare-const p__type_1__field_2__last__bit Int)
(declare-const p__type_1__field_2__position Int)
(assert (<= 0 p__type_1__field_2__first__bit))
(assert (< p__type_1__field_2__first__bit p__type_1__field_2__last__bit))
(assert (<= 0 p__type_1__field_2__position))
(declare-const p__type_1__field_3__first__bit Int)
(declare-const p__type_1__field_3__last__bit Int)
(declare-const p__type_1__field_3__position Int)
(assert (<= 0 p__type_1__field_3__first__bit))
(assert (< p__type_1__field_3__first__bit p__type_1__field_3__last__bit))
(assert (<= 0 p__type_1__field_3__position))
(declare-const p__type_1__field_4__first__bit Int)
(declare-const p__type_1__field_4__last__bit Int)
(declare-const p__type_1__field_4__position Int)
(assert (<= 0 p__type_1__field_4__first__bit))
(assert (< p__type_1__field_4__first__bit p__type_1__field_4__last__bit))
(assert (<= 0 p__type_1__field_4__position))
(declare-const p__type_1__field_5__first__bit Int)
(declare-const p__type_1__field_5__last__bit Int)
(declare-const p__type_1__field_5__position Int)
(assert (<= 0 p__type_1__field_5__first__bit))
(assert (< p__type_1__field_5__first__bit p__type_1__field_5__last__bit))
(assert (<= 0 p__type_1__field_5__position))
(declare-const p__type_1__field_6__first__bit Int)
(declare-const p__type_1__field_6__last__bit Int)
(declare-const p__type_1__field_6__position Int)
(assert (<= 0 p__type_1__field_6__first__bit))
(assert (< p__type_1__field_6__first__bit p__type_1__field_6__last__bit))
(assert (<= 0 p__type_1__field_6__position))
(declare-const p__type_1__field_7__first__bit Int)
(declare-const p__type_1__field_7__last__bit Int)
(declare-const p__type_1__field_7__position Int)
(assert (<= 0 p__type_1__field_7__first__bit))
(assert (< p__type_1__field_7__first__bit p__type_1__field_7__last__bit))
(assert (<= 0 p__type_1__field_7__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((type_1__ref (mk_type_1__ref (type_1__content us_rep)))))
(define-fun type_1__ref___projection ((a type_1__ref)) us_rep (type_1__content a))
(define-fun dynamic_invariant ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_158)))
(declare-const p__create_type_1__result type_0)
(declare-const p__create_type_1__result1 type_0)
(declare-const p__create_type_1__result2 type_0)
(declare-const p__create_type_1__result3 type_0)
(declare-const p__create_type_1__result4 type_0)
(declare-const p__create_type_1__result5 type_0)
(declare-const p__create_type_1__result6 type_0)
(declare-const p__create_type_1__result7 type_0)
(declare-const o type_0)
(declare-const o1 type_0)
(declare-const o2 type_0)
(declare-const o3 type_0)
(declare-const o4 type_0)
(declare-const o5 type_0)
(declare-const o6 type_0)
(declare-const o7 type_0)
(declare-const o8 type_0)
(declare-const o9 type_0)
(declare-const o10 type_0)
(declare-const o11 type_0)
(declare-const o12 type_0)
(declare-const o13 type_0)
(declare-const o14 type_0)
(declare-const o15 type_0)
(declare-const o16 type_0)
(declare-const o17 type_0)
(declare-const o18 type_0)
(declare-const o19 type_0)
(declare-const o20 type_0)
(declare-const o21 type_0)
(declare-const o22 type_0)
(declare-const o23 type_0)
(declare-const result type_0)
(declare-const result1 type_0)
(declare-const result2 type_0)
(declare-const result3 type_0)
(declare-const result4 type_0)
(declare-const result5 type_0)
(declare-const result6 type_0)
(declare-const result7 type_0)
(declare-const p__create_type_1__result8 type_0)
(declare-const p__create_type_1__result9 type_0)
(declare-const p__create_type_1__result10 type_0)
(declare-const p__create_type_1__result11 type_0)
(declare-const p__create_type_1__result12 type_0)
(declare-const p__create_type_1__result13 type_0)
(declare-const p__create_type_1__result14 type_0)
(declare-const p__create_type_1__result15 type_0)
(declare-const p__create_type_1__result16 type_0)
(declare-const p__create_type_1__result17 type_0)
(declare-const p__create_type_1__result18 type_0)
(declare-const p__create_type_1__result19 type_0)
(declare-const p__create_type_1__result20 type_0)
(declare-const p__create_type_1__result21 type_0)
(declare-const p__create_type_1__result22 type_0)
(declare-const p__create_type_1__result23 type_0)
(declare-const p__create_type_1__result24 type_0)
(declare-const p__create_type_1__result25 type_0)
(declare-const p__create_type_1__result26 type_0)
(declare-const p__create_type_1__result27 type_0)
(declare-const p__create_type_1__result28 type_0)
(declare-const p__create_type_1__result29 type_0)
(declare-const p__create_type_1__result30 type_0)
(declare-const p__create_type_1__result31 type_0)
(declare-const p__create_type_1__result32 type_0)
(declare-const p__create_type_1__result33 type_0)
(declare-const p__create_type_1__result34 type_0)
(declare-const p__create_type_1__result35 type_0)
(declare-const p__create_type_1__result36 type_0)
(declare-const p__create_type_1__result37 type_0)
(declare-const p__create_type_1__result38 type_0)
(declare-const p__create_type_1__result39 type_0)
(declare-const p__create_type_1__result40 type_0)
(declare-const p__create_type_1__result41 type_0)
(declare-const p__create_type_1__result42 type_0)
(declare-const p__create_type_1__result43 type_0)
(declare-const p__create_type_1__result44 type_0)
(declare-const p__create_type_1__result45 type_0)
(declare-const p__create_type_1__result46 type_0)
(declare-const p__create_type_1__result47 type_0)
(define-fun p__create_type_1__result48 () us_rep (mk___rep (mk___split_fields p__create_type_1__result8 p__create_type_1__result9 p__create_type_1__result10 p__create_type_1__result11 p__create_type_1__result12 p__create_type_1__result13 p__create_type_1__result14 p__create_type_1__result15)))
(declare-const result8 type_0)
(declare-const result9 type_0)
(declare-const result10 type_0)
(declare-const result11 type_0)
(declare-const result12 type_0)
(declare-const result13 type_0)
(declare-const result14 type_0)
(declare-const result15 type_0)
(assert (= p__create_type_1__result16 p__create_type_1__result8))
(assert (= p__create_type_1__result17 p__create_type_1__result9))
(assert (= p__create_type_1__result18 p__create_type_1__result10))
(assert (= p__create_type_1__result19 p__create_type_1__result11))
(assert (= p__create_type_1__result20 p__create_type_1__result12))
(assert (= p__create_type_1__result21 p__create_type_1__result13))
(assert (= p__create_type_1__result22 p__create_type_1__result14))
(assert (= p__create_type_1__result23 p__create_type_1__result15))
(assert (= (mk___rep (mk___split_fields p__create_type_1__result24 p__create_type_1__result25 p__create_type_1__result26 p__create_type_1__result27 p__create_type_1__result28 p__create_type_1__result29 p__create_type_1__result30 p__create_type_1__result31)) p__create_type_1__result48))
(assert (= (to_rep o) 0))
(assert (= (to_rep o1) 0))
(assert (= (to_rep o2) 0))
(assert (= (to_rep o3) 0))
(assert (= (to_rep o4) 0))
(assert (= (to_rep o5) 0))
(assert (= (to_rep o6) 0))
(assert (= (to_rep o7) 0))
(assert (= o7 o8))
(assert (= o6 o9))
(assert (= o5 o10))
(assert (= o4 o11))
(assert (= o3 o12))
(assert (= o2 o13))
(assert (= o1 o14))
(assert (= o o15))
(assert (= o16 o8))
(assert (= o17 o9))
(assert (= o18 o10))
(assert (= o19 o11))
(assert (= o20 o12))
(assert (= o21 o13))
(assert (= o22 o14))
(assert (= o23 o15))
(assert (= result p__create_type_1__result))
(assert (= result1 p__create_type_1__result1))
(assert (= result2 p__create_type_1__result2))
(assert (= result3 p__create_type_1__result3))
(assert (= result4 p__create_type_1__result4))
(assert (= result5 p__create_type_1__result5))
(assert (= result6 p__create_type_1__result6))
(assert (= result7 p__create_type_1__result7))
(assert (= p__create_type_1__result48 (mk___rep (mk___split_fields o16 o17 o18 o19 o20 o21 o22 o23))))
(assert (= (mk_type_1__ref (mk___rep (mk___split_fields p__create_type_1__result32 p__create_type_1__result33 p__create_type_1__result34 p__create_type_1__result35 p__create_type_1__result36 p__create_type_1__result37 p__create_type_1__result38 p__create_type_1__result39))) (mk_type_1__ref (mk___rep (mk___split_fields p__create_type_1__result16 p__create_type_1__result17 p__create_type_1__result18 p__create_type_1__result19 p__create_type_1__result20 p__create_type_1__result21 p__create_type_1__result22 p__create_type_1__result23)))))
(assert (= p__create_type_1__result40 p__create_type_1__result24))
(assert (= p__create_type_1__result41 p__create_type_1__result25))
(assert (= p__create_type_1__result42 p__create_type_1__result26))
(assert (= p__create_type_1__result43 p__create_type_1__result27))
(assert (= p__create_type_1__result44 p__create_type_1__result28))
(assert (= p__create_type_1__result45 p__create_type_1__result29))
(assert (= p__create_type_1__result46 p__create_type_1__result30))
(assert (= p__create_type_1__result47 p__create_type_1__result31))
(assert (= result8 p__create_type_1__result32))
(assert (= result9 p__create_type_1__result33))
(assert (= result10 p__create_type_1__result34))
(assert (= result11 p__create_type_1__result35))
(assert (= result12 p__create_type_1__result36))
(assert (= result13 p__create_type_1__result37))
(assert (= result14 p__create_type_1__result38))
(assert (= result15 p__create_type_1__result39))
(assert (not (= (to_rep p__create_type_1__result32) 0)))
(check-sat)
(exit)
