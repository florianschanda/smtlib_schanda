(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__constrained_attribute__mut_rec__d : integer
}

function us_split_discrs___projection(a: us_split_discrs) : integer =
  (a).rec__constrained_attribute__mut_rec__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__constrained_attribute__mut_rec__f : integer
}

function us_split_fields_F__projection(a: us_split_fields) : integer =
  (a).rec__constrained_attribute__mut_rec__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__constrained_attribute__mut_rec__d) = to_rep(((b).us_split_discrs1).rec__constrained_attribute__mut_rec__d)) and
  (to_rep(((a).us_split_fields1).rec__constrained_attribute__mut_rec__f) = to_rep(((b).us_split_fields1).rec__constrained_attribute__mut_rec__f))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__constrained_attribute__mut_rec__d) = to_rep(((b).us_split_discrs1).rec__constrained_attribute__mut_rec__d)) and
  (to_rep(((a).us_split_fields1).rec__constrained_attribute__mut_rec__f) = to_rep(((b).us_split_fields1).rec__constrained_attribute__mut_rec__f)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. forall a2:bool. (0 <= object__size({
  us_split_discrs1 = { rec__constrained_attribute__mut_rec__d = a };
  us_split_fields1 = { rec__constrained_attribute__mut_rec__f = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. forall a2:bool.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__constrained_attribute__mut_rec__d = a }; us_split_fields1 = {
  rec__constrained_attribute__mut_rec__f = a1 }; attr__constrained = a2 })))

logic constrained_attribute__mut_rec__d__first__bit : int

logic constrained_attribute__mut_rec__d__last__bit : int

logic constrained_attribute__mut_rec__d__position : int

axiom constrained_attribute__mut_rec__d__first__bit_axiom :
  (0 <= constrained_attribute__mut_rec__d__first__bit)

axiom constrained_attribute__mut_rec__d__last__bit_axiom :
  (constrained_attribute__mut_rec__d__first__bit <  constrained_attribute__mut_rec__d__last__bit)

axiom constrained_attribute__mut_rec__d__position_axiom :
  (0 <= constrained_attribute__mut_rec__d__position)

logic constrained_attribute__mut_rec__f__first__bit : int

logic constrained_attribute__mut_rec__f__last__bit : int

logic constrained_attribute__mut_rec__f__position : int

axiom constrained_attribute__mut_rec__f__first__bit_axiom :
  (0 <= constrained_attribute__mut_rec__f__first__bit)

axiom constrained_attribute__mut_rec__f__last__bit_axiom :
  (constrained_attribute__mut_rec__f__first__bit <  constrained_attribute__mut_rec__f__last__bit)

axiom constrained_attribute__mut_rec__f__position_axiom :
  (0 <= constrained_attribute__mut_rec__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

logic dummy3 : bool

type mut_rec__ref = { mut_rec__content : us_rep
}

function mut_rec__ref___projection(a: mut_rec__ref) : us_rep =
  (a).mut_rec__content

logic is_constrained : us_rep -> bool

logic is_constrained__function_guard : bool, us_rep -> prop

axiom is_constrained__post_axiom :
  (forall r:integer. forall r1:integer. forall r2:bool [is_constrained({
  us_split_discrs1 = { rec__constrained_attribute__mut_rec__d = r };
  us_split_fields1 = { rec__constrained_attribute__mut_rec__f = r1 };
  attr__constrained = r2 })]. (is_constrained({ us_split_discrs1 = {
  rec__constrained_attribute__mut_rec__d = r }; us_split_fields1 = {
  rec__constrained_attribute__mut_rec__f = r1 }; attr__constrained = r2
  }) = true))

axiom is_constrained__def_axiom :
  (forall r:integer. forall r1:integer. forall r2:bool [is_constrained({
  us_split_discrs1 = { rec__constrained_attribute__mut_rec__d = r };
  us_split_fields1 = { rec__constrained_attribute__mut_rec__f = r1 };
  attr__constrained = r2 })]. (is_constrained({ us_split_discrs1 = {
  rec__constrained_attribute__mut_rec__d = r }; us_split_fields1 = {
  rec__constrained_attribute__mut_rec__f = r1 }; attr__constrained = r2
  }) = true))

predicate in_range1(rec__constrained_attribute__mut_rec__d1: int,
  a: us_rep) =
  (rec__constrained_attribute__mut_rec__d1 = to_rep(((a).us_split_discrs1).rec__constrained_attribute__mut_rec__d))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__constrained_attribute__mut_rec__d = a };
  us_split_fields1 = { rec__constrained_attribute__mut_rec__f = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__constrained_attribute__mut_rec__d = a }; us_split_fields1 = {
  rec__constrained_attribute__mut_rec__f = a1 }; attr__constrained = a2 })))

logic constrained_attribute__mut_rec__d__first__bit1 : int

logic constrained_attribute__mut_rec__d__last__bit1 : int

logic constrained_attribute__mut_rec__d__position1 : int

axiom constrained_attribute__mut_rec__d__first__bit_axiom1 :
  (0 <= constrained_attribute__mut_rec__d__first__bit1)

axiom constrained_attribute__mut_rec__d__last__bit_axiom1 :
  (constrained_attribute__mut_rec__d__first__bit1 <  constrained_attribute__mut_rec__d__last__bit1)

axiom constrained_attribute__mut_rec__d__position_axiom1 :
  (0 <= constrained_attribute__mut_rec__d__position1)

logic constrained_attribute__mut_rec__f__first__bit1 : int

logic constrained_attribute__mut_rec__f__last__bit1 : int

logic constrained_attribute__mut_rec__f__position1 : int

axiom constrained_attribute__mut_rec__f__first__bit_axiom1 :
  (0 <= constrained_attribute__mut_rec__f__first__bit1)

axiom constrained_attribute__mut_rec__f__last__bit_axiom1 :
  (constrained_attribute__mut_rec__f__first__bit1 <  constrained_attribute__mut_rec__f__last__bit1)

axiom constrained_attribute__mut_rec__f__position_axiom1 :
  (0 <= constrained_attribute__mut_rec__f__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : bool

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref___projection(a: t1b__ref) : us_rep = (a).t1b__content

logic a__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range2(rec__constrained_attribute__mut_rec__d1: int,
  a: us_rep) =
  (rec__constrained_attribute__mut_rec__d1 = to_rep(((a).us_split_discrs1).rec__constrained_attribute__mut_rec__d))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:integer. forall a1:integer. forall a2:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__constrained_attribute__mut_rec__d = a };
  us_split_fields1 = { rec__constrained_attribute__mut_rec__f = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:integer. forall a1:integer. forall a2:bool.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__constrained_attribute__mut_rec__d = a }; us_split_fields1 = {
  rec__constrained_attribute__mut_rec__f = a1 }; attr__constrained = a2 })))

logic constrained_attribute__mut_rec__d__first__bit2 : int

logic constrained_attribute__mut_rec__d__last__bit2 : int

logic constrained_attribute__mut_rec__d__position2 : int

axiom constrained_attribute__mut_rec__d__first__bit_axiom2 :
  (0 <= constrained_attribute__mut_rec__d__first__bit2)

axiom constrained_attribute__mut_rec__d__last__bit_axiom2 :
  (constrained_attribute__mut_rec__d__first__bit2 <  constrained_attribute__mut_rec__d__last__bit2)

axiom constrained_attribute__mut_rec__d__position_axiom2 :
  (0 <= constrained_attribute__mut_rec__d__position2)

logic constrained_attribute__mut_rec__f__first__bit2 : int

logic constrained_attribute__mut_rec__f__last__bit2 : int

logic constrained_attribute__mut_rec__f__position2 : int

axiom constrained_attribute__mut_rec__f__first__bit_axiom2 :
  (0 <= constrained_attribute__mut_rec__f__first__bit2)

axiom constrained_attribute__mut_rec__f__last__bit_axiom2 :
  (constrained_attribute__mut_rec__f__first__bit2 <  constrained_attribute__mut_rec__f__last__bit2)

axiom constrained_attribute__mut_rec__f__position_axiom2 :
  (0 <= constrained_attribute__mut_rec__f__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy7 : integer

logic dummy8 : integer

logic dummy9 : bool

type tbS__ref = { tbS__content : us_rep
}

function tbS__ref___projection(a: tbS__ref) : us_rep = (a).tbS__content

logic b__split_discrs : integer

logic b__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic a__split_fields : integer

logic a__split_discrs : integer

logic b__split_fields : integer

logic o : integer

logic o1 : integer

logic o2 : integer

logic o3 : integer

logic constrained_attribute__test__a__assume : integer

logic constrained_attribute__test__a__assume1 : integer

logic constrained_attribute__test__a__assume2 : bool

logic us : int

logic result : integer

logic a__split_fields1 : integer

logic result1 : integer

logic a__split_discrs1 : integer

logic result2 : integer

logic b__split_fields1 : integer

axiom H : (to_rep(o1) = 0)

axiom H1 : (o1 = o2)

axiom H2 : (to_rep(o) = 0)

axiom H3 : (o = o3)

axiom H4 : (constrained_attribute__test__a__assume = o3)

axiom H5 : (constrained_attribute__test__a__assume1 = o2)

axiom H6 : (true = constrained_attribute__test__a__assume2)

axiom H7 : (result = a__split_fields)

axiom H8 : (constrained_attribute__test__a__assume1 = a__split_fields1)

axiom H9 : (result1 = a__split_discrs)

axiom H10 : (constrained_attribute__test__a__assume = a__split_discrs1)

axiom H11 : (a__attr__constrained = false)

axiom H12 : ((us = 0) and in_range(0))

axiom H13 : (result2 = b__split_fields)

axiom H14 : (b__split_fields1 = a__split_fields1)

axiom H15 : (b__split_discrs = a__split_discrs1)

axiom H16 : (b__attr__constrained = true)

axiom H17 : ((0 = to_rep(b__split_discrs)) and (b__attr__constrained = true))

 (* File "constrained_attribute.ads", line 6, characters 0-0 *)
goal WP_parameter_def : (b__attr__constrained = true)
