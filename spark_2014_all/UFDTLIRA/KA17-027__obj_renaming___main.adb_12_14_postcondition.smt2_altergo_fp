(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__main__rec__comp : natural
}

function us_split_fields_Comp__projection(a: us_split_fields) : natural =
  (a).rec__main__rec__comp

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__main__rec__comp) = to_rep(((b).us_split_fields1).rec__main__rec__comp)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__main__rec__comp) = to_rep(((b).us_split_fields1).rec__main__rec__comp))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. (0 <= object__size({ us_split_fields1 = {
  rec__main__rec__comp = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. (0 <= object__alignment({ us_split_fields1 = {
  rec__main__rec__comp = a } })))

logic main__rec__comp__first__bit : int

logic main__rec__comp__last__bit : int

logic main__rec__comp__position : int

axiom main__rec__comp__first__bit_axiom : (0 <= main__rec__comp__first__bit)

axiom main__rec__comp__last__bit_axiom :
  (main__rec__comp__first__bit <  main__rec__comp__last__bit)

axiom main__rec__comp__position_axiom : (0 <= main__rec__comp__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : natural

type rec____ref = { rec____content : us_rep
}

function rec____ref___projection(a: rec____ref) : us_rep = (a).rec____content

logic result__ : natural

logic attr__ATTRIBUTE_ADDRESS : int

axiom result____def_axiom : (result__ = of_rep(5678))

logic main__get_rec__result : natural

logic o : natural

logic o1 : natural

logic main__get_rec__result__assume : natural

logic result : natural

logic main__get_rec__result1 : natural

logic main__get_rec__result2 : natural

logic main__get_rec__result3 : natural

logic main__get_rec__result4 : natural

logic main__get_rec__result5 : natural

logic result1 : natural

axiom H : (to_rep(o) = 5678)

axiom H1 : (o = o1)

axiom H2 : (main__get_rec__result__assume = o1)

axiom H3 : (main__get_rec__result__assume = result__)

axiom H4 : (main__get_rec__result2 = main__get_rec__result1)

axiom H5 : (main__get_rec__result3 = main__get_rec__result1)

axiom H6 : (result = main__get_rec__result)

axiom H7 : (main__get_rec__result1 = result__)

axiom H8 : (main__get_rec__result4 = main__get_rec__result2)

axiom H9 : (main__get_rec__result5 = main__get_rec__result3)

axiom H10 : (result1 = main__get_rec__result4)

 (* File "main.adb", line 2, characters 0-0 *)
goal WP_parameter_def : (bool_eq2({ us_split_fields1 = {
  rec__main__rec__comp = main__get_rec__result4 } }, { us_split_fields1 = {
  rec__main__rec__comp = of_rep(5678) } }) = true)
