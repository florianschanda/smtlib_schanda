(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic max : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic first : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type may_be_empty1__ref = { may_be_empty1__content : integer
}

function may_be_empty1__ref___projection(a: may_be_empty1__ref) : integer =
  (a).may_be_empty1__content

axiom first__def_axiom : (first = c)

logic first1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type may_be_empty2__ref = { may_be_empty2__content : integer
}

function may_be_empty2__ref___projection(a: may_be_empty2__ref) : integer =
  (a).may_be_empty2__content

axiom first__def_axiom1 : (first1 = (c + 1))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom max__def_axiom : (max = 100)

logic e : int

logic j : int

logic j1 : int

logic us : int

logic temp___144 : int

logic us1 : int

logic o : int

logic temp___147 : int

logic us2 : int

logic e1 : int

logic result : int

logic j2 : int

logic e2 : int

logic j3 : int

logic result1 : int

logic e3 : int

logic e4 : int

logic j4 : int

logic e5 : int

logic j5 : int

logic e6 : int

logic j6 : int

logic e7 : int

logic j7 : int

logic result2 : int

logic j8 : int

logic j9 : int

axiom H : in_range2(c)

axiom H1 : in_range2(max)

axiom H2 : ((first <= 100) -> dynamic_property(first, 100, e))

axiom H3 : (result = j)

axiom H4 : (j2 = 0)

axiom H5 : (((0 <= j2) and (j2 <= 100)) -> (temp___144 = e))

axiom H6 : (((0 <= j2) and (j2 <= 100)) -> (((first <= 100) ->
  dynamic_property(first, 100, e2)) and ((0 <= j3) and (j3 <= 100))))

axiom H7 : (((0 <= j2) and (j2 <= 100)) -> ((us1 = c) and
  dynamic_property(first, 100, c)))

axiom H8 : (((0 <= j2) and (j2 <= 100)) -> (o = c))

axiom H9 : (((0 <= j2) and (j2 <= 100)) -> (result1 = e2))

axiom H10 : (((0 <= j2) and (j2 <= 100)) -> (e3 = o))

axiom H11 : (((0 <= j2) and (j2 <= 100)) -> (j3 = 100))

axiom H12 : (((0 <= j2) and (j2 <= 100)) -> (j3 = j4))

axiom H13 : (((0 <= j2) and (j2 <= 100)) -> (e3 = e4))

axiom H14 : (((0 <= j2) and (j2 <= 100)) -> (j5 = j3))

axiom H15 : (((0 <= j2) and (j2 <= 100)) -> (e5 = e3))

axiom H16 : (((0 <= j2) and (j2 <= 100)) -> (j6 = j4))

axiom H17 : (((0 <= j2) and (j2 <= 100)) -> (e6 = e4))

axiom H18 : (((0 <= j2) and (j2 <= 100)) -> (j7 = j5))

axiom H19 : (((0 <= j2) and (j2 <= 100)) -> (e7 = e5))

axiom H20 : ((not ((0 <= j2) and (j2 <= 100))) -> (j2 = j6))

axiom H21 : ((not ((0 <= j2) and (j2 <= 100))) -> (e6 = e))

axiom H22 : ((not ((0 <= j2) and (j2 <= 100))) -> (j7 = j2))

axiom H23 : ((not ((0 <= j2) and (j2 <= 100))) -> (e7 = e1))

axiom H24 : (result2 = j1)

axiom H25 : (j8 = 0)

axiom H26 : (0 <= j8)

axiom H27 : (j8 <= 100)

axiom H28 : ((0 <= j9) and (j9 <= 100))

axiom H29 : ((temp___147 = (c + 1)) and in_range1((c + 1)))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : dynamic_property1(first1, 100, temp___147)
