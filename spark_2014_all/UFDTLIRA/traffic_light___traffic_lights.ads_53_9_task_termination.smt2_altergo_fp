(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type priority

predicate in_range(x: int) = ((0 <= x) and (x <= 97))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : priority, priority -> bool

logic dummy : priority

type priority__ref = { priority__content : priority
}

function priority__ref___projection(a: priority__ref) : priority =
  (a).priority__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq2 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type time__ref = { time__content : us_rep
}

function time__ref___projection(a: time__ref) : us_rep = (a).time__content

type us_split_fields = { rec__traffic_lights__lights_state__vehicles_green :
bool; rec__traffic_lights__lights_state__vehicles_yellow : bool;
rec__traffic_lights__lights_state__vehicles_red : bool;
rec__traffic_lights__lights_state__pedestrians_green : bool;
rec__traffic_lights__lights_state__pedestrians_red : bool
}

function us_split_fields_Vehicles_Green__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__vehicles_green

function us_split_fields_Vehicles_Yellow__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__vehicles_yellow

function us_split_fields_Vehicles_Red__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__vehicles_red

function us_split_fields_Pedestrians_Green__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__pedestrians_green

function us_split_fields_Pedestrians_Red__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__lights_state__pedestrians_red

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___27__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___27__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def1 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  (((((((((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_green = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_green) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_yellow = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_yellow)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_red = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_red)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_green = ((b).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_green)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_red = ((b).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_red)) ->
  (bool_eq3(a, b) = true)) and
  ((not (((((((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_green = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_green) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_yellow = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_yellow)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__vehicles_red = ((b).us_split_fields1).rec__traffic_lights__lights_state__vehicles_red)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_green = ((b).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_green)) and
  (((a).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_red = ((b).us_split_fields1).rec__traffic_lights__lights_state__pedestrians_red))) ->
  (bool_eq3(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:bool. forall a2:bool. forall a3:bool.
  forall a4:bool. (0 <= object__size1({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = a;
  rec__traffic_lights__lights_state__vehicles_yellow = a1;
  rec__traffic_lights__lights_state__vehicles_red = a2;
  rec__traffic_lights__lights_state__pedestrians_green = a3;
  rec__traffic_lights__lights_state__pedestrians_red = a4 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:bool. forall a2:bool. forall a3:bool.
  forall a4:bool. (0 <= object__alignment1({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = a;
  rec__traffic_lights__lights_state__vehicles_yellow = a1;
  rec__traffic_lights__lights_state__vehicles_red = a2;
  rec__traffic_lights__lights_state__pedestrians_green = a3;
  rec__traffic_lights__lights_state__pedestrians_red = a4 } })))

logic traffic_lights__lights_state__vehicles_green__first__bit : int

logic traffic_lights__lights_state__vehicles_green__last__bit : int

logic traffic_lights__lights_state__vehicles_green__position : int

axiom traffic_lights__lights_state__vehicles_green__first__bit_axiom :
  (0 <= traffic_lights__lights_state__vehicles_green__first__bit)

axiom traffic_lights__lights_state__vehicles_green__last__bit_axiom :
  (traffic_lights__lights_state__vehicles_green__first__bit <  traffic_lights__lights_state__vehicles_green__last__bit)

axiom traffic_lights__lights_state__vehicles_green__position_axiom :
  (0 <= traffic_lights__lights_state__vehicles_green__position)

logic traffic_lights__lights_state__vehicles_yellow__first__bit : int

logic traffic_lights__lights_state__vehicles_yellow__last__bit : int

logic traffic_lights__lights_state__vehicles_yellow__position : int

axiom traffic_lights__lights_state__vehicles_yellow__first__bit_axiom :
  (0 <= traffic_lights__lights_state__vehicles_yellow__first__bit)

axiom traffic_lights__lights_state__vehicles_yellow__last__bit_axiom :
  (traffic_lights__lights_state__vehicles_yellow__first__bit <  traffic_lights__lights_state__vehicles_yellow__last__bit)

axiom traffic_lights__lights_state__vehicles_yellow__position_axiom :
  (0 <= traffic_lights__lights_state__vehicles_yellow__position)

logic traffic_lights__lights_state__vehicles_red__first__bit : int

logic traffic_lights__lights_state__vehicles_red__last__bit : int

logic traffic_lights__lights_state__vehicles_red__position : int

axiom traffic_lights__lights_state__vehicles_red__first__bit_axiom :
  (0 <= traffic_lights__lights_state__vehicles_red__first__bit)

axiom traffic_lights__lights_state__vehicles_red__last__bit_axiom :
  (traffic_lights__lights_state__vehicles_red__first__bit <  traffic_lights__lights_state__vehicles_red__last__bit)

axiom traffic_lights__lights_state__vehicles_red__position_axiom :
  (0 <= traffic_lights__lights_state__vehicles_red__position)

logic traffic_lights__lights_state__pedestrians_green__first__bit : int

logic traffic_lights__lights_state__pedestrians_green__last__bit : int

logic traffic_lights__lights_state__pedestrians_green__position : int

axiom traffic_lights__lights_state__pedestrians_green__first__bit_axiom :
  (0 <= traffic_lights__lights_state__pedestrians_green__first__bit)

axiom traffic_lights__lights_state__pedestrians_green__last__bit_axiom :
  (traffic_lights__lights_state__pedestrians_green__first__bit <  traffic_lights__lights_state__pedestrians_green__last__bit)

axiom traffic_lights__lights_state__pedestrians_green__position_axiom :
  (0 <= traffic_lights__lights_state__pedestrians_green__position)

logic traffic_lights__lights_state__pedestrians_red__first__bit : int

logic traffic_lights__lights_state__pedestrians_red__last__bit : int

logic traffic_lights__lights_state__pedestrians_red__position : int

axiom traffic_lights__lights_state__pedestrians_red__first__bit_axiom :
  (0 <= traffic_lights__lights_state__pedestrians_red__first__bit)

axiom traffic_lights__lights_state__pedestrians_red__last__bit_axiom :
  (traffic_lights__lights_state__pedestrians_red__first__bit <  traffic_lights__lights_state__pedestrians_red__last__bit)

axiom traffic_lights__lights_state__pedestrians_red__position_axiom :
  (0 <= traffic_lights__lights_state__pedestrians_red__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : bool

logic dummy3 : bool

logic dummy4 : bool

logic dummy5 : bool

logic dummy6 : bool

type lights_state__ref = { lights_state__content : us_rep1
}

function lights_state__ref___projection(a: lights_state__ref) : us_rep1 =
  (a).lights_state__content

type valid_lights_state__ref = { valid_lights_state__content : us_rep1
}

function valid_lights_state__ref___projection(a: valid_lights_state__ref) : us_rep1 =
  (a).valid_lights_state__content

type us_split_fields2 = {
rec__traffic_lights__traffic_lightT__last_state_change : us_rep;
rec__traffic_lights__traffic_lightT__change_state : bool;
rec__traffic_lights__traffic_lightT__lights : us_rep1
}

function us_split_fields_Last_State_Change__projection(a: us_split_fields2) : us_rep =
  (a).rec__traffic_lights__traffic_lightT__last_state_change

function us_split_fields_Change_State__projection(a: us_split_fields2) : bool =
  (a).rec__traffic_lights__traffic_lightT__change_state

function us_split_fields_Lights__projection(a: us_split_fields2) : us_rep1 =
  (a).rec__traffic_lights__traffic_lightT__lights

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___28__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___28__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_rep. forall a1:bool. forall a2:bool. forall a3:bool.
  forall a4:bool. forall a5:bool. forall a6:bool. (0 <= object__size2({
  us_split_fields3 = {
  rec__traffic_lights__traffic_lightT__last_state_change = a;
  rec__traffic_lights__traffic_lightT__change_state = a1;
  rec__traffic_lights__traffic_lightT__lights = { us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = a2;
  rec__traffic_lights__lights_state__vehicles_yellow = a3;
  rec__traffic_lights__lights_state__vehicles_red = a4;
  rec__traffic_lights__lights_state__pedestrians_green = a5;
  rec__traffic_lights__lights_state__pedestrians_red = a6 } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep. forall a1:bool. forall a2:bool. forall a3:bool.
  forall a4:bool. forall a5:bool. forall a6:bool. (0 <= object__alignment2({
  us_split_fields3 = {
  rec__traffic_lights__traffic_lightT__last_state_change = a;
  rec__traffic_lights__traffic_lightT__change_state = a1;
  rec__traffic_lights__traffic_lightT__lights = { us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = a2;
  rec__traffic_lights__lights_state__vehicles_yellow = a3;
  rec__traffic_lights__lights_state__vehicles_red = a4;
  rec__traffic_lights__lights_state__pedestrians_green = a5;
  rec__traffic_lights__lights_state__pedestrians_red = a6 } } } })))

logic traffic_lights__traffic_lightT__last_state_change__first__bit : int

logic traffic_lights__traffic_lightT__last_state_change__last__bit : int

logic traffic_lights__traffic_lightT__last_state_change__position : int

axiom traffic_lights__traffic_lightT__last_state_change__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__last_state_change__first__bit)

axiom traffic_lights__traffic_lightT__last_state_change__last__bit_axiom :
  (traffic_lights__traffic_lightT__last_state_change__first__bit <  traffic_lights__traffic_lightT__last_state_change__last__bit)

axiom traffic_lights__traffic_lightT__last_state_change__position_axiom :
  (0 <= traffic_lights__traffic_lightT__last_state_change__position)

logic traffic_lights__traffic_lightT__change_state__first__bit : int

logic traffic_lights__traffic_lightT__change_state__last__bit : int

logic traffic_lights__traffic_lightT__change_state__position : int

axiom traffic_lights__traffic_lightT__change_state__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__change_state__first__bit)

axiom traffic_lights__traffic_lightT__change_state__last__bit_axiom :
  (traffic_lights__traffic_lightT__change_state__first__bit <  traffic_lights__traffic_lightT__change_state__last__bit)

axiom traffic_lights__traffic_lightT__change_state__position_axiom :
  (0 <= traffic_lights__traffic_lightT__change_state__position)

logic traffic_lights__traffic_lightT__lights__first__bit : int

logic traffic_lights__traffic_lightT__lights__last__bit : int

logic traffic_lights__traffic_lightT__lights__position : int

axiom traffic_lights__traffic_lightT__lights__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__lights__first__bit)

axiom traffic_lights__traffic_lightT__lights__last__bit_axiom :
  (traffic_lights__traffic_lightT__lights__first__bit <  traffic_lights__traffic_lightT__lights__last__bit)

axiom traffic_lights__traffic_lightT__lights__position_axiom :
  (0 <= traffic_lights__traffic_lightT__lights__position)

logic user_eq3 : us_rep2, us_rep2 -> bool

type traffic_lightT__ref = { traffic_lightT__content : us_rep2
}

function traffic_lightT__ref___projection(a: traffic_lightT__ref) : us_rep2 =
  (a).traffic_lightT__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq4 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

logic time_first : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic valid_combination : us_rep1 -> bool

logic valid_combination__function_guard : bool, us_rep1 -> prop

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom valid_combination__post_axiom : true

axiom valid_combination__def_axiom :
  (forall ls:bool. forall ls1:bool. forall ls2:bool. forall ls3:bool.
  forall ls4:bool [valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = ls;
  rec__traffic_lights__lights_state__vehicles_yellow = ls1;
  rec__traffic_lights__lights_state__vehicles_red = ls2;
  rec__traffic_lights__lights_state__pedestrians_green = ls3;
  rec__traffic_lights__lights_state__pedestrians_red = ls4 } })].
  (((valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = ls;
  rec__traffic_lights__lights_state__vehicles_yellow = ls1;
  rec__traffic_lights__lights_state__vehicles_red = ls2;
  rec__traffic_lights__lights_state__pedestrians_green = ls3;
  rec__traffic_lights__lights_state__pedestrians_red = ls4 } }) = true) ->
  (((ls = true) -> ((((not (ls1 = true)) and (not (ls2 = true))) and
  (not (ls3 = true))) and (ls4 = true))) and ((not (ls = true)) ->
  (((ls3 = true) -> ((((not (ls = true)) and (not (ls1 = true))) and
  (ls2 = true)) and (not (ls4 = true)))) and ((not (ls3 = true)) ->
  ((not (ls3 = true)) and (ls4 = true))))))) and ((((ls = true) and
  ((((not (ls1 = true)) and (not (ls2 = true))) and (not (ls3 = true))) and
  (ls4 = true))) or ((not (ls = true)) and (((ls3 = true) and
  ((((not (ls = true)) and (not (ls1 = true))) and (ls2 = true)) and
  (not (ls4 = true)))) or ((not (ls3 = true)) and ((not (ls3 = true)) and
  (ls4 = true)))))) -> (valid_combination({ us_split_fields1 = {
  rec__traffic_lights__lights_state__vehicles_green = ls;
  rec__traffic_lights__lights_state__vehicles_yellow = ls1;
  rec__traffic_lights__lights_state__vehicles_red = ls2;
  rec__traffic_lights__lights_state__pedestrians_green = ls3;
  rec__traffic_lights__lights_state__pedestrians_red = ls4 } }) = true))))

 (* File "traffic_lights.adb", line 71, characters 0-0 *)
goal WP_parameter_def : true
