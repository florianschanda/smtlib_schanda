(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type element_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : element_type, element_type -> bool

logic dummy1 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type key_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : key_type, key_type -> bool

logic dummy2 : key_type

type key_type__ref = { key_type__content : key_type
}

function key_type__ref___projection(a: key_type__ref) : key_type =
  (a).key_type__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p__my_maps__map__capacity : count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__p__my_maps__map__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__my_maps__map : us_main_type
}

function us_split_fields_Map__projection(a: us_split_fields) : us_main_type =
  (a).rec__p__my_maps__map

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___7__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__p__my_maps__map__capacity) = to_rep(((b).us_split_discrs1).rec__p__my_maps__map__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__p__my_maps__map,
  ((b).us_split_fields1).rec__p__my_maps__map) = true)) -> (bool_eq5(a,
  b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__p__my_maps__map__capacity) = to_rep(((b).us_split_discrs1).rec__p__my_maps__map__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__p__my_maps__map,
  ((b).us_split_fields1).rec__p__my_maps__map) = true))) -> (bool_eq5(a,
  b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = a };
  us_split_fields1 = { rec__p__my_maps__map = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = a };
  us_split_fields1 = { rec__p__my_maps__map = a1 } })))

logic p__my_maps__map__capacity__first__bit : int

logic p__my_maps__map__capacity__last__bit : int

logic p__my_maps__map__capacity__position : int

axiom p__my_maps__map__capacity__first__bit_axiom :
  (0 <= p__my_maps__map__capacity__first__bit)

axiom p__my_maps__map__capacity__last__bit_axiom :
  (p__my_maps__map__capacity__first__bit <  p__my_maps__map__capacity__last__bit)

axiom p__my_maps__map__capacity__position_axiom :
  (0 <= p__my_maps__map__capacity__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : count_type

logic dummy4 : us_main_type

type map__ref = { map__content : us_rep
}

function map__ref___projection(a: map__ref) : us_rep = (a).map__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type. forall b:count_type.
  forall b1:us_main_type [user_eq3({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = a }; us_split_fields1 = {
  rec__p__my_maps__map = a1 } }, { us_split_discrs1 = {
  rec__p__my_maps__map__capacity = b }; us_split_fields1 = {
  rec__p__my_maps__map = b1 } })]. (user_eq3({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = a }; us_split_fields1 = {
  rec__p__my_maps__map = a1 } }, { us_split_discrs1 = {
  rec__p__my_maps__map__capacity = b }; us_split_fields1 = {
  rec__p__my_maps__map = b1 } }) = oeq({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = a }; us_split_fields1 = {
  rec__p__my_maps__map = a1 } }, { us_split_discrs1 = {
  rec__p__my_maps__map__capacity = b }; us_split_fields1 = {
  rec__p__my_maps__map = b1 } })))

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic length1 : int, us_rep -> int

logic length__function_guard1 : int, int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } })]. ((length({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 }
  }) <= to_rep(container)) and in_range1(length({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type
  [length1(attr__tag, { us_split_discrs1 = { rec__p__my_maps__map__capacity =
  container }; us_split_fields1 = { rec__p__my_maps__map = container1 } })].
  in_range1(length1(attr__tag, { us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq6 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type map__ref1 = { map__content1 : us_rep1
}

function map__ref___2__projection(a: map__ref1) : us_rep1 = (a).map__content1

logic has_key : us_rep1, int -> bool

logic has_key__function_guard : bool, us_rep1, int -> prop

logic model__ : us_rep -> us_rep1

logic model____function_guard : us_rep1, us_rep -> prop

logic contains__function_guard : bool, us_rep, int -> prop

logic contains : int, us_rep, int -> bool

logic contains__function_guard1 : bool, int, us_rep, int -> prop

type key_type1

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : key_type1, key_type1 -> bool

logic dummy6 : key_type1

type key_type__ref1 = { key_type__content1 : key_type1
}

function key_type__ref___2__projection(a: key_type__ref1) : key_type1 =
  (a).key_type__content1

axiom contains__post__dispatch_axiom : true

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic ole : us_rep1, us_rep1 -> bool

logic ole__function_guard : bool, us_rep1, us_rep1 -> prop

logic keys_included_except : us_rep1, us_rep1, int -> bool

logic keys_included_except__function_guard : bool, us_rep1, us_rep1,
  int -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep2

logic bool_eq8 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get1 : us_rep2, int -> int

logic get__function_guard1 : int, us_rep2, int -> prop

logic range_equal__function_guard : bool, us_rep2, us_rep2, int, int -> prop

logic range_shifted__function_guard : bool, us_rep2, us_rep2, int, int,
  int -> prop

logic find : us_rep2, int -> int

logic find__function_guard : int, us_rep2, int -> prop

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep3

logic bool_eq9 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq7 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type map__ref2 = { map__content2 : us_rep3
}

function map__ref___3__projection(a: map__ref2) : us_rep3 = (a).map__content2

logic p_positions_shifted : us_rep3, us_rep3, int, int -> bool

logic p_positions_shifted__function_guard : bool, us_rep3, us_rep3, int,
  int -> prop

logic keys : us_rep -> us_rep2

logic keys__function_guard : us_rep2, us_rep -> prop

logic positions : us_rep -> us_rep3

logic positions__function_guard : us_rep3, us_rep -> prop

logic insert__2__specific_post : int, us_split_fields, us_split_discrs, int,
  int, us_split_fields -> prop

logic element__2__function_guard : int, us_rep, int -> prop

logic element__2 : int, us_rep, int -> int

logic element__2__function_guard1 : int, int, us_rep, int -> prop

type element_type1

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : element_type1, element_type1 -> bool

logic dummy9 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom element__2__post__dispatch_axiom :
  (forall attr__tag:int. forall key:int.
  (forall container:count_type. forall container1:us_main_type
  [element__2(attr__tag, { us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }, key)]. (in_range4(key) ->
  in_range5(element__2(attr__tag, { us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }, key)))))

logic keys_included : us_rep1, us_rep1 -> bool

logic keys_included__function_guard : bool, us_rep1, us_rep1 -> prop

logic same_keys__function_guard : bool, us_rep1, us_rep1 -> prop

logic elements_equal_except : us_rep1, us_rep1, int -> bool

logic elements_equal_except__function_guard : bool, us_rep1, us_rep1,
  int -> prop

logic length2 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic equal_except__function_guard : bool, us_rep2, us_rep2, int -> prop

logic oeq2 : us_rep3, us_rep3 -> bool

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

logic replace__specific_post : int, us_split_fields, us_split_discrs, int,
  int, us_split_fields -> prop

logic l__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic equivalent_keys__function_guard : bool, int, int -> prop

type us_split_fields2 = { rec__p__my_maps__cursor__node : count_type
}

function us_split_fields_Node__projection(a: us_split_fields2) : count_type =
  (a).rec__p__my_maps__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep4 = { us_split_fields3 : us_split_fields2
}

function us_rep___9__projection(a: us_rep4) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq11 : us_rep4, us_rep4 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq11(a, b)].
  (((to_rep(((a).us_split_fields3).rec__p__my_maps__cursor__node) = to_rep(((b).us_split_fields3).rec__p__my_maps__cursor__node)) ->
  (bool_eq11(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__p__my_maps__cursor__node) = to_rep(((b).us_split_fields3).rec__p__my_maps__cursor__node))) ->
  (bool_eq11(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:count_type. (0 <= object__size4({ us_split_fields3 = {
  rec__p__my_maps__cursor__node = a } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:count_type. (0 <= object__alignment4({ us_split_fields3 = {
  rec__p__my_maps__cursor__node = a } })))

logic p__my_maps__cursor__node__first__bit : int

logic p__my_maps__cursor__node__last__bit : int

logic p__my_maps__cursor__node__position : int

axiom p__my_maps__cursor__node__first__bit_axiom :
  (0 <= p__my_maps__cursor__node__first__bit)

axiom p__my_maps__cursor__node__last__bit_axiom :
  (p__my_maps__cursor__node__first__bit <  p__my_maps__cursor__node__last__bit)

axiom p__my_maps__cursor__node__position_axiom :
  (0 <= p__my_maps__cursor__node__position)

logic user_eq9 : us_rep4, us_rep4 -> bool

logic dummy10 : count_type

type cursor__ref = { cursor__content : us_rep4
}

function cursor__ref___projection(a: cursor__ref) : us_rep4 =
  (a).cursor__content

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom no_element__def_axiom : (no_element = of_rep(0))

type positive_count_type

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : positive_count_type, positive_count_type -> bool

logic dummy11 : positive_count_type

type positive_count_type__ref = { positive_count_type__content :
positive_count_type
}

function positive_count_type__ref___projection(a: positive_count_type__ref) : positive_count_type =
  (a).positive_count_type__content

logic k_bigger_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

logic k_smaller_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

logic k_is_find__function_guard : bool, us_rep2, int, int -> prop

logic oeq__function_guard3 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq6(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get1(a,
    n) = get1(b, n)))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length2(a), length2(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get1(a,
        n) = get1(b, n))))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length2(a), length2(b)), false,
  false)))))

axiom find__post_axiom :
  (forall container:us_rep2.
  (forall key:int [find(container, key)]. (in_range4(key) ->
  (((0 <  find(container, key)) -> ((find(container,
  key) <= length2(container)) and ((not (bool_lt(key, get1(container,
  find(container, key))) = true)) and ((bool_lt(key, get1(container,
  find(container, key))) = false) -> (not (bool_lt(get1(container,
  find(container, key)), key) = true)))))) and in_range1(find(container,
  key))))))

type key_type__ref2 = { key_type__content2 : us_rep4
}

function key_type__ref___4__projection(a: key_type__ref2) : us_rep4 =
  (a).key_type__content2

logic length3 : us_rep3 -> int

logic length__function_guard3 : int, us_rep3 -> prop

logic is_empty : us_rep3 -> bool

logic is_empty__function_guard : bool, us_rep3 -> prop

logic has_key1 : us_rep3, us_rep4 -> bool

logic has_key__function_guard1 : bool, us_rep3, us_rep4 -> prop

logic get2 : us_rep3, us_rep4 -> int

logic get__function_guard2 : int, us_rep3, us_rep4 -> prop

logic keys_included1 : us_rep3, us_rep3 -> bool

logic keys_included__function_guard1 : bool, us_rep3, us_rep3 -> prop

axiom p_positions_shifted__post_axiom :
  (forall small:us_rep3. forall big:us_rep3.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((in_range6(cut1) and in_range1(count)) ->
  (((p_positions_shifted(small, big, cut1, count) = true) ->
  (((keys_included1(small, big) = true) and
  (forall i:count_type. ((has_key1(small, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) = true) -> (((get2(small, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i } }) <  cut1) ->
  (get2(big, { us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }) = get2(small, { us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }))) and ((not (get2(small, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) <  cut1)) -> ((get2(big, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }) - count) = get2(small, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }))))))) and
  (forall i:count_type. ((has_key1(big, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) = true) -> ((has_key1(small, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i } }) = true) or
  (((cut1 - count) <= (get2(big, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) - count)) and ((get2(big, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }) - count) <= (cut1 - 1)))))))) and ((((keys_included1(small,
  big) = true) and
  (forall i:count_type. ((has_key1(small, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) = true) -> (((get2(small, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i } }) <  cut1) and
  (get2(big, { us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }) = get2(small, { us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }))) or ((not (get2(small, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) <  cut1)) and ((get2(big, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }) - count) = get2(small, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }))))))) and
  (forall i:count_type. ((has_key1(big, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) = true) -> ((has_key1(small, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i } }) = true) or
  (((cut1 - count) <= (get2(big, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) - count)) and ((get2(big, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }) - count) <= (cut1 - 1))))))) -> (p_positions_shifted(small, big, cut1,
  count) = true))))))

logic length4 : us_rep1 -> int

logic length__function_guard4 : int, us_rep1 -> prop

logic is_empty1 : us_rep1 -> bool

logic is_empty__function_guard1 : bool, us_rep1 -> prop

axiom model____post_axiom : true

type key_type2

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : key_type2, key_type2 -> bool

logic dummy12 : key_type2

type key_type__ref3 = { key_type__content3 : key_type2
}

function key_type__ref___3__projection(a: key_type__ref3) : key_type2 =
  (a).key_type__content3

type extended_index

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : extended_index, extended_index -> bool

logic dummy13 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

logic iter_has_element__function_guard : bool, us_rep2, int -> prop

axiom keys__post_axiom :
  (forall container:count_type. forall container1:us_main_type [keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } })].
  ((((length2(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  container }; us_split_fields1 = { rec__p__my_maps__map = container1 }
  })) = length({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  container }; us_split_fields1 = { rec__p__my_maps__map = container1 }
  })) and
  (forall temp___411:int. ((in_range8(temp___411) and ((1 <= temp___411) and
  (temp___411 <= (0 + length2(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } })))))) -> (has_key(model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } }), get1(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } }),
  temp___411)) = true)))) and
  (forall key:int. ((in_range7(key) and (has_key(model__({ us_split_discrs1 =
  { rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }), key) = true)) -> ((0 <  find(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } }), key)) and
  ((not (bool_lt(get1(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }), find(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }), key)), key) = true)) and
  ((bool_lt(get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }),
  find(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity = container
  }; us_split_fields1 = { rec__p__my_maps__map = container1 } }), key)),
  key) = false) -> (not (bool_lt(key, get1(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }), find(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }), key))) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }))) -> ((find(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } }), get1(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } }), i)) = i) and
  (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get1(keys({
    us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
    us_split_fields1 = { rec__p__my_maps__map = container1 } }),
    i1) <  get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
    container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }),
    i)))) ->
  (((i <  length2(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
    us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
    us_split_fields1 = { rec__p__my_maps__map = container1 } })))) ->
    (get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
    container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }),
    i) <  get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
    container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }),
    i1)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
        us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
        us_split_fields1 = { rec__p__my_maps__map = container1 } })))) ->
        (get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
        container }; us_split_fields1 = { rec__p__my_maps__map = container1 }
        }), i) <  get1(keys({ us_split_discrs1 = {
        rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
        rec__p__my_maps__map = container1 } }), i1))))) ->
  (match_bool(true, false, false) = true)))) and ((not (i <  length2(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } })))) ->
  (match_bool(true, of_int(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get1(keys({
        us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
        us_split_fields1 = { rec__p__my_maps__map = container1 } }),
        i1) <  get1(keys({ us_split_discrs1 = {
        rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
        rec__p__my_maps__map = container1 } }), i))))) ->
  (((i <  length2(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
    us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
    us_split_fields1 = { rec__p__my_maps__map = container1 } })))) ->
    (get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
    container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }),
    i) <  get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
    container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }),
    i1)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
        us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
        us_split_fields1 = { rec__p__my_maps__map = container1 } })))) ->
        (get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
        container }; us_split_fields1 = { rec__p__my_maps__map = container1 }
        }), i) <  get1(keys({ us_split_discrs1 = {
        rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
        rec__p__my_maps__map = container1 } }), i1))))) ->
  (match_bool(false, false, false) = true)))) and ((not (i <  length2(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } })))) ->
  (match_bool(false, of_int(1), false) = true)))))) and ((not (0 <  i)) ->
  (((i <  length2(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
    us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
    us_split_fields1 = { rec__p__my_maps__map = container1 } })))) ->
    (get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
    container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }),
    i) <  get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
    container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }),
    i1)))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length2(keys({
        us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
        us_split_fields1 = { rec__p__my_maps__map = container1 } })))) ->
        (get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
        container }; us_split_fields1 = { rec__p__my_maps__map = container1 }
        }), i) <  get1(keys({ us_split_discrs1 = {
        rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
        rec__p__my_maps__map = container1 } }), i1))))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length2(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } })))) -> (match_bool(of_int(1),
  of_int(1), false) = true))))))))))

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } })].
  ((not (has_key1(positions({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }), { us_split_fields3 = {
  rec__p__my_maps__cursor__node = no_element } }) = true)) and
  (forall i:count_type. ((has_key1(positions({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }), { us_split_fields3 = {
  rec__p__my_maps__cursor__node = i } }) = true) -> (((1 <= get2(positions({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } }), {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i } })) and
  (get2(positions({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }), {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i } }) <= length({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } }))) and
  (forall j:count_type. ((has_key1(positions({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = container }; us_split_fields1 = {
  rec__p__my_maps__map = container1 } }), { us_split_fields3 = {
  rec__p__my_maps__cursor__node = j } }) = true) -> ((get2(positions({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = container };
  us_split_fields1 = { rec__p__my_maps__map = container1 } }), {
  us_split_fields3 = { rec__p__my_maps__cursor__node = i }
  }) = get2(positions({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  container }; us_split_fields1 = { rec__p__my_maps__map = container1 } }), {
  us_split_fields3 = { rec__p__my_maps__cursor__node = j } })) ->
  (bool_eq11({ us_split_fields3 = { rec__p__my_maps__cursor__node = i } }, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = j } }) = true)))))))))

logic oeq3 : us_rep1, us_rep1 -> bool

logic oeq__function_guard4 : bool, us_rep1, us_rep1 -> prop

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type.
  forall right:count_type. forall right1:us_main_type [oeq({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = left };
  us_split_fields1 = { rec__p__my_maps__map = left1 } }, { us_split_discrs1 =
  { rec__p__my_maps__map__capacity = right }; us_split_fields1 = {
  rec__p__my_maps__map = right1 } })]. ((oeq({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = left }; us_split_fields1 = {
  rec__p__my_maps__map = left1 } }, { us_split_discrs1 = {
  rec__p__my_maps__map__capacity = right }; us_split_fields1 = {
  rec__p__my_maps__map = right1 } }) = true) <-> (oeq3(model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = left };
  us_split_fields1 = { rec__p__my_maps__map = left1 } }), model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = right };
  us_split_fields1 = { rec__p__my_maps__map = right1 } })) = true)))

axiom oeq__post__dispatch_axiom : true

axiom has_key__post_axiom :
  (forall container:us_rep1.
  (forall key:int [has_key(container, key)]. (in_range7(key) ->
  ((of_int(1) = true) ->
  ((exists k1:int. ((in_range7(k1) and (has_key(container, k1) = true)) and
   ((bool_lt(k1, key) = false) and (bool_lt(key, k1) = false)))) ->
  (has_key(container, key) = true))))))

type element_type2

predicate in_range9(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : element_type2, element_type2 -> bool

logic dummy14 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___3__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

logic witness : us_rep1, int -> int

logic witness__function_guard : int, us_rep1, int -> prop

logic w_get : us_rep1, int -> int

logic w_get__function_guard : int, us_rep1, int -> prop

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall key:int [get(container, key)]. ((in_range7(key) and
  (has_key(container, key) = true)) -> (((of_int(1) = true) ->
  ((get(container, key) = w_get(container, witness(container, key))) and
  (forall k1:int. ((in_range7(k1) and (has_key(container, k1) = true)) ->
  ((((bool_lt(k1, key) = false) and (bool_lt(key, k1) = false)) ->
  (witness(container, key) = witness(container, k1))) and
  ((witness(container, key) = witness(container, k1)) -> ((not (bool_lt(k1,
  key) = true)) and ((bool_lt(k1, key) = false) -> (not (bool_lt(key,
  k1) = true)))))))))) and in_range9(get(container, key))))))

axiom length__post_axiom1 :
  (forall container:us_rep1 [length4(container)].
  in_range1(length4(container)))

axiom ole__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall key:int. ((in_range7(key) and (has_key(left, key) = true)) ->
  ((has_key(right, key) = true) and (get(right, key) = get(left, key)))))))

axiom oeq__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [oeq3(left, right)].
  ((oeq3(left, right) = true) <->
  ((forall key:int. ((in_range7(key) and (has_key(left, key) = true)) ->
   ((has_key(right, key) = true) and (get(right, key) = get(left, key))))) and
  (forall key:int. ((in_range7(key) and (has_key(right, key) = true)) ->
  (has_key(left, key) = true))))))

axiom is_empty__post_axiom :
  (forall container:us_rep1 [is_empty1(container)].
  ((is_empty1(container) = true) <->
  (forall key:int. (not (in_range7(key) and (has_key(container,
  key) = true))))))

axiom keys_included__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [keys_included(left, right)].
  ((keys_included(left, right) = true) <->
  (forall key:int. ((in_range7(key) and (has_key(left, key) = true)) ->
  (has_key(right, key) = true)))))

axiom keys_included_except__post_axiom :
  (forall left:us_rep1. forall right:us_rep1.
  (forall new_key:int [keys_included_except(left, right, new_key)].
  (in_range7(new_key) -> (((keys_included_except(left, right,
  new_key) = true) ->
  (forall key:int. ((in_range7(key) and (has_key(left, key) = true)) ->
  ((not ((not (bool_lt(key, new_key) = true)) and ((bool_lt(key,
  new_key) = false) -> (not (bool_lt(new_key, key) = true))))) ->
  (has_key(right, key) = true))))) and
  ((forall key:int. ((in_range7(key) and (has_key(left, key) = true)) ->
   ((not ((bool_lt(key, new_key) = false) and (bool_lt(new_key,
   key) = false))) -> (has_key(right, key) = true)))) ->
  (keys_included_except(left, right, new_key) = true))))))

axiom elements_equal_except__post_axiom :
  (forall left:us_rep1. forall right:us_rep1.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (in_range7(new_key) -> (((elements_equal_except(left, right,
  new_key) = true) ->
  (forall key:int. ((in_range7(key) and (has_key(left, key) = true)) ->
  ((not ((not (bool_lt(key, new_key) = true)) and ((bool_lt(key,
  new_key) = false) -> (not (bool_lt(new_key, key) = true))))) ->
  ((has_key(right, key) = true) and (get(left, key) = get(right, key))))))) and
  ((forall key:int. ((in_range7(key) and (has_key(left, key) = true)) ->
   ((not ((bool_lt(key, new_key) = false) and (bool_lt(new_key,
   key) = false))) -> ((has_key(right, key) = true) and (get(left,
   key) = get(right, key)))))) ->
  (elements_equal_except(left, right, new_key) = true))))))

logic has_witness : us_rep1, int -> bool

logic has_witness__function_guard : bool, us_rep1, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep1.
  (forall key:int [witness(container, key)]. ((in_range7(key) and
  (has_key(container, key) = true)) -> ((has_witness(container,
  witness(container, key)) = true) and in_range1(witness(container, key))))))

axiom w_get__post_axiom :
  (forall container:us_rep1.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range1(witness1) and (has_witness(container, witness1) = true)) ->
  in_range9(w_get(container, witness1)))))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length2(container)].
  (((0 + length2(container)) <= 2147483647) and
  in_range1(length2(container))))

type element_type3

predicate in_range10(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq14 : element_type3, element_type3 -> bool

logic dummy15 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref___4__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

axiom get__post_axiom1 :
  (forall container:us_rep2.
  (forall position:int [get1(container, position)]. ((in_range8(position) and
  ((1 <= position) and (position <= (0 + length2(container))))) ->
  in_range10(get1(container, position)))))

axiom has_key__post_axiom1 :
  (forall container:us_rep3.
  (forall key:count_type [has_key1(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } })]. ((of_int(0) = true) ->
  ((exists k1:count_type. ((has_key1(container, { us_split_fields3 = {
   rec__p__my_maps__cursor__node = k1 } }) = true) and (bool_eq11({
   us_split_fields3 = { rec__p__my_maps__cursor__node = k1 } }, {
   us_split_fields3 = { rec__p__my_maps__cursor__node = key } }) = true))) ->
  (has_key1(container, { us_split_fields3 = { rec__p__my_maps__cursor__node =
  key } }) = true)))))

type element_type4

predicate in_range11(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : element_type4, element_type4 -> bool

logic dummy16 : element_type4

type element_type__ref4 = { element_type__content4 : element_type4
}

function element_type__ref___5__projection(a: element_type__ref4) : element_type4 =
  (a).element_type__content4

logic witness1 : us_rep3, us_rep4 -> int

logic witness__function_guard1 : int, us_rep3, us_rep4 -> prop

logic w_get1 : us_rep3, int -> int

logic w_get__function_guard1 : int, us_rep3, int -> prop

axiom get__post_axiom2 :
  (forall container:us_rep3.
  (forall key:count_type [get2(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } })]. ((has_key1(container, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = key } }) = true) ->
  (((of_int(0) = true) -> ((get2(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } }) = w_get1(container,
  witness1(container, { us_split_fields3 = { rec__p__my_maps__cursor__node =
  key } }))) and
  (forall k1:count_type. ((has_key1(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = k1 } }) = true) -> ((bool_eq11({
  us_split_fields3 = { rec__p__my_maps__cursor__node = k1 } }, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = key } }) = true) <->
  (witness1(container, { us_split_fields3 = { rec__p__my_maps__cursor__node =
  key } }) = witness1(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = k1 } }))))))) and
  in_range11(get2(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } }))))))

axiom length__post_axiom3 :
  (forall container:us_rep3 [length3(container)].
  in_range1(length3(container)))

axiom oeq__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) <->
  ((forall key:count_type. ((has_key1(left, { us_split_fields3 = {
   rec__p__my_maps__cursor__node = key } }) = true) -> ((has_key1(right, {
   us_split_fields3 = { rec__p__my_maps__cursor__node = key } }) = true) and
   (get2(right, { us_split_fields3 = { rec__p__my_maps__cursor__node = key }
   }) = get2(left, { us_split_fields3 = { rec__p__my_maps__cursor__node = key
   } }))))) and
  (forall key:count_type. ((has_key1(right, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } }) = true) -> (has_key1(left, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = key } }) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep3 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key:count_type. (not (has_key1(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } }) = true)))))

axiom keys_included__post_axiom1 :
  (forall left:us_rep3. forall right:us_rep3 [keys_included1(left, right)].
  ((keys_included1(left, right) = true) <->
  (forall key:count_type. ((has_key1(left, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } }) = true) -> (has_key1(right, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = key } }) = true)))))

logic has_witness1 : us_rep3, int -> bool

logic has_witness__function_guard1 : bool, us_rep3, int -> prop

axiom has_witness__post_axiom1 : true

axiom witness__post_axiom1 :
  (forall container:us_rep3.
  (forall key:count_type [witness1(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } })]. ((has_key1(container, {
  us_split_fields3 = { rec__p__my_maps__cursor__node = key } }) = true) ->
  ((has_witness1(container, witness1(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } })) = true) and
  in_range1(witness1(container, { us_split_fields3 = {
  rec__p__my_maps__cursor__node = key } }))))))

axiom w_get__post_axiom1 :
  (forall container:us_rep3.
  (forall witness2:int [w_get1(container, witness2)].
  ((in_range1(witness2) and (has_witness1(container, witness2) = true)) ->
  in_range11(w_get1(container, witness2)))))

 (* File "a-cforma.ads", line 997, characters 0-0 *)
goal WP_parameter_def :
  (forall l__split_fields:us_main_type. forall result:bool.
  forall l__split_fields1:us_main_type. forall l__split_fields2:us_main_type.
  forall l__split_fields3:us_main_type. forall l__split_fields4:us_main_type.
  (in_range3(k) -> (in_range2(e) -> (((has_key(model__({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } }), k) = true) or (length({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields }
  }) <  to_rep(l__split_discrs))) -> (((((result = has_key(model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields } }), k)) and
  ((result = true) <-> (has_key(model__({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } }), k) = true))) and
  (((result = true) and ((((((oeq2(positions({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields1 } }), positions({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields }
  })) = true) and (get1(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields1 } }), find(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields1 } }),
  k)) = k)) and ((bool_eq1(length2(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } })), length2(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields1 }
  }))) = true) and
  (forall i:int. (((1 <= i) and (i <= (0 + length2(keys({ us_split_discrs1 =
  { rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } }))))) -> ((not (i = find(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields1 } }), k))) ->
  (get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  l__split_discrs }; us_split_fields1 = { rec__p__my_maps__map =
  l__split_fields } }), i) = get1(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields1 } }), i))))))) and (get(model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields1 } }),
  k) = e)) and (match_bool(keys_included(model__({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields1 } }), model__({ us_split_discrs1 =
  { rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } })), keys_included(model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields } }), model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields1 } })),
  false) = true)) and (elements_equal_except(model__({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields1 } }), model__({ us_split_discrs1 =
  { rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } }), k) = true))) or
  ((not (result = true)) and ((((((((((length({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields2 } }) = (length({ us_split_discrs1 =
  { rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } }) + 1)) and (has_key(model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields2 } }),
  k) = true)) and (get1(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields2 } }), find(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields2 } }),
  k)) = k)) and (get(model__({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields2 } }), k) = e)) and (ole(model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields } }), model__({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields2 }
  })) = true)) and (keys_included_except(model__({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields2 } }), model__({ us_split_discrs1 =
  { rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } }), k) = true)) and
  (forall i:int. (((1 <= i) and (i <= (find(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields2 } }), k) - 1))) -> (get1(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields } }),
  i) = get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  l__split_discrs }; us_split_fields1 = { rec__p__my_maps__map =
  l__split_fields2 } }), i))))) and
  ((forall i:int. (((find(keys({ us_split_discrs1 = {
   rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
   rec__p__my_maps__map = l__split_fields2 } }), k) <= i) and (i <= length({
   us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
   us_split_fields1 = { rec__p__my_maps__map = l__split_fields } }))) ->
   (get1(keys({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
   l__split_discrs }; us_split_fields1 = { rec__p__my_maps__map =
   l__split_fields } }), i) = get1(keys({ us_split_discrs1 = {
   rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
   rec__p__my_maps__map = l__split_fields2 } }), (i + 1))))) and
  (forall i:int. ((((find(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields2 } }), k) + 1) <= i) and
  (i <= (length({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  l__split_discrs }; us_split_fields1 = { rec__p__my_maps__map =
  l__split_fields } }) + 1))) -> (get1(keys({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } }), (i - 1)) = get1(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields2 } }), i)))))) and
  (p_positions_shifted(positions({ us_split_discrs1 = {
  rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields } }), positions({ us_split_discrs1 =
  { rec__p__my_maps__map__capacity = l__split_discrs }; us_split_fields1 = {
  rec__p__my_maps__map = l__split_fields2 } }), find(keys({
  us_split_discrs1 = { rec__p__my_maps__map__capacity = l__split_discrs };
  us_split_fields1 = { rec__p__my_maps__map = l__split_fields2 } }), k),
  1) = true)) and ({ rec__p__my_maps__map = l__split_fields1 } = {
  rec__p__my_maps__map = l__split_fields2 }))))) and
  ((l__split_fields3 = l__split_fields1) and ({ rec__p__my_maps__map =
  l__split_fields4 } = { rec__p__my_maps__map = l__split_fields1 }))) ->
  (has_key(model__({ us_split_discrs1 = { rec__p__my_maps__map__capacity =
  l__split_discrs }; us_split_fields1 = { rec__p__my_maps__map =
  l__split_fields3 } }), k) = true))))))
