(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type positive

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> natural

logic set : map, int, int, natural -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:natural [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:natural [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq4 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def3 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq4(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  (((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) and
  (to_rep1(get(a, temp___idx_154, temp___idx_155)) = to_rep1(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155))))) or
  (not (((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))))))) ->
  (bool_eq4(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep1(get(a, temp___idx_154, temp___idx_155)) = to_rep1(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155)))))))) -> (bool_eq4(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq4(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep1(get(a, temp___idx_154, temp___idx_155)) = to_rep1(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type t1

logic first1 : t1 -> integer

logic last1 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first1(mk1(f, l))) = f) and (to_rep(last1(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : map; rt : t; rt_2 : t1
}

function to_array(a: us_t) : map = (a).elts

function of_array(a: map, f: int, l: int, f2: int, l2: int) : us_t = { elts =
  a; rt = mk(f, l); rt_2 = mk1(f2, l2) }

function first2(a: us_t) : int = to_rep(first((a).rt))

function last2(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first2(a) <= last2(a)) ->
  (length(a) = ((last2(a) - first2(a)) + 1))) and
  ((not (first2(a) <= last2(a))) -> (length(a) = 0))))

function first_2(a: us_t) : int = to_rep(first1((a).rt_2))

function last_2(a: us_t) : int = to_rep(last1((a).rt_2))

logic length_2 : us_t -> int

axiom length_2_def :
  (forall a:us_t [length_2(a)]. (((first_2(a) <= last_2(a)) ->
  (length_2(a) = ((last_2(a) - first_2(a)) + 1))) and
  ((not (first_2(a) <= last_2(a))) -> (length_2(a) = 0))))

predicate dynamic_property2(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property(range_first1, range_last1, f1, l1) and
  dynamic_property1(range_first2, range_last2, f2, l2))

logic value__size : int

logic object__size : map -> int

logic value__component__size : int

logic object__component__size : map -> int

logic value__alignment : int

logic object__alignment : map -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:map. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:map. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom : (forall a:map. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), to_rep(first1((x).rt_2)),
  to_rep(last1((x).rt_2)), (y).elts, to_rep(first((y).rt)),
  to_rep(last((y).rt)), to_rep(first1((y).rt_2)), to_rep(last1((y).rt_2)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : map

logic dummy4 : t

logic dummy5 : t1

type m__ref = { m__content : us_t
}

function m__ref___projection(a: m__ref) : us_t = (a).m__content

logic new_m : int, int, int, int -> us_t

logic new_m__function_guard : us_t, int, int, int, int -> prop

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy6 : integer

type t5s__ref = { t5s__content : integer
}

function t5s__ref___projection(a: t5s__ref) : integer = (a).t5s__content

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy7 : integer

type t6s__ref = { t6s__content : integer
}

function t6s__ref___projection(a: t6s__ref) : integer = (a).t6s__content

type t2

logic first3 : t2 -> integer

logic last3 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first3(mk2(f, l))) = f) and (to_rep(last3(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type t3

logic first4 : t3 -> integer

logic last4 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first4(mk3(f, l))) = f) and (to_rep(last4(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t1 = { elts1 : map; rt1 : t2; rt_21 : t3
}

function to_array1(a: us_t1) : map = (a).elts1

function of_array1(a: map, f: int, l: int, f2: int, l2: int) : us_t1 = {
  elts1 = a; rt1 = mk2(f, l); rt_21 = mk3(f2, l2) }

function first5(a: us_t1) : int = to_rep(first3((a).rt1))

function last5(a: us_t1) : int = to_rep(last3((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first5(a) <= last5(a)) ->
  (length1(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length1(a) = 0))))

function first_21(a: us_t1) : int = to_rep(first4((a).rt_21))

function last_21(a: us_t1) : int = to_rep(last4((a).rt_21))

logic length_21 : us_t1 -> int

axiom length_2_def1 :
  (forall a:us_t1 [length_21(a)]. (((first_21(a) <= last_21(a)) ->
  (length_21(a) = ((last_21(a) - first_21(a)) + 1))) and
  ((not (first_21(a) <= last_21(a))) -> (length_21(a) = 0))))

predicate dynamic_property7(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property5(range_first1, range_last1, f1, l1) and
  dynamic_property6(range_first2, range_last2, f2, l2))

logic value__size1 : int

logic object__size1 : map -> int

logic value__component__size1 : int

logic object__component__size1 : map -> int

logic value__alignment1 : int

logic object__alignment1 : map -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:map. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:map. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 : (forall a:map. (0 <= object__alignment1(a)))

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first3((x).rt1)), to_rep(last3((x).rt1)), to_rep(first4((x).rt_21)),
  to_rep(last4((x).rt_21)), (y).elts1, to_rep(first3((y).rt1)),
  to_rep(last3((y).rt1)), to_rep(first4((y).rt_21)),
  to_rep(last4((y).rt_21)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy8 : map

logic dummy9 : t2

logic dummy10 : t3

type t7s__ref = { t7s__content : us_t1
}

function t7s__ref___projection(a: t7s__ref) : us_t1 = (a).t7s__content

logic temp___165 : int, int, int, int, int -> us_t1

axiom new_m__post_axiom :
  (forall f1:int. forall l1:int. forall f2:int. forall l2:int [new_m(f1, l1,
  f2, l2)]. ((((in_range(f1) and in_range(l1)) and in_range(f2)) and
  in_range(l2)) -> dynamic_property2(1, 2147483647, to_rep(first((new_m(f1,
  l1, f2, l2)).rt)), to_rep(last((new_m(f1, l1, f2, l2)).rt)), 1, 2147483647,
  to_rep(first1((new_m(f1, l1, f2, l2)).rt_2)), to_rep(last1((new_m(f1, l1,
  f2, l2)).rt_2)))))

axiom new_m__def_axiom :
  (forall f1:int. forall l1:int. forall f2:int. forall l2:int [new_m(f1, l1,
  f2, l2)]. ((((in_range(f1) and in_range(l1)) and in_range(f2)) and
  in_range(l2)) -> (new_m(f1, l1, f2, l2) = { elts = (temp___165(0, f1, l1,
  f2, l2)).elts1; rt = mk(to_rep(first3((temp___165(0, f1, l1, f2,
  l2)).rt1)), to_rep(last3((temp___165(0, f1, l1, f2, l2)).rt1))); rt_2 =
  mk1(to_rep(first4((temp___165(0, f1, l1, f2, l2)).rt_21)),
  to_rep(last4((temp___165(0, f1, l1, f2, l2)).rt_21))) })))

logic a__first : integer

logic a__last : integer

logic a__first_2 : integer

logic a__last_2 : integer

logic attr__ATTRIBUTE_ADDRESS : int

axiom def_axiom :
  (forall temp___167:int. forall temp___168:int. forall temp___169:int.
  forall temp___170:int. forall temp___171:int. (in_range2(temp___167) ->
  ((dynamic_property2(1, 2147483647, temp___168, temp___169, 1, 2147483647,
  temp___170, temp___171) -> (((to_rep(first4((temp___165(temp___167,
  temp___168, temp___169, temp___170, temp___171)).rt_21)) = temp___170) and
  (to_rep(last4((temp___165(temp___167, temp___168, temp___169, temp___170,
  temp___171)).rt_21)) = temp___171)) and
  ((to_rep(first3((temp___165(temp___167, temp___168, temp___169, temp___170,
  temp___171)).rt1)) = temp___168) and (to_rep(last3((temp___165(temp___167,
  temp___168, temp___169, temp___170, temp___171)).rt1)) = temp___169)))) and
  (forall temp___172:int. forall temp___173:int.
  (to_rep1(get((temp___165(temp___167, temp___168, temp___169, temp___170,
  temp___171)).elts1, temp___172, temp___173)) = temp___167)))))

 (* File "array_types.ads", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall a:map. forall array_types__a__assume:map.
  forall array_types__a__assume1:t. forall array_types__a__assume2:t1.
  forall result:map. forall a1:map. (((({ elts = array_types__a__assume; rt =
  array_types__a__assume1; rt_2 = array_types__a__assume2 } = new_m(1, 3, 2,
  5)) and (dynamic_property2(1, 2147483647,
  to_rep(first(array_types__a__assume1)),
  to_rep(last(array_types__a__assume1)), 1, 2147483647,
  to_rep(first1(array_types__a__assume2)),
  to_rep(last1(array_types__a__assume2))) and ({ elts =
  array_types__a__assume; rt = array_types__a__assume1; rt_2 =
  array_types__a__assume2 } = { elts = (temp___165(0, 1, 3, 2, 5)).elts1;
  rt = mk(to_rep(first3((temp___165(0, 1, 3, 2, 5)).rt1)),
  to_rep(last3((temp___165(0, 1, 3, 2, 5)).rt1))); rt_2 =
  mk1(to_rep(first4((temp___165(0, 1, 3, 2, 5)).rt_21)),
  to_rep(last4((temp___165(0, 1, 3, 2, 5)).rt_21))) }))) and
  (((result = a) and (a1 = array_types__a__assume)) and
  ((to_rep(a__first) = to_rep(first(array_types__a__assume1))) and
  ((to_rep(a__last) = to_rep(last(array_types__a__assume1))) and
  ((to_rep(a__first_2) = to_rep(first1(array_types__a__assume2))) and
  (to_rep(a__last_2) = to_rep(last1(array_types__a__assume2)))))))) ->
  (dynamic_property2(1, 2147483647, to_rep(a__first), to_rep(a__last), 1,
  2147483647, to_rep(a__first_2), to_rep(a__last_2)) ->
  (to_rep(a__first) = to_rep(a__first_2)))))
