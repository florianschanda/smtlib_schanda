(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort capacity_range 0)
(declare-fun capacity_rangeqtint (capacity_range) Int)
(assert (forall ((i capacity_range)) (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 10001))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (capacity_range capacity_range) Bool)
(declare-const dummy capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__sum_elem__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range (rec__sum_elem__partitions__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__sum_elem__partitions__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type (rec__sum_elem__partitions__vector a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const sum_elem__partitions__vector__capacity__first__bit Int)
(declare-const sum_elem__partitions__vector__capacity__last__bit Int)
(declare-const sum_elem__partitions__vector__capacity__position Int)
(assert (<= 0 sum_elem__partitions__vector__capacity__first__bit))
(assert (< sum_elem__partitions__vector__capacity__first__bit sum_elem__partitions__vector__capacity__last__bit))
(assert (<= 0 sum_elem__partitions__vector__capacity__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content a))
(define-fun to_rep ((x capacity_range)) Int (capacity_rangeqtint x))
(declare-fun of_rep (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x capacity_range)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun in_range1 ((rec__sum_elem__partitions__vector__capacity1 Int) (a us_rep)) Bool (= rec__sum_elem__partitions__vector__capacity1 (to_rep (rec__sum_elem__partitions__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const sum_elem__partitions__vector__capacity__first__bit1 Int)
(declare-const sum_elem__partitions__vector__capacity__last__bit1 Int)
(declare-const sum_elem__partitions__vector__capacity__position1 Int)
(assert (<= 0 sum_elem__partitions__vector__capacity__first__bit1))
(assert (< sum_elem__partitions__vector__capacity__first__bit1 sum_elem__partitions__vector__capacity__last__bit1))
(assert (<= 0 sum_elem__partitions__vector__capacity__position1))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((tpS__ref (mk_tpS__ref (tpS__content us_rep)))))
(define-fun tpS__ref___projection ((a tpS__ref)) us_rep (tpS__content a))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_406 us_rep) (temp___is_init_402 Bool) (temp___skip_constant_403 Bool) (temp___do_toplevel_404 Bool) (temp___do_typ_inv_405 Bool)) Bool (=> (not (= temp___skip_constant_403 true)) (in_range1 10 temp___expr_406)))
(define-fun default_initial_assumption ((temp___expr_408 us_rep) (temp___skip_top_level_409 Bool)) Bool (and (= (to_rep (rec__sum_elem__partitions__vector__capacity (us_split_discrs1 temp___expr_408))) 10) (=> (not (= temp___skip_top_level_409 true)) (= (is_empty temp___expr_408) true))))
(declare-const p__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant1 ((temp___expr_267 Int) (temp___is_init_263 Bool) (temp___skip_constant_264 Bool) (temp___do_toplevel_265 Bool) (temp___do_typ_inv_266 Bool)) Bool (=> (or (= temp___is_init_263 true) (<= 0 10001)) (in_range temp___expr_267)))
(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)
(define-fun capacity ((container us_rep)) Int (ite (= (distinct 1 0) true) (to_rep (rec__sum_elem__partitions__vector__capacity (us_split_discrs1 container))) 10001))
(declare-fun capacity__function_guard (Int us_rep) Bool)
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (capacity container)) (dynamic_invariant1 result true false true true))) :pattern ((length container)))))
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (= (length container) 0)) :pattern ((is_empty container)))))
(assert (not (in_range 10)))
(check-sat)
(exit)
