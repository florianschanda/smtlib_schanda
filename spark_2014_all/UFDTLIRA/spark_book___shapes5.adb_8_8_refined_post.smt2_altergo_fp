(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type coordinate_type

predicate in_range2(x: int) = (((- 100) <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : coordinate_type, coordinate_type -> bool

logic dummy1 : coordinate_type

type coordinate_type__ref = { coordinate_type__content : coordinate_type
}

function coordinate_type__ref___projection(a: coordinate_type__ref) : coordinate_type =
  (a).coordinate_type__content

logic to_rep : coordinate_type -> int

logic of_rep : int -> coordinate_type

axiom inversion_axiom :
  (forall x:coordinate_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:coordinate_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type radius_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : radius_type, radius_type -> bool

logic dummy2 : radius_type

type radius_type__ref = { radius_type__content : radius_type
}

function radius_type__ref___projection(a: radius_type__ref) : radius_type =
  (a).radius_type__content

logic to_rep1 : radius_type -> int

logic of_rep1 : int -> radius_type

axiom inversion_axiom1 :
  (forall x:radius_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:radius_type [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__shapes5__circle__center_x : coordinate_type;
rec__shapes5__circle__center_y : coordinate_type;
rec__shapes5__circle__radius : radius_type
}

function us_split_fields_Center_X__projection(a: us_split_fields) : coordinate_type =
  (a).rec__shapes5__circle__center_x

function us_split_fields_Center_Y__projection(a: us_split_fields) : coordinate_type =
  (a).rec__shapes5__circle__center_y

function us_split_fields_Radius__projection(a: us_split_fields) : radius_type =
  (a).rec__shapes5__circle__radius

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep(((a).us_split_fields1).rec__shapes5__circle__center_x) = to_rep(((b).us_split_fields1).rec__shapes5__circle__center_x)) and
  (to_rep(((a).us_split_fields1).rec__shapes5__circle__center_y) = to_rep(((b).us_split_fields1).rec__shapes5__circle__center_y))) and
  (to_rep1(((a).us_split_fields1).rec__shapes5__circle__radius) = to_rep1(((b).us_split_fields1).rec__shapes5__circle__radius))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields1).rec__shapes5__circle__center_x) = to_rep(((b).us_split_fields1).rec__shapes5__circle__center_x)) and
  (to_rep(((a).us_split_fields1).rec__shapes5__circle__center_y) = to_rep(((b).us_split_fields1).rec__shapes5__circle__center_y))) and
  (to_rep1(((a).us_split_fields1).rec__shapes5__circle__radius) = to_rep1(((b).us_split_fields1).rec__shapes5__circle__radius)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:coordinate_type. forall a1:coordinate_type.
  forall a2:radius_type. (0 <= object__size({ us_split_fields1 = {
  rec__shapes5__circle__center_x = a; rec__shapes5__circle__center_y = a1;
  rec__shapes5__circle__radius = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:coordinate_type. forall a1:coordinate_type.
  forall a2:radius_type. (0 <= object__alignment({ us_split_fields1 = {
  rec__shapes5__circle__center_x = a; rec__shapes5__circle__center_y = a1;
  rec__shapes5__circle__radius = a2 } })))

logic shapes5__circle__center_x__first__bit : int

logic shapes5__circle__center_x__last__bit : int

logic shapes5__circle__center_x__position : int

axiom shapes5__circle__center_x__first__bit_axiom :
  (0 <= shapes5__circle__center_x__first__bit)

axiom shapes5__circle__center_x__last__bit_axiom :
  (shapes5__circle__center_x__first__bit <  shapes5__circle__center_x__last__bit)

axiom shapes5__circle__center_x__position_axiom :
  (0 <= shapes5__circle__center_x__position)

logic shapes5__circle__center_y__first__bit : int

logic shapes5__circle__center_y__last__bit : int

logic shapes5__circle__center_y__position : int

axiom shapes5__circle__center_y__first__bit_axiom :
  (0 <= shapes5__circle__center_y__first__bit)

axiom shapes5__circle__center_y__last__bit_axiom :
  (shapes5__circle__center_y__first__bit <  shapes5__circle__center_y__last__bit)

axiom shapes5__circle__center_y__position_axiom :
  (0 <= shapes5__circle__center_y__position)

logic shapes5__circle__radius__first__bit : int

logic shapes5__circle__radius__last__bit : int

logic shapes5__circle__radius__position : int

axiom shapes5__circle__radius__first__bit_axiom :
  (0 <= shapes5__circle__radius__first__bit)

axiom shapes5__circle__radius__last__bit_axiom :
  (shapes5__circle__radius__first__bit <  shapes5__circle__radius__last__bit)

axiom shapes5__circle__radius__position_axiom :
  (0 <= shapes5__circle__radius__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : coordinate_type

logic dummy4 : coordinate_type

logic dummy5 : radius_type

type circle__ref = { circle__content : us_rep
}

function circle__ref___projection(a: circle__ref) : us_rep =
  (a).circle__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic radius : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic in_bounds : us_rep, int -> bool

logic in_bounds__function_guard : bool, us_rep, int -> prop

axiom in_bounds__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS4 : int

logic wild_man : int

logic r : int

logic shapes5__make_circle__result : coordinate_type

logic shapes5__make_circle__result1 : coordinate_type

logic shapes5__make_circle__result2 : radius_type

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : radius_type

logic o5 : coordinate_type

logic o6 : coordinate_type

logic o7 : coordinate_type

logic o8 : coordinate_type

logic o9 : radius_type

logic o10 : coordinate_type

logic o11 : coordinate_type

logic o12 : radius_type

logic result : int

logic r1 : int

logic result1 : int

logic r2 : int

logic result2 : int

logic r3 : int

logic result3 : int

logic r4 : int

logic result4 : int

logic r5 : int

logic result5 : coordinate_type

logic result6 : coordinate_type

logic result7 : radius_type

logic shapes5__make_circle__result3 : coordinate_type

logic shapes5__make_circle__result4 : coordinate_type

logic shapes5__make_circle__result5 : radius_type

logic shapes5__make_circle__result6 : coordinate_type

logic shapes5__make_circle__result7 : coordinate_type

logic shapes5__make_circle__result8 : radius_type

logic shapes5__make_circle__result9 : coordinate_type

logic shapes5__make_circle__result10 : coordinate_type

logic shapes5__make_circle__result11 : radius_type

logic r6 : int

logic shapes5__make_circle__result12 : coordinate_type

logic shapes5__make_circle__result13 : coordinate_type

logic shapes5__make_circle__result14 : radius_type

logic r7 : int

logic shapes5__make_circle__result15 : coordinate_type

logic shapes5__make_circle__result16 : coordinate_type

logic shapes5__make_circle__result17 : radius_type

axiom H : in_range2(x)

axiom H1 : in_range2(y)

axiom H2 : in_range3(radius)

axiom H3 : in_range1(wild_man)

axiom H4 : (result = r)

axiom H5 : (r1 = radius)

axiom H6 : in_range3(r1)

axiom H7 : (((100 - x) <= r1) -> ((o = (100 - x)) and in_range3((100 - x))))

axiom H8 : (((100 - x) <= r1) -> (r1 = result1))

axiom H9 : (((100 - x) <= r1) -> (r2 = o))

axiom H10 : ((not ((100 - x) <= r1)) -> (r2 = r1))

axiom H11 : (((x - (- 100)) <= r2) -> ((o1 = (x - (- 100))) and
  in_range3((x - (- 100)))))

axiom H12 : (((x - (- 100)) <= r2) -> (r2 = result2))

axiom H13 : (((x - (- 100)) <= r2) -> (r3 = o1))

axiom H14 : ((not ((x - (- 100)) <= r2)) -> (r3 = r2))

axiom H15 : (((100 - y) <= r3) -> ((o2 = (100 - y)) and
  in_range3((100 - y))))

axiom H16 : (((100 - y) <= r3) -> (r3 = result3))

axiom H17 : (((100 - y) <= r3) -> (r4 = o2))

axiom H18 : ((not ((100 - y) <= r3)) -> (r4 = r3))

axiom H19 : (((y - (- 100)) <= r4) -> ((o3 = (y - (- 100))) and
  in_range3((y - (- 100)))))

axiom H20 : (((y - (- 100)) <= r4) -> (result4 = r4))

axiom H21 : (((y - (- 100)) <= r4) -> (r5 = o3))

axiom H22 : ((not ((y - (- 100)) <= r4)) -> (r5 = r4))

axiom H23 : (shapes5__make_circle__result6 = shapes5__make_circle__result3)

axiom H24 : (shapes5__make_circle__result7 = shapes5__make_circle__result4)

axiom H25 : (shapes5__make_circle__result8 = shapes5__make_circle__result5)

axiom H26 :
  ((shapes5__make_circle__result9 = shapes5__make_circle__result3) and
  ((shapes5__make_circle__result10 = shapes5__make_circle__result4) and
  (shapes5__make_circle__result11 = shapes5__make_circle__result5)))

axiom H27 : (to_rep1(o4) = r5)

axiom H28 : (to_rep(o5) = y)

axiom H29 : (to_rep(o6) = x)

axiom H30 : (o6 = o7)

axiom H31 : (o5 = o8)

axiom H32 : (o4 = o9)

axiom H33 : (o10 = o7)

axiom H34 : (o11 = o8)

axiom H35 : (o12 = o9)

axiom H36 : (result5 = shapes5__make_circle__result)

axiom H37 : (result6 = shapes5__make_circle__result1)

axiom H38 : (result7 = shapes5__make_circle__result2)

axiom H39 : ((shapes5__make_circle__result3 = o10) and
  ((shapes5__make_circle__result4 = o11) and
  (shapes5__make_circle__result5 = o12)))

axiom H40 :
  ((shapes5__make_circle__result12 = shapes5__make_circle__result6) and
  ((shapes5__make_circle__result13 = shapes5__make_circle__result7) and
  (shapes5__make_circle__result14 = shapes5__make_circle__result8)))

axiom H41 : (r6 = r5)

axiom H42 :
  ((shapes5__make_circle__result15 = shapes5__make_circle__result9) and
  ((shapes5__make_circle__result16 = shapes5__make_circle__result10) and
  (shapes5__make_circle__result17 = shapes5__make_circle__result11)))

axiom H43 : (r7 = r5)

 (* File "shapes5.ads", line 28, characters 0-0 *)
goal WP_parameter_def :
  in_range2((to_rep(shapes5__make_circle__result12) + to_rep1(shapes5__make_circle__result14)))
