(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort privileget 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (privileget privileget) Bool)
(declare-const dummy privileget)
(declare-datatypes () ((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget (privileget__content a))
(declare-fun to_rep (privileget) Int)
(declare-fun of_rep (Int) privileget)
(assert (forall ((x privileget)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort opandnullt 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (opandnullt opandnullt) Bool)
(declare-const dummy1 opandnullt)
(declare-datatypes () ((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt (opandnullt__content a))
(declare-fun to_rep1 (opandnullt) Int)
(declare-fun of_rep1 (Int) opandnullt)
(assert (forall ((x opandnullt)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x opandnullt)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__admin__t__rolepresent privileget) (rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget (rec__admin__t__rolepresent a))
(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt (rec__admin__t__currentop a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__admin__t__rolepresent (us_split_fields1 a))) (to_rep (rec__admin__t__rolepresent (us_split_fields1 b)))) (= (to_rep1 (rec__admin__t__currentop (us_split_fields1 a))) (to_rep1 (rec__admin__t__currentop (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const admin__t__rolepresent__first__bit Int)
(declare-const admin__t__rolepresent__last__bit Int)
(declare-const admin__t__rolepresent__position Int)
(assert (<= 0 admin__t__rolepresent__first__bit))
(assert (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))
(assert (<= 0 admin__t__rolepresent__position))
(declare-const admin__t__currentop__first__bit Int)
(declare-const admin__t__currentop__last__bit Int)
(declare-const admin__t__currentop__position Int)
(assert (<= 0 admin__t__currentop__first__bit))
(assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))
(assert (<= 0 admin__t__currentop__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-fun rolepresent (us_rep) Int)
(declare-fun rolepresent__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_179 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 0 3)) (in_range1 temp___expr_179)))
(assert (forall ((theadmin us_rep)) (! (dynamic_invariant (rolepresent theadmin) true false true) :pattern ((rolepresent theadmin)))))
(declare-fun isdoingop (us_rep) Bool)
(declare-fun isdoingop__function_guard (Bool us_rep) Bool)
(assert true)
(declare-fun thecurrentop (us_rep) Int)
(declare-fun thecurrentop__function_guard (Int us_rep) Bool)
(declare-sort opt 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (opt opt) Bool)
(declare-const dummy3 opt)
(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))
(define-fun dynamic_invariant1 ((temp___expr_267 Int) (temp___is_init_264 Bool) (temp___skip_constant_265 Bool) (temp___do_toplevel_266 Bool)) Bool (=> (or (= temp___is_init_264 true) (<= 1 4)) (in_range3 temp___expr_267)))
(assert (forall ((theadmin us_rep)) (! (=> (= (isdoingop theadmin) true) (dynamic_invariant1 (thecurrentop theadmin) true false true)) :pattern ((thecurrentop theadmin)))))
(declare-fun ispresent (us_rep) Bool)
(declare-fun ispresent__function_guard (Bool us_rep) Bool)
(assert true)
(declare-sort yearst 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (yearst yearst) Bool)
(declare-const dummy4 yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(declare-fun to_rep2 (yearst) Int)
(declare-fun of_rep2 (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x yearst)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort monthst 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (monthst monthst) Bool)
(declare-const dummy5 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(declare-fun to_rep3 (monthst) Int)
(declare-fun of_rep3 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x monthst)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort dayst 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (dayst dayst) Bool)
(declare-const dummy6 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(declare-fun to_rep4 (dayst) Int)
(declare-fun of_rep4 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x dayst)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-sort millisecst 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (millisecst millisecst) Bool)
(declare-const dummy7 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(declare-fun to_rep5 (millisecst) Int)
(declare-fun of_rep5 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x millisecst)) (! (in_range7 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields2)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__projection ((a us_split_fields2)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__projection ((a us_split_fields2)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields2)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep2 (rec__clock__timet__year (us_split_fields3 a))) (to_rep2 (rec__clock__timet__year (us_split_fields3 b)))) (= (to_rep3 (rec__clock__timet__month (us_split_fields3 a))) (to_rep3 (rec__clock__timet__month (us_split_fields3 b))))) (= (to_rep4 (rec__clock__timet__day (us_split_fields3 a))) (to_rep4 (rec__clock__timet__day (us_split_fields3 b))))) (= (to_rep5 (rec__clock__timet__millisec (us_split_fields3 a))) (to_rep5 (rec__clock__timet__millisec (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep1)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep1 (timet__content a))
(declare-fun thecurrenttime (us_private) us_rep1)
(declare-fun thecurrenttime__function_guard (us_rep1 us_private) Bool)
(assert true)
(declare-fun greaterthanorequal (us_rep1 us_rep1) Bool)
(declare-fun greaterthanorequal__function_guard (Bool us_rep1 us_rep1) Bool)
(assert true)
(declare-fun theauthcertrole (us_private) Int)
(declare-fun theauthcertrole__function_guard (Int us_private) Bool)
(assert (forall ((admintoken__state us_private)) (! (dynamic_invariant (theauthcertrole admintoken__state) true false true) :pattern ((theauthcertrole admintoken__state)))))
(declare-fun isgood (us_private) Bool)
(declare-fun isgood__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun authcertvalid (us_private) Bool)
(declare-fun authcertvalid__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun islocked (us_private) Bool)
(declare-fun islocked__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun alarm_timeout (us_private) us_rep1)
(declare-fun alarm_timeout__function_guard (us_rep1 us_private) Bool)
(assert true)
(declare-fun thecurrentdoor (us_private) Int)
(declare-fun thecurrentdoor__function_guard (Int us_private) Bool)
(declare-sort t 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (t t) Bool)
(declare-const dummy9 t)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 t)))))
(define-fun t__ref___4__projection ((a t__ref1)) t (t__content1 a))
(define-fun dynamic_invariant2 ((temp___expr_1036 Int) (temp___is_init_1033 Bool) (temp___skip_constant_1034 Bool) (temp___do_toplevel_1035 Bool)) Bool (=> (or (= temp___is_init_1033 true) (<= 0 1)) (in_range8 temp___expr_1036)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant2 (thecurrentdoor door__state) true false true) :pattern ((thecurrentdoor door__state)))))
(declare-fun thedooralarm (us_private) Int)
(declare-fun thedooralarm__function_guard (Int us_private) Bool)
(declare-sort statust 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq10 (statust statust) Bool)
(declare-const dummy10 statust)
(declare-datatypes () ((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content a))
(define-fun dynamic_invariant3 ((temp___expr_306 Int) (temp___is_init_303 Bool) (temp___skip_constant_304 Bool) (temp___do_toplevel_305 Bool)) Bool (=> (or (= temp___is_init_303 true) (<= 0 1)) (in_range9 temp___expr_306)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant3 (thedooralarm door__state) true false true) :pattern ((thedooralarm door__state)))))
(declare-sort statust1 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq11 (statust1 statust1) Bool)
(declare-const dummy11 statust1)
(declare-datatypes () ((statust__ref1 (mk_statust__ref1 (statust__content1 statust1)))))
(define-fun statust__ref___2__projection ((a statust__ref1)) statust1 (statust__content1 a))
(define-fun dynamic_invariant4 ((temp___expr_1792 Int) (temp___is_init_1789 Bool) (temp___skip_constant_1790 Bool) (temp___do_toplevel_1791 Bool)) Bool (=> (or (= temp___is_init_1789 true) (<= 0 8)) (in_range10 temp___expr_1792)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun current_latch (us_private) Int)
(declare-fun current_latch__function_guard (Int us_private) Bool)
(declare-fun latch_timeout (us_private) us_rep1)
(declare-fun latch_timeout__function_guard (us_rep1 us_private) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant5 ((temp___expr_261 Int) (temp___is_init_258 Bool) (temp___skip_constant_259 Bool) (temp___do_toplevel_260 Bool)) Bool (=> (or (= temp___is_init_258 true) (<= 0 4)) (in_range2 temp___expr_261)))
(define-fun dynamic_invariant6 ((temp___expr_366 Int) (temp___is_init_363 Bool) (temp___skip_constant_364 Bool) (temp___do_toplevel_365 Bool)) Bool (=> (or (= temp___is_init_363 true) (<= 1901 2099)) (in_range4 temp___expr_366)))
(define-fun dynamic_invariant7 ((temp___expr_372 Int) (temp___is_init_369 Bool) (temp___skip_constant_370 Bool) (temp___do_toplevel_371 Bool)) Bool (=> (or (= temp___is_init_369 true) (<= 1 12)) (in_range5 temp___expr_372)))
(define-fun dynamic_invariant8 ((temp___expr_378 Int) (temp___is_init_375 Bool) (temp___skip_constant_376 Bool) (temp___do_toplevel_377 Bool)) Bool (=> (or (= temp___is_init_375 true) (<= 1 31)) (in_range6 temp___expr_378)))
(define-fun dynamic_invariant9 ((temp___expr_402 Int) (temp___is_init_399 Bool) (temp___skip_constant_400 Bool) (temp___do_toplevel_401 Bool)) Bool (=> (or (= temp___is_init_399 true) (<= 0 86399999)) (in_range7 temp___expr_402)))
(declare-sort t1 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq12 (t1 t1) Bool)
(declare-const dummy12 t1)
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 t1)))))
(define-fun t__ref___3__projection ((a t__ref2)) t1 (t__content2 a))
(define-fun dynamic_invariant10 ((temp___expr_1030 Int) (temp___is_init_1027 Bool) (temp___skip_constant_1028 Bool) (temp___do_toplevel_1029 Bool)) Bool (=> (or (= temp___is_init_1027 true) (<= 0 1)) (in_range11 temp___expr_1030)))
(assert (forall ((latch__state us_private)) (! (dynamic_invariant10 (current_latch latch__state) true false true) :pattern ((current_latch latch__state)))))
(assert true)
(declare-const status Int)
(declare-const theadmin__split_fields privileget)
(declare-const theadmin__split_fields1 opandnullt)
(declare-const currenttime us_private)
(declare-const filestate us_private)
(declare-const state us_private)
(declare-const state1 us_private)
(declare-const state2 us_private)
(declare-const state3 us_private)
(declare-const state4 us_private)
(declare-const state5 us_private)
(declare-const writtenstate us_private)
(declare-const output us_private)
(declare-const state6 us_private)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Bool)
(declare-const o5 Bool)
(declare-const o6 us_rep1)
(declare-const o7 us_rep1)
(declare-const o8 Bool)
(declare-const o9 Bool)
(declare-const o10 Bool)
(declare-const o11 Int)
(declare-const o12 Bool)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Bool)
(declare-const o16 Int)
(declare-const o17 Bool)
(declare-const o18 Bool)
(declare-const o19 Int)
(declare-const o20 Bool)
(declare-const o21 Bool)
(declare-const o22 Bool)
(declare-const o23 Bool)
(declare-const o24 Bool)
(declare-const o25 Bool)
(declare-const o26 Bool)
(declare-const o27 Int)
(declare-const o28 Bool)
(declare-const o29 Bool)
(declare-const o30 Bool)
(declare-const o31 Int)
(declare-const o32 Bool)
(declare-const o33 Bool)
(declare-const o34 Int)
(declare-const o35 Bool)
(declare-const o36 Int)
(declare-const o37 Int)
(declare-const o38 Bool)
(declare-const o39 Bool)
(declare-const o40 Bool)
(declare-const o41 Bool)
(declare-const o42 Bool)
(declare-const o43 Bool)
(declare-const o44 Bool)
(declare-const o45 Bool)
(declare-const o46 Int)
(declare-const o47 Bool)
(declare-const o48 Bool)
(declare-const o49 Bool)
(declare-const filestate1 us_private)
(declare-const state7 us_private)
(declare-const state8 us_private)
(declare-const state9 us_private)
(declare-const state10 us_private)
(declare-const state11 us_private)
(declare-const state12 us_private)
(declare-const writtenstate1 us_private)
(declare-const output1 us_private)
(declare-const state13 us_private)
(declare-const result Bool)
(declare-const status1 Int)
(declare-const theadmin__split_fields2 us_split_fields)
(declare-const state14 us_private)
(declare-const filestate2 us_private)
(declare-const state15 us_private)
(declare-const writtenstate2 us_private)
(declare-const output2 us_private)
(declare-const state16 us_private)
(declare-const result1 Bool)
(declare-const status2 Int)
(declare-const theadmin__split_fields3 us_split_fields)
(declare-const filestate3 us_private)
(declare-const state17 us_private)
(declare-const state18 us_private)
(declare-const filestate4 us_private)
(declare-const state19 us_private)
(declare-const state20 us_private)
(declare-const result2 Bool)
(declare-const status3 Int)
(declare-const theadmin__split_fields4 us_split_fields)
(declare-const state21 us_private)
(declare-const filestate5 us_private)
(declare-const state22 us_private)
(declare-const state23 us_private)
(declare-const state24 us_private)
(declare-const state25 us_private)
(declare-const status4 Int)
(declare-const theadmin__split_fields5 us_split_fields)
(declare-const state26 us_private)
(declare-const filestate6 us_private)
(declare-const state27 us_private)
(declare-const state28 us_private)
(declare-const state29 us_private)
(declare-const state30 us_private)
(declare-const state31 us_private)
(declare-const state32 us_private)
(declare-const status5 int__ref)
(declare-const theadmin__split_fields6 us_split_fields__ref)
(declare-const filestate7 us_private__ref)
(declare-const state33 us_private__ref)
(declare-const state34 us_private__ref)
(declare-const filestate8 us_private__ref)
(declare-const state35 us_private__ref)
(declare-const state36 us_private__ref)
(declare-const state37 us_private__ref)
(declare-const state38 us_private__ref)
(declare-const state39 us_private__ref)
(declare-const writtenstate3 us_private__ref)
(declare-const output3 us_private__ref)
(declare-const state40 us_private__ref)
(declare-const state41 us_private__ref)
(declare-const status6 Int)
(declare-const theadmin__split_fields7 us_split_fields)
(declare-const filestate9 us_private)
(declare-const state42 us_private)
(declare-const state43 us_private)
(declare-const filestate10 us_private)
(declare-const state44 us_private)
(declare-const state45 us_private)
(declare-const state46 us_private)
(declare-const state47 us_private)
(declare-const state48 us_private)
(declare-const writtenstate4 us_private)
(declare-const output4 us_private)
(declare-const state49 us_private)
(declare-const state50 us_private)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const result7 Bool)
(assert (in_range10 status))
(assert (and (and (and (and (and (and (and (or (= status 6) (= status 7)) (=> (and (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true) (= (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 4)) (= status 6))) (= (ispresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)) (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)) (= (and (and (= (islocked state2) true) (= (thecurrentdoor state3) 0)) (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state3)) true)) (= (thedooralarm state3) 0))) (=> (= (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1) (and (and (= (isgood state1) true) (= (authcertvalid state1) true)) (= (theauthcertrole state1) 1)))) (=> (and (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true) (= (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3)) (= (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1))) (=> (= (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1) (or (and (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true) (= (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3)) (not (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))))
(assert (and (= o (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1)))) (in_range3 o)))
(assert (= result (ite (= o 1) true false)))
(assert (=> (= result true) (and (and (and (and (and (and (and (and (or (or (= status1 6) (= status1 7)) (= status1 3)) (= (ispresent (mk___rep theadmin__split_fields2)) true)) (=> (or (= status1 6) (= status1 7)) (and (and (= (isdoingop (mk___rep theadmin__split_fields2)) true) (= (ispresent (mk___rep theadmin__split_fields2)) true)) (= (thecurrentop (mk___rep theadmin__split_fields2)) 1)))) (=> (= status1 3) (not (= (isdoingop (mk___rep theadmin__split_fields2)) true)))) (=> (= (rolepresent (mk___rep theadmin__split_fields2)) 1) (and (and (= (isgood state1) true) (= (authcertvalid state1) true)) (= (theauthcertrole state1) 1)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields2)) true) (= (thecurrentop (mk___rep theadmin__split_fields2)) 3)) (= (rolepresent (mk___rep theadmin__split_fields2)) 1))) (=> (= (rolepresent (mk___rep theadmin__split_fields2)) 1) (or (and (= (isdoingop (mk___rep theadmin__split_fields2)) true) (= (thecurrentop (mk___rep theadmin__split_fields2)) 3)) (not (= (isdoingop (mk___rep theadmin__split_fields2)) true))))) (= (rolepresent (mk___rep theadmin__split_fields2)) (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))))) (in_range10 status1))))
(assert (=> (= result true) (= state32 state6)))
(assert (=> (= result true) (= state24 state4)))
(assert (=> (= result true) (= state23 state3)))
(assert (=> (= result true) (= state22 state2)))
(assert (=> (= result true) (= state27 state1)))
(assert (=> (= result true) (= state17 state)))
(assert (=> (= result true) (= filestate3 filestate)))
(assert (=> (= result true) (= state32 state13)))
(assert (=> (= result true) (= state24 state11)))
(assert (=> (= result true) (= state23 state10)))
(assert (=> (= result true) (= state22 state9)))
(assert (=> (= result true) (= state27 state8)))
(assert (=> (= result true) (= state17 state7)))
(assert (=> (= result true) (= filestate3 filestate1)))
(assert (=> (not (= result true)) (and (= o1 (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1)))) (in_range3 o1))))
(assert (=> (not (= result true)) (= result1 (ite (= o1 2) true false))))
(assert (=> (not (= result true)) (=> (= result1 true) (and (and (and (and (and (or (or (= status2 6) (= status2 7)) (= status2 3)) (= (ispresent (mk___rep theadmin__split_fields3)) true)) (=> (or (= status2 6) (= status2 7)) (and (and (= (isdoingop (mk___rep theadmin__split_fields3)) true) (= (ispresent (mk___rep theadmin__split_fields3)) true)) (= (thecurrentop (mk___rep theadmin__split_fields3)) 2)))) (=> (= status2 3) (not (= (isdoingop (mk___rep theadmin__split_fields3)) true)))) (= (rolepresent (mk___rep theadmin__split_fields3)) (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))))) (in_range10 status2)))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state32 state6))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state24 state4))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state23 state3))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state22 state2))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state27 state1))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state32 state13))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state24 state11))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state23 state10))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state22 state9))))
(assert (=> (not (= result true)) (=> (= result1 true) (= state27 state8))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (and (= o2 (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1)))) (in_range3 o2)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= result2 (ite (= o2 3) true false)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (= result2 true) (and (and (and (and (and (and (and (and (and (= status3 3) (= (and (and (= (islocked state22) true) (= (thecurrentdoor state23) 0)) (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state23)) true)) (= (thedooralarm state23) 0))) (= (rolepresent (mk___rep theadmin__split_fields4)) (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))))) (not (= (isdoingop (mk___rep theadmin__split_fields4)) true))) (=> (= (rolepresent (mk___rep theadmin__split_fields4)) 1) (and (and (= (isgood state1) true) (= (authcertvalid state1) true)) (= (theauthcertrole state1) 1)))) (=> (and (not (= (islocked state22) true)) (= (islocked state2) true)) (and (and (= (isgood state1) true) (= (authcertvalid state1) true)) (= (theauthcertrole state1) 1)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields4)) true) (= (thecurrentop (mk___rep theadmin__split_fields4)) 3)) (= (rolepresent (mk___rep theadmin__split_fields4)) 1))) (=> (= (rolepresent (mk___rep theadmin__split_fields4)) 1) (or (and (= (isdoingop (mk___rep theadmin__split_fields4)) true) (= (thecurrentop (mk___rep theadmin__split_fields4)) 3)) (not (= (isdoingop (mk___rep theadmin__split_fields4)) true))))) (=> (and (not (= (islocked state22) true)) (= (islocked state2) true)) (and (= (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true) (= (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3)))) (in_range10 status3))))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (= result2 true) (= state32 state6)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (= result2 true) (= state27 state1)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (= result2 true) (= state32 state13)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (= result2 true) (= state27 state8)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (and (and (and (and (and (and (and (and (and (or (= status4 8) (= status4 6)) (or (not (= status4 6)) (and (and (and (and (and (= (rolepresent (mk___rep theadmin__split_fields5)) (rolepresent (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1)))) (= (ispresent (mk___rep theadmin__split_fields5)) true)) (= (isdoingop (mk___rep theadmin__split_fields5)) true)) (= (current_latch state28) (current_latch state2))) (= (bool_eq1 (latch_timeout state28) (latch_timeout state2)) true)) (= (thecurrentop (mk___rep theadmin__split_fields5)) 4)))) (=> (= status4 8) (and (and (= (rolepresent (mk___rep theadmin__split_fields5)) 0) (= (islocked state28) true)) (not (= (isdoingop (mk___rep theadmin__split_fields5)) true))))) (= (and (= (isdoingop (mk___rep theadmin__split_fields5)) true) (= (thecurrentop (mk___rep theadmin__split_fields5)) 4)) (= status4 6))) (= (and (and (= (islocked state28) true) (= (thecurrentdoor state29) 0)) (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state29)) true)) (= (thedooralarm state29) 0))) (=> (= (rolepresent (mk___rep theadmin__split_fields5)) 1) (and (and (= (isgood state27) true) (= (authcertvalid state27) true)) (= (theauthcertrole state27) 1)))) (=> (and (not (= (islocked state28) true)) (= (islocked state2) true)) (and (and (= (isgood state27) true) (= (authcertvalid state27) true)) (= (theauthcertrole state27) 1)))) (=> (and (= (isdoingop (mk___rep theadmin__split_fields5)) true) (= (thecurrentop (mk___rep theadmin__split_fields5)) 3)) (= (rolepresent (mk___rep theadmin__split_fields5)) 1))) (=> (= (rolepresent (mk___rep theadmin__split_fields5)) 1) (or (and (= (isdoingop (mk___rep theadmin__split_fields5)) true) (= (thecurrentop (mk___rep theadmin__split_fields5)) 3)) (not (= (isdoingop (mk___rep theadmin__split_fields5)) true))))) (in_range10 status4))))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (= state25 state31)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (= state24 state30)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (= state23 state29)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (= state22 state28)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (= filestate5 filestate6)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (= state21 state26)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (= theadmin__split_fields4 theadmin__split_fields5)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (=> (not (= result2 true)) (= status3 status4)))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= state20 state25))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= state19 state5))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= filestate4 filestate5))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= state18 state21))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= state17 state))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= filestate3 filestate))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= theadmin__split_fields3 theadmin__split_fields4))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= status2 status3))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= state20 state25))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= state19 state12))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= filestate4 filestate5))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= state18 state21))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= state17 state7))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= filestate3 filestate1))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= theadmin__split_fields3 theadmin__split_fields4))))
(assert (=> (not (= result true)) (=> (not (= result1 true)) (= status2 status3))))
(assert (=> (not (= result true)) (= state16 state20)))
(assert (=> (not (= result true)) (= output2 output)))
(assert (=> (not (= result true)) (= writtenstate2 writtenstate)))
(assert (=> (not (= result true)) (= state15 state19)))
(assert (=> (not (= result true)) (= filestate2 filestate4)))
(assert (=> (not (= result true)) (= state14 state18)))
(assert (=> (not (= result true)) (= theadmin__split_fields2 theadmin__split_fields3)))
(assert (=> (not (= result true)) (= status1 status2)))
(assert (=> (not (= result true)) (= state16 state20)))
(assert (=> (not (= result true)) (= output2 output1)))
(assert (=> (not (= result true)) (= writtenstate2 writtenstate1)))
(assert (=> (not (= result true)) (= state15 state19)))
(assert (=> (not (= result true)) (= filestate2 filestate4)))
(assert (=> (not (= result true)) (= state14 state18)))
(assert (=> (not (= result true)) (= theadmin__split_fields2 theadmin__split_fields3)))
(assert (=> (not (= result true)) (= status1 status2)))
(assert (= state41 (mk___private__ref state32)))
(assert (= state40 (mk___private__ref state16)))
(assert (= output3 (mk___private__ref output2)))
(assert (= writtenstate3 (mk___private__ref writtenstate2)))
(assert (= state39 (mk___private__ref state15)))
(assert (= state38 (mk___private__ref state24)))
(assert (= state37 (mk___private__ref state23)))
(assert (= state36 (mk___private__ref state22)))
(assert (= state35 (mk___private__ref state27)))
(assert (= filestate8 (mk___private__ref filestate2)))
(assert (= state34 (mk___private__ref state14)))
(assert (= state33 (mk___private__ref state17)))
(assert (= filestate7 (mk___private__ref filestate3)))
(assert (= theadmin__split_fields6 (mk___split_fields__ref theadmin__split_fields2)))
(assert (= status5 (mk_int__ref status1)))
(assert (= state50 state32))
(assert (= state49 state16))
(assert (= output4 output2))
(assert (= writtenstate4 writtenstate2))
(assert (= state48 state15))
(assert (= state47 state24))
(assert (= state46 state23))
(assert (= state45 state22))
(assert (= state44 state27))
(assert (= filestate10 filestate2))
(assert (= state43 state14))
(assert (= state42 state17))
(assert (= filestate9 filestate3))
(assert (= theadmin__split_fields7 theadmin__split_fields2))
(assert (= status6 status1))
(assert (= o44 (islocked (us_private__content state36))))
(assert (= o45 (ite (not (= o44 true)) true false)))
(assert (= result3 (ite (= o45 true) (islocked state2) false)))
(assert (=> (= result3 true) (and (= o46 (thecurrentop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1)))) (in_range3 o46))))
(assert (=> (= result3 true) (= o47 (ite (= o46 3) true false))))
(assert (=> (= result3 true) (= o48 (isdoingop (mk___rep (mk___split_fields theadmin__split_fields theadmin__split_fields1))))))
(assert (=> (= result3 true) (= o49 (ite (= o48 true) o47 false))))
(assert (=> (not (= result3 true)) (= o49 (of_int 1))))
(assert (and (= o36 (rolepresent (mk___rep (us_split_fields__content theadmin__split_fields6)))) (in_range1 o36)))
(assert (= result4 (ite (= o36 1) true false)))
(assert (=> (= result4 true) (= o40 (isdoingop (mk___rep (us_split_fields__content theadmin__split_fields6))))))
(assert (=> (= result4 true) (= o41 (ite (not (= o40 true)) true false))))
(assert (=> (= result4 true) (and (= o37 (thecurrentop (mk___rep (us_split_fields__content theadmin__split_fields6)))) (in_range3 o37))))
(assert (=> (= result4 true) (= o38 (ite (= o37 3) true false))))
(assert (=> (= result4 true) (= o39 (isdoingop (mk___rep (us_split_fields__content theadmin__split_fields6))))))
(assert (=> (= result4 true) (= o42 (ite (= o39 true) o38 false))))
(assert (=> (= result4 true) (= o43 (ite (= o42 false) o41 true))))
(assert (=> (not (= result4 true)) (= o43 (of_int 1))))
(assert (and (= o31 (thecurrentop (mk___rep (us_split_fields__content theadmin__split_fields6)))) (in_range3 o31)))
(assert (= o32 (ite (= o31 3) true false)))
(assert (= o33 (isdoingop (mk___rep (us_split_fields__content theadmin__split_fields6)))))
(assert (= result5 (ite (= o33 true) o32 false)))
(assert (=> (= result5 true) (and (= o34 (rolepresent (mk___rep (us_split_fields__content theadmin__split_fields6)))) (in_range1 o34))))
(assert (=> (= result5 true) (= o35 (ite (= o34 1) true false))))
(assert (=> (not (= result5 true)) (= o35 (of_int 1))))
(assert (= o23 (islocked (us_private__content state36))))
(assert (= o24 (ite (not (= o23 true)) true false)))
(assert (= result6 (ite (= o24 true) (islocked state2) false)))
(assert (=> (= result6 true) (and (= o27 (theauthcertrole (us_private__content state35))) (in_range1 o27))))
(assert (=> (= result6 true) (= o28 (ite (= o27 1) true false))))
(assert (=> (= result6 true) (= o25 (authcertvalid (us_private__content state35)))))
(assert (=> (= result6 true) (= o26 (isgood (us_private__content state35)))))
(assert (=> (= result6 true) (= o29 (ite (= o26 true) o25 false))))
(assert (=> (= result6 true) (= o30 (ite (= o29 true) o28 false))))
(assert (=> (not (= result6 true)) (= o30 (of_int 1))))
(assert (and (= o16 (rolepresent (mk___rep (us_split_fields__content theadmin__split_fields6)))) (in_range1 o16)))
(assert (= result7 (ite (= o16 1) true false)))
(assert (=> (= result7 true) (and (= o19 (theauthcertrole (us_private__content state35))) (in_range1 o19))))
(assert (=> (= result7 true) (= o20 (ite (= o19 1) true false))))
(assert (=> (= result7 true) (= o17 (authcertvalid (us_private__content state35)))))
(assert (=> (= result7 true) (= o18 (isgood (us_private__content state35)))))
(assert (=> (= result7 true) (= o21 (ite (= o18 true) o17 false))))
(assert (=> (= result7 true) (= o22 (ite (= o21 true) o20 false))))
(assert (=> (not (= result7 true)) (= o22 (of_int 1))))
(assert (and (= o11 (thedooralarm (us_private__content state37))) (in_range9 o11)))
(assert (= o12 (ite (= o11 0) true false)))
(assert (= o13 (to_int1 o12)))
(assert (= o7 (alarm_timeout (us_private__content state37))))
(assert (= o6 (thecurrenttime currenttime)))
(assert (= o8 (greaterthanorequal o6 o7)))
(assert (and (= o3 (thecurrentdoor (us_private__content state37))) (in_range8 o3)))
(assert (= o4 (ite (= o3 0) true false)))
(assert (= o5 (islocked (us_private__content state36))))
(assert (= o9 (ite (= o5 true) o4 false)))
(assert (= o10 (ite (= o9 true) o8 false)))
(assert (= o14 (to_int1 o10)))
(assert (= o15 (ite (= o14 o13) true false)))
(assert (not (= (isdoingop (mk___rep (us_split_fields__content theadmin__split_fields6))) true)))
(check-sat)
(exit)
