(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun is_available (Int us_private) Bool)
(declare-fun is_available__function_guard (Bool Int us_private) Bool)
(declare-sort resource 0)
(declare-fun resourceqtint (resource) Int)
(assert (forall ((i resource)) (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 10000))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (resource resource) Bool)
(declare-const dummy resource)
(declare-datatypes () ((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content a))
(define-fun dynamic_invariant ((temp___expr_172 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool (=> (or (= temp___is_init_168 true) (<= 0 10000)) (in_range temp___expr_172)))
(assert true)
(declare-fun is_allocated (Int us_private) Bool)
(declare-fun is_allocated__function_guard (Bool Int us_private) Bool)
(assert true)
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq (us_rep us_rep) Bool)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep1)))))
(define-fun set__ref___projection ((a set__ref)) us_rep1 (set__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__list_allocator__m__t__available us_rep) (rec__list_allocator__m__t__allocated us_rep1)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) us_rep (rec__list_allocator__m__t__available a))
(define-fun us_split_fields_Allocated__projection ((a us_split_fields)) us_rep1 (rec__list_allocator__m__t__allocated a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep2 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep2)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (user_eq1 (rec__list_allocator__m__t__available (us_split_fields1 a)) (rec__list_allocator__m__t__available (us_split_fields1 b))) true) (= (bool_eq1 (rec__list_allocator__m__t__allocated (us_split_fields1 a)) (rec__list_allocator__m__t__allocated (us_split_fields1 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const list_allocator__m__t__available__first__bit Int)
(declare-const list_allocator__m__t__available__last__bit Int)
(declare-const list_allocator__m__t__available__position Int)
(assert (<= 0 list_allocator__m__t__available__first__bit))
(assert (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))
(assert (<= 0 list_allocator__m__t__available__position))
(declare-const list_allocator__m__t__allocated__first__bit Int)
(declare-const list_allocator__m__t__allocated__last__bit Int)
(declare-const list_allocator__m__t__allocated__position Int)
(assert (<= 0 list_allocator__m__t__allocated__first__bit))
(assert (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))
(assert (<= 0 list_allocator__m__t__allocated__position))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep2)))))
(define-fun t__ref___projection ((a t__ref)) us_rep2 (t__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-fun is_prepend (us_rep Int us_rep) Bool)
(declare-fun is_prepend__function_guard (Bool us_rep Int us_rep) Bool)
(declare-fun is_add (us_rep1 Int us_rep1) Bool)
(declare-fun is_add__function_guard (Bool us_rep1 Int us_rep1) Bool)
(declare-fun oeq (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun is_valid (us_private us_split_fields) Bool)
(declare-fun is_valid__function_guard (Bool us_private us_split_fields) Bool)
(declare-fun is_empty (us_rep1) Bool)
(declare-fun is_empty__function_guard (Bool us_rep1) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(define-fun default_initial_assumption ((temp___expr_238 us_rep2) (temp___skip_top_level_239 Bool)) Bool (and (= (length (rec__list_allocator__m__t__available (us_split_fields1 temp___expr_238))) 0) (= (is_empty (rec__list_allocator__m__t__allocated (us_split_fields1 temp___expr_238))) true)))
(declare-fun contains (us_rep1 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep1 Int) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun last ((container us_rep)) Int (+ 0 (length container)))
(declare-fun last__function_guard (Int us_rep) Bool)
(declare-fun get (us_rep Int) Int)
(declare-fun get__function_guard (Int us_rep Int) Bool)
(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)
(define-fun range_shifted ((left us_rep) (right us_rep) (fst Int) (lst Int) (offset Int)) Bool (and (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (= (get left i) (get right (+ i offset))))) true false) (ite (forall ((i Int)) (=> (and (<= (+ fst offset) i) (<= i (+ lst offset))) (= (get left (- i offset)) (get right i)))) true false)))
(declare-fun range_shifted__function_guard (Bool us_rep us_rep Int Int Int) Bool)
(define-fun oeq1 ((left us_rep) (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard1 (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq1 a b) (oeq1 a b)) :pattern ((user_eq1 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_208 us_rep) (temp___skip_top_level_209 Bool)) Bool (=> (not (= temp___skip_top_level_209 true)) (= (length temp___expr_208) 0)))
(assert true)
(assert (forall ((s us_rep) (result__ us_rep)) (forall ((e Int)) (! (= (= (is_prepend s e result__) true) (and (and (and (< (length s) 2147483647) (= (length result__) (+ (length s) 1))) (= (get result__ 1) e)) (= (range_shifted s result__ 1 (last s) 1) true))) :pattern ((is_prepend s e result__))))))
(declare-fun ole (us_rep1 us_rep1) Bool)
(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)
(declare-fun included_except (us_rep1 us_rep1 Int) Bool)
(declare-fun included_except__function_guard (Bool us_rep1 us_rep1 Int) Bool)
(define-fun default_initial_assumption2 ((temp___expr_223 us_rep1) (temp___skip_top_level_224 Bool)) Bool (=> (not (= temp___skip_top_level_224 true)) (= (is_empty temp___expr_223) true)))
(assert true)
(assert (forall ((s us_rep1) (result__ us_rep1)) (forall ((e Int)) (! (= (= (is_add s e result__) true) (and (and (and (not (= (contains s e) true)) (= (contains result__ e) true)) (= (included_except result__ s e) true)) (= (ole s result__) true))) :pattern ((is_add s e result__))))))
(declare-fun oeq2 (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep1 us_rep1) Bool)
(assert true)
(assert (forall ((x us_rep2) (y us_rep2)) (! (= (= (oeq x y) true) (and (= (oeq1 (rec__list_allocator__m__t__available (us_split_fields1 x)) (rec__list_allocator__m__t__available (us_split_fields1 y))) true) (= (oeq2 (rec__list_allocator__m__t__allocated (us_split_fields1 x)) (rec__list_allocator__m__t__allocated (us_split_fields1 y))) true))) :pattern ((oeq x y)))))
(assert true)
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq4 (count_type count_type) Bool)
(declare-const dummy4 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 2147483647)) (in_range2 temp___expr_165)))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq5 (extended_index extended_index) Bool)
(declare-const dummy5 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant2 ((temp___expr_200 Int) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool (=> (or (= temp___is_init_196 true) (<= 0 2147483647)) (in_range3 temp___expr_200)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false true true))) :pattern ((length container)))))
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 10000))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (element_type element_type) Bool)
(declare-const dummy6 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_193 Int) (temp___is_init_189 Bool) (temp___skip_constant_190 Bool) (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool (=> (or (= temp___is_init_189 true) (<= 0 10000)) (in_range4 temp___expr_193)))
(assert (forall ((container us_rep)) (forall ((position Int)) (! (=> (and (dynamic_invariant2 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant3 (get container position) true false true true)) :pattern ((get container position))))))
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= 0 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 10000))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (element_type1 element_type1) Bool)
(declare-const dummy7 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant4 ((temp___expr_215 Int) (temp___is_init_211 Bool) (temp___skip_constant_212 Bool) (temp___do_toplevel_213 Bool) (temp___do_typ_inv_214 Bool)) Bool (=> (or (= temp___is_init_211 true) (<= 0 10000)) (in_range5 temp___expr_215)))
(assert (forall ((container us_rep1)) (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range5 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(assert (forall ((container us_rep1)) (! (dynamic_invariant1 (length1 container) true false true true) :pattern ((length1 container)))))
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (ole left right) true) (forall ((item Int)) (=> (and (in_range5 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole left right)))))
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (oeq2 left right) true) (and (= (ole left right) true) (= (ole right left) true))) :pattern ((oeq2 left right)))))
(assert (forall ((container us_rep1)) (! (let ((result (is_empty container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range5 item) (= (contains container item) true))))) (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep1) (right us_rep1)) (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true true) (= (= (included_except left right item) true) (forall ((e Int)) (=> (and (in_range5 e) (= (contains left e) true)) (or (= (contains right e) true) (= e item)))))) :pattern ((included_except left right item))))))
(declare-const model____split_fields us_rep)
(declare-const model____split_fields1 us_rep1)
(declare-const res1 Int)
(declare-const res2 Int)
(declare-const res3 Int)
(declare-const res4 Int)
(declare-const model____split_fields2 us_rep)
(declare-const model____split_fields3 us_rep1)
(declare-const res11 Int)
(declare-const state us_private)
(declare-const model____split_fields4 us_rep)
(declare-const model____split_fields5 us_rep1)
(declare-const res21 Int)
(declare-const state1 us_private)
(declare-const model____split_fields6 us_rep)
(declare-const model____split_fields7 us_rep1)
(declare-const res31 Int)
(declare-const state2 us_private)
(declare-const model____split_fields8 us_rep)
(declare-const model____split_fields9 us_rep1)
(declare-const res41 Int)
(declare-const state3 us_private)
(define-fun model____split_fields10 () us_split_fields (mk___split_fields model____split_fields8 model____split_fields9))
(define-fun model____split_fields11 () us_split_fields (mk___split_fields model____split_fields6 model____split_fields7))
(define-fun model____split_fields12 () us_split_fields (mk___split_fields model____split_fields4 model____split_fields5))
(define-fun model____split_fields13 () us_split_fields (mk___split_fields model____split_fields2 model____split_fields3))
(assert (=> (<= 0 10000) (in_range res1)))
(assert (=> (<= 0 10000) (in_range res2)))
(assert (=> (<= 0 10000) (in_range res3)))
(assert (=> (<= 0 10000) (in_range res4)))
(assert (and (and (= (is_valid state model____split_fields13) true) (ite (= (= (length model____split_fields) 0) true) (and (= res11 0) (= (oeq (mk___rep model____split_fields13) (mk___rep (mk___split_fields model____split_fields model____split_fields1))) true)) (and (= (is_prepend model____split_fields2 res11 model____split_fields) true) (= (is_add model____split_fields1 res11 model____split_fields3) true)))) (in_range res11)))
(assert (not (= res11 0)))
(assert (= (is_allocated res11 state) true))
(assert (and (and (= (is_valid state1 model____split_fields12) true) (ite (= (= (length model____split_fields2) 0) true) (and (= res21 0) (= (oeq (mk___rep model____split_fields12) (mk___rep model____split_fields13)) true)) (and (= (is_prepend model____split_fields4 res21 model____split_fields2) true) (= (is_add model____split_fields3 res21 model____split_fields5) true)))) (in_range res21)))
(assert (not (= res21 0)))
(assert (= (is_allocated res21 state1) true))
(assert (and (and (= (is_valid state2 model____split_fields11) true) (ite (= (= (length model____split_fields4) 0) true) (and (= res31 0) (= (oeq (mk___rep model____split_fields11) (mk___rep model____split_fields12)) true)) (and (= (is_prepend model____split_fields6 res31 model____split_fields4) true) (= (is_add model____split_fields5 res31 model____split_fields7) true)))) (in_range res31)))
(assert (not (= res31 0)))
(assert (= (is_allocated res31 state2) true))
(assert (and (and (= (is_valid state3 model____split_fields10) true) (ite (= (= (length model____split_fields6) 0) true) (and (= res41 0) (= (oeq (mk___rep model____split_fields10) (mk___rep model____split_fields11)) true)) (and (= (is_prepend model____split_fields8 res41 model____split_fields6) true) (= (is_add model____split_fields7 res41 model____split_fields9) true)))) (in_range res41)))
(assert (not (= res41 0)))
(assert (not (= (is_valid state3 model____split_fields10) true)))
(check-sat)
(exit)
