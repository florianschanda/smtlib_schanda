(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__unit1__t1__c1 integer) (rec__ext__ us_private)))))
(define-fun us_split_fields_C1__projection ((a us_split_fields)) integer (rec__unit1__t1__c1 a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__unit1__t1__c1 (us_split_fields1 a))) (to_rep (rec__unit1__t1__c1 (us_split_fields1 b)))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const unit1__t1__c1__first__bit Int)
(declare-const unit1__t1__c1__last__bit Int)
(declare-const unit1__t1__c1__position Int)
(assert (<= 0 unit1__t1__c1__first__bit))
(assert (< unit1__t1__c1__first__bit unit1__t1__c1__last__bit))
(assert (<= 0 unit1__t1__c1__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((t1__ref (mk_t1__ref (t1__content us_rep)))))
(define-fun t1__ref___projection ((a t1__ref)) us_rep (t1__content a))
(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)
(declare-fun is_max (us_rep) Bool)
(declare-fun is_max__function_guard (Bool us_rep) Bool)
(declare-fun is_max1 (Int us_rep) Bool)
(declare-fun is_max__function_guard1 (Bool Int us_rep) Bool)
(declare-fun next (us_rep) us_rep)
(declare-fun next__function_guard (us_rep us_rep) Bool)
(declare-fun next1 (Int us_rep) us_rep)
(declare-fun next__function_guard1 (us_rep Int us_rep) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__unit2__t2__c2 integer) (rec__unit1__t1__c11 integer) (rec__ext__1 us_private)))))
(define-fun us_split_fields_C2__projection ((a us_split_fields2)) integer (rec__unit2__t2__c2 a))
(define-fun us_split_fields_C1__2__projection ((a us_split_fields2)) integer (rec__unit1__t1__c11 a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (integer us_private) us_private)
(declare-fun extract__c2 (us_private) integer)
(assert (forall ((c2 integer)) (forall ((rec__ext__2 us_private)) (= (extract__c2 (hide_ext__ c2 rec__ext__2)) c2))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__unit1__t1__c11 (us_split_fields3 a)) (hide_ext__ (rec__unit2__t2__c2 (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__c2 (rec__ext__ (us_split_fields1 r))) (rec__unit1__t1__c1 (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__unit2__t2__c2 (us_split_fields3 a))) (to_rep (rec__unit2__t2__c2 (us_split_fields3 b)))) (= (to_rep (rec__unit1__t1__c11 (us_split_fields3 a))) (to_rep (rec__unit1__t1__c11 (us_split_fields3 b))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const unit2__t2__c2__first__bit Int)
(declare-const unit2__t2__c2__last__bit Int)
(declare-const unit2__t2__c2__position Int)
(assert (<= 0 unit2__t2__c2__first__bit))
(assert (< unit2__t2__c2__first__bit unit2__t2__c2__last__bit))
(assert (<= 0 unit2__t2__c2__position))
(declare-const unit1__t1__c1__first__bit1 Int)
(declare-const unit1__t1__c1__last__bit1 Int)
(declare-const unit1__t1__c1__position1 Int)
(assert (<= 0 unit1__t1__c1__first__bit1))
(assert (< unit1__t1__c1__first__bit1 unit1__t1__c1__last__bit1))
(assert (<= 0 unit1__t1__c1__position1))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((t2__ref (mk_t2__ref (t2__content us_rep1)))))
(define-fun t2__ref___projection ((a t2__ref)) us_rep1 (t2__content a))
(define-fun default_initial_assumption ((temp___expr_159 us_rep) (temp___skip_top_level_160 Bool)) Bool (= (attr__tag temp___expr_159) us_tag))
(declare-fun bump__specific_post (Int us_split_fields Int us_split_fields) Bool)
(assert (forall ((unit1__bump__x__fields us_split_fields) (unit1__bump__x__old__fields us_split_fields)) (forall ((x__attr__tag Int)) (! (=> (bump__specific_post us_tag1 unit1__bump__x__fields x__attr__tag unit1__bump__x__old__fields) (let ((temp___x_171 (of_base (mk___rep unit1__bump__x__old__fields x__attr__tag)))) (let ((temp___x_1711 (of_base (mk___rep unit1__bump__x__fields x__attr__tag)))) (and (= (to_rep (rec__unit1__t1__c11 (us_split_fields3 temp___x_1711))) (+ (to_rep (rec__unit1__t1__c11 (us_split_fields3 temp___x_171))) 1)) (= (to_rep (rec__unit2__t2__c2 (us_split_fields3 temp___x_1711))) (+ (to_rep (rec__unit2__t2__c2 (us_split_fields3 temp___x_171))) 1)))))) :pattern ((bump__specific_post us_tag1 unit1__bump__x__fields x__attr__tag unit1__bump__x__old__fields))))))
(assert (forall ((unit1__bump__x__fields us_split_fields) (unit1__bump__x__old__fields us_split_fields)) (forall ((x__attr__tag Int)) (! (=> (bump__specific_post us_tag unit1__bump__x__fields x__attr__tag unit1__bump__x__old__fields) (= (to_rep (rec__unit1__t1__c1 (us_split_fields1 (mk___rep unit1__bump__x__fields x__attr__tag)))) (+ (to_rep (rec__unit1__t1__c1 (us_split_fields1 (mk___rep unit1__bump__x__old__fields x__attr__tag)))) 1))) :pattern ((bump__specific_post us_tag unit1__bump__x__fields x__attr__tag unit1__bump__x__old__fields))))))
(declare-fun is_max2 (us_rep1) Bool)
(declare-fun is_max__function_guard2 (Bool us_rep1) Bool)
(declare-fun is_max3 (Int us_rep1) Bool)
(declare-fun is_max__function_guard3 (Bool Int us_rep1) Bool)
(define-fun default_initial_assumption1 ((temp___expr_181 us_rep1) (temp___skip_top_level_182 Bool)) Bool (= (attr__tag1 temp___expr_181) us_tag1))
(declare-const x__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(assert true)
(assert true)
(assert (forall ((x us_rep1)) (! (= (ite (is_max2 x) 1 0) (ite (is_max3 us_tag1 x) 1 0)) :pattern ((is_max3 us_tag1 x)))))
(assert (forall ((x us_rep1)) (! (= (= (is_max2 x) true) (or (= (is_max (to_base x)) true) (= (to_rep (rec__unit2__t2__c2 (us_split_fields3 x))) 2147483647))) :pattern ((is_max2 x)))))
(declare-fun next2 (us_rep1) us_rep1)
(declare-fun next__function_guard2 (us_rep1 us_rep1) Bool)
(declare-fun next3 (Int us_rep1) us_rep1)
(declare-fun next__function_guard3 (us_rep1 Int us_rep1) Bool)
(assert (forall ((x us_rep1)) (! (= (next2 x) (next3 us_tag1 x)) :pattern ((next3 us_tag1 x)))))
(assert true)
(assert true)
(assert (forall ((x us_rep)) (! (= (ite (is_max2 (of_base x)) 1 0) (ite (is_max1 us_tag1 x) 1 0)) :pattern ((is_max1 us_tag1 x)))))
(assert (forall ((x us_rep)) (! (= (ite (is_max x) 1 0) (ite (is_max1 us_tag x) 1 0)) :pattern ((is_max1 us_tag x)))))
(assert (forall ((x us_rep)) (! (= (= (is_max x) true) (= (to_rep (rec__unit1__t1__c1 (us_split_fields1 x))) 2147483647)) :pattern ((is_max x)))))
(assert (forall ((x us_rep)) (! (= (to_base (next2 (of_base x))) (next1 us_tag1 x)) :pattern ((next1 us_tag1 x)))))
(assert (forall ((x us_rep)) (! (= (next x) (next1 us_tag x)) :pattern ((next1 us_tag x)))))
(declare-const x__split_fields integer)
(declare-const x__split_fields1 integer)
(declare-const x__split_fields2 us_private)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const o4 us_private)
(declare-const temp___201 integer)
(declare-const temp___2011 integer)
(declare-const temp___2012 us_private)
(declare-const temp___2013 Int)
(declare-const unit1__bump__x__fields integer)
(declare-const unit1__bump__x__fields1 us_private)
(declare-const result integer)
(declare-const result1 integer)
(declare-const result2 us_private)
(declare-const x__split_fields3 integer)
(declare-const x__split_fields4 integer)
(declare-const x__split_fields5 us_private)
(declare-const result3 integer)
(declare-const result4 integer)
(declare-const result5 us_private)
(declare-const x__split_fields6 integer)
(declare-const x__split_fields7 integer)
(declare-const x__split_fields8 us_private)
(declare-const x__split_fields9 integer)
(declare-const x__split_fields10 integer)
(declare-const x__split_fields11 us_private)
(declare-const x__split_fields12 integer)
(declare-const x__split_fields13 integer)
(declare-const x__split_fields14 us_private)
(assert (not (= (is_max2 (mk___rep1 (mk___split_fields1 x__split_fields x__split_fields1 x__split_fields2) x__attr__tag)) true)))
(assert (= (to_rep unit1__bump__x__fields) (+ (to_rep x__split_fields1) 1)))
(assert (= (mk___split_fields__ref1 (mk___split_fields1 result result1 result2)) (mk___split_fields__ref1 (mk___split_fields1 x__split_fields x__split_fields1 x__split_fields2))))
(assert (= (mk___split_fields1 x__split_fields3 x__split_fields4 x__split_fields5) (us_split_fields3 (of_base (mk___rep (mk___split_fields unit1__bump__x__fields unit1__bump__x__fields1) x__attr__tag)))))
(assert (and (= o (+ (to_rep x__split_fields3) 1)) (in_range (+ (to_rep x__split_fields3) 1))))
(assert (= (to_rep o1) o))
(assert (= o1 o2))
(assert (= x__split_fields4 o3))
(assert (= x__split_fields5 o4))
(assert (= temp___201 o2))
(assert (= temp___2011 o3))
(assert (= temp___2012 o4))
(assert (= x__attr__tag temp___2013))
(assert (= result3 x__split_fields3))
(assert (= result4 x__split_fields4))
(assert (= result5 x__split_fields5))
(assert (= temp___201 x__split_fields6))
(assert (= temp___2011 x__split_fields7))
(assert (= temp___2012 x__split_fields8))
(assert (= x__split_fields9 x__split_fields6))
(assert (= x__split_fields10 x__split_fields7))
(assert (= x__split_fields11 x__split_fields8))
(assert (= (mk___split_fields1 x__split_fields12 x__split_fields13 x__split_fields14) (mk___split_fields1 x__split_fields6 x__split_fields7 x__split_fields8)))
(assert (not (= (to_rep x__split_fields9) (+ (to_rep x__split_fields) 1))))
(check-sat)
(exit)
