(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__pack__p1T__my_state integer)))))
(define-fun us_split_fields_My_State__projection ((a us_split_fields)) integer (rec__pack__p1T__my_state a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const pack__p1T__my_state__first__bit Int)
(declare-const pack__p1T__my_state__last__bit Int)
(declare-const pack__p1T__my_state__position Int)
(assert (<= 0 pack__p1T__my_state__first__bit))
(assert (< pack__p1T__my_state__first__bit pack__p1T__my_state__last__bit))
(assert (<= 0 pack__p1T__my_state__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-datatypes () ((p1T__ref (mk_p1T__ref (p1T__content us_rep)))))
(define-fun p1T__ref___projection ((a p1T__ref)) us_rep (p1T__content a))
(declare-fun state (us_rep) Int)
(declare-fun state__function_guard (Int us_rep) Bool)
(define-fun default_initial_assumption ((temp___expr_201 us_rep) (temp___skip_top_level_202 Bool)) Bool (= (to_rep (rec__pack__p1T__my_state (us_split_fields1 temp___expr_201))) 0))
(assert (forall ((self__ us_rep)) (! (dynamic_invariant (state self__) true false true true) :pattern ((state self__)))))
(assert (forall ((self__ us_rep)) (! (= (state self__) (to_rep (rec__pack__p1T__my_state (us_split_fields1 self__)))) :pattern ((state self__)))))
(declare-sort priority 0)
(declare-fun priorityqtint (priority) Int)
(assert (forall ((i priority)) (and (<= 0 (priorityqtint i)) (<= (priorityqtint i) 97))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 97)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq2 (priority priority) Bool)
(declare-const dummy1 priority)
(declare-datatypes () ((priority__ref (mk_priority__ref (priority__content priority)))))
(define-fun priority__ref___projection ((a priority__ref)) priority (priority__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__pack__p2T__my_state integer)))))
(define-fun us_split_fields_My_State__2__projection ((a us_split_fields2)) integer (rec__pack__p2T__my_state a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const pack__p2T__my_state__first__bit Int)
(declare-const pack__p2T__my_state__last__bit Int)
(declare-const pack__p2T__my_state__position Int)
(assert (<= 0 pack__p2T__my_state__first__bit))
(assert (< pack__p2T__my_state__first__bit pack__p2T__my_state__last__bit))
(assert (<= 0 pack__p2T__my_state__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-datatypes () ((p2T__ref (mk_p2T__ref (p2T__content us_rep1)))))
(define-fun p2T__ref___projection ((a p2T__ref)) us_rep1 (p2T__content a))
(define-fun default_initial_assumption1 ((temp___expr_208 us_rep1) (temp___skip_top_level_209 Bool)) Bool (= (to_rep (rec__pack__p2T__my_state (us_split_fields3 temp___expr_208))) 0))
(declare-const arg Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const const1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_186 Int) (temp___is_init_182 Bool) (temp___skip_constant_183 Bool) (temp___do_toplevel_184 Bool) (temp___do_typ_inv_185 Bool)) Bool (=> (or (= temp___is_init_182 true) (<= 0 97)) (in_range1 temp___expr_186)))
(declare-const o integer)
(declare-const pack__p2T__set__const__assume Int)
(declare-const p1__split_fields integer)
(assert (in_range arg))
(assert (= o p1__split_fields))
(assert (and (= pack__p2T__set__const__assume (state (mk___rep (mk___split_fields o)))) (and (in_range pack__p2T__set__const__assume) (= pack__p2T__set__const__assume (to_rep o)))))
(assert (= pack__p2T__set__const__assume const1))
(assert (in_range const1))
(assert (not (in_range (+ arg const1))))
(check-sat)
(exit)
