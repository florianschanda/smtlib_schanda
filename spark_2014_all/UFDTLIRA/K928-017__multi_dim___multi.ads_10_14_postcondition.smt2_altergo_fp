(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type ta4D2

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ta4D2, ta4D2 -> bool

logic dummy1 : ta4D2

type ta4D2__ref = { ta4D2__content : ta4D2
}

function ta4D2__ref___projection(a: ta4D2__ref) : ta4D2 = (a).ta4D2__content

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> integer

logic set : map, int, int, integer -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:integer [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:integer [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq4 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def3 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq4(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  (((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) and
  (to_rep(get(a, temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156))))) or
  (not (((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))))))) ->
  (bool_eq4(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)))))))) -> (bool_eq4(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq4(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___183 : int, int, int, int -> map

logic temp___191 : int -> map

logic temp___196 : int, int, int -> map

logic temp___203 : int, int, int -> map

logic temp___210 : int, int, int, int -> map

axiom def_axiom :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  forall temp___188:int. ((((in_range1(temp___185) and
  in_range1(temp___186)) and in_range1(temp___187)) and
  in_range1(temp___188)) -> (((to_rep(get(temp___183(temp___185, temp___186,
  temp___187, temp___188), 1, 1)) = temp___185) and
  (to_rep(get(temp___183(temp___185, temp___186, temp___187, temp___188), 1,
  2)) = temp___186)) and ((to_rep(get(temp___183(temp___185, temp___186,
  temp___187, temp___188), 2, 1)) = temp___187) and
  (to_rep(get(temp___183(temp___185, temp___186, temp___187, temp___188), 2,
  2)) = temp___188)))))

axiom def_axiom1 :
  (forall temp___193:int. (in_range1(temp___193) ->
  (forall temp___194:int. forall temp___195:int.
  (to_rep(get(temp___191(temp___193), temp___194, temp___195)) = temp___193))))

axiom def_axiom2 :
  (forall temp___198:int. forall temp___199:int. forall temp___200:int.
  (((in_range1(temp___198) and in_range1(temp___199)) and
  in_range1(temp___200)) ->
  (forall temp___201:int. forall temp___202:int. (((temp___201 = 1) ->
  (((temp___202 = 1) -> (to_rep(get(temp___196(temp___198, temp___199,
  temp___200), temp___201, temp___202)) = temp___198)) and
  ((not (temp___202 = 1)) -> (to_rep(get(temp___196(temp___198, temp___199,
  temp___200), temp___201, temp___202)) = temp___199)))) and
  ((not (temp___201 = 1)) -> ((temp___201 = 2) ->
  (to_rep(get(temp___196(temp___198, temp___199, temp___200), temp___201,
  temp___202)) = temp___200)))))))

axiom def_axiom3 :
  (forall temp___205:int. forall temp___206:int. forall temp___207:int.
  (((in_range1(temp___205) and in_range1(temp___206)) and
  in_range1(temp___207)) ->
  (forall temp___208:int. forall temp___209:int. (((temp___208 = 1) ->
  (((temp___209 = 1) -> (to_rep(get(temp___203(temp___205, temp___206,
  temp___207), temp___208, temp___209)) = temp___205)) and
  ((not (temp___209 = 1)) -> (to_rep(get(temp___203(temp___205, temp___206,
  temp___207), temp___208, temp___209)) = temp___206)))) and
  ((not (temp___208 = 1)) -> ((temp___208 = 2) ->
  (to_rep(get(temp___203(temp___205, temp___206, temp___207), temp___208,
  temp___209)) = temp___207)))))))

axiom def_axiom4 :
  (forall temp___212:int. forall temp___213:int. forall temp___214:int.
  forall temp___215:int. ((((in_range1(temp___212) and
  in_range1(temp___213)) and in_range1(temp___214)) and
  in_range1(temp___215)) ->
  (forall temp___216:int. forall temp___217:int. (((temp___216 = 2) ->
  (((temp___217 = 1) -> (to_rep(get(temp___210(temp___212, temp___213,
  temp___214, temp___215), temp___216, temp___217)) = temp___212)) and
  ((not (temp___217 = 1)) -> ((temp___217 = 2) ->
  (to_rep(get(temp___210(temp___212, temp___213, temp___214, temp___215),
  temp___216, temp___217)) = temp___213))))) and ((not (temp___216 = 2)) ->
  (((temp___217 = 1) -> (to_rep(get(temp___210(temp___212, temp___213,
  temp___214, temp___215), temp___216, temp___217)) = temp___214)) and
  ((not (temp___217 = 1)) -> ((temp___217 = 2) ->
  (to_rep(get(temp___210(temp___212, temp___213, temp___214, temp___215),
  temp___216, temp___217)) = temp___215)))))))))

 (* File "multi.adb", line 15, characters 0-0 *)
goal WP_parameter_def :
  (forall one:int. forall a:map. forall result:map. forall a1:map.
  forall result1:map. forall a2:map. forall result2:map. forall a3:map.
  forall result3:map. forall a4:map. forall result4:map. forall a5:map.
  forall a6:map. forall a7:map. ((in_range1(one) and (in_range1(b) and
  ((one = 1) and ((((b = 1) and (({ map__content = result } = {
  map__content = a }) and (a1 = temp___183(one, 2, one, 2)))) or
  ((not (b = 1)) and ((((b = 2) and (({ map__content = result1 } = {
  map__content = a }) and (a2 = temp___191(one)))) or ((not (b = 2)) and
  ((((b = 3) and (({ map__content = result2 } = { map__content = a }) and
  (a3 = temp___196(one, one, one)))) or ((not (b = 3)) and ((((b = 4) and (({
  map__content = result3 } = { map__content = a }) and (a4 = temp___203(2,
  one, one)))) or ((not (b = 4)) and ((({ map__content = result4 } = {
  map__content = a }) and (a5 = temp___210(2, one, one, one))) and
  (a4 = a5)))) and (a3 = a4)))) and (a2 = a3)))) and (a1 = a2)))) and
  ((a1 = a6) and (a7 = a1)))))) -> ((b = 1) ->
  (forall k:int. (((1 <= k) and (k <= 2)) -> (to_rep(get(a6, k,
  one)) = one))))))
