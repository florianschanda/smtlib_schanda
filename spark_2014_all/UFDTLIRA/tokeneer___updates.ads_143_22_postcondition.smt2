(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort privileget 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (privileget privileget) Bool)
(declare-const dummy privileget)
(declare-datatypes () ((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget (privileget__content a))
(declare-fun to_rep (privileget) Int)
(declare-fun of_rep (Int) privileget)
(assert (forall ((x privileget)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort opandnullt 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (opandnullt opandnullt) Bool)
(declare-const dummy1 opandnullt)
(declare-datatypes () ((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt (opandnullt__content a))
(declare-fun to_rep1 (opandnullt) Int)
(declare-fun of_rep1 (Int) opandnullt)
(assert (forall ((x opandnullt)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x opandnullt)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__admin__t__rolepresent privileget) (rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget (rec__admin__t__rolepresent a))
(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt (rec__admin__t__currentop a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__admin__t__rolepresent (us_split_fields1 a))) (to_rep (rec__admin__t__rolepresent (us_split_fields1 b)))) (= (to_rep1 (rec__admin__t__currentop (us_split_fields1 a))) (to_rep1 (rec__admin__t__currentop (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const admin__t__rolepresent__first__bit Int)
(declare-const admin__t__rolepresent__last__bit Int)
(declare-const admin__t__rolepresent__position Int)
(assert (<= 0 admin__t__rolepresent__first__bit))
(assert (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))
(assert (<= 0 admin__t__rolepresent__position))
(declare-const admin__t__currentop__first__bit Int)
(declare-const admin__t__currentop__last__bit Int)
(declare-const admin__t__currentop__position Int)
(assert (<= 0 admin__t__currentop__first__bit))
(assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))
(assert (<= 0 admin__t__currentop__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))
(declare-fun latchislocked (tuple0) Bool)
(declare-fun latchislocked__function_guard (Bool tuple0) Bool)
(declare-fun islocked (us_private) Bool)
(declare-fun islocked__function_guard (Bool us_private) Bool)
(assert true)
(declare-fun thedooralarm (us_private) Int)
(declare-fun thedooralarm__function_guard (Int us_private) Bool)
(declare-sort statust 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (statust statust) Bool)
(declare-const dummy3 statust)
(declare-datatypes () ((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content a))
(define-fun dynamic_invariant ((temp___expr_303 Int) (temp___is_init_300 Bool) (temp___skip_constant_301 Bool) (temp___do_toplevel_302 Bool)) Bool (=> (or (= temp___is_init_300 true) (<= 0 1)) (in_range3 temp___expr_303)))
(assert (forall ((door__state us_private)) (! (dynamic_invariant (thedooralarm door__state) true false true) :pattern ((thedooralarm door__state)))))
(declare-fun isalarming (tuple0) Bool)
(declare-fun isalarming__function_guard (Bool tuple0) Bool)
(declare-sort statscount 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (statscount statscount) Bool)
(declare-const dummy4 statscount)
(declare-datatypes () ((statscount__ref (mk_statscount__ref (statscount__content statscount)))))
(define-fun statscount__ref___projection ((a statscount__ref)) statscount (statscount__content a))
(declare-fun to_rep2 (statscount) Int)
(declare-fun of_rep2 (Int) statscount)
(assert (forall ((x statscount)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x statscount)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__stats__t__successentry statscount) (rec__stats__t__failentry statscount) (rec__stats__t__successbio statscount) (rec__stats__t__failbio statscount)))))
(define-fun us_split_fields_SuccessEntry__projection ((a us_split_fields2)) statscount (rec__stats__t__successentry a))
(define-fun us_split_fields_FailEntry__projection ((a us_split_fields2)) statscount (rec__stats__t__failentry a))
(define-fun us_split_fields_SuccessBio__projection ((a us_split_fields2)) statscount (rec__stats__t__successbio a))
(define-fun us_split_fields_FailBio__projection ((a us_split_fields2)) statscount (rec__stats__t__failbio a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___12__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___13__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep2 (rec__stats__t__successentry (us_split_fields3 a))) (to_rep2 (rec__stats__t__successentry (us_split_fields3 b)))) (= (to_rep2 (rec__stats__t__failentry (us_split_fields3 a))) (to_rep2 (rec__stats__t__failentry (us_split_fields3 b))))) (= (to_rep2 (rec__stats__t__successbio (us_split_fields3 a))) (to_rep2 (rec__stats__t__successbio (us_split_fields3 b))))) (= (to_rep2 (rec__stats__t__failbio (us_split_fields3 a))) (to_rep2 (rec__stats__t__failbio (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const stats__t__successentry__first__bit Int)
(declare-const stats__t__successentry__last__bit Int)
(declare-const stats__t__successentry__position Int)
(assert (<= 0 stats__t__successentry__first__bit))
(assert (< stats__t__successentry__first__bit stats__t__successentry__last__bit))
(assert (<= 0 stats__t__successentry__position))
(declare-const stats__t__failentry__first__bit Int)
(declare-const stats__t__failentry__last__bit Int)
(declare-const stats__t__failentry__position Int)
(assert (<= 0 stats__t__failentry__first__bit))
(assert (< stats__t__failentry__first__bit stats__t__failentry__last__bit))
(assert (<= 0 stats__t__failentry__position))
(declare-const stats__t__successbio__first__bit Int)
(declare-const stats__t__successbio__last__bit Int)
(declare-const stats__t__successbio__position Int)
(assert (<= 0 stats__t__successbio__first__bit))
(assert (< stats__t__successbio__first__bit stats__t__successbio__last__bit))
(assert (<= 0 stats__t__successbio__position))
(declare-const stats__t__failbio__first__bit Int)
(declare-const stats__t__failbio__last__bit Int)
(declare-const stats__t__failbio__position Int)
(assert (<= 0 stats__t__failbio__first__bit))
(assert (< stats__t__failbio__first__bit stats__t__failbio__last__bit))
(assert (<= 0 stats__t__failbio__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 us_rep1)))))
(define-fun t__ref___5__projection ((a t__ref1)) us_rep1 (t__content1 a))
(declare-const thestats us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const theadmin us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_258 Int) (temp___is_init_255 Bool) (temp___skip_constant_256 Bool) (temp___do_toplevel_257 Bool)) Bool (=> (or (= temp___is_init_255 true) (<= 0 4)) (in_range2 temp___expr_258)))
(define-fun dynamic_invariant2 ((temp___expr_176 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool)) Bool (=> (or (= temp___is_init_173 true) (<= 0 3)) (in_range1 temp___expr_176)))
(define-fun dynamic_invariant3 ((temp___expr_1035 Int) (temp___is_init_1032 Bool) (temp___skip_constant_1033 Bool) (temp___do_toplevel_1034 Bool)) Bool (=> (or (= temp___is_init_1032 true) (<= 0 2147483647)) (in_range4 temp___expr_1035)))
(declare-const state us_private)
(declare-const state1 us_private)
(declare-const state2 us_private)
(declare-const output us_private)
(declare-const state3 us_private)
(declare-const output1 us_private)
(declare-const systemfault Bool)
(declare-const state4 us_private)
(declare-const filestate us_private)
(declare-const output2 us_private)
(declare-const output3 us_private)
(declare-const systemfault1 Bool)
(declare-const state5 us_private)
(declare-const filestate1 us_private)
(declare-const output4 us_private)
(declare-const output5 us_private)
(declare-const state6 us_private)
(declare-const output6 us_private)
(declare-const state7 us_private)
(declare-const output7 us_private)
(declare-const systemfault2 Bool)
(declare-const state8 us_private)
(declare-const filestate2 us_private)
(declare-const output8 us_private)
(declare-const output9 us_private)
(declare-const state9 us_private)
(declare-const output10 us_private)
(declare-const state10 us_private)
(declare-const output11 us_private)
(assert (and (=> (= (thedooralarm state1) 0) (= (isalarming Tuple0) true)) (or (= (= (islocked state) true) (= (latchislocked Tuple0) true)) (= systemfault true))))
(assert (= output7 output1))
(assert (= state7 state3))
(assert (= output6 output))
(assert (= state6 state2))
(assert (= output5 output3))
(assert (= output4 output2))
(assert (= filestate1 filestate))
(assert (= state5 state4))
(assert (= systemfault systemfault1))
(assert (= output11 output1))
(assert (= state10 state3))
(assert (= output10 output))
(assert (= state9 state2))
(assert (= output9 output3))
(assert (= output8 output2))
(assert (= filestate2 filestate))
(assert (= state8 state4))
(assert (= systemfault2 systemfault))
(assert (= (thedooralarm state1) 0))
(assert (not (= (isalarming Tuple0) true)))
(check-sat)
(exit)
