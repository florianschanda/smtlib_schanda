(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__dispatch__root__f : integer; rec__ext__ :
us_private
}

function us_split_fields_F__projection(a: us_split_fields) : integer =
  (a).rec__dispatch__root__f

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__dispatch__root__f) = to_rep(((b).us_split_fields1).rec__dispatch__root__f)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__dispatch__root__f) = to_rep(((b).us_split_fields1).rec__dispatch__root__f))) ->
  (bool_eq2(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = { rec__dispatch__root__f = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = { rec__dispatch__root__f = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

logic dispatch__root__f__first__bit : int

logic dispatch__root__f__last__bit : int

logic dispatch__root__f__position : int

axiom dispatch__root__f__first__bit_axiom :
  (0 <= dispatch__root__f__first__bit)

axiom dispatch__root__f__last__bit_axiom :
  (dispatch__root__f__first__bit <  dispatch__root__f__last__bit)

axiom dispatch__root__f__position_axiom : (0 <= dispatch__root__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : us_private

logic dummy3 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

logic x : integer

logic x1 : us_private

logic x2 : int

logic attr__ATTRIBUTE_ADDRESS : int

logic dispatch__incr__result : integer

logic dispatch__incr__result1 : us_private

logic dispatch__incr__result2 : int

logic o : int

logic o1 : integer

logic o2 : integer

logic o3 : us_private

logic o4 : integer

logic o5 : us_private

logic o6 : int

logic o7 : int

logic result : integer

logic result1 : us_private

logic result2 : int

logic dispatch__incr__result3 : integer

logic dispatch__incr__result4 : us_private

logic dispatch__incr__result5 : int

logic dispatch__incr__result6 : integer

logic dispatch__incr__result7 : us_private

logic dispatch__incr__result8 : int

logic dispatch__incr__result9 : integer

logic dispatch__incr__result10 : us_private

logic dispatch__incr__result11 : int

logic dispatch__incr__result12 : integer

logic dispatch__incr__result13 : us_private

logic dispatch__incr__result14 : int

logic dispatch__incr__result15 : integer

logic dispatch__incr__result16 : us_private

logic dispatch__incr__result17 : int

axiom H : (to_rep(x) <  2147483647)

axiom H1 : (dispatch__incr__result6 = dispatch__incr__result3)

axiom H2 : (dispatch__incr__result7 = dispatch__incr__result4)

axiom H3 : (dispatch__incr__result8 = dispatch__incr__result5)

axiom H4 : (((dispatch__incr__result9 = dispatch__incr__result3) and
  (dispatch__incr__result10 = dispatch__incr__result4)) and
  (dispatch__incr__result11 = dispatch__incr__result5))

axiom H5 : ((o = (to_rep(x) + 1)) and in_range((to_rep(x) + 1)))

axiom H6 : (to_rep(o1) = o)

axiom H7 : (o1 = o2)

axiom H8 : (us_null_ext__ = o3)

axiom H9 : (o4 = o2)

axiom H10 : (o5 = o3)

axiom H11 : (us_tag = o6)

axiom H12 : (((result = dispatch__incr__result) and
  (result1 = dispatch__incr__result1)) and
  (result2 = dispatch__incr__result2))

axiom H13 : (((dispatch__incr__result3 = o4) and
  (dispatch__incr__result4 = o5)) and (dispatch__incr__result5 = o6))

axiom H14 : (((dispatch__incr__result12 = dispatch__incr__result6) and
  (dispatch__incr__result13 = dispatch__incr__result7)) and
  (dispatch__incr__result14 = dispatch__incr__result8))

axiom H15 : (((dispatch__incr__result15 = dispatch__incr__result9) and
  (dispatch__incr__result16 = dispatch__incr__result10)) and
  (dispatch__incr__result17 = dispatch__incr__result11))

 (* File "dispatch.ads", line 2, characters 0-0 *)
goal WP_parameter_def : in_range((to_rep(x) + 1))
