(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun type_invariant ((temp___154 Int)) Bool (not (= temp___154 0)))
(declare-sort t 0)
(declare-fun tqtint (t) Int)
(assert (forall ((i t)) (and (<= (- 2147483648) (tqtint i)) (<= (tqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (t t) Bool)
(declare-const dummy t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))
(define-fun dynamic_invariant ((temp___expr_160 Int) (temp___is_init_156 Bool) (temp___skip_constant_157 Bool) (temp___do_toplevel_158 Bool) (temp___do_typ_inv_159 Bool)) Bool (=> (or (= temp___is_init_156 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_160)))
(declare-sort ttB 0)
(declare-fun ttBqtint (ttB) Int)
(assert (forall ((i ttB)) (and (<= (- 2147483648) (ttBqtint i)) (<= (ttBqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (ttB ttB) Bool)
(declare-const dummy1 ttB)
(declare-datatypes () ((ttB__ref (mk_ttB__ref (ttB__content ttB)))))
(define-fun ttB__ref___projection ((a ttB__ref)) ttB (ttB__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x Int)
(declare-const start Bool)
(declare-const o Int)
(declare-const x1 Int)
(declare-const start1 Bool)
(declare-const result Bool)
(declare-const start2 Bool)
(declare-const x2 Int)
(declare-const start3 Bool)
(declare-const result1 Int)
(declare-const x3 Int)
(declare-const x4 Int)
(declare-const start4 Bool)
(declare-const x5 Int)
(declare-const start5 Bool)
(assert (in_range1 x))
(assert (type_invariant x))
(assert (=> (= start true) (= (mk_bool__ref result) (mk_bool__ref start))))
(assert (=> (= start true) (= start2 (distinct 0 0))))
(assert (=> (= start true) (type_invariant x)))
(assert (=> (= start true) (and (in_range1 x2) (type_invariant x2))))
(assert (=> (not (= start true)) (=> (not (= x (- 2147483648))) (and (= o (abs x)) (in_range2 (abs x))))))
(assert (=> (not (= start true)) (=> (not (= x (- 2147483648))) (= result1 x))))
(assert (=> (not (= start true)) (=> (not (= x (- 2147483648))) (= x3 o))))
(assert (=> (not (= start true)) (=> (not (not (= x (- 2147483648)))) (= x3 x))))
(assert (=> (not (= start true)) (=> (not (not (= x (- 2147483648)))) (= x3 x1))))
(assert (=> (not (= start true)) (= start3 start)))
(assert (=> (not (= start true)) (= x2 x3)))
(assert (=> (not (= start true)) (= start3 start1)))
(assert (=> (not (= start true)) (= x2 x3)))
(assert (= start4 start3))
(assert (= x2 x4))
(assert (= start5 start3))
(assert (= x5 x2))
(assert (not (type_invariant x4)))
(check-sat)
(exit)
