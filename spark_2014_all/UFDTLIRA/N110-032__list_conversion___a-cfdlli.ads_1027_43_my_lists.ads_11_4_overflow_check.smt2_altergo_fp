(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type tcount_typeB

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__my_lists__my_lists__list__capacity : count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__my_lists__my_lists__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_lists__my_lists__list : us_main_type
}

function us_split_fields_List__projection(a: us_split_fields) : us_main_type =
  (a).rec__my_lists__my_lists__list

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__my_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__my_lists__my_lists__list,
  ((b).us_split_fields1).rec__my_lists__my_lists__list) = true)) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__my_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__my_lists__my_lists__list,
  ((b).us_split_fields1).rec__my_lists__my_lists__list) = true))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit : int

logic my_lists__my_lists__list__capacity__last__bit : int

logic my_lists__my_lists__list__capacity__position : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom :
  (0 <= my_lists__my_lists__list__capacity__first__bit)

axiom my_lists__my_lists__list__capacity__last__bit_axiom :
  (my_lists__my_lists__list__capacity__first__bit <  my_lists__my_lists__list__capacity__last__bit)

axiom my_lists__my_lists__list__capacity__position_axiom :
  (0 <= my_lists__my_lists__list__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : count_type

logic dummy3 : us_main_type

type list__ref = { list__content : us_rep
}

function list__ref___projection(a: list__ref) : us_rep = (a).list__content

type us_split_fields2 = { rec__my_lists__my_lists__cursor__node : count_type
}

function us_split_fields_Node__projection(a: us_split_fields2) : count_type =
  (a).rec__my_lists__my_lists__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  (((to_rep(((a).us_split_fields3).rec__my_lists__my_lists__cursor__node) = to_rep(((b).us_split_fields3).rec__my_lists__my_lists__cursor__node)) ->
  (bool_eq4(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__my_lists__my_lists__cursor__node) = to_rep(((b).us_split_fields3).rec__my_lists__my_lists__cursor__node))) ->
  (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = a } })))

logic my_lists__my_lists__cursor__node__first__bit : int

logic my_lists__my_lists__cursor__node__last__bit : int

logic my_lists__my_lists__cursor__node__position : int

axiom my_lists__my_lists__cursor__node__first__bit_axiom :
  (0 <= my_lists__my_lists__cursor__node__first__bit)

axiom my_lists__my_lists__cursor__node__last__bit_axiom :
  (my_lists__my_lists__cursor__node__first__bit <  my_lists__my_lists__cursor__node__last__bit)

axiom my_lists__my_lists__cursor__node__position_axiom :
  (0 <= my_lists__my_lists__cursor__node__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__my_lists__my_lists__list = container1 } })].
  ((length({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__my_lists__my_lists__list =
  container1 } }) <= to_rep(container)) and in_range1(length({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__my_lists__my_lists__list = container1 } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy5 : us_rep2

type map__ref = { map__content : us_rep2
}

function map__ref___projection(a: map__ref) : us_rep2 = (a).map__content

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref___projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

logic has_key : us_rep2, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep2, us_rep1 -> prop

logic positions : us_rep -> us_rep2

logic positions__function_guard : us_rep2, us_rep -> prop

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic target__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic before : count_type

logic attr__ATTRIBUTE_ADDRESS2 : int

logic source__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom no_element__def_axiom : (no_element = of_rep(0))

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

logic get : us_rep2, us_rep1 -> int

logic get__function_guard : int, us_rep2, us_rep1 -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__my_lists__my_lists__list = container1 } })].
  ((not (has_key(positions({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = container }; us_split_fields1 = {
  rec__my_lists__my_lists__list = container1 } }), { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = no_element } }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = container }; us_split_fields1 = {
  rec__my_lists__my_lists__list = container1 } }), { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = i } }) = true) ->
  (((1 <= get(positions({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = container }; us_split_fields1 = {
  rec__my_lists__my_lists__list = container1 } }), { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = i } })) and (get(positions({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__my_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = i }
  }) <= length({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = container }; us_split_fields1 = {
  rec__my_lists__my_lists__list = container1 } }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = container }; us_split_fields1 = {
  rec__my_lists__my_lists__list = container1 } }), { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = j } }) = true) -> ((get(positions({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__my_lists__my_lists__list = container1 } }), {
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = i }
  }) = get(positions({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = container }; us_split_fields1 = {
  rec__my_lists__my_lists__list = container1 } }), { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = j } })) -> (bool_eq4({
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = i } }, {
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = j }
  }) = true)))))))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq6 : bool, bool -> bool

axiom bool_eq_def4 :
  (forall x:bool. forall y:bool [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

axiom has_key__post_axiom :
  (forall container:us_rep2.
  (forall key:count_type [has_key(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } })]. ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields3 = {
   rec__my_lists__my_lists__cursor__node = k } }) = true) and (bool_eq4({
   us_split_fields3 = { rec__my_lists__my_lists__cursor__node = k } }, {
   us_split_fields3 = { rec__my_lists__my_lists__cursor__node = key }
   }) = true))) ->
  (has_key(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } }) = true)))))

type element_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___4__projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic witness : us_rep2, us_rep1 -> int

logic witness__function_guard : int, us_rep2, us_rep1 -> prop

logic w_get : us_rep2, int -> int

logic w_get__function_guard : int, us_rep2, int -> prop

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall key:count_type [get(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } })]. ((has_key(container, {
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = key }
  }) = true) -> (((of_int(0) = true) -> ((get(container, { us_split_fields3 =
  { rec__my_lists__my_lists__cursor__node = key } }) = w_get(container,
  witness(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = k } }) = true) -> ((bool_eq4({
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = k } }, {
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = key }
  }) = true) <-> (witness(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } }) = witness(container, {
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = k } }))))))) and
  in_range3(get(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } }))))))

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  in_range1(length1(container)))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key:count_type. (not (has_key(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } }) = true)))))

logic has_witness : us_rep2, int -> bool

logic has_witness__function_guard : bool, us_rep2, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep2.
  (forall key:count_type [witness(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } })]. ((has_key(container, {
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = key }
  }) = true) -> ((has_witness(container, witness(container, {
  us_split_fields3 = { rec__my_lists__my_lists__cursor__node = key }
  })) = true) and in_range1(witness(container, { us_split_fields3 = {
  rec__my_lists__my_lists__cursor__node = key } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep2.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range1(witness1) and (has_witness(container, witness1) = true)) ->
  in_range3(w_get(container, witness1)))))

 (* File "a-cfdlli.ads", line 1006, characters 0-0 *)
goal WP_parameter_def :
  (forall target__split_fields:us_main_type. forall o:count_type.
  forall o1:count_type. forall temp___544:count_type. forall o2:int.
  forall o3:int. (((((to_rep(o) = 0) and (o = o1)) and (temp___544 = o1)) and
  (temp___544 = no_element)) -> ((((o2 = length({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = target__split_discrs };
  us_split_fields1 = { rec__my_lists__my_lists__list = target__split_fields }
  })) and (in_range1(o2) and (o2 <= to_rep(target__split_discrs)))) and
  (o3 = (to_rep(target__split_discrs) - o2))) -> in_range(o3))))
