(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun to_rep1 ((x natural)) Int (naturalqtint x))
(declare-fun of_rep1 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort enum 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (enum enum) Bool)
(declare-const dummy2 enum)
(declare-datatypes () ((enum__ref (mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))
(declare-fun to_rep2 (enum) Int)
(declare-fun of_rep2 (Int) enum)
(assert (forall ((x enum)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x enum)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__basic__r__x enum)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) enum (rec__basic__r__x a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__basic__r__base integer) (rec__basic__r__a_field integer) (rec__basic__r__c_field1 Bool) (rec__basic__r__c_field2 natural)))))
(define-fun us_split_fields_Base__projection ((a us_split_fields)) integer (rec__basic__r__base a))
(define-fun us_split_fields_A_Field__projection ((a us_split_fields)) integer (rec__basic__r__a_field a))
(define-fun us_split_fields_C_Field1__projection ((a us_split_fields)) Bool (rec__basic__r__c_field1 a))
(define-fun us_split_fields_C_Field2__projection ((a us_split_fields)) natural (rec__basic__r__c_field2 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun basic__r__a_field__pred ((a us_rep)) Bool (= (to_rep2 (rec__basic__r__x (us_split_discrs1 a))) 0))
(define-fun basic__r__c_field1__pred ((a us_rep)) Bool (= (to_rep2 (rec__basic__r__x (us_split_discrs1 a))) 2))
(define-fun basic__r__c_field2__pred ((a us_rep)) Bool (= (to_rep2 (rec__basic__r__x (us_split_discrs1 a))) 2))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep2 (rec__basic__r__x (us_split_discrs1 a))) (to_rep2 (rec__basic__r__x (us_split_discrs1 b)))) (and (and (and (= (to_rep (rec__basic__r__base (us_split_fields1 a))) (to_rep (rec__basic__r__base (us_split_fields1 b)))) (=> (basic__r__a_field__pred a) (= (to_rep (rec__basic__r__a_field (us_split_fields1 a))) (to_rep (rec__basic__r__a_field (us_split_fields1 b)))))) (=> (basic__r__c_field1__pred a) (= (rec__basic__r__c_field1 (us_split_fields1 a)) (rec__basic__r__c_field1 (us_split_fields1 b))))) (=> (basic__r__c_field2__pred a) (= (to_rep1 (rec__basic__r__c_field2 (us_split_fields1 a))) (to_rep1 (rec__basic__r__c_field2 (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const basic__r__x__first__bit Int)
(declare-const basic__r__x__last__bit Int)
(declare-const basic__r__x__position Int)
(assert (<= 0 basic__r__x__first__bit))
(assert (< basic__r__x__first__bit basic__r__x__last__bit))
(assert (<= 0 basic__r__x__position))
(declare-const basic__r__base__first__bit Int)
(declare-const basic__r__base__last__bit Int)
(declare-const basic__r__base__position Int)
(assert (<= 0 basic__r__base__first__bit))
(assert (< basic__r__base__first__bit basic__r__base__last__bit))
(assert (<= 0 basic__r__base__position))
(declare-const basic__r__a_field__first__bit Int)
(declare-const basic__r__a_field__last__bit Int)
(declare-const basic__r__a_field__position Int)
(assert (<= 0 basic__r__a_field__first__bit))
(assert (< basic__r__a_field__first__bit basic__r__a_field__last__bit))
(assert (<= 0 basic__r__a_field__position))
(declare-const basic__r__c_field1__first__bit Int)
(declare-const basic__r__c_field1__last__bit Int)
(declare-const basic__r__c_field1__position Int)
(assert (<= 0 basic__r__c_field1__first__bit))
(assert (< basic__r__c_field1__first__bit basic__r__c_field1__last__bit))
(assert (<= 0 basic__r__c_field1__position))
(declare-const basic__r__c_field2__first__bit Int)
(declare-const basic__r__c_field2__last__bit Int)
(declare-const basic__r__c_field2__position Int)
(assert (<= 0 basic__r__c_field2__first__bit))
(assert (< basic__r__c_field2__first__bit basic__r__c_field2__last__bit))
(assert (<= 0 basic__r__c_field2__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))
(declare-fun id (us_rep) us_rep)
(declare-fun id__function_guard (us_rep us_rep) Bool)
(assert (forall ((x us_rep)) (! (= (bool_eq (id x) x) true) :pattern ((id x)))))
(define-fun in_range3 ((rec__basic__r__x1 Int) (a us_rep)) Bool (= rec__basic__r__x1 (to_rep2 (rec__basic__r__x (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const basic__r__x__first__bit1 Int)
(declare-const basic__r__x__last__bit1 Int)
(declare-const basic__r__x__position1 Int)
(assert (<= 0 basic__r__x__first__bit1))
(assert (< basic__r__x__first__bit1 basic__r__x__last__bit1))
(assert (<= 0 basic__r__x__position1))
(declare-const basic__r__c_field1__first__bit1 Int)
(declare-const basic__r__c_field1__last__bit1 Int)
(declare-const basic__r__c_field1__position1 Int)
(assert (<= 0 basic__r__c_field1__first__bit1))
(assert (< basic__r__c_field1__first__bit1 basic__r__c_field1__last__bit1))
(assert (<= 0 basic__r__c_field1__position1))
(declare-const basic__r__c_field2__first__bit1 Int)
(declare-const basic__r__c_field2__last__bit1 Int)
(declare-const basic__r__c_field2__position1 Int)
(assert (<= 0 basic__r__c_field2__first__bit1))
(assert (< basic__r__c_field2__first__bit1 basic__r__c_field2__last__bit1))
(assert (<= 0 basic__r__c_field2__position1))
(declare-const basic__r__base__first__bit1 Int)
(declare-const basic__r__base__last__bit1 Int)
(declare-const basic__r__base__position1 Int)
(assert (<= 0 basic__r__base__first__bit1))
(assert (< basic__r__base__first__bit1 basic__r__base__last__bit1))
(assert (<= 0 basic__r__base__position1))
(declare-const basic__r__a_field__first__bit1 Int)
(declare-const basic__r__a_field__last__bit1 Int)
(declare-const basic__r__a_field__position1 Int)
(assert (<= 0 basic__r__a_field__first__bit1))
(assert (< basic__r__a_field__first__bit1 basic__r__a_field__last__bit1))
(assert (<= 0 basic__r__a_field__position1))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((sp__ref (mk_sp__ref (sp__content us_rep)))))
(define-fun sp__ref___projection ((a sp__ref)) us_rep (sp__content a))
(define-fun dynamic_invariant ((temp___expr_187 us_rep) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool) (temp___do_typ_inv_186 Bool)) Bool (=> (not (= temp___skip_constant_184 true)) (in_range3 0 temp___expr_187)))
(define-fun default_initial_assumption ((temp___expr_189 us_rep) (temp___skip_top_level_190 Bool)) Bool (= (to_rep2 (rec__basic__r__x (us_split_discrs1 temp___expr_189))) 0))
(define-fun in_range4 ((rec__basic__r__x1 Int) (a us_rep)) Bool (= rec__basic__r__x1 (to_rep2 (rec__basic__r__x (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const basic__r__x__first__bit2 Int)
(declare-const basic__r__x__last__bit2 Int)
(declare-const basic__r__x__position2 Int)
(assert (<= 0 basic__r__x__first__bit2))
(assert (< basic__r__x__first__bit2 basic__r__x__last__bit2))
(assert (<= 0 basic__r__x__position2))
(declare-const basic__r__c_field1__first__bit2 Int)
(declare-const basic__r__c_field1__last__bit2 Int)
(declare-const basic__r__c_field1__position2 Int)
(assert (<= 0 basic__r__c_field1__first__bit2))
(assert (< basic__r__c_field1__first__bit2 basic__r__c_field1__last__bit2))
(assert (<= 0 basic__r__c_field1__position2))
(declare-const basic__r__c_field2__first__bit2 Int)
(declare-const basic__r__c_field2__last__bit2 Int)
(declare-const basic__r__c_field2__position2 Int)
(assert (<= 0 basic__r__c_field2__first__bit2))
(assert (< basic__r__c_field2__first__bit2 basic__r__c_field2__last__bit2))
(assert (<= 0 basic__r__c_field2__position2))
(declare-const basic__r__base__first__bit2 Int)
(declare-const basic__r__base__last__bit2 Int)
(declare-const basic__r__base__position2 Int)
(assert (<= 0 basic__r__base__first__bit2))
(assert (< basic__r__base__first__bit2 basic__r__base__last__bit2))
(assert (<= 0 basic__r__base__position2))
(declare-const basic__r__a_field__first__bit2 Int)
(declare-const basic__r__a_field__last__bit2 Int)
(declare-const basic__r__a_field__position2 Int)
(assert (<= 0 basic__r__a_field__first__bit2))
(assert (< basic__r__a_field__first__bit2 basic__r__a_field__last__bit2))
(assert (<= 0 basic__r__a_field__position2))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content us_rep)))))
(define-fun t4b__ref___projection ((a t4b__ref)) us_rep (t4b__content a))
(declare-const x__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range5 ((rec__basic__r__x1 Int) (a us_rep)) Bool (= rec__basic__r__x1 (to_rep2 (rec__basic__r__x (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const basic__r__x__first__bit3 Int)
(declare-const basic__r__x__last__bit3 Int)
(declare-const basic__r__x__position3 Int)
(assert (<= 0 basic__r__x__first__bit3))
(assert (< basic__r__x__first__bit3 basic__r__x__last__bit3))
(assert (<= 0 basic__r__x__position3))
(declare-const basic__r__c_field1__first__bit3 Int)
(declare-const basic__r__c_field1__last__bit3 Int)
(declare-const basic__r__c_field1__position3 Int)
(assert (<= 0 basic__r__c_field1__first__bit3))
(assert (< basic__r__c_field1__first__bit3 basic__r__c_field1__last__bit3))
(assert (<= 0 basic__r__c_field1__position3))
(declare-const basic__r__c_field2__first__bit3 Int)
(declare-const basic__r__c_field2__last__bit3 Int)
(declare-const basic__r__c_field2__position3 Int)
(assert (<= 0 basic__r__c_field2__first__bit3))
(assert (< basic__r__c_field2__first__bit3 basic__r__c_field2__last__bit3))
(assert (<= 0 basic__r__c_field2__position3))
(declare-const basic__r__base__first__bit3 Int)
(declare-const basic__r__base__last__bit3 Int)
(declare-const basic__r__base__position3 Int)
(assert (<= 0 basic__r__base__first__bit3))
(assert (< basic__r__base__first__bit3 basic__r__base__last__bit3))
(assert (<= 0 basic__r__base__position3))
(declare-const basic__r__a_field__first__bit3 Int)
(declare-const basic__r__a_field__last__bit3 Int)
(declare-const basic__r__a_field__position3 Int)
(assert (<= 0 basic__r__a_field__first__bit3))
(assert (< basic__r__a_field__first__bit3 basic__r__a_field__last__bit3))
(assert (<= 0 basic__r__a_field__position3))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content us_rep)))))
(define-fun t5b__ref___projection ((a t5b__ref)) us_rep (t5b__content a))
(declare-const y__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const z__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 2)) (in_range2 temp___expr_158)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 1))
(declare-const x__split_fields integer)
(declare-const x__split_fields1 integer)
(declare-const x__split_fields2 Bool)
(declare-const x__split_fields3 natural)
(declare-const y__split_fields integer)
(declare-const y__split_fields1 integer)
(declare-const y__split_fields2 Bool)
(declare-const y__split_fields3 natural)
(declare-const o enum)
(declare-const o1 enum)
(declare-const o2 enum)
(declare-const o3 integer)
(declare-const o4 integer)
(declare-const o5 Bool)
(declare-const o6 natural)
(declare-const o7 enum)
(declare-const o8 integer)
(declare-const o9 integer)
(declare-const o10 Bool)
(declare-const o11 natural)
(declare-const o12 enum)
(declare-const o13 integer)
(declare-const o14 integer)
(declare-const o15 Bool)
(declare-const o16 natural)
(declare-const conv__p__x__assume enum)
(declare-const conv__p__x__assume1 integer)
(declare-const conv__p__x__assume2 integer)
(declare-const conv__p__x__assume3 Bool)
(declare-const conv__p__x__assume4 natural)
(declare-const o17 enum)
(declare-const o18 enum)
(declare-const conv__p__y__assume enum)
(declare-const conv__p__y__assume1 integer)
(declare-const conv__p__y__assume2 integer)
(declare-const conv__p__y__assume3 Bool)
(declare-const conv__p__y__assume4 natural)
(declare-const o19 us_rep)
(declare-const result us_split_fields__ref)
(declare-const x__split_fields4 us_split_fields)
(declare-const result1 us_split_fields__ref)
(declare-const y__split_fields4 us_split_fields)
(define-fun o20 () us_rep (mk___rep (mk___split_discrs o12) (mk___split_fields o13 o14 o15 o16)))
(define-fun o21 () us_rep (mk___rep (mk___split_discrs o7) (mk___split_fields o8 o9 o10 o11)))
(assert (= (to_rep2 o) 0))
(assert (= o o1))
(assert (= o2 o1))
(assert (= rliteral o3))
(assert (= rliteral o4))
(assert (= true o5))
(assert (= dummy1 o6))
(assert (= o21 (mk___rep (mk___split_discrs o2) (mk___split_fields o3 o4 o5 o6))))
(assert (= o20 o21))
(assert (= (mk___rep (mk___split_discrs conv__p__x__assume) (mk___split_fields conv__p__x__assume1 conv__p__x__assume2 conv__p__x__assume3 conv__p__x__assume4)) o20))
(assert (= result (mk___split_fields__ref (mk___split_fields x__split_fields x__split_fields1 x__split_fields2 x__split_fields3))))
(assert (= x__split_fields4 (mk___split_fields conv__p__x__assume1 conv__p__x__assume2 conv__p__x__assume3 conv__p__x__assume4)))
(assert (= x__split_discrs (mk___split_discrs conv__p__x__assume)))
(assert (= 0 (to_rep2 (rec__basic__r__x x__split_discrs))))
(assert (= (to_rep2 o17) 0))
(assert (= o17 o18))
(assert (= conv__p__y__assume o18))
(assert (= rliteral conv__p__y__assume1))
(assert (= rliteral conv__p__y__assume2))
(assert (= true conv__p__y__assume3))
(assert (= dummy1 conv__p__y__assume4))
(assert (= result1 (mk___split_fields__ref (mk___split_fields y__split_fields y__split_fields1 y__split_fields2 y__split_fields3))))
(assert (= y__split_fields4 (mk___split_fields conv__p__y__assume1 conv__p__y__assume2 conv__p__y__assume3 conv__p__y__assume4)))
(assert (= y__split_discrs (mk___split_discrs conv__p__y__assume)))
(assert (and (= o19 (id (mk___rep x__split_discrs x__split_fields4))) (= (bool_eq o19 (mk___rep x__split_discrs x__split_fields4)) true)))
(assert (not (= 0 (to_rep2 (rec__basic__r__x (us_split_discrs1 o19))))))
(check-sat)
(exit)
