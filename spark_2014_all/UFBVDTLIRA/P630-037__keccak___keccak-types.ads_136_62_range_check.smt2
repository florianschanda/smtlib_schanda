(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(declare-sort unsigned_4 0)
(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x0F)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))
(declare-fun user_eq1 (unsigned_4 unsigned_4) Bool)
(declare-const dummy1 unsigned_4)
(declare-datatypes () ((unsigned_4__ref (mk_unsigned_4__ref (unsigned_4__content unsigned_4)))))
(define-fun unsigned_4__ref___projection ((a unsigned_4__ref)) unsigned_4 (unsigned_4__content a))
(define-fun dynamic_invariant1 ((temp___expr_250 (_ BitVec 8)) (temp___is_init_246 Bool) (temp___skip_constant_247 Bool) (temp___do_toplevel_248 Bool) (temp___do_typ_inv_249 Bool)) Bool (=> (or (= temp___is_init_246 true) (bvule #x00 #x0F)) (in_range1 temp___expr_250)))
(declare-fun shift_left_4 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun shift_left_4__function_guard ((_ BitVec 8) (_ BitVec 8) Int) Bool)
(assert (forall ((value (_ BitVec 8))) (forall ((amount Int)) (! (=> (and (and (dynamic_invariant1 value true true true true) (dynamic_invariant amount true true true true)) (<= amount 4)) (dynamic_invariant1 (shift_left_4 value amount) true false true true)) :pattern ((shift_left_4 value amount))))))
(assert (forall ((value (_ BitVec 8))) (forall ((amount Int)) (! (=> (and (dynamic_invariant1 value true true true true) (dynamic_invariant amount true true true true)) (= (shift_left_4 value amount) (bvand (ite (< amount 8) (bvshl value ((_ int2bv 8) amount)) #x00) #x0F))) :pattern ((shift_left_4 value amount))))))
(declare-fun shift_right_4 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun shift_right_4__function_guard ((_ BitVec 8) (_ BitVec 8) Int) Bool)
(assert (forall ((value (_ BitVec 8))) (forall ((amount Int)) (! (=> (and (and (dynamic_invariant1 value true true true true) (dynamic_invariant amount true true true true)) (<= amount 4)) (dynamic_invariant1 (shift_right_4 value amount) true false true true)) :pattern ((shift_right_4 value amount))))))
(assert (forall ((value (_ BitVec 8))) (forall ((amount Int)) (! (=> (and (dynamic_invariant1 value true true true true) (dynamic_invariant amount true true true true)) (= (shift_right_4 value amount) (bvand (ite (< amount 8) (bvlshr value ((_ int2bv 8) amount)) #x00) #x0F))) :pattern ((shift_right_4 value amount))))))
(declare-const value (_ BitVec 8))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const amount Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(assert (in_range1 value))
(assert (in_range amount))
(assert (<= amount 4))
(assert (not (in_range (- 4 amount))))
(check-sat)
(exit)
