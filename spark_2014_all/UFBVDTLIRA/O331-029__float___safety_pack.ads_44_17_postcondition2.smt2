(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 16) Int) Bool)
(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort t_uint16 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 16))
(declare-fun user_eq (t_uint16 t_uint16) Bool)
(declare-const dummy t_uint16)
(declare-datatypes () ((t_uint16__ref (mk_t_uint16__ref (t_uint16__content t_uint16)))))
(define-fun t_uint16__ref___projection ((a t_uint16__ref)) t_uint16 (t_uint16__content a))
(define-fun dynamic_invariant ((temp___expr_1487 (_ BitVec 16)) (temp___is_init_1483 Bool) (temp___skip_constant_1484 Bool) (temp___do_toplevel_1485 Bool) (temp___do_typ_inv_1486 Bool)) Bool true)
(declare-const value (_ BitVec 16))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const min_value (_ BitVec 16))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const max_value (_ BitVec 16))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const res (_ BitVec 16))
(declare-const safety_pack__saturate__2__result (_ BitVec 16))
(declare-const result (_ BitVec 16))
(declare-const res1 (_ BitVec 16))
(declare-const result1 (_ BitVec 16))
(declare-const res2 (_ BitVec 16))
(declare-const result2 (_ BitVec 16))
(declare-const res3 (_ BitVec 16))
(declare-const result3 (_ BitVec 16))
(declare-const safety_pack__saturate__2__result1 (_ BitVec 16))
(declare-const safety_pack__saturate__2__result2 (_ BitVec 16))
(declare-const safety_pack__saturate__2__result3 (_ BitVec 16))
(declare-const res4 (_ BitVec 16))
(declare-const safety_pack__saturate__2__result4 (_ BitVec 16))
(declare-const res5 (_ BitVec 16))
(declare-const safety_pack__saturate__2__result5 (_ BitVec 16))
(declare-const result4 (_ BitVec 16))
(assert (= result res))
(assert (= res1 value))
(assert (=> (bvult value min_value) (= result1 res1)))
(assert (=> (bvult value min_value) (= res2 min_value)))
(assert (=> (not (bvult value min_value)) (=> (bvugt value max_value) (= result2 res1))))
(assert (=> (not (bvult value min_value)) (=> (bvugt value max_value) (= res3 max_value))))
(assert (=> (not (bvult value min_value)) (=> (not (bvugt value max_value)) (= res3 res1))))
(assert (=> (not (bvult value min_value)) (= res2 res3)))
(assert (= safety_pack__saturate__2__result1 safety_pack__saturate__2__result2))
(assert (= safety_pack__saturate__2__result3 safety_pack__saturate__2__result1))
(assert (= result3 safety_pack__saturate__2__result))
(assert (= safety_pack__saturate__2__result1 res2))
(assert (= (mk_t__ref safety_pack__saturate__2__result4) (mk_t__ref safety_pack__saturate__2__result2)))
(assert (= res4 res2))
(assert (= safety_pack__saturate__2__result5 safety_pack__saturate__2__result3))
(assert (= res5 res2))
(assert (= result4 safety_pack__saturate__2__result4))
(assert (bvult value min_value))
(assert (not (= safety_pack__saturate__2__result4 min_value)))
(check-sat)
(exit)
