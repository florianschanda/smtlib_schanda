(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort hash_type 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))
(declare-fun user_eq (hash_type hash_type) Bool)
(declare-const dummy hash_type)
(declare-datatypes () ((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type (hash_type__content a))
(declare-fun to_rep (hash_type) (_ BitVec 32))
(declare-fun of_rep ((_ BitVec 32)) hash_type)
(assert (forall ((x hash_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int2 ((x hash_type)) Int (bv2nat (to_rep x)))
(assert (forall ((x hash_type)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-sort count_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(declare-fun to_rep1 (count_type) Int)
(declare-fun of_rep1 (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x count_type)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__use_maps__my_maps__map__capacity count_type) (rec__use_maps__my_maps__map__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__use_maps__my_maps__map__capacity a))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) hash_type (rec__use_maps__my_maps__map__modulus a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__use_maps__my_maps__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type (rec__use_maps__my_maps__map a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__use_maps__my_maps__map__capacity (us_split_discrs1 a))) (to_rep1 (rec__use_maps__my_maps__map__capacity (us_split_discrs1 b)))) (= (to_rep (rec__use_maps__my_maps__map__modulus (us_split_discrs1 a))) (to_rep (rec__use_maps__my_maps__map__modulus (us_split_discrs1 b))))) (= (us_main_eq (rec__use_maps__my_maps__map (us_split_fields1 a)) (rec__use_maps__my_maps__map (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const use_maps__my_maps__map__capacity__first__bit Int)
(declare-const use_maps__my_maps__map__capacity__last__bit Int)
(declare-const use_maps__my_maps__map__capacity__position Int)
(assert (<= 0 use_maps__my_maps__map__capacity__first__bit))
(assert (< use_maps__my_maps__map__capacity__first__bit use_maps__my_maps__map__capacity__last__bit))
(assert (<= 0 use_maps__my_maps__map__capacity__position))
(declare-const use_maps__my_maps__map__modulus__first__bit Int)
(declare-const use_maps__my_maps__map__modulus__last__bit Int)
(declare-const use_maps__my_maps__map__modulus__position Int)
(assert (<= 0 use_maps__my_maps__map__modulus__first__bit))
(assert (< use_maps__my_maps__map__modulus__first__bit use_maps__my_maps__map__modulus__last__bit))
(assert (<= 0 use_maps__my_maps__map__modulus__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep)))))
(define-fun map__ref___projection ((a map__ref)) us_rep (map__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-fun oeq1 (Int us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)))))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-fun length1 (Int us_rep) Int)
(declare-fun length__function_guard1 (Int Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_197 Int) (temp___is_init_193 Bool) (temp___skip_constant_194 Bool) (temp___do_toplevel_195 Bool) (temp___do_typ_inv_196 Bool)) Bool (=> (or (= temp___is_init_193 true) (<= 0 2147483647)) (in_range1 temp___expr_197)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep1 (rec__use_maps__my_maps__map__capacity (us_split_discrs1 container)))) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (! (dynamic_invariant (length1 attr__tag container) true false true true) :pattern ((length1 attr__tag container))))))
(declare-sort key_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (key_type key_type) Bool)
(declare-const dummy3 key_type)
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___2__projection ((a key_type__ref)) key_type (key_type__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep1)))))
(define-fun map__ref___2__projection ((a map__ref1)) us_rep1 (map__content1 a))
(declare-fun has_key (us_rep1 Int) Bool)
(declare-fun has_key__function_guard (Bool us_rep1 Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_386 Int) (temp___is_init_382 Bool) (temp___skip_constant_383 Bool) (temp___do_toplevel_384 Bool) (temp___do_typ_inv_385 Bool)) Bool (=> (or (= temp___is_init_382 true) (<= 1 2147483647)) (in_range2 temp___expr_386)))
(declare-fun length2 (us_rep1) Int)
(declare-fun length__function_guard2 (Int us_rep1) Bool)
(declare-fun is_empty (us_rep1) Bool)
(declare-fun is_empty__function_guard (Bool us_rep1) Bool)
(define-fun default_initial_assumption ((temp___expr_401 us_rep1) (temp___skip_top_level_402 Bool)) Bool (=> (not (= temp___skip_top_level_402 true)) (and (= (is_empty temp___expr_401) true) (= (length2 temp___expr_401) 0))))
(assert (forall ((container us_rep1)) (forall ((key Int)) (! (=> (dynamic_invariant1 key true true true true) (=> (= (distinct 1 0) true) (=> (exists ((k Int)) (and (and (in_range2 k) (= (has_key container k) true)) (= k key))) (= (has_key container key) true)))) :pattern ((has_key container key))))))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 (us_rep2 us_rep2) Bool)
(declare-const dummy5 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun get (us_rep2 Int) Int)
(declare-fun get__function_guard (Int us_rep2 Int) Bool)
(declare-sort element_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (element_type element_type) Bool)
(declare-const dummy6 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_422 Int) (temp___is_init_418 Bool) (temp___skip_constant_419 Bool) (temp___do_toplevel_420 Bool) (temp___do_typ_inv_421 Bool)) Bool (=> (or (= temp___is_init_418 true) (<= 1 2147483647)) (in_range3 temp___expr_422)))
(declare-sort extended_index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (extended_index extended_index) Bool)
(declare-const dummy7 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant3 ((temp___expr_429 Int) (temp___is_init_425 Bool) (temp___skip_constant_426 Bool) (temp___do_toplevel_427 Bool) (temp___do_typ_inv_428 Bool)) Bool (=> (or (= temp___is_init_425 true) (<= 0 2147483647)) (in_range4 temp___expr_429)))
(declare-fun length3 (us_rep2) Int)
(declare-fun length__function_guard3 (Int us_rep2) Bool)
(define-fun last ((container us_rep2)) Int (+ 0 (length3 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(define-fun oeq2 ((left us_rep2) (right us_rep2)) Bool (and (= (length3 left) (length3 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq5 a b) (oeq2 a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_437 us_rep2) (temp___skip_top_level_438 Bool)) Bool (=> (not (= temp___skip_top_level_438 true)) (= (length3 temp___expr_437) 0)))
(assert (forall ((container us_rep2)) (forall ((position Int)) (! (=> (and (dynamic_invariant3 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant2 (get container position) true false true true)) :pattern ((get container position))))))
(declare-fun model__ (us_rep) us_rep1)
(declare-fun model____function_guard (us_rep1 us_rep) Bool)
(assert true)
(declare-fun keys (us_rep) us_rep2)
(declare-fun keys__function_guard (us_rep2 us_rep) Bool)
(define-fun iter_has_element ((container us_rep2) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep2 Int) Bool)
(declare-fun find (us_rep2 Int) Int)
(declare-fun find__function_guard (Int us_rep2 Int) Bool)
(assert (forall ((container us_rep)) (! (let ((result (keys container))) (and (and (and (and (= (length3 result) (length container)) (forall ((temp___478 Int)) (=> (and (in_range4 temp___478) (= (iter_has_element result temp___478) true)) (= (has_key (model__ container) (get result temp___478)) true)))) (forall ((key Int)) (=> (and (in_range2 key) (= (has_key (model__ container) key) true)) (and (< 0 (find result key)) (= (get result (find result key)) key))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container))) (= (find result (get result i)) i)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length container))) (=> (= (get result i) (get result j)) (= i j)))))))) :pattern ((keys container)))))
(declare-fun get1 (us_rep1 Int) Int)
(declare-fun get__function_guard1 (Int us_rep1 Int) Bool)
(define-fun element__2 ((container us_rep) (key Int)) Int (get1 (model__ container) key))
(declare-fun element__2__function_guard (Int us_rep Int) Bool)
(declare-fun element__21 (Int us_rep Int) Int)
(declare-fun element__2__function_guard1 (Int Int us_rep Int) Bool)
(declare-sort key_type1 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (key_type1 key_type1) Bool)
(declare-const dummy8 key_type1)
(declare-datatypes () ((key_type__ref1 (mk_key_type__ref1 (key_type__content1 key_type1)))))
(define-fun key_type__ref___projection ((a key_type__ref1)) key_type1 (key_type__content1 a))
(define-fun dynamic_invariant4 ((temp___expr_346 Int) (temp___is_init_342 Bool) (temp___skip_constant_343 Bool) (temp___do_toplevel_344 Bool) (temp___do_typ_inv_345 Bool)) Bool (=> (or (= temp___is_init_342 true) (<= 1 2147483647)) (in_range5 temp___expr_346)))
(declare-sort element_type1 0)
(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq9 (element_type1 element_type1) Bool)
(declare-const dummy9 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant5 ((temp___expr_353 Int) (temp___is_init_349 Bool) (temp___skip_constant_350 Bool) (temp___do_toplevel_351 Bool) (temp___do_typ_inv_352 Bool)) Bool (=> (or (= temp___is_init_349 true) (<= (- 2147483648) 2147483647)) (in_range6 temp___expr_353)))
(define-fun contains ((container us_rep) (key Int)) Bool (has_key (model__ container) key))
(declare-fun contains__function_guard (Bool us_rep Int) Bool)
(declare-fun contains1 (Int us_rep Int) Bool)
(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)
(assert (forall ((attr__tag Int) (key Int)) (forall ((container us_rep)) (! (=> (dynamic_invariant4 key true true true true) (dynamic_invariant5 (element__21 attr__tag container key) true false true true)) :pattern ((element__21 attr__tag container key))))))
(declare-fun q (Int) Bool)
(declare-fun q__function_guard (Bool Int) Bool)
(declare-sort integer 0)
(define-fun in_range7 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq10 (integer integer) Bool)
(declare-const dummy10 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant6 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range7 temp___expr_18)))
(assert true)
(declare-const s us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant7 ((temp___expr_190 (_ BitVec 32)) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool true)
(assert (forall ((container us_rep2)) (forall ((key Int)) (! (=> (dynamic_invariant4 key true true true true) (let ((result (find container key))) (and (=> (< 0 result) (and (<= result (length3 container)) (= key (get container result)))) (dynamic_invariant result true false true true)))) :pattern ((find container key))))))
(declare-fun oeq3 (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard3 (Bool us_rep1 us_rep1) Bool)
(assert (forall ((left us_rep) (right us_rep)) (! (= (= (oeq left right) true) (= (oeq3 (model__ left) (model__ right)) true)) :pattern ((oeq left right)))))
(assert true)
(assert true)
(declare-sort element_type2 0)
(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq11 (element_type2 element_type2) Bool)
(declare-const dummy11 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___2__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant8 ((temp___expr_393 Int) (temp___is_init_389 Bool) (temp___skip_constant_390 Bool) (temp___do_toplevel_391 Bool) (temp___do_typ_inv_392 Bool)) Bool (=> (or (= temp___is_init_389 true) (<= (- 2147483648) 2147483647)) (in_range8 temp___expr_393)))
(declare-fun witness (us_rep1 Int) Int)
(declare-fun witness__function_guard (Int us_rep1 Int) Bool)
(declare-fun w_get (us_rep1 Int) Int)
(declare-fun w_get__function_guard (Int us_rep1 Int) Bool)
(assert (forall ((container us_rep1)) (forall ((key Int)) (! (=> (and (dynamic_invariant1 key true true true true) (= (has_key container key) true)) (let ((result (get1 container key))) (and (=> (= (distinct 1 0) true) (and (= result (w_get container (witness container key))) (forall ((k Int)) (=> (and (in_range2 k) (= (has_key container k) true)) (= (= k key) (= (witness container key) (witness container k))))))) (dynamic_invariant8 result true false true true)))) :pattern ((get1 container key))))))
(assert (forall ((container us_rep1)) (! (dynamic_invariant (length2 container) true false true true) :pattern ((length2 container)))))
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (oeq3 left right) true) (and (forall ((key Int)) (=> (and (in_range2 key) (= (has_key left key) true)) (and (= (has_key right key) true) (= (get1 right key) (get1 left key))))) (forall ((key Int)) (=> (and (in_range2 key) (= (has_key right key) true)) (= (has_key left key) true))))) :pattern ((oeq3 left right)))))
(assert (forall ((container us_rep1)) (! (= (= (is_empty container) true) (forall ((key Int)) (not (and (in_range2 key) (= (has_key container key) true))))) :pattern ((is_empty container)))))
(declare-fun has_witness (us_rep1 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep1 Int) Bool)
(assert true)
(assert (forall ((container us_rep1)) (forall ((key Int)) (! (=> (and (dynamic_invariant1 key true true true true) (= (has_key container key) true)) (let ((result (witness container key))) (and (= (has_witness container result) true) (dynamic_invariant result true false true true)))) :pattern ((witness container key))))))
(assert (forall ((container us_rep1)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant witness1 true true true true) (= (has_witness container witness1) true)) (dynamic_invariant8 (w_get container witness1) true false true true)) :pattern ((w_get container witness1))))))
(assert (forall ((container us_rep2)) (! (let ((result (length3 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true true))) :pattern ((length3 container)))))
(declare-const i Int)
(declare-const o Int)
(declare-const o1 Bool)
(declare-const o2 us_rep2)
(declare-const result Bool)
(assert (forall ((k Int)) (=> (and (in_range2 k) (= (has_key (model__ s) k) true)) (= (q (get1 (model__ s) k)) true))))
(assert (and (= o (length s)) (and (in_range1 o) (<= o (to_rep1 (rec__use_maps__my_maps__map__capacity (us_split_discrs1 s)))))))
(assert (= o1 (ite (<= i o) true false)))
(assert (= result (ite (<= 1 i) o1 false)))
(assert (= result true))
(assert (and (= o2 (keys s)) (and (and (and (and (= (length3 o2) (length s)) (forall ((temp___474 Int)) (=> (and (in_range4 temp___474) (= (iter_has_element o2 temp___474) true)) (= (has_key (model__ s) (get o2 temp___474)) true)))) (forall ((key Int)) (=> (and (in_range2 key) (= (has_key (model__ s) key) true)) (and (< 0 (find o2 key)) (= (get o2 (find o2 key)) key))))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 (length s))) (= (find o2 (get o2 i1)) i1)))) (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 (length s))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length s))) (=> (= (get o2 i1) (get o2 j)) (= i1 j)))))))))
(assert (not (<= 1 i)))
(check-sat)
(exit)
