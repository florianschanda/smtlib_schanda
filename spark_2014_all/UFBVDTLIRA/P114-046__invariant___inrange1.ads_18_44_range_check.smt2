(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned64 unsigned64) Bool)
(declare-const dummy unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_235 (_ BitVec 64)) (temp___is_init_231 Bool) (temp___skip_constant_232 Bool) (temp___do_toplevel_233 Bool) (temp___do_typ_inv_234 Bool)) Bool true)
(declare-const var (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const bottom (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const range_size (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const matched Bool)
(declare-const i (_ BitVec 64))
(declare-const inrange1__inrange64__result Bool)
(declare-const temp___239 (_ BitVec 64))
(declare-const temp___238 Bool)
(declare-const temp___240 (_ BitVec 64))
(declare-const result Bool)
(declare-const matched1 Bool)
(declare-const result1 (_ BitVec 64))
(declare-const i1 (_ BitVec 64))
(declare-const matched2 Bool)
(declare-const i2 (_ BitVec 64))
(declare-const temp___2401 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(declare-const temp___2402 (_ BitVec 64))
(declare-const result3 Bool)
(declare-const matched3 Bool)
(declare-const result4 (_ BitVec 64))
(declare-const i3 (_ BitVec 64))
(declare-const matched4 Bool)
(declare-const i4 (_ BitVec 64))
(declare-const matched5 Bool)
(declare-const i5 (_ BitVec 64))
(declare-const matched6 Bool)
(declare-const i6 (_ BitVec 64))
(declare-const matched7 Bool)
(declare-const i7 (_ BitVec 64))
(declare-const matched8 Bool)
(declare-const i8 (_ BitVec 64))
(declare-const matched9 Bool)
(declare-const i9 (_ BitVec 64))
(declare-const result5 Bool)
(declare-const inrange1__inrange64__result1 Bool)
(declare-const inrange1__inrange64__result2 Bool)
(declare-const inrange1__inrange64__result3 Bool)
(declare-const matched10 Bool)
(declare-const i10 t__ref)
(declare-const inrange1__inrange64__result4 bool__ref)
(declare-const matched11 Bool)
(declare-const i11 (_ BitVec 64))
(declare-const inrange1__inrange64__result5 Bool)
(define-fun i12 () t__ref (mk_t__ref i8))
(define-fun matched12 () bool__ref (mk_bool__ref matched8))
(define-fun i13 () t__ref (mk_t__ref i6))
(define-fun matched13 () bool__ref (mk_bool__ref matched6))
(assert (and (bvuge range_size #x0000000000000002) (bvule range_size #x000000000000FFFF)))
(assert (= (mk_bool__ref result) (mk_bool__ref matched)))
(assert (= matched1 (distinct 0 0)))
(assert (= (mk_t__ref result1) (mk_t__ref i)))
(assert (= i1 #x0000000000000000))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= temp___239 i1)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= temp___238 matched1)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= #x0000000000000000 temp___240)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= (= matched2 true) (and (bvugt i2 #x0000000000000000) (exists ((n (_ BitVec 64))) (and (and (bvule #x0000000000000000 n) (bvule n (bvsub i2 #x0000000000000001))) (= var (bvadd bottom n))))))))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (not (= matched2 true))))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (and (bvult i2 range_size) (not (= matched2 true)))))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= temp___2401 result2)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= temp___2402 i2)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (or (and (and (and (= i2 i4) (= matched3 matched4)) (and (= i5 i2) (= matched5 matched3))) (and (= var (bvadd bottom i2)) (and (= matched2 result3) (= matched3 (distinct 1 0))))) (and (and (not (= var (bvadd bottom i2))) (= matched3 matched2)) (and (and (and (= i3 i4) (= matched3 matched4)) (and (= i5 i3) (= matched5 matched3))) (and (and (= i2 result4) (= i3 (bvadd i2 #x0000000000000001))) (not (and (bvult i3 range_size) (not (= matched3 true))))))))))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= i13 (mk_t__ref i4))))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= matched13 (mk_bool__ref matched4))))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= i7 i5)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= matched7 matched5)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= i12 i13)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= matched12 matched13)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= i9 i7)))
(assert (=> (and (bvult i1 range_size) (not (= matched1 true))) (= matched9 matched7)))
(assert (=> (not (and (bvult i1 range_size) (not (= matched1 true)))) (= i1 i8)))
(assert (=> (not (and (bvult i1 range_size) (not (= matched1 true)))) (= matched1 matched8)))
(assert (=> (not (and (bvult i1 range_size) (not (= matched1 true)))) (= i9 i1)))
(assert (=> (not (and (bvult i1 range_size) (not (= matched1 true)))) (= matched9 matched1)))
(assert (= inrange1__inrange64__result1 inrange1__inrange64__result2))
(assert (= inrange1__inrange64__result3 inrange1__inrange64__result1))
(assert (= (mk_bool__ref result5) (mk_bool__ref inrange1__inrange64__result)))
(assert (= inrange1__inrange64__result1 matched8))
(assert (= inrange1__inrange64__result4 (mk_bool__ref inrange1__inrange64__result2)))
(assert (= i10 i12))
(assert (= (mk_bool__ref matched10) matched12))
(assert (= inrange1__inrange64__result5 inrange1__inrange64__result3))
(assert (= i11 i9))
(assert (= matched11 matched9))
(assert (bvule #x0000000000000000 (bvsub range_size #x0000000000000001)))
(assert (not (bvule (bvsub range_size #x0000000000000001) #xFFFFFFFFFFFFFFFF)))
(check-sat)
(exit)
