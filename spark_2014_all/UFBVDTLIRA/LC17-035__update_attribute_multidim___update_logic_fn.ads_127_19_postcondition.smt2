(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort i 0)
(declare-fun iqtint (i) Int)
(assert (forall ((i1 i)) (and (<= 1 (iqtint i1)) (<= (iqtint i1) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (i i) Bool)
(declare-const dummy1 i)
(declare-datatypes () ((i__ref (mk_i__ref (i__content i)))))
(define-fun i__ref___projection ((a i__ref)) i (i__content a))
(define-fun dynamic_invariant1 ((temp___expr_172 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool (=> (or (= temp___is_init_168 true) (<= 1 10)) (in_range2 temp___expr_172)))
(declare-sort m 0)
(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule #x00 x) (bvule x #x07)))
(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq2 (m m) Bool)
(declare-const dummy2 m)
(declare-datatypes () ((m__ref (mk_m__ref (m__content m)))))
(define-fun m__ref___projection ((a m__ref)) m (m__content a))
(define-fun dynamic_invariant2 ((temp___expr_179 (_ BitVec 8)) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool (=> (or (= temp___is_init_175 true) (bvule #x00 #x07)) (in_range3 temp___expr_179)))
(declare-sort e 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (e e) Bool)
(declare-const dummy3 e)
(declare-datatypes () ((e__ref (mk_e__ref (e__content e)))))
(define-fun e__ref___projection ((a e__ref)) e (e__content a))
(define-fun dynamic_invariant3 ((temp___expr_186 Int) (temp___is_init_182 Bool) (temp___skip_constant_183 Bool) (temp___do_toplevel_184 Bool) (temp___do_typ_inv_185 Bool)) Bool (=> (or (= temp___is_init_182 true) (<= 0 2)) (in_range4 temp___expr_186)))
(declare-sort map1 0)
(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int (_ BitVec 8) Int) integer)
(declare-fun set (map1 Int (_ BitVec 8) Int integer) map1)
(assert (forall ((m1 map1)) (forall ((i1 Int)) (forall ((j (_ BitVec 8))) (forall ((k Int)) (forall ((a integer)) (! (= (get (set m1 i1 j k a) i1 j k) a) :pattern ((set m1 i1 j k a)))))))))
(assert (forall ((m1 map1)) (forall ((i1 Int) (i2 Int)) (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8))) (forall ((k Int) (k2 Int)) (forall ((a integer)) (! (=> (not (and (= i1 i2) (and (= j j2) (= k k2)))) (= (get (set m1 i1 j k a) i2 j2 k2) (get m1 i2 j2 k2))) :pattern ((get (set m1 i1 j k a) i2 j2 k2)) :pattern ((set m1 i1 j k a) (get m1 i2 j2 k2)))))))))
(declare-fun slide (map1 Int Int (_ BitVec 8) (_ BitVec 8) Int Int) map1)
(assert (forall ((a map1)) (forall ((old_first Int) (new_first Int)) (forall ((old_first_2 (_ BitVec 8)) (new_first_2 (_ BitVec 8))) (forall ((old_first_3 Int) (new_first_3 Int)) (forall ((i1 Int)) (forall ((j (_ BitVec 8))) (forall ((k Int)) (! (= (get (slide a old_first new_first old_first_2 new_first_2 old_first_3 new_first_3) i1 j k) (get a (- i1 (- new_first old_first)) (bvsub j (bvsub new_first_2 old_first_2)) (- k (- new_first_3 old_first_3)))) :pattern ((get (slide a old_first new_first old_first_2 new_first_2 old_first_3 new_first_3) i1 j k)))))))))))
(define-fun bool_eq ((a map1) (a__first Int) (a__last Int) (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (a__first_3 Int) (a__last_3 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)) (b__first_3 Int) (b__last_3 Int)) Bool (ite (and (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (bvule a__first_2 a__last_2) (and (bvule b__first_2 b__last_2) (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2))) (bvugt b__first_2 b__last_2))) (ite (<= a__first_3 a__last_3) (and (<= b__first_3 b__last_3) (= (- a__last_3 a__first_3) (- b__last_3 b__first_3))) (< b__last_3 b__first_3))) (forall ((temp___idx_156 Int) (temp___idx_158 Int)) (forall ((temp___idx_157 (_ BitVec 8))) (=> (and (and (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (and (bvule a__first_2 temp___idx_157) (bvule temp___idx_157 a__last_2))) (and (<= a__first_3 temp___idx_158) (<= temp___idx_158 a__last_3))) (= (to_rep (get a temp___idx_156 temp___idx_157 temp___idx_158)) (to_rep (get b (+ (- b__first a__first) temp___idx_156) (bvadd (bvsub b__first_2 a__first_2) temp___idx_157) (+ (- b__first_3 a__first_3) temp___idx_158)))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_3 Int) (a__last_3 Int) (b__first Int) (b__last Int) (b__first_3 Int) (b__last_3 Int)) (forall ((a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8))) (=> (= (bool_eq b b__first b__last b__first_2 b__last_2 b__first_3 b__last_3 a a__first a__last a__first_2 a__last_2 a__first_3 a__last_3) true) (and (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (bvule a__first_2 a__last_2) (and (bvule b__first_2 b__last_2) (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2))) (bvugt b__first_2 b__last_2))) (ite (<= a__first_3 a__last_3) (and (<= b__first_3 b__last_3) (= (- a__last_3 a__first_3) (- b__last_3 b__first_3))) (< b__last_3 b__first_3))) (forall ((temp___idx_156 Int) (temp___idx_158 Int)) (forall ((temp___idx_157 (_ BitVec 8))) (=> (and (and (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (and (bvule a__first_2 temp___idx_157) (bvule temp___idx_157 a__last_2))) (and (<= a__first_3 temp___idx_158) (<= temp___idx_158 a__last_3))) (= (to_rep (get a temp___idx_156 temp___idx_157 temp___idx_158)) (to_rep (get b (+ (- b__first a__first) temp___idx_156) (bvadd (bvsub b__first_2 a__first_2) temp___idx_157) (+ (- b__first_3 a__first_3) temp___idx_158)))))))))))))
(declare-const a_3d_arr map1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun update_logic_fn__a_3d_arr__aggregate_def (Int) map1)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const y1 (_ BitVec 8))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const y2 (_ BitVec 8))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const z1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const z2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const v1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const v2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-fun temp_____aggregate_def_330 (map1 Int (_ BitVec 8) Int Int (_ BitVec 8) Int Int Int (_ BitVec 8) Int Int) map1)
(assert (= a_3d_arr (update_logic_fn__a_3d_arr__aggregate_def 1000)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 1000))
(assert (forall ((temp___164 Int)) (=> (dynamic_invariant temp___164 true true true true) (forall ((temp___165 Int) (temp___167 Int)) (forall ((temp___166 (_ BitVec 8))) (= (get (update_logic_fn__a_3d_arr__aggregate_def temp___164) temp___165 temp___166 temp___167) rliteral))))))
(assert (forall ((temp___332 map1)) (forall ((temp___333 Int) (temp___335 Int) (temp___336 Int) (temp___338 Int) (temp___339 Int) (temp___340 Int) (temp___342 Int) (temp___343 Int)) (forall ((temp___334 (_ BitVec 8)) (temp___337 (_ BitVec 8)) (temp___341 (_ BitVec 8))) (let ((temp___331 (temp_____aggregate_def_330 temp___332 temp___333 temp___334 temp___335 temp___336 temp___337 temp___338 temp___339 temp___340 temp___341 temp___342 temp___343))) (=> (and (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___333 true true true true) (dynamic_invariant2 temp___334 true true true true)) (dynamic_invariant3 temp___335 true true true true)) (dynamic_invariant1 temp___336 true true true true)) (dynamic_invariant2 temp___337 true true true true)) (dynamic_invariant3 temp___338 true true true true)) (dynamic_invariant temp___339 true true true true)) (dynamic_invariant1 temp___340 true true true true)) (dynamic_invariant2 temp___341 true true true true)) (dynamic_invariant3 temp___342 true true true true)) (dynamic_invariant temp___343 true true true true)) (forall ((temp___344 Int) (temp___346 Int)) (forall ((temp___345 (_ BitVec 8))) (ite (and (and (= temp___344 temp___340) (= temp___345 temp___341)) (= temp___346 temp___342)) (= (to_rep (get temp___331 temp___344 temp___345 temp___346)) temp___343) (ite (or (and (and (= temp___344 temp___333) (= temp___345 temp___334)) (= temp___346 temp___335)) (and (and (= temp___344 temp___336) (= temp___345 temp___337)) (= temp___346 temp___338))) (= (to_rep (get temp___331 temp___344 temp___345 temp___346)) temp___339) (= (get temp___331 temp___344 temp___345 temp___346) (get temp___332 temp___344 temp___345 temp___346))))))))))))
(assert (not true))
(check-sat)
(exit)
