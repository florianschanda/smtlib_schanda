(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun to_rep1 ((x positive)) Int (positiveqtint x))
(declare-fun of_rep1 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x positive)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__my_sets__my_rec__f positive) (rec__my_sets__my_rec__g integer)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) positive (rec__my_sets__my_rec__f a))
(define-fun us_split_fields_G__projection ((a us_split_fields)) integer (rec__my_sets__my_rec__g a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___10__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__my_sets__my_rec__f (us_split_fields1 a))) (to_rep1 (rec__my_sets__my_rec__f (us_split_fields1 b)))) (= (to_rep (rec__my_sets__my_rec__g (us_split_fields1 a))) (to_rep (rec__my_sets__my_rec__g (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const my_sets__my_rec__f__first__bit Int)
(declare-const my_sets__my_rec__f__last__bit Int)
(declare-const my_sets__my_rec__f__position Int)
(assert (<= 0 my_sets__my_rec__f__first__bit))
(assert (< my_sets__my_rec__f__first__bit my_sets__my_rec__f__last__bit))
(assert (<= 0 my_sets__my_rec__f__position))
(declare-const my_sets__my_rec__g__first__bit Int)
(declare-const my_sets__my_rec__g__last__bit Int)
(declare-const my_sets__my_rec__g__position Int)
(assert (<= 0 my_sets__my_rec__g__first__bit))
(assert (< my_sets__my_rec__g__first__bit my_sets__my_rec__g__last__bit))
(assert (<= 0 my_sets__my_rec__g__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep (my_rec__content a))
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content us_rep)))))
(define-fun element_type__ref___6__projection ((a element_type__ref)) us_rep (element_type__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep1)))))
(define-fun set__ref___4__projection ((a set__ref)) us_rep1 (set__content a))
(declare-fun contains (us_rep1 us_rep) Bool)
(declare-fun contains__function_guard (Bool us_rep1 us_rep) Bool)
(define-fun my_eq ((x us_rep) (y us_rep)) Bool (= (to_rep1 (rec__my_sets__my_rec__f (us_split_fields1 x))) (to_rep1 (rec__my_sets__my_rec__f (us_split_fields1 y)))))
(declare-fun my_eq__function_guard (Bool us_rep us_rep) Bool)
(declare-fun is_empty (us_rep1) Bool)
(declare-fun is_empty__function_guard (Bool us_rep1) Bool)
(define-fun default_initial_assumption ((temp___expr_739 us_rep1) (temp___skip_top_level_740 Bool)) Bool (=> (not (= temp___skip_top_level_740 true)) (= (is_empty temp___expr_739) true)))
(assert (forall ((container us_rep1)) (forall ((item us_rep)) (! (=> (= (distinct 1 0) true) (=> (exists ((e us_rep)) (and (= (contains container e) true) (= (my_eq e item) true))) (= (contains container item) true))) :pattern ((contains container item))))))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort hash_type 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq4 (hash_type hash_type) Bool)
(declare-const dummy4 hash_type)
(declare-datatypes () ((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type (hash_type__content a))
(declare-fun to_rep2 (hash_type) (_ BitVec 32))
(declare-fun of_rep2 ((_ BitVec 32)) hash_type)
(assert (forall ((x hash_type)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_int2 ((x hash_type)) Int (bv2nat (to_rep2 x)))
(assert (forall ((x hash_type)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (count_type count_type) Bool)
(declare-const dummy5 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep3 ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep3 (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x count_type)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__my_sets__n__set__capacity count_type) (rec__my_sets__n__set__modulus hash_type)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs)) count_type (rec__my_sets__n__set__capacity a))
(define-fun us_split_discrs___4__projection ((a us_split_discrs)) hash_type (rec__my_sets__n__set__modulus a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__my_sets__n__set us_main_type1)))))
(define-fun us_split_fields_Set__2__projection ((a us_split_fields2)) us_main_type1 (rec__my_sets__n__set a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___11__projection ((a us_rep2)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___12__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (to_rep3 (rec__my_sets__n__set__capacity (us_split_discrs1 a))) (to_rep3 (rec__my_sets__n__set__capacity (us_split_discrs1 b)))) (= (to_rep2 (rec__my_sets__n__set__modulus (us_split_discrs1 a))) (to_rep2 (rec__my_sets__n__set__modulus (us_split_discrs1 b))))) (= (us_main_eq1 (rec__my_sets__n__set (us_split_fields3 a)) (rec__my_sets__n__set (us_split_fields3 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const my_sets__n__set__capacity__first__bit Int)
(declare-const my_sets__n__set__capacity__last__bit Int)
(declare-const my_sets__n__set__capacity__position Int)
(assert (<= 0 my_sets__n__set__capacity__first__bit))
(assert (< my_sets__n__set__capacity__first__bit my_sets__n__set__capacity__last__bit))
(assert (<= 0 my_sets__n__set__capacity__position))
(declare-const my_sets__n__set__modulus__first__bit Int)
(declare-const my_sets__n__set__modulus__last__bit Int)
(declare-const my_sets__n__set__modulus__position Int)
(assert (<= 0 my_sets__n__set__modulus__first__bit))
(assert (< my_sets__n__set__modulus__first__bit my_sets__n__set__modulus__last__bit))
(assert (<= 0 my_sets__n__set__modulus__position))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((set__ref1 (mk_set__ref1 (set__content1 us_rep2)))))
(define-fun set__ref___3__projection ((a set__ref1)) us_rep2 (set__content1 a))
(declare-fun model__ (us_rep2) us_rep1)
(declare-fun model____function_guard (us_rep1 us_rep2) Bool)
(declare-fun length (us_rep2) Int)
(declare-fun length__function_guard (Int us_rep2) Bool)
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(declare-fun oeq (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)))))
(assert (forall ((container us_rep2)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(define-fun get_f ((x us_rep)) Int (to_rep1 (rec__my_sets__my_rec__f (us_split_fields1 x))))
(declare-fun get_f__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(declare-sort key_type 0)
(declare-fun key_typeqtint (key_type) Int)
(assert (forall ((i key_type)) (and (<= 1 (key_typeqtint i)) (<= (key_typeqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (key_type key_type) Bool)
(declare-const dummy7 key_type)
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___3__projection ((a key_type__ref)) key_type (key_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_1039 Int) (temp___is_init_1035 Bool) (temp___skip_constant_1036 Bool) (temp___do_toplevel_1037 Bool) (temp___do_typ_inv_1038 Bool)) Bool (=> (or (= temp___is_init_1035 true) (<= 1 2147483647)) (in_range4 temp___expr_1039)))
(declare-const container us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const key Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_190 (_ BitVec 32)) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool true)
(define-fun dynamic_invariant4 ((temp___expr_197 Int) (temp___is_init_193 Bool) (temp___skip_constant_194 Bool) (temp___do_toplevel_195 Bool) (temp___do_typ_inv_196 Bool)) Bool (=> (or (= temp___is_init_193 true) (<= 0 2147483647)) (in_range3 temp___expr_197)))
(assert (forall ((container1 us_rep2)) (! (let ((result (length container1))) (and (<= result (to_rep3 (rec__my_sets__n__set__capacity (us_split_discrs1 container1)))) (dynamic_invariant4 result true false true true))) :pattern ((length container1)))))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq8 (us_rep3 us_rep3) Bool)
(declare-const dummy8 us_rep3)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___2__projection ((a sequence__ref)) us_rep3 (sequence__content a))
(declare-fun length2 (us_rep3) Int)
(declare-fun length__function_guard2 (Int us_rep3) Bool)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep)))))
(define-fun element_type__ref___7__projection ((a element_type__ref1)) us_rep (element_type__content1 a))
(declare-fun get (us_rep3 Int) us_rep)
(declare-fun get__function_guard (us_rep us_rep3 Int) Bool)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 us_rep)))))
(define-fun element_type__ref___5__projection ((a element_type__ref2)) us_rep (element_type__content2 a))
(declare-fun find (us_rep3 us_rep) Int)
(declare-fun find__function_guard (Int us_rep3 us_rep) Bool)
(define-fun last ((container1 us_rep3)) Int (+ 0 (length2 container1)))
(declare-fun last__function_guard (Int us_rep3) Bool)
(define-fun oeq1 ((left us_rep3) (right us_rep3)) Bool (and (= (length2 left) (length2 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (bool_eq (get left n) (get right n)) true))) true false)))
(declare-fun oeq__function_guard1 (Bool us_rep3 us_rep3) Bool)
(assert (forall ((a us_rep3) (b us_rep3)) (! (= (user_eq8 a b) (oeq1 a b)) :pattern ((user_eq8 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_777 us_rep3) (temp___skip_top_level_778 Bool)) Bool (=> (not (= temp___skip_top_level_778 true)) (= (length2 temp___expr_777) 0)))
(assert (forall ((container1 us_rep3)) (forall ((item us_rep)) (! (let ((result (find container1 item))) (and (=> (< 0 result) (and (<= result (length2 container1)) (= (my_eq item (get container1 result)) true))) (dynamic_invariant4 result true false true true))) :pattern ((find container1 item))))))
(define-fun e_elements_included ((left us_rep3) (right us_rep3)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (length2 left))) (and (< 0 (find right (get left i))) (= (bool_eq (get right (find right (get left i))) (get left i)) true)))) true false))
(declare-fun e_elements_included__function_guard (Bool us_rep3 us_rep3) Bool)
(define-fun iter_has_element ((container1 us_rep3) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container1)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)
(declare-fun elements (us_rep2) us_rep3)
(declare-fun elements__function_guard (us_rep3 us_rep2) Bool)
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (extended_index extended_index) Bool)
(declare-const dummy9 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(assert (forall ((container1 us_rep2)) (! (let ((result (elements container1))) (and (and (and (and (= (length2 result) (length container1)) (forall ((temp___818 Int)) (=> (and (in_range5 temp___818) (= (iter_has_element result temp___818) true)) (= (contains (model__ container1) (get result temp___818)) true)))) (forall ((item us_rep)) (=> (= (contains (model__ container1) item) true) (and (< 0 (find result item)) (= (my_eq (get result (find result item)) item) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container1))) (= (find result (get result i)) i)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container1))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length container1))) (=> (= (my_eq (get result i) (get result j)) true) (= i j)))))))) :pattern ((elements container1)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (let ((result (oeq left right))) (and (= (= result true) (and (= (length left) (length right)) (= (e_elements_included (elements left) (elements right)) true))) (= (= result true) (and (= (e_elements_included (elements left) (elements right)) true) (= (e_elements_included (elements right) (elements left)) true))))) :pattern ((oeq left right)))))
(assert (forall ((container1 us_rep1)) (! (dynamic_invariant4 (length1 container1) true false true true) :pattern ((length1 container1)))))
(assert (forall ((container1 us_rep1)) (! (let ((result (is_empty container1))) (and (= (= result true) (forall ((item us_rep)) (not (= (contains container1 item) true)))) (= (= result true) (= (length1 container1) 0)))) :pattern ((is_empty container1)))))
(define-fun dynamic_invariant5 ((temp___expr_769 Int) (temp___is_init_765 Bool) (temp___skip_constant_766 Bool) (temp___do_toplevel_767 Bool) (temp___do_typ_inv_768 Bool)) Bool (=> (or (= temp___is_init_765 true) (<= 0 2147483647)) (in_range5 temp___expr_769)))
(assert (forall ((container1 us_rep3)) (! (let ((result (length2 container1))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant4 result true false true true))) :pattern ((length2 container1)))))
(assert true)
(assert (not true))
(check-sat)
(exit)
