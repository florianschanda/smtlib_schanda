(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort sqrt_domain 0)
(declare-fun sqrt_domainqtint (sqrt_domain) Int)
(assert (forall ((i sqrt_domain)) (and (<= 0 (sqrt_domainqtint i)) (<= (sqrt_domainqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (sqrt_domain sqrt_domain) Bool)
(declare-const dummy1 sqrt_domain)
(declare-datatypes () ((sqrt_domain__ref (mk_sqrt_domain__ref (sqrt_domain__content sqrt_domain)))))
(define-fun sqrt_domain__ref___projection ((a sqrt_domain__ref)) sqrt_domain (sqrt_domain__content a))
(define-fun dynamic_invariant ((temp___expr_235 Int) (temp___is_init_231 Bool) (temp___skip_constant_232 Bool) (temp___do_toplevel_233 Bool) (temp___do_typ_inv_234 Bool)) Bool (=> (or (= temp___is_init_231 true) (<= 0 2147483647)) (in_range2 temp___expr_235)))
(declare-sort sqrt_range 0)
(declare-fun sqrt_rangeqtint (sqrt_range) Int)
(assert (forall ((i sqrt_range)) (and (<= 0 (sqrt_rangeqtint i)) (<= (sqrt_rangeqtint i) 46340))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 46340)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (sqrt_range sqrt_range) Bool)
(declare-const dummy2 sqrt_range)
(declare-datatypes () ((sqrt_range__ref (mk_sqrt_range__ref (sqrt_range__content sqrt_range)))))
(define-fun sqrt_range__ref___projection ((a sqrt_range__ref)) sqrt_range (sqrt_range__content a))
(declare-const x Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort u64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))
(declare-fun user_eq3 (u64 u64) Bool)
(declare-const dummy3 u64)
(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))
(define-fun dynamic_invariant1 ((temp___expr_256 (_ BitVec 64)) (temp___is_init_252 Bool) (temp___skip_constant_253 Bool) (temp___do_toplevel_254 Bool) (temp___do_typ_inv_255 Bool)) Bool true)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant3 ((temp___expr_242 Int) (temp___is_init_238 Bool) (temp___skip_constant_239 Bool) (temp___do_toplevel_240 Bool) (temp___do_typ_inv_241 Bool)) Bool (=> (or (= temp___is_init_238 true) (<= 0 46340)) (in_range3 temp___expr_242)))
(declare-const ux (_ BitVec 64))
(declare-const m (_ BitVec 64))
(declare-const y (_ BitVec 64))
(declare-const b (_ BitVec 64))
(declare-const i (_ BitVec 64))
(declare-const bits (_ BitVec 64))
(declare-const left_x (_ BitVec 64))
(declare-const left_y (_ BitVec 64))
(declare-const left_ux (_ BitVec 64))
(declare-const o (_ BitVec 64))
(declare-const o1 Int)
(declare-const o2 (_ BitVec 64))
(declare-const o3 (_ BitVec 64))
(declare-const o4 (_ BitVec 64))
(declare-const o5 Int)
(declare-const o6 (_ BitVec 64))
(declare-const o7 (_ BitVec 64))
(declare-const o8 (_ BitVec 64))
(declare-const o9 Int)
(declare-const o10 (_ BitVec 64))
(declare-const o11 (_ BitVec 64))
(declare-const o12 (_ BitVec 64))
(declare-const result (_ BitVec 64))
(declare-const i1 (_ BitVec 64))
(declare-const result1 (_ BitVec 64))
(declare-const ux1 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(declare-const m1 (_ BitVec 64))
(declare-const result3 (_ BitVec 64))
(declare-const y1 (_ BitVec 64))
(declare-const result4 (_ BitVec 64))
(declare-const i2 (_ BitVec 64))
(declare-const result5 (_ BitVec 64))
(declare-const b1 (_ BitVec 64))
(declare-const result6 (_ BitVec 64))
(declare-const y2 (_ BitVec 64))
(declare-const result7 (_ BitVec 64))
(declare-const ux2 (_ BitVec 64))
(declare-const result8 (_ BitVec 64))
(declare-const y3 (_ BitVec 64))
(declare-const result9 (_ BitVec 64))
(declare-const bits1 (_ BitVec 64))
(declare-const result10 (_ BitVec 64))
(declare-const left_x1 (_ BitVec 64))
(declare-const result11 t__ref)
(declare-const left_y1 (_ BitVec 64))
(declare-const result12 t__ref)
(declare-const left_ux1 (_ BitVec 64))
(assert (in_range2 x))
(assert (= (mk_t__ref result) (mk_t__ref i)))
(assert (= i1 #x0000000000000000))
(assert (= (mk_t__ref result1) (mk_t__ref ux)))
(assert (= ux1 ((_ int2bv 64) x)))
(assert (bvule ux1 #x000000007FFFFFFF))
(assert (= (mk_t__ref result2) (mk_t__ref m)))
(assert (= m1 #x0000000040000000))
(assert (= (mk_t__ref result3) (mk_t__ref y)))
(assert (= y1 #x0000000000000000))
(assert (not (= m1 #x0000000000000000)))
(assert (= i1 result4))
(assert (= i2 (bvadd i1 #x0000000000000001)))
(assert (= (mk_t__ref result5) (mk_t__ref b)))
(assert (= b1 (bvor y1 m1)))
(assert (= y1 result6))
(assert (= y2 (bvudiv y1 #x0000000000000002)))
(assert (=> (bvuge ux1 b1) (= ux1 result7)))
(assert (=> (bvuge ux1 b1) (= ux2 (bvsub ux1 b1))))
(assert (=> (bvuge ux1 b1) (= y2 result8)))
(assert (=> (bvuge ux1 b1) (= y3 (bvor y2 m1))))
(assert (=> (not (bvuge ux1 b1)) (= y3 y2)))
(assert (=> (not (bvuge ux1 b1)) (= ux2 ux1)))
(assert (= o (bvsub #x0000000000000020 (bvmul #x0000000000000002 i2))))
(assert (= (mk_t__ref result9) (mk_t__ref bits)))
(assert (= bits1 o))
(assert (and (= o1 (bv2nat bits1)) (in_range1 (bv2nat bits1))))
(assert (= o2 ((_ int2bv 64) o1)))
(assert (= o3 (bvlshr ((_ int2bv 64) x) o2)))
(assert (= o4 o3))
(assert (= (mk_t__ref result10) (mk_t__ref left_x)))
(assert (= left_x1 o4))
(assert (and (= o5 (bv2nat bits1)) (in_range1 (bv2nat bits1))))
(assert (= o6 ((_ int2bv 64) o5)))
(assert (= o7 (bvlshr y3 o6)))
(assert (= o8 o7))
(assert (= result11 (mk_t__ref left_y)))
(assert (= left_y1 o8))
(assert (and (= o9 (bv2nat bits1)) (in_range1 (bv2nat bits1))))
(assert (= o10 ((_ int2bv 64) o9)))
(assert (= o11 (bvlshr ux2 o10)))
(assert (= o12 o11))
(assert (= result12 (mk_t__ref left_ux)))
(assert (= left_ux1 o12))
(assert (not (bvugt (bvmul (bvadd left_y1 #x0000000000000001) (bvadd left_y1 #x0000000000000001)) left_x1)))
(check-sat)
(exit)
