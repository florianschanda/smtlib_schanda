(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 16) Int) Bool)
(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(declare-fun shift_right ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun shift_right__function_guard ((_ BitVec 16) (_ BitVec 16) Int) Bool)
(declare-fun nth1 ((_ BitVec 8) Int) Bool)
(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right2 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left2 ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun to_int2 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv1 x ((_ int2bv 8) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 8))))))
(declare-fun power1 ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min1 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-fun nth2 ((_ BitVec 32) Int) Bool)
(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-fun nth3 ((_ BitVec 64) Int) Bool)
(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl3 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left4 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right4 v (bv2nat n)))))
(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv3 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth3 x (bv2nat i)) (nth_bv3 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))
(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))
(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min3 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max3 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(declare-sort modular 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 16))
(declare-fun user_eq1 (modular modular) Bool)
(declare-const dummy1 modular)
(declare-datatypes () ((modular__ref (mk_modular__ref (modular__content modular)))))
(define-fun modular__ref___4__projection ((a modular__ref)) modular (modular__content a))
(define-fun dynamic_invariant1 ((temp___expr_311 (_ BitVec 16)) (temp___is_init_307 Bool) (temp___skip_constant_308 Bool) (temp___do_toplevel_309 Bool) (temp___do_typ_inv_310 Bool)) Bool true)
(assert (forall ((v (_ BitVec 16))) (forall ((amount Int)) (! (=> (and (dynamic_invariant1 v true true true true) (dynamic_invariant amount true true true true)) (dynamic_invariant1 (shift_right v amount) true false true true)) :pattern ((shift_right v amount))))))
(assert (forall ((v (_ BitVec 16))) (forall ((amount Int)) (! (=> (and (dynamic_invariant1 v true true true true) (dynamic_invariant amount true true true true)) (= (shift_right v amount) (ite (and (<= 1 16) (<= 16 8)) ((_ zero_extend 8) (ite (< amount 8) (bvlshr ((_ extract 7 0) v) ((_ int2bv 8) amount)) #x00)) (ite (and (<= 9 16) (<= 16 16)) (ite (< amount 16) (bvlshr v ((_ int2bv 16) amount)) #x0000) (ite (and (<= 17 16) (<= 16 32)) ((_ extract 15 0) (bvlshr ((_ zero_extend 16) v) ((_ int2bv 32) amount))) ((_ extract 15 0) (bvlshr ((_ zero_extend 48) v) ((_ int2bv 64) amount)))))))) :pattern ((shift_right v amount))))))
(declare-fun shift_left ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun shift_left__function_guard ((_ BitVec 16) (_ BitVec 16) Int) Bool)
(assert (forall ((v (_ BitVec 16))) (forall ((amount Int)) (! (=> (and (dynamic_invariant1 v true true true true) (dynamic_invariant amount true true true true)) (dynamic_invariant1 (shift_left v amount) true false true true)) :pattern ((shift_left v amount))))))
(assert (forall ((v (_ BitVec 16))) (forall ((amount Int)) (! (=> (and (dynamic_invariant1 v true true true true) (dynamic_invariant amount true true true true)) (= (shift_left v amount) (ite (and (<= 1 16) (<= 16 8)) ((_ zero_extend 8) (ite (< amount 8) (bvshl ((_ extract 7 0) v) ((_ int2bv 8) amount)) #x00)) (ite (and (<= 9 16) (<= 16 16)) (ite (< amount 16) (bvshl v ((_ int2bv 16) amount)) #x0000) (ite (and (<= 17 16) (<= 16 32)) ((_ extract 15 0) (bvurem (bvshl ((_ zero_extend 16) v) ((_ int2bv 32) amount)) ((_ int2bv 32) 65536))) ((_ extract 15 0) (bvurem (bvshl ((_ zero_extend 48) v) ((_ int2bv 64) amount)) ((_ int2bv 64) 65536)))))))) :pattern ((shift_left v amount))))))
(declare-fun make_mask (Int) (_ BitVec 16))
(declare-fun make_mask__function_guard ((_ BitVec 16) Int) Bool)
(declare-sort mask_size 0)
(declare-fun mask_sizeqtint (mask_size) Int)
(assert (forall ((i mask_size)) (and (<= 1 (mask_sizeqtint i)) (<= (mask_sizeqtint i) 16))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 16)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (mask_size mask_size) Bool)
(declare-const dummy2 mask_size)
(declare-datatypes () ((mask_size__ref (mk_mask_size__ref (mask_size__content mask_size)))))
(define-fun mask_size__ref___3__projection ((a mask_size__ref)) mask_size (mask_size__content a))
(define-fun dynamic_invariant2 ((temp___expr_325 Int) (temp___is_init_321 Bool) (temp___skip_constant_322 Bool) (temp___do_toplevel_323 Bool) (temp___do_typ_inv_324 Bool)) Bool (=> (or (= temp___is_init_321 true) (<= 1 16)) (in_range1 temp___expr_325)))
(assert (forall ((num_bits Int)) (! (=> (dynamic_invariant2 num_bits true true true true) (dynamic_invariant1 (make_mask num_bits) true false true true)) :pattern ((make_mask num_bits)))))
(assert (forall ((num_bits Int)) (! (=> (dynamic_invariant2 num_bits true true true true) (= (make_mask num_bits) (shift_right #xFFFF (- 16 num_bits)))) :pattern ((make_mask num_bits)))))
(declare-sort bit_position 0)
(declare-fun bit_positionqtint (bit_position) Int)
(assert (forall ((i bit_position)) (and (<= 0 (bit_positionqtint i)) (<= (bit_positionqtint i) 15))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 15)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (bit_position bit_position) Bool)
(declare-const dummy3 bit_position)
(declare-datatypes () ((bit_position__ref (mk_bit_position__ref (bit_position__content bit_position)))))
(define-fun bit_position__ref___3__projection ((a bit_position__ref)) bit_position (bit_position__content a))
(define-fun dynamic_invariant3 ((temp___expr_318 Int) (temp___is_init_314 Bool) (temp___skip_constant_315 Bool) (temp___do_toplevel_316 Bool) (temp___do_typ_inv_317 Bool)) Bool (=> (or (= temp___is_init_314 true) (<= 0 15)) (in_range2 temp___expr_318)))
(declare-const value (_ BitVec 16))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const from Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const to__ Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const len Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const mask (_ BitVec 16))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(assert (= len (+ (- to__ from) 1)))
(assert (= mask (make_mask len)))
(declare-const result__ (_ BitVec 16))
(declare-const bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result (_ BitVec 16))
(declare-const bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__len__assume Int)
(declare-const o Int)
(declare-const bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__mask__assume (_ BitVec 16))
(declare-const o1 (_ BitVec 16))
(declare-const o2 (_ BitVec 16))
(declare-const result (_ BitVec 16))
(declare-const result__1 (_ BitVec 16))
(declare-const result1 (_ BitVec 16))
(declare-const bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result1 (_ BitVec 16))
(declare-const bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result2 (_ BitVec 16))
(declare-const bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result3 (_ BitVec 16))
(declare-const result__2 (_ BitVec 16))
(declare-const bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result4 (_ BitVec 16))
(declare-const result__3 (_ BitVec 16))
(declare-const bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result5 (_ BitVec 16))
(declare-const result2 (_ BitVec 16))
(assert (in_range2 from))
(assert (in_range2 to__))
(assert (<= from to__))
(assert (and (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__len__assume (+ (- to__ from) 1)) (in_range (+ (- to__ from) 1))))
(assert (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__len__assume len))
(assert (in_range len))
(assert (and (= o len) (in_range1 len)))
(assert (and (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__mask__assume (make_mask o)) (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__mask__assume (shift_right #xFFFF (- 16 o)))))
(assert (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__mask__assume mask))
(assert (and (= o1 (shift_right value from)) (= o1 (ite (and (<= 1 16) (<= 16 8)) ((_ zero_extend 8) (ite (< from 8) (bvlshr ((_ extract 7 0) value) ((_ int2bv 8) from)) #x00)) (ite (and (<= 9 16) (<= 16 16)) (ite (< from 16) (bvlshr value ((_ int2bv 16) from)) #x0000) (ite (and (<= 17 16) (<= 16 32)) ((_ extract 15 0) (bvlshr ((_ zero_extend 16) value) ((_ int2bv 32) from))) ((_ extract 15 0) (bvlshr ((_ zero_extend 48) value) ((_ int2bv 64) from)))))))))
(assert (= o2 (bvand o1 mask)))
(assert (= (mk_t__ref result) (mk_t__ref result__)))
(assert (= result__1 o2))
(assert (bvule result__1 mask))
(assert (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result1 bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result2))
(assert (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result3 bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result1))
(assert (= (mk_t__ref result1) (mk_t__ref bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result)))
(assert (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result1 result__1))
(assert (= (mk_t__ref bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result4) (mk_t__ref bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result2)))
(assert (= result__1 result__2))
(assert (= bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result5 bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result3))
(assert (= result__3 result__1))
(assert (= result2 bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result4))
(assert (not (bvule bits_manipulation_unsigned__unsigned_16__functions__extract_bits_inline_always__result4 (make_mask (+ (- to__ from) 1)))))
(check-sat)
(exit)
