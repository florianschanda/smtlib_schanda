(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort count_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (count_type count_type) Bool)
(declare-const dummy count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(declare-fun to_rep (count_type) Int)
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort element_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (element_type element_type) Bool)
(declare-const dummy1 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant ((temp___expr_319 Int) (temp___is_init_316 Bool) (temp___skip_constant_317 Bool) (temp___do_toplevel_318 Bool)) Bool (=> (or (= temp___is_init_316 true) (<= 1 100)) (in_range2 temp___expr_319)))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort hash_type 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))
(declare-fun user_eq2 (hash_type hash_type) Bool)
(declare-const dummy2 hash_type)
(declare-datatypes () ((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type (hash_type__content a))
(declare-fun to_rep1 (hash_type) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) hash_type)
(assert (forall ((x hash_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int3 ((x hash_type)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x hash_type)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__p__my_sets__set__capacity count_type) (rec__p__my_sets__set__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__p__my_sets__set__capacity a))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) hash_type (rec__p__my_sets__set__modulus a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__p__my_sets__set us_main_type)))))
(define-fun us_split_fields_Set__projection ((a us_split_fields)) us_main_type (rec__p__my_sets__set a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__p__my_sets__set__capacity (us_split_discrs1 a))) (to_rep (rec__p__my_sets__set__capacity (us_split_discrs1 b)))) (= (to_rep1 (rec__p__my_sets__set__modulus (us_split_discrs1 a))) (to_rep1 (rec__p__my_sets__set__modulus (us_split_discrs1 b))))) (= (us_main_eq (rec__p__my_sets__set (us_split_fields1 a)) (rec__p__my_sets__set (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const p__my_sets__set__capacity__first__bit Int)
(declare-const p__my_sets__set__capacity__last__bit Int)
(declare-const p__my_sets__set__capacity__position Int)
(assert (<= 0 p__my_sets__set__capacity__first__bit))
(assert (< p__my_sets__set__capacity__first__bit p__my_sets__set__capacity__last__bit))
(assert (<= 0 p__my_sets__set__capacity__position))
(declare-const p__my_sets__set__modulus__first__bit Int)
(declare-const p__my_sets__set__modulus__last__bit Int)
(declare-const p__my_sets__set__modulus__position Int)
(assert (<= 0 p__my_sets__set__modulus__first__bit))
(assert (< p__my_sets__set__modulus__first__bit p__my_sets__set__modulus__last__bit))
(assert (<= 0 p__my_sets__set__modulus__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep)))))
(define-fun set__ref___projection ((a set__ref)) us_rep (set__content a))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(declare-fun oeq1 (Int us_rep us_rep) Bool)
(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__p__my_sets__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type (rec__p__my_sets__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (= (to_rep (rec__p__my_sets__cursor__node (us_split_fields3 a))) (to_rep (rec__p__my_sets__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const p__my_sets__cursor__node__first__bit Int)
(declare-const p__my_sets__cursor__node__last__bit Int)
(declare-const p__my_sets__cursor__node__position Int)
(assert (<= 0 p__my_sets__cursor__node__first__bit))
(assert (< p__my_sets__cursor__node__first__bit p__my_sets__cursor__node__last__bit))
(assert (<= 0 p__my_sets__cursor__node__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(declare-fun length1 (Int us_rep) Int)
(declare-fun length__function_guard1 (Int Int us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_173 Int) (temp___is_init_170 Bool) (temp___skip_constant_171 Bool) (temp___do_toplevel_172 Bool)) Bool (=> (or (= temp___is_init_170 true) (<= 0 2147483647)) (in_range1 temp___expr_173)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__p__my_sets__set__capacity (us_split_discrs1 container)))) (dynamic_invariant1 result true false true))) :pattern ((length container)))))
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (! (dynamic_invariant1 (length1 attr__tag container) true false true) :pattern ((length1 attr__tag container))))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 (us_rep2 us_rep2) Bool)
(declare-const dummy5 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun get (us_rep2 Int) Int)
(declare-fun get__function_guard (Int us_rep2 Int) Bool)
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq6 (us_rep3 us_rep3) Bool)
(declare-const dummy6 us_rep3)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep3)))))
(define-fun map__ref___projection ((a map__ref)) us_rep3 (map__content a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep1 (key_type__content a))
(declare-fun get1 (us_rep3 us_rep1) Int)
(declare-fun get__function_guard1 (Int us_rep3 us_rep1) Bool)
(declare-fun elements (us_rep) us_rep2)
(declare-fun elements__function_guard (us_rep2 us_rep) Bool)
(declare-fun positions (us_rep) us_rep3)
(declare-fun positions__function_guard (us_rep3 us_rep) Bool)
(define-fun element ((container us_rep) (position us_rep1)) Int (get (elements container) (get1 (positions container) position)))
(declare-fun element__function_guard (Int us_rep us_rep1) Bool)
(declare-fun element1 (Int us_rep us_rep1) Int)
(declare-fun element__function_guard1 (Int Int us_rep us_rep1) Bool)
(declare-sort element_type1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (element_type1 element_type1) Bool)
(declare-const dummy7 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant2 ((temp___expr_325 Int) (temp___is_init_322 Bool) (temp___skip_constant_323 Bool) (temp___do_toplevel_324 Bool)) Bool (=> (or (= temp___is_init_322 true) (<= 1 100)) (in_range3 temp___expr_325)))
(declare-fun has_key (us_rep3 us_rep1) Bool)
(declare-fun has_key__function_guard (Bool us_rep3 us_rep1) Bool)
(define-fun has_element ((container us_rep) (position us_rep1)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)
(declare-fun has_element1 (Int us_rep us_rep1) Bool)
(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)
(assert (forall ((attr__tag Int)) (forall ((container us_rep)) (forall ((position us_rep1)) (! (dynamic_invariant2 (element1 attr__tag container position) true false true) :pattern ((element1 attr__tag container position)))))))
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-sort us_rep4 0)
(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-fun user_eq8 (us_rep4 us_rep4) Bool)
(declare-const dummy8 us_rep4)
(declare-datatypes () ((set__ref1 (mk_set__ref1 (set__content1 us_rep4)))))
(define-fun set__ref___2__projection ((a set__ref1)) us_rep4 (set__content1 a))
(declare-fun contains (us_rep4 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep4 Int) Bool)
(declare-fun model__ (us_rep) us_rep4)
(declare-fun model____function_guard (us_rep4 us_rep) Bool)
(define-fun contains1 ((container us_rep) (item Int)) Bool (contains (model__ container) item))
(declare-fun contains__function_guard1 (Bool us_rep Int) Bool)
(declare-fun contains2 (Int us_rep Int) Bool)
(declare-fun contains__function_guard2 (Bool Int us_rep Int) Bool)
(assert true)
(declare-fun find (us_rep Int) us_rep1)
(declare-fun find__function_guard (us_rep1 us_rep Int) Bool)
(declare-fun find1 (Int us_rep Int) us_rep1)
(declare-fun find__function_guard1 (us_rep1 Int us_rep Int) Bool)
(declare-fun my_eq (Int Int) Bool)
(declare-fun my_eq__function_guard (Bool Int Int) Bool)
(declare-const no_element us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun find2 (us_rep2 Int) Int)
(declare-fun find__function_guard2 (Int us_rep2 Int) Bool)
(assert (forall ((container us_rep)) (forall ((item Int)) (! (=> (dynamic_invariant2 item true true true) (let ((result (find container item))) (ite (not (= (contains (model__ container) item) true)) (= (bool_eq1 result no_element) true) (and (and (= (has_key (positions container) result) true) (= (get1 (positions container) result) (find2 (elements container) item))) (= (my_eq (element container result) item) true))))) :pattern ((find container item))))))
(assert true)
(declare-fun ole (us_rep4 us_rep4) Bool)
(declare-fun ole__function_guard (Bool us_rep4 us_rep4) Bool)
(declare-fun included_except (us_rep4 us_rep4 Int) Bool)
(declare-fun included_except__function_guard (Bool us_rep4 us_rep4 Int) Bool)
(declare-fun keys_included_except (us_rep3 us_rep3 us_rep1) Bool)
(declare-fun keys_included_except__function_guard (Bool us_rep3 us_rep3 us_rep1) Bool)
(declare-fun mapping_preserved (us_rep2 us_rep2 us_rep3 us_rep3) Bool)
(declare-fun mapping_preserved__function_guard (Bool us_rep2 us_rep2 us_rep3 us_rep3) Bool)
(declare-fun insert__2__specific_post (Int us_split_fields us_split_discrs Int us_split_fields) Bool)
(declare-fun oeq2 (us_rep4 us_rep4) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep4 us_rep4) Bool)
(declare-fun length2 (us_rep2) Int)
(declare-fun length__function_guard2 (Int us_rep2) Bool)
(define-fun last ((container us_rep2)) Int (+ 0 (length2 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(define-fun equal_except ((left us_rep2) (right us_rep2) (position Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (last left))) (=> (not (= i position)) (= (get left i) (get right i))))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(declare-fun oeq3 (us_rep3 us_rep3) Bool)
(declare-fun oeq__function_guard3 (Bool us_rep3 us_rep3) Bool)
(declare-fun replace__specific_post (Int us_split_fields us_split_discrs Int us_split_fields) Bool)
(declare-const l__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(assert true)
(assert (forall ((i1 Int) (i2 Int)) (! (= (= (my_eq i1 i2) true) (= i1 i2)) :pattern ((my_eq i1 i2)))))
(define-fun dynamic_invariant3 ((temp___expr_167 (_ BitVec 32)) (temp___is_init_164 Bool) (temp___skip_constant_165 Bool) (temp___do_toplevel_166 Bool)) Bool true)
(assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))
(define-fun oeq4 ((left us_rep2) (right us_rep2)) Bool (and (= (length2 left) (length2 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard4 (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq5 a b) (oeq4 a b)) :pattern ((user_eq5 a b)))))
(define-fun default_initial_assumption ((temp___expr_392 us_rep2) (temp___skip_top_level_393 Bool)) Bool (=> (not (= temp___skip_top_level_393 true)) (= (length2 temp___expr_392) 0)))
(assert (forall ((container us_rep2)) (forall ((item Int)) (! (=> (dynamic_invariant2 item true true true) (let ((result (find2 container item))) (and (=> (< 0 result) (and (<= result (length2 container)) (= (my_eq item (get container result)) true))) (dynamic_invariant1 result true false true)))) :pattern ((find2 container item))))))
(define-fun e_elements_included ((left us_rep2) (right us_rep2)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (length2 left))) (and (< 0 (find2 right (get left i))) (= (get right (find2 right (get left i))) (get left i))))) true false))
(declare-fun e_elements_included__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-fun length3 (us_rep3) Int)
(declare-fun length__function_guard3 (Int us_rep3) Bool)
(declare-fun is_empty (us_rep3) Bool)
(declare-fun is_empty__function_guard (Bool us_rep3) Bool)
(define-fun default_initial_assumption1 ((temp___expr_412 us_rep3) (temp___skip_top_level_413 Bool)) Bool (=> (not (= temp___skip_top_level_413 true)) (and (= (is_empty temp___expr_412) true) (= (length3 temp___expr_412) 0))))
(declare-fun keys_included (us_rep3 us_rep3) Bool)
(declare-fun keys_included__function_guard (Bool us_rep3 us_rep3) Bool)
(assert (forall ((e_left us_rep2) (e_right us_rep2)) (forall ((p_left us_rep3) (p_right us_rep3)) (! (=> (= (mapping_preserved e_left e_right p_left p_right) true) (and (and (= (keys_included p_left p_right) true) (= (e_elements_included e_left e_right) true)) (forall ((c us_rep1)) (=> (= (has_key p_left c) true) (= (get e_left (get1 p_left c)) (get e_right (get1 p_right c))))))) :pattern ((mapping_preserved e_left e_right p_left p_right))))))
(declare-fun is_empty1 (us_rep4) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)
(define-fun default_initial_assumption2 ((temp___expr_361 us_rep4) (temp___skip_top_level_362 Bool)) Bool (=> (not (= temp___skip_top_level_362 true)) (= (is_empty1 temp___expr_361) true)))
(declare-fun length4 (us_rep4) Int)
(declare-fun length__function_guard4 (Int us_rep4) Bool)
(assert (forall ((container us_rep)) (! (= (length4 (model__ container)) (length container)) :pattern ((model__ container)))))
(declare-sort element_type2 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq9 (element_type2 element_type2) Bool)
(declare-const dummy9 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(declare-sort extended_index 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq10 (extended_index extended_index) Bool)
(declare-const dummy10 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun iter_has_element ((container us_rep2) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep2 Int) Bool)
(assert (forall ((container us_rep)) (! (let ((result (elements container))) (and (and (and (and (= (length2 result) (length container)) (forall ((temp___429 Int)) (=> (and (in_range5 temp___429) (= (iter_has_element result temp___429) true)) (= (contains (model__ container) (get result temp___429)) true)))) (forall ((item Int)) (=> (and (in_range4 item) (= (contains (model__ container) item) true)) (and (< 0 (find2 result item)) (= (my_eq (get result (find2 result item)) item) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container))) (= (find2 result (get result i)) i)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length container))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length container))) (=> (= (my_eq (get result i) (get result j)) true) (= i j)))))))) :pattern ((elements container)))))
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep1)) (=> (= (has_key result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length container))) (forall ((j us_rep1)) (=> (= (has_key result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq1 i j) true))))))))) :pattern ((positions container)))))
(assert (forall ((left us_rep) (right us_rep)) (! (let ((result (oeq left right))) (and (= (= result true) (and (= (length left) (length right)) (= (e_elements_included (elements left) (elements right)) true))) (= (= result true) (and (= (e_elements_included (elements left) (elements right)) true) (= (e_elements_included (elements right) (elements left)) true))))) :pattern ((oeq left right)))))
(assert true)
(assert true)
(define-fun dynamic_invariant4 ((temp___expr_354 Int) (temp___is_init_351 Bool) (temp___skip_constant_352 Bool) (temp___do_toplevel_353 Bool)) Bool (=> (or (= temp___is_init_351 true) (<= 1 100)) (in_range4 temp___expr_354)))
(assert (forall ((container us_rep4)) (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true) (=> (= (of_int 1) true) (=> (exists ((e1 Int)) (and (and (in_range4 e1) (= (contains container e1) true)) (= (my_eq e1 item) true))) (= (contains container item) true)))) :pattern ((contains container item))))))
(assert (forall ((container us_rep4)) (! (dynamic_invariant1 (length4 container) true false true) :pattern ((length4 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (ole left right) true) (forall ((item Int)) (=> (and (in_range4 item) (= (contains left item) true)) (= (contains right item) true)))) :pattern ((ole left right)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (= (= (oeq2 left right) true) (and (= (ole left right) true) (= (ole right left) true))) :pattern ((oeq2 left right)))))
(assert (forall ((container us_rep4)) (! (let ((result (is_empty1 container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range4 item) (= (contains container item) true))))) (= (= result true) (= (length4 container) 0)))) :pattern ((is_empty1 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (forall ((item Int)) (! (=> (dynamic_invariant4 item true true true) (= (= (included_except left right item) true) (forall ((e1 Int)) (=> (and (in_range4 e1) (= (contains left e1) true)) (or (= (contains right e1) true) (= (my_eq e1 item) true)))))) :pattern ((included_except left right item))))))
(define-fun dynamic_invariant5 ((temp___expr_385 Int) (temp___is_init_382 Bool) (temp___skip_constant_383 Bool) (temp___do_toplevel_384 Bool)) Bool (=> (or (= temp___is_init_382 true) (<= 0 2147483647)) (in_range5 temp___expr_385)))
(assert (forall ((container us_rep2)) (! (let ((result (length2 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false true))) :pattern ((length2 container)))))
(declare-sort element_type3 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (element_type3 element_type3) Bool)
(declare-const dummy11 element_type3)
(declare-datatypes () ((element_type__ref3 (mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref___4__projection ((a element_type__ref3)) element_type3 (element_type__content3 a))
(define-fun dynamic_invariant6 ((temp___expr_379 Int) (temp___is_init_376 Bool) (temp___skip_constant_377 Bool) (temp___do_toplevel_378 Bool)) Bool (=> (or (= temp___is_init_376 true) (<= 1 100)) (in_range6 temp___expr_379)))
(assert (forall ((container us_rep2)) (forall ((position Int)) (! (=> (and (dynamic_invariant5 position true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant6 (get container position) true false true)) :pattern ((get container position))))))
(assert (forall ((container us_rep3)) (forall ((key us_rep1)) (! (=> (= (of_int 0) true) (=> (exists ((k us_rep1)) (and (= (has_key container k) true) (= (bool_eq1 k key) true))) (= (has_key container key) true))) :pattern ((has_key container key))))))
(declare-sort element_type4 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (element_type4 element_type4) Bool)
(declare-const dummy12 element_type4)
(declare-datatypes () ((element_type__ref4 (mk_element_type__ref4 (element_type__content4 element_type4)))))
(define-fun element_type__ref___5__projection ((a element_type__ref4)) element_type4 (element_type__content4 a))
(define-fun dynamic_invariant7 ((temp___expr_405 Int) (temp___is_init_402 Bool) (temp___skip_constant_403 Bool) (temp___do_toplevel_404 Bool)) Bool (=> (or (= temp___is_init_402 true) (<= 1 2147483647)) (in_range7 temp___expr_405)))
(declare-fun witness (us_rep3 us_rep1) Int)
(declare-fun witness__function_guard (Int us_rep3 us_rep1) Bool)
(declare-fun w_get (us_rep3 Int) Int)
(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)
(assert (forall ((container us_rep3)) (forall ((key us_rep1)) (! (=> (= (has_key container key) true) (let ((result (get1 container key))) (and (=> (= (of_int 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep1)) (=> (= (has_key container k) true) (= (= (bool_eq1 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant7 result true false true)))) :pattern ((get1 container key))))))
(assert (forall ((container us_rep3)) (! (dynamic_invariant1 (length3 container) true false true) :pattern ((length3 container)))))
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (oeq3 left right) true) (and (forall ((key us_rep1)) (=> (= (has_key left key) true) (and (= (has_key right key) true) (= (get1 right key) (get1 left key))))) (forall ((key us_rep1)) (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern ((oeq3 left right)))))
(assert (forall ((container us_rep3)) (! (= (= (is_empty container) true) (forall ((key us_rep1)) (not (= (has_key container key) true)))) :pattern ((is_empty container)))))
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (keys_included left right) true) (forall ((key us_rep1)) (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern ((keys_included left right)))))
(assert (forall ((left us_rep3) (right us_rep3)) (forall ((new_key us_rep1)) (! (= (= (keys_included_except left right new_key) true) (forall ((key us_rep1)) (=> (= (has_key left key) true) (=> (not (= (bool_eq1 key new_key) true)) (= (has_key right key) true))))) :pattern ((keys_included_except left right new_key))))))
(declare-fun has_witness (us_rep3 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)
(assert true)
(assert (forall ((container us_rep3)) (forall ((key us_rep1)) (! (=> (= (has_key container key) true) (let ((result (witness container key))) (and (= (has_witness container result) true) (dynamic_invariant1 result true false true)))) :pattern ((witness container key))))))
(assert (forall ((container us_rep3)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant1 witness1 true true true) (= (has_witness container witness1) true)) (dynamic_invariant7 (w_get container witness1) true false true)) :pattern ((w_get container witness1))))))
(declare-const l__split_fields us_main_type)
(declare-const result Bool)
(declare-const l__split_fields1 us_main_type)
(declare-const l__split_fields2 us_main_type)
(declare-const l__split_fields3 us_main_type)
(declare-const l__split_fields4 us_main_type)
(define-fun l__split_fields5 () us_split_fields (mk___split_fields l__split_fields2))
(define-fun l__split_fields6 () us_split_fields (mk___split_fields l__split_fields1))
(assert (in_range2 e))
(assert (or (= (contains (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) e) true) (< (length (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (to_rep (rec__p__my_sets__set__capacity l__split_discrs)))))
(assert (and (= result (contains (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) e)) (= (= result true) (= (contains (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) e) true))))
(assert (=> (= result true) (and (and (and (and (= (oeq2 (model__ (mk___rep l__split_discrs l__split_fields6)) (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields)))) true) (= (contains (model__ (mk___rep l__split_discrs l__split_fields6)) e) true)) (= (oeq3 (positions (mk___rep l__split_discrs l__split_fields6)) (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields)))) true)) (= (element (mk___rep l__split_discrs l__split_fields6) (find (mk___rep l__split_discrs l__split_fields6) e)) e)) (= (equal_except (elements (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (elements (mk___rep l__split_discrs l__split_fields6)) (get1 (positions (mk___rep l__split_discrs l__split_fields6)) (find (mk___rep l__split_discrs l__split_fields6) e))) true))))
(assert (=> (not (= result true)) (and (and (and (and (and (and (= (length (mk___rep l__split_discrs l__split_fields5)) (+ (length (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 1)) (= (contains (model__ (mk___rep l__split_discrs l__split_fields5)) e) true)) (= (element (mk___rep l__split_discrs l__split_fields5) (find (mk___rep l__split_discrs l__split_fields5) e)) e)) (= (ole (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (model__ (mk___rep l__split_discrs l__split_fields5))) true)) (= (included_except (model__ (mk___rep l__split_discrs l__split_fields5)) (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields))) e) true)) (= (mapping_preserved (elements (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (elements (mk___rep l__split_discrs l__split_fields5)) (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (positions (mk___rep l__split_discrs l__split_fields5))) true)) (= (keys_included_except (positions (mk___rep l__split_discrs l__split_fields5)) (positions (mk___rep l__split_discrs (mk___split_fields l__split_fields))) (find (mk___rep l__split_discrs l__split_fields5) e)) true))))
(assert (=> (not (= result true)) (= l__split_fields6 l__split_fields5)))
(assert (= l__split_fields3 l__split_fields1))
(assert (= (mk___split_fields l__split_fields4) l__split_fields6))
(assert (not (= (element (mk___rep l__split_discrs (mk___split_fields l__split_fields3)) (find (mk___rep l__split_discrs (mk___split_fields l__split_fields3)) e)) e)))
(check-sat)
(exit)
