(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort unsigned64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned64 unsigned64) Bool)
(declare-const dummy unsigned64)
(declare-datatypes () ((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 (unsigned64__content a))
(define-fun dynamic_invariant ((temp___expr_235 (_ BitVec 64)) (temp___is_init_231 Bool) (temp___skip_constant_232 Bool) (temp___do_toplevel_233 Bool) (temp___do_typ_inv_234 Bool)) Bool true)
(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64)) (range_size (_ BitVec 64))) (! (=> (and (and (dynamic_invariant var true true true true) (dynamic_invariant bottom true true true true)) (dynamic_invariant range_size true true true true)) (= (= (inrange64 var bottom range_size) true) (exists ((n (_ BitVec 64))) (and (and (bvule #x0000000000000000 n) (bvule n range_size)) (= var (bvadd bottom n)))))) :pattern ((inrange64 var bottom range_size)))))
(declare-const var1 (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const var1_range_size (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const var2 (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const var2_range_size (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const res Bool)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort unsigned_64 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))
(declare-fun user_eq1 (unsigned_64 unsigned_64) Bool)
(declare-const dummy1 unsigned_64)
(declare-datatypes () ((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64 (unsigned_64__content a))
(declare-fun to_rep (unsigned_64) (_ BitVec 64))
(declare-fun of_rep ((_ BitVec 64)) unsigned_64)
(assert (forall ((x unsigned_64)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int2 ((x unsigned_64)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned_64)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))
(define-fun dynamic_property ((first_int (_ BitVec 64)) (last_int (_ BitVec 64)) (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))
(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)
(declare-const dummy2 unsigned_64)
(declare-datatypes () ((t101b__ref (mk_t101b__ref (t101b__content unsigned_64)))))
(define-fun t101b__ref___projection ((a t101b__ref)) unsigned_64 (t101b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))
(define-fun dynamic_property1 ((first_int (_ BitVec 64)) (last_int (_ BitVec 64)) (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))
(declare-fun user_eq3 (unsigned_64 unsigned_64) Bool)
(declare-const dummy3 unsigned_64)
(declare-datatypes () ((t122b__ref (mk_t122b__ref (t122b__content unsigned_64)))))
(define-fun t122b__ref___projection ((a t122b__ref)) unsigned_64 (t122b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))
(define-fun dynamic_property2 ((first_int (_ BitVec 64)) (last_int (_ BitVec 64)) (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))
(define-fun dynamic_property_int2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))
(declare-fun user_eq4 (unsigned_64 unsigned_64) Bool)
(declare-const dummy4 unsigned_64)
(declare-datatypes () ((t131b__ref (mk_t131b__ref (t131b__content unsigned_64)))))
(define-fun t131b__ref___projection ((a t131b__ref)) unsigned_64 (t131b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 64)) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool) (temp___do_typ_inv_213 Bool)) Bool true)
(declare-const n1 (_ BitVec 64))
(declare-const x86__rangesintersect__B100b__res__assume Bool)
(declare-const temp___239 (_ BitVec 64))
(declare-const temp___238 (_ BitVec 64))
(declare-const o (_ BitVec 64))
(declare-const result t__ref)
(declare-const n11 (_ BitVec 64))
(declare-const n12 (_ BitVec 64))
(declare-const n2 (_ BitVec 64))
(declare-const n (_ BitVec 64))
(declare-const result1 t__ref)
(declare-const n21 (_ BitVec 64))
(declare-const result2 t__ref)
(declare-const n3 (_ BitVec 64))
(declare-const n22 (_ BitVec 64))
(declare-const n4 (_ BitVec 64))
(declare-const n23 t__ref)
(declare-const n5 t__ref)
(declare-const n24 (_ BitVec 64))
(declare-const n6 (_ BitVec 64))
(declare-const n25 t__ref)
(declare-const n7 t__ref)
(declare-const n26 (_ BitVec 64))
(declare-const n8 (_ BitVec 64))
(assert (bvule var1_range_size (bvsub #xFFFFFFFFFFFFFFFF var2_range_size)))
(assert (and (= x86__rangesintersect__B100b__res__assume (inrange64 var1 (bvsub var2 var1_range_size) (bvadd var1_range_size var2_range_size))) (= (= x86__rangesintersect__B100b__res__assume true) (exists ((n9 (_ BitVec 64))) (and (and (bvule #x0000000000000000 n9) (bvule n9 (bvadd var1_range_size var2_range_size))) (= var1 (bvadd (bvsub var2 var1_range_size) n9)))))))
(assert (= x86__rangesintersect__B100b__res__assume res))
(assert (not (= res true)))
(assert (= result (mk_t__ref n1)))
(assert (= n11 #x0000000000000000))
(assert (bvule #x0000000000000000 n11))
(assert (bvule n11 var1_range_size))
(assert (=> (not (= n12 #x0000000000000000)) (forall ((i (_ BitVec 64))) (=> (and (bvule #x0000000000000000 i) (bvule i (bvsub n12 #x0000000000000001))) (forall ((j (_ BitVec 64))) (=> (and (bvule #x0000000000000000 j) (bvule j var2_range_size)) (not (= (bvadd var1 i) (bvadd var2 j)))))))))
(assert (and (=> (bvule #x0000000000000000 var1_range_size) (dynamic_property1 #x0000000000000000 var1_range_size n12)) (and (bvule #x0000000000000000 n12) (bvule n12 var1_range_size))))
(assert (= result1 (mk_t__ref n2)))
(assert (= n21 #x0000000000000000))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= temp___239 n)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= temp___238 n21)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= o (bvadd n21 (bvsub var1_range_size n12)))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= result2 (mk_t__ref n))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n3 o)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (and (bvule #x0000000000000000 n3) (bvule n3 (bvadd var1_range_size var2_range_size)))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (not (= var1 (bvadd (bvsub var2 var1_range_size) n3)))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (not (= (bvadd var1 n12) (bvadd var2 n21)))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (forall ((j (_ BitVec 64))) (=> (and (bvule #x0000000000000000 j) (bvule j n22)) (not (= (bvadd var1 n12) (bvadd var2 j)))))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (and (=> (bvule #x0000000000000000 var2_range_size) (dynamic_property2 #x0000000000000000 var2_range_size n22)) (and (bvule #x0000000000000000 n22) (bvule n22 var2_range_size)))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n22 var2_range_size)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n5 (mk_t__ref n4))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n23 (mk_t__ref n22))))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n6 n4)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n24 n22)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n7 n5)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n25 n23)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n8 n6)))
(assert (=> (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size)) (= n26 n24)))
(assert (=> (not (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size))) (= n7 (mk_t__ref n))))
(assert (=> (not (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size))) (= n25 (mk_t__ref n21))))
(assert (=> (not (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size))) (= n8 n)))
(assert (=> (not (and (bvule #x0000000000000000 n21) (bvule n21 var2_range_size))) (= n26 n21)))
(assert (forall ((j (_ BitVec 64))) (=> (and (bvule #x0000000000000000 j) (bvule j var2_range_size)) (not (= (bvadd var1 n12) (bvadd var2 j))))))
(assert (not (= n12 #x0000000000000000)))
(declare-const i (_ BitVec 64))
(assert (bvule #x0000000000000000 i))
(assert (bvule i n12))
(declare-const j (_ BitVec 64))
(assert (bvule #x0000000000000000 j))
(assert (bvule j var2_range_size))
(assert (not (not (= (bvadd var1 i) (bvadd var2 j)))))
(check-sat)
(exit)
