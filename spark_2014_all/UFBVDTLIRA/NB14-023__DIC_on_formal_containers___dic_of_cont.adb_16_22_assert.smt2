(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (count_type count_type) Bool)
(declare-const dummy count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__dic_of_cont__my_dlli__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__dic_of_cont__my_dlli__list__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__dic_of_cont__my_dlli__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type (rec__dic_of_cont__my_dlli__list a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__dic_of_cont__my_dlli__list__capacity (us_split_discrs1 a))) (to_rep (rec__dic_of_cont__my_dlli__list__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__dic_of_cont__my_dlli__list (us_split_fields1 a)) (rec__dic_of_cont__my_dlli__list (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const dic_of_cont__my_dlli__list__capacity__first__bit Int)
(declare-const dic_of_cont__my_dlli__list__capacity__last__bit Int)
(declare-const dic_of_cont__my_dlli__list__capacity__position Int)
(assert (<= 0 dic_of_cont__my_dlli__list__capacity__first__bit))
(assert (< dic_of_cont__my_dlli__list__capacity__first__bit dic_of_cont__my_dlli__list__capacity__last__bit))
(assert (<= 0 dic_of_cont__my_dlli__list__capacity__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep)))))
(define-fun list__ref___projection ((a list__ref)) us_rep (list__content a))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(assert (forall ((container us_rep)) (! (= (= (is_empty container) true) (= (length container) 0)) :pattern ((is_empty container)))))
(declare-sort hash_type 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))
(declare-fun user_eq2 (hash_type hash_type) Bool)
(declare-const dummy2 hash_type)
(declare-datatypes () ((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type (hash_type__content a))
(declare-fun to_rep1 (hash_type) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) hash_type)
(assert (forall ((x hash_type)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int2 ((x hash_type)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x hash_type)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__dic_of_cont__my_hama__map__capacity count_type) (rec__dic_of_cont__my_hama__map__modulus hash_type)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs2)) count_type (rec__dic_of_cont__my_hama__map__capacity a))
(define-fun us_split_discrs___3__projection ((a us_split_discrs2)) hash_type (rec__dic_of_cont__my_hama__map__modulus a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__dic_of_cont__my_hama__map us_main_type1)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields2)) us_main_type1 (rec__dic_of_cont__my_hama__map a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs3 us_split_discrs2) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___10__projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___11__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep (rec__dic_of_cont__my_hama__map__capacity (us_split_discrs3 a))) (to_rep (rec__dic_of_cont__my_hama__map__capacity (us_split_discrs3 b)))) (= (to_rep1 (rec__dic_of_cont__my_hama__map__modulus (us_split_discrs3 a))) (to_rep1 (rec__dic_of_cont__my_hama__map__modulus (us_split_discrs3 b))))) (= (us_main_eq1 (rec__dic_of_cont__my_hama__map (us_split_fields3 a)) (rec__dic_of_cont__my_hama__map (us_split_fields3 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const dic_of_cont__my_hama__map__capacity__first__bit Int)
(declare-const dic_of_cont__my_hama__map__capacity__last__bit Int)
(declare-const dic_of_cont__my_hama__map__capacity__position Int)
(assert (<= 0 dic_of_cont__my_hama__map__capacity__first__bit))
(assert (< dic_of_cont__my_hama__map__capacity__first__bit dic_of_cont__my_hama__map__capacity__last__bit))
(assert (<= 0 dic_of_cont__my_hama__map__capacity__position))
(declare-const dic_of_cont__my_hama__map__modulus__first__bit Int)
(declare-const dic_of_cont__my_hama__map__modulus__last__bit Int)
(declare-const dic_of_cont__my_hama__map__modulus__position Int)
(assert (<= 0 dic_of_cont__my_hama__map__modulus__first__bit))
(assert (< dic_of_cont__my_hama__map__modulus__first__bit dic_of_cont__my_hama__map__modulus__last__bit))
(assert (<= 0 dic_of_cont__my_hama__map__modulus__position))
(declare-fun user_eq3 (us_rep1 us_rep1) Bool)
(declare-const dummy3 us_rep1)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep1)))))
(define-fun map__ref___2__projection ((a map__ref)) us_rep1 (map__content a))
(declare-fun is_empty1 (us_rep1) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(declare-fun oeq (us_rep1 us_rep1) Bool)
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)))))
(assert (forall ((container us_rep1)) (! (= (= (is_empty1 container) true) (= (length1 container) 0)) :pattern ((is_empty1 container)))))
(declare-fun default_modulus (Int) (_ BitVec 32))
(declare-fun default_modulus__function_guard ((_ BitVec 32) Int) Bool)
(define-fun dynamic_invariant ((temp___expr_190 (_ BitVec 32)) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool true)
(define-fun dynamic_invariant1 ((temp___expr_197 Int) (temp___is_init_193 Bool) (temp___skip_constant_194 Bool) (temp___do_toplevel_195 Bool) (temp___do_typ_inv_196 Bool)) Bool (=> (or (= temp___is_init_193 true) (<= 0 2147483647)) (in_range temp___expr_197)))
(assert (forall ((capacity Int)) (! (=> (dynamic_invariant1 capacity true true true true) (dynamic_invariant (default_modulus capacity) true false true true)) :pattern ((default_modulus capacity)))))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-datatypes () ((us_split_discrs4 (mk___split_discrs2 (rec__dic_of_cont__my_hase__set__capacity count_type) (rec__dic_of_cont__my_hase__set__modulus hash_type)))))
(define-fun us_split_discrs___4__projection ((a us_split_discrs4)) count_type (rec__dic_of_cont__my_hase__set__capacity a))
(define-fun us_split_discrs___5__projection ((a us_split_discrs4)) hash_type (rec__dic_of_cont__my_hase__set__modulus a))
(declare-datatypes () ((us_split_discrs__ref2 (mk___split_discrs__ref2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref2)) us_split_discrs4 (us_split_discrs__content2 a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__dic_of_cont__my_hase__set us_main_type2)))))
(define-fun us_split_fields_Set__projection ((a us_split_fields4)) us_main_type2 (rec__dic_of_cont__my_hase__set a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs5 us_split_discrs4) (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___13__projection ((a us_rep2)) us_split_discrs4 (us_split_discrs5 a))
(define-fun us_rep___14__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (to_rep (rec__dic_of_cont__my_hase__set__capacity (us_split_discrs5 a))) (to_rep (rec__dic_of_cont__my_hase__set__capacity (us_split_discrs5 b)))) (= (to_rep1 (rec__dic_of_cont__my_hase__set__modulus (us_split_discrs5 a))) (to_rep1 (rec__dic_of_cont__my_hase__set__modulus (us_split_discrs5 b))))) (= (us_main_eq2 (rec__dic_of_cont__my_hase__set (us_split_fields5 a)) (rec__dic_of_cont__my_hase__set (us_split_fields5 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const dic_of_cont__my_hase__set__capacity__first__bit Int)
(declare-const dic_of_cont__my_hase__set__capacity__last__bit Int)
(declare-const dic_of_cont__my_hase__set__capacity__position Int)
(assert (<= 0 dic_of_cont__my_hase__set__capacity__first__bit))
(assert (< dic_of_cont__my_hase__set__capacity__first__bit dic_of_cont__my_hase__set__capacity__last__bit))
(assert (<= 0 dic_of_cont__my_hase__set__capacity__position))
(declare-const dic_of_cont__my_hase__set__modulus__first__bit Int)
(declare-const dic_of_cont__my_hase__set__modulus__last__bit Int)
(declare-const dic_of_cont__my_hase__set__modulus__position Int)
(assert (<= 0 dic_of_cont__my_hase__set__modulus__first__bit))
(assert (< dic_of_cont__my_hase__set__modulus__first__bit dic_of_cont__my_hase__set__modulus__last__bit))
(assert (<= 0 dic_of_cont__my_hase__set__modulus__position))
(declare-fun user_eq4 (us_rep2 us_rep2) Bool)
(declare-const dummy4 us_rep2)
(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))
(declare-fun is_empty2 (us_rep2) Bool)
(declare-fun is_empty__function_guard2 (Bool us_rep2) Bool)
(declare-fun length2 (us_rep2) Int)
(declare-fun length__function_guard2 (Int us_rep2) Bool)
(declare-fun oeq1 (us_rep2 us_rep2) Bool)
(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq4 a b) (oeq1 a b)) :pattern ((user_eq4 a b)))))
(assert (forall ((container us_rep2)) (! (= (= (is_empty2 container) true) (= (length2 container) 0)) :pattern ((is_empty2 container)))))
(declare-fun default_modulus1 (Int) (_ BitVec 32))
(declare-fun default_modulus__function_guard1 ((_ BitVec 32) Int) Bool)
(assert (forall ((capacity Int)) (! (=> (dynamic_invariant1 capacity true true true true) (dynamic_invariant (default_modulus1 capacity) true false true true)) :pattern ((default_modulus1 capacity)))))
(declare-sort us_main_type3 0)
(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)
(declare-datatypes () ((us_split_discrs6 (mk___split_discrs3 (rec__dic_of_cont__my_orma__map__capacity count_type)))))
(define-fun us_split_discrs___6__projection ((a us_split_discrs6)) count_type (rec__dic_of_cont__my_orma__map__capacity a))
(declare-datatypes () ((us_split_discrs__ref3 (mk___split_discrs__ref3 (us_split_discrs__content3 us_split_discrs6)))))
(define-fun us_split_discrs__ref___4__projection ((a us_split_discrs__ref3)) us_split_discrs6 (us_split_discrs__content3 a))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__dic_of_cont__my_orma__map us_main_type3)))))
(define-fun us_split_fields_Map__2__projection ((a us_split_fields6)) us_main_type3 (rec__dic_of_cont__my_orma__map a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_discrs7 us_split_discrs6) (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___16__projection ((a us_rep3)) us_split_discrs6 (us_split_discrs7 a))
(define-fun us_rep___17__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq3 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep (rec__dic_of_cont__my_orma__map__capacity (us_split_discrs7 a))) (to_rep (rec__dic_of_cont__my_orma__map__capacity (us_split_discrs7 b)))) (= (us_main_eq3 (rec__dic_of_cont__my_orma__map (us_split_fields7 a)) (rec__dic_of_cont__my_orma__map (us_split_fields7 b))) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const dic_of_cont__my_orma__map__capacity__first__bit Int)
(declare-const dic_of_cont__my_orma__map__capacity__last__bit Int)
(declare-const dic_of_cont__my_orma__map__capacity__position Int)
(assert (<= 0 dic_of_cont__my_orma__map__capacity__first__bit))
(assert (< dic_of_cont__my_orma__map__capacity__first__bit dic_of_cont__my_orma__map__capacity__last__bit))
(assert (<= 0 dic_of_cont__my_orma__map__capacity__position))
(declare-fun user_eq5 (us_rep3 us_rep3) Bool)
(declare-const dummy5 us_rep3)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep3)))))
(define-fun map__ref___6__projection ((a map__ref1)) us_rep3 (map__content1 a))
(declare-fun is_empty3 (us_rep3) Bool)
(declare-fun is_empty__function_guard3 (Bool us_rep3) Bool)
(declare-fun length3 (us_rep3) Int)
(declare-fun length__function_guard3 (Int us_rep3) Bool)
(declare-fun oeq2 (us_rep3 us_rep3) Bool)
(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)
(assert (forall ((a us_rep3) (b us_rep3)) (! (= (user_eq5 a b) (oeq2 a b)) :pattern ((user_eq5 a b)))))
(assert (forall ((container us_rep3)) (! (= (= (is_empty3 container) true) (= (length3 container) 0)) :pattern ((is_empty3 container)))))
(declare-sort us_main_type4 0)
(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)
(declare-datatypes () ((us_split_discrs8 (mk___split_discrs4 (rec__dic_of_cont__my_orse__set__capacity count_type)))))
(define-fun us_split_discrs___7__projection ((a us_split_discrs8)) count_type (rec__dic_of_cont__my_orse__set__capacity a))
(declare-datatypes () ((us_split_discrs__ref4 (mk___split_discrs__ref4 (us_split_discrs__content4 us_split_discrs8)))))
(define-fun us_split_discrs__ref___5__projection ((a us_split_discrs__ref4)) us_split_discrs8 (us_split_discrs__content4 a))
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__dic_of_cont__my_orse__set us_main_type4)))))
(define-fun us_split_fields_Set__2__projection ((a us_split_fields8)) us_main_type4 (rec__dic_of_cont__my_orse__set a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___13__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep4 (mk___rep4 (us_split_discrs9 us_split_discrs8) (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___19__projection ((a us_rep4)) us_split_discrs8 (us_split_discrs9 a))
(define-fun us_rep___20__projection ((a us_rep4)) us_split_fields8 (us_split_fields9 a))
(define-fun bool_eq4 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (to_rep (rec__dic_of_cont__my_orse__set__capacity (us_split_discrs9 a))) (to_rep (rec__dic_of_cont__my_orse__set__capacity (us_split_discrs9 b)))) (= (us_main_eq4 (rec__dic_of_cont__my_orse__set (us_split_fields9 a)) (rec__dic_of_cont__my_orse__set (us_split_fields9 b))) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-const dic_of_cont__my_orse__set__capacity__first__bit Int)
(declare-const dic_of_cont__my_orse__set__capacity__last__bit Int)
(declare-const dic_of_cont__my_orse__set__capacity__position Int)
(assert (<= 0 dic_of_cont__my_orse__set__capacity__first__bit))
(assert (< dic_of_cont__my_orse__set__capacity__first__bit dic_of_cont__my_orse__set__capacity__last__bit))
(assert (<= 0 dic_of_cont__my_orse__set__capacity__position))
(declare-fun user_eq6 (us_rep4 us_rep4) Bool)
(declare-const dummy6 us_rep4)
(declare-datatypes () ((set__ref1 (mk_set__ref1 (set__content1 us_rep4)))))
(define-fun set__ref___3__projection ((a set__ref1)) us_rep4 (set__content1 a))
(declare-fun is_empty4 (us_rep4) Bool)
(declare-fun is_empty__function_guard4 (Bool us_rep4) Bool)
(declare-fun length4 (us_rep4) Int)
(declare-fun length__function_guard4 (Int us_rep4) Bool)
(declare-fun oeq3 (us_rep4 us_rep4) Bool)
(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)
(assert (forall ((a us_rep4) (b us_rep4)) (! (= (user_eq6 a b) (oeq3 a b)) :pattern ((user_eq6 a b)))))
(assert (forall ((container us_rep4)) (! (= (= (is_empty4 container) true) (= (length4 container) 0)) :pattern ((is_empty4 container)))))
(declare-sort capacity_range 0)
(declare-fun capacity_rangeqtint (capacity_range) Int)
(assert (forall ((i capacity_range)) (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq7 (capacity_range capacity_range) Bool)
(declare-const dummy7 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type5 0)
(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)
(declare-datatypes () ((us_split_discrs10 (mk___split_discrs5 (rec__dic_of_cont__my_fove__vector__capacity capacity_range)))))
(define-fun us_split_discrs___8__projection ((a us_split_discrs10)) capacity_range (rec__dic_of_cont__my_fove__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref5 (mk___split_discrs__ref5 (us_split_discrs__content5 us_split_discrs10)))))
(define-fun us_split_discrs__ref___6__projection ((a us_split_discrs__ref5)) us_split_discrs10 (us_split_discrs__content5 a))
(declare-datatypes () ((us_split_fields10 (mk___split_fields5 (rec__dic_of_cont__my_fove__vector us_main_type5)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields10)) us_main_type5 (rec__dic_of_cont__my_fove__vector a))
(declare-datatypes () ((us_split_fields__ref5 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___15__projection ((a us_split_fields__ref5)) us_split_fields10 (us_split_fields__content5 a))
(declare-datatypes () ((us_rep5 (mk___rep5 (us_split_discrs11 us_split_discrs10) (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___22__projection ((a us_rep5)) us_split_discrs10 (us_split_discrs11 a))
(define-fun us_rep___23__projection ((a us_rep5)) us_split_fields10 (us_split_fields11 a))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep5) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep5) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))
(declare-const dic_of_cont__my_fove__vector__capacity__first__bit Int)
(declare-const dic_of_cont__my_fove__vector__capacity__last__bit Int)
(declare-const dic_of_cont__my_fove__vector__capacity__position Int)
(assert (<= 0 dic_of_cont__my_fove__vector__capacity__first__bit))
(assert (< dic_of_cont__my_fove__vector__capacity__first__bit dic_of_cont__my_fove__vector__capacity__last__bit))
(assert (<= 0 dic_of_cont__my_fove__vector__capacity__position))
(declare-fun user_eq8 (us_rep5 us_rep5) Bool)
(declare-const dummy8 us_rep5)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep5)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep5 (vector__content a))
(declare-fun is_empty5 (us_rep5) Bool)
(declare-fun is_empty__function_guard5 (Bool us_rep5) Bool)
(declare-fun length5 (us_rep5) Int)
(declare-fun length__function_guard5 (Int us_rep5) Bool)
(assert (forall ((container us_rep5)) (! (= (= (is_empty5 container) true) (= (length5 container) 0)) :pattern ((is_empty5 container)))))
(define-fun to_rep2 ((x capacity_range)) Int (capacity_rangeqtint x))
(declare-fun of_rep2 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x capacity_range)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-const capacity Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range2 ((rec__dic_of_cont__my_dlli__list__capacity1 Int) (a us_rep)) Bool (= rec__dic_of_cont__my_dlli__list__capacity1 (to_rep (rec__dic_of_cont__my_dlli__list__capacity (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))
(declare-const dic_of_cont__my_dlli__list__capacity__first__bit1 Int)
(declare-const dic_of_cont__my_dlli__list__capacity__last__bit1 Int)
(declare-const dic_of_cont__my_dlli__list__capacity__position1 Int)
(assert (<= 0 dic_of_cont__my_dlli__list__capacity__first__bit1))
(assert (< dic_of_cont__my_dlli__list__capacity__first__bit1 dic_of_cont__my_dlli__list__capacity__last__bit1))
(assert (<= 0 dic_of_cont__my_dlli__list__capacity__position1))
(declare-fun user_eq9 (us_rep us_rep) Bool)
(declare-const dummy9 us_rep)
(declare-datatypes () ((tdlliS__ref (mk_tdlliS__ref (tdlliS__content us_rep)))))
(define-fun tdlliS__ref___projection ((a tdlliS__ref)) us_rep (tdlliS__content a))
(define-fun dynamic_invariant2 ((temp___expr_1740 us_rep) (temp___is_init_1736 Bool) (temp___skip_constant_1737 Bool) (temp___do_toplevel_1738 Bool) (temp___do_typ_inv_1739 Bool)) Bool (=> (not (= temp___skip_constant_1737 true)) (in_range2 capacity temp___expr_1740)))
(define-fun default_initial_assumption ((temp___expr_1742 us_rep) (temp___skip_top_level_1743 Bool)) Bool (and (= (to_rep (rec__dic_of_cont__my_dlli__list__capacity (us_split_discrs1 temp___expr_1742))) capacity) (=> (not (= temp___skip_top_level_1743 true)) (= (is_empty temp___expr_1742) true))))
(declare-const dlli__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const r2b (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun in_range3 ((rec__dic_of_cont__my_hama__map__capacity1 Int) (rec__dic_of_cont__my_hama__map__modulus1 (_ BitVec 32)) (a us_rep1)) Bool (and (= rec__dic_of_cont__my_hama__map__capacity1 (to_rep (rec__dic_of_cont__my_hama__map__capacity (us_split_discrs3 a)))) (= rec__dic_of_cont__my_hama__map__modulus1 (to_rep1 (rec__dic_of_cont__my_hama__map__modulus (us_split_discrs3 a))))))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep1) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep1) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep1)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment7 a))))
(declare-const dic_of_cont__my_hama__map__capacity__first__bit1 Int)
(declare-const dic_of_cont__my_hama__map__capacity__last__bit1 Int)
(declare-const dic_of_cont__my_hama__map__capacity__position1 Int)
(assert (<= 0 dic_of_cont__my_hama__map__capacity__first__bit1))
(assert (< dic_of_cont__my_hama__map__capacity__first__bit1 dic_of_cont__my_hama__map__capacity__last__bit1))
(assert (<= 0 dic_of_cont__my_hama__map__capacity__position1))
(declare-const dic_of_cont__my_hama__map__modulus__first__bit1 Int)
(declare-const dic_of_cont__my_hama__map__modulus__last__bit1 Int)
(declare-const dic_of_cont__my_hama__map__modulus__position1 Int)
(assert (<= 0 dic_of_cont__my_hama__map__modulus__first__bit1))
(assert (< dic_of_cont__my_hama__map__modulus__first__bit1 dic_of_cont__my_hama__map__modulus__last__bit1))
(assert (<= 0 dic_of_cont__my_hama__map__modulus__position1))
(declare-fun user_eq10 (us_rep1 us_rep1) Bool)
(declare-const dummy10 us_rep1)
(declare-datatypes () ((tdhamaS__ref (mk_tdhamaS__ref (tdhamaS__content us_rep1)))))
(define-fun tdhamaS__ref___projection ((a tdhamaS__ref)) us_rep1 (tdhamaS__content a))
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq10 a b) (oeq a b)) :pattern ((user_eq10 a b)))))
(define-fun dynamic_invariant3 ((temp___expr_1750 us_rep1) (temp___is_init_1746 Bool) (temp___skip_constant_1747 Bool) (temp___do_toplevel_1748 Bool) (temp___do_typ_inv_1749 Bool)) Bool (=> (not (= temp___skip_constant_1747 true)) (in_range3 capacity r2b temp___expr_1750)))
(define-fun default_initial_assumption1 ((temp___expr_1753 us_rep1) (temp___skip_top_level_1754 Bool)) Bool (and (and (= (to_rep (rec__dic_of_cont__my_hama__map__capacity (us_split_discrs3 temp___expr_1753))) capacity) (= (to_rep1 (rec__dic_of_cont__my_hama__map__modulus (us_split_discrs3 temp___expr_1753))) r2b)) (=> (not (= temp___skip_top_level_1754 true)) (= (is_empty1 temp___expr_1753) true))))
(declare-const dhama__split_discrs us_split_discrs2)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const r5b (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun in_range4 ((rec__dic_of_cont__my_hase__set__capacity1 Int) (rec__dic_of_cont__my_hase__set__modulus1 (_ BitVec 32)) (a us_rep2)) Bool (and (= rec__dic_of_cont__my_hase__set__capacity1 (to_rep (rec__dic_of_cont__my_hase__set__capacity (us_split_discrs5 a)))) (= rec__dic_of_cont__my_hase__set__modulus1 (to_rep1 (rec__dic_of_cont__my_hase__set__modulus (us_split_discrs5 a))))))
(declare-const value__size8 Int)
(declare-fun object__size8 (us_rep2) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 (us_rep2) Int)
(assert (<= 0 value__size8))
(assert (forall ((a us_rep2)) (<= 0 (object__size8 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment8 a))))
(declare-const dic_of_cont__my_hase__set__capacity__first__bit1 Int)
(declare-const dic_of_cont__my_hase__set__capacity__last__bit1 Int)
(declare-const dic_of_cont__my_hase__set__capacity__position1 Int)
(assert (<= 0 dic_of_cont__my_hase__set__capacity__first__bit1))
(assert (< dic_of_cont__my_hase__set__capacity__first__bit1 dic_of_cont__my_hase__set__capacity__last__bit1))
(assert (<= 0 dic_of_cont__my_hase__set__capacity__position1))
(declare-const dic_of_cont__my_hase__set__modulus__first__bit1 Int)
(declare-const dic_of_cont__my_hase__set__modulus__last__bit1 Int)
(declare-const dic_of_cont__my_hase__set__modulus__position1 Int)
(assert (<= 0 dic_of_cont__my_hase__set__modulus__first__bit1))
(assert (< dic_of_cont__my_hase__set__modulus__first__bit1 dic_of_cont__my_hase__set__modulus__last__bit1))
(assert (<= 0 dic_of_cont__my_hase__set__modulus__position1))
(declare-fun user_eq11 (us_rep2 us_rep2) Bool)
(declare-const dummy11 us_rep2)
(declare-datatypes () ((tdhaseS__ref (mk_tdhaseS__ref (tdhaseS__content us_rep2)))))
(define-fun tdhaseS__ref___projection ((a tdhaseS__ref)) us_rep2 (tdhaseS__content a))
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq11 a b) (oeq1 a b)) :pattern ((user_eq11 a b)))))
(define-fun dynamic_invariant4 ((temp___expr_1762 us_rep2) (temp___is_init_1758 Bool) (temp___skip_constant_1759 Bool) (temp___do_toplevel_1760 Bool) (temp___do_typ_inv_1761 Bool)) Bool (=> (not (= temp___skip_constant_1759 true)) (in_range4 capacity r5b temp___expr_1762)))
(define-fun default_initial_assumption2 ((temp___expr_1765 us_rep2) (temp___skip_top_level_1766 Bool)) Bool (and (and (= (to_rep (rec__dic_of_cont__my_hase__set__capacity (us_split_discrs5 temp___expr_1765))) capacity) (= (to_rep1 (rec__dic_of_cont__my_hase__set__modulus (us_split_discrs5 temp___expr_1765))) r5b)) (=> (not (= temp___skip_top_level_1766 true)) (= (is_empty2 temp___expr_1765) true))))
(declare-const dhase__split_discrs us_split_discrs4)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun in_range5 ((rec__dic_of_cont__my_orma__map__capacity1 Int) (a us_rep3)) Bool (= rec__dic_of_cont__my_orma__map__capacity1 (to_rep (rec__dic_of_cont__my_orma__map__capacity (us_split_discrs7 a)))))
(declare-const value__size9 Int)
(declare-fun object__size9 (us_rep3) Int)
(declare-const value__alignment9 Int)
(declare-fun object__alignment9 (us_rep3) Int)
(assert (<= 0 value__size9))
(assert (forall ((a us_rep3)) (<= 0 (object__size9 a))))
(assert (<= 0 value__alignment9))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment9 a))))
(declare-const dic_of_cont__my_orma__map__capacity__first__bit1 Int)
(declare-const dic_of_cont__my_orma__map__capacity__last__bit1 Int)
(declare-const dic_of_cont__my_orma__map__capacity__position1 Int)
(assert (<= 0 dic_of_cont__my_orma__map__capacity__first__bit1))
(assert (< dic_of_cont__my_orma__map__capacity__first__bit1 dic_of_cont__my_orma__map__capacity__last__bit1))
(assert (<= 0 dic_of_cont__my_orma__map__capacity__position1))
(declare-fun user_eq12 (us_rep3 us_rep3) Bool)
(declare-const dummy12 us_rep3)
(declare-datatypes () ((tdormaS__ref (mk_tdormaS__ref (tdormaS__content us_rep3)))))
(define-fun tdormaS__ref___projection ((a tdormaS__ref)) us_rep3 (tdormaS__content a))
(assert (forall ((a us_rep3) (b us_rep3)) (! (= (user_eq12 a b) (oeq2 a b)) :pattern ((user_eq12 a b)))))
(define-fun dynamic_invariant5 ((temp___expr_1774 us_rep3) (temp___is_init_1770 Bool) (temp___skip_constant_1771 Bool) (temp___do_toplevel_1772 Bool) (temp___do_typ_inv_1773 Bool)) Bool (=> (not (= temp___skip_constant_1771 true)) (in_range5 capacity temp___expr_1774)))
(define-fun default_initial_assumption3 ((temp___expr_1776 us_rep3) (temp___skip_top_level_1777 Bool)) Bool (and (= (to_rep (rec__dic_of_cont__my_orma__map__capacity (us_split_discrs7 temp___expr_1776))) capacity) (=> (not (= temp___skip_top_level_1777 true)) (= (is_empty3 temp___expr_1776) true))))
(declare-const dorma__split_discrs us_split_discrs6)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun in_range6 ((rec__dic_of_cont__my_orse__set__capacity1 Int) (a us_rep4)) Bool (= rec__dic_of_cont__my_orse__set__capacity1 (to_rep (rec__dic_of_cont__my_orse__set__capacity (us_split_discrs9 a)))))
(declare-const value__size10 Int)
(declare-fun object__size10 (us_rep4) Int)
(declare-const value__alignment10 Int)
(declare-fun object__alignment10 (us_rep4) Int)
(assert (<= 0 value__size10))
(assert (forall ((a us_rep4)) (<= 0 (object__size10 a))))
(assert (<= 0 value__alignment10))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment10 a))))
(declare-const dic_of_cont__my_orse__set__capacity__first__bit1 Int)
(declare-const dic_of_cont__my_orse__set__capacity__last__bit1 Int)
(declare-const dic_of_cont__my_orse__set__capacity__position1 Int)
(assert (<= 0 dic_of_cont__my_orse__set__capacity__first__bit1))
(assert (< dic_of_cont__my_orse__set__capacity__first__bit1 dic_of_cont__my_orse__set__capacity__last__bit1))
(assert (<= 0 dic_of_cont__my_orse__set__capacity__position1))
(declare-fun user_eq13 (us_rep4 us_rep4) Bool)
(declare-const dummy13 us_rep4)
(declare-datatypes () ((tdorseS__ref (mk_tdorseS__ref (tdorseS__content us_rep4)))))
(define-fun tdorseS__ref___projection ((a tdorseS__ref)) us_rep4 (tdorseS__content a))
(assert (forall ((a us_rep4) (b us_rep4)) (! (= (user_eq13 a b) (oeq3 a b)) :pattern ((user_eq13 a b)))))
(define-fun dynamic_invariant6 ((temp___expr_1784 us_rep4) (temp___is_init_1780 Bool) (temp___skip_constant_1781 Bool) (temp___do_toplevel_1782 Bool) (temp___do_typ_inv_1783 Bool)) Bool (=> (not (= temp___skip_constant_1781 true)) (in_range6 capacity temp___expr_1784)))
(define-fun default_initial_assumption4 ((temp___expr_1786 us_rep4) (temp___skip_top_level_1787 Bool)) Bool (and (= (to_rep (rec__dic_of_cont__my_orse__set__capacity (us_split_discrs9 temp___expr_1786))) capacity) (=> (not (= temp___skip_top_level_1787 true)) (= (is_empty4 temp___expr_1786) true))))
(declare-const dorse__split_discrs us_split_discrs8)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun in_range7 ((rec__dic_of_cont__my_fove__vector__capacity1 Int) (a us_rep5)) Bool (= rec__dic_of_cont__my_fove__vector__capacity1 (to_rep2 (rec__dic_of_cont__my_fove__vector__capacity (us_split_discrs11 a)))))
(declare-const value__size11 Int)
(declare-fun object__size11 (us_rep5) Int)
(declare-const value__alignment11 Int)
(declare-fun object__alignment11 (us_rep5) Int)
(assert (<= 0 value__size11))
(assert (forall ((a us_rep5)) (<= 0 (object__size11 a))))
(assert (<= 0 value__alignment11))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment11 a))))
(declare-const dic_of_cont__my_fove__vector__capacity__first__bit1 Int)
(declare-const dic_of_cont__my_fove__vector__capacity__last__bit1 Int)
(declare-const dic_of_cont__my_fove__vector__capacity__position1 Int)
(assert (<= 0 dic_of_cont__my_fove__vector__capacity__first__bit1))
(assert (< dic_of_cont__my_fove__vector__capacity__first__bit1 dic_of_cont__my_fove__vector__capacity__last__bit1))
(assert (<= 0 dic_of_cont__my_fove__vector__capacity__position1))
(declare-fun user_eq14 (us_rep5 us_rep5) Bool)
(declare-const dummy14 us_rep5)
(declare-datatypes () ((tdfoveS__ref (mk_tdfoveS__ref (tdfoveS__content us_rep5)))))
(define-fun tdfoveS__ref___projection ((a tdfoveS__ref)) us_rep5 (tdfoveS__content a))
(define-fun dynamic_invariant7 ((temp___expr_1794 us_rep5) (temp___is_init_1790 Bool) (temp___skip_constant_1791 Bool) (temp___do_toplevel_1792 Bool) (temp___do_typ_inv_1793 Bool)) Bool (=> (not (= temp___skip_constant_1791 true)) (in_range7 capacity temp___expr_1794)))
(define-fun default_initial_assumption5 ((temp___expr_1796 us_rep5) (temp___skip_top_level_1797 Bool)) Bool (and (= (to_rep2 (rec__dic_of_cont__my_fove__vector__capacity (us_split_discrs11 temp___expr_1796))) capacity) (=> (not (= temp___skip_top_level_1797 true)) (= (is_empty5 temp___expr_1796) true))))
(declare-const dfove__split_discrs us_split_discrs10)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__dic_of_cont__my_dlli__list__capacity (us_split_discrs1 container)))) (dynamic_invariant1 result true false true true))) :pattern ((length container)))))
(assert (forall ((container us_rep1)) (! (let ((result (length1 container))) (and (<= result (to_rep (rec__dic_of_cont__my_hama__map__capacity (us_split_discrs3 container)))) (dynamic_invariant1 result true false true true))) :pattern ((length1 container)))))
(declare-sort us_main_type6 0)
(declare-fun us_main_eq6 (us_main_type6 us_main_type6) Bool)
(declare-sort us_rep6 0)
(declare-fun bool_eq5 (us_rep6 us_rep6) Bool)
(declare-const value__size12 Int)
(declare-fun object__size12 (us_rep6) Int)
(declare-const value__alignment12 Int)
(declare-fun object__alignment12 (us_rep6) Int)
(assert (<= 0 value__size12))
(assert (forall ((a us_rep6)) (<= 0 (object__size12 a))))
(assert (<= 0 value__alignment12))
(assert (forall ((a us_rep6)) (<= 0 (object__alignment12 a))))
(declare-fun user_eq15 (us_rep6 us_rep6) Bool)
(declare-const dummy15 us_rep6)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep6)))))
(define-fun map__ref___3__projection ((a map__ref2)) us_rep6 (map__content2 a))
(declare-fun model__ (us_rep1) us_rep6)
(declare-fun model____function_guard (us_rep6 us_rep1) Bool)
(declare-fun length6 (us_rep6) Int)
(declare-fun length__function_guard6 (Int us_rep6) Bool)
(declare-fun is_empty6 (us_rep6) Bool)
(declare-fun is_empty__function_guard6 (Bool us_rep6) Bool)
(define-fun default_initial_assumption6 ((temp___expr_592 us_rep6) (temp___skip_top_level_593 Bool)) Bool (=> (not (= temp___skip_top_level_593 true)) (and (= (is_empty6 temp___expr_592) true) (= (length6 temp___expr_592) 0))))
(assert true)
(declare-fun oeq4 (us_rep6 us_rep6) Bool)
(declare-fun oeq__function_guard4 (Bool us_rep6 us_rep6) Bool)
(assert (forall ((left us_rep1) (right us_rep1)) (! (= (= (oeq left right) true) (= (oeq4 (model__ left) (model__ right)) true)) :pattern ((oeq left right)))))
(define-fun in_range8 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)
(declare-fun has_key (us_rep6 Int) Bool)
(declare-fun has_key__function_guard (Bool us_rep6 Int) Bool)
(declare-sort key_type 0)
(declare-fun key_typeqtint (key_type) Int)
(assert (forall ((i key_type)) (and (<= 0 (key_typeqtint i)) (<= (key_typeqtint i) 2147483647))))
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq16 (key_type key_type) Bool)
(declare-const dummy16 key_type)
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___3__projection ((a key_type__ref)) key_type (key_type__content a))
(define-fun dynamic_invariant8 ((temp___expr_577 Int) (temp___is_init_573 Bool) (temp___skip_constant_574 Bool) (temp___do_toplevel_575 Bool) (temp___do_typ_inv_576 Bool)) Bool (=> (or (= temp___is_init_573 true) (<= 0 2147483647)) (in_range9 temp___expr_577)))
(assert (forall ((container us_rep6)) (forall ((key Int)) (! (=> (dynamic_invariant8 key true true true true) (=> (= (distinct 1 0) true) (=> (exists ((k Int)) (and (and (in_range9 k) (= (has_key container k) true)) (= k key))) (= (has_key container key) true)))) :pattern ((has_key container key))))))
(declare-fun witness (us_rep6 Int) Int)
(declare-fun witness__function_guard (Int us_rep6 Int) Bool)
(declare-fun w_get (us_rep6 Int) Int)
(declare-fun w_get__function_guard (Int us_rep6 Int) Bool)
(declare-fun get (us_rep6 Int) Int)
(declare-fun get__function_guard (Int us_rep6 Int) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq17 (element_type element_type) Bool)
(declare-const dummy17 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___5__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant9 ((temp___expr_584 Int) (temp___is_init_580 Bool) (temp___skip_constant_581 Bool) (temp___do_toplevel_582 Bool) (temp___do_typ_inv_583 Bool)) Bool (=> (or (= temp___is_init_580 true) (<= 0 2147483647)) (in_range10 temp___expr_584)))
(assert (forall ((container us_rep6)) (forall ((key Int)) (! (=> (and (dynamic_invariant8 key true true true true) (= (has_key container key) true)) (let ((result (get container key))) (and (=> (= (distinct 1 0) true) (and (= result (w_get container (witness container key))) (forall ((k Int)) (=> (and (in_range9 k) (= (has_key container k) true)) (= (= k key) (= (witness container key) (witness container k))))))) (dynamic_invariant9 result true false true true)))) :pattern ((get container key))))))
(assert (forall ((container us_rep6)) (! (dynamic_invariant1 (length6 container) true false true true) :pattern ((length6 container)))))
(assert (forall ((left us_rep6) (right us_rep6)) (! (= (= (oeq4 left right) true) (and (forall ((key Int)) (=> (and (in_range9 key) (= (has_key left key) true)) (and (= (has_key right key) true) (= (get right key) (get left key))))) (forall ((key Int)) (=> (and (in_range9 key) (= (has_key right key) true)) (= (has_key left key) true))))) :pattern ((oeq4 left right)))))
(assert (forall ((container us_rep6)) (! (= (= (is_empty6 container) true) (forall ((key Int)) (not (and (in_range9 key) (= (has_key container key) true))))) :pattern ((is_empty6 container)))))
(declare-fun has_witness (us_rep6 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep6 Int) Bool)
(assert true)
(assert (forall ((container us_rep6)) (forall ((key Int)) (! (=> (and (dynamic_invariant8 key true true true true) (= (has_key container key) true)) (let ((result (witness container key))) (and (= (has_witness container result) true) (dynamic_invariant1 result true false true true)))) :pattern ((witness container key))))))
(assert (forall ((container us_rep6)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant1 witness1 true true true true) (= (has_witness container witness1) true)) (dynamic_invariant9 (w_get container witness1) true false true true)) :pattern ((w_get container witness1))))))
(assert (forall ((container us_rep2)) (! (let ((result (length2 container))) (and (<= result (to_rep (rec__dic_of_cont__my_hase__set__capacity (us_split_discrs5 container)))) (dynamic_invariant1 result true false true true))) :pattern ((length2 container)))))
(declare-sort us_main_type7 0)
(declare-fun us_main_eq7 (us_main_type7 us_main_type7) Bool)
(declare-sort us_rep7 0)
(declare-fun bool_eq6 (us_rep7 us_rep7) Bool)
(declare-const value__size13 Int)
(declare-fun object__size13 (us_rep7) Int)
(declare-const value__alignment13 Int)
(declare-fun object__alignment13 (us_rep7) Int)
(assert (<= 0 value__size13))
(assert (forall ((a us_rep7)) (<= 0 (object__size13 a))))
(assert (<= 0 value__alignment13))
(assert (forall ((a us_rep7)) (<= 0 (object__alignment13 a))))
(declare-fun user_eq18 (us_rep7 us_rep7) Bool)
(declare-const dummy18 us_rep7)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep7)))))
(define-fun sequence__ref___3__projection ((a sequence__ref)) us_rep7 (sequence__content a))
(declare-fun length7 (us_rep7) Int)
(declare-fun length__function_guard7 (Int us_rep7) Bool)
(declare-fun get1 (us_rep7 Int) Int)
(declare-fun get__function_guard1 (Int us_rep7 Int) Bool)
(declare-fun find (us_rep7 Int) Int)
(declare-fun find__function_guard (Int us_rep7 Int) Bool)
(declare-sort element_type1 0)
(declare-fun element_typeqtint1 (element_type1) Int)
(assert (forall ((i element_type1)) (and (<= 0 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq19 (element_type1 element_type1) Bool)
(declare-const dummy19 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___8__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant10 ((temp___expr_798 Int) (temp___is_init_794 Bool) (temp___skip_constant_795 Bool) (temp___do_toplevel_796 Bool) (temp___do_typ_inv_797 Bool)) Bool (=> (or (= temp___is_init_794 true) (<= 0 2147483647)) (in_range11 temp___expr_798)))
(define-fun last ((container us_rep7)) Int (+ 0 (length7 container)))
(declare-fun last__function_guard (Int us_rep7) Bool)
(define-fun oeq5 ((left us_rep7) (right us_rep7)) Bool (and (= (length7 left) (length7 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get1 left n) (get1 right n)))) true false)))
(declare-fun oeq__function_guard5 (Bool us_rep7 us_rep7) Bool)
(assert (forall ((a us_rep7) (b us_rep7)) (! (= (user_eq18 a b) (oeq5 a b)) :pattern ((user_eq18 a b)))))
(define-fun default_initial_assumption7 ((temp___expr_875 us_rep7) (temp___skip_top_level_876 Bool)) Bool (=> (not (= temp___skip_top_level_876 true)) (= (length7 temp___expr_875) 0)))
(assert (forall ((container us_rep7)) (forall ((item Int)) (! (=> (dynamic_invariant10 item true true true true) (let ((result (find container item))) (and (=> (< 0 result) (and (<= result (length7 container)) (= item (get1 container result)))) (dynamic_invariant1 result true false true true)))) :pattern ((find container item))))))
(define-fun e_elements_included ((left us_rep7) (right us_rep7)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (length7 left))) (and (< 0 (find right (get1 left i))) (= (get1 right (find right (get1 left i))) (get1 left i))))) true false))
(declare-fun e_elements_included__function_guard (Bool us_rep7 us_rep7) Bool)
(declare-sort us_main_type8 0)
(declare-fun us_main_eq8 (us_main_type8 us_main_type8) Bool)
(declare-sort us_rep8 0)
(declare-fun bool_eq7 (us_rep8 us_rep8) Bool)
(declare-const value__size14 Int)
(declare-fun object__size14 (us_rep8) Int)
(declare-const value__alignment14 Int)
(declare-fun object__alignment14 (us_rep8) Int)
(assert (<= 0 value__size14))
(assert (forall ((a us_rep8)) (<= 0 (object__size14 a))))
(assert (<= 0 value__alignment14))
(assert (forall ((a us_rep8)) (<= 0 (object__alignment14 a))))
(declare-fun user_eq20 (us_rep8 us_rep8) Bool)
(declare-const dummy20 us_rep8)
(declare-datatypes () ((set__ref2 (mk_set__ref2 (set__content2 us_rep8)))))
(define-fun set__ref___2__projection ((a set__ref2)) us_rep8 (set__content2 a))
(declare-fun length8 (us_rep8) Int)
(declare-fun length__function_guard8 (Int us_rep8) Bool)
(declare-fun model__1 (us_rep2) us_rep8)
(declare-fun model____function_guard1 (us_rep8 us_rep2) Bool)
(declare-fun is_empty7 (us_rep8) Bool)
(declare-fun is_empty__function_guard7 (Bool us_rep8) Bool)
(define-fun default_initial_assumption8 ((temp___expr_839 us_rep8) (temp___skip_top_level_840 Bool)) Bool (=> (not (= temp___skip_top_level_840 true)) (= (is_empty7 temp___expr_839) true)))
(assert (forall ((container us_rep2)) (! (= (length8 (model__1 container)) (length2 container)) :pattern ((model__1 container)))))
(declare-fun contains (us_rep8 Int) Bool)
(declare-fun contains__function_guard (Bool us_rep8 Int) Bool)
(define-fun iter_has_element ((container us_rep7) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last container)) true false)))
(declare-fun iter_has_element__function_guard (Bool us_rep7 Int) Bool)
(declare-fun elements (us_rep2) us_rep7)
(declare-fun elements__function_guard (us_rep7 us_rep2) Bool)
(declare-sort element_type2 0)
(declare-fun element_typeqtint2 (element_type2) Int)
(assert (forall ((i element_type2)) (and (<= 0 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 2147483647))))
(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq21 (element_type2 element_type2) Bool)
(declare-const dummy21 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___9__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq22 (extended_index extended_index) Bool)
(declare-const dummy22 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___3__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(assert (forall ((container us_rep2)) (! (let ((result (elements container))) (and (and (and (and (= (length7 result) (length2 container)) (forall ((temp___916 Int)) (=> (and (in_range13 temp___916) (= (iter_has_element result temp___916) true)) (= (contains (model__1 container) (get1 result temp___916)) true)))) (forall ((item Int)) (=> (and (in_range12 item) (= (contains (model__1 container) item) true)) (and (< 0 (find result item)) (= (get1 result (find result item)) item))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length2 container))) (= (find result (get1 result i)) i)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length2 container))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (length2 container))) (=> (= (get1 result i) (get1 result j)) (= i j)))))))) :pattern ((elements container)))))
(assert (forall ((left us_rep2) (right us_rep2)) (! (let ((result (oeq1 left right))) (and (= (= result true) (and (= (length2 left) (length2 right)) (= (e_elements_included (elements left) (elements right)) true))) (= (= result true) (and (= (e_elements_included (elements left) (elements right)) true) (= (e_elements_included (elements right) (elements left)) true))))) :pattern ((oeq1 left right)))))
(define-fun dynamic_invariant11 ((temp___expr_831 Int) (temp___is_init_827 Bool) (temp___skip_constant_828 Bool) (temp___do_toplevel_829 Bool) (temp___do_typ_inv_830 Bool)) Bool (=> (or (= temp___is_init_827 true) (<= 0 2147483647)) (in_range12 temp___expr_831)))
(assert (forall ((container us_rep8)) (forall ((item Int)) (! (=> (dynamic_invariant11 item true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range12 e) (= (contains container e) true)) (= e item))) (= (contains container item) true)))) :pattern ((contains container item))))))
(assert (forall ((container us_rep8)) (! (dynamic_invariant1 (length8 container) true false true true) :pattern ((length8 container)))))
(assert (forall ((container us_rep8)) (! (let ((result (is_empty7 container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range12 item) (= (contains container item) true))))) (= (= result true) (= (length8 container) 0)))) :pattern ((is_empty7 container)))))
(define-fun dynamic_invariant12 ((temp___expr_867 Int) (temp___is_init_863 Bool) (temp___skip_constant_864 Bool) (temp___do_toplevel_865 Bool) (temp___do_typ_inv_866 Bool)) Bool (=> (or (= temp___is_init_863 true) (<= 0 2147483647)) (in_range13 temp___expr_867)))
(assert (forall ((container us_rep7)) (! (let ((result (length7 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false true true))) :pattern ((length7 container)))))
(declare-sort element_type3 0)
(declare-fun element_typeqtint3 (element_type3) Int)
(assert (forall ((i element_type3)) (and (<= 0 (element_typeqtint3 i)) (<= (element_typeqtint3 i) 2147483647))))
(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq23 (element_type3 element_type3) Bool)
(declare-const dummy23 element_type3)
(declare-datatypes () ((element_type__ref3 (mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref___10__projection ((a element_type__ref3)) element_type3 (element_type__content3 a))
(define-fun dynamic_invariant13 ((temp___expr_860 Int) (temp___is_init_856 Bool) (temp___skip_constant_857 Bool) (temp___do_toplevel_858 Bool) (temp___do_typ_inv_859 Bool)) Bool (=> (or (= temp___is_init_856 true) (<= 0 2147483647)) (in_range14 temp___expr_860)))
(assert (forall ((container us_rep7)) (forall ((position Int)) (! (=> (and (dynamic_invariant12 position true true true true) (and (<= 1 position) (<= position (last container)))) (dynamic_invariant13 (get1 container position) true false true true)) :pattern ((get1 container position))))))
(define-fun equivalent_keys ((left Int) (right Int)) Bool (and (not (< left right)) (not (< right left))))
(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)
(assert (forall ((container us_rep3)) (! (let ((result (length3 container))) (and (<= result (to_rep (rec__dic_of_cont__my_orma__map__capacity (us_split_discrs7 container)))) (dynamic_invariant1 result true false true true))) :pattern ((length3 container)))))
(declare-sort us_main_type9 0)
(declare-fun us_main_eq9 (us_main_type9 us_main_type9) Bool)
(declare-sort us_rep9 0)
(declare-fun bool_eq8 (us_rep9 us_rep9) Bool)
(declare-const value__size15 Int)
(declare-fun object__size15 (us_rep9) Int)
(declare-const value__alignment15 Int)
(declare-fun object__alignment15 (us_rep9) Int)
(assert (<= 0 value__size15))
(assert (forall ((a us_rep9)) (<= 0 (object__size15 a))))
(assert (<= 0 value__alignment15))
(assert (forall ((a us_rep9)) (<= 0 (object__alignment15 a))))
(declare-fun user_eq24 (us_rep9 us_rep9) Bool)
(declare-const dummy24 us_rep9)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 us_rep9)))))
(define-fun map__ref___7__projection ((a map__ref3)) us_rep9 (map__content3 a))
(declare-fun model__2 (us_rep3) us_rep9)
(declare-fun model____function_guard2 (us_rep9 us_rep3) Bool)
(declare-fun length9 (us_rep9) Int)
(declare-fun length__function_guard9 (Int us_rep9) Bool)
(declare-fun is_empty8 (us_rep9) Bool)
(declare-fun is_empty__function_guard8 (Bool us_rep9) Bool)
(define-fun default_initial_assumption9 ((temp___expr_1189 us_rep9) (temp___skip_top_level_1190 Bool)) Bool (=> (not (= temp___skip_top_level_1190 true)) (and (= (is_empty8 temp___expr_1189) true) (= (length9 temp___expr_1189) 0))))
(assert true)
(declare-fun oeq6 (us_rep9 us_rep9) Bool)
(declare-fun oeq__function_guard6 (Bool us_rep9 us_rep9) Bool)
(assert (forall ((left us_rep3) (right us_rep3)) (! (= (= (oeq2 left right) true) (= (oeq6 (model__2 left) (model__2 right)) true)) :pattern ((oeq2 left right)))))
(declare-fun has_key1 (us_rep9 Int) Bool)
(declare-fun has_key__function_guard1 (Bool us_rep9 Int) Bool)
(declare-sort key_type1 0)
(declare-fun key_typeqtint1 (key_type1) Int)
(assert (forall ((i key_type1)) (and (<= 0 (key_typeqtint1 i)) (<= (key_typeqtint1 i) 2147483647))))
(define-fun in_range15 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq25 (key_type1 key_type1) Bool)
(declare-const dummy25 key_type1)
(declare-datatypes () ((key_type__ref1 (mk_key_type__ref1 (key_type__content1 key_type1)))))
(define-fun key_type__ref___7__projection ((a key_type__ref1)) key_type1 (key_type__content1 a))
(define-fun dynamic_invariant14 ((temp___expr_1174 Int) (temp___is_init_1170 Bool) (temp___skip_constant_1171 Bool) (temp___do_toplevel_1172 Bool) (temp___do_typ_inv_1173 Bool)) Bool (=> (or (= temp___is_init_1170 true) (<= 0 2147483647)) (in_range15 temp___expr_1174)))
(assert (forall ((container us_rep9)) (forall ((key Int)) (! (=> (dynamic_invariant14 key true true true true) (=> (= (distinct 1 0) true) (=> (exists ((k Int)) (and (and (in_range15 k) (= (has_key1 container k) true)) (= (equivalent_keys k key) true))) (= (has_key1 container key) true)))) :pattern ((has_key1 container key))))))
(declare-fun witness1 (us_rep9 Int) Int)
(declare-fun witness__function_guard1 (Int us_rep9 Int) Bool)
(declare-fun w_get1 (us_rep9 Int) Int)
(declare-fun w_get__function_guard1 (Int us_rep9 Int) Bool)
(declare-fun get2 (us_rep9 Int) Int)
(declare-fun get__function_guard2 (Int us_rep9 Int) Bool)
(declare-sort element_type4 0)
(declare-fun element_typeqtint4 (element_type4) Int)
(assert (forall ((i element_type4)) (and (<= 0 (element_typeqtint4 i)) (<= (element_typeqtint4 i) 2147483647))))
(define-fun in_range16 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq26 (element_type4 element_type4) Bool)
(declare-const dummy26 element_type4)
(declare-datatypes () ((element_type__ref4 (mk_element_type__ref4 (element_type__content4 element_type4)))))
(define-fun element_type__ref___13__projection ((a element_type__ref4)) element_type4 (element_type__content4 a))
(define-fun dynamic_invariant15 ((temp___expr_1181 Int) (temp___is_init_1177 Bool) (temp___skip_constant_1178 Bool) (temp___do_toplevel_1179 Bool) (temp___do_typ_inv_1180 Bool)) Bool (=> (or (= temp___is_init_1177 true) (<= 0 2147483647)) (in_range16 temp___expr_1181)))
(assert (forall ((container us_rep9)) (forall ((key Int)) (! (=> (and (dynamic_invariant14 key true true true true) (= (has_key1 container key) true)) (let ((result (get2 container key))) (and (=> (= (distinct 1 0) true) (and (= result (w_get1 container (witness1 container key))) (forall ((k Int)) (=> (and (in_range15 k) (= (has_key1 container k) true)) (= (= (equivalent_keys k key) true) (= (witness1 container key) (witness1 container k))))))) (dynamic_invariant15 result true false true true)))) :pattern ((get2 container key))))))
(assert (forall ((container us_rep9)) (! (dynamic_invariant1 (length9 container) true false true true) :pattern ((length9 container)))))
(assert (forall ((left us_rep9) (right us_rep9)) (! (= (= (oeq6 left right) true) (and (forall ((key Int)) (=> (and (in_range15 key) (= (has_key1 left key) true)) (and (= (has_key1 right key) true) (= (get2 right key) (get2 left key))))) (forall ((key Int)) (=> (and (in_range15 key) (= (has_key1 right key) true)) (= (has_key1 left key) true))))) :pattern ((oeq6 left right)))))
(assert (forall ((container us_rep9)) (! (= (= (is_empty8 container) true) (forall ((key Int)) (not (and (in_range15 key) (= (has_key1 container key) true))))) :pattern ((is_empty8 container)))))
(declare-fun has_witness1 (us_rep9 Int) Bool)
(declare-fun has_witness__function_guard1 (Bool us_rep9 Int) Bool)
(assert true)
(assert (forall ((container us_rep9)) (forall ((key Int)) (! (=> (and (dynamic_invariant14 key true true true true) (= (has_key1 container key) true)) (let ((result (witness1 container key))) (and (= (has_witness1 container result) true) (dynamic_invariant1 result true false true true)))) :pattern ((witness1 container key))))))
(assert (forall ((container us_rep9)) (forall ((witness2 Int)) (! (=> (and (dynamic_invariant1 witness2 true true true true) (= (has_witness1 container witness2) true)) (dynamic_invariant15 (w_get1 container witness2) true false true true)) :pattern ((w_get1 container witness2))))))
(define-fun equivalent_elements ((left Int) (right Int)) Bool (and (not (< left right)) (not (< right left))))
(declare-fun equivalent_elements__function_guard (Bool Int Int) Bool)
(assert (forall ((container us_rep4)) (! (let ((result (length4 container))) (and (<= result (to_rep (rec__dic_of_cont__my_orse__set__capacity (us_split_discrs9 container)))) (dynamic_invariant1 result true false true true))) :pattern ((length4 container)))))
(declare-sort us_main_type10 0)
(declare-fun us_main_eq10 (us_main_type10 us_main_type10) Bool)
(declare-sort us_rep10 0)
(declare-fun bool_eq9 (us_rep10 us_rep10) Bool)
(declare-const value__size16 Int)
(declare-fun object__size16 (us_rep10) Int)
(declare-const value__alignment16 Int)
(declare-fun object__alignment16 (us_rep10) Int)
(assert (<= 0 value__size16))
(assert (forall ((a us_rep10)) (<= 0 (object__size16 a))))
(assert (<= 0 value__alignment16))
(assert (forall ((a us_rep10)) (<= 0 (object__alignment16 a))))
(declare-fun user_eq27 (us_rep10 us_rep10) Bool)
(declare-const dummy27 us_rep10)
(declare-datatypes () ((sequence__ref1 (mk_sequence__ref1 (sequence__content1 us_rep10)))))
(define-fun sequence__ref___5__projection ((a sequence__ref1)) us_rep10 (sequence__content1 a))
(declare-fun length10 (us_rep10) Int)
(declare-fun length__function_guard10 (Int us_rep10) Bool)
(declare-fun get3 (us_rep10 Int) Int)
(declare-fun get__function_guard3 (Int us_rep10 Int) Bool)
(define-fun e_bigger_than_range ((container us_rep10) (fst Int) (lst Int) (item Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< (get3 container i) item))) true false))
(declare-fun e_bigger_than_range__function_guard (Bool us_rep10 Int Int Int) Bool)
(define-fun e_smaller_than_range ((container us_rep10) (fst Int) (lst Int) (item Int)) Bool (ite (forall ((i Int)) (=> (and (<= fst i) (<= i lst)) (< item (get3 container i)))) true false))
(declare-fun e_smaller_than_range__function_guard (Bool us_rep10 Int Int Int) Bool)
(define-fun e_is_find ((container us_rep10) (item Int) (position Int)) Bool (and (ite (< 0 position) (e_bigger_than_range container 1 (- position 1) item) (distinct 1 0)) (ite (< position (length10 container)) (e_smaller_than_range container (+ position 1) (length10 container) item) (distinct 1 0))))
(declare-fun e_is_find__function_guard (Bool us_rep10 Int Int) Bool)
(declare-fun find1 (us_rep10 Int) Int)
(declare-fun find__function_guard1 (Int us_rep10 Int) Bool)
(declare-sort element_type5 0)
(declare-fun element_typeqtint5 (element_type5) Int)
(assert (forall ((i element_type5)) (and (<= 0 (element_typeqtint5 i)) (<= (element_typeqtint5 i) 2147483647))))
(define-fun in_range17 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq28 (element_type5 element_type5) Bool)
(declare-const dummy28 element_type5)
(declare-datatypes () ((element_type__ref5 (mk_element_type__ref5 (element_type__content5 element_type5)))))
(define-fun element_type__ref___16__projection ((a element_type__ref5)) element_type5 (element_type__content5 a))
(define-fun dynamic_invariant16 ((temp___expr_1349 Int) (temp___is_init_1345 Bool) (temp___skip_constant_1346 Bool) (temp___do_toplevel_1347 Bool) (temp___do_typ_inv_1348 Bool)) Bool (=> (or (= temp___is_init_1345 true) (<= 0 2147483647)) (in_range17 temp___expr_1349)))
(define-fun last1 ((container us_rep10)) Int (+ 0 (length10 container)))
(declare-fun last__function_guard1 (Int us_rep10) Bool)
(define-fun oeq7 ((left us_rep10) (right us_rep10)) Bool (and (= (length10 left) (length10 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last1 left))) (= (get3 left n) (get3 right n)))) true false)))
(declare-fun oeq__function_guard7 (Bool us_rep10 us_rep10) Bool)
(assert (forall ((a us_rep10) (b us_rep10)) (! (= (user_eq27 a b) (oeq7 a b)) :pattern ((user_eq27 a b)))))
(define-fun default_initial_assumption10 ((temp___expr_1423 us_rep10) (temp___skip_top_level_1424 Bool)) Bool (=> (not (= temp___skip_top_level_1424 true)) (= (length10 temp___expr_1423) 0)))
(assert (forall ((container us_rep10)) (forall ((item Int)) (! (=> (dynamic_invariant16 item true true true true) (let ((result (find1 container item))) (and (=> (< 0 result) (and (<= result (length10 container)) (= (equivalent_elements item (get3 container result)) true))) (dynamic_invariant1 result true false true true)))) :pattern ((find1 container item))))))
(define-fun e_elements_included1 ((left us_rep10) (right us_rep10)) Bool (ite (forall ((i Int)) (=> (and (<= 1 i) (<= i (length10 left))) (and (< 0 (find1 right (get3 left i))) (= (get3 right (find1 right (get3 left i))) (get3 left i))))) true false))
(declare-fun e_elements_included__function_guard1 (Bool us_rep10 us_rep10) Bool)
(declare-sort us_main_type11 0)
(declare-fun us_main_eq11 (us_main_type11 us_main_type11) Bool)
(declare-sort us_rep11 0)
(declare-fun bool_eq10 (us_rep11 us_rep11) Bool)
(declare-const value__size17 Int)
(declare-fun object__size17 (us_rep11) Int)
(declare-const value__alignment17 Int)
(declare-fun object__alignment17 (us_rep11) Int)
(assert (<= 0 value__size17))
(assert (forall ((a us_rep11)) (<= 0 (object__size17 a))))
(assert (<= 0 value__alignment17))
(assert (forall ((a us_rep11)) (<= 0 (object__alignment17 a))))
(declare-fun user_eq29 (us_rep11 us_rep11) Bool)
(declare-const dummy29 us_rep11)
(declare-datatypes () ((set__ref3 (mk_set__ref3 (set__content3 us_rep11)))))
(define-fun set__ref___4__projection ((a set__ref3)) us_rep11 (set__content3 a))
(declare-fun length11 (us_rep11) Int)
(declare-fun length__function_guard11 (Int us_rep11) Bool)
(declare-fun model__3 (us_rep4) us_rep11)
(declare-fun model____function_guard3 (us_rep11 us_rep4) Bool)
(declare-fun is_empty9 (us_rep11) Bool)
(declare-fun is_empty__function_guard9 (Bool us_rep11) Bool)
(define-fun default_initial_assumption11 ((temp___expr_1387 us_rep11) (temp___skip_top_level_1388 Bool)) Bool (=> (not (= temp___skip_top_level_1388 true)) (= (is_empty9 temp___expr_1387) true)))
(assert (forall ((container us_rep4)) (! (= (length11 (model__3 container)) (length4 container)) :pattern ((model__3 container)))))
(declare-fun contains1 (us_rep11 Int) Bool)
(declare-fun contains__function_guard1 (Bool us_rep11 Int) Bool)
(define-fun iter_has_element1 ((container us_rep10) (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position (last1 container)) true false)))
(declare-fun iter_has_element__function_guard1 (Bool us_rep10 Int) Bool)
(declare-fun elements1 (us_rep4) us_rep10)
(declare-fun elements__function_guard1 (us_rep10 us_rep4) Bool)
(declare-sort element_type6 0)
(declare-fun element_typeqtint6 (element_type6) Int)
(assert (forall ((i element_type6)) (and (<= 0 (element_typeqtint6 i)) (<= (element_typeqtint6 i) 2147483647))))
(define-fun in_range18 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq30 (element_type6 element_type6) Bool)
(declare-const dummy30 element_type6)
(declare-datatypes () ((element_type__ref6 (mk_element_type__ref6 (element_type__content6 element_type6)))))
(define-fun element_type__ref___17__projection ((a element_type__ref6)) element_type6 (element_type__content6 a))
(declare-sort extended_index1 0)
(declare-fun extended_indexqtint1 (extended_index1) Int)
(assert (forall ((i extended_index1)) (and (<= 0 (extended_indexqtint1 i)) (<= (extended_indexqtint1 i) 2147483647))))
(define-fun in_range19 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq31 (extended_index1 extended_index1) Bool)
(declare-const dummy31 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___5__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(assert (forall ((container us_rep4)) (! (let ((result (elements1 container))) (and (and (and (= (length10 result) (length4 container)) (forall ((temp___1461 Int)) (=> (and (in_range19 temp___1461) (= (iter_has_element1 result temp___1461) true)) (= (contains1 (model__3 container) (get3 result temp___1461)) true)))) (forall ((item Int)) (=> (and (in_range18 item) (= (contains1 (model__3 container) item) true)) (and (< 0 (find1 result item)) (= (equivalent_elements (get3 result (find1 result item)) item) true))))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (length4 container))) (and (= (find1 result (get3 result i)) i) (= (e_is_find result (get3 result i) i) true)))))) :pattern ((elements1 container)))))
(assert (forall ((left us_rep4) (right us_rep4)) (! (ite (= (oeq3 left right) true) (= (oeq7 (elements1 left) (elements1 right)) true) (or (not (= (e_elements_included1 (elements1 left) (elements1 right)) true)) (not (= (e_elements_included1 (elements1 right) (elements1 left)) true)))) :pattern ((oeq3 left right)))))
(define-fun dynamic_invariant17 ((temp___expr_1379 Int) (temp___is_init_1375 Bool) (temp___skip_constant_1376 Bool) (temp___do_toplevel_1377 Bool) (temp___do_typ_inv_1378 Bool)) Bool (=> (or (= temp___is_init_1375 true) (<= 0 2147483647)) (in_range18 temp___expr_1379)))
(assert (forall ((container us_rep11)) (forall ((item Int)) (! (=> (dynamic_invariant17 item true true true true) (=> (= (distinct 1 0) true) (=> (exists ((e Int)) (and (and (in_range18 e) (= (contains1 container e) true)) (= (equivalent_elements e item) true))) (= (contains1 container item) true)))) :pattern ((contains1 container item))))))
(assert (forall ((container us_rep11)) (! (dynamic_invariant1 (length11 container) true false true true) :pattern ((length11 container)))))
(assert (forall ((container us_rep11)) (! (let ((result (is_empty9 container))) (and (= (= result true) (forall ((item Int)) (not (and (in_range18 item) (= (contains1 container item) true))))) (= (= result true) (= (length11 container) 0)))) :pattern ((is_empty9 container)))))
(define-fun dynamic_invariant18 ((temp___expr_1415 Int) (temp___is_init_1411 Bool) (temp___skip_constant_1412 Bool) (temp___do_toplevel_1413 Bool) (temp___do_typ_inv_1414 Bool)) Bool (=> (or (= temp___is_init_1411 true) (<= 0 2147483647)) (in_range19 temp___expr_1415)))
(assert (forall ((container us_rep10)) (! (let ((result (length10 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false true true))) :pattern ((length10 container)))))
(declare-sort element_type7 0)
(declare-fun element_typeqtint7 (element_type7) Int)
(assert (forall ((i element_type7)) (and (<= 0 (element_typeqtint7 i)) (<= (element_typeqtint7 i) 2147483647))))
(define-fun in_range20 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)
(declare-fun user_eq32 (element_type7 element_type7) Bool)
(declare-const dummy32 element_type7)
(declare-datatypes () ((element_type__ref7 (mk_element_type__ref7 (element_type__content7 element_type7)))))
(define-fun element_type__ref___18__projection ((a element_type__ref7)) element_type7 (element_type__content7 a))
(define-fun dynamic_invariant19 ((temp___expr_1408 Int) (temp___is_init_1404 Bool) (temp___skip_constant_1405 Bool) (temp___do_toplevel_1406 Bool) (temp___do_typ_inv_1407 Bool)) Bool (=> (or (= temp___is_init_1404 true) (<= 0 2147483647)) (in_range20 temp___expr_1408)))
(assert (forall ((container us_rep10)) (forall ((position Int)) (! (=> (and (dynamic_invariant18 position true true true true) (and (<= 1 position) (<= position (last1 container)))) (dynamic_invariant19 (get3 container position) true false true true)) :pattern ((get3 container position))))))
(define-fun dynamic_invariant20 ((temp___expr_1610 Int) (temp___is_init_1606 Bool) (temp___skip_constant_1607 Bool) (temp___do_toplevel_1608 Bool) (temp___do_typ_inv_1609 Bool)) Bool (=> (or (= temp___is_init_1606 true) (<= 0 2147483647)) (in_range1 temp___expr_1610)))
(define-fun capacity1 ((container us_rep5)) Int (ite (= (distinct 1 0) true) (to_rep2 (rec__dic_of_cont__my_fove__vector__capacity (us_split_discrs11 container))) 2147483647))
(declare-fun capacity__function_guard (Int us_rep5) Bool)
(assert (forall ((container us_rep5)) (! (let ((result (length5 container))) (and (<= result (capacity1 container)) (dynamic_invariant20 result true false true true))) :pattern ((length5 container)))))
(declare-const dlli__split_fields us_main_type)
(declare-const dhama__split_fields us_main_type1)
(declare-const dhase__split_fields us_main_type2)
(declare-const dorma__split_fields us_main_type3)
(declare-const dorse__split_fields us_main_type4)
(declare-const dfove__split_fields us_main_type5)
(declare-const us Int)
(declare-const dic_of_cont__main__R2b__assume (_ BitVec 32))
(declare-const us1 (_ BitVec 32))
(declare-const us2 Int)
(declare-const dic_of_cont__main__R5b__assume (_ BitVec 32))
(declare-const us3 (_ BitVec 32))
(declare-const us4 Int)
(declare-const us5 Int)
(declare-const us6 Int)
(declare-const us7 Int)
(assert (in_range capacity))
(assert (and (= us capacity) (in_range capacity)))
(assert (default_initial_assumption (mk___rep dlli__split_discrs (mk___split_fields dlli__split_fields)) false))
(assert (= capacity (to_rep (rec__dic_of_cont__my_dlli__list__capacity dlli__split_discrs))))
(assert (= dic_of_cont__main__R2b__assume (default_modulus capacity)))
(assert (= dic_of_cont__main__R2b__assume r2b))
(assert (= us1 r2b))
(assert (and (= us2 capacity) (in_range capacity)))
(assert (default_initial_assumption1 (mk___rep1 dhama__split_discrs (mk___split_fields1 dhama__split_fields)) false))
(assert (and (= capacity (to_rep (rec__dic_of_cont__my_hama__map__capacity dhama__split_discrs))) (= r2b (to_rep1 (rec__dic_of_cont__my_hama__map__modulus dhama__split_discrs)))))
(assert (= dic_of_cont__main__R5b__assume (default_modulus1 capacity)))
(assert (= dic_of_cont__main__R5b__assume r5b))
(assert (= us3 r5b))
(assert (and (= us4 capacity) (in_range capacity)))
(assert (default_initial_assumption2 (mk___rep2 dhase__split_discrs (mk___split_fields2 dhase__split_fields)) false))
(assert (and (= capacity (to_rep (rec__dic_of_cont__my_hase__set__capacity dhase__split_discrs))) (= r5b (to_rep1 (rec__dic_of_cont__my_hase__set__modulus dhase__split_discrs)))))
(assert (and (= us5 capacity) (in_range capacity)))
(assert (default_initial_assumption3 (mk___rep3 dorma__split_discrs (mk___split_fields3 dorma__split_fields)) false))
(assert (= capacity (to_rep (rec__dic_of_cont__my_orma__map__capacity dorma__split_discrs))))
(assert (and (= us6 capacity) (in_range capacity)))
(assert (default_initial_assumption4 (mk___rep4 dorse__split_discrs (mk___split_fields4 dorse__split_fields)) false))
(assert (= capacity (to_rep (rec__dic_of_cont__my_orse__set__capacity dorse__split_discrs))))
(assert (and (= us7 capacity) (in_range1 capacity)))
(assert (default_initial_assumption5 (mk___rep5 dfove__split_discrs (mk___split_fields5 dfove__split_fields)) false))
(assert (= capacity (to_rep2 (rec__dic_of_cont__my_fove__vector__capacity dfove__split_discrs))))
(assert (= (is_empty (mk___rep dlli__split_discrs (mk___split_fields dlli__split_fields))) true))
(assert (= (to_rep (rec__dic_of_cont__my_dlli__list__capacity dlli__split_discrs)) capacity))
(assert (= (is_empty1 (mk___rep1 dhama__split_discrs (mk___split_fields1 dhama__split_fields))) true))
(assert (= (to_rep (rec__dic_of_cont__my_hama__map__capacity dhama__split_discrs)) capacity))
(assert (= (is_empty2 (mk___rep2 dhase__split_discrs (mk___split_fields2 dhase__split_fields))) true))
(assert (= (to_rep (rec__dic_of_cont__my_hase__set__capacity dhase__split_discrs)) capacity))
(assert (not (= (is_empty3 (mk___rep3 dorma__split_discrs (mk___split_fields3 dorma__split_fields))) true)))
(check-sat)
(exit)
