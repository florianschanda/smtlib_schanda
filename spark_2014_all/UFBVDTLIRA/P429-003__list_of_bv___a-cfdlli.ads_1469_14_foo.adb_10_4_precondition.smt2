(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 8) Int) Bool)
(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort count_type 0)
(declare-fun count_typeqtint (count_type) Int)
(assert (forall ((i count_type)) (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (count_type count_type) Bool)
(declare-const dummy count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun to_rep ((x count_type)) Int (count_typeqtint x))
(declare-fun of_rep (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__foo__lists__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type (rec__foo__lists__list__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__foo__lists__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type (rec__foo__lists__list a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__foo__lists__list__capacity (us_split_discrs1 a))) (to_rep (rec__foo__lists__list__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__foo__lists__list (us_split_fields1 a)) (rec__foo__lists__list (us_split_fields1 b))) true)) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const foo__lists__list__capacity__first__bit Int)
(declare-const foo__lists__list__capacity__last__bit Int)
(declare-const foo__lists__list__capacity__position Int)
(assert (<= 0 foo__lists__list__capacity__first__bit))
(assert (< foo__lists__list__capacity__first__bit foo__lists__list__capacity__last__bit))
(assert (<= 0 foo__lists__list__capacity__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep)))))
(define-fun list__ref___projection ((a list__ref)) us_rep (list__content a))
(declare-fun length (us_rep) Int)
(declare-fun length__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 2147483647)) (in_range1 temp___expr_165)))
(assert (forall ((container us_rep)) (! (let ((result (length container))) (and (<= result (to_rep (rec__foo__lists__list__capacity (us_split_discrs1 container)))) (dynamic_invariant result true false true true))) :pattern ((length container)))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep1 0)
(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq2 (us_rep1 us_rep1) Bool)
(declare-const dummy2 us_rep1)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content a))
(declare-fun get (us_rep1 Int) (_ BitVec 8))
(declare-fun get__function_guard ((_ BitVec 8) us_rep1 Int) Bool)
(define-fun contains ((container us_rep1) (fst Int) (lst Int) (item (_ BitVec 8))) Bool (ite (exists ((i Int)) (and (and (<= fst i) (<= i lst)) (= (get container i) item))) true false))
(declare-fun contains__function_guard (Bool us_rep1 Int Int (_ BitVec 8)) Bool)
(declare-fun length1 (us_rep1) Int)
(declare-fun length__function_guard1 (Int us_rep1) Bool)
(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep1) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__foo__lists__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type (rec__foo__lists__cursor__node a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (= (to_rep (rec__foo__lists__cursor__node (us_split_fields3 a))) (to_rep (rec__foo__lists__cursor__node (us_split_fields3 b)))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const foo__lists__cursor__node__first__bit Int)
(declare-const foo__lists__cursor__node__last__bit Int)
(declare-const foo__lists__cursor__node__position Int)
(assert (<= 0 foo__lists__cursor__node__first__bit))
(assert (< foo__lists__cursor__node__first__bit foo__lists__cursor__node__last__bit))
(assert (<= 0 foo__lists__cursor__node__position))
(declare-fun user_eq3 (us_rep2 us_rep2) Bool)
(declare-const dummy3 us_rep2)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep2)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep2 (cursor__content a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep2)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep2 (key_type__content a))
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep3 0)
(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-fun user_eq4 (us_rep3 us_rep3) Bool)
(declare-const dummy4 us_rep3)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep3)))))
(define-fun map__ref___projection ((a map__ref)) us_rep3 (map__content a))
(declare-fun get1 (us_rep3 us_rep2) Int)
(declare-fun get__function_guard1 (Int us_rep3 us_rep2) Bool)
(declare-fun has_key (us_rep3 us_rep2) Bool)
(declare-fun has_key__function_guard (Bool us_rep3 us_rep2) Bool)
(declare-fun witness (us_rep3 us_rep2) Int)
(declare-fun witness__function_guard (Int us_rep3 us_rep2) Bool)
(declare-fun w_get (us_rep3 Int) Int)
(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 1 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq5 (element_type element_type) Bool)
(declare-const dummy5 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_286 Int) (temp___is_init_282 Bool) (temp___skip_constant_283 Bool) (temp___do_toplevel_284 Bool) (temp___do_typ_inv_285 Bool)) Bool (=> (or (= temp___is_init_282 true) (<= 1 2147483647)) (in_range2 temp___expr_286)))
(declare-fun length2 (us_rep3) Int)
(declare-fun length__function_guard2 (Int us_rep3) Bool)
(declare-fun is_empty (us_rep3) Bool)
(declare-fun is_empty__function_guard (Bool us_rep3) Bool)
(define-fun default_initial_assumption ((temp___expr_294 us_rep3) (temp___skip_top_level_295 Bool)) Bool (=> (not (= temp___skip_top_level_295 true)) (and (= (is_empty temp___expr_294) true) (= (length2 temp___expr_294) 0))))
(define-fun default_initial_assumption1 ((temp___expr_280 us_rep2) (temp___skip_top_level_281 Bool)) Bool (= (to_rep (rec__foo__lists__cursor__node (us_split_fields3 temp___expr_280))) 0))
(assert (forall ((container us_rep3)) (forall ((key us_rep2)) (! (=> (= (has_key container key) true) (let ((result (get1 container key))) (and (=> (= (distinct 0 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep2)) (=> (= (has_key container k) true) (= (= (bool_eq2 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant1 result true false true true)))) :pattern ((get1 container key))))))
(declare-fun model__ (us_rep) us_rep1)
(declare-fun model____function_guard (us_rep1 us_rep) Bool)
(define-fun oeq ((left us_rep1) (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)
(assert (forall ((a us_rep1) (b us_rep1)) (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_272 us_rep1) (temp___skip_top_level_273 Bool)) Bool (=> (not (= temp___skip_top_level_273 true)) (= (length1 temp___expr_272) 0)))
(assert (forall ((container us_rep)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(declare-fun positions (us_rep) us_rep3)
(declare-fun positions__function_guard (us_rep3 us_rep) Bool)
(declare-const no_element us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(assert (forall ((container us_rep)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep2)) (=> (= (has_key result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length container))) (forall ((j us_rep2)) (=> (= (has_key result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq2 i j) true))))))))) :pattern ((positions container)))))
(define-fun has_element ((container us_rep) (position us_rep2)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep us_rep2) Bool)
(declare-sort element_type1 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq6 (element_type1 element_type1) Bool)
(declare-const dummy6 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant2 ((temp___expr_221 (_ BitVec 8)) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool) (temp___do_typ_inv_220 Bool)) Bool true)
(define-fun default_initial_assumption3 ((temp___expr_235 us_rep2) (temp___skip_top_level_236 Bool)) Bool (= (to_rep (rec__foo__lists__cursor__node (us_split_fields3 temp___expr_235))) 0))
(declare-const container us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const item (_ BitVec 8))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const position us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const rliteral count_type)
(assert (= (count_typeqtint rliteral) 0))
(assert (= no_element (mk___rep1 (mk___split_fields1 rliteral))))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (extended_index extended_index) Bool)
(declare-const dummy7 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant3 ((temp___expr_264 Int) (temp___is_init_260 Bool) (temp___skip_constant_261 Bool) (temp___do_toplevel_262 Bool) (temp___do_typ_inv_263 Bool)) Bool (=> (or (= temp___is_init_260 true) (<= 0 2147483647)) (in_range3 temp___expr_264)))
(assert (forall ((container1 us_rep1)) (! (let ((result (length1 container1))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false true true))) :pattern ((length1 container1)))))
(declare-sort element_type2 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))
(declare-fun user_eq8 (element_type2 element_type2) Bool)
(declare-const dummy8 element_type2)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___2__projection ((a element_type__ref2)) element_type2 (element_type__content2 a))
(define-fun dynamic_invariant4 ((temp___expr_257 (_ BitVec 8)) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool true)
(assert (forall ((container1 us_rep1)) (forall ((position1 Int)) (! (=> (and (dynamic_invariant3 position1 true true true true) (and (<= 1 position1) (<= position1 (last container1)))) (dynamic_invariant4 (get container1 position1) true false true true)) :pattern ((get container1 position1))))))
(assert (forall ((container1 us_rep3)) (forall ((key us_rep2)) (! (=> (= (distinct 0 0) true) (=> (exists ((k us_rep2)) (and (= (has_key container1 k) true) (= (bool_eq2 k key) true))) (= (has_key container1 key) true))) :pattern ((has_key container1 key))))))
(assert (forall ((container1 us_rep3)) (! (dynamic_invariant (length2 container1) true false true true) :pattern ((length2 container1)))))
(assert (forall ((container1 us_rep3)) (! (= (= (is_empty container1) true) (forall ((key us_rep2)) (not (= (has_key container1 key) true)))) :pattern ((is_empty container1)))))
(declare-fun has_witness (us_rep3 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)
(assert true)
(assert (forall ((container1 us_rep3)) (forall ((key us_rep2)) (! (=> (= (has_key container1 key) true) (let ((result (witness container1 key))) (and (= (has_witness container1 result) true) (dynamic_invariant result true false true true)))) :pattern ((witness container1 key))))))
(assert (forall ((container1 us_rep3)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant witness1 true true true true) (= (has_witness container1 witness1) true)) (dynamic_invariant1 (w_get container1 witness1) true false true true)) :pattern ((w_get container1 witness1))))))
(declare-const o us_rep1)
(declare-const o1 us_rep3)
(declare-const o2 Int)
(assert (= (mk___rep1 (mk___split_fields1 rliteral)) no_element))
(assert (or (= (has_key (positions container) position) true) (= (bool_eq2 position no_element) true)))
(assert (=> (= (bool_eq2 position no_element) true) (and (= o2 (length container)) (and (in_range1 o2) (<= o2 (to_rep (rec__foo__lists__list__capacity (us_split_discrs1 container))))))))
(assert (=> (not (= (bool_eq2 position no_element) true)) (and (= o1 (positions container)) (and (not (= (has_key o1 no_element) true)) (forall ((i us_rep2)) (=> (= (has_key o1 i) true) (and (and (<= 1 (get1 o1 i)) (<= (get1 o1 i) (length container))) (forall ((j us_rep2)) (=> (= (has_key o1 j) true) (=> (= (get1 o1 i) (get1 o1 j)) (= (bool_eq2 i j) true)))))))))))
(assert (=> (not (= (bool_eq2 position no_element) true)) (and (= o2 (get1 o1 position)) (and (in_range2 o2) (=> (= (distinct 0 0) true) (and (= o2 (w_get o1 (witness o1 position))) (forall ((k us_rep2)) (=> (= (has_key o1 k) true) (= (= (bool_eq2 k position) true) (= (witness o1 position) (witness o1 k)))))))))))
(assert (and (= o (model__ container)) (= (length1 o) (length container))))
(assert (not (<= o2 (last o))))
(check-sat)
(exit)
