(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort u64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (u64 u64) Bool)
(declare-const dummy u64)
(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))
(define-fun dynamic_invariant ((temp___expr_213 (_ BitVec 64)) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool)) Bool true)
(declare-fun sqr ((_ BitVec 64)) (_ BitVec 64))
(declare-fun sqr__function_guard ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64))) (! (=> (dynamic_invariant x true true true) (dynamic_invariant (sqr x) true false true)) :pattern ((sqr x)))))
(assert (forall ((x (_ BitVec 64))) (! (=> (dynamic_invariant x true true true) (= (sqr x) (bvmul x x))) :pattern ((sqr x)))))
(declare-const x (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun pow21 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun pow2__function_guard ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x1 (_ BitVec 64))) (! (=> (and (dynamic_invariant x1 true true true) (bvule x1 ((_ int2bv 64) 64))) (dynamic_invariant (pow21 x1) true false true)) :pattern ((pow21 x1)))))
(assert (forall ((x1 (_ BitVec 64))) (! (=> (dynamic_invariant x1 true true true) (= (pow21 x1) (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) (bv2nat x1))))) :pattern ((pow21 x1)))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const num (_ BitVec 64))
(declare-const bits (_ BitVec 64))
(declare-const res (_ BitVec 64))
(declare-const b (_ BitVec 64))
(declare-const i (_ BitVec 64))
(declare-const m (_ BitVec 64))
(declare-const bits_g (_ BitVec 64))
(declare-const res_g (_ BitVec 64))
(declare-const p64__sqrt_von_neumann_aux64__result (_ BitVec 64))
(declare-const temp___223 (_ BitVec 64))
(declare-const temp___221 (_ BitVec 64))
(declare-const temp___222 (_ BitVec 64))
(declare-const temp___219 (_ BitVec 64))
(declare-const temp___220 (_ BitVec 64))
(declare-const temp___217 (_ BitVec 64))
(declare-const temp___218 (_ BitVec 64))
(declare-const temp___216 (_ BitVec 64))
(declare-const temp___224 (_ BitVec 64))
(declare-const o (_ BitVec 64))
(declare-const o1 (_ BitVec 64))
(declare-const o2 (_ BitVec 64))
(declare-const o3 (_ BitVec 64))
(declare-const o4 (_ BitVec 64))
(declare-const o5 (_ BitVec 64))
(declare-const o6 (_ BitVec 64))
(declare-const o7 (_ BitVec 64))
(declare-const o8 (_ BitVec 64))
(declare-const o9 (_ BitVec 64))
(declare-const o10 (_ BitVec 64))
(declare-const o11 (_ BitVec 64))
(declare-const o12 (_ BitVec 64))
(declare-const o13 (_ BitVec 64))
(declare-const o14 (_ BitVec 64))
(declare-const o15 (_ BitVec 64))
(declare-const o16 (_ BitVec 64))
(declare-const o17 (_ BitVec 64))
(declare-const b1 (_ BitVec 64))
(declare-const result (_ BitVec 64))
(declare-const i1 (_ BitVec 64))
(declare-const result1 (_ BitVec 64))
(declare-const num1 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(declare-const bits1 (_ BitVec 64))
(declare-const result3 (_ BitVec 64))
(declare-const res1 (_ BitVec 64))
(declare-const result4 (_ BitVec 64))
(declare-const m1 (_ BitVec 64))
(declare-const result5 (_ BitVec 64))
(declare-const bits_g1 (_ BitVec 64))
(declare-const result6 (_ BitVec 64))
(declare-const res_g1 (_ BitVec 64))
(declare-const result7 (_ BitVec 64))
(declare-const i2 (_ BitVec 64))
(declare-const result8 (_ BitVec 64))
(declare-const m2 (_ BitVec 64))
(declare-const result9 (_ BitVec 64))
(declare-const b2 (_ BitVec 64))
(declare-const result10 (_ BitVec 64))
(declare-const res2 (_ BitVec 64))
(declare-const result11 t__ref)
(declare-const num2 (_ BitVec 64))
(declare-const result12 t__ref)
(declare-const res3 (_ BitVec 64))
(declare-const result13 t__ref)
(declare-const res_g2 (_ BitVec 64))
(declare-const result14 t__ref)
(declare-const bits2 (_ BitVec 64))
(declare-const result15 t__ref)
(declare-const bits_g2 (_ BitVec 64))
(declare-const num3 (_ BitVec 64))
(declare-const bits3 (_ BitVec 64))
(declare-const res4 (_ BitVec 64))
(declare-const b3 (_ BitVec 64))
(declare-const i3 (_ BitVec 64))
(declare-const m3 (_ BitVec 64))
(declare-const bits_g3 (_ BitVec 64))
(declare-const res_g3 (_ BitVec 64))
(declare-const temp___2241 (_ BitVec 64))
(declare-const result16 t__ref)
(declare-const temp___2242 (_ BitVec 64))
(declare-const result17 t__ref)
(declare-const i4 (_ BitVec 64))
(declare-const result18 t__ref)
(declare-const m4 (_ BitVec 64))
(declare-const result19 t__ref)
(declare-const b4 (_ BitVec 64))
(declare-const result20 t__ref)
(declare-const res5 (_ BitVec 64))
(declare-const result21 t__ref)
(declare-const num4 (_ BitVec 64))
(declare-const result22 t__ref)
(declare-const res6 (_ BitVec 64))
(declare-const result23 t__ref)
(declare-const res_g4 (_ BitVec 64))
(declare-const result24 t__ref)
(declare-const bits4 (_ BitVec 64))
(declare-const result25 t__ref)
(declare-const bits_g4 (_ BitVec 64))
(declare-const num5 t__ref)
(declare-const bits5 t__ref)
(declare-const res7 t__ref)
(declare-const b5 t__ref)
(declare-const i5 t__ref)
(declare-const m5 t__ref)
(declare-const bits_g5 t__ref)
(declare-const res_g5 t__ref)
(declare-const num6 (_ BitVec 64))
(declare-const bits6 (_ BitVec 64))
(declare-const res8 (_ BitVec 64))
(declare-const b6 (_ BitVec 64))
(declare-const i6 (_ BitVec 64))
(declare-const m6 (_ BitVec 64))
(declare-const bits_g6 (_ BitVec 64))
(declare-const res_g6 (_ BitVec 64))
(declare-const num7 t__ref)
(declare-const bits7 t__ref)
(declare-const res9 t__ref)
(declare-const b7 t__ref)
(declare-const i7 t__ref)
(declare-const m7 t__ref)
(declare-const bits_g7 t__ref)
(declare-const res_g7 t__ref)
(declare-const num8 (_ BitVec 64))
(declare-const bits8 (_ BitVec 64))
(declare-const res10 (_ BitVec 64))
(declare-const b8 (_ BitVec 64))
(declare-const i8 (_ BitVec 64))
(declare-const m8 (_ BitVec 64))
(declare-const bits_g8 (_ BitVec 64))
(declare-const res_g8 (_ BitVec 64))
(declare-const num9 t__ref)
(declare-const bits9 t__ref)
(declare-const res11 t__ref)
(declare-const b9 t__ref)
(declare-const i9 t__ref)
(declare-const m9 t__ref)
(declare-const bits_g9 t__ref)
(declare-const res_g9 t__ref)
(declare-const num10 (_ BitVec 64))
(declare-const bits10 (_ BitVec 64))
(declare-const res12 (_ BitVec 64))
(declare-const b10 (_ BitVec 64))
(declare-const i10 (_ BitVec 64))
(declare-const m10 (_ BitVec 64))
(declare-const bits_g10 (_ BitVec 64))
(declare-const res_g10 (_ BitVec 64))
(declare-const result26 t__ref)
(declare-const p64__sqrt_von_neumann_aux64__result1 (_ BitVec 64))
(declare-const p64__sqrt_von_neumann_aux64__result2 t__ref)
(declare-const p64__sqrt_von_neumann_aux64__result3 (_ BitVec 64))
(declare-const num11 t__ref)
(declare-const bits11 t__ref)
(declare-const res13 t__ref)
(declare-const b11 t__ref)
(declare-const i11 t__ref)
(declare-const m11 t__ref)
(declare-const bits_g11 t__ref)
(declare-const res_g11 t__ref)
(declare-const p64__sqrt_von_neumann_aux64__result4 t__ref)
(declare-const num12 (_ BitVec 64))
(declare-const bits12 (_ BitVec 64))
(declare-const res14 (_ BitVec 64))
(declare-const b12 (_ BitVec 64))
(declare-const i12 (_ BitVec 64))
(declare-const m12 (_ BitVec 64))
(declare-const bits_g12 (_ BitVec 64))
(declare-const res_g12 (_ BitVec 64))
(declare-const p64__sqrt_von_neumann_aux64__result5 (_ BitVec 64))
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (= (mk_t__ref result) (mk_t__ref i)))
(assert (= i1 ((_ int2bv 64) 0)))
(assert true)
(assert true)
(assert true)
(assert true)
(assert (= (mk_t__ref result1) (mk_t__ref num)))
(assert (= num1 x))
(assert (bvule num1 ((_ int2bv 64) 18446744073709551615)))
(assert (= (mk_t__ref result2) (mk_t__ref bits)))
(assert (= bits1 ((_ int2bv 64) 4611686018427387904)))
(assert (= (mk_t__ref result3) (mk_t__ref res)))
(assert (= res1 ((_ int2bv 64) 0)))
(assert (= (mk_t__ref result4) (mk_t__ref m)))
(assert (= m1 ((_ int2bv 64) 32)))
(assert (= (mk_t__ref result5) (mk_t__ref bits_g)))
(assert (= bits_g1 ((_ int2bv 64) 2147483648)))
(assert (= (mk_t__ref result6) (mk_t__ref res_g)))
(assert (= res_g1 ((_ int2bv 64) 0)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (and (and (= temp___223 b) (and (= temp___221 res_g1) (and (= temp___222 res1) (and (= temp___219 bits_g1) (and (= temp___220 bits1) (and (= temp___217 num1) (and (= temp___218 m1) (and (= temp___216 i1) (and (= ((_ int2bv 64) 0) temp___224) (and (not (= bits1 ((_ int2bv 64) 0))) (and (= (sqr (bvadd res_g1 bits_g1)) (bvadd (sqr res_g1) (bvmul bits_g1 (bvadd (bvmul ((_ int2bv 64) 2) res_g1) bits_g1)))) (and (not (= bits1 ((_ int2bv 64) 0))) (and (not (= bits_g1 ((_ int2bv 64) 0))) (and (not (= m1 ((_ int2bv 64) 0))) (and (and (= i1 result7) (= i2 (bvadd i1 ((_ int2bv 64) 1)))) (and (and (= m1 result8) (= m2 (bvsub m1 ((_ int2bv 64) 1)))) (and (= res1 (bvmul res_g1 (pow21 (bvadd m2 ((_ int2bv 64) 1))))) (and (= bits_g1 (pow21 m2)) (and (and (= (mk_t__ref result9) (mk_t__ref b)) (= b2 (bvor res1 bits1))) (and (= b2 (bvadd res1 bits1)) (and (= b2 (bvmul (bvadd (bvmul ((_ int2bv 64) 2) res_g1) bits_g1) (pow21 m2))) (and (and (= res1 result10) (= res2 (bvlshr res1 ((_ int2bv 64) 1)))) (and (= res2 (bvmul res_g1 (pow21 m2))) (and (ite (bvuge num1 b2) (and (and (= result11 (mk_t__ref num1)) (= num2 (bvsub num1 b2))) (and (and (= result12 (mk_t__ref res2)) (= res3 (bvor res2 bits1))) (and (= res3 (bvmul (bvadd res_g1 bits_g1) (pow21 m2))) (and (= result13 (mk_t__ref res_g1)) (= res_g2 (bvadd res_g1 bits_g1)))))) (and (= res_g2 res_g1) (and (= res3 res2) (= num2 num1)))) (and (and (= result14 (mk_t__ref bits1)) (= bits2 (bvudiv bits1 ((_ int2bv 64) 4)))) (and (and (= result15 (mk_t__ref bits_g1)) (= bits_g2 (bvlshr bits_g1 ((_ int2bv 64) 1)))) (and (= (sqr (bvadd res_g2 bits_g2)) (bvadd (sqr res_g2) (bvmul bits_g2 (bvadd (bvmul ((_ int2bv 64) 2) res_g2) bits_g2)))) (and (and (bvule m3 ((_ int2bv 64) 32)) (and (= bits_g3 (ite (= m3 ((_ int2bv 64) 0)) ((_ int2bv 64) 0) (pow21 (bvsub m3 ((_ int2bv 64) 1))))) (and (= bits3 (sqr bits_g3)) (and (= (bvand res_g3 (bvsub (pow21 m3) ((_ int2bv 64) 1))) ((_ int2bv 64) 0)) (and (bvult res_g3 ((_ int2bv 64) 4294967296)) (and (= res4 (bvmul res_g3 (pow21 m3))) (and (bvule num3 x) (and (= (sqr (bvadd res_g3 bits_g3)) (bvadd (sqr res_g3) (bvmul bits_g3 (bvadd (bvmul ((_ int2bv 64) 2) res_g3) bits_g3)))) (and (=> (not (= m3 ((_ int2bv 64) 0))) (= (bvor res4 bits3) (bvmul (bvadd (bvmul ((_ int2bv 64) 2) res_g3) bits_g3) (pow21 (bvsub m3 ((_ int2bv 64) 1)))))) (and (=> (not (= m3 ((_ int2bv 64) 0))) (= bits_g3 (pow21 (bvsub m3 ((_ int2bv 64) 1))))) (and (= (bvsub x num3) (sqr res_g3)) (and (bvule (bvadd res_g3 (pow21 m3)) ((_ int2bv 64) 4294967296)) (bvule x (bvsub (sqr (bvadd res_g3 (pow21 m3))) ((_ int2bv 64) 1))))))))))))))) (and (and (= result16 (mk_t__ref temp___2241)) (= temp___2242 bits3)) (= bits3 ((_ int2bv 64) 0))))))))))))))))))))))))))))))) (and (and (= res_g7 (mk_t__ref res_g3)) (and (= bits_g7 (mk_t__ref bits_g3)) (and (= m7 (mk_t__ref m3)) (and (= i7 (mk_t__ref i3)) (and (= b7 (mk_t__ref b3)) (and (= res9 (mk_t__ref res4)) (and (= bits7 (mk_t__ref bits3)) (= num7 (mk_t__ref num3))))))))) (and (= res_g8 res_g3) (and (= bits_g8 bits_g3) (and (= m8 m3) (and (= i8 i3) (and (= b8 b3) (and (= res10 res4) (and (= bits8 bits3) (= num8 num3))))))))))))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= res_g9 res_g7)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= bits_g9 bits_g7)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= m9 m7)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= i9 i7)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= b9 b7)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= res11 res9)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= bits9 bits7)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= num9 num7)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= res_g10 res_g8)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= bits_g10 bits_g8)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= m10 m8)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= i10 i8)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= b10 b8)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= res12 res10)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= bits10 bits8)))
(assert (=> (not (= bits1 ((_ int2bv 64) 0))) (= num10 num8)))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= res_g9 (mk_t__ref res_g1))))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= bits_g9 (mk_t__ref bits_g1))))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= m9 (mk_t__ref m1))))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= i9 (mk_t__ref i1))))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= b9 (mk_t__ref b))))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= res11 (mk_t__ref res1))))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= bits9 (mk_t__ref bits1))))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= num9 (mk_t__ref num1))))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= res_g10 res_g1)))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= bits_g10 bits_g1)))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= m10 m1)))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= i10 i1)))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= b10 b1)))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= res12 res1)))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= bits10 bits1)))
(assert (=> (= bits1 ((_ int2bv 64) 0)) (= num10 num1)))
(assert (= (t__content m9) ((_ int2bv 64) 0)))
(assert (= (t__content res11) (t__content res_g9)))
(assert (bvule x (bvsub (sqr (bvadd (t__content res_g9) (pow21 (t__content m9)))) ((_ int2bv 64) 1))))
(assert (= (pow21 (t__content m9)) ((_ int2bv 64) 1)))
(assert (not (bvule x (bvsub (sqr (bvadd (t__content res_g9) ((_ int2bv 64) 1))) ((_ int2bv 64) 1)))))
(check-sat)
(exit)
