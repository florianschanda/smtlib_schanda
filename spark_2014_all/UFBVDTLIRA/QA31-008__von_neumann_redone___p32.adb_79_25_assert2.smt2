(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun sqr ((_ BitVec 32)) (_ BitVec 32))
(declare-fun sqr__function_guard ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-sort u32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))
(declare-fun user_eq (u32 u32) Bool)
(declare-const dummy u32)
(declare-datatypes () ((u32__ref (mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))
(define-fun dynamic_invariant ((temp___expr_249 (_ BitVec 32)) (temp___is_init_245 Bool) (temp___skip_constant_246 Bool) (temp___do_toplevel_247 Bool) (temp___do_typ_inv_248 Bool)) Bool true)
(assert (forall ((x (_ BitVec 32))) (! (=> (dynamic_invariant x true true true true) (dynamic_invariant (sqr x) true false true true)) :pattern ((sqr x)))))
(assert (forall ((x (_ BitVec 32))) (! (=> (dynamic_invariant x true true true true) (= (sqr x) (bvmul x x))) :pattern ((sqr x)))))
(declare-fun pow21 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun pow2__function_guard ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32))) (! (=> (and (dynamic_invariant x true true true true) (bvule x #x00000020)) (dynamic_invariant (pow21 x) true false true true)) :pattern ((pow21 x)))))
(assert (forall ((x (_ BitVec 32))) (! (=> (dynamic_invariant x true true true true) (= (pow21 x) (bvshl #x00000001 ((_ int2bv 32) (bv2nat x))))) :pattern ((pow21 x)))))
(declare-const x (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const num (_ BitVec 32))
(declare-const bits (_ BitVec 32))
(declare-const res (_ BitVec 32))
(declare-const b (_ BitVec 32))
(declare-const i (_ BitVec 32))
(declare-const m (_ BitVec 32))
(declare-const bits_g (_ BitVec 32))
(declare-const res_g (_ BitVec 32))
(declare-const result (_ BitVec 32))
(declare-const i1 (_ BitVec 32))
(declare-const result1 (_ BitVec 32))
(declare-const num1 (_ BitVec 32))
(declare-const result2 (_ BitVec 32))
(declare-const bits1 (_ BitVec 32))
(declare-const result3 (_ BitVec 32))
(declare-const res1 (_ BitVec 32))
(declare-const result4 (_ BitVec 32))
(declare-const m1 (_ BitVec 32))
(declare-const result5 (_ BitVec 32))
(declare-const bits_g1 (_ BitVec 32))
(declare-const result6 (_ BitVec 32))
(declare-const res_g1 (_ BitVec 32))
(declare-const result7 (_ BitVec 32))
(declare-const i2 (_ BitVec 32))
(declare-const result8 (_ BitVec 32))
(declare-const m2 (_ BitVec 32))
(declare-const result9 (_ BitVec 32))
(declare-const b1 (_ BitVec 32))
(assert (= (mk_t__ref result) (mk_t__ref i)))
(assert (= i1 #x00000000))
(assert (= (mk_t__ref result1) (mk_t__ref num)))
(assert (= num1 x))
(assert (bvule num1 #xFFFFFFFF))
(assert (= (mk_t__ref result2) (mk_t__ref bits)))
(assert (= bits1 #x40000000))
(assert (= (mk_t__ref result3) (mk_t__ref res)))
(assert (= res1 #x00000000))
(assert (= (mk_t__ref result4) (mk_t__ref m)))
(assert (= m1 #x00000010))
(assert (= (mk_t__ref result5) (mk_t__ref bits_g)))
(assert (= bits_g1 #x00008000))
(assert (= (mk_t__ref result6) (mk_t__ref res_g)))
(assert (= res_g1 #x00000000))
(assert (not (= bits1 #x00000000)))
(assert (not (= bits1 #x00000000)))
(assert (= (sqr (bvadd res_g1 bits_g1)) (bvadd (sqr res_g1) (bvmul bits_g1 (bvadd (bvmul #x00000002 res_g1) bits_g1)))))
(assert (not (= bits1 #x00000000)))
(assert (not (= bits_g1 #x00000000)))
(assert (not (= m1 #x00000000)))
(assert (= i1 result7))
(assert (= i2 (bvadd i1 #x00000001)))
(assert (= m1 result8))
(assert (= m2 (bvsub m1 #x00000001)))
(assert (= res1 (bvmul res_g1 (pow21 (bvadd m2 #x00000001)))))
(assert (= bits_g1 (pow21 m2)))
(assert (= (mk_t__ref result9) (mk_t__ref b)))
(assert (= b1 (bvor res1 bits1)))
(assert (not (= b1 (bvadd res1 bits1))))
(check-sat)
(exit)
