(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 64) Int) Bool)
(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun sqr ((_ BitVec 64)) (_ BitVec 64))
(declare-fun sqr__function_guard ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-sort u64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))
(declare-fun user_eq (u64 u64) Bool)
(declare-const dummy u64)
(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))
(define-fun dynamic_invariant ((temp___expr_249 (_ BitVec 64)) (temp___is_init_245 Bool) (temp___skip_constant_246 Bool) (temp___do_toplevel_247 Bool) (temp___do_typ_inv_248 Bool)) Bool true)
(assert (forall ((x (_ BitVec 64))) (! (=> (dynamic_invariant x true true true true) (dynamic_invariant (sqr x) true false true true)) :pattern ((sqr x)))))
(assert (forall ((x (_ BitVec 64))) (! (=> (dynamic_invariant x true true true true) (= (sqr x) (bvmul x x))) :pattern ((sqr x)))))
(declare-fun pow21 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun pow2__function_guard ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64))) (! (=> (and (dynamic_invariant x true true true true) (bvule x #x0000000000000040)) (dynamic_invariant (pow21 x) true false true true)) :pattern ((pow21 x)))))
(assert (forall ((x (_ BitVec 64))) (! (=> (dynamic_invariant x true true true true) (= (pow21 x) (bvshl #x0000000000000001 ((_ int2bv 64) (bv2nat x))))) :pattern ((pow21 x)))))
(declare-const x (_ BitVec 64))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const num (_ BitVec 64))
(declare-const bits (_ BitVec 64))
(declare-const res (_ BitVec 64))
(declare-const b (_ BitVec 64))
(declare-const i (_ BitVec 64))
(declare-const m (_ BitVec 64))
(declare-const bits_g (_ BitVec 64))
(declare-const res_g (_ BitVec 64))
(declare-const temp___259 (_ BitVec 64))
(declare-const temp___257 (_ BitVec 64))
(declare-const temp___258 (_ BitVec 64))
(declare-const temp___255 (_ BitVec 64))
(declare-const temp___256 (_ BitVec 64))
(declare-const temp___253 (_ BitVec 64))
(declare-const temp___254 (_ BitVec 64))
(declare-const temp___252 (_ BitVec 64))
(declare-const temp___260 (_ BitVec 64))
(declare-const b1 (_ BitVec 64))
(declare-const result (_ BitVec 64))
(declare-const i1 (_ BitVec 64))
(declare-const result1 (_ BitVec 64))
(declare-const num1 (_ BitVec 64))
(declare-const result2 (_ BitVec 64))
(declare-const bits1 (_ BitVec 64))
(declare-const result3 (_ BitVec 64))
(declare-const res1 (_ BitVec 64))
(declare-const result4 (_ BitVec 64))
(declare-const m1 (_ BitVec 64))
(declare-const result5 (_ BitVec 64))
(declare-const bits_g1 (_ BitVec 64))
(declare-const result6 (_ BitVec 64))
(declare-const res_g1 (_ BitVec 64))
(declare-const result7 (_ BitVec 64))
(declare-const i2 (_ BitVec 64))
(declare-const result8 (_ BitVec 64))
(declare-const m2 (_ BitVec 64))
(declare-const result9 (_ BitVec 64))
(declare-const b2 (_ BitVec 64))
(declare-const result10 (_ BitVec 64))
(declare-const res2 (_ BitVec 64))
(declare-const result11 t__ref)
(declare-const num2 (_ BitVec 64))
(declare-const result12 t__ref)
(declare-const res3 (_ BitVec 64))
(declare-const result13 t__ref)
(declare-const res_g2 (_ BitVec 64))
(declare-const result14 t__ref)
(declare-const bits2 (_ BitVec 64))
(declare-const result15 t__ref)
(declare-const bits_g2 (_ BitVec 64))
(declare-const num3 (_ BitVec 64))
(declare-const bits3 (_ BitVec 64))
(declare-const res4 (_ BitVec 64))
(declare-const b3 (_ BitVec 64))
(declare-const i3 (_ BitVec 64))
(declare-const m3 (_ BitVec 64))
(declare-const bits_g3 (_ BitVec 64))
(declare-const res_g3 (_ BitVec 64))
(declare-const temp___2601 (_ BitVec 64))
(declare-const result16 t__ref)
(declare-const temp___2602 (_ BitVec 64))
(declare-const num4 t__ref)
(declare-const bits4 t__ref)
(declare-const res5 t__ref)
(declare-const b4 t__ref)
(declare-const i4 t__ref)
(declare-const m4 t__ref)
(declare-const bits_g4 t__ref)
(declare-const res_g4 t__ref)
(declare-const num5 (_ BitVec 64))
(declare-const bits5 (_ BitVec 64))
(declare-const res6 (_ BitVec 64))
(declare-const b5 (_ BitVec 64))
(declare-const i5 (_ BitVec 64))
(declare-const m5 (_ BitVec 64))
(declare-const bits_g5 (_ BitVec 64))
(declare-const res_g5 (_ BitVec 64))
(declare-const num6 t__ref)
(declare-const bits6 t__ref)
(declare-const res7 t__ref)
(declare-const b6 t__ref)
(declare-const i6 t__ref)
(declare-const m6 t__ref)
(declare-const bits_g6 t__ref)
(declare-const res_g6 t__ref)
(declare-const num7 (_ BitVec 64))
(declare-const bits7 (_ BitVec 64))
(declare-const res8 (_ BitVec 64))
(declare-const b7 (_ BitVec 64))
(declare-const i7 (_ BitVec 64))
(declare-const m7 (_ BitVec 64))
(declare-const bits_g7 (_ BitVec 64))
(declare-const res_g7 (_ BitVec 64))
(define-fun b8 () t__ref (mk_t__ref b))
(assert (= (mk_t__ref result) (mk_t__ref i)))
(assert (= i1 #x0000000000000000))
(assert (= (mk_t__ref result1) (mk_t__ref num)))
(assert (= num1 x))
(assert (bvule num1 #xFFFFFFFFFFFFFFFF))
(assert (= (mk_t__ref result2) (mk_t__ref bits)))
(assert (= bits1 #x4000000000000000))
(assert (= (mk_t__ref result3) (mk_t__ref res)))
(assert (= res1 #x0000000000000000))
(assert (= (mk_t__ref result4) (mk_t__ref m)))
(assert (= m1 #x0000000000000020))
(assert (= (mk_t__ref result5) (mk_t__ref bits_g)))
(assert (= bits_g1 #x0000000080000000))
(assert (= (mk_t__ref result6) (mk_t__ref res_g)))
(assert (= res_g1 #x0000000000000000))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___259 b)))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___257 res_g1)))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___258 res1)))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___255 bits_g1)))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___256 bits1)))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___253 num1)))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___254 m1)))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___252 i1)))
(assert (=> (not (= bits1 #x0000000000000000)) (= #x0000000000000000 temp___260)))
(assert (=> (not (= bits1 #x0000000000000000)) (not (= bits1 #x0000000000000000))))
(assert (=> (not (= bits1 #x0000000000000000)) (= (sqr (bvadd res_g1 bits_g1)) (bvadd (sqr res_g1) (bvmul bits_g1 (bvadd (bvmul #x0000000000000002 res_g1) bits_g1))))))
(assert (=> (not (= bits1 #x0000000000000000)) (not (= bits1 #x0000000000000000))))
(assert (=> (not (= bits1 #x0000000000000000)) (not (= bits_g1 #x0000000000000000))))
(assert (=> (not (= bits1 #x0000000000000000)) (not (= m1 #x0000000000000000))))
(assert (=> (not (= bits1 #x0000000000000000)) (= i1 result7)))
(assert (=> (not (= bits1 #x0000000000000000)) (= i2 (bvadd i1 #x0000000000000001))))
(assert (=> (not (= bits1 #x0000000000000000)) (= m1 result8)))
(assert (=> (not (= bits1 #x0000000000000000)) (= m2 (bvsub m1 #x0000000000000001))))
(assert (=> (not (= bits1 #x0000000000000000)) (= res1 (bvmul res_g1 (pow21 (bvadd m2 #x0000000000000001))))))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits_g1 (pow21 m2))))
(assert (=> (not (= bits1 #x0000000000000000)) (= (mk_t__ref result9) b8)))
(assert (=> (not (= bits1 #x0000000000000000)) (= b2 (bvor res1 bits1))))
(assert (=> (not (= bits1 #x0000000000000000)) (= b2 (bvadd res1 bits1))))
(assert (=> (not (= bits1 #x0000000000000000)) (= b2 (bvmul (bvadd (bvmul #x0000000000000002 res_g1) bits_g1) (pow21 m2)))))
(assert (=> (not (= bits1 #x0000000000000000)) (= res1 result10)))
(assert (=> (not (= bits1 #x0000000000000000)) (= res2 (bvlshr res1 ((_ int2bv 64) 1)))))
(assert (=> (not (= bits1 #x0000000000000000)) (= res2 (bvmul res_g1 (pow21 m2)))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (bvuge num1 b2) (= result11 (mk_t__ref num1)))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (bvuge num1 b2) (= num2 (bvsub num1 b2)))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (bvuge num1 b2) (= result12 (mk_t__ref res2)))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (bvuge num1 b2) (= res3 (bvor res2 bits1)))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (bvuge num1 b2) (= res3 (bvmul (bvadd res_g1 bits_g1) (pow21 m2))))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (bvuge num1 b2) (= result13 (mk_t__ref res_g1)))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (bvuge num1 b2) (= res_g2 (bvadd res_g1 bits_g1)))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (not (bvuge num1 b2)) (= res_g2 res_g1))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (not (bvuge num1 b2)) (= res3 res2))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (not (bvuge num1 b2)) (= num2 num1))))
(assert (=> (not (= bits1 #x0000000000000000)) (= result14 (mk_t__ref bits1))))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits2 (bvudiv bits1 #x0000000000000004))))
(assert (=> (not (= bits1 #x0000000000000000)) (= result15 (mk_t__ref bits_g1))))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits_g2 (bvlshr bits_g1 ((_ int2bv 64) 1)))))
(assert (=> (not (= bits1 #x0000000000000000)) (= (sqr (bvadd res_g2 bits_g2)) (bvadd (sqr res_g2) (bvmul bits_g2 (bvadd (bvmul #x0000000000000002 res_g2) bits_g2))))))
(assert (=> (not (= bits1 #x0000000000000000)) (bvule m3 #x0000000000000020)))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits_g3 (ite (= m3 #x0000000000000000) #x0000000000000000 (pow21 (bvsub m3 #x0000000000000001))))))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits3 (sqr bits_g3))))
(assert (=> (not (= bits1 #x0000000000000000)) (= (bvand res_g3 (bvsub (pow21 m3) #x0000000000000001)) #x0000000000000000)))
(assert (=> (not (= bits1 #x0000000000000000)) (bvult res_g3 #x0000000100000000)))
(assert (=> (not (= bits1 #x0000000000000000)) (= res4 (bvmul res_g3 (pow21 m3)))))
(assert (=> (not (= bits1 #x0000000000000000)) (bvule num3 x)))
(assert (=> (not (= bits1 #x0000000000000000)) (= (sqr (bvadd res_g3 bits_g3)) (bvadd (sqr res_g3) (bvmul bits_g3 (bvadd (bvmul #x0000000000000002 res_g3) bits_g3))))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (not (= m3 #x0000000000000000)) (= (bvor res4 bits3) (bvmul (bvadd (bvmul #x0000000000000002 res_g3) bits_g3) (pow21 (bvsub m3 #x0000000000000001)))))))
(assert (=> (not (= bits1 #x0000000000000000)) (=> (not (= m3 #x0000000000000000)) (= bits_g3 (pow21 (bvsub m3 #x0000000000000001))))))
(assert (=> (not (= bits1 #x0000000000000000)) (= (bvsub x num3) (sqr res_g3))))
(assert (=> (not (= bits1 #x0000000000000000)) (bvule (bvadd res_g3 (pow21 m3)) #x0000000100000000)))
(assert (=> (not (= bits1 #x0000000000000000)) (bvule x (bvsub (sqr (bvadd res_g3 (pow21 m3))) #x0000000000000001))))
(assert (=> (not (= bits1 #x0000000000000000)) (= result16 (mk_t__ref temp___2601))))
(assert (=> (not (= bits1 #x0000000000000000)) (= temp___2602 bits3)))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits3 #x0000000000000000)))
(assert (=> (not (= bits1 #x0000000000000000)) (= res_g4 (mk_t__ref res_g3))))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits_g4 (mk_t__ref bits_g3))))
(assert (=> (not (= bits1 #x0000000000000000)) (= m4 (mk_t__ref m3))))
(assert (=> (not (= bits1 #x0000000000000000)) (= i4 (mk_t__ref i3))))
(assert (=> (not (= bits1 #x0000000000000000)) (= b4 (mk_t__ref b3))))
(assert (=> (not (= bits1 #x0000000000000000)) (= res5 (mk_t__ref res4))))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits4 (mk_t__ref bits3))))
(assert (=> (not (= bits1 #x0000000000000000)) (= num4 (mk_t__ref num3))))
(assert (=> (not (= bits1 #x0000000000000000)) (= res_g5 res_g3)))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits_g5 bits_g3)))
(assert (=> (not (= bits1 #x0000000000000000)) (= m5 m3)))
(assert (=> (not (= bits1 #x0000000000000000)) (= i5 i3)))
(assert (=> (not (= bits1 #x0000000000000000)) (= b5 b3)))
(assert (=> (not (= bits1 #x0000000000000000)) (= res6 res4)))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits5 bits3)))
(assert (=> (not (= bits1 #x0000000000000000)) (= num5 num3)))
(assert (=> (not (= bits1 #x0000000000000000)) (= res_g6 res_g4)))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits_g6 bits_g4)))
(assert (=> (not (= bits1 #x0000000000000000)) (= m6 m4)))
(assert (=> (not (= bits1 #x0000000000000000)) (= i6 i4)))
(assert (=> (not (= bits1 #x0000000000000000)) (= b6 b4)))
(assert (=> (not (= bits1 #x0000000000000000)) (= res7 res5)))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits6 bits4)))
(assert (=> (not (= bits1 #x0000000000000000)) (= num6 num4)))
(assert (=> (not (= bits1 #x0000000000000000)) (= res_g7 res_g5)))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits_g7 bits_g5)))
(assert (=> (not (= bits1 #x0000000000000000)) (= m7 m5)))
(assert (=> (not (= bits1 #x0000000000000000)) (= i7 i5)))
(assert (=> (not (= bits1 #x0000000000000000)) (= b7 b5)))
(assert (=> (not (= bits1 #x0000000000000000)) (= res8 res6)))
(assert (=> (not (= bits1 #x0000000000000000)) (= bits7 bits5)))
(assert (=> (not (= bits1 #x0000000000000000)) (= num7 num5)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= res_g6 (mk_t__ref res_g1))))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= bits_g6 (mk_t__ref bits_g1))))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= m6 (mk_t__ref m1))))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= i6 (mk_t__ref i1))))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= b6 b8)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= res7 (mk_t__ref res1))))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= bits6 (mk_t__ref bits1))))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= num6 (mk_t__ref num1))))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= res_g7 res_g1)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= bits_g7 bits_g1)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= m7 m1)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= i7 i1)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= b7 b1)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= res8 res1)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= bits7 bits1)))
(assert (=> (not (not (= bits1 #x0000000000000000))) (= num7 num1)))
(assert (= (t__content m6) #x0000000000000000))
(assert (= (t__content res7) (t__content res_g6)))
(assert (bvule x (bvsub (sqr (bvadd (t__content res_g6) (pow21 (t__content m6)))) #x0000000000000001)))
(assert (= (pow21 (t__content m6)) #x0000000000000001))
(assert (bvule x (bvsub (sqr (bvadd (t__content res_g6) #x0000000000000001)) #x0000000000000001)))
(assert (bvule x (bvsub (sqr (bvadd (t__content res7) #x0000000000000001)) #x0000000000000001)))
(assert (= (bvsub x (t__content num6)) (sqr (t__content res_g6))))
(assert (bvuge (t__content num6) #x0000000000000000))
(assert (not (= (bvsub x (t__content num6)) (bvmul (t__content res_g6) (t__content res_g6)))))
(check-sat)
(exit)
