(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort modular 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))
(declare-fun user_eq (modular modular) Bool)
(declare-const dummy modular)
(declare-datatypes () ((modular__ref (mk_modular__ref (modular__content modular)))))
(define-fun modular__ref___6__projection ((a modular__ref)) modular (modular__content a))
(define-fun dynamic_invariant ((temp___expr_359 (_ BitVec 32)) (temp___is_init_355 Bool) (temp___skip_constant_356 Bool) (temp___do_toplevel_357 Bool) (temp___do_typ_inv_358 Bool)) Bool true)
(declare-sort mask_size 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 32)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (mask_size mask_size) Bool)
(declare-const dummy1 mask_size)
(declare-datatypes () ((mask_size__ref (mk_mask_size__ref (mask_size__content mask_size)))))
(define-fun mask_size__ref___5__projection ((a mask_size__ref)) mask_size (mask_size__content a))
(define-fun dynamic_invariant1 ((temp___expr_373 Int) (temp___is_init_369 Bool) (temp___skip_constant_370 Bool) (temp___do_toplevel_371 Bool) (temp___do_typ_inv_372 Bool)) Bool (=> (or (= temp___is_init_369 true) (<= 1 32)) (in_range1 temp___expr_373)))
(declare-fun axiom__ (tuple0) Bool)
(declare-fun axiom____function_guard (Bool tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (=> (= (axiom__ us_void_param) true) (forall ((v (_ BitVec 32))) (=> (and (bvule #x00000000 v) (bvule v #xFFFFFFFF)) (forall ((n Int)) (=> (and (<= 0 n) (<= n 31)) (=> (= (bvand v (ite (< n 4294967296) (bvshl #x00000001 ((_ int2bv 32) n)) #x00000000)) #x00000000) (= (bvand (bvadd v (ite (< n 4294967296) (bvshl #x00000001 ((_ int2bv 32) n)) #x00000000)) (ite (< n 4294967296) (bvshl #x00000001 ((_ int2bv 32) n)) #x00000000)) (ite (< n 4294967296) (bvshl #x00000001 ((_ int2bv 32) n)) #x00000000)))))))) :pattern ((axiom__ us_void_param)))))
(declare-const amount Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort integer 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (integer integer) Bool)
(declare-const dummy2 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((t708s__ref (mk_t708s__ref (t708s__content integer)))))
(define-fun t708s__ref___projection ((a t708s__ref)) integer (t708s__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(declare-const result__ (_ BitVec 32))
(declare-const i Int)
(declare-const bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result (_ BitVec 32))
(declare-const temp___518 Int)
(declare-const temp___517 (_ BitVec 32))
(declare-const o (_ BitVec 32))
(declare-const o1 (_ BitVec 32))
(declare-const result (_ BitVec 32))
(declare-const result__1 (_ BitVec 32))
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const result2 (_ BitVec 32))
(declare-const result__2 (_ BitVec 32))
(declare-const result__3 (_ BitVec 32))
(declare-const i2 Int)
(declare-const result__4 (_ BitVec 32))
(declare-const i3 Int)
(declare-const result__5 (_ BitVec 32))
(declare-const i4 Int)
(declare-const result__6 (_ BitVec 32))
(declare-const i5 Int)
(declare-const result__7 (_ BitVec 32))
(declare-const i6 Int)
(declare-const result3 (_ BitVec 32))
(declare-const bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result1 (_ BitVec 32))
(declare-const bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result2 (_ BitVec 32))
(declare-const bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result3 (_ BitVec 32))
(declare-const result__8 (_ BitVec 32))
(declare-const i7 Int)
(declare-const bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result4 (_ BitVec 32))
(declare-const result__9 (_ BitVec 32))
(declare-const i8 Int)
(declare-const bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result5 (_ BitVec 32))
(declare-const result4 (_ BitVec 32))
(assert (in_range1 amount))
(assert (= (mk_t__ref result) (mk_t__ref result__)))
(assert (= result__1 #x00000000))
(assert (= (axiom__ Tuple0) true))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= temp___518 i1)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= temp___517 result__1)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (=> (< (- i1 1) 4294967296) (= o (bvshl #x00000001 ((_ int2bv 32) (- i1 1)))))))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (=> (not (< (- i1 1) 4294967296)) (= o #x00000000))))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= o1 (bvadd result__1 o))))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= result__1 result2)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= result__2 o1)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= (bvand result__3 (let ((temp___521 (- i2 1))) (ite (< temp___521 4294967296) (bvshl #x00000001 ((_ int2bv 32) temp___521)) #x00000000))) (let ((temp___522 (- i2 1))) (ite (< temp___522 4294967296) (bvshl #x00000001 ((_ int2bv 32) temp___522)) #x00000000)))))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (and (=> (<= 1 amount) (dynamic_property 1 amount i2)) (and (<= 1 i2) (<= i2 amount)))))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= i2 amount)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= i2 i3)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= result__3 result__4)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= i4 i2)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= result__5 result__3)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= (mk_int__ref i5) (mk_int__ref i3))))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= (mk_t__ref result__6) (mk_t__ref result__4))))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= i6 i4)))
(assert (=> (and (<= 1 i1) (<= i1 amount)) (= result__7 result__5)))
(assert (=> (not (and (<= 1 i1) (<= i1 amount))) (= i1 i5)))
(assert (=> (not (and (<= 1 i1) (<= i1 amount))) (= result__1 result__6)))
(assert (=> (not (and (<= 1 i1) (<= i1 amount))) (= i6 i1)))
(assert (=> (not (and (<= 1 i1) (<= i1 amount))) (= result__7 result__1)))
(assert (= bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result1 bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result2))
(assert (= bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result3 bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result1))
(assert (= result3 bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result))
(assert (= bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result1 result__6))
(assert (= (mk_t__ref bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result4) (mk_t__ref bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result2)))
(assert (= i7 i5))
(assert (= result__8 result__6))
(assert (= bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result5 bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result3))
(assert (= i8 i6))
(assert (= result__9 result__7))
(assert (= result4 bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result4))
(declare-const i9 Int)
(assert (<= 1 i9))
(assert (<= i9 amount))
(assert (not (= (bvand bits_manipulation_unsigned__unsigned_32__functions__proofs__make_mask__lemma2__ones__result4 (let ((temp___529 (- i9 1))) (ite (< temp___529 4294967296) (bvshl #x00000001 ((_ int2bv 32) temp___529)) #x00000000))) (let ((temp___530 (- i9 1))) (ite (< temp___530 4294967296) (bvshl #x00000001 ((_ int2bv 32) temp___530)) #x00000000)))))
(check-sat)
(exit)
