(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type i

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : i, i -> bool

logic dummy1 : i

type i__ref = { i__content : i
}

function i__ref___projection(a: i__ref) : i = (a).i__content

type m

predicate in_range2(x: t) = (ule(of_int(0), x) and ule(x, of_int(7)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq4 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq2 : m, m -> bool

logic dummy2 : m

type m__ref = { m__content : m
}

function m__ref___projection(a: m__ref) : m = (a).m__content

type e

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : e, e -> bool

logic dummy3 : e

type e__ref = { e__content : e
}

function e__ref___projection(a: e__ref) : e = (a).e__content

type map

type map__ref = { map__content : map
}

logic get : map, int, t, int -> integer

logic set : map, int, t, int, integer -> map

axiom Select_eq :
  (forall m1:map.
  (forall i1:int.
  (forall j:t.
  (forall k:int.
  (forall a:integer [set(m1, i1, j, k, a)]. (get(set(m1, i1, j, k, a), i1, j,
  k) = a))))))

axiom Select_neq :
  (forall m1:map.
  (forall i1:int. forall i2:int.
  (forall j:t. forall j2:t.
  (forall k:int. forall k2:int.
  (forall a:integer [get(set(m1, i1, j, k, a), i2, j2, k2)| set(m1, i1, j, k,
  a), get(m1, i2, j2, k2)]. ((not ((i1 = i2) and ((j = j2) and (k = k2)))) ->
  (get(set(m1, i1, j, k, a), i2, j2, k2) = get(m1, i2, j2, k2))))))))

logic slide : map, int, int, t, t, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall old_first:int. forall new_first:int.
  (forall old_first_2:t. forall new_first_2:t.
  (forall old_first_3:int. forall new_first_3:int.
  (forall i1:int.
  (forall j:t.
  (forall k:int [get(slide(a, old_first, new_first, old_first_2, new_first_2,
  old_first_3, new_first_3), i1, j, k)]. (get(slide(a, old_first, new_first,
  old_first_2, new_first_2, old_first_3, new_first_3), i1, j, k) = get(a,
  (i1 - (new_first - old_first)), sub(j, sub(new_first_2, old_first_2)),
  (k - (new_first_3 - old_first_3)))))))))))

logic bool_eq6 : map, int, int, t, t, int, int, map, int, int, t, t, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:t. forall a__last_2:t. forall a__first_3:int.
  forall a__last_3:int. forall b:map. forall b__first:int.
  forall b__last:int. forall b__first_2:t. forall b__last_2:t.
  forall b__first_3:int. forall b__last_3:int [bool_eq6(a, a__first, a__last,
  a__first_2, a__last_2, a__first_3, a__last_3, b, b__first, b__last,
  b__first_2, b__last_2, b__first_3, b__last_3)].
  ((((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  ((ule(a__first_2, a__last_2) and (ule(b__first_2, b__last_2) and
  (sub(a__last_2, a__first_2) = sub(b__last_2, b__first_2)))) or
  ((not ule(a__first_2, a__last_2)) and ugt(b__first_2, b__last_2)))) and
  (((a__first_3 <= a__last_3) and ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) or
  ((not (a__first_3 <= a__last_3)) and (b__last_3 <  b__first_3)))) and
  (forall temp___idx_134:int. forall temp___idx_136:int.
  (forall temp___idx_135:t. ((((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and (ule(a__first_2, temp___idx_135) and
  ule(temp___idx_135, a__last_2))) and ((a__first_3 <= temp___idx_136) and
  (temp___idx_136 <= a__last_3))) and (to_rep(get(a, temp___idx_134,
  temp___idx_135, temp___idx_136)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_134), add(sub(b__first_2, a__first_2),
  temp___idx_135), ((b__first_3 - a__first_3) + temp___idx_136))))) or
  (not ((((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)) and
  (ule(a__first_2, temp___idx_135) and ule(temp___idx_135, a__last_2))) and
  ((a__first_3 <= temp___idx_136) and (temp___idx_136 <= a__last_3)))))))) ->
  (bool_eq6(a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3, b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3) = true)) and ((not ((((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  ((ule(a__first_2, a__last_2) -> (ule(b__first_2, b__last_2) and
  (sub(a__last_2, a__first_2) = sub(b__last_2, b__first_2)))) and
  ((not ule(a__first_2, a__last_2)) -> ugt(b__first_2, b__last_2)))) and
  (((a__first_3 <= a__last_3) -> ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) and
  ((not (a__first_3 <= a__last_3)) -> (b__last_3 <  b__first_3)))) and
  (forall temp___idx_134:int. forall temp___idx_136:int.
  (forall temp___idx_135:t. (((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and (ule(a__first_2, temp___idx_135) and
  ule(temp___idx_135, a__last_2))) and ((a__first_3 <= temp___idx_136) and
  (temp___idx_136 <= a__last_3))) -> (to_rep(get(a, temp___idx_134,
  temp___idx_135, temp___idx_136)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_134), add(sub(b__first_2, a__first_2),
  temp___idx_135), ((b__first_3 - a__first_3) + temp___idx_136))))))))) ->
  (bool_eq6(a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3, b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_3:int.
  forall a__last_3:int. forall b__first:int. forall b__last:int.
  forall b__first_3:int. forall b__last_3:int.
  (forall a__first_2:t. forall a__last_2:t. forall b__first_2:t.
  forall b__last_2:t. ((bool_eq6(b, b__first, b__last, b__first_2, b__last_2,
  b__first_3, b__last_3, a, a__first, a__last, a__first_2, a__last_2,
  a__first_3, a__last_3) = true) -> ((((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  ((ule(a__first_2, a__last_2) -> (ule(b__first_2, b__last_2) and
  (sub(a__last_2, a__first_2) = sub(b__last_2, b__first_2)))) and
  ((not ule(a__first_2, a__last_2)) -> ugt(b__first_2, b__last_2)))) and
  (((a__first_3 <= a__last_3) -> ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3)))) and
  ((not (a__first_3 <= a__last_3)) -> (b__last_3 <  b__first_3)))) and
  (forall temp___idx_134:int. forall temp___idx_136:int.
  (forall temp___idx_135:t. (((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and (ule(a__first_2, temp___idx_135) and
  ule(temp___idx_135, a__last_2))) and ((a__first_3 <= temp___idx_136) and
  (temp___idx_136 <= a__last_3))) -> (to_rep(get(a, temp___idx_134,
  temp___idx_135, temp___idx_136)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_134), add(sub(b__first_2, a__first_2),
  temp___idx_135), ((b__first_3 - a__first_3) + temp___idx_136))))))))))))

logic a_3d_arr : map

logic attr__ATTRIBUTE_ADDRESS : int

logic update_logic_fn__a_3d_arr__aggregate_def : int -> map

axiom def_axiom :
  (forall temp___142:int.
  (forall temp___143:int. forall temp___145:int.
  (forall temp___144:t.
  (get(update_logic_fn__a_3d_arr__aggregate_def(temp___142), temp___143,
  temp___144, temp___145) = of_rep(temp___142)))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic y : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic z : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic v1 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic v2 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic temp___230 : map, int, t, int, int, int, t, int, int -> map

axiom def_axiom1 :
  (forall temp___232:map.
  (forall temp___233:int. forall temp___235:int. forall temp___236:int.
  forall temp___237:int. forall temp___239:int. forall temp___240:int.
  (forall temp___234:t. forall temp___238:t.
  (forall temp___241:int. forall temp___243:int.
  (forall temp___242:t. (((((temp___241 = temp___237) and
  (temp___242 = temp___238)) and (temp___243 = temp___239)) ->
  (get(temp___230(temp___232, temp___233, temp___234, temp___235, temp___236,
  temp___237, temp___238, temp___239, temp___240), temp___241, temp___242,
  temp___243) = of_rep(temp___240))) and
  ((not (((temp___241 = temp___237) and (temp___242 = temp___238)) and
  (temp___243 = temp___239))) -> (((((temp___241 = temp___233) and
  (temp___242 = temp___234)) and (temp___243 = temp___235)) ->
  (get(temp___230(temp___232, temp___233, temp___234, temp___235, temp___236,
  temp___237, temp___238, temp___239, temp___240), temp___241, temp___242,
  temp___243) = of_rep(temp___236))) and
  ((not (((temp___241 = temp___233) and (temp___242 = temp___234)) and
  (temp___243 = temp___235))) -> (get(temp___230(temp___232, temp___233,
  temp___234, temp___235, temp___236, temp___237, temp___238, temp___239,
  temp___240), temp___241, temp___242, temp___243) = get(temp___232,
  temp___241, temp___242, temp___243)))))))))))

logic temp___244 : int -> map

axiom def_axiom2 :
  (forall temp___246:int.
  (forall temp___247:int. forall temp___249:int.
  (forall temp___248:t. (get(temp___244(temp___246), temp___247, temp___248,
  temp___249) = of_rep(temp___246)))))

axiom a_3d_arr__def_axiom :
  (a_3d_arr = update_logic_fn__a_3d_arr__aggregate_def(1000))

 (* File "update_logic_fn.ads", line 49, characters 0-0 *)
goal WP_parameter_def :
  (forall a:map. forall o:integer. forall o1:map. forall o2:integer.
  forall o3:map. forall result:map. forall a1:map. forall result1:map.
  forall a2:map. forall result2:map. forall a3:map. forall a4:map.
  forall a5:map.
  (((update_logic_fn__a_3d_arr__aggregate_def(1000) = a_3d_arr) and
  (in_range1(x) and (in_range2(y) and (in_range3(z) and (in_range(v1) and
  (in_range(v2) and ((((result = a) and (a1 = a_3d_arr)) and
  ((((to_rep(o) = v1) and (o1 = set(a1, 5, of_int(7), 1, o))) and
  ((result1 = a1) and (a2 = o1))) and (((to_rep(o2) = v2) and (o3 = set(a2,
  x, y, z, o2))) and ((result2 = a2) and (a3 = o3))))) and ((a3 = a4) and
  (a5 = a3))))))))) -> (bool_eq6(a4, 1, 10, of_int(0), of_int(7), 0, 2,
  temp___230(temp___244(1000), 5, of_int(7), 1, v1, x, y, z, v2), 1, 10,
  of_int(0), of_int(7), 0, 2) = true)))
