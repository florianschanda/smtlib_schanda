(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-fun nth1 ((_ BitVec 64) Int) Bool)
(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))
(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64)) (bv2nat x) (- (- 18446744073709551616 (bv2nat x)))))
(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 18446744073709551615)))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvlshr x n) (lsr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvashr x n) (asr1 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 64)) (n (_ BitVec 64))) (= (bvshl x n) (lsl1 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_left2 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 64)) (n (_ BitVec 64))) (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) (rotate_right2 v (bv2nat n)))))
(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))
(assert (forall ((x (_ BitVec 64)) (i (_ BitVec 64))) (= (nth1 x (bv2nat i)) (nth_bv1 x i))))
(assert (forall ((x (_ BitVec 64)) (i Int)) (=> (and (<= 0 i) (< i 18446744073709551616)) (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))
(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i))) (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))
(assert (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64))) (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))
(define-fun bv_min1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))
(define-fun bv_max1 ((x (_ BitVec 64)) (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))
(declare-sort unsigned_64 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))
(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 64)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 64))
(declare-fun user_eq (unsigned_64 unsigned_64) Bool)
(declare-const dummy unsigned_64)
(declare-datatypes () ((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64 (unsigned_64__content a))
(declare-fun to_rep (unsigned_64) (_ BitVec 64))
(declare-fun of_rep ((_ BitVec 64)) unsigned_64)
(assert (forall ((x unsigned_64)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert true)
(assert (forall ((x (_ BitVec 64))) (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))))))
(define-fun to_int3 ((x unsigned_64)) Int (bv2nat (to_rep x)))
(assert (forall ((x unsigned_64)) (! (uint_in_range1 (to_int3 x)) :pattern ((to_int3 x)))))
(declare-sort unsigned_32 0)
(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (unsigned_32 unsigned_32) Bool)
(declare-const dummy1 unsigned_32)
(declare-datatypes () ((unsigned_32__ref (mk_unsigned_32__ref (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref___projection ((a unsigned_32__ref)) unsigned_32 (unsigned_32__content a))
(declare-fun to_rep1 (unsigned_32) (_ BitVec 32))
(declare-fun of_rep1 ((_ BitVec 32)) unsigned_32)
(assert (forall ((x unsigned_32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert true)
(assert (forall ((x (_ BitVec 32))) (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_int4 ((x unsigned_32)) Int (bv2nat (to_rep1 x)))
(assert (forall ((x unsigned_32)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)))))
(declare-fun nth2 ((_ BitVec 16) Int) Bool)
(declare-fun lsr2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun asr2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun lsl2 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_right3 ((_ BitVec 16) Int) (_ BitVec 16))
(declare-fun rotate_left3 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun to_int5 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))
(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvlshr x n) (lsr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvashr x n) (asr2 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 16)) (n (_ BitVec 16))) (= (bvshl x n) (lsl2 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_left3 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 16)) (n (_ BitVec 16))) (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) (rotate_right3 v (bv2nat n)))))
(declare-fun nth_bv2 ((_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))
(assert (forall ((x (_ BitVec 16)) (i (_ BitVec 16))) (= (nth2 x (bv2nat i)) (nth_bv2 x i))))
(assert (forall ((x (_ BitVec 16)) (i Int)) (=> (and (<= 0 i) (< i 65536)) (= (nth_bv2 x ((_ int2bv 16) i)) (nth2 x i)))))
(declare-fun eq_sub_bv2 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) (_ BitVec 16)) Bool)
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i))) (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub2 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))
(assert (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16)) (n (_ BitVec 16))) (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))
(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 16))))))
(declare-fun power2 ((_ BitVec 16) Int) (_ BitVec 16))
(define-fun bv_min2 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))
(define-fun bv_max2 ((x (_ BitVec 16)) (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))
(declare-sort unsigned_16 0)
(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 16))
(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))
(declare-fun user_eq2 (unsigned_16 unsigned_16) Bool)
(declare-const dummy2 unsigned_16)
(declare-datatypes () ((unsigned_16__ref (mk_unsigned_16__ref (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref___projection ((a unsigned_16__ref)) unsigned_16 (unsigned_16__content a))
(declare-fun nth3 ((_ BitVec 8) Int) Bool)
(declare-fun lsr3 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun asr3 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun lsl3 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_right4 ((_ BitVec 8) Int) (_ BitVec 8))
(declare-fun rotate_left4 ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun to_int6 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))
(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 255)))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvlshr x n) (lsr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvashr x n) (asr3 x (bv2nat n)))))
(assert (forall ((x (_ BitVec 8)) (n (_ BitVec 8))) (= (bvshl x n) (lsl3 x (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_left4 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 8)) (n (_ BitVec 8))) (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) (rotate_right4 v (bv2nat n)))))
(declare-fun nth_bv3 ((_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (= (nth_bv3 x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))
(assert (forall ((x (_ BitVec 8)) (i (_ BitVec 8))) (= (nth3 x (bv2nat i)) (nth_bv3 x i))))
(assert (forall ((x (_ BitVec 8)) (i Int)) (=> (and (<= 0 i) (< i 256)) (= (nth_bv3 x ((_ int2bv 8) i)) (nth3 x i)))))
(declare-fun eq_sub_bv3 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)) Bool)
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i))) (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub3 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))
(assert (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (n (_ BitVec 8))) (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))
(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 8))))))
(declare-fun power3 ((_ BitVec 8) Int) (_ BitVec 8))
(define-fun bv_min3 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))
(define-fun bv_max3 ((x (_ BitVec 8)) (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))
(declare-sort unsigned_8 0)
(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 8))
(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))
(declare-fun user_eq3 (unsigned_8 unsigned_8) Bool)
(declare-const dummy3 unsigned_8)
(declare-datatypes () ((unsigned_8__ref (mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8 (unsigned_8__content a))
(declare-sort register_option 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (register_option register_option) Bool)
(declare-const dummy4 register_option)
(declare-datatypes () ((register_option__ref (mk_register_option__ref (register_option__content register_option)))))
(define-fun register_option__ref___projection ((a register_option__ref)) register_option (register_option__content a))
(declare-fun to_rep2 (register_option) Int)
(declare-fun of_rep2 (Int) register_option)
(assert (forall ((x register_option)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x register_option)) (! (in_range (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-fun to_rep3 (unsigned_16) (_ BitVec 16))
(declare-fun of_rep3 ((_ BitVec 16)) unsigned_16)
(assert (forall ((x unsigned_16)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert true)
(assert (forall ((x (_ BitVec 16))) (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun to_int7 ((x unsigned_16)) Int (bv2nat (to_rep3 x)))
(assert (forall ((x unsigned_16)) (! (uint_in_range2 (to_int7 x)) :pattern ((to_int7 x)))))
(declare-fun to_rep4 (unsigned_8) (_ BitVec 8))
(declare-fun of_rep4 ((_ BitVec 8)) unsigned_8)
(assert (forall ((x unsigned_8)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert true)
(assert (forall ((x (_ BitVec 8))) (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun to_int8 ((x unsigned_8)) Int (bv2nat (to_rep4 x)))
(assert (forall ((x unsigned_8)) (! (uint_in_range3 (to_int8 x)) :pattern ((to_int8 x)))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__discrimrec__register_type__option register_option)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) register_option (rec__discrimrec__register_type__option a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__discrimrec__register_type__value_64 unsigned_64) (rec__discrimrec__register_type__ignore_32a unsigned_32) (rec__discrimrec__register_type__value_32 unsigned_32) (rec__discrimrec__register_type__ignore_32b unsigned_32) (rec__discrimrec__register_type__ignore_16a unsigned_16) (rec__discrimrec__register_type__value_16 unsigned_16) (rec__discrimrec__register_type__ignore_32c unsigned_32) (rec__discrimrec__register_type__ignore_16b unsigned_16) (rec__discrimrec__register_type__value_high unsigned_8) (rec__discrimrec__register_type__value_low unsigned_8)))))
(define-fun us_split_fields_Value_64__projection ((a us_split_fields)) unsigned_64 (rec__discrimrec__register_type__value_64 a))
(define-fun us_split_fields_Ignore_32a__projection ((a us_split_fields)) unsigned_32 (rec__discrimrec__register_type__ignore_32a a))
(define-fun us_split_fields_Value_32__projection ((a us_split_fields)) unsigned_32 (rec__discrimrec__register_type__value_32 a))
(define-fun us_split_fields_Ignore_32b__projection ((a us_split_fields)) unsigned_32 (rec__discrimrec__register_type__ignore_32b a))
(define-fun us_split_fields_Ignore_16a__projection ((a us_split_fields)) unsigned_16 (rec__discrimrec__register_type__ignore_16a a))
(define-fun us_split_fields_Value_16__projection ((a us_split_fields)) unsigned_16 (rec__discrimrec__register_type__value_16 a))
(define-fun us_split_fields_Ignore_32c__projection ((a us_split_fields)) unsigned_32 (rec__discrimrec__register_type__ignore_32c a))
(define-fun us_split_fields_Ignore_16b__projection ((a us_split_fields)) unsigned_16 (rec__discrimrec__register_type__ignore_16b a))
(define-fun us_split_fields_Value_High__projection ((a us_split_fields)) unsigned_8 (rec__discrimrec__register_type__value_high a))
(define-fun us_split_fields_Value_Low__projection ((a us_split_fields)) unsigned_8 (rec__discrimrec__register_type__value_low a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun discrimrec__register_type__value_64__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 0))
(define-fun discrimrec__register_type__ignore_32a__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 1))
(define-fun discrimrec__register_type__value_32__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 1))
(define-fun discrimrec__register_type__ignore_32b__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 2))
(define-fun discrimrec__register_type__ignore_16a__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 2))
(define-fun discrimrec__register_type__value_16__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 2))
(define-fun discrimrec__register_type__ignore_32c__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 3))
(define-fun discrimrec__register_type__ignore_16b__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 3))
(define-fun discrimrec__register_type__value_high__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 3))
(define-fun discrimrec__register_type__value_low__pred ((a us_rep)) Bool (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 3))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a))) (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 b)))) (and (and (and (and (and (and (and (and (and (=> (discrimrec__register_type__value_64__pred a) (= (to_rep (rec__discrimrec__register_type__value_64 (us_split_fields1 a))) (to_rep (rec__discrimrec__register_type__value_64 (us_split_fields1 b))))) (=> (discrimrec__register_type__ignore_32a__pred a) (= (to_rep1 (rec__discrimrec__register_type__ignore_32a (us_split_fields1 a))) (to_rep1 (rec__discrimrec__register_type__ignore_32a (us_split_fields1 b)))))) (=> (discrimrec__register_type__value_32__pred a) (= (to_rep1 (rec__discrimrec__register_type__value_32 (us_split_fields1 a))) (to_rep1 (rec__discrimrec__register_type__value_32 (us_split_fields1 b)))))) (=> (discrimrec__register_type__ignore_32b__pred a) (= (to_rep1 (rec__discrimrec__register_type__ignore_32b (us_split_fields1 a))) (to_rep1 (rec__discrimrec__register_type__ignore_32b (us_split_fields1 b)))))) (=> (discrimrec__register_type__ignore_16a__pred a) (= (to_rep3 (rec__discrimrec__register_type__ignore_16a (us_split_fields1 a))) (to_rep3 (rec__discrimrec__register_type__ignore_16a (us_split_fields1 b)))))) (=> (discrimrec__register_type__value_16__pred a) (= (to_rep3 (rec__discrimrec__register_type__value_16 (us_split_fields1 a))) (to_rep3 (rec__discrimrec__register_type__value_16 (us_split_fields1 b)))))) (=> (discrimrec__register_type__ignore_32c__pred a) (= (to_rep1 (rec__discrimrec__register_type__ignore_32c (us_split_fields1 a))) (to_rep1 (rec__discrimrec__register_type__ignore_32c (us_split_fields1 b)))))) (=> (discrimrec__register_type__ignore_16b__pred a) (= (to_rep3 (rec__discrimrec__register_type__ignore_16b (us_split_fields1 a))) (to_rep3 (rec__discrimrec__register_type__ignore_16b (us_split_fields1 b)))))) (=> (discrimrec__register_type__value_high__pred a) (= (to_rep4 (rec__discrimrec__register_type__value_high (us_split_fields1 a))) (to_rep4 (rec__discrimrec__register_type__value_high (us_split_fields1 b)))))) (=> (discrimrec__register_type__value_low__pred a) (= (to_rep4 (rec__discrimrec__register_type__value_low (us_split_fields1 a))) (to_rep4 (rec__discrimrec__register_type__value_low (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const discrimrec__register_type__option__first__bit Int)
(declare-const discrimrec__register_type__option__last__bit Int)
(declare-const discrimrec__register_type__option__position Int)
(assert (<= 0 discrimrec__register_type__option__first__bit))
(assert (< discrimrec__register_type__option__first__bit discrimrec__register_type__option__last__bit))
(assert (<= 0 discrimrec__register_type__option__position))
(declare-const discrimrec__register_type__value_64__first__bit Int)
(declare-const discrimrec__register_type__value_64__last__bit Int)
(declare-const discrimrec__register_type__value_64__position Int)
(assert (<= 0 discrimrec__register_type__value_64__first__bit))
(assert (< discrimrec__register_type__value_64__first__bit discrimrec__register_type__value_64__last__bit))
(assert (<= 0 discrimrec__register_type__value_64__position))
(declare-const discrimrec__register_type__ignore_32a__first__bit Int)
(declare-const discrimrec__register_type__ignore_32a__last__bit Int)
(declare-const discrimrec__register_type__ignore_32a__position Int)
(assert (<= 0 discrimrec__register_type__ignore_32a__first__bit))
(assert (< discrimrec__register_type__ignore_32a__first__bit discrimrec__register_type__ignore_32a__last__bit))
(assert (<= 0 discrimrec__register_type__ignore_32a__position))
(declare-const discrimrec__register_type__value_32__first__bit Int)
(declare-const discrimrec__register_type__value_32__last__bit Int)
(declare-const discrimrec__register_type__value_32__position Int)
(assert (<= 0 discrimrec__register_type__value_32__first__bit))
(assert (< discrimrec__register_type__value_32__first__bit discrimrec__register_type__value_32__last__bit))
(assert (<= 0 discrimrec__register_type__value_32__position))
(declare-const discrimrec__register_type__ignore_32b__first__bit Int)
(declare-const discrimrec__register_type__ignore_32b__last__bit Int)
(declare-const discrimrec__register_type__ignore_32b__position Int)
(assert (<= 0 discrimrec__register_type__ignore_32b__first__bit))
(assert (< discrimrec__register_type__ignore_32b__first__bit discrimrec__register_type__ignore_32b__last__bit))
(assert (<= 0 discrimrec__register_type__ignore_32b__position))
(declare-const discrimrec__register_type__ignore_16a__first__bit Int)
(declare-const discrimrec__register_type__ignore_16a__last__bit Int)
(declare-const discrimrec__register_type__ignore_16a__position Int)
(assert (<= 0 discrimrec__register_type__ignore_16a__first__bit))
(assert (< discrimrec__register_type__ignore_16a__first__bit discrimrec__register_type__ignore_16a__last__bit))
(assert (<= 0 discrimrec__register_type__ignore_16a__position))
(declare-const discrimrec__register_type__value_16__first__bit Int)
(declare-const discrimrec__register_type__value_16__last__bit Int)
(declare-const discrimrec__register_type__value_16__position Int)
(assert (<= 0 discrimrec__register_type__value_16__first__bit))
(assert (< discrimrec__register_type__value_16__first__bit discrimrec__register_type__value_16__last__bit))
(assert (<= 0 discrimrec__register_type__value_16__position))
(declare-const discrimrec__register_type__ignore_32c__first__bit Int)
(declare-const discrimrec__register_type__ignore_32c__last__bit Int)
(declare-const discrimrec__register_type__ignore_32c__position Int)
(assert (<= 0 discrimrec__register_type__ignore_32c__first__bit))
(assert (< discrimrec__register_type__ignore_32c__first__bit discrimrec__register_type__ignore_32c__last__bit))
(assert (<= 0 discrimrec__register_type__ignore_32c__position))
(declare-const discrimrec__register_type__ignore_16b__first__bit Int)
(declare-const discrimrec__register_type__ignore_16b__last__bit Int)
(declare-const discrimrec__register_type__ignore_16b__position Int)
(assert (<= 0 discrimrec__register_type__ignore_16b__first__bit))
(assert (< discrimrec__register_type__ignore_16b__first__bit discrimrec__register_type__ignore_16b__last__bit))
(assert (<= 0 discrimrec__register_type__ignore_16b__position))
(declare-const discrimrec__register_type__value_high__first__bit Int)
(declare-const discrimrec__register_type__value_high__last__bit Int)
(declare-const discrimrec__register_type__value_high__position Int)
(assert (<= 0 discrimrec__register_type__value_high__first__bit))
(assert (< discrimrec__register_type__value_high__first__bit discrimrec__register_type__value_high__last__bit))
(assert (<= 0 discrimrec__register_type__value_high__position))
(declare-const discrimrec__register_type__value_low__first__bit Int)
(declare-const discrimrec__register_type__value_low__last__bit Int)
(declare-const discrimrec__register_type__value_low__position Int)
(assert (<= 0 discrimrec__register_type__value_low__first__bit))
(assert (< discrimrec__register_type__value_low__first__bit discrimrec__register_type__value_low__last__bit))
(assert (<= 0 discrimrec__register_type__value_low__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((register_type__ref (mk_register_type__ref (register_type__content us_rep)))))
(define-fun register_type__ref___projection ((a register_type__ref)) us_rep (register_type__content a))
(define-fun in_range1 ((rec__discrimrec__register_type__option1 Int) (a us_rep)) Bool (= rec__discrimrec__register_type__option1 (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const discrimrec__register_type__option__first__bit1 Int)
(declare-const discrimrec__register_type__option__last__bit1 Int)
(declare-const discrimrec__register_type__option__position1 Int)
(assert (<= 0 discrimrec__register_type__option__first__bit1))
(assert (< discrimrec__register_type__option__first__bit1 discrimrec__register_type__option__last__bit1))
(assert (<= 0 discrimrec__register_type__option__position1))
(declare-const discrimrec__register_type__ignore_32a__first__bit1 Int)
(declare-const discrimrec__register_type__ignore_32a__last__bit1 Int)
(declare-const discrimrec__register_type__ignore_32a__position1 Int)
(assert (<= 0 discrimrec__register_type__ignore_32a__first__bit1))
(assert (< discrimrec__register_type__ignore_32a__first__bit1 discrimrec__register_type__ignore_32a__last__bit1))
(assert (<= 0 discrimrec__register_type__ignore_32a__position1))
(declare-const discrimrec__register_type__value_32__first__bit1 Int)
(declare-const discrimrec__register_type__value_32__last__bit1 Int)
(declare-const discrimrec__register_type__value_32__position1 Int)
(assert (<= 0 discrimrec__register_type__value_32__first__bit1))
(assert (< discrimrec__register_type__value_32__first__bit1 discrimrec__register_type__value_32__last__bit1))
(assert (<= 0 discrimrec__register_type__value_32__position1))
(declare-const discrimrec__register_type__ignore_32b__first__bit1 Int)
(declare-const discrimrec__register_type__ignore_32b__last__bit1 Int)
(declare-const discrimrec__register_type__ignore_32b__position1 Int)
(assert (<= 0 discrimrec__register_type__ignore_32b__first__bit1))
(assert (< discrimrec__register_type__ignore_32b__first__bit1 discrimrec__register_type__ignore_32b__last__bit1))
(assert (<= 0 discrimrec__register_type__ignore_32b__position1))
(declare-const discrimrec__register_type__ignore_16a__first__bit1 Int)
(declare-const discrimrec__register_type__ignore_16a__last__bit1 Int)
(declare-const discrimrec__register_type__ignore_16a__position1 Int)
(assert (<= 0 discrimrec__register_type__ignore_16a__first__bit1))
(assert (< discrimrec__register_type__ignore_16a__first__bit1 discrimrec__register_type__ignore_16a__last__bit1))
(assert (<= 0 discrimrec__register_type__ignore_16a__position1))
(declare-const discrimrec__register_type__value_16__first__bit1 Int)
(declare-const discrimrec__register_type__value_16__last__bit1 Int)
(declare-const discrimrec__register_type__value_16__position1 Int)
(assert (<= 0 discrimrec__register_type__value_16__first__bit1))
(assert (< discrimrec__register_type__value_16__first__bit1 discrimrec__register_type__value_16__last__bit1))
(assert (<= 0 discrimrec__register_type__value_16__position1))
(declare-const discrimrec__register_type__ignore_32c__first__bit1 Int)
(declare-const discrimrec__register_type__ignore_32c__last__bit1 Int)
(declare-const discrimrec__register_type__ignore_32c__position1 Int)
(assert (<= 0 discrimrec__register_type__ignore_32c__first__bit1))
(assert (< discrimrec__register_type__ignore_32c__first__bit1 discrimrec__register_type__ignore_32c__last__bit1))
(assert (<= 0 discrimrec__register_type__ignore_32c__position1))
(declare-const discrimrec__register_type__ignore_16b__first__bit1 Int)
(declare-const discrimrec__register_type__ignore_16b__last__bit1 Int)
(declare-const discrimrec__register_type__ignore_16b__position1 Int)
(assert (<= 0 discrimrec__register_type__ignore_16b__first__bit1))
(assert (< discrimrec__register_type__ignore_16b__first__bit1 discrimrec__register_type__ignore_16b__last__bit1))
(assert (<= 0 discrimrec__register_type__ignore_16b__position1))
(declare-const discrimrec__register_type__value_high__first__bit1 Int)
(declare-const discrimrec__register_type__value_high__last__bit1 Int)
(declare-const discrimrec__register_type__value_high__position1 Int)
(assert (<= 0 discrimrec__register_type__value_high__first__bit1))
(assert (< discrimrec__register_type__value_high__first__bit1 discrimrec__register_type__value_high__last__bit1))
(assert (<= 0 discrimrec__register_type__value_high__position1))
(declare-const discrimrec__register_type__value_low__first__bit1 Int)
(declare-const discrimrec__register_type__value_low__last__bit1 Int)
(declare-const discrimrec__register_type__value_low__position1 Int)
(assert (<= 0 discrimrec__register_type__value_low__first__bit1))
(assert (< discrimrec__register_type__value_low__first__bit1 discrimrec__register_type__value_low__last__bit1))
(assert (<= 0 discrimrec__register_type__value_low__position1))
(declare-const discrimrec__register_type__value_64__first__bit1 Int)
(declare-const discrimrec__register_type__value_64__last__bit1 Int)
(declare-const discrimrec__register_type__value_64__position1 Int)
(assert (<= 0 discrimrec__register_type__value_64__first__bit1))
(assert (< discrimrec__register_type__value_64__first__bit1 discrimrec__register_type__value_64__last__bit1))
(assert (<= 0 discrimrec__register_type__value_64__position1))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((traxS__ref (mk_traxS__ref (traxS__content us_rep)))))
(define-fun traxS__ref___projection ((a traxS__ref)) us_rep (traxS__content a))
(define-fun dynamic_invariant ((temp___expr_212 us_rep) (temp___is_init_208 Bool) (temp___skip_constant_209 Bool) (temp___do_toplevel_210 Bool) (temp___do_typ_inv_211 Bool)) Bool (and (=> (not (= temp___skip_constant_209 true)) (in_range1 0 temp___expr_212)) (= (attr__constrained temp___expr_212) true)))
(define-fun default_initial_assumption ((temp___expr_214 us_rep) (temp___skip_top_level_215 Bool)) Bool (and (= (attr__constrained temp___expr_214) true) (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 temp___expr_214))) 0)))
(declare-const rax__split_discrs us_split_discrs)
(declare-const rax__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range2 ((rec__discrimrec__register_type__option1 Int) (a us_rep)) Bool (= rec__discrimrec__register_type__option1 (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const discrimrec__register_type__option__first__bit2 Int)
(declare-const discrimrec__register_type__option__last__bit2 Int)
(declare-const discrimrec__register_type__option__position2 Int)
(assert (<= 0 discrimrec__register_type__option__first__bit2))
(assert (< discrimrec__register_type__option__first__bit2 discrimrec__register_type__option__last__bit2))
(assert (<= 0 discrimrec__register_type__option__position2))
(declare-const discrimrec__register_type__ignore_32a__first__bit2 Int)
(declare-const discrimrec__register_type__ignore_32a__last__bit2 Int)
(declare-const discrimrec__register_type__ignore_32a__position2 Int)
(assert (<= 0 discrimrec__register_type__ignore_32a__first__bit2))
(assert (< discrimrec__register_type__ignore_32a__first__bit2 discrimrec__register_type__ignore_32a__last__bit2))
(assert (<= 0 discrimrec__register_type__ignore_32a__position2))
(declare-const discrimrec__register_type__value_32__first__bit2 Int)
(declare-const discrimrec__register_type__value_32__last__bit2 Int)
(declare-const discrimrec__register_type__value_32__position2 Int)
(assert (<= 0 discrimrec__register_type__value_32__first__bit2))
(assert (< discrimrec__register_type__value_32__first__bit2 discrimrec__register_type__value_32__last__bit2))
(assert (<= 0 discrimrec__register_type__value_32__position2))
(declare-const discrimrec__register_type__ignore_32b__first__bit2 Int)
(declare-const discrimrec__register_type__ignore_32b__last__bit2 Int)
(declare-const discrimrec__register_type__ignore_32b__position2 Int)
(assert (<= 0 discrimrec__register_type__ignore_32b__first__bit2))
(assert (< discrimrec__register_type__ignore_32b__first__bit2 discrimrec__register_type__ignore_32b__last__bit2))
(assert (<= 0 discrimrec__register_type__ignore_32b__position2))
(declare-const discrimrec__register_type__ignore_16a__first__bit2 Int)
(declare-const discrimrec__register_type__ignore_16a__last__bit2 Int)
(declare-const discrimrec__register_type__ignore_16a__position2 Int)
(assert (<= 0 discrimrec__register_type__ignore_16a__first__bit2))
(assert (< discrimrec__register_type__ignore_16a__first__bit2 discrimrec__register_type__ignore_16a__last__bit2))
(assert (<= 0 discrimrec__register_type__ignore_16a__position2))
(declare-const discrimrec__register_type__value_16__first__bit2 Int)
(declare-const discrimrec__register_type__value_16__last__bit2 Int)
(declare-const discrimrec__register_type__value_16__position2 Int)
(assert (<= 0 discrimrec__register_type__value_16__first__bit2))
(assert (< discrimrec__register_type__value_16__first__bit2 discrimrec__register_type__value_16__last__bit2))
(assert (<= 0 discrimrec__register_type__value_16__position2))
(declare-const discrimrec__register_type__ignore_32c__first__bit2 Int)
(declare-const discrimrec__register_type__ignore_32c__last__bit2 Int)
(declare-const discrimrec__register_type__ignore_32c__position2 Int)
(assert (<= 0 discrimrec__register_type__ignore_32c__first__bit2))
(assert (< discrimrec__register_type__ignore_32c__first__bit2 discrimrec__register_type__ignore_32c__last__bit2))
(assert (<= 0 discrimrec__register_type__ignore_32c__position2))
(declare-const discrimrec__register_type__ignore_16b__first__bit2 Int)
(declare-const discrimrec__register_type__ignore_16b__last__bit2 Int)
(declare-const discrimrec__register_type__ignore_16b__position2 Int)
(assert (<= 0 discrimrec__register_type__ignore_16b__first__bit2))
(assert (< discrimrec__register_type__ignore_16b__first__bit2 discrimrec__register_type__ignore_16b__last__bit2))
(assert (<= 0 discrimrec__register_type__ignore_16b__position2))
(declare-const discrimrec__register_type__value_high__first__bit2 Int)
(declare-const discrimrec__register_type__value_high__last__bit2 Int)
(declare-const discrimrec__register_type__value_high__position2 Int)
(assert (<= 0 discrimrec__register_type__value_high__first__bit2))
(assert (< discrimrec__register_type__value_high__first__bit2 discrimrec__register_type__value_high__last__bit2))
(assert (<= 0 discrimrec__register_type__value_high__position2))
(declare-const discrimrec__register_type__value_low__first__bit2 Int)
(declare-const discrimrec__register_type__value_low__last__bit2 Int)
(declare-const discrimrec__register_type__value_low__position2 Int)
(assert (<= 0 discrimrec__register_type__value_low__first__bit2))
(assert (< discrimrec__register_type__value_low__first__bit2 discrimrec__register_type__value_low__last__bit2))
(assert (<= 0 discrimrec__register_type__value_low__position2))
(declare-const discrimrec__register_type__value_64__first__bit2 Int)
(declare-const discrimrec__register_type__value_64__last__bit2 Int)
(declare-const discrimrec__register_type__value_64__position2 Int)
(assert (<= 0 discrimrec__register_type__value_64__first__bit2))
(assert (< discrimrec__register_type__value_64__first__bit2 discrimrec__register_type__value_64__last__bit2))
(assert (<= 0 discrimrec__register_type__value_64__position2))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((register_bit_64__ref (mk_register_bit_64__ref (register_bit_64__content us_rep)))))
(define-fun register_bit_64__ref___projection ((a register_bit_64__ref)) us_rep (register_bit_64__content a))
(define-fun in_range3 ((rec__discrimrec__register_type__option1 Int) (a us_rep)) Bool (= rec__discrimrec__register_type__option1 (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const discrimrec__register_type__option__first__bit3 Int)
(declare-const discrimrec__register_type__option__last__bit3 Int)
(declare-const discrimrec__register_type__option__position3 Int)
(assert (<= 0 discrimrec__register_type__option__first__bit3))
(assert (< discrimrec__register_type__option__first__bit3 discrimrec__register_type__option__last__bit3))
(assert (<= 0 discrimrec__register_type__option__position3))
(declare-const discrimrec__register_type__value_64__first__bit3 Int)
(declare-const discrimrec__register_type__value_64__last__bit3 Int)
(declare-const discrimrec__register_type__value_64__position3 Int)
(assert (<= 0 discrimrec__register_type__value_64__first__bit3))
(assert (< discrimrec__register_type__value_64__first__bit3 discrimrec__register_type__value_64__last__bit3))
(assert (<= 0 discrimrec__register_type__value_64__position3))
(declare-const discrimrec__register_type__ignore_32b__first__bit3 Int)
(declare-const discrimrec__register_type__ignore_32b__last__bit3 Int)
(declare-const discrimrec__register_type__ignore_32b__position3 Int)
(assert (<= 0 discrimrec__register_type__ignore_32b__first__bit3))
(assert (< discrimrec__register_type__ignore_32b__first__bit3 discrimrec__register_type__ignore_32b__last__bit3))
(assert (<= 0 discrimrec__register_type__ignore_32b__position3))
(declare-const discrimrec__register_type__ignore_16a__first__bit3 Int)
(declare-const discrimrec__register_type__ignore_16a__last__bit3 Int)
(declare-const discrimrec__register_type__ignore_16a__position3 Int)
(assert (<= 0 discrimrec__register_type__ignore_16a__first__bit3))
(assert (< discrimrec__register_type__ignore_16a__first__bit3 discrimrec__register_type__ignore_16a__last__bit3))
(assert (<= 0 discrimrec__register_type__ignore_16a__position3))
(declare-const discrimrec__register_type__value_16__first__bit3 Int)
(declare-const discrimrec__register_type__value_16__last__bit3 Int)
(declare-const discrimrec__register_type__value_16__position3 Int)
(assert (<= 0 discrimrec__register_type__value_16__first__bit3))
(assert (< discrimrec__register_type__value_16__first__bit3 discrimrec__register_type__value_16__last__bit3))
(assert (<= 0 discrimrec__register_type__value_16__position3))
(declare-const discrimrec__register_type__ignore_32c__first__bit3 Int)
(declare-const discrimrec__register_type__ignore_32c__last__bit3 Int)
(declare-const discrimrec__register_type__ignore_32c__position3 Int)
(assert (<= 0 discrimrec__register_type__ignore_32c__first__bit3))
(assert (< discrimrec__register_type__ignore_32c__first__bit3 discrimrec__register_type__ignore_32c__last__bit3))
(assert (<= 0 discrimrec__register_type__ignore_32c__position3))
(declare-const discrimrec__register_type__ignore_16b__first__bit3 Int)
(declare-const discrimrec__register_type__ignore_16b__last__bit3 Int)
(declare-const discrimrec__register_type__ignore_16b__position3 Int)
(assert (<= 0 discrimrec__register_type__ignore_16b__first__bit3))
(assert (< discrimrec__register_type__ignore_16b__first__bit3 discrimrec__register_type__ignore_16b__last__bit3))
(assert (<= 0 discrimrec__register_type__ignore_16b__position3))
(declare-const discrimrec__register_type__value_high__first__bit3 Int)
(declare-const discrimrec__register_type__value_high__last__bit3 Int)
(declare-const discrimrec__register_type__value_high__position3 Int)
(assert (<= 0 discrimrec__register_type__value_high__first__bit3))
(assert (< discrimrec__register_type__value_high__first__bit3 discrimrec__register_type__value_high__last__bit3))
(assert (<= 0 discrimrec__register_type__value_high__position3))
(declare-const discrimrec__register_type__value_low__first__bit3 Int)
(declare-const discrimrec__register_type__value_low__last__bit3 Int)
(declare-const discrimrec__register_type__value_low__position3 Int)
(assert (<= 0 discrimrec__register_type__value_low__first__bit3))
(assert (< discrimrec__register_type__value_low__first__bit3 discrimrec__register_type__value_low__last__bit3))
(assert (<= 0 discrimrec__register_type__value_low__position3))
(declare-const discrimrec__register_type__ignore_32a__first__bit3 Int)
(declare-const discrimrec__register_type__ignore_32a__last__bit3 Int)
(declare-const discrimrec__register_type__ignore_32a__position3 Int)
(assert (<= 0 discrimrec__register_type__ignore_32a__first__bit3))
(assert (< discrimrec__register_type__ignore_32a__first__bit3 discrimrec__register_type__ignore_32a__last__bit3))
(assert (<= 0 discrimrec__register_type__ignore_32a__position3))
(declare-const discrimrec__register_type__value_32__first__bit3 Int)
(declare-const discrimrec__register_type__value_32__last__bit3 Int)
(declare-const discrimrec__register_type__value_32__position3 Int)
(assert (<= 0 discrimrec__register_type__value_32__first__bit3))
(assert (< discrimrec__register_type__value_32__first__bit3 discrimrec__register_type__value_32__last__bit3))
(assert (<= 0 discrimrec__register_type__value_32__position3))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((register_bit_32__ref (mk_register_bit_32__ref (register_bit_32__content us_rep)))))
(define-fun register_bit_32__ref___projection ((a register_bit_32__ref)) us_rep (register_bit_32__content a))
(define-fun dynamic_invariant1 ((temp___expr_232 us_rep) (temp___is_init_228 Bool) (temp___skip_constant_229 Bool) (temp___do_toplevel_230 Bool) (temp___do_typ_inv_231 Bool)) Bool (and (=> (not (= temp___skip_constant_229 true)) (in_range2 0 temp___expr_232)) (= (attr__constrained temp___expr_232) true)))
(define-fun default_initial_assumption1 ((temp___expr_234 us_rep) (temp___skip_top_level_235 Bool)) Bool (and (= (attr__constrained temp___expr_234) true) (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 temp___expr_234))) 0)))
(define-fun dynamic_invariant2 ((temp___expr_251 us_rep) (temp___is_init_247 Bool) (temp___skip_constant_248 Bool) (temp___do_toplevel_249 Bool) (temp___do_typ_inv_250 Bool)) Bool (and (=> (not (= temp___skip_constant_248 true)) (in_range3 1 temp___expr_251)) (= (attr__constrained temp___expr_251) true)))
(define-fun default_initial_assumption2 ((temp___expr_253 us_rep) (temp___skip_top_level_254 Bool)) Bool (and (= (attr__constrained temp___expr_253) true) (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 temp___expr_253))) 1)))
(declare-fun convert_bit_64_to_bit_32 (us_rep) us_rep)
(declare-fun convert_bit_64_to_bit_32__function_guard (us_rep us_rep) Bool)
(define-fun in_range4 ((rec__discrimrec__register_type__option1 Int) (a us_rep)) Bool (= rec__discrimrec__register_type__option1 (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))
(declare-const discrimrec__register_type__option__first__bit4 Int)
(declare-const discrimrec__register_type__option__last__bit4 Int)
(declare-const discrimrec__register_type__option__position4 Int)
(assert (<= 0 discrimrec__register_type__option__first__bit4))
(assert (< discrimrec__register_type__option__first__bit4 discrimrec__register_type__option__last__bit4))
(assert (<= 0 discrimrec__register_type__option__position4))
(declare-const discrimrec__register_type__value_64__first__bit4 Int)
(declare-const discrimrec__register_type__value_64__last__bit4 Int)
(declare-const discrimrec__register_type__value_64__position4 Int)
(assert (<= 0 discrimrec__register_type__value_64__first__bit4))
(assert (< discrimrec__register_type__value_64__first__bit4 discrimrec__register_type__value_64__last__bit4))
(assert (<= 0 discrimrec__register_type__value_64__position4))
(declare-const discrimrec__register_type__ignore_32b__first__bit4 Int)
(declare-const discrimrec__register_type__ignore_32b__last__bit4 Int)
(declare-const discrimrec__register_type__ignore_32b__position4 Int)
(assert (<= 0 discrimrec__register_type__ignore_32b__first__bit4))
(assert (< discrimrec__register_type__ignore_32b__first__bit4 discrimrec__register_type__ignore_32b__last__bit4))
(assert (<= 0 discrimrec__register_type__ignore_32b__position4))
(declare-const discrimrec__register_type__ignore_16a__first__bit4 Int)
(declare-const discrimrec__register_type__ignore_16a__last__bit4 Int)
(declare-const discrimrec__register_type__ignore_16a__position4 Int)
(assert (<= 0 discrimrec__register_type__ignore_16a__first__bit4))
(assert (< discrimrec__register_type__ignore_16a__first__bit4 discrimrec__register_type__ignore_16a__last__bit4))
(assert (<= 0 discrimrec__register_type__ignore_16a__position4))
(declare-const discrimrec__register_type__value_16__first__bit4 Int)
(declare-const discrimrec__register_type__value_16__last__bit4 Int)
(declare-const discrimrec__register_type__value_16__position4 Int)
(assert (<= 0 discrimrec__register_type__value_16__first__bit4))
(assert (< discrimrec__register_type__value_16__first__bit4 discrimrec__register_type__value_16__last__bit4))
(assert (<= 0 discrimrec__register_type__value_16__position4))
(declare-const discrimrec__register_type__ignore_32c__first__bit4 Int)
(declare-const discrimrec__register_type__ignore_32c__last__bit4 Int)
(declare-const discrimrec__register_type__ignore_32c__position4 Int)
(assert (<= 0 discrimrec__register_type__ignore_32c__first__bit4))
(assert (< discrimrec__register_type__ignore_32c__first__bit4 discrimrec__register_type__ignore_32c__last__bit4))
(assert (<= 0 discrimrec__register_type__ignore_32c__position4))
(declare-const discrimrec__register_type__ignore_16b__first__bit4 Int)
(declare-const discrimrec__register_type__ignore_16b__last__bit4 Int)
(declare-const discrimrec__register_type__ignore_16b__position4 Int)
(assert (<= 0 discrimrec__register_type__ignore_16b__first__bit4))
(assert (< discrimrec__register_type__ignore_16b__first__bit4 discrimrec__register_type__ignore_16b__last__bit4))
(assert (<= 0 discrimrec__register_type__ignore_16b__position4))
(declare-const discrimrec__register_type__value_high__first__bit4 Int)
(declare-const discrimrec__register_type__value_high__last__bit4 Int)
(declare-const discrimrec__register_type__value_high__position4 Int)
(assert (<= 0 discrimrec__register_type__value_high__first__bit4))
(assert (< discrimrec__register_type__value_high__first__bit4 discrimrec__register_type__value_high__last__bit4))
(assert (<= 0 discrimrec__register_type__value_high__position4))
(declare-const discrimrec__register_type__value_low__first__bit4 Int)
(declare-const discrimrec__register_type__value_low__last__bit4 Int)
(declare-const discrimrec__register_type__value_low__position4 Int)
(assert (<= 0 discrimrec__register_type__value_low__first__bit4))
(assert (< discrimrec__register_type__value_low__first__bit4 discrimrec__register_type__value_low__last__bit4))
(assert (<= 0 discrimrec__register_type__value_low__position4))
(declare-const discrimrec__register_type__ignore_32a__first__bit4 Int)
(declare-const discrimrec__register_type__ignore_32a__last__bit4 Int)
(declare-const discrimrec__register_type__ignore_32a__position4 Int)
(assert (<= 0 discrimrec__register_type__ignore_32a__first__bit4))
(assert (< discrimrec__register_type__ignore_32a__first__bit4 discrimrec__register_type__ignore_32a__last__bit4))
(assert (<= 0 discrimrec__register_type__ignore_32a__position4))
(declare-const discrimrec__register_type__value_32__first__bit4 Int)
(declare-const discrimrec__register_type__value_32__last__bit4 Int)
(declare-const discrimrec__register_type__value_32__position4 Int)
(assert (<= 0 discrimrec__register_type__value_32__first__bit4))
(assert (< discrimrec__register_type__value_32__first__bit4 discrimrec__register_type__value_32__last__bit4))
(assert (<= 0 discrimrec__register_type__value_32__position4))
(declare-fun user_eq9 (us_rep us_rep) Bool)
(declare-const dummy9 us_rep)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content us_rep)))))
(define-fun t5b__ref___projection ((a t5b__ref)) us_rep (t5b__content a))
(assert (forall ((reg us_rep)) (! (=> (dynamic_invariant1 reg true true true true) (dynamic_invariant2 (convert_bit_64_to_bit_32 reg) true false true true)) :pattern ((convert_bit_64_to_bit_32 reg)))))
(assert (forall ((reg us_rep)) (! (=> (dynamic_invariant1 reg true true true true) (= (convert_bit_64_to_bit_32 reg) (mk___rep (mk___split_discrs (of_rep2 1)) (mk___split_fields dummy (of_rep1 #x00000000) (of_rep1 ((_ extract 31 0) (bvurem (to_rep (rec__discrimrec__register_type__value_64 (us_split_fields1 reg))) #x0000000100000000))) dummy1 dummy2 dummy2 dummy1 dummy2 dummy3 dummy3) true))) :pattern ((convert_bit_64_to_bit_32 reg)))))
(define-fun in_range5 ((rec__discrimrec__register_type__option1 Int) (a us_rep)) Bool (= rec__discrimrec__register_type__option1 (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))
(declare-const discrimrec__register_type__option__first__bit5 Int)
(declare-const discrimrec__register_type__option__last__bit5 Int)
(declare-const discrimrec__register_type__option__position5 Int)
(assert (<= 0 discrimrec__register_type__option__first__bit5))
(assert (< discrimrec__register_type__option__first__bit5 discrimrec__register_type__option__last__bit5))
(assert (<= 0 discrimrec__register_type__option__position5))
(declare-const discrimrec__register_type__value_64__first__bit5 Int)
(declare-const discrimrec__register_type__value_64__last__bit5 Int)
(declare-const discrimrec__register_type__value_64__position5 Int)
(assert (<= 0 discrimrec__register_type__value_64__first__bit5))
(assert (< discrimrec__register_type__value_64__first__bit5 discrimrec__register_type__value_64__last__bit5))
(assert (<= 0 discrimrec__register_type__value_64__position5))
(declare-const discrimrec__register_type__ignore_32b__first__bit5 Int)
(declare-const discrimrec__register_type__ignore_32b__last__bit5 Int)
(declare-const discrimrec__register_type__ignore_32b__position5 Int)
(assert (<= 0 discrimrec__register_type__ignore_32b__first__bit5))
(assert (< discrimrec__register_type__ignore_32b__first__bit5 discrimrec__register_type__ignore_32b__last__bit5))
(assert (<= 0 discrimrec__register_type__ignore_32b__position5))
(declare-const discrimrec__register_type__ignore_16a__first__bit5 Int)
(declare-const discrimrec__register_type__ignore_16a__last__bit5 Int)
(declare-const discrimrec__register_type__ignore_16a__position5 Int)
(assert (<= 0 discrimrec__register_type__ignore_16a__first__bit5))
(assert (< discrimrec__register_type__ignore_16a__first__bit5 discrimrec__register_type__ignore_16a__last__bit5))
(assert (<= 0 discrimrec__register_type__ignore_16a__position5))
(declare-const discrimrec__register_type__value_16__first__bit5 Int)
(declare-const discrimrec__register_type__value_16__last__bit5 Int)
(declare-const discrimrec__register_type__value_16__position5 Int)
(assert (<= 0 discrimrec__register_type__value_16__first__bit5))
(assert (< discrimrec__register_type__value_16__first__bit5 discrimrec__register_type__value_16__last__bit5))
(assert (<= 0 discrimrec__register_type__value_16__position5))
(declare-const discrimrec__register_type__ignore_32c__first__bit5 Int)
(declare-const discrimrec__register_type__ignore_32c__last__bit5 Int)
(declare-const discrimrec__register_type__ignore_32c__position5 Int)
(assert (<= 0 discrimrec__register_type__ignore_32c__first__bit5))
(assert (< discrimrec__register_type__ignore_32c__first__bit5 discrimrec__register_type__ignore_32c__last__bit5))
(assert (<= 0 discrimrec__register_type__ignore_32c__position5))
(declare-const discrimrec__register_type__ignore_16b__first__bit5 Int)
(declare-const discrimrec__register_type__ignore_16b__last__bit5 Int)
(declare-const discrimrec__register_type__ignore_16b__position5 Int)
(assert (<= 0 discrimrec__register_type__ignore_16b__first__bit5))
(assert (< discrimrec__register_type__ignore_16b__first__bit5 discrimrec__register_type__ignore_16b__last__bit5))
(assert (<= 0 discrimrec__register_type__ignore_16b__position5))
(declare-const discrimrec__register_type__value_high__first__bit5 Int)
(declare-const discrimrec__register_type__value_high__last__bit5 Int)
(declare-const discrimrec__register_type__value_high__position5 Int)
(assert (<= 0 discrimrec__register_type__value_high__first__bit5))
(assert (< discrimrec__register_type__value_high__first__bit5 discrimrec__register_type__value_high__last__bit5))
(assert (<= 0 discrimrec__register_type__value_high__position5))
(declare-const discrimrec__register_type__value_low__first__bit5 Int)
(declare-const discrimrec__register_type__value_low__last__bit5 Int)
(declare-const discrimrec__register_type__value_low__position5 Int)
(assert (<= 0 discrimrec__register_type__value_low__first__bit5))
(assert (< discrimrec__register_type__value_low__first__bit5 discrimrec__register_type__value_low__last__bit5))
(assert (<= 0 discrimrec__register_type__value_low__position5))
(declare-const discrimrec__register_type__ignore_32a__first__bit5 Int)
(declare-const discrimrec__register_type__ignore_32a__last__bit5 Int)
(declare-const discrimrec__register_type__ignore_32a__position5 Int)
(assert (<= 0 discrimrec__register_type__ignore_32a__first__bit5))
(assert (< discrimrec__register_type__ignore_32a__first__bit5 discrimrec__register_type__ignore_32a__last__bit5))
(assert (<= 0 discrimrec__register_type__ignore_32a__position5))
(declare-const discrimrec__register_type__value_32__first__bit5 Int)
(declare-const discrimrec__register_type__value_32__last__bit5 Int)
(declare-const discrimrec__register_type__value_32__position5 Int)
(assert (<= 0 discrimrec__register_type__value_32__first__bit5))
(assert (< discrimrec__register_type__value_32__first__bit5 discrimrec__register_type__value_32__last__bit5))
(assert (<= 0 discrimrec__register_type__value_32__position5))
(declare-fun user_eq10 (us_rep us_rep) Bool)
(declare-const dummy10 us_rep)
(declare-datatypes () ((teaxS__ref (mk_teaxS__ref (teaxS__content us_rep)))))
(define-fun teaxS__ref___projection ((a teaxS__ref)) us_rep (teaxS__content a))
(define-fun dynamic_invariant3 ((temp___expr_270 us_rep) (temp___is_init_266 Bool) (temp___skip_constant_267 Bool) (temp___do_toplevel_268 Bool) (temp___do_typ_inv_269 Bool)) Bool (and (=> (not (= temp___skip_constant_267 true)) (in_range5 1 temp___expr_270)) (= (attr__constrained temp___expr_270) true)))
(define-fun default_initial_assumption3 ((temp___expr_272 us_rep) (temp___skip_top_level_273 Bool)) Bool (and (= (attr__constrained temp___expr_272) true) (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 temp___expr_272))) 1)))
(declare-const eax__split_discrs us_split_discrs)
(declare-const eax__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range6 ((rec__discrimrec__register_type__option1 Int) (a us_rep)) Bool (= rec__discrimrec__register_type__option1 (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))
(declare-const discrimrec__register_type__option__first__bit6 Int)
(declare-const discrimrec__register_type__option__last__bit6 Int)
(declare-const discrimrec__register_type__option__position6 Int)
(assert (<= 0 discrimrec__register_type__option__first__bit6))
(assert (< discrimrec__register_type__option__first__bit6 discrimrec__register_type__option__last__bit6))
(assert (<= 0 discrimrec__register_type__option__position6))
(declare-const discrimrec__register_type__ignore_32a__first__bit6 Int)
(declare-const discrimrec__register_type__ignore_32a__last__bit6 Int)
(declare-const discrimrec__register_type__ignore_32a__position6 Int)
(assert (<= 0 discrimrec__register_type__ignore_32a__first__bit6))
(assert (< discrimrec__register_type__ignore_32a__first__bit6 discrimrec__register_type__ignore_32a__last__bit6))
(assert (<= 0 discrimrec__register_type__ignore_32a__position6))
(declare-const discrimrec__register_type__value_32__first__bit6 Int)
(declare-const discrimrec__register_type__value_32__last__bit6 Int)
(declare-const discrimrec__register_type__value_32__position6 Int)
(assert (<= 0 discrimrec__register_type__value_32__first__bit6))
(assert (< discrimrec__register_type__value_32__first__bit6 discrimrec__register_type__value_32__last__bit6))
(assert (<= 0 discrimrec__register_type__value_32__position6))
(declare-const discrimrec__register_type__ignore_32b__first__bit6 Int)
(declare-const discrimrec__register_type__ignore_32b__last__bit6 Int)
(declare-const discrimrec__register_type__ignore_32b__position6 Int)
(assert (<= 0 discrimrec__register_type__ignore_32b__first__bit6))
(assert (< discrimrec__register_type__ignore_32b__first__bit6 discrimrec__register_type__ignore_32b__last__bit6))
(assert (<= 0 discrimrec__register_type__ignore_32b__position6))
(declare-const discrimrec__register_type__ignore_16a__first__bit6 Int)
(declare-const discrimrec__register_type__ignore_16a__last__bit6 Int)
(declare-const discrimrec__register_type__ignore_16a__position6 Int)
(assert (<= 0 discrimrec__register_type__ignore_16a__first__bit6))
(assert (< discrimrec__register_type__ignore_16a__first__bit6 discrimrec__register_type__ignore_16a__last__bit6))
(assert (<= 0 discrimrec__register_type__ignore_16a__position6))
(declare-const discrimrec__register_type__value_16__first__bit6 Int)
(declare-const discrimrec__register_type__value_16__last__bit6 Int)
(declare-const discrimrec__register_type__value_16__position6 Int)
(assert (<= 0 discrimrec__register_type__value_16__first__bit6))
(assert (< discrimrec__register_type__value_16__first__bit6 discrimrec__register_type__value_16__last__bit6))
(assert (<= 0 discrimrec__register_type__value_16__position6))
(declare-const discrimrec__register_type__ignore_32c__first__bit6 Int)
(declare-const discrimrec__register_type__ignore_32c__last__bit6 Int)
(declare-const discrimrec__register_type__ignore_32c__position6 Int)
(assert (<= 0 discrimrec__register_type__ignore_32c__first__bit6))
(assert (< discrimrec__register_type__ignore_32c__first__bit6 discrimrec__register_type__ignore_32c__last__bit6))
(assert (<= 0 discrimrec__register_type__ignore_32c__position6))
(declare-const discrimrec__register_type__ignore_16b__first__bit6 Int)
(declare-const discrimrec__register_type__ignore_16b__last__bit6 Int)
(declare-const discrimrec__register_type__ignore_16b__position6 Int)
(assert (<= 0 discrimrec__register_type__ignore_16b__first__bit6))
(assert (< discrimrec__register_type__ignore_16b__first__bit6 discrimrec__register_type__ignore_16b__last__bit6))
(assert (<= 0 discrimrec__register_type__ignore_16b__position6))
(declare-const discrimrec__register_type__value_high__first__bit6 Int)
(declare-const discrimrec__register_type__value_high__last__bit6 Int)
(declare-const discrimrec__register_type__value_high__position6 Int)
(assert (<= 0 discrimrec__register_type__value_high__first__bit6))
(assert (< discrimrec__register_type__value_high__first__bit6 discrimrec__register_type__value_high__last__bit6))
(assert (<= 0 discrimrec__register_type__value_high__position6))
(declare-const discrimrec__register_type__value_low__first__bit6 Int)
(declare-const discrimrec__register_type__value_low__last__bit6 Int)
(declare-const discrimrec__register_type__value_low__position6 Int)
(assert (<= 0 discrimrec__register_type__value_low__first__bit6))
(assert (< discrimrec__register_type__value_low__first__bit6 discrimrec__register_type__value_low__last__bit6))
(assert (<= 0 discrimrec__register_type__value_low__position6))
(declare-const discrimrec__register_type__value_64__first__bit6 Int)
(declare-const discrimrec__register_type__value_64__last__bit6 Int)
(declare-const discrimrec__register_type__value_64__position6 Int)
(assert (<= 0 discrimrec__register_type__value_64__first__bit6))
(assert (< discrimrec__register_type__value_64__first__bit6 discrimrec__register_type__value_64__last__bit6))
(assert (<= 0 discrimrec__register_type__value_64__position6))
(declare-fun user_eq11 (us_rep us_rep) Bool)
(declare-const dummy11 us_rep)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content us_rep)))))
(define-fun t2b__ref___projection ((a t2b__ref)) us_rep (t2b__content a))
(define-fun in_range7 ((rec__discrimrec__register_type__option1 Int) (a us_rep)) Bool (= rec__discrimrec__register_type__option1 (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 a)))))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep)) (<= 0 (object__alignment7 a))))
(declare-const discrimrec__register_type__option__first__bit7 Int)
(declare-const discrimrec__register_type__option__last__bit7 Int)
(declare-const discrimrec__register_type__option__position7 Int)
(assert (<= 0 discrimrec__register_type__option__first__bit7))
(assert (< discrimrec__register_type__option__first__bit7 discrimrec__register_type__option__last__bit7))
(assert (<= 0 discrimrec__register_type__option__position7))
(declare-const discrimrec__register_type__ignore_32a__first__bit7 Int)
(declare-const discrimrec__register_type__ignore_32a__last__bit7 Int)
(declare-const discrimrec__register_type__ignore_32a__position7 Int)
(assert (<= 0 discrimrec__register_type__ignore_32a__first__bit7))
(assert (< discrimrec__register_type__ignore_32a__first__bit7 discrimrec__register_type__ignore_32a__last__bit7))
(assert (<= 0 discrimrec__register_type__ignore_32a__position7))
(declare-const discrimrec__register_type__value_32__first__bit7 Int)
(declare-const discrimrec__register_type__value_32__last__bit7 Int)
(declare-const discrimrec__register_type__value_32__position7 Int)
(assert (<= 0 discrimrec__register_type__value_32__first__bit7))
(assert (< discrimrec__register_type__value_32__first__bit7 discrimrec__register_type__value_32__last__bit7))
(assert (<= 0 discrimrec__register_type__value_32__position7))
(declare-const discrimrec__register_type__ignore_32b__first__bit7 Int)
(declare-const discrimrec__register_type__ignore_32b__last__bit7 Int)
(declare-const discrimrec__register_type__ignore_32b__position7 Int)
(assert (<= 0 discrimrec__register_type__ignore_32b__first__bit7))
(assert (< discrimrec__register_type__ignore_32b__first__bit7 discrimrec__register_type__ignore_32b__last__bit7))
(assert (<= 0 discrimrec__register_type__ignore_32b__position7))
(declare-const discrimrec__register_type__ignore_16a__first__bit7 Int)
(declare-const discrimrec__register_type__ignore_16a__last__bit7 Int)
(declare-const discrimrec__register_type__ignore_16a__position7 Int)
(assert (<= 0 discrimrec__register_type__ignore_16a__first__bit7))
(assert (< discrimrec__register_type__ignore_16a__first__bit7 discrimrec__register_type__ignore_16a__last__bit7))
(assert (<= 0 discrimrec__register_type__ignore_16a__position7))
(declare-const discrimrec__register_type__value_16__first__bit7 Int)
(declare-const discrimrec__register_type__value_16__last__bit7 Int)
(declare-const discrimrec__register_type__value_16__position7 Int)
(assert (<= 0 discrimrec__register_type__value_16__first__bit7))
(assert (< discrimrec__register_type__value_16__first__bit7 discrimrec__register_type__value_16__last__bit7))
(assert (<= 0 discrimrec__register_type__value_16__position7))
(declare-const discrimrec__register_type__ignore_32c__first__bit7 Int)
(declare-const discrimrec__register_type__ignore_32c__last__bit7 Int)
(declare-const discrimrec__register_type__ignore_32c__position7 Int)
(assert (<= 0 discrimrec__register_type__ignore_32c__first__bit7))
(assert (< discrimrec__register_type__ignore_32c__first__bit7 discrimrec__register_type__ignore_32c__last__bit7))
(assert (<= 0 discrimrec__register_type__ignore_32c__position7))
(declare-const discrimrec__register_type__ignore_16b__first__bit7 Int)
(declare-const discrimrec__register_type__ignore_16b__last__bit7 Int)
(declare-const discrimrec__register_type__ignore_16b__position7 Int)
(assert (<= 0 discrimrec__register_type__ignore_16b__first__bit7))
(assert (< discrimrec__register_type__ignore_16b__first__bit7 discrimrec__register_type__ignore_16b__last__bit7))
(assert (<= 0 discrimrec__register_type__ignore_16b__position7))
(declare-const discrimrec__register_type__value_high__first__bit7 Int)
(declare-const discrimrec__register_type__value_high__last__bit7 Int)
(declare-const discrimrec__register_type__value_high__position7 Int)
(assert (<= 0 discrimrec__register_type__value_high__first__bit7))
(assert (< discrimrec__register_type__value_high__first__bit7 discrimrec__register_type__value_high__last__bit7))
(assert (<= 0 discrimrec__register_type__value_high__position7))
(declare-const discrimrec__register_type__value_low__first__bit7 Int)
(declare-const discrimrec__register_type__value_low__last__bit7 Int)
(declare-const discrimrec__register_type__value_low__position7 Int)
(assert (<= 0 discrimrec__register_type__value_low__first__bit7))
(assert (< discrimrec__register_type__value_low__first__bit7 discrimrec__register_type__value_low__last__bit7))
(assert (<= 0 discrimrec__register_type__value_low__position7))
(declare-const discrimrec__register_type__value_64__first__bit7 Int)
(declare-const discrimrec__register_type__value_64__last__bit7 Int)
(declare-const discrimrec__register_type__value_64__position7 Int)
(assert (<= 0 discrimrec__register_type__value_64__first__bit7))
(assert (< discrimrec__register_type__value_64__first__bit7 discrimrec__register_type__value_64__last__bit7))
(assert (<= 0 discrimrec__register_type__value_64__position7))
(declare-fun user_eq12 (us_rep us_rep) Bool)
(declare-const dummy12 us_rep)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content us_rep)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_rep (t3b__content a))
(define-fun dynamic_invariant4 ((temp___expr_158 (_ BitVec 64)) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool true)
(define-fun dynamic_invariant5 ((temp___expr_165 (_ BitVec 32)) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool true)
(define-fun dynamic_invariant6 ((temp___expr_172 (_ BitVec 16)) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool true)
(define-fun dynamic_invariant7 ((temp___expr_179 (_ BitVec 8)) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool true)
(define-fun dynamic_invariant8 ((temp___expr_186 Int) (temp___is_init_182 Bool) (temp___skip_constant_183 Bool) (temp___do_toplevel_184 Bool) (temp___do_typ_inv_185 Bool)) Bool (=> (or (= temp___is_init_182 true) (<= 0 3)) (in_range temp___expr_186)))
(define-fun default_initial_assumption4 ((temp___expr_195 us_rep) (temp___skip_top_level_196 Bool)) Bool (and (= (attr__constrained temp___expr_195) false) (= (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 temp___expr_195))) 0)))
(declare-const rax__split_fields unsigned_64)
(declare-const rax__split_fields1 unsigned_32)
(declare-const rax__split_fields2 unsigned_32)
(declare-const rax__split_fields3 unsigned_32)
(declare-const rax__split_fields4 unsigned_16)
(declare-const rax__split_fields5 unsigned_16)
(declare-const rax__split_fields6 unsigned_32)
(declare-const rax__split_fields7 unsigned_16)
(declare-const rax__split_fields8 unsigned_8)
(declare-const rax__split_fields9 unsigned_8)
(declare-const eax__split_fields unsigned_64)
(declare-const eax__split_fields1 unsigned_32)
(declare-const eax__split_fields2 unsigned_32)
(declare-const eax__split_fields3 unsigned_32)
(declare-const eax__split_fields4 unsigned_16)
(declare-const eax__split_fields5 unsigned_16)
(declare-const eax__split_fields6 unsigned_32)
(declare-const eax__split_fields7 unsigned_16)
(declare-const eax__split_fields8 unsigned_8)
(declare-const eax__split_fields9 unsigned_8)
(declare-const us Int)
(declare-const o register_option)
(declare-const o1 unsigned_64)
(declare-const o2 unsigned_64)
(declare-const o3 unsigned_32)
(declare-const o4 unsigned_32)
(declare-const o5 unsigned_32)
(declare-const o6 unsigned_16)
(declare-const o7 unsigned_16)
(declare-const o8 unsigned_32)
(declare-const o9 unsigned_16)
(declare-const o10 unsigned_8)
(declare-const o11 unsigned_8)
(declare-const o12 register_option)
(declare-const o13 register_option)
(declare-const o14 unsigned_64)
(declare-const o15 unsigned_32)
(declare-const o16 unsigned_32)
(declare-const o17 unsigned_32)
(declare-const o18 unsigned_16)
(declare-const o19 unsigned_16)
(declare-const o20 unsigned_32)
(declare-const o21 unsigned_16)
(declare-const o22 unsigned_8)
(declare-const o23 unsigned_8)
(declare-const o24 Bool)
(declare-const o25 register_option)
(declare-const o26 unsigned_64)
(declare-const o27 unsigned_32)
(declare-const o28 unsigned_32)
(declare-const o29 unsigned_32)
(declare-const o30 unsigned_16)
(declare-const o31 unsigned_16)
(declare-const o32 unsigned_32)
(declare-const o33 unsigned_16)
(declare-const o34 unsigned_8)
(declare-const o35 unsigned_8)
(declare-const o36 Bool)
(declare-const o37 register_option)
(declare-const o38 unsigned_64)
(declare-const o39 unsigned_32)
(declare-const o40 unsigned_32)
(declare-const o41 unsigned_32)
(declare-const o42 unsigned_16)
(declare-const o43 unsigned_16)
(declare-const o44 unsigned_32)
(declare-const o45 unsigned_16)
(declare-const o46 unsigned_8)
(declare-const o47 unsigned_8)
(declare-const o48 Bool)
(declare-const temp___292 register_option)
(declare-const temp___2921 unsigned_64)
(declare-const temp___2922 unsigned_32)
(declare-const temp___2923 unsigned_32)
(declare-const temp___2924 unsigned_32)
(declare-const temp___2925 unsigned_16)
(declare-const temp___2926 unsigned_16)
(declare-const temp___2927 unsigned_32)
(declare-const temp___2928 unsigned_16)
(declare-const temp___2929 unsigned_8)
(declare-const temp___29210 unsigned_8)
(declare-const temp___29211 Bool)
(declare-const o49 register_option)
(declare-const o50 unsigned_64)
(declare-const o51 unsigned_32)
(declare-const o52 unsigned_32)
(declare-const o53 unsigned_32)
(declare-const o54 unsigned_16)
(declare-const o55 unsigned_16)
(declare-const o56 unsigned_32)
(declare-const o57 unsigned_16)
(declare-const o58 unsigned_8)
(declare-const o59 unsigned_8)
(declare-const o60 Bool)
(declare-const o61 us_rep)
(declare-const o62 us_rep)
(declare-const temp___293 us_rep)
(declare-const o63 register_option)
(declare-const o64 unsigned_64)
(declare-const o65 us_split_fields)
(declare-const o66 us_split_discrs)
(declare-const o67 us_rep)
(declare-const o68 us_rep)
(declare-const result us_split_fields__ref)
(declare-const rax__split_fields10 us_split_fields)
(declare-const result1 us_split_fields__ref)
(declare-const eax__split_fields10 us_split_fields)
(define-fun o69 () us_rep (mk___rep (mk___split_discrs o49) (mk___split_fields o50 o51 o52 o53 o54 o55 o56 o57 o58 o59) o60))
(define-fun o70 () us_rep (mk___rep (mk___split_discrs o37) (mk___split_fields o38 o39 o40 o41 o42 o43 o44 o45 o46 o47) o48))
(define-fun o71 () us_rep (mk___rep (mk___split_discrs o25) (mk___split_fields o26 o27 o28 o29 o30 o31 o32 o33 o34 o35) o36))
(assert (and (= 0 (to_rep2 (rec__discrimrec__register_type__option rax__split_discrs))) (= rax__attr__constrained true)))
(assert (and (= us 1) (in_range 1)))
(assert (and (= eax__attr__constrained true) (= (to_rep2 (rec__discrimrec__register_type__option eax__split_discrs)) 1)))
(assert (and (= 1 (to_rep2 (rec__discrimrec__register_type__option eax__split_discrs))) (= eax__attr__constrained true)))
(assert (= (to_rep o1) #x0000000000000010))
(assert (= o1 o2))
(assert (= dummy1 o3))
(assert (= dummy1 o4))
(assert (= dummy1 o5))
(assert (= dummy2 o6))
(assert (= dummy2 o7))
(assert (= dummy1 o8))
(assert (= dummy2 o9))
(assert (= dummy3 o10))
(assert (= dummy3 o11))
(assert (= (to_rep2 o) 0))
(assert (= o o12))
(assert (= o13 o12))
(assert (= o14 o2))
(assert (= o15 o3))
(assert (= o16 o4))
(assert (= o17 o5))
(assert (= o18 o6))
(assert (= o19 o7))
(assert (= o20 o8))
(assert (= o21 o9))
(assert (= o22 o10))
(assert (= o23 o11))
(assert (= true o24))
(assert (= o71 (mk___rep (mk___split_discrs o13) (mk___split_fields o14 o15 o16 o17 o18 o19 o20 o21 o22 o23) o24)))
(assert (= o70 o71))
(assert (= (mk___rep (mk___split_discrs temp___292) (mk___split_fields temp___2921 temp___2922 temp___2923 temp___2924 temp___2925 temp___2926 temp___2927 temp___2928 temp___2929 temp___29210) temp___29211) o70))
(assert (= result (mk___split_fields__ref (mk___split_fields rax__split_fields rax__split_fields1 rax__split_fields2 rax__split_fields3 rax__split_fields4 rax__split_fields5 rax__split_fields6 rax__split_fields7 rax__split_fields8 rax__split_fields9))))
(assert (= rax__split_fields10 (mk___split_fields temp___2921 temp___2922 temp___2923 temp___2924 temp___2925 temp___2926 temp___2927 temp___2928 temp___2929 temp___29210)))
(assert (= rax__split_discrs (mk___split_discrs temp___292)))
(assert (and (= o69 (convert_bit_64_to_bit_32 (mk___rep rax__split_discrs rax__split_fields10 rax__attr__constrained))) (and (and (= 1 (to_rep2 o49)) (= o60 true)) (and (= (of_rep2 1) o49) (and (and (= dummy o50) (and (= (of_rep1 #x00000000) o51) (and (= (of_rep1 ((_ extract 31 0) (bvurem (to_rep (rec__discrimrec__register_type__value_64 rax__split_fields10)) #x0000000100000000))) o52) (and (= dummy1 o53) (and (= dummy2 o54) (and (= dummy2 o55) (and (= dummy1 o56) (and (= dummy2 o57) (and (= dummy3 o58) (= dummy3 o59)))))))))) (= true o60))))))
(assert (= o61 o69))
(assert (= o62 o61))
(assert (= temp___293 o62))
(assert (= result1 (mk___split_fields__ref (mk___split_fields eax__split_fields eax__split_fields1 eax__split_fields2 eax__split_fields3 eax__split_fields4 eax__split_fields5 eax__split_fields6 eax__split_fields7 eax__split_fields8 eax__split_fields9))))
(assert (= eax__split_fields10 (us_split_fields1 temp___293)))
(assert (= eax__split_discrs (us_split_discrs1 temp___293)))
(assert (= (to_rep1 (rec__discrimrec__register_type__value_32 eax__split_fields10)) #x00000010))
(assert (= (to_rep o64) #x0000000000000020))
(assert (= o65 (mk___split_fields o64 dummy1 dummy1 dummy1 dummy2 dummy2 dummy1 dummy2 dummy3 dummy3)))
(assert (= (to_rep2 o63) 0))
(assert (= o66 (mk___split_discrs o63)))
(assert (= o67 (mk___rep o66 o65 true)))
(assert (= o68 o67))
(assert (not (= 0 (to_rep2 (rec__discrimrec__register_type__option (us_split_discrs1 o68))))))
(check-sat)
(exit)
