(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFBVDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun nth ((_ BitVec 32) Int) Bool)
(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))
(declare-fun pow2 (Int) Int)
(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32)) (bv2nat x) (- (- 4294967296 (bv2nat x)))))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvlshr x n) (lsr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvashr x n) (asr x (bv2nat n)))))
(assert (forall ((x (_ BitVec 32)) (n (_ BitVec 32))) (= (bvshl x n) (lsl x (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_left1 v (bv2nat n)))))
(assert (forall ((v (_ BitVec 32)) (n (_ BitVec 32))) (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) (rotate_right1 v (bv2nat n)))))
(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))
(assert (forall ((x (_ BitVec 32)) (i (_ BitVec 32))) (= (nth x (bv2nat i)) (nth_bv x i))))
(assert (forall ((x (_ BitVec 32)) (i Int)) (=> (and (<= 0 i) (< i 4294967296)) (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))
(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i))) (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))
(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int) (n Int)) Bool (forall ((j Int)) (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))
(assert (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32)) (n (_ BitVec 32))) (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))
(define-fun bv_min ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))
(define-fun bv_max ((x (_ BitVec 32)) (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range temp___expr_33)))
(declare-sort unsigned_32 0)
(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))
(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))
(declare-fun user_eq1 (unsigned_32 unsigned_32) Bool)
(declare-const dummy1 unsigned_32)
(declare-datatypes () ((unsigned_32__ref (mk_unsigned_32__ref (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref___projection ((a unsigned_32__ref)) unsigned_32 (unsigned_32__content a))
(define-fun dynamic_invariant1 ((temp___expr_177 (_ BitVec 32)) (temp___is_init_174 Bool) (temp___skip_constant_175 Bool) (temp___do_toplevel_176 Bool)) Bool true)
(declare-const val__ (_ BitVec 32))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const exp Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort titerS 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (titerS titerS) Bool)
(declare-const dummy2 titerS)
(declare-datatypes () ((titerS__ref (mk_titerS__ref (titerS__content titerS)))))
(define-fun titerS__ref___projection ((a titerS__ref)) titerS (titerS__content a))
(define-fun dynamic_invariant2 ((temp___expr_201 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= 0 31)) (in_range1 temp___expr_201)))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun pow21 (Int) (_ BitVec 32))
(declare-fun pow2__function_guard ((_ BitVec 32) Int) Bool)
(assert (forall ((i Int)) (! (=> (dynamic_invariant i true true true) (dynamic_invariant1 (pow21 i) true false true)) :pattern ((pow21 i)))))
(assert (forall ((i Int)) (! (=> (dynamic_invariant i true true true) (= (pow21 i) (ite (< i 4294967296) (bvshl ((_ int2bv 32) 1) ((_ int2bv 32) i)) ((_ int2bv 32) 0)))) :pattern ((pow21 i)))))
(declare-const cur_exp (_ BitVec 32))
(declare-const cur_val (_ BitVec 32))
(declare-const result__ (_ BitVec 32))
(declare-const iter Int)
(declare-const exponentiate__result (_ BitVec 32))
(declare-const o Int)
(declare-const exponentiate__result1 (_ BitVec 32))
(declare-const result (_ BitVec 32))
(declare-const cur_exp1 (_ BitVec 32))
(declare-const result1 (_ BitVec 32))
(declare-const cur_val1 (_ BitVec 32))
(declare-const result2 (_ BitVec 32))
(declare-const result__1 (_ BitVec 32))
(declare-const result3 Int)
(declare-const iter1 Int)
(declare-const exponentiate__result2 (_ BitVec 32))
(declare-const cur_exp2 (_ BitVec 32))
(declare-const cur_val2 (_ BitVec 32))
(declare-const result__2 (_ BitVec 32))
(declare-const iter2 Int)
(declare-const result4 (_ BitVec 32))
(declare-const result__3 (_ BitVec 32))
(declare-const result5 (_ BitVec 32))
(declare-const cur_exp3 (_ BitVec 32))
(declare-const result6 (_ BitVec 32))
(declare-const cur_val3 (_ BitVec 32))
(declare-const result7 Int)
(declare-const iter3 Int)
(assert (in_range exp))
(assert (= (mk_t__ref result) (mk_t__ref cur_exp)))
(assert (= cur_exp1 ((_ int2bv 32) exp)))
(assert (= (mk_t__ref result1) (mk_t__ref cur_val)))
(assert (= cur_val1 val__))
(assert (= (mk_t__ref result2) (mk_t__ref result__)))
(assert (= result__1 ((_ int2bv 32) 1)))
(assert (= (mk_int__ref result3) (mk_int__ref iter)))
(assert (= iter1 0))
(assert (in_range1 iter1))
(assert (not (= exp 0)))
(assert (= exponentiate__result2 exponentiate__result))
(assert (= exponentiate__result2 exponentiate__result1))
(assert (not (= cur_exp1 ((_ int2bv 32) 0))))
(assert (= result__2 (power val__ (bv2nat (bvurem ((_ int2bv 32) exp) (pow21 iter2))))))
(assert (= cur_val2 (power val__ (bv2nat (pow21 iter2)))))
(assert (= cur_exp2 (bvudiv cur_exp1 (pow21 iter2))))
(assert (=> (<= 0 31) (in_range1 iter2)))
(assert (=> (= (bvurem cur_exp2 ((_ int2bv 32) 2)) ((_ int2bv 32) 1)) (= result__2 result4)))
(assert (=> (= (bvurem cur_exp2 ((_ int2bv 32) 2)) ((_ int2bv 32) 1)) (= result__3 (bvmul result__2 cur_val2))))
(assert (=> (not (= (bvurem cur_exp2 ((_ int2bv 32) 2)) ((_ int2bv 32) 1))) (= result__3 result__2)))
(assert (= cur_exp2 result5))
(assert (= cur_exp3 (bvudiv cur_exp2 ((_ int2bv 32) 2))))
(assert (= cur_val2 result6))
(assert (= cur_val3 (bvmul cur_val2 cur_val2)))
(assert (and (= o (+ iter2 1)) (in_range1 (+ iter2 1))))
(assert (= iter2 result7))
(assert (= iter3 o))
(assert (not (= cur_exp3 ((_ int2bv 32) 0))))
(assert (not (= result__3 (power val__ (bv2nat (bvurem ((_ int2bv 32) exp) (pow21 iter3)))))))
(check-sat)
(exit)
