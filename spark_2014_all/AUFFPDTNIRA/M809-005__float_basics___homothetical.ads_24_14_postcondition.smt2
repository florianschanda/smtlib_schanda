(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-fun is_int1 (Float32) Bool)
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-fun to_rep (float) Float32)
(declare-fun of_rep (Float32) float)
(assert (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort joint_index 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (joint_index joint_index) Bool)
(declare-const dummy1 joint_index)
(declare-datatypes () ((joint_index__ref (mk_joint_index__ref (joint_index__content joint_index)))))
(define-fun joint_index__ref___projection ((a joint_index__ref)) joint_index (joint_index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int float))))))
(declare-fun slide ((Array Int float) Int Int) (Array Int float))
(assert (forall ((a (Array Int float))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int float))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int float) Int Int (Array Int float) Int Int) (Array Int float))
(assert (forall ((a (Array Int float)) (b (Array Int float))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (float Int) (Array Int float))
(assert (forall ((v float)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int float)) (a__first Int) (a__last Int) (b (Array Int float)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int float)) (b (Array Int float))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-const d (Array Int float))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const kv (Array Int float))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const ka (Array Int float))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant ((temp___expr_51 Float32) (temp___is_init_48 Bool) (temp___skip_constant_49 Bool) (temp___do_toplevel_50 Bool)) Bool (=> (or (= temp___is_init_48 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_51)))
(declare-fun adjust2triangle (Float32 Float32 Float32) Float32)
(declare-fun adjust2triangle__function_guard (Float32 Float32 Float32 Float32) Bool)
(assert (forall ((d1 Float32) (kv1 Float32) (ka1 Float32)) (! (=> (and (and (and (dynamic_invariant d1 true true true) (dynamic_invariant kv1 true true true)) (dynamic_invariant ka1 true true true)) (and (and (not (fp.eq d1 (fp #b0 #b00000000 #b00000000000000000000000))) (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) kv1)) (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) ka1))) (let ((result (adjust2triangle d1 kv1 ka1))) (and (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) result) (fp.leq result kv1)) (dynamic_invariant result true false true)))) :pattern ((adjust2triangle d1 kv1 ka1)))))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-sort t11b 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (t11b t11b) Bool)
(declare-const dummy2 t11b)
(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-fun homothetical__homothetical__lambda__aggregate_def (Float32) (Array Int float))
(assert (forall ((temp___160 Float32)) (forall ((temp___161 Int)) (= (select (homothetical__homothetical__lambda__aggregate_def temp___160) temp___161) (of_rep temp___160)))))
(declare-fun homothetical__homothetical__upsilon__aggregate_def (Float32) (Array Int float))
(assert (forall ((temp___163 Float32)) (forall ((temp___164 Int)) (= (select (homothetical__homothetical__upsilon__aggregate_def temp___163) temp___164) (of_rep temp___163)))))
(declare-fun homothetical__homothetical__kvp__aggregate_def (Float32) (Array Int float))
(assert (forall ((temp___166 Float32)) (forall ((temp___167 Int)) (= (select (homothetical__homothetical__kvp__aggregate_def temp___166) temp___167) (of_rep temp___166)))))
(declare-fun temp___173 (Float32) (Array Int float))
(assert (forall ((temp___175 Float32)) (forall ((temp___176 Int)) (= (select (temp___173 temp___175) temp___176) (of_rep temp___175)))))
(declare-fun temp___177 (Float32) (Array Int float))
(assert (forall ((temp___179 Float32)) (forall ((temp___180 Int)) (= (select (temp___177 temp___179) temp___180) (of_rep temp___179)))))
(define-fun dynamic_invariant1 ((temp___expr_142 Int) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (or (= temp___is_init_139 true) (<= 1 2)) (in_range1 temp___expr_142)))
(declare-const lambda (Array Int float))
(declare-const upsilon (Array Int float))
(declare-const kvp (Array Int float))
(declare-const i Int)
(declare-const j Int)
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const o2 Float32)
(declare-const o3 Float32)
(declare-const o4 Float32)
(declare-const o5 float)
(declare-const o6 (Array Int float))
(declare-const o7 Float32)
(declare-const o8 Float32)
(declare-const o9 Float32)
(declare-const o10 Float32)
(declare-const o11 Float32)
(declare-const o12 float)
(declare-const o13 (Array Int float))
(declare-const o14 Float32)
(declare-const o15 Float32)
(declare-const o16 Float32)
(declare-const o17 Float32)
(declare-const o18 Float32)
(declare-const o19 float)
(declare-const o20 (Array Int float))
(declare-const o21 Float32)
(declare-const o22 Float32)
(declare-const o23 Float32)
(declare-const o24 Float32)
(declare-const o25 Float32)
(declare-const o26 float)
(declare-const o27 (Array Int float))
(declare-const o28 Float32)
(declare-const o29 float)
(declare-const o30 (Array Int float))
(declare-const o31 Float32)
(declare-const o32 float)
(declare-const o33 (Array Int float))
(declare-const o34 Float32)
(declare-const o35 Float32)
(declare-const o36 Float32)
(declare-const o37 Float32)
(declare-const o38 Float32)
(declare-const o39 float)
(declare-const o40 (Array Int float))
(declare-const o41 Float32)
(declare-const o42 Float32)
(declare-const o43 Float32)
(declare-const o44 Float32)
(declare-const o45 Float32)
(declare-const o46 float)
(declare-const o47 (Array Int float))
(declare-const o48 Float32)
(declare-const o49 Float32)
(declare-const o50 Float32)
(declare-const o51 Float32)
(declare-const o52 Float32)
(declare-const o53 float)
(declare-const o54 (Array Int float))
(declare-const o55 Float32)
(declare-const o56 Float32)
(declare-const o57 Float32)
(declare-const o58 Float32)
(declare-const o59 Float32)
(declare-const o60 float)
(declare-const o61 (Array Int float))
(declare-const o62 Float32)
(declare-const o63 float)
(declare-const o64 (Array Int float))
(declare-const o65 Float32)
(declare-const o66 float)
(declare-const o67 (Array Int float))
(declare-const result (Array Int float))
(declare-const lambda1 (Array Int float))
(declare-const result1 (Array Int float))
(declare-const upsilon1 (Array Int float))
(declare-const result2 (Array Int float))
(declare-const kvp1 (Array Int float))
(declare-const kvp2 (Array Int float))
(declare-const i1 Int)
(declare-const kvp3 (Array Int float))
(declare-const i2 Int)
(declare-const kvmax (Array Int float))
(declare-const kamax (Array Int float))
(declare-const result3 int__ref)
(declare-const i3 Int)
(declare-const result4 int__ref)
(declare-const j1 Int)
(declare-const result5 map__ref)
(declare-const lambda2 (Array Int float))
(declare-const result6 map__ref)
(declare-const upsilon2 (Array Int float))
(declare-const lambda3 map__ref)
(declare-const upsilon3 map__ref)
(declare-const lambda4 (Array Int float))
(declare-const upsilon4 (Array Int float))
(declare-const result7 int__ref)
(declare-const j2 Int)
(declare-const result8 map__ref)
(declare-const lambda5 (Array Int float))
(declare-const result9 map__ref)
(declare-const upsilon5 (Array Int float))
(declare-const lambda6 map__ref)
(declare-const upsilon6 map__ref)
(declare-const lambda7 (Array Int float))
(declare-const upsilon7 (Array Int float))
(declare-const result10 map__ref)
(declare-const kvmax1 (Array Int float))
(declare-const result11 map__ref)
(declare-const kamax1 (Array Int float))
(declare-const result12 int__ref)
(declare-const i4 Int)
(declare-const result13 int__ref)
(declare-const j3 Int)
(declare-const result14 map__ref)
(declare-const lambda8 (Array Int float))
(declare-const result15 map__ref)
(declare-const upsilon8 (Array Int float))
(declare-const lambda9 map__ref)
(declare-const upsilon9 map__ref)
(declare-const lambda10 (Array Int float))
(declare-const upsilon10 (Array Int float))
(declare-const result16 int__ref)
(declare-const j4 Int)
(declare-const result17 map__ref)
(declare-const lambda11 (Array Int float))
(declare-const result18 map__ref)
(declare-const upsilon11 (Array Int float))
(declare-const lambda12 map__ref)
(declare-const upsilon12 map__ref)
(declare-const lambda13 (Array Int float))
(declare-const upsilon13 (Array Int float))
(declare-const result19 map__ref)
(declare-const kvmax2 (Array Int float))
(declare-const result20 map__ref)
(declare-const kamax2 (Array Int float))
(declare-const kvmax3 map__ref)
(declare-const kamax3 map__ref)
(declare-const lambda14 map__ref)
(declare-const upsilon14 map__ref)
(declare-const kvp4 map__ref)
(declare-const i5 int__ref)
(declare-const i6 int__ref)
(declare-const j5 int__ref)
(declare-const kvmax4 (Array Int float))
(declare-const kamax4 (Array Int float))
(declare-const lambda15 (Array Int float))
(declare-const upsilon15 (Array Int float))
(declare-const kvp5 (Array Int float))
(declare-const i7 Int)
(declare-const i8 Int)
(declare-const j6 Int)
(assert (forall ((j7 Int)) (=> (and (<= 1 j7) (<= j7 2)) (and (and (not (fp.eq (to_rep (select d j7)) (fp #b0 #b00000000 #b00000000000000000000000))) (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep (select kv j7)))) (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep (select ka j7)))))))
(assert (= (mk_map__ref result) (mk_map__ref lambda)))
(assert (= lambda1 (homothetical__homothetical__lambda__aggregate_def (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (= (mk_map__ref result1) (mk_map__ref upsilon)))
(assert (= upsilon1 (homothetical__homothetical__upsilon__aggregate_def (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (= (mk_map__ref result2) (mk_map__ref kvp)))
(assert (= kvp1 (homothetical__homothetical__kvp__aggregate_def (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (forall ((i9 Int)) (=> (and (<= 1 i9) (<= i9 2)) (and (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep (select ka i9))) (not (fp.eq (to_rep (select kvp2 i9)) (fp #b0 #b00000000 #b00000000000000000000000)))) (not (fp.eq (to_rep (select d i9)) (fp #b0 #b00000000 #b00000000000000000000000)))))))
(assert (= result3 (mk_int__ref i)))
(assert (= i3 1))
(assert (= result4 (mk_int__ref j)))
(assert (= j1 1))
(assert (=> (not (= i3 j1)) (and (= o1 (fp.mul RNE (to_rep (select kvp2 i3)) (fp.abs (to_rep (select d j1))))) (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 i3)) (fp.abs (to_rep (select d j1))))))))
(assert (=> (not (= i3 j1)) (and (= o (fp.mul RNE (to_rep (select kvp2 j1)) (fp.abs (to_rep (select d i3))))) (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 j1)) (fp.abs (to_rep (select d i3))))))))
(assert (=> (not (= i3 j1)) (= o2 (fp.div RNE o o1))))
(assert (=> (not (= i3 j1)) (and (= o3 o2) (fp.isFinite32 o2))))
(assert (=> (not (= i3 j1)) (= o4 (fp.min (to_rep (select lambda1 i3)) o3))))
(assert (=> (not (= i3 j1)) (= (to_rep o5) o4)))
(assert (=> (not (= i3 j1)) (= o6 (store lambda1 i3 o5))))
(assert (=> (not (= i3 j1)) (= result5 (mk_map__ref lambda1))))
(assert (=> (not (= i3 j1)) (= lambda2 o6)))
(assert (=> (not (= i3 j1)) (and (= o8 (fp.mul RNE (to_rep (select ka i3)) (fp.abs (to_rep (select d j1))))) (fp.isFinite32 (fp.mul RNE (to_rep (select ka i3)) (fp.abs (to_rep (select d j1))))))))
(assert (=> (not (= i3 j1)) (and (= o7 (fp.mul RNE (to_rep (select ka j1)) (fp.abs (to_rep (select d i3))))) (fp.isFinite32 (fp.mul RNE (to_rep (select ka j1)) (fp.abs (to_rep (select d i3))))))))
(assert (=> (not (= i3 j1)) (= o9 (fp.div RNE o7 o8))))
(assert (=> (not (= i3 j1)) (and (= o10 o9) (fp.isFinite32 o9))))
(assert (=> (not (= i3 j1)) (= o11 (fp.min (to_rep (select upsilon1 i3)) o10))))
(assert (=> (not (= i3 j1)) (= (to_rep o12) o11)))
(assert (=> (not (= i3 j1)) (= o13 (store upsilon1 i3 o12))))
(assert (=> (not (= i3 j1)) (= result6 (mk_map__ref upsilon1))))
(assert (=> (not (= i3 j1)) (= upsilon2 o13)))
(assert (=> (not (= i3 j1)) (= upsilon3 (mk_map__ref upsilon2))))
(assert (=> (not (= i3 j1)) (= lambda3 (mk_map__ref lambda2))))
(assert (=> (not (= i3 j1)) (= upsilon4 upsilon2)))
(assert (=> (not (= i3 j1)) (= lambda4 lambda2)))
(assert (=> (not (not (= i3 j1))) (= upsilon3 (mk_map__ref upsilon1))))
(assert (=> (not (not (= i3 j1))) (= lambda3 (mk_map__ref lambda1))))
(assert (=> (not (not (= i3 j1))) (= upsilon4 upsilon1)))
(assert (=> (not (not (= i3 j1))) (= lambda4 lambda1)))
(assert (= result7 (mk_int__ref j1)))
(assert (= j2 2))
(assert (=> (not (= i3 j2)) (and (= o15 (fp.mul RNE (to_rep (select kvp2 i3)) (fp.abs (to_rep (select d j2))))) (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 i3)) (fp.abs (to_rep (select d j2))))))))
(assert (=> (not (= i3 j2)) (and (= o14 (fp.mul RNE (to_rep (select kvp2 j2)) (fp.abs (to_rep (select d i3))))) (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 j2)) (fp.abs (to_rep (select d i3))))))))
(assert (=> (not (= i3 j2)) (= o16 (fp.div RNE o14 o15))))
(assert (=> (not (= i3 j2)) (and (= o17 o16) (fp.isFinite32 o16))))
(assert (=> (not (= i3 j2)) (= o18 (fp.min (to_rep (select (map__content lambda3) i3)) o17))))
(assert (=> (not (= i3 j2)) (= (to_rep o19) o18)))
(assert (=> (not (= i3 j2)) (= o20 (store (map__content lambda3) i3 o19))))
(assert (=> (not (= i3 j2)) (= result8 lambda3)))
(assert (=> (not (= i3 j2)) (= lambda5 o20)))
(assert (=> (not (= i3 j2)) (and (= o22 (fp.mul RNE (to_rep (select ka i3)) (fp.abs (to_rep (select d j2))))) (fp.isFinite32 (fp.mul RNE (to_rep (select ka i3)) (fp.abs (to_rep (select d j2))))))))
(assert (=> (not (= i3 j2)) (and (= o21 (fp.mul RNE (to_rep (select ka j2)) (fp.abs (to_rep (select d i3))))) (fp.isFinite32 (fp.mul RNE (to_rep (select ka j2)) (fp.abs (to_rep (select d i3))))))))
(assert (=> (not (= i3 j2)) (= o23 (fp.div RNE o21 o22))))
(assert (=> (not (= i3 j2)) (and (= o24 o23) (fp.isFinite32 o23))))
(assert (=> (not (= i3 j2)) (= o25 (fp.min (to_rep (select (map__content upsilon3) i3)) o24))))
(assert (=> (not (= i3 j2)) (= (to_rep o26) o25)))
(assert (=> (not (= i3 j2)) (= o27 (store (map__content upsilon3) i3 o26))))
(assert (=> (not (= i3 j2)) (= result9 upsilon3)))
(assert (=> (not (= i3 j2)) (= upsilon5 o27)))
(assert (=> (not (= i3 j2)) (= upsilon6 (mk_map__ref upsilon5))))
(assert (=> (not (= i3 j2)) (= lambda6 (mk_map__ref lambda5))))
(assert (=> (not (= i3 j2)) (= upsilon7 upsilon5)))
(assert (=> (not (= i3 j2)) (= lambda7 lambda5)))
(assert (=> (not (not (= i3 j2))) (= upsilon6 upsilon3)))
(assert (=> (not (not (= i3 j2))) (= lambda6 lambda3)))
(assert (=> (not (not (= i3 j2))) (= upsilon7 upsilon4)))
(assert (=> (not (not (= i3 j2))) (= lambda7 lambda4)))
(assert (and (= o28 (fp.mul RNE (to_rep (select (map__content lambda6) i3)) (to_rep (select kvp2 i3)))) (fp.isFinite32 (fp.mul RNE (to_rep (select (map__content lambda6) i3)) (to_rep (select kvp2 i3))))))
(assert (= (to_rep o29) o28))
(assert (= o30 (store kvmax i3 o29)))
(assert (= result10 (mk_map__ref kvmax)))
(assert (= kvmax1 o30))
(assert (and (= o31 (fp.mul RNE (to_rep (select (map__content upsilon6) i3)) (to_rep (select ka i3)))) (fp.isFinite32 (fp.mul RNE (to_rep (select (map__content upsilon6) i3)) (to_rep (select ka i3))))))
(assert (= (to_rep o32) o31))
(assert (= o33 (store kamax i3 o32)))
(assert (= result11 (mk_map__ref kamax)))
(assert (= kamax1 o33))
(assert (= result12 (mk_int__ref i3)))
(assert (= i4 2))
(assert (= result13 (mk_int__ref j2)))
(assert (= j3 1))
(assert (=> (not (= i4 j3)) (and (= o35 (fp.mul RNE (to_rep (select kvp2 i4)) (fp.abs (to_rep (select d j3))))) (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 i4)) (fp.abs (to_rep (select d j3))))))))
(assert (=> (not (= i4 j3)) (and (= o34 (fp.mul RNE (to_rep (select kvp2 j3)) (fp.abs (to_rep (select d i4))))) (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 j3)) (fp.abs (to_rep (select d i4))))))))
(assert (=> (not (= i4 j3)) (= o36 (fp.div RNE o34 o35))))
(assert (=> (not (= i4 j3)) (and (= o37 o36) (fp.isFinite32 o36))))
(assert (=> (not (= i4 j3)) (= o38 (fp.min (to_rep (select (map__content lambda6) i4)) o37))))
(assert (=> (not (= i4 j3)) (= (to_rep o39) o38)))
(assert (=> (not (= i4 j3)) (= o40 (store (map__content lambda6) i4 o39))))
(assert (=> (not (= i4 j3)) (= result14 lambda6)))
(assert (=> (not (= i4 j3)) (= lambda8 o40)))
(assert (=> (not (= i4 j3)) (and (= o42 (fp.mul RNE (to_rep (select ka i4)) (fp.abs (to_rep (select d j3))))) (fp.isFinite32 (fp.mul RNE (to_rep (select ka i4)) (fp.abs (to_rep (select d j3))))))))
(assert (=> (not (= i4 j3)) (and (= o41 (fp.mul RNE (to_rep (select ka j3)) (fp.abs (to_rep (select d i4))))) (fp.isFinite32 (fp.mul RNE (to_rep (select ka j3)) (fp.abs (to_rep (select d i4))))))))
(assert (=> (not (= i4 j3)) (= o43 (fp.div RNE o41 o42))))
(assert (=> (not (= i4 j3)) (and (= o44 o43) (fp.isFinite32 o43))))
(assert (=> (not (= i4 j3)) (= o45 (fp.min (to_rep (select (map__content upsilon6) i4)) o44))))
(assert (=> (not (= i4 j3)) (= (to_rep o46) o45)))
(assert (=> (not (= i4 j3)) (= o47 (store (map__content upsilon6) i4 o46))))
(assert (=> (not (= i4 j3)) (= result15 upsilon6)))
(assert (=> (not (= i4 j3)) (= upsilon8 o47)))
(assert (=> (not (= i4 j3)) (= upsilon9 (mk_map__ref upsilon8))))
(assert (=> (not (= i4 j3)) (= lambda9 (mk_map__ref lambda8))))
(assert (=> (not (= i4 j3)) (= upsilon10 upsilon8)))
(assert (=> (not (= i4 j3)) (= lambda10 lambda8)))
(assert (=> (not (not (= i4 j3))) (= upsilon9 upsilon6)))
(assert (=> (not (not (= i4 j3))) (= lambda9 lambda6)))
(assert (=> (not (not (= i4 j3))) (= upsilon10 upsilon7)))
(assert (=> (not (not (= i4 j3))) (= lambda10 lambda7)))
(assert (= result16 (mk_int__ref j3)))
(assert (= j4 2))
(assert (=> (not (= i4 j4)) (and (= o49 (fp.mul RNE (to_rep (select kvp2 i4)) (fp.abs (to_rep (select d j4))))) (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 i4)) (fp.abs (to_rep (select d j4))))))))
(assert (=> (not (= i4 j4)) (and (= o48 (fp.mul RNE (to_rep (select kvp2 j4)) (fp.abs (to_rep (select d i4))))) (fp.isFinite32 (fp.mul RNE (to_rep (select kvp2 j4)) (fp.abs (to_rep (select d i4))))))))
(assert (=> (not (= i4 j4)) (= o50 (fp.div RNE o48 o49))))
(assert (=> (not (= i4 j4)) (and (= o51 o50) (fp.isFinite32 o50))))
(assert (=> (not (= i4 j4)) (= o52 (fp.min (to_rep (select (map__content lambda9) i4)) o51))))
(assert (=> (not (= i4 j4)) (= (to_rep o53) o52)))
(assert (=> (not (= i4 j4)) (= o54 (store (map__content lambda9) i4 o53))))
(assert (=> (not (= i4 j4)) (= result17 lambda9)))
(assert (=> (not (= i4 j4)) (= lambda11 o54)))
(assert (=> (not (= i4 j4)) (and (= o56 (fp.mul RNE (to_rep (select ka i4)) (fp.abs (to_rep (select d j4))))) (fp.isFinite32 (fp.mul RNE (to_rep (select ka i4)) (fp.abs (to_rep (select d j4))))))))
(assert (=> (not (= i4 j4)) (and (= o55 (fp.mul RNE (to_rep (select ka j4)) (fp.abs (to_rep (select d i4))))) (fp.isFinite32 (fp.mul RNE (to_rep (select ka j4)) (fp.abs (to_rep (select d i4))))))))
(assert (=> (not (= i4 j4)) (= o57 (fp.div RNE o55 o56))))
(assert (=> (not (= i4 j4)) (and (= o58 o57) (fp.isFinite32 o57))))
(assert (=> (not (= i4 j4)) (= o59 (fp.min (to_rep (select (map__content upsilon9) i4)) o58))))
(assert (=> (not (= i4 j4)) (= (to_rep o60) o59)))
(assert (=> (not (= i4 j4)) (= o61 (store (map__content upsilon9) i4 o60))))
(assert (=> (not (= i4 j4)) (= result18 upsilon9)))
(assert (=> (not (= i4 j4)) (= upsilon11 o61)))
(assert (=> (not (= i4 j4)) (= upsilon12 (mk_map__ref upsilon11))))
(assert (=> (not (= i4 j4)) (= lambda12 (mk_map__ref lambda11))))
(assert (=> (not (= i4 j4)) (= upsilon13 upsilon11)))
(assert (=> (not (= i4 j4)) (= lambda13 lambda11)))
(assert (=> (not (not (= i4 j4))) (= upsilon12 upsilon9)))
(assert (=> (not (not (= i4 j4))) (= lambda12 lambda9)))
(assert (=> (not (not (= i4 j4))) (= upsilon13 upsilon10)))
(assert (=> (not (not (= i4 j4))) (= lambda13 lambda10)))
(assert (and (= o62 (fp.mul RNE (to_rep (select (map__content lambda12) i4)) (to_rep (select kvp2 i4)))) (fp.isFinite32 (fp.mul RNE (to_rep (select (map__content lambda12) i4)) (to_rep (select kvp2 i4))))))
(assert (= (to_rep o63) o62))
(assert (= o64 (store kvmax1 i4 o63)))
(assert (= result19 (mk_map__ref kvmax1)))
(assert (= kvmax2 o64))
(assert (and (= o65 (fp.mul RNE (to_rep (select (map__content upsilon12) i4)) (to_rep (select ka i4)))) (fp.isFinite32 (fp.mul RNE (to_rep (select (map__content upsilon12) i4)) (to_rep (select ka i4))))))
(assert (= (to_rep o66) o65))
(assert (= o67 (store kamax1 i4 o66)))
(assert (= result20 (mk_map__ref kamax1)))
(assert (= kamax2 o67))
(assert (= j5 (mk_int__ref j4)))
(assert (= i6 (mk_int__ref i4)))
(assert (= i5 (mk_int__ref i1)))
(assert (= kvp4 (mk_map__ref kvp2)))
(assert (= upsilon14 upsilon12))
(assert (= lambda14 lambda12))
(assert (= kamax3 (mk_map__ref kamax2)))
(assert (= kvmax3 (mk_map__ref kvmax2)))
(assert (= j6 j4))
(assert (= i8 i4))
(assert (= i7 i2))
(assert (= kvp5 kvp3))
(assert (= upsilon15 upsilon13))
(assert (= lambda15 lambda13))
(assert (= kamax4 kamax2))
(assert (= kvmax4 kvmax2))
(declare-const j7 Int)
(assert (<= 1 j7))
(assert (<= j7 2))
(assert (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep (select (map__content kvmax3) j7)))))
(check-sat)
(exit)
