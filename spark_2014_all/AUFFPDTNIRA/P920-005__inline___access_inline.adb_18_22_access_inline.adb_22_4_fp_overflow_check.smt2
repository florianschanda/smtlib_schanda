(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort tt_float32B 0)
(declare-fun user_eq (tt_float32B tt_float32B) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)
(declare-const dummy tt_float32B)
(declare-datatypes () ((tt_float32B__ref (mk_tt_float32B__ref (tt_float32B__content tt_float32B)))))
(define-fun tt_float32B__ref___projection ((a tt_float32B__ref)) tt_float32B (tt_float32B__content a))
(declare-sort t_float32 0)
(define-fun in_range ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111101110)) x) (fp.leq x (fp #b0 #b11111110 #b11111111111111111101110)))))
(declare-fun user_eq1 (t_float32 t_float32) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy1 t_float32)
(declare-datatypes () ((t_float32__ref (mk_t_float32__ref (t_float32__content t_float32)))))
(define-fun t_float32__ref___projection ((a t_float32__ref)) t_float32 (t_float32__content a))
(define-fun dynamic_invariant ((temp___expr_201 Float32) (temp___is_init_197 Bool) (temp___skip_constant_198 Bool) (temp___do_toplevel_199 Bool) (temp___do_typ_inv_200 Bool)) Bool (=> (or (= temp___is_init_197 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111101110)) (fp #b0 #b11111110 #b11111111111111111101110))) (in_range temp___expr_201)))
(declare-const c_2pi_in_degrees Float32)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t_angle_360 0)
(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun user_eq2 (t_angle_360 t_angle_360) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy2 t_angle_360)
(declare-datatypes () ((t_angle_360__ref (mk_t_angle_360__ref (t_angle_360__content t_angle_360)))))
(define-fun t_angle_360__ref___projection ((a t_angle_360__ref)) t_angle_360 (t_angle_360__content a))
(declare-fun to_rep (t_angle_360) Float32)
(declare-fun of_rep (Float32) t_angle_360)
(assert (forall ((x t_angle_360)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x t_angle_360)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int t_angle_360))))))
(declare-fun slide ((Array Int t_angle_360) Int Int) (Array Int t_angle_360))
(assert (forall ((a (Array Int t_angle_360))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int t_angle_360))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int t_angle_360)) (a__first Int) (a__last Int) (b (Array Int t_angle_360)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int t_angle_360)) (b (Array Int t_angle_360))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const c6b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun access_inline__angle__aggregate_def (Float32) (Array Int t_angle_360))
(assert (= c_2pi_in_degrees (fp #b0 #b10000111 #b01101000000000000000000)))
(define-fun dynamic_invariant1 ((temp___expr_208 Float32) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (in_range1 temp___expr_208)))
(assert (forall ((temp___229 Float32)) (=> (dynamic_invariant1 temp___229 true true true true) (forall ((temp___230 Int)) (= (to_rep (select (access_inline__angle__aggregate_def temp___229) temp___230)) temp___229)))))
(declare-const angle (Array Int t_angle_360))
(declare-const result (Array Int t_angle_360))
(declare-const angle1 (Array Int t_angle_360))
(assert (in_range c_2pi_in_degrees))
(assert (= result angle))
(assert (= angle1 (access_inline__angle__aggregate_def (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (= (to_rep (select angle1 3)) c6b))
(assert (in_range c6b))
(assert (not (fp.isFinite32 (fp.sub RNE (to_rep (select angle1 3)) (to_rep (select angle1 3))))))
(check-sat)
(exit)
