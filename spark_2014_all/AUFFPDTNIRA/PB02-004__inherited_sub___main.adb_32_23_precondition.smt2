(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort enum 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (enum enum) Bool)
(declare-const dummy enum)
(declare-datatypes () ((enum__ref (mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))
(declare-fun to_rep (enum) Int)
(declare-fun of_rep (Int) enum)
(assert (forall ((x enum)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x enum)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-fun is_int1 (Float32) Bool)
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort float 0)
(declare-fun user_eq2 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy2 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-fun to_rep2 (float) Float32)
(declare-fun of_rep2 (Float32) float)
(assert (forall ((x float)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort sub_enum 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (sub_enum sub_enum) Bool)
(declare-const dummy3 sub_enum)
(declare-datatypes () ((sub_enum__ref (mk_sub_enum__ref (sub_enum__content sub_enum)))))
(define-fun sub_enum__ref___projection ((a sub_enum__ref)) sub_enum (sub_enum__content a))
(declare-fun to_rep3 (sub_enum) Int)
(declare-fun of_rep3 (Int) sub_enum)
(assert (forall ((x sub_enum)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x sub_enum)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__rec__my_rec__e sub_enum)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) sub_enum (rec__rec__my_rec__e a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__rec__my_rec__x integer) (rec__rec__my_rec__y float)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer (rec__rec__my_rec__x a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun rec__my_rec__x__pred ((a us_rep)) Bool (= (to_rep3 (rec__rec__my_rec__e (us_split_discrs1 a))) 0))
(define-fun rec__my_rec__y__pred ((a us_rep)) Bool (= (to_rep3 (rec__rec__my_rec__e (us_split_discrs1 a))) 1))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep3 (rec__rec__my_rec__e (us_split_discrs1 a))) (to_rep3 (rec__rec__my_rec__e (us_split_discrs1 b)))) (=> (rec__my_rec__x__pred a) (= (to_rep1 (rec__rec__my_rec__x (us_split_fields1 a))) (to_rep1 (rec__rec__my_rec__x (us_split_fields1 b)))))) (=> (rec__my_rec__y__pred a) (= (to_rep2 (rec__rec__my_rec__y (us_split_fields1 a))) (to_rep2 (rec__rec__my_rec__y (us_split_fields1 b)))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const rec__my_rec__e__first__bit Int)
(declare-const rec__my_rec__e__last__bit Int)
(declare-const rec__my_rec__e__position Int)
(assert (<= 0 rec__my_rec__e__first__bit))
(assert (< rec__my_rec__e__first__bit rec__my_rec__e__last__bit))
(assert (<= 0 rec__my_rec__e__position))
(declare-const rec__my_rec__x__first__bit Int)
(declare-const rec__my_rec__x__last__bit Int)
(declare-const rec__my_rec__x__position Int)
(assert (<= 0 rec__my_rec__x__first__bit))
(assert (< rec__my_rec__x__first__bit rec__my_rec__x__last__bit))
(assert (<= 0 rec__my_rec__x__position))
(declare-const rec__my_rec__y__first__bit Int)
(declare-const rec__my_rec__y__last__bit Int)
(declare-const rec__my_rec__y__position Int)
(assert (<= 0 rec__my_rec__y__first__bit))
(assert (< rec__my_rec__y__first__bit rec__my_rec__y__last__bit))
(assert (<= 0 rec__my_rec__y__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep (my_rec__content a))
(define-fun in_range3 ((rec__rec__my_rec__e1 Int) (a us_rep)) Bool (= rec__rec__my_rec__e1 (to_rep3 (rec__rec__my_rec__e (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const rec__my_rec__e__first__bit1 Int)
(declare-const rec__my_rec__e__last__bit1 Int)
(declare-const rec__my_rec__e__position1 Int)
(assert (<= 0 rec__my_rec__e__first__bit1))
(assert (< rec__my_rec__e__first__bit1 rec__my_rec__e__last__bit1))
(assert (<= 0 rec__my_rec__e__position1))
(declare-const rec__my_rec__x__first__bit1 Int)
(declare-const rec__my_rec__x__last__bit1 Int)
(declare-const rec__my_rec__x__position1 Int)
(assert (<= 0 rec__my_rec__x__first__bit1))
(assert (< rec__my_rec__x__first__bit1 rec__my_rec__x__last__bit1))
(assert (<= 0 rec__my_rec__x__position1))
(declare-const rec__my_rec__y__first__bit1 Int)
(declare-const rec__my_rec__y__last__bit1 Int)
(declare-const rec__my_rec__y__position1 Int)
(assert (<= 0 rec__my_rec__y__first__bit1))
(assert (< rec__my_rec__y__first__bit1 rec__my_rec__y__last__bit1))
(assert (<= 0 rec__my_rec__y__position1))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((t1s__ref (mk_t1s__ref (t1s__content us_rep)))))
(define-fun t1s__ref___projection ((a t1s__ref)) us_rep (t1s__content a))
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__rec__sub_rec__z enum)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs2)) enum (rec__rec__sub_rec__z a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__rec__sub_rec__plop us_rep)))))
(define-fun us_split_fields_Plop__projection ((a us_split_fields2)) us_rep (rec__rec__sub_rec__plop a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs3 us_split_discrs2) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__rec__sub_rec__z (us_split_discrs3 a))) (to_rep (rec__rec__sub_rec__z (us_split_discrs3 b)))) (= (bool_eq (rec__rec__sub_rec__plop (us_split_fields3 a)) (rec__rec__sub_rec__plop (us_split_fields3 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const rec__sub_rec__z__first__bit Int)
(declare-const rec__sub_rec__z__last__bit Int)
(declare-const rec__sub_rec__z__position Int)
(assert (<= 0 rec__sub_rec__z__first__bit))
(assert (< rec__sub_rec__z__first__bit rec__sub_rec__z__last__bit))
(assert (<= 0 rec__sub_rec__z__position))
(declare-const rec__sub_rec__plop__first__bit Int)
(declare-const rec__sub_rec__plop__last__bit Int)
(declare-const rec__sub_rec__plop__position Int)
(assert (<= 0 rec__sub_rec__plop__first__bit))
(assert (< rec__sub_rec__plop__first__bit rec__sub_rec__plop__last__bit))
(assert (<= 0 rec__sub_rec__plop__position))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((sub_rec__ref (mk_sub_rec__ref (sub_rec__content us_rep1)))))
(define-fun sub_rec__ref___projection ((a sub_rec__ref)) us_rep1 (sub_rec__content a))
(define-fun dynamic_invariant ((temp___expr_155 us_rep1) (temp___is_init_152 Bool) (temp___skip_constant_153 Bool) (temp___do_toplevel_154 Bool)) Bool (in_range3 (to_rep (rec__rec__sub_rec__z (us_split_discrs3 temp___expr_155))) (rec__rec__sub_rec__plop (us_split_fields3 temp___expr_155))))
(define-fun in_range4 ((rec__rec__my_rec__e1 Int) (a us_rep)) Bool (= rec__rec__my_rec__e1 (to_rep3 (rec__rec__my_rec__e (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const rec__my_rec__e__first__bit2 Int)
(declare-const rec__my_rec__e__last__bit2 Int)
(declare-const rec__my_rec__e__position2 Int)
(assert (<= 0 rec__my_rec__e__first__bit2))
(assert (< rec__my_rec__e__first__bit2 rec__my_rec__e__last__bit2))
(assert (<= 0 rec__my_rec__e__position2))
(declare-const rec__my_rec__x__first__bit2 Int)
(declare-const rec__my_rec__x__last__bit2 Int)
(declare-const rec__my_rec__x__position2 Int)
(assert (<= 0 rec__my_rec__x__first__bit2))
(assert (< rec__my_rec__x__first__bit2 rec__my_rec__x__last__bit2))
(assert (<= 0 rec__my_rec__x__position2))
(declare-const rec__my_rec__y__first__bit2 Int)
(declare-const rec__my_rec__y__last__bit2 Int)
(declare-const rec__my_rec__y__position2 Int)
(assert (<= 0 rec__my_rec__y__first__bit2))
(assert (< rec__my_rec__y__first__bit2 rec__my_rec__y__last__bit2))
(assert (<= 0 rec__my_rec__y__position2))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((t2s__ref (mk_t2s__ref (t2s__content us_rep)))))
(define-fun t2s__ref___projection ((a t2s__ref)) us_rep (t2s__content a))
(declare-datatypes () ((us_split_discrs4 (mk___split_discrs2 (rec__rec__sub_rec_ok__z enum)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs4)) enum (rec__rec__sub_rec_ok__z a))
(declare-datatypes () ((us_split_discrs__ref2 (mk___split_discrs__ref2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref2)) us_split_discrs4 (us_split_discrs__content2 a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__rec__sub_rec_ok__plop us_rep)))))
(define-fun us_split_fields_Plop__2__projection ((a us_split_fields4)) us_rep (rec__rec__sub_rec_ok__plop a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs5 us_split_discrs4) (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_discrs4 (us_split_discrs5 a))
(define-fun us_rep___6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun rec__sub_rec_ok__plop__pred ((a us_rep2)) Bool (and (<= 0 (to_rep (rec__rec__sub_rec_ok__z (us_split_discrs5 a)))) (<= (to_rep (rec__rec__sub_rec_ok__z (us_split_discrs5 a))) 1)))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep (rec__rec__sub_rec_ok__z (us_split_discrs5 a))) (to_rep (rec__rec__sub_rec_ok__z (us_split_discrs5 b)))) (=> (rec__sub_rec_ok__plop__pred a) (= (bool_eq (rec__rec__sub_rec_ok__plop (us_split_fields5 a)) (rec__rec__sub_rec_ok__plop (us_split_fields5 b))) true))) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const rec__sub_rec_ok__z__first__bit Int)
(declare-const rec__sub_rec_ok__z__last__bit Int)
(declare-const rec__sub_rec_ok__z__position Int)
(assert (<= 0 rec__sub_rec_ok__z__first__bit))
(assert (< rec__sub_rec_ok__z__first__bit rec__sub_rec_ok__z__last__bit))
(assert (<= 0 rec__sub_rec_ok__z__position))
(declare-const rec__sub_rec_ok__plop__first__bit Int)
(declare-const rec__sub_rec_ok__plop__last__bit Int)
(declare-const rec__sub_rec_ok__plop__position Int)
(assert (<= 0 rec__sub_rec_ok__plop__first__bit))
(assert (< rec__sub_rec_ok__plop__first__bit rec__sub_rec_ok__plop__last__bit))
(assert (<= 0 rec__sub_rec_ok__plop__position))
(declare-fun user_eq8 (us_rep2 us_rep2) Bool)
(declare-const dummy8 us_rep2)
(declare-datatypes () ((sub_rec_ok__ref (mk_sub_rec_ok__ref (sub_rec_ok__content us_rep2)))))
(define-fun sub_rec_ok__ref___projection ((a sub_rec_ok__ref)) us_rep2 (sub_rec_ok__content a))
(define-fun dynamic_invariant1 ((temp___expr_161 us_rep2) (temp___is_init_158 Bool) (temp___skip_constant_159 Bool) (temp___do_toplevel_160 Bool)) Bool (=> (rec__sub_rec_ok__plop__pred temp___expr_161) (in_range4 (to_rep (rec__rec__sub_rec_ok__z (us_split_discrs5 temp___expr_161))) (rec__rec__sub_rec_ok__plop (us_split_fields5 temp___expr_161)))))
(declare-sort natural 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq9 (natural natural) Bool)
(declare-const dummy9 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep4 (natural) Int)
(declare-fun of_rep4 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x natural)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq3 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep4 (select a temp___idx_132)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep4 (select a temp___idx_132)) (to_rep4 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq3 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq3 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq10 (integer integer) Bool)
(declare-const dummy10 integer)
(declare-datatypes () ((t5s__ref (mk_t5s__ref (t5s__content integer)))))
(define-fun t5s__ref___projection ((a t5s__ref)) integer (t5s__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size5 Int)
(declare-fun object__size5 ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 ((Array Int natural)) Int)
(assert (<= 0 value__size5))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size5 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment5 a))))
(define-fun bool_eq4 ((x us_t) (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq11 (us_t us_t) Bool)
(declare-const dummy11 us_t)
(declare-datatypes () ((t6s__ref (mk_t6s__ref (t6s__content us_t)))))
(define-fun t6s__ref___projection ((a t6s__ref)) us_t (t6s__content a))
(declare-datatypes () ((us_split_discrs6 (mk___split_discrs3 (rec__rec__sub_arr__f natural) (rec__rec__sub_arr__l natural)))))
(define-fun us_split_discrs___4__projection ((a us_split_discrs6)) natural (rec__rec__sub_arr__f a))
(define-fun us_split_discrs___5__projection ((a us_split_discrs6)) natural (rec__rec__sub_arr__l a))
(declare-datatypes () ((us_split_discrs__ref3 (mk___split_discrs__ref3 (us_split_discrs__content3 us_split_discrs6)))))
(define-fun us_split_discrs__ref___4__projection ((a us_split_discrs__ref3)) us_split_discrs6 (us_split_discrs__content3 a))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__rec__sub_arr__content us_t)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields6)) us_t (rec__rec__sub_arr__content a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_discrs7 us_split_discrs6) (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___7__projection ((a us_rep3)) us_split_discrs6 (us_split_discrs7 a))
(define-fun us_rep___8__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq5 ((a us_rep3) (b us_rep3)) Bool (ite (and (and (= (to_rep4 (rec__rec__sub_arr__f (us_split_discrs7 a))) (to_rep4 (rec__rec__sub_arr__f (us_split_discrs7 b)))) (= (to_rep4 (rec__rec__sub_arr__l (us_split_discrs7 a))) (to_rep4 (rec__rec__sub_arr__l (us_split_discrs7 b))))) (= (bool_eq4 (rec__rec__sub_arr__content (us_split_fields7 a)) (rec__rec__sub_arr__content (us_split_fields7 b))) true)) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep3) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep3) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep3)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment6 a))))
(declare-const rec__sub_arr__f__first__bit Int)
(declare-const rec__sub_arr__f__last__bit Int)
(declare-const rec__sub_arr__f__position Int)
(assert (<= 0 rec__sub_arr__f__first__bit))
(assert (< rec__sub_arr__f__first__bit rec__sub_arr__f__last__bit))
(assert (<= 0 rec__sub_arr__f__position))
(declare-const rec__sub_arr__l__first__bit Int)
(declare-const rec__sub_arr__l__last__bit Int)
(declare-const rec__sub_arr__l__position Int)
(assert (<= 0 rec__sub_arr__l__first__bit))
(assert (< rec__sub_arr__l__first__bit rec__sub_arr__l__last__bit))
(assert (<= 0 rec__sub_arr__l__position))
(declare-const rec__sub_arr__content__first__bit Int)
(declare-const rec__sub_arr__content__last__bit Int)
(declare-const rec__sub_arr__content__position Int)
(assert (<= 0 rec__sub_arr__content__first__bit))
(assert (< rec__sub_arr__content__first__bit rec__sub_arr__content__last__bit))
(assert (<= 0 rec__sub_arr__content__position))
(declare-fun user_eq12 (us_rep3 us_rep3) Bool)
(declare-const dummy12 us_rep3)
(declare-datatypes () ((sub_arr__ref (mk_sub_arr__ref (sub_arr__content us_rep3)))))
(define-fun sub_arr__ref___projection ((a sub_arr__ref)) us_rep3 (sub_arr__content a))
(define-fun dynamic_invariant2 ((temp___expr_172 us_rep3) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool)) Bool (let ((temp___174 (rec__rec__sub_arr__l (us_split_discrs7 temp___expr_172)))) (let ((temp___173 (rec__rec__sub_arr__f (us_split_discrs7 temp___expr_172)))) (and (dynamic_property1 (to_rep4 temp___173) (to_rep4 temp___174) (first1 (rec__rec__sub_arr__content (us_split_fields7 temp___expr_172))) (last1 (rec__rec__sub_arr__content (us_split_fields7 temp___expr_172)))) (and (= (first1 (rec__rec__sub_arr__content (us_split_fields7 temp___expr_172))) (to_rep4 temp___173)) (= (last1 (rec__rec__sub_arr__content (us_split_fields7 temp___expr_172))) (to_rep4 temp___174)))))))
(define-fun dynamic_invariant3 ((temp___expr_138 Int) (temp___is_init_135 Bool) (temp___skip_constant_136 Bool) (temp___do_toplevel_137 Bool)) Bool (=> (or (= temp___is_init_135 true) (<= 0 2)) (in_range temp___expr_138)))
(declare-fun build_rec (Int) us_rep1)
(declare-fun build_rec__function_guard (us_rep1 Int) Bool)
(assert (forall ((a Int)) (! (=> (dynamic_invariant3 a true true true) (dynamic_invariant (build_rec a) true false true)) :pattern ((build_rec a)))))
(declare-fun build_rec_ok (Int) us_rep2)
(declare-fun build_rec_ok__function_guard (us_rep2 Int) Bool)
(assert (forall ((a Int)) (! (=> (dynamic_invariant3 a true true true) (dynamic_invariant1 (build_rec_ok a) true false true)) :pattern ((build_rec_ok a)))))
(define-fun dynamic_invariant4 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range5 temp___expr_33)))
(declare-fun build_arr (Int Int) us_rep3)
(declare-fun build_arr__function_guard (us_rep3 Int Int) Bool)
(assert (forall ((f Int) (l Int)) (! (=> (and (dynamic_invariant4 f true true true) (dynamic_invariant4 l true true true)) (dynamic_invariant2 (build_arr f l) true false true)) :pattern ((build_arr f l)))))
(declare-const x__split_discrs us_split_discrs2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y__split_discrs us_split_discrs4)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const f__split_discrs us_split_discrs6)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant6 ((temp___expr_51 Float32) (temp___is_init_48 Bool) (temp___skip_constant_49 Bool) (temp___do_toplevel_50 Bool)) Bool (=> (or (= temp___is_init_48 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_51)))
(define-fun dynamic_invariant7 ((temp___expr_144 Int) (temp___is_init_141 Bool) (temp___skip_constant_142 Bool) (temp___do_toplevel_143 Bool)) Bool (=> (or (= temp___is_init_141 true) (<= 0 1)) (in_range2 temp___expr_144)))
(assert (not true))
(check-sat)
(exit)
