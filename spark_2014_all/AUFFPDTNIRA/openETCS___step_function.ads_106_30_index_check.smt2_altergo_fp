(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((real_of_int(truncate(x)) <= x) and
  (x <  real_of_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((real_of_int((truncate(x) - 1)) <  x) and
  (x <= real_of_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= real_of_int(truncate(x))) and
  (real_of_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(real_of_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((real_of_int(floor(x)) <= x) and
  (x <  real_of_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((real_of_int((ceil(x) - 1)) <  x) and
  (x <= real_of_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t

logic add : fpa_rounding_mode, t, t -> t

logic sub : fpa_rounding_mode, t, t -> t

logic mul : fpa_rounding_mode, t, t -> t

logic div : fpa_rounding_mode, t, t -> t

logic abs : t -> t

logic neg : t -> t

logic fma : fpa_rounding_mode, t, t, t -> t

logic sqrt : fpa_rounding_mode, t -> t

logic roundToIntegral : fpa_rounding_mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : fpa_rounding_mode, int -> t

logic to_int : fpa_rounding_mode, t -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = real_of_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) ->
  in_range(float32(m,x))))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom eq_special :
  (forall x:t. forall y:t. (eq(x, y) -> (is_not_nan(x) and (is_not_nan(y) and
  ((tqtisFinite(x) and tqtisFinite(y)) or (is_infinite(x) and
  (is_infinite(y) and same_sign(x, y))))))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom le_special :
  (forall x:t. forall y:t [le(x, y)]. (le(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and is_not_nan(y)) or
  (is_not_nan(x) and is_plus_infinity(y))))))

axiom lt_special :
  (forall x:t. forall y:t [lt(x, y)]. (lt(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and (is_not_nan(y) and
  (not is_minus_infinity(y)))) or (is_not_nan(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and
  ((m = Down) -> ((is_positive(x) -> (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127))) and ((not is_positive(x)) ->
  is_infinite(x))))) and ((m = ToZero) -> ((is_positive(x) ->
  (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) -> (tqtisFinite(add(m, x,
  y)) and (tqtreal(add(m, x, y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) -> (tqtisFinite(sub(m, x,
  y)) and (tqtreal(sub(m, x, y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) -> (tqtisFinite(mul(m, x,
  y)) and (tqtreal(mul(m, x, y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x,
  y)) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> (tqtisFinite(abs(x)) and
  ((tqtreal(abs(x)) = abs_real(tqtreal(x))) and is_positive(abs(x))))))

axiom abs_finite_rev :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) -> (tqtisFinite(x) and
  (tqtreal(abs(x)) = abs_real(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(x) -> (tqtisFinite(y) -> (tqtisFinite(z) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) ->
  (tqtisFinite(fma(m, x, y, z)) and (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and
  (tqtisFinite(y) and tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and
  (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

axiom sqrt_finite :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(x) ->
  ((0.0 <= tqtreal(x)) -> (tqtisFinite(sqrt(m, x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom add_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(add(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(add(m, x, y)) and
  same_sign(add(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and diff_sign(x, y))) ->
  is_nan(add(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) + tqtreal(y))))))) ->
  (same_sign_real(add(m, x, y), (tqtreal(x) + tqtreal(y))) and
  overflow_value(m, add(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((same_sign(x, y) -> same_sign(add(m, x, y), x)) and
  ((not same_sign(x, y)) -> sign_zero_result(m, add(m, x, y))))))))))))

axiom sub_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(sub(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(sub(m, x, y)) and
  diff_sign(sub(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  is_nan(sub(m, x, y))) and (((is_infinite(x) and (is_infinite(y) and
  diff_sign(x, y))) -> (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y),
  x))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) - tqtreal(y))))))) ->
  (same_sign_real(sub(m, x, y), (tqtreal(x) - tqtreal(y))) and
  overflow_value(m, sub(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((diff_sign(x, y) -> same_sign(sub(m, x, y), x)) and
  ((not diff_sign(x, y)) -> sign_zero_result(m, sub(m, x, y))))))))))))

axiom mul_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(mul(m, x, y))) and (((is_zero(x) and
  is_infinite(y)) -> is_nan(mul(m, x, y))) and (((tqtisFinite(x) and
  (is_infinite(y) and (not is_zero(x)))) -> is_infinite(mul(m, x, y))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(mul(m, x, y))) and
  (((is_infinite(x) and (tqtisFinite(y) and (not is_zero(y)))) ->
  is_infinite(mul(m, x, y))) and (((is_infinite(x) and is_infinite(y)) ->
  is_infinite(mul(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) * tqtreal(y))))))) -> overflow_value(m,
  mul(m, x, y))) and ((not is_nan(mul(m, x, y))) -> product_sign(mul(m, x,
  y), x, y))))))))))

axiom div_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> is_zero(div(m, x, y))) and
  (((is_infinite(x) and tqtisFinite(y)) -> is_infinite(div(m, x, y))) and
  (((is_infinite(x) and is_infinite(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  (not in_range(float32(m,(tqtreal(x) / tqtreal(y)))))))) ->
  overflow_value(m, div(m, x, y))) and (((tqtisFinite(x) and (is_zero(y) and
  (not is_zero(x)))) -> is_infinite(div(m, x, y))) and (((is_zero(x) and
  is_zero(y)) -> is_nan(div(m, x, y))) and ((not is_nan(div(m, x, y))) ->
  product_sign(div(m, x, y), x, y))))))))))

axiom neg_special :
  (forall x:t [neg(x)]. ((is_nan(x) -> is_nan(neg(x))) and
  ((is_infinite(x) -> is_infinite(neg(x))) and ((not is_nan(x)) ->
  diff_sign(x, neg(x))))))

axiom abs_special :
  (forall x:t [abs(x)]. ((is_nan(x) -> is_nan(abs(x))) and
  ((is_infinite(x) -> is_infinite(abs(x))) and ((not is_nan(x)) ->
  is_positive(abs(x))))))

axiom fma_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (((is_nan(x) or (is_nan(y) or is_nan(z))) -> is_nan(fma(m, x, y,
  z))) and (((is_zero(x) and is_infinite(y)) -> is_nan(fma(m, x, y, z))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(fma(m, x, y, z))) and
  (((tqtisFinite(x) and ((not is_zero(x)) and (is_infinite(y) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((tqtisFinite(x) and ((not is_zero(x)) and
  (is_infinite(y) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((is_infinite(x) and (tqtisFinite(y) and
  ((not is_zero(y)) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (is_infinite(y) and tqtisFinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and product_sign(fma(m, x, y, z), x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and is_infinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  (((is_infinite(x) and (is_infinite(y) and is_infinite(z))) ->
  ((product_sign(z, x, y) -> (is_infinite(fma(m, x, y, z)) and
  same_sign(fma(m, x, y, z), z))) and ((not product_sign(z, x, y)) ->
  is_nan(fma(m, x, y, z))))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (tqtisFinite(z) and
  (not in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))) ->
  (same_sign_real(fma(m, x, y, z),
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) and overflow_value(m, fma(m, x,
  y, z)))) and ((tqtisFinite(x) and (tqtisFinite(y) and tqtisFinite(z))) ->
  ((product_sign(z, x, y) -> same_sign(fma(m, x, y, z), z)) and
  ((not product_sign(z, x, y)) ->
  ((((tqtreal(x) * tqtreal(y)) + tqtreal(z)) = 0.0) -> (((m = Down) ->
  is_negative(fma(m, x, y, z))) and ((not (m = Down)) -> is_positive(fma(m,
  x, y, z))))))))))))))))))))

axiom sqrt_special :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. ((is_nan(x) ->
  is_nan(sqrt(m, x))) and ((is_plus_infinity(x) -> is_plus_infinity(sqrt(m,
  x))) and ((is_minus_infinity(x) -> is_nan(sqrt(m, x))) and
  (((tqtisFinite(x) and (tqtreal(x) <  0.0)) -> is_nan(sqrt(m, x))) and
  ((is_zero(x) -> same_sign(sqrt(m, x), x)) and ((tqtisFinite(x) and
  (0.0 <  tqtreal(x))) -> is_positive(sqrt(m, x)))))))))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t. (tqtisFinite(i) -> ((le(i,
  neg(of_int(m, 16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Up, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Down, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t. (to_int(m, x) = to_int(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int(m, of_int(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) -> (to_int(m,
  neg(x)) = (-to_int(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (in_range(float32(NearestTiesToEven,x)) ->
  ((((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x)) and
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150)))))

axiom round_bound :
  (forall m:fpa_rounding_mode. forall x:real [float32(m,x)].
  (in_range(float32(m,x)) ->
  ((((x - (0x1.0p-23 * abs_real(x))) - 0x1.0p-149) <= float32(m,x)) and
  (float32(m,x) <= ((x + (0x1.0p-23 * abs_real(x))) + 0x1.0p-149)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(NearestTiesToAway, 1))

type t__ref = { t__content : t
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type float1

logic bool_eq2 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq2(x, y)]. ((eq(x, y) -> (bool_eq2(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq2(x, y) = false))))

logic user_eq : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic dummy : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

logic to_rep : float1 -> t

logic of_rep : t -> float1

axiom inversion_axiom :
  (forall x:float1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:float1 [to_rep(x)]. tqtisFinite(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (tqtisFinite(x) ->
  (to_rep(of_rep(x)) = x)))

type num_delimiters_range

predicate in_range2(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : num_delimiters_range, num_delimiters_range -> bool

logic dummy1 : num_delimiters_range

type num_delimiters_range__ref = { num_delimiters_range__content :
num_delimiters_range
}

function num_delimiters_range__ref___projection(a: num_delimiters_range__ref) : num_delimiters_range =
  (a).num_delimiters_range__content

logic to_rep1 : num_delimiters_range -> int

logic of_rep1 : int -> num_delimiters_range

axiom inversion_axiom1 :
  (forall x:num_delimiters_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:num_delimiters_range [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type function_range

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : function_range, function_range -> bool

logic dummy2 : function_range

type function_range__ref = { function_range__content : function_range
}

function function_range__ref___projection(a: function_range__ref) : function_range =
  (a).function_range__content

logic to_rep2 : function_range -> int

logic of_rep2 : int -> function_range

axiom inversion_axiom2 :
  (forall x:function_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:function_range [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__step_function__delimiter_entry__delimiter :
function_range; rec__step_function__delimiter_entry__value : float1
}

function us_split_fields_Delimiter__projection(a: us_split_fields) : function_range =
  (a).rec__step_function__delimiter_entry__delimiter

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((b).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (to_rep(((a).us_split_fields1).rec__step_function__delimiter_entry__value) = to_rep(((b).us_split_fields1).rec__step_function__delimiter_entry__value))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((b).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (to_rep(((a).us_split_fields1).rec__step_function__delimiter_entry__value) = to_rep(((b).us_split_fields1).rec__step_function__delimiter_entry__value)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:function_range. forall a1:float1. (0 <= object__size({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = a;
  rec__step_function__delimiter_entry__value = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:function_range. forall a1:float1. (0 <= object__alignment({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = a;
  rec__step_function__delimiter_entry__value = a1 } })))

logic step_function__delimiter_entry__delimiter__first__bit : int

logic step_function__delimiter_entry__delimiter__last__bit : int

logic step_function__delimiter_entry__delimiter__position : int

axiom step_function__delimiter_entry__delimiter__first__bit_axiom :
  (0 <= step_function__delimiter_entry__delimiter__first__bit)

axiom step_function__delimiter_entry__delimiter__last__bit_axiom :
  (step_function__delimiter_entry__delimiter__first__bit <  step_function__delimiter_entry__delimiter__last__bit)

axiom step_function__delimiter_entry__delimiter__position_axiom :
  (0 <= step_function__delimiter_entry__delimiter__position)

logic step_function__delimiter_entry__value__first__bit : int

logic step_function__delimiter_entry__value__last__bit : int

logic step_function__delimiter_entry__value__position : int

axiom step_function__delimiter_entry__value__first__bit_axiom :
  (0 <= step_function__delimiter_entry__value__first__bit)

axiom step_function__delimiter_entry__value__last__bit_axiom :
  (step_function__delimiter_entry__value__first__bit <  step_function__delimiter_entry__value__last__bit)

axiom step_function__delimiter_entry__value__position_axiom :
  (0 <= step_function__delimiter_entry__value__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : function_range

logic dummy4 : float1

type delimiter_entry__ref = { delimiter_entry__content : us_rep
}

function delimiter_entry__ref___projection(a: delimiter_entry__ref) : us_rep =
  (a).delimiter_entry__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq7 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic dummy5 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

logic user_eq4 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = {
rec__step_function__step_function_t__number_of_delimiters :
num_delimiters_range; rec__step_function__step_function_t__step :
(int,us_rep) farray
}

function us_split_fields_Number_Of_Delimiters__projection(a: us_split_fields2) : num_delimiters_range =
  (a).rec__step_function__step_function_t__number_of_delimiters

function us_split_fields_Step__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__step_function__step_function_t__step

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((to_rep1(((a).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters) = to_rep1(((b).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters)) and
  (bool_eq7(((a).us_split_fields3).rec__step_function__step_function_t__step,
  0, 10, ((b).us_split_fields3).rec__step_function__step_function_t__step, 0,
  10) = true)) -> (bool_eq8(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters) = to_rep1(((b).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters)) and
  (bool_eq7(((a).us_split_fields3).rec__step_function__step_function_t__step,
  0, 10, ((b).us_split_fields3).rec__step_function__step_function_t__step, 0,
  10) = true))) -> (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:num_delimiters_range. forall a1:(int,us_rep) farray.
  (0 <= object__size2({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = a;
  rec__step_function__step_function_t__step = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:num_delimiters_range. forall a1:(int,us_rep) farray.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = a;
  rec__step_function__step_function_t__step = a1 } })))

logic step_function__step_function_t__number_of_delimiters__first__bit : int

logic step_function__step_function_t__number_of_delimiters__last__bit : int

logic step_function__step_function_t__number_of_delimiters__position : int

axiom step_function__step_function_t__number_of_delimiters__first__bit_axiom :
  (0 <= step_function__step_function_t__number_of_delimiters__first__bit)

axiom step_function__step_function_t__number_of_delimiters__last__bit_axiom :
  (step_function__step_function_t__number_of_delimiters__first__bit <  step_function__step_function_t__number_of_delimiters__last__bit)

axiom step_function__step_function_t__number_of_delimiters__position_axiom :
  (0 <= step_function__step_function_t__number_of_delimiters__position)

logic step_function__step_function_t__step__first__bit : int

logic step_function__step_function_t__step__last__bit : int

logic step_function__step_function_t__step__position : int

axiom step_function__step_function_t__step__first__bit_axiom :
  (0 <= step_function__step_function_t__step__first__bit)

axiom step_function__step_function_t__step__last__bit_axiom :
  (step_function__step_function_t__step__first__bit <  step_function__step_function_t__step__last__bit)

axiom step_function__step_function_t__step__position_axiom :
  (0 <= step_function__step_function_t__step__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy6 : num_delimiters_range

logic dummy7 : (int,us_rep) farray

type step_function_t__ref = { step_function_t__content : us_rep1
}

function step_function_t__ref___projection(a: step_function_t__ref) : us_rep1 =
  (a).step_function_t__content

logic min1 : t, t -> t

logic min__function_guard : t, t, t -> prop

axiom min__post_axiom :
  (forall x1:t. forall x2:t [min1(x1, x2)]. ((tqtisFinite(x1) and
  tqtisFinite(x2)) -> (((le(x1, x2) -> eq(min1(x1, x2), x1)) and ((not le(x1,
  x2)) -> eq(min1(x1, x2), x2))) and tqtisFinite(min1(x1, x2)))))

logic is_valid : us_rep1 -> bool

logic is_valid__function_guard : bool, us_rep1 -> prop

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall sfun:num_delimiters_range. forall sfun1:(int,us_rep) farray
  [is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } })]. ((is_valid({
  us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }) = true) <->
  ((to_rep2((((sfun1[0])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = 0) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(sfun) - 1))) ->
  (to_rep2((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun1[(i + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))))

logic get_value : us_rep1, int -> t

logic get_value__function_guard : t, us_rep1, int -> prop

axiom get_value__post_axiom :
  (forall sfun:num_delimiters_range. forall sfun1:(int,us_rep) farray.
  (forall x:int [get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x)].
  ((in_range3(x) and (is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }) = true)) ->
  (((exists i:int. (((0 <= i) and (i <= (to_rep1(sfun) - 1))) and
    (((to_rep2((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= x) and
    (x <  to_rep2((((sfun1[(i + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
    eq(get_value({ us_split_fields3 = {
    rec__step_function__step_function_t__number_of_delimiters = sfun;
    rec__step_function__step_function_t__step = sfun1 } }, x),
    to_rep((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun1[to_rep1(sfun)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= x) and
  eq(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x),
  to_rep((((sfun1[to_rep1(sfun)])).us_split_fields1).rec__step_function__delimiter_entry__value)))) and
  tqtisFinite(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x))))))

logic sfun1 : num_delimiters_range

logic sfun11 : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic sfun2 : num_delimiters_range

logic sfun21 : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 0.0e-1))

 (* File "step_function.ads", line 89, characters 0-0 *)
goal WP_parameter_def :
  (forall merge__split_fields:num_delimiters_range.
  forall merge__split_fields1:(int,us_rep) farray. forall i1:int.
  forall i2:int. forall im:int. forall scan_sfun1:bool.
  forall scan_sfun2:bool. forall temp___416:bool.
  forall temp___414:num_delimiters_range.
  forall temp___4141:(int,us_rep) farray. forall temp___413:bool.
  forall temp___412:int. forall temp___411:int. forall temp___410:int.
  forall o:float1. forall o1:function_range. forall o2:function_range.
  forall o3:float1. forall o4:function_range. forall o5:float1.
  forall o6:(int,us_rep) farray. forall o7:num_delimiters_range.
  forall o8:(int,us_rep) farray. forall temp___340:num_delimiters_range.
  forall temp___3401:(int,us_rep) farray. forall o9:function_range.
  forall o10:function_range. forall o11:float1. forall o12:function_range.
  forall o13:float1. forall o14:(int,us_rep) farray.
  forall o15:num_delimiters_range. forall o16:(int,us_rep) farray.
  forall temp___402:num_delimiters_range.
  forall temp___4021:(int,us_rep) farray. forall o17:t. forall o18:t.
  forall o19:t. forall o20:float1. forall o21:us_split_fields.
  forall o22:us_rep. forall o23:(int,us_rep) farray.
  forall o24:us_split_fields2. forall temp___409:us_rep1.
  forall o25:function_range. forall o26:us_split_fields. forall o27:us_rep.
  forall o28:(int,us_rep) farray. forall o29:us_split_fields2.
  forall temp___387:us_rep1. forall o30:t. forall o31:t. forall o32:t.
  forall o33:float1. forall o34:us_split_fields. forall o35:us_rep.
  forall o36:(int,us_rep) farray. forall o37:us_split_fields2.
  forall temp___394:us_rep1. forall o38:function_range.
  forall o39:us_split_fields. forall o40:us_rep.
  forall o41:(int,us_rep) farray. forall o42:us_split_fields2.
  forall temp___372:us_rep1. forall o43:t. forall o44:t. forall o45:t.
  forall o46:float1. forall o47:us_split_fields. forall o48:us_rep.
  forall o49:(int,us_rep) farray. forall o50:us_split_fields2.
  forall temp___379:us_rep1. forall o51:function_range.
  forall o52:us_split_fields. forall o53:us_rep.
  forall o54:(int,us_rep) farray. forall o55:us_split_fields2.
  forall temp___359:us_rep1. forall o56:t. forall o57:t. forall o58:t.
  forall o59:float1. forall o60:us_split_fields. forall o61:us_rep.
  forall o62:(int,us_rep) farray. forall o63:us_split_fields2.
  forall temp___366:us_rep1. forall o64:function_range.
  forall o65:us_split_fields. forall o66:us_rep.
  forall o67:(int,us_rep) farray. forall o68:us_split_fields2.
  forall temp___346:us_rep1. forall o69:t. forall o70:t. forall o71:t.
  forall o72:float1. forall o73:us_split_fields. forall o74:us_rep.
  forall o75:(int,us_rep) farray. forall o76:us_split_fields2.
  forall temp___353:us_rep1. forall o77:num_delimiters_range.
  forall o78:us_split_fields2. forall temp___478:us_rep1. forall i:int.
  forall j:int. forall o79:int. forall o80:us_rep.
  forall o81:us_split_fields. forall o82:function_range. forall o83:int.
  forall o84:bool. forall o85:bool. forall result:int__ref. forall i11:int.
  forall result1:int__ref. forall i21:int. forall result2:int__ref.
  forall im1:int. forall result3:bool__ref. forall scan_sfun11:bool.
  forall result4:bool__ref. forall scan_sfun21:bool.
  forall result5:us_split_fields__ref1.
  forall merge__split_fields2:us_split_fields2.
  forall merge__split_fields3:us_split_fields2. forall i12:int.
  forall i22:int. forall im2:int. forall scan_sfun12:bool.
  forall scan_sfun22:bool. forall result6:us_split_fields__ref1.
  forall merge__split_fields4:us_split_fields2.
  forall result7:us_split_fields__ref1.
  forall merge__split_fields5:us_split_fields2. forall i13:int.
  forall scan_sfun13:bool. forall result8:us_split_fields__ref1.
  forall merge__split_fields6:us_split_fields2.
  forall result9:us_split_fields__ref1.
  forall merge__split_fields7:us_split_fields2. forall i23:int.
  forall scan_sfun23:bool. forall result10:us_split_fields__ref1.
  forall merge__split_fields8:us_split_fields2.
  forall result11:us_split_fields__ref1.
  forall merge__split_fields9:us_split_fields2. forall i14:int.
  forall scan_sfun14:bool. forall i24:int. forall scan_sfun24:bool.
  forall result12:us_split_fields__ref1.
  forall merge__split_fields10:us_split_fields2.
  forall result13:us_split_fields__ref1.
  forall merge__split_fields11:us_split_fields2. forall i15:int.
  forall scan_sfun15:bool. forall result14:us_split_fields__ref1.
  forall merge__split_fields12:us_split_fields2.
  forall result15:us_split_fields__ref1.
  forall merge__split_fields13:us_split_fields2. forall i25:int.
  forall scan_sfun25:bool. forall im3:int__ref. forall im4:int.
  forall merge__split_fields14:us_split_fields__ref1. forall i16:int__ref.
  forall i26:int__ref. forall im5:int__ref. forall scan_sfun16:bool__ref.
  forall scan_sfun26:bool__ref.
  forall merge__split_fields15:us_split_fields2. forall i17:int.
  forall i27:int. forall im6:int. forall scan_sfun17:bool.
  forall scan_sfun27:bool.
  forall merge__split_fields16:us_split_fields__ref1. forall i18:int__ref.
  forall i28:int__ref. forall im7:int__ref. forall scan_sfun18:bool__ref.
  forall scan_sfun28:bool__ref.
  forall merge__split_fields17:us_split_fields2. forall i19:int.
  forall i29:int. forall im8:int. forall scan_sfun19:bool.
  forall scan_sfun29:bool. forall result16:us_split_fields__ref1.
  forall merge__split_fields18:us_split_fields2.
  forall merge__split_fields19:us_split_fields__ref1. forall i110:int__ref.
  forall i210:int__ref. forall im9:int__ref. forall scan_sfun110:bool__ref.
  forall scan_sfun210:bool__ref.
  forall merge__split_fields20:us_split_fields2. forall i111:int.
  forall i211:int. forall im10:int. forall scan_sfun111:bool.
  forall scan_sfun211:bool. ((((is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } }) = true) and
  (is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } }) = true)) and
  ((to_rep1(sfun1) + to_rep1(sfun2)) <= 10)) -> (((((result = {
  int__content = i1 }) and (i11 = 0)) and (in_range2(i11) and (((result1 = {
  int__content = i2 }) and (i21 = 0)) and (in_range2(i21) and (((result2 = {
  int__content = im }) and (im1 = 0)) and (in_range2(im1) and (((result3 = {
  bool__content = scan_sfun1 }) and (scan_sfun11 = of_int1(1))) and
  (((result4 = { bool__content = scan_sfun2 }) and
  (scan_sfun21 = of_int1(1))) and (((((temp___416 = scan_sfun21) and
  (((merge__split_fields = temp___414) and
  (merge__split_fields1 = temp___4141)) and ((temp___413 = scan_sfun11) and
  ((temp___412 = im1) and ((temp___411 = i21) and ((temp___410 = i11) and
  ((((((((to_rep(o) = fliteral1) and ((to_rep2(o1) = 0) and ((o1 = o2) and
  (o = o3)))) and ((o4 = o2) and (o5 = o3))) and
  (o6 = (merge__split_fields1[im1 <- { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o4;
  rec__step_function__delimiter_entry__value = o5 } }]))) and
  ((merge__split_fields = o7) and (o6 = o8))) and ((temp___340 = o7) and
  (temp___3401 = o8))) and ((result5 = { us_split_fields__content1 = {
  rec__step_function__step_function_t__number_of_delimiters =
  merge__split_fields; rec__step_function__step_function_t__step =
  merge__split_fields1 } }) and (merge__split_fields2 = {
  rec__step_function__step_function_t__number_of_delimiters = temp___340;
  rec__step_function__step_function_t__step = temp___3401 }))) and
  (((0 <= i12) and ((0 <= i22) and ((0 <= im2) and
  ((i12 <= to_rep1(sfun1)) and ((i22 <= to_rep1(sfun2)) and ((im2 <= 10) and
  (((scan_sfun12 = true) or (scan_sfun22 = true)) and (((((i12 = 0) and
  (i22 = 0)) and (im2 = 0)) or ((((0 <  i12) or
  (not (scan_sfun12 = true))) and ((0 <  i22) or
  (not (scan_sfun22 = true)))) and (0 <  im2))) and ((((((0 <  im2) and
  (scan_sfun12 = true)) and (scan_sfun22 = true)) and
  (im2 <  (i12 + i22))) or ((not (((0 <  im2) and (scan_sfun12 = true)) and
  (scan_sfun22 = true))) and (im2 <= (i12 + i22)))) and ((((0 <  im2) and
  (to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[0])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = 0)) or
  (not (0 <  im2))) and (((((0 <  im2) and (scan_sfun12 = true)) and
  (to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[(im2 - 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) or
  (not ((0 <  im2) and (scan_sfun12 = true)))) and (((((0 <  im2) and
  (scan_sfun22 = true)) and
  (to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[(im2 - 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) or
  (not ((0 <  im2) and (scan_sfun22 = true)))) and
  ((forall i3:int. (((1 <= i3) and (i3 <= (im2 - 1))) ->
   (to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[(i3 - 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))) and
  ((forall i3:int. (((0 <= i3) and (i3 <= (i12 - 1))) ->
   (exists j1:int. (((0 <= j1) and (j1 <= (im2 - 1))) and
   (to_rep2((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[j1])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))) and
  ((((not (scan_sfun12 = true)) and
  (forall i3:int. (((0 <= i3) and (i3 <= to_rep1(sfun1))) ->
  (exists j1:int. (((0 <= j1) and (j1 <= (im2 - 1))) and
  (to_rep2((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[j1])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))))) or
  (scan_sfun12 = true)) and
  ((forall i3:int. (((0 <= i3) and (i3 <= (i22 - 1))) ->
   (exists j1:int. (((0 <= j1) and (j1 <= (im2 - 1))) and
   (to_rep2((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[j1])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))) and
  ((((not (scan_sfun22 = true)) and
  (forall i3:int. (((0 <= i3) and (i3 <= to_rep1(sfun2))) ->
  (exists j1:int. (((0 <= j1) and (j1 <= (im2 - 1))) and
  (to_rep2((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[j1])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))))) or
  (scan_sfun22 = true)) and
  (forall i3:int. (((0 <= i3) and (i3 <= (im2 - 1))) ->
  eq(to_rep(((((merge__split_fields3).rec__step_function__step_function_t__step[i3])).us_split_fields1).rec__step_function__delimiter_entry__value),
  min1(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)),
  get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2(((((merge__split_fields3).rec__step_function__step_function_t__step[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))))))))))))))))))))) and
  ((((((0 <= 10) -> in_range2(i12)) and ((0 <= 10) -> in_range2(i22))) and
  ((0 <= 10) -> in_range2(im2))) and
  ((merge__split_fields3).rec__step_function__step_function_t__number_of_delimiters = temp___414)) and
  (((((scan_sfun12 = true) and (scan_sfun22 = true)) and
  (((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (((((((((to_rep2(o9) = to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  ((o9 = o10) and
  (((((merge__split_fields3).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__value = o11))) and
  ((o12 = o10) and (o13 = o11))) and
  (o14 = ((merge__split_fields3).rec__step_function__step_function_t__step[im2 <- {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = o12;
  rec__step_function__delimiter_entry__value = o13 } }]))) and
  (((merge__split_fields3).rec__step_function__step_function_t__number_of_delimiters = o15) and
  (o14 = o16))) and ((temp___402 = o15) and (temp___4021 = o16))) and
  ((result6 = { us_split_fields__content1 = merge__split_fields3 }) and
  (merge__split_fields4 = {
  rec__step_function__step_function_t__number_of_delimiters = temp___402;
  rec__step_function__step_function_t__step = temp___4021 }))) and
  (((((((((((o18 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2(((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o18) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o18,
   to_rep((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o18,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  (((o17 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2(((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o17) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o17,
   to_rep((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o17,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  ((o19 = min1(o17, o18)) and (tqtisFinite(o19) and ((le(o17, o18) and
  eq(o19, o17)) or ((not le(o17, o18)) and eq(o19, o18))))))) and
  (to_rep(o20) = o19)) and (o21 = {
  rec__step_function__delimiter_entry__delimiter =
  ((((merge__split_fields4).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter;
  rec__step_function__delimiter_entry__value = o20 })) and (o22 = {
  us_split_fields1 = o21 })) and
  (o23 = ((merge__split_fields4).rec__step_function__step_function_t__step[im2 <- o22]))) and
  (o24 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields4).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o23 })) and (temp___409 = {
  us_split_fields3 = o24 })) and ((result7 = { us_split_fields__content1 =
  merge__split_fields4 }) and
  (merge__split_fields5 = (temp___409).us_split_fields3))) and
  ((((i12 <  to_rep1(sfun1)) and ((i13 = (i12 + 1)) and
  ((scan_sfun13 = true) <-> (scan_sfun12 = true)))) or
  ((not (i12 <  to_rep1(sfun1))) and ((i13 = i12) and
  (not (scan_sfun13 = true))))) and in_range2(i13)))) and
  ((scan_sfun23 = scan_sfun22) and (i23 = i22)))) or
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  ((((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (((((((((to_rep2(o25) = to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (o26 = { rec__step_function__delimiter_entry__delimiter = o25;
  rec__step_function__delimiter_entry__value =
  ((((merge__split_fields3).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__value
  })) and (o27 = { us_split_fields1 = o26 })) and
  (o28 = ((merge__split_fields3).rec__step_function__step_function_t__step[im2 <- o27]))) and
  (o29 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields3).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o28 })) and (temp___387 = {
  us_split_fields3 = o29 })) and ((result8 = { us_split_fields__content1 =
  merge__split_fields3 }) and
  (merge__split_fields6 = (temp___387).us_split_fields3))) and
  (((((((((((o31 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2(((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o31) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o31,
   to_rep((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o31,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  (((o30 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2(((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o30) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o30,
   to_rep((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o30,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  ((o32 = min1(o30, o31)) and (tqtisFinite(o32) and ((le(o30, o31) and
  eq(o32, o30)) or ((not le(o30, o31)) and eq(o32, o31))))))) and
  (to_rep(o33) = o32)) and (o34 = {
  rec__step_function__delimiter_entry__delimiter =
  ((((merge__split_fields6).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter;
  rec__step_function__delimiter_entry__value = o33 })) and (o35 = {
  us_split_fields1 = o34 })) and
  (o36 = ((merge__split_fields6).rec__step_function__step_function_t__step[im2 <- o35]))) and
  (o37 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields6).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o36 })) and (temp___394 = {
  us_split_fields3 = o37 })) and ((result9 = { us_split_fields__content1 =
  merge__split_fields6 }) and
  (merge__split_fields7 = (temp___394).us_split_fields3))) and
  ((((i22 <  to_rep1(sfun2)) and ((i23 = (i22 + 1)) and
  ((scan_sfun23 = true) <-> (scan_sfun22 = true)))) or
  ((not (i22 <  to_rep1(sfun2))) and ((i23 = i22) and
  (not (scan_sfun23 = true))))) and in_range2(i23)))) and
  ((scan_sfun14 = scan_sfun12) and (i14 = i12)))) or
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (((((((((to_rep2(o38) = to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (o39 = { rec__step_function__delimiter_entry__delimiter = o38;
  rec__step_function__delimiter_entry__value =
  ((((merge__split_fields3).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__value
  })) and (o40 = { us_split_fields1 = o39 })) and
  (o41 = ((merge__split_fields3).rec__step_function__step_function_t__step[im2 <- o40]))) and
  (o42 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields3).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o41 })) and (temp___372 = {
  us_split_fields3 = o42 })) and ((result10 = { us_split_fields__content1 =
  merge__split_fields3 }) and
  (merge__split_fields8 = (temp___372).us_split_fields3))) and
  (((((((((((o44 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2(((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o44) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o44,
   to_rep((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o44,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  (((o43 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2(((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o43) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o43,
   to_rep((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o43,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  ((o45 = min1(o43, o44)) and (tqtisFinite(o45) and ((le(o43, o44) and
  eq(o45, o43)) or ((not le(o43, o44)) and eq(o45, o44))))))) and
  (to_rep(o46) = o45)) and (o47 = {
  rec__step_function__delimiter_entry__delimiter =
  ((((merge__split_fields8).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter;
  rec__step_function__delimiter_entry__value = o46 })) and (o48 = {
  us_split_fields1 = o47 })) and
  (o49 = ((merge__split_fields8).rec__step_function__step_function_t__step[im2 <- o48]))) and
  (o50 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields8).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o49 })) and (temp___379 = {
  us_split_fields3 = o50 })) and ((result11 = { us_split_fields__content1 =
  merge__split_fields8 }) and
  (merge__split_fields9 = (temp___379).us_split_fields3))) and
  (((((i12 <  to_rep1(sfun1)) and ((i14 = (i12 + 1)) and
  ((scan_sfun14 = true) <-> (scan_sfun12 = true)))) or
  ((not (i12 <  to_rep1(sfun1))) and ((i14 = i12) and
  (not (scan_sfun14 = true))))) and in_range2(i14)) and
  ((((i22 <  to_rep1(sfun2)) and ((i24 = (i22 + 1)) and
  ((scan_sfun24 = true) <-> (scan_sfun22 = true)))) or
  ((not (i22 <  to_rep1(sfun2))) and ((i24 = i22) and
  (not (scan_sfun24 = true))))) and in_range2(i24))))) and
  ((scan_sfun23 = scan_sfun24) and ((i23 = i24) and
  (merge__split_fields7 = merge__split_fields9)))))) and
  ((scan_sfun13 = scan_sfun14) and ((i13 = i14) and
  (merge__split_fields5 = merge__split_fields7))))))) or
  ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) and
  ((((scan_sfun12 = true) and
  (((((((((to_rep2(o51) = to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (o52 = { rec__step_function__delimiter_entry__delimiter = o51;
  rec__step_function__delimiter_entry__value =
  ((((merge__split_fields3).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__value
  })) and (o53 = { us_split_fields1 = o52 })) and
  (o54 = ((merge__split_fields3).rec__step_function__step_function_t__step[im2 <- o53]))) and
  (o55 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields3).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o54 })) and (temp___359 = {
  us_split_fields3 = o55 })) and ((result12 = { us_split_fields__content1 =
  merge__split_fields3 }) and
  (merge__split_fields10 = (temp___359).us_split_fields3))) and
  (((((((((((o57 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2(((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o57) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o57,
   to_rep((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o57,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  (((o56 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2(((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o56) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o56,
   to_rep((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o56,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  ((o58 = min1(o56, o57)) and (tqtisFinite(o58) and ((le(o56, o57) and
  eq(o58, o56)) or ((not le(o56, o57)) and eq(o58, o57))))))) and
  (to_rep(o59) = o58)) and (o60 = {
  rec__step_function__delimiter_entry__delimiter =
  ((((merge__split_fields10).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter;
  rec__step_function__delimiter_entry__value = o59 })) and (o61 = {
  us_split_fields1 = o60 })) and
  (o62 = ((merge__split_fields10).rec__step_function__step_function_t__step[im2 <- o61]))) and
  (o63 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields10).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o62 })) and (temp___366 = {
  us_split_fields3 = o63 })) and ((result13 = { us_split_fields__content1 =
  merge__split_fields10 }) and
  (merge__split_fields11 = (temp___366).us_split_fields3))) and
  ((((i12 <  to_rep1(sfun1)) and ((i15 = (i12 + 1)) and
  ((scan_sfun15 = true) <-> (scan_sfun12 = true)))) or
  ((not (i12 <  to_rep1(sfun1))) and ((i15 = i12) and
  (not (scan_sfun15 = true))))) and in_range2(i15)))) and
  ((scan_sfun25 = scan_sfun22) and (i25 = i22)))) or
  ((not (scan_sfun12 = true)) and
  (((((((((to_rep2(o64) = to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (o65 = { rec__step_function__delimiter_entry__delimiter = o64;
  rec__step_function__delimiter_entry__value =
  ((((merge__split_fields3).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__value
  })) and (o66 = { us_split_fields1 = o65 })) and
  (o67 = ((merge__split_fields3).rec__step_function__step_function_t__step[im2 <- o66]))) and
  (o68 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields3).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o67 })) and (temp___346 = {
  us_split_fields3 = o68 })) and ((result14 = { us_split_fields__content1 =
  merge__split_fields3 }) and
  (merge__split_fields12 = (temp___346).us_split_fields3))) and
  (((((((((((o70 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2(((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o70) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o70,
   to_rep((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o70,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  (((o69 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2(((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o69) and
  ((exists i3:int. (((0 <= i3) and (i3 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2(((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i3 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o69,
   to_rep((((sfun11[i3])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2(((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o69,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  ((o71 = min1(o69, o70)) and (tqtisFinite(o71) and ((le(o69, o70) and
  eq(o71, o69)) or ((not le(o69, o70)) and eq(o71, o70))))))) and
  (to_rep(o72) = o71)) and (o73 = {
  rec__step_function__delimiter_entry__delimiter =
  ((((merge__split_fields12).rec__step_function__step_function_t__step[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter;
  rec__step_function__delimiter_entry__value = o72 })) and (o74 = {
  us_split_fields1 = o73 })) and
  (o75 = ((merge__split_fields12).rec__step_function__step_function_t__step[im2 <- o74]))) and
  (o76 = { rec__step_function__step_function_t__number_of_delimiters =
  (merge__split_fields12).rec__step_function__step_function_t__number_of_delimiters;
  rec__step_function__step_function_t__step = o75 })) and (temp___353 = {
  us_split_fields3 = o76 })) and ((result15 = { us_split_fields__content1 =
  merge__split_fields12 }) and
  (merge__split_fields13 = (temp___353).us_split_fields3))) and
  ((((i22 <  to_rep1(sfun2)) and ((i25 = (i22 + 1)) and
  ((scan_sfun25 = true) <-> (scan_sfun22 = true)))) or
  ((not (i22 <  to_rep1(sfun2))) and ((i25 = i22) and
  (not (scan_sfun25 = true))))) and in_range2(i25)))) and
  ((scan_sfun15 = scan_sfun12) and ((i15 = i12) and
  (merge__split_fields11 = merge__split_fields13)))))) and
  ((scan_sfun23 = scan_sfun25) and ((scan_sfun13 = scan_sfun15) and
  ((i23 = i25) and ((i13 = i15) and
  (merge__split_fields5 = merge__split_fields11)))))))) and (((im3 = {
  int__content = im2 }) and (im4 = im2)) and (not (match_bool(scan_sfun13,
  true, scan_sfun23) = true))))))))))))) and (((scan_sfun26 = {
  bool__content = scan_sfun23 }) and ((scan_sfun16 = { bool__content =
  scan_sfun13 }) and ((im5 = im3) and ((i26 = { int__content = i23 }) and
  ((i16 = { int__content = i13 }) and (merge__split_fields14 = {
  us_split_fields__content1 = merge__split_fields5 })))))) and
  ((scan_sfun27 = scan_sfun23) and ((scan_sfun17 = scan_sfun13) and
  ((im6 = im4) and ((i27 = i23) and ((i17 = i13) and
  (merge__split_fields15 = merge__split_fields5)))))))) and
  (((scan_sfun28 = scan_sfun26) and ((scan_sfun18 = scan_sfun16) and
  ((im7 = im5) and ((i28 = i26) and ((i18 = i16) and
  (merge__split_fields16 = merge__split_fields14)))))) and
  ((scan_sfun29 = scan_sfun27) and ((scan_sfun19 = scan_sfun17) and
  ((im8 = im6) and ((i29 = i27) and ((i19 = i17) and
  (merge__split_fields17 = merge__split_fields15)))))))) and
  ((((to_rep1(o77) = (im7).int__content) and (o78 = {
  rec__step_function__step_function_t__number_of_delimiters = o77;
  rec__step_function__step_function_t__step =
  ((merge__split_fields16).us_split_fields__content1).rec__step_function__step_function_t__step
  })) and (temp___478 = { us_split_fields3 = o78 })) and
  ((result16 = merge__split_fields16) and
  (merge__split_fields18 = (temp___478).us_split_fields3)))))))))))) and
  (((scan_sfun210 = scan_sfun28) and ((scan_sfun110 = scan_sfun18) and
  ((im9 = im7) and ((i210 = i28) and ((i110 = i18) and
  (merge__split_fields19 = { us_split_fields__content1 =
  merge__split_fields18 })))))) and ((scan_sfun211 = scan_sfun29) and
  ((scan_sfun111 = scan_sfun19) and ((im10 = im8) and ((i211 = i29) and
  ((i111 = i19) and (merge__split_fields20 = merge__split_fields18)))))))) ->
  (((o85 = true) <->
  (forall i3:int. (((0 <= i3) and
  (i3 <= to_rep1(((merge__split_fields19).us_split_fields__content1).rec__step_function__step_function_t__number_of_delimiters))) ->
  eq(to_rep((((((merge__split_fields19).us_split_fields__content1).rec__step_function__step_function_t__step[i3])).us_split_fields1).rec__step_function__delimiter_entry__value),
  min1(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2((((((merge__split_fields19).us_split_fields__content1).rec__step_function__step_function_t__step[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)),
  get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2((((((merge__split_fields19).us_split_fields__content1).rec__step_function__step_function_t__step[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))))) ->
  (((o84 = true) <->
  (forall i3:int. (((0 <= i3) and (i3 <= to_rep1(sfun2))) ->
  (exists j1:int. (((0 <= j1) and
  (j1 <= to_rep1(((merge__split_fields19).us_split_fields__content1).rec__step_function__step_function_t__number_of_delimiters))) and
  (to_rep2((((((merge__split_fields19).us_split_fields__content1).rec__step_function__step_function_t__step[j1])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2((((sfun21[i3])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))))) ->
  (((0 <= i) and (i <= to_rep1(sfun1))) -> (((0 <= j) and
  (j <= to_rep1(((merge__split_fields19).us_split_fields__content1).rec__step_function__step_function_t__number_of_delimiters))) ->
  ((((((((0 <= i) and (i <= 10)) and (o79 = i)) and
  (o80 = (sfun11[o79]))) and (o81 = (o80).us_split_fields1)) and
  (o82 = (o81).rec__step_function__delimiter_entry__delimiter)) and
  (o83 = to_rep2(o82))) -> (0 <= j)))))))))
