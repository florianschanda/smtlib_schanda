(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort float 0)
(declare-fun user_eq4 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)
(declare-const dummy4 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(define-fun dynamic_invariant ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(declare-fun sin1 (Float32) Float32)
(declare-fun sin__function_guard (Float32 Float32) Bool)
(assert (forall ((x Float32)) (! (=> (dynamic_invariant x true true true true) (let ((result (sin1 x))) (and (and (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) result) (fp.leq result (fp #b0 #b01111111 #b00000000000000000000000))) (=> (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000)) (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000)))) (dynamic_invariant result true false true true)))) :pattern ((sin1 x)))))
(declare-fun cos1 (Float32) Float32)
(declare-fun cos__function_guard (Float32 Float32) Bool)
(assert (forall ((x Float32)) (! (=> (dynamic_invariant x true true true true) (let ((result (cos1 x))) (and (and (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) result) (fp.leq result (fp #b0 #b01111111 #b00000000000000000000000))) (=> (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000)) (fp.eq result (fp #b0 #b01111111 #b00000000000000000000000)))) (dynamic_invariant result true false true true)))) :pattern ((cos1 x)))))
(declare-fun arctan1 (Float32 Float32) Float32)
(declare-fun arctan__function_guard (Float32 Float32 Float32) Bool)
(assert (forall ((y Float32) (x Float32)) (! (=> (and (and (dynamic_invariant y true true true true) (dynamic_invariant x true true true true)) (or (not (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))) (not (fp.eq y (fp #b0 #b00000000 #b00000000000000000000000))))) (let ((result (arctan1 y x))) (and (=> (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.eq y (fp #b0 #b00000000 #b00000000000000000000000))) (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000))) (dynamic_invariant result true false true true)))) :pattern ((arctan1 y x)))))
(declare-sort normalized2pi 0)
(define-fun in_range4 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))
(declare-fun user_eq5 (normalized2pi normalized2pi) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)
(declare-const dummy5 normalized2pi)
(declare-datatypes () ((normalized2pi__ref (mk_normalized2pi__ref (normalized2pi__content normalized2pi)))))
(define-fun normalized2pi__ref___projection ((a normalized2pi__ref)) normalized2pi (normalized2pi__content a))
(declare-fun to_rep2 (normalized2pi) Float32)
(declare-fun of_rep2 (Float32) normalized2pi)
(assert (forall ((x normalized2pi)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x normalized2pi)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Float32)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__spaces__angles__angle__theta normalized2pi)))))
(define-fun us_split_fields_Theta__projection ((a us_split_fields)) normalized2pi (rec__spaces__angles__angle__theta a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (= (to_rep2 (rec__spaces__angles__angle__theta (us_split_fields1 a))) (to_rep2 (rec__spaces__angles__angle__theta (us_split_fields1 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const spaces__angles__angle__theta__first__bit Int)
(declare-const spaces__angles__angle__theta__last__bit Int)
(declare-const spaces__angles__angle__theta__position Int)
(assert (<= 0 spaces__angles__angle__theta__first__bit))
(assert (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))
(assert (<= 0 spaces__angles__angle__theta__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((angle__ref (mk_angle__ref (angle__content us_rep)))))
(define-fun angle__ref___projection ((a angle__ref)) us_rep (angle__content a))
(declare-fun aldiff (us_rep us_rep) Float32)
(declare-fun aldiff__function_guard (Float32 us_rep us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-fun print (us_rep) us_t)
(declare-fun print__function_guard (us_t us_rep) Bool)
(declare-sort nonnegative_float 0)
(define-fun in_range5 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun user_eq7 (nonnegative_float nonnegative_float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)
(declare-const dummy7 nonnegative_float)
(declare-datatypes () ((nonnegative_float__ref (mk_nonnegative_float__ref (nonnegative_float__content nonnegative_float)))))
(define-fun nonnegative_float__ref___projection ((a nonnegative_float__ref)) nonnegative_float (nonnegative_float__content a))
(declare-fun to_rep3 (nonnegative_float) Float32)
(declare-fun of_rep3 (Float32) nonnegative_float)
(assert (forall ((x nonnegative_float)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x nonnegative_float)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Float32)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__algorithm__laser_scan_data__first nonnegative_float) (rec__algorithm__laser_scan_data__second us_rep)))))
(define-fun us_split_fields_first__projection ((a us_split_fields2)) nonnegative_float (rec__algorithm__laser_scan_data__first a))
(define-fun us_split_fields_second__projection ((a us_split_fields2)) us_rep (rec__algorithm__laser_scan_data__second a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___16__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep3 (rec__algorithm__laser_scan_data__first (us_split_fields3 a))) (to_rep3 (rec__algorithm__laser_scan_data__first (us_split_fields3 b)))) (= (bool_eq2 (rec__algorithm__laser_scan_data__second (us_split_fields3 a)) (rec__algorithm__laser_scan_data__second (us_split_fields3 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const algorithm__laser_scan_data__first__first__bit Int)
(declare-const algorithm__laser_scan_data__first__last__bit Int)
(declare-const algorithm__laser_scan_data__first__position Int)
(assert (<= 0 algorithm__laser_scan_data__first__first__bit))
(assert (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))
(assert (<= 0 algorithm__laser_scan_data__first__position))
(declare-const algorithm__laser_scan_data__second__first__bit Int)
(declare-const algorithm__laser_scan_data__second__last__bit Int)
(declare-const algorithm__laser_scan_data__second__position Int)
(assert (<= 0 algorithm__laser_scan_data__second__first__bit))
(assert (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))
(assert (<= 0 algorithm__laser_scan_data__second__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((laser_scan_data__ref (mk_laser_scan_data__ref (laser_scan_data__content us_rep1)))))
(define-fun laser_scan_data__ref___projection ((a laser_scan_data__ref)) us_rep1 (laser_scan_data__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))
(assert (forall ((a (Array Int us_rep1))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int us_rep1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int us_rep1)) (a__first Int) (a__last Int) (b (Array Int us_rep1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq3 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true)))) true false))
(assert (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq3 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true))))))))
(declare-const scans (Array Int us_rep1))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const testbearing us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const width Float32)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const forwardlength Float32)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const bdorearcheck Bool)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const deltaangle Float32)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-fun temp___String_Literal_854 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_854 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_854 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 3)) 70)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 4)) 105)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 6)) 116)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 7)) 101)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 8)) 114)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 9)) 58)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 11)) 111)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 12)) 98)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 13)) 115)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 14)) 116)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 15)) 97)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 16)) 99)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 17)) 108)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 18)) 101)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 19)) 32)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 20)) 97)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 21)) 116)) (= (to_rep (select (temp___String_Literal_854 us_void_param) 22)) 32)) :pattern ((temp___String_Literal_854 us_void_param)))))
(declare-fun temp___String_Literal_855 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_855 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_855 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 5)) 102)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 6)) 114)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 7)) 111)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 8)) 110)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 9)) 116)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 11)) 114)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 12)) 101)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 13)) 99)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 14)) 116)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 15)) 97)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 16)) 110)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 17)) 103)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 18)) 108)) (= (to_rep (select (temp___String_Literal_855 us_void_param) 19)) 101)) :pattern ((temp___String_Literal_855 us_void_param)))))
(declare-fun temp___String_Literal_856 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_856 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_856 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 3)) 70)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 4)) 105)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 6)) 116)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 7)) 101)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 8)) 114)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 9)) 58)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 11)) 32)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 12)) 111)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 13)) 98)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 14)) 115)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 15)) 116)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 16)) 97)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 17)) 99)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 18)) 108)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 19)) 101)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 20)) 32)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 21)) 97)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 22)) 116)) (= (to_rep (select (temp___String_Literal_856 us_void_param) 23)) 32)) :pattern ((temp___String_Literal_856 us_void_param)))))
(declare-fun temp___String_Literal_857 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_857 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_857 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 5)) 114)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 6)) 101)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 7)) 97)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 8)) 114)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 10)) 115)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 11)) 101)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 12)) 109)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 13)) 105)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 14)) 45)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 15)) 99)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 16)) 105)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 17)) 114)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 18)) 99)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 19)) 108)) (= (to_rep (select (temp___String_Literal_857 us_void_param) 20)) 101)) :pattern ((temp___String_Literal_857 us_void_param)))))
(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_170 Float32) (temp___is_init_166 Bool) (temp___skip_constant_167 Bool) (temp___do_toplevel_168 Bool) (temp___do_typ_inv_169 Bool)) Bool (=> (or (= temp___is_init_166 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (in_range5 temp___expr_170)))
(define-fun dynamic_invariant6 ((temp___expr_198 Float32) (temp___is_init_194 Bool) (temp___skip_constant_195 Bool) (temp___do_toplevel_196 Bool) (temp___do_typ_inv_197 Bool)) Bool (=> (or (= temp___is_init_194 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000001 #b10010010000111111011011))) (in_range4 temp___expr_198)))
(declare-const i Int)
(declare-const algorithm__isfilterclear__B_2__deltaangle__assume Float32)
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const result Int)
(declare-const i1 Int)
(declare-const i2 Int)
(declare-const d Float32)
(declare-const result1 Bool)
(assert (fp.isFinite32 width))
(assert (fp.isFinite32 forwardlength))
(assert (= result i))
(assert (= i1 1))
(assert (<= 1 i1))
(assert (<= i1 1000))
(assert (and (<= 1 i2) (<= i2 1000)))
(assert (and (= algorithm__isfilterclear__B_2__deltaangle__assume (aldiff (rec__algorithm__laser_scan_data__second (us_split_fields3 (select scans i2))) testbearing)) (and (fp.isFinite32 algorithm__isfilterclear__B_2__deltaangle__assume) (and (fp.lt (fp.neg (fp #b0 #b10000000 #b10010010000111111011011)) algorithm__isfilterclear__B_2__deltaangle__assume) (fp.leq algorithm__isfilterclear__B_2__deltaangle__assume (fp #b0 #b10000000 #b10010010000111111011011))))))
(assert (= algorithm__isfilterclear__B_2__deltaangle__assume deltaangle))
(assert (fp.isFinite32 deltaangle))
(assert (not (fp.lt (fp #b0 #b01111111 #b10010010000111111011011) (fp.abs deltaangle))))
(assert (or (not (fp.eq width (fp #b0 #b00000000 #b00000000000000000000000))) (not (fp.eq forwardlength (fp #b0 #b00000000 #b00000000000000000000000)))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 d)))
(assert (and (= o (arctan1 (fp.div RNE (fp.abs width) (fp #b0 #b10000000 #b00000000000000000000000)) (fp.abs forwardlength))) (and (fp.isFinite32 o) (=> (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (fp.abs forwardlength)) (fp.eq (fp.div RNE (fp.abs width) (fp #b0 #b10000000 #b00000000000000000000000)) (fp #b0 #b00000000 #b00000000000000000000000))) (fp.eq o (fp #b0 #b00000000 #b00000000000000000000000))))))
(assert (= result1 (ite (fp.lt (fp.abs deltaangle) o) true false)))
(assert (= result1 true))
(assert (and (= o1 (cos1 deltaangle)) (and (fp.isFinite32 o1) (and (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) o1) (fp.leq o1 (fp #b0 #b01111111 #b00000000000000000000000))) (=> (fp.eq deltaangle (fp #b0 #b00000000 #b00000000000000000000000)) (fp.eq o1 (fp #b0 #b01111111 #b00000000000000000000000)))))))
(assert (not (not (fp.isZero o1))))
(check-sat)
(exit)
