(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((real_of_int(truncate(x)) <= x) and
  (x <  real_of_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((real_of_int((truncate(x) - 1)) <  x) and
  (x <= real_of_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= real_of_int(truncate(x))) and
  (real_of_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(real_of_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((real_of_int(floor(x)) <= x) and
  (x <  real_of_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((real_of_int((ceil(x) - 1)) <  x) and
  (x <= real_of_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t

logic add : fpa_rounding_mode, t, t -> t

logic sub : fpa_rounding_mode, t, t -> t

logic mul : fpa_rounding_mode, t, t -> t

logic div : fpa_rounding_mode, t, t -> t

logic abs : t -> t

logic neg : t -> t

logic fma : fpa_rounding_mode, t, t, t -> t

logic sqrt : fpa_rounding_mode, t -> t

logic roundToIntegral : fpa_rounding_mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : fpa_rounding_mode, int -> t

logic to_int : fpa_rounding_mode, t -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = real_of_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) ->
  in_range(float32(m,x))))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom eq_special :
  (forall x:t. forall y:t. (eq(x, y) -> (is_not_nan(x) and (is_not_nan(y) and
  ((tqtisFinite(x) and tqtisFinite(y)) or (is_infinite(x) and
  (is_infinite(y) and same_sign(x, y))))))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom le_special :
  (forall x:t. forall y:t [le(x, y)]. (le(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and is_not_nan(y)) or
  (is_not_nan(x) and is_plus_infinity(y))))))

axiom lt_special :
  (forall x:t. forall y:t [lt(x, y)]. (lt(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and (is_not_nan(y) and
  (not is_minus_infinity(y)))) or (is_not_nan(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and
  ((m = Down) -> ((is_positive(x) -> (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127))) and ((not is_positive(x)) ->
  is_infinite(x))))) and ((m = ToZero) -> ((is_positive(x) ->
  (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) -> (tqtisFinite(add(m, x,
  y)) and (tqtreal(add(m, x, y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) -> (tqtisFinite(sub(m, x,
  y)) and (tqtreal(sub(m, x, y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) -> (tqtisFinite(mul(m, x,
  y)) and (tqtreal(mul(m, x, y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x,
  y)) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> (tqtisFinite(abs(x)) and
  ((tqtreal(abs(x)) = abs_real(tqtreal(x))) and is_positive(abs(x))))))

axiom abs_finite_rev :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) -> (tqtisFinite(x) and
  (tqtreal(abs(x)) = abs_real(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(x) -> (tqtisFinite(y) -> (tqtisFinite(z) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) ->
  (tqtisFinite(fma(m, x, y, z)) and (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and
  (tqtisFinite(y) and tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and
  (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

axiom sqrt_finite :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(x) ->
  ((0.0 <= tqtreal(x)) -> (tqtisFinite(sqrt(m, x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom add_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(add(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(add(m, x, y)) and
  same_sign(add(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and diff_sign(x, y))) ->
  is_nan(add(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) + tqtreal(y))))))) ->
  (same_sign_real(add(m, x, y), (tqtreal(x) + tqtreal(y))) and
  overflow_value(m, add(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((same_sign(x, y) -> same_sign(add(m, x, y), x)) and
  ((not same_sign(x, y)) -> sign_zero_result(m, add(m, x, y))))))))))))

axiom sub_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(sub(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(sub(m, x, y)) and
  diff_sign(sub(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  is_nan(sub(m, x, y))) and (((is_infinite(x) and (is_infinite(y) and
  diff_sign(x, y))) -> (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y),
  x))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) - tqtreal(y))))))) ->
  (same_sign_real(sub(m, x, y), (tqtreal(x) - tqtreal(y))) and
  overflow_value(m, sub(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((diff_sign(x, y) -> same_sign(sub(m, x, y), x)) and
  ((not diff_sign(x, y)) -> sign_zero_result(m, sub(m, x, y))))))))))))

axiom mul_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(mul(m, x, y))) and (((is_zero(x) and
  is_infinite(y)) -> is_nan(mul(m, x, y))) and (((tqtisFinite(x) and
  (is_infinite(y) and (not is_zero(x)))) -> is_infinite(mul(m, x, y))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(mul(m, x, y))) and
  (((is_infinite(x) and (tqtisFinite(y) and (not is_zero(y)))) ->
  is_infinite(mul(m, x, y))) and (((is_infinite(x) and is_infinite(y)) ->
  is_infinite(mul(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) * tqtreal(y))))))) -> overflow_value(m,
  mul(m, x, y))) and ((not is_nan(mul(m, x, y))) -> product_sign(mul(m, x,
  y), x, y))))))))))

axiom div_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> is_zero(div(m, x, y))) and
  (((is_infinite(x) and tqtisFinite(y)) -> is_infinite(div(m, x, y))) and
  (((is_infinite(x) and is_infinite(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  (not in_range(float32(m,(tqtreal(x) / tqtreal(y)))))))) ->
  overflow_value(m, div(m, x, y))) and (((tqtisFinite(x) and (is_zero(y) and
  (not is_zero(x)))) -> is_infinite(div(m, x, y))) and (((is_zero(x) and
  is_zero(y)) -> is_nan(div(m, x, y))) and ((not is_nan(div(m, x, y))) ->
  product_sign(div(m, x, y), x, y))))))))))

axiom neg_special :
  (forall x:t [neg(x)]. ((is_nan(x) -> is_nan(neg(x))) and
  ((is_infinite(x) -> is_infinite(neg(x))) and ((not is_nan(x)) ->
  diff_sign(x, neg(x))))))

axiom abs_special :
  (forall x:t [abs(x)]. ((is_nan(x) -> is_nan(abs(x))) and
  ((is_infinite(x) -> is_infinite(abs(x))) and ((not is_nan(x)) ->
  is_positive(abs(x))))))

axiom fma_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (((is_nan(x) or (is_nan(y) or is_nan(z))) -> is_nan(fma(m, x, y,
  z))) and (((is_zero(x) and is_infinite(y)) -> is_nan(fma(m, x, y, z))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(fma(m, x, y, z))) and
  (((tqtisFinite(x) and ((not is_zero(x)) and (is_infinite(y) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((tqtisFinite(x) and ((not is_zero(x)) and
  (is_infinite(y) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((is_infinite(x) and (tqtisFinite(y) and
  ((not is_zero(y)) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (is_infinite(y) and tqtisFinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and product_sign(fma(m, x, y, z), x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and is_infinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  (((is_infinite(x) and (is_infinite(y) and is_infinite(z))) ->
  ((product_sign(z, x, y) -> (is_infinite(fma(m, x, y, z)) and
  same_sign(fma(m, x, y, z), z))) and ((not product_sign(z, x, y)) ->
  is_nan(fma(m, x, y, z))))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (tqtisFinite(z) and
  (not in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))) ->
  (same_sign_real(fma(m, x, y, z),
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) and overflow_value(m, fma(m, x,
  y, z)))) and ((tqtisFinite(x) and (tqtisFinite(y) and tqtisFinite(z))) ->
  ((product_sign(z, x, y) -> same_sign(fma(m, x, y, z), z)) and
  ((not product_sign(z, x, y)) ->
  ((((tqtreal(x) * tqtreal(y)) + tqtreal(z)) = 0.0) -> (((m = Down) ->
  is_negative(fma(m, x, y, z))) and ((not (m = Down)) -> is_positive(fma(m,
  x, y, z))))))))))))))))))))

axiom sqrt_special :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. ((is_nan(x) ->
  is_nan(sqrt(m, x))) and ((is_plus_infinity(x) -> is_plus_infinity(sqrt(m,
  x))) and ((is_minus_infinity(x) -> is_nan(sqrt(m, x))) and
  (((tqtisFinite(x) and (tqtreal(x) <  0.0)) -> is_nan(sqrt(m, x))) and
  ((is_zero(x) -> same_sign(sqrt(m, x), x)) and ((tqtisFinite(x) and
  (0.0 <  tqtreal(x))) -> is_positive(sqrt(m, x)))))))))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t. (tqtisFinite(i) -> ((le(i,
  neg(of_int(m, 16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Up, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Down, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t. (to_int(m, x) = to_int(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int(m, of_int(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) -> (to_int(m,
  neg(x)) = (-to_int(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (in_range(float32(NearestTiesToEven,x)) ->
  ((((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x)) and
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150)))))

axiom round_bound :
  (forall m:fpa_rounding_mode. forall x:real [float32(m,x)].
  (in_range(float32(m,x)) ->
  ((((x - (0x1.0p-23 * abs_real(x))) - 0x1.0p-149) <= float32(m,x)) and
  (float32(m,x) <= ((x + (0x1.0p-23 * abs_real(x))) + 0x1.0p-149)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(NearestTiesToAway, 1))

type t__ref = { t__content : t
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t1
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t1

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type float1

logic bool_eq9 : t, t -> bool

axiom bool_eq_def7 :
  (forall x:t. forall y:t [bool_eq9(x, y)]. ((eq(x, y) -> (bool_eq9(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq9(x, y) = false))))

logic user_eq5 : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic dummy6 : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

logic to_rep2 : float1 -> t

logic of_rep2 : t -> float1

axiom inversion_axiom2 :
  (forall x:float1 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:float1 [to_rep2(x)]. tqtisFinite(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:t [to_rep2(of_rep2(x))]. (tqtisFinite(x) ->
  (to_rep2(of_rep2(x)) = x)))

type positive_float

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 0.0e-1))

logic fliteral2 : t

axiom fliteral_axiom2 : (tqtisFinite(fliteral2) and
  (tqtreal(fliteral2) = 340282346638528859811704183484516925440.0))

predicate in_range6(x: t) = (tqtisFinite(x) and (le(fliteral1, x) and le(x,
  fliteral2)))

logic bool_eq10 : t, t -> bool

axiom bool_eq_def8 :
  (forall x:t. forall y:t [bool_eq10(x, y)]. ((eq(x, y) -> (bool_eq10(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq10(x, y) = false))))

logic user_eq6 : positive_float, positive_float -> bool

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic dummy7 : positive_float

type positive_float__ref = { positive_float__content : positive_float
}

function positive_float__ref___projection(a: positive_float__ref) : positive_float =
  (a).positive_float__content

logic to_rep3 : positive_float -> t

logic of_rep3 : t -> positive_float

axiom inversion_axiom3 :
  (forall x:positive_float [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:positive_float [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:t [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type nonnegative_float

predicate in_range7(x: t) = (tqtisFinite(x) and (le(fliteral1, x) and le(x,
  fliteral2)))

logic bool_eq11 : t, t -> bool

axiom bool_eq_def9 :
  (forall x:t. forall y:t [bool_eq11(x, y)]. ((eq(x, y) -> (bool_eq11(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq11(x, y) = false))))

logic user_eq7 : nonnegative_float, nonnegative_float -> bool

logic attr__ATTRIBUTE_IMAGE7 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t

logic dummy8 : nonnegative_float

type nonnegative_float__ref = { nonnegative_float__content :
nonnegative_float
}

function nonnegative_float__ref___projection(a: nonnegative_float__ref) : nonnegative_float =
  (a).nonnegative_float__content

logic to_rep4 : nonnegative_float -> t

logic of_rep4 : t -> nonnegative_float

axiom inversion_axiom4 :
  (forall x:nonnegative_float [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:nonnegative_float [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:t [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic sqrt1 : t -> t

logic sqrt__function_guard : t, t -> prop

axiom sqrt__post_axiom :
  (forall x:t [sqrt1(x)]. ((tqtisFinite(x) and le(fliteral1, x)) ->
  ((le(fliteral1, sqrt1(x)) and ((eq(x, fliteral1) -> eq(sqrt1(x),
  fliteral1)) and (eq(x, fliteral) -> eq(sqrt1(x), fliteral)))) and
  tqtisFinite(sqrt1(x)))))

logic arctan : t, t -> t

logic arctan__function_guard : t, t, t -> prop

axiom arctan__post_axiom :
  (forall y:t. forall x:t [arctan(y, x)]. (((tqtisFinite(y) and
  tqtisFinite(x)) and (neq(x, fliteral1) or neq(y, fliteral1))) ->
  (((lt(fliteral1, x) and eq(y, fliteral1)) -> eq(arctan(y, x),
  fliteral1)) and tqtisFinite(arctan(y, x)))))

type normalized2pi

logic fliteral3 : t

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 6.283185482025146484375))

predicate in_range8(x: t) = (tqtisFinite(x) and (le(fliteral1, x) and le(x,
  fliteral3)))

logic bool_eq12 : t, t -> bool

axiom bool_eq_def10 :
  (forall x:t. forall y:t [bool_eq12(x, y)]. ((eq(x, y) -> (bool_eq12(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq12(x, y) = false))))

logic user_eq8 : normalized2pi, normalized2pi -> bool

logic attr__ATTRIBUTE_IMAGE8 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> t

logic dummy9 : normalized2pi

type normalized2pi__ref = { normalized2pi__content : normalized2pi
}

function normalized2pi__ref___projection(a: normalized2pi__ref) : normalized2pi =
  (a).normalized2pi__content

logic to_rep5 : normalized2pi -> t

logic of_rep5 : t -> normalized2pi

axiom inversion_axiom5 :
  (forall x:normalized2pi [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:normalized2pi [to_rep5(x)]. in_range8(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:t [to_rep5(of_rep5(x))]. (in_range8(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields = { rec__spaces__angles__angle__theta : normalized2pi
}

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq13 : us_rep, us_rep -> bool

axiom bool_eq_def11 :
  (forall a:us_rep. forall b:us_rep [bool_eq13(a, b)].
  (((to_rep5(((a).us_split_fields1).rec__spaces__angles__angle__theta) = to_rep5(((b).us_split_fields1).rec__spaces__angles__angle__theta)) ->
  (bool_eq13(a, b) = true)) and
  ((not (to_rep5(((a).us_split_fields1).rec__spaces__angles__angle__theta) = to_rep5(((b).us_split_fields1).rec__spaces__angles__angle__theta))) ->
  (bool_eq13(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:normalized2pi. (0 <= object__size1({ us_split_fields1 = {
  rec__spaces__angles__angle__theta = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:normalized2pi. (0 <= object__alignment1({ us_split_fields1 = {
  rec__spaces__angles__angle__theta = a } })))

logic spaces__angles__angle__theta__first__bit : int

logic spaces__angles__angle__theta__last__bit : int

logic spaces__angles__angle__theta__position : int

axiom spaces__angles__angle__theta__first__bit_axiom :
  (0 <= spaces__angles__angle__theta__first__bit)

axiom spaces__angles__angle__theta__last__bit_axiom :
  (spaces__angles__angle__theta__first__bit <  spaces__angles__angle__theta__last__bit)

axiom spaces__angles__angle__theta__position_axiom :
  (0 <= spaces__angles__angle__theta__position)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy10 : normalized2pi

type angle__ref = { angle__content : us_rep
}

function angle__ref___projection(a: angle__ref) : us_rep = (a).angle__content

logic create : unit -> us_rep

logic create__function_guard : us_rep, unit -> prop

logic create__2 : t -> us_rep

logic create__2__function_guard : us_rep, t -> prop

logic oadd : us_rep, us_rep -> us_rep

logic oadd__function_guard : us_rep, us_rep, us_rep -> prop

logic osubtract : us_rep, us_rep -> us_rep

logic osubtract__function_guard : us_rep, us_rep, us_rep -> prop

logic dcast : us_rep -> t

logic dcast__function_guard : t, us_rep -> prop

logic dcastpi : us_rep -> t

logic dcastpi__function_guard : t, us_rep -> prop

logic aldiff : us_rep, us_rep -> t

logic aldiff__function_guard : t, us_rep, us_rep -> prop

logic ccwdiff : us_rep, us_rep -> t

logic ccwdiff__function_guard : t, us_rep, us_rep -> prop

logic cwdiff : us_rep, us_rep -> t

logic cwdiff__function_guard : t, us_rep, us_rep -> prop

logic almostequal : us_rep, us_rep, t -> bool

logic almostequal__function_guard : bool, us_rep, us_rep, t -> prop

logic ccwmean : us_rep, us_rep -> us_rep

logic ccwmean__function_guard : us_rep, us_rep, us_rep -> prop

logic cwmean : us_rep, us_rep -> us_rep

logic cwmean__function_guard : us_rep, us_rep, us_rep -> prop

logic print : us_rep -> us_t

logic print__function_guard : us_t, us_rep -> prop

type us_split_fields2 = { rec__spaces__positions__position__x : float1;
rec__spaces__positions__position__y : float1 }

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq14 : us_rep1, us_rep1 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq14(a, b)].
  ((((to_rep2(((a).us_split_fields3).rec__spaces__positions__position__x) = to_rep2(((b).us_split_fields3).rec__spaces__positions__position__x)) and
  (to_rep2(((a).us_split_fields3).rec__spaces__positions__position__y) = to_rep2(((b).us_split_fields3).rec__spaces__positions__position__y))) ->
  (bool_eq14(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields3).rec__spaces__positions__position__x) = to_rep2(((b).us_split_fields3).rec__spaces__positions__position__x)) and
  (to_rep2(((a).us_split_fields3).rec__spaces__positions__position__y) = to_rep2(((b).us_split_fields3).rec__spaces__positions__position__y)))) ->
  (bool_eq14(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:float1. forall a1:float1. (0 <= object__size2({
  us_split_fields3 = { rec__spaces__positions__position__x = a;
  rec__spaces__positions__position__y = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:float1. forall a1:float1. (0 <= object__alignment2({
  us_split_fields3 = { rec__spaces__positions__position__x = a;
  rec__spaces__positions__position__y = a1 } })))

logic spaces__positions__position__x__first__bit : int

logic spaces__positions__position__x__last__bit : int

logic spaces__positions__position__x__position : int

axiom spaces__positions__position__x__first__bit_axiom :
  (0 <= spaces__positions__position__x__first__bit)

axiom spaces__positions__position__x__last__bit_axiom :
  (spaces__positions__position__x__first__bit <  spaces__positions__position__x__last__bit)

axiom spaces__positions__position__x__position_axiom :
  (0 <= spaces__positions__position__x__position)

logic spaces__positions__position__y__first__bit : int

logic spaces__positions__position__y__last__bit : int

logic spaces__positions__position__y__position : int

axiom spaces__positions__position__y__first__bit_axiom :
  (0 <= spaces__positions__position__y__first__bit)

axiom spaces__positions__position__y__last__bit_axiom :
  (spaces__positions__position__y__first__bit <  spaces__positions__position__y__last__bit)

axiom spaces__positions__position__y__position_axiom :
  (0 <= spaces__positions__position__y__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy11 : float1

logic dummy12 : float1

type position__ref = { position__content : us_rep1
}

function position__ref___projection(a: position__ref) : us_rep1 =
  (a).position__content

logic zero_position : float1

logic zero_position1 : float1

logic attr__ATTRIBUTE_ADDRESS : int

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

logic create__4 : t, us_rep -> us_rep1

logic create__4__function_guard : us_rep1, t, us_rep -> prop

logic norm : us_rep1 -> t

logic norm__function_guard : t, us_rep1 -> prop

logic bearing : us_rep1 -> us_rep

logic bearing__function_guard : us_rep, us_rep1 -> prop

logic print1 : us_rep1 -> us_t

logic print__function_guard1 : us_t, us_rep1 -> prop

type us_split_fields4 = { rec__spaces__poses__pose__pos : us_rep1;
rec__spaces__poses__pose__ori : us_rep
}

function us_split_fields_pos__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__spaces__poses__pose__pos

function us_split_fields_ori__projection(a: us_split_fields4) : us_rep =
  (a).rec__spaces__poses__pose__ori

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq15 : us_rep2, us_rep2 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq15(a, b)].
  ((((bool_eq14(((a).us_split_fields5).rec__spaces__poses__pose__pos,
  ((b).us_split_fields5).rec__spaces__poses__pose__pos) = true) and
  (bool_eq13(((a).us_split_fields5).rec__spaces__poses__pose__ori,
  ((b).us_split_fields5).rec__spaces__poses__pose__ori) = true)) ->
  (bool_eq15(a, b) = true)) and
  ((not ((bool_eq14(((a).us_split_fields5).rec__spaces__poses__pose__pos,
  ((b).us_split_fields5).rec__spaces__poses__pose__pos) = true) and
  (bool_eq13(((a).us_split_fields5).rec__spaces__poses__pose__ori,
  ((b).us_split_fields5).rec__spaces__poses__pose__ori) = true))) ->
  (bool_eq15(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:float1. forall a1:float1. forall a2:normalized2pi.
  (0 <= object__size3({ us_split_fields5 = { rec__spaces__poses__pose__pos =
  { us_split_fields3 = { rec__spaces__positions__position__x = a;
  rec__spaces__positions__position__y = a1 } };
  rec__spaces__poses__pose__ori = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a2 } } } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:float1. forall a1:float1. forall a2:normalized2pi.
  (0 <= object__alignment3({ us_split_fields5 = {
  rec__spaces__poses__pose__pos = { us_split_fields3 = {
  rec__spaces__positions__position__x = a;
  rec__spaces__positions__position__y = a1 } };
  rec__spaces__poses__pose__ori = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a2 } } } })))

logic spaces__poses__pose__pos__first__bit : int

logic spaces__poses__pose__pos__last__bit : int

logic spaces__poses__pose__pos__position : int

axiom spaces__poses__pose__pos__first__bit_axiom :
  (0 <= spaces__poses__pose__pos__first__bit)

axiom spaces__poses__pose__pos__last__bit_axiom :
  (spaces__poses__pose__pos__first__bit <  spaces__poses__pose__pos__last__bit)

axiom spaces__poses__pose__pos__position_axiom :
  (0 <= spaces__poses__pose__pos__position)

logic spaces__poses__pose__ori__first__bit : int

logic spaces__poses__pose__ori__last__bit : int

logic spaces__poses__pose__ori__position : int

axiom spaces__poses__pose__ori__first__bit_axiom :
  (0 <= spaces__poses__pose__ori__first__bit)

axiom spaces__poses__pose__ori__last__bit_axiom :
  (spaces__poses__pose__ori__first__bit <  spaces__poses__pose__ori__last__bit)

axiom spaces__poses__pose__ori__position_axiom :
  (0 <= spaces__poses__pose__ori__position)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy13 : float1

logic dummy14 : float1

logic dummy15 : normalized2pi

type pose__ref = { pose__content : us_rep2
}

function pose__ref___projection(a: pose__ref) : us_rep2 = (a).pose__content

logic create1 : t, t, us_rep -> us_rep2

logic create__function_guard1 : us_rep2, t, t, us_rep -> prop

logic osubtract1 : us_rep2, us_rep2 -> us_rep2

logic osubtract__function_guard1 : us_rep2, us_rep2, us_rep2 -> prop

logic pos : us_rep2 -> us_rep1

logic pos__function_guard : us_rep1, us_rep2 -> prop

logic ori : us_rep2 -> us_rep

logic ori__function_guard : us_rep, us_rep2 -> prop

logic print2 : us_rep2 -> us_t

logic print__function_guard2 : us_t, us_rep2 -> prop

type laser_scan_id

predicate in_range9(x: int) = ((1 <= x) and (x <= 1000))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : laser_scan_id, laser_scan_id -> bool

logic dummy16 : laser_scan_id

type laser_scan_id__ref = { laser_scan_id__content : laser_scan_id
}

function laser_scan_id__ref___projection(a: laser_scan_id__ref) : laser_scan_id =
  (a).laser_scan_id__content

logic to_rep6 : natural -> int

logic of_rep6 : int -> natural

axiom inversion_axiom6 :
  (forall x:natural [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:natural [to_rep6(x)]. in_range5(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range5(x) ->
  (to_rep6(of_rep6(x)) = x)))

type unbounded_float

logic bool_eq17 : t, t -> bool

axiom bool_eq_def15 :
  (forall x:t. forall y:t [bool_eq17(x, y)]. ((eq(x, y) -> (bool_eq17(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq17(x, y) = false))))

logic user_eq13 : unbounded_float, unbounded_float -> bool

logic attr__ATTRIBUTE_IMAGE10 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> t

logic dummy17 : unbounded_float

type unbounded_float__ref = { unbounded_float__content : unbounded_float
}

function unbounded_float__ref___projection(a: unbounded_float__ref) : unbounded_float =
  (a).unbounded_float__content

logic to_rep7 : unbounded_float -> t

logic of_rep7 : t -> unbounded_float

axiom inversion_axiom7 :
  (forall x:unbounded_float [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:unbounded_float [to_rep7(x)]. tqtisFinite(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:t [to_rep7(of_rep7(x))]. (tqtisFinite(x) ->
  (to_rep7(of_rep7(x)) = x)))

type map__ref1 = { map__content1 : (int,nonnegative_float) farray
}

logic slide1 : (int,nonnegative_float) farray, int,
  int -> (int,nonnegative_float) farray

axiom slide_eq1 :
  (forall a:(int,nonnegative_float) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,nonnegative_float) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,nonnegative_float) farray, int, int,
  (int,nonnegative_float) farray, int, int -> (int,nonnegative_float) farray

axiom concat_def1 :
  (forall a:(int,nonnegative_float) farray.
  forall b:(int,nonnegative_float) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : nonnegative_float, int -> (int,nonnegative_float) farray

axiom singleton_def1 :
  (forall v:nonnegative_float.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq18 : (int,nonnegative_float) farray, int, int,
  (int,nonnegative_float) farray, int, int -> bool

axiom bool_eq_def16 :
  (forall a:(int,nonnegative_float) farray. forall a__first:int.
  forall a__last:int. forall b:(int,nonnegative_float) farray.
  forall b__first:int. forall b__last:int [bool_eq18(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep4((a[temp___idx_132])) = to_rep4((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep4((a[temp___idx_132])) = to_rep4((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,nonnegative_float) farray.
  forall b:(int,nonnegative_float) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq18(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep4((a[temp___idx_132])) = to_rep4((b[((b__first - a__first) + temp___idx_132)])))))))))

logic dummy18 : (int,nonnegative_float) farray

logic value__size4 : int

logic object__size4 : (int,nonnegative_float) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,nonnegative_float) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,nonnegative_float) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,nonnegative_float) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,nonnegative_float) farray.
  (0 <= object__component__size1(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,nonnegative_float) farray. (0 <= object__alignment4(a)))

logic user_eq14 : (int,nonnegative_float) farray,
  (int,nonnegative_float) farray -> bool

type option

predicate in_range10(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : option, option -> bool

logic dummy19 : option

type option__ref = { option__content : option
}

function option__ref___projection(a: option__ref) : option =
  (a).option__content

logic to_rep8 : option -> int

logic of_rep8 : int -> option

axiom inversion_axiom8 :
  (forall x:option [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 : (forall x:option [to_rep8(x)]. in_range10(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range10(x) ->
  (to_rep8(of_rep8(x)) = x)))

type us_split_discrs = { rec__robot_iface__speed_option__opt : option
}

function us_split_discrs___projection(a: us_split_discrs) : option =
  (a).rec__robot_iface__speed_option__opt

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields6 = { rec__robot_iface__speed_option__modulus : float1;
rec__robot_iface__speed_option__angle : float1 }

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs1 : us_split_discrs; us_split_fields7 :
us_split_fields6; attr__constrained : bool
}

function us_rep___4__projection(a: us_rep3) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___5__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function us_rep___6__projection(a: us_rep3) : bool = (a).attr__constrained

predicate robot_iface__speed_option__modulus__pred(a: us_rep3) =
  (to_rep8(((a).us_split_discrs1).rec__robot_iface__speed_option__opt) = 1)

predicate robot_iface__speed_option__angle__pred(a: us_rep3) =
  (to_rep8(((a).us_split_discrs1).rec__robot_iface__speed_option__opt) = 1)

logic bool_eq20 : us_rep3, us_rep3 -> bool

axiom bool_eq_def18 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq20(a, b)].
  ((((to_rep8(((a).us_split_discrs1).rec__robot_iface__speed_option__opt) = to_rep8(((b).us_split_discrs1).rec__robot_iface__speed_option__opt)) and
  ((robot_iface__speed_option__modulus__pred(a) ->
  (to_rep2(((a).us_split_fields7).rec__robot_iface__speed_option__modulus) = to_rep2(((b).us_split_fields7).rec__robot_iface__speed_option__modulus))) and
  (robot_iface__speed_option__angle__pred(a) ->
  (to_rep2(((a).us_split_fields7).rec__robot_iface__speed_option__angle) = to_rep2(((b).us_split_fields7).rec__robot_iface__speed_option__angle))))) ->
  (bool_eq20(a, b) = true)) and
  ((not ((to_rep8(((a).us_split_discrs1).rec__robot_iface__speed_option__opt) = to_rep8(((b).us_split_discrs1).rec__robot_iface__speed_option__opt)) and
  ((robot_iface__speed_option__modulus__pred(a) ->
  (to_rep2(((a).us_split_fields7).rec__robot_iface__speed_option__modulus) = to_rep2(((b).us_split_fields7).rec__robot_iface__speed_option__modulus))) and
  (robot_iface__speed_option__angle__pred(a) ->
  (to_rep2(((a).us_split_fields7).rec__robot_iface__speed_option__angle) = to_rep2(((b).us_split_fields7).rec__robot_iface__speed_option__angle)))))) ->
  (bool_eq20(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:option. forall a1:float1. forall a2:float1. forall a3:bool.
  (0 <= object__size5({ us_split_discrs1 = {
  rec__robot_iface__speed_option__opt = a }; us_split_fields7 = {
  rec__robot_iface__speed_option__modulus = a1;
  rec__robot_iface__speed_option__angle = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:option. forall a1:float1. forall a2:float1. forall a3:bool.
  (0 <= object__alignment5({ us_split_discrs1 = {
  rec__robot_iface__speed_option__opt = a }; us_split_fields7 = {
  rec__robot_iface__speed_option__modulus = a1;
  rec__robot_iface__speed_option__angle = a2 }; attr__constrained = a3 })))

logic robot_iface__speed_option__opt__first__bit : int

logic robot_iface__speed_option__opt__last__bit : int

logic robot_iface__speed_option__opt__position : int

axiom robot_iface__speed_option__opt__first__bit_axiom :
  (0 <= robot_iface__speed_option__opt__first__bit)

axiom robot_iface__speed_option__opt__last__bit_axiom :
  (robot_iface__speed_option__opt__first__bit <  robot_iface__speed_option__opt__last__bit)

axiom robot_iface__speed_option__opt__position_axiom :
  (0 <= robot_iface__speed_option__opt__position)

logic robot_iface__speed_option__modulus__first__bit : int

logic robot_iface__speed_option__modulus__last__bit : int

logic robot_iface__speed_option__modulus__position : int

axiom robot_iface__speed_option__modulus__first__bit_axiom :
  (0 <= robot_iface__speed_option__modulus__first__bit)

axiom robot_iface__speed_option__modulus__last__bit_axiom :
  (robot_iface__speed_option__modulus__first__bit <  robot_iface__speed_option__modulus__last__bit)

axiom robot_iface__speed_option__modulus__position_axiom :
  (0 <= robot_iface__speed_option__modulus__position)

logic robot_iface__speed_option__angle__first__bit : int

logic robot_iface__speed_option__angle__last__bit : int

logic robot_iface__speed_option__angle__position : int

axiom robot_iface__speed_option__angle__first__bit_axiom :
  (0 <= robot_iface__speed_option__angle__first__bit)

axiom robot_iface__speed_option__angle__last__bit_axiom :
  (robot_iface__speed_option__angle__first__bit <  robot_iface__speed_option__angle__last__bit)

axiom robot_iface__speed_option__angle__position_axiom :
  (0 <= robot_iface__speed_option__angle__position)

logic user_eq16 : us_rep3, us_rep3 -> bool

logic dummy20 : option

logic dummy21 : float1

logic dummy22 : float1

logic dummy23 : bool

type speed_option__ref = { speed_option__content : us_rep3
}

function speed_option__ref___projection(a: speed_option__ref) : us_rep3 =
  (a).speed_option__content

type us_split_fields8 = { rec__robot_iface__proxy__robot_radius :
positive_float; rec__robot_iface__proxy__min_gap_width : positive_float;
rec__robot_iface__proxy__obstacle_avoid_dist : positive_float;
rec__robot_iface__proxy__max_speed : positive_float;
rec__robot_iface__proxy__max_turn_rate : positive_float;
rec__robot_iface__proxy__goal_position_tol : nonnegative_float;
rec__robot_iface__proxy__goal_angle_tol : nonnegative_float;
rec__robot_iface__proxy__goalx : float1; rec__robot_iface__proxy__goaly :
float1; rec__robot_iface__proxy__goala : float1;
rec__robot_iface__proxy__scan_count : natural;
rec__robot_iface__proxy__scan_res : positive_float;
rec__robot_iface__proxy__max_range : positive_float;
rec__robot_iface__proxy__scans : (int,nonnegative_float) farray;
rec__robot_iface__proxy__x : unbounded_float; rec__robot_iface__proxy__y :
unbounded_float; rec__robot_iface__proxy__yaw : unbounded_float;
rec__robot_iface__proxy__speed : us_rep3;
rec__robot_iface__proxy__goal_reached : bool
}

function us_split_fields_scan_Count__projection(a: us_split_fields8) : natural =
  (a).rec__robot_iface__proxy__scan_count

function us_split_fields_scans__projection(a: us_split_fields8) : (int,nonnegative_float) farray =
  (a).rec__robot_iface__proxy__scans

function us_split_fields_speed__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__robot_iface__proxy__speed

function us_split_fields_goal_reached__projection(a: us_split_fields8) : bool =
  (a).rec__robot_iface__proxy__goal_reached

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___7__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq21 : us_rep4, us_rep4 -> bool

axiom bool_eq_def19 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq21(a, b)].
  (((((((((((((((((((((to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__robot_radius) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__robot_radius)) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__min_gap_width) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__min_gap_width))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__obstacle_avoid_dist) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__obstacle_avoid_dist))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__max_speed) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__max_speed))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__max_turn_rate) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__max_turn_rate))) and
  (to_rep4(((a).us_split_fields9).rec__robot_iface__proxy__goal_position_tol) = to_rep4(((b).us_split_fields9).rec__robot_iface__proxy__goal_position_tol))) and
  (to_rep4(((a).us_split_fields9).rec__robot_iface__proxy__goal_angle_tol) = to_rep4(((b).us_split_fields9).rec__robot_iface__proxy__goal_angle_tol))) and
  (to_rep2(((a).us_split_fields9).rec__robot_iface__proxy__goalx) = to_rep2(((b).us_split_fields9).rec__robot_iface__proxy__goalx))) and
  (to_rep2(((a).us_split_fields9).rec__robot_iface__proxy__goaly) = to_rep2(((b).us_split_fields9).rec__robot_iface__proxy__goaly))) and
  (to_rep2(((a).us_split_fields9).rec__robot_iface__proxy__goala) = to_rep2(((b).us_split_fields9).rec__robot_iface__proxy__goala))) and
  (to_rep6(((a).us_split_fields9).rec__robot_iface__proxy__scan_count) = to_rep6(((b).us_split_fields9).rec__robot_iface__proxy__scan_count))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__scan_res) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__scan_res))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__max_range) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__max_range))) and
  (bool_eq18(((a).us_split_fields9).rec__robot_iface__proxy__scans, 1, 1000,
  ((b).us_split_fields9).rec__robot_iface__proxy__scans, 1,
  1000) = true)) and
  (to_rep7(((a).us_split_fields9).rec__robot_iface__proxy__x) = to_rep7(((b).us_split_fields9).rec__robot_iface__proxy__x))) and
  (to_rep7(((a).us_split_fields9).rec__robot_iface__proxy__y) = to_rep7(((b).us_split_fields9).rec__robot_iface__proxy__y))) and
  (to_rep7(((a).us_split_fields9).rec__robot_iface__proxy__yaw) = to_rep7(((b).us_split_fields9).rec__robot_iface__proxy__yaw))) and
  (bool_eq20(((a).us_split_fields9).rec__robot_iface__proxy__speed,
  ((b).us_split_fields9).rec__robot_iface__proxy__speed) = true)) and
  (((a).us_split_fields9).rec__robot_iface__proxy__goal_reached = ((b).us_split_fields9).rec__robot_iface__proxy__goal_reached)) ->
  (bool_eq21(a, b) = true)) and
  ((not (((((((((((((((((((to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__robot_radius) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__robot_radius)) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__min_gap_width) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__min_gap_width))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__obstacle_avoid_dist) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__obstacle_avoid_dist))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__max_speed) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__max_speed))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__max_turn_rate) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__max_turn_rate))) and
  (to_rep4(((a).us_split_fields9).rec__robot_iface__proxy__goal_position_tol) = to_rep4(((b).us_split_fields9).rec__robot_iface__proxy__goal_position_tol))) and
  (to_rep4(((a).us_split_fields9).rec__robot_iface__proxy__goal_angle_tol) = to_rep4(((b).us_split_fields9).rec__robot_iface__proxy__goal_angle_tol))) and
  (to_rep2(((a).us_split_fields9).rec__robot_iface__proxy__goalx) = to_rep2(((b).us_split_fields9).rec__robot_iface__proxy__goalx))) and
  (to_rep2(((a).us_split_fields9).rec__robot_iface__proxy__goaly) = to_rep2(((b).us_split_fields9).rec__robot_iface__proxy__goaly))) and
  (to_rep2(((a).us_split_fields9).rec__robot_iface__proxy__goala) = to_rep2(((b).us_split_fields9).rec__robot_iface__proxy__goala))) and
  (to_rep6(((a).us_split_fields9).rec__robot_iface__proxy__scan_count) = to_rep6(((b).us_split_fields9).rec__robot_iface__proxy__scan_count))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__scan_res) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__scan_res))) and
  (to_rep3(((a).us_split_fields9).rec__robot_iface__proxy__max_range) = to_rep3(((b).us_split_fields9).rec__robot_iface__proxy__max_range))) and
  (bool_eq18(((a).us_split_fields9).rec__robot_iface__proxy__scans, 1, 1000,
  ((b).us_split_fields9).rec__robot_iface__proxy__scans, 1,
  1000) = true)) and
  (to_rep7(((a).us_split_fields9).rec__robot_iface__proxy__x) = to_rep7(((b).us_split_fields9).rec__robot_iface__proxy__x))) and
  (to_rep7(((a).us_split_fields9).rec__robot_iface__proxy__y) = to_rep7(((b).us_split_fields9).rec__robot_iface__proxy__y))) and
  (to_rep7(((a).us_split_fields9).rec__robot_iface__proxy__yaw) = to_rep7(((b).us_split_fields9).rec__robot_iface__proxy__yaw))) and
  (bool_eq20(((a).us_split_fields9).rec__robot_iface__proxy__speed,
  ((b).us_split_fields9).rec__robot_iface__proxy__speed) = true)) and
  (((a).us_split_fields9).rec__robot_iface__proxy__goal_reached = ((b).us_split_fields9).rec__robot_iface__proxy__goal_reached))) ->
  (bool_eq21(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (forall a:us_rep4. (0 <= object__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep4. (0 <= object__alignment6(a)))

logic robot_iface__proxy__robot_radius__first__bit : int

logic robot_iface__proxy__robot_radius__last__bit : int

logic robot_iface__proxy__robot_radius__position : int

axiom robot_iface__proxy__robot_radius__first__bit_axiom :
  (0 <= robot_iface__proxy__robot_radius__first__bit)

axiom robot_iface__proxy__robot_radius__last__bit_axiom :
  (robot_iface__proxy__robot_radius__first__bit <  robot_iface__proxy__robot_radius__last__bit)

axiom robot_iface__proxy__robot_radius__position_axiom :
  (0 <= robot_iface__proxy__robot_radius__position)

logic robot_iface__proxy__min_gap_width__first__bit : int

logic robot_iface__proxy__min_gap_width__last__bit : int

logic robot_iface__proxy__min_gap_width__position : int

axiom robot_iface__proxy__min_gap_width__first__bit_axiom :
  (0 <= robot_iface__proxy__min_gap_width__first__bit)

axiom robot_iface__proxy__min_gap_width__last__bit_axiom :
  (robot_iface__proxy__min_gap_width__first__bit <  robot_iface__proxy__min_gap_width__last__bit)

axiom robot_iface__proxy__min_gap_width__position_axiom :
  (0 <= robot_iface__proxy__min_gap_width__position)

logic robot_iface__proxy__obstacle_avoid_dist__first__bit : int

logic robot_iface__proxy__obstacle_avoid_dist__last__bit : int

logic robot_iface__proxy__obstacle_avoid_dist__position : int

axiom robot_iface__proxy__obstacle_avoid_dist__first__bit_axiom :
  (0 <= robot_iface__proxy__obstacle_avoid_dist__first__bit)

axiom robot_iface__proxy__obstacle_avoid_dist__last__bit_axiom :
  (robot_iface__proxy__obstacle_avoid_dist__first__bit <  robot_iface__proxy__obstacle_avoid_dist__last__bit)

axiom robot_iface__proxy__obstacle_avoid_dist__position_axiom :
  (0 <= robot_iface__proxy__obstacle_avoid_dist__position)

logic robot_iface__proxy__max_speed__first__bit : int

logic robot_iface__proxy__max_speed__last__bit : int

logic robot_iface__proxy__max_speed__position : int

axiom robot_iface__proxy__max_speed__first__bit_axiom :
  (0 <= robot_iface__proxy__max_speed__first__bit)

axiom robot_iface__proxy__max_speed__last__bit_axiom :
  (robot_iface__proxy__max_speed__first__bit <  robot_iface__proxy__max_speed__last__bit)

axiom robot_iface__proxy__max_speed__position_axiom :
  (0 <= robot_iface__proxy__max_speed__position)

logic robot_iface__proxy__max_turn_rate__first__bit : int

logic robot_iface__proxy__max_turn_rate__last__bit : int

logic robot_iface__proxy__max_turn_rate__position : int

axiom robot_iface__proxy__max_turn_rate__first__bit_axiom :
  (0 <= robot_iface__proxy__max_turn_rate__first__bit)

axiom robot_iface__proxy__max_turn_rate__last__bit_axiom :
  (robot_iface__proxy__max_turn_rate__first__bit <  robot_iface__proxy__max_turn_rate__last__bit)

axiom robot_iface__proxy__max_turn_rate__position_axiom :
  (0 <= robot_iface__proxy__max_turn_rate__position)

logic robot_iface__proxy__goal_position_tol__first__bit : int

logic robot_iface__proxy__goal_position_tol__last__bit : int

logic robot_iface__proxy__goal_position_tol__position : int

axiom robot_iface__proxy__goal_position_tol__first__bit_axiom :
  (0 <= robot_iface__proxy__goal_position_tol__first__bit)

axiom robot_iface__proxy__goal_position_tol__last__bit_axiom :
  (robot_iface__proxy__goal_position_tol__first__bit <  robot_iface__proxy__goal_position_tol__last__bit)

axiom robot_iface__proxy__goal_position_tol__position_axiom :
  (0 <= robot_iface__proxy__goal_position_tol__position)

logic robot_iface__proxy__goal_angle_tol__first__bit : int

logic robot_iface__proxy__goal_angle_tol__last__bit : int

logic robot_iface__proxy__goal_angle_tol__position : int

axiom robot_iface__proxy__goal_angle_tol__first__bit_axiom :
  (0 <= robot_iface__proxy__goal_angle_tol__first__bit)

axiom robot_iface__proxy__goal_angle_tol__last__bit_axiom :
  (robot_iface__proxy__goal_angle_tol__first__bit <  robot_iface__proxy__goal_angle_tol__last__bit)

axiom robot_iface__proxy__goal_angle_tol__position_axiom :
  (0 <= robot_iface__proxy__goal_angle_tol__position)

logic robot_iface__proxy__goalx__first__bit : int

logic robot_iface__proxy__goalx__last__bit : int

logic robot_iface__proxy__goalx__position : int

axiom robot_iface__proxy__goalx__first__bit_axiom :
  (0 <= robot_iface__proxy__goalx__first__bit)

axiom robot_iface__proxy__goalx__last__bit_axiom :
  (robot_iface__proxy__goalx__first__bit <  robot_iface__proxy__goalx__last__bit)

axiom robot_iface__proxy__goalx__position_axiom :
  (0 <= robot_iface__proxy__goalx__position)

logic robot_iface__proxy__goaly__first__bit : int

logic robot_iface__proxy__goaly__last__bit : int

logic robot_iface__proxy__goaly__position : int

axiom robot_iface__proxy__goaly__first__bit_axiom :
  (0 <= robot_iface__proxy__goaly__first__bit)

axiom robot_iface__proxy__goaly__last__bit_axiom :
  (robot_iface__proxy__goaly__first__bit <  robot_iface__proxy__goaly__last__bit)

axiom robot_iface__proxy__goaly__position_axiom :
  (0 <= robot_iface__proxy__goaly__position)

logic robot_iface__proxy__goala__first__bit : int

logic robot_iface__proxy__goala__last__bit : int

logic robot_iface__proxy__goala__position : int

axiom robot_iface__proxy__goala__first__bit_axiom :
  (0 <= robot_iface__proxy__goala__first__bit)

axiom robot_iface__proxy__goala__last__bit_axiom :
  (robot_iface__proxy__goala__first__bit <  robot_iface__proxy__goala__last__bit)

axiom robot_iface__proxy__goala__position_axiom :
  (0 <= robot_iface__proxy__goala__position)

logic robot_iface__proxy__scan_count__first__bit : int

logic robot_iface__proxy__scan_count__last__bit : int

logic robot_iface__proxy__scan_count__position : int

axiom robot_iface__proxy__scan_count__first__bit_axiom :
  (0 <= robot_iface__proxy__scan_count__first__bit)

axiom robot_iface__proxy__scan_count__last__bit_axiom :
  (robot_iface__proxy__scan_count__first__bit <  robot_iface__proxy__scan_count__last__bit)

axiom robot_iface__proxy__scan_count__position_axiom :
  (0 <= robot_iface__proxy__scan_count__position)

logic robot_iface__proxy__scan_res__first__bit : int

logic robot_iface__proxy__scan_res__last__bit : int

logic robot_iface__proxy__scan_res__position : int

axiom robot_iface__proxy__scan_res__first__bit_axiom :
  (0 <= robot_iface__proxy__scan_res__first__bit)

axiom robot_iface__proxy__scan_res__last__bit_axiom :
  (robot_iface__proxy__scan_res__first__bit <  robot_iface__proxy__scan_res__last__bit)

axiom robot_iface__proxy__scan_res__position_axiom :
  (0 <= robot_iface__proxy__scan_res__position)

logic robot_iface__proxy__max_range__first__bit : int

logic robot_iface__proxy__max_range__last__bit : int

logic robot_iface__proxy__max_range__position : int

axiom robot_iface__proxy__max_range__first__bit_axiom :
  (0 <= robot_iface__proxy__max_range__first__bit)

axiom robot_iface__proxy__max_range__last__bit_axiom :
  (robot_iface__proxy__max_range__first__bit <  robot_iface__proxy__max_range__last__bit)

axiom robot_iface__proxy__max_range__position_axiom :
  (0 <= robot_iface__proxy__max_range__position)

logic robot_iface__proxy__scans__first__bit : int

logic robot_iface__proxy__scans__last__bit : int

logic robot_iface__proxy__scans__position : int

axiom robot_iface__proxy__scans__first__bit_axiom :
  (0 <= robot_iface__proxy__scans__first__bit)

axiom robot_iface__proxy__scans__last__bit_axiom :
  (robot_iface__proxy__scans__first__bit <  robot_iface__proxy__scans__last__bit)

axiom robot_iface__proxy__scans__position_axiom :
  (0 <= robot_iface__proxy__scans__position)

logic robot_iface__proxy__x__first__bit : int

logic robot_iface__proxy__x__last__bit : int

logic robot_iface__proxy__x__position : int

axiom robot_iface__proxy__x__first__bit_axiom :
  (0 <= robot_iface__proxy__x__first__bit)

axiom robot_iface__proxy__x__last__bit_axiom :
  (robot_iface__proxy__x__first__bit <  robot_iface__proxy__x__last__bit)

axiom robot_iface__proxy__x__position_axiom :
  (0 <= robot_iface__proxy__x__position)

logic robot_iface__proxy__y__first__bit : int

logic robot_iface__proxy__y__last__bit : int

logic robot_iface__proxy__y__position : int

axiom robot_iface__proxy__y__first__bit_axiom :
  (0 <= robot_iface__proxy__y__first__bit)

axiom robot_iface__proxy__y__last__bit_axiom :
  (robot_iface__proxy__y__first__bit <  robot_iface__proxy__y__last__bit)

axiom robot_iface__proxy__y__position_axiom :
  (0 <= robot_iface__proxy__y__position)

logic robot_iface__proxy__yaw__first__bit : int

logic robot_iface__proxy__yaw__last__bit : int

logic robot_iface__proxy__yaw__position : int

axiom robot_iface__proxy__yaw__first__bit_axiom :
  (0 <= robot_iface__proxy__yaw__first__bit)

axiom robot_iface__proxy__yaw__last__bit_axiom :
  (robot_iface__proxy__yaw__first__bit <  robot_iface__proxy__yaw__last__bit)

axiom robot_iface__proxy__yaw__position_axiom :
  (0 <= robot_iface__proxy__yaw__position)

logic robot_iface__proxy__speed__first__bit : int

logic robot_iface__proxy__speed__last__bit : int

logic robot_iface__proxy__speed__position : int

axiom robot_iface__proxy__speed__first__bit_axiom :
  (0 <= robot_iface__proxy__speed__first__bit)

axiom robot_iface__proxy__speed__last__bit_axiom :
  (robot_iface__proxy__speed__first__bit <  robot_iface__proxy__speed__last__bit)

axiom robot_iface__proxy__speed__position_axiom :
  (0 <= robot_iface__proxy__speed__position)

logic robot_iface__proxy__goal_reached__first__bit : int

logic robot_iface__proxy__goal_reached__last__bit : int

logic robot_iface__proxy__goal_reached__position : int

axiom robot_iface__proxy__goal_reached__first__bit_axiom :
  (0 <= robot_iface__proxy__goal_reached__first__bit)

axiom robot_iface__proxy__goal_reached__last__bit_axiom :
  (robot_iface__proxy__goal_reached__first__bit <  robot_iface__proxy__goal_reached__last__bit)

axiom robot_iface__proxy__goal_reached__position_axiom :
  (0 <= robot_iface__proxy__goal_reached__position)

logic user_eq17 : us_rep4, us_rep4 -> bool

logic dummy24 : positive_float

logic dummy25 : positive_float

logic dummy26 : positive_float

logic dummy27 : positive_float

logic dummy28 : positive_float

logic dummy29 : nonnegative_float

logic dummy30 : nonnegative_float

logic dummy31 : float1

logic dummy32 : float1

logic dummy33 : float1

logic dummy34 : natural

logic dummy35 : positive_float

logic dummy36 : positive_float

logic dummy37 : (int,nonnegative_float) farray

logic dummy38 : unbounded_float

logic dummy39 : unbounded_float

logic dummy40 : unbounded_float

logic dummy41 : option

logic dummy42 : float1

logic dummy43 : float1

logic dummy44 : bool

logic dummy45 : bool

type proxy__ref = { proxy__content : us_rep4
}

function proxy__ref___projection(a: proxy__ref) : us_rep4 =
  (a).proxy__content

logic getscancount : us_rep4 -> int

logic getscancount__function_guard : int, us_rep4 -> prop

logic getrange : us_rep4, int -> t

logic getrange__function_guard : t, us_rep4, int -> prop

logic getxpos : us_rep4 -> t

logic getxpos__function_guard : t, us_rep4 -> prop

logic getypos : us_rep4 -> t

logic getypos__function_guard : t, us_rep4 -> prop

logic getyaw : us_rep4 -> t

logic getyaw__function_guard : t, us_rep4 -> prop

type idir_t

predicate in_range11(x: int) = (((- 1) <= x) and (x <= 1))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq18 : idir_t, idir_t -> bool

logic dummy46 : idir_t

type idir_t__ref = { idir_t__content : idir_t
}

function idir_t__ref___projection(a: idir_t__ref) : idir_t =
  (a).idir_t__content

logic to_rep9 : idir_t -> int

logic of_rep9 : int -> idir_t

axiom inversion_axiom9 :
  (forall x:idir_t [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 : (forall x:idir_t [to_rep9(x)]. in_range11(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range11(x) ->
  (to_rep9(of_rep9(x)) = x)))

type us_split_fields10 = { rec__gaps__gap__bearing : us_rep;
rec__gaps__gap__distance : float1; rec__gaps__gap__idir : idir_t
}

function us_split_fields_bearing__projection(a: us_split_fields10) : us_rep =
  (a).rec__gaps__gap__bearing

function us_split_fields_iDir__projection(a: us_split_fields10) : idir_t =
  (a).rec__gaps__gap__idir

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10
}

function us_rep___8__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq23 : us_rep5, us_rep5 -> bool

axiom bool_eq_def21 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq23(a, b)].
  (((((bool_eq13(((a).us_split_fields11).rec__gaps__gap__bearing,
  ((b).us_split_fields11).rec__gaps__gap__bearing) = true) and
  (to_rep2(((a).us_split_fields11).rec__gaps__gap__distance) = to_rep2(((b).us_split_fields11).rec__gaps__gap__distance))) and
  (to_rep9(((a).us_split_fields11).rec__gaps__gap__idir) = to_rep9(((b).us_split_fields11).rec__gaps__gap__idir))) ->
  (bool_eq23(a, b) = true)) and
  ((not (((bool_eq13(((a).us_split_fields11).rec__gaps__gap__bearing,
  ((b).us_split_fields11).rec__gaps__gap__bearing) = true) and
  (to_rep2(((a).us_split_fields11).rec__gaps__gap__distance) = to_rep2(((b).us_split_fields11).rec__gaps__gap__distance))) and
  (to_rep9(((a).us_split_fields11).rec__gaps__gap__idir) = to_rep9(((b).us_split_fields11).rec__gaps__gap__idir)))) ->
  (bool_eq23(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep5 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep5 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:normalized2pi. forall a1:float1. forall a2:idir_t.
  (0 <= object__size7({ us_split_fields11 = { rec__gaps__gap__bearing = {
  us_split_fields1 = { rec__spaces__angles__angle__theta = a } };
  rec__gaps__gap__distance = a1; rec__gaps__gap__idir = a2 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:normalized2pi. forall a1:float1. forall a2:idir_t.
  (0 <= object__alignment7({ us_split_fields11 = { rec__gaps__gap__bearing =
  { us_split_fields1 = { rec__spaces__angles__angle__theta = a } };
  rec__gaps__gap__distance = a1; rec__gaps__gap__idir = a2 } })))

logic gaps__gap__bearing__first__bit : int

logic gaps__gap__bearing__last__bit : int

logic gaps__gap__bearing__position : int

axiom gaps__gap__bearing__first__bit_axiom :
  (0 <= gaps__gap__bearing__first__bit)

axiom gaps__gap__bearing__last__bit_axiom :
  (gaps__gap__bearing__first__bit <  gaps__gap__bearing__last__bit)

axiom gaps__gap__bearing__position_axiom :
  (0 <= gaps__gap__bearing__position)

logic gaps__gap__distance__first__bit : int

logic gaps__gap__distance__last__bit : int

logic gaps__gap__distance__position : int

axiom gaps__gap__distance__first__bit_axiom :
  (0 <= gaps__gap__distance__first__bit)

axiom gaps__gap__distance__last__bit_axiom :
  (gaps__gap__distance__first__bit <  gaps__gap__distance__last__bit)

axiom gaps__gap__distance__position_axiom :
  (0 <= gaps__gap__distance__position)

logic gaps__gap__idir__first__bit : int

logic gaps__gap__idir__last__bit : int

logic gaps__gap__idir__position : int

axiom gaps__gap__idir__first__bit_axiom : (0 <= gaps__gap__idir__first__bit)

axiom gaps__gap__idir__last__bit_axiom :
  (gaps__gap__idir__first__bit <  gaps__gap__idir__last__bit)

axiom gaps__gap__idir__position_axiom : (0 <= gaps__gap__idir__position)

logic user_eq19 : us_rep5, us_rep5 -> bool

logic dummy47 : normalized2pi

logic dummy48 : float1

logic dummy49 : idir_t

type gap__ref = { gap__content : us_rep5
}

function gap__ref___projection(a: gap__ref) : us_rep5 = (a).gap__content

type us_split_fields12 = { rec__valleys__valley__risinggap : us_rep5;
rec__valleys__valley__othergap : us_rep5
}

function us_split_fields_risingGap__projection(a: us_split_fields12) : us_rep5 =
  (a).rec__valleys__valley__risinggap

function us_split_fields_otherGap__projection(a: us_split_fields12) : us_rep5 =
  (a).rec__valleys__valley__othergap

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep6 = { us_split_fields13 : us_split_fields12
}

function us_rep___9__projection(a: us_rep6) : us_split_fields12 =
  (a).us_split_fields13

logic bool_eq24 : us_rep6, us_rep6 -> bool

axiom bool_eq_def22 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq24(a, b)].
  ((((bool_eq23(((a).us_split_fields13).rec__valleys__valley__risinggap,
  ((b).us_split_fields13).rec__valleys__valley__risinggap) = true) and
  (bool_eq23(((a).us_split_fields13).rec__valleys__valley__othergap,
  ((b).us_split_fields13).rec__valleys__valley__othergap) = true)) ->
  (bool_eq24(a, b) = true)) and
  ((not ((bool_eq23(((a).us_split_fields13).rec__valleys__valley__risinggap,
  ((b).us_split_fields13).rec__valleys__valley__risinggap) = true) and
  (bool_eq23(((a).us_split_fields13).rec__valleys__valley__othergap,
  ((b).us_split_fields13).rec__valleys__valley__othergap) = true))) ->
  (bool_eq24(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep6 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep6 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:normalized2pi. forall a1:float1. forall a2:idir_t.
  forall a3:normalized2pi. forall a4:float1. forall a5:idir_t.
  (0 <= object__size8({ us_split_fields13 = {
  rec__valleys__valley__risinggap = { us_split_fields11 = {
  rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a } }; rec__gaps__gap__distance = a1;
  rec__gaps__gap__idir = a2 } }; rec__valleys__valley__othergap = {
  us_split_fields11 = { rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a3 } }; rec__gaps__gap__distance = a4;
  rec__gaps__gap__idir = a5 } } } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:normalized2pi. forall a1:float1. forall a2:idir_t.
  forall a3:normalized2pi. forall a4:float1. forall a5:idir_t.
  (0 <= object__alignment8({ us_split_fields13 = {
  rec__valleys__valley__risinggap = { us_split_fields11 = {
  rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a } }; rec__gaps__gap__distance = a1;
  rec__gaps__gap__idir = a2 } }; rec__valleys__valley__othergap = {
  us_split_fields11 = { rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a3 } }; rec__gaps__gap__distance = a4;
  rec__gaps__gap__idir = a5 } } } })))

logic valleys__valley__risinggap__first__bit : int

logic valleys__valley__risinggap__last__bit : int

logic valleys__valley__risinggap__position : int

axiom valleys__valley__risinggap__first__bit_axiom :
  (0 <= valleys__valley__risinggap__first__bit)

axiom valleys__valley__risinggap__last__bit_axiom :
  (valleys__valley__risinggap__first__bit <  valleys__valley__risinggap__last__bit)

axiom valleys__valley__risinggap__position_axiom :
  (0 <= valleys__valley__risinggap__position)

logic valleys__valley__othergap__first__bit : int

logic valleys__valley__othergap__last__bit : int

logic valleys__valley__othergap__position : int

axiom valleys__valley__othergap__first__bit_axiom :
  (0 <= valleys__valley__othergap__first__bit)

axiom valleys__valley__othergap__last__bit_axiom :
  (valleys__valley__othergap__first__bit <  valleys__valley__othergap__last__bit)

axiom valleys__valley__othergap__position_axiom :
  (0 <= valleys__valley__othergap__position)

logic user_eq20 : us_rep6, us_rep6 -> bool

logic dummy50 : normalized2pi

logic dummy51 : float1

logic dummy52 : idir_t

logic dummy53 : normalized2pi

logic dummy54 : float1

logic dummy55 : idir_t

type valley__ref = { valley__content : us_rep6
}

function valley__ref___projection(a: valley__ref) : us_rep6 =
  (a).valley__content

type option1

predicate in_range12(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def23 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq21 : option1, option1 -> bool

logic dummy56 : option1

type option__ref1 = { option__content1 : option1
}

function option__ref___2__projection(a: option__ref1) : option1 =
  (a).option__content1

logic to_rep10 : option1 -> int

logic of_rep10 : int -> option1

axiom inversion_axiom10 :
  (forall x:option1 [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:option1 [to_rep10(x)]. in_range12(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range12(x) ->
  (to_rep10(of_rep10(x)) = x)))

type us_split_discrs2 = { rec__algorithm__valley_option__opt : option1
}

function us_split_discrs___2__projection(a: us_split_discrs2) : option1 =
  (a).rec__algorithm__valley_option__opt

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields14 = { rec__algorithm__valley_option__value : us_rep6
}

function us_split_fields_value__projection(a: us_split_fields14) : us_rep6 =
  (a).rec__algorithm__valley_option__value

type us_split_fields__ref7 = { us_split_fields__content7 : us_split_fields14
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref7) : us_split_fields14 =
  (a).us_split_fields__content7

type us_rep7 = { us_split_discrs3 : us_split_discrs2; us_split_fields15 :
us_split_fields14; attr__constrained1 : bool
}

function us_rep___10__projection(a: us_rep7) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___11__projection(a: us_rep7) : us_split_fields14 =
  (a).us_split_fields15

function us_rep___12__projection(a: us_rep7) : bool = (a).attr__constrained1

predicate algorithm__valley_option__value__pred(a: us_rep7) =
  (to_rep10(((a).us_split_discrs3).rec__algorithm__valley_option__opt) = 1)

logic bool_eq26 : us_rep7, us_rep7 -> bool

axiom bool_eq_def24 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq26(a, b)].
  ((((to_rep10(((a).us_split_discrs3).rec__algorithm__valley_option__opt) = to_rep10(((b).us_split_discrs3).rec__algorithm__valley_option__opt)) and
  (algorithm__valley_option__value__pred(a) ->
  (bool_eq24(((a).us_split_fields15).rec__algorithm__valley_option__value,
  ((b).us_split_fields15).rec__algorithm__valley_option__value) = true))) ->
  (bool_eq26(a, b) = true)) and
  ((not ((to_rep10(((a).us_split_discrs3).rec__algorithm__valley_option__opt) = to_rep10(((b).us_split_discrs3).rec__algorithm__valley_option__opt)) and
  (algorithm__valley_option__value__pred(a) ->
  (bool_eq24(((a).us_split_fields15).rec__algorithm__valley_option__value,
  ((b).us_split_fields15).rec__algorithm__valley_option__value) = true)))) ->
  (bool_eq26(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep7 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep7 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:option1. forall a1:normalized2pi. forall a2:float1.
  forall a3:idir_t. forall a4:normalized2pi. forall a5:float1.
  forall a6:idir_t. forall a7:bool. (0 <= object__size9({ us_split_discrs3 =
  { rec__algorithm__valley_option__opt = a }; us_split_fields15 = {
  rec__algorithm__valley_option__value = { us_split_fields13 = {
  rec__valleys__valley__risinggap = { us_split_fields11 = {
  rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a1 } }; rec__gaps__gap__distance = a2;
  rec__gaps__gap__idir = a3 } }; rec__valleys__valley__othergap = {
  us_split_fields11 = { rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a4 } }; rec__gaps__gap__distance = a5;
  rec__gaps__gap__idir = a6 } } } } }; attr__constrained1 = a7 })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:option1. forall a1:normalized2pi. forall a2:float1.
  forall a3:idir_t. forall a4:normalized2pi. forall a5:float1.
  forall a6:idir_t. forall a7:bool. (0 <= object__alignment9({
  us_split_discrs3 = { rec__algorithm__valley_option__opt = a };
  us_split_fields15 = { rec__algorithm__valley_option__value = {
  us_split_fields13 = { rec__valleys__valley__risinggap = {
  us_split_fields11 = { rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a1 } }; rec__gaps__gap__distance = a2;
  rec__gaps__gap__idir = a3 } }; rec__valleys__valley__othergap = {
  us_split_fields11 = { rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a4 } }; rec__gaps__gap__distance = a5;
  rec__gaps__gap__idir = a6 } } } } }; attr__constrained1 = a7 })))

logic algorithm__valley_option__opt__first__bit : int

logic algorithm__valley_option__opt__last__bit : int

logic algorithm__valley_option__opt__position : int

axiom algorithm__valley_option__opt__first__bit_axiom :
  (0 <= algorithm__valley_option__opt__first__bit)

axiom algorithm__valley_option__opt__last__bit_axiom :
  (algorithm__valley_option__opt__first__bit <  algorithm__valley_option__opt__last__bit)

axiom algorithm__valley_option__opt__position_axiom :
  (0 <= algorithm__valley_option__opt__position)

logic algorithm__valley_option__value__first__bit : int

logic algorithm__valley_option__value__last__bit : int

logic algorithm__valley_option__value__position : int

axiom algorithm__valley_option__value__first__bit_axiom :
  (0 <= algorithm__valley_option__value__first__bit)

axiom algorithm__valley_option__value__last__bit_axiom :
  (algorithm__valley_option__value__first__bit <  algorithm__valley_option__value__last__bit)

axiom algorithm__valley_option__value__position_axiom :
  (0 <= algorithm__valley_option__value__position)

logic user_eq22 : us_rep7, us_rep7 -> bool

logic dummy57 : option1

logic dummy58 : normalized2pi

logic dummy59 : float1

logic dummy60 : idir_t

logic dummy61 : normalized2pi

logic dummy62 : float1

logic dummy63 : idir_t

logic dummy64 : bool

type valley_option__ref = { valley_option__content : us_rep7
}

function valley_option__ref___projection(a: valley_option__ref) : us_rep7 =
  (a).valley_option__content

type count_type

predicate in_range13(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq27 : int, int -> bool

axiom bool_eq_def25 :
  (forall x:int. forall y:int [bool_eq27(x, y)]. (((x = y) -> (bool_eq27(x,
  y) = true)) and ((not (x = y)) -> (bool_eq27(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq23 : count_type, count_type -> bool

logic dummy65 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep11 : count_type -> int

logic of_rep11 : int -> count_type

axiom inversion_axiom11 :
  (forall x:count_type [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:count_type [to_rep11(x)]. in_range13(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range13(x) ->
  (to_rep11(of_rep11(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs4 = { rec__algorithm__gap_vectors__list__capacity :
count_type
}

function us_split_discrs___3__projection(a: us_split_discrs4) : count_type =
  (a).rec__algorithm__gap_vectors__list__capacity

type us_split_discrs__ref2 = { us_split_discrs__content2 : us_split_discrs4
}

function us_split_discrs__ref___3__projection(a: us_split_discrs__ref2) : us_split_discrs4 =
  (a).us_split_discrs__content2

type us_split_fields16 = { rec__algorithm__gap_vectors__list : us_main_type
}

function us_split_fields_List__projection(a: us_split_fields16) : us_main_type =
  (a).rec__algorithm__gap_vectors__list

type us_split_fields__ref8 = { us_split_fields__content8 : us_split_fields16
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref8) : us_split_fields16 =
  (a).us_split_fields__content8

type us_rep8 = { us_split_discrs5 : us_split_discrs4; us_split_fields17 :
us_split_fields16
}

function us_rep___13__projection(a: us_rep8) : us_split_discrs4 =
  (a).us_split_discrs5

function us_rep___14__projection(a: us_rep8) : us_split_fields16 =
  (a).us_split_fields17

logic bool_eq28 : us_rep8, us_rep8 -> bool

axiom bool_eq_def26 :
  (forall a:us_rep8. forall b:us_rep8 [bool_eq28(a, b)].
  ((((to_rep11(((a).us_split_discrs5).rec__algorithm__gap_vectors__list__capacity) = to_rep11(((b).us_split_discrs5).rec__algorithm__gap_vectors__list__capacity)) and
  (us_main_eq(((a).us_split_fields17).rec__algorithm__gap_vectors__list,
  ((b).us_split_fields17).rec__algorithm__gap_vectors__list) = true)) ->
  (bool_eq28(a, b) = true)) and
  ((not ((to_rep11(((a).us_split_discrs5).rec__algorithm__gap_vectors__list__capacity) = to_rep11(((b).us_split_discrs5).rec__algorithm__gap_vectors__list__capacity)) and
  (us_main_eq(((a).us_split_fields17).rec__algorithm__gap_vectors__list,
  ((b).us_split_fields17).rec__algorithm__gap_vectors__list) = true))) ->
  (bool_eq28(a, b) = false))))

logic value__size10 : int

logic object__size10 : us_rep8 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep8 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size10({
  us_split_discrs5 = { rec__algorithm__gap_vectors__list__capacity = a };
  us_split_fields17 = { rec__algorithm__gap_vectors__list = a1 } })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment10({
  us_split_discrs5 = { rec__algorithm__gap_vectors__list__capacity = a };
  us_split_fields17 = { rec__algorithm__gap_vectors__list = a1 } })))

logic algorithm__gap_vectors__list__capacity__first__bit : int

logic algorithm__gap_vectors__list__capacity__last__bit : int

logic algorithm__gap_vectors__list__capacity__position : int

axiom algorithm__gap_vectors__list__capacity__first__bit_axiom :
  (0 <= algorithm__gap_vectors__list__capacity__first__bit)

axiom algorithm__gap_vectors__list__capacity__last__bit_axiom :
  (algorithm__gap_vectors__list__capacity__first__bit <  algorithm__gap_vectors__list__capacity__last__bit)

axiom algorithm__gap_vectors__list__capacity__position_axiom :
  (0 <= algorithm__gap_vectors__list__capacity__position)

logic user_eq24 : us_rep8, us_rep8 -> bool

logic dummy66 : count_type

logic dummy67 : us_main_type

type list__ref = { list__content : us_rep8
}

function list__ref___projection(a: list__ref) : us_rep8 = (a).list__content

predicate in_range14(rec__algorithm__gap_vectors__list__capacity1: int,
  a: us_rep8) =
  (rec__algorithm__gap_vectors__list__capacity1 = to_rep11(((a).us_split_discrs5).rec__algorithm__gap_vectors__list__capacity))

logic value__size11 : int

logic object__size11 : us_rep8 -> int

logic value__alignment11 : int

logic object__alignment11 : us_rep8 -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size11({
  us_split_discrs5 = { rec__algorithm__gap_vectors__list__capacity = a };
  us_split_fields17 = { rec__algorithm__gap_vectors__list = a1 } })))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment11({
  us_split_discrs5 = { rec__algorithm__gap_vectors__list__capacity = a };
  us_split_fields17 = { rec__algorithm__gap_vectors__list = a1 } })))

logic algorithm__gap_vectors__list__capacity__first__bit1 : int

logic algorithm__gap_vectors__list__capacity__last__bit1 : int

logic algorithm__gap_vectors__list__capacity__position1 : int

axiom algorithm__gap_vectors__list__capacity__first__bit_axiom1 :
  (0 <= algorithm__gap_vectors__list__capacity__first__bit1)

axiom algorithm__gap_vectors__list__capacity__last__bit_axiom1 :
  (algorithm__gap_vectors__list__capacity__first__bit1 <  algorithm__gap_vectors__list__capacity__last__bit1)

axiom algorithm__gap_vectors__list__capacity__position_axiom1 :
  (0 <= algorithm__gap_vectors__list__capacity__position1)

logic user_eq25 : us_rep8, us_rep8 -> bool

logic dummy68 : count_type

logic dummy69 : us_main_type

type list__ref1 = { list__content1 : us_rep8
}

function list__ref___2__projection(a: list__ref1) : us_rep8 =
  (a).list__content1

type us_split_fields18 = { rec__algorithm__laser_scan_data__first :
nonnegative_float; rec__algorithm__laser_scan_data__second : us_rep
}

function us_split_fields_second__projection(a: us_split_fields18) : us_rep =
  (a).rec__algorithm__laser_scan_data__second

type us_split_fields__ref9 = { us_split_fields__content9 : us_split_fields18
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref9) : us_split_fields18 =
  (a).us_split_fields__content9

type us_rep9 = { us_split_fields19 : us_split_fields18
}

function us_rep___16__projection(a: us_rep9) : us_split_fields18 =
  (a).us_split_fields19

logic bool_eq29 : us_rep9, us_rep9 -> bool

axiom bool_eq_def27 :
  (forall a:us_rep9. forall b:us_rep9 [bool_eq29(a, b)].
  ((((to_rep4(((a).us_split_fields19).rec__algorithm__laser_scan_data__first) = to_rep4(((b).us_split_fields19).rec__algorithm__laser_scan_data__first)) and
  (bool_eq13(((a).us_split_fields19).rec__algorithm__laser_scan_data__second,
  ((b).us_split_fields19).rec__algorithm__laser_scan_data__second) = true)) ->
  (bool_eq29(a, b) = true)) and
  ((not ((to_rep4(((a).us_split_fields19).rec__algorithm__laser_scan_data__first) = to_rep4(((b).us_split_fields19).rec__algorithm__laser_scan_data__first)) and
  (bool_eq13(((a).us_split_fields19).rec__algorithm__laser_scan_data__second,
  ((b).us_split_fields19).rec__algorithm__laser_scan_data__second) = true))) ->
  (bool_eq29(a, b) = false))))

logic value__size12 : int

logic object__size12 : us_rep9 -> int

logic value__alignment12 : int

logic object__alignment12 : us_rep9 -> int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 :
  (forall a:nonnegative_float. forall a1:normalized2pi.
  (0 <= object__size12({ us_split_fields19 = {
  rec__algorithm__laser_scan_data__first = a;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a1 } } } })))

axiom value__alignment_axiom12 : (0 <= value__alignment12)

axiom object__alignment_axiom12 :
  (forall a:nonnegative_float. forall a1:normalized2pi.
  (0 <= object__alignment12({ us_split_fields19 = {
  rec__algorithm__laser_scan_data__first = a;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = a1 } } } })))

logic algorithm__laser_scan_data__first__first__bit : int

logic algorithm__laser_scan_data__first__last__bit : int

logic algorithm__laser_scan_data__first__position : int

axiom algorithm__laser_scan_data__first__first__bit_axiom :
  (0 <= algorithm__laser_scan_data__first__first__bit)

axiom algorithm__laser_scan_data__first__last__bit_axiom :
  (algorithm__laser_scan_data__first__first__bit <  algorithm__laser_scan_data__first__last__bit)

axiom algorithm__laser_scan_data__first__position_axiom :
  (0 <= algorithm__laser_scan_data__first__position)

logic algorithm__laser_scan_data__second__first__bit : int

logic algorithm__laser_scan_data__second__last__bit : int

logic algorithm__laser_scan_data__second__position : int

axiom algorithm__laser_scan_data__second__first__bit_axiom :
  (0 <= algorithm__laser_scan_data__second__first__bit)

axiom algorithm__laser_scan_data__second__last__bit_axiom :
  (algorithm__laser_scan_data__second__first__bit <  algorithm__laser_scan_data__second__last__bit)

axiom algorithm__laser_scan_data__second__position_axiom :
  (0 <= algorithm__laser_scan_data__second__position)

logic user_eq26 : us_rep9, us_rep9 -> bool

logic dummy70 : nonnegative_float

logic dummy71 : normalized2pi

type laser_scan_data__ref = { laser_scan_data__content : us_rep9
}

function laser_scan_data__ref___projection(a: laser_scan_data__ref) : us_rep9 =
  (a).laser_scan_data__content

type map__ref2 = { map__content2 : (int,us_rep9) farray
}

logic slide2 : (int,us_rep9) farray, int, int -> (int,us_rep9) farray

axiom slide_eq2 :
  (forall a:(int,us_rep9) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep9) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,us_rep9) farray, int, int, (int,us_rep9) farray, int,
  int -> (int,us_rep9) farray

axiom concat_def2 :
  (forall a:(int,us_rep9) farray. forall b:(int,us_rep9) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : us_rep9, int -> (int,us_rep9) farray

axiom singleton_def2 :
  (forall v:nonnegative_float. forall v1:normalized2pi.
  (forall i:int [(singleton2({ us_split_fields19 = {
  rec__algorithm__laser_scan_data__first = v;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = v1 } } } }, i)[i])]. ((singleton2({
  us_split_fields19 = { rec__algorithm__laser_scan_data__first = v;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = v1 } } } }, i)[i]) = {
  us_split_fields19 = { rec__algorithm__laser_scan_data__first = v;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = v1 } } } })))

logic bool_eq30 : (int,us_rep9) farray, int, int, (int,us_rep9) farray, int,
  int -> bool

axiom bool_eq_def28 :
  (forall a:(int,us_rep9) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep9) farray. forall b__first:int. forall b__last:int
  [bool_eq30(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq29((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq30(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq29((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq30(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep9) farray. forall b:(int,us_rep9) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq30(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq29((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy72 : (int,us_rep9) farray

logic value__size13 : int

logic object__size13 : (int,us_rep9) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,us_rep9) farray -> int

logic value__alignment13 : int

logic object__alignment13 : (int,us_rep9) farray -> int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 :
  (forall a:(int,us_rep9) farray. (0 <= object__size13(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,us_rep9) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom13 : (0 <= value__alignment13)

axiom object__alignment_axiom13 :
  (forall a:(int,us_rep9) farray. (0 <= object__alignment13(a)))

logic user_eq27 : (int,us_rep9) farray, (int,us_rep9) farray -> bool

type us_split_fields20 = { rec__algorithm__controller__robot : us_rep4;
rec__algorithm__controller__laserscan : (int,us_rep9) farray;
rec__algorithm__controller__gapvec : us_rep8;
rec__algorithm__controller__obsavoiddelta : float1;
rec__algorithm__controller__driveangle : us_rep
}

function us_split_fields_robot__projection(a: us_split_fields20) : us_rep4 =
  (a).rec__algorithm__controller__robot

function us_split_fields_laserScan__projection(a: us_split_fields20) : (int,us_rep9) farray =
  (a).rec__algorithm__controller__laserscan

function us_split_fields_gapVec__projection(a: us_split_fields20) : us_rep8 =
  (a).rec__algorithm__controller__gapvec

function us_split_fields_driveAngle__projection(a: us_split_fields20) : us_rep =
  (a).rec__algorithm__controller__driveangle

type us_split_fields__ref10 = { us_split_fields__content10 :
us_split_fields20
}

function us_split_fields__ref___12__projection(a: us_split_fields__ref10) : us_split_fields20 =
  (a).us_split_fields__content10

type us_rep10 = { us_split_fields21 : us_split_fields20
}

function us_rep___17__projection(a: us_rep10) : us_split_fields20 =
  (a).us_split_fields21

logic bool_eq31 : us_rep10, us_rep10 -> bool

axiom bool_eq_def29 :
  (forall a:us_rep10. forall b:us_rep10 [bool_eq31(a, b)].
  (((((((bool_eq21(((a).us_split_fields21).rec__algorithm__controller__robot,
  ((b).us_split_fields21).rec__algorithm__controller__robot) = true) and
  (bool_eq30(((a).us_split_fields21).rec__algorithm__controller__laserscan,
  1, 1000, ((b).us_split_fields21).rec__algorithm__controller__laserscan, 1,
  1000) = true)) and
  (bool_eq28(((a).us_split_fields21).rec__algorithm__controller__gapvec,
  ((b).us_split_fields21).rec__algorithm__controller__gapvec) = true)) and
  (to_rep2(((a).us_split_fields21).rec__algorithm__controller__obsavoiddelta) = to_rep2(((b).us_split_fields21).rec__algorithm__controller__obsavoiddelta))) and
  (bool_eq13(((a).us_split_fields21).rec__algorithm__controller__driveangle,
  ((b).us_split_fields21).rec__algorithm__controller__driveangle) = true)) ->
  (bool_eq31(a, b) = true)) and
  ((not (((((bool_eq21(((a).us_split_fields21).rec__algorithm__controller__robot,
  ((b).us_split_fields21).rec__algorithm__controller__robot) = true) and
  (bool_eq30(((a).us_split_fields21).rec__algorithm__controller__laserscan,
  1, 1000, ((b).us_split_fields21).rec__algorithm__controller__laserscan, 1,
  1000) = true)) and
  (bool_eq28(((a).us_split_fields21).rec__algorithm__controller__gapvec,
  ((b).us_split_fields21).rec__algorithm__controller__gapvec) = true)) and
  (to_rep2(((a).us_split_fields21).rec__algorithm__controller__obsavoiddelta) = to_rep2(((b).us_split_fields21).rec__algorithm__controller__obsavoiddelta))) and
  (bool_eq13(((a).us_split_fields21).rec__algorithm__controller__driveangle,
  ((b).us_split_fields21).rec__algorithm__controller__driveangle) = true))) ->
  (bool_eq31(a, b) = false))))

logic value__size14 : int

logic object__size14 : us_rep10 -> int

logic value__alignment14 : int

logic object__alignment14 : us_rep10 -> int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 : (forall a:us_rep10. (0 <= object__size14(a)))

axiom value__alignment_axiom14 : (0 <= value__alignment14)

axiom object__alignment_axiom14 :
  (forall a:us_rep10. (0 <= object__alignment14(a)))

logic algorithm__controller__robot__first__bit : int

logic algorithm__controller__robot__last__bit : int

logic algorithm__controller__robot__position : int

axiom algorithm__controller__robot__first__bit_axiom :
  (0 <= algorithm__controller__robot__first__bit)

axiom algorithm__controller__robot__last__bit_axiom :
  (algorithm__controller__robot__first__bit <  algorithm__controller__robot__last__bit)

axiom algorithm__controller__robot__position_axiom :
  (0 <= algorithm__controller__robot__position)

logic algorithm__controller__laserscan__first__bit : int

logic algorithm__controller__laserscan__last__bit : int

logic algorithm__controller__laserscan__position : int

axiom algorithm__controller__laserscan__first__bit_axiom :
  (0 <= algorithm__controller__laserscan__first__bit)

axiom algorithm__controller__laserscan__last__bit_axiom :
  (algorithm__controller__laserscan__first__bit <  algorithm__controller__laserscan__last__bit)

axiom algorithm__controller__laserscan__position_axiom :
  (0 <= algorithm__controller__laserscan__position)

logic algorithm__controller__gapvec__first__bit : int

logic algorithm__controller__gapvec__last__bit : int

logic algorithm__controller__gapvec__position : int

axiom algorithm__controller__gapvec__first__bit_axiom :
  (0 <= algorithm__controller__gapvec__first__bit)

axiom algorithm__controller__gapvec__last__bit_axiom :
  (algorithm__controller__gapvec__first__bit <  algorithm__controller__gapvec__last__bit)

axiom algorithm__controller__gapvec__position_axiom :
  (0 <= algorithm__controller__gapvec__position)

logic algorithm__controller__obsavoiddelta__first__bit : int

logic algorithm__controller__obsavoiddelta__last__bit : int

logic algorithm__controller__obsavoiddelta__position : int

axiom algorithm__controller__obsavoiddelta__first__bit_axiom :
  (0 <= algorithm__controller__obsavoiddelta__first__bit)

axiom algorithm__controller__obsavoiddelta__last__bit_axiom :
  (algorithm__controller__obsavoiddelta__first__bit <  algorithm__controller__obsavoiddelta__last__bit)

axiom algorithm__controller__obsavoiddelta__position_axiom :
  (0 <= algorithm__controller__obsavoiddelta__position)

logic algorithm__controller__driveangle__first__bit : int

logic algorithm__controller__driveangle__last__bit : int

logic algorithm__controller__driveangle__position : int

axiom algorithm__controller__driveangle__first__bit_axiom :
  (0 <= algorithm__controller__driveangle__first__bit)

axiom algorithm__controller__driveangle__last__bit_axiom :
  (algorithm__controller__driveangle__first__bit <  algorithm__controller__driveangle__last__bit)

axiom algorithm__controller__driveangle__position_axiom :
  (0 <= algorithm__controller__driveangle__position)

logic user_eq28 : us_rep10, us_rep10 -> bool

logic dummy73 : positive_float

logic dummy74 : positive_float

logic dummy75 : positive_float

logic dummy76 : positive_float

logic dummy77 : positive_float

logic dummy78 : nonnegative_float

logic dummy79 : nonnegative_float

logic dummy80 : float1

logic dummy81 : float1

logic dummy82 : float1

logic dummy83 : natural

logic dummy84 : positive_float

logic dummy85 : positive_float

logic dummy86 : (int,nonnegative_float) farray

logic dummy87 : unbounded_float

logic dummy88 : unbounded_float

logic dummy89 : unbounded_float

logic dummy90 : option

logic dummy91 : float1

logic dummy92 : float1

logic dummy93 : bool

logic dummy94 : bool

logic dummy95 : (int,us_rep9) farray

logic dummy96 : count_type

logic dummy97 : us_main_type

logic dummy98 : float1

logic dummy99 : normalized2pi

type controller__ref = { controller__content : us_rep10
}

function controller__ref___projection(a: controller__ref) : us_rep10 =
  (a).controller__content

logic null_angle : normalized2pi

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_empty : us_rep8 -> bool

logic is_empty__function_guard : bool, us_rep8 -> prop

predicate in_range15(rec__robot_iface__speed_option__opt1: int, a: us_rep3) =
  (rec__robot_iface__speed_option__opt1 = to_rep8(((a).us_split_discrs1).rec__robot_iface__speed_option__opt))

logic value__size15 : int

logic object__size15 : us_rep3 -> int

logic value__alignment15 : int

logic object__alignment15 : us_rep3 -> int

axiom value__size_axiom15 : (0 <= value__size15)

axiom object__size_axiom15 :
  (forall a:option. forall a1:float1. forall a2:float1. forall a3:bool.
  (0 <= object__size15({ us_split_discrs1 = {
  rec__robot_iface__speed_option__opt = a }; us_split_fields7 = {
  rec__robot_iface__speed_option__modulus = a1;
  rec__robot_iface__speed_option__angle = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom15 : (0 <= value__alignment15)

axiom object__alignment_axiom15 :
  (forall a:option. forall a1:float1. forall a2:float1. forall a3:bool.
  (0 <= object__alignment15({ us_split_discrs1 = {
  rec__robot_iface__speed_option__opt = a }; us_split_fields7 = {
  rec__robot_iface__speed_option__modulus = a1;
  rec__robot_iface__speed_option__angle = a2 }; attr__constrained = a3 })))

logic robot_iface__speed_option__opt__first__bit1 : int

logic robot_iface__speed_option__opt__last__bit1 : int

logic robot_iface__speed_option__opt__position1 : int

axiom robot_iface__speed_option__opt__first__bit_axiom1 :
  (0 <= robot_iface__speed_option__opt__first__bit1)

axiom robot_iface__speed_option__opt__last__bit_axiom1 :
  (robot_iface__speed_option__opt__first__bit1 <  robot_iface__speed_option__opt__last__bit1)

axiom robot_iface__speed_option__opt__position_axiom1 :
  (0 <= robot_iface__speed_option__opt__position1)

logic robot_iface__speed_option__modulus__first__bit1 : int

logic robot_iface__speed_option__modulus__last__bit1 : int

logic robot_iface__speed_option__modulus__position1 : int

axiom robot_iface__speed_option__modulus__first__bit_axiom1 :
  (0 <= robot_iface__speed_option__modulus__first__bit1)

axiom robot_iface__speed_option__modulus__last__bit_axiom1 :
  (robot_iface__speed_option__modulus__first__bit1 <  robot_iface__speed_option__modulus__last__bit1)

axiom robot_iface__speed_option__modulus__position_axiom1 :
  (0 <= robot_iface__speed_option__modulus__position1)

logic robot_iface__speed_option__angle__first__bit1 : int

logic robot_iface__speed_option__angle__last__bit1 : int

logic robot_iface__speed_option__angle__position1 : int

axiom robot_iface__speed_option__angle__first__bit_axiom1 :
  (0 <= robot_iface__speed_option__angle__first__bit1)

axiom robot_iface__speed_option__angle__last__bit_axiom1 :
  (robot_iface__speed_option__angle__first__bit1 <  robot_iface__speed_option__angle__last__bit1)

axiom robot_iface__speed_option__angle__position_axiom1 :
  (0 <= robot_iface__speed_option__angle__position1)

logic user_eq29 : us_rep3, us_rep3 -> bool

logic dummy100 : option

logic dummy101 : float1

logic dummy102 : float1

logic dummy103 : bool

type t252s__ref = { t252s__content : us_rep3
}

function t252s__ref___projection(a: t252s__ref) : us_rep3 =
  (a).t252s__content

logic temp___614 : t -> (int,nonnegative_float) farray

axiom def_axiom :
  (forall temp___616:t.
  (forall temp___617:int.
  ((temp___614(temp___616)[temp___617]) = of_rep4(temp___616))))

logic temp___618 : us_rep9 -> (int,us_rep9) farray

axiom def_axiom1 :
  (forall temp___620:nonnegative_float. forall temp___6201:normalized2pi.
  (forall temp___621:int. ((temp___618({ us_split_fields19 = {
  rec__algorithm__laser_scan_data__first = temp___620;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = temp___6201 } } } })[temp___621]) = {
  us_split_fields19 = { rec__algorithm__laser_scan_data__first = temp___620;
  rec__algorithm__laser_scan_data__second = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = temp___6201 } } } })))

logic isfilterclear : (int,us_rep9) farray, us_rep, t, t, bool -> bool

logic isfilterclear__function_guard : bool, (int,us_rep9) farray, us_rep, t,
  t, bool -> prop

logic findbestvalley : us_rep10, us_rep1 -> us_rep7

logic findbestvalley__function_guard : us_rep7, us_rep10, us_rep1 -> prop

logic obsavoiddelta : us_rep10, t -> t

logic obsavoiddelta__function_guard : t, us_rep10, t -> prop

logic attr__ATTRIBUTE_ADDRESS2 : int

logic limit : t, t, t -> t

logic limit__function_guard : t, t, t, t -> prop

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic pbestvalley__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq32 : int, int -> bool

axiom bool_eq_def30 :
  (forall x:int. forall y:int [bool_eq32(x, y)]. (((x = y) -> (bool_eq32(x,
  y) = true)) and ((not (x = y)) -> (bool_eq32(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq30 : integer, integer -> bool

logic dummy104 : integer

type t75b__ref = { t75b__content : integer
}

function t75b__ref___projection(a: t75b__ref) : integer = (a).t75b__content

logic attr__ATTRIBUTE_ADDRESS17 : int

logic safetydeltaangle : normalized2pi

logic attr__ATTRIBUTE_ADDRESS18 : int

logic temp___String_Literal_910 : unit -> (int,character) farray

axiom temp___String_Literal_910__def_axiom :
  (((((to_rep((temp___String_Literal_910(void)[1])) = 112) and
  (to_rep((temp___String_Literal_910(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_910(void)[3])) = 115)) and
  (to_rep((temp___String_Literal_910(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_910(void)[5])) = 32))

logic temp___String_Literal_912 : unit -> (int,character) farray

axiom temp___String_Literal_912__def_axiom :
  (((((to_rep((temp___String_Literal_912(void)[1])) = 103) and
  (to_rep((temp___String_Literal_912(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_912(void)[3])) = 97)) and
  (to_rep((temp___String_Literal_912(void)[4])) = 108)) and
  (to_rep((temp___String_Literal_912(void)[5])) = 32))

logic temp___String_Literal_935 : unit -> (int,character) farray

axiom temp___String_Literal_935__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_935(void)[1])) = 32) and
  (to_rep((temp___String_Literal_935(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_935(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_935(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_935(void)[5])) = 108)) and
  (to_rep((temp___String_Literal_935(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_935(void)[7])) = 103)) and
  (to_rep((temp___String_Literal_935(void)[8])) = 111)) and
  (to_rep((temp___String_Literal_935(void)[9])) = 97)) and
  (to_rep((temp___String_Literal_935(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_935(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_935(void)[12])) = 112)) and
  (to_rep((temp___String_Literal_935(void)[13])) = 111)) and
  (to_rep((temp___String_Literal_935(void)[14])) = 115)) and
  (to_rep((temp___String_Literal_935(void)[15])) = 101)) and
  (to_rep((temp___String_Literal_935(void)[16])) = 32))

logic temp___String_Literal_938 : unit -> (int,character) farray

axiom temp___String_Literal_938__def_axiom :
  ((((((((((((((((((((((to_rep((temp___String_Literal_938(void)[1])) = 82) and
  (to_rep((temp___String_Literal_938(void)[2])) = 101)) and
  (to_rep((temp___String_Literal_938(void)[3])) = 97)) and
  (to_rep((temp___String_Literal_938(void)[4])) = 99)) and
  (to_rep((temp___String_Literal_938(void)[5])) = 104)) and
  (to_rep((temp___String_Literal_938(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_938(void)[7])) = 100)) and
  (to_rep((temp___String_Literal_938(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_938(void)[9])) = 103)) and
  (to_rep((temp___String_Literal_938(void)[10])) = 111)) and
  (to_rep((temp___String_Literal_938(void)[11])) = 97)) and
  (to_rep((temp___String_Literal_938(void)[12])) = 108)) and
  (to_rep((temp___String_Literal_938(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_938(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_938(void)[15])) = 111)) and
  (to_rep((temp___String_Literal_938(void)[16])) = 99)) and
  (to_rep((temp___String_Literal_938(void)[17])) = 97)) and
  (to_rep((temp___String_Literal_938(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_938(void)[19])) = 105)) and
  (to_rep((temp___String_Literal_938(void)[20])) = 111)) and
  (to_rep((temp___String_Literal_938(void)[21])) = 110)) and
  (to_rep((temp___String_Literal_938(void)[22])) = 32))

logic temp___String_Literal_944 : unit -> (int,character) farray

axiom temp___String_Literal_944__def_axiom :
  (((((((((((((((to_rep((temp___String_Literal_944(void)[1])) = 32) and
  (to_rep((temp___String_Literal_944(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_944(void)[3])) = 68)) and
  (to_rep((temp___String_Literal_944(void)[4])) = 105)) and
  (to_rep((temp___String_Literal_944(void)[5])) = 115)) and
  (to_rep((temp___String_Literal_944(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_944(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_944(void)[8])) = 116)) and
  (to_rep((temp___String_Literal_944(void)[9])) = 111)) and
  (to_rep((temp___String_Literal_944(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_944(void)[11])) = 103)) and
  (to_rep((temp___String_Literal_944(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_944(void)[13])) = 97)) and
  (to_rep((temp___String_Literal_944(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_944(void)[15])) = 32))

logic temp___String_Literal_946 : unit -> (int,character) farray

axiom temp___String_Literal_946__def_axiom :
  (((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_946(void)[1])) = 32) and
  (to_rep((temp___String_Literal_946(void)[2])) = 79)) and
  (to_rep((temp___String_Literal_946(void)[3])) = 98)) and
  (to_rep((temp___String_Literal_946(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_946(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_946(void)[6])) = 97)) and
  (to_rep((temp___String_Literal_946(void)[7])) = 99)) and
  (to_rep((temp___String_Literal_946(void)[8])) = 108)) and
  (to_rep((temp___String_Literal_946(void)[9])) = 101)) and
  (to_rep((temp___String_Literal_946(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_946(void)[11])) = 105)) and
  (to_rep((temp___String_Literal_946(void)[12])) = 110)) and
  (to_rep((temp___String_Literal_946(void)[13])) = 115)) and
  (to_rep((temp___String_Literal_946(void)[14])) = 105)) and
  (to_rep((temp___String_Literal_946(void)[15])) = 100)) and
  (to_rep((temp___String_Literal_946(void)[16])) = 101)) and
  (to_rep((temp___String_Literal_946(void)[17])) = 32)) and
  (to_rep((temp___String_Literal_946(void)[18])) = 111)) and
  (to_rep((temp___String_Literal_946(void)[19])) = 102)) and
  (to_rep((temp___String_Literal_946(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_946(void)[21])) = 114)) and
  (to_rep((temp___String_Literal_946(void)[22])) = 111)) and
  (to_rep((temp___String_Literal_946(void)[23])) = 98)) and
  (to_rep((temp___String_Literal_946(void)[24])) = 111)) and
  (to_rep((temp___String_Literal_946(void)[25])) = 116)) and
  (to_rep((temp___String_Literal_946(void)[26])) = 39)) and
  (to_rep((temp___String_Literal_946(void)[27])) = 115)) and
  (to_rep((temp___String_Literal_946(void)[28])) = 32)) and
  (to_rep((temp___String_Literal_946(void)[29])) = 98)) and
  (to_rep((temp___String_Literal_946(void)[30])) = 111)) and
  (to_rep((temp___String_Literal_946(void)[31])) = 117)) and
  (to_rep((temp___String_Literal_946(void)[32])) = 110)) and
  (to_rep((temp___String_Literal_946(void)[33])) = 100)) and
  (to_rep((temp___String_Literal_946(void)[34])) = 97)) and
  (to_rep((temp___String_Literal_946(void)[35])) = 114)) and
  (to_rep((temp___String_Literal_946(void)[36])) = 121)) and
  (to_rep((temp___String_Literal_946(void)[37])) = 33)) and
  (to_rep((temp___String_Literal_946(void)[38])) = 32)) and
  (to_rep((temp___String_Literal_946(void)[39])) = 32)) and
  (to_rep((temp___String_Literal_946(void)[40])) = 83)) and
  (to_rep((temp___String_Literal_946(void)[41])) = 116)) and
  (to_rep((temp___String_Literal_946(void)[42])) = 111)) and
  (to_rep((temp___String_Literal_946(void)[43])) = 112)) and
  (to_rep((temp___String_Literal_946(void)[44])) = 112)) and
  (to_rep((temp___String_Literal_946(void)[45])) = 105)) and
  (to_rep((temp___String_Literal_946(void)[46])) = 110)) and
  (to_rep((temp___String_Literal_946(void)[47])) = 103))

logic temp___String_Literal_963 : unit -> (int,character) farray

axiom temp___String_Literal_963__def_axiom :
  ((((((((((((((((((((((((((((((to_rep((temp___String_Literal_963(void)[1])) = 32) and
  (to_rep((temp___String_Literal_963(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_963(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_963(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_963(void)[5])) = 66)) and
  (to_rep((temp___String_Literal_963(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_963(void)[7])) = 115)) and
  (to_rep((temp___String_Literal_963(void)[8])) = 116)) and
  (to_rep((temp___String_Literal_963(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_963(void)[10])) = 118)) and
  (to_rep((temp___String_Literal_963(void)[11])) = 97)) and
  (to_rep((temp___String_Literal_963(void)[12])) = 108)) and
  (to_rep((temp___String_Literal_963(void)[13])) = 108)) and
  (to_rep((temp___String_Literal_963(void)[14])) = 101)) and
  (to_rep((temp___String_Literal_963(void)[15])) = 121)) and
  (to_rep((temp___String_Literal_963(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_963(void)[17])) = 104)) and
  (to_rep((temp___String_Literal_963(void)[18])) = 97)) and
  (to_rep((temp___String_Literal_963(void)[19])) = 115)) and
  (to_rep((temp___String_Literal_963(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_963(void)[21])) = 114)) and
  (to_rep((temp___String_Literal_963(void)[22])) = 105)) and
  (to_rep((temp___String_Literal_963(void)[23])) = 115)) and
  (to_rep((temp___String_Literal_963(void)[24])) = 105)) and
  (to_rep((temp___String_Literal_963(void)[25])) = 110)) and
  (to_rep((temp___String_Literal_963(void)[26])) = 103)) and
  (to_rep((temp___String_Literal_963(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_963(void)[28])) = 97)) and
  (to_rep((temp___String_Literal_963(void)[29])) = 116)) and
  (to_rep((temp___String_Literal_963(void)[30])) = 32))

logic temp___String_Literal_964 : unit -> (int,character) farray

axiom temp___String_Literal_964__def_axiom :
  (((((((((((((((((((((to_rep((temp___String_Literal_964(void)[1])) = 32) and
  (to_rep((temp___String_Literal_964(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_964(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_964(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_964(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_964(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_964(void)[7])) = 115)) and
  (to_rep((temp___String_Literal_964(void)[8])) = 97)) and
  (to_rep((temp___String_Literal_964(void)[9])) = 102)) and
  (to_rep((temp___String_Literal_964(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_964(void)[11])) = 116)) and
  (to_rep((temp___String_Literal_964(void)[12])) = 121)) and
  (to_rep((temp___String_Literal_964(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_964(void)[14])) = 100)) and
  (to_rep((temp___String_Literal_964(void)[15])) = 101)) and
  (to_rep((temp___String_Literal_964(void)[16])) = 108)) and
  (to_rep((temp___String_Literal_964(void)[17])) = 116)) and
  (to_rep((temp___String_Literal_964(void)[18])) = 97)) and
  (to_rep((temp___String_Literal_964(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_964(void)[20])) = 61)) and
  (to_rep((temp___String_Literal_964(void)[21])) = 32))

logic temp___String_Literal_972 : unit -> (int,character) farray

axiom temp___String_Literal_972__def_axiom :
  ((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_972(void)[1])) = 32) and
  (to_rep((temp___String_Literal_972(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_972(void)[3])) = 78)) and
  (to_rep((temp___String_Literal_972(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_972(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_972(void)[6])) = 119)) and
  (to_rep((temp___String_Literal_972(void)[7])) = 104)) and
  (to_rep((temp___String_Literal_972(void)[8])) = 101)) and
  (to_rep((temp___String_Literal_972(void)[9])) = 114)) and
  (to_rep((temp___String_Literal_972(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_972(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_972(void)[12])) = 116)) and
  (to_rep((temp___String_Literal_972(void)[13])) = 111)) and
  (to_rep((temp___String_Literal_972(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_972(void)[15])) = 103)) and
  (to_rep((temp___String_Literal_972(void)[16])) = 111)) and
  (to_rep((temp___String_Literal_972(void)[17])) = 44)) and
  (to_rep((temp___String_Literal_972(void)[18])) = 32)) and
  (to_rep((temp___String_Literal_972(void)[19])) = 116)) and
  (to_rep((temp___String_Literal_972(void)[20])) = 117)) and
  (to_rep((temp___String_Literal_972(void)[21])) = 114)) and
  (to_rep((temp___String_Literal_972(void)[22])) = 110)) and
  (to_rep((temp___String_Literal_972(void)[23])) = 105)) and
  (to_rep((temp___String_Literal_972(void)[24])) = 110)) and
  (to_rep((temp___String_Literal_972(void)[25])) = 103)) and
  (to_rep((temp___String_Literal_972(void)[26])) = 32)) and
  (to_rep((temp___String_Literal_972(void)[27])) = 105)) and
  (to_rep((temp___String_Literal_972(void)[28])) = 110)) and
  (to_rep((temp___String_Literal_972(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_972(void)[30])) = 112)) and
  (to_rep((temp___String_Literal_972(void)[31])) = 108)) and
  (to_rep((temp___String_Literal_972(void)[32])) = 97)) and
  (to_rep((temp___String_Literal_972(void)[33])) = 99)) and
  (to_rep((temp___String_Literal_972(void)[34])) = 101))

logic temp___String_Literal_977 : unit -> (int,character) farray

axiom temp___String_Literal_977__def_axiom :
  (((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_977(void)[1])) = 32) and
  (to_rep((temp___String_Literal_977(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_977(void)[3])) = 72)) and
  (to_rep((temp___String_Literal_977(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_977(void)[5])) = 97)) and
  (to_rep((temp___String_Literal_977(void)[6])) = 100)) and
  (to_rep((temp___String_Literal_977(void)[7])) = 105)) and
  (to_rep((temp___String_Literal_977(void)[8])) = 110)) and
  (to_rep((temp___String_Literal_977(void)[9])) = 103)) and
  (to_rep((temp___String_Literal_977(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_977(void)[11])) = 115)) and
  (to_rep((temp___String_Literal_977(void)[12])) = 116)) and
  (to_rep((temp___String_Literal_977(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_977(void)[14])) = 97)) and
  (to_rep((temp___String_Literal_977(void)[15])) = 105)) and
  (to_rep((temp___String_Literal_977(void)[16])) = 103)) and
  (to_rep((temp___String_Literal_977(void)[17])) = 104)) and
  (to_rep((temp___String_Literal_977(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_977(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_977(void)[20])) = 102)) and
  (to_rep((temp___String_Literal_977(void)[21])) = 111)) and
  (to_rep((temp___String_Literal_977(void)[22])) = 114)) and
  (to_rep((temp___String_Literal_977(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_977(void)[24])) = 103)) and
  (to_rep((temp___String_Literal_977(void)[25])) = 111)) and
  (to_rep((temp___String_Literal_977(void)[26])) = 97)) and
  (to_rep((temp___String_Literal_977(void)[27])) = 108)) and
  (to_rep((temp___String_Literal_977(void)[28])) = 44)) and
  (to_rep((temp___String_Literal_977(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_977(void)[30])) = 112)) and
  (to_rep((temp___String_Literal_977(void)[31])) = 97)) and
  (to_rep((temp___String_Literal_977(void)[32])) = 116)) and
  (to_rep((temp___String_Literal_977(void)[33])) = 104)) and
  (to_rep((temp___String_Literal_977(void)[34])) = 32)) and
  (to_rep((temp___String_Literal_977(void)[35])) = 105)) and
  (to_rep((temp___String_Literal_977(void)[36])) = 115)) and
  (to_rep((temp___String_Literal_977(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_977(void)[38])) = 99)) and
  (to_rep((temp___String_Literal_977(void)[39])) = 108)) and
  (to_rep((temp___String_Literal_977(void)[40])) = 101)) and
  (to_rep((temp___String_Literal_977(void)[41])) = 97)) and
  (to_rep((temp___String_Literal_977(void)[42])) = 114)) and
  (to_rep((temp___String_Literal_977(void)[43])) = 33))

logic temp___String_Literal_978 : unit -> (int,character) farray

axiom temp___String_Literal_978__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_978(void)[1])) = 32) and
  (to_rep((temp___String_Literal_978(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_978(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_978(void)[4])) = 68)) and
  (to_rep((temp___String_Literal_978(void)[5])) = 105)) and
  (to_rep((temp___String_Literal_978(void)[6])) = 115)) and
  (to_rep((temp___String_Literal_978(void)[7])) = 116)) and
  (to_rep((temp___String_Literal_978(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_978(void)[9])) = 116)) and
  (to_rep((temp___String_Literal_978(void)[10])) = 111)) and
  (to_rep((temp___String_Literal_978(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_978(void)[12])) = 103)) and
  (to_rep((temp___String_Literal_978(void)[13])) = 111)) and
  (to_rep((temp___String_Literal_978(void)[14])) = 97)) and
  (to_rep((temp___String_Literal_978(void)[15])) = 108)) and
  (to_rep((temp___String_Literal_978(void)[16])) = 32))

logic temp___String_Literal_979 : unit -> (int,character) farray

axiom temp___String_Literal_979__def_axiom :
  (((((((to_rep((temp___String_Literal_979(void)[1])) = 32) and
  (to_rep((temp___String_Literal_979(void)[2])) = 97)) and
  (to_rep((temp___String_Literal_979(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_979(void)[4])) = 103)) and
  (to_rep((temp___String_Literal_979(void)[5])) = 108)) and
  (to_rep((temp___String_Literal_979(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_979(void)[7])) = 32))

logic temp___String_Literal_984 : unit -> (int,character) farray

axiom temp___String_Literal_984__def_axiom :
  ((((((((((((((((((((((to_rep((temp___String_Literal_984(void)[1])) = 32) and
  (to_rep((temp___String_Literal_984(void)[2])) = 83)) and
  (to_rep((temp___String_Literal_984(void)[3])) = 116)) and
  (to_rep((temp___String_Literal_984(void)[4])) = 97)) and
  (to_rep((temp___String_Literal_984(void)[5])) = 114)) and
  (to_rep((temp___String_Literal_984(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_984(void)[7])) = 105)) and
  (to_rep((temp___String_Literal_984(void)[8])) = 110)) and
  (to_rep((temp___String_Literal_984(void)[9])) = 103)) and
  (to_rep((temp___String_Literal_984(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_984(void)[11])) = 100)) and
  (to_rep((temp___String_Literal_984(void)[12])) = 114)) and
  (to_rep((temp___String_Literal_984(void)[13])) = 105)) and
  (to_rep((temp___String_Literal_984(void)[14])) = 118)) and
  (to_rep((temp___String_Literal_984(void)[15])) = 101)) and
  (to_rep((temp___String_Literal_984(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_984(void)[17])) = 97)) and
  (to_rep((temp___String_Literal_984(void)[18])) = 110)) and
  (to_rep((temp___String_Literal_984(void)[19])) = 103)) and
  (to_rep((temp___String_Literal_984(void)[20])) = 108)) and
  (to_rep((temp___String_Literal_984(void)[21])) = 101)) and
  (to_rep((temp___String_Literal_984(void)[22])) = 32))

logic temp___String_Literal_995 : unit -> (int,character) farray

axiom temp___String_Literal_995__def_axiom :
  (((((((((((((((to_rep((temp___String_Literal_995(void)[1])) = 32) and
  (to_rep((temp___String_Literal_995(void)[2])) = 68)) and
  (to_rep((temp___String_Literal_995(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_995(void)[4])) = 105)) and
  (to_rep((temp___String_Literal_995(void)[5])) = 118)) and
  (to_rep((temp___String_Literal_995(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_995(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_995(void)[8])) = 97)) and
  (to_rep((temp___String_Literal_995(void)[9])) = 110)) and
  (to_rep((temp___String_Literal_995(void)[10])) = 103)) and
  (to_rep((temp___String_Literal_995(void)[11])) = 108)) and
  (to_rep((temp___String_Literal_995(void)[12])) = 101)) and
  (to_rep((temp___String_Literal_995(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_995(void)[14])) = 58)) and
  (to_rep((temp___String_Literal_995(void)[15])) = 32))

logic temp___String_Literal_996 : unit -> (int,character) farray

axiom temp___String_Literal_996__def_axiom :
  ((((((((((to_rep((temp___String_Literal_996(void)[1])) = 32) and
  (to_rep((temp___String_Literal_996(void)[2])) = 102)) and
  (to_rep((temp___String_Literal_996(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_996(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_996(void)[5])) = 109)) and
  (to_rep((temp___String_Literal_996(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_996(void)[7])) = 109)) and
  (to_rep((temp___String_Literal_996(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_996(void)[9])) = 100)) and
  (to_rep((temp___String_Literal_996(void)[10])) = 32))

logic temp___String_Literal_997 : unit -> (int,character) farray

axiom temp___String_Literal_997__def_axiom :
  ((((((((((((((to_rep((temp___String_Literal_997(void)[1])) = 44) and
  (to_rep((temp___String_Literal_997(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_997(void)[3])) = 115)) and
  (to_rep((temp___String_Literal_997(void)[4])) = 97)) and
  (to_rep((temp___String_Literal_997(void)[5])) = 102)) and
  (to_rep((temp___String_Literal_997(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_997(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_997(void)[8])) = 114)) and
  (to_rep((temp___String_Literal_997(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_997(void)[10])) = 115)) and
  (to_rep((temp___String_Literal_997(void)[11])) = 105)) and
  (to_rep((temp___String_Literal_997(void)[12])) = 110)) and
  (to_rep((temp___String_Literal_997(void)[13])) = 103)) and
  (to_rep((temp___String_Literal_997(void)[14])) = 32))

logic temp___String_Literal_998 : unit -> (int,character) farray

axiom temp___String_Literal_998__def_axiom :
  ((((((to_rep((temp___String_Literal_998(void)[1])) = 44) and
  (to_rep((temp___String_Literal_998(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_998(void)[3])) = 97)) and
  (to_rep((temp___String_Literal_998(void)[4])) = 110)) and
  (to_rep((temp___String_Literal_998(void)[5])) = 100)) and
  (to_rep((temp___String_Literal_998(void)[6])) = 32))

logic temp___String_Literal_999 : unit -> (int,character) farray

axiom temp___String_Literal_999__def_axiom :
  ((((((((((to_rep((temp___String_Literal_999(void)[1])) = 32) and
  (to_rep((temp___String_Literal_999(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_999(void)[3])) = 98)) and
  (to_rep((temp___String_Literal_999(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_999(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_999(void)[6])) = 100)) and
  (to_rep((temp___String_Literal_999(void)[7])) = 101)) and
  (to_rep((temp___String_Literal_999(void)[8])) = 108)) and
  (to_rep((temp___String_Literal_999(void)[9])) = 116)) and
  (to_rep((temp___String_Literal_999(void)[10])) = 97))

logic temp___String_Literal_1000 : unit -> (int,character) farray

axiom temp___String_Literal_1000__def_axiom :
  (((((((to_rep((temp___String_Literal_1000(void)[1])) = 32) and
  (to_rep((temp___String_Literal_1000(void)[2])) = 84)) and
  (to_rep((temp___String_Literal_1000(void)[3])) = 104)) and
  (to_rep((temp___String_Literal_1000(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1000(void)[5])) = 116)) and
  (to_rep((temp___String_Literal_1000(void)[6])) = 97)) and
  (to_rep((temp___String_Literal_1000(void)[7])) = 32))

logic temp___String_Literal_1001 : unit -> (int,character) farray

axiom temp___String_Literal_1001__def_axiom :
  (((to_rep((temp___String_Literal_1001(void)[1])) = 32) and
  (to_rep((temp___String_Literal_1001(void)[2])) = 44)) and
  (to_rep((temp___String_Literal_1001(void)[3])) = 32))

logic temp___String_Literal_1004 : unit -> (int,character) farray

axiom temp___String_Literal_1004__def_axiom :
  (((((((((((((((((to_rep((temp___String_Literal_1004(void)[1])) = 32) and
  (to_rep((temp___String_Literal_1004(void)[2])) = 68)) and
  (to_rep((temp___String_Literal_1004(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_1004(void)[4])) = 105)) and
  (to_rep((temp___String_Literal_1004(void)[5])) = 118)) and
  (to_rep((temp___String_Literal_1004(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_1004(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1004(void)[8])) = 99)) and
  (to_rep((temp___String_Literal_1004(void)[9])) = 111)) and
  (to_rep((temp___String_Literal_1004(void)[10])) = 109)) and
  (to_rep((temp___String_Literal_1004(void)[11])) = 109)) and
  (to_rep((temp___String_Literal_1004(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_1004(void)[13])) = 110)) and
  (to_rep((temp___String_Literal_1004(void)[14])) = 100)) and
  (to_rep((temp___String_Literal_1004(void)[15])) = 115)) and
  (to_rep((temp___String_Literal_1004(void)[16])) = 58)) and
  (to_rep((temp___String_Literal_1004(void)[17])) = 32))

logic temp___String_Literal_1005 : unit -> (int,character) farray

axiom temp___String_Literal_1005__def_axiom :
  ((to_rep((temp___String_Literal_1005(void)[1])) = 44) and
  (to_rep((temp___String_Literal_1005(void)[2])) = 32))

axiom null_angle__def_axiom : (null_angle = of_rep5(fliteral1))

axiom zero_position__def_axiom : ((zero_position = of_rep2(fliteral1)) and
  (zero_position1 = of_rep2(fliteral1)))

logic length1 : us_rep8 -> int

logic length__function_guard : int, us_rep8 -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length1({
  us_split_discrs5 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields17 = { rec__algorithm__gap_vectors__list =
  container1 } })]. ((length1({ us_split_discrs5 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields17 = { rec__algorithm__gap_vectors__list = container1 }
  }) <= to_rep11(container)) and in_range13(length1({ us_split_discrs5 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields17 = { rec__algorithm__gap_vectors__list = container1 }
  }))))

axiom is_empty__post_axiom :
  (forall container:count_type. forall container1:us_main_type [is_empty({
  us_split_discrs5 = { rec__algorithm__gap_vectors__list__capacity =
  container }; us_split_fields17 = { rec__algorithm__gap_vectors__list =
  container1 } })]. ((is_empty({ us_split_discrs5 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields17 = { rec__algorithm__gap_vectors__list = container1 }
  }) = true) <-> (length1({ us_split_discrs5 = {
  rec__algorithm__gap_vectors__list__capacity = container };
  us_split_fields17 = { rec__algorithm__gap_vectors__list = container1 }
  }) = 0)))

logic this__split_fields : positive_float

logic this__split_fields1 : positive_float

logic this__split_fields2 : positive_float

logic this__split_fields3 : positive_float

logic this__split_fields4 : positive_float

logic this__split_fields5 : nonnegative_float

logic this__split_fields6 : nonnegative_float

logic this__split_fields7 : float1

logic this__split_fields8 : float1

logic this__split_fields9 : float1

logic this__split_fields10 : natural

logic this__split_fields11 : positive_float

logic this__split_fields12 : positive_float

logic this__split_fields13 : (int,nonnegative_float) farray

logic this__split_fields14 : unbounded_float

logic this__split_fields15 : unbounded_float

logic this__split_fields16 : unbounded_float

logic this__split_fields17 : option

logic this__split_fields18 : float1

logic this__split_fields19 : float1

logic this__split_fields20 : bool

logic this__split_fields21 : bool

logic this__split_fields22 : (int,us_rep9) farray

logic this__split_fields23 : count_type

logic this__split_fields24 : us_main_type

logic this__split_fields25 : float1

logic this__split_fields26 : normalized2pi

logic drivespeed : t

logic driveturnrate : t

logic disttogoal__split_fields : float1

logic disttogoal__split_fields1 : float1

logic disttoclosestobstacle : t

logic safetydist : t

logic saferisinggapangle__split_fields : normalized2pi

logic midvalleyangle__split_fields : normalized2pi

logic theta : t

logic goal____split_fields : float1

logic goal____split_fields1 : float1

logic goal____split_fields2 : normalized2pi

logic pbestvalley__split_fields : normalized2pi

logic pbestvalley__split_fields1 : float1

logic pbestvalley__split_fields2 : idir_t

logic pbestvalley__split_fields3 : normalized2pi

logic pbestvalley__split_fields4 : float1

logic pbestvalley__split_fields5 : idir_t

logic pbestvalley__split_discrs : option1

logic inumlps : int

logic i : int

logic i1 : int

logic o : float1

logic o1 : float1

logic o2 : float1

logic o3 : float1

logic temp___1014 : float1

logic temp___10141 : float1

logic algorithm__step__saferisinggapangle__assume : normalized2pi

logic algorithm__step__midvalleyangle__assume : normalized2pi

logic o4 : t

logic o5 : nonnegative_float

logic o6 : nonnegative_float

logic o7 : normalized2pi

logic o8 : nonnegative_float

logic o9 : normalized2pi

logic o10 : (int,us_rep9) farray

logic o11 : positive_float

logic o12 : positive_float

logic o13 : positive_float

logic o14 : positive_float

logic o15 : positive_float

logic o16 : nonnegative_float

logic o17 : nonnegative_float

logic o18 : float1

logic o19 : float1

logic o20 : float1

logic o21 : natural

logic o22 : positive_float

logic o23 : positive_float

logic o24 : (int,nonnegative_float) farray

logic o25 : unbounded_float

logic o26 : unbounded_float

logic o27 : unbounded_float

logic o28 : option

logic o29 : float1

logic o30 : float1

logic o31 : bool

logic o32 : bool

logic o33 : (int,us_rep9) farray

logic o34 : count_type

logic o35 : us_main_type

logic o36 : float1

logic o37 : normalized2pi

logic temp___923 : positive_float

logic temp___9231 : positive_float

logic temp___9232 : positive_float

logic temp___9233 : positive_float

logic temp___9234 : positive_float

logic temp___9235 : nonnegative_float

logic temp___9236 : nonnegative_float

logic temp___9237 : float1

logic temp___9238 : float1

logic temp___9239 : float1

logic temp___92310 : natural

logic temp___92311 : positive_float

logic temp___92312 : positive_float

logic temp___92313 : (int,nonnegative_float) farray

logic temp___92314 : unbounded_float

logic temp___92315 : unbounded_float

logic temp___92316 : unbounded_float

logic temp___92317 : option

logic temp___92318 : float1

logic temp___92319 : float1

logic temp___92320 : bool

logic temp___92321 : bool

logic temp___92322 : (int,us_rep9) farray

logic temp___92323 : count_type

logic temp___92324 : us_main_type

logic temp___92325 : float1

logic temp___92326 : normalized2pi

logic o38 : t

logic o39 : float1

logic o40 : float1

logic o41 : t

logic o42 : normalized2pi

logic o43 : normalized2pi

logic o44 : normalized2pi

logic o45 : normalized2pi

logic o46 : t

logic o47 : normalized2pi

logic o48 : normalized2pi

logic o49 : t

logic o50 : t

logic o51 : normalized2pi

logic o52 : normalized2pi

logic o53 : t

logic o54 : t

logic o55 : float1

logic o56 : float1

logic o57 : t

logic o58 : float1

logic o59 : float1

logic o60 : normalized2pi

logic o61 : normalized2pi

logic o62 : normalized2pi

logic temp___943 : float1

logic temp___9431 : float1

logic o63 : (int,character) farray

logic o64 : t1

logic temp___955 : positive_float

logic temp___9551 : positive_float

logic temp___9552 : positive_float

logic temp___9553 : positive_float

logic temp___9554 : positive_float

logic temp___9555 : nonnegative_float

logic temp___9556 : nonnegative_float

logic temp___9557 : float1

logic temp___9558 : float1

logic temp___9559 : float1

logic temp___95510 : natural

logic temp___95511 : positive_float

logic temp___95512 : positive_float

logic temp___95513 : (int,nonnegative_float) farray

logic temp___95514 : unbounded_float

logic temp___95515 : unbounded_float

logic temp___95516 : unbounded_float

logic temp___95517 : option

logic temp___95518 : float1

logic temp___95519 : float1

logic temp___95520 : bool

logic temp___95521 : bool

logic temp___95522 : (int,us_rep9) farray

logic temp___95523 : count_type

logic temp___95524 : us_main_type

logic temp___95525 : float1

logic temp___95526 : normalized2pi

logic temp___954 : t

logic temp___953 : int

logic o65 : t

logic o66 : t

logic o67 : t

logic o68 : t

logic o69 : t

logic o70 : t

logic o71 : t

logic temp___960 : option1

logic temp___9601 : normalized2pi

logic temp___9602 : float1

logic temp___9603 : idir_t

logic temp___9604 : normalized2pi

logic temp___9605 : float1

logic temp___9606 : idir_t

logic temp___9607 : bool

logic usq_ : option1

logic usq_1 : normalized2pi

logic usq_2 : float1

logic usq_3 : idir_t

logic usq_4 : normalized2pi

logic usq_5 : float1

logic usq_6 : idir_t

logic usq_7 : bool

logic temp___962 : option1

logic temp___9621 : normalized2pi

logic temp___9622 : float1

logic temp___9623 : idir_t

logic temp___9624 : normalized2pi

logic temp___9625 : float1

logic temp___9626 : idir_t

logic temp___9627 : bool

logic o72 : normalized2pi

logic o73 : t

logic o74 : t

logic o75 : t

logic o76 : t

logic o77 : us_image

logic o78 : (int,character) farray

logic o79 : t1

logic o80 : normalized2pi

logic o81 : (int,character) farray

logic o82 : t1

logic o83 : normalized2pi

logic o84 : t

logic o85 : normalized2pi

logic o86 : positive_float

logic o87 : positive_float

logic o88 : positive_float

logic o89 : positive_float

logic o90 : positive_float

logic o91 : nonnegative_float

logic o92 : nonnegative_float

logic o93 : float1

logic o94 : float1

logic o95 : float1

logic o96 : natural

logic o97 : positive_float

logic o98 : positive_float

logic o99 : (int,nonnegative_float) farray

logic o100 : unbounded_float

logic o101 : unbounded_float

logic o102 : unbounded_float

logic o103 : option

logic o104 : float1

logic o105 : float1

logic o106 : bool

logic o107 : bool

logic o108 : (int,us_rep9) farray

logic o109 : count_type

logic o110 : us_main_type

logic o111 : float1

logic o112 : normalized2pi

logic temp___981 : positive_float

logic temp___9811 : positive_float

logic temp___9812 : positive_float

logic temp___9813 : positive_float

logic temp___9814 : positive_float

logic temp___9815 : nonnegative_float

logic temp___9816 : nonnegative_float

logic temp___9817 : float1

logic temp___9818 : float1

logic temp___9819 : float1

logic temp___98110 : natural

logic temp___98111 : positive_float

logic temp___98112 : positive_float

logic temp___98113 : (int,nonnegative_float) farray

logic temp___98114 : unbounded_float

logic temp___98115 : unbounded_float

logic temp___98116 : unbounded_float

logic temp___98117 : option

logic temp___98118 : float1

logic temp___98119 : float1

logic temp___98120 : bool

logic temp___98121 : bool

logic temp___98122 : (int,us_rep9) farray

logic temp___98123 : count_type

logic temp___98124 : us_main_type

logic temp___98125 : float1

logic temp___98126 : normalized2pi

logic o113 : normalized2pi

logic o114 : positive_float

logic o115 : positive_float

logic o116 : positive_float

logic o117 : positive_float

logic o118 : positive_float

logic o119 : nonnegative_float

logic o120 : nonnegative_float

logic o121 : float1

logic o122 : float1

logic o123 : float1

logic o124 : natural

logic o125 : positive_float

logic o126 : positive_float

logic o127 : (int,nonnegative_float) farray

logic o128 : unbounded_float

logic o129 : unbounded_float

logic o130 : unbounded_float

logic o131 : option

logic o132 : float1

logic o133 : float1

logic o134 : bool

logic o135 : bool

logic o136 : (int,us_rep9) farray

logic o137 : count_type

logic o138 : us_main_type

logic o139 : float1

logic o140 : normalized2pi

logic temp___974 : positive_float

logic temp___9741 : positive_float

logic temp___9742 : positive_float

logic temp___9743 : positive_float

logic temp___9744 : positive_float

logic temp___9745 : nonnegative_float

logic temp___9746 : nonnegative_float

logic temp___9747 : float1

logic temp___9748 : float1

logic temp___9749 : float1

logic temp___97410 : natural

logic temp___97411 : positive_float

logic temp___97412 : positive_float

logic temp___97413 : (int,nonnegative_float) farray

logic temp___97414 : unbounded_float

logic temp___97415 : unbounded_float

logic temp___97416 : unbounded_float

logic temp___97417 : option

logic temp___97418 : float1

logic temp___97419 : float1

logic temp___97420 : bool

logic temp___97421 : bool

logic temp___97422 : (int,us_rep9) farray

logic temp___97423 : count_type

logic temp___97424 : us_main_type

logic temp___97425 : float1

logic temp___97426 : normalized2pi

logic o141 : t

logic o142 : t

logic algorithm__step__B_18__safetydeltaangle__assume : normalized2pi

logic o143 : (int,character) farray

logic o144 : t1

logic o145 : (int,character) farray

logic o146 : t1

logic o147 : t

logic o148 : t

logic o149 : t

logic o150 : normalized2pi

logic temp___965 : normalized2pi

logic temp___967 : normalized2pi

logic temp___966 : normalized2pi

logic o151 : t

logic o152 : t

logic o153 : t

logic o154 : t

logic o155 : t

logic o156 : float1

logic o157 : positive_float

logic o158 : positive_float

logic o159 : positive_float

logic o160 : positive_float

logic o161 : positive_float

logic o162 : nonnegative_float

logic o163 : nonnegative_float

logic o164 : float1

logic o165 : float1

logic o166 : float1

logic o167 : natural

logic o168 : positive_float

logic o169 : positive_float

logic o170 : (int,nonnegative_float) farray

logic o171 : unbounded_float

logic o172 : unbounded_float

logic o173 : unbounded_float

logic o174 : option

logic o175 : float1

logic o176 : float1

logic o177 : bool

logic o178 : bool

logic o179 : (int,us_rep9) farray

logic o180 : count_type

logic o181 : us_main_type

logic o182 : float1

logic o183 : normalized2pi

logic temp___983 : positive_float

logic temp___9831 : positive_float

logic temp___9832 : positive_float

logic temp___9833 : positive_float

logic temp___9834 : positive_float

logic temp___9835 : nonnegative_float

logic temp___9836 : nonnegative_float

logic temp___9837 : float1

logic temp___9838 : float1

logic temp___9839 : float1

logic temp___98310 : natural

logic temp___98311 : positive_float

logic temp___98312 : positive_float

logic temp___98313 : (int,nonnegative_float) farray

logic temp___98314 : unbounded_float

logic temp___98315 : unbounded_float

logic temp___98316 : unbounded_float

logic temp___98317 : option

logic temp___98318 : float1

logic temp___98319 : float1

logic temp___98320 : bool

logic temp___98321 : bool

logic temp___98322 : (int,us_rep9) farray

logic temp___98323 : count_type

logic temp___98324 : us_main_type

logic temp___98325 : float1

logic temp___98326 : normalized2pi

logic o184 : (int,character) farray

logic o185 : t1

logic o186 : t

logic o187 : us_image

logic o188 : (int,character) farray

logic o189 : t1

logic o190 : t

logic o191 : normalized2pi

logic o192 : normalized2pi

logic o193 : positive_float

logic o194 : positive_float

logic o195 : positive_float

logic o196 : positive_float

logic o197 : positive_float

logic o198 : nonnegative_float

logic o199 : nonnegative_float

logic o200 : float1

logic o201 : float1

logic o202 : float1

logic o203 : natural

logic o204 : positive_float

logic o205 : positive_float

logic o206 : (int,nonnegative_float) farray

logic o207 : unbounded_float

logic o208 : unbounded_float

logic o209 : unbounded_float

logic o210 : option

logic o211 : float1

logic o212 : float1

logic o213 : bool

logic o214 : bool

logic o215 : (int,us_rep9) farray

logic o216 : count_type

logic o217 : us_main_type

logic o218 : float1

logic o219 : normalized2pi

logic temp___992 : positive_float

logic temp___9921 : positive_float

logic temp___9922 : positive_float

logic temp___9923 : positive_float

logic temp___9924 : positive_float

logic temp___9925 : nonnegative_float

logic temp___9926 : nonnegative_float

logic temp___9927 : float1

logic temp___9928 : float1

logic temp___9929 : float1

logic temp___99210 : natural

logic temp___99211 : positive_float

logic temp___99212 : positive_float

logic temp___99213 : (int,nonnegative_float) farray

logic temp___99214 : unbounded_float

logic temp___99215 : unbounded_float

logic temp___99216 : unbounded_float

logic temp___99217 : option

logic temp___99218 : float1

logic temp___99219 : float1

logic temp___99220 : bool

logic temp___99221 : bool

logic temp___99222 : (int,us_rep9) farray

logic temp___99223 : count_type

logic temp___99224 : us_main_type

logic temp___99225 : float1

logic temp___99226 : normalized2pi

logic o220 : t

logic o221 : normalized2pi

logic o222 : positive_float

logic o223 : positive_float

logic o224 : positive_float

logic o225 : positive_float

logic o226 : positive_float

logic o227 : nonnegative_float

logic o228 : nonnegative_float

logic o229 : float1

logic o230 : float1

logic o231 : float1

logic o232 : natural

logic o233 : positive_float

logic o234 : positive_float

logic o235 : (int,nonnegative_float) farray

logic o236 : unbounded_float

logic o237 : unbounded_float

logic o238 : unbounded_float

logic o239 : option

logic o240 : float1

logic o241 : float1

logic o242 : bool

logic o243 : bool

logic o244 : (int,us_rep9) farray

logic o245 : count_type

logic o246 : us_main_type

logic o247 : float1

logic o248 : normalized2pi

logic temp___994 : positive_float

logic temp___9941 : positive_float

logic temp___9942 : positive_float

logic temp___9943 : positive_float

logic temp___9944 : positive_float

logic temp___9945 : nonnegative_float

logic temp___9946 : nonnegative_float

logic temp___9947 : float1

logic temp___9948 : float1

logic temp___9949 : float1

logic temp___99410 : natural

logic temp___99411 : positive_float

logic temp___99412 : positive_float

logic temp___99413 : (int,nonnegative_float) farray

logic temp___99414 : unbounded_float

logic temp___99415 : unbounded_float

logic temp___99416 : unbounded_float

logic temp___99417 : option

logic temp___99418 : float1

logic temp___99419 : float1

logic temp___99420 : bool

logic temp___99421 : bool

logic temp___99422 : (int,us_rep9) farray

logic temp___99423 : count_type

logic temp___99424 : us_main_type

logic temp___99425 : float1

logic temp___99426 : normalized2pi

logic o249 : t

logic o250 : normalized2pi

logic o251 : normalized2pi

logic o252 : positive_float

logic o253 : positive_float

logic o254 : positive_float

logic o255 : positive_float

logic o256 : positive_float

logic o257 : nonnegative_float

logic o258 : nonnegative_float

logic o259 : float1

logic o260 : float1

logic o261 : float1

logic o262 : natural

logic o263 : positive_float

logic o264 : positive_float

logic o265 : (int,nonnegative_float) farray

logic o266 : unbounded_float

logic o267 : unbounded_float

logic o268 : unbounded_float

logic o269 : option

logic o270 : float1

logic o271 : float1

logic o272 : bool

logic o273 : bool

logic o274 : (int,us_rep9) farray

logic o275 : count_type

logic o276 : us_main_type

logic o277 : float1

logic o278 : normalized2pi

logic temp___988 : positive_float

logic temp___9881 : positive_float

logic temp___9882 : positive_float

logic temp___9883 : positive_float

logic temp___9884 : positive_float

logic temp___9885 : nonnegative_float

logic temp___9886 : nonnegative_float

logic temp___9887 : float1

logic temp___9888 : float1

logic temp___9889 : float1

logic temp___98810 : natural

logic temp___98811 : positive_float

logic temp___98812 : positive_float

logic temp___98813 : (int,nonnegative_float) farray

logic temp___98814 : unbounded_float

logic temp___98815 : unbounded_float

logic temp___98816 : unbounded_float

logic temp___98817 : option

logic temp___98818 : float1

logic temp___98819 : float1

logic temp___98820 : bool

logic temp___98821 : bool

logic temp___98822 : (int,us_rep9) farray

logic temp___98823 : count_type

logic temp___98824 : us_main_type

logic temp___98825 : float1

logic temp___98826 : normalized2pi

logic o279 : t

logic o280 : normalized2pi

logic o281 : positive_float

logic o282 : positive_float

logic o283 : positive_float

logic o284 : positive_float

logic o285 : positive_float

logic o286 : nonnegative_float

logic o287 : nonnegative_float

logic o288 : float1

logic o289 : float1

logic o290 : float1

logic o291 : natural

logic o292 : positive_float

logic o293 : positive_float

logic o294 : (int,nonnegative_float) farray

logic o295 : unbounded_float

logic o296 : unbounded_float

logic o297 : unbounded_float

logic o298 : option

logic o299 : float1

logic o300 : float1

logic o301 : bool

logic o302 : bool

logic o303 : (int,us_rep9) farray

logic o304 : count_type

logic o305 : us_main_type

logic o306 : float1

logic o307 : normalized2pi

logic temp___990 : positive_float

logic temp___9901 : positive_float

logic temp___9902 : positive_float

logic temp___9903 : positive_float

logic temp___9904 : positive_float

logic temp___9905 : nonnegative_float

logic temp___9906 : nonnegative_float

logic temp___9907 : float1

logic temp___9908 : float1

logic temp___9909 : float1

logic temp___99010 : natural

logic temp___99011 : positive_float

logic temp___99012 : positive_float

logic temp___99013 : (int,nonnegative_float) farray

logic temp___99014 : unbounded_float

logic temp___99015 : unbounded_float

logic temp___99016 : unbounded_float

logic temp___99017 : option

logic temp___99018 : float1

logic temp___99019 : float1

logic temp___99020 : bool

logic temp___99021 : bool

logic temp___99022 : (int,us_rep9) farray

logic temp___99023 : count_type

logic temp___99024 : us_main_type

logic temp___99025 : float1

logic temp___99026 : normalized2pi

logic o308 : normalized2pi

logic o309 : normalized2pi

logic o310 : positive_float

logic o311 : positive_float

logic o312 : positive_float

logic o313 : positive_float

logic o314 : positive_float

logic o315 : nonnegative_float

logic o316 : nonnegative_float

logic o317 : float1

logic o318 : float1

logic o319 : float1

logic o320 : natural

logic o321 : positive_float

logic o322 : positive_float

logic o323 : (int,nonnegative_float) farray

logic o324 : unbounded_float

logic o325 : unbounded_float

logic o326 : unbounded_float

logic o327 : option

logic o328 : float1

logic o329 : float1

logic o330 : bool

logic o331 : bool

logic o332 : (int,us_rep9) farray

logic o333 : count_type

logic o334 : us_main_type

logic o335 : float1

logic o336 : normalized2pi

logic temp___986 : positive_float

logic temp___9861 : positive_float

logic temp___9862 : positive_float

logic temp___9863 : positive_float

logic temp___9864 : positive_float

logic temp___9865 : nonnegative_float

logic temp___9866 : nonnegative_float

logic temp___9867 : float1

logic temp___9868 : float1

logic temp___9869 : float1

logic temp___98610 : natural

logic temp___98611 : positive_float

logic temp___98612 : positive_float

logic temp___98613 : (int,nonnegative_float) farray

logic temp___98614 : unbounded_float

logic temp___98615 : unbounded_float

logic temp___98616 : unbounded_float

logic temp___98617 : option

logic temp___98618 : float1

logic temp___98619 : float1

logic temp___98620 : bool

logic temp___98621 : bool

logic temp___98622 : (int,us_rep9) farray

logic temp___98623 : count_type

logic temp___98624 : us_main_type

logic temp___98625 : float1

logic temp___98626 : normalized2pi

logic o337 : t

logic o338 : t

logic o339 : t

logic o340 : t

logic o341 : t

logic o342 : (int,character) farray

logic o343 : t1

logic o344 : (int,character) farray

logic o345 : t1

logic o346 : (int,character) farray

logic o347 : t1

logic o348 : t

logic o349 : us_image

logic o350 : (int,character) farray

logic o351 : t1

logic o352 : t

logic o353 : t

logic o354 : t

logic o355 : t

logic o356 : t

logic o357 : t

logic o358 : t

logic o359 : t

logic o360 : t

logic o361 : t

logic o362 : t

logic o363 : t

logic o364 : t

logic o365 : t

logic o366 : t

logic o367 : t

logic o368 : t

logic o369 : t

logic o370 : t

logic o371 : t

logic o372 : t

logic o373 : t

logic o374 : t

logic o375 : t

logic o376 : t

logic o377 : t

logic o378 : t

logic o379 : t

logic o380 : t

logic o381 : t

logic o382 : t

logic o383 : t

logic o384 : t

logic o385 : t

logic o386 : t

logic o387 : t

logic o388 : t

logic o389 : t

logic o390 : t

logic o391 : t

logic o392 : t

logic o393 : t

logic o394 : t

logic o395 : t

logic driveturnrate1 : t

logic result : normalized2pi

logic saferisinggapangle__split_fields1 : normalized2pi

logic result1 : normalized2pi

logic midvalleyangle__split_fields1 : normalized2pi

logic robotpose__split_fields : float1

logic robotpose__split_fields1 : float1

logic robotpose__split_fields2 : normalized2pi

logic goal____split_fields3 : float1

logic goal____split_fields4 : float1

logic goal____split_fields5 : normalized2pi

logic inumlps1 : int

logic this__split_fields27 : positive_float

logic this__split_fields28 : positive_float

logic this__split_fields29 : positive_float

logic this__split_fields30 : positive_float

logic this__split_fields31 : positive_float

logic this__split_fields32 : nonnegative_float

logic this__split_fields33 : nonnegative_float

logic this__split_fields34 : float1

logic this__split_fields35 : float1

logic this__split_fields36 : float1

logic this__split_fields37 : natural

logic this__split_fields38 : positive_float

logic this__split_fields39 : positive_float

logic this__split_fields40 : (int,nonnegative_float) farray

logic this__split_fields41 : unbounded_float

logic this__split_fields42 : unbounded_float

logic this__split_fields43 : unbounded_float

logic this__split_fields44 : option

logic this__split_fields45 : float1

logic this__split_fields46 : float1

logic this__split_fields47 : bool

logic this__split_fields48 : bool

logic this__split_fields49 : (int,us_rep9) farray

logic this__split_fields50 : count_type

logic this__split_fields51 : us_main_type

logic this__split_fields52 : float1

logic this__split_fields53 : normalized2pi

logic result2 : int

logic i2 : int

logic this__split_fields54 : positive_float

logic this__split_fields55 : positive_float

logic this__split_fields56 : positive_float

logic this__split_fields57 : positive_float

logic this__split_fields58 : positive_float

logic this__split_fields59 : nonnegative_float

logic this__split_fields60 : nonnegative_float

logic this__split_fields61 : float1

logic this__split_fields62 : float1

logic this__split_fields63 : float1

logic this__split_fields64 : natural

logic this__split_fields65 : positive_float

logic this__split_fields66 : positive_float

logic this__split_fields67 : (int,nonnegative_float) farray

logic this__split_fields68 : unbounded_float

logic this__split_fields69 : unbounded_float

logic this__split_fields70 : unbounded_float

logic this__split_fields71 : option

logic this__split_fields72 : float1

logic this__split_fields73 : float1

logic this__split_fields74 : bool

logic this__split_fields75 : bool

logic this__split_fields76 : (int,us_rep9) farray

logic this__split_fields77 : count_type

logic this__split_fields78 : us_main_type

logic this__split_fields79 : float1

logic this__split_fields80 : normalized2pi

logic i3 : int

logic result3 : positive_float

logic result4 : positive_float

logic result5 : positive_float

logic result6 : positive_float

logic result7 : positive_float

logic result8 : nonnegative_float

logic result9 : nonnegative_float

logic result10 : float1

logic result11 : float1

logic result12 : float1

logic result13 : natural

logic result14 : positive_float

logic result15 : positive_float

logic result16 : (int,nonnegative_float) farray

logic result17 : unbounded_float

logic result18 : unbounded_float

logic result19 : unbounded_float

logic result20 : option

logic result21 : float1

logic result22 : float1

logic result23 : bool

logic result24 : bool

logic result25 : (int,us_rep9) farray

logic result26 : count_type

logic result27 : us_main_type

logic result28 : float1

logic result29 : normalized2pi

logic this__split_fields81 : positive_float

logic this__split_fields82 : positive_float

logic this__split_fields83 : positive_float

logic this__split_fields84 : positive_float

logic this__split_fields85 : positive_float

logic this__split_fields86 : nonnegative_float

logic this__split_fields87 : nonnegative_float

logic this__split_fields88 : float1

logic this__split_fields89 : float1

logic this__split_fields90 : float1

logic this__split_fields91 : natural

logic this__split_fields92 : positive_float

logic this__split_fields93 : positive_float

logic this__split_fields94 : (int,nonnegative_float) farray

logic this__split_fields95 : unbounded_float

logic this__split_fields96 : unbounded_float

logic this__split_fields97 : unbounded_float

logic this__split_fields98 : option

logic this__split_fields99 : float1

logic this__split_fields100 : float1

logic this__split_fields101 : bool

logic this__split_fields102 : bool

logic this__split_fields103 : (int,us_rep9) farray

logic this__split_fields104 : count_type

logic this__split_fields105 : us_main_type

logic this__split_fields106 : float1

logic this__split_fields107 : normalized2pi

logic this__split_fields108 : positive_float

logic this__split_fields109 : positive_float

logic this__split_fields110 : positive_float

logic this__split_fields111 : positive_float

logic this__split_fields112 : positive_float

logic this__split_fields113 : nonnegative_float

logic this__split_fields114 : nonnegative_float

logic this__split_fields115 : float1

logic this__split_fields116 : float1

logic this__split_fields117 : float1

logic this__split_fields118 : natural

logic this__split_fields119 : positive_float

logic this__split_fields120 : positive_float

logic this__split_fields121 : (int,nonnegative_float) farray

logic this__split_fields122 : unbounded_float

logic this__split_fields123 : unbounded_float

logic this__split_fields124 : unbounded_float

logic this__split_fields125 : option

logic this__split_fields126 : float1

logic this__split_fields127 : float1

logic this__split_fields128 : bool

logic this__split_fields129 : bool

logic this__split_fields130 : (int,us_rep9) farray

logic this__split_fields131 : count_type

logic this__split_fields132 : us_main_type

logic this__split_fields133 : float1

logic this__split_fields134 : normalized2pi

logic this__split_fields135 : positive_float

logic this__split_fields136 : positive_float

logic this__split_fields137 : positive_float

logic this__split_fields138 : positive_float

logic this__split_fields139 : positive_float

logic this__split_fields140 : nonnegative_float

logic this__split_fields141 : nonnegative_float

logic this__split_fields142 : float1

logic this__split_fields143 : float1

logic this__split_fields144 : float1

logic this__split_fields145 : natural

logic this__split_fields146 : positive_float

logic this__split_fields147 : positive_float

logic this__split_fields148 : (int,nonnegative_float) farray

logic this__split_fields149 : unbounded_float

logic this__split_fields150 : unbounded_float

logic this__split_fields151 : unbounded_float

logic this__split_fields152 : option

logic this__split_fields153 : float1

logic this__split_fields154 : float1

logic this__split_fields155 : bool

logic this__split_fields156 : bool

logic this__split_fields157 : (int,us_rep9) farray

logic this__split_fields158 : count_type

logic this__split_fields159 : us_main_type

logic this__split_fields160 : float1

logic this__split_fields161 : normalized2pi

logic relgoal__split_fields : float1

logic relgoal__split_fields1 : float1

logic relgoal__split_fields2 : normalized2pi

logic result30 : bool

logic result31 : bool

logic result32 : bool

logic this__split_fields162 : positive_float

logic this__split_fields163 : positive_float

logic this__split_fields164 : positive_float

logic this__split_fields165 : positive_float

logic this__split_fields166 : positive_float

logic this__split_fields167 : nonnegative_float

logic this__split_fields168 : nonnegative_float

logic this__split_fields169 : float1

logic this__split_fields170 : float1

logic this__split_fields171 : float1

logic this__split_fields172 : natural

logic this__split_fields173 : positive_float

logic this__split_fields174 : positive_float

logic this__split_fields175 : (int,nonnegative_float) farray

logic this__split_fields176 : unbounded_float

logic this__split_fields177 : unbounded_float

logic this__split_fields178 : unbounded_float

logic this__split_fields179 : option

logic this__split_fields180 : float1

logic this__split_fields181 : float1

logic this__split_fields182 : bool

logic this__split_fields183 : bool

logic this__split_fields184 : (int,us_rep9) farray

logic this__split_fields185 : count_type

logic this__split_fields186 : us_main_type

logic this__split_fields187 : float1

logic this__split_fields188 : normalized2pi

logic driveturnrate2 : t

logic this__split_fields189 : positive_float

logic this__split_fields190 : positive_float

logic this__split_fields191 : positive_float

logic this__split_fields192 : positive_float

logic this__split_fields193 : positive_float

logic this__split_fields194 : nonnegative_float

logic this__split_fields195 : nonnegative_float

logic this__split_fields196 : float1

logic this__split_fields197 : float1

logic this__split_fields198 : float1

logic this__split_fields199 : natural

logic this__split_fields200 : positive_float

logic this__split_fields201 : positive_float

logic this__split_fields202 : (int,nonnegative_float) farray

logic this__split_fields203 : unbounded_float

logic this__split_fields204 : unbounded_float

logic this__split_fields205 : unbounded_float

logic this__split_fields206 : option

logic this__split_fields207 : float1

logic this__split_fields208 : float1

logic this__split_fields209 : bool

logic this__split_fields210 : bool

logic this__split_fields211 : (int,us_rep9) farray

logic this__split_fields212 : count_type

logic this__split_fields213 : us_main_type

logic this__split_fields214 : float1

logic this__split_fields215 : normalized2pi

logic driveturnrate3 : t

logic this__split_fields216 : positive_float

logic this__split_fields217 : positive_float

logic this__split_fields218 : positive_float

logic this__split_fields219 : positive_float

logic this__split_fields220 : positive_float

logic this__split_fields221 : nonnegative_float

logic this__split_fields222 : nonnegative_float

logic this__split_fields223 : float1

logic this__split_fields224 : float1

logic this__split_fields225 : float1

logic this__split_fields226 : natural

logic this__split_fields227 : positive_float

logic this__split_fields228 : positive_float

logic this__split_fields229 : (int,nonnegative_float) farray

logic this__split_fields230 : unbounded_float

logic this__split_fields231 : unbounded_float

logic this__split_fields232 : unbounded_float

logic this__split_fields233 : option

logic this__split_fields234 : float1

logic this__split_fields235 : float1

logic this__split_fields236 : bool

logic this__split_fields237 : bool

logic this__split_fields238 : (int,us_rep9) farray

logic this__split_fields239 : count_type

logic this__split_fields240 : us_main_type

logic this__split_fields241 : float1

logic this__split_fields242 : normalized2pi

logic driveturnrate4 : t

logic this__split_fields243 : positive_float

logic this__split_fields244 : positive_float

logic this__split_fields245 : positive_float

logic this__split_fields246 : positive_float

logic this__split_fields247 : positive_float

logic this__split_fields248 : nonnegative_float

logic this__split_fields249 : nonnegative_float

logic this__split_fields250 : float1

logic this__split_fields251 : float1

logic this__split_fields252 : float1

logic this__split_fields253 : natural

logic this__split_fields254 : positive_float

logic this__split_fields255 : positive_float

logic this__split_fields256 : (int,nonnegative_float) farray

logic this__split_fields257 : unbounded_float

logic this__split_fields258 : unbounded_float

logic this__split_fields259 : unbounded_float

logic this__split_fields260 : option

logic this__split_fields261 : float1

logic this__split_fields262 : float1

logic this__split_fields263 : bool

logic this__split_fields264 : bool

logic this__split_fields265 : (int,us_rep9) farray

logic this__split_fields266 : count_type

logic this__split_fields267 : us_main_type

logic this__split_fields268 : float1

logic this__split_fields269 : normalized2pi

logic driveturnrate5 : t

logic result33 : float1

logic result34 : float1

logic disttogoal__split_fields2 : float1

logic disttogoal__split_fields3 : float1

logic result35 : t

logic disttoclosestobstacle1 : t

logic result36 : int

logic i4 : int

logic this__split_fields270 : positive_float

logic this__split_fields271 : positive_float

logic this__split_fields272 : positive_float

logic this__split_fields273 : positive_float

logic this__split_fields274 : positive_float

logic this__split_fields275 : nonnegative_float

logic this__split_fields276 : nonnegative_float

logic this__split_fields277 : float1

logic this__split_fields278 : float1

logic this__split_fields279 : float1

logic this__split_fields280 : natural

logic this__split_fields281 : positive_float

logic this__split_fields282 : positive_float

logic this__split_fields283 : (int,nonnegative_float) farray

logic this__split_fields284 : unbounded_float

logic this__split_fields285 : unbounded_float

logic this__split_fields286 : unbounded_float

logic this__split_fields287 : option

logic this__split_fields288 : float1

logic this__split_fields289 : float1

logic this__split_fields290 : bool

logic this__split_fields291 : bool

logic this__split_fields292 : (int,us_rep9) farray

logic this__split_fields293 : count_type

logic this__split_fields294 : us_main_type

logic this__split_fields295 : float1

logic this__split_fields296 : normalized2pi

logic disttoclosestobstacle2 : t

logic i5 : int

logic rho : positive_float

logic rho1 : positive_float

logic rho2 : positive_float

logic rho3 : positive_float

logic rho4 : positive_float

logic rho5 : nonnegative_float

logic rho6 : nonnegative_float

logic rho7 : float1

logic rho8 : float1

logic rho9 : float1

logic rho10 : natural

logic rho11 : positive_float

logic rho12 : positive_float

logic rho13 : (int,nonnegative_float) farray

logic rho14 : unbounded_float

logic rho15 : unbounded_float

logic rho16 : unbounded_float

logic rho17 : option

logic rho18 : float1

logic rho19 : float1

logic rho20 : bool

logic rho21 : bool

logic this__split_fields297 : positive_float

logic this__split_fields298 : positive_float

logic this__split_fields299 : positive_float

logic this__split_fields300 : positive_float

logic this__split_fields301 : positive_float

logic this__split_fields302 : nonnegative_float

logic this__split_fields303 : nonnegative_float

logic this__split_fields304 : float1

logic this__split_fields305 : float1

logic this__split_fields306 : float1

logic this__split_fields307 : natural

logic this__split_fields308 : positive_float

logic this__split_fields309 : positive_float

logic this__split_fields310 : (int,nonnegative_float) farray

logic this__split_fields311 : unbounded_float

logic this__split_fields312 : unbounded_float

logic this__split_fields313 : unbounded_float

logic this__split_fields314 : option

logic this__split_fields315 : float1

logic this__split_fields316 : float1

logic this__split_fields317 : bool

logic this__split_fields318 : bool

logic this__split_fields319 : (int,us_rep9) farray

logic this__split_fields320 : count_type

logic this__split_fields321 : us_main_type

logic this__split_fields322 : float1

logic this__split_fields323 : normalized2pi

logic this__split_fields324 : positive_float

logic this__split_fields325 : positive_float

logic this__split_fields326 : positive_float

logic this__split_fields327 : positive_float

logic this__split_fields328 : positive_float

logic this__split_fields329 : nonnegative_float

logic this__split_fields330 : nonnegative_float

logic this__split_fields331 : float1

logic this__split_fields332 : float1

logic this__split_fields333 : float1

logic this__split_fields334 : natural

logic this__split_fields335 : positive_float

logic this__split_fields336 : positive_float

logic this__split_fields337 : (int,nonnegative_float) farray

logic this__split_fields338 : unbounded_float

logic this__split_fields339 : unbounded_float

logic this__split_fields340 : unbounded_float

logic this__split_fields341 : option

logic this__split_fields342 : float1

logic this__split_fields343 : float1

logic this__split_fields344 : bool

logic this__split_fields345 : bool

logic this__split_fields346 : (int,us_rep9) farray

logic this__split_fields347 : count_type

logic this__split_fields348 : us_main_type

logic this__split_fields349 : float1

logic this__split_fields350 : normalized2pi

logic rho22 : positive_float

logic rho23 : positive_float

logic rho24 : positive_float

logic rho25 : positive_float

logic rho26 : positive_float

logic rho27 : nonnegative_float

logic rho28 : nonnegative_float

logic rho29 : float1

logic rho30 : float1

logic rho31 : float1

logic rho32 : natural

logic rho33 : positive_float

logic rho34 : positive_float

logic rho35 : (int,nonnegative_float) farray

logic rho36 : unbounded_float

logic rho37 : unbounded_float

logic rho38 : unbounded_float

logic rho39 : option

logic rho40 : float1

logic rho41 : float1

logic rho42 : bool

logic rho43 : bool

logic result37 : bool

logic result38 : t

logic disttoclosestobstacle3 : t

logic disttoclosestobstacle4 : t

logic disttoclosestobstacle5 : t

logic result39 : int

logic i6 : int

logic this__split_fields351 : positive_float

logic this__split_fields352 : positive_float

logic this__split_fields353 : positive_float

logic this__split_fields354 : positive_float

logic this__split_fields355 : positive_float

logic this__split_fields356 : nonnegative_float

logic this__split_fields357 : nonnegative_float

logic this__split_fields358 : float1

logic this__split_fields359 : float1

logic this__split_fields360 : float1

logic this__split_fields361 : natural

logic this__split_fields362 : positive_float

logic this__split_fields363 : positive_float

logic this__split_fields364 : (int,nonnegative_float) farray

logic this__split_fields365 : unbounded_float

logic this__split_fields366 : unbounded_float

logic this__split_fields367 : unbounded_float

logic this__split_fields368 : option

logic this__split_fields369 : float1

logic this__split_fields370 : float1

logic this__split_fields371 : bool

logic this__split_fields372 : bool

logic this__split_fields373 : (int,us_rep9) farray

logic this__split_fields374 : count_type

logic this__split_fields375 : us_main_type

logic this__split_fields376 : float1

logic this__split_fields377 : normalized2pi

logic disttoclosestobstacle6 : t

logic i7 : int

logic this__split_fields378 : positive_float

logic this__split_fields379 : positive_float

logic this__split_fields380 : positive_float

logic this__split_fields381 : positive_float

logic this__split_fields382 : positive_float

logic this__split_fields383 : nonnegative_float

logic this__split_fields384 : nonnegative_float

logic this__split_fields385 : float1

logic this__split_fields386 : float1

logic this__split_fields387 : float1

logic this__split_fields388 : natural

logic this__split_fields389 : positive_float

logic this__split_fields390 : positive_float

logic this__split_fields391 : (int,nonnegative_float) farray

logic this__split_fields392 : unbounded_float

logic this__split_fields393 : unbounded_float

logic this__split_fields394 : unbounded_float

logic this__split_fields395 : option

logic this__split_fields396 : float1

logic this__split_fields397 : float1

logic this__split_fields398 : bool

logic this__split_fields399 : bool

logic this__split_fields400 : (int,us_rep9) farray

logic this__split_fields401 : count_type

logic this__split_fields402 : us_main_type

logic this__split_fields403 : float1

logic this__split_fields404 : normalized2pi

logic disttoclosestobstacle7 : t

logic i8 : int

logic rho44 : positive_float

logic rho45 : positive_float

logic rho46 : positive_float

logic rho47 : positive_float

logic rho48 : positive_float

logic rho49 : nonnegative_float

logic rho50 : nonnegative_float

logic rho51 : float1

logic rho52 : float1

logic rho53 : float1

logic rho54 : natural

logic rho55 : positive_float

logic rho56 : positive_float

logic rho57 : (int,nonnegative_float) farray

logic rho58 : unbounded_float

logic rho59 : unbounded_float

logic rho60 : unbounded_float

logic rho61 : option

logic rho62 : float1

logic rho63 : float1

logic rho64 : bool

logic rho65 : bool

logic this__split_fields405 : positive_float

logic this__split_fields406 : positive_float

logic this__split_fields407 : positive_float

logic this__split_fields408 : positive_float

logic this__split_fields409 : positive_float

logic this__split_fields410 : nonnegative_float

logic this__split_fields411 : nonnegative_float

logic this__split_fields412 : float1

logic this__split_fields413 : float1

logic this__split_fields414 : float1

logic this__split_fields415 : natural

logic this__split_fields416 : positive_float

logic this__split_fields417 : positive_float

logic this__split_fields418 : (int,nonnegative_float) farray

logic this__split_fields419 : unbounded_float

logic this__split_fields420 : unbounded_float

logic this__split_fields421 : unbounded_float

logic this__split_fields422 : option

logic this__split_fields423 : float1

logic this__split_fields424 : float1

logic this__split_fields425 : bool

logic this__split_fields426 : bool

logic this__split_fields427 : (int,us_rep9) farray

logic this__split_fields428 : count_type

logic this__split_fields429 : us_main_type

logic this__split_fields430 : float1

logic this__split_fields431 : normalized2pi

logic disttoclosestobstacle8 : t

logic i9 : int

logic this__split_fields432 : positive_float

logic this__split_fields433 : positive_float

logic this__split_fields434 : positive_float

logic this__split_fields435 : positive_float

logic this__split_fields436 : positive_float

logic this__split_fields437 : nonnegative_float

logic this__split_fields438 : nonnegative_float

logic this__split_fields439 : float1

logic this__split_fields440 : float1

logic this__split_fields441 : float1

logic this__split_fields442 : natural

logic this__split_fields443 : positive_float

logic this__split_fields444 : positive_float

logic this__split_fields445 : (int,nonnegative_float) farray

logic this__split_fields446 : unbounded_float

logic this__split_fields447 : unbounded_float

logic this__split_fields448 : unbounded_float

logic this__split_fields449 : option

logic this__split_fields450 : float1

logic this__split_fields451 : float1

logic this__split_fields452 : bool

logic this__split_fields453 : bool

logic this__split_fields454 : (int,us_rep9) farray

logic this__split_fields455 : count_type

logic this__split_fields456 : us_main_type

logic this__split_fields457 : float1

logic this__split_fields458 : normalized2pi

logic disttoclosestobstacle9 : t

logic i10 : int

logic this__split_fields459 : positive_float

logic this__split_fields460 : positive_float

logic this__split_fields461 : positive_float

logic this__split_fields462 : positive_float

logic this__split_fields463 : positive_float

logic this__split_fields464 : nonnegative_float

logic this__split_fields465 : nonnegative_float

logic this__split_fields466 : float1

logic this__split_fields467 : float1

logic this__split_fields468 : float1

logic this__split_fields469 : natural

logic this__split_fields470 : positive_float

logic this__split_fields471 : positive_float

logic this__split_fields472 : (int,nonnegative_float) farray

logic this__split_fields473 : unbounded_float

logic this__split_fields474 : unbounded_float

logic this__split_fields475 : unbounded_float

logic this__split_fields476 : option

logic this__split_fields477 : float1

logic this__split_fields478 : float1

logic this__split_fields479 : bool

logic this__split_fields480 : bool

logic this__split_fields481 : (int,us_rep9) farray

logic this__split_fields482 : count_type

logic this__split_fields483 : us_main_type

logic this__split_fields484 : float1

logic this__split_fields485 : normalized2pi

logic disttoclosestobstacle10 : t

logic i11 : int

logic this__split_fields486 : positive_float

logic this__split_fields487 : positive_float

logic this__split_fields488 : positive_float

logic this__split_fields489 : positive_float

logic this__split_fields490 : positive_float

logic this__split_fields491 : nonnegative_float

logic this__split_fields492 : nonnegative_float

logic this__split_fields493 : float1

logic this__split_fields494 : float1

logic this__split_fields495 : float1

logic this__split_fields496 : natural

logic this__split_fields497 : positive_float

logic this__split_fields498 : positive_float

logic this__split_fields499 : (int,nonnegative_float) farray

logic this__split_fields500 : unbounded_float

logic this__split_fields501 : unbounded_float

logic this__split_fields502 : unbounded_float

logic this__split_fields503 : option

logic this__split_fields504 : float1

logic this__split_fields505 : float1

logic this__split_fields506 : bool

logic this__split_fields507 : bool

logic this__split_fields508 : (int,us_rep9) farray

logic this__split_fields509 : count_type

logic this__split_fields510 : us_main_type

logic this__split_fields511 : float1

logic this__split_fields512 : normalized2pi

logic disttoclosestobstacle11 : t

logic i12 : int

logic this__split_fields513 : positive_float

logic this__split_fields514 : positive_float

logic this__split_fields515 : positive_float

logic this__split_fields516 : positive_float

logic this__split_fields517 : positive_float

logic this__split_fields518 : nonnegative_float

logic this__split_fields519 : nonnegative_float

logic this__split_fields520 : float1

logic this__split_fields521 : float1

logic this__split_fields522 : float1

logic this__split_fields523 : natural

logic this__split_fields524 : positive_float

logic this__split_fields525 : positive_float

logic this__split_fields526 : (int,nonnegative_float) farray

logic this__split_fields527 : unbounded_float

logic this__split_fields528 : unbounded_float

logic this__split_fields529 : unbounded_float

logic this__split_fields530 : option

logic this__split_fields531 : float1

logic this__split_fields532 : float1

logic this__split_fields533 : bool

logic this__split_fields534 : bool

logic this__split_fields535 : (int,us_rep9) farray

logic this__split_fields536 : count_type

logic this__split_fields537 : us_main_type

logic this__split_fields538 : float1

logic this__split_fields539 : normalized2pi

logic disttoclosestobstacle12 : t

logic i13 : int

logic this__split_fields540 : positive_float

logic this__split_fields541 : positive_float

logic this__split_fields542 : positive_float

logic this__split_fields543 : positive_float

logic this__split_fields544 : positive_float

logic this__split_fields545 : nonnegative_float

logic this__split_fields546 : nonnegative_float

logic this__split_fields547 : float1

logic this__split_fields548 : float1

logic this__split_fields549 : float1

logic this__split_fields550 : natural

logic this__split_fields551 : positive_float

logic this__split_fields552 : positive_float

logic this__split_fields553 : (int,nonnegative_float) farray

logic this__split_fields554 : unbounded_float

logic this__split_fields555 : unbounded_float

logic this__split_fields556 : unbounded_float

logic this__split_fields557 : option

logic this__split_fields558 : float1

logic this__split_fields559 : float1

logic this__split_fields560 : bool

logic this__split_fields561 : bool

logic this__split_fields562 : (int,us_rep9) farray

logic this__split_fields563 : count_type

logic this__split_fields564 : us_main_type

logic this__split_fields565 : float1

logic this__split_fields566 : normalized2pi

logic disttoclosestobstacle13 : t

logic i14 : int

logic result40 : t

logic safetydist1 : t

logic algorithm__buildgapvector__gapvec__fields : us_main_type

logic result41 : positive_float

logic result42 : positive_float

logic result43 : positive_float

logic result44 : positive_float

logic result45 : positive_float

logic result46 : nonnegative_float

logic result47 : nonnegative_float

logic result48 : float1

logic result49 : float1

logic result50 : float1

logic result51 : natural

logic result52 : positive_float

logic result53 : positive_float

logic result54 : (int,nonnegative_float) farray

logic result55 : unbounded_float

logic result56 : unbounded_float

logic result57 : unbounded_float

logic result58 : option

logic result59 : float1

logic result60 : float1

logic result61 : bool

logic result62 : bool

logic result63 : (int,us_rep9) farray

logic result64 : count_type

logic result65 : us_main_type

logic result66 : float1

logic result67 : normalized2pi

logic this__split_fields567 : positive_float

logic this__split_fields568 : positive_float

logic this__split_fields569 : positive_float

logic this__split_fields570 : positive_float

logic this__split_fields571 : positive_float

logic this__split_fields572 : nonnegative_float

logic this__split_fields573 : nonnegative_float

logic this__split_fields574 : float1

logic this__split_fields575 : float1

logic this__split_fields576 : float1

logic this__split_fields577 : natural

logic this__split_fields578 : positive_float

logic this__split_fields579 : positive_float

logic this__split_fields580 : (int,nonnegative_float) farray

logic this__split_fields581 : unbounded_float

logic this__split_fields582 : unbounded_float

logic this__split_fields583 : unbounded_float

logic this__split_fields584 : option

logic this__split_fields585 : float1

logic this__split_fields586 : float1

logic this__split_fields587 : bool

logic this__split_fields588 : bool

logic this__split_fields589 : (int,us_rep9) farray

logic this__split_fields590 : count_type

logic this__split_fields591 : us_main_type

logic this__split_fields592 : float1

logic this__split_fields593 : normalized2pi

logic this__split_fields594 : positive_float

logic this__split_fields595 : positive_float

logic this__split_fields596 : positive_float

logic this__split_fields597 : positive_float

logic this__split_fields598 : positive_float

logic this__split_fields599 : nonnegative_float

logic this__split_fields600 : nonnegative_float

logic this__split_fields601 : float1

logic this__split_fields602 : float1

logic this__split_fields603 : float1

logic this__split_fields604 : natural

logic this__split_fields605 : positive_float

logic this__split_fields606 : positive_float

logic this__split_fields607 : (int,nonnegative_float) farray

logic this__split_fields608 : unbounded_float

logic this__split_fields609 : unbounded_float

logic this__split_fields610 : unbounded_float

logic this__split_fields611 : option

logic this__split_fields612 : float1

logic this__split_fields613 : float1

logic this__split_fields614 : bool

logic this__split_fields615 : bool

logic this__split_fields616 : (int,us_rep9) farray

logic this__split_fields617 : count_type

logic this__split_fields618 : us_main_type

logic this__split_fields619 : float1

logic this__split_fields620 : normalized2pi

logic result68 : normalized2pi

logic result69 : float1

logic result70 : idir_t

logic result71 : normalized2pi

logic result72 : float1

logic result73 : idir_t

logic pbestvalley__split_fields6 : normalized2pi

logic pbestvalley__split_fields7 : float1

logic pbestvalley__split_fields8 : idir_t

logic pbestvalley__split_fields9 : normalized2pi

logic pbestvalley__split_fields10 : float1

logic pbestvalley__split_fields11 : idir_t

logic result74 : option1

logic pbestvalley__split_discrs1 : option1

logic result75 : bool

logic result76 : positive_float

logic result77 : positive_float

logic result78 : positive_float

logic result79 : positive_float

logic result80 : positive_float

logic result81 : nonnegative_float

logic result82 : nonnegative_float

logic result83 : float1

logic result84 : float1

logic result85 : float1

logic result86 : natural

logic result87 : positive_float

logic result88 : positive_float

logic result89 : (int,nonnegative_float) farray

logic result90 : unbounded_float

logic result91 : unbounded_float

logic result92 : unbounded_float

logic result93 : option

logic result94 : float1

logic result95 : float1

logic result96 : bool

logic result97 : bool

logic result98 : (int,us_rep9) farray

logic result99 : count_type

logic result100 : us_main_type

logic result101 : float1

logic result102 : normalized2pi

logic this__split_fields621 : positive_float

logic this__split_fields622 : positive_float

logic this__split_fields623 : positive_float

logic this__split_fields624 : positive_float

logic this__split_fields625 : positive_float

logic this__split_fields626 : nonnegative_float

logic this__split_fields627 : nonnegative_float

logic this__split_fields628 : float1

logic this__split_fields629 : float1

logic this__split_fields630 : float1

logic this__split_fields631 : natural

logic this__split_fields632 : positive_float

logic this__split_fields633 : positive_float

logic this__split_fields634 : (int,nonnegative_float) farray

logic this__split_fields635 : unbounded_float

logic this__split_fields636 : unbounded_float

logic this__split_fields637 : unbounded_float

logic this__split_fields638 : option

logic this__split_fields639 : float1

logic this__split_fields640 : float1

logic this__split_fields641 : bool

logic this__split_fields642 : bool

logic this__split_fields643 : (int,us_rep9) farray

logic this__split_fields644 : count_type

logic this__split_fields645 : us_main_type

logic this__split_fields646 : float1

logic this__split_fields647 : normalized2pi

logic result103 : positive_float

logic result104 : positive_float

logic result105 : positive_float

logic result106 : positive_float

logic result107 : positive_float

logic result108 : nonnegative_float

logic result109 : nonnegative_float

logic result110 : float1

logic result111 : float1

logic result112 : float1

logic result113 : natural

logic result114 : positive_float

logic result115 : positive_float

logic result116 : (int,nonnegative_float) farray

logic result117 : unbounded_float

logic result118 : unbounded_float

logic result119 : unbounded_float

logic result120 : option

logic result121 : float1

logic result122 : float1

logic result123 : bool

logic result124 : bool

logic result125 : (int,us_rep9) farray

logic result126 : count_type

logic result127 : us_main_type

logic result128 : float1

logic result129 : normalized2pi

logic this__split_fields648 : positive_float

logic this__split_fields649 : positive_float

logic this__split_fields650 : positive_float

logic this__split_fields651 : positive_float

logic this__split_fields652 : positive_float

logic this__split_fields653 : nonnegative_float

logic this__split_fields654 : nonnegative_float

logic this__split_fields655 : float1

logic this__split_fields656 : float1

logic this__split_fields657 : float1

logic this__split_fields658 : natural

logic this__split_fields659 : positive_float

logic this__split_fields660 : positive_float

logic this__split_fields661 : (int,nonnegative_float) farray

logic this__split_fields662 : unbounded_float

logic this__split_fields663 : unbounded_float

logic this__split_fields664 : unbounded_float

logic this__split_fields665 : option

logic this__split_fields666 : float1

logic this__split_fields667 : float1

logic this__split_fields668 : bool

logic this__split_fields669 : bool

logic this__split_fields670 : (int,us_rep9) farray

logic this__split_fields671 : count_type

logic this__split_fields672 : us_main_type

logic this__split_fields673 : float1

logic this__split_fields674 : normalized2pi

logic result130 : normalized2pi

logic saferisinggapangle__split_fields2 : normalized2pi

logic result131 : normalized2pi

logic midvalleyangle__split_fields2 : normalized2pi

logic result132 : normalized2pi

logic midvalleyangle__split_fields3 : normalized2pi

logic midvalleyangle__split_fields4 : normalized2pi

logic midvalleyangle__split_fields5 : normalized2pi

logic result133 : bool

logic result134 : positive_float

logic result135 : positive_float

logic result136 : positive_float

logic result137 : positive_float

logic result138 : positive_float

logic result139 : nonnegative_float

logic result140 : nonnegative_float

logic result141 : float1

logic result142 : float1

logic result143 : float1

logic result144 : natural

logic result145 : positive_float

logic result146 : positive_float

logic result147 : (int,nonnegative_float) farray

logic result148 : unbounded_float

logic result149 : unbounded_float

logic result150 : unbounded_float

logic result151 : option

logic result152 : float1

logic result153 : float1

logic result154 : bool

logic result155 : bool

logic result156 : (int,us_rep9) farray

logic result157 : count_type

logic result158 : us_main_type

logic result159 : float1

logic result160 : normalized2pi

logic this__split_fields675 : positive_float

logic this__split_fields676 : positive_float

logic this__split_fields677 : positive_float

logic this__split_fields678 : positive_float

logic this__split_fields679 : positive_float

logic this__split_fields680 : nonnegative_float

logic this__split_fields681 : nonnegative_float

logic this__split_fields682 : float1

logic this__split_fields683 : float1

logic this__split_fields684 : float1

logic this__split_fields685 : natural

logic this__split_fields686 : positive_float

logic this__split_fields687 : positive_float

logic this__split_fields688 : (int,nonnegative_float) farray

logic this__split_fields689 : unbounded_float

logic this__split_fields690 : unbounded_float

logic this__split_fields691 : unbounded_float

logic this__split_fields692 : option

logic this__split_fields693 : float1

logic this__split_fields694 : float1

logic this__split_fields695 : bool

logic this__split_fields696 : bool

logic this__split_fields697 : (int,us_rep9) farray

logic this__split_fields698 : count_type

logic this__split_fields699 : us_main_type

logic this__split_fields700 : float1

logic this__split_fields701 : normalized2pi

logic result161 : positive_float

logic result162 : positive_float

logic result163 : positive_float

logic result164 : positive_float

logic result165 : positive_float

logic result166 : nonnegative_float

logic result167 : nonnegative_float

logic result168 : float1

logic result169 : float1

logic result170 : float1

logic result171 : natural

logic result172 : positive_float

logic result173 : positive_float

logic result174 : (int,nonnegative_float) farray

logic result175 : unbounded_float

logic result176 : unbounded_float

logic result177 : unbounded_float

logic result178 : option

logic result179 : float1

logic result180 : float1

logic result181 : bool

logic result182 : bool

logic result183 : (int,us_rep9) farray

logic result184 : count_type

logic result185 : us_main_type

logic result186 : float1

logic result187 : normalized2pi

logic this__split_fields702 : positive_float

logic this__split_fields703 : positive_float

logic this__split_fields704 : positive_float

logic this__split_fields705 : positive_float

logic this__split_fields706 : positive_float

logic this__split_fields707 : nonnegative_float

logic this__split_fields708 : nonnegative_float

logic this__split_fields709 : float1

logic this__split_fields710 : float1

logic this__split_fields711 : float1

logic this__split_fields712 : natural

logic this__split_fields713 : positive_float

logic this__split_fields714 : positive_float

logic this__split_fields715 : (int,nonnegative_float) farray

logic this__split_fields716 : unbounded_float

logic this__split_fields717 : unbounded_float

logic this__split_fields718 : unbounded_float

logic this__split_fields719 : option

logic this__split_fields720 : float1

logic this__split_fields721 : float1

logic this__split_fields722 : bool

logic this__split_fields723 : bool

logic this__split_fields724 : (int,us_rep9) farray

logic this__split_fields725 : count_type

logic this__split_fields726 : us_main_type

logic this__split_fields727 : float1

logic this__split_fields728 : normalized2pi

logic this__split_fields729 : positive_float

logic this__split_fields730 : positive_float

logic this__split_fields731 : positive_float

logic this__split_fields732 : positive_float

logic this__split_fields733 : positive_float

logic this__split_fields734 : nonnegative_float

logic this__split_fields735 : nonnegative_float

logic this__split_fields736 : float1

logic this__split_fields737 : float1

logic this__split_fields738 : float1

logic this__split_fields739 : natural

logic this__split_fields740 : positive_float

logic this__split_fields741 : positive_float

logic this__split_fields742 : (int,nonnegative_float) farray

logic this__split_fields743 : unbounded_float

logic this__split_fields744 : unbounded_float

logic this__split_fields745 : unbounded_float

logic this__split_fields746 : option

logic this__split_fields747 : float1

logic this__split_fields748 : float1

logic this__split_fields749 : bool

logic this__split_fields750 : bool

logic this__split_fields751 : (int,us_rep9) farray

logic this__split_fields752 : count_type

logic this__split_fields753 : us_main_type

logic this__split_fields754 : float1

logic this__split_fields755 : normalized2pi

logic this__split_fields756 : positive_float

logic this__split_fields757 : positive_float

logic this__split_fields758 : positive_float

logic this__split_fields759 : positive_float

logic this__split_fields760 : positive_float

logic this__split_fields761 : nonnegative_float

logic this__split_fields762 : nonnegative_float

logic this__split_fields763 : float1

logic this__split_fields764 : float1

logic this__split_fields765 : float1

logic this__split_fields766 : natural

logic this__split_fields767 : positive_float

logic this__split_fields768 : positive_float

logic this__split_fields769 : (int,nonnegative_float) farray

logic this__split_fields770 : unbounded_float

logic this__split_fields771 : unbounded_float

logic this__split_fields772 : unbounded_float

logic this__split_fields773 : option

logic this__split_fields774 : float1

logic this__split_fields775 : float1

logic this__split_fields776 : bool

logic this__split_fields777 : bool

logic this__split_fields778 : (int,us_rep9) farray

logic this__split_fields779 : count_type

logic this__split_fields780 : us_main_type

logic this__split_fields781 : float1

logic this__split_fields782 : normalized2pi

logic this__split_fields783 : positive_float

logic this__split_fields784 : positive_float

logic this__split_fields785 : positive_float

logic this__split_fields786 : positive_float

logic this__split_fields787 : positive_float

logic this__split_fields788 : nonnegative_float

logic this__split_fields789 : nonnegative_float

logic this__split_fields790 : float1

logic this__split_fields791 : float1

logic this__split_fields792 : float1

logic this__split_fields793 : natural

logic this__split_fields794 : positive_float

logic this__split_fields795 : positive_float

logic this__split_fields796 : (int,nonnegative_float) farray

logic this__split_fields797 : unbounded_float

logic this__split_fields798 : unbounded_float

logic this__split_fields799 : unbounded_float

logic this__split_fields800 : option

logic this__split_fields801 : float1

logic this__split_fields802 : float1

logic this__split_fields803 : bool

logic this__split_fields804 : bool

logic this__split_fields805 : (int,us_rep9) farray

logic this__split_fields806 : count_type

logic this__split_fields807 : us_main_type

logic this__split_fields808 : float1

logic this__split_fields809 : normalized2pi

logic driveturnrate6 : t

logic saferisinggapangle__split_fields3 : normalized2pi

logic midvalleyangle__split_fields6 : normalized2pi

logic this__split_fields810 : positive_float

logic this__split_fields811 : positive_float

logic this__split_fields812 : positive_float

logic this__split_fields813 : positive_float

logic this__split_fields814 : positive_float

logic this__split_fields815 : nonnegative_float

logic this__split_fields816 : nonnegative_float

logic this__split_fields817 : float1

logic this__split_fields818 : float1

logic this__split_fields819 : float1

logic this__split_fields820 : natural

logic this__split_fields821 : positive_float

logic this__split_fields822 : positive_float

logic this__split_fields823 : (int,nonnegative_float) farray

logic this__split_fields824 : unbounded_float

logic this__split_fields825 : unbounded_float

logic this__split_fields826 : unbounded_float

logic this__split_fields827 : option

logic this__split_fields828 : float1

logic this__split_fields829 : float1

logic this__split_fields830 : bool

logic this__split_fields831 : bool

logic this__split_fields832 : (int,us_rep9) farray

logic this__split_fields833 : count_type

logic this__split_fields834 : us_main_type

logic this__split_fields835 : float1

logic this__split_fields836 : normalized2pi

logic driveturnrate7 : t

logic saferisinggapangle__split_fields4 : normalized2pi

logic midvalleyangle__split_fields7 : normalized2pi

logic this__split_fields837 : positive_float

logic this__split_fields838 : positive_float

logic this__split_fields839 : positive_float

logic this__split_fields840 : positive_float

logic this__split_fields841 : positive_float

logic this__split_fields842 : nonnegative_float

logic this__split_fields843 : nonnegative_float

logic this__split_fields844 : float1

logic this__split_fields845 : float1

logic this__split_fields846 : float1

logic this__split_fields847 : natural

logic this__split_fields848 : positive_float

logic this__split_fields849 : positive_float

logic this__split_fields850 : (int,nonnegative_float) farray

logic this__split_fields851 : unbounded_float

logic this__split_fields852 : unbounded_float

logic this__split_fields853 : unbounded_float

logic this__split_fields854 : option

logic this__split_fields855 : float1

logic this__split_fields856 : float1

logic this__split_fields857 : bool

logic this__split_fields858 : bool

logic this__split_fields859 : (int,us_rep9) farray

logic this__split_fields860 : count_type

logic this__split_fields861 : us_main_type

logic this__split_fields862 : float1

logic this__split_fields863 : normalized2pi

logic driveturnrate8 : t

logic saferisinggapangle__split_fields5 : normalized2pi

logic midvalleyangle__split_fields8 : normalized2pi

logic this__split_fields864 : positive_float

logic this__split_fields865 : positive_float

logic this__split_fields866 : positive_float

logic this__split_fields867 : positive_float

logic this__split_fields868 : positive_float

logic this__split_fields869 : nonnegative_float

logic this__split_fields870 : nonnegative_float

logic this__split_fields871 : float1

logic this__split_fields872 : float1

logic this__split_fields873 : float1

logic this__split_fields874 : natural

logic this__split_fields875 : positive_float

logic this__split_fields876 : positive_float

logic this__split_fields877 : (int,nonnegative_float) farray

logic this__split_fields878 : unbounded_float

logic this__split_fields879 : unbounded_float

logic this__split_fields880 : unbounded_float

logic this__split_fields881 : option

logic this__split_fields882 : float1

logic this__split_fields883 : float1

logic this__split_fields884 : bool

logic this__split_fields885 : bool

logic this__split_fields886 : (int,us_rep9) farray

logic this__split_fields887 : count_type

logic this__split_fields888 : us_main_type

logic this__split_fields889 : float1

logic this__split_fields890 : normalized2pi

logic driveturnrate9 : t

logic saferisinggapangle__split_fields6 : normalized2pi

logic midvalleyangle__split_fields9 : normalized2pi

logic result188 : positive_float

logic result189 : positive_float

logic result190 : positive_float

logic result191 : positive_float

logic result192 : positive_float

logic result193 : nonnegative_float

logic result194 : nonnegative_float

logic result195 : float1

logic result196 : float1

logic result197 : float1

logic result198 : natural

logic result199 : positive_float

logic result200 : positive_float

logic result201 : (int,nonnegative_float) farray

logic result202 : unbounded_float

logic result203 : unbounded_float

logic result204 : unbounded_float

logic result205 : option

logic result206 : float1

logic result207 : float1

logic result208 : bool

logic result209 : bool

logic result210 : (int,us_rep9) farray

logic result211 : count_type

logic result212 : us_main_type

logic result213 : float1

logic result214 : normalized2pi

logic this__split_fields891 : positive_float

logic this__split_fields892 : positive_float

logic this__split_fields893 : positive_float

logic this__split_fields894 : positive_float

logic this__split_fields895 : positive_float

logic this__split_fields896 : nonnegative_float

logic this__split_fields897 : nonnegative_float

logic this__split_fields898 : float1

logic this__split_fields899 : float1

logic this__split_fields900 : float1

logic this__split_fields901 : natural

logic this__split_fields902 : positive_float

logic this__split_fields903 : positive_float

logic this__split_fields904 : (int,nonnegative_float) farray

logic this__split_fields905 : unbounded_float

logic this__split_fields906 : unbounded_float

logic this__split_fields907 : unbounded_float

logic this__split_fields908 : option

logic this__split_fields909 : float1

logic this__split_fields910 : float1

logic this__split_fields911 : bool

logic this__split_fields912 : bool

logic this__split_fields913 : (int,us_rep9) farray

logic this__split_fields914 : count_type

logic this__split_fields915 : us_main_type

logic this__split_fields916 : float1

logic this__split_fields917 : normalized2pi

logic result215 : bool

logic result216 : positive_float

logic result217 : positive_float

logic result218 : positive_float

logic result219 : positive_float

logic result220 : positive_float

logic result221 : nonnegative_float

logic result222 : nonnegative_float

logic result223 : float1

logic result224 : float1

logic result225 : float1

logic result226 : natural

logic result227 : positive_float

logic result228 : positive_float

logic result229 : (int,nonnegative_float) farray

logic result230 : unbounded_float

logic result231 : unbounded_float

logic result232 : unbounded_float

logic result233 : option

logic result234 : float1

logic result235 : float1

logic result236 : bool

logic result237 : bool

logic result238 : (int,us_rep9) farray

logic result239 : count_type

logic result240 : us_main_type

logic result241 : float1

logic result242 : normalized2pi

logic this__split_fields918 : positive_float

logic this__split_fields919 : positive_float

logic this__split_fields920 : positive_float

logic this__split_fields921 : positive_float

logic this__split_fields922 : positive_float

logic this__split_fields923 : nonnegative_float

logic this__split_fields924 : nonnegative_float

logic this__split_fields925 : float1

logic this__split_fields926 : float1

logic this__split_fields927 : float1

logic this__split_fields928 : natural

logic this__split_fields929 : positive_float

logic this__split_fields930 : positive_float

logic this__split_fields931 : (int,nonnegative_float) farray

logic this__split_fields932 : unbounded_float

logic this__split_fields933 : unbounded_float

logic this__split_fields934 : unbounded_float

logic this__split_fields935 : option

logic this__split_fields936 : float1

logic this__split_fields937 : float1

logic this__split_fields938 : bool

logic this__split_fields939 : bool

logic this__split_fields940 : (int,us_rep9) farray

logic this__split_fields941 : count_type

logic this__split_fields942 : us_main_type

logic this__split_fields943 : float1

logic this__split_fields944 : normalized2pi

logic result243 : bool

logic result244 : positive_float

logic result245 : positive_float

logic result246 : positive_float

logic result247 : positive_float

logic result248 : positive_float

logic result249 : nonnegative_float

logic result250 : nonnegative_float

logic result251 : float1

logic result252 : float1

logic result253 : float1

logic result254 : natural

logic result255 : positive_float

logic result256 : positive_float

logic result257 : (int,nonnegative_float) farray

logic result258 : unbounded_float

logic result259 : unbounded_float

logic result260 : unbounded_float

logic result261 : option

logic result262 : float1

logic result263 : float1

logic result264 : bool

logic result265 : bool

logic result266 : (int,us_rep9) farray

logic result267 : count_type

logic result268 : us_main_type

logic result269 : float1

logic result270 : normalized2pi

logic this__split_fields945 : positive_float

logic this__split_fields946 : positive_float

logic this__split_fields947 : positive_float

logic this__split_fields948 : positive_float

logic this__split_fields949 : positive_float

logic this__split_fields950 : nonnegative_float

logic this__split_fields951 : nonnegative_float

logic this__split_fields952 : float1

logic this__split_fields953 : float1

logic this__split_fields954 : float1

logic this__split_fields955 : natural

logic this__split_fields956 : positive_float

logic this__split_fields957 : positive_float

logic this__split_fields958 : (int,nonnegative_float) farray

logic this__split_fields959 : unbounded_float

logic this__split_fields960 : unbounded_float

logic this__split_fields961 : unbounded_float

logic this__split_fields962 : option

logic this__split_fields963 : float1

logic this__split_fields964 : float1

logic this__split_fields965 : bool

logic this__split_fields966 : bool

logic this__split_fields967 : (int,us_rep9) farray

logic this__split_fields968 : count_type

logic this__split_fields969 : us_main_type

logic this__split_fields970 : float1

logic this__split_fields971 : normalized2pi

logic this__split_fields972 : positive_float

logic this__split_fields973 : positive_float

logic this__split_fields974 : positive_float

logic this__split_fields975 : positive_float

logic this__split_fields976 : positive_float

logic this__split_fields977 : nonnegative_float

logic this__split_fields978 : nonnegative_float

logic this__split_fields979 : float1

logic this__split_fields980 : float1

logic this__split_fields981 : float1

logic this__split_fields982 : natural

logic this__split_fields983 : positive_float

logic this__split_fields984 : positive_float

logic this__split_fields985 : (int,nonnegative_float) farray

logic this__split_fields986 : unbounded_float

logic this__split_fields987 : unbounded_float

logic this__split_fields988 : unbounded_float

logic this__split_fields989 : option

logic this__split_fields990 : float1

logic this__split_fields991 : float1

logic this__split_fields992 : bool

logic this__split_fields993 : bool

logic this__split_fields994 : (int,us_rep9) farray

logic this__split_fields995 : count_type

logic this__split_fields996 : us_main_type

logic this__split_fields997 : float1

logic this__split_fields998 : normalized2pi

logic this__split_fields999 : positive_float

logic this__split_fields1000 : positive_float

logic this__split_fields1001 : positive_float

logic this__split_fields1002 : positive_float

logic this__split_fields1003 : positive_float

logic this__split_fields1004 : nonnegative_float

logic this__split_fields1005 : nonnegative_float

logic this__split_fields1006 : float1

logic this__split_fields1007 : float1

logic this__split_fields1008 : float1

logic this__split_fields1009 : natural

logic this__split_fields1010 : positive_float

logic this__split_fields1011 : positive_float

logic this__split_fields1012 : (int,nonnegative_float) farray

logic this__split_fields1013 : unbounded_float

logic this__split_fields1014 : unbounded_float

logic this__split_fields1015 : unbounded_float

logic this__split_fields1016 : option

logic this__split_fields1017 : float1

logic this__split_fields1018 : float1

logic this__split_fields1019 : bool

logic this__split_fields1020 : bool

logic this__split_fields1021 : (int,us_rep9) farray

logic this__split_fields1022 : count_type

logic this__split_fields1023 : us_main_type

logic this__split_fields1024 : float1

logic this__split_fields1025 : normalized2pi

logic result271 : bool

logic result272 : positive_float

logic result273 : positive_float

logic result274 : positive_float

logic result275 : positive_float

logic result276 : positive_float

logic result277 : nonnegative_float

logic result278 : nonnegative_float

logic result279 : float1

logic result280 : float1

logic result281 : float1

logic result282 : natural

logic result283 : positive_float

logic result284 : positive_float

logic result285 : (int,nonnegative_float) farray

logic result286 : unbounded_float

logic result287 : unbounded_float

logic result288 : unbounded_float

logic result289 : option

logic result290 : float1

logic result291 : float1

logic result292 : bool

logic result293 : bool

logic result294 : (int,us_rep9) farray

logic result295 : count_type

logic result296 : us_main_type

logic result297 : float1

logic result298 : normalized2pi

logic this__split_fields1026 : positive_float

logic this__split_fields1027 : positive_float

logic this__split_fields1028 : positive_float

logic this__split_fields1029 : positive_float

logic this__split_fields1030 : positive_float

logic this__split_fields1031 : nonnegative_float

logic this__split_fields1032 : nonnegative_float

logic this__split_fields1033 : float1

logic this__split_fields1034 : float1

logic this__split_fields1035 : float1

logic this__split_fields1036 : natural

logic this__split_fields1037 : positive_float

logic this__split_fields1038 : positive_float

logic this__split_fields1039 : (int,nonnegative_float) farray

logic this__split_fields1040 : unbounded_float

logic this__split_fields1041 : unbounded_float

logic this__split_fields1042 : unbounded_float

logic this__split_fields1043 : option

logic this__split_fields1044 : float1

logic this__split_fields1045 : float1

logic this__split_fields1046 : bool

logic this__split_fields1047 : bool

logic this__split_fields1048 : (int,us_rep9) farray

logic this__split_fields1049 : count_type

logic this__split_fields1050 : us_main_type

logic this__split_fields1051 : float1

logic this__split_fields1052 : normalized2pi

logic result299 : bool

logic result300 : positive_float

logic result301 : positive_float

logic result302 : positive_float

logic result303 : positive_float

logic result304 : positive_float

logic result305 : nonnegative_float

logic result306 : nonnegative_float

logic result307 : float1

logic result308 : float1

logic result309 : float1

logic result310 : natural

logic result311 : positive_float

logic result312 : positive_float

logic result313 : (int,nonnegative_float) farray

logic result314 : unbounded_float

logic result315 : unbounded_float

logic result316 : unbounded_float

logic result317 : option

logic result318 : float1

logic result319 : float1

logic result320 : bool

logic result321 : bool

logic result322 : (int,us_rep9) farray

logic result323 : count_type

logic result324 : us_main_type

logic result325 : float1

logic result326 : normalized2pi

logic this__split_fields1053 : positive_float

logic this__split_fields1054 : positive_float

logic this__split_fields1055 : positive_float

logic this__split_fields1056 : positive_float

logic this__split_fields1057 : positive_float

logic this__split_fields1058 : nonnegative_float

logic this__split_fields1059 : nonnegative_float

logic this__split_fields1060 : float1

logic this__split_fields1061 : float1

logic this__split_fields1062 : float1

logic this__split_fields1063 : natural

logic this__split_fields1064 : positive_float

logic this__split_fields1065 : positive_float

logic this__split_fields1066 : (int,nonnegative_float) farray

logic this__split_fields1067 : unbounded_float

logic this__split_fields1068 : unbounded_float

logic this__split_fields1069 : unbounded_float

logic this__split_fields1070 : option

logic this__split_fields1071 : float1

logic this__split_fields1072 : float1

logic this__split_fields1073 : bool

logic this__split_fields1074 : bool

logic this__split_fields1075 : (int,us_rep9) farray

logic this__split_fields1076 : count_type

logic this__split_fields1077 : us_main_type

logic this__split_fields1078 : float1

logic this__split_fields1079 : normalized2pi

logic this__split_fields1080 : positive_float

logic this__split_fields1081 : positive_float

logic this__split_fields1082 : positive_float

logic this__split_fields1083 : positive_float

logic this__split_fields1084 : positive_float

logic this__split_fields1085 : nonnegative_float

logic this__split_fields1086 : nonnegative_float

logic this__split_fields1087 : float1

logic this__split_fields1088 : float1

logic this__split_fields1089 : float1

logic this__split_fields1090 : natural

logic this__split_fields1091 : positive_float

logic this__split_fields1092 : positive_float

logic this__split_fields1093 : (int,nonnegative_float) farray

logic this__split_fields1094 : unbounded_float

logic this__split_fields1095 : unbounded_float

logic this__split_fields1096 : unbounded_float

logic this__split_fields1097 : option

logic this__split_fields1098 : float1

logic this__split_fields1099 : float1

logic this__split_fields1100 : bool

logic this__split_fields1101 : bool

logic this__split_fields1102 : (int,us_rep9) farray

logic this__split_fields1103 : count_type

logic this__split_fields1104 : us_main_type

logic this__split_fields1105 : float1

logic this__split_fields1106 : normalized2pi

logic this__split_fields1107 : positive_float

logic this__split_fields1108 : positive_float

logic this__split_fields1109 : positive_float

logic this__split_fields1110 : positive_float

logic this__split_fields1111 : positive_float

logic this__split_fields1112 : nonnegative_float

logic this__split_fields1113 : nonnegative_float

logic this__split_fields1114 : float1

logic this__split_fields1115 : float1

logic this__split_fields1116 : float1

logic this__split_fields1117 : natural

logic this__split_fields1118 : positive_float

logic this__split_fields1119 : positive_float

logic this__split_fields1120 : (int,nonnegative_float) farray

logic this__split_fields1121 : unbounded_float

logic this__split_fields1122 : unbounded_float

logic this__split_fields1123 : unbounded_float

logic this__split_fields1124 : option

logic this__split_fields1125 : float1

logic this__split_fields1126 : float1

logic this__split_fields1127 : bool

logic this__split_fields1128 : bool

logic this__split_fields1129 : (int,us_rep9) farray

logic this__split_fields1130 : count_type

logic this__split_fields1131 : us_main_type

logic this__split_fields1132 : float1

logic this__split_fields1133 : normalized2pi

logic result327 : positive_float

logic result328 : positive_float

logic result329 : positive_float

logic result330 : positive_float

logic result331 : positive_float

logic result332 : nonnegative_float

logic result333 : nonnegative_float

logic result334 : float1

logic result335 : float1

logic result336 : float1

logic result337 : natural

logic result338 : positive_float

logic result339 : positive_float

logic result340 : (int,nonnegative_float) farray

logic result341 : unbounded_float

logic result342 : unbounded_float

logic result343 : unbounded_float

logic result344 : option

logic result345 : float1

logic result346 : float1

logic result347 : bool

logic result348 : bool

logic result349 : (int,us_rep9) farray

logic result350 : count_type

logic result351 : us_main_type

logic result352 : float1

logic result353 : normalized2pi

logic this__split_fields1134 : positive_float

logic this__split_fields1135 : positive_float

logic this__split_fields1136 : positive_float

logic this__split_fields1137 : positive_float

logic this__split_fields1138 : positive_float

logic this__split_fields1139 : nonnegative_float

logic this__split_fields1140 : nonnegative_float

logic this__split_fields1141 : float1

logic this__split_fields1142 : float1

logic this__split_fields1143 : float1

logic this__split_fields1144 : natural

logic this__split_fields1145 : positive_float

logic this__split_fields1146 : positive_float

logic this__split_fields1147 : (int,nonnegative_float) farray

logic this__split_fields1148 : unbounded_float

logic this__split_fields1149 : unbounded_float

logic this__split_fields1150 : unbounded_float

logic this__split_fields1151 : option

logic this__split_fields1152 : float1

logic this__split_fields1153 : float1

logic this__split_fields1154 : bool

logic this__split_fields1155 : bool

logic this__split_fields1156 : (int,us_rep9) farray

logic this__split_fields1157 : count_type

logic this__split_fields1158 : us_main_type

logic this__split_fields1159 : float1

logic this__split_fields1160 : normalized2pi

logic this__split_fields1161 : positive_float

logic this__split_fields1162 : positive_float

logic this__split_fields1163 : positive_float

logic this__split_fields1164 : positive_float

logic this__split_fields1165 : positive_float

logic this__split_fields1166 : nonnegative_float

logic this__split_fields1167 : nonnegative_float

logic this__split_fields1168 : float1

logic this__split_fields1169 : float1

logic this__split_fields1170 : float1

logic this__split_fields1171 : natural

logic this__split_fields1172 : positive_float

logic this__split_fields1173 : positive_float

logic this__split_fields1174 : (int,nonnegative_float) farray

logic this__split_fields1175 : unbounded_float

logic this__split_fields1176 : unbounded_float

logic this__split_fields1177 : unbounded_float

logic this__split_fields1178 : option

logic this__split_fields1179 : float1

logic this__split_fields1180 : float1

logic this__split_fields1181 : bool

logic this__split_fields1182 : bool

logic this__split_fields1183 : (int,us_rep9) farray

logic this__split_fields1184 : count_type

logic this__split_fields1185 : us_main_type

logic this__split_fields1186 : float1

logic this__split_fields1187 : normalized2pi

logic this__split_fields1188 : positive_float

logic this__split_fields1189 : positive_float

logic this__split_fields1190 : positive_float

logic this__split_fields1191 : positive_float

logic this__split_fields1192 : positive_float

logic this__split_fields1193 : nonnegative_float

logic this__split_fields1194 : nonnegative_float

logic this__split_fields1195 : float1

logic this__split_fields1196 : float1

logic this__split_fields1197 : float1

logic this__split_fields1198 : natural

logic this__split_fields1199 : positive_float

logic this__split_fields1200 : positive_float

logic this__split_fields1201 : (int,nonnegative_float) farray

logic this__split_fields1202 : unbounded_float

logic this__split_fields1203 : unbounded_float

logic this__split_fields1204 : unbounded_float

logic this__split_fields1205 : option

logic this__split_fields1206 : float1

logic this__split_fields1207 : float1

logic this__split_fields1208 : bool

logic this__split_fields1209 : bool

logic this__split_fields1210 : (int,us_rep9) farray

logic this__split_fields1211 : count_type

logic this__split_fields1212 : us_main_type

logic this__split_fields1213 : float1

logic this__split_fields1214 : normalized2pi

logic this__split_fields1215 : positive_float

logic this__split_fields1216 : positive_float

logic this__split_fields1217 : positive_float

logic this__split_fields1218 : positive_float

logic this__split_fields1219 : positive_float

logic this__split_fields1220 : nonnegative_float

logic this__split_fields1221 : nonnegative_float

logic this__split_fields1222 : float1

logic this__split_fields1223 : float1

logic this__split_fields1224 : float1

logic this__split_fields1225 : natural

logic this__split_fields1226 : positive_float

logic this__split_fields1227 : positive_float

logic this__split_fields1228 : (int,nonnegative_float) farray

logic this__split_fields1229 : unbounded_float

logic this__split_fields1230 : unbounded_float

logic this__split_fields1231 : unbounded_float

logic this__split_fields1232 : option

logic this__split_fields1233 : float1

logic this__split_fields1234 : float1

logic this__split_fields1235 : bool

logic this__split_fields1236 : bool

logic this__split_fields1237 : (int,us_rep9) farray

logic this__split_fields1238 : count_type

logic this__split_fields1239 : us_main_type

logic this__split_fields1240 : float1

logic this__split_fields1241 : normalized2pi

logic this__split_fields1242 : positive_float

logic this__split_fields1243 : positive_float

logic this__split_fields1244 : positive_float

logic this__split_fields1245 : positive_float

logic this__split_fields1246 : positive_float

logic this__split_fields1247 : nonnegative_float

logic this__split_fields1248 : nonnegative_float

logic this__split_fields1249 : float1

logic this__split_fields1250 : float1

logic this__split_fields1251 : float1

logic this__split_fields1252 : natural

logic this__split_fields1253 : positive_float

logic this__split_fields1254 : positive_float

logic this__split_fields1255 : (int,nonnegative_float) farray

logic this__split_fields1256 : unbounded_float

logic this__split_fields1257 : unbounded_float

logic this__split_fields1258 : unbounded_float

logic this__split_fields1259 : option

logic this__split_fields1260 : float1

logic this__split_fields1261 : float1

logic this__split_fields1262 : bool

logic this__split_fields1263 : bool

logic this__split_fields1264 : (int,us_rep9) farray

logic this__split_fields1265 : count_type

logic this__split_fields1266 : us_main_type

logic this__split_fields1267 : float1

logic this__split_fields1268 : normalized2pi

logic result354 : bool

logic result355 : t

logic theta1 : t

logic result356 : t

logic theta2 : t

logic theta3 : t

logic theta4 : t

logic result357 : t

logic theta5 : t

logic result358 : t

logic driveturnrate10 : t

logic result359 : t

logic driveturnrate11 : t

logic result360 : t

logic driveturnrate12 : t

logic result361 : t

logic theta6 : t

logic result362 : t

logic drivespeed1 : t

logic result363 : t

logic drivespeed2 : t

logic result364 : t

logic drivespeed3 : t

axiom H : (to_rep2(o) = fliteral1)

axiom H1 : (to_rep2(o1) = fliteral1)

axiom H2 : ((o2 = o1) and (o3 = o))

axiom H3 : ((temp___1014 = o2) and (temp___10141 = o3))

axiom H4 : ((temp___1014 = zero_position) and
  (temp___10141 = zero_position1))

axiom H5 : ((this__split_fields20 = false) and
  (1000 = to_rep11(this__split_fields23)))

axiom H6 : (le(neg(fliteral2), fliteral2) -> tqtisFinite(drivespeed))

axiom H7 : (le(neg(fliteral2), fliteral2) -> tqtisFinite(driveturnrate))

axiom H8 : (le(fliteral1, fliteral2) -> in_range7(disttoclosestobstacle))

axiom H9 : (le(fliteral1, fliteral2) -> in_range6(safetydist))

axiom H10 : ({ us_split_fields1 = { rec__spaces__angles__angle__theta =
  algorithm__step__saferisinggapangle__assume } } = create(void))

axiom H11 : (result = saferisinggapangle__split_fields)

axiom H12 :
  (saferisinggapangle__split_fields1 = algorithm__step__saferisinggapangle__assume)

axiom H13 : ({ us_split_fields1 = { rec__spaces__angles__angle__theta =
  algorithm__step__midvalleyangle__assume } } = create(void))

axiom H14 : (result1 = midvalleyangle__split_fields)

axiom H15 :
  (midvalleyangle__split_fields1 = algorithm__step__midvalleyangle__assume)

axiom H16 : (le(neg(fliteral2), fliteral2) -> tqtisFinite(theta))

axiom H17 : ((pbestvalley__attr__constrained = false) and
  (to_rep10(pbestvalley__split_discrs) = 0))

axiom H18 : ((0 <= 2147483647) -> in_range5(inumlps))

axiom H19 : ((not (oeq({ us_split_fields3 = {
  rec__spaces__positions__position__x = disttogoal__split_fields2;
  rec__spaces__positions__position__y = disttogoal__split_fields3 } }, {
  us_split_fields3 = { rec__spaces__positions__position__x = zero_position;
  rec__spaces__positions__position__y = zero_position1 } }) = true)) and
  lt(to_rep3(this__split_fields567), disttoclosestobstacle12))

axiom H20 : (le(fliteral1, fliteral2) -> in_range7(disttoclosestobstacle12))

axiom H21 : ((this__split_fields587 = false) and
  (1000 = to_rep11(this__split_fields590)))

axiom H22 : (eq(to_rep3(this__split_fields594),
  to_rep3(this__split_fields567)) and ((this__split_fields614 = false) and
  (1000 = to_rep11(this__split_fields617))))

axiom H23 : ({ us_split_discrs3 = { rec__algorithm__valley_option__opt =
  temp___960 }; us_split_fields15 = { rec__algorithm__valley_option__value =
  { us_split_fields13 = { rec__valleys__valley__risinggap = {
  us_split_fields11 = { rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = temp___9601 } };
  rec__gaps__gap__distance = temp___9602; rec__gaps__gap__idir = temp___9603
  } }; rec__valleys__valley__othergap = { us_split_fields11 = {
  rec__gaps__gap__bearing = { us_split_fields1 = {
  rec__spaces__angles__angle__theta = temp___9604 } };
  rec__gaps__gap__distance = temp___9605; rec__gaps__gap__idir = temp___9606
  } } } } }; attr__constrained1 = temp___9607 } = findbestvalley({
  us_split_fields21 = { rec__algorithm__controller__robot = {
  us_split_fields9 = { rec__robot_iface__proxy__robot_radius =
  this__split_fields594; rec__robot_iface__proxy__min_gap_width =
  this__split_fields595; rec__robot_iface__proxy__obstacle_avoid_dist =
  this__split_fields596; rec__robot_iface__proxy__max_speed =
  this__split_fields597; rec__robot_iface__proxy__max_turn_rate =
  this__split_fields598; rec__robot_iface__proxy__goal_position_tol =
  this__split_fields599; rec__robot_iface__proxy__goal_angle_tol =
  this__split_fields600; rec__robot_iface__proxy__goalx =
  this__split_fields601; rec__robot_iface__proxy__goaly =
  this__split_fields602; rec__robot_iface__proxy__goala =
  this__split_fields603; rec__robot_iface__proxy__scan_count =
  this__split_fields604; rec__robot_iface__proxy__scan_res =
  this__split_fields605; rec__robot_iface__proxy__max_range =
  this__split_fields606; rec__robot_iface__proxy__scans =
  this__split_fields607; rec__robot_iface__proxy__x = this__split_fields608;
  rec__robot_iface__proxy__y = this__split_fields609;
  rec__robot_iface__proxy__yaw = this__split_fields610;
  rec__robot_iface__proxy__speed = { us_split_discrs1 = {
  rec__robot_iface__speed_option__opt = this__split_fields611 };
  us_split_fields7 = { rec__robot_iface__speed_option__modulus =
  this__split_fields612; rec__robot_iface__speed_option__angle =
  this__split_fields613 }; attr__constrained = this__split_fields614 };
  rec__robot_iface__proxy__goal_reached = this__split_fields615 } };
  rec__algorithm__controller__laserscan = this__split_fields616;
  rec__algorithm__controller__gapvec = { us_split_discrs5 = {
  rec__algorithm__gap_vectors__list__capacity = this__split_fields617 };
  us_split_fields17 = { rec__algorithm__gap_vectors__list =
  this__split_fields618 } }; rec__algorithm__controller__obsavoiddelta =
  this__split_fields619; rec__algorithm__controller__driveangle = {
  us_split_fields1 = { rec__spaces__angles__angle__theta =
  this__split_fields620 } } } }, { us_split_fields3 = {
  rec__spaces__positions__position__x = disttogoal__split_fields2;
  rec__spaces__positions__position__y = disttogoal__split_fields3 } }))

axiom H24 : (pbestvalley__attr__constrained = true)

 (* File "algorithm.ads", line 107, characters 0-0 *)
goal WP_parameter_def : (temp___960 = pbestvalley__split_discrs)
