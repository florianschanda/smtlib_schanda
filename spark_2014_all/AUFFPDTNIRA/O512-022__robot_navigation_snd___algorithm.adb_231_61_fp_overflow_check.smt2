(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(define-fun dynamic_invariant ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(declare-sort positive_float 0)
(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun user_eq1 (positive_float positive_float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 positive_float)
(declare-datatypes () ((positive_float__ref (mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float (positive_float__content a))
(define-fun dynamic_invariant1 ((temp___expr_163 Float32) (temp___is_init_159 Bool) (temp___skip_constant_160 Bool) (temp___do_toplevel_161 Bool) (temp___do_typ_inv_162 Bool)) Bool (=> (or (= temp___is_init_159 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (in_range1 temp___expr_163)))
(declare-sort nonnegative_float 0)
(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun user_eq2 (nonnegative_float nonnegative_float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)
(declare-const dummy2 nonnegative_float)
(declare-datatypes () ((nonnegative_float__ref (mk_nonnegative_float__ref (nonnegative_float__content nonnegative_float)))))
(define-fun nonnegative_float__ref___projection ((a nonnegative_float__ref)) nonnegative_float (nonnegative_float__content a))
(declare-fun to_rep (nonnegative_float) Float32)
(declare-fun of_rep (Float32) nonnegative_float)
(assert (forall ((x nonnegative_float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x nonnegative_float)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun cos1 (Float32) Float32)
(declare-fun cos__function_guard (Float32 Float32) Bool)
(assert (forall ((x Float32)) (! (=> (dynamic_invariant x true true true true) (let ((result (cos1 x))) (and (and (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) result) (fp.leq result (fp #b0 #b01111111 #b00000000000000000000000))) (=> (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000)) (fp.eq result (fp #b0 #b01111111 #b00000000000000000000000)))) (dynamic_invariant result true false true true)))) :pattern ((cos1 x)))))
(declare-sort normalized2pi 0)
(define-fun in_range3 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))
(declare-fun user_eq3 (normalized2pi normalized2pi) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)
(declare-const dummy3 normalized2pi)
(declare-datatypes () ((normalized2pi__ref (mk_normalized2pi__ref (normalized2pi__content normalized2pi)))))
(define-fun normalized2pi__ref___projection ((a normalized2pi__ref)) normalized2pi (normalized2pi__content a))
(declare-fun to_rep1 (normalized2pi) Float32)
(declare-fun of_rep1 (Float32) normalized2pi)
(assert (forall ((x normalized2pi)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x normalized2pi)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Float32)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__spaces__angles__angle__theta normalized2pi)))))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep1 (rec__spaces__angles__angle__theta (us_split_fields1 a))) (to_rep1 (rec__spaces__angles__angle__theta (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const spaces__angles__angle__theta__first__bit Int)
(declare-const spaces__angles__angle__theta__last__bit Int)
(declare-const spaces__angles__angle__theta__position Int)
(assert (<= 0 spaces__angles__angle__theta__first__bit))
(assert (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))
(assert (<= 0 spaces__angles__angle__theta__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((angle__ref (mk_angle__ref (angle__content us_rep)))))
(define-fun angle__ref___projection ((a angle__ref)) us_rep (angle__content a))
(declare-fun ccwdiff (us_rep us_rep) Float32)
(declare-fun ccwdiff__function_guard (Float32 us_rep us_rep) Bool)
(declare-fun to_rep2 (float) Float32)
(declare-fun of_rep2 (Float32) float)
(assert (forall ((x float)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort idir_t 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (idir_t idir_t) Bool)
(declare-const dummy5 idir_t)
(declare-datatypes () ((idir_t__ref (mk_idir_t__ref (idir_t__content idir_t)))))
(define-fun idir_t__ref___projection ((a idir_t__ref)) idir_t (idir_t__content a))
(declare-fun to_rep3 (idir_t) Int)
(declare-fun of_rep3 (Int) idir_t)
(assert (forall ((x idir_t)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x idir_t)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__gaps__gap__bearing us_rep) (rec__gaps__gap__distance float) (rec__gaps__gap__idir idir_t)))))
(define-fun us_split_fields_bearing__projection ((a us_split_fields2)) us_rep (rec__gaps__gap__bearing a))
(define-fun us_split_fields_iDir__projection ((a us_split_fields2)) idir_t (rec__gaps__gap__idir a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___8__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (bool_eq (rec__gaps__gap__bearing (us_split_fields3 a)) (rec__gaps__gap__bearing (us_split_fields3 b))) true) (= (to_rep2 (rec__gaps__gap__distance (us_split_fields3 a))) (to_rep2 (rec__gaps__gap__distance (us_split_fields3 b))))) (= (to_rep3 (rec__gaps__gap__idir (us_split_fields3 a))) (to_rep3 (rec__gaps__gap__idir (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const gaps__gap__bearing__first__bit Int)
(declare-const gaps__gap__bearing__last__bit Int)
(declare-const gaps__gap__bearing__position Int)
(assert (<= 0 gaps__gap__bearing__first__bit))
(assert (< gaps__gap__bearing__first__bit gaps__gap__bearing__last__bit))
(assert (<= 0 gaps__gap__bearing__position))
(declare-const gaps__gap__distance__first__bit Int)
(declare-const gaps__gap__distance__last__bit Int)
(declare-const gaps__gap__distance__position Int)
(assert (<= 0 gaps__gap__distance__first__bit))
(assert (< gaps__gap__distance__first__bit gaps__gap__distance__last__bit))
(assert (<= 0 gaps__gap__distance__position))
(declare-const gaps__gap__idir__first__bit Int)
(declare-const gaps__gap__idir__last__bit Int)
(declare-const gaps__gap__idir__position Int)
(assert (<= 0 gaps__gap__idir__first__bit))
(assert (< gaps__gap__idir__first__bit gaps__gap__idir__last__bit))
(assert (<= 0 gaps__gap__idir__position))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((gap__ref (mk_gap__ref (gap__content us_rep1)))))
(define-fun gap__ref___projection ((a gap__ref)) us_rep1 (gap__content a))
(declare-fun create__2 (us_rep Float32 Int) us_rep1)
(declare-fun create__2__function_guard (us_rep1 us_rep Float32 Int) Bool)
(declare-sort count_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (count_type count_type) Bool)
(declare-const dummy7 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(declare-fun to_rep4 (count_type) Int)
(declare-fun of_rep4 (Int) count_type)
(assert (forall ((x count_type)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x count_type)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__algorithm__gap_vectors__list__capacity count_type)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs)) count_type (rec__algorithm__gap_vectors__list__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__algorithm__gap_vectors__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields4)) us_main_type (rec__algorithm__gap_vectors__list a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs1 us_split_discrs) (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___13__projection ((a us_rep2)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___14__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep4 (rec__algorithm__gap_vectors__list__capacity (us_split_discrs1 a))) (to_rep4 (rec__algorithm__gap_vectors__list__capacity (us_split_discrs1 b)))) (= (us_main_eq (rec__algorithm__gap_vectors__list (us_split_fields5 a)) (rec__algorithm__gap_vectors__list (us_split_fields5 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const algorithm__gap_vectors__list__capacity__first__bit Int)
(declare-const algorithm__gap_vectors__list__capacity__last__bit Int)
(declare-const algorithm__gap_vectors__list__capacity__position Int)
(assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit))
(assert (< algorithm__gap_vectors__list__capacity__first__bit algorithm__gap_vectors__list__capacity__last__bit))
(assert (<= 0 algorithm__gap_vectors__list__capacity__position))
(declare-fun user_eq8 (us_rep2 us_rep2) Bool)
(declare-const dummy8 us_rep2)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep2)))))
(define-fun list__ref___projection ((a list__ref)) us_rep2 (list__content a))
(declare-fun length (us_rep2) Int)
(declare-fun length__function_guard (Int us_rep2) Bool)
(define-fun dynamic_invariant2 ((temp___expr_365 Int) (temp___is_init_361 Bool) (temp___skip_constant_362 Bool) (temp___do_toplevel_363 Bool) (temp___do_typ_inv_364 Bool)) Bool (=> (or (= temp___is_init_361 true) (<= 0 2147483647)) (in_range5 temp___expr_365)))
(assert (forall ((container us_rep2)) (! (let ((result (length container))) (and (<= result (to_rep4 (rec__algorithm__gap_vectors__list__capacity (us_split_discrs1 container)))) (dynamic_invariant2 result true false true true))) :pattern ((length container)))))
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content us_rep1)))))
(define-fun element_type__ref___projection ((a element_type__ref)) us_rep1 (element_type__content a))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__algorithm__gap_vectors__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields6)) count_type (rec__algorithm__gap_vectors__cursor__node a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___15__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq3 ((a us_rep3) (b us_rep3)) Bool (ite (= (to_rep4 (rec__algorithm__gap_vectors__cursor__node (us_split_fields7 a))) (to_rep4 (rec__algorithm__gap_vectors__cursor__node (us_split_fields7 b)))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep3) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep3) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))
(declare-const algorithm__gap_vectors__cursor__node__first__bit Int)
(declare-const algorithm__gap_vectors__cursor__node__last__bit Int)
(declare-const algorithm__gap_vectors__cursor__node__position Int)
(assert (<= 0 algorithm__gap_vectors__cursor__node__first__bit))
(assert (< algorithm__gap_vectors__cursor__node__first__bit algorithm__gap_vectors__cursor__node__last__bit))
(assert (<= 0 algorithm__gap_vectors__cursor__node__position))
(declare-fun user_eq9 (us_rep3 us_rep3) Bool)
(declare-const dummy9 us_rep3)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep3)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep3 (cursor__content a))
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) us_rep1 (element_type__content1 a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep4 0)
(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep4) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep4) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))
(declare-fun user_eq10 (us_rep4 us_rep4) Bool)
(declare-const dummy10 us_rep4)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep4)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep4 (sequence__content a))
(declare-fun get (us_rep4 Int) us_rep1)
(declare-fun get__function_guard (us_rep1 us_rep4 Int) Bool)
(declare-fun length1 (us_rep4) Int)
(declare-fun length__function_guard1 (Int us_rep4) Bool)
(define-fun last ((container us_rep4)) Int (+ 0 (length1 container)))
(declare-fun last__function_guard (Int us_rep4) Bool)
(define-fun ole ((left us_rep4) (right us_rep4)) Bool (and (<= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (bool_eq1 (get left n) (get right n)) true))) true false)))
(declare-fun ole__function_guard (Bool us_rep4 us_rep4) Bool)
(declare-sort us_main_type2 0)
(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)
(declare-sort us_rep5 0)
(declare-fun bool_eq5 (us_rep5 us_rep5) Bool)
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep5) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep5) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))
(declare-fun user_eq11 (us_rep5 us_rep5) Bool)
(declare-const dummy11 us_rep5)
(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep5)))))
(define-fun map__ref___projection ((a map__ref)) us_rep5 (map__content a))
(declare-datatypes () ((key_type__ref (mk_key_type__ref (key_type__content us_rep3)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep3 (key_type__content a))
(declare-fun get1 (us_rep5 us_rep3) Int)
(declare-fun get__function_guard1 (Int us_rep5 us_rep3) Bool)
(declare-fun ole1 (us_rep5 us_rep5) Bool)
(declare-fun ole__function_guard1 (Bool us_rep5 us_rep5) Bool)
(declare-fun keys_included_except (us_rep5 us_rep5 us_rep3) Bool)
(declare-fun keys_included_except__function_guard (Bool us_rep5 us_rep5 us_rep3) Bool)
(declare-fun model__ (us_rep2) us_rep4)
(declare-fun model____function_guard (us_rep4 us_rep2) Bool)
(declare-fun positions (us_rep2) us_rep5)
(declare-fun positions__function_guard (us_rep5 us_rep2) Bool)
(declare-fun last1 (us_rep2) us_rep3)
(declare-fun last__function_guard1 (us_rep3 us_rep2) Bool)
(define-fun in_range6 ((rec__algorithm__gap_vectors__list__capacity1 Int) (a us_rep2)) Bool (= rec__algorithm__gap_vectors__list__capacity1 (to_rep4 (rec__algorithm__gap_vectors__list__capacity (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep2) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep2) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))
(declare-const algorithm__gap_vectors__list__capacity__first__bit1 Int)
(declare-const algorithm__gap_vectors__list__capacity__last__bit1 Int)
(declare-const algorithm__gap_vectors__list__capacity__position1 Int)
(assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit1))
(assert (< algorithm__gap_vectors__list__capacity__first__bit1 algorithm__gap_vectors__list__capacity__last__bit1))
(assert (<= 0 algorithm__gap_vectors__list__capacity__position1))
(declare-fun user_eq12 (us_rep2 us_rep2) Bool)
(declare-const dummy12 us_rep2)
(declare-datatypes () ((list__ref1 (mk_list__ref1 (list__content1 us_rep2)))))
(define-fun list__ref___2__projection ((a list__ref1)) us_rep2 (list__content1 a))
(declare-fun is_empty (us_rep2) Bool)
(declare-fun is_empty__function_guard (Bool us_rep2) Bool)
(define-fun dynamic_invariant3 ((temp___expr_640 us_rep2) (temp___is_init_636 Bool) (temp___skip_constant_637 Bool) (temp___do_toplevel_638 Bool) (temp___do_typ_inv_639 Bool)) Bool (=> (not (= temp___skip_constant_637 true)) (in_range6 1000 temp___expr_640)))
(define-fun default_initial_assumption ((temp___expr_642 us_rep2) (temp___skip_top_level_643 Bool)) Bool (and (= (to_rep4 (rec__algorithm__gap_vectors__list__capacity (us_split_discrs1 temp___expr_642))) 1000) (=> (not (= temp___skip_top_level_643 true)) (= (is_empty temp___expr_642) true))))
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__algorithm__laser_scan_data__first nonnegative_float) (rec__algorithm__laser_scan_data__second us_rep)))))
(define-fun us_split_fields_second__projection ((a us_split_fields8)) us_rep (rec__algorithm__laser_scan_data__second a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep6 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___16__projection ((a us_rep6)) us_split_fields8 (us_split_fields9 a))
(define-fun bool_eq6 ((a us_rep6) (b us_rep6)) Bool (ite (and (= (to_rep (rec__algorithm__laser_scan_data__first (us_split_fields9 a))) (to_rep (rec__algorithm__laser_scan_data__first (us_split_fields9 b)))) (= (bool_eq (rec__algorithm__laser_scan_data__second (us_split_fields9 a)) (rec__algorithm__laser_scan_data__second (us_split_fields9 b))) true)) true false))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep6) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep6) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep6)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep6)) (<= 0 (object__alignment7 a))))
(declare-const algorithm__laser_scan_data__first__first__bit Int)
(declare-const algorithm__laser_scan_data__first__last__bit Int)
(declare-const algorithm__laser_scan_data__first__position Int)
(assert (<= 0 algorithm__laser_scan_data__first__first__bit))
(assert (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))
(assert (<= 0 algorithm__laser_scan_data__first__position))
(declare-const algorithm__laser_scan_data__second__first__bit Int)
(declare-const algorithm__laser_scan_data__second__last__bit Int)
(declare-const algorithm__laser_scan_data__second__position Int)
(assert (<= 0 algorithm__laser_scan_data__second__first__bit))
(assert (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))
(assert (<= 0 algorithm__laser_scan_data__second__position))
(declare-fun user_eq13 (us_rep6 us_rep6) Bool)
(declare-const dummy13 us_rep6)
(declare-datatypes () ((laser_scan_data__ref (mk_laser_scan_data__ref (laser_scan_data__content us_rep6)))))
(define-fun laser_scan_data__ref___projection ((a laser_scan_data__ref)) us_rep6 (laser_scan_data__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep6))))))
(declare-fun slide ((Array Int us_rep6) Int Int) (Array Int us_rep6))
(assert (forall ((a (Array Int us_rep6))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep6))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq7 ((a (Array Int us_rep6)) (a__first Int) (a__last Int) (b (Array Int us_rep6)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq6 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true)))) true false))
(assert (forall ((a (Array Int us_rep6)) (b (Array Int us_rep6))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq7 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq6 (select a temp___idx_155) (select b (+ (- b__first a__first) temp___idx_155))) true))))))))
(declare-const gapvec__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const laserscan (Array Int us_rep6))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const robotradius Float32)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const mingapwidth Float32)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const fmaxrange Float32)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const dist Float32)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-sort t27b 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 2 x) (<= x 999)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq14 (t27b t27b) Bool)
(declare-const dummy14 t27b)
(declare-datatypes () ((t27b__ref (mk_t27b__ref (t27b__content t27b)))))
(define-fun t27b__ref___projection ((a t27b__ref)) t27b (t27b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const dist1 Float32)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const dist2 Float32)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(define-fun dynamic_invariant4 ((temp___expr_170 Float32) (temp___is_init_166 Bool) (temp___skip_constant_167 Bool) (temp___do_toplevel_168 Bool) (temp___do_typ_inv_169 Bool)) Bool (=> (or (= temp___is_init_166 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (in_range2 temp___expr_170)))
(define-fun dynamic_invariant5 ((temp___expr_198 Float32) (temp___is_init_194 Bool) (temp___skip_constant_195 Bool) (temp___do_toplevel_196 Bool) (temp___do_typ_inv_197 Bool)) Bool (=> (or (= temp___is_init_194 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000001 #b10010010000111111011011))) (in_range3 temp___expr_198)))
(define-fun dynamic_invariant6 ((temp___expr_323 Int) (temp___is_init_319 Bool) (temp___skip_constant_320 Bool) (temp___do_toplevel_321 Bool) (temp___do_typ_inv_322 Bool)) Bool (=> (or (= temp___is_init_319 true) (<= (- 1) 1)) (in_range4 temp___expr_323)))
(define-fun default_initial_assumption1 ((temp___expr_466 us_rep3) (temp___skip_top_level_467 Bool)) Bool (= (to_rep4 (rec__algorithm__gap_vectors__cursor__node (us_split_fields7 temp___expr_466))) 0))
(declare-const no_element us_rep3)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(assert (= no_element (mk___rep3 (mk___split_fields3 (of_rep4 0)))))
(define-fun oeq ((left us_rep4) (right us_rep4)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last left))) (= (bool_eq1 (get left n) (get right n)) true))) true false)))
(declare-fun oeq__function_guard (Bool us_rep4 us_rep4) Bool)
(assert (forall ((a us_rep4) (b us_rep4)) (! (= (user_eq10 a b) (oeq a b)) :pattern ((user_eq10 a b)))))
(define-fun default_initial_assumption2 ((temp___expr_507 us_rep4) (temp___skip_top_level_508 Bool)) Bool (=> (not (= temp___skip_top_level_508 true)) (= (length1 temp___expr_507) 0)))
(assert (forall ((container us_rep2)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(declare-fun length2 (us_rep5) Int)
(declare-fun length__function_guard2 (Int us_rep5) Bool)
(declare-fun is_empty1 (us_rep5) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep5) Bool)
(define-fun default_initial_assumption3 ((temp___expr_529 us_rep5) (temp___skip_top_level_530 Bool)) Bool (=> (not (= temp___skip_top_level_530 true)) (and (= (is_empty1 temp___expr_529) true) (= (length2 temp___expr_529) 0))))
(declare-fun has_key (us_rep5 us_rep3) Bool)
(declare-fun has_key__function_guard (Bool us_rep5 us_rep3) Bool)
(define-fun default_initial_assumption4 ((temp___expr_515 us_rep3) (temp___skip_top_level_516 Bool)) Bool (= (to_rep4 (rec__algorithm__gap_vectors__cursor__node (us_split_fields7 temp___expr_515))) 0))
(assert (forall ((container us_rep2)) (! (let ((result (positions container))) (and (not (= (has_key result no_element) true)) (forall ((i us_rep3)) (=> (= (has_key result i) true) (and (and (<= 1 (get1 result i)) (<= (get1 result i) (length container))) (forall ((j us_rep3)) (=> (= (has_key result j) true) (=> (= (get1 result i) (get1 result j)) (= (bool_eq3 i j) true))))))))) :pattern ((positions container)))))
(assert (forall ((container us_rep2)) (! (= (= (is_empty container) true) (= (length container) 0)) :pattern ((is_empty container)))))
(define-fun has_element ((container us_rep2) (position us_rep3)) Bool (has_key (positions container) position))
(declare-fun has_element__function_guard (Bool us_rep2 us_rep3) Bool)
(assert (forall ((container us_rep2)) (! (let ((result (last1 container))) (ite (= (length container) 0) (= (bool_eq3 result no_element) true) (and (= (has_element container result) true) (= (get1 (positions container) result) (length container))))) :pattern ((last1 container)))))
(declare-sort extended_index 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq15 (extended_index extended_index) Bool)
(declare-const dummy15 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant7 ((temp___expr_499 Int) (temp___is_init_495 Bool) (temp___skip_constant_496 Bool) (temp___do_toplevel_497 Bool) (temp___do_typ_inv_498 Bool)) Bool (=> (or (= temp___is_init_495 true) (<= 0 2147483647)) (in_range8 temp___expr_499)))
(assert (forall ((container us_rep4)) (! (let ((result (length1 container))) (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false true true))) :pattern ((length1 container)))))
(assert true)
(assert (forall ((container us_rep5)) (forall ((key us_rep3)) (! (=> (= (distinct 0 0) true) (=> (exists ((k us_rep3)) (and (= (has_key container k) true) (= (bool_eq3 k key) true))) (= (has_key container key) true))) :pattern ((has_key container key))))))
(declare-sort element_type 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq16 (element_type element_type) Bool)
(declare-const dummy16 element_type)
(declare-datatypes () ((element_type__ref2 (mk_element_type__ref2 (element_type__content2 element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type (element_type__content2 a))
(define-fun dynamic_invariant8 ((temp___expr_521 Int) (temp___is_init_517 Bool) (temp___skip_constant_518 Bool) (temp___do_toplevel_519 Bool) (temp___do_typ_inv_520 Bool)) Bool (=> (or (= temp___is_init_517 true) (<= 1 2147483647)) (in_range9 temp___expr_521)))
(declare-fun witness (us_rep5 us_rep3) Int)
(declare-fun witness__function_guard (Int us_rep5 us_rep3) Bool)
(declare-fun w_get (us_rep5 Int) Int)
(declare-fun w_get__function_guard (Int us_rep5 Int) Bool)
(assert (forall ((container us_rep5)) (forall ((key us_rep3)) (! (=> (= (has_key container key) true) (let ((result (get1 container key))) (and (=> (= (distinct 0 0) true) (and (= result (w_get container (witness container key))) (forall ((k us_rep3)) (=> (= (has_key container k) true) (= (= (bool_eq3 k key) true) (= (witness container key) (witness container k))))))) (dynamic_invariant8 result true false true true)))) :pattern ((get1 container key))))))
(assert (forall ((container us_rep5)) (! (dynamic_invariant2 (length2 container) true false true true) :pattern ((length2 container)))))
(assert (forall ((left us_rep5) (right us_rep5)) (! (= (= (ole1 left right) true) (forall ((key us_rep3)) (=> (= (has_key left key) true) (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))) :pattern ((ole1 left right)))))
(assert (forall ((container us_rep5)) (! (= (= (is_empty1 container) true) (forall ((key us_rep3)) (not (= (has_key container key) true)))) :pattern ((is_empty1 container)))))
(assert (forall ((left us_rep5) (right us_rep5)) (forall ((new_key us_rep3)) (! (= (= (keys_included_except left right new_key) true) (forall ((key us_rep3)) (=> (= (has_key left key) true) (=> (not (= (bool_eq3 key new_key) true)) (= (has_key right key) true))))) :pattern ((keys_included_except left right new_key))))))
(declare-fun has_witness (us_rep5 Int) Bool)
(declare-fun has_witness__function_guard (Bool us_rep5 Int) Bool)
(assert true)
(assert (forall ((container us_rep5)) (forall ((key us_rep3)) (! (=> (= (has_key container key) true) (let ((result (witness container key))) (and (= (has_witness container result) true) (dynamic_invariant2 result true false true true)))) :pattern ((witness container key))))))
(assert (forall ((container us_rep5)) (forall ((witness1 Int)) (! (=> (and (dynamic_invariant2 witness1 true true true true) (= (has_witness container witness1) true)) (dynamic_invariant8 (w_get container witness1) true false true true)) :pattern ((w_get container witness1))))))
(declare-const i Int)
(declare-const temp___889 nonnegative_float)
(declare-const temp___8891 normalized2pi)
(declare-const temp___888 nonnegative_float)
(declare-const temp___8881 normalized2pi)
(declare-const temp___887 us_rep2)
(declare-const temp___886 Int)
(declare-const algorithm__buildgapvector__B_9__dist__assume Float32)
(declare-const o us_rep1)
(declare-const o1 us_rep1)
(declare-const o2 Float32)
(declare-const o3 Float32)
(declare-const o4 Float32)
(declare-const o5 Float32)
(declare-const o6 Float32)
(declare-const o7 Float32)
(declare-const o8 Float32)
(declare-const o9 Float32)
(declare-const o10 Float32)
(declare-const o11 Float32)
(declare-const rayr__split_fields us_split_fields8)
(declare-const rayl__split_fields us_split_fields8)
(declare-const gapvec__split_fields us_split_fields4)
(declare-const result int__ref)
(declare-const i1 Int)
(declare-const gapvec__split_fields1 us_split_fields4)
(declare-const rayr__split_fields1 us_split_fields8)
(declare-const rayl__split_fields1 us_split_fields8)
(declare-const i2 Int)
(declare-const rho us_split_fields4)
(declare-const rho1 us_split_fields4)
(declare-const result1 us_split_fields__ref4)
(declare-const rayr__split_fields2 us_split_fields8)
(declare-const result2 us_split_fields__ref4)
(declare-const rayl__split_fields2 us_split_fields8)
(declare-const algorithm__gap_vectors__append__container__fields us_split_fields4)
(declare-const result3 us_split_fields__ref2)
(declare-const gapvec__split_fields2 us_split_fields4)
(declare-const algorithm__gap_vectors__append__container__fields1 us_split_fields4)
(declare-const result4 us_split_fields__ref2)
(declare-const gapvec__split_fields3 us_split_fields4)
(declare-const gapvec__split_fields4 us_split_fields__ref2)
(declare-const rayr__split_fields3 us_split_fields__ref4)
(declare-const rayl__split_fields3 us_split_fields__ref4)
(declare-const i3 int__ref)
(declare-const gapvec__split_fields5 us_split_fields4)
(declare-const rayr__split_fields4 us_split_fields8)
(declare-const rayl__split_fields4 us_split_fields8)
(declare-const i4 Int)
(declare-const gapvec__split_fields6 us_split_fields__ref2)
(declare-const rayr__split_fields5 us_split_fields__ref4)
(declare-const rayl__split_fields5 us_split_fields__ref4)
(declare-const i5 int__ref)
(declare-const gapvec__split_fields7 us_split_fields4)
(declare-const rayr__split_fields6 us_split_fields8)
(declare-const rayl__split_fields6 us_split_fields8)
(declare-const i6 Int)
(declare-const result5 us_split_fields__ref4)
(declare-const rayr__split_fields7 us_split_fields8)
(declare-const result6 us_split_fields__ref4)
(declare-const rayl__split_fields7 us_split_fields8)
(assert (= 1000 (to_rep4 (rec__algorithm__gap_vectors__list__capacity gapvec__split_discrs))))
(assert (in_range1 robotradius))
(assert (in_range1 mingapwidth))
(assert (in_range1 fmaxrange))
(assert (and (= (to_rep4 (rec__algorithm__gap_vectors__list__capacity gapvec__split_discrs)) 1000) (<= (length (mk___rep2 gapvec__split_discrs gapvec__split_fields)) 1)))
(assert (= result (mk_int__ref i)))
(assert (= i1 2))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= (mk___split_fields4 temp___889 (mk___rep (mk___split_fields temp___8891))) rayl__split_fields)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= (mk___split_fields4 temp___888 (mk___rep (mk___split_fields temp___8881))) rayr__split_fields)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= temp___887 (mk___rep2 gapvec__split_discrs gapvec__split_fields))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= temp___886 i1)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (and (= (to_rep4 (rec__algorithm__gap_vectors__list__capacity gapvec__split_discrs)) 1000) (< (length (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) i2))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (and (=> (<= 2 999) (in_range7 i2)) (and (<= 2 i2) (<= i2 999)))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= result1 (mk___split_fields__ref4 rayr__split_fields1))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayr__split_fields2 rayl__split_fields1)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= result2 (mk___split_fields__ref4 rayl__split_fields1))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayl__split_fields2 (us_split_fields9 (select laserscan i2)))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (and (= algorithm__buildgapvector__B_9__dist__assume (fp.sub RNE (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)))) (fp.isFinite32 (fp.sub RNE (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)))))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= algorithm__buildgapvector__B_9__dist__assume dist1)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (fp.isFinite32 dist1)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange))) (= o (create__2 (rec__algorithm__laser_scan_data__second rayr__split_fields2) (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) (- 1))))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange))) (and (and (and (and (and (= (length (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields)) (+ (length (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) 1)) (= (get1 (positions (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields)) (last1 (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields))) (length (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields)))) (= (keys_included_except (positions (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields)) (positions (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) (last1 (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields))) true)) (= (ole1 (positions (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) (positions (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields))) true)) (= (bool_eq1 (get (model__ (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields)) (length (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields))) o) true)) (= (ole (model__ (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) (model__ (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields))) true)))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange))) (= result3 (mk___split_fields__ref2 gapvec__split_fields1)))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange))) (= gapvec__split_fields2 algorithm__gap_vectors__append__container__fields))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange))) (= algorithm__gap_vectors__append__container__fields1 rho1))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (=> (or (fp.leq dist1 (fp.neg mingapwidth)) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange))) (= o1 (create__2 (rec__algorithm__laser_scan_data__second rayl__split_fields2) (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) 1))))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (=> (or (fp.leq dist1 (fp.neg mingapwidth)) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange))) (and (and (and (and (and (= (length (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1)) (+ (length (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) 1)) (= (get1 (positions (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1)) (last1 (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1))) (length (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1)))) (= (keys_included_except (positions (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1)) (positions (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) (last1 (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1))) true)) (= (ole1 (positions (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) (positions (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1))) true)) (= (bool_eq1 (get (model__ (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1)) (length (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1))) o1) true)) (= (ole (model__ (mk___rep2 gapvec__split_discrs gapvec__split_fields1)) (model__ (mk___rep2 gapvec__split_discrs algorithm__gap_vectors__append__container__fields1))) true))))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (=> (or (fp.leq dist1 (fp.neg mingapwidth)) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange))) (= result4 (mk___split_fields__ref2 gapvec__split_fields1))))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (=> (or (fp.leq dist1 (fp.neg mingapwidth)) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange))) (= gapvec__split_fields3 algorithm__gap_vectors__append__container__fields1)))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (=> (not (or (fp.leq dist1 (fp.neg mingapwidth)) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange)))) (= gapvec__split_fields3 gapvec__split_fields1)))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (=> (not (or (fp.leq dist1 (fp.neg mingapwidth)) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange)))) (= algorithm__gap_vectors__append__container__fields1 rho1)))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (=> (not (or (fp.leq dist1 (fp.neg mingapwidth)) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange)))) (= gapvec__split_fields3 gapvec__split_fields1)))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (= gapvec__split_fields2 gapvec__split_fields3))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (= algorithm__gap_vectors__append__container__fields rho))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (=> (not (or (fp.leq mingapwidth dist1) (and (fp.eq (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2)) fmaxrange) (fp.lt (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)) fmaxrange)))) (= gapvec__split_fields2 gapvec__split_fields3))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= i2 999)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= i3 (mk_int__ref i2))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayl__split_fields3 (mk___split_fields__ref4 rayl__split_fields2))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayr__split_fields3 (mk___split_fields__ref4 rayr__split_fields2))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= gapvec__split_fields4 (mk___split_fields__ref2 gapvec__split_fields2))))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= i4 i2)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayl__split_fields4 rayl__split_fields2)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayr__split_fields4 rayr__split_fields2)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= gapvec__split_fields5 gapvec__split_fields2)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= i5 i3)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayl__split_fields5 rayl__split_fields3)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayr__split_fields5 rayr__split_fields3)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= gapvec__split_fields6 gapvec__split_fields4)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= i6 i4)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayl__split_fields6 rayl__split_fields4)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= rayr__split_fields6 rayr__split_fields4)))
(assert (=> (and (<= 2 i1) (<= i1 999)) (= gapvec__split_fields7 gapvec__split_fields5)))
(assert (=> (not (and (<= 2 i1) (<= i1 999))) (= i5 (mk_int__ref i1))))
(assert (=> (not (and (<= 2 i1) (<= i1 999))) (= rayl__split_fields5 (mk___split_fields__ref4 rayl__split_fields))))
(assert (=> (not (and (<= 2 i1) (<= i1 999))) (= rayr__split_fields5 (mk___split_fields__ref4 rayr__split_fields))))
(assert (=> (not (and (<= 2 i1) (<= i1 999))) (= gapvec__split_fields6 (mk___split_fields__ref2 gapvec__split_fields))))
(assert (=> (not (and (<= 2 i1) (<= i1 999))) (= i6 i1)))
(assert (=> (not (and (<= 2 i1) (<= i1 999))) (= rayl__split_fields6 rayl__split_fields)))
(assert (=> (not (and (<= 2 i1) (<= i1 999))) (= rayr__split_fields6 rayr__split_fields)))
(assert (=> (not (and (<= 2 i1) (<= i1 999))) (= gapvec__split_fields7 gapvec__split_fields)))
(assert (= result5 rayr__split_fields5))
(assert (= rayr__split_fields7 (us_split_fields9 (select laserscan 1000))))
(assert (= result6 rayl__split_fields5))
(assert (= rayl__split_fields7 (us_split_fields9 (select laserscan 1))))
(assert (and (= o7 (ccwdiff (rec__algorithm__laser_scan_data__second rayr__split_fields7) (rec__algorithm__laser_scan_data__second rayl__split_fields7))) (fp.isFinite32 o7)))
(assert (and (= o8 (cos1 o7)) (and (fp.isFinite32 o8) (and (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) o8) (fp.leq o8 (fp #b0 #b01111111 #b00000000000000000000000))) (=> (fp.eq o7 (fp #b0 #b00000000 #b00000000000000000000000)) (fp.eq o8 (fp #b0 #b01111111 #b00000000000000000000000)))))))
(assert (and (= o5 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields7)))) (fp.isFinite32 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields7))))))
(assert (= o6 (fp.mul RNE o5 (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields7)))))
(assert (and (= o9 o6) (fp.isFinite32 o6)))
(assert (= o10 (fp.mul RNE o9 o8)))
(assert (and (= o11 o10) (fp.isFinite32 o10)))
(assert (and (= o2 (fp.mul RNE (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields7)) (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields7)))) (fp.isFinite32 (fp.mul RNE (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields7)) (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields7))))))
(assert (and (= o3 (fp.mul RNE (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields7)) (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields7)))) (fp.isFinite32 (fp.mul RNE (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields7)) (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields7))))))
(assert (= o4 (fp.add RNE o3 o2)))
(assert (not (fp.isFinite32 o4)))
(check-sat)
(exit)
