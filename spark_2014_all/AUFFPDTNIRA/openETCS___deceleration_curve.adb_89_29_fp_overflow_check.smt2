(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-fun m_per_s_from_km_per_h (Float32) Float32)
(declare-fun m_per_s_from_km_per_h__function_guard (Float32 Float32) Bool)
(declare-fun a_gradient (Int) Float32)
(declare-fun a_gradient__function_guard (Float32 Int) Bool)
(declare-fun a_brake_safe (Float32 Int) Float32)
(declare-fun a_brake_safe__function_guard (Float32 Float32 Int) Bool)
(declare-fun a_safe (Float32 Int) Float32)
(declare-fun a_safe__function_guard (Float32 Float32 Int) Bool)
(declare-sort speed_t 0)
(declare-fun user_eq1 (speed_t speed_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 speed_t)
(declare-datatypes () ((speed_t__ref (mk_speed_t__ref (speed_t__content speed_t)))))
(define-fun speed_t__ref___projection ((a speed_t__ref)) speed_t (speed_t__content a))
(define-fun dynamic_invariant ((temp___expr_175 Float32) (temp___is_init_171 Bool) (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool) (temp___do_typ_inv_174 Bool)) Bool (=> (or (= temp___is_init_171 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_175)))
(declare-sort deceleration_t 0)
(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun user_eq2 (deceleration_t deceleration_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)
(declare-const dummy2 deceleration_t)
(declare-datatypes () ((deceleration_t__ref (mk_deceleration_t__ref (deceleration_t__content deceleration_t)))))
(define-fun deceleration_t__ref___projection ((a deceleration_t__ref)) deceleration_t (deceleration_t__content a))
(define-fun dynamic_invariant1 ((temp___expr_196 Float32) (temp___is_init_192 Bool) (temp___skip_constant_193 Bool) (temp___do_toplevel_194 Bool) (temp___do_typ_inv_195 Bool)) Bool (=> (or (= temp___is_init_192 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (in_range1 temp___expr_196)))
(declare-sort distance_t 0)
(declare-fun distance_tqtint (distance_t) Int)
(assert (forall ((i distance_t)) (and (<= 0 (distance_tqtint i)) (<= (distance_tqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (distance_t distance_t) Bool)
(declare-const dummy3 distance_t)
(declare-datatypes () ((distance_t__ref (mk_distance_t__ref (distance_t__content distance_t)))))
(define-fun distance_t__ref___projection ((a distance_t__ref)) distance_t (distance_t__content a))
(define-fun dynamic_invariant2 ((temp___expr_203 Int) (temp___is_init_199 Bool) (temp___skip_constant_200 Bool) (temp___do_toplevel_201 Bool) (temp___do_typ_inv_202 Bool)) Bool (=> (or (= temp___is_init_199 true) (<= 0 2147483647)) (in_range2 temp___expr_203)))
(assert (forall ((v Float32)) (forall ((d Int)) (! (=> (and (dynamic_invariant v true true true true) (dynamic_invariant2 d true true true true)) (dynamic_invariant1 (a_safe v d) true false true true)) :pattern ((a_safe v d))))))
(assert (forall ((v Float32)) (forall ((d Int)) (! (=> (and (dynamic_invariant v true true true true) (dynamic_invariant2 d true true true true)) (= (a_safe v d) (fp.add RNE (a_brake_safe v d) (a_gradient d)))) :pattern ((a_safe v d))))))
(declare-fun curve_index_from_location (Int) Int)
(declare-fun curve_index_from_location__function_guard (Int Int) Bool)
(declare-sort braking_curve_range 0)
(declare-fun braking_curve_rangeqtint (braking_curve_range) Int)
(assert (forall ((i braking_curve_range)) (and (<= 0 (braking_curve_rangeqtint i)) (<= (braking_curve_rangeqtint i) 1000))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (braking_curve_range braking_curve_range) Bool)
(declare-const dummy4 braking_curve_range)
(declare-datatypes () ((braking_curve_range__ref (mk_braking_curve_range__ref (braking_curve_range__content braking_curve_range)))))
(define-fun braking_curve_range__ref___projection ((a braking_curve_range__ref)) braking_curve_range (braking_curve_range__content a))
(define-fun dynamic_invariant3 ((temp___expr_362 Int) (temp___is_init_358 Bool) (temp___skip_constant_359 Bool) (temp___do_toplevel_360 Bool) (temp___do_typ_inv_361 Bool)) Bool (=> (or (= temp___is_init_358 true) (<= 0 1000)) (in_range3 temp___expr_362)))
(assert (forall ((d Int)) (! (=> (and (dynamic_invariant2 d true true true true) (<= d 5000)) (dynamic_invariant3 (curve_index_from_location d) true false true true)) :pattern ((curve_index_from_location d)))))
(declare-fun to_rep (speed_t) Float32)
(declare-fun of_rep (Float32) speed_t)
(assert (forall ((x speed_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x speed_t)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tdistance_tB 0)
(declare-fun tdistance_tBqtint (tdistance_tB) Int)
(assert (forall ((i tdistance_tB)) (and (<= (- 2147483648) (tdistance_tBqtint i)) (<= (tdistance_tBqtint i) 2147483647))))
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (tdistance_tB tdistance_tB) Bool)
(declare-const dummy5 tdistance_tB)
(declare-datatypes () ((tdistance_tB__ref (mk_tdistance_tB__ref (tdistance_tB__content tdistance_tB)))))
(define-fun tdistance_tB__ref___projection ((a tdistance_tB__ref)) tdistance_tB (tdistance_tB__content a))
(define-fun to_rep1 ((x distance_t)) Int (distance_tqtint x))
(declare-fun of_rep1 (Int) distance_t)
(assert (forall ((x distance_t)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x distance_t)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const maximum_valid_speed_km_per_h Float32)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const maximum_valid_speed Float32)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__deceleration_curve__braking_curve_entry__location distance_t) (rec__deceleration_curve__braking_curve_entry__speed speed_t)))))
(define-fun us_split_fields_location__projection ((a us_split_fields)) distance_t (rec__deceleration_curve__braking_curve_entry__location a))
(define-fun us_split_fields_speed__projection ((a us_split_fields)) speed_t (rec__deceleration_curve__braking_curve_entry__speed a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__deceleration_curve__braking_curve_entry__location (us_split_fields1 a))) (to_rep1 (rec__deceleration_curve__braking_curve_entry__location (us_split_fields1 b)))) (= (to_rep (rec__deceleration_curve__braking_curve_entry__speed (us_split_fields1 a))) (to_rep (rec__deceleration_curve__braking_curve_entry__speed (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const deceleration_curve__braking_curve_entry__location__first__bit Int)
(declare-const deceleration_curve__braking_curve_entry__location__last__bit Int)
(declare-const deceleration_curve__braking_curve_entry__location__position Int)
(assert (<= 0 deceleration_curve__braking_curve_entry__location__first__bit))
(assert (< deceleration_curve__braking_curve_entry__location__first__bit deceleration_curve__braking_curve_entry__location__last__bit))
(assert (<= 0 deceleration_curve__braking_curve_entry__location__position))
(declare-const deceleration_curve__braking_curve_entry__speed__first__bit Int)
(declare-const deceleration_curve__braking_curve_entry__speed__last__bit Int)
(declare-const deceleration_curve__braking_curve_entry__speed__position Int)
(assert (<= 0 deceleration_curve__braking_curve_entry__speed__first__bit))
(assert (< deceleration_curve__braking_curve_entry__speed__first__bit deceleration_curve__braking_curve_entry__speed__last__bit))
(assert (<= 0 deceleration_curve__braking_curve_entry__speed__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((braking_curve_entry__ref (mk_braking_curve_entry__ref (braking_curve_entry__content us_rep)))))
(define-fun braking_curve_entry__ref___projection ((a braking_curve_entry__ref)) us_rep (braking_curve_entry__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_170 Int)) (=> (and (<= a__first temp___idx_170) (<= temp___idx_170 a__last)) (= (bool_eq (select a temp___idx_170) (select b (+ (- b__first a__first) temp___idx_170))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_170 Int)) (=> (and (<= a__first temp___idx_170) (<= temp___idx_170 a__last)) (= (bool_eq (select a temp___idx_170) (select b (+ (- b__first a__first) temp___idx_170))) true))))))))
(declare-const dummy7 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq7 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__deceleration_curve__braking_curve_t__curve (Array Int us_rep)) (rec__deceleration_curve__braking_curve_t__end_point distance_t)))))
(define-fun us_split_fields_curve__projection ((a us_split_fields2)) (Array Int us_rep) (rec__deceleration_curve__braking_curve_t__curve a))
(define-fun us_split_fields_end_point__projection ((a us_split_fields2)) distance_t (rec__deceleration_curve__braking_curve_t__end_point a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (bool_eq1 (rec__deceleration_curve__braking_curve_t__curve (us_split_fields3 a)) 0 1000 (rec__deceleration_curve__braking_curve_t__curve (us_split_fields3 b)) 0 1000) true) (= (to_rep1 (rec__deceleration_curve__braking_curve_t__end_point (us_split_fields3 a))) (to_rep1 (rec__deceleration_curve__braking_curve_t__end_point (us_split_fields3 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const deceleration_curve__braking_curve_t__curve__first__bit Int)
(declare-const deceleration_curve__braking_curve_t__curve__last__bit Int)
(declare-const deceleration_curve__braking_curve_t__curve__position Int)
(assert (<= 0 deceleration_curve__braking_curve_t__curve__first__bit))
(assert (< deceleration_curve__braking_curve_t__curve__first__bit deceleration_curve__braking_curve_t__curve__last__bit))
(assert (<= 0 deceleration_curve__braking_curve_t__curve__position))
(declare-const deceleration_curve__braking_curve_t__end_point__first__bit Int)
(declare-const deceleration_curve__braking_curve_t__end_point__last__bit Int)
(declare-const deceleration_curve__braking_curve_t__end_point__position Int)
(assert (<= 0 deceleration_curve__braking_curve_t__end_point__first__bit))
(assert (< deceleration_curve__braking_curve_t__end_point__first__bit deceleration_curve__braking_curve_t__end_point__last__bit))
(assert (<= 0 deceleration_curve__braking_curve_t__end_point__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((braking_curve_t__ref (mk_braking_curve_t__ref (braking_curve_t__content us_rep1)))))
(define-fun braking_curve_t__ref___projection ((a braking_curve_t__ref)) us_rep1 (braking_curve_t__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__deceleration_curve__target_t__supervise Bool) (rec__deceleration_curve__target_t__location distance_t) (rec__deceleration_curve__target_t__speed speed_t)))))
(define-fun us_split_fields_supervise__projection ((a us_split_fields4)) Bool (rec__deceleration_curve__target_t__supervise a))
(define-fun us_split_fields_location__2__projection ((a us_split_fields4)) distance_t (rec__deceleration_curve__target_t__location a))
(define-fun us_split_fields_speed__2__projection ((a us_split_fields4)) speed_t (rec__deceleration_curve__target_t__speed a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (rec__deceleration_curve__target_t__supervise (us_split_fields5 a)) (rec__deceleration_curve__target_t__supervise (us_split_fields5 b))) (= (to_rep1 (rec__deceleration_curve__target_t__location (us_split_fields5 a))) (to_rep1 (rec__deceleration_curve__target_t__location (us_split_fields5 b))))) (= (to_rep (rec__deceleration_curve__target_t__speed (us_split_fields5 a))) (to_rep (rec__deceleration_curve__target_t__speed (us_split_fields5 b))))) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const deceleration_curve__target_t__supervise__first__bit Int)
(declare-const deceleration_curve__target_t__supervise__last__bit Int)
(declare-const deceleration_curve__target_t__supervise__position Int)
(assert (<= 0 deceleration_curve__target_t__supervise__first__bit))
(assert (< deceleration_curve__target_t__supervise__first__bit deceleration_curve__target_t__supervise__last__bit))
(assert (<= 0 deceleration_curve__target_t__supervise__position))
(declare-const deceleration_curve__target_t__location__first__bit Int)
(declare-const deceleration_curve__target_t__location__last__bit Int)
(declare-const deceleration_curve__target_t__location__position Int)
(assert (<= 0 deceleration_curve__target_t__location__first__bit))
(assert (< deceleration_curve__target_t__location__first__bit deceleration_curve__target_t__location__last__bit))
(assert (<= 0 deceleration_curve__target_t__location__position))
(declare-const deceleration_curve__target_t__speed__first__bit Int)
(declare-const deceleration_curve__target_t__speed__last__bit Int)
(declare-const deceleration_curve__target_t__speed__position Int)
(assert (<= 0 deceleration_curve__target_t__speed__first__bit))
(assert (< deceleration_curve__target_t__speed__first__bit deceleration_curve__target_t__speed__last__bit))
(assert (<= 0 deceleration_curve__target_t__speed__position))
(declare-fun user_eq9 (us_rep2 us_rep2) Bool)
(declare-const dummy9 us_rep2)
(declare-datatypes () ((target_t__ref (mk_target_t__ref (target_t__content us_rep2)))))
(define-fun target_t__ref___projection ((a target_t__ref)) us_rep2 (target_t__content a))
(declare-const target us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const end_point Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_invariant4 ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(assert (= end_point (curve_index_from_location (to_rep1 (rec__deceleration_curve__target_t__location (us_split_fields5 target))))))
(assert (= maximum_valid_speed (m_per_s_from_km_per_h maximum_valid_speed_km_per_h)))
(declare-sort speed_km_per_h_t 0)
(declare-fun user_eq10 (speed_km_per_h_t speed_km_per_h_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE7 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Float32)
(declare-const dummy10 speed_km_per_h_t)
(declare-datatypes () ((speed_km_per_h_t__ref (mk_speed_km_per_h_t__ref (speed_km_per_h_t__content speed_km_per_h_t)))))
(define-fun speed_km_per_h_t__ref___projection ((a speed_km_per_h_t__ref)) speed_km_per_h_t (speed_km_per_h_t__content a))
(define-fun dynamic_invariant5 ((temp___expr_182 Float32) (temp___is_init_178 Bool) (temp___skip_constant_179 Bool) (temp___do_toplevel_180 Bool) (temp___do_typ_inv_181 Bool)) Bool (=> (or (= temp___is_init_178 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_182)))
(assert (= maximum_valid_speed_km_per_h (fp #b0 #b10000111 #b11110100000000000000000)))
(declare-fun is_valid_speed_km_per_h (Float32) Bool)
(declare-fun is_valid_speed_km_per_h__function_guard (Bool Float32) Bool)
(assert true)
(assert (forall ((speed Float32)) (! (= (= (is_valid_speed_km_per_h speed) true) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) speed) (fp.leq speed maximum_valid_speed_km_per_h))) :pattern ((is_valid_speed_km_per_h speed)))))
(assert (forall ((speed Float32)) (! (=> (and (dynamic_invariant5 speed true true true true) (= (is_valid_speed_km_per_h speed) true)) (dynamic_invariant (m_per_s_from_km_per_h speed) true false true true)) :pattern ((m_per_s_from_km_per_h speed)))))
(assert (forall ((speed Float32)) (! (=> (dynamic_invariant5 speed true true true true) (= (m_per_s_from_km_per_h speed) (fp.div RNE (fp.mul RNE speed (fp #b0 #b10001000 #b11110100000000000000000)) (fp #b0 #b10001010 #b11000010000000000000000)))) :pattern ((m_per_s_from_km_per_h speed)))))
(declare-fun is_valid_speed (Float32) Bool)
(declare-fun is_valid_speed__function_guard (Bool Float32) Bool)
(assert true)
(assert (forall ((speed Float32)) (! (= (= (is_valid_speed speed) true) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) speed) (fp.leq speed (m_per_s_from_km_per_h maximum_valid_speed_km_per_h)))) :pattern ((is_valid_speed speed)))))
(declare-sort num_delimiters_range 0)
(declare-fun num_delimiters_rangeqtint (num_delimiters_range) Int)
(assert (forall ((i num_delimiters_range)) (and (<= 0 (num_delimiters_rangeqtint i)) (<= (num_delimiters_rangeqtint i) 10))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq11 (num_delimiters_range num_delimiters_range) Bool)
(declare-const dummy11 num_delimiters_range)
(declare-datatypes () ((num_delimiters_range__ref (mk_num_delimiters_range__ref (num_delimiters_range__content num_delimiters_range)))))
(define-fun num_delimiters_range__ref___projection ((a num_delimiters_range__ref)) num_delimiters_range (num_delimiters_range__content a))
(define-fun to_rep2 ((x num_delimiters_range)) Int (num_delimiters_rangeqtint x))
(declare-fun of_rep2 (Int) num_delimiters_range)
(assert (forall ((x num_delimiters_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x num_delimiters_range)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-fun to_rep3 (float) Float32)
(declare-fun of_rep3 (Float32) float)
(assert (forall ((x float)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort function_range 0)
(declare-fun function_rangeqtint (function_range) Int)
(assert (forall ((i function_range)) (and (<= 0 (function_rangeqtint i)) (<= (function_rangeqtint i) 2147483647))))
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq12 (function_range function_range) Bool)
(declare-const dummy12 function_range)
(declare-datatypes () ((function_range__ref (mk_function_range__ref (function_range__content function_range)))))
(define-fun function_range__ref___projection ((a function_range__ref)) function_range (function_range__content a))
(define-fun to_rep4 ((x function_range)) Int (function_rangeqtint x))
(declare-fun of_rep4 (Int) function_range)
(assert (forall ((x function_range)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x function_range)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__step_function__delimiter_entry__delimiter function_range) (rec__step_function__delimiter_entry__value float)))))
(define-fun us_split_fields_Delimiter__projection ((a us_split_fields6)) function_range (rec__step_function__delimiter_entry__delimiter a))
(define-fun us_split_fields_Value__projection ((a us_split_fields6)) float (rec__step_function__delimiter_entry__value a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 a))) (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 b)))) (= (to_rep3 (rec__step_function__delimiter_entry__value (us_split_fields7 a))) (to_rep3 (rec__step_function__delimiter_entry__value (us_split_fields7 b))))) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep3) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep3) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))
(declare-const step_function__delimiter_entry__delimiter__first__bit Int)
(declare-const step_function__delimiter_entry__delimiter__last__bit Int)
(declare-const step_function__delimiter_entry__delimiter__position Int)
(assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))
(assert (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))
(assert (<= 0 step_function__delimiter_entry__delimiter__position))
(declare-const step_function__delimiter_entry__value__first__bit Int)
(declare-const step_function__delimiter_entry__value__last__bit Int)
(declare-const step_function__delimiter_entry__value__position Int)
(assert (<= 0 step_function__delimiter_entry__value__first__bit))
(assert (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))
(assert (<= 0 step_function__delimiter_entry__value__position))
(declare-fun user_eq13 (us_rep3 us_rep3) Bool)
(declare-const dummy13 us_rep3)
(declare-datatypes () ((delimiter_entry__ref (mk_delimiter_entry__ref (delimiter_entry__content us_rep3)))))
(define-fun delimiter_entry__ref___projection ((a delimiter_entry__ref)) us_rep3 (delimiter_entry__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))
(assert (forall ((a (Array Int us_rep3))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int us_rep3))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq5 ((a (Array Int us_rep3)) (a__first Int) (a__last Int) (b (Array Int us_rep3)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq4 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq4 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const dummy14 (Array Int us_rep3))
(declare-const value__size5 Int)
(declare-fun object__size5 ((Array Int us_rep3)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int us_rep3)) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 ((Array Int us_rep3)) Int)
(assert (<= 0 value__size5))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size5 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment5 a))))
(declare-fun user_eq14 ((Array Int us_rep3) (Array Int us_rep3)) Bool)
(declare-datatypes () ((us_split_fields8 (mk___split_fields4 (rec__step_function__step_function_t__number_of_delimiters num_delimiters_range) (rec__step_function__step_function_t__step (Array Int us_rep3))))))
(define-fun us_split_fields_Number_Of_Delimiters__projection ((a us_split_fields8)) num_delimiters_range (rec__step_function__step_function_t__number_of_delimiters a))
(define-fun us_split_fields_Step__projection ((a us_split_fields8)) (Array Int us_rep3) (rec__step_function__step_function_t__step a))
(declare-datatypes () ((us_split_fields__ref4 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref4)) us_split_fields8 (us_split_fields__content4 a))
(declare-datatypes () ((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___2__projection ((a us_rep4)) us_split_fields8 (us_split_fields9 a))
(define-fun bool_eq6 ((a us_rep4) (b us_rep4)) Bool (ite (and (= (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 a))) (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 b)))) (= (bool_eq5 (rec__step_function__step_function_t__step (us_split_fields9 a)) 0 10 (rec__step_function__step_function_t__step (us_split_fields9 b)) 0 10) true)) true false))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep4) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep4) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))
(declare-const step_function__step_function_t__number_of_delimiters__first__bit Int)
(declare-const step_function__step_function_t__number_of_delimiters__last__bit Int)
(declare-const step_function__step_function_t__number_of_delimiters__position Int)
(assert (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))
(assert (< step_function__step_function_t__number_of_delimiters__first__bit step_function__step_function_t__number_of_delimiters__last__bit))
(assert (<= 0 step_function__step_function_t__number_of_delimiters__position))
(declare-const step_function__step_function_t__step__first__bit Int)
(declare-const step_function__step_function_t__step__last__bit Int)
(declare-const step_function__step_function_t__step__position Int)
(assert (<= 0 step_function__step_function_t__step__first__bit))
(assert (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))
(assert (<= 0 step_function__step_function_t__step__position))
(declare-fun user_eq15 (us_rep4 us_rep4) Bool)
(declare-const dummy15 us_rep4)
(declare-datatypes () ((step_function_t__ref (mk_step_function_t__ref (step_function_t__content us_rep4)))))
(define-fun step_function_t__ref___projection ((a step_function_t__ref)) us_rep4 (step_function_t__content a))
(declare-fun get_value (us_rep4 Int) Float32)
(declare-fun get_value__function_guard (Float32 us_rep4 Int) Bool)
(declare-fun is_valid_deceleration_model (us_rep4) Bool)
(declare-fun is_valid_deceleration_model__function_guard (Bool us_rep4) Bool)
(declare-fun a_brake_emergency (Float32 Int) Float32)
(declare-fun a_brake_emergency__function_guard (Float32 Float32 Int) Bool)
(declare-const a_brake_emergency_model us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(assert (forall ((v Float32)) (forall ((d Int)) (! (=> (and (and (dynamic_invariant v true true true true) (dynamic_invariant2 d true true true true)) (and (= (is_valid_deceleration_model a_brake_emergency_model) true) (= (is_valid_speed v) true))) (let ((result (a_brake_emergency v d))) (and (fp.eq result (get_value a_brake_emergency_model (to_int1 RNA v))) (dynamic_invariant1 result true false true true)))) :pattern ((a_brake_emergency v d))))))
(declare-fun kdry_rst (Float32) Float32)
(declare-fun kdry_rst__function_guard (Float32 Float32) Bool)
(declare-fun kwet_rst (Float32) Float32)
(declare-fun kwet_rst__function_guard (Float32 Float32) Bool)
(declare-const m_nvavadh Float32)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(assert (forall ((v Float32)) (forall ((d Int)) (! (=> (and (dynamic_invariant v true true true true) (dynamic_invariant2 d true true true true)) (dynamic_invariant1 (a_brake_safe v d) true false true true)) :pattern ((a_brake_safe v d))))))
(assert (forall ((v Float32)) (forall ((d Int)) (! (=> (and (dynamic_invariant v true true true true) (dynamic_invariant2 d true true true true)) (= (a_brake_safe v d) (fp.mul RNE (fp.mul RNE (kdry_rst v) (fp.add RNE (kwet_rst v) (fp.mul RNE m_nvavadh (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) (kwet_rst v))))) (a_brake_emergency v d)))) :pattern ((a_brake_safe v d))))))
(define-fun dynamic_invariant6 ((temp___expr_237 Int) (temp___is_init_233 Bool) (temp___skip_constant_234 Bool) (temp___do_toplevel_235 Bool) (temp___do_typ_inv_236 Bool)) Bool (=> (or (= temp___is_init_233 true) (<= 0 10)) (in_range5 temp___expr_237)))
(define-fun dynamic_invariant7 ((temp___expr_244 Int) (temp___is_init_240 Bool) (temp___skip_constant_241 Bool) (temp___do_toplevel_242 Bool) (temp___do_typ_inv_243 Bool)) Bool (=> (or (= temp___is_init_240 true) (<= 0 2147483647)) (in_range6 temp___expr_244)))
(declare-fun is_valid (us_rep4) Bool)
(declare-fun is_valid__function_guard (Bool us_rep4) Bool)
(assert true)
(assert (forall ((sfun us_rep4)) (! (= (= (is_valid sfun) true) (and (= (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 (let ((temp___287 (rec__step_function__step_function_t__step (us_split_fields9 sfun)))) (select temp___287 0))))) 0) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 sfun))) 1))) (< (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 (let ((temp___289 (rec__step_function__step_function_t__step (us_split_fields9 sfun)))) (select temp___289 i))))) (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 (let ((temp___288 (rec__step_function__step_function_t__step (us_split_fields9 sfun)))) (select temp___288 (+ i 1))))))))))) :pattern ((is_valid sfun)))))
(declare-fun has_same_delimiters (us_rep4 us_rep4) Bool)
(declare-fun has_same_delimiters__function_guard (Bool us_rep4 us_rep4) Bool)
(assert true)
(assert (forall ((sfun1 us_rep4) (sfun2 us_rep4)) (! (= (= (has_same_delimiters sfun1 sfun2) true) (and (= (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 sfun1))) (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 sfun2)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 sfun1))))) (= (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 (let ((temp___296 (rec__step_function__step_function_t__step (us_split_fields9 sfun1)))) (select temp___296 i))))) (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 (let ((temp___297 (rec__step_function__step_function_t__step (us_split_fields9 sfun2)))) (select temp___297 i)))))))))) :pattern ((has_same_delimiters sfun1 sfun2)))))
(assert (forall ((sfun us_rep4)) (forall ((x Int)) (! (=> (and (dynamic_invariant7 x true true true true) (= (is_valid sfun) true)) (let ((result (get_value sfun x))) (and (or (exists ((i Int)) (and (and (<= 0 i) (<= i (- (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 sfun))) 1))) (and (and (<= (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 (let ((temp___304 (rec__step_function__step_function_t__step (us_split_fields9 sfun)))) (select temp___304 i))))) x) (< x (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 (let ((temp___305 (rec__step_function__step_function_t__step (us_split_fields9 sfun)))) (select temp___305 (+ i 1)))))))) (fp.eq result (to_rep3 (rec__step_function__delimiter_entry__value (us_split_fields7 (let ((temp___306 (rec__step_function__step_function_t__step (us_split_fields9 sfun)))) (select temp___306 i))))))))) (and (<= (to_rep4 (rec__step_function__delimiter_entry__delimiter (us_split_fields7 (let ((temp___307 (rec__step_function__step_function_t__step (us_split_fields9 sfun)))) (select temp___307 (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 sfun)))))))) x) (fp.eq result (to_rep3 (rec__step_function__delimiter_entry__value (us_split_fields7 (let ((temp___308 (rec__step_function__step_function_t__step (us_split_fields9 sfun)))) (select temp___308 (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 sfun))))))))))) (dynamic_invariant4 result true false true true)))) :pattern ((get_value sfun x))))))
(assert (= m_nvavadh (fp #b0 #b00000000 #b00000000000000000000000)))
(assert true)
(assert (forall ((s us_rep4)) (! (= (= (is_valid_deceleration_model s) true) (and (= (is_valid s) true) (<= (to_rep2 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields9 s))) 6))) :pattern ((is_valid_deceleration_model s)))))
(declare-fun temp_____aggregate_def_155 (us_rep3 us_rep3) (Array Int us_rep3))
(declare-const rliteral num_delimiters_range)
(assert (= (num_delimiters_rangeqtint rliteral) 0))
(declare-const rliteral1 function_range)
(assert (= (function_rangeqtint rliteral1) 0))
(assert (= a_brake_emergency_model (mk___rep4 (mk___split_fields4 rliteral (temp_____aggregate_def_155 (mk___rep3 (mk___split_fields3 rliteral1 (of_rep3 (fp #b0 #b01111111 #b00000000000000000000000)))) (mk___rep3 (mk___split_fields3 rliteral1 (of_rep3 (fp #b0 #b00000000 #b00000000000000000000000)))))))))
(declare-const kdry_rst_model us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-fun temp_____aggregate_def_160 (us_rep3 us_rep3) (Array Int us_rep3))
(assert (= kdry_rst_model (mk___rep4 (mk___split_fields4 rliteral (temp_____aggregate_def_160 (mk___rep3 (mk___split_fields3 rliteral1 (of_rep3 (fp #b0 #b01111111 #b00000000000000000000000)))) (mk___rep3 (mk___split_fields3 rliteral1 (of_rep3 (fp #b0 #b00000000 #b00000000000000000000000)))))))))
(declare-const kwet_rst_model us_rep4)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-fun temp_____aggregate_def_165 (us_rep3 us_rep3) (Array Int us_rep3))
(assert (= kwet_rst_model (mk___rep4 (mk___split_fields4 rliteral (temp_____aggregate_def_165 (mk___rep3 (mk___split_fields3 rliteral1 (of_rep3 (fp #b0 #b01111111 #b00000000000000000000000)))) (mk___rep3 (mk___split_fields3 rliteral1 (of_rep3 (fp #b0 #b00000000 #b00000000000000000000000)))))))))
(declare-fun is_valid_kdry_rst (tuple0) Bool)
(declare-fun is_valid_kdry_rst__function_guard (Bool tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (= (is_valid_kdry_rst us_void_param) true) (and (= (is_valid kdry_rst_model) true) (= (has_same_delimiters kdry_rst_model a_brake_emergency_model) true))) :pattern ((is_valid_kdry_rst us_void_param)))))
(assert (forall ((v Float32)) (! (=> (and (dynamic_invariant v true true true true) (= (is_valid_kdry_rst Tuple0) true)) (let ((result (kdry_rst v))) (and (fp.eq result (get_value kdry_rst_model (to_int1 RNA v))) (dynamic_invariant4 result true false true true)))) :pattern ((kdry_rst v)))))
(declare-fun is_valid_kwet_rst (tuple0) Bool)
(declare-fun is_valid_kwet_rst__function_guard (Bool tuple0) Bool)
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (= (is_valid_kwet_rst us_void_param) true) (and (= (is_valid kwet_rst_model) true) (= (has_same_delimiters kwet_rst_model a_brake_emergency_model) true))) :pattern ((is_valid_kwet_rst us_void_param)))))
(assert (forall ((v Float32)) (! (=> (and (dynamic_invariant v true true true true) (= (is_valid_kwet_rst Tuple0) true)) (let ((result (kwet_rst v))) (and (fp.eq result (get_value kwet_rst_model (to_int1 RNA v))) (dynamic_invariant4 result true false true true)))) :pattern ((kwet_rst v)))))
(assert (forall ((d Int)) (! (=> (dynamic_invariant2 d true true true true) (dynamic_invariant1 (a_gradient d) true false true true)) :pattern ((a_gradient d)))))
(assert (forall ((d Int)) (! (=> (dynamic_invariant2 d true true true true) (= (a_gradient d) (fp #b0 #b00000000 #b00000000000000000000000))) :pattern ((a_gradient d)))))
(assert (forall ((temp___157 us_rep3) (temp___158 us_rep3)) (let ((temp___156 (temp_____aggregate_def_155 temp___157 temp___158))) (forall ((temp___159 Int)) (ite (= temp___159 0) (= (select temp___156 temp___159) temp___157) (= (select temp___156 temp___159) temp___158))))))
(assert (forall ((temp___162 us_rep3) (temp___163 us_rep3)) (let ((temp___161 (temp_____aggregate_def_160 temp___162 temp___163))) (forall ((temp___164 Int)) (ite (= temp___164 0) (= (select temp___161 temp___164) temp___162) (= (select temp___161 temp___164) temp___163))))))
(assert (forall ((temp___167 us_rep3) (temp___168 us_rep3)) (let ((temp___166 (temp_____aggregate_def_165 temp___167 temp___168))) (forall ((temp___169 Int)) (ite (= temp___169 0) (= (select temp___166 temp___169) temp___167) (= (select temp___166 temp___169) temp___168))))))
(declare-const braking_curve__split_fields (Array Int us_rep))
(declare-const braking_curve__split_fields1 distance_t)
(declare-const speed Float32)
(declare-const location Int)
(declare-const i Int)
(declare-const deceleration_curve__curve_from_target__end_point__assume Int)
(declare-const o distance_t)
(declare-const o1 (Array Int us_rep))
(declare-const o2 distance_t)
(declare-const temp___420 (Array Int us_rep))
(declare-const temp___4201 distance_t)
(declare-const o3 distance_t)
(declare-const o4 distance_t)
(declare-const o5 speed_t)
(declare-const o6 distance_t)
(declare-const o7 speed_t)
(declare-const o8 (Array Int us_rep))
(declare-const o9 (Array Int us_rep))
(declare-const o10 distance_t)
(declare-const temp___425 (Array Int us_rep))
(declare-const temp___4251 distance_t)
(declare-const o11 speed_t)
(declare-const o12 distance_t)
(declare-const o13 speed_t)
(declare-const o14 distance_t)
(declare-const o15 speed_t)
(declare-const o16 (Array Int us_rep))
(declare-const o17 (Array Int us_rep))
(declare-const o18 distance_t)
(declare-const temp___430 (Array Int us_rep))
(declare-const temp___4301 distance_t)
(declare-const o19 Float32)
(declare-const o20 Float32)
(declare-const result Float32)
(declare-const speed1 Float32)
(declare-const result1 int__ref)
(declare-const location1 Int)
(declare-const result2 us_split_fields__ref1)
(declare-const braking_curve__split_fields2 us_split_fields2)
(declare-const result3 us_split_fields__ref1)
(declare-const braking_curve__split_fields3 us_split_fields2)
(declare-const result4 us_split_fields__ref1)
(declare-const braking_curve__split_fields4 us_split_fields2)
(declare-const result5 int__ref)
(declare-const i1 Int)
(declare-const braking_curve__split_fields5 us_split_fields2)
(declare-const speed2 Float32)
(declare-const location2 Int)
(declare-const i2 Int)
(assert (fp.isFinite32 maximum_valid_speed))
(assert (= (m_per_s_from_km_per_h maximum_valid_speed_km_per_h) maximum_valid_speed))
(assert (<= (to_rep1 (rec__deceleration_curve__target_t__location (us_split_fields5 target))) 5000))
(assert (= result speed))
(assert (= speed1 (to_rep (rec__deceleration_curve__target_t__speed (us_split_fields5 target)))))
(assert (fp.isFinite32 speed1))
(assert (= result1 (mk_int__ref location)))
(assert (= location1 (to_rep1 (rec__deceleration_curve__target_t__location (us_split_fields5 target)))))
(assert (in_range2 location1))
(assert (and (= deceleration_curve__curve_from_target__end_point__assume (curve_index_from_location (to_rep1 (rec__deceleration_curve__target_t__location (us_split_fields5 target))))) (in_range3 deceleration_curve__curve_from_target__end_point__assume)))
(assert (= deceleration_curve__curve_from_target__end_point__assume end_point))
(assert (in_range3 end_point))
(assert (= (to_rep1 o) (to_rep1 (rec__deceleration_curve__target_t__location (us_split_fields5 target)))))
(assert (= braking_curve__split_fields o1))
(assert (= o o2))
(assert (= temp___420 o1))
(assert (= temp___4201 o2))
(assert (= result2 (mk___split_fields__ref1 (mk___split_fields1 braking_curve__split_fields braking_curve__split_fields1))))
(assert (= braking_curve__split_fields2 (mk___split_fields1 temp___420 temp___4201)))
(assert (= (to_rep1 o3) location1))
(assert (= o3 o4))
(assert (= (rec__deceleration_curve__braking_curve_entry__speed (us_split_fields1 (select (rec__deceleration_curve__braking_curve_t__curve braking_curve__split_fields2) end_point))) o5))
(assert (= o6 o4))
(assert (= o7 o5))
(assert (= o8 (store (rec__deceleration_curve__braking_curve_t__curve braking_curve__split_fields2) end_point (mk___rep (mk___split_fields o6 o7)))))
(assert (= o8 o9))
(assert (= (rec__deceleration_curve__braking_curve_t__end_point braking_curve__split_fields2) o10))
(assert (= temp___425 o9))
(assert (= temp___4251 o10))
(assert (= result3 (mk___split_fields__ref1 braking_curve__split_fields2)))
(assert (= braking_curve__split_fields3 (mk___split_fields1 temp___425 temp___4251)))
(assert (= (to_rep o11) speed1))
(assert (= (rec__deceleration_curve__braking_curve_entry__location (us_split_fields1 (select (rec__deceleration_curve__braking_curve_t__curve braking_curve__split_fields3) end_point))) o12))
(assert (= o11 o13))
(assert (= o14 o12))
(assert (= o15 o13))
(assert (= o16 (store (rec__deceleration_curve__braking_curve_t__curve braking_curve__split_fields3) end_point (mk___rep (mk___split_fields o14 o15)))))
(assert (= o16 o17))
(assert (= (rec__deceleration_curve__braking_curve_t__end_point braking_curve__split_fields3) o18))
(assert (= temp___430 o17))
(assert (= temp___4301 o18))
(assert (= result4 (mk___split_fields__ref1 braking_curve__split_fields3)))
(assert (= braking_curve__split_fields4 (mk___split_fields1 temp___430 temp___4301)))
(assert (= result5 (mk_int__ref i)))
(assert (= i1 (- end_point 1)))
(assert (<= 0 i1))
(assert (<= i1 (- end_point 1)))
(assert (and (and (and (=> (<= 0 2147483647) (in_range2 location2)) (and (forall ((temp___445 Int)) (=> (and (<= 0 temp___445) (<= temp___445 1000)) (=> (or (< (- end_point 1) temp___445) (or (< temp___445 0) (<= temp___445 i2))) (= (select (rec__deceleration_curve__braking_curve_t__curve braking_curve__split_fields5) temp___445) (select (rec__deceleration_curve__braking_curve_t__curve braking_curve__split_fields4) temp___445))))) (= (rec__deceleration_curve__braking_curve_t__end_point braking_curve__split_fields5) (rec__deceleration_curve__braking_curve_t__end_point braking_curve__split_fields4)))) (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 speed2))) (and (<= 0 i2) (<= i2 (- end_point 1)))))
(assert (and (= o19 (a_safe speed2 location2)) (and (in_range1 o19) (= o19 (fp.add RNE (a_brake_safe speed2 location2) (a_gradient location2))))))
(assert (= o20 (fp.mul RNE (fp #b0 #b10000001 #b00000000000000000000000) o19)))
(assert (not (fp.isFinite32 o20)))
(check-sat)
(exit)
