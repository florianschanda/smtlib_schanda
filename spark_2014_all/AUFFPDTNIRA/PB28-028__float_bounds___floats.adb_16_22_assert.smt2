(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun is_plus_infinity1 ((x Float64)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity1 ((x Float64)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero1 ((x Float64)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero1 ((x Float64)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int1 (RoundingMode Int) Float64)
(declare-fun to_int2 (RoundingMode Float64) Int)
(declare-const max_int1 Int)
(define-fun in_int_range1 ((i Int)) Bool (and (<= (- max_int1) i) (<= i max_int1)))
(define-fun in_safe_int_range1 ((i Int)) Bool (and (<= (- 9007199254740992) i) (<= i 9007199254740992)))
(define-fun same_sign1 ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign1 ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign1 ((z Float64) (x Float64) (y Float64)) Bool (and (=> (same_sign1 x y) (fp.isPositive z)) (=> (diff_sign1 x y) (fp.isNegative z))))
(define-fun same_sign_real1 ((x Float64) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 Float64)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-fun to_rep (float) Float32)
(declare-fun of_rep (Float32) float)
(assert (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort long_float 0)
(declare-fun user_eq1 (long_float long_float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float64) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float64)
(declare-const dummy1 long_float)
(declare-datatypes () ((long_float__ref (mk_long_float__ref (long_float__content long_float)))))
(define-fun long_float__ref___projection ((a long_float__ref)) long_float (long_float__content a))
(declare-fun to_rep1 (long_float) Float64)
(declare-fun of_rep1 (Float64) long_float)
(assert (forall ((x long_float)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x long_float)) (! (fp.isFinite64 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Float64)) (! (=> (fp.isFinite64 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int float))))))
(declare-fun slide ((Array Int float) Int Int) (Array Int float))
(assert (forall ((a (Array Int float))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int float))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int float)) (a__first Int) (a__last Int) (b (Array Int float)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int float)) (b (Array Int float))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int long_float))))))
(declare-fun slide1 ((Array Int long_float) Int Int) (Array Int long_float))
(assert (forall ((a (Array Int long_float))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int long_float))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int long_float)) (a__first Int) (a__last Int) (b (Array Int long_float)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep1 (select a temp___idx_155)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int long_float)) (b (Array Int long_float))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep1 (select a temp___idx_155)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const a (Array Int float))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(define-fun dynamic_invariant1 ((temp___expr_67 Float64) (temp___is_init_63 Bool) (temp___skip_constant_64 Bool) (temp___do_toplevel_65 Bool) (temp___do_typ_inv_66 Bool)) Bool (=> (or (= temp___is_init_63 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (fp.isFinite64 temp___expr_67)))
(declare-const d (Array Int long_float))
(declare-const o long_float)
(declare-const o1 (Array Int long_float))
(declare-const o2 long_float)
(declare-const o3 (Array Int long_float))
(declare-const o4 long_float)
(declare-const o5 (Array Int long_float))
(declare-const o6 long_float)
(declare-const o7 (Array Int long_float))
(declare-const result (Array Int long_float))
(declare-const d1 (Array Int long_float))
(declare-const result1 (Array Int long_float))
(declare-const d2 (Array Int long_float))
(declare-const result2 (Array Int long_float))
(declare-const d3 (Array Int long_float))
(declare-const result3 (Array Int long_float))
(declare-const d4 (Array Int long_float))
(assert (forall ((i Int)) (=> (and (<= 1 i) (<= i 3)) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (to_rep (select a i))) (fp.leq (to_rep (select a i)) (fp #b0 #b01111111 #b00000000000000000000000))))))
(assert (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (to_rep (select a 1))) (fp.leq (to_rep (select a 1)) (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (to_rep (select a 2))) (fp.leq (to_rep (select a 2)) (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (to_rep (select a 3))) (fp.leq (to_rep (select a 3)) (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (= (to_rep1 o) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (= o1 (store d 1 o)))
(assert (= result d))
(assert (= d1 o1))
(assert (= (to_rep1 o2) ((_ to_fp 11 53) RNE (fp.mul RNE (to_rep (select a 1)) (fp #b0 #b01111110 #b00000000000000000000000)))))
(assert (= o3 (store d1 2 o2)))
(assert (= result1 d1))
(assert (= d2 o3))
(assert (= (to_rep1 o4) ((_ to_fp 11 53) RNE (fp.mul RNE (to_rep (select a 2)) (fp #b0 #b01111110 #b00000000000000000000000)))))
(assert (= o5 (store d2 3 o4)))
(assert (= result2 d2))
(assert (= d3 o5))
(assert (= (to_rep1 o6) ((_ to_fp 11 53) RNE (fp.mul RNE (to_rep (select a 3)) (fp #b0 #b01111110 #b00000000000000000000000)))))
(assert (= o7 (store d3 4 o6)))
(assert (= result3 d3))
(assert (= d4 o7))
(assert (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (to_rep1 (select d4 1))) (fp.leq (to_rep1 (select d4 1)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (to_rep1 (select d4 2))) (fp.leq (to_rep1 (select d4 2)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (to_rep1 (select d4 3))) (fp.leq (to_rep1 (select d4 3)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (not (fp.leq (to_rep1 (select d4 4)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(check-sat)
(exit)
