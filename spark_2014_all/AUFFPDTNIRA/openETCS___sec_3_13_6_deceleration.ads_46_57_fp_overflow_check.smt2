(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-sort speed_t 0)
(declare-fun user_eq1 (speed_t speed_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy1 speed_t)
(declare-datatypes () ((speed_t__ref (mk_speed_t__ref (speed_t__content speed_t)))))
(define-fun speed_t__ref___projection ((a speed_t__ref)) speed_t (speed_t__content a))
(define-fun dynamic_invariant ((temp___expr_174 Float32) (temp___is_init_170 Bool) (temp___skip_constant_171 Bool) (temp___do_toplevel_172 Bool) (temp___do_typ_inv_173 Bool)) Bool (=> (or (= temp___is_init_170 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_174)))
(declare-sort deceleration_t 0)
(define-fun in_range ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun user_eq2 (deceleration_t deceleration_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy2 deceleration_t)
(declare-datatypes () ((deceleration_t__ref (mk_deceleration_t__ref (deceleration_t__content deceleration_t)))))
(define-fun deceleration_t__ref___projection ((a deceleration_t__ref)) deceleration_t (deceleration_t__content a))
(declare-sort distance_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (distance_t distance_t) Bool)
(declare-const dummy3 distance_t)
(declare-datatypes () ((distance_t__ref (mk_distance_t__ref (distance_t__content distance_t)))))
(define-fun distance_t__ref___projection ((a distance_t__ref)) distance_t (distance_t__content a))
(define-fun dynamic_invariant1 ((temp___expr_202 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool) (temp___do_typ_inv_201 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= 0 2147483647)) (in_range1 temp___expr_202)))
(define-fun dynamic_invariant2 ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(declare-sort num_delimiters_range 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (num_delimiters_range num_delimiters_range) Bool)
(declare-const dummy4 num_delimiters_range)
(declare-datatypes () ((num_delimiters_range__ref (mk_num_delimiters_range__ref (num_delimiters_range__content num_delimiters_range)))))
(define-fun num_delimiters_range__ref___projection ((a num_delimiters_range__ref)) num_delimiters_range (num_delimiters_range__content a))
(declare-fun to_rep (num_delimiters_range) Int)
(declare-fun of_rep (Int) num_delimiters_range)
(assert (forall ((x num_delimiters_range)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x num_delimiters_range)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun to_rep1 (float) Float32)
(declare-fun of_rep1 (Float32) float)
(assert (forall ((x float)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort function_range 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (function_range function_range) Bool)
(declare-const dummy5 function_range)
(declare-datatypes () ((function_range__ref (mk_function_range__ref (function_range__content function_range)))))
(define-fun function_range__ref___projection ((a function_range__ref)) function_range (function_range__content a))
(declare-fun to_rep2 (function_range) Int)
(declare-fun of_rep2 (Int) function_range)
(assert (forall ((x function_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x function_range)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__step_function__delimiter_entry__delimiter function_range) (rec__step_function__delimiter_entry__value float)))))
(define-fun us_split_fields_Delimiter__projection ((a us_split_fields)) function_range (rec__step_function__delimiter_entry__delimiter a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 a))) (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 b)))) (= (to_rep1 (rec__step_function__delimiter_entry__value (us_split_fields1 a))) (to_rep1 (rec__step_function__delimiter_entry__value (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const step_function__delimiter_entry__delimiter__first__bit Int)
(declare-const step_function__delimiter_entry__delimiter__last__bit Int)
(declare-const step_function__delimiter_entry__delimiter__position Int)
(assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))
(assert (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))
(assert (<= 0 step_function__delimiter_entry__delimiter__position))
(declare-const step_function__delimiter_entry__value__first__bit Int)
(declare-const step_function__delimiter_entry__value__last__bit Int)
(declare-const step_function__delimiter_entry__value__position Int)
(assert (<= 0 step_function__delimiter_entry__value__first__bit))
(assert (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))
(assert (<= 0 step_function__delimiter_entry__value__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((delimiter_entry__ref (mk_delimiter_entry__ref (delimiter_entry__content us_rep)))))
(define-fun delimiter_entry__ref___projection ((a delimiter_entry__ref)) us_rep (delimiter_entry__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const dummy7 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq7 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__step_function__step_function_t__number_of_delimiters num_delimiters_range) (rec__step_function__step_function_t__step (Array Int us_rep))))))
(define-fun us_split_fields_Number_Of_Delimiters__projection ((a us_split_fields2)) num_delimiters_range (rec__step_function__step_function_t__number_of_delimiters a))
(define-fun us_split_fields_Step__projection ((a us_split_fields2)) (Array Int us_rep) (rec__step_function__step_function_t__step a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 a))) (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 b)))) (= (bool_eq1 (rec__step_function__step_function_t__step (us_split_fields3 a)) 0 10 (rec__step_function__step_function_t__step (us_split_fields3 b)) 0 10) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const step_function__step_function_t__number_of_delimiters__first__bit Int)
(declare-const step_function__step_function_t__number_of_delimiters__last__bit Int)
(declare-const step_function__step_function_t__number_of_delimiters__position Int)
(assert (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))
(assert (< step_function__step_function_t__number_of_delimiters__first__bit step_function__step_function_t__number_of_delimiters__last__bit))
(assert (<= 0 step_function__step_function_t__number_of_delimiters__position))
(declare-const step_function__step_function_t__step__first__bit Int)
(declare-const step_function__step_function_t__step__last__bit Int)
(declare-const step_function__step_function_t__step__position Int)
(assert (<= 0 step_function__step_function_t__step__first__bit))
(assert (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))
(assert (<= 0 step_function__step_function_t__step__position))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((step_function_t__ref (mk_step_function_t__ref (step_function_t__content us_rep1)))))
(define-fun step_function_t__ref___projection ((a step_function_t__ref)) us_rep1 (step_function_t__content a))
(declare-fun get_value (us_rep1 Int) Float32)
(declare-fun get_value__function_guard (Float32 us_rep1 Int) Bool)
(declare-const kdry_rst_model us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun is_valid_kdry_rst (tuple0) Bool)
(declare-fun is_valid_kdry_rst__function_guard (Bool tuple0) Bool)
(declare-fun kdry_rst (Float32) Float32)
(declare-fun kdry_rst__function_guard (Float32 Float32) Bool)
(assert (forall ((v Float32)) (! (=> (and (dynamic_invariant v true true true true) (= (is_valid_kdry_rst Tuple0) true)) (let ((result (kdry_rst v))) (and (fp.eq result (get_value kdry_rst_model (to_int1 RNA v))) (dynamic_invariant2 result true false true true)))) :pattern ((kdry_rst v)))))
(declare-const kwet_rst_model us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun is_valid_kwet_rst (tuple0) Bool)
(declare-fun is_valid_kwet_rst__function_guard (Bool tuple0) Bool)
(declare-fun kwet_rst (Float32) Float32)
(declare-fun kwet_rst__function_guard (Float32 Float32) Bool)
(assert (forall ((v Float32)) (! (=> (and (dynamic_invariant v true true true true) (= (is_valid_kwet_rst Tuple0) true)) (let ((result (kwet_rst v))) (and (fp.eq result (get_value kwet_rst_model (to_int1 RNA v))) (dynamic_invariant2 result true false true true)))) :pattern ((kwet_rst v)))))
(define-fun dynamic_invariant3 ((temp___expr_195 Float32) (temp___is_init_191 Bool) (temp___skip_constant_192 Bool) (temp___do_toplevel_193 Bool) (temp___do_typ_inv_194 Bool)) Bool (=> (or (= temp___is_init_191 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (in_range temp___expr_195)))
(declare-fun is_valid_speed (Float32) Bool)
(declare-fun is_valid_speed__function_guard (Bool Float32) Bool)
(declare-fun is_valid_deceleration_model (us_rep1) Bool)
(declare-fun is_valid_deceleration_model__function_guard (Bool us_rep1) Bool)
(declare-const a_brake_emergency_model us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun a_brake_emergency (Float32 Int) Float32)
(declare-fun a_brake_emergency__function_guard (Float32 Float32 Int) Bool)
(assert (forall ((v Float32)) (forall ((d Int)) (! (=> (and (and (dynamic_invariant v true true true true) (dynamic_invariant1 d true true true true)) (and (= (is_valid_deceleration_model a_brake_emergency_model) true) (= (is_valid_speed v) true))) (let ((result (a_brake_emergency v d))) (and (fp.eq result (get_value a_brake_emergency_model (to_int1 RNA v))) (dynamic_invariant3 result true false true true)))) :pattern ((a_brake_emergency v d))))))
(declare-const v Float32)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const d Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort speed_km_per_h_t 0)
(declare-fun user_eq9 (speed_km_per_h_t speed_km_per_h_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)
(declare-const dummy9 speed_km_per_h_t)
(declare-datatypes () ((speed_km_per_h_t__ref (mk_speed_km_per_h_t__ref (speed_km_per_h_t__content speed_km_per_h_t)))))
(define-fun speed_km_per_h_t__ref___projection ((a speed_km_per_h_t__ref)) speed_km_per_h_t (speed_km_per_h_t__content a))
(define-fun dynamic_invariant4 ((temp___expr_181 Float32) (temp___is_init_177 Bool) (temp___skip_constant_178 Bool) (temp___do_toplevel_179 Bool) (temp___do_typ_inv_180 Bool)) Bool (=> (or (= temp___is_init_177 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_181)))
(declare-fun is_valid_speed_km_per_h (Float32) Bool)
(declare-fun is_valid_speed_km_per_h__function_guard (Bool Float32) Bool)
(assert true)
(assert (forall ((speed Float32)) (! (= (= (is_valid_speed_km_per_h speed) true) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) speed) (fp.leq speed (fp #b0 #b10000111 #b11110100000000000000000)))) :pattern ((is_valid_speed_km_per_h speed)))))
(declare-fun m_per_s_from_km_per_h (Float32) Float32)
(declare-fun m_per_s_from_km_per_h__function_guard (Float32 Float32) Bool)
(assert (forall ((speed Float32)) (! (=> (and (dynamic_invariant4 speed true true true true) (= (is_valid_speed_km_per_h speed) true)) (dynamic_invariant (m_per_s_from_km_per_h speed) true false true true)) :pattern ((m_per_s_from_km_per_h speed)))))
(assert (forall ((speed Float32)) (! (=> (dynamic_invariant4 speed true true true true) (= (m_per_s_from_km_per_h speed) (fp.div RNE (fp.mul RNE speed (fp #b0 #b10001000 #b11110100000000000000000)) (fp #b0 #b10001010 #b11000010000000000000000)))) :pattern ((m_per_s_from_km_per_h speed)))))
(assert true)
(assert (forall ((speed Float32)) (! (= (= (is_valid_speed speed) true) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) speed) (fp.leq speed (m_per_s_from_km_per_h (fp #b0 #b10000111 #b11110100000000000000000))))) :pattern ((is_valid_speed speed)))))
(define-fun dynamic_invariant5 ((temp___expr_216 Int) (temp___is_init_212 Bool) (temp___skip_constant_213 Bool) (temp___do_toplevel_214 Bool) (temp___do_typ_inv_215 Bool)) Bool (=> (or (= temp___is_init_212 true) (<= 0 10)) (in_range2 temp___expr_216)))
(define-fun dynamic_invariant6 ((temp___expr_223 Int) (temp___is_init_219 Bool) (temp___skip_constant_220 Bool) (temp___do_toplevel_221 Bool) (temp___do_typ_inv_222 Bool)) Bool (=> (or (= temp___is_init_219 true) (<= 0 2147483647)) (in_range3 temp___expr_223)))
(declare-fun is_valid (us_rep1) Bool)
(declare-fun is_valid__function_guard (Bool us_rep1) Bool)
(assert true)
(assert (forall ((sfun us_rep1)) (! (= (= (is_valid sfun) true) (and (= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___266 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___266 0))))) 0) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun))) 1))) (< (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___268 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___268 i))))) (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___267 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___267 (+ i 1))))))))))) :pattern ((is_valid sfun)))))
(declare-fun has_same_delimiters (us_rep1 us_rep1) Bool)
(declare-fun has_same_delimiters__function_guard (Bool us_rep1 us_rep1) Bool)
(assert true)
(assert (forall ((sfun1 us_rep1) (sfun2 us_rep1)) (! (= (= (has_same_delimiters sfun1 sfun2) true) (and (= (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun1))) (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun2)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun1))))) (= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___275 (rec__step_function__step_function_t__step (us_split_fields3 sfun1)))) (select temp___275 i))))) (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___276 (rec__step_function__step_function_t__step (us_split_fields3 sfun2)))) (select temp___276 i)))))))))) :pattern ((has_same_delimiters sfun1 sfun2)))))
(assert (forall ((sfun us_rep1)) (forall ((x Int)) (! (=> (and (dynamic_invariant6 x true true true true) (= (is_valid sfun) true)) (let ((result (get_value sfun x))) (and (or (exists ((i Int)) (and (and (<= 0 i) (<= i (- (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun))) 1))) (and (and (<= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___283 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___283 i))))) x) (< x (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___284 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___284 (+ i 1)))))))) (fp.eq result (to_rep1 (rec__step_function__delimiter_entry__value (us_split_fields1 (let ((temp___285 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___285 i))))))))) (and (<= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___286 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___286 (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun)))))))) x) (fp.eq result (to_rep1 (rec__step_function__delimiter_entry__value (us_split_fields1 (let ((temp___287 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___287 (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun))))))))))) (dynamic_invariant2 result true false true true)))) :pattern ((get_value sfun x))))))
(assert true)
(assert (forall ((s us_rep1)) (! (= (= (is_valid_deceleration_model s) true) (and (= (is_valid s) true) (<= (to_rep (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 s))) 6))) :pattern ((is_valid_deceleration_model s)))))
(declare-fun temp___155 (us_rep us_rep) (Array Int us_rep))
(assert (= a_brake_emergency_model (mk___rep1 (mk___split_fields1 (of_rep 0) (temp___155 (mk___rep (mk___split_fields (of_rep2 0) (of_rep1 (fp #b0 #b01111111 #b00000000000000000000000)))) (mk___rep (mk___split_fields (of_rep2 0) (of_rep1 (fp #b0 #b00000000 #b00000000000000000000000)))))))))
(declare-fun temp___160 (us_rep us_rep) (Array Int us_rep))
(assert (= kdry_rst_model (mk___rep1 (mk___split_fields1 (of_rep 0) (temp___160 (mk___rep (mk___split_fields (of_rep2 0) (of_rep1 (fp #b0 #b01111111 #b00000000000000000000000)))) (mk___rep (mk___split_fields (of_rep2 0) (of_rep1 (fp #b0 #b00000000 #b00000000000000000000000)))))))))
(declare-fun temp___165 (us_rep us_rep) (Array Int us_rep))
(assert (= kwet_rst_model (mk___rep1 (mk___split_fields1 (of_rep 0) (temp___165 (mk___rep (mk___split_fields (of_rep2 0) (of_rep1 (fp #b0 #b01111111 #b00000000000000000000000)))) (mk___rep (mk___split_fields (of_rep2 0) (of_rep1 (fp #b0 #b00000000 #b00000000000000000000000)))))))))
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (= (is_valid_kdry_rst us_void_param) true) (and (= (is_valid kdry_rst_model) true) (= (has_same_delimiters kdry_rst_model a_brake_emergency_model) true))) :pattern ((is_valid_kdry_rst us_void_param)))))
(assert true)
(assert (forall ((us_void_param tuple0)) (! (= (= (is_valid_kwet_rst us_void_param) true) (and (= (is_valid kwet_rst_model) true) (= (has_same_delimiters kwet_rst_model a_brake_emergency_model) true))) :pattern ((is_valid_kwet_rst us_void_param)))))
(assert (forall ((temp___157 us_rep) (temp___158 us_rep)) (let ((temp___156 (temp___155 temp___157 temp___158))) (forall ((temp___159 Int)) (ite (= temp___159 0) (= (select temp___156 temp___159) temp___157) (= (select temp___156 temp___159) temp___158))))))
(assert (forall ((temp___162 us_rep) (temp___163 us_rep)) (let ((temp___161 (temp___160 temp___162 temp___163))) (forall ((temp___164 Int)) (ite (= temp___164 0) (= (select temp___161 temp___164) temp___162) (= (select temp___161 temp___164) temp___163))))))
(assert (forall ((temp___167 us_rep) (temp___168 us_rep)) (let ((temp___166 (temp___165 temp___167 temp___168))) (forall ((temp___169 Int)) (ite (= temp___169 0) (= (select temp___166 temp___169) temp___167) (= (select temp___166 temp___169) temp___168))))))
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const o2 Float32)
(assert (fp.isFinite32 v))
(assert (in_range1 d))
(assert (and (= o2 (a_brake_emergency v d)) (and (in_range o2) (fp.eq o2 (get_value a_brake_emergency_model (to_int1 RNA v))))))
(assert (and (= o (kwet_rst v)) (and (fp.isFinite32 o) (fp.eq o (get_value kwet_rst_model (to_int1 RNA v))))))
(assert (= o1 (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) o)))
(assert (not (fp.isFinite32 o1)))
(check-sat)
(exit)
