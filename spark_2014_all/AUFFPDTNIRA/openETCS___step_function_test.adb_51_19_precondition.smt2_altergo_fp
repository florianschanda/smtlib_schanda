(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((real_of_int(truncate(x)) <= x) and
  (x <  real_of_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((real_of_int((truncate(x) - 1)) <  x) and
  (x <= real_of_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= real_of_int(truncate(x))) and
  (real_of_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(real_of_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((real_of_int(floor(x)) <= x) and
  (x <  real_of_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((real_of_int((ceil(x) - 1)) <  x) and
  (x <= real_of_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t

logic add : fpa_rounding_mode, t, t -> t

logic sub : fpa_rounding_mode, t, t -> t

logic mul : fpa_rounding_mode, t, t -> t

logic div : fpa_rounding_mode, t, t -> t

logic abs : t -> t

logic neg : t -> t

logic fma : fpa_rounding_mode, t, t, t -> t

logic sqrt : fpa_rounding_mode, t -> t

logic roundToIntegral : fpa_rounding_mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : fpa_rounding_mode, int -> t

logic to_int : fpa_rounding_mode, t -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = real_of_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) ->
  in_range(float32(m,x))))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom eq_special :
  (forall x:t. forall y:t. (eq(x, y) -> (is_not_nan(x) and (is_not_nan(y) and
  ((tqtisFinite(x) and tqtisFinite(y)) or (is_infinite(x) and
  (is_infinite(y) and same_sign(x, y))))))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom le_special :
  (forall x:t. forall y:t [le(x, y)]. (le(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and is_not_nan(y)) or
  (is_not_nan(x) and is_plus_infinity(y))))))

axiom lt_special :
  (forall x:t. forall y:t [lt(x, y)]. (lt(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and (is_not_nan(y) and
  (not is_minus_infinity(y)))) or (is_not_nan(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and
  ((m = Down) -> ((is_positive(x) -> (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127))) and ((not is_positive(x)) ->
  is_infinite(x))))) and ((m = ToZero) -> ((is_positive(x) ->
  (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) -> (tqtisFinite(add(m, x,
  y)) and (tqtreal(add(m, x, y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) -> (tqtisFinite(sub(m, x,
  y)) and (tqtreal(sub(m, x, y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) -> (tqtisFinite(mul(m, x,
  y)) and (tqtreal(mul(m, x, y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x,
  y)) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> (tqtisFinite(abs(x)) and
  ((tqtreal(abs(x)) = abs_real(tqtreal(x))) and is_positive(abs(x))))))

axiom abs_finite_rev :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) -> (tqtisFinite(x) and
  (tqtreal(abs(x)) = abs_real(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(x) -> (tqtisFinite(y) -> (tqtisFinite(z) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) ->
  (tqtisFinite(fma(m, x, y, z)) and (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and
  (tqtisFinite(y) and tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and
  (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

axiom sqrt_finite :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(x) ->
  ((0.0 <= tqtreal(x)) -> (tqtisFinite(sqrt(m, x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom add_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(add(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(add(m, x, y)) and
  same_sign(add(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and diff_sign(x, y))) ->
  is_nan(add(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) + tqtreal(y))))))) ->
  (same_sign_real(add(m, x, y), (tqtreal(x) + tqtreal(y))) and
  overflow_value(m, add(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((same_sign(x, y) -> same_sign(add(m, x, y), x)) and
  ((not same_sign(x, y)) -> sign_zero_result(m, add(m, x, y))))))))))))

axiom sub_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(sub(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(sub(m, x, y)) and
  diff_sign(sub(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  is_nan(sub(m, x, y))) and (((is_infinite(x) and (is_infinite(y) and
  diff_sign(x, y))) -> (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y),
  x))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) - tqtreal(y))))))) ->
  (same_sign_real(sub(m, x, y), (tqtreal(x) - tqtreal(y))) and
  overflow_value(m, sub(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((diff_sign(x, y) -> same_sign(sub(m, x, y), x)) and
  ((not diff_sign(x, y)) -> sign_zero_result(m, sub(m, x, y))))))))))))

axiom mul_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(mul(m, x, y))) and (((is_zero(x) and
  is_infinite(y)) -> is_nan(mul(m, x, y))) and (((tqtisFinite(x) and
  (is_infinite(y) and (not is_zero(x)))) -> is_infinite(mul(m, x, y))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(mul(m, x, y))) and
  (((is_infinite(x) and (tqtisFinite(y) and (not is_zero(y)))) ->
  is_infinite(mul(m, x, y))) and (((is_infinite(x) and is_infinite(y)) ->
  is_infinite(mul(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) * tqtreal(y))))))) -> overflow_value(m,
  mul(m, x, y))) and ((not is_nan(mul(m, x, y))) -> product_sign(mul(m, x,
  y), x, y))))))))))

axiom div_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> is_zero(div(m, x, y))) and
  (((is_infinite(x) and tqtisFinite(y)) -> is_infinite(div(m, x, y))) and
  (((is_infinite(x) and is_infinite(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  (not in_range(float32(m,(tqtreal(x) / tqtreal(y)))))))) ->
  overflow_value(m, div(m, x, y))) and (((tqtisFinite(x) and (is_zero(y) and
  (not is_zero(x)))) -> is_infinite(div(m, x, y))) and (((is_zero(x) and
  is_zero(y)) -> is_nan(div(m, x, y))) and ((not is_nan(div(m, x, y))) ->
  product_sign(div(m, x, y), x, y))))))))))

axiom neg_special :
  (forall x:t [neg(x)]. ((is_nan(x) -> is_nan(neg(x))) and
  ((is_infinite(x) -> is_infinite(neg(x))) and ((not is_nan(x)) ->
  diff_sign(x, neg(x))))))

axiom abs_special :
  (forall x:t [abs(x)]. ((is_nan(x) -> is_nan(abs(x))) and
  ((is_infinite(x) -> is_infinite(abs(x))) and ((not is_nan(x)) ->
  is_positive(abs(x))))))

axiom fma_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (((is_nan(x) or (is_nan(y) or is_nan(z))) -> is_nan(fma(m, x, y,
  z))) and (((is_zero(x) and is_infinite(y)) -> is_nan(fma(m, x, y, z))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(fma(m, x, y, z))) and
  (((tqtisFinite(x) and ((not is_zero(x)) and (is_infinite(y) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((tqtisFinite(x) and ((not is_zero(x)) and
  (is_infinite(y) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((is_infinite(x) and (tqtisFinite(y) and
  ((not is_zero(y)) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (is_infinite(y) and tqtisFinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and product_sign(fma(m, x, y, z), x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and is_infinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  (((is_infinite(x) and (is_infinite(y) and is_infinite(z))) ->
  ((product_sign(z, x, y) -> (is_infinite(fma(m, x, y, z)) and
  same_sign(fma(m, x, y, z), z))) and ((not product_sign(z, x, y)) ->
  is_nan(fma(m, x, y, z))))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (tqtisFinite(z) and
  (not in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))) ->
  (same_sign_real(fma(m, x, y, z),
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) and overflow_value(m, fma(m, x,
  y, z)))) and ((tqtisFinite(x) and (tqtisFinite(y) and tqtisFinite(z))) ->
  ((product_sign(z, x, y) -> same_sign(fma(m, x, y, z), z)) and
  ((not product_sign(z, x, y)) ->
  ((((tqtreal(x) * tqtreal(y)) + tqtreal(z)) = 0.0) -> (((m = Down) ->
  is_negative(fma(m, x, y, z))) and ((not (m = Down)) -> is_positive(fma(m,
  x, y, z))))))))))))))))))))

axiom sqrt_special :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. ((is_nan(x) ->
  is_nan(sqrt(m, x))) and ((is_plus_infinity(x) -> is_plus_infinity(sqrt(m,
  x))) and ((is_minus_infinity(x) -> is_nan(sqrt(m, x))) and
  (((tqtisFinite(x) and (tqtreal(x) <  0.0)) -> is_nan(sqrt(m, x))) and
  ((is_zero(x) -> same_sign(sqrt(m, x), x)) and ((tqtisFinite(x) and
  (0.0 <  tqtreal(x))) -> is_positive(sqrt(m, x)))))))))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t. (tqtisFinite(i) -> ((le(i,
  neg(of_int(m, 16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Up, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Down, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t. (to_int(m, x) = to_int(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int(m, of_int(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) -> (to_int(m,
  neg(x)) = (-to_int(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (in_range(float32(NearestTiesToEven,x)) ->
  ((((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x)) and
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150)))))

axiom round_bound :
  (forall m:fpa_rounding_mode. forall x:real [float32(m,x)].
  (in_range(float32(m,x)) ->
  ((((x - (0x1.0p-23 * abs_real(x))) - 0x1.0p-149) <= float32(m,x)) and
  (float32(m,x) <= ((x + (0x1.0p-23 * abs_real(x))) + 0x1.0p-149)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(NearestTiesToAway, 1))

type t__ref = { t__content : t
}

type float1

logic bool_eq1 : t, t -> bool

axiom bool_eq_def1 :
  (forall x:t. forall y:t [bool_eq1(x, y)]. ((eq(x, y) -> (bool_eq1(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq1(x, y) = false))))

logic user_eq : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> t

logic dummy : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

logic to_rep : float1 -> t

logic of_rep : t -> float1

axiom inversion_axiom :
  (forall x:float1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:float1 [to_rep(x)]. tqtisFinite(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (tqtisFinite(x) ->
  (to_rep(of_rep(x)) = x)))

type num_delimiters_range

predicate in_range1(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : num_delimiters_range, num_delimiters_range -> bool

logic dummy1 : num_delimiters_range

type num_delimiters_range__ref = { num_delimiters_range__content :
num_delimiters_range
}

function num_delimiters_range__ref___projection(a: num_delimiters_range__ref) : num_delimiters_range =
  (a).num_delimiters_range__content

logic to_rep1 : num_delimiters_range -> int

logic of_rep1 : int -> num_delimiters_range

axiom inversion_axiom1 :
  (forall x:num_delimiters_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:num_delimiters_range [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type function_range

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : function_range, function_range -> bool

logic dummy2 : function_range

type function_range__ref = { function_range__content : function_range
}

function function_range__ref___projection(a: function_range__ref) : function_range =
  (a).function_range__content

logic to_rep2 : function_range -> int

logic of_rep2 : int -> function_range

axiom inversion_axiom2 :
  (forall x:function_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:function_range [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__step_function__delimiter_entry__delimiter :
function_range; rec__step_function__delimiter_entry__value : float1
}

function us_split_fields_Delimiter__projection(a: us_split_fields) : function_range =
  (a).rec__step_function__delimiter_entry__delimiter

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((b).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (to_rep(((a).us_split_fields1).rec__step_function__delimiter_entry__value) = to_rep(((b).us_split_fields1).rec__step_function__delimiter_entry__value))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((b).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (to_rep(((a).us_split_fields1).rec__step_function__delimiter_entry__value) = to_rep(((b).us_split_fields1).rec__step_function__delimiter_entry__value)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:function_range. forall a1:float1. (0 <= object__size({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = a;
  rec__step_function__delimiter_entry__value = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:function_range. forall a1:float1. (0 <= object__alignment({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = a;
  rec__step_function__delimiter_entry__value = a1 } })))

logic step_function__delimiter_entry__delimiter__first__bit : int

logic step_function__delimiter_entry__delimiter__last__bit : int

logic step_function__delimiter_entry__delimiter__position : int

axiom step_function__delimiter_entry__delimiter__first__bit_axiom :
  (0 <= step_function__delimiter_entry__delimiter__first__bit)

axiom step_function__delimiter_entry__delimiter__last__bit_axiom :
  (step_function__delimiter_entry__delimiter__first__bit <  step_function__delimiter_entry__delimiter__last__bit)

axiom step_function__delimiter_entry__delimiter__position_axiom :
  (0 <= step_function__delimiter_entry__delimiter__position)

logic step_function__delimiter_entry__value__first__bit : int

logic step_function__delimiter_entry__value__last__bit : int

logic step_function__delimiter_entry__value__position : int

axiom step_function__delimiter_entry__value__first__bit_axiom :
  (0 <= step_function__delimiter_entry__value__first__bit)

axiom step_function__delimiter_entry__value__last__bit_axiom :
  (step_function__delimiter_entry__value__first__bit <  step_function__delimiter_entry__value__last__bit)

axiom step_function__delimiter_entry__value__position_axiom :
  (0 <= step_function__delimiter_entry__value__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : function_range

logic dummy4 : float1

type delimiter_entry__ref = { delimiter_entry__content : us_rep
}

function delimiter_entry__ref___projection(a: delimiter_entry__ref) : us_rep =
  (a).delimiter_entry__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:function_range. forall v1:float1.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = v;
  rec__step_function__delimiter_entry__value = v1 } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = v;
  rec__step_function__delimiter_entry__value = v1 } }, i)[i]) = {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = v;
  rec__step_function__delimiter_entry__value = v1 } })))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq5((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic dummy5 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

logic user_eq4 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = {
rec__step_function__step_function_t__number_of_delimiters :
num_delimiters_range; rec__step_function__step_function_t__step :
(int,us_rep) farray
}

function us_split_fields_Number_Of_Delimiters__projection(a: us_split_fields2) : num_delimiters_range =
  (a).rec__step_function__step_function_t__number_of_delimiters

function us_split_fields_Step__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__step_function__step_function_t__step

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  ((((to_rep1(((a).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters) = to_rep1(((b).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters)) and
  (bool_eq6(((a).us_split_fields3).rec__step_function__step_function_t__step,
  0, 10, ((b).us_split_fields3).rec__step_function__step_function_t__step, 0,
  10) = true)) -> (bool_eq7(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters) = to_rep1(((b).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters)) and
  (bool_eq6(((a).us_split_fields3).rec__step_function__step_function_t__step,
  0, 10, ((b).us_split_fields3).rec__step_function__step_function_t__step, 0,
  10) = true))) -> (bool_eq7(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:num_delimiters_range. forall a1:(int,us_rep) farray.
  (0 <= object__size2({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = a;
  rec__step_function__step_function_t__step = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:num_delimiters_range. forall a1:(int,us_rep) farray.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = a;
  rec__step_function__step_function_t__step = a1 } })))

logic step_function__step_function_t__number_of_delimiters__first__bit : int

logic step_function__step_function_t__number_of_delimiters__last__bit : int

logic step_function__step_function_t__number_of_delimiters__position : int

axiom step_function__step_function_t__number_of_delimiters__first__bit_axiom :
  (0 <= step_function__step_function_t__number_of_delimiters__first__bit)

axiom step_function__step_function_t__number_of_delimiters__last__bit_axiom :
  (step_function__step_function_t__number_of_delimiters__first__bit <  step_function__step_function_t__number_of_delimiters__last__bit)

axiom step_function__step_function_t__number_of_delimiters__position_axiom :
  (0 <= step_function__step_function_t__number_of_delimiters__position)

logic step_function__step_function_t__step__first__bit : int

logic step_function__step_function_t__step__last__bit : int

logic step_function__step_function_t__step__position : int

axiom step_function__step_function_t__step__first__bit_axiom :
  (0 <= step_function__step_function_t__step__first__bit)

axiom step_function__step_function_t__step__last__bit_axiom :
  (step_function__step_function_t__step__first__bit <  step_function__step_function_t__step__last__bit)

axiom step_function__step_function_t__step__position_axiom :
  (0 <= step_function__step_function_t__step__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy6 : num_delimiters_range

logic dummy7 : (int,us_rep) farray

type step_function_t__ref = { step_function_t__content : us_rep1
}

function step_function_t__ref___projection(a: step_function_t__ref) : us_rep1 =
  (a).step_function_t__content

logic min1 : t, t -> t

logic min__function_guard : t, t, t -> prop

axiom min__post_axiom :
  (forall x1:t. forall x2:t [min1(x1, x2)]. ((tqtisFinite(x1) and
  tqtisFinite(x2)) -> (((le(x1, x2) -> eq(min1(x1, x2), x1)) and ((not le(x1,
  x2)) -> eq(min1(x1, x2), x2))) and tqtisFinite(min1(x1, x2)))))

logic is_valid : us_rep1 -> bool

logic is_valid__function_guard : bool, us_rep1 -> prop

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall sfun:num_delimiters_range. forall sfun1:(int,us_rep) farray
  [is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } })]. ((is_valid({
  us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }) = true) <->
  ((to_rep2((((sfun1[0])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = 0) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(sfun) - 1))) ->
  (to_rep2((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun1[(i + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))))

logic has_same_delimiters : us_rep1, us_rep1 -> bool

logic has_same_delimiters__function_guard : bool, us_rep1, us_rep1 -> prop

axiom has_same_delimiters__post_axiom : true

axiom has_same_delimiters__def_axiom :
  (forall sfun1:num_delimiters_range. forall sfun11:(int,us_rep) farray.
  forall sfun2:num_delimiters_range. forall sfun21:(int,us_rep) farray
  [has_same_delimiters({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } }, {
  us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } })].
  ((has_same_delimiters({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } }, {
  us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } }) = true) <->
  ((to_rep1(sfun1) = to_rep1(sfun2)) and
  (forall i:int. (((1 <= i) and (i <= to_rep1(sfun1))) ->
  (to_rep2((((sfun11[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2((((sfun21[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))))

logic get_value : us_rep1, int -> t

logic get_value__function_guard : t, us_rep1, int -> prop

axiom get_value__post_axiom :
  (forall sfun:num_delimiters_range. forall sfun1:(int,us_rep) farray.
  (forall x:int [get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x)].
  ((in_range2(x) and (is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }) = true)) ->
  (((exists i:int. (((0 <= i) and (i <= (to_rep1(sfun) - 1))) and
    (((to_rep2((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= x) and
    (x <  to_rep2((((sfun1[(i + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
    eq(get_value({ us_split_fields3 = {
    rec__step_function__step_function_t__number_of_delimiters = sfun;
    rec__step_function__step_function_t__step = sfun1 } }, x),
    to_rep((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun1[to_rep1(sfun)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= x) and
  eq(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x),
  to_rep((((sfun1[to_rep1(sfun)])).us_split_fields1).rec__step_function__delimiter_entry__value)))) and
  tqtisFinite(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x))))))

logic minimum_until_point : us_rep1, int -> t

logic minimum_until_point__function_guard : t, us_rep1, int -> prop

axiom minimum_until_point__post_axiom :
  (forall sfun:num_delimiters_range. forall sfun1:(int,us_rep) farray.
  (forall x:int [minimum_until_point({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x)].
  ((in_range2(x) and (is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }) = true)) ->
  (((forall i:int. (((0 <= i) and (i <= to_rep1(sfun))) ->
    ((to_rep2((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= x) ->
    le(minimum_until_point({ us_split_fields3 = {
    rec__step_function__step_function_t__number_of_delimiters = sfun;
    rec__step_function__step_function_t__step = sfun1 } }, x),
    to_rep((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__value))))) and
  (exists i:int. (((0 <= i) and (i <= to_rep1(sfun))) and
  ((to_rep2((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= x) and
  eq(minimum_until_point({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x),
  to_rep((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__value)))))) and
  tqtisFinite(minimum_until_point({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic temp___274 : us_rep, us_rep, us_rep, us_rep -> (int,us_rep) farray

axiom def_axiom :
  (forall temp___276:function_range. forall temp___2761:float1.
  forall temp___277:function_range. forall temp___2771:float1.
  forall temp___278:function_range. forall temp___2781:float1.
  forall temp___279:function_range. forall temp___2791:float1.
  (forall temp___280:int. (((temp___280 = 0) -> ((temp___274({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___276; rec__step_function__delimiter_entry__value = temp___2761 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___277; rec__step_function__delimiter_entry__value = temp___2771 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___278; rec__step_function__delimiter_entry__value = temp___2781 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___279; rec__step_function__delimiter_entry__value = temp___2791 }
  })[temp___280]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___276;
  rec__step_function__delimiter_entry__value = temp___2761 } })) and
  ((not (temp___280 = 0)) -> (((temp___280 = 1) -> ((temp___274({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___276; rec__step_function__delimiter_entry__value = temp___2761 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___277; rec__step_function__delimiter_entry__value = temp___2771 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___278; rec__step_function__delimiter_entry__value = temp___2781 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___279; rec__step_function__delimiter_entry__value = temp___2791 }
  })[temp___280]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___277;
  rec__step_function__delimiter_entry__value = temp___2771 } })) and
  ((not (temp___280 = 1)) -> (((temp___280 = 2) -> ((temp___274({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___276; rec__step_function__delimiter_entry__value = temp___2761 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___277; rec__step_function__delimiter_entry__value = temp___2771 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___278; rec__step_function__delimiter_entry__value = temp___2781 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___279; rec__step_function__delimiter_entry__value = temp___2791 }
  })[temp___280]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___278;
  rec__step_function__delimiter_entry__value = temp___2781 } })) and
  ((not (temp___280 = 2)) -> ((temp___274({ us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___276;
  rec__step_function__delimiter_entry__value = temp___2761 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___277; rec__step_function__delimiter_entry__value = temp___2771 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___278; rec__step_function__delimiter_entry__value = temp___2781 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___279; rec__step_function__delimiter_entry__value = temp___2791 }
  })[temp___280]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___279;
  rec__step_function__delimiter_entry__value = temp___2791 } })))))))))

logic temp___281 : us_rep, us_rep, us_rep, us_rep -> (int,us_rep) farray

axiom def_axiom1 :
  (forall temp___283:function_range. forall temp___2831:float1.
  forall temp___284:function_range. forall temp___2841:float1.
  forall temp___285:function_range. forall temp___2851:float1.
  forall temp___286:function_range. forall temp___2861:float1.
  (forall temp___287:int. (((temp___287 = 0) -> ((temp___281({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___283; rec__step_function__delimiter_entry__value = temp___2831 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___284; rec__step_function__delimiter_entry__value = temp___2841 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___285; rec__step_function__delimiter_entry__value = temp___2851 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___286; rec__step_function__delimiter_entry__value = temp___2861 }
  })[temp___287]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___283;
  rec__step_function__delimiter_entry__value = temp___2831 } })) and
  ((not (temp___287 = 0)) -> (((temp___287 = 1) -> ((temp___281({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___283; rec__step_function__delimiter_entry__value = temp___2831 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___284; rec__step_function__delimiter_entry__value = temp___2841 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___285; rec__step_function__delimiter_entry__value = temp___2851 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___286; rec__step_function__delimiter_entry__value = temp___2861 }
  })[temp___287]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___284;
  rec__step_function__delimiter_entry__value = temp___2841 } })) and
  ((not (temp___287 = 1)) -> (((temp___287 = 2) -> ((temp___281({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___283; rec__step_function__delimiter_entry__value = temp___2831 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___284; rec__step_function__delimiter_entry__value = temp___2841 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___285; rec__step_function__delimiter_entry__value = temp___2851 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___286; rec__step_function__delimiter_entry__value = temp___2861 }
  })[temp___287]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___285;
  rec__step_function__delimiter_entry__value = temp___2851 } })) and
  ((not (temp___287 = 2)) -> ((temp___281({ us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___283;
  rec__step_function__delimiter_entry__value = temp___2831 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___284; rec__step_function__delimiter_entry__value = temp___2841 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___285; rec__step_function__delimiter_entry__value = temp___2851 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___286; rec__step_function__delimiter_entry__value = temp___2861 }
  })[temp___287]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___286;
  rec__step_function__delimiter_entry__value = temp___2861 } })))))))))

logic temp___288 : us_rep, us_rep, us_rep, us_rep, us_rep, us_rep,
  us_rep -> (int,us_rep) farray

axiom def_axiom2 :
  (forall temp___290:function_range. forall temp___2901:float1.
  forall temp___291:function_range. forall temp___2911:float1.
  forall temp___292:function_range. forall temp___2921:float1.
  forall temp___293:function_range. forall temp___2931:float1.
  forall temp___294:function_range. forall temp___2941:float1.
  forall temp___295:function_range. forall temp___2951:float1.
  forall temp___296:function_range. forall temp___2961:float1.
  (forall temp___297:int. (((temp___297 = 0) -> ((temp___288({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___290; rec__step_function__delimiter_entry__value = temp___2901 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___291; rec__step_function__delimiter_entry__value = temp___2911 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___292; rec__step_function__delimiter_entry__value = temp___2921 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___293; rec__step_function__delimiter_entry__value = temp___2931 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___294; rec__step_function__delimiter_entry__value = temp___2941 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___295; rec__step_function__delimiter_entry__value = temp___2951 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___296; rec__step_function__delimiter_entry__value = temp___2961 }
  })[temp___297]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___290;
  rec__step_function__delimiter_entry__value = temp___2901 } })) and
  ((not (temp___297 = 0)) -> (((temp___297 = 1) -> ((temp___288({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___290; rec__step_function__delimiter_entry__value = temp___2901 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___291; rec__step_function__delimiter_entry__value = temp___2911 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___292; rec__step_function__delimiter_entry__value = temp___2921 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___293; rec__step_function__delimiter_entry__value = temp___2931 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___294; rec__step_function__delimiter_entry__value = temp___2941 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___295; rec__step_function__delimiter_entry__value = temp___2951 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___296; rec__step_function__delimiter_entry__value = temp___2961 }
  })[temp___297]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___291;
  rec__step_function__delimiter_entry__value = temp___2911 } })) and
  ((not (temp___297 = 1)) -> (((temp___297 = 2) -> ((temp___288({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___290; rec__step_function__delimiter_entry__value = temp___2901 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___291; rec__step_function__delimiter_entry__value = temp___2911 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___292; rec__step_function__delimiter_entry__value = temp___2921 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___293; rec__step_function__delimiter_entry__value = temp___2931 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___294; rec__step_function__delimiter_entry__value = temp___2941 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___295; rec__step_function__delimiter_entry__value = temp___2951 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___296; rec__step_function__delimiter_entry__value = temp___2961 }
  })[temp___297]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___292;
  rec__step_function__delimiter_entry__value = temp___2921 } })) and
  ((not (temp___297 = 2)) -> (((temp___297 = 3) -> ((temp___288({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___290; rec__step_function__delimiter_entry__value = temp___2901 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___291; rec__step_function__delimiter_entry__value = temp___2911 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___292; rec__step_function__delimiter_entry__value = temp___2921 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___293; rec__step_function__delimiter_entry__value = temp___2931 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___294; rec__step_function__delimiter_entry__value = temp___2941 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___295; rec__step_function__delimiter_entry__value = temp___2951 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___296; rec__step_function__delimiter_entry__value = temp___2961 }
  })[temp___297]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___293;
  rec__step_function__delimiter_entry__value = temp___2931 } })) and
  ((not (temp___297 = 3)) -> (((temp___297 = 4) -> ((temp___288({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___290; rec__step_function__delimiter_entry__value = temp___2901 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___291; rec__step_function__delimiter_entry__value = temp___2911 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___292; rec__step_function__delimiter_entry__value = temp___2921 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___293; rec__step_function__delimiter_entry__value = temp___2931 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___294; rec__step_function__delimiter_entry__value = temp___2941 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___295; rec__step_function__delimiter_entry__value = temp___2951 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___296; rec__step_function__delimiter_entry__value = temp___2961 }
  })[temp___297]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___294;
  rec__step_function__delimiter_entry__value = temp___2941 } })) and
  ((not (temp___297 = 4)) -> (((temp___297 = 5) -> ((temp___288({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___290; rec__step_function__delimiter_entry__value = temp___2901 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___291; rec__step_function__delimiter_entry__value = temp___2911 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___292; rec__step_function__delimiter_entry__value = temp___2921 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___293; rec__step_function__delimiter_entry__value = temp___2931 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___294; rec__step_function__delimiter_entry__value = temp___2941 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___295; rec__step_function__delimiter_entry__value = temp___2951 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___296; rec__step_function__delimiter_entry__value = temp___2961 }
  })[temp___297]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___295;
  rec__step_function__delimiter_entry__value = temp___2951 } })) and
  ((not (temp___297 = 5)) -> ((temp___288({ us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___290;
  rec__step_function__delimiter_entry__value = temp___2901 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___291; rec__step_function__delimiter_entry__value = temp___2911 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___292; rec__step_function__delimiter_entry__value = temp___2921 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___293; rec__step_function__delimiter_entry__value = temp___2931 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___294; rec__step_function__delimiter_entry__value = temp___2941 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___295; rec__step_function__delimiter_entry__value = temp___2951 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___296; rec__step_function__delimiter_entry__value = temp___2961 }
  })[temp___297]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___296;
  rec__step_function__delimiter_entry__value = temp___2961 } })))))))))))))))

logic temp___298 : us_rep, us_rep, us_rep, us_rep, us_rep, us_rep,
  us_rep -> (int,us_rep) farray

axiom def_axiom3 :
  (forall temp___300:function_range. forall temp___3001:float1.
  forall temp___301:function_range. forall temp___3011:float1.
  forall temp___302:function_range. forall temp___3021:float1.
  forall temp___303:function_range. forall temp___3031:float1.
  forall temp___304:function_range. forall temp___3041:float1.
  forall temp___305:function_range. forall temp___3051:float1.
  forall temp___306:function_range. forall temp___3061:float1.
  (forall temp___307:int. (((temp___307 = 0) -> ((temp___298({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___300; rec__step_function__delimiter_entry__value = temp___3001 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___301; rec__step_function__delimiter_entry__value = temp___3011 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___302; rec__step_function__delimiter_entry__value = temp___3021 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___303; rec__step_function__delimiter_entry__value = temp___3031 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___304; rec__step_function__delimiter_entry__value = temp___3041 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___305; rec__step_function__delimiter_entry__value = temp___3051 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___306; rec__step_function__delimiter_entry__value = temp___3061 }
  })[temp___307]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___300;
  rec__step_function__delimiter_entry__value = temp___3001 } })) and
  ((not (temp___307 = 0)) -> (((temp___307 = 1) -> ((temp___298({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___300; rec__step_function__delimiter_entry__value = temp___3001 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___301; rec__step_function__delimiter_entry__value = temp___3011 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___302; rec__step_function__delimiter_entry__value = temp___3021 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___303; rec__step_function__delimiter_entry__value = temp___3031 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___304; rec__step_function__delimiter_entry__value = temp___3041 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___305; rec__step_function__delimiter_entry__value = temp___3051 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___306; rec__step_function__delimiter_entry__value = temp___3061 }
  })[temp___307]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___301;
  rec__step_function__delimiter_entry__value = temp___3011 } })) and
  ((not (temp___307 = 1)) -> (((temp___307 = 2) -> ((temp___298({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___300; rec__step_function__delimiter_entry__value = temp___3001 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___301; rec__step_function__delimiter_entry__value = temp___3011 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___302; rec__step_function__delimiter_entry__value = temp___3021 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___303; rec__step_function__delimiter_entry__value = temp___3031 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___304; rec__step_function__delimiter_entry__value = temp___3041 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___305; rec__step_function__delimiter_entry__value = temp___3051 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___306; rec__step_function__delimiter_entry__value = temp___3061 }
  })[temp___307]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___302;
  rec__step_function__delimiter_entry__value = temp___3021 } })) and
  ((not (temp___307 = 2)) -> (((temp___307 = 3) -> ((temp___298({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___300; rec__step_function__delimiter_entry__value = temp___3001 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___301; rec__step_function__delimiter_entry__value = temp___3011 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___302; rec__step_function__delimiter_entry__value = temp___3021 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___303; rec__step_function__delimiter_entry__value = temp___3031 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___304; rec__step_function__delimiter_entry__value = temp___3041 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___305; rec__step_function__delimiter_entry__value = temp___3051 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___306; rec__step_function__delimiter_entry__value = temp___3061 }
  })[temp___307]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___303;
  rec__step_function__delimiter_entry__value = temp___3031 } })) and
  ((not (temp___307 = 3)) -> (((temp___307 = 4) -> ((temp___298({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___300; rec__step_function__delimiter_entry__value = temp___3001 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___301; rec__step_function__delimiter_entry__value = temp___3011 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___302; rec__step_function__delimiter_entry__value = temp___3021 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___303; rec__step_function__delimiter_entry__value = temp___3031 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___304; rec__step_function__delimiter_entry__value = temp___3041 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___305; rec__step_function__delimiter_entry__value = temp___3051 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___306; rec__step_function__delimiter_entry__value = temp___3061 }
  })[temp___307]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___304;
  rec__step_function__delimiter_entry__value = temp___3041 } })) and
  ((not (temp___307 = 4)) -> (((temp___307 = 5) -> ((temp___298({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___300; rec__step_function__delimiter_entry__value = temp___3001 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___301; rec__step_function__delimiter_entry__value = temp___3011 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___302; rec__step_function__delimiter_entry__value = temp___3021 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___303; rec__step_function__delimiter_entry__value = temp___3031 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___304; rec__step_function__delimiter_entry__value = temp___3041 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___305; rec__step_function__delimiter_entry__value = temp___3051 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___306; rec__step_function__delimiter_entry__value = temp___3061 }
  })[temp___307]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___305;
  rec__step_function__delimiter_entry__value = temp___3051 } })) and
  ((not (temp___307 = 5)) -> ((temp___298({ us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___300;
  rec__step_function__delimiter_entry__value = temp___3001 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___301; rec__step_function__delimiter_entry__value = temp___3011 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___302; rec__step_function__delimiter_entry__value = temp___3021 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___303; rec__step_function__delimiter_entry__value = temp___3031 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___304; rec__step_function__delimiter_entry__value = temp___3041 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___305; rec__step_function__delimiter_entry__value = temp___3051 } }, {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter =
  temp___306; rec__step_function__delimiter_entry__value = temp___3061 }
  })[temp___307]) = { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = temp___306;
  rec__step_function__delimiter_entry__value = temp___3061 } })))))))))))))))

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 0.0e-1))

logic fliteral2 : t

axiom fliteral_axiom2 : (tqtisFinite(fliteral2) and
  (tqtreal(fliteral2) = 5.0))

logic fliteral3 : t

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 2.0))

logic fliteral4 : t

axiom fliteral_axiom4 : (tqtisFinite(fliteral4) and
  (tqtreal(fliteral4) = 3.0))

logic fliteral5 : t

axiom fliteral_axiom5 : (tqtisFinite(fliteral5) and
  (tqtreal(fliteral5) = 9.0))

logic fliteral6 : t

axiom fliteral_axiom6 : (tqtisFinite(fliteral6) and
  (tqtreal(fliteral6) = 7.0))

logic fliteral7 : t

axiom fliteral_axiom7 : (tqtisFinite(fliteral7) and
  (tqtreal(fliteral7) = 0.500000000000000000000000))

logic fliteral8 : t

axiom fliteral_axiom8 : (tqtisFinite(fliteral8) and
  (tqtreal(fliteral8) = 4.0))

logic fliteral9 : t

axiom fliteral_axiom9 : (tqtisFinite(fliteral9) and
  (tqtreal(fliteral9) = 6.0))

logic fliteral10 : t

axiom fliteral_axiom10 : (tqtisFinite(fliteral10) and
  (tqtreal(fliteral10) = 8.0))

logic fliteral11 : t

axiom fliteral_axiom11 : (tqtisFinite(fliteral11) and
  (tqtreal(fliteral11) = 10.0))

 (* File "step_function_test.adb", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall sfun1__split_fields:num_delimiters_range.
  forall sfun1__split_fields1:(int,us_rep) farray.
  forall sfun2__split_fields:num_delimiters_range.
  forall sfun2__split_fields1:(int,us_rep) farray.
  forall sfun3__split_fields:num_delimiters_range.
  forall sfun3__split_fields1:(int,us_rep) farray.
  forall sfun4__split_fields:num_delimiters_range.
  forall sfun4__split_fields1:(int,us_rep) farray. forall o:float1.
  forall o1:function_range. forall o2:function_range. forall o3:float1.
  forall o4:float1. forall o5:function_range. forall o6:function_range.
  forall o7:float1. forall o8:float1. forall o9:function_range.
  forall o10:function_range. forall o11:float1. forall o12:float1.
  forall o13:function_range. forall o14:function_range. forall o15:float1.
  forall o16:function_range. forall o17:float1. forall o18:function_range.
  forall o19:float1. forall o20:function_range. forall o21:float1.
  forall o22:function_range. forall o23:float1.
  forall o24:(int,us_rep) farray. forall o25:num_delimiters_range.
  forall o26:num_delimiters_range. forall o27:(int,us_rep) farray.
  forall step_function_test__sfun1__assume:num_delimiters_range.
  forall step_function_test__sfun1__assume1:(int,us_rep) farray.
  forall o28:float1. forall o29:function_range. forall o30:function_range.
  forall o31:float1. forall o32:float1. forall o33:function_range.
  forall o34:function_range. forall o35:float1. forall o36:float1.
  forall o37:function_range. forall o38:function_range. forall o39:float1.
  forall o40:float1. forall o41:function_range. forall o42:function_range.
  forall o43:float1. forall o44:function_range. forall o45:float1.
  forall o46:function_range. forall o47:float1. forall o48:function_range.
  forall o49:float1. forall o50:function_range. forall o51:float1.
  forall o52:(int,us_rep) farray. forall o53:num_delimiters_range.
  forall o54:num_delimiters_range. forall o55:(int,us_rep) farray.
  forall step_function_test__sfun2__assume:num_delimiters_range.
  forall step_function_test__sfun2__assume1:(int,us_rep) farray.
  forall o56:float1. forall o57:function_range. forall o58:function_range.
  forall o59:float1. forall o60:float1. forall o61:function_range.
  forall o62:us_split_fields. forall o63:float1. forall o64:function_range.
  forall o65:us_split_fields. forall o66:float1. forall o67:function_range.
  forall o68:us_split_fields. forall o69:float1. forall o70:function_range.
  forall o71:us_split_fields. forall o72:float1. forall o73:function_range.
  forall o74:us_split_fields. forall o75:float1. forall o76:function_range.
  forall o77:us_split_fields. forall o78:us_rep. forall o79:us_rep.
  forall o80:us_rep. forall o81:us_rep. forall o82:us_rep. forall o83:us_rep.
  forall o84:us_rep. forall o85:(int,us_rep) farray.
  forall o86:num_delimiters_range. forall o87:us_split_fields2.
  forall step_function_test__sfun3__assume:us_rep1. forall o88:float1.
  forall o89:function_range. forall o90:us_split_fields. forall o91:float1.
  forall o92:function_range. forall o93:us_split_fields. forall o94:float1.
  forall o95:function_range. forall o96:us_split_fields. forall o97:float1.
  forall o98:function_range. forall o99:us_split_fields. forall o100:float1.
  forall o101:function_range. forall o102:us_split_fields.
  forall o103:float1. forall o104:function_range.
  forall o105:us_split_fields. forall o106:float1.
  forall o107:function_range. forall o108:us_split_fields.
  forall o109:us_rep. forall o110:us_rep. forall o111:us_rep.
  forall o112:us_rep. forall o113:us_rep. forall o114:us_rep.
  forall o115:us_rep. forall o116:(int,us_rep) farray.
  forall o117:num_delimiters_range. forall o118:us_split_fields2.
  forall step_function_test__sfun4__assume:us_rep1.
  forall result:us_split_fields__ref1.
  forall sfun1__split_fields2:us_split_fields2.
  forall result1:us_split_fields__ref1.
  forall sfun2__split_fields2:us_split_fields2.
  forall result2:us_split_fields__ref1.
  forall sfun3__split_fields2:us_split_fields2.
  forall result3:us_split_fields__ref1.
  forall sfun4__split_fields2:us_split_fields2.
  ((((((((to_rep(o12) = fliteral1) and ((to_rep2(o13) = 0) and
  ((o13 = o14) and (o12 = o15)))) and ((o16 = o14) and (o17 = o15))) and
  ((((to_rep(o8) = fliteral2) and ((to_rep2(o9) = 5) and ((o9 = o10) and
  (o8 = o11)))) and ((o18 = o10) and (o19 = o11))) and
  ((((to_rep(o4) = fliteral3) and ((to_rep2(o5) = 3) and ((o5 = o6) and
  (o4 = o7)))) and ((o20 = o6) and (o21 = o7))) and
  ((((to_rep(o) = fliteral4) and ((to_rep2(o1) = 0) and ((o1 = o2) and
  (o = o3)))) and ((o2 = o22) and (o3 = o23))) and (o24 = temp___274({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = o22;
  rec__step_function__delimiter_entry__value = o23 } }, { us_split_fields1 =
  { rec__step_function__delimiter_entry__delimiter = o20;
  rec__step_function__delimiter_entry__value = o21 } }, { us_split_fields1 =
  { rec__step_function__delimiter_entry__delimiter = o18;
  rec__step_function__delimiter_entry__value = o19 } }, { us_split_fields1 =
  { rec__step_function__delimiter_entry__delimiter = o16;
  rec__step_function__delimiter_entry__value = o17 } })))))) and
  ((to_rep1(o25) = 2) and ((o25 = o26) and (o24 = o27)))) and
  ((step_function_test__sfun1__assume = o26) and
  (step_function_test__sfun1__assume1 = o27))) and ((result = {
  us_split_fields__content1 = {
  rec__step_function__step_function_t__number_of_delimiters =
  sfun1__split_fields; rec__step_function__step_function_t__step =
  sfun1__split_fields1 } }) and (sfun1__split_fields2 = {
  rec__step_function__step_function_t__number_of_delimiters =
  step_function_test__sfun1__assume;
  rec__step_function__step_function_t__step =
  step_function_test__sfun1__assume1 }))) ->
  ((((((((to_rep(o40) = fliteral1) and ((to_rep2(o41) = 0) and
  ((o41 = o42) and (o40 = o43)))) and ((o44 = o42) and (o45 = o43))) and
  ((((to_rep(o36) = fliteral4) and ((to_rep2(o37) = 5) and ((o37 = o38) and
  (o36 = o39)))) and ((o46 = o38) and (o47 = o39))) and
  ((((to_rep(o32) = fliteral) and ((to_rep2(o33) = 3) and ((o33 = o34) and
  (o32 = o35)))) and ((o48 = o34) and (o49 = o35))) and
  ((((to_rep(o28) = fliteral) and ((to_rep2(o29) = 0) and ((o29 = o30) and
  (o28 = o31)))) and ((o50 = o30) and (o51 = o31))) and (o52 = temp___281({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = o50;
  rec__step_function__delimiter_entry__value = o51 } }, { us_split_fields1 =
  { rec__step_function__delimiter_entry__delimiter = o48;
  rec__step_function__delimiter_entry__value = o49 } }, { us_split_fields1 =
  { rec__step_function__delimiter_entry__delimiter = o46;
  rec__step_function__delimiter_entry__value = o47 } }, { us_split_fields1 =
  { rec__step_function__delimiter_entry__delimiter = o44;
  rec__step_function__delimiter_entry__value = o45 } })))))) and
  ((to_rep1(o53) = 2) and ((o53 = o54) and (o52 = o55)))) and
  ((step_function_test__sfun2__assume = o54) and
  (step_function_test__sfun2__assume1 = o55))) and ((result1 = {
  us_split_fields__content1 = {
  rec__step_function__step_function_t__number_of_delimiters =
  sfun2__split_fields; rec__step_function__step_function_t__step =
  sfun2__split_fields1 } }) and (sfun2__split_fields2 = {
  rec__step_function__step_function_t__number_of_delimiters =
  step_function_test__sfun2__assume;
  rec__step_function__step_function_t__step =
  step_function_test__sfun2__assume1 }))) ->
  ((((((((to_rep(o75) = fliteral1) and ((to_rep2(o76) = 0) and (o77 = {
  rec__step_function__delimiter_entry__delimiter = o76;
  rec__step_function__delimiter_entry__value = o75 }))) and (o78 = {
  us_split_fields1 = o77 })) and ((((to_rep(o72) = fliteral5) and
  ((to_rep2(o73) = 9) and (o74 = {
  rec__step_function__delimiter_entry__delimiter = o73;
  rec__step_function__delimiter_entry__value = o72 }))) and (o79 = {
  us_split_fields1 = o74 })) and ((((to_rep(o69) = fliteral6) and
  ((to_rep2(o70) = 7) and (o71 = {
  rec__step_function__delimiter_entry__delimiter = o70;
  rec__step_function__delimiter_entry__value = o69 }))) and (o80 = {
  us_split_fields1 = o71 })) and ((((to_rep(o66) = fliteral2) and
  ((to_rep2(o67) = 5) and (o68 = {
  rec__step_function__delimiter_entry__delimiter = o67;
  rec__step_function__delimiter_entry__value = o66 }))) and (o81 = {
  us_split_fields1 = o68 })) and ((((to_rep(o63) = fliteral4) and
  ((to_rep2(o64) = 3) and (o65 = {
  rec__step_function__delimiter_entry__delimiter = o64;
  rec__step_function__delimiter_entry__value = o63 }))) and (o82 = {
  us_split_fields1 = o65 })) and ((((to_rep(o60) = fliteral) and
  ((to_rep2(o61) = 1) and (o62 = {
  rec__step_function__delimiter_entry__delimiter = o61;
  rec__step_function__delimiter_entry__value = o60 }))) and (o83 = {
  us_split_fields1 = o62 })) and ((((to_rep(o56) = fliteral) and
  ((to_rep2(o57) = 0) and ((o57 = o58) and (o56 = o59)))) and (o84 = {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = o58;
  rec__step_function__delimiter_entry__value = o59 } })) and
  (o85 = temp___288(o84, o83, o82, o81, o80, o79, o78))))))))) and
  ((to_rep1(o86) = 5) and (o87 = {
  rec__step_function__step_function_t__number_of_delimiters = o86;
  rec__step_function__step_function_t__step = o85 }))) and
  (step_function_test__sfun3__assume = { us_split_fields3 = o87 })) and
  ((result2 = { us_split_fields__content1 = {
  rec__step_function__step_function_t__number_of_delimiters =
  sfun3__split_fields; rec__step_function__step_function_t__step =
  sfun3__split_fields1 } }) and
  (sfun3__split_fields2 = (step_function_test__sfun3__assume).us_split_fields3))) ->
  ((((((((to_rep(o106) = fliteral1) and ((to_rep2(o107) = 0) and (o108 = {
  rec__step_function__delimiter_entry__delimiter = o107;
  rec__step_function__delimiter_entry__value = o106 }))) and (o109 = {
  us_split_fields1 = o108 })) and ((((to_rep(o103) = fliteral7) and
  ((to_rep2(o104) = 10) and (o105 = {
  rec__step_function__delimiter_entry__delimiter = o104;
  rec__step_function__delimiter_entry__value = o103 }))) and (o110 = {
  us_split_fields1 = o105 })) and ((((to_rep(o100) = fliteral3) and
  ((to_rep2(o101) = 8) and (o102 = {
  rec__step_function__delimiter_entry__delimiter = o101;
  rec__step_function__delimiter_entry__value = o100 }))) and (o111 = {
  us_split_fields1 = o102 })) and ((((to_rep(o97) = fliteral8) and
  ((to_rep2(o98) = 6) and (o99 = {
  rec__step_function__delimiter_entry__delimiter = o98;
  rec__step_function__delimiter_entry__value = o97 }))) and (o112 = {
  us_split_fields1 = o99 })) and ((((to_rep(o94) = fliteral9) and
  ((to_rep2(o95) = 4) and (o96 = {
  rec__step_function__delimiter_entry__delimiter = o95;
  rec__step_function__delimiter_entry__value = o94 }))) and (o113 = {
  us_split_fields1 = o96 })) and ((((to_rep(o91) = fliteral10) and
  ((to_rep2(o92) = 2) and (o93 = {
  rec__step_function__delimiter_entry__delimiter = o92;
  rec__step_function__delimiter_entry__value = o91 }))) and (o114 = {
  us_split_fields1 = o93 })) and ((((to_rep(o88) = fliteral11) and
  ((to_rep2(o89) = 0) and (o90 = {
  rec__step_function__delimiter_entry__delimiter = o89;
  rec__step_function__delimiter_entry__value = o88 }))) and (o115 = {
  us_split_fields1 = o90 })) and (o116 = temp___298(o115, o114, o113, o112,
  o111, o110, o109))))))))) and ((to_rep1(o117) = 5) and (o118 = {
  rec__step_function__step_function_t__number_of_delimiters = o117;
  rec__step_function__step_function_t__step = o116 }))) and
  (step_function_test__sfun4__assume = { us_split_fields3 = o118 })) and
  ((result3 = { us_split_fields__content1 = {
  rec__step_function__step_function_t__number_of_delimiters =
  sfun4__split_fields; rec__step_function__step_function_t__step =
  sfun4__split_fields1 } }) and
  (sfun4__split_fields2 = (step_function_test__sfun4__assume).us_split_fields3))) ->
  ((is_valid({ us_split_fields3 = sfun1__split_fields2 }) = true) ->
  ((is_valid({ us_split_fields3 = sfun2__split_fields2 }) = true) ->
  ((is_valid({ us_split_fields3 = sfun3__split_fields2 }) = true) ->
  ((is_valid({ us_split_fields3 = sfun4__split_fields2 }) = true) ->
  (eq(get_value({ us_split_fields3 = sfun1__split_fields2 }, 0),
  fliteral4) -> (eq(get_value({ us_split_fields3 = sfun1__split_fields2 },
  1), fliteral4) -> (eq(get_value({ us_split_fields3 = sfun1__split_fields2
  }, 3), fliteral3) -> (eq(get_value({ us_split_fields3 =
  sfun1__split_fields2 }, 4), fliteral3) -> (eq(get_value({
  us_split_fields3 = sfun1__split_fields2 }, 5), fliteral2) -> (is_valid({
  us_split_fields3 = sfun1__split_fields2 }) = true)))))))))))))))
