(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort fibonacci_argument_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 46)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (fibonacci_argument_type fibonacci_argument_type) Bool)
(declare-const dummy1 fibonacci_argument_type)
(declare-datatypes () ((fibonacci_argument_type__ref (mk_fibonacci_argument_type__ref (fibonacci_argument_type__content fibonacci_argument_type)))))
(define-fun fibonacci_argument_type__ref___projection ((a fibonacci_argument_type__ref)) fibonacci_argument_type (fibonacci_argument_type__content a))
(define-fun dynamic_invariant ((temp___expr_208 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 46)) (in_range1 temp___expr_208)))
(declare-fun fib (Int) Int)
(declare-fun fib__function_guard (Int Int) Bool)
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-fun power (Float32 Int) Float32)
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 0) (of_int RNE 1)))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 1) x))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 2) (fp.mul RNE x x)))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 3) (fp.mul RNE x (fp.mul RNE x x))))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (=> (not (fp.isZero x)) (fp.eq (power x (- 1)) (fp.div RNE (of_int RNE 1) x))))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (=> (not (fp.isZero x)) (fp.eq (power x (- 2)) (fp.div RNE (of_int RNE 1) (power x 2)))))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (=> (not (fp.isZero x)) (fp.eq (power x (- 2)) (fp.div RNE (of_int RNE 1) (power x 3)))))))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(assert (forall ((n Int)) (! (=> (dynamic_invariant n true true true true) (= (fib n) (ite (or (= n 0) (= n 1)) n (+ (fib (- n 1)) (fib (- n 2)))))) :pattern ((fib n)))))
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const lookup_table (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun number_theory__fibonacci2__lookup_table__aggregate_def (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) (Array Int natural))
(assert (= lookup_table (number_theory__fibonacci2__lookup_table__aggregate_def 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903)))
(assert (forall ((temp___156 Int) (temp___157 Int) (temp___158 Int) (temp___159 Int) (temp___160 Int) (temp___161 Int) (temp___162 Int) (temp___163 Int) (temp___164 Int) (temp___165 Int) (temp___166 Int) (temp___167 Int) (temp___168 Int) (temp___169 Int) (temp___170 Int) (temp___171 Int) (temp___172 Int) (temp___173 Int) (temp___174 Int) (temp___175 Int) (temp___176 Int) (temp___177 Int) (temp___178 Int) (temp___179 Int) (temp___180 Int) (temp___181 Int) (temp___182 Int) (temp___183 Int) (temp___184 Int) (temp___185 Int) (temp___186 Int) (temp___187 Int) (temp___188 Int) (temp___189 Int) (temp___190 Int) (temp___191 Int) (temp___192 Int) (temp___193 Int) (temp___194 Int) (temp___195 Int) (temp___196 Int) (temp___197 Int) (temp___198 Int) (temp___199 Int) (temp___200 Int) (temp___201 Int) (temp___202 Int)) (let ((temp___155 (number_theory__fibonacci2__lookup_table__aggregate_def temp___156 temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167 temp___168 temp___169 temp___170 temp___171 temp___172 temp___173 temp___174 temp___175 temp___176 temp___177 temp___178 temp___179 temp___180 temp___181 temp___182 temp___183 temp___184 temp___185 temp___186 temp___187 temp___188 temp___189 temp___190 temp___191 temp___192 temp___193 temp___194 temp___195 temp___196 temp___197 temp___198 temp___199 temp___200 temp___201 temp___202))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (dynamic_invariant1 temp___156 true true true true) (dynamic_invariant1 temp___157 true true true true)) (dynamic_invariant1 temp___158 true true true true)) (dynamic_invariant1 temp___159 true true true true)) (dynamic_invariant1 temp___160 true true true true)) (dynamic_invariant1 temp___161 true true true true)) (dynamic_invariant1 temp___162 true true true true)) (dynamic_invariant1 temp___163 true true true true)) (dynamic_invariant1 temp___164 true true true true)) (dynamic_invariant1 temp___165 true true true true)) (dynamic_invariant1 temp___166 true true true true)) (dynamic_invariant1 temp___167 true true true true)) (dynamic_invariant1 temp___168 true true true true)) (dynamic_invariant1 temp___169 true true true true)) (dynamic_invariant1 temp___170 true true true true)) (dynamic_invariant1 temp___171 true true true true)) (dynamic_invariant1 temp___172 true true true true)) (dynamic_invariant1 temp___173 true true true true)) (dynamic_invariant1 temp___174 true true true true)) (dynamic_invariant1 temp___175 true true true true)) (dynamic_invariant1 temp___176 true true true true)) (dynamic_invariant1 temp___177 true true true true)) (dynamic_invariant1 temp___178 true true true true)) (dynamic_invariant1 temp___179 true true true true)) (dynamic_invariant1 temp___180 true true true true)) (dynamic_invariant1 temp___181 true true true true)) (dynamic_invariant1 temp___182 true true true true)) (dynamic_invariant1 temp___183 true true true true)) (dynamic_invariant1 temp___184 true true true true)) (dynamic_invariant1 temp___185 true true true true)) (dynamic_invariant1 temp___186 true true true true)) (dynamic_invariant1 temp___187 true true true true)) (dynamic_invariant1 temp___188 true true true true)) (dynamic_invariant1 temp___189 true true true true)) (dynamic_invariant1 temp___190 true true true true)) (dynamic_invariant1 temp___191 true true true true)) (dynamic_invariant1 temp___192 true true true true)) (dynamic_invariant1 temp___193 true true true true)) (dynamic_invariant1 temp___194 true true true true)) (dynamic_invariant1 temp___195 true true true true)) (dynamic_invariant1 temp___196 true true true true)) (dynamic_invariant1 temp___197 true true true true)) (dynamic_invariant1 temp___198 true true true true)) (dynamic_invariant1 temp___199 true true true true)) (dynamic_invariant1 temp___200 true true true true)) (dynamic_invariant1 temp___201 true true true true)) (dynamic_invariant1 temp___202 true true true true)) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select temp___155 0)) temp___156) (= (to_rep (select temp___155 1)) temp___157)) (= (to_rep (select temp___155 2)) temp___158)) (= (to_rep (select temp___155 3)) temp___159)) (= (to_rep (select temp___155 4)) temp___160)) (= (to_rep (select temp___155 5)) temp___161)) (= (to_rep (select temp___155 6)) temp___162)) (= (to_rep (select temp___155 7)) temp___163)) (= (to_rep (select temp___155 8)) temp___164)) (= (to_rep (select temp___155 9)) temp___165)) (= (to_rep (select temp___155 10)) temp___166)) (= (to_rep (select temp___155 11)) temp___167)) (= (to_rep (select temp___155 12)) temp___168)) (= (to_rep (select temp___155 13)) temp___169)) (= (to_rep (select temp___155 14)) temp___170)) (= (to_rep (select temp___155 15)) temp___171)) (= (to_rep (select temp___155 16)) temp___172)) (= (to_rep (select temp___155 17)) temp___173)) (= (to_rep (select temp___155 18)) temp___174)) (= (to_rep (select temp___155 19)) temp___175)) (= (to_rep (select temp___155 20)) temp___176)) (= (to_rep (select temp___155 21)) temp___177)) (= (to_rep (select temp___155 22)) temp___178)) (= (to_rep (select temp___155 23)) temp___179)) (= (to_rep (select temp___155 24)) temp___180)) (= (to_rep (select temp___155 25)) temp___181)) (= (to_rep (select temp___155 26)) temp___182)) (= (to_rep (select temp___155 27)) temp___183)) (= (to_rep (select temp___155 28)) temp___184)) (= (to_rep (select temp___155 29)) temp___185)) (= (to_rep (select temp___155 30)) temp___186)) (= (to_rep (select temp___155 31)) temp___187)) (= (to_rep (select temp___155 32)) temp___188)) (= (to_rep (select temp___155 33)) temp___189)) (= (to_rep (select temp___155 34)) temp___190)) (= (to_rep (select temp___155 35)) temp___191)) (= (to_rep (select temp___155 36)) temp___192)) (= (to_rep (select temp___155 37)) temp___193)) (= (to_rep (select temp___155 38)) temp___194)) (= (to_rep (select temp___155 39)) temp___195)) (= (to_rep (select temp___155 40)) temp___196)) (= (to_rep (select temp___155 41)) temp___197)) (= (to_rep (select temp___155 42)) temp___198)) (= (to_rep (select temp___155 43)) temp___199)) (= (to_rep (select temp___155 44)) temp___200)) (= (to_rep (select temp___155 45)) temp___201)) (= (to_rep (select temp___155 46)) temp___202))))))
(declare-const number_theory__fibonacci2__result Int)
(declare-const result Int)
(declare-const number_theory__fibonacci2__result1 Int)
(declare-const number_theory__fibonacci2__result2 Int)
(declare-const number_theory__fibonacci2__result3 Int)
(declare-const number_theory__fibonacci2__result4 Int)
(declare-const number_theory__fibonacci2__result5 Int)
(declare-const result1 Int)
(assert (in_range1 n))
(assert (= (number_theory__fibonacci2__lookup_table__aggregate_def 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903) lookup_table))
(assert (= number_theory__fibonacci2__result1 number_theory__fibonacci2__result2))
(assert (= number_theory__fibonacci2__result3 number_theory__fibonacci2__result1))
(assert (= result number_theory__fibonacci2__result))
(assert (= number_theory__fibonacci2__result1 (to_rep (select lookup_table n))))
(assert (= (mk_int__ref number_theory__fibonacci2__result4) (mk_int__ref number_theory__fibonacci2__result2)))
(assert (= number_theory__fibonacci2__result5 number_theory__fibonacci2__result3))
(assert (= result1 number_theory__fibonacci2__result4))
(assert (not (= number_theory__fibonacci2__result4 (fib n))))
(check-sat)
(exit)
