(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-fun to_rep (float) Float32)
(declare-fun of_rep (Float32) float)
(assert (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun min (Float32 Float32) Float32)
(declare-fun min__function_guard (Float32 Float32 Float32) Bool)
(define-fun dynamic_invariant ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(assert (forall ((x1 Float32) (x2 Float32)) (! (=> (and (dynamic_invariant x1 true true true true) (dynamic_invariant x2 true true true true)) (let ((result (min x1 x2))) (and (ite (fp.leq x1 x2) (fp.eq result x1) (fp.eq result x2)) (dynamic_invariant result true false true true)))) :pattern ((min x1 x2)))))
(declare-sort num_delimiters_range 0)
(declare-fun num_delimiters_rangeqtint (num_delimiters_range) Int)
(assert (forall ((i num_delimiters_range)) (and (<= 0 (num_delimiters_rangeqtint i)) (<= (num_delimiters_rangeqtint i) 10))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (num_delimiters_range num_delimiters_range) Bool)
(declare-const dummy1 num_delimiters_range)
(declare-datatypes () ((num_delimiters_range__ref (mk_num_delimiters_range__ref (num_delimiters_range__content num_delimiters_range)))))
(define-fun num_delimiters_range__ref___projection ((a num_delimiters_range__ref)) num_delimiters_range (num_delimiters_range__content a))
(define-fun to_rep1 ((x num_delimiters_range)) Int (num_delimiters_rangeqtint x))
(declare-fun of_rep1 (Int) num_delimiters_range)
(assert (forall ((x num_delimiters_range)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x num_delimiters_range)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort function_range 0)
(declare-fun function_rangeqtint (function_range) Int)
(assert (forall ((i function_range)) (and (<= 0 (function_rangeqtint i)) (<= (function_rangeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (function_range function_range) Bool)
(declare-const dummy2 function_range)
(declare-datatypes () ((function_range__ref (mk_function_range__ref (function_range__content function_range)))))
(define-fun function_range__ref___projection ((a function_range__ref)) function_range (function_range__content a))
(define-fun to_rep2 ((x function_range)) Int (function_rangeqtint x))
(declare-fun of_rep2 (Int) function_range)
(assert (forall ((x function_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x function_range)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__step_function__delimiter_entry__delimiter function_range) (rec__step_function__delimiter_entry__value float)))))
(define-fun us_split_fields_Delimiter__projection ((a us_split_fields)) function_range (rec__step_function__delimiter_entry__delimiter a))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) float (rec__step_function__delimiter_entry__value a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 a))) (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 b)))) (= (to_rep (rec__step_function__delimiter_entry__value (us_split_fields1 a))) (to_rep (rec__step_function__delimiter_entry__value (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const step_function__delimiter_entry__delimiter__first__bit Int)
(declare-const step_function__delimiter_entry__delimiter__last__bit Int)
(declare-const step_function__delimiter_entry__delimiter__position Int)
(assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))
(assert (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))
(assert (<= 0 step_function__delimiter_entry__delimiter__position))
(declare-const step_function__delimiter_entry__value__first__bit Int)
(declare-const step_function__delimiter_entry__value__last__bit Int)
(declare-const step_function__delimiter_entry__value__position Int)
(assert (<= 0 step_function__delimiter_entry__value__first__bit))
(assert (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))
(assert (<= 0 step_function__delimiter_entry__value__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((delimiter_entry__ref (mk_delimiter_entry__ref (delimiter_entry__content us_rep)))))
(define-fun delimiter_entry__ref___projection ((a delimiter_entry__ref)) us_rep (delimiter_entry__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const dummy4 (Array Int us_rep))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__step_function__step_function_t__number_of_delimiters num_delimiters_range) (rec__step_function__step_function_t__step (Array Int us_rep))))))
(define-fun us_split_fields_Number_Of_Delimiters__projection ((a us_split_fields2)) num_delimiters_range (rec__step_function__step_function_t__number_of_delimiters a))
(define-fun us_split_fields_Step__projection ((a us_split_fields2)) (Array Int us_rep) (rec__step_function__step_function_t__step a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 a))) (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 b)))) (= (bool_eq1 (rec__step_function__step_function_t__step (us_split_fields3 a)) 0 10 (rec__step_function__step_function_t__step (us_split_fields3 b)) 0 10) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const step_function__step_function_t__number_of_delimiters__first__bit Int)
(declare-const step_function__step_function_t__number_of_delimiters__last__bit Int)
(declare-const step_function__step_function_t__number_of_delimiters__position Int)
(assert (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))
(assert (< step_function__step_function_t__number_of_delimiters__first__bit step_function__step_function_t__number_of_delimiters__last__bit))
(assert (<= 0 step_function__step_function_t__number_of_delimiters__position))
(declare-const step_function__step_function_t__step__first__bit Int)
(declare-const step_function__step_function_t__step__last__bit Int)
(declare-const step_function__step_function_t__step__position Int)
(assert (<= 0 step_function__step_function_t__step__first__bit))
(assert (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))
(assert (<= 0 step_function__step_function_t__step__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((step_function_t__ref (mk_step_function_t__ref (step_function_t__content us_rep1)))))
(define-fun step_function_t__ref___projection ((a step_function_t__ref)) us_rep1 (step_function_t__content a))
(declare-fun is_valid (us_rep1) Bool)
(declare-fun is_valid__function_guard (Bool us_rep1) Bool)
(assert true)
(assert (forall ((sfun us_rep1)) (! (= (= (is_valid sfun) true) (and (= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___209 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___209 0))))) 0) (forall ((i Int)) (=> (and (<= 0 i) (<= i (- (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun))) 1))) (< (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___211 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___211 i))))) (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___210 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___210 (+ i 1))))))))))) :pattern ((is_valid sfun)))))
(declare-fun has_same_delimiters (us_rep1 us_rep1) Bool)
(declare-fun has_same_delimiters__function_guard (Bool us_rep1 us_rep1) Bool)
(assert true)
(assert (forall ((sfun1 us_rep1) (sfun2 us_rep1)) (! (= (= (has_same_delimiters sfun1 sfun2) true) (and (= (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun1))) (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun2)))) (forall ((i Int)) (=> (and (<= 1 i) (<= i (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun1))))) (= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___218 (rec__step_function__step_function_t__step (us_split_fields3 sfun1)))) (select temp___218 i))))) (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___219 (rec__step_function__step_function_t__step (us_split_fields3 sfun2)))) (select temp___219 i)))))))))) :pattern ((has_same_delimiters sfun1 sfun2)))))
(declare-fun get_value (us_rep1 Int) Float32)
(declare-fun get_value__function_guard (Float32 us_rep1 Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 2147483647)) (in_range1 temp___expr_166)))
(assert (forall ((sfun us_rep1)) (forall ((x Int)) (! (=> (and (dynamic_invariant1 x true true true true) (= (is_valid sfun) true)) (let ((result (get_value sfun x))) (and (or (exists ((i Int)) (and (and (<= 0 i) (<= i (- (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun))) 1))) (and (and (<= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___226 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___226 i))))) x) (< x (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___227 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___227 (+ i 1)))))))) (fp.eq result (to_rep (rec__step_function__delimiter_entry__value (us_split_fields1 (let ((temp___228 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___228 i))))))))) (and (<= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___229 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___229 (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun)))))))) x) (fp.eq result (to_rep (rec__step_function__delimiter_entry__value (us_split_fields1 (let ((temp___230 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___230 (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun))))))))))) (dynamic_invariant result true false true true)))) :pattern ((get_value sfun x))))))
(declare-fun minimum_until_point (us_rep1 Int) Float32)
(declare-fun minimum_until_point__function_guard (Float32 us_rep1 Int) Bool)
(assert (forall ((sfun us_rep1)) (forall ((x Int)) (! (=> (and (dynamic_invariant1 x true true true true) (= (is_valid sfun) true)) (let ((result (minimum_until_point sfun x))) (and (and (forall ((i Int)) (=> (and (<= 0 i) (<= i (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun))))) (=> (<= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___238 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___238 i))))) x) (fp.leq result (to_rep (rec__step_function__delimiter_entry__value (us_split_fields1 (let ((temp___237 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___237 i))))))))) (exists ((i Int)) (and (and (<= 0 i) (<= i (to_rep1 (rec__step_function__step_function_t__number_of_delimiters (us_split_fields3 sfun))))) (and (<= (to_rep2 (rec__step_function__delimiter_entry__delimiter (us_split_fields1 (let ((temp___239 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___239 i))))) x) (fp.eq result (to_rep (rec__step_function__delimiter_entry__value (us_split_fields1 (let ((temp___240 (rec__step_function__step_function_t__step (us_split_fields3 sfun)))) (select temp___240 i)))))))))) (dynamic_invariant result true false true true)))) :pattern ((minimum_until_point sfun x))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun temp_____aggregate_def_308 (us_rep us_rep us_rep us_rep) (Array Int us_rep))
(declare-fun temp_____aggregate_def_315 (us_rep us_rep us_rep us_rep) (Array Int us_rep))
(declare-fun temp_____aggregate_def_322 (us_rep us_rep us_rep us_rep us_rep us_rep us_rep) (Array Int us_rep))
(declare-fun temp_____aggregate_def_332 (us_rep us_rep us_rep us_rep us_rep us_rep us_rep) (Array Int us_rep))
(define-fun dynamic_invariant2 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 10)) (in_range temp___expr_159)))
(assert (forall ((temp___310 us_rep) (temp___311 us_rep) (temp___312 us_rep) (temp___313 us_rep)) (let ((temp___309 (temp_____aggregate_def_308 temp___310 temp___311 temp___312 temp___313))) (forall ((temp___314 Int)) (ite (= temp___314 0) (= (select temp___309 temp___314) temp___310) (ite (= temp___314 1) (= (select temp___309 temp___314) temp___311) (ite (= temp___314 2) (= (select temp___309 temp___314) temp___312) (= (select temp___309 temp___314) temp___313))))))))
(assert (forall ((temp___317 us_rep) (temp___318 us_rep) (temp___319 us_rep) (temp___320 us_rep)) (let ((temp___316 (temp_____aggregate_def_315 temp___317 temp___318 temp___319 temp___320))) (forall ((temp___321 Int)) (ite (= temp___321 0) (= (select temp___316 temp___321) temp___317) (ite (= temp___321 1) (= (select temp___316 temp___321) temp___318) (ite (= temp___321 2) (= (select temp___316 temp___321) temp___319) (= (select temp___316 temp___321) temp___320))))))))
(assert (forall ((temp___324 us_rep) (temp___325 us_rep) (temp___326 us_rep) (temp___327 us_rep) (temp___328 us_rep) (temp___329 us_rep) (temp___330 us_rep)) (let ((temp___323 (temp_____aggregate_def_322 temp___324 temp___325 temp___326 temp___327 temp___328 temp___329 temp___330))) (forall ((temp___331 Int)) (ite (= temp___331 0) (= (select temp___323 temp___331) temp___324) (ite (= temp___331 1) (= (select temp___323 temp___331) temp___325) (ite (= temp___331 2) (= (select temp___323 temp___331) temp___326) (ite (= temp___331 3) (= (select temp___323 temp___331) temp___327) (ite (= temp___331 4) (= (select temp___323 temp___331) temp___328) (ite (= temp___331 5) (= (select temp___323 temp___331) temp___329) (= (select temp___323 temp___331) temp___330)))))))))))
(assert (forall ((temp___334 us_rep) (temp___335 us_rep) (temp___336 us_rep) (temp___337 us_rep) (temp___338 us_rep) (temp___339 us_rep) (temp___340 us_rep)) (let ((temp___333 (temp_____aggregate_def_332 temp___334 temp___335 temp___336 temp___337 temp___338 temp___339 temp___340))) (forall ((temp___341 Int)) (ite (= temp___341 0) (= (select temp___333 temp___341) temp___334) (ite (= temp___341 1) (= (select temp___333 temp___341) temp___335) (ite (= temp___341 2) (= (select temp___333 temp___341) temp___336) (ite (= temp___341 3) (= (select temp___333 temp___341) temp___337) (ite (= temp___341 4) (= (select temp___333 temp___341) temp___338) (ite (= temp___341 5) (= (select temp___333 temp___341) temp___339) (= (select temp___333 temp___341) temp___340)))))))))))
(declare-const rliteral function_range)
(assert (= (function_rangeqtint rliteral) 0))
(declare-const rliteral1 function_range)
(assert (= (function_rangeqtint rliteral1) 5))
(declare-const rliteral2 function_range)
(assert (= (function_rangeqtint rliteral2) 3))
(declare-const rliteral3 num_delimiters_range)
(assert (= (num_delimiters_rangeqtint rliteral3) 2))
(declare-const rliteral4 function_range)
(assert (= (function_rangeqtint rliteral4) 9))
(declare-const rliteral5 function_range)
(assert (= (function_rangeqtint rliteral5) 7))
(declare-const rliteral6 function_range)
(assert (= (function_rangeqtint rliteral6) 1))
(declare-const rliteral7 num_delimiters_range)
(assert (= (num_delimiters_rangeqtint rliteral7) 5))
(declare-const rliteral8 function_range)
(assert (= (function_rangeqtint rliteral8) 10))
(declare-const rliteral9 function_range)
(assert (= (function_rangeqtint rliteral9) 8))
(declare-const rliteral10 function_range)
(assert (= (function_rangeqtint rliteral10) 6))
(declare-const rliteral11 function_range)
(assert (= (function_rangeqtint rliteral11) 4))
(declare-const rliteral12 function_range)
(assert (= (function_rangeqtint rliteral12) 2))
(declare-const sfun1__split_fields num_delimiters_range)
(declare-const sfun1__split_fields1 (Array Int us_rep))
(declare-const sfun2__split_fields num_delimiters_range)
(declare-const sfun2__split_fields1 (Array Int us_rep))
(declare-const sfun3__split_fields num_delimiters_range)
(declare-const sfun3__split_fields1 (Array Int us_rep))
(declare-const sfun4__split_fields num_delimiters_range)
(declare-const sfun4__split_fields1 (Array Int us_rep))
(declare-const o float)
(declare-const o1 function_range)
(declare-const o2 float)
(declare-const o3 float)
(declare-const o4 function_range)
(declare-const o5 float)
(declare-const o6 float)
(declare-const o7 function_range)
(declare-const o8 float)
(declare-const o9 float)
(declare-const o10 function_range)
(declare-const o11 float)
(declare-const o12 function_range)
(declare-const o13 float)
(declare-const o14 function_range)
(declare-const o15 float)
(declare-const o16 function_range)
(declare-const o17 float)
(declare-const o18 us_rep)
(declare-const o19 (Array Int us_rep))
(declare-const o20 us_split_fields2)
(declare-const step_function_test__sfun1__assume us_rep1)
(declare-const o21 float)
(declare-const o22 us_split_fields)
(declare-const o23 float)
(declare-const o24 us_split_fields)
(declare-const o25 float)
(declare-const o26 us_split_fields)
(declare-const o27 float)
(declare-const o28 us_split_fields)
(declare-const o29 us_rep)
(declare-const o30 us_rep)
(declare-const o31 us_rep)
(declare-const o32 us_rep)
(declare-const o33 (Array Int us_rep))
(declare-const o34 us_split_fields2)
(declare-const step_function_test__sfun2__assume us_rep1)
(declare-const o35 float)
(declare-const o36 us_split_fields)
(declare-const o37 float)
(declare-const o38 us_split_fields)
(declare-const o39 float)
(declare-const o40 us_split_fields)
(declare-const o41 float)
(declare-const o42 us_split_fields)
(declare-const o43 float)
(declare-const o44 us_split_fields)
(declare-const o45 float)
(declare-const o46 us_split_fields)
(declare-const o47 float)
(declare-const o48 us_split_fields)
(declare-const o49 us_rep)
(declare-const o50 us_rep)
(declare-const o51 us_rep)
(declare-const o52 us_rep)
(declare-const o53 us_rep)
(declare-const o54 us_rep)
(declare-const o55 us_rep)
(declare-const o56 (Array Int us_rep))
(declare-const o57 us_split_fields2)
(declare-const step_function_test__sfun3__assume us_rep1)
(declare-const o58 float)
(declare-const o59 us_split_fields)
(declare-const o60 float)
(declare-const o61 us_split_fields)
(declare-const o62 float)
(declare-const o63 us_split_fields)
(declare-const o64 float)
(declare-const o65 us_split_fields)
(declare-const o66 float)
(declare-const o67 us_split_fields)
(declare-const o68 float)
(declare-const o69 us_split_fields)
(declare-const o70 float)
(declare-const o71 us_split_fields)
(declare-const o72 us_rep)
(declare-const o73 us_rep)
(declare-const o74 us_rep)
(declare-const o75 us_rep)
(declare-const o76 us_rep)
(declare-const o77 us_rep)
(declare-const o78 us_rep)
(declare-const o79 (Array Int us_rep))
(declare-const o80 us_split_fields2)
(declare-const step_function_test__sfun4__assume us_rep1)
(declare-const result us_split_fields__ref1)
(declare-const sfun1__split_fields2 us_split_fields2)
(declare-const result1 us_split_fields__ref1)
(declare-const sfun2__split_fields2 us_split_fields2)
(declare-const result2 us_split_fields__ref1)
(declare-const sfun3__split_fields2 us_split_fields2)
(declare-const result3 us_split_fields__ref1)
(declare-const sfun4__split_fields2 us_split_fields2)
(assert (= (to_rep o9) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= rliteral o10))
(assert (= o9 o11))
(assert (= o12 o10))
(assert (= o13 o11))
(assert (= (to_rep o6) (fp #b0 #b10000001 #b01000000000000000000000)))
(assert (= rliteral1 o7))
(assert (= o6 o8))
(assert (= o14 o7))
(assert (= o15 o8))
(assert (= (to_rep o3) (fp #b0 #b10000000 #b00000000000000000000000)))
(assert (= rliteral2 o4))
(assert (= o3 o5))
(assert (= o16 o4))
(assert (= o17 o5))
(assert (= (to_rep o) (fp #b0 #b10000000 #b10000000000000000000000)))
(assert (= rliteral o1))
(assert (= o o2))
(assert (= o18 (mk___rep (mk___split_fields o1 o2))))
(assert (= o19 (temp_____aggregate_def_308 o18 (mk___rep (mk___split_fields o16 o17)) (mk___rep (mk___split_fields o14 o15)) (mk___rep (mk___split_fields o12 o13)))))
(assert (= o20 (mk___split_fields1 rliteral3 o19)))
(assert (= step_function_test__sfun1__assume (mk___rep1 o20)))
(assert (= result (mk___split_fields__ref1 (mk___split_fields1 sfun1__split_fields sfun1__split_fields1))))
(assert (= sfun1__split_fields2 (us_split_fields3 step_function_test__sfun1__assume)))
(assert (= (to_rep o27) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= o28 (mk___split_fields rliteral o27)))
(assert (= o29 (mk___rep o28)))
(assert (= (to_rep o25) (fp #b0 #b10000000 #b10000000000000000000000)))
(assert (= o26 (mk___split_fields rliteral1 o25)))
(assert (= o30 (mk___rep o26)))
(assert (= (to_rep o23) (fp #b0 #b01111111 #b00000000000000000000000)))
(assert (= o24 (mk___split_fields rliteral2 o23)))
(assert (= o31 (mk___rep o24)))
(assert (= (to_rep o21) (fp #b0 #b01111111 #b00000000000000000000000)))
(assert (= o22 (mk___split_fields rliteral o21)))
(assert (= o32 (mk___rep o22)))
(assert (= o33 (temp_____aggregate_def_315 o32 o31 o30 o29)))
(assert (= o34 (mk___split_fields1 rliteral3 o33)))
(assert (= step_function_test__sfun2__assume (mk___rep1 o34)))
(assert (= result1 (mk___split_fields__ref1 (mk___split_fields1 sfun2__split_fields sfun2__split_fields1))))
(assert (= sfun2__split_fields2 (us_split_fields3 step_function_test__sfun2__assume)))
(assert (= (to_rep o47) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= o48 (mk___split_fields rliteral o47)))
(assert (= o49 (mk___rep o48)))
(assert (= (to_rep o45) (fp #b0 #b10000010 #b00100000000000000000000)))
(assert (= o46 (mk___split_fields rliteral4 o45)))
(assert (= o50 (mk___rep o46)))
(assert (= (to_rep o43) (fp #b0 #b10000001 #b11000000000000000000000)))
(assert (= o44 (mk___split_fields rliteral5 o43)))
(assert (= o51 (mk___rep o44)))
(assert (= (to_rep o41) (fp #b0 #b10000001 #b01000000000000000000000)))
(assert (= o42 (mk___split_fields rliteral1 o41)))
(assert (= o52 (mk___rep o42)))
(assert (= (to_rep o39) (fp #b0 #b10000000 #b10000000000000000000000)))
(assert (= o40 (mk___split_fields rliteral2 o39)))
(assert (= o53 (mk___rep o40)))
(assert (= (to_rep o37) (fp #b0 #b01111111 #b00000000000000000000000)))
(assert (= o38 (mk___split_fields rliteral6 o37)))
(assert (= o54 (mk___rep o38)))
(assert (= (to_rep o35) (fp #b0 #b01111111 #b00000000000000000000000)))
(assert (= o36 (mk___split_fields rliteral o35)))
(assert (= o55 (mk___rep o36)))
(assert (= o56 (temp_____aggregate_def_322 o55 o54 o53 o52 o51 o50 o49)))
(assert (= o57 (mk___split_fields1 rliteral7 o56)))
(assert (= step_function_test__sfun3__assume (mk___rep1 o57)))
(assert (= result2 (mk___split_fields__ref1 (mk___split_fields1 sfun3__split_fields sfun3__split_fields1))))
(assert (= sfun3__split_fields2 (us_split_fields3 step_function_test__sfun3__assume)))
(assert (= (to_rep o70) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= o71 (mk___split_fields rliteral o70)))
(assert (= o72 (mk___rep o71)))
(assert (= (to_rep o68) (fp #b0 #b01111110 #b00000000000000000000000)))
(assert (= o69 (mk___split_fields rliteral8 o68)))
(assert (= o73 (mk___rep o69)))
(assert (= (to_rep o66) (fp #b0 #b10000000 #b00000000000000000000000)))
(assert (= o67 (mk___split_fields rliteral9 o66)))
(assert (= o74 (mk___rep o67)))
(assert (= (to_rep o64) (fp #b0 #b10000001 #b00000000000000000000000)))
(assert (= o65 (mk___split_fields rliteral10 o64)))
(assert (= o75 (mk___rep o65)))
(assert (= (to_rep o62) (fp #b0 #b10000001 #b10000000000000000000000)))
(assert (= o63 (mk___split_fields rliteral11 o62)))
(assert (= o76 (mk___rep o63)))
(assert (= (to_rep o60) (fp #b0 #b10000010 #b00000000000000000000000)))
(assert (= o61 (mk___split_fields rliteral12 o60)))
(assert (= o77 (mk___rep o61)))
(assert (= (to_rep o58) (fp #b0 #b10000010 #b01000000000000000000000)))
(assert (= o59 (mk___split_fields rliteral o58)))
(assert (= o78 (mk___rep o59)))
(assert (= o79 (temp_____aggregate_def_332 o78 o77 o76 o75 o74 o73 o72)))
(assert (= o80 (mk___split_fields1 rliteral7 o79)))
(assert (= step_function_test__sfun4__assume (mk___rep1 o80)))
(assert (= result3 (mk___split_fields__ref1 (mk___split_fields1 sfun4__split_fields sfun4__split_fields1))))
(assert (= sfun4__split_fields2 (us_split_fields3 step_function_test__sfun4__assume)))
(assert (not (= (is_valid (mk___rep1 sfun1__split_fields2)) true)))
(check-sat)
(exit)
