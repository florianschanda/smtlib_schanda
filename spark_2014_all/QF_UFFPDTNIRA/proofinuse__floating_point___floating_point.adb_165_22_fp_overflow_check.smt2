(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(define-fun dynamic_invariant ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(declare-sort coord 0)
(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) x) (fp.leq x (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun user_eq1 (coord coord) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 coord)
(declare-datatypes () ((coord__ref (mk_coord__ref (coord__content coord)))))
(define-fun coord__ref___projection ((a coord__ref)) coord (coord__content a))
(define-fun dynamic_invariant1 ((temp___expr_246 Float32) (temp___is_init_242 Bool) (temp___skip_constant_243 Bool) (temp___do_toplevel_244 Bool) (temp___do_typ_inv_245 Bool)) Bool (=> (or (= temp___is_init_242 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (in_range1 temp___expr_246)))
(declare-const a_x Float32)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const a_y Float32)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b_x Float32)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const b_y Float32)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const c_x Float32)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const c_y Float32)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const vec_ba_x Float32)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const vec_ba_y Float32)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const vec_bc_x Float32)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const vec_bc_y Float32)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const ba_dot_bc Float32)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const length_ba Float32)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const length_bc Float32)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(assert (= vec_ba_x (fp.sub RNE a_x b_x)))
(assert (= vec_ba_y (fp.sub RNE a_y b_y)))
(assert (= vec_bc_x (fp.sub RNE c_x b_x)))
(assert (= vec_bc_y (fp.sub RNE c_y b_y)))
(assert (= ba_dot_bc (fp.add RNE (fp.mul RNE vec_ba_x vec_bc_x) (fp.mul RNE vec_ba_y vec_bc_y))))
(assert (= length_ba (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.sub RNE b_x a_x) (fp.sub RNE b_x a_x)) (fp.mul RNE (fp.sub RNE b_y a_y) (fp.sub RNE b_y a_y))))))
(assert (= length_bc (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.sub RNE b_x c_x) (fp.sub RNE b_x c_x)) (fp.mul RNE (fp.sub RNE b_y c_y) (fp.sub RNE b_y c_y))))))
(declare-const res Float32)
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const o2 Float32)
(declare-const floating_point__angle_between__ba_dot_bc__assume Float32)
(declare-const o3 Float32)
(declare-const o4 Float32)
(declare-const o5 Float32)
(declare-const o6 Float32)
(declare-const floating_point__angle_between__length_ba__assume Float32)
(declare-const o7 Float32)
(assert (in_range1 a_x))
(assert (in_range1 a_y))
(assert (in_range1 b_x))
(assert (in_range1 b_y))
(assert (in_range1 c_x))
(assert (in_range1 c_y))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 res)))
(assert (= (fp.sub RNE a_x b_x) vec_ba_x))
(assert (fp.isFinite32 vec_ba_x))
(assert (= (fp.sub RNE a_y b_y) vec_ba_y))
(assert (fp.isFinite32 vec_ba_y))
(assert (= (fp.sub RNE c_x b_x) vec_bc_x))
(assert (fp.isFinite32 vec_bc_x))
(assert (= (fp.sub RNE c_y b_y) vec_bc_y))
(assert (fp.isFinite32 vec_bc_y))
(assert (and (= o (fp.mul RNE vec_ba_y vec_bc_y)) (fp.isFinite32 (fp.mul RNE vec_ba_y vec_bc_y))))
(assert (and (= o1 (fp.mul RNE vec_ba_x vec_bc_x)) (fp.isFinite32 (fp.mul RNE vec_ba_x vec_bc_x))))
(assert (= o2 (fp.add RNE o1 o)))
(assert (and (= floating_point__angle_between__ba_dot_bc__assume o2) (fp.isFinite32 o2)))
(assert (= floating_point__angle_between__ba_dot_bc__assume ba_dot_bc))
(assert (fp.isFinite32 ba_dot_bc))
(assert (and (= o3 (fp.mul RNE (fp.sub RNE b_y a_y) (fp.sub RNE b_y a_y))) (fp.isFinite32 (fp.mul RNE (fp.sub RNE b_y a_y) (fp.sub RNE b_y a_y)))))
(assert (and (= o4 (fp.mul RNE (fp.sub RNE b_x a_x) (fp.sub RNE b_x a_x))) (fp.isFinite32 (fp.mul RNE (fp.sub RNE b_x a_x) (fp.sub RNE b_x a_x)))))
(assert (= o5 (fp.add RNE o4 o3)))
(assert (and (= o6 o5) (fp.isFinite32 o5)))
(assert (= floating_point__angle_between__length_ba__assume (fp.sqrt RNE o6)))
(assert (= floating_point__angle_between__length_ba__assume length_ba))
(assert (fp.isFinite32 length_ba))
(assert (and (= o7 (fp.mul RNE (fp.sub RNE b_y c_y) (fp.sub RNE b_y c_y))) (fp.isFinite32 (fp.mul RNE (fp.sub RNE b_y c_y) (fp.sub RNE b_y c_y)))))
(assert (not (fp.isFinite32 (fp.mul RNE (fp.sub RNE b_x c_x) (fp.sub RNE b_x c_x)))))
(check-sat)
(exit)
