(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-fun is_int1 (Float32) Bool)
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun is_plus_infinity1 ((x Float64)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity1 ((x Float64)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero1 ((x Float64)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero1 ((x Float64)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int1 (RoundingMode Int) Float64)
(declare-fun to_int2 (RoundingMode Float64) Int)
(declare-const max_int1 Int)
(define-fun in_int_range1 ((i Int)) Bool (and (<= (- max_int1) i) (<= i max_int1)))
(define-fun in_safe_int_range1 ((i Int)) Bool (and (<= (- 9007199254740992) i) (<= i 9007199254740992)))
(define-fun same_sign1 ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign1 ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign1 ((z Float64) (x Float64) (y Float64)) Bool (and (=> (same_sign1 x y) (fp.isPositive z)) (=> (diff_sign1 x y) (fp.isNegative z))))
(define-fun same_sign_real1 ((x Float64) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-fun is_int2 (Float64) Bool)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 Float64)))))
(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int2 ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(define-fun dynamic_invariant ((temp___expr_51 Float32) (temp___is_init_48 Bool) (temp___skip_constant_49 Bool) (temp___do_toplevel_50 Bool)) Bool (=> (or (= temp___is_init_48 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_51)))
(declare-const x Float32)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const type_conversion__float_to_long_float__result Float64)
(declare-const result Float64)
(declare-const type_conversion__float_to_long_float__result1 Float64)
(declare-const type_conversion__float_to_long_float__result2 Float64)
(declare-const type_conversion__float_to_long_float__result3 Float64)
(declare-const type_conversion__float_to_long_float__result4 Float64)
(declare-const type_conversion__float_to_long_float__result5 Float64)
(declare-const result1 Float64)
(assert (fp.isFinite32 x))
(assert (and (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) x) (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111))))
(assert (= type_conversion__float_to_long_float__result1 type_conversion__float_to_long_float__result2))
(assert (= type_conversion__float_to_long_float__result3 type_conversion__float_to_long_float__result1))
(assert (= result type_conversion__float_to_long_float__result))
(assert (= type_conversion__float_to_long_float__result1 ((_ to_fp 11 53) RNE x)))
(assert (= (mk_t__ref1 type_conversion__float_to_long_float__result4) (mk_t__ref1 type_conversion__float_to_long_float__result2)))
(assert (= type_conversion__float_to_long_float__result5 type_conversion__float_to_long_float__result3))
(assert (= result1 type_conversion__float_to_long_float__result4))
(assert (not (fp.leq (fp.neg (fp #b0 #b10001111110 #b1111111111111111111111100000000000000000000000000000)) type_conversion__float_to_long_float__result4)))
(check-sat)
(exit)
