(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float64)
(declare-fun to_int1 (RoundingMode Float64) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i) (<= i 9007199254740992)))
(define-fun same_sign ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float64) (x Float64) (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float64) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float64)))))
(declare-sort tfloat_7B 0)
(declare-fun user_eq (tfloat_7B tfloat_7B) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float64) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float64)
(declare-const dummy tfloat_7B)
(declare-datatypes () ((tfloat_7B__ref (mk_tfloat_7B__ref (tfloat_7B__content tfloat_7B)))))
(define-fun tfloat_7B__ref___projection ((a tfloat_7B__ref)) tfloat_7B (tfloat_7B__content a))
(declare-sort float_7 0)
(declare-fun user_eq1 (float_7 float_7) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)
(declare-const dummy1 float_7)
(declare-datatypes () ((float_7__ref (mk_float_7__ref (float_7__content float_7)))))
(define-fun float_7__ref___projection ((a float_7__ref)) float_7 (float_7__content a))
(define-fun dynamic_invariant ((temp___expr_135 Float64) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (fp.isFinite64 temp___expr_135)))
(declare-const a Float64)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Float64)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const float_example__bounded_add__result Float64)
(declare-const o Float64)
(declare-const result Float64)
(declare-const float_example__bounded_add__result1 Float64)
(declare-const float_example__bounded_add__result2 Float64)
(declare-const float_example__bounded_add__result3 Float64)
(declare-const float_example__bounded_add__result4 Float64)
(declare-const float_example__bounded_add__result5 Float64)
(declare-const result1 Float64)
(assert (fp.isFinite64 a))
(assert (fp.isFinite64 b))
(assert (and (fp.lt a (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000)) (fp.lt b (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000))))
(assert (= float_example__bounded_add__result1 float_example__bounded_add__result2))
(assert (= float_example__bounded_add__result3 float_example__bounded_add__result1))
(assert (and (= o (fp.add RNE a b)) (fp.isFinite64 (fp.add RNE a b))))
(assert (= result float_example__bounded_add__result))
(assert (= float_example__bounded_add__result1 o))
(assert (= (mk_t__ref float_example__bounded_add__result4) (mk_t__ref float_example__bounded_add__result2)))
(assert (= float_example__bounded_add__result5 float_example__bounded_add__result3))
(assert (= result1 float_example__bounded_add__result4))
(assert (not (fp.lt float_example__bounded_add__result4 (fp #b0 #b10000000001 #b1100000000000000000000000000000000000000000000000000))))
(check-sat)
(exit)
