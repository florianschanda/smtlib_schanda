(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort float 0)
(declare-fun user_eq1 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-fun to_rep1 (float) Float32)
(declare-fun of_rep1 (Float32) float)
(assert (forall ((x float)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__depends_legal_2__dis_rec__d Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__depends_legal_2__dis_rec__d a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__depends_legal_2__dis_rec__a integer) (rec__depends_legal_2__dis_rec__b integer) (rec__depends_legal_2__dis_rec__x float) (rec__depends_legal_2__dis_rec__y float) (rec__depends_legal_2__dis_rec__z float)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) integer (rec__depends_legal_2__dis_rec__a a))
(define-fun us_split_fields_B__projection ((a us_split_fields)) integer (rec__depends_legal_2__dis_rec__b a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun depends_legal_2__dis_rec__a__pred ((a us_rep)) Bool (= (to_int2 (rec__depends_legal_2__dis_rec__d (us_split_discrs1 a))) 1))
(define-fun depends_legal_2__dis_rec__b__pred ((a us_rep)) Bool (= (to_int2 (rec__depends_legal_2__dis_rec__d (us_split_discrs1 a))) 1))
(define-fun depends_legal_2__dis_rec__x__pred ((a us_rep)) Bool (= (to_int2 (rec__depends_legal_2__dis_rec__d (us_split_discrs1 a))) 0))
(define-fun depends_legal_2__dis_rec__y__pred ((a us_rep)) Bool (= (to_int2 (rec__depends_legal_2__dis_rec__d (us_split_discrs1 a))) 0))
(define-fun depends_legal_2__dis_rec__z__pred ((a us_rep)) Bool (= (to_int2 (rec__depends_legal_2__dis_rec__d (us_split_discrs1 a))) 0))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (rec__depends_legal_2__dis_rec__d (us_split_discrs1 a)) (rec__depends_legal_2__dis_rec__d (us_split_discrs1 b))) (and (and (and (and (=> (depends_legal_2__dis_rec__a__pred a) (= (to_rep (rec__depends_legal_2__dis_rec__a (us_split_fields1 a))) (to_rep (rec__depends_legal_2__dis_rec__a (us_split_fields1 b))))) (=> (depends_legal_2__dis_rec__b__pred a) (= (to_rep (rec__depends_legal_2__dis_rec__b (us_split_fields1 a))) (to_rep (rec__depends_legal_2__dis_rec__b (us_split_fields1 b)))))) (=> (depends_legal_2__dis_rec__x__pred a) (= (to_rep1 (rec__depends_legal_2__dis_rec__x (us_split_fields1 a))) (to_rep1 (rec__depends_legal_2__dis_rec__x (us_split_fields1 b)))))) (=> (depends_legal_2__dis_rec__y__pred a) (= (to_rep1 (rec__depends_legal_2__dis_rec__y (us_split_fields1 a))) (to_rep1 (rec__depends_legal_2__dis_rec__y (us_split_fields1 b)))))) (=> (depends_legal_2__dis_rec__z__pred a) (= (to_rep1 (rec__depends_legal_2__dis_rec__z (us_split_fields1 a))) (to_rep1 (rec__depends_legal_2__dis_rec__z (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const depends_legal_2__dis_rec__d__first__bit Int)
(declare-const depends_legal_2__dis_rec__d__last__bit Int)
(declare-const depends_legal_2__dis_rec__d__position Int)
(assert (<= 0 depends_legal_2__dis_rec__d__first__bit))
(assert (< depends_legal_2__dis_rec__d__first__bit depends_legal_2__dis_rec__d__last__bit))
(assert (<= 0 depends_legal_2__dis_rec__d__position))
(declare-const depends_legal_2__dis_rec__a__first__bit Int)
(declare-const depends_legal_2__dis_rec__a__last__bit Int)
(declare-const depends_legal_2__dis_rec__a__position Int)
(assert (<= 0 depends_legal_2__dis_rec__a__first__bit))
(assert (< depends_legal_2__dis_rec__a__first__bit depends_legal_2__dis_rec__a__last__bit))
(assert (<= 0 depends_legal_2__dis_rec__a__position))
(declare-const depends_legal_2__dis_rec__b__first__bit Int)
(declare-const depends_legal_2__dis_rec__b__last__bit Int)
(declare-const depends_legal_2__dis_rec__b__position Int)
(assert (<= 0 depends_legal_2__dis_rec__b__first__bit))
(assert (< depends_legal_2__dis_rec__b__first__bit depends_legal_2__dis_rec__b__last__bit))
(assert (<= 0 depends_legal_2__dis_rec__b__position))
(declare-const depends_legal_2__dis_rec__x__first__bit Int)
(declare-const depends_legal_2__dis_rec__x__last__bit Int)
(declare-const depends_legal_2__dis_rec__x__position Int)
(assert (<= 0 depends_legal_2__dis_rec__x__first__bit))
(assert (< depends_legal_2__dis_rec__x__first__bit depends_legal_2__dis_rec__x__last__bit))
(assert (<= 0 depends_legal_2__dis_rec__x__position))
(declare-const depends_legal_2__dis_rec__y__first__bit Int)
(declare-const depends_legal_2__dis_rec__y__last__bit Int)
(declare-const depends_legal_2__dis_rec__y__position Int)
(assert (<= 0 depends_legal_2__dis_rec__y__first__bit))
(assert (< depends_legal_2__dis_rec__y__first__bit depends_legal_2__dis_rec__y__last__bit))
(assert (<= 0 depends_legal_2__dis_rec__y__position))
(declare-const depends_legal_2__dis_rec__z__first__bit Int)
(declare-const depends_legal_2__dis_rec__z__last__bit Int)
(declare-const depends_legal_2__dis_rec__z__position Int)
(assert (<= 0 depends_legal_2__dis_rec__z__first__bit))
(assert (< depends_legal_2__dis_rec__z__first__bit depends_legal_2__dis_rec__z__last__bit))
(assert (<= 0 depends_legal_2__dis_rec__z__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((dis_rec__ref (mk_dis_rec__ref (dis_rec__content us_rep)))))
(define-fun dis_rec__ref___projection ((a dis_rec__ref)) us_rep (dis_rec__content a))
(define-fun default_initial_assumption ((temp___expr_137 us_rep) (temp___skip_top_level_138 Bool)) Bool (and (= (attr__constrained temp___expr_137) false) (= (rec__depends_legal_2__dis_rec__d (us_split_discrs1 temp___expr_137)) (of_int1 1))))
(declare-const rec1__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const par1__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const par2 us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const r4b Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun in_range2 ((rec__depends_legal_2__dis_rec__d1 Bool) (a us_rep)) Bool (= rec__depends_legal_2__dis_rec__d1 (rec__depends_legal_2__dis_rec__d (us_split_discrs1 a))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const depends_legal_2__dis_rec__d__first__bit1 Int)
(declare-const depends_legal_2__dis_rec__d__last__bit1 Int)
(declare-const depends_legal_2__dis_rec__d__position1 Int)
(assert (<= 0 depends_legal_2__dis_rec__d__first__bit1))
(assert (< depends_legal_2__dis_rec__d__first__bit1 depends_legal_2__dis_rec__d__last__bit1))
(assert (<= 0 depends_legal_2__dis_rec__d__position1))
(declare-const depends_legal_2__dis_rec__x__first__bit1 Int)
(declare-const depends_legal_2__dis_rec__x__last__bit1 Int)
(declare-const depends_legal_2__dis_rec__x__position1 Int)
(assert (<= 0 depends_legal_2__dis_rec__x__first__bit1))
(assert (< depends_legal_2__dis_rec__x__first__bit1 depends_legal_2__dis_rec__x__last__bit1))
(assert (<= 0 depends_legal_2__dis_rec__x__position1))
(declare-const depends_legal_2__dis_rec__y__first__bit1 Int)
(declare-const depends_legal_2__dis_rec__y__last__bit1 Int)
(declare-const depends_legal_2__dis_rec__y__position1 Int)
(assert (<= 0 depends_legal_2__dis_rec__y__first__bit1))
(assert (< depends_legal_2__dis_rec__y__first__bit1 depends_legal_2__dis_rec__y__last__bit1))
(assert (<= 0 depends_legal_2__dis_rec__y__position1))
(declare-const depends_legal_2__dis_rec__z__first__bit1 Int)
(declare-const depends_legal_2__dis_rec__z__last__bit1 Int)
(declare-const depends_legal_2__dis_rec__z__position1 Int)
(assert (<= 0 depends_legal_2__dis_rec__z__first__bit1))
(assert (< depends_legal_2__dis_rec__z__first__bit1 depends_legal_2__dis_rec__z__last__bit1))
(assert (<= 0 depends_legal_2__dis_rec__z__position1))
(declare-const depends_legal_2__dis_rec__a__first__bit1 Int)
(declare-const depends_legal_2__dis_rec__a__last__bit1 Int)
(declare-const depends_legal_2__dis_rec__a__position1 Int)
(assert (<= 0 depends_legal_2__dis_rec__a__first__bit1))
(assert (< depends_legal_2__dis_rec__a__first__bit1 depends_legal_2__dis_rec__a__last__bit1))
(assert (<= 0 depends_legal_2__dis_rec__a__position1))
(declare-const depends_legal_2__dis_rec__b__first__bit1 Int)
(declare-const depends_legal_2__dis_rec__b__last__bit1 Int)
(declare-const depends_legal_2__dis_rec__b__position1 Int)
(assert (<= 0 depends_legal_2__dis_rec__b__first__bit1))
(assert (< depends_legal_2__dis_rec__b__first__bit1 depends_legal_2__dis_rec__b__last__bit1))
(assert (<= 0 depends_legal_2__dis_rec__b__position1))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content us_rep)))))
(define-fun t5b__ref___projection ((a t5b__ref)) us_rep (t5b__content a))
(declare-const r7b Bool)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun in_range3 ((rec__depends_legal_2__dis_rec__d1 Bool) (a us_rep)) Bool (= rec__depends_legal_2__dis_rec__d1 (rec__depends_legal_2__dis_rec__d (us_split_discrs1 a))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const depends_legal_2__dis_rec__d__first__bit2 Int)
(declare-const depends_legal_2__dis_rec__d__last__bit2 Int)
(declare-const depends_legal_2__dis_rec__d__position2 Int)
(assert (<= 0 depends_legal_2__dis_rec__d__first__bit2))
(assert (< depends_legal_2__dis_rec__d__first__bit2 depends_legal_2__dis_rec__d__last__bit2))
(assert (<= 0 depends_legal_2__dis_rec__d__position2))
(declare-const depends_legal_2__dis_rec__a__first__bit2 Int)
(declare-const depends_legal_2__dis_rec__a__last__bit2 Int)
(declare-const depends_legal_2__dis_rec__a__position2 Int)
(assert (<= 0 depends_legal_2__dis_rec__a__first__bit2))
(assert (< depends_legal_2__dis_rec__a__first__bit2 depends_legal_2__dis_rec__a__last__bit2))
(assert (<= 0 depends_legal_2__dis_rec__a__position2))
(declare-const depends_legal_2__dis_rec__b__first__bit2 Int)
(declare-const depends_legal_2__dis_rec__b__last__bit2 Int)
(declare-const depends_legal_2__dis_rec__b__position2 Int)
(assert (<= 0 depends_legal_2__dis_rec__b__first__bit2))
(assert (< depends_legal_2__dis_rec__b__first__bit2 depends_legal_2__dis_rec__b__last__bit2))
(assert (<= 0 depends_legal_2__dis_rec__b__position2))
(declare-const depends_legal_2__dis_rec__x__first__bit2 Int)
(declare-const depends_legal_2__dis_rec__x__last__bit2 Int)
(declare-const depends_legal_2__dis_rec__x__position2 Int)
(assert (<= 0 depends_legal_2__dis_rec__x__first__bit2))
(assert (< depends_legal_2__dis_rec__x__first__bit2 depends_legal_2__dis_rec__x__last__bit2))
(assert (<= 0 depends_legal_2__dis_rec__x__position2))
(declare-const depends_legal_2__dis_rec__y__first__bit2 Int)
(declare-const depends_legal_2__dis_rec__y__last__bit2 Int)
(declare-const depends_legal_2__dis_rec__y__position2 Int)
(assert (<= 0 depends_legal_2__dis_rec__y__first__bit2))
(assert (< depends_legal_2__dis_rec__y__first__bit2 depends_legal_2__dis_rec__y__last__bit2))
(assert (<= 0 depends_legal_2__dis_rec__y__position2))
(declare-const depends_legal_2__dis_rec__z__first__bit2 Int)
(declare-const depends_legal_2__dis_rec__z__last__bit2 Int)
(declare-const depends_legal_2__dis_rec__z__position2 Int)
(assert (<= 0 depends_legal_2__dis_rec__z__first__bit2))
(assert (< depends_legal_2__dis_rec__z__first__bit2 depends_legal_2__dis_rec__z__last__bit2))
(assert (<= 0 depends_legal_2__dis_rec__z__position2))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content us_rep)))))
(define-fun t8b__ref___projection ((a t8b__ref)) us_rep (t8b__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_51 Float32) (temp___is_init_48 Bool) (temp___skip_constant_49 Bool) (temp___do_toplevel_50 Bool)) Bool (=> (or (= temp___is_init_48 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_51)))
(declare-const rec1__split_discrs Bool)
(declare-const par1__split_fields integer)
(declare-const par1__split_fields1 integer)
(declare-const par1__split_fields2 float)
(declare-const par1__split_fields3 float)
(declare-const par1__split_fields4 float)
(declare-const par1__split_discrs Bool)
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const o4 float)
(declare-const o5 float)
(declare-const o6 float)
(declare-const temp___164 Bool)
(declare-const temp___1641 integer)
(declare-const temp___1642 integer)
(declare-const temp___1643 float)
(declare-const temp___1644 float)
(declare-const temp___1645 float)
(declare-const temp___1646 Bool)
(declare-const usq_ Bool)
(declare-const usq_1 integer)
(declare-const usq_2 integer)
(declare-const usq_3 float)
(declare-const usq_4 float)
(declare-const usq_5 float)
(declare-const usq_6 Bool)
(declare-const temp___166 Bool)
(declare-const temp___1661 integer)
(declare-const temp___1662 integer)
(declare-const temp___1663 float)
(declare-const temp___1664 float)
(declare-const temp___1665 float)
(declare-const temp___1666 Bool)
(declare-const o7 float)
(declare-const o8 float)
(declare-const o9 float)
(declare-const o10 integer)
(declare-const o11 integer)
(declare-const o12 float)
(declare-const o13 float)
(declare-const o14 float)
(declare-const temp___161 Bool)
(declare-const temp___1611 integer)
(declare-const temp___1612 integer)
(declare-const temp___1613 float)
(declare-const temp___1614 float)
(declare-const temp___1615 float)
(declare-const temp___1616 Bool)
(declare-const usq_7 us_rep)
(declare-const temp___163 us_rep)
(declare-const result us_split_fields__ref)
(declare-const par1__split_fields5 us_split_fields)
(declare-const result1 us_split_discrs__ref)
(declare-const par1__split_discrs1 us_split_discrs)
(declare-const result2 us_split_fields__ref)
(declare-const par1__split_fields6 us_split_fields)
(declare-const result3 us_split_discrs__ref)
(declare-const par1__split_discrs2 us_split_discrs)
(assert (= rec1__attr__constrained false))
(assert (not (= par1__split_discrs true)))
(assert (= par1__split_discrs r7b))
(assert (= (to_rep1 o7) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (to_rep1 o8) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (to_rep1 o9) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= dummy o10))
(assert (= dummy o11))
(assert (= o9 o12))
(assert (= o8 o13))
(assert (= o7 o14))
(assert (= (of_int1 0) temp___161))
(assert (= temp___1611 o10))
(assert (= temp___1612 o11))
(assert (= temp___1613 o12))
(assert (= temp___1614 o13))
(assert (= temp___1615 o14))
(assert (= true temp___1616))
(assert (= par1__attr__constrained true))
(assert (not (= temp___161 par1__split_discrs)))
(check-sat)
(exit)
