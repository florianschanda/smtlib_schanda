(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((real_of_int(truncate(x)) <= x) and
  (x <  real_of_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((real_of_int((truncate(x) - 1)) <  x) and
  (x <= real_of_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= real_of_int(truncate(x))) and
  (real_of_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(real_of_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((real_of_int(floor(x)) <= x) and
  (x <  real_of_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((real_of_int((ceil(x) - 1)) <  x) and
  (x <= real_of_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t

logic add : fpa_rounding_mode, t, t -> t

logic sub : fpa_rounding_mode, t, t -> t

logic mul : fpa_rounding_mode, t, t -> t

logic div : fpa_rounding_mode, t, t -> t

logic abs : t -> t

logic neg : t -> t

logic fma : fpa_rounding_mode, t, t, t -> t

logic sqrt : fpa_rounding_mode, t -> t

logic roundToIntegral : fpa_rounding_mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : fpa_rounding_mode, int -> t

logic to_int : fpa_rounding_mode, t -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = real_of_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) ->
  in_range(float32(m,x))))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom eq_special :
  (forall x:t. forall y:t. (eq(x, y) -> (is_not_nan(x) and (is_not_nan(y) and
  ((tqtisFinite(x) and tqtisFinite(y)) or (is_infinite(x) and
  (is_infinite(y) and same_sign(x, y))))))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom le_special :
  (forall x:t. forall y:t [le(x, y)]. (le(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and is_not_nan(y)) or
  (is_not_nan(x) and is_plus_infinity(y))))))

axiom lt_special :
  (forall x:t. forall y:t [lt(x, y)]. (lt(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and (is_not_nan(y) and
  (not is_minus_infinity(y)))) or (is_not_nan(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and
  ((m = Down) -> ((is_positive(x) -> (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127))) and ((not is_positive(x)) ->
  is_infinite(x))))) and ((m = ToZero) -> ((is_positive(x) ->
  (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) -> (tqtisFinite(add(m, x,
  y)) and (tqtreal(add(m, x, y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) -> (tqtisFinite(sub(m, x,
  y)) and (tqtreal(sub(m, x, y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) -> (tqtisFinite(mul(m, x,
  y)) and (tqtreal(mul(m, x, y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x,
  y)) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> (tqtisFinite(abs(x)) and
  ((tqtreal(abs(x)) = abs_real(tqtreal(x))) and is_positive(abs(x))))))

axiom abs_finite_rev :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) -> (tqtisFinite(x) and
  (tqtreal(abs(x)) = abs_real(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(x) -> (tqtisFinite(y) -> (tqtisFinite(z) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) ->
  (tqtisFinite(fma(m, x, y, z)) and (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and
  (tqtisFinite(y) and tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and
  (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

axiom sqrt_finite :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(x) ->
  ((0.0 <= tqtreal(x)) -> (tqtisFinite(sqrt(m, x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom add_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(add(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(add(m, x, y)) and
  same_sign(add(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and diff_sign(x, y))) ->
  is_nan(add(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) + tqtreal(y))))))) ->
  (same_sign_real(add(m, x, y), (tqtreal(x) + tqtreal(y))) and
  overflow_value(m, add(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((same_sign(x, y) -> same_sign(add(m, x, y), x)) and
  ((not same_sign(x, y)) -> sign_zero_result(m, add(m, x, y))))))))))))

axiom sub_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(sub(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(sub(m, x, y)) and
  diff_sign(sub(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  is_nan(sub(m, x, y))) and (((is_infinite(x) and (is_infinite(y) and
  diff_sign(x, y))) -> (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y),
  x))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) - tqtreal(y))))))) ->
  (same_sign_real(sub(m, x, y), (tqtreal(x) - tqtreal(y))) and
  overflow_value(m, sub(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((diff_sign(x, y) -> same_sign(sub(m, x, y), x)) and
  ((not diff_sign(x, y)) -> sign_zero_result(m, sub(m, x, y))))))))))))

axiom mul_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(mul(m, x, y))) and (((is_zero(x) and
  is_infinite(y)) -> is_nan(mul(m, x, y))) and (((tqtisFinite(x) and
  (is_infinite(y) and (not is_zero(x)))) -> is_infinite(mul(m, x, y))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(mul(m, x, y))) and
  (((is_infinite(x) and (tqtisFinite(y) and (not is_zero(y)))) ->
  is_infinite(mul(m, x, y))) and (((is_infinite(x) and is_infinite(y)) ->
  is_infinite(mul(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) * tqtreal(y))))))) -> overflow_value(m,
  mul(m, x, y))) and ((not is_nan(mul(m, x, y))) -> product_sign(mul(m, x,
  y), x, y))))))))))

axiom div_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> is_zero(div(m, x, y))) and
  (((is_infinite(x) and tqtisFinite(y)) -> is_infinite(div(m, x, y))) and
  (((is_infinite(x) and is_infinite(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  (not in_range(float32(m,(tqtreal(x) / tqtreal(y)))))))) ->
  overflow_value(m, div(m, x, y))) and (((tqtisFinite(x) and (is_zero(y) and
  (not is_zero(x)))) -> is_infinite(div(m, x, y))) and (((is_zero(x) and
  is_zero(y)) -> is_nan(div(m, x, y))) and ((not is_nan(div(m, x, y))) ->
  product_sign(div(m, x, y), x, y))))))))))

axiom neg_special :
  (forall x:t [neg(x)]. ((is_nan(x) -> is_nan(neg(x))) and
  ((is_infinite(x) -> is_infinite(neg(x))) and ((not is_nan(x)) ->
  diff_sign(x, neg(x))))))

axiom abs_special :
  (forall x:t [abs(x)]. ((is_nan(x) -> is_nan(abs(x))) and
  ((is_infinite(x) -> is_infinite(abs(x))) and ((not is_nan(x)) ->
  is_positive(abs(x))))))

axiom fma_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (((is_nan(x) or (is_nan(y) or is_nan(z))) -> is_nan(fma(m, x, y,
  z))) and (((is_zero(x) and is_infinite(y)) -> is_nan(fma(m, x, y, z))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(fma(m, x, y, z))) and
  (((tqtisFinite(x) and ((not is_zero(x)) and (is_infinite(y) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((tqtisFinite(x) and ((not is_zero(x)) and
  (is_infinite(y) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((is_infinite(x) and (tqtisFinite(y) and
  ((not is_zero(y)) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (is_infinite(y) and tqtisFinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and product_sign(fma(m, x, y, z), x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and is_infinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  (((is_infinite(x) and (is_infinite(y) and is_infinite(z))) ->
  ((product_sign(z, x, y) -> (is_infinite(fma(m, x, y, z)) and
  same_sign(fma(m, x, y, z), z))) and ((not product_sign(z, x, y)) ->
  is_nan(fma(m, x, y, z))))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (tqtisFinite(z) and
  (not in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))) ->
  (same_sign_real(fma(m, x, y, z),
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) and overflow_value(m, fma(m, x,
  y, z)))) and ((tqtisFinite(x) and (tqtisFinite(y) and tqtisFinite(z))) ->
  ((product_sign(z, x, y) -> same_sign(fma(m, x, y, z), z)) and
  ((not product_sign(z, x, y)) ->
  ((((tqtreal(x) * tqtreal(y)) + tqtreal(z)) = 0.0) -> (((m = Down) ->
  is_negative(fma(m, x, y, z))) and ((not (m = Down)) -> is_positive(fma(m,
  x, y, z))))))))))))))))))))

axiom sqrt_special :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. ((is_nan(x) ->
  is_nan(sqrt(m, x))) and ((is_plus_infinity(x) -> is_plus_infinity(sqrt(m,
  x))) and ((is_minus_infinity(x) -> is_nan(sqrt(m, x))) and
  (((tqtisFinite(x) and (tqtreal(x) <  0.0)) -> is_nan(sqrt(m, x))) and
  ((is_zero(x) -> same_sign(sqrt(m, x), x)) and ((tqtisFinite(x) and
  (0.0 <  tqtreal(x))) -> is_positive(sqrt(m, x)))))))))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t. (tqtisFinite(i) -> ((le(i,
  neg(of_int(m, 16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Up, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Down, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t. (to_int(m, x) = to_int(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int(m, of_int(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) -> (to_int(m,
  neg(x)) = (-to_int(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (in_range(float32(NearestTiesToEven,x)) ->
  ((((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x)) and
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150)))))

axiom round_bound :
  (forall m:fpa_rounding_mode. forall x:real [float32(m,x)].
  (in_range(float32(m,x)) ->
  ((((x - (0x1.0p-23 * abs_real(x))) - 0x1.0p-149) <= float32(m,x)) and
  (float32(m,x) <= ((x + (0x1.0p-23 * abs_real(x))) + 0x1.0p-149)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(NearestTiesToAway, 1))

type t__ref = { t__content : t
}

type float1

logic bool_eq1 : t, t -> bool

axiom bool_eq_def1 :
  (forall x:t. forall y:t [bool_eq1(x, y)]. ((eq(x, y) -> (bool_eq1(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq1(x, y) = false))))

logic user_eq : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> t

logic dummy : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

logic to_rep : float1 -> t

logic of_rep : t -> float1

axiom inversion_axiom :
  (forall x:float1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:float1 [to_rep(x)]. tqtisFinite(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (tqtisFinite(x) ->
  (to_rep(of_rep(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> float1

logic set : map, int, int, float1 -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:float1 [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:float1 [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m, i2,
  j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq2 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def2 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq2(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_133:int. forall temp___idx_134:int.
  (((((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)) and
  ((a__first_2 <= temp___idx_134) and (temp___idx_134 <= a__last_2))) and
  (to_rep(get(a, temp___idx_133, temp___idx_134)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_133),
  ((b__first_2 - a__first_2) + temp___idx_134))))) or
  (not (((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)) and
  ((a__first_2 <= temp___idx_134) and (temp___idx_134 <= a__last_2))))))) ->
  (bool_eq2(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_133:int. forall temp___idx_134:int.
  ((((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)) and
  ((a__first_2 <= temp___idx_134) and (temp___idx_134 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_133, temp___idx_134)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_133),
  ((b__first_2 - a__first_2) + temp___idx_134)))))))) -> (bool_eq2(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_133:int. forall temp___idx_134:int.
  ((((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)) and
  ((a__first_2 <= temp___idx_134) and (temp___idx_134 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_133, temp___idx_134)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_133),
  ((b__first_2 - a__first_2) + temp___idx_134))))))))))

type tbxb_matrixP1

predicate in_range1(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tbxb_matrixP1, tbxb_matrixP1 -> bool

logic dummy1 : tbxb_matrixP1

type tbxb_matrixP1__ref = { tbxb_matrixP1__content : tbxb_matrixP1
}

function tbxb_matrixP1__ref___projection(a: tbxb_matrixP1__ref) : tbxb_matrixP1 =
  (a).tbxb_matrixP1__content

type tbxb_matrixP2

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tbxb_matrixP2, tbxb_matrixP2 -> bool

logic dummy2 : tbxb_matrixP2

type tbxb_matrixP2__ref = { tbxb_matrixP2__content : tbxb_matrixP2
}

function tbxb_matrixP2__ref___projection(a: tbxb_matrixP2__ref) : tbxb_matrixP2 =
  (a).tbxb_matrixP2__content

logic manipulate : map, map -> map

logic manipulate__function_guard : map, map, map -> prop

axiom manipulate__post_axiom : true

type tbxb_matrixP11

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tbxb_matrixP11, tbxb_matrixP11 -> bool

logic dummy3 : tbxb_matrixP11

type tbxb_matrixP1__ref1 = { tbxb_matrixP1__content1 : tbxb_matrixP11
}

function tbxb_matrixP1__ref___2__projection(a: tbxb_matrixP1__ref1) : tbxb_matrixP11 =
  (a).tbxb_matrixP1__content1

type tbxb_matrixP21

predicate in_range4(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tbxb_matrixP21, tbxb_matrixP21 -> bool

logic dummy4 : tbxb_matrixP21

type tbxb_matrixP2__ref1 = { tbxb_matrixP2__content1 : tbxb_matrixP21
}

function tbxb_matrixP2__ref___2__projection(a: tbxb_matrixP2__ref1) : tbxb_matrixP21 =
  (a).tbxb_matrixP2__content1

type integer

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range5(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range5(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range5(f) -> (in_range5(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range5(low) and (in_range5(high) and ((low <= high) ->
  (in_range5(low) and in_range5(high)))))

type t2

logic first1 : t2 -> integer

logic last1 : t2 -> integer

logic mk1 : int, int -> t2

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range5(f) -> (in_range5(l) ->
  ((to_rep1(first1(mk1(f, l))) = f) and (to_rep1(last1(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range5(low) and (in_range5(high) and ((low <= high) ->
  (in_range5(low) and in_range5(high)))))

type us_t = { elts : map; rt : t1; rt_2 : t2
}

function to_array(a: us_t) : map = (a).elts

function of_array(a: map, f: int, l: int, f2: int, l2: int) : us_t = { elts =
  a; rt = mk(f, l); rt_2 = mk1(f2, l2) }

function first2(a: us_t) : int = to_rep1(first((a).rt))

function last2(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first2(a) <= last2(a)) ->
  (length(a) = ((last2(a) - first2(a)) + 1))) and
  ((not (first2(a) <= last2(a))) -> (length(a) = 0))))

function first_2(a: us_t) : int = to_rep1(first1((a).rt_2))

function last_2(a: us_t) : int = to_rep1(last1((a).rt_2))

logic length_2 : us_t -> int

axiom length_2_def :
  (forall a:us_t [length_2(a)]. (((first_2(a) <= last_2(a)) ->
  (length_2(a) = ((last_2(a) - first_2(a)) + 1))) and
  ((not (first_2(a) <= last_2(a))) -> (length_2(a) = 0))))

predicate dynamic_property2(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property(range_first1, range_last1, f1, l1) and
  dynamic_property1(range_first2, range_last2, f2, l2))

logic value__size : int

logic object__size : map -> int

logic value__component__size : int

logic object__component__size : map -> int

logic value__alignment : int

logic object__alignment : map -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:map. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:map. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom : (forall a:map. (0 <= object__alignment(a)))

function bool_eq9(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), to_rep1(first1((x).rt_2)),
  to_rep1(last1((x).rt_2)), (y).elts, to_rep1(first((y).rt)),
  to_rep1(last((y).rt)), to_rep1(first1((y).rt_2)), to_rep1(last1((y).rt_2)))

logic user_eq6 : us_t, us_t -> bool

logic dummy6 : map

logic dummy7 : t1

logic dummy8 : t2

type real_matrix__ref = { real_matrix__content : us_t
}

function real_matrix__ref___2__projection(a: real_matrix__ref) : us_t =
  (a).real_matrix__content

logic transpose : us_t -> us_t

logic transpose__function_guard : us_t, us_t -> prop

logic omultiply__4 : us_t, us_t -> us_t

logic omultiply__4__function_guard : us_t, us_t, us_t -> prop

type taxa_matrixP1

predicate in_range6(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : taxa_matrixP1, taxa_matrixP1 -> bool

logic dummy9 : taxa_matrixP1

type taxa_matrixP1__ref = { taxa_matrixP1__content : taxa_matrixP1
}

function taxa_matrixP1__ref___2__projection(a: taxa_matrixP1__ref) : taxa_matrixP1 =
  (a).taxa_matrixP1__content

type taxa_matrixP2

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : taxa_matrixP2, taxa_matrixP2 -> bool

logic dummy10 : taxa_matrixP2

type taxa_matrixP2__ref = { taxa_matrixP2__content : taxa_matrixP2
}

function taxa_matrixP2__ref___2__projection(a: taxa_matrixP2__ref) : taxa_matrixP2 =
  (a).taxa_matrixP2__content

type taxb_matrixP1

predicate in_range8(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : taxb_matrixP1, taxb_matrixP1 -> bool

logic dummy11 : taxb_matrixP1

type taxb_matrixP1__ref = { taxb_matrixP1__content : taxb_matrixP1
}

function taxb_matrixP1__ref___2__projection(a: taxb_matrixP1__ref) : taxb_matrixP1 =
  (a).taxb_matrixP1__content

type taxb_matrixP2

predicate in_range9(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : taxb_matrixP2, taxb_matrixP2 -> bool

logic dummy12 : taxb_matrixP2

type taxb_matrixP2__ref = { taxb_matrixP2__content : taxb_matrixP2
}

function taxb_matrixP2__ref___2__projection(a: taxb_matrixP2__ref) : taxb_matrixP2 =
  (a).taxb_matrixP2__content

logic manipulate1 : map, map -> map

logic manipulate__function_guard1 : map, map, map -> prop

axiom manipulate__post_axiom1 : true

axiom manipulate__def_axiom :
  (forall original:map. forall map1:map [manipulate1(original, map1)].
  (manipulate1(original, map1) = slide((omultiply__4(omultiply__4(transpose({
  elts = map1; rt = mk(1, 3); rt_2 = mk1(1, 2) }), { elts = original; rt =
  mk(1, 3); rt_2 = mk1(1, 3) }), { elts = map1; rt = mk(1, 3); rt_2 = mk1(1,
  2) })).elts, to_rep1(first1((omultiply__4(omultiply__4(transpose({ elts =
  map1; rt = mk(1, 3); rt_2 = mk1(1, 2) }), { elts = original; rt = mk(1, 3);
  rt_2 = mk1(1, 3) }), { elts = map1; rt = mk(1, 3); rt_2 = mk1(1, 2)
  })).rt_2)), 1, to_rep1(first1((omultiply__4(omultiply__4(transpose({ elts =
  map1; rt = mk(1, 3); rt_2 = mk1(1, 2) }), { elts = original; rt = mk(1, 3);
  rt_2 = mk1(1, 3) }), { elts = map1; rt = mk(1, 3); rt_2 = mk1(1, 2)
  })).rt_2)), 1)))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type t21b

predicate in_range10(x: int) = (((- 2147483648) <= x) and
  (x <= (- 2147483647)))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq11 : t21b, t21b -> bool

logic dummy13 : t21b

type t21b__ref = { t21b__content : t21b
}

function t21b__ref___projection(a: t21b__ref) : t21b = (a).t21b__content

type t22b

predicate in_range11(x: int) = (((- 2147483648) <= x) and
  (x <= (- 2147483647)))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq12 : t22b, t22b -> bool

logic dummy14 : t22b

type t22b__ref = { t22b__content : t22b
}

function t22b__ref___projection(a: t22b__ref) : t22b = (a).t22b__content

type t24b

predicate in_range12(x: int) = (((- 2147483648) <= x) and
  (x <= (- 2147483647)))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq13 : t24b, t24b -> bool

logic dummy15 : t24b

type t24b__ref = { t24b__content : t24b
}

function t24b__ref___projection(a: t24b__ref) : t24b = (a).t24b__content

type t25b

predicate in_range13(x: int) = (((- 2147483648) <= x) and
  (x <= (- 2147483647)))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq14 : t25b, t25b -> bool

logic dummy16 : t25b

type t25b__ref = { t25b__content : t25b
}

function t25b__ref___projection(a: t25b__ref) : t25b = (a).t25b__content

logic main_test__mat_in__aggregate_def : t, t, t, t, t, t, t, t, t -> map

axiom def_axiom :
  (forall temp___1760:t. forall temp___1761:t. forall temp___1762:t.
  forall temp___1763:t. forall temp___1764:t. forall temp___1765:t.
  forall temp___1766:t. forall temp___1767:t. forall temp___1768:t.
  (((((get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 1, 1) = of_rep(temp___1760)) and
  (get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 1, 2) = of_rep(temp___1761))) and
  (get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 1, 3) = of_rep(temp___1762))) and
  (((get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 2, 1) = of_rep(temp___1763)) and
  (get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 2, 2) = of_rep(temp___1764))) and
  (get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 2, 3) = of_rep(temp___1765)))) and
  (((get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 3, 1) = of_rep(temp___1766)) and
  (get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 3, 2) = of_rep(temp___1767))) and
  (get(main_test__mat_in__aggregate_def(temp___1760, temp___1761,
  temp___1762, temp___1763, temp___1764, temp___1765, temp___1766,
  temp___1767, temp___1768), 3, 3) = of_rep(temp___1768)))))

logic main_test__mat_map__aggregate_def : t, t, t, t, t, t -> map

axiom def_axiom1 :
  (forall temp___1772:t. forall temp___1773:t. forall temp___1774:t.
  forall temp___1775:t. forall temp___1776:t. forall temp___1777:t.
  ((((get(main_test__mat_map__aggregate_def(temp___1772, temp___1773,
  temp___1774, temp___1775, temp___1776, temp___1777), 1,
  1) = of_rep(temp___1772)) and
  (get(main_test__mat_map__aggregate_def(temp___1772, temp___1773,
  temp___1774, temp___1775, temp___1776, temp___1777), 1,
  2) = of_rep(temp___1773))) and
  ((get(main_test__mat_map__aggregate_def(temp___1772, temp___1773,
  temp___1774, temp___1775, temp___1776, temp___1777), 2,
  1) = of_rep(temp___1774)) and
  (get(main_test__mat_map__aggregate_def(temp___1772, temp___1773,
  temp___1774, temp___1775, temp___1776, temp___1777), 2,
  2) = of_rep(temp___1775)))) and
  ((get(main_test__mat_map__aggregate_def(temp___1772, temp___1773,
  temp___1774, temp___1775, temp___1776, temp___1777), 3,
  1) = of_rep(temp___1776)) and
  (get(main_test__mat_map__aggregate_def(temp___1772, temp___1773,
  temp___1774, temp___1775, temp___1776, temp___1777), 3,
  2) = of_rep(temp___1777)))))

logic main_test__mat_out__aggregate_def : t -> map

axiom def_axiom2 :
  (forall temp___1781:t.
  (forall temp___1782:int. forall temp___1783:int.
  (get(main_test__mat_out__aggregate_def(temp___1781), temp___1782,
  temp___1783) = of_rep(temp___1781))))

logic main_test__mat_in2__aggregate_def : t, t, t, t, t, t, t, t, t -> map

axiom def_axiom3 :
  (forall temp___1785:t. forall temp___1786:t. forall temp___1787:t.
  forall temp___1788:t. forall temp___1789:t. forall temp___1790:t.
  forall temp___1791:t. forall temp___1792:t. forall temp___1793:t.
  (((((get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 1, 1) = of_rep(temp___1785)) and
  (get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 1, 2) = of_rep(temp___1786))) and
  (get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 1, 3) = of_rep(temp___1787))) and
  (((get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 2, 1) = of_rep(temp___1788)) and
  (get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 2, 2) = of_rep(temp___1789))) and
  (get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 2, 3) = of_rep(temp___1790)))) and
  (((get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 3, 1) = of_rep(temp___1791)) and
  (get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 3, 2) = of_rep(temp___1792))) and
  (get(main_test__mat_in2__aggregate_def(temp___1785, temp___1786,
  temp___1787, temp___1788, temp___1789, temp___1790, temp___1791,
  temp___1792, temp___1793), 3, 3) = of_rep(temp___1793)))))

logic main_test__mat_map2__aggregate_def : t, t, t, t, t, t -> map

axiom def_axiom4 :
  (forall temp___1797:t. forall temp___1798:t. forall temp___1799:t.
  forall temp___1800:t. forall temp___1801:t. forall temp___1802:t.
  ((((get(main_test__mat_map2__aggregate_def(temp___1797, temp___1798,
  temp___1799, temp___1800, temp___1801, temp___1802), 1,
  1) = of_rep(temp___1797)) and
  (get(main_test__mat_map2__aggregate_def(temp___1797, temp___1798,
  temp___1799, temp___1800, temp___1801, temp___1802), 1,
  2) = of_rep(temp___1798))) and
  ((get(main_test__mat_map2__aggregate_def(temp___1797, temp___1798,
  temp___1799, temp___1800, temp___1801, temp___1802), 2,
  1) = of_rep(temp___1799)) and
  (get(main_test__mat_map2__aggregate_def(temp___1797, temp___1798,
  temp___1799, temp___1800, temp___1801, temp___1802), 2,
  2) = of_rep(temp___1800)))) and
  ((get(main_test__mat_map2__aggregate_def(temp___1797, temp___1798,
  temp___1799, temp___1800, temp___1801, temp___1802), 3,
  1) = of_rep(temp___1801)) and
  (get(main_test__mat_map2__aggregate_def(temp___1797, temp___1798,
  temp___1799, temp___1800, temp___1801, temp___1802), 3,
  2) = of_rep(temp___1802)))))

logic main_test__mat_out2__aggregate_def : t -> map

axiom def_axiom5 :
  (forall temp___1806:t.
  (forall temp___1807:int. forall temp___1808:int.
  (get(main_test__mat_out2__aggregate_def(temp___1806), temp___1807,
  temp___1808) = of_rep(temp___1806))))

logic temp___1809 : t, t, t, t -> map

axiom def_axiom6 :
  (forall temp___1811:t. forall temp___1812:t. forall temp___1813:t.
  forall temp___1814:t. (((get(temp___1809(temp___1811, temp___1812,
  temp___1813, temp___1814), (- 2147483648),
  (- 2147483648)) = of_rep(temp___1811)) and (get(temp___1809(temp___1811,
  temp___1812, temp___1813, temp___1814), (- 2147483648),
  (- 2147483647)) = of_rep(temp___1812))) and ((get(temp___1809(temp___1811,
  temp___1812, temp___1813, temp___1814), (- 2147483647),
  (- 2147483648)) = of_rep(temp___1813)) and (get(temp___1809(temp___1811,
  temp___1812, temp___1813, temp___1814), (- 2147483647),
  (- 2147483647)) = of_rep(temp___1814)))))

logic temp___1819 : t, t, t, t -> map

axiom def_axiom7 :
  (forall temp___1821:t. forall temp___1822:t. forall temp___1823:t.
  forall temp___1824:t. (((get(temp___1819(temp___1821, temp___1822,
  temp___1823, temp___1824), (- 2147483648),
  (- 2147483648)) = of_rep(temp___1821)) and (get(temp___1819(temp___1821,
  temp___1822, temp___1823, temp___1824), (- 2147483648),
  (- 2147483647)) = of_rep(temp___1822))) and ((get(temp___1819(temp___1821,
  temp___1822, temp___1823, temp___1824), (- 2147483647),
  (- 2147483648)) = of_rep(temp___1823)) and (get(temp___1819(temp___1821,
  temp___1822, temp___1823, temp___1824), (- 2147483647),
  (- 2147483647)) = of_rep(temp___1824)))))

axiom transpose__post_axiom :
  (forall x:map. forall x1:t1. forall x2:t2 [transpose({ elts = x; rt = x1;
  rt_2 = x2 })]. dynamic_property2((- 2147483648), 2147483647,
  to_rep1(first((transpose({ elts = x; rt = x1; rt_2 = x2 })).rt)),
  to_rep1(last((transpose({ elts = x; rt = x1; rt_2 = x2 })).rt)),
  (- 2147483648), 2147483647, to_rep1(first1((transpose({ elts = x; rt = x1;
  rt_2 = x2 })).rt_2)), to_rep1(last1((transpose({ elts = x; rt = x1; rt_2 =
  x2 })).rt_2))))

axiom omultiply__4__post_axiom :
  (forall left:map. forall left1:t1. forall left2:t2. forall right:map.
  forall right1:t1. forall right2:t2 [omultiply__4({ elts = left; rt = left1;
  rt_2 = left2 }, { elts = right; rt = right1; rt_2 = right2 })].
  dynamic_property2((- 2147483648), 2147483647, to_rep1(first((omultiply__4({
  elts = left; rt = left1; rt_2 = left2 }, { elts = right; rt = right1;
  rt_2 = right2 })).rt)), to_rep1(last((omultiply__4({ elts = left; rt =
  left1; rt_2 = left2 }, { elts = right; rt = right1; rt_2 = right2 })).rt)),
  (- 2147483648), 2147483647, to_rep1(first1((omultiply__4({ elts = left;
  rt = left1; rt_2 = left2 }, { elts = right; rt = right1; rt_2 = right2
  })).rt_2)), to_rep1(last1((omultiply__4({ elts = left; rt = left1; rt_2 =
  left2 }, { elts = right; rt = right1; rt_2 = right2 })).rt_2))))

logic mat_in : map

logic mat_map : map

logic mat_out : map

logic mat_in2 : map

logic mat_map2 : map

logic mat_out2 : map

logic o : map

logic o1 : map

logic result : map

logic mat_in1 : map

logic result1 : map

logic mat_map1 : map

logic result2 : map

logic mat_out1 : map

logic result3 : map

logic mat_in21 : map

logic result4 : map

logic mat_map21 : map

logic result5 : map

logic mat_out21 : map

logic result6 : map

logic mat_out3 : map

logic result7 : map

logic mat_out22 : map

axiom H : (result = mat_in)

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 0.0e-1))

axiom H1 : (mat_in1 = main_test__mat_in__aggregate_def(fliteral, fliteral1,
  fliteral1, fliteral1, fliteral, fliteral1, fliteral1, fliteral1, fliteral))

axiom H2 : (result1 = mat_map)

logic fliteral2 : t

axiom fliteral_axiom2 : (tqtisFinite(fliteral2) and
  (tqtreal(fliteral2) = 2.0))

logic fliteral3 : t

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 3.0))

axiom H3 : (mat_map1 = main_test__mat_map__aggregate_def(fliteral2,
  fliteral1, fliteral1, fliteral1, fliteral1, fliteral3))

axiom H4 : (result2 = mat_out)

axiom H5 : (mat_out1 = main_test__mat_out__aggregate_def(fliteral1))

axiom H6 : (result3 = mat_in2)

axiom H7 : (mat_in21 = main_test__mat_in2__aggregate_def(fliteral, fliteral1,
  fliteral1, fliteral1, fliteral, fliteral1, fliteral1, fliteral1, fliteral))

axiom H8 : (result4 = mat_map2)

axiom H9 : (mat_map21 = main_test__mat_map2__aggregate_def(fliteral2,
  fliteral1, fliteral1, fliteral1, fliteral1, fliteral3))

axiom H10 : (result5 = mat_out2)

axiom H11 : (mat_out21 = main_test__mat_out2__aggregate_def(fliteral1))

axiom H12 : ((o = manipulate1(mat_in1, mat_map1)) and
  (o = slide((omultiply__4(omultiply__4(transpose({ elts = mat_map1; rt =
  mk(1, 3); rt_2 = mk1(1, 2) }), { elts = mat_in1; rt = mk(1, 3); rt_2 =
  mk1(1, 3) }), { elts = mat_map1; rt = mk(1, 3); rt_2 = mk1(1, 2) })).elts,
  to_rep1(first1((omultiply__4(omultiply__4(transpose({ elts = mat_map1; rt =
  mk(1, 3); rt_2 = mk1(1, 2) }), { elts = mat_in1; rt = mk(1, 3); rt_2 =
  mk1(1, 3) }), { elts = mat_map1; rt = mk(1, 3); rt_2 = mk1(1, 2)
  })).rt_2)), 1, to_rep1(first1((omultiply__4(omultiply__4(transpose({ elts =
  mat_map1; rt = mk(1, 3); rt_2 = mk1(1, 2) }), { elts = mat_in1; rt = mk(1,
  3); rt_2 = mk1(1, 3) }), { elts = mat_map1; rt = mk(1, 3); rt_2 = mk1(1, 2)
  })).rt_2)), 1)))

axiom H13 : (result6 = mat_out1)

axiom H14 : (mat_out3 = o)

logic fliteral4 : t

axiom fliteral_axiom4 : (tqtisFinite(fliteral4) and
  (tqtreal(fliteral4) = 4.0))

logic fliteral5 : t

axiom fliteral_axiom5 : (tqtisFinite(fliteral5) and
  (tqtreal(fliteral5) = 9.0))

axiom H15 : (bool_eq2(mat_out3, 1, 2, 1, 2, temp___1809(fliteral4, fliteral1,
  fliteral1, fliteral5), (- 2147483648), (- 2147483647), (- 2147483648),
  (- 2147483647)) = true)

axiom H16 : (o1 = manipulate(mat_in21, mat_map21))

axiom H17 : (result7 = mat_out21)

axiom H18 : (mat_out22 = o1)

 (* File "generic_matrix_thing.adb", line 13, characters 0-0 *)
goal WP_parameter_def : (bool_eq2(mat_out22, 1, 2, 1, 2,
  temp___1819(fliteral4, fliteral1, fliteral1, fliteral5), (- 2147483648),
  (- 2147483647), (- 2147483648), (- 2147483647)) = true)
