(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-fun power (Float32 Int) Float32)
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 0) (of_int RNE 1)))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 1) x))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 2) (fp.mul RNE x x)))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 3) (fp.mul RNE x (fp.mul RNE x x))))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (=> (not (fp.isZero x)) (fp.eq (power x (- 1)) (fp.div RNE (of_int RNE 1) x))))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (=> (not (fp.isZero x)) (fp.eq (power x (- 2)) (fp.div RNE (of_int RNE 1) (power x 2)))))))
(assert (forall ((x Float32)) (=> (fp.isFinite32 x) (=> (not (fp.isZero x)) (fp.eq (power x (- 2)) (fp.div RNE (of_int RNE 1) (power x 3)))))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort float 0)
(declare-fun user_eq1 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-fun fib (Int) Int)
(declare-fun fib__function_guard (Int Int) Bool)
(declare-sort fibonacci_argument_type 0)
(declare-fun fibonacci_argument_typeqtint (fibonacci_argument_type) Int)
(assert (forall ((i fibonacci_argument_type)) (and (<= 0 (fibonacci_argument_typeqtint i)) (<= (fibonacci_argument_typeqtint i) 46))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 46)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (fibonacci_argument_type fibonacci_argument_type) Bool)
(declare-const dummy3 fibonacci_argument_type)
(declare-datatypes () ((fibonacci_argument_type__ref (mk_fibonacci_argument_type__ref (fibonacci_argument_type__content fibonacci_argument_type)))))
(define-fun fibonacci_argument_type__ref___projection ((a fibonacci_argument_type__ref)) fibonacci_argument_type (fibonacci_argument_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_208 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 46)) (in_range3 temp___expr_208)))
(assert (forall ((n Int)) (! (=> (dynamic_invariant1 n true true true true) (= (fib n) (ite (or (= n 0) (= n 1)) n (+ (fib (- n 1)) (fib (- n 2)))))) :pattern ((fib n)))))
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant2 ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const number_theory__fib__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const result Int)
(declare-const number_theory__fib__result1 Int)
(declare-const number_theory__fib__result2 Int)
(declare-const number_theory__fib__result3 Int)
(declare-const number_theory__fib__result4 Int)
(declare-const number_theory__fib__result5 Int)
(assert (in_range3 n))
(assert (= number_theory__fib__result1 number_theory__fib__result2))
(assert (= number_theory__fib__result3 number_theory__fib__result1))
(assert (=> (=> (not (= n 0)) (= n 1)) (= o5 n)))
(assert (=> (not (=> (not (= n 0)) (= n 1))) (and (= o1 (- n 2)) (in_range3 (- n 2)))))
(assert (=> (not (=> (not (= n 0)) (= n 1))) (and (= o2 (fib o1)) (and (in_range2 o2) (and (= o2 (ite (or (= o1 0) (= o1 1)) o1 (+ (fib (- o1 1)) (fib (- o1 2))))) (fp.lt (of_int RNE o2) (fp.add RNE (fp.div RNE (power (fp #b0 #b01111111 #b10011110001110111100111) o1) (fp #b0 #b10000000 #b00011110001101010100000)) (fp #b0 #b01111111 #b00000000000000000000000))))))))
(assert (=> (not (=> (not (= n 0)) (= n 1))) (and (= o (- n 1)) (in_range3 (- n 1)))))
(assert (=> (not (=> (not (= n 0)) (= n 1))) (and (= o3 (fib o)) (and (in_range2 o3) (and (= o3 (ite (or (= o 0) (= o 1)) o (+ (fib (- o 1)) (fib (- o 2))))) (fp.lt (of_int RNE o3) (fp.add RNE (fp.div RNE (power (fp #b0 #b01111111 #b10011110001110111100111) o) (fp #b0 #b10000000 #b00011110001101010100000)) (fp #b0 #b01111111 #b00000000000000000000000))))))))
(assert (=> (not (=> (not (= n 0)) (= n 1))) (= o4 (+ o3 o2))))
(assert (=> (not (=> (not (= n 0)) (= n 1))) (and (= o5 o4) (in_range1 o4))))
(assert (= (mk_int__ref result) (mk_int__ref number_theory__fib__result)))
(assert (= number_theory__fib__result1 o5))
(assert (= (mk_int__ref number_theory__fib__result4) (mk_int__ref number_theory__fib__result2)))
(assert (= number_theory__fib__result5 number_theory__fib__result3))
(assert (< n 0))
(assert (not (not (fp.eq (fp #b0 #b01111111 #b10011110001110111100111) ((_ to_fp 8 24) #x00000000)))))
(check-sat)
(exit)
