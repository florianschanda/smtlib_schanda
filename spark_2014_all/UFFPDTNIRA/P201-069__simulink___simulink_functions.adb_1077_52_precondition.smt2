(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float64)
(declare-fun to_int1 (RoundingMode Float64) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i) (<= i 9007199254740992)))
(define-fun same_sign ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float64) (x Float64) (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float64) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float64)))))
(declare-sort long_float 0)
(declare-fun user_eq (long_float long_float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float64) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float64)
(declare-const dummy long_float)
(declare-datatypes () ((long_float__ref (mk_long_float__ref (long_float__content long_float)))))
(define-fun long_float__ref___projection ((a long_float__ref)) long_float (long_float__content a))
(define-fun dynamic_invariant ((temp___expr_57 Float64) (temp___is_init_54 Bool) (temp___skip_constant_55 Bool) (temp___do_toplevel_56 Bool)) Bool (=> (or (= temp___is_init_54 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (fp.isFinite64 temp___expr_57)))
(declare-fun arctan (Float64 Float64) Float64)
(declare-fun arctan__function_guard (Float64 Float64 Float64) Bool)
(assert (forall ((y Float64) (x Float64)) (! (=> (and (and (dynamic_invariant y true true true) (dynamic_invariant x true true true)) (or (not (fp.eq x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (not (fp.eq y (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))) (let ((result (arctan y x))) (and (=> (and (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) x) (fp.eq y (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (fp.eq result (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (dynamic_invariant result true false true)))) :pattern ((arctan y x)))))
(declare-const lf Float64)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const o Float64)
(assert (fp.isFinite64 lf))
(assert (not (or (not (fp.eq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (not (fp.eq lf (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))))
(check-sat)
(exit)
