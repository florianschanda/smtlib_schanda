(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort t_float 0)
(declare-fun user_eq (t_float t_float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)
(declare-const dummy t_float)
(declare-datatypes () ((t_float__ref (mk_t_float__ref (t_float__content t_float)))))
(define-fun t_float__ref___projection ((a t_float__ref)) t_float (t_float__content a))
(define-fun dynamic_invariant ((temp___expr_165 Float32) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_165)))
(declare-fun oadd (Float32 Float32) Float32)
(declare-fun oadd__function_guard (Float32 Float32 Float32) Bool)
(assert (forall ((left Float32) (right Float32)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (dynamic_invariant (oadd left right) true false true true)) :pattern ((oadd left right)))))
(assert (forall ((left Float32) (right Float32)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (= (oadd left right) (fp.add RNE left right))) :pattern ((oadd left right)))))
(declare-fun osubtract (Float32 Float32) Float32)
(declare-fun osubtract__function_guard (Float32 Float32 Float32) Bool)
(assert (forall ((left Float32) (right Float32)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (dynamic_invariant (osubtract left right) true false true true)) :pattern ((osubtract left right)))))
(assert (forall ((left Float32) (right Float32)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (= (osubtract left right) (fp.sub RNE left right))) :pattern ((osubtract left right)))))
(declare-fun omultiply (Float32 Float32) Float32)
(declare-fun omultiply__function_guard (Float32 Float32 Float32) Bool)
(assert (forall ((left Float32) (right Float32)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (dynamic_invariant (omultiply left right) true false true true)) :pattern ((omultiply left right)))))
(assert (forall ((left Float32) (right Float32)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (= (omultiply left right) (fp.mul RNE left right))) :pattern ((omultiply left right)))))
(declare-fun odivide (Float32 Float32) Float32)
(declare-fun odivide__function_guard (Float32 Float32 Float32) Bool)
(assert (forall ((left Float32) (right Float32)) (! (=> (and (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (not (fp.eq right (fp #b0 #b00000000 #b00000000000000000000000)))) (dynamic_invariant (odivide left right) true false true true)) :pattern ((odivide left right)))))
(assert (forall ((left Float32) (right Float32)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (= (odivide left right) (fp.div RNE left right))) :pattern ((odivide left right)))))
(declare-const x Float32)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const x1 Float32)
(declare-const x2 Float32)
(declare-const x3 Float32)
(declare-const x4 Float32)
(declare-const x5 Float32)
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const o2 Float32)
(declare-const o3 Float32)
(declare-const result Float32)
(declare-const x11 Float32)
(declare-const result1 Float32)
(declare-const x12 Float32)
(declare-const result2 Float32)
(declare-const x21 Float32)
(declare-const result3 Float32)
(declare-const x22 Float32)
(declare-const result4 Float32)
(declare-const x31 Float32)
(declare-const result5 Float32)
(declare-const x32 Float32)
(declare-const result6 Float32)
(declare-const x41 Float32)
(assert (fp.isFinite32 x))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 x1)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 x2)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 x3)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 x4)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 x5)))
(assert (= result x1))
(assert (= x11 (fp #b0 #b11111110 #b11111111111111111111111)))
(assert (and (= o (oadd x11 x11)) (and (fp.isFinite32 o) (= o (fp.add RNE x11 x11)))))
(assert (= result1 x11))
(assert (= x12 o))
(assert (= result2 x2))
(assert (= x21 (fp #b0 #b11111110 #b11111111111111111111111)))
(assert (and (= o1 (osubtract (fp.neg x21) x21)) (and (fp.isFinite32 o1) (= o1 (fp.sub RNE (fp.neg x21) x21)))))
(assert (= result3 x21))
(assert (= x22 o1))
(assert (= result4 x3))
(assert (= x31 (fp #b0 #b11111110 #b11111111111111111111111)))
(assert (and (= o2 (omultiply x31 x31)) (and (fp.isFinite32 o2) (= o2 (fp.mul RNE x31 x31)))))
(assert (= result5 x31))
(assert (= x32 o2))
(assert (= result6 x4))
(assert (= x41 (fp #b0 #b10000000 #b10000000000000000000000)))
(assert (and (= o3 (osubtract x41 x41)) (and (fp.isFinite32 o3) (= o3 (fp.sub RNE x41 x41)))))
(assert (not (not (fp.eq o3 (fp #b0 #b00000000 #b00000000000000000000000)))))
(check-sat)
(exit)
