(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float64)
(declare-fun to_int1 (RoundingMode Float64) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i) (<= i 9007199254740992)))
(define-fun same_sign ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float64) (x Float64) (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float64) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-fun is_int1 (Float64) Bool)
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float64)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort tfloat64B 0)
(declare-fun user_eq (tfloat64B tfloat64B) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)
(declare-const dummy tfloat64B)
(declare-datatypes () ((tfloat64B__ref (mk_tfloat64B__ref (tfloat64B__content tfloat64B)))))
(define-fun tfloat64B__ref___projection ((a tfloat64B__ref)) tfloat64B (tfloat64B__content a))
(declare-sort float64 0)
(declare-fun user_eq1 (float64 float64) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float64) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float64)
(declare-const dummy1 float64)
(declare-datatypes () ((float64__ref (mk_float64__ref (float64__content float64)))))
(define-fun float64__ref___projection ((a float64__ref)) float64 (float64__content a))
(define-fun dynamic_invariant ((temp___expr_135 Float64) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (fp.isFinite64 temp___expr_135)))
(declare-sort tframeB 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tframeB tframeB) Bool)
(declare-const dummy2 tframeB)
(declare-datatypes () ((tframeB__ref (mk_tframeB__ref (tframeB__content tframeB)))))
(define-fun tframeB__ref___projection ((a tframeB__ref)) tframeB (tframeB__content a))
(declare-sort frame 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 25000)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (frame frame) Bool)
(declare-const dummy3 frame)
(declare-datatypes () ((frame__ref (mk_frame__ref (frame__content frame)))))
(define-fun frame__ref___projection ((a frame__ref)) frame (frame__content a))
(define-fun dynamic_invariant1 ((temp___expr_141 Int) (temp___is_init_138 Bool) (temp___skip_constant_139 Bool) (temp___do_toplevel_140 Bool)) Bool (=> (or (= temp___is_init_138 true) (<= 0 25000)) (in_range2 temp___expr_141)))
(declare-sort ratio_t 0)
(define-fun in_range3 ((x Float64)) Bool (and (fp.isFinite64 x) (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) x) (fp.leq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun user_eq4 (ratio_t ratio_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE5 (Float64) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float64)
(declare-const dummy4 ratio_t)
(declare-datatypes () ((ratio_t__ref (mk_ratio_t__ref (ratio_t__content ratio_t)))))
(define-fun ratio_t__ref___projection ((a ratio_t__ref)) ratio_t (ratio_t__content a))
(define-fun dynamic_invariant2 ((temp___expr_147 Float64) (temp___is_init_144 Bool) (temp___skip_constant_145 Bool) (temp___do_toplevel_146 Bool)) Bool (=> (or (= temp___is_init_144 true) (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (in_range3 temp___expr_147)))
(declare-fun low_bound (Int) Float64)
(declare-fun low_bound__function_guard (Float64 Int) Bool)
(assert (forall ((n Int)) (! (=> (dynamic_invariant1 n true true true) (dynamic_invariant (low_bound n) true false true)) :pattern ((low_bound n)))))
(assert (forall ((n Int)) (! (=> (dynamic_invariant1 n true true true) (= (low_bound n) (fp.mul RNE (of_int RNE n) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))) :pattern ((low_bound n)))))
(declare-fun high_bound (Int) Float64)
(declare-fun high_bound__function_guard (Float64 Int) Bool)
(assert (forall ((n Int)) (! (=> (dynamic_invariant1 n true true true) (dynamic_invariant (high_bound n) true false true)) :pattern ((high_bound n)))))
(assert (forall ((n Int)) (! (=> (dynamic_invariant1 n true true true) (= (high_bound n) (fp.mul RNE (of_int RNE n) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)))) :pattern ((high_bound n)))))
(declare-fun invariant__ (Int Float64) Bool)
(declare-fun invariant____function_guard (Bool Int Float64) Bool)
(assert true)
(assert (forall ((n Int)) (forall ((speed Float64)) (! (= (= (invariant__ n speed) true) (and (fp.leq (low_bound n) speed) (fp.leq speed (high_bound n)))) :pattern ((invariant__ n speed))))))
(declare-fun in_bounds (Float64) Bool)
(declare-fun in_bounds__function_guard (Bool Float64) Bool)
(assert true)
(assert (forall ((v Float64)) (! (= (= (in_bounds v) true) (and (fp.leq (fp.neg (fp #b0 #b10000010011 #b1000110010111010100000000000000000000000000000000000)) v) (fp.leq v (fp #b0 #b10000010011 #b1000110010111010100000000000000000000000000000000000)))) :pattern ((in_bounds v)))))
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const factor Float64)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const old_speed Float64)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const delta_speed Float64)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const fnt65 Float64)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const fnp1t65 Float64)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(assert (= delta_speed (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000000 #b1101101100000010000011000100100110111010010111100011)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001))))
(assert (= fnt65 (fp.mul RNE (of_int RNE n) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))
(assert (= fnp1t65 (fp.mul RNE (of_int RNE (+ n 1)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))
(declare-const new_speed Float64)
(declare-const average Float64)
(declare-const distance Float64)
(declare-const o Float64)
(declare-const o1 Float64)
(declare-const o2 Float64)
(declare-const o3 Float64)
(declare-const result Float64)
(declare-const new_speed1 Float64)
(assert (in_range2 n))
(assert (in_range3 factor))
(assert (fp.isFinite64 old_speed))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp.isFinite64 new_speed)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp.isFinite64 average)))
(assert (fp.isFinite64 distance))
(assert (and (< n 25000) (= (invariant__ n old_speed) true)))
(assert (= (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000000 #b1101101100000010000011000100100110111010010111100011)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001)) delta_speed))
(assert (fp.isFinite64 delta_speed))
(assert (and (= o (fp.add RNE old_speed delta_speed)) (fp.isFinite64 (fp.add RNE old_speed delta_speed))))
(assert (= (mk_t__ref result) (mk_t__ref new_speed)))
(assert (= new_speed1 o))
(assert (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) delta_speed) (fp.leq delta_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (= (in_bounds old_speed) true))
(assert (= (in_bounds (high_bound n)) true))
(assert (= (in_bounds (low_bound n)) true))
(assert (fp.leq new_speed1 (fp.add RNE old_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (fp.leq old_speed (high_bound n)))
(assert (fp.leq (fp.add RNE old_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.add RNE (high_bound n) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (fp.leq new_speed1 (fp.add RNE (high_bound n) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (= (fp.mul RNE (of_int RNE n) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) fnt65))
(assert (fp.isFinite64 fnt65))
(assert (= (fp.mul RNE (of_int RNE (+ n 1)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) fnp1t65))
(assert (fp.isFinite64 fnp1t65))
(assert (<= (+ (* n 65) 1) (* (+ n 1) 65)))
(assert (fp.leq (of_int RNE (+ (* n 65) 1)) (of_int RNE (* (+ n 1) 65))))
(assert (fp.eq (fp.add RNE fnt65 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (of_int RNE (+ (* n 65) 1))))
(assert (fp.eq fnp1t65 (of_int RNE (* (+ n 1) 65))))
(assert (fp.leq (fp.add RNE fnt65 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) fnp1t65))
(assert (fp.leq (fp.add RNE (high_bound n) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (high_bound (+ n 1))))
(assert (fp.leq new_speed1 (high_bound (+ n 1))))
(assert (fp.leq (fp.sub RNE old_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) new_speed1))
(assert (fp.leq (low_bound n) old_speed))
(assert (and (= o1 (low_bound n)) (and (fp.isFinite64 o1) (= o1 (fp.mul RNE (of_int RNE n) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)))))))
(assert (= o2 (fp.sub RNE o1 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (and (= o3 o2) (fp.isFinite64 o2)))
(assert (not (fp.isFinite64 (fp.sub RNE old_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(check-sat)
(exit)
