(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-fun to_rep (float) Float32)
(declare-fun of_rep (Float32) float)
(assert (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort map1 0)
(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int Int) float)
(declare-fun set (map1 Int Int float) map1)
(assert (forall ((m map1)) (forall ((i Int)) (forall ((j Int)) (forall ((a float)) (! (= (get (set m i j a) i j) a) :pattern ((set m i j a))))))))
(assert (forall ((m map1)) (forall ((i Int) (i2 Int)) (forall ((j Int) (j2 Int)) (forall ((a float)) (! (=> (not (and (= i i2) (= j j2))) (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get (set m i j a) i2 j2)) :pattern ((set m i j a) (get m i2 j2))))))))
(declare-fun slide (map1 Int Int Int Int) map1)
(assert (forall ((a map1)) (forall ((new_first Int) (old_first Int)) (forall ((new_first_2 Int) (old_first_2 Int)) (forall ((i Int)) (forall ((j Int)) (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j) (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern ((get (slide a old_first new_first old_first_2 new_first_2) i j)))))))))
(define-fun bool_eq ((a map1) (a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) Bool (ite (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_133 Int) (temp___idx_134 Int)) (=> (and (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (and (<= a__first_2 temp___idx_134) (<= temp___idx_134 a__last_2))) (= (to_rep (get a temp___idx_133 temp___idx_134)) (to_rep (get b (+ (- b__first a__first) temp___idx_133) (+ (- b__first_2 a__first_2) temp___idx_134))))))) true false))
(assert (forall ((a map1) (b map1)) (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int) (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)) (=> (= (bool_eq b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) true) (and (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (ite (<= a__first_2 a__last_2) (and (<= b__first_2 b__last_2) (= (- a__last_2 a__first_2) (- b__last_2 b__first_2))) (< b__last_2 b__first_2))) (forall ((temp___idx_133 Int) (temp___idx_134 Int)) (=> (and (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (and (<= a__first_2 temp___idx_134) (<= temp___idx_134 a__last_2))) (= (to_rep (get a temp___idx_133 temp___idx_134)) (to_rep (get b (+ (- b__first a__first) temp___idx_133) (+ (- b__first_2 a__first_2) temp___idx_134)))))))))))
(declare-sort tbxb_matrixP1 0)
(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (tbxb_matrixP1 tbxb_matrixP1) Bool)
(declare-const dummy1 tbxb_matrixP1)
(declare-datatypes () ((tbxb_matrixP1__ref (mk_tbxb_matrixP1__ref (tbxb_matrixP1__content tbxb_matrixP1)))))
(define-fun tbxb_matrixP1__ref___projection ((a tbxb_matrixP1__ref)) tbxb_matrixP1 (tbxb_matrixP1__content a))
(declare-sort tbxb_matrixP2 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (tbxb_matrixP2 tbxb_matrixP2) Bool)
(declare-const dummy2 tbxb_matrixP2)
(declare-datatypes () ((tbxb_matrixP2__ref (mk_tbxb_matrixP2__ref (tbxb_matrixP2__content tbxb_matrixP2)))))
(define-fun tbxb_matrixP2__ref___projection ((a tbxb_matrixP2__ref)) tbxb_matrixP2 (tbxb_matrixP2__content a))
(declare-fun manipulate (map1 map1) map1)
(declare-fun manipulate__function_guard (map1 map1 map1) Bool)
(assert true)
(declare-sort tbxb_matrixP11 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tbxb_matrixP11 tbxb_matrixP11) Bool)
(declare-const dummy3 tbxb_matrixP11)
(declare-datatypes () ((tbxb_matrixP1__ref1 (mk_tbxb_matrixP1__ref1 (tbxb_matrixP1__content1 tbxb_matrixP11)))))
(define-fun tbxb_matrixP1__ref___2__projection ((a tbxb_matrixP1__ref1)) tbxb_matrixP11 (tbxb_matrixP1__content1 a))
(declare-sort tbxb_matrixP21 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (tbxb_matrixP21 tbxb_matrixP21) Bool)
(declare-const dummy4 tbxb_matrixP21)
(declare-datatypes () ((tbxb_matrixP2__ref1 (mk_tbxb_matrixP2__ref1 (tbxb_matrixP2__content1 tbxb_matrixP21)))))
(define-fun tbxb_matrixP2__ref___2__projection ((a tbxb_matrixP2__ref1)) tbxb_matrixP21 (tbxb_matrixP2__content1 a))
(declare-sort integer 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range4 f) (=> (in_range4 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range4 low) (and (in_range4 high) (=> (<= low high) (and (in_range4 low) (in_range4 high))))))
(declare-sort t1 0)
(declare-fun first1 (t1) integer)
(declare-fun last1 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range4 f) (=> (in_range4 l) (and (= (to_rep1 (first1 (mk1 f l))) f) (= (to_rep1 (last1 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range4 low) (and (in_range4 high) (=> (<= low high) (and (in_range4 low) (in_range4 high))))))
(declare-datatypes () ((us_t (mk___t (elts map1) (rt t) (rt_2 t1)))))
(define-fun to_array ((a us_t)) map1 (elts a))
(define-fun of_array ((a map1) (f Int) (l Int) (f2 Int) (l2 Int)) us_t (mk___t a (mk f l) (mk1 f2 l2)))
(define-fun first2 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last2 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first2 a) (last2 a)) (+ (- (last2 a) (first2 a)) 1) 0))
(define-fun first_2 ((a us_t)) Int (to_rep1 (first1 (rt_2 a))))
(define-fun last_2 ((a us_t)) Int (to_rep1 (last1 (rt_2 a))))
(define-fun length_2 ((a us_t)) Int (ite (<= (first_2 a) (last_2 a)) (+ (- (last_2 a) (first_2 a)) 1) 0))
(define-fun dynamic_property2 ((range_first1 Int) (range_last1 Int) (f1 Int) (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int) (l2 Int)) Bool (and (dynamic_property range_first1 range_last1 f1 l1) (dynamic_property1 range_first2 range_last2 f2 l2)))
(declare-const value__size Int)
(declare-fun object__size (map1) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size (map1) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (map1) Int)
(assert (<= 0 value__size))
(assert (forall ((a map1)) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a map1)) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a map1)) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (to_rep1 (first1 (rt_2 x))) (to_rep1 (last1 (rt_2 x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y))) (to_rep1 (first1 (rt_2 y))) (to_rep1 (last1 (rt_2 y)))))
(declare-fun user_eq6 (us_t us_t) Bool)
(declare-const dummy6 us_t)
(declare-datatypes () ((real_matrix__ref (mk_real_matrix__ref (real_matrix__content us_t)))))
(define-fun real_matrix__ref___2__projection ((a real_matrix__ref)) us_t (real_matrix__content a))
(declare-fun transpose (us_t) us_t)
(declare-fun transpose__function_guard (us_t us_t) Bool)
(declare-fun omultiply__4 (us_t us_t) us_t)
(declare-fun omultiply__4__function_guard (us_t us_t us_t) Bool)
(declare-sort taxa_matrixP1 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (taxa_matrixP1 taxa_matrixP1) Bool)
(declare-const dummy7 taxa_matrixP1)
(declare-datatypes () ((taxa_matrixP1__ref (mk_taxa_matrixP1__ref (taxa_matrixP1__content taxa_matrixP1)))))
(define-fun taxa_matrixP1__ref___2__projection ((a taxa_matrixP1__ref)) taxa_matrixP1 (taxa_matrixP1__content a))
(declare-sort taxa_matrixP2 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq8 (taxa_matrixP2 taxa_matrixP2) Bool)
(declare-const dummy8 taxa_matrixP2)
(declare-datatypes () ((taxa_matrixP2__ref (mk_taxa_matrixP2__ref (taxa_matrixP2__content taxa_matrixP2)))))
(define-fun taxa_matrixP2__ref___2__projection ((a taxa_matrixP2__ref)) taxa_matrixP2 (taxa_matrixP2__content a))
(declare-sort taxb_matrixP1 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq9 (taxb_matrixP1 taxb_matrixP1) Bool)
(declare-const dummy9 taxb_matrixP1)
(declare-datatypes () ((taxb_matrixP1__ref (mk_taxb_matrixP1__ref (taxb_matrixP1__content taxb_matrixP1)))))
(define-fun taxb_matrixP1__ref___2__projection ((a taxb_matrixP1__ref)) taxb_matrixP1 (taxb_matrixP1__content a))
(declare-sort taxb_matrixP2 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq10 (taxb_matrixP2 taxb_matrixP2) Bool)
(declare-const dummy10 taxb_matrixP2)
(declare-datatypes () ((taxb_matrixP2__ref (mk_taxb_matrixP2__ref (taxb_matrixP2__content taxb_matrixP2)))))
(define-fun taxb_matrixP2__ref___2__projection ((a taxb_matrixP2__ref)) taxb_matrixP2 (taxb_matrixP2__content a))
(declare-fun manipulate1 (map1 map1) map1)
(declare-fun manipulate__function_guard1 (map1 map1 map1) Bool)
(assert true)
(assert (forall ((original map1) (map2 map1)) (! (= (manipulate1 original map2) (let ((temp___1758 (omultiply__4 (omultiply__4 (transpose (of_array map2 1 3 1 2)) (of_array original 1 3 1 3)) (of_array map2 1 3 1 2)))) (slide (to_array temp___1758) (first_2 temp___1758) 1 (first_2 temp___1758) 1))) :pattern ((manipulate1 original map2)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-sort t21b 0)
(define-fun in_range9 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x (- 2147483647))))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq11 (t21b t21b) Bool)
(declare-const dummy11 t21b)
(declare-datatypes () ((t21b__ref (mk_t21b__ref (t21b__content t21b)))))
(define-fun t21b__ref___projection ((a t21b__ref)) t21b (t21b__content a))
(declare-sort t22b 0)
(define-fun in_range10 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x (- 2147483647))))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq12 (t22b t22b) Bool)
(declare-const dummy12 t22b)
(declare-datatypes () ((t22b__ref (mk_t22b__ref (t22b__content t22b)))))
(define-fun t22b__ref___projection ((a t22b__ref)) t22b (t22b__content a))
(declare-sort t24b 0)
(define-fun in_range11 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x (- 2147483647))))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq13 (t24b t24b) Bool)
(declare-const dummy13 t24b)
(declare-datatypes () ((t24b__ref (mk_t24b__ref (t24b__content t24b)))))
(define-fun t24b__ref___projection ((a t24b__ref)) t24b (t24b__content a))
(declare-sort t25b 0)
(define-fun in_range12 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x (- 2147483647))))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq14 (t25b t25b) Bool)
(declare-const dummy14 t25b)
(declare-datatypes () ((t25b__ref (mk_t25b__ref (t25b__content t25b)))))
(define-fun t25b__ref___projection ((a t25b__ref)) t25b (t25b__content a))
(declare-fun main_test__mat_in__aggregate_def (Float32 Float32 Float32 Float32 Float32 Float32 Float32 Float32 Float32) map1)
(assert (forall ((temp___1760 Float32) (temp___1761 Float32) (temp___1762 Float32) (temp___1763 Float32) (temp___1764 Float32) (temp___1765 Float32) (temp___1766 Float32) (temp___1767 Float32) (temp___1768 Float32)) (let ((temp___1759 (main_test__mat_in__aggregate_def temp___1760 temp___1761 temp___1762 temp___1763 temp___1764 temp___1765 temp___1766 temp___1767 temp___1768))) (and (and (and (and (= (get temp___1759 1 1) (of_rep temp___1760)) (= (get temp___1759 1 2) (of_rep temp___1761))) (= (get temp___1759 1 3) (of_rep temp___1762))) (and (and (= (get temp___1759 2 1) (of_rep temp___1763)) (= (get temp___1759 2 2) (of_rep temp___1764))) (= (get temp___1759 2 3) (of_rep temp___1765)))) (and (and (= (get temp___1759 3 1) (of_rep temp___1766)) (= (get temp___1759 3 2) (of_rep temp___1767))) (= (get temp___1759 3 3) (of_rep temp___1768)))))))
(declare-fun main_test__mat_map__aggregate_def (Float32 Float32 Float32 Float32 Float32 Float32) map1)
(assert (forall ((temp___1772 Float32) (temp___1773 Float32) (temp___1774 Float32) (temp___1775 Float32) (temp___1776 Float32) (temp___1777 Float32)) (let ((temp___1771 (main_test__mat_map__aggregate_def temp___1772 temp___1773 temp___1774 temp___1775 temp___1776 temp___1777))) (and (and (and (= (get temp___1771 1 1) (of_rep temp___1772)) (= (get temp___1771 1 2) (of_rep temp___1773))) (and (= (get temp___1771 2 1) (of_rep temp___1774)) (= (get temp___1771 2 2) (of_rep temp___1775)))) (and (= (get temp___1771 3 1) (of_rep temp___1776)) (= (get temp___1771 3 2) (of_rep temp___1777)))))))
(declare-fun main_test__mat_out__aggregate_def (Float32) map1)
(assert (forall ((temp___1781 Float32)) (forall ((temp___1782 Int) (temp___1783 Int)) (= (get (main_test__mat_out__aggregate_def temp___1781) temp___1782 temp___1783) (of_rep temp___1781)))))
(declare-fun main_test__mat_in2__aggregate_def (Float32 Float32 Float32 Float32 Float32 Float32 Float32 Float32 Float32) map1)
(assert (forall ((temp___1785 Float32) (temp___1786 Float32) (temp___1787 Float32) (temp___1788 Float32) (temp___1789 Float32) (temp___1790 Float32) (temp___1791 Float32) (temp___1792 Float32) (temp___1793 Float32)) (let ((temp___1784 (main_test__mat_in2__aggregate_def temp___1785 temp___1786 temp___1787 temp___1788 temp___1789 temp___1790 temp___1791 temp___1792 temp___1793))) (and (and (and (and (= (get temp___1784 1 1) (of_rep temp___1785)) (= (get temp___1784 1 2) (of_rep temp___1786))) (= (get temp___1784 1 3) (of_rep temp___1787))) (and (and (= (get temp___1784 2 1) (of_rep temp___1788)) (= (get temp___1784 2 2) (of_rep temp___1789))) (= (get temp___1784 2 3) (of_rep temp___1790)))) (and (and (= (get temp___1784 3 1) (of_rep temp___1791)) (= (get temp___1784 3 2) (of_rep temp___1792))) (= (get temp___1784 3 3) (of_rep temp___1793)))))))
(declare-fun main_test__mat_map2__aggregate_def (Float32 Float32 Float32 Float32 Float32 Float32) map1)
(assert (forall ((temp___1797 Float32) (temp___1798 Float32) (temp___1799 Float32) (temp___1800 Float32) (temp___1801 Float32) (temp___1802 Float32)) (let ((temp___1796 (main_test__mat_map2__aggregate_def temp___1797 temp___1798 temp___1799 temp___1800 temp___1801 temp___1802))) (and (and (and (= (get temp___1796 1 1) (of_rep temp___1797)) (= (get temp___1796 1 2) (of_rep temp___1798))) (and (= (get temp___1796 2 1) (of_rep temp___1799)) (= (get temp___1796 2 2) (of_rep temp___1800)))) (and (= (get temp___1796 3 1) (of_rep temp___1801)) (= (get temp___1796 3 2) (of_rep temp___1802)))))))
(declare-fun main_test__mat_out2__aggregate_def (Float32) map1)
(assert (forall ((temp___1806 Float32)) (forall ((temp___1807 Int) (temp___1808 Int)) (= (get (main_test__mat_out2__aggregate_def temp___1806) temp___1807 temp___1808) (of_rep temp___1806)))))
(declare-fun temp___1809 (Float32 Float32 Float32 Float32) map1)
(assert (forall ((temp___1811 Float32) (temp___1812 Float32) (temp___1813 Float32) (temp___1814 Float32)) (let ((temp___1810 (temp___1809 temp___1811 temp___1812 temp___1813 temp___1814))) (and (and (= (get temp___1810 (- 2147483648) (- 2147483648)) (of_rep temp___1811)) (= (get temp___1810 (- 2147483648) (- 2147483647)) (of_rep temp___1812))) (and (= (get temp___1810 (- 2147483647) (- 2147483648)) (of_rep temp___1813)) (= (get temp___1810 (- 2147483647) (- 2147483647)) (of_rep temp___1814)))))))
(declare-fun temp___1819 (Float32 Float32 Float32 Float32) map1)
(assert (forall ((temp___1821 Float32) (temp___1822 Float32) (temp___1823 Float32) (temp___1824 Float32)) (let ((temp___1820 (temp___1819 temp___1821 temp___1822 temp___1823 temp___1824))) (and (and (= (get temp___1820 (- 2147483648) (- 2147483648)) (of_rep temp___1821)) (= (get temp___1820 (- 2147483648) (- 2147483647)) (of_rep temp___1822))) (and (= (get temp___1820 (- 2147483647) (- 2147483648)) (of_rep temp___1823)) (= (get temp___1820 (- 2147483647) (- 2147483647)) (of_rep temp___1824)))))))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range4 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_51 Float32) (temp___is_init_48 Bool) (temp___skip_constant_49 Bool) (temp___do_toplevel_50 Bool)) Bool (=> (or (= temp___is_init_48 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_51)))
(define-fun dynamic_invariant2 ((temp___expr_486 us_t) (temp___is_init_483 Bool) (temp___skip_constant_484 Bool) (temp___do_toplevel_485 Bool)) Bool (=> (not (= temp___skip_constant_484 true)) (dynamic_property2 (- 2147483648) 2147483647 (first2 temp___expr_486) (last2 temp___expr_486) (- 2147483648) 2147483647 (first_2 temp___expr_486) (last_2 temp___expr_486))))
(assert (forall ((x us_t)) (! (=> (dynamic_invariant2 x true true true) (dynamic_invariant2 (transpose x) true false true)) :pattern ((transpose x)))))
(assert (forall ((left us_t) (right us_t)) (! (=> (and (dynamic_invariant2 left true true true) (dynamic_invariant2 right true true true)) (dynamic_invariant2 (omultiply__4 left right) true false true)) :pattern ((omultiply__4 left right)))))
(declare-const mat_in map1)
(declare-const mat_map map1)
(declare-const mat_out map1)
(declare-const mat_in2 map1)
(declare-const mat_map2 map1)
(declare-const mat_out2 map1)
(declare-const o map1)
(declare-const o1 map1)
(declare-const result map1)
(declare-const mat_in1 map1)
(declare-const result1 map1)
(declare-const mat_map1 map1)
(declare-const result2 map1)
(declare-const mat_out1 map1)
(declare-const result3 map1)
(declare-const mat_in21 map1)
(declare-const result4 map1)
(declare-const mat_map21 map1)
(declare-const result5 map1)
(declare-const mat_out21 map1)
(declare-const result6 map1)
(declare-const mat_out3 map1)
(declare-const result7 map1)
(declare-const mat_out22 map1)
(assert (= result mat_in))
(assert (= mat_in1 (main_test__mat_in__aggregate_def (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (= result1 mat_map))
(assert (= mat_map1 (main_test__mat_map__aggregate_def (fp #b0 #b10000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000000 #b10000000000000000000000))))
(assert (= result2 mat_out))
(assert (= mat_out1 (main_test__mat_out__aggregate_def (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (= result3 mat_in2))
(assert (= mat_in21 (main_test__mat_in2__aggregate_def (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (= result4 mat_map2))
(assert (= mat_map21 (main_test__mat_map2__aggregate_def (fp #b0 #b10000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000000 #b10000000000000000000000))))
(assert (= result5 mat_out2))
(assert (= mat_out21 (main_test__mat_out2__aggregate_def (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (and (= o (manipulate1 mat_in1 mat_map1)) (= o (let ((temp___1747 (omultiply__4 (omultiply__4 (transpose (mk___t mat_map1 (mk 1 3) (mk1 1 2))) (mk___t mat_in1 (mk 1 3) (mk1 1 3))) (mk___t mat_map1 (mk 1 3) (mk1 1 2))))) (slide (elts temp___1747) (to_rep1 (first1 (rt_2 temp___1747))) 1 (to_rep1 (first1 (rt_2 temp___1747))) 1)))))
(assert (= result6 mat_out1))
(assert (= mat_out3 o))
(assert (= (bool_eq mat_out3 1 2 1 2 (temp___1809 (fp #b0 #b10000001 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b00100000000000000000000)) (- 2147483648) (- 2147483647) (- 2147483648) (- 2147483647)) true))
(assert (= o1 (manipulate mat_in21 mat_map21)))
(assert (= result7 mat_out21))
(assert (= mat_out22 o1))
(assert (not (= (bool_eq mat_out22 1 2 1 2 (temp___1819 (fp #b0 #b10000001 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b00100000000000000000000)) (- 2147483648) (- 2147483647) (- 2147483648) (- 2147483647)) true)))
(check-sat)
(exit)
