(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(define-fun dynamic_invariant ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(declare-fun inv_sqrt (Float32) Float32)
(declare-fun inv_sqrt__function_guard (Float32 Float32) Bool)
(assert (forall ((x Float32)) (! (=> (and (dynamic_invariant x true true true true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000001) x)) (let ((result (inv_sqrt x))) (and (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) result) (fp.lt result (fp #b0 #b11000010 #b01011010111100011101100))) (dynamic_invariant result true false true true)))) :pattern ((inv_sqrt x)))))
(declare-fun saturate (Float32 Float32 Float32) Float32)
(declare-fun saturate__function_guard (Float32 Float32 Float32 Float32) Bool)
(assert (forall ((value Float32) (min_value Float32) (max_value Float32)) (! (=> (and (and (dynamic_invariant value true true true true) (dynamic_invariant min_value true true true true)) (dynamic_invariant max_value true true true true)) (let ((result (saturate value min_value max_value))) (and (ite (fp.lt value min_value) (fp.eq result min_value) (ite (fp.lt max_value value) (fp.eq result max_value) (fp.eq result value))) (dynamic_invariant result true false true true)))) :pattern ((saturate value min_value max_value)))))
(declare-fun lift_away_from_zero (Float32) Float32)
(declare-fun lift_away_from_zero__function_guard (Float32 Float32) Bool)
(declare-sort t_acc 0)
(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x) (fp.leq x (fp #b0 #b10000011 #b00000000000000000000000)))))
(declare-fun user_eq1 (t_acc t_acc) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 t_acc)
(declare-datatypes () ((t_acc__ref (mk_t_acc__ref (t_acc__content t_acc)))))
(define-fun t_acc__ref___projection ((a t_acc__ref)) t_acc (t_acc__content a))
(define-fun dynamic_invariant1 ((temp___expr_170 Float32) (temp___is_init_166 Bool) (temp___skip_constant_167 Bool) (temp___do_toplevel_168 Bool) (temp___do_typ_inv_169 Bool)) Bool (=> (or (= temp___is_init_166 true) (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))) (in_range1 temp___expr_170)))
(declare-sort t_acc_lifted 0)
(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x) (fp.leq x (fp #b0 #b10000011 #b00000000000000000000000)))))
(declare-fun user_eq2 (t_acc_lifted t_acc_lifted) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)
(declare-const dummy2 t_acc_lifted)
(declare-datatypes () ((t_acc_lifted__ref (mk_t_acc_lifted__ref (t_acc_lifted__content t_acc_lifted)))))
(define-fun t_acc_lifted__ref___projection ((a t_acc_lifted__ref)) t_acc_lifted (t_acc_lifted__content a))
(define-fun dynamic_invariant2 ((temp___expr_184 Float32) (temp___is_init_180 Bool) (temp___skip_constant_181 Bool) (temp___do_toplevel_182 Bool) (temp___do_typ_inv_183 Bool)) Bool (=> (or (= temp___is_init_180 true) (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))) (in_range2 temp___expr_184)))
(assert (forall ((x Float32)) (! (=> (dynamic_invariant1 x true true true true) (let ((result (lift_away_from_zero x))) (and (ite (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000)) (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))) (not (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000))))) (dynamic_invariant2 result true false true true)))) :pattern ((lift_away_from_zero x)))))
(declare-sort t_rate 0)
(define-fun in_range3 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) x) (fp.leq x (fp #b0 #b10001010 #b01110111000000000000000)))))
(declare-fun user_eq3 (t_rate t_rate) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)
(declare-const dummy3 t_rate)
(declare-datatypes () ((t_rate__ref (mk_t_rate__ref (t_rate__content t_rate)))))
(define-fun t_rate__ref___projection ((a t_rate__ref)) t_rate (t_rate__content a))
(define-fun dynamic_invariant3 ((temp___expr_163 Float32) (temp___is_init_159 Bool) (temp___skip_constant_160 Bool) (temp___do_toplevel_161 Bool) (temp___do_typ_inv_162 Bool)) Bool (=> (or (= temp___is_init_159 true) (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) (fp #b0 #b10001010 #b01110111000000000000000))) (in_range3 temp___expr_163)))
(declare-sort positive_float 0)
(define-fun in_range4 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun user_eq4 (positive_float positive_float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)
(declare-const dummy4 positive_float)
(declare-datatypes () ((positive_float__ref (mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float (positive_float__content a))
(define-fun dynamic_invariant4 ((temp___expr_1501 Float32) (temp___is_init_1497 Bool) (temp___skip_constant_1498 Bool) (temp___do_toplevel_1499 Bool) (temp___do_typ_inv_1500 Bool)) Bool (=> (or (= temp___is_init_1497 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (in_range4 temp___expr_1501)))
(declare-sort t_delta_time 0)
(define-fun in_range5 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) x) (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun user_eq5 (t_delta_time t_delta_time) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)
(declare-const dummy5 t_delta_time)
(declare-datatypes () ((t_delta_time__ref (mk_t_delta_time__ref (t_delta_time__content t_delta_time)))))
(define-fun t_delta_time__ref___projection ((a t_delta_time__ref)) t_delta_time (t_delta_time__content a))
(define-fun dynamic_invariant5 ((temp___expr_1508 Float32) (temp___is_init_1504 Bool) (temp___skip_constant_1505 Bool) (temp___do_toplevel_1506 Bool) (temp___do_typ_inv_1507 Bool)) Bool (=> (or (= temp___is_init_1504 true) (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) (fp #b0 #b01111111 #b00000000000000000000000))) (in_range5 temp___expr_1508)))
(declare-sort t_alpha 0)
(define-fun in_range6 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun user_eq6 (t_alpha t_alpha) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE7 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Float32)
(declare-const dummy6 t_alpha)
(declare-datatypes () ((t_alpha__ref (mk_t_alpha__ref (t_alpha__content t_alpha)))))
(define-fun t_alpha__ref___projection ((a t_alpha__ref)) t_alpha (t_alpha__content a))
(define-fun dynamic_invariant6 ((temp___expr_1515 Float32) (temp___is_init_1511 Bool) (temp___skip_constant_1512 Bool) (temp___do_toplevel_1513 Bool) (temp___do_typ_inv_1514 Bool)) Bool (=> (or (= temp___is_init_1511 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))) (in_range6 temp___expr_1515)))
(declare-sort t_quaternion 0)
(define-fun in_range7 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) x) (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun user_eq7 (t_quaternion t_quaternion) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE8 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Float32)
(declare-const dummy7 t_quaternion)
(declare-datatypes () ((t_quaternion__ref (mk_t_quaternion__ref (t_quaternion__content t_quaternion)))))
(define-fun t_quaternion__ref___projection ((a t_quaternion__ref)) t_quaternion (t_quaternion__content a))
(define-fun dynamic_invariant7 ((temp___expr_1550 Float32) (temp___is_init_1546 Bool) (temp___skip_constant_1547 Bool) (temp___do_toplevel_1548 Bool) (temp___do_typ_inv_1549 Bool)) Bool (=> (or (= temp___is_init_1546 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (in_range7 temp___expr_1550)))
(declare-const gx Float32)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const gy Float32)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const gz Float32)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const ax Float32)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const ay Float32)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const az Float32)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const dt Float32)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const c3b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const c4b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const c5b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const c6b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const c7b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-const c8b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const c9b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-const attr__ATTRIBUTE_ADDRESS25 Int)
(declare-const attr__ATTRIBUTE_ADDRESS26 Int)
(declare-const attr__ATTRIBUTE_ADDRESS27 Int)
(declare-const attr__ATTRIBUTE_ADDRESS28 Int)
(declare-const attr__ATTRIBUTE_ADDRESS29 Int)
(declare-const attr__ATTRIBUTE_ADDRESS30 Int)
(declare-const attr__ATTRIBUTE_ADDRESS31 Int)
(declare-const attr__ATTRIBUTE_ADDRESS32 Int)
(declare-const attr__ATTRIBUTE_ADDRESS33 Int)
(declare-const attr__ATTRIBUTE_ADDRESS34 Int)
(declare-const attr__ATTRIBUTE_ADDRESS35 Int)
(declare-const attr__ATTRIBUTE_ADDRESS36 Int)
(declare-const attr__ATTRIBUTE_ADDRESS37 Int)
(declare-const attr__ATTRIBUTE_ADDRESS38 Int)
(declare-const attr__ATTRIBUTE_ADDRESS39 Int)
(declare-const attr__ATTRIBUTE_ADDRESS40 Int)
(declare-const attr__ATTRIBUTE_ADDRESS41 Int)
(declare-const attr__ATTRIBUTE_ADDRESS42 Int)
(declare-const attr__ATTRIBUTE_ADDRESS43 Int)
(declare-const c11b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS44 Int)
(declare-const c12b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS45 Int)
(declare-const c13b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS46 Int)
(declare-const c14b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS47 Int)
(declare-const c15b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS48 Int)
(declare-const c16b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS49 Int)
(declare-const c17b Float32)
(declare-const attr__ATTRIBUTE_ADDRESS50 Int)
(declare-const attr__ATTRIBUTE_ADDRESS51 Int)
(declare-const attr__ATTRIBUTE_ADDRESS52 Int)
(declare-const attr__ATTRIBUTE_ADDRESS53 Int)
(declare-const attr__ATTRIBUTE_ADDRESS54 Int)
(declare-const attr__ATTRIBUTE_ADDRESS55 Int)
(declare-const attr__ATTRIBUTE_ADDRESS56 Int)
(declare-const attr__ATTRIBUTE_ADDRESS57 Int)
(declare-const attr__ATTRIBUTE_ADDRESS58 Int)
(declare-const attr__ATTRIBUTE_ADDRESS59 Int)
(declare-const attr__ATTRIBUTE_ADDRESS60 Int)
(declare-const attr__ATTRIBUTE_ADDRESS61 Int)
(declare-const attr__ATTRIBUTE_ADDRESS62 Int)
(declare-const attr__ATTRIBUTE_ADDRESS63 Int)
(declare-const attr__ATTRIBUTE_ADDRESS64 Int)
(declare-const attr__ATTRIBUTE_ADDRESS65 Int)
(declare-const attr__ATTRIBUTE_ADDRESS66 Int)
(declare-const attr__ATTRIBUTE_ADDRESS67 Int)
(declare-const attr__ATTRIBUTE_ADDRESS68 Int)
(declare-const attr__ATTRIBUTE_ADDRESS69 Int)
(declare-const attr__ATTRIBUTE_ADDRESS70 Int)
(declare-const attr__ATTRIBUTE_ADDRESS71 Int)
(declare-const attr__ATTRIBUTE_ADDRESS72 Int)
(declare-const attr__ATTRIBUTE_ADDRESS73 Int)
(declare-const attr__ATTRIBUTE_ADDRESS74 Int)
(declare-const attr__ATTRIBUTE_ADDRESS75 Int)
(declare-const attr__ATTRIBUTE_ADDRESS76 Int)
(declare-const attr__ATTRIBUTE_ADDRESS77 Int)
(declare-const attr__ATTRIBUTE_ADDRESS78 Int)
(declare-const attr__ATTRIBUTE_ADDRESS79 Int)
(declare-const attr__ATTRIBUTE_ADDRESS80 Int)
(declare-const attr__ATTRIBUTE_ADDRESS81 Int)
(declare-const attr__ATTRIBUTE_ADDRESS82 Int)
(declare-const attr__ATTRIBUTE_ADDRESS83 Int)
(declare-const q0 Float32)
(declare-const q1 Float32)
(declare-const q2 Float32)
(declare-const q3 Float32)
(declare-const two_kp Float32)
(declare-const two_ki Float32)
(declare-const integral_fbx Float32)
(declare-const integral_fby Float32)
(declare-const integral_fbz Float32)
(declare-const beta Float32)
(declare-const recip_norm Float32)
(declare-const norm_ax Float32)
(declare-const norm_ay Float32)
(declare-const norm_az Float32)
(declare-const rad_gx Float32)
(declare-const rad_gy Float32)
(declare-const rad_gz Float32)
(declare-const half_vx Float32)
(declare-const half_vy Float32)
(declare-const half_vz Float32)
(declare-const half_ex Float32)
(declare-const half_ey t__ref)
(declare-const half_ez t__ref)
(declare-const q0_tmp t__ref)
(declare-const q1_tmp t__ref)
(declare-const q2_tmp t__ref)
(declare-const q3_tmp t__ref)
(declare-const qa t__ref)
(declare-const qb t__ref)
(declare-const qc t__ref)
(declare-const result t__ref)
(declare-const rad_gx1 Float32)
(declare-const result1 t__ref)
(declare-const rad_gy1 Float32)
(declare-const result2 t__ref)
(declare-const rad_gz1 Float32)
(declare-const result3 t__ref)
(declare-const half_vx1 Float32)
(declare-const result4 t__ref)
(declare-const half_vy1 Float32)
(declare-const result5 t__ref)
(declare-const half_vz1 Float32)
(declare-const result6 t__ref)
(declare-const qa1 Float32)
(declare-const result7 t__ref)
(declare-const qb1 Float32)
(declare-const result8 t__ref)
(declare-const qc1 Float32)
(assert (in_range3 gx))
(assert (in_range3 gy))
(assert (in_range3 gz))
(assert (in_range1 ax))
(assert (in_range1 ay))
(assert (in_range1 az))
(assert (in_range5 dt))
(assert (in_range7 q0))
(assert (in_range7 q1))
(assert (in_range7 q2))
(assert (in_range7 q3))
(assert (fp.isFinite32 two_kp))
(assert (fp.isFinite32 two_ki))
(assert (fp.isFinite32 integral_fbx))
(assert (fp.isFinite32 integral_fby))
(assert (fp.isFinite32 integral_fbz))
(assert (in_range6 beta))
(assert (= gx c3b))
(assert (in_range3 c3b))
(assert (= gy c4b))
(assert (in_range3 c4b))
(assert (= gz c5b))
(assert (in_range3 c5b))
(assert (= ax c6b))
(assert (in_range1 c6b))
(assert (= ay c7b))
(assert (in_range1 c7b))
(assert (= az c8b))
(assert (in_range1 c8b))
(assert (= dt c9b))
(assert (in_range5 c9b))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 recip_norm)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)) (in_range1 norm_ax)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)) (in_range1 norm_ay)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)) (in_range1 norm_az)))
(assert (= result (mk_t__ref rad_gx)))
(assert (= rad_gx1 (fp.div RNE (fp.mul RNE c3b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))
(assert (fp.isFinite32 rad_gx1))
(assert (= result1 (mk_t__ref rad_gy)))
(assert (= rad_gy1 (fp.div RNE (fp.mul RNE c4b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))
(assert (fp.isFinite32 rad_gy1))
(assert (= result2 (mk_t__ref rad_gz)))
(assert (= rad_gz1 (fp.div RNE (fp.mul RNE c5b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))
(assert (fp.isFinite32 rad_gz1))
(assert (= result3 (mk_t__ref half_vx)))
(assert (= half_vx1 (fp.sub RNE (fp.mul RNE q1 q3) (fp.mul RNE q0 q2))))
(assert (fp.isFinite32 half_vx1))
(assert (= result4 (mk_t__ref half_vy)))
(assert (= half_vy1 (fp.add RNE (fp.mul RNE q0 q1) (fp.mul RNE q2 q3))))
(assert (fp.isFinite32 half_vy1))
(assert (= result5 (mk_t__ref half_vz)))
(assert (= half_vz1 (fp.add RNE (fp.sub RNE (fp.mul RNE q0 q0) (fp #b0 #b01111110 #b00000000000000000000000)) (fp.mul RNE q3 q3))))
(assert (fp.isFinite32 half_vz1))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 half_ex)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 (t__content half_ey))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 (t__content half_ez))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 (t__content q0_tmp))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 (t__content q1_tmp))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 (t__content q2_tmp))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 (t__content q3_tmp))))
(assert (= result6 qa))
(assert (= (let ((subject qa)) qa1) q0))
(assert (in_range7 (let ((subject qa)) qa1)))
(assert (= result7 qb))
(assert (= (let ((subject qb)) qb1) q1))
(assert (in_range7 (let ((subject qb)) qb1)))
(assert (= result8 qc))
(assert (= (let ((subject qc)) qc1) q2))
(assert (in_range7 (let ((subject qc)) qc1)))
(assert (not (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000)) (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000)) (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))
(assert (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000001) (fp.add RNE (fp.add RNE (fp.mul RNE c6b c6b) (fp.mul RNE c7b c7b)) (fp.mul RNE c8b c8b)))))
(check-sat)
(exit)
