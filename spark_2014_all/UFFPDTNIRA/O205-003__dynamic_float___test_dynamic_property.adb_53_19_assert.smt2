(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(define-fun dynamic_invariant ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(declare-const d Float32)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort pos_static_float 0)
(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b10000101 #b10010000000000000000000)))))
(declare-fun user_eq1 (pos_static_float pos_static_float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 pos_static_float)
(declare-datatypes () ((pos_static_float__ref (mk_pos_static_float__ref (pos_static_float__content pos_static_float)))))
(define-fun pos_static_float__ref___projection ((a pos_static_float__ref)) pos_static_float (pos_static_float__content a))
(define-fun dynamic_invariant1 ((temp___expr_158 Float32) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b10000101 #b10010000000000000000000))) (in_range1 temp___expr_158)))
(declare-const c Float32)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun to_rep (float) Float32)
(declare-fun of_rep (Float32) float)
(assert (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const last Float32)
(define-fun dynamic_property ((first_int Float32) (last_int Float32) (x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq first_int x) (fp.leq x last_int))))
(declare-fun eq (Float32 Float32) Bool)
(declare-fun is_finite (Float32) Bool)
(declare-fun user_eq2 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)
(declare-const dummy2 float)
(declare-datatypes () ((pos_dynamic_float__ref (mk_pos_dynamic_float__ref (pos_dynamic_float__content float)))))
(define-fun pos_dynamic_float__ref___projection ((a pos_dynamic_float__ref)) float (pos_dynamic_float__content a))
(define-fun dynamic_invariant2 ((temp___expr_165 Float32) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) last)) (dynamic_property (fp #b0 #b01111111 #b00000000000000000000000) last temp___expr_165)))
(assert (= last c))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const last1 Float32)
(define-fun dynamic_property1 ((first_int Float32) (last_int Float32) (x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq first_int x) (fp.leq x last_int))))
(declare-fun eq1 (Float32 Float32) Bool)
(declare-fun is_finite1 (Float32) Bool)
(declare-fun user_eq3 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)
(declare-const dummy3 float)
(declare-datatypes () ((dynamic_float__ref (mk_dynamic_float__ref (dynamic_float__content float)))))
(define-fun dynamic_float__ref___projection ((a dynamic_float__ref)) float (dynamic_float__content a))
(define-fun dynamic_invariant3 ((temp___expr_172 Float32) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool (=> (or (= temp___is_init_168 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) last1)) (dynamic_property1 (fp #b0 #b00000000 #b00000000000000000000000) last1 temp___expr_172)))
(assert (= last1 c))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun dyn_return (Float32) Float32)
(declare-fun dyn_return__function_guard (Float32 Float32) Bool)
(assert (forall ((x Float32)) (! (=> (dynamic_invariant x true true true true) (dynamic_invariant2 (dyn_return x) true false true true)) :pattern ((dyn_return x)))))
(assert (= c d))
(declare-const x Float32)
(declare-const y Float32)
(declare-const test_dynamic_property__c__assume Float32)
(declare-const us Float32)
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const result Float32)
(declare-const x1 Float32)
(declare-const result1 Float32)
(declare-const x2 Float32)
(assert (fp.isFinite32 d))
(assert (and (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) d) (fp.leq d (fp #b0 #b10000101 #b10010000000000000000000))))
(assert (and (= test_dynamic_property__c__assume d) (fp.isFinite32 d)))
(assert (= test_dynamic_property__c__assume c))
(assert (in_range1 c))
(assert (and (= us c) (dynamic_property (fp #b0 #b01111111 #b00000000000000000000000) last c)))
(assert (= o c))
(assert (= result x))
(assert (= x1 o))
(assert (dynamic_property (fp #b0 #b01111111 #b00000000000000000000000) last x1))
(assert (dynamic_property1 (fp #b0 #b00000000 #b00000000000000000000000) last1 y))
(assert (and (= o1 (dyn_return (fp #b0 #b10000011 #b11100000000000000000000))) (dynamic_property (fp #b0 #b01111111 #b00000000000000000000000) last o1)))
(assert (= result1 x1))
(assert (= x2 o1))
(assert (fp.leq x2 c))
(assert (not (fp.leq (dyn_return (fp #b0 #b10000100 #b01000000000000000000000)) c)))
(check-sat)
(exit)
