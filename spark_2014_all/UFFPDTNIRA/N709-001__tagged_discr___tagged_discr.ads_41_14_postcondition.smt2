(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int1 (RoundingMode Int) Float32)
(declare-fun to_int2 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)
(declare-fun user_eq1 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-sort e 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (e e) Bool)
(declare-const dummy2 e)
(declare-datatypes () ((e__ref (mk_e__ref (e__content e)))))
(define-fun e__ref___projection ((a e__ref)) e (e__content a))
(define-fun dynamic_invariant ((temp___expr_135 Int) (temp___is_init_132 Bool) (temp___skip_constant_133 Bool) (temp___do_toplevel_134 Bool)) Bool (=> (or (= temp___is_init_132 true) (<= 0 3)) (in_range2 temp___expr_135)))
(declare-fun to_rep1 (e) Int)
(declare-fun of_rep1 (Int) e)
(assert (forall ((x e)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x e)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-fun to_rep2 (float) Float32)
(declare-fun of_rep2 (Float32) float)
(assert (forall ((x float)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__tagged_discr__t__discr e)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) e (rec__tagged_discr__t__discr a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__tagged_discr__t__z Bool) (rec__tagged_discr__t__x integer) (rec__tagged_discr__t__y float) (rec__ext__ us_private)))))
(define-fun us_split_fields_Z__projection ((a us_split_fields)) Bool (rec__tagged_discr__t__z a))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer (rec__tagged_discr__t__x a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Int (attr__tag a))
(define-fun tagged_discr__t__x__pred ((a us_rep)) Bool (or (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 a))) 0) (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 a))) 2)))
(define-fun tagged_discr__t__y__pred ((a us_rep)) Bool (not (or (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 a))) 0) (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 a))) 2))))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 a))) (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 b)))) (and (and (= (rec__tagged_discr__t__z (us_split_fields1 a)) (rec__tagged_discr__t__z (us_split_fields1 b))) (=> (tagged_discr__t__x__pred a) (= (to_rep (rec__tagged_discr__t__x (us_split_fields1 a))) (to_rep (rec__tagged_discr__t__x (us_split_fields1 b)))))) (=> (tagged_discr__t__y__pred a) (= (to_rep2 (rec__tagged_discr__t__y (us_split_fields1 a))) (to_rep2 (rec__tagged_discr__t__y (us_split_fields1 b))))))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const tagged_discr__t__discr__first__bit Int)
(declare-const tagged_discr__t__discr__last__bit Int)
(declare-const tagged_discr__t__discr__position Int)
(assert (<= 0 tagged_discr__t__discr__first__bit))
(assert (< tagged_discr__t__discr__first__bit tagged_discr__t__discr__last__bit))
(assert (<= 0 tagged_discr__t__discr__position))
(declare-const tagged_discr__t__z__first__bit Int)
(declare-const tagged_discr__t__z__last__bit Int)
(declare-const tagged_discr__t__z__position Int)
(assert (<= 0 tagged_discr__t__z__first__bit))
(assert (< tagged_discr__t__z__first__bit tagged_discr__t__z__last__bit))
(assert (<= 0 tagged_discr__t__z__position))
(declare-const tagged_discr__t__x__first__bit Int)
(declare-const tagged_discr__t__x__last__bit Int)
(declare-const tagged_discr__t__x__position Int)
(assert (<= 0 tagged_discr__t__x__first__bit))
(assert (< tagged_discr__t__x__first__bit tagged_discr__t__x__last__bit))
(assert (<= 0 tagged_discr__t__x__position))
(declare-const tagged_discr__t__y__first__bit Int)
(declare-const tagged_discr__t__y__last__bit Int)
(declare-const tagged_discr__t__y__position Int)
(assert (<= 0 tagged_discr__t__y__first__bit))
(assert (< tagged_discr__t__y__first__bit tagged_discr__t__y__last__bit))
(assert (<= 0 tagged_discr__t__y__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 us_rep)))))
(define-fun t__ref___projection ((a t__ref1)) us_rep (t__content1 a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__tagged_discr__u1__w integer) (rec__tagged_discr__t__z1 Bool) (rec__tagged_discr__t__x1 integer) (rec__tagged_discr__t__y1 float) (rec__ext__1 us_private)))))
(define-fun us_split_fields_W__projection ((a us_split_fields2)) integer (rec__tagged_discr__u1__w a))
(define-fun us_split_fields_Z__2__projection ((a us_split_fields2)) Bool (rec__tagged_discr__t__z1 a))
(define-fun us_split_fields_X__2__projection ((a us_split_fields2)) integer (rec__tagged_discr__t__x1 a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs2 us_split_discrs) (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_discrs (us_split_discrs2 a))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___6__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (integer us_private) us_private)
(declare-fun extract__w (us_private) integer)
(assert (forall ((w integer)) (forall ((rec__ext__2 us_private)) (= (extract__w (hide_ext__ w rec__ext__2)) w))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a) (mk___split_fields (rec__tagged_discr__t__z1 (us_split_fields3 a)) (rec__tagged_discr__t__x1 (us_split_fields3 a)) (rec__tagged_discr__t__y1 (us_split_fields3 a)) (hide_ext__ (rec__tagged_discr__u1__w (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r) (mk___split_fields1 (extract__w (rec__ext__ (us_split_fields1 r))) (rec__tagged_discr__t__z (us_split_fields1 r)) (rec__tagged_discr__t__x (us_split_fields1 r)) (rec__tagged_discr__t__y (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun tagged_discr__t__x__pred1 ((a us_rep1)) Bool (or (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs2 a))) 0) (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs2 a))) 2)))
(define-fun tagged_discr__t__y__pred1 ((a us_rep1)) Bool (not (or (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs2 a))) 0) (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs2 a))) 2))))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs2 a))) (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs2 b)))) (and (and (and (= (to_rep (rec__tagged_discr__u1__w (us_split_fields3 a))) (to_rep (rec__tagged_discr__u1__w (us_split_fields3 b)))) (= (rec__tagged_discr__t__z1 (us_split_fields3 a)) (rec__tagged_discr__t__z1 (us_split_fields3 b)))) (=> (tagged_discr__t__x__pred1 a) (= (to_rep (rec__tagged_discr__t__x1 (us_split_fields3 a))) (to_rep (rec__tagged_discr__t__x1 (us_split_fields3 b)))))) (=> (tagged_discr__t__y__pred1 a) (= (to_rep2 (rec__tagged_discr__t__y1 (us_split_fields3 a))) (to_rep2 (rec__tagged_discr__t__y1 (us_split_fields3 b))))))) true false))
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const tagged_discr__t__discr__first__bit1 Int)
(declare-const tagged_discr__t__discr__last__bit1 Int)
(declare-const tagged_discr__t__discr__position1 Int)
(assert (<= 0 tagged_discr__t__discr__first__bit1))
(assert (< tagged_discr__t__discr__first__bit1 tagged_discr__t__discr__last__bit1))
(assert (<= 0 tagged_discr__t__discr__position1))
(declare-const tagged_discr__u1__w__first__bit Int)
(declare-const tagged_discr__u1__w__last__bit Int)
(declare-const tagged_discr__u1__w__position Int)
(assert (<= 0 tagged_discr__u1__w__first__bit))
(assert (< tagged_discr__u1__w__first__bit tagged_discr__u1__w__last__bit))
(assert (<= 0 tagged_discr__u1__w__position))
(declare-const tagged_discr__t__z__first__bit1 Int)
(declare-const tagged_discr__t__z__last__bit1 Int)
(declare-const tagged_discr__t__z__position1 Int)
(assert (<= 0 tagged_discr__t__z__first__bit1))
(assert (< tagged_discr__t__z__first__bit1 tagged_discr__t__z__last__bit1))
(assert (<= 0 tagged_discr__t__z__position1))
(declare-const tagged_discr__t__x__first__bit1 Int)
(declare-const tagged_discr__t__x__last__bit1 Int)
(declare-const tagged_discr__t__x__position1 Int)
(assert (<= 0 tagged_discr__t__x__first__bit1))
(assert (< tagged_discr__t__x__first__bit1 tagged_discr__t__x__last__bit1))
(assert (<= 0 tagged_discr__t__x__position1))
(declare-const tagged_discr__t__y__first__bit1 Int)
(declare-const tagged_discr__t__y__last__bit1 Int)
(declare-const tagged_discr__t__y__position1 Int)
(assert (<= 0 tagged_discr__t__y__first__bit1))
(assert (< tagged_discr__t__y__first__bit1 tagged_discr__t__y__last__bit1))
(assert (<= 0 tagged_discr__t__y__position1))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((u1__ref (mk_u1__ref (u1__content us_rep1)))))
(define-fun u1__ref___projection ((a u1__ref)) us_rep1 (u1__content a))
(declare-fun is_zero__2 (us_rep1) Bool)
(declare-fun is_zero__2__function_guard (Bool us_rep1) Bool)
(declare-fun is_zero__21 (Int us_rep1) Bool)
(declare-fun is_zero__2__function_guard1 (Bool Int us_rep1) Bool)
(declare-const us_tag2 Int)
(define-fun in_range3 ((rec__tagged_discr__t__discr1 Int) (a us_rep)) Bool (= rec__tagged_discr__t__discr1 (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const tagged_discr__t__discr__first__bit2 Int)
(declare-const tagged_discr__t__discr__last__bit2 Int)
(declare-const tagged_discr__t__discr__position2 Int)
(assert (<= 0 tagged_discr__t__discr__first__bit2))
(assert (< tagged_discr__t__discr__first__bit2 tagged_discr__t__discr__last__bit2))
(assert (<= 0 tagged_discr__t__discr__position2))
(declare-const tagged_discr__t__z__first__bit2 Int)
(declare-const tagged_discr__t__z__last__bit2 Int)
(declare-const tagged_discr__t__z__position2 Int)
(assert (<= 0 tagged_discr__t__z__first__bit2))
(assert (< tagged_discr__t__z__first__bit2 tagged_discr__t__z__last__bit2))
(assert (<= 0 tagged_discr__t__z__position2))
(declare-const tagged_discr__t__x__first__bit2 Int)
(declare-const tagged_discr__t__x__last__bit2 Int)
(declare-const tagged_discr__t__x__position2 Int)
(assert (<= 0 tagged_discr__t__x__first__bit2))
(assert (< tagged_discr__t__x__first__bit2 tagged_discr__t__x__last__bit2))
(assert (<= 0 tagged_discr__t__x__position2))
(declare-const tagged_discr__t__y__first__bit2 Int)
(declare-const tagged_discr__t__y__last__bit2 Int)
(declare-const tagged_discr__t__y__position2 Int)
(assert (<= 0 tagged_discr__t__y__first__bit2))
(assert (< tagged_discr__t__y__first__bit2 tagged_discr__t__y__last__bit2))
(assert (<= 0 tagged_discr__t__y__position2))
(declare-const tagged_discr__u1__w__first__bit1 Int)
(declare-const tagged_discr__u1__w__last__bit1 Int)
(declare-const tagged_discr__u1__w__position1 Int)
(assert (<= 0 tagged_discr__u1__w__first__bit1))
(assert (< tagged_discr__u1__w__first__bit1 tagged_discr__u1__w__last__bit1))
(assert (<= 0 tagged_discr__u1__w__position1))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content us_rep1)))))
(define-fun t8b__ref___projection ((a t8b__ref)) us_rep1 (t8b__content a))
(assert true)
(assert true)
(assert (forall ((v us_rep1)) (! (= (to_int1 (is_zero__2 v)) (to_int1 (is_zero__21 us_tag1 v))) :pattern ((is_zero__21 us_tag1 v)))))
(assert (forall ((v us_rep1)) (! (= (to_int1 (is_zero__2 v)) (to_int1 (is_zero__21 us_tag2 v))) :pattern ((is_zero__21 us_tag2 v)))))
(assert (forall ((v us_rep1)) (! (= (= (is_zero__2 v) true) (and (and (not (= (rec__tagged_discr__t__z1 (us_split_fields3 v)) true)) (ite (or (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs2 v))) 0) (= (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs2 v))) 2)) (= (to_rep (rec__tagged_discr__t__x1 (us_split_fields3 v))) 0) (fp.eq (to_rep2 (rec__tagged_discr__t__y1 (us_split_fields3 v))) (fp #b0 #b00000000 #b00000000000000000000000)))) (= (to_rep (rec__tagged_discr__u1__w (us_split_fields3 v))) 0))) :pattern ((is_zero__2 v)))))
(declare-const v__split_discrs us_split_discrs)
(declare-const v__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const r5b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const us_tag3 Int)
(define-fun in_range4 ((rec__tagged_discr__t__discr1 Int) (a us_rep)) Bool (= rec__tagged_discr__t__discr1 (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const tagged_discr__t__discr__first__bit3 Int)
(declare-const tagged_discr__t__discr__last__bit3 Int)
(declare-const tagged_discr__t__discr__position3 Int)
(assert (<= 0 tagged_discr__t__discr__first__bit3))
(assert (< tagged_discr__t__discr__first__bit3 tagged_discr__t__discr__last__bit3))
(assert (<= 0 tagged_discr__t__discr__position3))
(declare-const tagged_discr__t__y__first__bit3 Int)
(declare-const tagged_discr__t__y__last__bit3 Int)
(declare-const tagged_discr__t__y__position3 Int)
(assert (<= 0 tagged_discr__t__y__first__bit3))
(assert (< tagged_discr__t__y__first__bit3 tagged_discr__t__y__last__bit3))
(assert (<= 0 tagged_discr__t__y__position3))
(declare-const tagged_discr__t__z__first__bit3 Int)
(declare-const tagged_discr__t__z__last__bit3 Int)
(declare-const tagged_discr__t__z__position3 Int)
(assert (<= 0 tagged_discr__t__z__first__bit3))
(assert (< tagged_discr__t__z__first__bit3 tagged_discr__t__z__last__bit3))
(assert (<= 0 tagged_discr__t__z__position3))
(declare-const tagged_discr__t__x__first__bit3 Int)
(declare-const tagged_discr__t__x__last__bit3 Int)
(declare-const tagged_discr__t__x__position3 Int)
(assert (<= 0 tagged_discr__t__x__first__bit3))
(assert (< tagged_discr__t__x__first__bit3 tagged_discr__t__x__last__bit3))
(assert (<= 0 tagged_discr__t__x__position3))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content us_rep)))))
(define-fun t6b__ref___projection ((a t6b__ref)) us_rep (t6b__content a))
(declare-const r7b us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_51 Float32) (temp___is_init_48 Bool) (temp___skip_constant_49 Bool) (temp___do_toplevel_50 Bool)) Bool (=> (or (= temp___is_init_48 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_51)))
(declare-const v__split_fields integer)
(declare-const v__split_fields1 Bool)
(declare-const v__split_fields2 integer)
(declare-const v__split_fields3 float)
(declare-const v__split_fields4 us_private)
(declare-const o e)
(declare-const o1 integer)
(declare-const o2 Bool)
(declare-const o3 integer)
(declare-const o4 float)
(declare-const o5 us_private)
(declare-const o6 e)
(declare-const tagged_discr__init__2__R7b__assume e)
(declare-const tagged_discr__init__2__R7b__assume1 Bool)
(declare-const tagged_discr__init__2__R7b__assume2 integer)
(declare-const tagged_discr__init__2__R7b__assume3 float)
(declare-const tagged_discr__init__2__R7b__assume4 us_private)
(declare-const tagged_discr__init__2__R7b__assume5 Int)
(declare-const o7 integer)
(declare-const o8 integer)
(declare-const o9 Bool)
(declare-const o10 integer)
(declare-const o11 float)
(declare-const o12 us_private)
(declare-const temp___211 e)
(declare-const temp___2111 integer)
(declare-const temp___2112 Bool)
(declare-const temp___2113 integer)
(declare-const temp___2114 float)
(declare-const temp___2115 us_private)
(declare-const temp___2116 Int)
(declare-const usq_ e)
(declare-const usq_1 integer)
(declare-const usq_2 Bool)
(declare-const usq_3 integer)
(declare-const usq_4 float)
(declare-const usq_5 us_private)
(declare-const usq_6 Int)
(declare-const temp___213 e)
(declare-const temp___2131 integer)
(declare-const temp___2132 Bool)
(declare-const temp___2133 integer)
(declare-const temp___2134 float)
(declare-const temp___2135 us_private)
(declare-const temp___2136 Int)
(declare-const result integer)
(declare-const result1 Bool)
(declare-const result2 integer)
(declare-const result3 float)
(declare-const result4 us_private)
(declare-const v__split_fields5 integer)
(declare-const v__split_fields6 Bool)
(declare-const v__split_fields7 integer)
(declare-const v__split_fields8 float)
(declare-const v__split_fields9 us_private)
(declare-const v__split_fields10 integer)
(declare-const v__split_fields11 Bool)
(declare-const v__split_fields12 integer)
(declare-const v__split_fields13 float)
(declare-const v__split_fields14 us_private)
(declare-const v__split_fields15 us_split_fields2)
(assert (= (to_rep1 (rec__tagged_discr__t__discr v__split_discrs)) 0))
(assert (= (to_rep1 (rec__tagged_discr__t__discr v__split_discrs)) r5b))
(assert (in_range2 r5b))
(assert (= (to_rep o1) 0))
(assert (= (of_int 0) o2))
(assert (= o1 o3))
(assert (= dummy1 o4))
(assert (= us_null_ext__ o5))
(assert (= (to_rep1 o) 0))
(assert (= o o6))
(assert (= tagged_discr__init__2__R7b__assume o6))
(assert (= tagged_discr__init__2__R7b__assume1 o2))
(assert (= tagged_discr__init__2__R7b__assume2 o3))
(assert (= tagged_discr__init__2__R7b__assume3 o4))
(assert (= tagged_discr__init__2__R7b__assume4 o5))
(assert (= us_tag3 tagged_discr__init__2__R7b__assume5))
(assert (= (mk___rep (mk___split_discrs tagged_discr__init__2__R7b__assume) (mk___split_fields tagged_discr__init__2__R7b__assume1 tagged_discr__init__2__R7b__assume2 tagged_discr__init__2__R7b__assume3 tagged_discr__init__2__R7b__assume4) us_tag3) r7b))
(assert (= 0 (to_rep1 (rec__tagged_discr__t__discr (us_split_discrs1 r7b)))))
(assert (= (to_rep o7) 0))
(assert (= o7 o8))
(assert (= (rec__tagged_discr__t__z (us_split_fields1 r7b)) o9))
(assert (= (rec__tagged_discr__t__x (us_split_fields1 r7b)) o10))
(assert (= (rec__tagged_discr__t__y (us_split_fields1 r7b)) o11))
(assert (= us_null_ext__ o12))
(assert (= (us_split_discrs1 r7b) (mk___split_discrs temp___211)))
(assert (= temp___2111 o8))
(assert (= temp___2112 o9))
(assert (= temp___2113 o10))
(assert (= temp___2114 o11))
(assert (= temp___2115 o12))
(assert (= us_tag2 temp___2116))
(assert (= temp___211 (rec__tagged_discr__t__discr v__split_discrs)))
(assert (= (mk___rep1 (mk___split_discrs usq_) (mk___split_fields1 usq_1 usq_2 usq_3 usq_4 usq_5) usq_6) (mk___rep1 (mk___split_discrs temp___211) (mk___split_fields1 temp___2111 temp___2112 temp___2113 temp___2114 temp___2115) temp___2116)))
(assert (= usq_ temp___213))
(assert (= usq_1 temp___2131))
(assert (= usq_2 temp___2132))
(assert (= usq_3 temp___2133))
(assert (= usq_4 temp___2134))
(assert (= usq_5 temp___2135))
(assert (= v__attr__tag temp___2136))
(assert (= result v__split_fields))
(assert (= result1 v__split_fields1))
(assert (= result2 v__split_fields2))
(assert (= result3 v__split_fields3))
(assert (= result4 v__split_fields4))
(assert (= temp___2131 v__split_fields5))
(assert (= temp___2132 v__split_fields6))
(assert (= temp___2133 v__split_fields7))
(assert (= temp___2134 v__split_fields8))
(assert (= temp___2135 v__split_fields9))
(assert (= v__split_discrs (mk___split_discrs temp___213)))
(assert (= v__split_fields10 v__split_fields5))
(assert (= v__split_fields11 v__split_fields6))
(assert (= v__split_fields12 v__split_fields7))
(assert (= v__split_fields13 v__split_fields8))
(assert (= v__split_fields14 v__split_fields9))
(assert (= v__split_fields15 (mk___split_fields1 v__split_fields5 v__split_fields6 v__split_fields7 v__split_fields8 v__split_fields9)))
(assert (not (= (is_zero__2 (mk___rep1 v__split_discrs (mk___split_fields1 v__split_fields10 v__split_fields11 v__split_fields12 v__split_fields13 v__split_fields14) v__attr__tag)) true)))
(check-sat)
(exit)
