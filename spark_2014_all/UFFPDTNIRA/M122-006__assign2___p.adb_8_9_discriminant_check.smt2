(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)
(declare-fun user_eq1 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy1 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-sort enum 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (enum enum) Bool)
(declare-const dummy2 enum)
(declare-datatypes () ((enum__ref (mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))
(declare-fun to_rep1 (enum) Int)
(declare-fun of_rep1 (Int) enum)
(assert (forall ((x enum)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x enum)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-fun to_rep2 (float) Float32)
(declare-fun of_rep2 (Float32) float)
(assert (forall ((x float)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__types__r__i enum)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) enum (rec__types__r__i a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__types__r__x integer) (rec__types__r__y float)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer (rec__types__r__x a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun types__r__x__pred ((a us_rep)) Bool (= (to_rep1 (rec__types__r__i (us_split_discrs1 a))) 0))
(define-fun types__r__y__pred ((a us_rep)) Bool (= (to_rep1 (rec__types__r__i (us_split_discrs1 a))) 1))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__types__r__i (us_split_discrs1 a))) (to_rep1 (rec__types__r__i (us_split_discrs1 b)))) (and (=> (types__r__x__pred a) (= (to_rep (rec__types__r__x (us_split_fields1 a))) (to_rep (rec__types__r__x (us_split_fields1 b))))) (=> (types__r__y__pred a) (= (to_rep2 (rec__types__r__y (us_split_fields1 a))) (to_rep2 (rec__types__r__y (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const types__r__i__first__bit Int)
(declare-const types__r__i__last__bit Int)
(declare-const types__r__i__position Int)
(assert (<= 0 types__r__i__first__bit))
(assert (< types__r__i__first__bit types__r__i__last__bit))
(assert (<= 0 types__r__i__position))
(declare-const types__r__x__first__bit Int)
(declare-const types__r__x__last__bit Int)
(declare-const types__r__x__position Int)
(assert (<= 0 types__r__x__first__bit))
(assert (< types__r__x__first__bit types__r__x__last__bit))
(assert (<= 0 types__r__x__position))
(declare-const types__r__y__first__bit Int)
(declare-const types__r__y__last__bit Int)
(declare-const types__r__y__position Int)
(assert (<= 0 types__r__y__first__bit))
(assert (< types__r__y__first__bit types__r__y__last__bit))
(assert (<= 0 types__r__y__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))
(define-fun default_initial_assumption ((temp___expr_167 us_rep) (temp___skip_top_level_168 Bool)) Bool (and (= (attr__constrained temp___expr_167) false) (= (to_rep1 (rec__types__r__i (us_split_discrs1 temp___expr_167))) 0)))
(define-fun in_range2 ((rec__types__r__i1 Int) (a us_rep)) Bool (= rec__types__r__i1 (to_rep1 (rec__types__r__i (us_split_discrs1 a)))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const types__r__i__first__bit1 Int)
(declare-const types__r__i__last__bit1 Int)
(declare-const types__r__i__position1 Int)
(assert (<= 0 types__r__i__first__bit1))
(assert (< types__r__i__first__bit1 types__r__i__last__bit1))
(assert (<= 0 types__r__i__position1))
(declare-const types__r__y__first__bit1 Int)
(declare-const types__r__y__last__bit1 Int)
(declare-const types__r__y__position1 Int)
(assert (<= 0 types__r__y__first__bit1))
(assert (< types__r__y__first__bit1 types__r__y__last__bit1))
(assert (<= 0 types__r__y__position1))
(declare-const types__r__x__first__bit1 Int)
(declare-const types__r__x__last__bit1 Int)
(declare-const types__r__x__position1 Int)
(assert (<= 0 types__r__x__first__bit1))
(assert (< types__r__x__first__bit1 types__r__x__last__bit1))
(assert (<= 0 types__r__x__position1))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep (t1b__content a))
(declare-const x__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun in_range3 ((rec__types__r__i1 Int) (a us_rep)) Bool (= rec__types__r__i1 (to_rep1 (rec__types__r__i (us_split_discrs1 a)))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const types__r__i__first__bit2 Int)
(declare-const types__r__i__last__bit2 Int)
(declare-const types__r__i__position2 Int)
(assert (<= 0 types__r__i__first__bit2))
(assert (< types__r__i__first__bit2 types__r__i__last__bit2))
(assert (<= 0 types__r__i__position2))
(declare-const types__r__y__first__bit2 Int)
(declare-const types__r__y__last__bit2 Int)
(declare-const types__r__y__position2 Int)
(assert (<= 0 types__r__y__first__bit2))
(assert (< types__r__y__first__bit2 types__r__y__last__bit2))
(assert (<= 0 types__r__y__position2))
(declare-const types__r__x__first__bit2 Int)
(declare-const types__r__x__last__bit2 Int)
(declare-const types__r__x__position2 Int)
(assert (<= 0 types__r__x__first__bit2))
(assert (< types__r__x__first__bit2 types__r__x__last__bit2))
(assert (<= 0 types__r__x__position2))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content us_rep)))))
(define-fun t2b__ref___projection ((a t2b__ref)) us_rep (t2b__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(define-fun dynamic_invariant2 ((temp___expr_158 Int) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (<= 0 1)) (in_range1 temp___expr_158)))
(declare-const x__split_fields integer)
(declare-const x__split_fields1 float)
(declare-const x__split_discrs enum)
(declare-const o enum)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 float)
(declare-const o4 enum)
(declare-const p__good__x__assume enum)
(declare-const p__good__x__assume1 integer)
(declare-const p__good__x__assume2 float)
(declare-const p__good__x__assume3 Bool)
(declare-const o5 enum)
(declare-const o6 integer)
(declare-const o7 integer)
(declare-const o8 float)
(declare-const o9 enum)
(declare-const temp___172 enum)
(declare-const temp___1721 integer)
(declare-const temp___1722 float)
(declare-const temp___1723 Bool)
(declare-const result integer)
(declare-const result1 float)
(declare-const x__split_fields2 integer)
(declare-const x__split_fields3 float)
(declare-const result2 enum)
(declare-const x__split_discrs1 enum)
(assert (= (to_rep o1) 1))
(assert (= o1 o2))
(assert (= dummy1 o3))
(assert (= (to_rep1 o) 0))
(assert (= o o4))
(assert (= p__good__x__assume o4))
(assert (= p__good__x__assume1 o2))
(assert (= p__good__x__assume2 o3))
(assert (= true p__good__x__assume3))
(assert (= result x__split_fields))
(assert (= result1 x__split_fields1))
(assert (= p__good__x__assume1 x__split_fields2))
(assert (= p__good__x__assume2 x__split_fields3))
(assert (= result2 x__split_discrs))
(assert (= p__good__x__assume x__split_discrs1))
(assert (= x__attr__constrained false))
(assert (= (to_rep o6) 2))
(assert (= o6 o7))
(assert (= dummy1 o8))
(assert (= (to_rep1 o5) 0))
(assert (= o5 o9))
(assert (= temp___172 o9))
(assert (= temp___1721 o7))
(assert (= temp___1722 o8))
(assert (= true temp___1723))
(assert (= x__attr__constrained true))
(assert (not (= temp___172 x__split_discrs1)))
(check-sat)
(exit)
