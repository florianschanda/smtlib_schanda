(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort float 0)
(declare-fun user_eq1 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy1 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-fun to_rep1 (float) Float32)
(declare-fun of_rep1 (Float32) float)
(assert (forall ((x float)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x float)) (! (fp.isFinite32 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Float32)) (! (=> (fp.isFinite32 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__classwide__t__z Bool) (rec__classwide__t__x integer) (rec__classwide__t__y float) (rec__ext__ us_private)))))
(define-fun us_split_fields_Z__projection ((a us_split_fields)) Bool (rec__classwide__t__z a))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer (rec__classwide__t__x a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (rec__classwide__t__z (us_split_fields1 a)) (rec__classwide__t__z (us_split_fields1 b))) (= (to_rep (rec__classwide__t__x (us_split_fields1 a))) (to_rep (rec__classwide__t__x (us_split_fields1 b))))) (= (to_rep1 (rec__classwide__t__y (us_split_fields1 a))) (to_rep1 (rec__classwide__t__y (us_split_fields1 b))))) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const classwide__t__z__first__bit Int)
(declare-const classwide__t__z__last__bit Int)
(declare-const classwide__t__z__position Int)
(assert (<= 0 classwide__t__z__first__bit))
(assert (< classwide__t__z__first__bit classwide__t__z__last__bit))
(assert (<= 0 classwide__t__z__position))
(declare-const classwide__t__x__first__bit Int)
(declare-const classwide__t__x__last__bit Int)
(declare-const classwide__t__x__position Int)
(assert (<= 0 classwide__t__x__first__bit))
(assert (< classwide__t__x__first__bit classwide__t__x__last__bit))
(assert (<= 0 classwide__t__x__position))
(declare-const classwide__t__y__first__bit Int)
(declare-const classwide__t__y__last__bit Int)
(declare-const classwide__t__y__position Int)
(assert (<= 0 classwide__t__y__first__bit))
(assert (< classwide__t__y__first__bit classwide__t__y__last__bit))
(assert (<= 0 classwide__t__y__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 us_rep)))))
(define-fun t__ref___projection ((a t__ref1)) us_rep (t__content1 a))
(define-fun default_initial_assumption ((temp___expr_159 us_rep) (temp___skip_top_level_160 Bool)) Bool (= (attr__tag temp___expr_159) us_tag))
(declare-fun d_is_zero (us_rep) Bool)
(declare-fun d_is_zero__function_guard (Bool us_rep) Bool)
(declare-fun d_is_zero1 (Int us_rep) Bool)
(declare-fun d_is_zero__function_guard1 (Bool Int us_rep) Bool)
(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)
(declare-fun c_is_zero (us_rep) Bool)
(declare-fun c_is_zero__function_guard (Bool us_rep) Bool)
(declare-const us_tag1 Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const classwide__t__z__first__bit1 Int)
(declare-const classwide__t__z__last__bit1 Int)
(declare-const classwide__t__z__position1 Int)
(assert (<= 0 classwide__t__z__first__bit1))
(assert (< classwide__t__z__first__bit1 classwide__t__z__last__bit1))
(assert (<= 0 classwide__t__z__position1))
(declare-const classwide__t__x__first__bit1 Int)
(declare-const classwide__t__x__last__bit1 Int)
(declare-const classwide__t__x__position1 Int)
(assert (<= 0 classwide__t__x__first__bit1))
(assert (< classwide__t__x__first__bit1 classwide__t__x__last__bit1))
(assert (<= 0 classwide__t__x__position1))
(declare-const classwide__t__y__first__bit1 Int)
(declare-const classwide__t__y__last__bit1 Int)
(declare-const classwide__t__y__position1 Int)
(assert (<= 0 classwide__t__y__first__bit1))
(assert (< classwide__t__y__first__bit1 classwide__t__y__last__bit1))
(assert (<= 0 classwide__t__y__position1))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((u1__ref (mk_u1__ref (u1__content us_rep)))))
(define-fun u1__ref___projection ((a u1__ref)) us_rep (u1__content a))
(declare-fun d_is_zero__2 (us_rep) Bool)
(declare-fun d_is_zero__2__function_guard (Bool us_rep) Bool)
(declare-fun d_is_zero__21 (Int us_rep) Bool)
(declare-fun d_is_zero__2__function_guard1 (Bool Int us_rep) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__classwide__u2__w integer) (rec__classwide__u2__xx integer) (rec__classwide__u2__yy float) (rec__classwide__t__z1 Bool) (rec__classwide__t__x1 integer) (rec__classwide__t__y1 float) (rec__ext__1 us_private)))))
(define-fun us_split_fields_W__projection ((a us_split_fields2)) integer (rec__classwide__u2__w a))
(define-fun us_split_fields_XX__projection ((a us_split_fields2)) integer (rec__classwide__u2__xx a))
(define-fun us_split_fields_Z__2__projection ((a us_split_fields2)) Bool (rec__classwide__t__z1 a))
(define-fun us_split_fields_X__2__projection ((a us_split_fields2)) integer (rec__classwide__t__x1 a))
(define-fun us_split_fields___2__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___4__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (integer integer float us_private) us_private)
(declare-fun extract__w (us_private) integer)
(assert (forall ((w integer) (xx integer)) (forall ((yy float)) (forall ((rec__ext__2 us_private)) (= (extract__w (hide_ext__ w xx yy rec__ext__2)) w)))))
(declare-fun extract__xx (us_private) integer)
(assert (forall ((w integer) (xx integer)) (forall ((yy float)) (forall ((rec__ext__2 us_private)) (= (extract__xx (hide_ext__ w xx yy rec__ext__2)) xx)))))
(declare-fun extract__yy (us_private) float)
(assert (forall ((w integer) (xx integer)) (forall ((yy float)) (forall ((rec__ext__2 us_private)) (= (extract__yy (hide_ext__ w xx yy rec__ext__2)) yy)))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__classwide__t__z1 (us_split_fields3 a)) (rec__classwide__t__x1 (us_split_fields3 a)) (rec__classwide__t__y1 (us_split_fields3 a)) (hide_ext__ (rec__classwide__u2__w (us_split_fields3 a)) (rec__classwide__u2__xx (us_split_fields3 a)) (rec__classwide__u2__yy (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__w (rec__ext__ (us_split_fields1 r))) (extract__xx (rec__ext__ (us_split_fields1 r))) (extract__yy (rec__ext__ (us_split_fields1 r))) (rec__classwide__t__z (us_split_fields1 r)) (rec__classwide__t__x (us_split_fields1 r)) (rec__classwide__t__y (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (and (and (= (to_rep (rec__classwide__u2__w (us_split_fields3 a))) (to_rep (rec__classwide__u2__w (us_split_fields3 b)))) (= (to_rep (rec__classwide__u2__xx (us_split_fields3 a))) (to_rep (rec__classwide__u2__xx (us_split_fields3 b))))) (= (to_rep1 (rec__classwide__u2__yy (us_split_fields3 a))) (to_rep1 (rec__classwide__u2__yy (us_split_fields3 b))))) (= (rec__classwide__t__z1 (us_split_fields3 a)) (rec__classwide__t__z1 (us_split_fields3 b)))) (= (to_rep (rec__classwide__t__x1 (us_split_fields3 a))) (to_rep (rec__classwide__t__x1 (us_split_fields3 b))))) (= (to_rep1 (rec__classwide__t__y1 (us_split_fields3 a))) (to_rep1 (rec__classwide__t__y1 (us_split_fields3 b))))) true false))
(declare-const us_tag2 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const classwide__u2__w__first__bit Int)
(declare-const classwide__u2__w__last__bit Int)
(declare-const classwide__u2__w__position Int)
(assert (<= 0 classwide__u2__w__first__bit))
(assert (< classwide__u2__w__first__bit classwide__u2__w__last__bit))
(assert (<= 0 classwide__u2__w__position))
(declare-const classwide__u2__xx__first__bit Int)
(declare-const classwide__u2__xx__last__bit Int)
(declare-const classwide__u2__xx__position Int)
(assert (<= 0 classwide__u2__xx__first__bit))
(assert (< classwide__u2__xx__first__bit classwide__u2__xx__last__bit))
(assert (<= 0 classwide__u2__xx__position))
(declare-const classwide__u2__yy__first__bit Int)
(declare-const classwide__u2__yy__last__bit Int)
(declare-const classwide__u2__yy__position Int)
(assert (<= 0 classwide__u2__yy__first__bit))
(assert (< classwide__u2__yy__first__bit classwide__u2__yy__last__bit))
(assert (<= 0 classwide__u2__yy__position))
(declare-const classwide__t__z__first__bit2 Int)
(declare-const classwide__t__z__last__bit2 Int)
(declare-const classwide__t__z__position2 Int)
(assert (<= 0 classwide__t__z__first__bit2))
(assert (< classwide__t__z__first__bit2 classwide__t__z__last__bit2))
(assert (<= 0 classwide__t__z__position2))
(declare-const classwide__t__x__first__bit2 Int)
(declare-const classwide__t__x__last__bit2 Int)
(declare-const classwide__t__x__position2 Int)
(assert (<= 0 classwide__t__x__first__bit2))
(assert (< classwide__t__x__first__bit2 classwide__t__x__last__bit2))
(assert (<= 0 classwide__t__x__position2))
(declare-const classwide__t__y__first__bit2 Int)
(declare-const classwide__t__y__last__bit2 Int)
(declare-const classwide__t__y__position2 Int)
(assert (<= 0 classwide__t__y__first__bit2))
(assert (< classwide__t__y__first__bit2 classwide__t__y__last__bit2))
(assert (<= 0 classwide__t__y__position2))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((u2__ref (mk_u2__ref (u2__content us_rep1)))))
(define-fun u2__ref___projection ((a u2__ref)) us_rep1 (u2__content a))
(assert true)
(assert true)
(assert (forall ((v us_rep)) (! (= (ite (d_is_zero v) 1 0) (ite (d_is_zero1 us_tag v) 1 0)) :pattern ((d_is_zero1 us_tag v)))))
(assert (forall ((v us_rep)) (! (= (ite (d_is_zero__2 v) 1 0) (ite (d_is_zero1 us_tag1 v) 1 0)) :pattern ((d_is_zero1 us_tag1 v)))))
(assert (forall ((v us_rep)) (! (= (ite (d_is_zero v) 1 0) (ite (d_is_zero1 us_tag2 v) 1 0)) :pattern ((d_is_zero1 us_tag2 v)))))
(assert (forall ((v us_rep)) (! (= (= (d_is_zero v) true) (= (c_is_zero v) true)) :pattern ((d_is_zero v)))))
(declare-const v__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(declare-fun is_zero (us_rep) Bool)
(declare-fun is_zero__function_guard (Bool us_rep) Bool)
(declare-fun is_zero1 (Int us_rep) Bool)
(declare-fun is_zero__function_guard1 (Bool Int us_rep) Bool)
(declare-fun is_zero__2 (us_rep) Bool)
(declare-fun is_zero__2__function_guard (Bool us_rep) Bool)
(declare-fun is_zero__21 (Int us_rep) Bool)
(declare-fun is_zero__2__function_guard1 (Bool Int us_rep) Bool)
(declare-fun is_zero__3 (us_rep1) Bool)
(declare-fun is_zero__3__function_guard (Bool us_rep1) Bool)
(declare-fun is_zero__31 (Int us_rep1) Bool)
(declare-fun is_zero__3__function_guard1 (Bool Int us_rep1) Bool)
(assert true)
(assert true)
(assert (forall ((v us_rep)) (! (= (ite (is_zero v) 1 0) (ite (is_zero1 us_tag v) 1 0)) :pattern ((is_zero1 us_tag v)))))
(assert (forall ((v us_rep)) (! (= (ite (is_zero__2 v) 1 0) (ite (is_zero1 us_tag1 v) 1 0)) :pattern ((is_zero1 us_tag1 v)))))
(assert (forall ((v us_rep)) (! (= (ite (is_zero__3 (of_base v)) 1 0) (ite (is_zero1 us_tag2 v) 1 0)) :pattern ((is_zero1 us_tag2 v)))))
(assert (forall ((v us_rep)) (! (= (= (is_zero v) true) (and (and (not (= (rec__classwide__t__z (us_split_fields1 v)) true)) (= (to_rep (rec__classwide__t__x (us_split_fields1 v))) 0)) (fp.eq (to_rep1 (rec__classwide__t__y (us_split_fields1 v))) (fp #b0 #b00000000 #b00000000000000000000000)))) :pattern ((is_zero v)))))
(assert true)
(assert (forall ((v us_rep)) (! (= (= (c_is_zero v) true) (= (is_zero1 (attr__tag v) v) true)) :pattern ((c_is_zero v)))))
(define-fun default_initial_assumption1 ((temp___expr_192 us_rep) (temp___skip_top_level_193 Bool)) Bool (= (attr__tag temp___expr_192) us_tag1))
(assert true)
(assert true)
(assert (forall ((v us_rep)) (! (= (ite (is_zero__2 v) 1 0) (ite (is_zero__21 us_tag1 v) 1 0)) :pattern ((is_zero__21 us_tag1 v)))))
(assert (forall ((v us_rep)) (! (= (= (is_zero__2 v) true) (and (and (not (= (rec__classwide__t__z (us_split_fields1 v)) true)) (= (to_rep (rec__classwide__t__x (us_split_fields1 v))) 0)) (fp.eq (to_rep1 (rec__classwide__t__y (us_split_fields1 v))) (fp #b0 #b00000000 #b00000000000000000000000)))) :pattern ((is_zero__2 v)))))
(declare-fun c_u1_is_zero (us_rep) Bool)
(declare-fun c_u1_is_zero__function_guard (Bool us_rep) Bool)
(assert true)
(assert (forall ((v us_rep)) (! (= (= (c_u1_is_zero v) true) (= (is_zero__21 (attr__tag v) v) true)) :pattern ((c_u1_is_zero v)))))
(assert true)
(assert true)
(assert (forall ((v us_rep)) (! (= (ite (d_is_zero__2 v) 1 0) (ite (d_is_zero__21 us_tag1 v) 1 0)) :pattern ((d_is_zero__21 us_tag1 v)))))
(assert (forall ((v us_rep)) (! (= (= (d_is_zero__2 v) true) (= (c_u1_is_zero v) true)) :pattern ((d_is_zero__2 v)))))
(define-fun default_initial_assumption2 ((temp___expr_214 us_rep1) (temp___skip_top_level_215 Bool)) Bool (= (attr__tag1 temp___expr_214) us_tag2))
(assert true)
(assert true)
(assert (forall ((v us_rep1)) (! (= (ite (is_zero__3 v) 1 0) (ite (is_zero__31 us_tag2 v) 1 0)) :pattern ((is_zero__31 us_tag2 v)))))
(assert (forall ((v us_rep1)) (! (= (= (is_zero__3 v) true) (and (and (and (= (is_zero (to_base v)) true) (= (to_rep (rec__classwide__u2__w (us_split_fields3 v))) 0)) (= (to_rep (rec__classwide__u2__xx (us_split_fields3 v))) 0)) (fp.eq (to_rep1 (rec__classwide__u2__yy (us_split_fields3 v))) (fp #b0 #b00000000 #b00000000000000000000000)))) :pattern ((is_zero__3 v)))))
(declare-const v__split_fields Bool)
(declare-const v__split_fields1 integer)
(declare-const v__split_fields2 float)
(declare-const v__split_fields3 us_private)
(declare-const classwide__c_update__v__fields Bool)
(declare-const classwide__c_update__v__fields1 integer)
(declare-const classwide__c_update__v__fields2 float)
(declare-const classwide__c_update__v__fields3 us_private)
(declare-const result Bool)
(declare-const result1 integer)
(declare-const result2 float)
(declare-const result3 us_private)
(declare-const v__split_fields4 Bool)
(declare-const v__split_fields5 integer)
(declare-const v__split_fields6 float)
(declare-const v__split_fields7 us_private)
(declare-const v__split_fields8 Bool)
(declare-const v__split_fields9 integer)
(declare-const v__split_fields10 float)
(declare-const v__split_fields11 us_private)
(declare-const v__split_fields12 Bool)
(declare-const v__split_fields13 integer)
(declare-const v__split_fields14 float)
(declare-const v__split_fields15 us_private)
(define-fun classwide__c_update__v__fields4 () us_split_fields (mk___split_fields classwide__c_update__v__fields classwide__c_update__v__fields1 classwide__c_update__v__fields2 classwide__c_update__v__fields3))
(assert (= (c_is_zero (mk___rep classwide__c_update__v__fields4 v__attr__tag)) true))
(assert (= result v__split_fields))
(assert (= result1 v__split_fields1))
(assert (= result2 v__split_fields2))
(assert (= result3 v__split_fields3))
(assert (= (mk___split_fields v__split_fields4 v__split_fields5 v__split_fields6 v__split_fields7) classwide__c_update__v__fields4))
(assert (= v__split_fields8 v__split_fields4))
(assert (= v__split_fields9 v__split_fields5))
(assert (= v__split_fields10 v__split_fields6))
(assert (= v__split_fields11 v__split_fields7))
(assert (= v__split_fields12 v__split_fields4))
(assert (= v__split_fields13 v__split_fields5))
(assert (= v__split_fields14 v__split_fields6))
(assert (= v__split_fields15 v__split_fields7))
(assert (not (= (d_is_zero (mk___rep (mk___split_fields v__split_fields8 v__split_fields9 v__split_fields10 v__split_fields11) v__attr__tag)) true)))
(check-sat)
(exit)
