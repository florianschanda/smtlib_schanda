(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((real_of_int(truncate(x)) <= x) and
  (x <  real_of_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((real_of_int((truncate(x) - 1)) <  x) and
  (x <= real_of_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= real_of_int(truncate(x))) and
  (real_of_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(real_of_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((real_of_int(floor(x)) <= x) and
  (x <  real_of_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((real_of_int((ceil(x) - 1)) <  x) and
  (x <= real_of_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t

logic add : fpa_rounding_mode, t, t -> t

logic sub : fpa_rounding_mode, t, t -> t

logic mul : fpa_rounding_mode, t, t -> t

logic div : fpa_rounding_mode, t, t -> t

logic abs : t -> t

logic neg : t -> t

logic fma : fpa_rounding_mode, t, t, t -> t

logic sqrt : fpa_rounding_mode, t -> t

logic roundToIntegral : fpa_rounding_mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : fpa_rounding_mode, int -> t

logic to_int : fpa_rounding_mode, t -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = real_of_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) ->
  in_range(float32(m,x))))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom eq_special :
  (forall x:t. forall y:t. (eq(x, y) -> (is_not_nan(x) and (is_not_nan(y) and
  ((tqtisFinite(x) and tqtisFinite(y)) or (is_infinite(x) and
  (is_infinite(y) and same_sign(x, y))))))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom le_special :
  (forall x:t. forall y:t [le(x, y)]. (le(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and is_not_nan(y)) or
  (is_not_nan(x) and is_plus_infinity(y))))))

axiom lt_special :
  (forall x:t. forall y:t [lt(x, y)]. (lt(x, y) -> ((tqtisFinite(x) and
  tqtisFinite(y)) or ((is_minus_infinity(x) and (is_not_nan(y) and
  (not is_minus_infinity(y)))) or (is_not_nan(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and
  ((m = Down) -> ((is_positive(x) -> (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127))) and ((not is_positive(x)) ->
  is_infinite(x))))) and ((m = ToZero) -> ((is_positive(x) ->
  (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) -> (tqtisFinite(add(m, x,
  y)) and (tqtreal(add(m, x, y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) -> (tqtisFinite(sub(m, x,
  y)) and (tqtreal(sub(m, x, y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) -> (tqtisFinite(mul(m, x,
  y)) and (tqtreal(mul(m, x, y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) ->
  (in_range(float32(m,(tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x,
  y)) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (in_range(float32(m,(tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> (tqtisFinite(abs(x)) and
  ((tqtreal(abs(x)) = abs_real(tqtreal(x))) and is_positive(abs(x))))))

axiom abs_finite_rev :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) -> (tqtisFinite(x) and
  (tqtreal(abs(x)) = abs_real(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(x) -> (tqtisFinite(y) -> (tqtisFinite(z) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) ->
  (tqtisFinite(fma(m, x, y, z)) and (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and
  (tqtisFinite(y) and tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  (in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and
  (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

axiom sqrt_finite :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(x) ->
  ((0.0 <= tqtreal(x)) -> (tqtisFinite(sqrt(m, x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom add_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(add(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(add(m, x, y)) and
  same_sign(add(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  (is_infinite(add(m, x, y)) and same_sign(add(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and diff_sign(x, y))) ->
  is_nan(add(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) + tqtreal(y))))))) ->
  (same_sign_real(add(m, x, y), (tqtreal(x) + tqtreal(y))) and
  overflow_value(m, add(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((same_sign(x, y) -> same_sign(add(m, x, y), x)) and
  ((not same_sign(x, y)) -> sign_zero_result(m, add(m, x, y))))))))))))

axiom sub_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(sub(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> (is_infinite(sub(m, x, y)) and
  diff_sign(sub(m, x, y), y))) and (((is_infinite(x) and tqtisFinite(y)) ->
  (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y), x))) and
  (((is_infinite(x) and (is_infinite(y) and same_sign(x, y))) ->
  is_nan(sub(m, x, y))) and (((is_infinite(x) and (is_infinite(y) and
  diff_sign(x, y))) -> (is_infinite(sub(m, x, y)) and same_sign(sub(m, x, y),
  x))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) - tqtreal(y))))))) ->
  (same_sign_real(sub(m, x, y), (tqtreal(x) - tqtreal(y))) and
  overflow_value(m, sub(m, x, y)))) and ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((diff_sign(x, y) -> same_sign(sub(m, x, y), x)) and
  ((not diff_sign(x, y)) -> sign_zero_result(m, sub(m, x, y))))))))))))

axiom mul_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(mul(m, x, y))) and (((is_zero(x) and
  is_infinite(y)) -> is_nan(mul(m, x, y))) and (((tqtisFinite(x) and
  (is_infinite(y) and (not is_zero(x)))) -> is_infinite(mul(m, x, y))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(mul(m, x, y))) and
  (((is_infinite(x) and (tqtisFinite(y) and (not is_zero(y)))) ->
  is_infinite(mul(m, x, y))) and (((is_infinite(x) and is_infinite(y)) ->
  is_infinite(mul(m, x, y))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (not in_range(float32(m,(tqtreal(x) * tqtreal(y))))))) -> overflow_value(m,
  mul(m, x, y))) and ((not is_nan(mul(m, x, y))) -> product_sign(mul(m, x,
  y), x, y))))))))))

axiom div_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (((is_nan(x) or is_nan(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and is_infinite(y)) -> is_zero(div(m, x, y))) and
  (((is_infinite(x) and tqtisFinite(y)) -> is_infinite(div(m, x, y))) and
  (((is_infinite(x) and is_infinite(y)) -> is_nan(div(m, x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  (not in_range(float32(m,(tqtreal(x) / tqtreal(y)))))))) ->
  overflow_value(m, div(m, x, y))) and (((tqtisFinite(x) and (is_zero(y) and
  (not is_zero(x)))) -> is_infinite(div(m, x, y))) and (((is_zero(x) and
  is_zero(y)) -> is_nan(div(m, x, y))) and ((not is_nan(div(m, x, y))) ->
  product_sign(div(m, x, y), x, y))))))))))

axiom neg_special :
  (forall x:t [neg(x)]. ((is_nan(x) -> is_nan(neg(x))) and
  ((is_infinite(x) -> is_infinite(neg(x))) and ((not is_nan(x)) ->
  diff_sign(x, neg(x))))))

axiom abs_special :
  (forall x:t [abs(x)]. ((is_nan(x) -> is_nan(abs(x))) and
  ((is_infinite(x) -> is_infinite(abs(x))) and ((not is_nan(x)) ->
  is_positive(abs(x))))))

axiom fma_special :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (((is_nan(x) or (is_nan(y) or is_nan(z))) -> is_nan(fma(m, x, y,
  z))) and (((is_zero(x) and is_infinite(y)) -> is_nan(fma(m, x, y, z))) and
  (((is_infinite(x) and is_zero(y)) -> is_nan(fma(m, x, y, z))) and
  (((tqtisFinite(x) and ((not is_zero(x)) and (is_infinite(y) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((tqtisFinite(x) and ((not is_zero(x)) and
  (is_infinite(y) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (tqtisFinite(y) and ((not is_zero(y)) and
  tqtisFinite(z)))) -> (is_infinite(fma(m, x, y, z)) and product_sign(fma(m,
  x, y, z), x, y))) and (((is_infinite(x) and (tqtisFinite(y) and
  ((not is_zero(y)) and is_infinite(z)))) -> ((product_sign(z, x, y) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  ((not product_sign(z, x, y)) -> is_nan(fma(m, x, y, z))))) and
  (((is_infinite(x) and (is_infinite(y) and tqtisFinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and product_sign(fma(m, x, y, z), x, y))) and
  (((tqtisFinite(x) and (tqtisFinite(y) and is_infinite(z))) ->
  (is_infinite(fma(m, x, y, z)) and same_sign(fma(m, x, y, z), z))) and
  (((is_infinite(x) and (is_infinite(y) and is_infinite(z))) ->
  ((product_sign(z, x, y) -> (is_infinite(fma(m, x, y, z)) and
  same_sign(fma(m, x, y, z), z))) and ((not product_sign(z, x, y)) ->
  is_nan(fma(m, x, y, z))))) and (((tqtisFinite(x) and (tqtisFinite(y) and
  (tqtisFinite(z) and
  (not in_range(float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))) ->
  (same_sign_real(fma(m, x, y, z),
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) and overflow_value(m, fma(m, x,
  y, z)))) and ((tqtisFinite(x) and (tqtisFinite(y) and tqtisFinite(z))) ->
  ((product_sign(z, x, y) -> same_sign(fma(m, x, y, z), z)) and
  ((not product_sign(z, x, y)) ->
  ((((tqtreal(x) * tqtreal(y)) + tqtreal(z)) = 0.0) -> (((m = Down) ->
  is_negative(fma(m, x, y, z))) and ((not (m = Down)) -> is_positive(fma(m,
  x, y, z))))))))))))))))))))

axiom sqrt_special :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. ((is_nan(x) ->
  is_nan(sqrt(m, x))) and ((is_plus_infinity(x) -> is_plus_infinity(sqrt(m,
  x))) and ((is_minus_infinity(x) -> is_nan(sqrt(m, x))) and
  (((tqtisFinite(x) and (tqtreal(x) <  0.0)) -> is_nan(sqrt(m, x))) and
  ((is_zero(x) -> same_sign(sqrt(m, x), x)) and ((tqtisFinite(x) and
  (0.0 <  tqtreal(x))) -> is_positive(sqrt(m, x)))))))))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t. (tqtisFinite(i) -> ((le(i,
  neg(of_int(m, 16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Up, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Down, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t. (to_int(m, x) = to_int(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int(m, of_int(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) -> (to_int(m,
  neg(x)) = (-to_int(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (in_range(float32(NearestTiesToEven,x)) ->
  ((((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x)) and
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150)))))

axiom round_bound :
  (forall m:fpa_rounding_mode. forall x:real [float32(m,x)].
  (in_range(float32(m,x)) ->
  ((((x - (0x1.0p-23 * abs_real(x))) - 0x1.0p-149) <= float32(m,x)) and
  (float32(m,x) <= ((x + (0x1.0p-23 * abs_real(x))) + 0x1.0p-149)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(NearestTiesToAway, 1))

type t__ref = { t__content : t
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type float1

logic bool_eq2 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq2(x, y)]. ((eq(x, y) -> (bool_eq2(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq2(x, y) = false))))

logic user_eq : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic dummy : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

type t_rate

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 3000.0))

predicate in_range2(x: t) = (tqtisFinite(x) and (le(neg(fliteral1), x) and
  le(x, fliteral1)))

logic bool_eq3 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq3(x, y)]. ((eq(x, y) -> (bool_eq3(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq3(x, y) = false))))

logic user_eq1 : t_rate, t_rate -> bool

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic dummy1 : t_rate

type t_rate__ref = { t_rate__content : t_rate
}

function t_rate__ref___projection(a: t_rate__ref) : t_rate =
  (a).t_rate__content

type t_acc

logic fliteral2 : t

axiom fliteral_axiom2 : (tqtisFinite(fliteral2) and
  (tqtreal(fliteral2) = 16.0))

predicate in_range3(x: t) = (tqtisFinite(x) and (le(neg(fliteral2), x) and
  le(x, fliteral2)))

logic bool_eq4 : t, t -> bool

axiom bool_eq_def4 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. ((eq(x, y) -> (bool_eq4(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq4(x, y) = false))))

logic user_eq2 : t_acc, t_acc -> bool

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic dummy2 : t_acc

type t_acc__ref = { t_acc__content : t_acc
}

function t_acc__ref___projection(a: t_acc__ref) : t_acc = (a).t_acc__content

type t_acc_lifted

predicate in_range4(x: t) = (tqtisFinite(x) and (le(neg(fliteral2), x) and
  le(x, fliteral2)))

logic bool_eq5 : t, t -> bool

axiom bool_eq_def5 :
  (forall x:t. forall y:t [bool_eq5(x, y)]. ((eq(x, y) -> (bool_eq5(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq5(x, y) = false))))

logic user_eq3 : t_acc_lifted, t_acc_lifted -> bool

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic dummy3 : t_acc_lifted

type t_acc_lifted__ref = { t_acc_lifted__content : t_acc_lifted
}

function t_acc_lifted__ref___projection(a: t_acc_lifted__ref) : t_acc_lifted =
  (a).t_acc_lifted__content

type positive_float

logic fliteral3 : t

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 0.0e-1))

logic fliteral4 : t

axiom fliteral_axiom4 : (tqtisFinite(fliteral4) and
  (tqtreal(fliteral4) = 340282346638528859811704183484516925440.0))

predicate in_range5(x: t) = (tqtisFinite(x) and (le(fliteral3, x) and le(x,
  fliteral4)))

logic bool_eq6 : t, t -> bool

axiom bool_eq_def6 :
  (forall x:t. forall y:t [bool_eq6(x, y)]. ((eq(x, y) -> (bool_eq6(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq6(x, y) = false))))

logic user_eq4 : positive_float, positive_float -> bool

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic dummy4 : positive_float

type positive_float__ref = { positive_float__content : positive_float
}

function positive_float__ref___projection(a: positive_float__ref) : positive_float =
  (a).positive_float__content

type t_delta_time

logic fliteral5 : t

axiom fliteral_axiom5 : (tqtisFinite(fliteral5) and
  (tqtreal(fliteral5) = 0.001000000047497451305389404296875))

predicate in_range6(x: t) = (tqtisFinite(x) and (le(fliteral5, x) and le(x,
  fliteral)))

logic bool_eq7 : t, t -> bool

axiom bool_eq_def7 :
  (forall x:t. forall y:t [bool_eq7(x, y)]. ((eq(x, y) -> (bool_eq7(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq7(x, y) = false))))

logic user_eq5 : t_delta_time, t_delta_time -> bool

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic dummy5 : t_delta_time

type t_delta_time__ref = { t_delta_time__content : t_delta_time
}

function t_delta_time__ref___projection(a: t_delta_time__ref) : t_delta_time =
  (a).t_delta_time__content

type t_alpha

predicate in_range7(x: t) = (tqtisFinite(x) and (le(fliteral3, x) and le(x,
  fliteral)))

logic bool_eq8 : t, t -> bool

axiom bool_eq_def8 :
  (forall x:t. forall y:t [bool_eq8(x, y)]. ((eq(x, y) -> (bool_eq8(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq8(x, y) = false))))

logic user_eq6 : t_alpha, t_alpha -> bool

logic attr__ATTRIBUTE_IMAGE7 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t

logic dummy6 : t_alpha

type t_alpha__ref = { t_alpha__content : t_alpha
}

function t_alpha__ref___projection(a: t_alpha__ref) : t_alpha =
  (a).t_alpha__content

type t_quaternion

predicate in_range8(x: t) = (tqtisFinite(x) and (le(neg(fliteral), x) and
  le(x, fliteral)))

logic bool_eq9 : t, t -> bool

axiom bool_eq_def9 :
  (forall x:t. forall y:t [bool_eq9(x, y)]. ((eq(x, y) -> (bool_eq9(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq9(x, y) = false))))

logic user_eq7 : t_quaternion, t_quaternion -> bool

logic attr__ATTRIBUTE_IMAGE8 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> t

logic dummy7 : t_quaternion

type t_quaternion__ref = { t_quaternion__content : t_quaternion
}

function t_quaternion__ref___projection(a: t_quaternion__ref) : t_quaternion =
  (a).t_quaternion__content

logic inv_sqrt : t -> t

logic inv_sqrt__function_guard : t, t -> prop

logic fliteral6 : t

axiom fliteral_axiom6 : (tqtisFinite(fliteral6) and
  (tqtreal(fliteral6) = 0.0000000000000000000000000000000000000000000014012984643248170709237295832899161312802619418765157717570682838897910826858606014866381883621215820312500000000000000000000000))

logic fliteral7 : t

axiom fliteral_axiom7 : (tqtisFinite(fliteral7) and
  (tqtreal(fliteral7) = 200000004008175468544.0))

axiom inv_sqrt__post_axiom :
  (forall x:t [inv_sqrt(x)]. ((tqtisFinite(x) and le(fliteral6, x)) ->
  ((lt(fliteral3, inv_sqrt(x)) and lt(inv_sqrt(x), fliteral7)) and
  tqtisFinite(inv_sqrt(x)))))

logic saturate : t, t, t -> t

logic saturate__function_guard : t, t, t, t -> prop

axiom saturate__post_axiom :
  (forall value:t. forall min_value:t. forall max_value:t [saturate(value,
  min_value, max_value)]. (((tqtisFinite(value) and
  tqtisFinite(min_value)) and tqtisFinite(max_value)) -> (((lt(value,
  min_value) -> eq(saturate(value, min_value, max_value), min_value)) and
  ((not lt(value, min_value)) -> ((lt(max_value, value) -> eq(saturate(value,
  min_value, max_value), max_value)) and ((not lt(max_value, value)) ->
  eq(saturate(value, min_value, max_value), value))))) and
  tqtisFinite(saturate(value, min_value, max_value)))))

logic lift_away_from_zero : t -> t

logic lift_away_from_zero__function_guard : t, t -> prop

axiom lift_away_from_zero__post_axiom :
  (forall x:t [lift_away_from_zero(x)]. (in_range3(x) -> (((eq(x,
  fliteral3) -> eq(lift_away_from_zero(x), fliteral3)) and ((not eq(x,
  fliteral3)) -> (neq(x, fliteral3) -> neq(lift_away_from_zero(x),
  fliteral3)))) and in_range4(lift_away_from_zero(x)))))

logic gx : t

logic attr__ATTRIBUTE_ADDRESS : int

logic gy : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic gz : t

logic attr__ATTRIBUTE_ADDRESS2 : int

logic ax : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic ay : t

logic attr__ATTRIBUTE_ADDRESS4 : int

logic az : t

logic attr__ATTRIBUTE_ADDRESS5 : int

logic dt : t

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c3b : t

logic attr__ATTRIBUTE_ADDRESS17 : int

logic c4b : t

logic attr__ATTRIBUTE_ADDRESS18 : int

logic c5b : t

logic attr__ATTRIBUTE_ADDRESS19 : int

logic c6b : t

logic attr__ATTRIBUTE_ADDRESS20 : int

logic c7b : t

logic attr__ATTRIBUTE_ADDRESS21 : int

logic c8b : t

logic attr__ATTRIBUTE_ADDRESS22 : int

logic c9b : t

logic attr__ATTRIBUTE_ADDRESS23 : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic attr__ATTRIBUTE_ADDRESS25 : int

logic attr__ATTRIBUTE_ADDRESS26 : int

logic attr__ATTRIBUTE_ADDRESS27 : int

logic attr__ATTRIBUTE_ADDRESS28 : int

logic attr__ATTRIBUTE_ADDRESS29 : int

logic attr__ATTRIBUTE_ADDRESS30 : int

logic attr__ATTRIBUTE_ADDRESS31 : int

logic attr__ATTRIBUTE_ADDRESS32 : int

logic attr__ATTRIBUTE_ADDRESS33 : int

logic attr__ATTRIBUTE_ADDRESS34 : int

logic attr__ATTRIBUTE_ADDRESS35 : int

logic attr__ATTRIBUTE_ADDRESS36 : int

logic attr__ATTRIBUTE_ADDRESS37 : int

logic attr__ATTRIBUTE_ADDRESS38 : int

logic attr__ATTRIBUTE_ADDRESS39 : int

logic attr__ATTRIBUTE_ADDRESS40 : int

logic attr__ATTRIBUTE_ADDRESS41 : int

logic attr__ATTRIBUTE_ADDRESS42 : int

logic attr__ATTRIBUTE_ADDRESS43 : int

logic c11b : t

logic attr__ATTRIBUTE_ADDRESS44 : int

logic c12b : t

logic attr__ATTRIBUTE_ADDRESS45 : int

logic c13b : t

logic attr__ATTRIBUTE_ADDRESS46 : int

logic c14b : t

logic attr__ATTRIBUTE_ADDRESS47 : int

logic c15b : t

logic attr__ATTRIBUTE_ADDRESS48 : int

logic c16b : t

logic attr__ATTRIBUTE_ADDRESS49 : int

logic c17b : t

logic attr__ATTRIBUTE_ADDRESS50 : int

logic attr__ATTRIBUTE_ADDRESS51 : int

logic attr__ATTRIBUTE_ADDRESS52 : int

logic attr__ATTRIBUTE_ADDRESS53 : int

logic attr__ATTRIBUTE_ADDRESS54 : int

logic attr__ATTRIBUTE_ADDRESS55 : int

logic attr__ATTRIBUTE_ADDRESS56 : int

logic attr__ATTRIBUTE_ADDRESS57 : int

logic attr__ATTRIBUTE_ADDRESS58 : int

logic attr__ATTRIBUTE_ADDRESS59 : int

logic attr__ATTRIBUTE_ADDRESS60 : int

logic attr__ATTRIBUTE_ADDRESS61 : int

logic attr__ATTRIBUTE_ADDRESS62 : int

logic attr__ATTRIBUTE_ADDRESS63 : int

logic attr__ATTRIBUTE_ADDRESS64 : int

logic attr__ATTRIBUTE_ADDRESS65 : int

logic attr__ATTRIBUTE_ADDRESS66 : int

logic attr__ATTRIBUTE_ADDRESS67 : int

logic attr__ATTRIBUTE_ADDRESS68 : int

logic attr__ATTRIBUTE_ADDRESS69 : int

logic attr__ATTRIBUTE_ADDRESS70 : int

logic attr__ATTRIBUTE_ADDRESS71 : int

logic attr__ATTRIBUTE_ADDRESS72 : int

logic attr__ATTRIBUTE_ADDRESS73 : int

logic attr__ATTRIBUTE_ADDRESS74 : int

logic attr__ATTRIBUTE_ADDRESS75 : int

logic attr__ATTRIBUTE_ADDRESS76 : int

logic attr__ATTRIBUTE_ADDRESS77 : int

logic attr__ATTRIBUTE_ADDRESS78 : int

logic attr__ATTRIBUTE_ADDRESS79 : int

logic attr__ATTRIBUTE_ADDRESS80 : int

logic attr__ATTRIBUTE_ADDRESS81 : int

logic attr__ATTRIBUTE_ADDRESS82 : int

logic attr__ATTRIBUTE_ADDRESS83 : int

logic fliteral8 : t

axiom fliteral_axiom8 : (tqtisFinite(fliteral8) and
  (tqtreal(fliteral8) = 3.1415927410125732421875))

logic fliteral9 : t

axiom fliteral_axiom9 : (tqtisFinite(fliteral9) and
  (tqtreal(fliteral9) = 180.0))

logic fliteral10 : t

axiom fliteral_axiom10 : (tqtisFinite(fliteral10) and
  (tqtreal(fliteral10) = 0.500000000000000000000000))

 (* File "i-cexten.ads", line 59, characters 0-0 *)
goal WP_parameter_def :
  (forall q0:t. forall q1:t. forall q2:t. forall q3:t. forall two_kp:t.
  forall two_ki:t. forall integral_fbx:t. forall integral_fby:t.
  forall integral_fbz:t. forall beta:t. forall recip_norm:t.
  forall norm_ax:t. forall norm_ay:t. forall norm_az:t. forall rad_gx:t.
  forall rad_gy:t. forall rad_gz:t. forall half_vx:t. forall half_vy:t.
  forall half_vz:t. forall half_ex:t. forall half_ey:t. forall half_ez:t.
  forall q0_tmp:t. forall q1_tmp:t. forall q2_tmp:t. forall q3_tmp:t.
  forall qa:t. forall qb:t. forall qc:t. forall o:t. forall o1:t.
  forall o2:t. forall o3:t. forall o4:t. forall o5:t. forall o6:t.
  forall o7:t. forall o8:t. forall o9:t. forall o10:t. forall o11:t.
  forall o12:t. forall o13:t. forall o14:t. forall o15:t. forall o16:t.
  forall o17:t. forall o18:t. forall o19:t. forall o20:t. forall o21:t.
  forall o22:t. forall o23:t. forall o24:t. forall o25:t. forall o26:t.
  forall o27:t. forall o28:t. forall o29:t. forall o30:t. forall o31:t.
  forall o32:t. forall o33:t. forall o34:t. forall o35:t. forall o36:t.
  forall o37:t. forall o38:t. forall o39:t. forall o40:t. forall o41:t.
  forall o42:t. forall o43:t. forall o44:t. forall o45:t. forall o46:t.
  forall o47:t. forall o48:t. forall o49:t. forall o50:t. forall o51:t.
  forall o52:t. forall o53:t. forall o54:t. forall o55:t. forall o56:t.
  forall o57:t. forall o58:t. forall o59:t. forall o60:t. forall o61:t.
  forall o62:t. forall o63:t. forall o64:t. forall o65:t. forall o66:t.
  forall o67:t. forall o68:t. forall integral_fbx1:t. forall integral_fby1:t.
  forall integral_fbz1:t. forall recip_norm1:t. forall norm_ax1:t.
  forall norm_ay1:t. forall norm_az1:t. forall half_ex1:t. forall half_ey1:t.
  forall half_ez1:t. forall result:t. forall rad_gx1:t. forall result1:t.
  forall rad_gy1:t. forall result2:t. forall rad_gz1:t. forall result3:t.
  forall half_vx1:t. forall result4:t. forall half_vy1:t. forall result5:t.
  forall half_vz1:t. forall result6:t. forall qa1:t. forall result7:t.
  forall qb1:t. forall result8:t. forall qc1:t. forall result9:t.
  forall recip_norm2:t. forall result10:t. forall norm_ax2:t.
  forall result11:t. forall norm_ay2:t. forall result12:t__ref.
  forall norm_az2:t. forall result13:t__ref. forall half_ex2:t.
  forall result14:t__ref. forall half_ey2:t. forall result15:t__ref.
  forall half_ez2:t. forall result16:t__ref. forall integral_fbx2:t.
  forall result17:t__ref. forall integral_fby2:t. forall result18:t__ref.
  forall integral_fbz2:t. forall result19:t__ref. forall rad_gx2:t.
  forall result20:t__ref. forall rad_gy2:t. forall result21:t__ref.
  forall rad_gz2:t. forall result22:t__ref. forall integral_fbx3:t.
  forall result23:t__ref. forall integral_fby3:t. forall result24:t__ref.
  forall integral_fbz3:t. forall result25:t__ref. forall rad_gx3:t.
  forall result26:t__ref. forall rad_gy3:t. forall result27:t__ref.
  forall rad_gz3:t. forall result28:t__ref. forall rad_gx4:t.
  forall result29:t__ref. forall rad_gy4:t. forall result30:t__ref.
  forall rad_gz4:t. forall result31:t__ref. forall q0_tmp1:t.
  forall result32:t__ref. forall q1_tmp1:t. (in_range2(gx) ->
  (in_range2(gy) -> (in_range2(gz) -> (in_range3(ax) -> (in_range3(ay) ->
  (in_range3(az) -> (in_range6(dt) -> (in_range8(q0) -> (in_range8(q1) ->
  (in_range8(q2) -> (in_range8(q3) -> (tqtisFinite(two_kp) ->
  (tqtisFinite(two_ki) -> (tqtisFinite(integral_fbx) ->
  (tqtisFinite(integral_fby) -> (tqtisFinite(integral_fbz) ->
  (in_range7(beta) -> (((gx = c3b) and in_range2(c3b)) -> (((gy = c4b) and
  in_range2(c4b)) -> (((gz = c5b) and in_range2(c5b)) -> (((ax = c6b) and
  in_range3(c6b)) -> (((ay = c7b) and in_range3(c7b)) -> (((az = c8b) and
  in_range3(c8b)) -> (((dt = c9b) and in_range6(c9b)) -> ((le(neg(fliteral4),
  fliteral4) -> tqtisFinite(recip_norm)) -> ((le(neg(fliteral2),
  fliteral2) -> in_range3(norm_ax)) -> ((le(neg(fliteral2), fliteral2) ->
  in_range3(norm_ay)) -> ((le(neg(fliteral2), fliteral2) ->
  in_range3(norm_az)) -> (((result = rad_gx) and
  (rad_gx1 = div(NearestTiesToEven, mul(NearestTiesToEven, c3b, fliteral8),
  fliteral9))) -> (tqtisFinite(rad_gx1) -> (((result1 = rad_gy) and
  (rad_gy1 = div(NearestTiesToEven, mul(NearestTiesToEven, c4b, fliteral8),
  fliteral9))) -> (tqtisFinite(rad_gy1) -> (((result2 = rad_gz) and
  (rad_gz1 = div(NearestTiesToEven, mul(NearestTiesToEven, c5b, fliteral8),
  fliteral9))) -> (tqtisFinite(rad_gz1) -> (((result3 = half_vx) and
  (half_vx1 = sub(NearestTiesToEven, mul(NearestTiesToEven, q1, q3),
  mul(NearestTiesToEven, q0, q2)))) -> (tqtisFinite(half_vx1) ->
  (((result4 = half_vy) and (half_vy1 = add(NearestTiesToEven,
  mul(NearestTiesToEven, q0, q1), mul(NearestTiesToEven, q2, q3)))) ->
  (tqtisFinite(half_vy1) -> (((result5 = half_vz) and
  (half_vz1 = add(NearestTiesToEven, sub(NearestTiesToEven,
  mul(NearestTiesToEven, q0, q0), fliteral10), mul(NearestTiesToEven, q3,
  q3)))) -> (tqtisFinite(half_vz1) -> ((le(neg(fliteral4), fliteral4) ->
  tqtisFinite(half_ex)) -> ((le(neg(fliteral4), fliteral4) ->
  tqtisFinite(half_ey)) -> ((le(neg(fliteral4), fliteral4) ->
  tqtisFinite(half_ez)) -> ((le(neg(fliteral4), fliteral4) ->
  tqtisFinite(q0_tmp)) -> ((le(neg(fliteral4), fliteral4) ->
  tqtisFinite(q1_tmp)) -> ((le(neg(fliteral4), fliteral4) ->
  tqtisFinite(q2_tmp)) -> ((le(neg(fliteral4), fliteral4) ->
  tqtisFinite(q3_tmp)) -> (((result6 = qa) and (qa1 = q0)) ->
  (in_range8(qa1) -> (((result7 = qb) and (qb1 = q1)) -> (in_range8(qb1) ->
  (((result8 = qc) and (qc1 = q2)) -> (in_range8(qc1) -> ((((not (eq(c6b,
  fliteral3) and (eq(c7b, fliteral3) and eq(c8b, fliteral3)))) and
  ((((o = inv_sqrt(add(NearestTiesToEven, add(NearestTiesToEven,
  mul(NearestTiesToEven, c6b, c6b), mul(NearestTiesToEven, c7b, c7b)),
  mul(NearestTiesToEven, c8b, c8b)))) and (tqtisFinite(o) and (lt(fliteral3,
  o) and lt(o, fliteral7)))) and ((result9 = recip_norm) and
  (recip_norm2 = o))) and ((((((o1 = mul(NearestTiesToEven, c6b,
  recip_norm2)) and tqtisFinite(mul(NearestTiesToEven, c6b,
  recip_norm2))) and ((o2 = saturate(o1, neg(fliteral), fliteral)) and
  (tqtisFinite(o2) and ((lt(o1, neg(fliteral)) and eq(o2, neg(fliteral))) or
  ((not lt(o1, neg(fliteral))) and ((lt(fliteral, o1) and eq(o2,
  fliteral)) or ((not lt(fliteral, o1)) and eq(o2, o1)))))))) and
  ((o3 = o2) and tqtisFinite(o2))) and ((result10 = norm_ax) and
  (norm_ax2 = o3))) and ((((((o4 = mul(NearestTiesToEven, c7b,
  recip_norm2)) and tqtisFinite(mul(NearestTiesToEven, c7b,
  recip_norm2))) and ((o5 = saturate(o4, neg(fliteral), fliteral)) and
  (tqtisFinite(o5) and ((lt(o4, neg(fliteral)) and eq(o5, neg(fliteral))) or
  ((not lt(o4, neg(fliteral))) and ((lt(fliteral, o4) and eq(o5,
  fliteral)) or ((not lt(fliteral, o4)) and eq(o5, o4)))))))) and
  ((o6 = o5) and tqtisFinite(o5))) and ((result11 = norm_ay) and
  (norm_ay2 = o6))) and ((((((o7 = mul(NearestTiesToEven, c8b,
  recip_norm2)) and tqtisFinite(mul(NearestTiesToEven, c8b,
  recip_norm2))) and ((o8 = saturate(o7, neg(fliteral), fliteral)) and
  (tqtisFinite(o8) and ((lt(o7, neg(fliteral)) and eq(o8, neg(fliteral))) or
  ((not lt(o7, neg(fliteral))) and ((lt(fliteral, o7) and eq(o8,
  fliteral)) or ((not lt(fliteral, o7)) and eq(o8, o7)))))))) and
  ((o9 = o8) and tqtisFinite(o8))) and ((result12 = { t__content = norm_az
  }) and (norm_az2 = o9))) and ((((((o10 = mul(NearestTiesToEven, norm_az2,
  half_vy1)) and tqtisFinite(mul(NearestTiesToEven, norm_az2, half_vy1))) and
  (((o11 = mul(NearestTiesToEven, norm_ay2, half_vz1)) and
  tqtisFinite(mul(NearestTiesToEven, norm_ay2, half_vz1))) and
  (o12 = sub(NearestTiesToEven, o11, o10)))) and ((o13 = o12) and
  tqtisFinite(o12))) and ((result13 = { t__content = half_ex }) and
  (half_ex2 = o13))) and ((((((o14 = mul(NearestTiesToEven, norm_ax2,
  half_vz1)) and tqtisFinite(mul(NearestTiesToEven, norm_ax2, half_vz1))) and
  (((o15 = mul(NearestTiesToEven, norm_az2, half_vx1)) and
  tqtisFinite(mul(NearestTiesToEven, norm_az2, half_vx1))) and
  (o16 = sub(NearestTiesToEven, o15, o14)))) and ((o17 = o16) and
  tqtisFinite(o16))) and ((result14 = { t__content = half_ey }) and
  (half_ey2 = o17))) and ((((((o18 = mul(NearestTiesToEven, norm_ay2,
  half_vx1)) and tqtisFinite(mul(NearestTiesToEven, norm_ay2, half_vx1))) and
  (((o19 = mul(NearestTiesToEven, norm_ax2, half_vy1)) and
  tqtisFinite(mul(NearestTiesToEven, norm_ax2, half_vy1))) and
  (o20 = sub(NearestTiesToEven, o19, o18)))) and ((o21 = o20) and
  tqtisFinite(o20))) and ((result15 = { t__content = half_ez }) and
  (half_ez2 = o21))) and (((lt(fliteral3, two_ki) and
  ((((((((o22 = mul(NearestTiesToEven, two_ki, half_ex2)) and
  tqtisFinite(mul(NearestTiesToEven, two_ki, half_ex2))) and
  (o23 = mul(NearestTiesToEven, o22, c9b))) and ((o24 = o23) and
  tqtisFinite(o23))) and (o25 = add(NearestTiesToEven, integral_fbx,
  o24))) and ((o26 = o25) and tqtisFinite(o25))) and ((result16 = {
  t__content = integral_fbx }) and (integral_fbx2 = o26))) and
  ((((((((o27 = mul(NearestTiesToEven, two_ki, half_ey2)) and
  tqtisFinite(mul(NearestTiesToEven, two_ki, half_ey2))) and
  (o28 = mul(NearestTiesToEven, o27, c9b))) and ((o29 = o28) and
  tqtisFinite(o28))) and (o30 = add(NearestTiesToEven, integral_fby,
  o29))) and ((o31 = o30) and tqtisFinite(o30))) and ((result17 = {
  t__content = integral_fby }) and (integral_fby2 = o31))) and
  ((((((((o32 = mul(NearestTiesToEven, two_ki, half_ez2)) and
  tqtisFinite(mul(NearestTiesToEven, two_ki, half_ez2))) and
  (o33 = mul(NearestTiesToEven, o32, c9b))) and ((o34 = o33) and
  tqtisFinite(o33))) and (o35 = add(NearestTiesToEven, integral_fbz,
  o34))) and ((o36 = o35) and tqtisFinite(o35))) and ((result18 = {
  t__content = integral_fbz }) and (integral_fbz2 = o36))) and
  ((((o37 = add(NearestTiesToEven, rad_gx1, integral_fbx2)) and
  tqtisFinite(add(NearestTiesToEven, rad_gx1, integral_fbx2))) and
  ((result19 = { t__content = rad_gx1 }) and (rad_gx2 = o37))) and
  ((((o38 = add(NearestTiesToEven, rad_gy1, integral_fby2)) and
  tqtisFinite(add(NearestTiesToEven, rad_gy1, integral_fby2))) and
  ((result20 = { t__content = rad_gy1 }) and (rad_gy2 = o38))) and
  (((o39 = add(NearestTiesToEven, rad_gz1, integral_fbz2)) and
  tqtisFinite(add(NearestTiesToEven, rad_gz1, integral_fbz2))) and
  ((result21 = { t__content = rad_gz1 }) and (rad_gz2 = o39))))))))) or
  ((not lt(fliteral3, two_ki)) and ((((result22 = { t__content = integral_fbx
  }) and (integral_fbx3 = fliteral3)) and (((result23 = { t__content =
  integral_fby }) and (integral_fby3 = fliteral3)) and ((result24 = {
  t__content = integral_fbz }) and (integral_fbz3 = fliteral3)))) and
  ((rad_gz2 = rad_gz1) and ((rad_gy2 = rad_gy1) and ((rad_gx2 = rad_gx1) and
  ((integral_fbz2 = integral_fbz3) and ((integral_fby2 = integral_fby3) and
  (integral_fbx2 = integral_fbx3))))))))) and
  ((((((o40 = mul(NearestTiesToEven, two_kp, half_ex2)) and
  tqtisFinite(mul(NearestTiesToEven, two_kp, half_ex2))) and
  (o41 = add(NearestTiesToEven, rad_gx2, o40))) and ((o42 = o41) and
  tqtisFinite(o41))) and ((result25 = { t__content = rad_gx2 }) and
  (rad_gx3 = o42))) and ((((((o43 = mul(NearestTiesToEven, two_kp,
  half_ey2)) and tqtisFinite(mul(NearestTiesToEven, two_kp, half_ey2))) and
  (o44 = add(NearestTiesToEven, rad_gy2, o43))) and ((o45 = o44) and
  tqtisFinite(o44))) and ((result26 = { t__content = rad_gy2 }) and
  (rad_gy3 = o45))) and (((((o46 = mul(NearestTiesToEven, two_kp,
  half_ez2)) and tqtisFinite(mul(NearestTiesToEven, two_kp, half_ez2))) and
  (o47 = add(NearestTiesToEven, rad_gz2, o46))) and ((o48 = o47) and
  tqtisFinite(o47))) and ((result27 = { t__content = rad_gz2 }) and
  (rad_gz3 = o48)))))))))))))) or ((eq(c6b, fliteral3) and (eq(c7b,
  fliteral3) and eq(c8b, fliteral3))) and (((half_ez2 = half_ez) and
  ((half_ey2 = half_ey) and ((half_ex2 = half_ex) and
  ((rad_gz3 = rad_gz1) and ((rad_gy3 = rad_gy1) and ((rad_gx3 = rad_gx1) and
  ((norm_az2 = norm_az) and ((norm_ay2 = norm_ay) and
  ((norm_ax2 = norm_ax) and ((recip_norm2 = recip_norm) and
  ((integral_fbz2 = integral_fbz) and ((integral_fby2 = integral_fby) and
  (integral_fbx2 = integral_fbx))))))))))))) and ((half_ez2 = half_ez1) and
  ((half_ey2 = half_ey1) and ((half_ex2 = half_ex1) and
  ((rad_gz3 = rad_gz1) and ((rad_gy3 = rad_gy1) and ((rad_gx3 = rad_gx1) and
  ((norm_az2 = norm_az1) and ((norm_ay2 = norm_ay1) and
  ((norm_ax2 = norm_ax1) and ((recip_norm2 = recip_norm1) and
  ((integral_fbz2 = integral_fbz1) and ((integral_fby2 = integral_fby1) and
  (integral_fbx2 = integral_fbx1)))))))))))))))) -> (((result28 = {
  t__content = rad_gx3 }) and (rad_gx4 = mul(NearestTiesToEven, rad_gx3,
  mul(NearestTiesToEven, fliteral10, c9b)))) -> (((result29 = { t__content =
  rad_gy3 }) and (rad_gy4 = mul(NearestTiesToEven, rad_gy3,
  mul(NearestTiesToEven, fliteral10, c9b)))) -> (((result30 = { t__content =
  rad_gz3 }) and (rad_gz4 = mul(NearestTiesToEven, rad_gz3,
  mul(NearestTiesToEven, fliteral10, c9b)))) ->
  ((((((((o53 = mul(NearestTiesToEven, q3, rad_gz4)) and
  tqtisFinite(mul(NearestTiesToEven, q3, rad_gz4))) and
  (((((o50 = mul(NearestTiesToEven, qc1, rad_gy4)) and
  tqtisFinite(mul(NearestTiesToEven, qc1, rad_gy4))) and
  ((((o49 = mul(NearestTiesToEven, qb1, rad_gx4)) and
  tqtisFinite(mul(NearestTiesToEven, qb1, rad_gx4))) and
  (o51 = neg(o49))) and (o52 = sub(NearestTiesToEven, o51, o50)))) and
  ((o54 = o52) and tqtisFinite(o52))) and (o55 = sub(NearestTiesToEven, o54,
  o53)))) and ((o56 = o55) and tqtisFinite(o55))) and
  (o57 = add(NearestTiesToEven, q0, o56))) and ((o58 = o57) and
  tqtisFinite(o57))) and ((result31 = { t__content = q0_tmp }) and
  (q0_tmp1 = o58))) -> ((((((((o62 = mul(NearestTiesToEven, q3, rad_gy4)) and
  tqtisFinite(mul(NearestTiesToEven, q3, rad_gy4))) and
  (((((o59 = mul(NearestTiesToEven, qc1, rad_gz4)) and
  tqtisFinite(mul(NearestTiesToEven, qc1, rad_gz4))) and
  (((o60 = mul(NearestTiesToEven, qa1, rad_gx4)) and
  tqtisFinite(mul(NearestTiesToEven, qa1, rad_gx4))) and
  (o61 = add(NearestTiesToEven, o60, o59)))) and ((o63 = o61) and
  tqtisFinite(o61))) and (o64 = sub(NearestTiesToEven, o63, o62)))) and
  ((o65 = o64) and tqtisFinite(o64))) and (o66 = add(NearestTiesToEven, q1,
  o65))) and ((o67 = o66) and tqtisFinite(o66))) and ((result32 = {
  t__content = q1_tmp }) and (q1_tmp1 = o67))) ->
  (((o68 = mul(NearestTiesToEven, q3, rad_gx4)) and
  tqtisFinite(mul(NearestTiesToEven, q3, rad_gx4))) ->
  tqtisFinite(mul(NearestTiesToEven, qb1,
  rad_gz4)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
