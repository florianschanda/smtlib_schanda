(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-fun a (Int) Float32)
(declare-fun a__function_guard (Float32 Int) Bool)
(declare-fun c (Int) Float32)
(declare-fun c__function_guard (Float32 Int) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___2__projection ((a1 float__ref)) float (float__content a1))
(define-fun dynamic_invariant ((temp___expr_158 Float32) (temp___is_init_154 Bool) (temp___skip_constant_155 Bool) (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)) Bool (=> (or (= temp___is_init_154 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_158)))
(declare-sort t 0)
(declare-fun tqtint (t) Int)
(assert (forall ((i t)) (and (<= 0 (tqtint i)) (<= (tqtint i) 14))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 14)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (t t) Bool)
(declare-const dummy1 t)
(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 t)))))
(define-fun t__ref___projection ((a1 t__ref1)) t (t__content1 a1))
(define-fun dynamic_invariant1 ((temp___expr_165 Int) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (<= 0 14)) (in_range temp___expr_165)))
(assert (forall ((x Int)) (! (=> (dynamic_invariant1 x true true true true) (let ((result (a x))) (and (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) result) (fp.leq result (fp #b0 #b10000010 #b11000000000000000000000))) (dynamic_invariant result true false true true)))) :pattern ((a x)))))
(assert (forall ((x Int)) (! (=> (dynamic_invariant1 x true true true true) (= (a x) (c x))) :pattern ((a x)))))
(declare-sort u 0)
(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x) (fp.leq x (fp #b0 #b10000010 #b11000000000000000000000)))))
(declare-fun user_eq2 (u u) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy2 u)
(declare-datatypes () ((u__ref (mk_u__ref (u__content u)))))
(define-fun u__ref___projection ((a1 u__ref)) u (u__content a1))
(define-fun dynamic_invariant2 ((temp___expr_172 Float32) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool (=> (or (= temp___is_init_168 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b11000000000000000000000))) (in_range1 temp___expr_172)))
(declare-const x1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const x2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const x3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const x4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a1 integer__ref)) integer (integer__content a1))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(assert (forall ((x Int)) (! (=> (dynamic_invariant3 x true true true true) (dynamic_invariant (c x) true false true true)) :pattern ((c x)))))
(assert (forall ((x Int)) (! (=> (dynamic_invariant3 x true true true true) (= (c x) (of_int RNE x))) :pattern ((c x)))))
(declare-const r1 Float32)
(declare-const r2 Float32)
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const o2 Float32)
(declare-const result Float32)
(declare-const r11 Float32)
(declare-const result1 Float32)
(declare-const r21 Float32)
(assert (in_range x1))
(assert (in_range x2))
(assert (in_range x3))
(assert (in_range x4))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 r1)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b11000000000000000000000)) (in_range1 r2)))
(assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (a x1)))
(assert (fp.leq (a x1) (fp #b0 #b10000010 #b11000000000000000000000)))
(assert (fp.leq (a x2) (fp #b0 #b10000010 #b11000000000000000000000)))
(assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (a x2)))
(assert (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (a x3)) (fp.leq (a x3) (fp #b0 #b10000010 #b11000000000000000000000))))
(assert (and (= o (a x4)) (and (fp.isFinite32 o) (and (= o (c x4)) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o) (fp.leq o (fp #b0 #b10000010 #b11000000000000000000000)))))))
(assert (= result r1))
(assert (= r11 o))
(assert (and (= o1 (a x4)) (and (fp.isFinite32 o1) (and (= o1 (c x4)) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o1) (fp.leq o1 (fp #b0 #b10000010 #b11000000000000000000000)))))))
(assert (and (= o2 o1) (fp.isFinite32 o1)))
(assert (= result1 r2))
(assert (= r21 o2))
(assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) r11))
(assert (fp.leq r11 (fp #b0 #b10000010 #b11000000000000000000000)))
(assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) r21))
(assert (not (fp.leq r21 (fp #b0 #b10000010 #b11000000000000000000000))))
(check-sat)
(exit)
