(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float64)
(declare-fun to_int1 (RoundingMode Float64) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i) (<= i 9007199254740992)))
(define-fun same_sign ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float64) (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float64) (x Float64) (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt1 (Real) Real)
(define-fun same_sign_real ((x Float64) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float64)))))
(declare-sort ft 0)
(declare-fun user_eq (ft ft) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float64) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float64)
(declare-const dummy ft)
(declare-datatypes () ((ft__ref (mk_ft__ref (ft__content ft)))))
(define-fun ft__ref___2__projection ((a ft__ref)) ft (ft__content a))
(define-fun dynamic_invariant ((temp___expr_194 Float64) (temp___is_init_190 Bool) (temp___skip_constant_191 Bool) (temp___do_toplevel_192 Bool) (temp___do_typ_inv_193 Bool)) Bool (=> (or (= temp___is_init_190 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (fp.isFinite64 temp___expr_194)))
(declare-fun to_rep (ft) Float64)
(declare-fun of_rep (Float64) ft)
(assert (forall ((x ft)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x ft)) (! (fp.isFinite64 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float64)) (! (=> (fp.isFinite64 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const x Float64)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__foo__double_tests__test_record_1__rec__a ft) (rec__foo__double_tests__test_record_1__rec__b ft) (rec__foo__double_tests__test_record_1__rec__c ft)))))
(define-fun us_split_fields_A__2__projection ((a us_split_fields)) ft (rec__foo__double_tests__test_record_1__rec__a a))
(define-fun us_split_fields_B__2__projection ((a us_split_fields)) ft (rec__foo__double_tests__test_record_1__rec__b a))
(define-fun us_split_fields_C__2__projection ((a us_split_fields)) ft (rec__foo__double_tests__test_record_1__rec__c a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep (rec__foo__double_tests__test_record_1__rec__a (us_split_fields1 a))) (to_rep (rec__foo__double_tests__test_record_1__rec__a (us_split_fields1 b)))) (= (to_rep (rec__foo__double_tests__test_record_1__rec__b (us_split_fields1 a))) (to_rep (rec__foo__double_tests__test_record_1__rec__b (us_split_fields1 b))))) (= (to_rep (rec__foo__double_tests__test_record_1__rec__c (us_split_fields1 a))) (to_rep (rec__foo__double_tests__test_record_1__rec__c (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const foo__double_tests__test_record_1__rec__a__first__bit Int)
(declare-const foo__double_tests__test_record_1__rec__a__last__bit Int)
(declare-const foo__double_tests__test_record_1__rec__a__position Int)
(assert (<= 0 foo__double_tests__test_record_1__rec__a__first__bit))
(assert (< foo__double_tests__test_record_1__rec__a__first__bit foo__double_tests__test_record_1__rec__a__last__bit))
(assert (<= 0 foo__double_tests__test_record_1__rec__a__position))
(declare-const foo__double_tests__test_record_1__rec__b__first__bit Int)
(declare-const foo__double_tests__test_record_1__rec__b__last__bit Int)
(declare-const foo__double_tests__test_record_1__rec__b__position Int)
(assert (<= 0 foo__double_tests__test_record_1__rec__b__first__bit))
(assert (< foo__double_tests__test_record_1__rec__b__first__bit foo__double_tests__test_record_1__rec__b__last__bit))
(assert (<= 0 foo__double_tests__test_record_1__rec__b__position))
(declare-const foo__double_tests__test_record_1__rec__c__first__bit Int)
(declare-const foo__double_tests__test_record_1__rec__c__last__bit Int)
(declare-const foo__double_tests__test_record_1__rec__c__position Int)
(assert (<= 0 foo__double_tests__test_record_1__rec__c__first__bit))
(assert (< foo__double_tests__test_record_1__rec__c__first__bit foo__double_tests__test_record_1__rec__c__last__bit))
(assert (<= 0 foo__double_tests__test_record_1__rec__c__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___2__projection ((a rec____ref)) us_rep (rec____content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const y Float64)
(declare-const r__split_fields ft)
(declare-const r__split_fields1 ft)
(declare-const r__split_fields2 ft)
(declare-const o ft)
(declare-const o1 ft)
(declare-const o2 ft)
(declare-const o3 ft)
(declare-const o4 ft)
(declare-const o5 ft)
(declare-const temp___269 ft)
(declare-const temp___2691 ft)
(declare-const temp___2692 ft)
(declare-const o6 ft)
(declare-const o7 ft)
(declare-const o8 ft)
(declare-const o9 ft)
(declare-const temp___271 ft)
(declare-const temp___2711 ft)
(declare-const temp___2712 ft)
(declare-const result ft)
(declare-const result1 ft)
(declare-const result2 ft)
(declare-const r__split_fields3 ft)
(declare-const r__split_fields4 ft)
(declare-const r__split_fields5 ft)
(declare-const result3 ft)
(declare-const result4 ft)
(declare-const result5 ft)
(declare-const r__split_fields6 ft)
(declare-const r__split_fields7 ft)
(declare-const r__split_fields8 ft)
(declare-const result6 Float64)
(declare-const y1 Float64)
(declare-const y2 Float64)
(declare-const r__split_fields9 ft)
(declare-const r__split_fields10 ft)
(declare-const r__split_fields11 ft)
(declare-const y3 Float64)
(declare-const r__split_fields12 ft)
(declare-const r__split_fields13 ft)
(declare-const r__split_fields14 ft)
(assert (fp.isFinite64 x))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp.isFinite64 y)))
(assert (= (to_rep o) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (= (to_rep o1) x))
(assert (= (to_rep o2) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= o2 o3))
(assert (= o1 o4))
(assert (= o o5))
(assert (= temp___269 o3))
(assert (= temp___2691 o4))
(assert (= temp___2692 o5))
(assert (= result r__split_fields))
(assert (= result1 r__split_fields1))
(assert (= result2 r__split_fields2))
(assert (= temp___269 r__split_fields3))
(assert (= temp___2691 r__split_fields4))
(assert (= temp___2692 r__split_fields5))
(assert (= (to_rep o6) (to_rep r__split_fields4)))
(assert (= o6 o7))
(assert (= r__split_fields4 o8))
(assert (= r__split_fields5 o9))
(assert (= temp___271 o7))
(assert (= temp___2711 o8))
(assert (= temp___2712 o9))
(assert (= result3 r__split_fields3))
(assert (= result4 r__split_fields4))
(assert (= result5 r__split_fields5))
(assert (= temp___271 r__split_fields6))
(assert (= temp___2711 r__split_fields7))
(assert (= temp___2712 r__split_fields8))
(assert (= result6 y))
(assert (= y1 (to_rep r__split_fields6)))
(assert (= r__split_fields9 r__split_fields6))
(assert (= r__split_fields10 r__split_fields7))
(assert (= r__split_fields11 r__split_fields8))
(assert (= y1 y2))
(assert (= r__split_fields12 r__split_fields6))
(assert (= r__split_fields13 r__split_fields7))
(assert (= r__split_fields14 r__split_fields8))
(assert (= y3 y1))
(assert (not (fp.eq x y2)))
(check-sat)
(exit)
