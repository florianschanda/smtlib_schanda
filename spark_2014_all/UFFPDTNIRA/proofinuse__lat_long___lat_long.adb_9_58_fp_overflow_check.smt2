(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort tfloat_with_approxB 0)
(declare-fun user_eq (tfloat_with_approxB tfloat_with_approxB) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)
(declare-const dummy tfloat_with_approxB)
(declare-datatypes () ((tfloat_with_approxB__ref (mk_tfloat_with_approxB__ref (tfloat_with_approxB__content tfloat_with_approxB)))))
(define-fun tfloat_with_approxB__ref___projection ((a tfloat_with_approxB__ref)) tfloat_with_approxB (tfloat_with_approxB__content a))
(declare-sort float_with_approx 0)
(declare-fun user_eq1 (float_with_approx float_with_approx) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy1 float_with_approx)
(declare-datatypes () ((float_with_approx__ref (mk_float_with_approx__ref (float_with_approx__content float_with_approx)))))
(define-fun float_with_approx__ref___projection ((a float_with_approx__ref)) float_with_approx (float_with_approx__content a))
(define-fun dynamic_invariant ((temp___expr_165 Float32) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool) (temp___do_typ_inv_164 Bool)) Bool (=> (or (= temp___is_init_161 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_165)))
(declare-fun sin1 (Float32) Float32)
(declare-fun sin__function_guard (Float32 Float32) Bool)
(declare-fun cos1 (Float32) Float32)
(declare-fun cos__function_guard (Float32 Float32) Bool)
(assert (forall ((x Float32)) (! (=> (dynamic_invariant x true true true true) (let ((result (cos1 x))) (and (=> (and (fp.leq (fp.neg (fp #b0 #b10000101 #b00101100000000000000000)) x) (fp.leq x (fp #b0 #b10000101 #b00101100000000000000000))) (fp.leq (fp #b0 #b01111011 #b10011001100110011001101) result)) (dynamic_invariant result true false true true)))) :pattern ((cos1 x)))))
(assert (forall ((x Float32)) (! (=> (dynamic_invariant x true true true true) (= (cos1 x) (sin1 x))) :pattern ((cos1 x)))))
(declare-fun sqrt1 (Float32) Float32)
(declare-fun sqrt__function_guard (Float32 Float32) Bool)
(assert (forall ((x Float32)) (! (=> (dynamic_invariant x true true true true) (dynamic_invariant (sqrt1 x) true false true true)) :pattern ((sqrt1 x)))))
(assert (forall ((x Float32)) (! (=> (dynamic_invariant x true true true true) (= (sqrt1 x) (fp.sqrt RNE x))) :pattern ((sqrt1 x)))))
(declare-sort latitude 0)
(define-fun in_range ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b00101100000000000000000)) x) (fp.leq x (fp #b0 #b10000101 #b00101100000000000000000)))))
(declare-fun user_eq2 (latitude latitude) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy2 latitude)
(declare-datatypes () ((latitude__ref (mk_latitude__ref (latitude__content latitude)))))
(define-fun latitude__ref___projection ((a latitude__ref)) latitude (latitude__content a))
(declare-fun to_rep (latitude) Float32)
(declare-fun of_rep (Float32) latitude)
(assert (forall ((x latitude)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x latitude)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Float32)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort longitude 0)
(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01100111111111111111111)) x) (fp.leq x (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun user_eq3 (longitude longitude) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)
(declare-const dummy3 longitude)
(declare-datatypes () ((longitude__ref (mk_longitude__ref (longitude__content longitude)))))
(define-fun longitude__ref___projection ((a longitude__ref)) longitude (longitude__content a))
(declare-fun to_rep1 (longitude) Float32)
(declare-fun of_rep1 (Float32) longitude)
(assert (forall ((x longitude)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x longitude)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Float32)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__lat_long__coordinates__lat latitude) (rec__lat_long__coordinates__long longitude)))))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 a))) (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 b)))) (= (to_rep1 (rec__lat_long__coordinates__long (us_split_fields1 a))) (to_rep1 (rec__lat_long__coordinates__long (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const lat_long__coordinates__lat__first__bit Int)
(declare-const lat_long__coordinates__lat__last__bit Int)
(declare-const lat_long__coordinates__lat__position Int)
(assert (<= 0 lat_long__coordinates__lat__first__bit))
(assert (< lat_long__coordinates__lat__first__bit lat_long__coordinates__lat__last__bit))
(assert (<= 0 lat_long__coordinates__lat__position))
(declare-const lat_long__coordinates__long__first__bit Int)
(declare-const lat_long__coordinates__long__last__bit Int)
(declare-const lat_long__coordinates__long__position Int)
(assert (<= 0 lat_long__coordinates__long__first__bit))
(assert (< lat_long__coordinates__long__first__bit lat_long__coordinates__long__last__bit))
(assert (<= 0 lat_long__coordinates__long__position))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((coordinates__ref (mk_coordinates__ref (coordinates__content us_rep)))))
(define-fun coordinates__ref___projection ((a coordinates__ref)) us_rep (coordinates__content a))
(declare-const source us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const destination us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun delta_lat_in_meters (us_rep us_rep) Float32)
(declare-fun delta_lat_in_meters__function_guard (Float32 us_rep us_rep) Bool)
(declare-fun olt (Float32 Float32) Bool)
(declare-fun olt__function_guard (Bool Float32 Float32) Bool)
(assert (forall ((source1 us_rep) (destination1 us_rep)) (! (let ((result (delta_lat_in_meters source1 destination1))) (and (= (olt (fp.abs result) (fp #b0 #b10010111 #b00110001001111000100110)) true) (dynamic_invariant result true false true true))) :pattern ((delta_lat_in_meters source1 destination1)))))
(assert (forall ((source1 us_rep) (destination1 us_rep)) (! (= (delta_lat_in_meters source1 destination1) (fp.mul RNE (fp.mul RNE (fp.sub RNE (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 destination1))) (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 source1)))) (fp #b0 #b10010101 #b10000100101000110101001)) (fp #b0 #b01111001 #b00011101111101000110101))) :pattern ((delta_lat_in_meters source1 destination1)))))
(declare-fun delta_long_in_meters (us_rep us_rep) Float32)
(declare-fun delta_long_in_meters__function_guard (Float32 us_rep us_rep) Bool)
(assert (forall ((source1 us_rep) (destination1 us_rep)) (! (let ((result (delta_long_in_meters source1 destination1))) (and (= (olt (fp.abs result) (fp #b0 #b10011000 #b00110001001111000100110)) true) (dynamic_invariant result true false true true))) :pattern ((delta_long_in_meters source1 destination1)))))
(assert (forall ((source1 us_rep) (destination1 us_rep)) (! (= (delta_long_in_meters source1 destination1) (fp.div RNE (fp.mul RNE (fp.sub RNE (to_rep1 (rec__lat_long__coordinates__long (us_split_fields1 destination1))) (to_rep1 (rec__lat_long__coordinates__long (us_split_fields1 source1)))) (fp #b0 #b10010101 #b10000100101000110101001)) (cos1 (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 source1)))))) :pattern ((delta_long_in_meters source1 destination1)))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort float 0)
(declare-fun user_eq5 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)
(declare-const dummy5 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(define-fun dynamic_invariant1 ((temp___expr_60 Float32) (temp___is_init_56 Bool) (temp___skip_constant_57 Bool) (temp___do_toplevel_58 Bool) (temp___do_typ_inv_59 Bool)) Bool (=> (or (= temp___is_init_56 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_60)))
(assert true)
(assert (forall ((left Float32) (right Float32)) (! (= (= (olt left right) true) (fp.lt left (fp.add RNE right (fp #b0 #b01101110 #b01001111100010110101100)))) :pattern ((olt left right)))))
(define-fun dynamic_invariant2 ((temp___expr_172 Float32) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool (=> (or (= temp___is_init_168 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b00101100000000000000000)) (fp #b0 #b10000101 #b00101100000000000000000))) (in_range temp___expr_172)))
(define-fun dynamic_invariant3 ((temp___expr_179 Float32) (temp___is_init_175 Bool) (temp___skip_constant_176 Bool) (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool (=> (or (= temp___is_init_175 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01100111111111111111111)) (fp #b0 #b10000110 #b01101000000000000000000))) (in_range1 temp___expr_179)))
(assert (forall ((x Float32)) (! (=> (dynamic_invariant1 x true true true true) (let ((result (sin1 x))) (and (and (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) result) (fp.leq result (fp #b0 #b01111111 #b00000000000000000000000))) (=> (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000)) (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000)))) (dynamic_invariant1 result true false true true)))) :pattern ((sin1 x)))))
(declare-const delta_lat Float32)
(declare-const delta_long Float32)
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const result Float32)
(declare-const delta_lat1 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 delta_lat)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 delta_long)))
(assert (= (mk_t__ref result) (mk_t__ref delta_lat)))
(assert (= delta_lat1 (fp.mul RNE (fp.mul RNE (fp.sub RNE (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 destination))) (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 source)))) (fp #b0 #b10010101 #b10000100101000110101001)) (fp #b0 #b01111001 #b00011101111101000110101))))
(assert (and (= o (cos1 (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 source))))) (and (fp.isFinite32 o) (and (= o (sin1 (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 source))))) (=> (and (fp.leq (fp.neg (fp #b0 #b10000101 #b00101100000000000000000)) (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 source)))) (fp.leq (to_rep (rec__lat_long__coordinates__lat (us_split_fields1 source))) (fp #b0 #b10000101 #b00101100000000000000000))) (fp.leq (fp #b0 #b01111011 #b10011001100110011001101) o))))))
(assert (= o1 (fp.div RNE (fp.mul RNE (fp.sub RNE (to_rep1 (rec__lat_long__coordinates__long (us_split_fields1 destination))) (to_rep1 (rec__lat_long__coordinates__long (us_split_fields1 source)))) (fp #b0 #b10010101 #b10000100101000110101001)) o)))
(assert (not (fp.isFinite32 o1)))
(check-sat)
(exit)
