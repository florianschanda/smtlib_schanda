(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort float 0)
(declare-fun user_eq (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)
(declare-const dummy float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(declare-sort speed_t 0)
(declare-fun user_eq1 (speed_t speed_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 speed_t)
(declare-datatypes () ((speed_t__ref (mk_speed_t__ref (speed_t__content speed_t)))))
(define-fun speed_t__ref___projection ((a speed_t__ref)) speed_t (speed_t__content a))
(define-fun dynamic_invariant ((temp___expr_152 Float32) (temp___is_init_149 Bool) (temp___skip_constant_150 Bool) (temp___do_toplevel_151 Bool)) Bool (=> (or (= temp___is_init_149 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_152)))
(declare-sort acceleration_t 0)
(declare-fun user_eq2 (acceleration_t acceleration_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)
(declare-const dummy2 acceleration_t)
(declare-datatypes () ((acceleration_t__ref (mk_acceleration_t__ref (acceleration_t__content acceleration_t)))))
(define-fun acceleration_t__ref___projection ((a acceleration_t__ref)) acceleration_t (acceleration_t__content a))
(define-fun dynamic_invariant1 ((temp___expr_164 Float32) (temp___is_init_161 Bool) (temp___skip_constant_162 Bool) (temp___do_toplevel_163 Bool)) Bool (=> (or (= temp___is_init_161 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_164)))
(declare-sort tdistance_tB 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (tdistance_tB tdistance_tB) Bool)
(declare-const dummy3 tdistance_tB)
(declare-datatypes () ((tdistance_tB__ref (mk_tdistance_tB__ref (tdistance_tB__content tdistance_tB)))))
(define-fun tdistance_tB__ref___projection ((a tdistance_tB__ref)) tdistance_tB (tdistance_tB__content a))
(declare-sort distance_t 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (distance_t distance_t) Bool)
(declare-const dummy4 distance_t)
(declare-datatypes () ((distance_t__ref (mk_distance_t__ref (distance_t__content distance_t)))))
(define-fun distance_t__ref___projection ((a distance_t__ref)) distance_t (distance_t__content a))
(define-fun dynamic_invariant2 ((temp___expr_176 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool)) Bool (=> (or (= temp___is_init_173 true) (<= 0 2147483647)) (in_range2 temp___expr_176)))
(declare-fun m_per_s_from_km_per_h (Float32) Float32)
(declare-fun m_per_s_from_km_per_h__function_guard (Float32 Float32) Bool)
(declare-const maximum_valid_speed Float32)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const initial_speed Float32)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const final_speed Float32)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const acceleration Float32)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant3 ((temp___expr_51 Float32) (temp___is_init_48 Bool) (temp___skip_constant_49 Bool) (temp___do_toplevel_50 Bool)) Bool (=> (or (= temp___is_init_48 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_51)))
(assert (= maximum_valid_speed (m_per_s_from_km_per_h (fp #b0 #b10000111 #b11110100000000000000000))))
(declare-sort speed_km_per_h_t 0)
(declare-fun user_eq5 (speed_km_per_h_t speed_km_per_h_t) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)
(declare-const dummy5 speed_km_per_h_t)
(declare-datatypes () ((speed_km_per_h_t__ref (mk_speed_km_per_h_t__ref (speed_km_per_h_t__content speed_km_per_h_t)))))
(define-fun speed_km_per_h_t__ref___projection ((a speed_km_per_h_t__ref)) speed_km_per_h_t (speed_km_per_h_t__content a))
(define-fun dynamic_invariant4 ((temp___expr_158 Float32) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool)) Bool (=> (or (= temp___is_init_155 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_158)))
(declare-fun is_valid_speed_km_per_h (Float32) Bool)
(declare-fun is_valid_speed_km_per_h__function_guard (Bool Float32) Bool)
(assert true)
(assert (forall ((speed Float32)) (! (= (= (is_valid_speed_km_per_h speed) true) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) speed) (fp.leq speed (fp #b0 #b10000111 #b11110100000000000000000)))) :pattern ((is_valid_speed_km_per_h speed)))))
(assert (forall ((speed Float32)) (! (=> (and (dynamic_invariant4 speed true true true) (= (is_valid_speed_km_per_h speed) true)) (dynamic_invariant (m_per_s_from_km_per_h speed) true false true)) :pattern ((m_per_s_from_km_per_h speed)))))
(assert (forall ((speed Float32)) (! (=> (dynamic_invariant4 speed true true true) (= (m_per_s_from_km_per_h speed) (fp.div RNE (fp.mul RNE speed (fp #b0 #b10001000 #b11110100000000000000000)) (fp #b0 #b10001010 #b11000010000000000000000)))) :pattern ((m_per_s_from_km_per_h speed)))))
(declare-const speed Float32)
(declare-const delta_speed Float32)
(declare-const distance Int)
(declare-const o Float32)
(declare-const o1 Float32)
(declare-const o2 Bool)
(declare-const o3 Float32)
(declare-const o4 Float32)
(declare-const o5 Float32)
(declare-const o6 Float32)
(declare-const o7 Float32)
(declare-const o8 Float32)
(declare-const o9 Float32)
(declare-const o10 Float32)
(declare-const o11 Int)
(declare-const result Float32)
(declare-const speed1 Float32)
(declare-const result1 Int)
(declare-const distance1 Int)
(declare-const speed2 Float32)
(declare-const delta_speed1 Float32)
(declare-const distance2 Int)
(declare-const result2 Float32)
(declare-const delta_speed2 Float32)
(declare-const result3 Float32)
(declare-const speed3 Float32)
(declare-const result4 Int)
(declare-const distance3 Int)
(assert (fp.isFinite32 maximum_valid_speed))
(assert (= (m_per_s_from_km_per_h (fp #b0 #b10000111 #b11110100000000000000000)) maximum_valid_speed))
(assert (fp.isFinite32 initial_speed))
(assert (fp.isFinite32 final_speed))
(assert (fp.isFinite32 acceleration))
(assert (and (and (and (and (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) initial_speed) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) final_speed)) (fp.leq initial_speed maximum_valid_speed)) (fp.lt final_speed initial_speed)) (fp.lt acceleration (fp #b0 #b00000000 #b00000000000000000000000))) (fp.leq (fp.neg (fp #b0 #b10000010 #b01000000000000000000000)) acceleration)))
(assert (= result speed))
(assert (= speed1 initial_speed))
(assert (fp.isFinite32 speed1))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 delta_speed)))
(assert (= result1 distance))
(assert (= distance1 0))
(assert (in_range2 distance1))
(assert (fp.lt final_speed speed1))
(assert (fp.lt (fp #b0 #b01111011 #b10011001100110011001101) speed1))
(assert (and (fp.leq (fp.neg (fp #b0 #b10000010 #b01000000000000000000000)) acceleration) (fp.lt acceleration (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (and (fp.lt (fp #b0 #b01111011 #b10011001100110011001101) speed2) (fp.leq speed2 initial_speed)))
(assert (and (and (and (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 delta_speed1)) (=> (<= 0 2147483647) (in_range2 distance2))) (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 speed2))) (and (fp.lt final_speed speed2) (fp.lt (fp #b0 #b01111011 #b10011001100110011001101) speed2))))
(assert (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000) speed2)) (fp.lt (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000) speed2) (fp #b0 #b10000010 #b01000000000000000000000))))
(assert (fp.leq (fp.neg (fp #b0 #b10000101 #b10010000000000000000000)) (fp.div RNE acceleration speed2)))
(assert (fp.leq (fp.neg (fp #b0 #b10000111 #b11110100000000000000000)) (fp.mul RNE (fp.div RNE acceleration speed2) (fp #b0 #b10000001 #b01000000000000000000000))))
(assert (and (= o7 (fp.div RNE acceleration speed2)) (fp.isFinite32 (fp.div RNE acceleration speed2))))
(assert (= o8 (fp.mul RNE o7 (fp #b0 #b10000001 #b01000000000000000000000))))
(assert (and (= o9 o8) (fp.isFinite32 o8)))
(assert (= delta_speed1 result2))
(assert (= delta_speed2 o9))
(assert (and (fp.leq (fp.neg (fp #b0 #b10000111 #b11110100000000000000000)) delta_speed2) (fp.lt delta_speed2 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (not (fp.isFinite32 (fp.add RNE speed2 delta_speed2))))
(check-sat)
(exit)
