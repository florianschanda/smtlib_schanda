(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-fun pow2 (Int) Int)
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isPositive x)))
(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x) (fp.isNegative x)))
(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isPositive x)))
(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x) (fp.isNegative x)))
(declare-fun of_int (RoundingMode Int) Float32)
(declare-fun to_int1 (RoundingMode Float32) Int)
(declare-const max_int Int)
(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i) (<= i max_int)))
(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i) (<= i 16777216)))
(define-fun same_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y)) (and (fp.isNegative x) (fp.isNegative y))))
(define-fun diff_sign ((x Float32) (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y)) (and (fp.isNegative x) (fp.isPositive y))))
(define-fun product_sign ((z Float32) (x Float32) (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z)) (=> (diff_sign x y) (fp.isNegative z))))
(define-fun sqr ((x Real)) Real (* x x))
(declare-fun sqrt (Real) Real)
(define-fun same_sign_real ((x Float32) (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r)) (and (fp.isNegative x) (< r 0.0))))
(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-sort float 0)
(declare-fun user_eq1 (float float) Bool)
(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)
(declare-const dummy1 float)
(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))
(define-fun dynamic_invariant1 ((temp___expr_51 Float32) (temp___is_init_48 Bool) (temp___skip_constant_49 Bool) (temp___do_toplevel_50 Bool)) Bool (=> (or (= temp___is_init_48 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (fp.isFinite32 temp___expr_51)))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range2 temp___expr_63)))
(declare-sort field 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (field field) Bool)
(declare-const dummy3 field)
(declare-datatypes () ((field__ref (mk_field__ref (field__content field)))))
(define-fun field__ref___projection ((a field__ref)) field (field__content a))
(define-fun dynamic_invariant3 ((temp___expr_466 Int) (temp___is_init_463 Bool) (temp___skip_constant_464 Bool) (temp___do_toplevel_465 Bool)) Bool (=> (or (= temp___is_init_463 true) (<= 0 255)) (in_range3 temp___expr_466)))
(declare-sort number_base 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 2 x) (<= x 16)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (number_base number_base) Bool)
(declare-const dummy4 number_base)
(declare-datatypes () ((number_base__ref (mk_number_base__ref (number_base__content number_base)))))
(define-fun number_base__ref___projection ((a number_base__ref)) number_base (number_base__content a))
(define-fun dynamic_invariant4 ((temp___expr_472 Int) (temp___is_init_469 Bool) (temp___skip_constant_470 Bool) (temp___do_toplevel_471 Bool)) Bool (=> (or (= temp___is_init_469 true) (<= 2 16)) (in_range4 temp___expr_472)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort num 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (num num) Bool)
(declare-const dummy5 num)
(declare-datatypes () ((num__ref (mk_num__ref (num__content num)))))
(define-fun num__ref___projection ((a num__ref)) num (num__content a))
(define-fun dynamic_invariant5 ((temp___expr_508 Int) (temp___is_init_505 Bool) (temp___skip_constant_506 Bool) (temp___do_toplevel_507 Bool)) Bool (=> (or (= temp___is_init_505 true) (<= (- 2147483648) 2147483647)) (in_range5 temp___expr_508)))
(declare-sort uppercase 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 65 x) (<= x 90)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (uppercase uppercase) Bool)
(declare-const dummy6 uppercase)
(declare-datatypes () ((uppercase__ref (mk_uppercase__ref (uppercase__content uppercase)))))
(define-fun uppercase__ref___projection ((a uppercase__ref)) uppercase (uppercase__content a))
(define-fun dynamic_invariant6 ((temp___expr_521 Int) (temp___is_init_518 Bool) (temp___skip_constant_519 Bool) (temp___do_toplevel_520 Bool)) Bool (=> (or (= temp___is_init_518 true) (<= 65 90)) (in_range6 temp___expr_521)))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const tolerance Float32)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-const attr__ATTRIBUTE_ADDRESS21 Int)
(declare-const attr__ATTRIBUTE_ADDRESS22 Int)
(declare-const r4b Int)
(declare-const attr__ATTRIBUTE_ADDRESS23 Int)
(declare-const r5b Int)
(declare-const attr__ATTRIBUTE_ADDRESS24 Int)
(declare-const attr__ATTRIBUTE_ADDRESS25 Int)
(declare-const r7b Int)
(declare-const attr__ATTRIBUTE_ADDRESS26 Int)
(declare-const r8b Int)
(declare-const attr__ATTRIBUTE_ADDRESS27 Int)
(declare-const attr__ATTRIBUTE_ADDRESS28 Int)
(declare-const c10b Int)
(declare-const attr__ATTRIBUTE_ADDRESS29 Int)
(assert (= tolerance (fp #b0 #b01110001 #b10100011011011100010111)))
(declare-const default_width Int)
(declare-const default_base Int)
(declare-const a Int)
(declare-const b Int)
(declare-const c Int)
(declare-const d Int)
(declare-const e Int)
(declare-const f Int)
(declare-const g Int)
(declare-const h Int)
(declare-const ch Int)
(declare-const temperature Int)
(declare-const valve_setting Int)
(declare-const value Int)
(declare-const sum Int)
(declare-const success Bool)
(declare-const approx Float32)
(declare-const x Float32)
(declare-const y Float32)
(declare-const letter Int)
(declare-const count Int)
(declare-const count1 int__ref)
(declare-const count2 int__ref)
(declare-const count3 int__ref)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Float32)
(declare-const o7 Float32)
(declare-const o8 Float32)
(declare-const o9 Float32)
(declare-const o10 Float32)
(declare-const o11 Float32)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const temp___525 Int)
(declare-const temp___524 Int)
(declare-const o15 Int)
(declare-const o16 Float32)
(declare-const o17 Float32)
(declare-const o18 Float32)
(declare-const o19 Float32)
(declare-const temp___526 Float32)
(declare-const o20 Float32)
(declare-const o21 Float32)
(declare-const o22 Float32)
(declare-const o23 Float32)
(declare-const o24 Float32)
(declare-const o25 Float32)
(declare-const o26 Float32)
(declare-const o27 Float32)
(declare-const o28 Bool)
(declare-const o29 Int)
(declare-const g1 Int)
(declare-const result int__ref)
(declare-const letter1 Int)
(declare-const result1 int__ref)
(declare-const a1 Int)
(declare-const result2 int__ref)
(declare-const b1 Int)
(declare-const result3 int__ref)
(declare-const c1 Int)
(declare-const result4 int__ref)
(declare-const d1 Int)
(declare-const result5 int__ref)
(declare-const e1 Int)
(declare-const result6 int__ref)
(declare-const ch1 Int)
(declare-const result7 t__ref)
(declare-const x1 Float32)
(declare-const result8 int__ref)
(declare-const a2 Int)
(declare-const result9 int__ref)
(declare-const d2 Int)
(declare-const result10 int__ref)
(declare-const b2 Int)
(declare-const result11 int__ref)
(declare-const e2 Int)
(declare-const result12 int__ref)
(declare-const f1 Int)
(declare-const result13 int__ref)
(declare-const e3 Int)
(declare-const result14 int__ref)
(declare-const f2 Int)
(declare-const result15 int__ref)
(declare-const f3 Int)
(declare-const result16 int__ref)
(declare-const f4 Int)
(declare-const result17 int__ref)
(declare-const f5 Int)
(declare-const result18 int__ref)
(declare-const g2 Int)
(declare-const result19 int__ref)
(declare-const g3 Int)
(declare-const result20 int__ref)
(declare-const g4 Int)
(declare-const result21 bool__ref)
(declare-const success1 Bool)
(declare-const result22 int__ref)
(declare-const h1 Int)
(declare-const result23 int__ref)
(declare-const h2 Int)
(declare-const result24 int__ref)
(declare-const h3 Int)
(declare-const result25 int__ref)
(declare-const h4 Int)
(declare-const result26 int__ref)
(declare-const h5 Int)
(declare-const result27 bool__ref)
(declare-const success2 Bool)
(declare-const result28 int__ref)
(declare-const c2 Int)
(declare-const result29 int__ref)
(declare-const c3 Int)
(declare-const result30 int__ref)
(declare-const c4 Int)
(declare-const result31 int__ref)
(declare-const c5 Int)
(declare-const result32 int__ref)
(declare-const c6 Int)
(declare-const result33 int__ref)
(declare-const c7 Int)
(declare-const result34 int__ref)
(declare-const c8 Int)
(declare-const result35 t__ref)
(declare-const y1 Float32)
(declare-const result36 t__ref)
(declare-const y2 Float32)
(declare-const result37 t__ref)
(declare-const y3 Float32)
(declare-const result38 Bool)
(declare-const result39 Bool)
(declare-const result40 Bool)
(declare-const result41 Bool)
(declare-const result42 Bool)
(declare-const result43 int__ref)
(declare-const value1 Int)
(declare-const result44 int__ref)
(declare-const sum1 Int)
(declare-const value2 Int)
(declare-const sum2 Int)
(declare-const ada__integer_text_io__get__2__item Int)
(declare-const result45 int__ref)
(declare-const value3 Int)
(declare-const sum3 int__ref)
(declare-const sum4 Int)
(declare-const value4 int__ref)
(declare-const sum5 int__ref)
(declare-const value5 Int)
(declare-const sum6 Int)
(declare-const value6 int__ref)
(declare-const sum7 int__ref)
(declare-const value7 Int)
(declare-const sum8 Int)
(declare-const result46 t__ref)
(declare-const approx1 Float32)
(declare-const result47 Bool)
(declare-const approx2 Float32)
(declare-const result48 t__ref)
(declare-const approx3 Float32)
(declare-const result49 Bool)
(declare-const approx4 t__ref)
(declare-const approx5 Float32)
(declare-const approx6 t__ref)
(declare-const approx7 Float32)
(declare-const result50 int__ref)
(declare-const count4 Int)
(declare-const result51 int__ref)
(declare-const count5 Int)
(declare-const result52 int__ref)
(declare-const count6 Int)
(declare-const result53 int__ref)
(declare-const count7 Int)
(declare-const result54 int__ref)
(declare-const count8 Int)
(declare-const result55 int__ref)
(declare-const count9 Int)
(declare-const result56 int__ref)
(declare-const count10 Int)
(declare-const result57 int__ref)
(declare-const count11 Int)
(declare-const result58 int__ref)
(declare-const a3 Int)
(declare-const result59 int__ref)
(declare-const b3 Int)
(declare-const result60 int__ref)
(declare-const count12 Int)
(declare-const count13 Int)
(declare-const count14 int__ref)
(declare-const count15 Int)
(declare-const count16 int__ref)
(declare-const count17 Int)
(declare-const result61 int__ref)
(declare-const count18 Int)
(declare-const count19 Int)
(declare-const count20 int__ref)
(declare-const count21 Int)
(declare-const count22 int__ref)
(declare-const count23 Int)
(declare-const temperature1 Int)
(declare-const valve_setting1 Int)
(declare-const temperature2 Int)
(assert (in_range3 default_width))
(assert (in_range4 default_base))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 a)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 b)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 c)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 d)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 e)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 f)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 g)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 h)))
(assert (=> (<= 0 255) (in_range2 ch)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 temperature)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 valve_setting)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 value)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 sum)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 approx)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 x)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (fp.isFinite32 y)))
(assert (fp.isFinite32 tolerance))
(assert (= result (mk_int__ref letter)))
(assert (= letter1 81))
(assert (in_range6 letter1))
(assert (= result1 (mk_int__ref a)))
(assert (= a1 1))
(assert (= result2 (mk_int__ref b)))
(assert (= b1 2))
(assert (= result3 (mk_int__ref c)))
(assert (= c1 3))
(assert (= result4 (mk_int__ref d)))
(assert (= d1 3))
(assert (= result5 (mk_int__ref e)))
(assert (= e1 4))
(assert (= result6 (mk_int__ref ch)))
(assert (= ch1 68))
(assert (= result7 (mk_t__ref x)))
(assert (= x1 (fp #b0 #b10000101 #b11101101110100011000001)))
(assert (=> (< a1 0) (and (= o (- a1)) (in_range1 (- a1)))))
(assert (=> (< a1 0) (= result8 (mk_int__ref a1))))
(assert (=> (< a1 0) (= a2 o)))
(assert (=> (< a1 0) (= result9 (mk_int__ref d1))))
(assert (=> (< a1 0) (= d2 1)))
(assert (=> (not (< a1 0)) (= d2 d1)))
(assert (=> (not (< a1 0)) (= a2 a1)))
(assert (=> (and (<= 1 a2) (<= a2 12)) (= result10 (mk_int__ref b1))))
(assert (=> (and (<= 1 a2) (<= a2 12)) (= b2 17)))
(assert (=> (not (and (<= 1 a2) (<= a2 12))) (= b2 b1)))
(assert (=> (< b2 a2) (= result11 (mk_int__ref e1))))
(assert (=> (< b2 a2) (= e2 1)))
(assert (=> (< b2 a2) (= result12 (mk_int__ref f))))
(assert (=> (< b2 a2) (= f1 a2)))
(assert (=> (not (< b2 a2)) (= result13 (mk_int__ref e1))))
(assert (=> (not (< b2 a2)) (= e3 2)))
(assert (=> (not (< b2 a2)) (= result14 (mk_int__ref f))))
(assert (=> (not (< b2 a2)) (= f2 b2)))
(assert (=> (not (< b2 a2)) (= f1 f2)))
(assert (=> (not (< b2 a2)) (= e2 e3)))
(assert (=> (= a2 b2) (= result15 (mk_int__ref f1))))
(assert (=> (= a2 b2) (= f3 3)))
(assert (=> (not (= a2 b2)) (=> (< b2 a2) (= result16 (mk_int__ref f1)))))
(assert (=> (not (= a2 b2)) (=> (< b2 a2) (= f4 4))))
(assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= result17 (mk_int__ref f1)))))
(assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= f5 5))))
(assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= f4 f5))))
(assert (=> (not (= a2 b2)) (= f3 f4)))
(assert (=> (and (< b2 a2) (< c1 a2)) (= result18 (mk_int__ref g))))
(assert (=> (and (< b2 a2) (< c1 a2)) (= g2 6)))
(assert (=> (not (and (< b2 a2) (< c1 a2))) (=> (and (< a2 b2) (< c1 b2)) (= result19 (mk_int__ref g)))))
(assert (=> (not (and (< b2 a2) (< c1 a2))) (=> (and (< a2 b2) (< c1 b2)) (= g3 7))))
(assert (=> (not (and (< b2 a2) (< c1 a2))) (=> (not (and (< a2 b2) (< c1 b2))) (=> (and (< a2 c1) (< b2 c1)) (= result20 (mk_int__ref g))))))
(assert (=> (not (and (< b2 a2) (< c1 a2))) (=> (not (and (< a2 b2) (< c1 b2))) (=> (and (< a2 c1) (< b2 c1)) (= g4 8)))))
(assert (=> (not (and (< b2 a2) (< c1 a2))) (=> (not (and (< a2 b2) (< c1 b2))) (=> (not (and (< a2 c1) (< b2 c1))) (= g4 g)))))
(assert (=> (not (and (< b2 a2) (< c1 a2))) (=> (not (and (< a2 b2) (< c1 b2))) (=> (not (and (< a2 c1) (< b2 c1))) (= g4 g1)))))
(assert (=> (not (and (< b2 a2) (< c1 a2))) (=> (not (and (< a2 b2) (< c1 b2))) (= g3 g4))))
(assert (=> (not (and (< b2 a2) (< c1 a2))) (= g2 g3)))
(assert (= result21 (mk_bool__ref success)))
(assert (= success1 (of_int1 1)))
(assert (=> (and (<= 97 ch1) (<= ch1 122)) (= result22 (mk_int__ref h))))
(assert (=> (and (<= 97 ch1) (<= ch1 122)) (= h1 1)))
(assert (=> (and (<= 97 ch1) (<= ch1 122)) (= success2 success1)))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (and (<= 65 ch1) (<= ch1 90)) (= result23 (mk_int__ref h)))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (and (<= 65 ch1) (<= ch1 90)) (= h2 2))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (and (<= 65 ch1) (<= ch1 90)) (= success2 success1))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (and (<= 48 ch1) (<= ch1 57)) (= result24 (mk_int__ref h))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (and (<= 48 ch1) (<= ch1 57)) (= h3 3)))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (and (<= 48 ch1) (<= ch1 57)) (= success2 success1)))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))) (= result25 (mk_int__ref h)))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))) (= h4 4))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))) (= success2 success1))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= result26 (mk_int__ref h)))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= h5 5))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= result27 (mk_bool__ref success1)))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= success2 (of_int1 0)))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= h4 h5))))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (=> (not (and (<= 48 ch1) (<= ch1 57))) (= h3 h4)))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (=> (not (and (<= 65 ch1) (<= ch1 90))) (= h2 h3))))
(assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (= h1 h2)))
(assert (not (< b2 a2)))
(assert (not (not (= 2 0))))
(check-sat)
(exit)
