(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort u 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (u u) Bool)
(declare-const dummy1 u)
(declare-datatypes () ((u__ref (mk_u__ref (u__content u)))))
(define-fun u__ref___projection ((a u__ref)) u (u__content a))
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 10)) (in_range2 temp___expr_166)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const a (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const left Int)
(declare-const right Int)
(declare-const med Int)
(declare-const binary_search__search__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const binary_search__search__result1 Int)
(declare-const result Int)
(declare-const left1 Int)
(declare-const result1 Int)
(declare-const right1 Int)
(declare-const binary_search__search__result2 Int)
(declare-const left2 Int)
(declare-const right2 Int)
(declare-const med1 Int)
(declare-const binary_search__search__result3 Int)
(declare-const temp___184 Int)
(declare-const result2 Int)
(declare-const temp___1841 Int)
(declare-const result3 Int)
(declare-const med2 Int)
(declare-const result4 Int)
(declare-const left3 Int)
(declare-const result5 Int)
(declare-const right3 Int)
(declare-const binary_search__search__result4 Int)
(assert (in_range1 i))
(assert (forall ((i1 Int)) (=> (and (<= 1 i1) (<= i1 10)) (forall ((i2 Int)) (=> (and (<= i1 i2) (<= i2 10)) (<= (to_rep (select a i1)) (to_rep (select a i2))))))))
(assert (=> (<= 1 10) (in_range2 left)))
(assert (=> (<= 1 10) (in_range2 right)))
(assert (=> (<= 1 10) (in_range2 med)))
(assert (= (mk_int__ref result) (mk_int__ref left)))
(assert (= left1 1))
(assert (= (mk_int__ref result1) (mk_int__ref right)))
(assert (= right1 10))
(assert (not (< i (to_rep (select a left1)))))
(assert (not (< (to_rep (select a right1)) i)))
(assert (= binary_search__search__result2 binary_search__search__result))
(assert (= binary_search__search__result2 binary_search__search__result1))
(assert (<= left1 right1))
(assert (and (forall ((index Int)) (=> (and (<= 1 index) (<= index (- left2 1))) (< (to_rep (select a index)) i))) (forall ((index Int)) (=> (and (<= (+ right2 1) index) (<= index 10)) (< i (to_rep (select a index)))))))
(assert (and (and (and (=> (<= 1 10) (in_range2 left2)) (=> (<= 1 10) (in_range2 right2))) (=> (<= 1 10) (in_range2 med1))) (<= left2 right2)))
(assert (= temp___184 result2))
(assert (= temp___1841 (- right2 left2)))
(assert (and (= o (+ left2 (div1 (- right2 left2) 2))) (in_range2 (+ left2 (div1 (- right2 left2) 2)))))
(assert (= med1 result3))
(assert (= med2 o))
(assert (=> (< (to_rep (select a med2)) i) (and (= o1 (+ med2 1)) (in_range2 (+ med2 1)))))
(assert (=> (< (to_rep (select a med2)) i) (= left2 result4)))
(assert (=> (< (to_rep (select a med2)) i) (= left3 o1)))
(assert (=> (< (to_rep (select a med2)) i) (= binary_search__search__result4 binary_search__search__result3)))
(assert (=> (< (to_rep (select a med2)) i) (= right3 right2)))
(assert (=> (not (< (to_rep (select a med2)) i)) (< i (to_rep (select a med2)))))
(assert (=> (not (< (to_rep (select a med2)) i)) (and (= o2 (- med2 1)) (in_range2 (- med2 1)))))
(assert (=> (not (< (to_rep (select a med2)) i)) (= right2 result5)))
(assert (=> (not (< (to_rep (select a med2)) i)) (= right3 o2)))
(assert (=> (not (< (to_rep (select a med2)) i)) (= binary_search__search__result4 binary_search__search__result3)))
(assert (=> (not (< (to_rep (select a med2)) i)) (= left3 left2)))
(assert (<= left3 right3))
(declare-const index Int)
(assert (<= 1 index))
(assert (<= index (- left3 1)))
(assert (not (< (to_rep (select a index)) i)))
(check-sat)
(exit)
