(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort value 0)
(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (value value) Bool)
(declare-const dummy3 value)
(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))
(define-fun dynamic_invariant1 ((temp___expr_596 Int) (temp___is_init_592 Bool) (temp___skip_constant_593 Bool) (temp___do_toplevel_594 Bool) (temp___do_typ_inv_595 Bool)) Bool (=> (or (= temp___is_init_592 true) (<= (- 2147483648) 2147483647)) (in_range4 temp___expr_596)))
(declare-fun to_rep2 (value) Int)
(declare-fun of_rep2 (Int) value)
(assert (forall ((x value)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x value)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))
(assert (forall ((a (Array Int value))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int value)) (a__first Int) (a__last Int) (b (Array Int value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep2 (select a temp___idx_173)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int value)) (b (Array Int value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep2 (select a temp___idx_173)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int value)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int value) (elts a))
(define-fun of_array ((a (Array Int value)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int value)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int value)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int value)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int value))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((values__ref (mk_values__ref (values__content us_t)))))
(define-fun values__ref___projection ((a values__ref)) us_t (values__content a))
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content integer)))))
(define-fun t3s__ref___2__projection ((a t3s__ref)) integer (t3s__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int value)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int value) (elts1 a))
(define-fun of_array1 ((a (Array Int value)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int value)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int value)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int value)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int value))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq6 (us_t1 us_t1) Bool)
(declare-const dummy6 us_t1)
(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content us_t1)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t1 (t4s__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__simple_unc_arrays__table__last natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural (rec__simple_unc_arrays__table__last a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__simple_unc_arrays__table__v us_t1)))))
(define-fun us_split_fields_V__projection ((a us_split_fields)) us_t1 (rec__simple_unc_arrays__table__v a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq3 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 b)))) (= (bool_eq2 (rec__simple_unc_arrays__table__v (us_split_fields1 a)) (rec__simple_unc_arrays__table__v (us_split_fields1 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const simple_unc_arrays__table__last__first__bit Int)
(declare-const simple_unc_arrays__table__last__last__bit Int)
(declare-const simple_unc_arrays__table__last__position Int)
(assert (<= 0 simple_unc_arrays__table__last__first__bit))
(assert (< simple_unc_arrays__table__last__first__bit simple_unc_arrays__table__last__last__bit))
(assert (<= 0 simple_unc_arrays__table__last__position))
(declare-const simple_unc_arrays__table__v__first__bit Int)
(declare-const simple_unc_arrays__table__v__last__bit Int)
(declare-const simple_unc_arrays__table__v__position Int)
(assert (<= 0 simple_unc_arrays__table__v__first__bit))
(assert (< simple_unc_arrays__table__v__first__bit simple_unc_arrays__table__v__last__bit))
(assert (<= 0 simple_unc_arrays__table__v__position))
(declare-fun user_eq7 (us_rep us_rep) Bool)
(declare-const dummy7 us_rep)
(declare-datatypes () ((table__ref (mk_table__ref (table__content us_rep)))))
(define-fun table__ref___projection ((a table__ref)) us_rep (table__content a))
(define-fun dynamic_invariant2 ((temp___expr_609 us_rep) (temp___is_init_605 Bool) (temp___skip_constant_606 Bool) (temp___do_toplevel_607 Bool) (temp___do_typ_inv_608 Bool)) Bool (let ((temp___610 (rec__simple_unc_arrays__table__last (us_split_discrs1 temp___expr_609)))) (and (dynamic_property2 1 (to_rep temp___610) (first3 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_609))) (last3 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_609)))) (and (= (first3 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_609))) 1) (= (last3 (rec__simple_unc_arrays__table__v (us_split_fields1 temp___expr_609))) (to_rep temp___610))))))
(declare-const a__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const first4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const last4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const r63b Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (integer integer) Bool)
(declare-const dummy8 integer)
(declare-datatypes () ((tS62bP1__ref (mk_tS62bP1__ref (tS62bP1__content integer)))))
(define-fun tS62bP1__ref___projection ((a tS62bP1__ref)) integer (tS62bP1__content a))
(declare-sort t2 0)
(declare-fun first5 (t2) integer)
(declare-fun last5 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first5 (mk2 f l))) f) (= (to_rep1 (last5 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property3 range_first range_last low) (dynamic_property3 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int value)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int value) (elts2 a))
(define-fun of_array2 ((a (Array Int value)) (f Int) (l Int)) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first6 ((a us_t2)) Int (to_rep1 (first5 (rt2 a))))
(define-fun last6 ((a us_t2)) Int (to_rep1 (last5 (rt2 a))))
(define-fun length2 ((a us_t2)) Int (ite (<= (first6 a) (last6 a)) (+ (- (last6 a) (first6 a)) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int value)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int value)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int value)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int value))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int value))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int value))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq4 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first5 (rt2 x))) (to_rep1 (last5 (rt2 x))) (elts2 y) (to_rep1 (first5 (rt2 y))) (to_rep1 (last5 (rt2 y)))))
(declare-fun user_eq9 (us_t2 us_t2) Bool)
(declare-const dummy9 us_t2)
(declare-datatypes () ((s62b__ref (mk_s62b__ref (s62b__content us_t2)))))
(define-fun s62b__ref___projection ((a s62b__ref)) us_t2 (s62b__content a))
(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range3 temp___expr_46)))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant5 ((temp___expr_603 us_t) (temp___is_init_599 Bool) (temp___skip_constant_600 Bool) (temp___do_toplevel_601 Bool) (temp___do_typ_inv_602 Bool)) Bool (=> (not (= temp___skip_constant_600 true)) (dynamic_property 1 2147483647 (first1 temp___expr_603) (last1 temp___expr_603))))
(define-fun dynamic_invariant6 ((temp___expr_835 us_t2) (temp___is_init_831 Bool) (temp___skip_constant_832 Bool) (temp___do_toplevel_833 Bool) (temp___do_typ_inv_834 Bool)) Bool (=> (not (= temp___skip_constant_832 true)) (and (dynamic_property4 1 r63b (first6 temp___expr_835) (last6 temp___expr_835)) (and (= (first6 temp___expr_835) 1) (= (last6 temp___expr_835) r63b)))))
(declare-const a__split_fields (Array Int value))
(declare-const a__split_fields1 t1)
(declare-const pivot_index Int)
(declare-const right Int)
(declare-const left Int)
(declare-const pivot_value Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 value)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 value)
(declare-const o9 Int)
(declare-const result Int)
(declare-const pivot_index1 Int)
(declare-const result1 Int)
(declare-const pivot_value1 Int)
(declare-const result2 Int)
(declare-const left1 Int)
(declare-const result3 Int)
(declare-const right1 Int)
(declare-const a__split_fields2 (Array Int value))
(declare-const a__split_fields3 t1)
(declare-const right2 Int)
(declare-const left2 Int)
(declare-const result4 Bool)
(declare-const left3 Int)
(assert (in_range2 first4))
(assert (in_range2 last4))
(assert (dynamic_invariant2 (mk___rep a__split_discrs (mk___split_fields (mk___t1 a__split_fields a__split_fields1))) true false true true))
(assert (or (= last4 0) (<= first4 last4)))
(assert (=> (<= 0 2147483647) (in_range2 pivot_index)))
(assert (=> (<= 0 2147483647) (in_range2 right)))
(assert (=> (<= 0 2147483647) (in_range2 left)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range4 pivot_value)))
(assert (< first4 last4))
(assert (and (= o (+ first4 last4)) (in_range1 (+ first4 last4))))
(assert (= o1 (+ o 1)))
(assert (and (= o2 o1) (in_range1 o1)))
(assert (= o3 (div1 o2 2)))
(assert (= result pivot_index))
(assert (= pivot_index1 o3))
(assert (and (<= (to_rep1 (first2 a__split_fields1)) pivot_index1) (<= pivot_index1 (to_rep1 (last2 a__split_fields1)))))
(assert (= o4 pivot_index1))
(assert (= o5 (select a__split_fields o4)))
(assert (= o6 (to_rep2 o5)))
(assert (= result1 pivot_value))
(assert (= pivot_value1 o6))
(assert (= result2 left))
(assert (= left1 first4))
(assert (= result3 right))
(assert (= right1 last4))
(assert (and (and (dynamic_invariant2 (mk___rep a__split_discrs (mk___split_fields (mk___t1 a__split_fields2 a__split_fields3))) true true true true) (=> (<= 0 2147483647) (in_range2 right2))) (=> (<= 0 2147483647) (in_range2 left2))))
(assert (=> (< left2 last4) (and (<= (to_rep1 (first2 a__split_fields3)) left2) (<= left2 (to_rep1 (last2 a__split_fields3))))))
(assert (=> (< left2 last4) (= o7 left2)))
(assert (=> (< left2 last4) (= o8 (select a__split_fields2 o7))))
(assert (=> (< left2 last4) (= o9 (to_rep2 o8))))
(assert (=> (< left2 last4) (= result4 (ite (< o9 pivot_value1) true false))))
(assert (=> (not (< left2 last4)) (= result4 false)))
(assert (= result4 true))
(assert (and (=> (<= 0 2147483647) (in_range2 left3)) (and (< left3 last4) (< (to_rep2 (select a__split_fields2 left3)) pivot_value1))))
(assert (not (in_range1 (+ left3 1))))
(check-sat)
(exit)
