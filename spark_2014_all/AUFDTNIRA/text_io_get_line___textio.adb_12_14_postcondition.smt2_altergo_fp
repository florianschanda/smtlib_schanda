(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type positive

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type int__

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : int__, int__ -> bool

logic dummy2 : int__

type int____ref = { int____content : int__
}

function int____ref___2__projection(a: int____ref) : int__ =
  (a).int____content

logic eof : int

logic attr__ATTRIBUTE_ADDRESS : int

type file_descr

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : file_descr, file_descr -> bool

logic dummy3 : file_descr

type file_descr__ref = { file_descr__content : file_descr
}

function file_descr__ref___projection(a: file_descr__ref) : file_descr =
  (a).file_descr__content

logic to_rep1 : file_descr -> int

logic of_rep1 : int -> file_descr

axiom inversion_axiom1 :
  (forall x:file_descr [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:file_descr [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic eof_ch : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic ferror : int -> int

logic ferror__function_guard : int, int -> prop

axiom ferror__post_axiom :
  (forall stream:int [ferror(stream)]. (in_range3(stream) ->
  in_range2(ferror(stream))))

type count

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : count, count -> bool

logic dummy4 : count

type count__ref = { count__content : count
}

function count__ref___projection(a: count__ref) : count = (a).count__content

logic to_rep2 : count -> int

logic of_rep2 : int -> count

axiom inversion_axiom2 :
  (forall x:count [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:count [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__textio__file_type__descr : file_descr;
rec__textio__file_type__before_lm : bool;
rec__textio__file_type__before_lm_pm : bool; rec__textio__file_type__col :
count; rec__textio__file_type__line : count; rec__textio__file_type__page :
count; rec__textio__file_type__is_regular_file : bool
}

function us_split_fields_Descr__projection(a: us_split_fields) : file_descr =
  (a).rec__textio__file_type__descr

function us_split_fields_Before_LM__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm

function us_split_fields_Before_LM_PM__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm_pm

function us_split_fields_Col__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__col

function us_split_fields_Line__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__line

function us_split_fields_Page__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__page

function us_split_fields_Is_Regular_File__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__is_regular_file

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  (((((((((to_rep1(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep1(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm = ((b).us_split_fields1).rec__textio__file_type__before_lm)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm_pm = ((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep2(((a).us_split_fields1).rec__textio__file_type__col) = to_rep2(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep2(((a).us_split_fields1).rec__textio__file_type__line) = to_rep2(((b).us_split_fields1).rec__textio__file_type__line))) and
  (to_rep2(((a).us_split_fields1).rec__textio__file_type__page) = to_rep2(((b).us_split_fields1).rec__textio__file_type__page))) and
  (((a).us_split_fields1).rec__textio__file_type__is_regular_file = ((b).us_split_fields1).rec__textio__file_type__is_regular_file)) ->
  (bool_eq7(a, b) = true)) and
  ((not (((((((to_rep1(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep1(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm = ((b).us_split_fields1).rec__textio__file_type__before_lm)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm_pm = ((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep2(((a).us_split_fields1).rec__textio__file_type__col) = to_rep2(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep2(((a).us_split_fields1).rec__textio__file_type__line) = to_rep2(((b).us_split_fields1).rec__textio__file_type__line))) and
  (to_rep2(((a).us_split_fields1).rec__textio__file_type__page) = to_rep2(((b).us_split_fields1).rec__textio__file_type__page))) and
  (((a).us_split_fields1).rec__textio__file_type__is_regular_file = ((b).us_split_fields1).rec__textio__file_type__is_regular_file))) ->
  (bool_eq7(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:file_descr. forall a1:bool. forall a2:bool. forall a3:count.
  forall a4:count. forall a5:count. forall a6:bool. (0 <= object__size({
  us_split_fields1 = { rec__textio__file_type__descr = a;
  rec__textio__file_type__before_lm = a1;
  rec__textio__file_type__before_lm_pm = a2; rec__textio__file_type__col =
  a3; rec__textio__file_type__line = a4; rec__textio__file_type__page = a5;
  rec__textio__file_type__is_regular_file = a6 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:file_descr. forall a1:bool. forall a2:bool. forall a3:count.
  forall a4:count. forall a5:count. forall a6:bool. (0 <= object__alignment({
  us_split_fields1 = { rec__textio__file_type__descr = a;
  rec__textio__file_type__before_lm = a1;
  rec__textio__file_type__before_lm_pm = a2; rec__textio__file_type__col =
  a3; rec__textio__file_type__line = a4; rec__textio__file_type__page = a5;
  rec__textio__file_type__is_regular_file = a6 } })))

logic textio__file_type__descr__first__bit : int

logic textio__file_type__descr__last__bit : int

logic textio__file_type__descr__position : int

axiom textio__file_type__descr__first__bit_axiom :
  (0 <= textio__file_type__descr__first__bit)

axiom textio__file_type__descr__last__bit_axiom :
  (textio__file_type__descr__first__bit <  textio__file_type__descr__last__bit)

axiom textio__file_type__descr__position_axiom :
  (0 <= textio__file_type__descr__position)

logic textio__file_type__before_lm__first__bit : int

logic textio__file_type__before_lm__last__bit : int

logic textio__file_type__before_lm__position : int

axiom textio__file_type__before_lm__first__bit_axiom :
  (0 <= textio__file_type__before_lm__first__bit)

axiom textio__file_type__before_lm__last__bit_axiom :
  (textio__file_type__before_lm__first__bit <  textio__file_type__before_lm__last__bit)

axiom textio__file_type__before_lm__position_axiom :
  (0 <= textio__file_type__before_lm__position)

logic textio__file_type__before_lm_pm__first__bit : int

logic textio__file_type__before_lm_pm__last__bit : int

logic textio__file_type__before_lm_pm__position : int

axiom textio__file_type__before_lm_pm__first__bit_axiom :
  (0 <= textio__file_type__before_lm_pm__first__bit)

axiom textio__file_type__before_lm_pm__last__bit_axiom :
  (textio__file_type__before_lm_pm__first__bit <  textio__file_type__before_lm_pm__last__bit)

axiom textio__file_type__before_lm_pm__position_axiom :
  (0 <= textio__file_type__before_lm_pm__position)

logic textio__file_type__col__first__bit : int

logic textio__file_type__col__last__bit : int

logic textio__file_type__col__position : int

axiom textio__file_type__col__first__bit_axiom :
  (0 <= textio__file_type__col__first__bit)

axiom textio__file_type__col__last__bit_axiom :
  (textio__file_type__col__first__bit <  textio__file_type__col__last__bit)

axiom textio__file_type__col__position_axiom :
  (0 <= textio__file_type__col__position)

logic textio__file_type__line__first__bit : int

logic textio__file_type__line__last__bit : int

logic textio__file_type__line__position : int

axiom textio__file_type__line__first__bit_axiom :
  (0 <= textio__file_type__line__first__bit)

axiom textio__file_type__line__last__bit_axiom :
  (textio__file_type__line__first__bit <  textio__file_type__line__last__bit)

axiom textio__file_type__line__position_axiom :
  (0 <= textio__file_type__line__position)

logic textio__file_type__page__first__bit : int

logic textio__file_type__page__last__bit : int

logic textio__file_type__page__position : int

axiom textio__file_type__page__first__bit_axiom :
  (0 <= textio__file_type__page__first__bit)

axiom textio__file_type__page__last__bit_axiom :
  (textio__file_type__page__first__bit <  textio__file_type__page__last__bit)

axiom textio__file_type__page__position_axiom :
  (0 <= textio__file_type__page__position)

logic textio__file_type__is_regular_file__first__bit : int

logic textio__file_type__is_regular_file__last__bit : int

logic textio__file_type__is_regular_file__position : int

axiom textio__file_type__is_regular_file__first__bit_axiom :
  (0 <= textio__file_type__is_regular_file__first__bit)

axiom textio__file_type__is_regular_file__last__bit_axiom :
  (textio__file_type__is_regular_file__first__bit <  textio__file_type__is_regular_file__last__bit)

axiom textio__file_type__is_regular_file__position_axiom :
  (0 <= textio__file_type__is_regular_file__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : file_descr

logic dummy6 : bool

logic dummy7 : bool

logic dummy8 : count

logic dummy9 : count

logic dummy10 : count

logic dummy11 : bool

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref___projection(a: file_type__ref) : us_rep =
  (a).file_type__content

logic file : file_descr

logic file1 : bool

logic file2 : bool

logic file3 : count

logic file4 : count

logic file5 : count

logic file6 : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom eof_ch__def_axiom : (eof_ch = mod(eof, 256))

logic the_file : (int,character) farray

logic cur_position : int

logic ch : int

logic o : int

logic o1 : bool

logic cur_position1 : int

logic ch1 : int

logic result : bool

logic cur_position2 : int

logic ch2 : int

logic cur_position3 : int

logic ch3 : int

axiom H : (((- 2147483648) <= 2147483647) -> in_range2(ch))

axiom H1 : in_range(cur_position)

axiom H2 : in_range1(eof_ch)

axiom H3 : (mod(eof, 256) = eof_ch)

axiom H4 : in_range2(eof)

axiom H5 : ((((to_rep((the_file[cur_position])) = eof_ch) ->
  ((cur_position1 = cur_position) and (ch1 = eof))) and
  ((not (to_rep((the_file[cur_position])) = eof_ch)) ->
  (((to_rep((the_file[cur_position])) = 10) ->
  ((cur_position1 = cur_position) and (ch1 = 10))) and
  ((not (to_rep((the_file[cur_position])) = 10)) ->
  ((cur_position1 = (cur_position + 1)) and
  (ch1 = to_rep((the_file[cur_position])))))))) and (in_range2(ch1) and
  in_range(cur_position1)))

axiom H6 : ((ch1 = eof) -> ((o = ferror(to_rep1(file))) and in_range2(o)))

axiom H7 : ((ch1 = eof) -> (((o = 0) -> (o1 = true)) and ((not (o = 0)) ->
  (o1 = false))))

axiom H8 : ((ch1 = eof) -> (((not (o1 = true)) -> (result = true)) and
  ((o1 = true) -> (result = false))))

axiom H9 : ((not (ch1 = eof)) -> (result = false))

axiom H10 : (not (result = true))

axiom H11 : (ch1 = ch2)

axiom H12 : (cur_position1 = cur_position2)

axiom H13 : (ch3 = ch1)

axiom H14 : (cur_position3 = cur_position1)

axiom H15 : (to_rep((the_file[cur_position])) = eof_ch)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (cur_position2 = cur_position)
