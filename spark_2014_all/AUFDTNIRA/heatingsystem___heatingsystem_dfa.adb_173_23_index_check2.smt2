(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort times 0)
(declare-fun timesqtint (times) Int)
(assert (forall ((i times)) (and (<= 0 (timesqtint i)) (<= (timesqtint i) 86399))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 86399)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (times times) Bool)
(declare-const dummy times)
(declare-datatypes () ((times__ref (mk_times__ref (times__content times)))))
(define-fun times__ref___projection ((a times__ref)) times (times__content a))
(define-fun dynamic_invariant ((temp___expr_160 Int) (temp___is_init_156 Bool) (temp___skip_constant_157 Bool) (temp___do_toplevel_158 Bool) (temp___do_typ_inv_159 Bool)) Bool (=> (or (= temp___is_init_156 true) (<= 0 86399)) (in_range temp___expr_160)))
(declare-sort positions 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positions positions) Bool)
(declare-const dummy1 positions)
(declare-datatypes () ((positions__ref (mk_positions__ref (positions__content positions)))))
(define-fun positions__ref___projection ((a positions__ref)) positions (positions__content a))
(define-fun dynamic_invariant1 ((temp___expr_199 Int) (temp___is_init_195 Bool) (temp___skip_constant_196 Bool) (temp___do_toplevel_197 Bool) (temp___do_typ_inv_198 Bool)) Bool (=> (or (= temp___is_init_195 true) (<= 0 5)) (in_range1 temp___expr_199)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_rep ((x times)) Int (timesqtint x))
(declare-fun of_rep (Int) times)
(assert (forall ((x times)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x times)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort programtimes 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 2 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (programtimes programtimes) Bool)
(declare-const dummy2 programtimes)
(declare-datatypes () ((programtimes__ref (mk_programtimes__ref (programtimes__content programtimes)))))
(define-fun programtimes__ref___projection ((a programtimes__ref)) programtimes (programtimes__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int times))))))
(declare-fun slide ((Array Int times) Int Int) (Array Int times))
(assert (forall ((a (Array Int times))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int times))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int times)) (a__first Int) (a__last Int) (b (Array Int times)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int times)) (b (Array Int times))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant2 ((temp___expr_255 Int) (temp___is_init_251 Bool) (temp___skip_constant_252 Bool) (temp___do_toplevel_253 Bool) (temp___do_typ_inv_254 Bool)) Bool (=> (or (= temp___is_init_251 true) (<= 2 5)) (in_range2 temp___expr_255)))
(declare-const onofftime (Array Int times))
(declare-const clockoffset Int)
(declare-const switchposition Int)
(declare-const timer Int)
(declare-const o Int)
(declare-const o1 times)
(declare-const o2 Int)
(declare-const o3 times)
(declare-const switchposition1 Int)
(declare-const result Int)
(declare-const timer1 Int)
(declare-const timer2 Int)
(assert (in_range clockoffset))
(assert (=> (<= 0 5) (in_range1 switchposition)))
(assert (=> (<= 0 86399) (in_range timer)))
(assert (in_range1 switchposition1))
(assert (not (= switchposition1 0)))
(assert (not (= switchposition1 1)))
(assert (and (<= 2 switchposition1) (<= switchposition1 5)))
(assert (= o switchposition1))
(assert (= o1 (select onofftime o)))
(assert (= o2 (to_rep o1)))
(assert (= result timer))
(assert (= timer1 o2))
(assert (in_range timer2))
(assert (= (to_rep o3) timer2))
(assert (not (<= 2 switchposition1)))
(check-sat)
(exit)
