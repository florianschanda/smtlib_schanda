(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type statust

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : statust, statust -> bool

logic dummy5 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

logic nouser : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___String_Literal_136 : unit -> (int,character) farray

axiom temp___String_Literal_136__def_axiom :
  ((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_136(void)[1])) = 78) and
  (to_rep((temp___String_Literal_136(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_136(void)[3])) = 85)) and
  (to_rep((temp___String_Literal_136(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_136(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_136(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_136(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[17])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[18])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[26])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[28])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[30])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[31])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[32])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[33])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[34])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[35])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[36])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[38])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[39])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[40])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[41])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[42])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[43])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[44])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[45])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[46])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[47])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[48])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[49])) = 32)) and
  (to_rep((temp___String_Literal_136(void)[50])) = 32))

type filesizet

predicate in_range5(x: int) = ((0 <= x) and (x <= 4194304))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : filesizet, filesizet -> bool

logic dummy6 : filesizet

type filesizet__ref = { filesizet__content : filesizet
}

function filesizet__ref___projection(a: filesizet__ref) : filesizet =
  (a).filesizet__content

logic to_rep2 : filesizet -> int

logic of_rep2 : int -> filesizet

axiom inversion_axiom2 :
  (forall x:filesizet [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:filesizet [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type durationt

predicate in_range6(x: int) = ((0 <= x) and (x <= 864000))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : durationt, durationt -> bool

logic dummy7 : durationt

type durationt__ref = { durationt__content : durationt
}

function durationt__ref___projection(a: durationt__ref) : durationt =
  (a).durationt__content

logic to_rep3 : durationt -> int

logic of_rep3 : int -> durationt

axiom inversion_axiom3 :
  (forall x:durationt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:durationt [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type fart

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : fart, fart -> bool

logic dummy8 : fart

type fart__ref = { fart__content : fart
}

function fart__ref___projection(a: fart__ref) : fart = (a).fart__content

logic to_rep4 : fart -> int

logic of_rep4 : int -> fart

axiom inversion_axiom4 :
  (forall x:fart [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:fart [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type classt

predicate in_range8(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : classt, classt -> bool

logic dummy9 : classt

type classt__ref = { classt__content : classt
}

function classt__ref___projection(a: classt__ref) : classt =
  (a).classt__content

logic to_rep5 : classt -> int

logic of_rep5 : int -> classt

axiom inversion_axiom5 :
  (forall x:classt [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:classt [to_rep5(x)]. in_range8(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range8(x) ->
  (to_rep5(of_rep5(x)) = x)))

type accesspolicyt

predicate in_range9(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : accesspolicyt, accesspolicyt -> bool

logic dummy10 : accesspolicyt

type accesspolicyt__ref = { accesspolicyt__content : accesspolicyt
}

function accesspolicyt__ref___projection(a: accesspolicyt__ref) : accesspolicyt =
  (a).accesspolicyt__content

logic to_rep6 : accesspolicyt -> int

logic of_rep6 : int -> accesspolicyt

axiom inversion_axiom6 :
  (forall x:accesspolicyt [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:accesspolicyt [to_rep6(x)]. in_range9(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range9(x) ->
  (to_rep6(of_rep6(x)) = x)))

type logfileindext

predicate in_range10(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : logfileindext, logfileindext -> bool

logic dummy11 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep7 : logfileindext -> int

logic of_rep7 : int -> logfileindext

axiom inversion_axiom7 :
  (forall x:logfileindext [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:logfileindext [to_rep7(x)]. in_range10(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range10(x) ->
  (to_rep7(of_rep7(x)) = x)))

type logentrycountt

predicate in_range11(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq11 : logentrycountt, logentrycountt -> bool

logic dummy12 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep8 : logentrycountt -> int

logic of_rep8 : int -> logentrycountt

axiom inversion_axiom8 :
  (forall x:logentrycountt [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:logentrycountt [to_rep8(x)]. in_range11(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range11(x) ->
  (to_rep8(of_rep8(x)) = x)))

type map__ref1 = { map__content1 : (int,logfileindext) farray
}

logic slide1 : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq1 :
  (forall a:(int,logfileindext) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> (int,logfileindext) farray

axiom concat_def1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : logfileindext, int -> (int,logfileindext) farray

axiom singleton_def1 :
  (forall v:logfileindext.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq15 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def13 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq15(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_150:int. ((((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) and
  (to_rep7((a[temp___idx_150])) = to_rep7((b[((b__first - a__first) + temp___idx_150)])))) or
  (not ((a__first <= temp___idx_150) and (temp___idx_150 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_150:int. (((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) ->
  (to_rep7((a[temp___idx_150])) = to_rep7((b[((b__first - a__first) + temp___idx_150)]))))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_150:int. (((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) ->
  (to_rep7((a[temp___idx_150])) = to_rep7((b[((b__first - a__first) + temp___idx_150)])))))))))

logic compare1 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq15(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq15(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep7((a[(i + 1)])) <  to_rep7((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq15(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep7((b[(i + 1)])) <  to_rep7((a[(j + 1)]))))))))))))

logic dummy13 : (int,logfileindext) farray

logic value__size1 : int

logic object__size1 : (int,logfileindext) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,logfileindext) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,logfileindext) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment1(a)))

logic user_eq12 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type logfilecountt

predicate in_range12(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq13 : logfilecountt, logfilecountt -> bool

logic dummy14 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep9 : logfilecountt -> int

logic of_rep9 : int -> logfilecountt

axiom inversion_axiom9 :
  (forall x:logfilecountt [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:logfilecountt [to_rep9(x)]. in_range12(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range12(x) ->
  (to_rep9(of_rep9(x)) = x)))

type us_split_fields = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__2__projection(a: us_split_fields) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq17 : us_rep, us_rep -> bool

axiom bool_eq_def15 :
  (forall a:us_rep. forall b:us_rep [bool_eq17(a, b)].
  ((((((bool_eq15(((a).us_split_fields1).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields1).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep7(((a).us_split_fields1).rec__auditlog__logfilelistt__head) = to_rep7(((b).us_split_fields1).rec__auditlog__logfilelistt__head))) and
  (to_rep7(((a).us_split_fields1).rec__auditlog__logfilelistt__lasti) = to_rep7(((b).us_split_fields1).rec__auditlog__logfilelistt__lasti))) and
  (to_rep9(((a).us_split_fields1).rec__auditlog__logfilelistt__length) = to_rep9(((b).us_split_fields1).rec__auditlog__logfilelistt__length))) ->
  (bool_eq17(a, b) = true)) and
  ((not ((((bool_eq15(((a).us_split_fields1).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields1).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep7(((a).us_split_fields1).rec__auditlog__logfilelistt__head) = to_rep7(((b).us_split_fields1).rec__auditlog__logfilelistt__head))) and
  (to_rep7(((a).us_split_fields1).rec__auditlog__logfilelistt__lasti) = to_rep7(((b).us_split_fields1).rec__auditlog__logfilelistt__lasti))) and
  (to_rep9(((a).us_split_fields1).rec__auditlog__logfilelistt__length) = to_rep9(((b).us_split_fields1).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq17(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size2({
  us_split_fields1 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment2({ us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq14 : us_rep, us_rep -> bool

logic dummy15 : (int,logfileindext) farray

logic dummy16 : logfileindext

logic dummy17 : logfileindext

logic dummy18 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range13(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq15 : fileentrycountt, fileentrycountt -> bool

logic dummy19 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep10 : fileentrycountt -> int

logic of_rep10 : int -> fileentrycountt

axiom inversion_axiom10 :
  (forall x:fileentrycountt [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:fileentrycountt [to_rep10(x)]. in_range13(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range13(x) ->
  (to_rep10(of_rep10(x)) = x)))

type map__ref2 = { map__content2 : (int,fileentrycountt) farray
}

logic slide2 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq2 :
  (forall a:(int,fileentrycountt) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> (int,fileentrycountt) farray

axiom concat_def2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : fileentrycountt, int -> (int,fileentrycountt) farray

axiom singleton_def2 :
  (forall v:fileentrycountt.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq19 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def17 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq19(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep10((a[temp___idx_151])) = to_rep10((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep10((a[temp___idx_151])) = to_rep10((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep10((a[temp___idx_151])) = to_rep10((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare2 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> int

axiom compare_def_eq2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq19(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq19(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep10((a[(i + 1)])) <  to_rep10((b[(j + 1)]))))))))))))

axiom compare_def_gt2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare2(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq19(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep10((b[(i + 1)])) <  to_rep10((a[(j + 1)]))))))))))))

logic dummy20 : (int,fileentrycountt) farray

logic value__size3 : int

logic object__size3 : (int,fileentrycountt) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,fileentrycountt) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,fileentrycountt) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment3(a)))

logic user_eq16 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields2 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields2) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields2) : us_rep =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields2) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___9__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq20 : us_rep1, us_rep1 -> bool

axiom bool_eq_def18 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq20(a, b)].
  ((((((to_rep7(((a).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile) = to_rep7(((b).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep8(((a).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries) = to_rep8(((b).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq17(((a).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq19(((a).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq20(a, b) = true)) and
  ((not ((((to_rep7(((a).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile) = to_rep7(((b).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep8(((a).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries) = to_rep8(((b).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq17(((a).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq19(((a).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq20(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size4({
  us_split_fields3 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment4({
  us_split_fields3 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq17 : us_rep1, us_rep1 -> bool

logic dummy21 : logfileindext

logic dummy22 : logentrycountt

logic dummy23 : (int,logfileindext) farray

logic dummy24 : logfileindext

logic dummy25 : logfileindext

logic dummy26 : logfilecountt

logic dummy27 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep1
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep1 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep,
  (int,fileentrycountt) farray -> prop

logic temp___1152 : int -> (int,logfileindext) farray

axiom def_axiom :
  (forall temp___1154:int.
  (forall temp___1155:int.
  ((temp___1152(temp___1154)[temp___1155]) = of_rep7(temp___1154))))

logic temp___1156 : int -> (int,fileentrycountt) farray

axiom def_axiom1 :
  (forall temp___1158:int.
  (forall temp___1159:int.
  ((temp___1156(temp___1158)[temp___1159]) = of_rep10(temp___1158))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep2

logic bool_eq21 : us_rep2, us_rep2 -> bool

logic value__size5 : int

logic object__size5 : us_rep2 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep2 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep2. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep2. (0 <= object__alignment5(a)))

logic user_eq18 : us_rep2, us_rep2 -> bool

logic dummy28 : us_rep2

type t__ref = { t__content : us_rep2
}

function t__ref___projection(a: t__ref) : us_rep2 = (a).t__content

type map__ref3 = { map__content3 : (int,us_rep2) farray
}

logic slide3 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq3 :
  (forall a:(int,us_rep2) farray.
  (forall first2:int [slide3(a, first2, first2)]. (slide3(a, first2,
  first2) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def3 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def3 :
  (forall v:us_rep2.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq22 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def19 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq22(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and (bool_eq21((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true)) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq22(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq21((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true))))) -> (bool_eq22(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq22(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq21((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type filestatust

predicate in_range14(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq19 : filestatust, filestatust -> bool

logic dummy29 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep11 : filestatust -> int

logic of_rep11 : int -> filestatust

axiom inversion_axiom11 :
  (forall x:filestatust [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:filestatust [to_rep11(x)]. in_range14(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range14(x) ->
  (to_rep11(of_rep11(x)) = x)))

type map__ref4 = { map__content4 : (int,filestatust) farray
}

logic slide4 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq4 :
  (forall a:(int,filestatust) farray.
  (forall first2:int [slide4(a, first2, first2)]. (slide4(a, first2,
  first2) = a)))

axiom slide_def4 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,filestatust) farray, int, int, (int,filestatust) farray,
  int, int -> (int,filestatust) farray

axiom concat_def4 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : filestatust, int -> (int,filestatust) farray

axiom singleton_def4 :
  (forall v:filestatust.
  (forall i:int [(singleton4(v, i)[i])]. ((singleton4(v, i)[i]) = v)))

logic bool_eq24 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def21 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq24(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_153:int. ((((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) and
  (to_rep11((a[temp___idx_153])) = to_rep11((b[((b__first - a__first) + temp___idx_153)])))) or
  (not ((a__first <= temp___idx_153) and (temp___idx_153 <= a__last)))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep11((a[temp___idx_153])) = to_rep11((b[((b__first - a__first) + temp___idx_153)]))))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq24(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep11((a[temp___idx_153])) = to_rep11((b[((b__first - a__first) + temp___idx_153)])))))))))

logic compare3 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> int

axiom compare_def_eq3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq24(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq24(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep11((a[(i + 1)])) <  to_rep11((b[(j + 1)]))))))))))))

axiom compare_def_gt3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare3(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq24(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep11((b[(i + 1)])) <  to_rep11((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type statscount

predicate in_range15(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq20 : statscount, statscount -> bool

logic dummy30 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep12 : statscount -> int

logic of_rep12 : int -> statscount

axiom inversion_axiom12 :
  (forall x:statscount [to_rep12(x)]. (of_rep12(to_rep12(x)) = x))

axiom range_axiom12 :
  (forall x:statscount [to_rep12(x)]. in_range15(to_rep12(x)))

axiom coerce_axiom12 :
  (forall x:int [to_rep12(of_rep12(x))]. (in_range15(x) ->
  (to_rep12(of_rep12(x)) = x)))

type us_split_fields4 = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields4) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields4) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields4) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields4) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___10__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq26 : us_rep3, us_rep3 -> bool

axiom bool_eq_def23 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq26(a, b)].
  ((((((to_rep12(((a).us_split_fields5).rec__stats__t__successentry) = to_rep12(((b).us_split_fields5).rec__stats__t__successentry)) and
  (to_rep12(((a).us_split_fields5).rec__stats__t__failentry) = to_rep12(((b).us_split_fields5).rec__stats__t__failentry))) and
  (to_rep12(((a).us_split_fields5).rec__stats__t__successbio) = to_rep12(((b).us_split_fields5).rec__stats__t__successbio))) and
  (to_rep12(((a).us_split_fields5).rec__stats__t__failbio) = to_rep12(((b).us_split_fields5).rec__stats__t__failbio))) ->
  (bool_eq26(a, b) = true)) and
  ((not ((((to_rep12(((a).us_split_fields5).rec__stats__t__successentry) = to_rep12(((b).us_split_fields5).rec__stats__t__successentry)) and
  (to_rep12(((a).us_split_fields5).rec__stats__t__failentry) = to_rep12(((b).us_split_fields5).rec__stats__t__failentry))) and
  (to_rep12(((a).us_split_fields5).rec__stats__t__successbio) = to_rep12(((b).us_split_fields5).rec__stats__t__successbio))) and
  (to_rep12(((a).us_split_fields5).rec__stats__t__failbio) = to_rep12(((b).us_split_fields5).rec__stats__t__failbio)))) ->
  (bool_eq26(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep3 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep3 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size6({ us_split_fields5 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment6({ us_split_fields5 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq21 : us_rep3, us_rep3 -> bool

logic dummy31 : statscount

logic dummy32 : statscount

logic dummy33 : statscount

logic dummy34 : statscount

type t__ref1 = { t__content1 : us_rep3
}

function t__ref___4__projection(a: t__ref1) : us_rep3 = (a).t__content1

type msgtextt

predicate in_range16(x: int) = ((0 <= x) and (x <= 14))

logic bool_eq27 : int, int -> bool

axiom bool_eq_def24 :
  (forall x:int. forall y:int [bool_eq27(x, y)]. (((x = y) -> (bool_eq27(x,
  y) = true)) and ((not (x = y)) -> (bool_eq27(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq22 : msgtextt, msgtextt -> bool

logic dummy35 : msgtextt

type msgtextt__ref = { msgtextt__content : msgtextt
}

function msgtextt__ref___projection(a: msgtextt__ref) : msgtextt =
  (a).msgtextt__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type us_split_fields6 = { rec__screen__screenstatst__isdisplayed : bool;
rec__screen__screenstatst__data : us_rep3
}

function us_split_fields_IsDisplayed__projection(a: us_split_fields6) : bool =
  (a).rec__screen__screenstatst__isdisplayed

function us_split_fields_Data__projection(a: us_split_fields6) : us_rep3 =
  (a).rec__screen__screenstatst__data

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___14__projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq28 : us_rep4, us_rep4 -> bool

axiom bool_eq_def25 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq28(a, b)].
  ((((((a).us_split_fields7).rec__screen__screenstatst__isdisplayed = ((b).us_split_fields7).rec__screen__screenstatst__isdisplayed) and
  (bool_eq26(((a).us_split_fields7).rec__screen__screenstatst__data,
  ((b).us_split_fields7).rec__screen__screenstatst__data) = true)) ->
  (bool_eq28(a, b) = true)) and
  ((not ((((a).us_split_fields7).rec__screen__screenstatst__isdisplayed = ((b).us_split_fields7).rec__screen__screenstatst__isdisplayed) and
  (bool_eq26(((a).us_split_fields7).rec__screen__screenstatst__data,
  ((b).us_split_fields7).rec__screen__screenstatst__data) = true))) ->
  (bool_eq28(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep4 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep4 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:bool. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. forall a4:statscount. (0 <= object__size7({
  us_split_fields7 = { rec__screen__screenstatst__isdisplayed = a;
  rec__screen__screenstatst__data = { us_split_fields5 = {
  rec__stats__t__successentry = a1; rec__stats__t__failentry = a2;
  rec__stats__t__successbio = a3; rec__stats__t__failbio = a4 } } } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:bool. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. forall a4:statscount. (0 <= object__alignment7({
  us_split_fields7 = { rec__screen__screenstatst__isdisplayed = a;
  rec__screen__screenstatst__data = { us_split_fields5 = {
  rec__stats__t__successentry = a1; rec__stats__t__failentry = a2;
  rec__stats__t__successbio = a3; rec__stats__t__failbio = a4 } } } })))

logic screen__screenstatst__isdisplayed__first__bit : int

logic screen__screenstatst__isdisplayed__last__bit : int

logic screen__screenstatst__isdisplayed__position : int

axiom screen__screenstatst__isdisplayed__first__bit_axiom :
  (0 <= screen__screenstatst__isdisplayed__first__bit)

axiom screen__screenstatst__isdisplayed__last__bit_axiom :
  (screen__screenstatst__isdisplayed__first__bit <  screen__screenstatst__isdisplayed__last__bit)

axiom screen__screenstatst__isdisplayed__position_axiom :
  (0 <= screen__screenstatst__isdisplayed__position)

logic screen__screenstatst__data__first__bit : int

logic screen__screenstatst__data__last__bit : int

logic screen__screenstatst__data__position : int

axiom screen__screenstatst__data__first__bit_axiom :
  (0 <= screen__screenstatst__data__first__bit)

axiom screen__screenstatst__data__last__bit_axiom :
  (screen__screenstatst__data__first__bit <  screen__screenstatst__data__last__bit)

axiom screen__screenstatst__data__position_axiom :
  (0 <= screen__screenstatst__data__position)

logic user_eq23 : us_rep4, us_rep4 -> bool

logic dummy36 : bool

logic dummy37 : statscount

logic dummy38 : statscount

logic dummy39 : statscount

logic dummy40 : statscount

type screenstatst__ref = { screenstatst__content : us_rep4
}

function screenstatst__ref___projection(a: screenstatst__ref) : us_rep4 =
  (a).screenstatst__content

logic attr__ATTRIBUTE_ADDRESS8 : int

type us_split_fields8 = { rec__screen__displayedconfigt__latchunlock :
durationt; rec__screen__displayedconfigt__alarmsilent : durationt;
rec__screen__displayedconfigt__fingerwait : durationt;
rec__screen__displayedconfigt__tokenremove : durationt;
rec__screen__displayedconfigt__workstart : durationt;
rec__screen__displayedconfigt__workend : durationt;
rec__screen__displayedconfigt__authduration : durationt;
rec__screen__displayedconfigt__policy : accesspolicyt;
rec__screen__displayedconfigt__minpreservedlog : filesizet;
rec__screen__displayedconfigt__alarmthreshold : filesizet;
rec__screen__displayedconfigt__minentry : classt;
rec__screen__displayedconfigt__clearance : classt;
rec__screen__displayedconfigt__maxfar : fart
}

function us_split_fields_LatchUnlock__projection(a: us_split_fields8) : durationt =
  (a).rec__screen__displayedconfigt__latchunlock

function us_split_fields_AlarmSilent__projection(a: us_split_fields8) : durationt =
  (a).rec__screen__displayedconfigt__alarmsilent

function us_split_fields_FingerWait__projection(a: us_split_fields8) : durationt =
  (a).rec__screen__displayedconfigt__fingerwait

function us_split_fields_TokenRemove__projection(a: us_split_fields8) : durationt =
  (a).rec__screen__displayedconfigt__tokenremove

function us_split_fields_WorkStart__projection(a: us_split_fields8) : durationt =
  (a).rec__screen__displayedconfigt__workstart

function us_split_fields_WorkEnd__projection(a: us_split_fields8) : durationt =
  (a).rec__screen__displayedconfigt__workend

function us_split_fields_AuthDuration__projection(a: us_split_fields8) : durationt =
  (a).rec__screen__displayedconfigt__authduration

function us_split_fields_Policy__projection(a: us_split_fields8) : accesspolicyt =
  (a).rec__screen__displayedconfigt__policy

function us_split_fields_MinPreservedLog__projection(a: us_split_fields8) : filesizet =
  (a).rec__screen__displayedconfigt__minpreservedlog

function us_split_fields_AlarmThreshold__projection(a: us_split_fields8) : filesizet =
  (a).rec__screen__displayedconfigt__alarmthreshold

function us_split_fields_MinEntry__projection(a: us_split_fields8) : classt =
  (a).rec__screen__displayedconfigt__minentry

function us_split_fields_Clearance__projection(a: us_split_fields8) : classt =
  (a).rec__screen__displayedconfigt__clearance

function us_split_fields_MaxFAR__projection(a: us_split_fields8) : fart =
  (a).rec__screen__displayedconfigt__maxfar

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___14__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep5 = { us_split_fields9 : us_split_fields8
}

function us_rep___15__projection(a: us_rep5) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq29 : us_rep5, us_rep5 -> bool

axiom bool_eq_def26 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq29(a, b)].
  (((((((((((((((to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__latchunlock) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__latchunlock)) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__alarmsilent) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__alarmsilent))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__fingerwait) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__fingerwait))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__tokenremove) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__tokenremove))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__workstart) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__workstart))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__workend) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__workend))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__authduration) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__authduration))) and
  (to_rep6(((a).us_split_fields9).rec__screen__displayedconfigt__policy) = to_rep6(((b).us_split_fields9).rec__screen__displayedconfigt__policy))) and
  (to_rep2(((a).us_split_fields9).rec__screen__displayedconfigt__minpreservedlog) = to_rep2(((b).us_split_fields9).rec__screen__displayedconfigt__minpreservedlog))) and
  (to_rep2(((a).us_split_fields9).rec__screen__displayedconfigt__alarmthreshold) = to_rep2(((b).us_split_fields9).rec__screen__displayedconfigt__alarmthreshold))) and
  (to_rep5(((a).us_split_fields9).rec__screen__displayedconfigt__minentry) = to_rep5(((b).us_split_fields9).rec__screen__displayedconfigt__minentry))) and
  (to_rep5(((a).us_split_fields9).rec__screen__displayedconfigt__clearance) = to_rep5(((b).us_split_fields9).rec__screen__displayedconfigt__clearance))) and
  (to_rep4(((a).us_split_fields9).rec__screen__displayedconfigt__maxfar) = to_rep4(((b).us_split_fields9).rec__screen__displayedconfigt__maxfar))) ->
  (bool_eq29(a, b) = true)) and
  ((not (((((((((((((to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__latchunlock) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__latchunlock)) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__alarmsilent) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__alarmsilent))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__fingerwait) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__fingerwait))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__tokenremove) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__tokenremove))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__workstart) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__workstart))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__workend) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__workend))) and
  (to_rep3(((a).us_split_fields9).rec__screen__displayedconfigt__authduration) = to_rep3(((b).us_split_fields9).rec__screen__displayedconfigt__authduration))) and
  (to_rep6(((a).us_split_fields9).rec__screen__displayedconfigt__policy) = to_rep6(((b).us_split_fields9).rec__screen__displayedconfigt__policy))) and
  (to_rep2(((a).us_split_fields9).rec__screen__displayedconfigt__minpreservedlog) = to_rep2(((b).us_split_fields9).rec__screen__displayedconfigt__minpreservedlog))) and
  (to_rep2(((a).us_split_fields9).rec__screen__displayedconfigt__alarmthreshold) = to_rep2(((b).us_split_fields9).rec__screen__displayedconfigt__alarmthreshold))) and
  (to_rep5(((a).us_split_fields9).rec__screen__displayedconfigt__minentry) = to_rep5(((b).us_split_fields9).rec__screen__displayedconfigt__minentry))) and
  (to_rep5(((a).us_split_fields9).rec__screen__displayedconfigt__clearance) = to_rep5(((b).us_split_fields9).rec__screen__displayedconfigt__clearance))) and
  (to_rep4(((a).us_split_fields9).rec__screen__displayedconfigt__maxfar) = to_rep4(((b).us_split_fields9).rec__screen__displayedconfigt__maxfar)))) ->
  (bool_eq29(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep5 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep5 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:durationt. forall a1:durationt. forall a2:durationt.
  forall a3:durationt. forall a4:durationt. forall a5:durationt.
  forall a6:durationt. forall a7:accesspolicyt. forall a8:filesizet.
  forall a9:filesizet. forall a10:classt. forall a11:classt. forall a12:fart.
  (0 <= object__size8({ us_split_fields9 = {
  rec__screen__displayedconfigt__latchunlock = a;
  rec__screen__displayedconfigt__alarmsilent = a1;
  rec__screen__displayedconfigt__fingerwait = a2;
  rec__screen__displayedconfigt__tokenremove = a3;
  rec__screen__displayedconfigt__workstart = a4;
  rec__screen__displayedconfigt__workend = a5;
  rec__screen__displayedconfigt__authduration = a6;
  rec__screen__displayedconfigt__policy = a7;
  rec__screen__displayedconfigt__minpreservedlog = a8;
  rec__screen__displayedconfigt__alarmthreshold = a9;
  rec__screen__displayedconfigt__minentry = a10;
  rec__screen__displayedconfigt__clearance = a11;
  rec__screen__displayedconfigt__maxfar = a12 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:durationt. forall a1:durationt. forall a2:durationt.
  forall a3:durationt. forall a4:durationt. forall a5:durationt.
  forall a6:durationt. forall a7:accesspolicyt. forall a8:filesizet.
  forall a9:filesizet. forall a10:classt. forall a11:classt. forall a12:fart.
  (0 <= object__alignment8({ us_split_fields9 = {
  rec__screen__displayedconfigt__latchunlock = a;
  rec__screen__displayedconfigt__alarmsilent = a1;
  rec__screen__displayedconfigt__fingerwait = a2;
  rec__screen__displayedconfigt__tokenremove = a3;
  rec__screen__displayedconfigt__workstart = a4;
  rec__screen__displayedconfigt__workend = a5;
  rec__screen__displayedconfigt__authduration = a6;
  rec__screen__displayedconfigt__policy = a7;
  rec__screen__displayedconfigt__minpreservedlog = a8;
  rec__screen__displayedconfigt__alarmthreshold = a9;
  rec__screen__displayedconfigt__minentry = a10;
  rec__screen__displayedconfigt__clearance = a11;
  rec__screen__displayedconfigt__maxfar = a12 } })))

logic screen__displayedconfigt__latchunlock__first__bit : int

logic screen__displayedconfigt__latchunlock__last__bit : int

logic screen__displayedconfigt__latchunlock__position : int

axiom screen__displayedconfigt__latchunlock__first__bit_axiom :
  (0 <= screen__displayedconfigt__latchunlock__first__bit)

axiom screen__displayedconfigt__latchunlock__last__bit_axiom :
  (screen__displayedconfigt__latchunlock__first__bit <  screen__displayedconfigt__latchunlock__last__bit)

axiom screen__displayedconfigt__latchunlock__position_axiom :
  (0 <= screen__displayedconfigt__latchunlock__position)

logic screen__displayedconfigt__alarmsilent__first__bit : int

logic screen__displayedconfigt__alarmsilent__last__bit : int

logic screen__displayedconfigt__alarmsilent__position : int

axiom screen__displayedconfigt__alarmsilent__first__bit_axiom :
  (0 <= screen__displayedconfigt__alarmsilent__first__bit)

axiom screen__displayedconfigt__alarmsilent__last__bit_axiom :
  (screen__displayedconfigt__alarmsilent__first__bit <  screen__displayedconfigt__alarmsilent__last__bit)

axiom screen__displayedconfigt__alarmsilent__position_axiom :
  (0 <= screen__displayedconfigt__alarmsilent__position)

logic screen__displayedconfigt__fingerwait__first__bit : int

logic screen__displayedconfigt__fingerwait__last__bit : int

logic screen__displayedconfigt__fingerwait__position : int

axiom screen__displayedconfigt__fingerwait__first__bit_axiom :
  (0 <= screen__displayedconfigt__fingerwait__first__bit)

axiom screen__displayedconfigt__fingerwait__last__bit_axiom :
  (screen__displayedconfigt__fingerwait__first__bit <  screen__displayedconfigt__fingerwait__last__bit)

axiom screen__displayedconfigt__fingerwait__position_axiom :
  (0 <= screen__displayedconfigt__fingerwait__position)

logic screen__displayedconfigt__tokenremove__first__bit : int

logic screen__displayedconfigt__tokenremove__last__bit : int

logic screen__displayedconfigt__tokenremove__position : int

axiom screen__displayedconfigt__tokenremove__first__bit_axiom :
  (0 <= screen__displayedconfigt__tokenremove__first__bit)

axiom screen__displayedconfigt__tokenremove__last__bit_axiom :
  (screen__displayedconfigt__tokenremove__first__bit <  screen__displayedconfigt__tokenremove__last__bit)

axiom screen__displayedconfigt__tokenremove__position_axiom :
  (0 <= screen__displayedconfigt__tokenremove__position)

logic screen__displayedconfigt__workstart__first__bit : int

logic screen__displayedconfigt__workstart__last__bit : int

logic screen__displayedconfigt__workstart__position : int

axiom screen__displayedconfigt__workstart__first__bit_axiom :
  (0 <= screen__displayedconfigt__workstart__first__bit)

axiom screen__displayedconfigt__workstart__last__bit_axiom :
  (screen__displayedconfigt__workstart__first__bit <  screen__displayedconfigt__workstart__last__bit)

axiom screen__displayedconfigt__workstart__position_axiom :
  (0 <= screen__displayedconfigt__workstart__position)

logic screen__displayedconfigt__workend__first__bit : int

logic screen__displayedconfigt__workend__last__bit : int

logic screen__displayedconfigt__workend__position : int

axiom screen__displayedconfigt__workend__first__bit_axiom :
  (0 <= screen__displayedconfigt__workend__first__bit)

axiom screen__displayedconfigt__workend__last__bit_axiom :
  (screen__displayedconfigt__workend__first__bit <  screen__displayedconfigt__workend__last__bit)

axiom screen__displayedconfigt__workend__position_axiom :
  (0 <= screen__displayedconfigt__workend__position)

logic screen__displayedconfigt__authduration__first__bit : int

logic screen__displayedconfigt__authduration__last__bit : int

logic screen__displayedconfigt__authduration__position : int

axiom screen__displayedconfigt__authduration__first__bit_axiom :
  (0 <= screen__displayedconfigt__authduration__first__bit)

axiom screen__displayedconfigt__authduration__last__bit_axiom :
  (screen__displayedconfigt__authduration__first__bit <  screen__displayedconfigt__authduration__last__bit)

axiom screen__displayedconfigt__authduration__position_axiom :
  (0 <= screen__displayedconfigt__authduration__position)

logic screen__displayedconfigt__policy__first__bit : int

logic screen__displayedconfigt__policy__last__bit : int

logic screen__displayedconfigt__policy__position : int

axiom screen__displayedconfigt__policy__first__bit_axiom :
  (0 <= screen__displayedconfigt__policy__first__bit)

axiom screen__displayedconfigt__policy__last__bit_axiom :
  (screen__displayedconfigt__policy__first__bit <  screen__displayedconfigt__policy__last__bit)

axiom screen__displayedconfigt__policy__position_axiom :
  (0 <= screen__displayedconfigt__policy__position)

logic screen__displayedconfigt__minpreservedlog__first__bit : int

logic screen__displayedconfigt__minpreservedlog__last__bit : int

logic screen__displayedconfigt__minpreservedlog__position : int

axiom screen__displayedconfigt__minpreservedlog__first__bit_axiom :
  (0 <= screen__displayedconfigt__minpreservedlog__first__bit)

axiom screen__displayedconfigt__minpreservedlog__last__bit_axiom :
  (screen__displayedconfigt__minpreservedlog__first__bit <  screen__displayedconfigt__minpreservedlog__last__bit)

axiom screen__displayedconfigt__minpreservedlog__position_axiom :
  (0 <= screen__displayedconfigt__minpreservedlog__position)

logic screen__displayedconfigt__alarmthreshold__first__bit : int

logic screen__displayedconfigt__alarmthreshold__last__bit : int

logic screen__displayedconfigt__alarmthreshold__position : int

axiom screen__displayedconfigt__alarmthreshold__first__bit_axiom :
  (0 <= screen__displayedconfigt__alarmthreshold__first__bit)

axiom screen__displayedconfigt__alarmthreshold__last__bit_axiom :
  (screen__displayedconfigt__alarmthreshold__first__bit <  screen__displayedconfigt__alarmthreshold__last__bit)

axiom screen__displayedconfigt__alarmthreshold__position_axiom :
  (0 <= screen__displayedconfigt__alarmthreshold__position)

logic screen__displayedconfigt__minentry__first__bit : int

logic screen__displayedconfigt__minentry__last__bit : int

logic screen__displayedconfigt__minentry__position : int

axiom screen__displayedconfigt__minentry__first__bit_axiom :
  (0 <= screen__displayedconfigt__minentry__first__bit)

axiom screen__displayedconfigt__minentry__last__bit_axiom :
  (screen__displayedconfigt__minentry__first__bit <  screen__displayedconfigt__minentry__last__bit)

axiom screen__displayedconfigt__minentry__position_axiom :
  (0 <= screen__displayedconfigt__minentry__position)

logic screen__displayedconfigt__clearance__first__bit : int

logic screen__displayedconfigt__clearance__last__bit : int

logic screen__displayedconfigt__clearance__position : int

axiom screen__displayedconfigt__clearance__first__bit_axiom :
  (0 <= screen__displayedconfigt__clearance__first__bit)

axiom screen__displayedconfigt__clearance__last__bit_axiom :
  (screen__displayedconfigt__clearance__first__bit <  screen__displayedconfigt__clearance__last__bit)

axiom screen__displayedconfigt__clearance__position_axiom :
  (0 <= screen__displayedconfigt__clearance__position)

logic screen__displayedconfigt__maxfar__first__bit : int

logic screen__displayedconfigt__maxfar__last__bit : int

logic screen__displayedconfigt__maxfar__position : int

axiom screen__displayedconfigt__maxfar__first__bit_axiom :
  (0 <= screen__displayedconfigt__maxfar__first__bit)

axiom screen__displayedconfigt__maxfar__last__bit_axiom :
  (screen__displayedconfigt__maxfar__first__bit <  screen__displayedconfigt__maxfar__last__bit)

axiom screen__displayedconfigt__maxfar__position_axiom :
  (0 <= screen__displayedconfigt__maxfar__position)

logic user_eq24 : us_rep5, us_rep5 -> bool

logic dummy41 : durationt

logic dummy42 : durationt

logic dummy43 : durationt

logic dummy44 : durationt

logic dummy45 : durationt

logic dummy46 : durationt

logic dummy47 : durationt

logic dummy48 : accesspolicyt

logic dummy49 : filesizet

logic dummy50 : filesizet

logic dummy51 : classt

logic dummy52 : classt

logic dummy53 : fart

type displayedconfigt__ref = { displayedconfigt__content : us_rep5
}

function displayedconfigt__ref___projection(a: displayedconfigt__ref) : us_rep5 =
  (a).displayedconfigt__content

type us_split_fields10 = { rec__screen__screenconfigt__isdisplayed : bool;
rec__screen__screenconfigt__data : us_rep5
}

function us_split_fields_IsDisplayed__2__projection(a: us_split_fields10) : bool =
  (a).rec__screen__screenconfigt__isdisplayed

function us_split_fields_Data__2__projection(a: us_split_fields10) : us_rep5 =
  (a).rec__screen__screenconfigt__data

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___15__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep6 = { us_split_fields11 : us_split_fields10
}

function us_rep___16__projection(a: us_rep6) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq30 : us_rep6, us_rep6 -> bool

axiom bool_eq_def27 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq30(a, b)].
  ((((((a).us_split_fields11).rec__screen__screenconfigt__isdisplayed = ((b).us_split_fields11).rec__screen__screenconfigt__isdisplayed) and
  (bool_eq29(((a).us_split_fields11).rec__screen__screenconfigt__data,
  ((b).us_split_fields11).rec__screen__screenconfigt__data) = true)) ->
  (bool_eq30(a, b) = true)) and
  ((not ((((a).us_split_fields11).rec__screen__screenconfigt__isdisplayed = ((b).us_split_fields11).rec__screen__screenconfigt__isdisplayed) and
  (bool_eq29(((a).us_split_fields11).rec__screen__screenconfigt__data,
  ((b).us_split_fields11).rec__screen__screenconfigt__data) = true))) ->
  (bool_eq30(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:bool. forall a1:durationt. forall a2:durationt.
  forall a3:durationt. forall a4:durationt. forall a5:durationt.
  forall a6:durationt. forall a7:durationt. forall a8:accesspolicyt.
  forall a9:filesizet. forall a10:filesizet. forall a11:classt.
  forall a12:classt. forall a13:fart. (0 <= object__size9({
  us_split_fields11 = { rec__screen__screenconfigt__isdisplayed = a;
  rec__screen__screenconfigt__data = { us_split_fields9 = {
  rec__screen__displayedconfigt__latchunlock = a1;
  rec__screen__displayedconfigt__alarmsilent = a2;
  rec__screen__displayedconfigt__fingerwait = a3;
  rec__screen__displayedconfigt__tokenremove = a4;
  rec__screen__displayedconfigt__workstart = a5;
  rec__screen__displayedconfigt__workend = a6;
  rec__screen__displayedconfigt__authduration = a7;
  rec__screen__displayedconfigt__policy = a8;
  rec__screen__displayedconfigt__minpreservedlog = a9;
  rec__screen__displayedconfigt__alarmthreshold = a10;
  rec__screen__displayedconfigt__minentry = a11;
  rec__screen__displayedconfigt__clearance = a12;
  rec__screen__displayedconfigt__maxfar = a13 } } } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:bool. forall a1:durationt. forall a2:durationt.
  forall a3:durationt. forall a4:durationt. forall a5:durationt.
  forall a6:durationt. forall a7:durationt. forall a8:accesspolicyt.
  forall a9:filesizet. forall a10:filesizet. forall a11:classt.
  forall a12:classt. forall a13:fart. (0 <= object__alignment9({
  us_split_fields11 = { rec__screen__screenconfigt__isdisplayed = a;
  rec__screen__screenconfigt__data = { us_split_fields9 = {
  rec__screen__displayedconfigt__latchunlock = a1;
  rec__screen__displayedconfigt__alarmsilent = a2;
  rec__screen__displayedconfigt__fingerwait = a3;
  rec__screen__displayedconfigt__tokenremove = a4;
  rec__screen__displayedconfigt__workstart = a5;
  rec__screen__displayedconfigt__workend = a6;
  rec__screen__displayedconfigt__authduration = a7;
  rec__screen__displayedconfigt__policy = a8;
  rec__screen__displayedconfigt__minpreservedlog = a9;
  rec__screen__displayedconfigt__alarmthreshold = a10;
  rec__screen__displayedconfigt__minentry = a11;
  rec__screen__displayedconfigt__clearance = a12;
  rec__screen__displayedconfigt__maxfar = a13 } } } })))

logic screen__screenconfigt__isdisplayed__first__bit : int

logic screen__screenconfigt__isdisplayed__last__bit : int

logic screen__screenconfigt__isdisplayed__position : int

axiom screen__screenconfigt__isdisplayed__first__bit_axiom :
  (0 <= screen__screenconfigt__isdisplayed__first__bit)

axiom screen__screenconfigt__isdisplayed__last__bit_axiom :
  (screen__screenconfigt__isdisplayed__first__bit <  screen__screenconfigt__isdisplayed__last__bit)

axiom screen__screenconfigt__isdisplayed__position_axiom :
  (0 <= screen__screenconfigt__isdisplayed__position)

logic screen__screenconfigt__data__first__bit : int

logic screen__screenconfigt__data__last__bit : int

logic screen__screenconfigt__data__position : int

axiom screen__screenconfigt__data__first__bit_axiom :
  (0 <= screen__screenconfigt__data__first__bit)

axiom screen__screenconfigt__data__last__bit_axiom :
  (screen__screenconfigt__data__first__bit <  screen__screenconfigt__data__last__bit)

axiom screen__screenconfigt__data__position_axiom :
  (0 <= screen__screenconfigt__data__position)

logic user_eq25 : us_rep6, us_rep6 -> bool

logic dummy54 : bool

logic dummy55 : durationt

logic dummy56 : durationt

logic dummy57 : durationt

logic dummy58 : durationt

logic dummy59 : durationt

logic dummy60 : durationt

logic dummy61 : durationt

logic dummy62 : accesspolicyt

logic dummy63 : filesizet

logic dummy64 : filesizet

logic dummy65 : classt

logic dummy66 : classt

logic dummy67 : fart

type screenconfigt__ref = { screenconfigt__content : us_rep6
}

function screenconfigt__ref___projection(a: screenconfigt__ref) : us_rep6 =
  (a).screenconfigt__content

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic isenrolled : bool

logic attr__ATTRIBUTE_ADDRESS12 : int

logic nullconfigdata : durationt

logic nullconfigdata1 : durationt

logic nullconfigdata2 : durationt

logic nullconfigdata3 : durationt

logic nullconfigdata4 : durationt

logic nullconfigdata5 : durationt

logic nullconfigdata6 : durationt

logic nullconfigdata7 : accesspolicyt

logic nullconfigdata8 : filesizet

logic nullconfigdata9 : filesizet

logic nullconfigdata10 : classt

logic nullconfigdata11 : classt

logic nullconfigdata12 : fart

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic temp___String_Literal_1746 : unit -> (int,character) farray

axiom temp___String_Literal_1746__def_axiom :
  (((((((((((((((((((((((((((((to_rep((temp___String_Literal_1746(void)[1])) = 83) and
  (to_rep((temp___String_Literal_1746(void)[2])) = 99)) and
  (to_rep((temp___String_Literal_1746(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_1746(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1746(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_1746(void)[6])) = 110)) and
  (to_rep((temp___String_Literal_1746(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_1746(void)[8])) = 73)) and
  (to_rep((temp___String_Literal_1746(void)[9])) = 110)) and
  (to_rep((temp___String_Literal_1746(void)[10])) = 105)) and
  (to_rep((temp___String_Literal_1746(void)[11])) = 116)) and
  (to_rep((temp___String_Literal_1746(void)[12])) = 105)) and
  (to_rep((temp___String_Literal_1746(void)[13])) = 97)) and
  (to_rep((temp___String_Literal_1746(void)[14])) = 108)) and
  (to_rep((temp___String_Literal_1746(void)[15])) = 105)) and
  (to_rep((temp___String_Literal_1746(void)[16])) = 115)) and
  (to_rep((temp___String_Literal_1746(void)[17])) = 97)) and
  (to_rep((temp___String_Literal_1746(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_1746(void)[19])) = 105)) and
  (to_rep((temp___String_Literal_1746(void)[20])) = 111)) and
  (to_rep((temp___String_Literal_1746(void)[21])) = 110)) and
  (to_rep((temp___String_Literal_1746(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_1746(void)[23])) = 70)) and
  (to_rep((temp___String_Literal_1746(void)[24])) = 97)) and
  (to_rep((temp___String_Literal_1746(void)[25])) = 105)) and
  (to_rep((temp___String_Literal_1746(void)[26])) = 108)) and
  (to_rep((temp___String_Literal_1746(void)[27])) = 117)) and
  (to_rep((temp___String_Literal_1746(void)[28])) = 114)) and
  (to_rep((temp___String_Literal_1746(void)[29])) = 101))

axiom nullconfigdata__def_axiom : ((nullconfigdata = of_rep3(0)) and
  ((nullconfigdata1 = of_rep3(0)) and ((nullconfigdata2 = of_rep3(0)) and
  ((nullconfigdata3 = of_rep3(0)) and ((nullconfigdata4 = of_rep3(0)) and
  ((nullconfigdata5 = of_rep3(0)) and ((nullconfigdata6 = of_rep3(0)) and
  ((nullconfigdata7 = of_rep6(0)) and ((nullconfigdata8 = of_rep2(0)) and
  ((nullconfigdata9 = of_rep2(0)) and ((nullconfigdata10 = of_rep5(0)) and
  ((nullconfigdata11 = of_rep5(0)) and
  (nullconfigdata12 = of_rep4(0))))))))))))))

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields1 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields1 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep9(usedlogfiles3)) and
  (numberlogentries = (((to_rep9(usedlogfiles3) - 1) * 1024) + to_rep10((logfileentries[currentlogfile])))))))))

axiom nouser__def_axiom : (nouser = temp___String_Literal_136(void))

logic logfilestate__split_fields : logfileindext

logic logfilestate__split_fields1 : logentrycountt

logic logfilestate__split_fields2 : (int,logfileindext) farray

logic logfilestate__split_fields3 : logfileindext

logic logfilestate__split_fields4 : logfileindext

logic logfilestate__split_fields5 : logfilecountt

logic logfilestate__split_fields6 : (int,fileentrycountt) farray

logic auditalarm : int

logic themsg : int

logic currentmsg : int

logic currentstats__split_fields : bool

logic currentstats__split_fields1 : statscount

logic currentstats__split_fields2 : statscount

logic currentstats__split_fields3 : statscount

logic currentstats__split_fields4 : statscount

logic currentconfig__split_fields : bool

logic currentconfig__split_fields1 : durationt

logic currentconfig__split_fields2 : durationt

logic currentconfig__split_fields3 : durationt

logic currentconfig__split_fields4 : durationt

logic currentconfig__split_fields5 : durationt

logic currentconfig__split_fields6 : durationt

logic currentconfig__split_fields7 : durationt

logic currentconfig__split_fields8 : accesspolicyt

logic currentconfig__split_fields9 : filesizet

logic currentconfig__split_fields10 : filesizet

logic currentconfig__split_fields11 : classt

logic currentconfig__split_fields12 : classt

logic currentconfig__split_fields13 : fart

logic currentdooralarm : int

logic currentlogalarm : int

logic localstats__split_fields : statscount

logic localstats__split_fields1 : statscount

logic localstats__split_fields2 : statscount

logic localstats__split_fields3 : statscount

logic o : fart

logic o1 : classt

logic o2 : classt

logic o3 : filesizet

logic o4 : filesizet

logic o5 : accesspolicyt

logic o6 : durationt

logic o7 : durationt

logic o8 : durationt

logic o9 : durationt

logic o10 : durationt

logic o11 : durationt

logic o12 : durationt

logic o13 : durationt

logic o14 : durationt

logic o15 : durationt

logic o16 : durationt

logic o17 : durationt

logic o18 : durationt

logic o19 : durationt

logic o20 : accesspolicyt

logic o21 : filesizet

logic o22 : filesizet

logic o23 : classt

logic o24 : classt

logic o25 : fart

logic temp___1755 : durationt

logic temp___17551 : durationt

logic temp___17552 : durationt

logic temp___17553 : durationt

logic temp___17554 : durationt

logic temp___17555 : durationt

logic temp___17556 : durationt

logic temp___17557 : accesspolicyt

logic temp___17558 : filesizet

logic temp___17559 : filesizet

logic temp___175510 : classt

logic temp___175511 : classt

logic temp___175512 : fart

logic screenok : bool

logic localstats__split_fields4 : statscount

logic localstats__split_fields5 : statscount

logic localstats__split_fields6 : statscount

logic localstats__split_fields7 : statscount

logic result : bool

logic result1 : statscount

logic result2 : statscount

logic result3 : statscount

logic result4 : statscount

logic currentstats__split_fields5 : bool

logic currentstats__split_fields6 : statscount

logic currentstats__split_fields7 : statscount

logic currentstats__split_fields8 : statscount

logic currentstats__split_fields9 : statscount

logic result5 : bool

logic result6 : durationt

logic result7 : durationt

logic result8 : durationt

logic result9 : durationt

logic result10 : durationt

logic result11 : durationt

logic result12 : durationt

logic result13 : accesspolicyt

logic result14 : filesizet

logic result15 : filesizet

logic result16 : classt

logic result17 : classt

logic result18 : fart

logic currentconfig__split_fields14 : bool

logic currentconfig__split_fields15 : durationt

logic currentconfig__split_fields16 : durationt

logic currentconfig__split_fields17 : durationt

logic currentconfig__split_fields18 : durationt

logic currentconfig__split_fields19 : durationt

logic currentconfig__split_fields20 : durationt

logic currentconfig__split_fields21 : durationt

logic currentconfig__split_fields22 : accesspolicyt

logic currentconfig__split_fields23 : filesizet

logic currentconfig__split_fields24 : filesizet

logic currentconfig__split_fields25 : classt

logic currentconfig__split_fields26 : classt

logic currentconfig__split_fields27 : fart

logic result19 : int

logic currentdooralarm1 : int

logic result20 : int

logic currentlogalarm1 : int

logic currentdooralarm2 : int

logic currentlogalarm2 : int

logic writeok : bool

logic result21 : bool

logic screenok1 : bool

logic result22 : int

logic currentmsg1 : int

logic result23 : int

logic themsg1 : int

logic result24 : int

logic themsg2 : int

logic currentmsg2 : int

logic writeok1 : bool

logic result25 : bool

logic screenok2 : bool

axiom H : (to_rep4(o) = 0)

axiom H1 : (to_rep5(o1) = 0)

axiom H2 : (to_rep5(o2) = 0)

axiom H3 : (to_rep2(o3) = 0)

axiom H4 : (to_rep2(o4) = 0)

axiom H5 : (to_rep6(o5) = 0)

axiom H6 : (to_rep3(o6) = 0)

axiom H7 : (to_rep3(o7) = 0)

axiom H8 : (to_rep3(o8) = 0)

axiom H9 : (to_rep3(o9) = 0)

axiom H10 : (to_rep3(o10) = 0)

axiom H11 : (to_rep3(o11) = 0)

axiom H12 : (to_rep3(o12) = 0)

axiom H13 : ((o13 = o12) and ((o14 = o11) and ((o15 = o10) and
  ((o16 = o9) and ((o17 = o8) and ((o18 = o7) and ((o19 = o6) and
  ((o20 = o5) and ((o21 = o4) and ((o22 = o3) and ((o23 = o2) and
  ((o24 = o1) and (o25 = o)))))))))))))

axiom H14 : ((temp___1755 = o13) and ((temp___17551 = o14) and
  ((temp___17552 = o15) and ((temp___17553 = o16) and
  ((temp___17554 = o17) and ((temp___17555 = o18) and
  ((temp___17556 = o19) and ((temp___17557 = o20) and
  ((temp___17558 = o21) and ((temp___17559 = o22) and
  ((temp___175510 = o23) and ((temp___175511 = o24) and
  (temp___175512 = o25)))))))))))))

axiom H15 : ((temp___1755 = nullconfigdata) and
  ((temp___17551 = nullconfigdata1) and ((temp___17552 = nullconfigdata2) and
  ((temp___17553 = nullconfigdata3) and ((temp___17554 = nullconfigdata4) and
  ((temp___17555 = nullconfigdata5) and ((temp___17556 = nullconfigdata6) and
  ((temp___17557 = nullconfigdata7) and ((temp___17558 = nullconfigdata8) and
  ((temp___17559 = nullconfigdata9) and
  ((temp___175510 = nullconfigdata10) and
  ((temp___175511 = nullconfigdata11) and
  (temp___175512 = nullconfigdata12)))))))))))))

axiom H16 : (temp___String_Literal_136(void) = nouser)

axiom H17 : ((0 <= 14) -> in_range16(themsg))

axiom H18 : ((0 <= 14) -> in_range16(currentmsg))

axiom H19 : ((0 <= 1) -> in_range4(currentdooralarm))

axiom H20 : ((0 <= 1) -> in_range4(currentlogalarm))

axiom H21 : (valid_numberlogentries(to_rep7(logfilestate__split_fields),
  to_rep8(logfilestate__split_fields1), { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields2;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields3;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields4;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields5 } },
  logfilestate__split_fields6) = true)

axiom H22 : in_range4(auditalarm)

axiom H23 : ((result = currentstats__split_fields) and
  ((result1 = currentstats__split_fields1) and
  ((result2 = currentstats__split_fields2) and
  ((result3 = currentstats__split_fields3) and
  (result4 = currentstats__split_fields4)))))

axiom H24 : ((currentstats__split_fields5 = of_int(0)) and
  ((currentstats__split_fields6 = localstats__split_fields4) and
  ((currentstats__split_fields7 = localstats__split_fields5) and
  ((currentstats__split_fields8 = localstats__split_fields6) and
  (currentstats__split_fields9 = localstats__split_fields7)))))

axiom H25 : ((result5 = currentconfig__split_fields) and
  ((result6 = currentconfig__split_fields1) and
  ((result7 = currentconfig__split_fields2) and
  ((result8 = currentconfig__split_fields3) and
  ((result9 = currentconfig__split_fields4) and
  ((result10 = currentconfig__split_fields5) and
  ((result11 = currentconfig__split_fields6) and
  ((result12 = currentconfig__split_fields7) and
  ((result13 = currentconfig__split_fields8) and
  ((result14 = currentconfig__split_fields9) and
  ((result15 = currentconfig__split_fields10) and
  ((result16 = currentconfig__split_fields11) and
  ((result17 = currentconfig__split_fields12) and
  (result18 = currentconfig__split_fields13))))))))))))))

axiom H26 : ((currentconfig__split_fields14 = of_int(0)) and
  ((currentconfig__split_fields15 = nullconfigdata) and
  ((currentconfig__split_fields16 = nullconfigdata1) and
  ((currentconfig__split_fields17 = nullconfigdata2) and
  ((currentconfig__split_fields18 = nullconfigdata3) and
  ((currentconfig__split_fields19 = nullconfigdata4) and
  ((currentconfig__split_fields20 = nullconfigdata5) and
  ((currentconfig__split_fields21 = nullconfigdata6) and
  ((currentconfig__split_fields22 = nullconfigdata7) and
  ((currentconfig__split_fields23 = nullconfigdata8) and
  ((currentconfig__split_fields24 = nullconfigdata9) and
  ((currentconfig__split_fields25 = nullconfigdata10) and
  ((currentconfig__split_fields26 = nullconfigdata11) and
  (currentconfig__split_fields27 = nullconfigdata12))))))))))))))

axiom H27 : (result19 = currentdooralarm)

axiom H28 : (currentdooralarm1 = 0)

axiom H29 : (result20 = currentlogalarm)

axiom H30 : (currentlogalarm1 = 0)

axiom H31 : (in_range4(currentdooralarm2) and in_range4(currentlogalarm2))

axiom H32 : (result21 = screenok)

axiom H33 : (screenok1 = match_bool(screenok, writeok, false))

axiom H34 : (result22 = currentmsg)

axiom H35 : (currentmsg1 = 0)

axiom H36 : ((isenrolled = true) -> (result23 = themsg))

axiom H37 : ((isenrolled = true) -> (themsg1 = 1))

axiom H38 : ((not (isenrolled = true)) -> (result24 = themsg))

axiom H39 : ((not (isenrolled = true)) -> (themsg2 = 0))

axiom H40 : ((not (isenrolled = true)) -> (themsg1 = themsg2))

axiom H41 : in_range16(currentmsg2)

axiom H42 : (result25 = screenok1)

axiom H43 : (screenok2 = match_bool(screenok1, writeok1, false))

axiom H44 : (not (screenok2 = true))

 (* File "screen.adb", line 915, characters 0-0 *)
goal WP_parameter_def : (to_rep1(first(mk(1, 29))) = 1)
