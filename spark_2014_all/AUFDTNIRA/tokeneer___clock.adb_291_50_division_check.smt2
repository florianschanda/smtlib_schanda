(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort yearst 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (yearst yearst) Bool)
(declare-const dummy4 yearst)
(declare-datatypes () ((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content a))
(declare-fun to_rep2 (yearst) Int)
(declare-fun of_rep2 (Int) yearst)
(assert (forall ((x yearst)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x yearst)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort monthst 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (monthst monthst) Bool)
(declare-const dummy5 monthst)
(declare-datatypes () ((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content a))
(declare-fun to_rep3 (monthst) Int)
(declare-fun of_rep3 (Int) monthst)
(assert (forall ((x monthst)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x monthst)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-sort dayst 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (dayst dayst) Bool)
(declare-const dummy6 dayst)
(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))
(declare-fun to_rep4 (dayst) Int)
(declare-fun of_rep4 (Int) dayst)
(assert (forall ((x dayst)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x dayst)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-sort millisecst 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (millisecst millisecst) Bool)
(declare-const dummy7 millisecst)
(declare-datatypes () ((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst (millisecst__content a))
(declare-fun to_rep5 (millisecst) Int)
(declare-fun of_rep5 (Int) millisecst)
(assert (forall ((x millisecst)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x millisecst)) (! (in_range6 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__clock__timet__year yearst) (rec__clock__timet__month monthst) (rec__clock__timet__day dayst) (rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields)) yearst (rec__clock__timet__year a))
(define-fun us_split_fields_Month__projection ((a us_split_fields)) monthst (rec__clock__timet__month a))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) dayst (rec__clock__timet__day a))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields)) millisecst (rec__clock__timet__millisec a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (= (to_rep2 (rec__clock__timet__year (us_split_fields1 a))) (to_rep2 (rec__clock__timet__year (us_split_fields1 b)))) (= (to_rep3 (rec__clock__timet__month (us_split_fields1 a))) (to_rep3 (rec__clock__timet__month (us_split_fields1 b))))) (= (to_rep4 (rec__clock__timet__day (us_split_fields1 a))) (to_rep4 (rec__clock__timet__day (us_split_fields1 b))))) (= (to_rep5 (rec__clock__timet__millisec (us_split_fields1 a))) (to_rep5 (rec__clock__timet__millisec (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const clock__timet__year__first__bit Int)
(declare-const clock__timet__year__last__bit Int)
(declare-const clock__timet__year__position Int)
(assert (<= 0 clock__timet__year__first__bit))
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))
(assert (<= 0 clock__timet__year__position))
(declare-const clock__timet__month__first__bit Int)
(declare-const clock__timet__month__last__bit Int)
(declare-const clock__timet__month__position Int)
(assert (<= 0 clock__timet__month__first__bit))
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))
(assert (<= 0 clock__timet__month__position))
(declare-const clock__timet__day__first__bit Int)
(declare-const clock__timet__day__last__bit Int)
(declare-const clock__timet__day__position Int)
(assert (<= 0 clock__timet__day__first__bit))
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))
(assert (<= 0 clock__timet__day__position))
(declare-const clock__timet__millisec__first__bit Int)
(declare-const clock__timet__millisec__last__bit Int)
(declare-const clock__timet__millisec__position Int)
(assert (<= 0 clock__timet__millisec__first__bit))
(assert (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))
(assert (<= 0 clock__timet__millisec__position))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep (timet__content a))
(declare-sort timetexti 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 21)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq9 (timetexti timetexti) Bool)
(declare-const dummy9 timetexti)
(declare-datatypes () ((timetexti__ref (mk_timetexti__ref (timetexti__content timetexti)))))
(define-fun timetexti__ref___projection ((a timetexti__ref)) timetexti (timetexti__content a))
(define-fun dynamic_invariant ((temp___expr_432 Int) (temp___is_init_428 Bool) (temp___skip_constant_429 Bool) (temp___do_toplevel_430 Bool) (temp___do_typ_inv_431 Bool)) Bool (=> (or (= temp___is_init_428 true) (<= 1 21)) (in_range7 temp___expr_432)))
(declare-const thetime us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const firstyearindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const lastyearindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const firstmonthindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const lastmonthindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const firstdayindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const lastdayindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const firsthourindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const lasthourindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const firstminindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const lastminindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const firstsecindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const lastsecindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const tenthsecindex Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-fun temp___String_Literal_491 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_491 us_void_param) 1)) 121) (= (to_rep (select (temp___String_Literal_491 us_void_param) 2)) 121)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 3)) 121)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 4)) 121)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 5)) 45)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 6)) 109)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 7)) 109)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 8)) 45)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 9)) 100)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 10)) 100)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 11)) 32)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 12)) 104)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 13)) 104)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 14)) 58)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 15)) 109)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 16)) 109)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 17)) 58)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 18)) 115)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 19)) 115)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 20)) 46)) (= (to_rep (select (temp___String_Literal_491 us_void_param) 21)) 115)) :pattern ((temp___String_Literal_491 us_void_param)))))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(define-fun dynamic_invariant3 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(assert (= firstyearindex 1))
(assert (= lastyearindex 4))
(assert (= firstmonthindex 6))
(assert (= lastmonthindex 7))
(assert (= firstdayindex 9))
(assert (= lastdayindex 10))
(assert (= firsthourindex 12))
(assert (= lasthourindex 13))
(assert (= firstminindex 15))
(assert (= lastminindex 16))
(assert (= firstsecindex 18))
(assert (= lastsecindex 19))
(assert (= tenthsecindex 21))
(define-fun dynamic_invariant5 ((temp___expr_368 Int) (temp___is_init_364 Bool) (temp___skip_constant_365 Bool) (temp___do_toplevel_366 Bool) (temp___do_typ_inv_367 Bool)) Bool (=> (or (= temp___is_init_364 true) (<= 1901 2099)) (in_range3 temp___expr_368)))
(define-fun dynamic_invariant6 ((temp___expr_375 Int) (temp___is_init_371 Bool) (temp___skip_constant_372 Bool) (temp___do_toplevel_373 Bool) (temp___do_typ_inv_374 Bool)) Bool (=> (or (= temp___is_init_371 true) (<= 1 12)) (in_range4 temp___expr_375)))
(define-fun dynamic_invariant7 ((temp___expr_382 Int) (temp___is_init_378 Bool) (temp___skip_constant_379 Bool) (temp___do_toplevel_380 Bool) (temp___do_typ_inv_381 Bool)) Bool (=> (or (= temp___is_init_378 true) (<= 1 31)) (in_range5 temp___expr_382)))
(define-fun dynamic_invariant8 ((temp___expr_414 Int) (temp___is_init_410 Bool) (temp___skip_constant_411 Bool) (temp___do_toplevel_412 Bool) (temp___do_typ_inv_413 Bool)) Bool (=> (or (= temp___is_init_410 true) (<= 0 86399999)) (in_range6 temp___expr_414)))
(declare-const localtext (Array Int character))
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const o4 integer)
(declare-const o5 integer)
(declare-const o6 integer)
(declare-const o7 integer)
(declare-const o8 integer)
(declare-const o9 integer)
(declare-const result (Array Int character))
(declare-const localtext1 (Array Int character))
(declare-const clock__setstringsegment__s (Array Int character))
(declare-const result1 (Array Int character))
(declare-const localtext2 (Array Int character))
(declare-const clock__setstringsegment__s1 (Array Int character))
(declare-const result2 (Array Int character))
(declare-const localtext3 (Array Int character))
(declare-const clock__setstringsegment__s2 (Array Int character))
(declare-const result3 (Array Int character))
(declare-const localtext4 (Array Int character))
(declare-const clock__setstringsegment__s3 (Array Int character))
(declare-const result4 (Array Int character))
(declare-const localtext5 (Array Int character))
(declare-const clock__setstringsegment__s4 (Array Int character))
(declare-const result5 (Array Int character))
(declare-const localtext6 (Array Int character))
(assert (= result localtext))
(assert (= localtext1 (temp___String_Literal_491 Tuple0)))
(assert (in_range7 firstyearindex))
(assert (in_range7 lastyearindex))
(assert (in_range7 firstmonthindex))
(assert (in_range7 lastmonthindex))
(assert (in_range7 firstdayindex))
(assert (in_range7 lastdayindex))
(assert (in_range7 firsthourindex))
(assert (in_range7 lasthourindex))
(assert (in_range7 firstminindex))
(assert (in_range7 lastminindex))
(assert (in_range7 firstsecindex))
(assert (in_range7 lastsecindex))
(assert (in_range7 tenthsecindex))
(assert (= (to_rep1 o1) 21))
(assert (= (to_rep1 o) 1))
(assert (= result1 localtext1))
(assert (= localtext2 (slide clock__setstringsegment__s (to_rep1 (first (mk 1 21))) 1)))
(assert (= (to_rep1 o3) 21))
(assert (= (to_rep1 o2) 1))
(assert (= result2 localtext2))
(assert (= localtext3 (slide clock__setstringsegment__s1 (to_rep1 (first (mk 1 21))) 1)))
(assert (= (to_rep1 o5) 21))
(assert (= (to_rep1 o4) 1))
(assert (= result3 localtext3))
(assert (= localtext4 (slide clock__setstringsegment__s2 (to_rep1 (first (mk 1 21))) 1)))
(assert (= (to_rep1 o7) 21))
(assert (= (to_rep1 o6) 1))
(assert (= result4 localtext4))
(assert (= localtext5 (slide clock__setstringsegment__s3 (to_rep1 (first (mk 1 21))) 1)))
(assert (= (to_rep1 o9) 21))
(assert (= (to_rep1 o8) 1))
(assert (= result5 localtext5))
(assert (= localtext6 (slide clock__setstringsegment__s4 (to_rep1 (first (mk 1 21))) 1)))
(assert (not (not (= 60000 0))))
(check-sat)
(exit)
