(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_142 Int)) (=> (and (<= a__first temp___idx_142) (<= temp___idx_142 a__last)) (= (to_rep (select a temp___idx_142)) (to_rep (select b (+ (- b__first a__first) temp___idx_142))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_142 Int)) (=> (and (<= a__first temp___idx_142) (<= temp___idx_142 a__last)) (= (to_rep (select a temp___idx_142)) (to_rep (select b (+ (- b__first a__first) temp___idx_142)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort index_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index_type index_type) Bool)
(declare-const dummy1 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-sort element_type 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (element_type element_type) Bool)
(declare-const dummy2 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant ((temp___expr_523 Int) (temp___is_init_520 Bool) (temp___skip_constant_521 Bool) (temp___do_toplevel_522 Bool)) Bool (=> (or (= temp___is_init_520 true) (<= 0 2147483647)) (in_range3 temp___expr_523)))
(declare-sort index_type1 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index_type1 index_type1) Bool)
(declare-const dummy3 index_type1)
(declare-datatypes () ((index_type__ref1 (mk_index_type__ref1 (index_type__content1 index_type1)))))
(define-fun index_type__ref___2__projection ((a index_type__ref1)) index_type1 (index_type__content1 a))
(define-fun dynamic_invariant1 ((temp___expr_529 Int) (temp___is_init_526 Bool) (temp___skip_constant_527 Bool) (temp___do_toplevel_528 Bool)) Bool (=> (or (= temp___is_init_526 true) (<= 1 10)) (in_range4 temp___expr_529)))
(declare-const search_item Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const items (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range1 temp___expr_33)))
(define-fun dynamic_invariant3 ((temp___expr_508 Int) (temp___is_init_505 Bool) (temp___skip_constant_506 Bool) (temp___do_toplevel_507 Bool)) Bool (=> (or (= temp___is_init_505 true) (<= 1 10)) (in_range2 temp___expr_508)))
(declare-const found Bool)
(declare-const result__ Int)
(declare-const low_index Int)
(declare-const mid_index Int)
(declare-const high_index Int)
(declare-const j Int)
(declare-const k Int)
(declare-const temp___563 Int)
(declare-const temp___562 Int)
(declare-const temp___560 Int)
(declare-const temp___561 Int)
(declare-const temp___559 Bool)
(declare-const temp___565 Int)
(declare-const temp___564 Int)
(declare-const o Int)
(declare-const o1 natural)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const mid_index1 Int)
(declare-const result Int)
(declare-const low_index1 Int)
(declare-const result1 Int)
(declare-const high_index1 Int)
(declare-const result2 Bool)
(declare-const found1 Bool)
(declare-const result3 Int)
(declare-const result__1 Int)
(declare-const temp___5651 Int)
(declare-const temp___5641 Int)
(declare-const result4 Int)
(declare-const mid_index2 Int)
(declare-const result5 Bool)
(declare-const found2 Bool)
(declare-const result6 Int)
(declare-const result__2 Int)
(declare-const found3 Bool)
(declare-const result__3 Int)
(declare-const low_index2 Int)
(declare-const mid_index3 Int)
(declare-const high_index2 Int)
(declare-const temp___5652 Int)
(declare-const temp___5642 Int)
(declare-const result7 Int)
(declare-const temp___5653 Int)
(declare-const result8 Int)
(declare-const temp___5643 Int)
(declare-const result9 Bool)
(declare-const result10 Int)
(declare-const low_index3 Int)
(declare-const result11 Int)
(declare-const high_index3 Int)
(declare-const result12 Int)
(declare-const mid_index4 Int)
(declare-const result13 Bool)
(declare-const found4 Bool)
(declare-const result14 Int)
(declare-const result__4 Int)
(declare-const found5 bool__ref)
(declare-const result__5 int__ref)
(declare-const mid_index5 int__ref)
(declare-const found6 Bool)
(declare-const result__6 Int)
(declare-const mid_index6 Int)
(declare-const found7 bool__ref)
(declare-const result__7 int__ref)
(declare-const low_index4 int__ref)
(declare-const mid_index7 int__ref)
(declare-const high_index4 int__ref)
(declare-const found8 Bool)
(declare-const result__8 Int)
(declare-const low_index5 Int)
(declare-const mid_index8 Int)
(declare-const high_index5 Int)
(declare-const found9 bool__ref)
(declare-const result__9 int__ref)
(declare-const low_index6 int__ref)
(declare-const mid_index9 int__ref)
(declare-const high_index6 int__ref)
(declare-const temp___5654 int__ref)
(declare-const temp___5644 int__ref)
(declare-const found10 Bool)
(declare-const result__10 Int)
(declare-const low_index7 Int)
(declare-const mid_index10 Int)
(declare-const high_index7 Int)
(declare-const temp___5655 Int)
(declare-const temp___5645 Int)
(declare-const found11 bool__ref)
(declare-const result__11 int__ref)
(declare-const low_index8 int__ref)
(declare-const mid_index11 int__ref)
(declare-const high_index8 int__ref)
(declare-const temp___5656 int__ref)
(declare-const temp___5646 int__ref)
(declare-const found12 Bool)
(declare-const result__12 Int)
(declare-const low_index9 Int)
(declare-const mid_index12 Int)
(declare-const high_index9 Int)
(declare-const temp___5657 Int)
(declare-const temp___5647 Int)
(declare-const found13 bool__ref)
(declare-const result__13 int__ref)
(declare-const low_index10 int__ref)
(declare-const mid_index13 int__ref)
(declare-const high_index10 int__ref)
(declare-const found14 Bool)
(declare-const result__14 Int)
(declare-const low_index11 Int)
(declare-const mid_index14 Int)
(declare-const high_index11 Int)
(declare-const found15 bool__ref)
(declare-const result__15 int__ref)
(declare-const low_index12 int__ref)
(declare-const mid_index15 int__ref)
(declare-const high_index12 int__ref)
(declare-const found16 Bool)
(declare-const result__16 Int)
(declare-const low_index13 Int)
(declare-const mid_index16 Int)
(declare-const high_index13 Int)
(declare-const found17 bool__ref)
(declare-const result__17 int__ref)
(declare-const low_index14 int__ref)
(declare-const mid_index17 int__ref)
(declare-const high_index14 int__ref)
(declare-const found18 Bool)
(declare-const result__18 Int)
(declare-const low_index15 Int)
(declare-const mid_index18 Int)
(declare-const high_index15 Int)
(declare-const found19 bool__ref)
(declare-const result__19 int__ref)
(declare-const low_index16 int__ref)
(declare-const mid_index19 int__ref)
(declare-const high_index16 int__ref)
(declare-const found20 Bool)
(declare-const result__20 Int)
(declare-const low_index17 Int)
(declare-const mid_index20 Int)
(declare-const high_index17 Int)
(declare-const found21 bool__ref)
(declare-const result__21 int__ref)
(declare-const low_index18 int__ref)
(declare-const mid_index21 int__ref)
(declare-const high_index18 int__ref)
(declare-const found22 Bool)
(declare-const result__22 Int)
(declare-const low_index19 Int)
(declare-const mid_index22 Int)
(declare-const high_index19 Int)
(assert (in_range3 search_item))
(assert (=> (<= 1 10) (in_range4 result__)))
(assert (forall ((j1 Int)) (=> (and (<= 1 j1) (<= j1 10)) (forall ((k1 Int)) (=> (and (<= (+ j1 1) k1) (<= k1 10)) (< (to_rep (select items j1)) (to_rep (select items k1))))))))
(assert (= (mk_int__ref result) (mk_int__ref low_index)))
(assert (= low_index1 1))
(assert (in_range4 low_index1))
(assert (=> (<= 1 10) (in_range4 mid_index)))
(assert (= (mk_int__ref result1) (mk_int__ref high_index)))
(assert (= high_index1 10))
(assert (in_range4 high_index1))
(assert (= (mk_bool__ref result2) (mk_bool__ref found)))
(assert (= found1 (of_int 0)))
(assert (= (mk_int__ref result3) (mk_int__ref result__)))
(assert (= result__1 1))
(assert (not (< search_item (to_rep (select items low_index1)))))
(assert (not (< (to_rep (select items high_index1)) search_item)))
(assert (= (mk_int__ref result4) (mk_int__ref mid_index)))
(assert (= mid_index2 (div1 (+ low_index1 high_index1) 2)))
(assert (not (= search_item (to_rep (select items mid_index2)))))
(assert (= result__2 result__1))
(assert (= found2 found1))
(assert (not (= low_index1 high_index1)))
(assert (not (= found3 true)))
(assert (and (<= low_index2 mid_index3) (< mid_index3 high_index2)))
(assert (or (< (to_rep (select items low_index2)) search_item) (= (to_rep (select items low_index2)) search_item)))
(assert (or (< search_item (to_rep (select items high_index2))) (= search_item (to_rep (select items high_index2)))))
(assert (and (and (and (=> (<= 1 10) (in_range4 result__3)) (=> (<= 1 10) (in_range4 mid_index3))) (=> (<= 1 10) (in_range4 high_index2))) (=> (<= 1 10) (in_range4 low_index2))))
(assert (= temp___5652 result7))
(assert (= temp___5653 low_index2))
(assert (= temp___5642 result8))
(assert (= temp___5643 high_index2))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (and (<= 1 (+ mid_index3 1)) (<= (+ mid_index3 1) 10))))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (= o (+ mid_index3 1))))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (= o1 (select items o))))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (= o2 (to_rep o1))))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (= result9 (ite (< search_item o2) true false))))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (not (= result9 true))))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (and (= o3 (+ mid_index3 1)) (in_range4 (+ mid_index3 1)))))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (= low_index2 result10)))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (= low_index3 o3)))
(assert (=> (< (to_rep (select items mid_index3)) search_item) (= high_index3 high_index2)))
(assert (=> (not (< (to_rep (select items mid_index3)) search_item)) (= high_index2 result11)))
(assert (=> (not (< (to_rep (select items mid_index3)) search_item)) (= high_index3 mid_index3)))
(assert (=> (not (< (to_rep (select items mid_index3)) search_item)) (= low_index3 low_index2)))
(assert (= mid_index3 result12))
(assert (= mid_index4 (div1 (+ low_index3 high_index3) 2)))
(assert (not (= search_item (to_rep (select items mid_index4)))))
(assert (= result__4 result__3))
(assert (= found4 found3))
(assert (not (= low_index3 high_index3)))
(assert (not (or (< temp___5653 low_index3) (and (= low_index3 temp___5653) (< high_index3 temp___5643)))))
(check-sat)
(exit)
