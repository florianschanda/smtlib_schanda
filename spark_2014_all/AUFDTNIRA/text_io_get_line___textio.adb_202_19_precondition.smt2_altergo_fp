(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type int__

predicate in_range5(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : int__, int__ -> bool

logic dummy6 : int__

type int____ref = { int____content : int__
}

function int____ref___2__projection(a: int____ref) : int__ =
  (a).int____content

logic eof : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic eof_ch : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type file_descr

predicate in_range6(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : file_descr, file_descr -> bool

logic dummy7 : file_descr

type file_descr__ref = { file_descr__content : file_descr
}

function file_descr__ref___projection(a: file_descr__ref) : file_descr =
  (a).file_descr__content

logic to_rep2 : file_descr -> int

logic of_rep2 : int -> file_descr

axiom inversion_axiom2 :
  (forall x:file_descr [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:file_descr [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

type count

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : count, count -> bool

logic dummy8 : count

type count__ref = { count__content : count
}

function count__ref___projection(a: count__ref) : count = (a).count__content

logic to_rep3 : count -> int

logic of_rep3 : int -> count

axiom inversion_axiom3 :
  (forall x:count [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:count [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__textio__file_type__descr : file_descr;
rec__textio__file_type__before_lm : bool;
rec__textio__file_type__before_lm_pm : bool; rec__textio__file_type__col :
count; rec__textio__file_type__line : count; rec__textio__file_type__page :
count; rec__textio__file_type__is_regular_file : bool
}

function us_split_fields_Descr__projection(a: us_split_fields) : file_descr =
  (a).rec__textio__file_type__descr

function us_split_fields_Before_LM__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm

function us_split_fields_Before_LM_PM__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm_pm

function us_split_fields_Col__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__col

function us_split_fields_Line__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__line

function us_split_fields_Page__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__page

function us_split_fields_Is_Regular_File__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__is_regular_file

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  (((((((((to_rep2(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep2(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm = ((b).us_split_fields1).rec__textio__file_type__before_lm)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm_pm = ((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__col) = to_rep3(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__line) = to_rep3(((b).us_split_fields1).rec__textio__file_type__line))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__page) = to_rep3(((b).us_split_fields1).rec__textio__file_type__page))) and
  (((a).us_split_fields1).rec__textio__file_type__is_regular_file = ((b).us_split_fields1).rec__textio__file_type__is_regular_file)) ->
  (bool_eq11(a, b) = true)) and
  ((not (((((((to_rep2(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep2(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm = ((b).us_split_fields1).rec__textio__file_type__before_lm)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm_pm = ((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__col) = to_rep3(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__line) = to_rep3(((b).us_split_fields1).rec__textio__file_type__line))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__page) = to_rep3(((b).us_split_fields1).rec__textio__file_type__page))) and
  (((a).us_split_fields1).rec__textio__file_type__is_regular_file = ((b).us_split_fields1).rec__textio__file_type__is_regular_file))) ->
  (bool_eq11(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:file_descr. forall a1:bool. forall a2:bool. forall a3:count.
  forall a4:count. forall a5:count. forall a6:bool. (0 <= object__size1({
  us_split_fields1 = { rec__textio__file_type__descr = a;
  rec__textio__file_type__before_lm = a1;
  rec__textio__file_type__before_lm_pm = a2; rec__textio__file_type__col =
  a3; rec__textio__file_type__line = a4; rec__textio__file_type__page = a5;
  rec__textio__file_type__is_regular_file = a6 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:file_descr. forall a1:bool. forall a2:bool. forall a3:count.
  forall a4:count. forall a5:count. forall a6:bool.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__textio__file_type__descr = a; rec__textio__file_type__before_lm = a1;
  rec__textio__file_type__before_lm_pm = a2; rec__textio__file_type__col =
  a3; rec__textio__file_type__line = a4; rec__textio__file_type__page = a5;
  rec__textio__file_type__is_regular_file = a6 } })))

logic textio__file_type__descr__first__bit : int

logic textio__file_type__descr__last__bit : int

logic textio__file_type__descr__position : int

axiom textio__file_type__descr__first__bit_axiom :
  (0 <= textio__file_type__descr__first__bit)

axiom textio__file_type__descr__last__bit_axiom :
  (textio__file_type__descr__first__bit <  textio__file_type__descr__last__bit)

axiom textio__file_type__descr__position_axiom :
  (0 <= textio__file_type__descr__position)

logic textio__file_type__before_lm__first__bit : int

logic textio__file_type__before_lm__last__bit : int

logic textio__file_type__before_lm__position : int

axiom textio__file_type__before_lm__first__bit_axiom :
  (0 <= textio__file_type__before_lm__first__bit)

axiom textio__file_type__before_lm__last__bit_axiom :
  (textio__file_type__before_lm__first__bit <  textio__file_type__before_lm__last__bit)

axiom textio__file_type__before_lm__position_axiom :
  (0 <= textio__file_type__before_lm__position)

logic textio__file_type__before_lm_pm__first__bit : int

logic textio__file_type__before_lm_pm__last__bit : int

logic textio__file_type__before_lm_pm__position : int

axiom textio__file_type__before_lm_pm__first__bit_axiom :
  (0 <= textio__file_type__before_lm_pm__first__bit)

axiom textio__file_type__before_lm_pm__last__bit_axiom :
  (textio__file_type__before_lm_pm__first__bit <  textio__file_type__before_lm_pm__last__bit)

axiom textio__file_type__before_lm_pm__position_axiom :
  (0 <= textio__file_type__before_lm_pm__position)

logic textio__file_type__col__first__bit : int

logic textio__file_type__col__last__bit : int

logic textio__file_type__col__position : int

axiom textio__file_type__col__first__bit_axiom :
  (0 <= textio__file_type__col__first__bit)

axiom textio__file_type__col__last__bit_axiom :
  (textio__file_type__col__first__bit <  textio__file_type__col__last__bit)

axiom textio__file_type__col__position_axiom :
  (0 <= textio__file_type__col__position)

logic textio__file_type__line__first__bit : int

logic textio__file_type__line__last__bit : int

logic textio__file_type__line__position : int

axiom textio__file_type__line__first__bit_axiom :
  (0 <= textio__file_type__line__first__bit)

axiom textio__file_type__line__last__bit_axiom :
  (textio__file_type__line__first__bit <  textio__file_type__line__last__bit)

axiom textio__file_type__line__position_axiom :
  (0 <= textio__file_type__line__position)

logic textio__file_type__page__first__bit : int

logic textio__file_type__page__last__bit : int

logic textio__file_type__page__position : int

axiom textio__file_type__page__first__bit_axiom :
  (0 <= textio__file_type__page__first__bit)

axiom textio__file_type__page__last__bit_axiom :
  (textio__file_type__page__first__bit <  textio__file_type__page__last__bit)

axiom textio__file_type__page__position_axiom :
  (0 <= textio__file_type__page__position)

logic textio__file_type__is_regular_file__first__bit : int

logic textio__file_type__is_regular_file__last__bit : int

logic textio__file_type__is_regular_file__position : int

axiom textio__file_type__is_regular_file__first__bit_axiom :
  (0 <= textio__file_type__is_regular_file__first__bit)

axiom textio__file_type__is_regular_file__last__bit_axiom :
  (textio__file_type__is_regular_file__first__bit <  textio__file_type__is_regular_file__last__bit)

axiom textio__file_type__is_regular_file__position_axiom :
  (0 <= textio__file_type__is_regular_file__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : file_descr

logic dummy10 : bool

logic dummy11 : bool

logic dummy12 : count

logic dummy13 : count

logic dummy14 : count

logic dummy15 : bool

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref___projection(a: file_type__ref) : us_rep =
  (a).file_type__content

logic end_of_file : us_rep, int, (int,character) farray -> bool

logic end_of_file__function_guard : bool, us_rep, int,
  (int,character) farray -> prop

logic fpeek : us_rep, int, (int,character) farray -> int

logic fpeek__function_guard : int, us_rep, int,
  (int,character) farray -> prop

axiom end_of_file__post_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> ((end_of_file({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = true) <-> (fpeek({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = eof))))))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic cur_position_at_start : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic s : (int,character) farray

logic s1 : t

logic attr__ATTRIBUTE_ADDRESS6 : int

logic result____first : integer

logic result____last : integer

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy16 : integer

type tTbufferSP1__ref = { tTbufferSP1__content : integer
}

function tTbufferSP1__ref___projection(a: tTbufferSP1__ref) : integer =
  (a).tTbufferSP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq13(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq10 : us_t1, us_t1 -> bool

logic dummy17 : (int,character) farray

logic dummy18 : t1

type tbufferS__ref = { tbufferS__content : us_t1
}

function tbufferS__ref___projection(a: tbufferS__ref) : us_t1 =
  (a).tbufferS__content

logic buffer__first : integer

logic buffer__last : integer

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic r74b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy19 : integer

type t75b__ref = { t75b__content : integer
}

function t75b__ref___projection(a: t75b__ref) : integer = (a).t75b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq15(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq12 : us_t2, us_t2 -> bool

logic dummy20 : (int,character) farray

logic dummy21 : t2

type t76b__ref = { t76b__content : us_t2
}

function t76b__ref___projection(a: t76b__ref) : us_t2 = (a).t76b__content

logic r : (int,character) farray

logic r1 : t

logic attr__ATTRIBUTE_ADDRESS12 : int

logic r77b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : integer, integer -> bool

logic dummy22 : integer

type t78b__ref = { t78b__content : integer
}

function t78b__ref___projection(a: t78b__ref) : integer = (a).t78b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

function bool_eq17(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq14 : us_t3, us_t3 -> bool

logic dummy23 : (int,character) farray

logic dummy24 : t3

type t79b__ref = { t79b__content : us_t3
}

function t79b__ref___projection(a: t79b__ref) : us_t3 = (a).t79b__content

logic r80b : int

logic attr__ATTRIBUTE_ADDRESS14 : int

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : integer, integer -> bool

logic dummy25 : integer

type t81b__ref = { t81b__content : integer
}

function t81b__ref___projection(a: t81b__ref) : integer = (a).t81b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,character) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,character) farray = (a).elts4

function of_array4(a: (int,character) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

function bool_eq19(x: us_t4, y: us_t4) : bool = bool_eq5((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq16 : us_t4, us_t4 -> bool

logic dummy26 : (int,character) farray

logic dummy27 : t4

type t82b__ref = { t82b__content : us_t4
}

function t82b__ref___projection(a: t82b__ref) : us_t4 = (a).t82b__content

logic fpeek1 : int, int, (int,character) farray -> int

logic fpeek__function_guard1 : int, int, int, (int,character) farray -> prop

axiom fpeek__post_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> in_range5(fpeek({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file))))))

axiom fpeek__def_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> (fpeek({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = fpeek1(to_rep2(file), helpers__cur_position,
  helpers__the_file))))))

axiom eof_ch__def_axiom : (eof_ch = mod(eof, 256))

axiom fpeek__post_axiom1 :
  (forall stream:int. forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek1(stream,
  helpers__cur_position, helpers__the_file)]. ((in_range6(stream) and
  in_range2(helpers__cur_position)) -> in_range5(fpeek1(stream,
  helpers__cur_position, helpers__the_file)))))

axiom fpeek__def_axiom1 :
  (forall stream:int. forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek1(stream,
  helpers__cur_position, helpers__the_file)]. ((in_range6(stream) and
  in_range2(helpers__cur_position)) ->
  (((to_rep((helpers__the_file[helpers__cur_position])) = eof_ch) ->
  (fpeek1(stream, helpers__cur_position, helpers__the_file) = eof)) and
  ((not (to_rep((helpers__the_file[helpers__cur_position])) = eof_ch)) ->
  (fpeek1(stream, helpers__cur_position,
  helpers__the_file) = to_rep((helpers__the_file[helpers__cur_position]))))))))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall the_file:(int,character) farray. forall cur_position:int.
  forall file__split_fields:file_descr. forall file__split_fields1:bool.
  forall file__split_fields2:bool. forall file__split_fields3:count.
  forall file__split_fields4:count. forall file__split_fields5:count.
  forall file__split_fields6:bool. forall num:int. forall last10:int.
  forall o:(int,character) farray. forall temp___661:(int,character) farray.
  forall temp___6611:t2. forall o1:int. forall o2:int. forall o3:int.
  forall o4:int. forall o5:int. forall o6:int.
  forall textio__get_line_function__get_rest__B_1__r__assume:(int,character) farray.
  forall textio__get_line_function__get_rest__B_1__r__assume1:t.
  forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall o12:int. forall cur_position1:int.
  forall file__split_fields7:file_descr. forall file__split_fields8:bool.
  forall file__split_fields9:bool. forall file__split_fields10:count.
  forall file__split_fields11:count. forall file__split_fields12:count.
  forall file__split_fields13:bool. forall buffer:(int,character) farray.
  forall last11:int. forall result:int. forall num1:int. forall result1:bool.
  (in_range2(cur_position_at_start) -> (dynamic_property(1, 2147483647,
  to_rep1(first(s1)), to_rep1(last(s1))) -> (dynamic_property(1, 2147483647,
  to_rep1(result____first), to_rep1(result____last)) ->
  (((0 <= 2147483647) -> in_range4(num)) -> (in_range2(cur_position) ->
  (in_range3(eof_ch) -> ((mod(eof, 256) = eof_ch) -> (in_range5(eof) ->
  (((not (end_of_file({ us_split_fields1 = { rec__textio__file_type__descr =
  file__split_fields; rec__textio__file_type__before_lm =
  file__split_fields1; rec__textio__file_type__before_lm_pm =
  file__split_fields2; rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position, the_file) = true)) and ((to_rep1(result____first) = 1) and
  ((to_rep1(result____last) = 2147483647) and
  ((cur_position = (((cur_position_at_start + to_rep1(last(s1))) - to_rep1(first(s1))) + 1)) and
  (forall idx:int. (((to_rep1(first(s1)) <= idx) and
  (idx <= to_rep1(last(s1)))) ->
  (to_rep((s[idx])) = to_rep((the_file[((idx - to_rep1(first(s1))) + cur_position_at_start)]))))))))) ->
  ((dynamic_property2(1, max(500, length({ elts = s; rt = s1 })),
  to_rep1(buffer__first), to_rep1(buffer__last)) and
  ((to_rep1(buffer__first) = 1) and (to_rep1(buffer__last) = max(500,
  length({ elts = s; rt = s1 }))))) -> (((0 <= 2147483647) ->
  in_range4(last10)) ->
  (((((to_rep1(buffer__last) <  to_rep1(buffer__first)) and
  (last11 = (to_rep1(buffer__first) - 1))) or
  ((not (to_rep1(buffer__last) <  to_rep1(buffer__first))) and
  (((((last11 = (to_rep1(buffer__first) - 1)) or
  ((to_rep1(buffer__first) <= last11) and
  (last11 <= to_rep1(buffer__last)))) and
  (forall idx:int. (((to_rep1(buffer__first) <= idx) and (idx <= last11)) ->
  (to_rep((buffer[idx])) = to_rep((the_file[((idx - to_rep1(buffer__first)) + cur_position)])))))) and
  (cur_position1 = (((cur_position + last11) - to_rep1(buffer__first)) + 1))) and
  (((last11 = to_rep1(buffer__last)) or
  (to_rep((the_file[cur_position1])) = eof_ch)) or
  (to_rep((the_file[cur_position1])) = 10))))) and (in_range4(last11) and
  in_range2(cur_position1))) -> ((last11 = r74b) -> (in_range4(r74b) ->
  (((((((1 <= r74b) -> (((to_rep1(buffer__first) <= 1) and
  (1 <= to_rep1(buffer__last))) and ((to_rep1(buffer__first) <= r74b) and
  (r74b <= to_rep1(buffer__last))))) and (o = buffer)) and
  ((o = temp___661) and (mk2(1, r74b) = temp___6611))) and (((length({ elts =
  s; rt = s1 }) = 0) and
  ((temp___661 = textio__get_line_function__get_rest__B_1__r__assume) and
  (mk(to_rep1(first4(temp___6611)),
  to_rep1(last4(temp___6611))) = textio__get_line_function__get_rest__B_1__r__assume1))) or
  ((not (length({ elts = s; rt = s1 }) = 0)) and
  ((((((((to_rep1(first4(temp___6611)) <= to_rep1(last4(temp___6611))) and
  (o1 = ((to_rep1(last4(temp___6611)) - to_rep1(first4(temp___6611))) + 1))) or
  ((not (to_rep1(first4(temp___6611)) <= to_rep1(last4(temp___6611)))) and
  (o1 = 0))) and ((((to_rep1(first(s1)) <= to_rep1(last(s1))) and
  (o2 = ((to_rep1(last(s1)) - to_rep1(first(s1))) + 1))) or
  ((not (to_rep1(first(s1)) <= to_rep1(last(s1)))) and (o2 = 0))) and
  (o3 = (o2 + o1)))) and (o4 = (to_rep1(first(s1)) + o3))) and
  (o5 = (o4 - 1))) and ((o6 = o5) and in_range2(o5))) and ((concat(s,
  to_rep1(first(s1)), to_rep1(last(s1)), temp___661,
  to_rep1(first4(temp___6611)),
  to_rep1(last4(temp___6611))) = textio__get_line_function__get_rest__B_1__r__assume) and
  (mk(to_rep1(first(s1)),
  o6) = textio__get_line_function__get_rest__B_1__r__assume1)))))) and
  ((r = textio__get_line_function__get_rest__B_1__r__assume) and
  (r1 = textio__get_line_function__get_rest__B_1__r__assume1))) ->
  (dynamic_property(1, 2147483647, to_rep1(first(r1)), to_rep1(last(r1))) ->
  ((to_rep1(first(r1)) = to_rep1(first(s1))) ->
  ((to_rep1(last(r1)) = (to_rep1(last(s1)) + last11)) ->
  (((((((((o7 = (to_rep1(last(s1)) - to_rep1(first(s1)))) and
  in_range1((to_rep1(last(s1)) - to_rep1(first(s1))))) and
  (o8 = (o7 + 1))) and ((o9 = o8) and in_range1(o8))) and
  (o10 = (o9 + last11))) and ((o11 = o10) and in_range1(o10))) and
  ((o12 = o11) and in_range4(o11))) and (({ int__content = result } = {
  int__content = num }) and (num1 = o12))) ->
  ((not (last11 <  to_rep1(buffer__last))) ->
  ((last11 = to_rep1(buffer__last)) -> (((result1 = end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields7;
  rec__textio__file_type__before_lm = file__split_fields8;
  rec__textio__file_type__before_lm_pm = file__split_fields9;
  rec__textio__file_type__col = file__split_fields10;
  rec__textio__file_type__line = file__split_fields11;
  rec__textio__file_type__page = file__split_fields12;
  rec__textio__file_type__is_regular_file = file__split_fields13 } },
  cur_position1, the_file)) and ((result1 = true) <-> (fpeek({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields7;
  rec__textio__file_type__before_lm = file__split_fields8;
  rec__textio__file_type__before_lm_pm = file__split_fields9;
  rec__textio__file_type__col = file__split_fields10;
  rec__textio__file_type__line = file__split_fields11;
  rec__textio__file_type__page = file__split_fields12;
  rec__textio__file_type__is_regular_file = file__split_fields13 } },
  cur_position1, the_file) = eof))) -> ((not (result1 = true)) ->
  (not (end_of_file({ us_split_fields1 = { rec__textio__file_type__descr =
  file__split_fields7; rec__textio__file_type__before_lm =
  file__split_fields8; rec__textio__file_type__before_lm_pm =
  file__split_fields9; rec__textio__file_type__col = file__split_fields10;
  rec__textio__file_type__line = file__split_fields11;
  rec__textio__file_type__page = file__split_fields12;
  rec__textio__file_type__is_regular_file = file__split_fields13 } },
  cur_position1, the_file) = true))))))))))))))))))))))))))
