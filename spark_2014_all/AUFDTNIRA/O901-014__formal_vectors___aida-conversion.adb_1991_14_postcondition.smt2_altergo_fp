(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic is_digit : int -> bool

logic is_digit__function_guard : bool, int -> prop

axiom is_digit__post_axiom :
  (forall c:int [is_digit(c)]. (in_range3(c) -> (((c = 48) ->
  (is_digit(c) = true)) and ((not (c = 48)) -> (((c = 49) ->
  (is_digit(c) = true)) and ((not (c = 49)) -> (((c = 50) ->
  (is_digit(c) = true)) and ((not (c = 50)) -> (((c = 51) ->
  (is_digit(c) = true)) and ((not (c = 51)) -> (((c = 52) ->
  (is_digit(c) = true)) and ((not (c = 52)) -> (((c = 53) ->
  (is_digit(c) = true)) and ((not (c = 53)) -> (((c = 54) ->
  (is_digit(c) = true)) and ((not (c = 54)) -> (((c = 55) ->
  (is_digit(c) = true)) and ((not (c = 55)) -> (((c = 56) ->
  (is_digit(c) = true)) and ((not (c = 56)) -> (((c = 57) ->
  (is_digit(c) = true)) and ((not (c = 57)) -> (((57 <  c) ->
  (not (is_digit(c) = true))) and ((not (57 <  c)) -> ((c <  48) ->
  (not (is_digit(c) = true)))))))))))))))))))))))))))

logic convert_character_digit_to_integer : int -> int

logic convert_character_digit_to_integer__function_guard : int, int -> prop

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a:(int,integer) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : integer, int -> (int,integer) farray

axiom singleton_def1 :
  (forall v:integer.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare1 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic source : (int,character) farray

logic source1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type tint_arrayD1__ref = { tint_arrayD1__content : integer
}

function tint_arrayD1__ref___21__projection(a: tint_arrayD1__ref) : integer =
  (a).tint_arrayD1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq7((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,integer) farray

logic dummy7 : t1

type tint_arrayT__ref = { tint_arrayT__content : us_t1
}

function tint_arrayT__ref___21__projection(a: tint_arrayT__ref) : us_t1 =
  (a).tint_arrayT__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t686b__ref = { t686b__content : integer
}

function t686b__ref___projection(a: t686b__ref) : integer =
  (a).t686b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,integer) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,integer) farray = (a).elts2

function of_array2(a: (int,integer) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq11(x: us_t2, y: us_t2) : bool = bool_eq7((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,integer) farray

logic dummy10 : t2

type t687b__ref = { t687b__content : us_t2
}

function t687b__ref___projection(a: t687b__ref) : us_t2 = (a).t687b__content

logic int_array__first : integer

logic int_array__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy11 : integer

type tnumber_array_typeD1__ref = { tnumber_array_typeD1__content : integer
}

function tnumber_array_typeD1__ref___30__projection(a: tnumber_array_typeD1__ref) : integer =
  (a).tnumber_array_typeD1__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,integer) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,integer) farray = (a).elts3

function of_array3(a: (int,integer) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,integer) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,integer) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,integer) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__alignment3(a)))

function bool_eq13(x: us_t3, y: us_t3) : bool = bool_eq7((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq9 : us_t3, us_t3 -> bool

logic dummy12 : (int,integer) farray

logic dummy13 : t3

type number_array_type__ref = { number_array_type__content : us_t3
}

function number_array_type__ref___30__projection(a: number_array_type__ref) : us_t3 =
  (a).number_array_type__content

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy14 : integer

type t690b__ref = { t690b__content : integer
}

function t690b__ref___projection(a: t690b__ref) : integer =
  (a).t690b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,integer) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,integer) farray = (a).elts4

function of_array4(a: (int,integer) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,integer) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,integer) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,integer) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,integer) farray. (0 <= object__alignment4(a)))

function bool_eq15(x: us_t4, y: us_t4) : bool = bool_eq7((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq11 : us_t4, us_t4 -> bool

logic dummy15 : (int,integer) farray

logic dummy16 : t4

type t691b__ref = { t691b__content : us_t4
}

function t691b__ref___projection(a: t691b__ref) : us_t4 = (a).t691b__content

logic n__first : integer

logic n__last : integer

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_property9(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : integer, integer -> bool

logic dummy17 : integer

type t692b__ref = { t692b__content : integer
}

function t692b__ref___projection(a: t692b__ref) : integer =
  (a).t692b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

type t5

logic first10 : t5 -> integer

logic last10 : t5 -> integer

logic mk5 : int, int -> t5

axiom mk_def5 :
  (forall f:int. forall l:int [mk5(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first10(mk5(f, l))) = f) and (to_rep1(last10(mk5(f, l))) = l)))))

predicate dynamic_property10(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t5 = { elts5 : (int,integer) farray; rt5 : t5
}

function to_array5(a: us_t5) : (int,integer) farray = (a).elts5

function of_array5(a: (int,integer) farray, f: int, l: int) : us_t5 = {
  elts5 = a; rt5 = mk5(f, l) }

function first11(a: us_t5) : int = to_rep1(first10((a).rt5))

function last11(a: us_t5) : int = to_rep1(last10((a).rt5))

logic length5 : us_t5 -> int

axiom length_def5 :
  (forall a:us_t5 [length5(a)]. (((first11(a) <= last11(a)) ->
  (length5(a) = ((last11(a) - first11(a)) + 1))) and
  ((not (first11(a) <= last11(a))) -> (length5(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,integer) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,integer) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,integer) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,integer) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,integer) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,integer) farray. (0 <= object__alignment5(a)))

function bool_eq17(x: us_t5, y: us_t5) : bool = bool_eq7((x).elts5,
  to_rep1(first10((x).rt5)), to_rep1(last10((x).rt5)), (y).elts5,
  to_rep1(first10((y).rt5)), to_rep1(last10((y).rt5)))

logic user_eq13 : us_t5, us_t5 -> bool

logic dummy18 : (int,integer) farray

logic dummy19 : t5

type tint_arrayB__ref = { tint_arrayB__content : us_t5
}

function tint_arrayB__ref___21__projection(a: tint_arrayB__ref) : us_t5 =
  (a).tint_arrayB__content

logic aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def : int,
  int, int, int, int, int, int, int, int -> us_t2

axiom def_axiom :
  (forall temp___2254:int. forall temp___2255:int. forall temp___2256:int.
  forall temp___2257:int. forall temp___2258:int. forall temp___2259:int.
  forall temp___2260:int. forall temp___2261:int. forall temp___2262:int.
  ((dynamic_property10((to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7), temp___2261, temp___2262) ->
  ((to_rep1(first4((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261, temp___2262)).rt2)) = temp___2261) and
  (to_rep1(last4((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261, temp___2262)).rt2)) = temp___2262))) and
  (((((((((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261,
  temp___2262)).elts2[((to_rep1(first(source1)) + 1) + 0)]) = of_rep1(temp___2254)) and
  (((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261,
  temp___2262)).elts2[((to_rep1(first(source1)) + 1) + 1)]) = of_rep1(temp___2255))) and
  (((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261,
  temp___2262)).elts2[((to_rep1(first(source1)) + 1) + 2)]) = of_rep1(temp___2256))) and
  (((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261,
  temp___2262)).elts2[((to_rep1(first(source1)) + 1) + 3)]) = of_rep1(temp___2257))) and
  (((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261,
  temp___2262)).elts2[((to_rep1(first(source1)) + 1) + 4)]) = of_rep1(temp___2258))) and
  (((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261,
  temp___2262)).elts2[((to_rep1(first(source1)) + 1) + 5)]) = of_rep1(temp___2259))) and
  (((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(temp___2254,
  temp___2255, temp___2256, temp___2257, temp___2258, temp___2259,
  temp___2260, temp___2261,
  temp___2262)).elts2[((to_rep1(first(source1)) + 1) + 6)]) = of_rep1(temp___2260)))))

type t6

logic first12 : t6 -> integer

logic last12 : t6 -> integer

logic mk6 : int, int -> t6

axiom mk_def6 :
  (forall f:int. forall l:int [mk6(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first12(mk6(f, l))) = f) and (to_rep1(last12(mk6(f, l))) = l)))))

predicate dynamic_property11(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t6 = { elts6 : (int,integer) farray; rt6 : t6
}

function to_array6(a: us_t6) : (int,integer) farray = (a).elts6

function of_array6(a: (int,integer) farray, f: int, l: int) : us_t6 = {
  elts6 = a; rt6 = mk6(f, l) }

function first13(a: us_t6) : int = to_rep1(first12((a).rt6))

function last13(a: us_t6) : int = to_rep1(last12((a).rt6))

logic length6 : us_t6 -> int

axiom length_def6 :
  (forall a:us_t6 [length6(a)]. (((first13(a) <= last13(a)) ->
  (length6(a) = ((last13(a) - first13(a)) + 1))) and
  ((not (first13(a) <= last13(a))) -> (length6(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,integer) farray -> int

logic value__component__size6 : int

logic object__component__size6 : (int,integer) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,integer) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,integer) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom6 : (0 <= value__component__size6)

axiom object__component__size_axiom6 :
  (forall a:(int,integer) farray. (0 <= object__component__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,integer) farray. (0 <= object__alignment6(a)))

function bool_eq18(x: us_t6, y: us_t6) : bool = bool_eq7((x).elts6,
  to_rep1(first12((x).rt6)), to_rep1(last12((x).rt6)), (y).elts6,
  to_rep1(first12((y).rt6)), to_rep1(last12((y).rt6)))

logic user_eq14 : us_t6, us_t6 -> bool

logic dummy20 : (int,integer) farray

logic dummy21 : t6

type tnumber_array_typeB__ref = { tnumber_array_typeB__content : us_t6
}

function tnumber_array_typeB__ref___30__projection(a: tnumber_array_typeB__ref) : us_t6 =
  (a).tnumber_array_typeB__content

logic aida__conversion__calculate_negative_target_length_8__n__aggregate_def : int,
  int, int -> us_t4

axiom def_axiom1 :
  (forall temp___2268:int. forall temp___2269:int. forall temp___2270:int.
  ((dynamic_property11((to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7), temp___2269, temp___2270) ->
  ((to_rep1(first8((aida__conversion__calculate_negative_target_length_8__n__aggregate_def(temp___2268,
  temp___2269, temp___2270)).rt4)) = temp___2269) and
  (to_rep1(last8((aida__conversion__calculate_negative_target_length_8__n__aggregate_def(temp___2268,
  temp___2269, temp___2270)).rt4)) = temp___2270))) and
  (forall temp___2271:int.
  (((aida__conversion__calculate_negative_target_length_8__n__aggregate_def(temp___2268,
  temp___2269, temp___2270)).elts4[temp___2271]) = of_rep1(temp___2268)))))

axiom convert_character_digit_to_integer__post_axiom :
  (forall source2:int [convert_character_digit_to_integer(source2)].
  ((in_range3(source2) and (is_digit(source2) = true)) ->
  ((((0 <= convert_character_digit_to_integer(source2)) and
  (convert_character_digit_to_integer(source2) <= 9)) and (((source2 = 48) ->
  (convert_character_digit_to_integer(source2) = 0)) and
  ((not (source2 = 48)) -> (((source2 = 49) ->
  (convert_character_digit_to_integer(source2) = 1)) and
  ((not (source2 = 49)) -> (((source2 = 50) ->
  (convert_character_digit_to_integer(source2) = 2)) and
  ((not (source2 = 50)) -> (((source2 = 51) ->
  (convert_character_digit_to_integer(source2) = 3)) and
  ((not (source2 = 51)) -> (((source2 = 52) ->
  (convert_character_digit_to_integer(source2) = 4)) and
  ((not (source2 = 52)) -> (((source2 = 53) ->
  (convert_character_digit_to_integer(source2) = 5)) and
  ((not (source2 = 53)) -> (((source2 = 54) ->
  (convert_character_digit_to_integer(source2) = 6)) and
  ((not (source2 = 54)) -> (((source2 = 55) ->
  (convert_character_digit_to_integer(source2) = 7)) and
  ((not (source2 = 55)) -> (((source2 = 56) ->
  (convert_character_digit_to_integer(source2) = 8)) and
  ((not (source2 = 56)) -> ((source2 = 57) ->
  (convert_character_digit_to_integer(source2) = 9))))))))))))))))))))) and
  in_range1(convert_character_digit_to_integer(source2)))))

logic target : int

logic has_failed : bool

logic int_array : (int,integer) farray

logic n : (int,integer) farray

logic index : int

logic temp___2288 : int

logic index1 : int

logic o : int

logic o1 : int

logic o2 : bool

logic o3 : bool

logic o4 : bool

logic temp___2265 : (int,integer) farray

logic temp___22651 : t2

logic aida__conversion__calculate_negative_target_length_8__int_array__assume : (int,integer) farray

logic aida__conversion__calculate_negative_target_length_8__int_array__assume1 : t1

logic us : int

logic us1 : int

logic temp___2273 : (int,integer) farray

logic temp___22731 : t4

logic aida__conversion__calculate_negative_target_length_8__n__assume : (int,integer) farray

logic aida__conversion__calculate_negative_target_length_8__n__assume1 : t3

logic us2 : int

logic us3 : int

logic temp___2279 : int

logic temp___2280 : int

logic temp___2278 : int

logic temp___2276 : (int,integer) farray

logic o5 : int

logic o6 : integer

logic o7 : int

logic aida__conversion__convert_character_digit_to_integer__2__target : int

logic o8 : int

logic o9 : character

logic o10 : int

logic o11 : integer

logic o12 : int

logic o13 : (int,integer) farray

logic i : int

logic o14 : int

logic o15 : bool

logic o16 : int

logic o17 : integer

logic o18 : int

logic o19 : bool

logic j : int

logic o20 : int

logic o21 : bool

logic o22 : int

logic o23 : integer

logic o24 : int

logic o25 : int

logic o26 : integer

logic o27 : int

logic aida__conversion__convert_character_digit_to_integer__2__target1 : int

logic o28 : int

logic o29 : character

logic o30 : int

logic o31 : integer

logic o32 : int

logic o33 : (int,integer) farray

logic i1 : int

logic o34 : int

logic o35 : integer

logic o36 : int

logic o37 : integer

logic o38 : int

logic o39 : int

logic o40 : bool

logic temp___2281 : int

logic o41 : int

logic o42 : integer

logic o43 : int

logic o44 : int

logic o45 : int

logic temp___2282 : int

logic o46 : int

logic o47 : integer

logic o48 : int

logic o49 : int

logic o50 : int

logic o51 : int

logic o52 : int

logic temp___2283 : int

logic o53 : int

logic o54 : integer

logic o55 : int

logic o56 : int

logic o57 : int

logic o58 : int

logic o59 : int

logic temp___2284 : int

logic o60 : int

logic o61 : integer

logic o62 : int

logic o63 : int

logic o64 : int

logic o65 : int

logic o66 : int

logic temp___2285 : int

logic o67 : int

logic o68 : integer

logic o69 : int

logic o70 : int

logic o71 : int

logic o72 : int

logic o73 : int

logic temp___2286 : int

logic o74 : int

logic o75 : integer

logic o76 : int

logic o77 : int

logic o78 : int

logic o79 : int

logic o80 : int

logic temp___2287 : int

logic o81 : int

logic o82 : integer

logic o83 : int

logic o84 : int

logic o85 : int

logic o86 : int

logic o87 : int

logic result : bool

logic result1 : (int,integer) farray

logic int_array1 : (int,integer) farray

logic result2 : (int,integer) farray

logic n1 : (int,integer) farray

logic result3 : int

logic index2 : int

logic aida__conversion__convert_character_digit_to_integer__2__target2 : int

logic result4 : (int,integer) farray

logic n2 : (int,integer) farray

logic n3 : (int,integer) farray

logic index3 : int

logic result5 : bool

logic result6 : bool

logic result7 : int

logic index4 : int

logic aida__conversion__convert_character_digit_to_integer__2__target3 : int

logic result8 : (int,integer) farray

logic n4 : (int,integer) farray

logic n5 : (int,integer) farray

logic index5 : int

logic n6 : (int,integer) farray

logic index6 : int

logic n7 : (int,integer) farray

logic index7 : int

logic n8 : (int,integer) farray

logic index8 : int

logic result9 : int

logic target1 : int

logic result10 : int

logic target2 : int

logic result11 : int

logic target3 : int

logic result12 : int

logic target4 : int

logic result13 : int

logic target5 : int

logic result14 : int

logic target6 : int

logic result15 : int

logic target7 : int

logic result16 : bool

logic has_failed1 : bool

logic target8 : int

logic has_failed2 : bool

logic int_array2 : (int,integer) farray

logic n9 : (int,integer) farray

logic index9 : int

logic target9 : int

logic has_failed3 : bool

logic int_array3 : (int,integer) farray

logic n10 : (int,integer) farray

logic index10 : int

axiom H : dynamic_property(1, 2147483647, to_rep1(first(source1)),
  to_rep1(last(source1)))

axiom H1 : (((- 2147483648) <= 2147483647) -> in_range1(target))

axiom H2 : ((length({ elts = source; rt = source1 }) = 8) and
  ((to_rep((source[(to_rep1(first(source1)) + 0)])) = 45) and
  (forall index11:int. ((((to_rep1(first(source1)) + 1) <= index11) and
  (index11 <= (to_rep1(first(source1)) + 7))) ->
  (is_digit(to_rep((source[index11]))) = true)))))

axiom H3 :
  ((((((to_rep1(first4((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(9,
  9, 9, 9, 9, 9, 9, (to_rep1(first(source1)) + 1),
  ((to_rep1(first(source1)) + 1) + 6))).rt2)) = (to_rep1(first(source1)) + 1)) and
  ((to_rep1(last4((aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(9,
  9, 9, 9, 9, 9, 9, (to_rep1(first(source1)) + 1),
  ((to_rep1(first(source1)) + 1) + 6))).rt2)) = ((to_rep1(first(source1)) + 1) + 6)) and
  ({ elts2 = temp___2265; rt2 = temp___22651
  } = aida__conversion__calculate_negative_target_length_8__int_array__aggregate_def(9,
  9, 9, 9, 9, 9, 9, (to_rep1(first(source1)) + 1),
  ((to_rep1(first(source1)) + 1) + 6))))) and
  ((((to_rep1(first4(temp___22651)) <= to_rep1(last4(temp___22651))) ->
  ((((to_rep1(first(source1)) + 1) <= (to_rep1(first(source1)) + 7)) ->
  (((to_rep1(last4(temp___22651)) - to_rep1(first4(temp___22651))) + 1) = (((to_rep1(first(source1)) + 7) - (to_rep1(first(source1)) + 1)) + 1))) and
  ((not ((to_rep1(first(source1)) + 1) <= (to_rep1(first(source1)) + 7))) ->
  (((to_rep1(last4(temp___22651)) - to_rep1(first4(temp___22651))) + 1) = 0)))) and
  ((not (to_rep1(first4(temp___22651)) <= to_rep1(last4(temp___22651)))) ->
  (((to_rep1(first(source1)) + 1) <= (to_rep1(first(source1)) + 7)) ->
  (0 = (((to_rep1(first(source1)) + 7) - (to_rep1(first(source1)) + 1)) + 1))))) and
  ((slide1(temp___2265, to_rep1(first4(temp___22651)),
  (to_rep1(first(source1)) + 1)) = aida__conversion__calculate_negative_target_length_8__int_array__assume) and
  (mk1((to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7)) = aida__conversion__calculate_negative_target_length_8__int_array__assume1)))) and
  (((result1 = int_array) and
  (int_array1 = aida__conversion__calculate_negative_target_length_8__int_array__assume)) and
  ((to_rep1(int_array__first) = to_rep1(first2(aida__conversion__calculate_negative_target_length_8__int_array__assume1))) and
  (to_rep1(int_array__last) = to_rep1(last2(aida__conversion__calculate_negative_target_length_8__int_array__assume1)))))) and
  ((dynamic_property2((to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7), to_rep1(int_array__first),
  to_rep1(int_array__last)) and
  ((to_rep1(int_array__first) = (to_rep1(first(source1)) + 1)) and
  (to_rep1(int_array__last) = (to_rep1(first(source1)) + 7)))) and
  (((((to_rep1(first8((aida__conversion__calculate_negative_target_length_8__n__aggregate_def(0,
  (to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7))).rt4)) = (to_rep1(first(source1)) + 1)) and
  ((to_rep1(last8((aida__conversion__calculate_negative_target_length_8__n__aggregate_def(0,
  (to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7))).rt4)) = (to_rep1(first(source1)) + 7)) and
  ({ elts4 = temp___2273; rt4 = temp___22731
  } = aida__conversion__calculate_negative_target_length_8__n__aggregate_def(0,
  (to_rep1(first(source1)) + 1), (to_rep1(first(source1)) + 7))))) and
  ((((to_rep1(first8(temp___22731)) <= to_rep1(last8(temp___22731))) ->
  ((((to_rep1(first(source1)) + 1) <= (to_rep1(first(source1)) + 7)) ->
  (((to_rep1(last8(temp___22731)) - to_rep1(first8(temp___22731))) + 1) = (((to_rep1(first(source1)) + 7) - (to_rep1(first(source1)) + 1)) + 1))) and
  ((not ((to_rep1(first(source1)) + 1) <= (to_rep1(first(source1)) + 7))) ->
  (((to_rep1(last8(temp___22731)) - to_rep1(first8(temp___22731))) + 1) = 0)))) and
  ((not (to_rep1(first8(temp___22731)) <= to_rep1(last8(temp___22731)))) ->
  (((to_rep1(first(source1)) + 1) <= (to_rep1(first(source1)) + 7)) ->
  (0 = (((to_rep1(first(source1)) + 7) - (to_rep1(first(source1)) + 1)) + 1))))) and
  ((slide1(temp___2273, to_rep1(first8(temp___22731)),
  (to_rep1(first(source1)) + 1)) = aida__conversion__calculate_negative_target_length_8__n__assume) and
  (mk3((to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7)) = aida__conversion__calculate_negative_target_length_8__n__assume1)))) and
  (((result2 = n) and
  (n1 = aida__conversion__calculate_negative_target_length_8__n__assume)) and
  ((to_rep1(n__first) = to_rep1(first6(aida__conversion__calculate_negative_target_length_8__n__assume1))) and
  (to_rep1(n__last) = to_rep1(last6(aida__conversion__calculate_negative_target_length_8__n__assume1)))))) and
  ((dynamic_property6((to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7), to_rep1(n__first), to_rep1(n__last)) and
  ((to_rep1(n__first) = (to_rep1(first(source1)) + 1)) and
  (to_rep1(n__last) = (to_rep1(first(source1)) + 7)))) and
  ((((temp___2279 = (to_rep1(first(source1)) + 1)) and
  in_range1((to_rep1(first(source1)) + 1))) and
  (((temp___2280 = (to_rep1(first(source1)) + 7)) and
  in_range1((to_rep1(first(source1)) + 7))) and (((result3 = index) and
  (index2 = temp___2279)) and ((((temp___2279 <= index2) and
  (index2 <= temp___2280)) -> ((((temp___2278 = index2) and
  ((temp___2276 = n1) and ((((((((to_rep1(n__first) <= index2) and
  (index2 <= to_rep1(n__last))) and (o5 = index2)) and (o6 = (n1[o5]))) and
  (o7 = to_rep1(o6))) and
  (o7 = aida__conversion__convert_character_digit_to_integer__2__target)) and
  (((((((to_rep1(first(source1)) <= index2) and
  (index2 <= to_rep1(last(source1)))) and (o8 = index2)) and
  (o9 = (source[o8]))) and (o10 = to_rep(o9))) and
  (((((0 <= aida__conversion__convert_character_digit_to_integer__2__target2) and
  (aida__conversion__convert_character_digit_to_integer__2__target2 <= 9)) and
  (aida__conversion__convert_character_digit_to_integer__2__target2 = convert_character_digit_to_integer(o10))) and
  (((bool_eq1(o10, 48) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 0)) and
  ((not (bool_eq1(o10, 48) = true)) -> (((bool_eq1(o10, 49) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 1)) and
  ((not (bool_eq1(o10, 49) = true)) -> (((bool_eq1(o10, 50) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 2)) and
  ((not (bool_eq1(o10, 50) = true)) -> (((bool_eq1(o10, 51) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 3)) and
  ((not (bool_eq1(o10, 51) = true)) -> (((bool_eq1(o10, 52) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 4)) and
  ((not (bool_eq1(o10, 52) = true)) -> (((bool_eq1(o10, 53) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 5)) and
  ((not (bool_eq1(o10, 53) = true)) -> (((bool_eq1(o10, 54) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 6)) and
  ((not (bool_eq1(o10, 54) = true)) -> (((bool_eq1(o10, 55) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 7)) and
  ((not (bool_eq1(o10, 55) = true)) -> (((bool_eq1(o10, 56) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 8)) and
  ((not (bool_eq1(o10, 56) = true)) -> ((bool_eq1(o10, 57) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 9))))))))))))))))))))) and
  in_range1(aida__conversion__convert_character_digit_to_integer__2__target2))) and
  (((to_rep1(o11) = aida__conversion__convert_character_digit_to_integer__2__target2) and
  ((((to_rep1(n__first) <= index2) and (index2 <= to_rep1(n__last))) and
  (o12 = index2)) and (o13 = (n1[o12 <- o11])))) and ((n1 = result4) and
  (n2 = o13))))) and
  (((forall i2:int. ((((to_rep1(first(source1)) + 1) <= i2) and
    (i2 <= index3)) -> ((0 <= to_rep1((n3[i2]))) and
    (to_rep1((n3[i2])) <= 9)))) and
  (forall j1:int. ((((to_rep1(first(source1)) + 1) <= j1) and
  (j1 <= index3)) -> (to_rep1((n3[j1])) <= to_rep1((int_array1[j1])))))) and
  ((((forall temp___2277:int. (((to_rep1(n__first) <= temp___2277) and
     (temp___2277 <= to_rep1(n__last))) -> ((index3 <  temp___2277) ->
     ((n3[temp___2277]) = (temp___2276[temp___2277]))))) and
  (((to_rep1(first(source1)) + 1) <= (to_rep1(first(source1)) + 7)) ->
  dynamic_property9((to_rep1(first(source1)) + 1),
  (to_rep1(first(source1)) + 7), index3))) and
  (((to_rep1(first(source1)) + 1) <= index3) and
  (index3 <= (to_rep1(first(source1)) + 7)))) and
  (index3 = temp___2280)))))) and (((index3 = index5) and (n3 = n5)) and
  ((index6 = index3) and (n6 = n3)))) and (((index7 = index5) and
  (n7 = n5)) and ((index8 = index6) and (n8 = n6))))) and
  ((not ((temp___2279 <= index2) and (index2 <= temp___2280))) ->
  (((index7 = index2) and (n7 = n1)) and ((index8 = index2) and
  (n8 = n1)))))))) and
  ((forall i2:int. (((to_rep1(n__first) <= i2) and
   (i2 <= to_rep1(n__last))) -> ((0 <= to_rep1((n7[i2]))) and
   (to_rep1((n7[i2])) <= to_rep1((int_array1[i2])))))) and
  (((((((((temp___2281 = (to_rep1(first(source1)) + 7)) and
  in_range1((to_rep1(first(source1)) + 7))) and
  (((to_rep1(n__first) <= temp___2281) and
  (temp___2281 <= to_rep1(n__last))) and (o41 = temp___2281))) and
  (o42 = (n7[o41]))) and (o43 = to_rep1(o42))) and (o44 = (-o43))) and
  ((o45 = o44) and in_range1(o44))) and ((result9 = target) and
  (target1 = o45))) and (((- 9) <= target1) and
  (((((((((((temp___2282 = (to_rep1(first(source1)) + 6)) and
  in_range1((to_rep1(first(source1)) + 6))) and
  (((to_rep1(n__first) <= temp___2282) and
  (temp___2282 <= to_rep1(n__last))) and (o46 = temp___2282))) and
  (o47 = (n7[o46]))) and (o48 = to_rep1(o47))) and (o49 = (o48 * 10))) and
  ((o50 = o49) and in_range1(o49))) and (o51 = (target1 - o50))) and
  ((o52 = o51) and in_range1(o51))) and ((result10 = target1) and
  (target2 = o52))) and (((- 99) <= target2) and
  (((((((((((temp___2283 = (to_rep1(first(source1)) + 5)) and
  in_range1((to_rep1(first(source1)) + 5))) and
  (((to_rep1(n__first) <= temp___2283) and
  (temp___2283 <= to_rep1(n__last))) and (o53 = temp___2283))) and
  (o54 = (n7[o53]))) and (o55 = to_rep1(o54))) and (o56 = (o55 * 100))) and
  ((o57 = o56) and in_range1(o56))) and (o58 = (target2 - o57))) and
  ((o59 = o58) and in_range1(o58))) and ((result11 = target2) and
  (target3 = o59))) and (((- 999) <= target3) and
  (((((((((((temp___2284 = (to_rep1(first(source1)) + 4)) and
  in_range1((to_rep1(first(source1)) + 4))) and
  (((to_rep1(n__first) <= temp___2284) and
  (temp___2284 <= to_rep1(n__last))) and (o60 = temp___2284))) and
  (o61 = (n7[o60]))) and (o62 = to_rep1(o61))) and (o63 = (o62 * 1000))) and
  ((o64 = o63) and in_range1(o63))) and (o65 = (target3 - o64))) and
  ((o66 = o65) and in_range1(o65))) and ((result12 = target3) and
  (target4 = o66))) and (((- 9999) <= target4) and
  (((((((((((temp___2285 = (to_rep1(first(source1)) + 3)) and
  in_range1((to_rep1(first(source1)) + 3))) and
  (((to_rep1(n__first) <= temp___2285) and
  (temp___2285 <= to_rep1(n__last))) and (o67 = temp___2285))) and
  (o68 = (n7[o67]))) and (o69 = to_rep1(o68))) and (o70 = (o69 * 10000))) and
  ((o71 = o70) and in_range1(o70))) and (o72 = (target4 - o71))) and
  ((o73 = o72) and in_range1(o72))) and ((result13 = target4) and
  (target5 = o73))) and (((- 99999) <= target5) and
  (((((((((((temp___2286 = (to_rep1(first(source1)) + 2)) and
  in_range1((to_rep1(first(source1)) + 2))) and
  (((to_rep1(n__first) <= temp___2286) and
  (temp___2286 <= to_rep1(n__last))) and (o74 = temp___2286))) and
  (o75 = (n7[o74]))) and (o76 = to_rep1(o75))) and
  (o77 = (o76 * 100000))) and ((o78 = o77) and in_range1(o77))) and
  (o79 = (target5 - o78))) and ((o80 = o79) and in_range1(o79))) and
  ((result14 = target5) and (target6 = o80))) and
  (((- 999999) <= target6) and
  (((((((((((temp___2287 = (to_rep1(first(source1)) + 1)) and
  in_range1((to_rep1(first(source1)) + 1))) and
  (((to_rep1(n__first) <= temp___2287) and
  (temp___2287 <= to_rep1(n__last))) and (o81 = temp___2287))) and
  (o82 = (n7[o81]))) and (o83 = to_rep1(o82))) and
  (o84 = (o83 * 1000000))) and ((o85 = o84) and in_range1(o84))) and
  (o86 = (target6 - o85))) and ((o87 = o86) and in_range1(o86))) and
  ((result15 = target6) and (target7 = o87))) and
  (((- 9999999) <= target7) and ((result16 = has_failed) and
  (has_failed1 = of_int(0))))))))))))))))))))))) and (((index9 = index7) and
  ((n9 = n7) and ((int_array2 = int_array1) and
  ((has_failed2 = has_failed1) and (target8 = target7))))) and
  ((index10 = index8) and ((n10 = n8) and ((int_array3 = int_array1) and
  ((has_failed3 = has_failed1) and (target9 = target7)))))))

axiom H4 : (has_failed2 = true)

 (* File "aida-conversion.adb", line 1937, characters 0-0 *)
goal WP_parameter_def : false
