(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type fart

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : fart, fart -> bool

logic dummy5 : fart

type fart__ref = { fart__content : fart
}

function fart__ref___projection(a: fart__ref) : fart = (a).fart__content

logic to_rep2 : fart -> int

logic of_rep2 : int -> fart

axiom inversion_axiom2 :
  (forall x:fart [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:fart [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type matchresultt

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : matchresultt, matchresultt -> bool

logic dummy6 : matchresultt

type matchresultt__ref = { matchresultt__content : matchresultt
}

function matchresultt__ref___projection(a: matchresultt__ref) : matchresultt =
  (a).matchresultt__content

type bytet

predicate in_range5(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : bytet, bytet -> bool

logic dummy7 : bytet

type bytet__ref = { bytet__content : bytet
}

function bytet__ref___projection(a: bytet__ref) : bytet = (a).bytet__content

logic to_rep3 : bytet -> int

logic of_rep3 : int -> bytet

axiom inversion_axiom3 :
  (forall x:bytet [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:bytet [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,bytet) farray
}

logic slide1 : (int,bytet) farray, int, int -> (int,bytet) farray

axiom slide_eq1 :
  (forall a:(int,bytet) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,bytet) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq9 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,bytet) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bytet) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_158:int. ((((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) and
  (to_rep3((a[temp___idx_158])) = to_rep3((b[((b__first - a__first) + temp___idx_158)])))) or
  (not ((a__first <= temp___idx_158) and (temp___idx_158 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) ->
  (to_rep3((a[temp___idx_158])) = to_rep3((b[((b__first - a__first) + temp___idx_158)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) ->
  (to_rep3((a[temp___idx_158])) = to_rep3((b[((b__first - a__first) + temp___idx_158)])))))))))

logic dummy8 : (int,bytet) farray

logic value__size1 : int

logic object__size1 : (int,bytet) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,bytet) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,bytet) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,bytet) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,bytet) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,bytet) farray. (0 <= object__alignment1(a)))

logic user_eq7 : (int,bytet) farray, (int,bytet) farray -> bool

type templatelengtht

predicate in_range6(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : templatelengtht, templatelengtht -> bool

logic dummy9 : templatelengtht

type templatelengtht__ref = { templatelengtht__content : templatelengtht
}

function templatelengtht__ref___projection(a: templatelengtht__ref) : templatelengtht =
  (a).templatelengtht__content

logic to_rep4 : templatelengtht -> int

logic of_rep4 : int -> templatelengtht

axiom inversion_axiom4 :
  (forall x:templatelengtht [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:templatelengtht [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic dummy10 : (int,character) farray

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__iandatypes__templatet__length :
templatelengtht; rec__iandatypes__templatet__requiredmaxfar : fart;
rec__iandatypes__templatet__id : (int,character) farray;
rec__iandatypes__templatet__pad : (int,bytet) farray
}

function us_split_fields_Length__projection(a: us_split_fields) : templatelengtht =
  (a).rec__iandatypes__templatet__length

function us_split_fields_RequiredMaxFAR__projection(a: us_split_fields) : fart =
  (a).rec__iandatypes__templatet__requiredmaxfar

function us_split_fields_ID__2__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__iandatypes__templatet__id

function us_split_fields_Pad__projection(a: us_split_fields) : (int,bytet) farray =
  (a).rec__iandatypes__templatet__pad

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((((to_rep4(((a).us_split_fields1).rec__iandatypes__templatet__length) = to_rep4(((b).us_split_fields1).rec__iandatypes__templatet__length)) and
  (to_rep2(((a).us_split_fields1).rec__iandatypes__templatet__requiredmaxfar) = to_rep2(((b).us_split_fields1).rec__iandatypes__templatet__requiredmaxfar))) and
  (bool_eq4(((a).us_split_fields1).rec__iandatypes__templatet__id, 1, 40,
  ((b).us_split_fields1).rec__iandatypes__templatet__id, 1, 40) = true)) and
  (bool_eq9(((a).us_split_fields1).rec__iandatypes__templatet__pad, 1, 452,
  ((b).us_split_fields1).rec__iandatypes__templatet__pad, 1, 452) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((to_rep4(((a).us_split_fields1).rec__iandatypes__templatet__length) = to_rep4(((b).us_split_fields1).rec__iandatypes__templatet__length)) and
  (to_rep2(((a).us_split_fields1).rec__iandatypes__templatet__requiredmaxfar) = to_rep2(((b).us_split_fields1).rec__iandatypes__templatet__requiredmaxfar))) and
  (bool_eq4(((a).us_split_fields1).rec__iandatypes__templatet__id, 1, 40,
  ((b).us_split_fields1).rec__iandatypes__templatet__id, 1, 40) = true)) and
  (bool_eq9(((a).us_split_fields1).rec__iandatypes__templatet__pad, 1, 452,
  ((b).us_split_fields1).rec__iandatypes__templatet__pad, 1,
  452) = true))) -> (bool_eq11(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:templatelengtht. forall a1:fart.
  forall a2:(int,character) farray. forall a3:(int,bytet) farray.
  (0 <= object__size3({ us_split_fields1 = {
  rec__iandatypes__templatet__length = a;
  rec__iandatypes__templatet__requiredmaxfar = a1;
  rec__iandatypes__templatet__id = a2; rec__iandatypes__templatet__pad = a3 }
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:templatelengtht. forall a1:fart.
  forall a2:(int,character) farray. forall a3:(int,bytet) farray.
  (0 <= object__alignment3({ us_split_fields1 = {
  rec__iandatypes__templatet__length = a;
  rec__iandatypes__templatet__requiredmaxfar = a1;
  rec__iandatypes__templatet__id = a2; rec__iandatypes__templatet__pad = a3 }
  })))

logic iandatypes__templatet__length__first__bit : int

logic iandatypes__templatet__length__last__bit : int

logic iandatypes__templatet__length__position : int

axiom iandatypes__templatet__length__first__bit_axiom :
  (0 <= iandatypes__templatet__length__first__bit)

axiom iandatypes__templatet__length__last__bit_axiom :
  (iandatypes__templatet__length__first__bit <  iandatypes__templatet__length__last__bit)

axiom iandatypes__templatet__length__position_axiom :
  (0 <= iandatypes__templatet__length__position)

logic iandatypes__templatet__requiredmaxfar__first__bit : int

logic iandatypes__templatet__requiredmaxfar__last__bit : int

logic iandatypes__templatet__requiredmaxfar__position : int

axiom iandatypes__templatet__requiredmaxfar__first__bit_axiom :
  (0 <= iandatypes__templatet__requiredmaxfar__first__bit)

axiom iandatypes__templatet__requiredmaxfar__last__bit_axiom :
  (iandatypes__templatet__requiredmaxfar__first__bit <  iandatypes__templatet__requiredmaxfar__last__bit)

axiom iandatypes__templatet__requiredmaxfar__position_axiom :
  (0 <= iandatypes__templatet__requiredmaxfar__position)

logic iandatypes__templatet__id__first__bit : int

logic iandatypes__templatet__id__last__bit : int

logic iandatypes__templatet__id__position : int

axiom iandatypes__templatet__id__first__bit_axiom :
  (0 <= iandatypes__templatet__id__first__bit)

axiom iandatypes__templatet__id__last__bit_axiom :
  (iandatypes__templatet__id__first__bit <  iandatypes__templatet__id__last__bit)

axiom iandatypes__templatet__id__position_axiom :
  (0 <= iandatypes__templatet__id__position)

logic iandatypes__templatet__pad__first__bit : int

logic iandatypes__templatet__pad__last__bit : int

logic iandatypes__templatet__pad__position : int

axiom iandatypes__templatet__pad__first__bit_axiom :
  (0 <= iandatypes__templatet__pad__first__bit)

axiom iandatypes__templatet__pad__last__bit_axiom :
  (iandatypes__templatet__pad__first__bit <  iandatypes__templatet__pad__last__bit)

axiom iandatypes__templatet__pad__position_axiom :
  (0 <= iandatypes__templatet__pad__position)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy11 : templatelengtht

logic dummy12 : fart

logic dummy13 : (int,character) farray

logic dummy14 : (int,bytet) farray

type templatet__ref = { templatet__content : us_rep
}

function templatet__ref___projection(a: templatet__ref) : us_rep =
  (a).templatet__content

type statust

predicate in_range7(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : statust, statust -> bool

logic dummy15 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type descriptioni

predicate in_range8(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : descriptioni, descriptioni -> bool

logic dummy16 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic thesystemmaxfar : us_private -> int

logic thesystemmaxfar__function_guard : int, us_private -> prop

axiom thesystemmaxfar__post_axiom :
  (forall configdata__state:us_private [thesystemmaxfar(configdata__state)].
  in_range3(thesystemmaxfar(configdata__state)))

type logfileindext

predicate in_range9(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : logfileindext, logfileindext -> bool

logic dummy17 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep5 : logfileindext -> int

logic of_rep5 : int -> logfileindext

axiom inversion_axiom5 :
  (forall x:logfileindext [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:logfileindext [to_rep5(x)]. in_range9(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range9(x) ->
  (to_rep5(of_rep5(x)) = x)))

type logentrycountt

predicate in_range10(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq14 : logentrycountt, logentrycountt -> bool

logic dummy18 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep6 : logentrycountt -> int

logic of_rep6 : int -> logentrycountt

axiom inversion_axiom6 :
  (forall x:logentrycountt [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:logentrycountt [to_rep6(x)]. in_range10(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range10(x) ->
  (to_rep6(of_rep6(x)) = x)))

type logfilecountt

predicate in_range11(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : logfilecountt, logfilecountt -> bool

logic dummy19 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep7 : logfilecountt -> int

logic of_rep7 : int -> logfilecountt

axiom inversion_axiom7 :
  (forall x:logfilecountt [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:logfilecountt [to_rep7(x)]. in_range11(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range11(x) ->
  (to_rep7(of_rep7(x)) = x)))

type map__ref2 = { map__content2 : (int,logfileindext) farray
}

logic slide2 : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq2 :
  (forall a:(int,logfileindext) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq17 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def15 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq17(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_172:int. ((((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) and
  (to_rep5((a[temp___idx_172])) = to_rep5((b[((b__first - a__first) + temp___idx_172)])))) or
  (not ((a__first <= temp___idx_172) and (temp___idx_172 <= a__last)))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_172:int. (((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) ->
  (to_rep5((a[temp___idx_172])) = to_rep5((b[((b__first - a__first) + temp___idx_172)]))))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq17(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_172:int. (((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) ->
  (to_rep5((a[temp___idx_172])) = to_rep5((b[((b__first - a__first) + temp___idx_172)])))))))))

logic dummy20 : (int,logfileindext) farray

logic value__size4 : int

logic object__size4 : (int,logfileindext) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,logfileindext) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,logfileindext) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,logfileindext) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment4(a)))

logic user_eq16 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type us_split_fields2 = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields2) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__2__projection(a: us_split_fields2) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___8__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq18 : us_rep1, us_rep1 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq18(a, b)].
  ((((((bool_eq17(((a).us_split_fields3).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__head) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__head))) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__lasti) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__lasti))) and
  (to_rep7(((a).us_split_fields3).rec__auditlog__logfilelistt__length) = to_rep7(((b).us_split_fields3).rec__auditlog__logfilelistt__length))) ->
  (bool_eq18(a, b) = true)) and
  ((not ((((bool_eq17(((a).us_split_fields3).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__head) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__head))) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__lasti) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__lasti))) and
  (to_rep7(((a).us_split_fields3).rec__auditlog__logfilelistt__length) = to_rep7(((b).us_split_fields3).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq18(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep1 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep1 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size5({
  us_split_fields3 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment5({ us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq17 : us_rep1, us_rep1 -> bool

logic dummy21 : (int,logfileindext) farray

logic dummy22 : logfileindext

logic dummy23 : logfileindext

logic dummy24 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep1
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep1 =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range12(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq18 : fileentrycountt, fileentrycountt -> bool

logic dummy25 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep8 : fileentrycountt -> int

logic of_rep8 : int -> fileentrycountt

axiom inversion_axiom8 :
  (forall x:fileentrycountt [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:fileentrycountt [to_rep8(x)]. in_range12(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range12(x) ->
  (to_rep8(of_rep8(x)) = x)))

type map__ref3 = { map__content3 : (int,fileentrycountt) farray
}

logic slide3 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq3 :
  (forall a:(int,fileentrycountt) farray.
  (forall first2:int [slide3(a, first2, first2)]. (slide3(a, first2,
  first2) = a)))

axiom slide_def3 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq20 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def18 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq20(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep8((a[temp___idx_173])) = to_rep8((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep8((a[temp___idx_173])) = to_rep8((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq20(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep8((a[temp___idx_173])) = to_rep8((b[((b__first - a__first) + temp___idx_173)])))))))))

logic dummy26 : (int,fileentrycountt) farray

logic value__size6 : int

logic object__size6 : (int,fileentrycountt) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,fileentrycountt) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,fileentrycountt) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment6(a)))

logic user_eq19 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields4 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep1;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields4) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields4) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields4) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___9__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq21 : us_rep2, us_rep2 -> bool

axiom bool_eq_def19 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq21(a, b)].
  ((((((to_rep5(((a).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile) = to_rep5(((b).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq18(((a).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq20(((a).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq21(a, b) = true)) and
  ((not ((((to_rep5(((a).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile) = to_rep5(((b).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq18(((a).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq20(((a).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq21(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep2 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep2 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size7({
  us_split_fields5 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment7({
  us_split_fields5 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq20 : us_rep2, us_rep2 -> bool

logic dummy27 : logfileindext

logic dummy28 : logentrycountt

logic dummy29 : (int,logfileindext) farray

logic dummy30 : logfileindext

logic dummy31 : logfileindext

logic dummy32 : logfilecountt

logic dummy33 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep2
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep2 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep1,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep1,
  (int,fileentrycountt) farray -> prop

logic temp___1239 : int -> (int,logfileindext) farray

logic temp___1243 : int -> (int,fileentrycountt) farray

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep3

logic bool_eq22 : us_rep3, us_rep3 -> bool

logic value__size8 : int

logic object__size8 : us_rep3 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep3 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (forall a:us_rep3. (0 <= object__size8(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:us_rep3. (0 <= object__alignment8(a)))

logic user_eq21 : us_rep3, us_rep3 -> bool

logic dummy34 : us_rep3

type t__ref = { t__content : us_rep3
}

function t__ref___projection(a: t__ref) : us_rep3 = (a).t__content

type map__ref4 = { map__content4 : (int,us_rep3) farray
}

logic slide4 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq4 :
  (forall a:(int,us_rep3) farray.
  (forall first2:int [slide4(a, first2, first2)]. (slide4(a, first2,
  first2) = a)))

axiom slide_def4 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq23 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def20 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq23(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_174:int. ((((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) and (bool_eq22((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true)) or
  (not ((a__first <= temp___idx_174) and (temp___idx_174 <= a__last)))))) ->
  (bool_eq23(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq22((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true))))) -> (bool_eq23(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq23(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq22((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

type filestatust

predicate in_range13(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq22 : filestatust, filestatust -> bool

logic dummy35 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep9 : filestatust -> int

logic of_rep9 : int -> filestatust

axiom inversion_axiom9 :
  (forall x:filestatust [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:filestatust [to_rep9(x)]. in_range13(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range13(x) ->
  (to_rep9(of_rep9(x)) = x)))

type map__ref5 = { map__content5 : (int,filestatust) farray
}

logic slide5 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq5 :
  (forall a:(int,filestatust) farray.
  (forall first2:int [slide5(a, first2, first2)]. (slide5(a, first2,
  first2) = a)))

axiom slide_def5 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide5(a, old_first, new_first)[i])]. ((slide5(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq25 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def22 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq25(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_175:int. ((((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) and
  (to_rep9((a[temp___idx_175])) = to_rep9((b[((b__first - a__first) + temp___idx_175)])))) or
  (not ((a__first <= temp___idx_175) and (temp___idx_175 <= a__last)))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) ->
  (to_rep9((a[temp___idx_175])) = to_rep9((b[((b__first - a__first) + temp___idx_175)]))))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev5 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq25(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) ->
  (to_rep9((a[temp___idx_175])) = to_rep9((b[((b__first - a__first) + temp___idx_175)])))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type statscount

predicate in_range14(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def23 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq23 : statscount, statscount -> bool

logic dummy36 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep10 : statscount -> int

logic of_rep10 : int -> statscount

axiom inversion_axiom10 :
  (forall x:statscount [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:statscount [to_rep10(x)]. in_range14(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range14(x) ->
  (to_rep10(of_rep10(x)) = x)))

type us_split_fields6 = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields6) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields6) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields6) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields6) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___16__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___17__projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq27 : us_rep4, us_rep4 -> bool

axiom bool_eq_def24 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq27(a, b)].
  ((((((to_rep10(((a).us_split_fields7).rec__stats__t__successentry) = to_rep10(((b).us_split_fields7).rec__stats__t__successentry)) and
  (to_rep10(((a).us_split_fields7).rec__stats__t__failentry) = to_rep10(((b).us_split_fields7).rec__stats__t__failentry))) and
  (to_rep10(((a).us_split_fields7).rec__stats__t__successbio) = to_rep10(((b).us_split_fields7).rec__stats__t__successbio))) and
  (to_rep10(((a).us_split_fields7).rec__stats__t__failbio) = to_rep10(((b).us_split_fields7).rec__stats__t__failbio))) ->
  (bool_eq27(a, b) = true)) and
  ((not ((((to_rep10(((a).us_split_fields7).rec__stats__t__successentry) = to_rep10(((b).us_split_fields7).rec__stats__t__successentry)) and
  (to_rep10(((a).us_split_fields7).rec__stats__t__failentry) = to_rep10(((b).us_split_fields7).rec__stats__t__failentry))) and
  (to_rep10(((a).us_split_fields7).rec__stats__t__successbio) = to_rep10(((b).us_split_fields7).rec__stats__t__successbio))) and
  (to_rep10(((a).us_split_fields7).rec__stats__t__failbio) = to_rep10(((b).us_split_fields7).rec__stats__t__failbio)))) ->
  (bool_eq27(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep4 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep4 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size9({ us_split_fields7 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment9({ us_split_fields7 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq24 : us_rep4, us_rep4 -> bool

logic dummy37 : statscount

logic dummy38 : statscount

logic dummy39 : statscount

logic dummy40 : statscount

type t__ref1 = { t__content1 : us_rep4
}

function t__ref___4__projection(a: t__ref1) : us_rep4 = (a).t__content1

logic extractuser : us_private -> (int,character) farray

logic extractuser__function_guard : (int,character) farray,
  us_private -> prop

axiom extractuser__post_axiom : true

logic ispresent : us_private -> bool

logic ispresent__function_guard : bool, us_private -> prop

axiom ispresent__post_axiom : true

logic getiandatemplate : us_private -> us_rep

logic getiandatemplate__function_guard : us_rep, us_private -> prop

axiom getiandatemplate__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS5 : int

type statust1

predicate in_range15(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def25 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq25 : statust1, statust1 -> bool

logic dummy41 : statust1

type statust__ref1 = { statust__content1 : statust1
}

function statust__ref___2__projection(a: statust__ref1) : statust1 =
  (a).statust__content1

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic achievedfardescription : int -> (int,character) farray

logic achievedfardescription__function_guard : (int,character) farray,
  int -> prop

axiom achievedfardescription__post_axiom : true

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields3 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields3 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep7(usedlogfiles3)) and
  (numberlogentries = (((to_rep7(usedlogfiles3) - 1) * 1024) + to_rep8((logfileentries[currentlogfile])))))))))

axiom def_axiom :
  (forall temp___1245:int. (in_range12(temp___1245) ->
  (forall temp___1246:int.
  (to_rep8((temp___1243(temp___1245)[temp___1246])) = temp___1245))))

axiom def_axiom1 :
  (forall temp___1241:int. (in_range9(temp___1241) ->
  (forall temp___1242:int.
  (to_rep5((temp___1239(temp___1241)[temp___1242])) = temp___1241))))

 (* File "userentry.adb", line 318, characters 0-0 *)
goal WP_parameter_def :
  (forall logfilestate__split_fields:logfileindext.
  forall logfilestate__split_fields1:logentrycountt.
  forall logfilestate__split_fields2:(int,logfileindext) farray.
  forall logfilestate__split_fields3:logfileindext.
  forall logfilestate__split_fields4:logfileindext.
  forall logfilestate__split_fields5:logfilecountt.
  forall logfilestate__split_fields6:(int,fileentrycountt) farray.
  forall auditalarm:int. forall status:int.
  forall thetemplate__split_fields:templatelengtht.
  forall thetemplate__split_fields1:fart.
  forall thetemplate__split_fields2:(int,character) farray.
  forall thetemplate__split_fields3:(int,bytet) farray.
  forall matchresult:int. forall achievedfar:int. forall maxfar:int.
  forall state:us_private. forall state1:us_private. forall o:bool.
  forall temp___2693:templatelengtht. forall temp___26931:fart.
  forall temp___26932:(int,character) farray.
  forall temp___26933:(int,bytet) farray. forall o1:int.
  forall o2:(int,character) farray. forall o3:(int,character) farray.
  forall o4:(int,character) farray. forall o5:t. forall result:bool.
  forall result1:templatelengtht. forall result2:fart.
  forall result3:(int,character) farray. forall result4:(int,bytet) farray.
  forall thetemplate__split_fields4:templatelengtht.
  forall thetemplate__split_fields5:fart.
  forall thetemplate__split_fields6:(int,character) farray.
  forall thetemplate__split_fields7:(int,bytet) farray. forall result5:int.
  forall maxfar1:int. forall result6:int. forall maxfar2:int.
  forall logfilestate__split_fields7:logfileindext.
  forall logfilestate__split_fields8:logentrycountt.
  forall logfilestate__split_fields9:(int,logfileindext) farray.
  forall logfilestate__split_fields10:logfileindext.
  forall logfilestate__split_fields11:logfileindext.
  forall logfilestate__split_fields12:logfilecountt.
  forall logfilestate__split_fields13:(int,fileentrycountt) farray.
  forall auditalarm1:int. forall matchresult1:int. forall achievedfar1:int.
  (((0 <= 7) -> in_range15(status)) ->
  ((valid_numberlogentries(to_rep5(logfilestate__split_fields),
  to_rep6(logfilestate__split_fields1), { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields2;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields3;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields4;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields5 } },
  logfilestate__split_fields6) = true) -> (in_range7(auditalarm) ->
  (((0 <= 1) -> in_range4(matchresult)) -> (((0 <= 2147483647) ->
  in_range3(achievedfar)) -> (((0 <= 2147483647) -> in_range3(maxfar)) ->
  (((o = ispresent(state1)) and (((not (o = true)) and (result = true)) or
  ((o = true) and (result = false)))) -> ((not (result = true)) -> ((({
  us_split_fields1 = { rec__iandatypes__templatet__length = temp___2693;
  rec__iandatypes__templatet__requiredmaxfar = temp___26931;
  rec__iandatypes__templatet__id = temp___26932;
  rec__iandatypes__templatet__pad = temp___26933 }
  } = getiandatemplate(state1)) and
  (((result1 = thetemplate__split_fields) and
  ((result2 = thetemplate__split_fields1) and
  ((result3 = thetemplate__split_fields2) and
  (result4 = thetemplate__split_fields3)))) and
  ((temp___2693 = thetemplate__split_fields4) and
  ((temp___26931 = thetemplate__split_fields5) and
  ((temp___26932 = thetemplate__split_fields6) and
  (temp___26933 = thetemplate__split_fields7)))))) ->
  ((((o1 = thesystemmaxfar(state)) and in_range3(o1)) and
  ((result5 = maxfar) and (maxfar1 = o1))) ->
  ((((to_rep2(thetemplate__split_fields5) <  maxfar1) and
  ((result6 = maxfar1) and
  (maxfar2 = to_rep2(thetemplate__split_fields5)))) or
  ((not (to_rep2(thetemplate__split_fields5) <  maxfar1)) and
  (maxfar2 = maxfar1))) -> ((((in_range4(matchresult1) and
  in_range3(achievedfar1)) and
  (valid_numberlogentries(to_rep5(logfilestate__split_fields7),
  to_rep6(logfilestate__split_fields8), { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields9;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields10;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields11;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields12 } },
  logfilestate__split_fields13) = true)) and in_range7(auditalarm1)) ->
  ((not (matchresult1 = 0)) ->
  (((o3 = achievedfardescription(achievedfar1)) and ((o3 = o4) and (mk(1,
  150) = o5))) -> ((o2 = extractuser(state1)) ->
  (to_rep1(first(o5)) = 1)))))))))))))))))
