(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort scrabble_letter 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 65 x) (<= x 90)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (scrabble_letter scrabble_letter) Bool)
(declare-const dummy1 scrabble_letter)
(declare-datatypes () ((scrabble_letter__ref (mk_scrabble_letter__ref (scrabble_letter__content scrabble_letter)))))
(define-fun scrabble_letter__ref___projection ((a scrabble_letter__ref)) scrabble_letter (scrabble_letter__content a))
(declare-fun to_rep (scrabble_letter) Int)
(declare-fun of_rep (Int) scrabble_letter)
(assert (forall ((x scrabble_letter)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x scrabble_letter)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort scrabble_value 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (scrabble_value scrabble_value) Bool)
(declare-const dummy2 scrabble_value)
(declare-datatypes () ((scrabble_value__ref (mk_scrabble_value__ref (scrabble_value__content scrabble_value)))))
(define-fun scrabble_value__ref___projection ((a scrabble_value__ref)) scrabble_value (scrabble_value__content a))
(declare-fun to_rep1 (scrabble_value) Int)
(declare-fun of_rep1 (Int) scrabble_value)
(assert (forall ((x scrabble_value)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x scrabble_value)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int scrabble_letter))))))
(declare-fun slide ((Array Int scrabble_letter) Int Int) (Array Int scrabble_letter))
(assert (forall ((a (Array Int scrabble_letter))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int scrabble_letter))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int scrabble_letter) Int Int (Array Int scrabble_letter) Int Int) (Array Int scrabble_letter))
(assert (forall ((a (Array Int scrabble_letter)) (b (Array Int scrabble_letter))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (scrabble_letter Int) (Array Int scrabble_letter))
(assert (forall ((v scrabble_letter)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int scrabble_letter)) (a__first Int) (a__last Int) (b (Array Int scrabble_letter)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int scrabble_letter)) (b (Array Int scrabble_letter))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int scrabble_letter) Int Int (Array Int scrabble_letter) Int Int) Int)
(assert (forall ((a (Array Int scrabble_letter)) (b (Array Int scrabble_letter))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int scrabble_letter)) (b (Array Int scrabble_letter))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int scrabble_letter)) (b (Array Int scrabble_letter))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort positive 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (positive positive) Bool)
(declare-const dummy3 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-fun to_rep2 (integer) Int)
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range4 low) (in_range4 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int scrabble_letter)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int scrabble_letter) (elts a))
(define-fun of_array ((a (Array Int scrabble_letter)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int scrabble_letter)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int scrabble_letter)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int scrabble_letter)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int scrabble_letter))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int scrabble_letter))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int scrabble_letter))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((scrabble_word__ref (mk_scrabble_word__ref (scrabble_word__content us_t)))))
(define-fun scrabble_word__ref___projection ((a scrabble_word__ref)) us_t (scrabble_word__content a))
(define-fun dynamic_invariant ((temp___expr_180 us_t) (temp___is_init_177 Bool) (temp___skip_constant_178 Bool) (temp___do_toplevel_179 Bool)) Bool (=> (not (= temp___skip_constant_178 true)) (dynamic_property 1 2147483647 (first1 temp___expr_180) (last1 temp___expr_180))))
(declare-sort scrabble_score 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (scrabble_score scrabble_score) Bool)
(declare-const dummy5 scrabble_score)
(declare-datatypes () ((scrabble_score__ref (mk_scrabble_score__ref (scrabble_score__content scrabble_score)))))
(define-fun scrabble_score__ref___projection ((a scrabble_score__ref)) scrabble_score (scrabble_score__content a))
(define-fun dynamic_invariant1 ((temp___expr_185 Int) (temp___is_init_182 Bool) (temp___skip_constant_183 Bool) (temp___do_toplevel_184 Bool)) Bool (=> (or (= temp___is_init_182 true) (<= 0 100)) (in_range5 temp___expr_185)))
(declare-const word us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int scrabble_value))))))
(declare-fun slide1 ((Array Int scrabble_value) Int Int) (Array Int scrabble_value))
(assert (forall ((a (Array Int scrabble_value))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int scrabble_value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int scrabble_value) Int Int (Array Int scrabble_value) Int Int) (Array Int scrabble_value))
(assert (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (scrabble_value Int) (Array Int scrabble_value))
(assert (forall ((v scrabble_value)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq2 ((a (Array Int scrabble_value)) (a__first Int) (a__last Int) (b (Array Int scrabble_value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep1 (select a temp___idx_133)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare1 ((Array Int scrabble_value) Int Int (Array Int scrabble_value) Int Int) Int)
(assert (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq2 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq2 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(define-fun dynamic_invariant2 ((temp___expr_193 (Array Int scrabble_value)) (temp___is_init_190 Bool) (temp___skip_constant_191 Bool) (temp___do_toplevel_192 Bool)) Bool (forall ((temp___194 Int)) (=> (and (<= 65 temp___194) (<= temp___194 90)) (=> (= temp___is_init_190 true) (let ((temp___196 (to_rep1 (select temp___expr_193 temp___194)))) (or (and (<= 1 temp___196) (<= temp___196 5)) (or (and (<= 8 temp___196) (<= temp___196 8)) (and (<= 10 temp___196) (<= temp___196 10)))))))))
(declare-const lookup_table (Array Int scrabble_value))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun scrabble__lookup_table__aggregate_def (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) (Array Int scrabble_value))
(assert (forall ((temp___135 Int) (temp___136 Int) (temp___137 Int) (temp___138 Int) (temp___139 Int) (temp___140 Int) (temp___141 Int) (temp___142 Int) (temp___143 Int) (temp___144 Int) (temp___145 Int) (temp___146 Int) (temp___147 Int) (temp___148 Int) (temp___149 Int) (temp___150 Int) (temp___151 Int) (temp___152 Int) (temp___153 Int) (temp___154 Int) (temp___155 Int) (temp___156 Int) (temp___157 Int) (temp___158 Int) (temp___159 Int) (temp___160 Int)) (let ((temp___134 (scrabble__lookup_table__aggregate_def temp___135 temp___136 temp___137 temp___138 temp___139 temp___140 temp___141 temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157 temp___158 temp___159 temp___160))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (select temp___134 65) (of_rep1 temp___135)) (= (select temp___134 66) (of_rep1 temp___136))) (= (select temp___134 67) (of_rep1 temp___137))) (= (select temp___134 68) (of_rep1 temp___138))) (= (select temp___134 69) (of_rep1 temp___139))) (= (select temp___134 70) (of_rep1 temp___140))) (= (select temp___134 71) (of_rep1 temp___141))) (= (select temp___134 72) (of_rep1 temp___142))) (= (select temp___134 73) (of_rep1 temp___143))) (= (select temp___134 74) (of_rep1 temp___144))) (= (select temp___134 75) (of_rep1 temp___145))) (= (select temp___134 76) (of_rep1 temp___146))) (= (select temp___134 77) (of_rep1 temp___147))) (= (select temp___134 78) (of_rep1 temp___148))) (= (select temp___134 79) (of_rep1 temp___149))) (= (select temp___134 80) (of_rep1 temp___150))) (= (select temp___134 81) (of_rep1 temp___151))) (= (select temp___134 82) (of_rep1 temp___152))) (= (select temp___134 83) (of_rep1 temp___153))) (= (select temp___134 84) (of_rep1 temp___154))) (= (select temp___134 85) (of_rep1 temp___155))) (= (select temp___134 86) (of_rep1 temp___156))) (= (select temp___134 87) (of_rep1 temp___157))) (= (select temp___134 88) (of_rep1 temp___158))) (= (select temp___134 89) (of_rep1 temp___159))) (= (select temp___134 90) (of_rep1 temp___160))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content integer)))))
(define-fun t6b__ref___projection ((a t6b__ref)) integer (t6b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range4 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(assert (= lookup_table (scrabble__lookup_table__aggregate_def 1 3 3 2 1 4 2 4 1 8 5 1 3 1 1 3 10 1 1 1 1 4 4 8 4 10)))
(define-fun dynamic_invariant5 ((temp___expr_165 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 65 90)) (in_range2 temp___expr_165)))
(define-fun dynamic_invariant6 ((temp___expr_171 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool)) Bool (and (=> (or (= temp___is_init_168 true) (<= 1 2147483647)) (in_range3 temp___expr_171)) (=> (= temp___do_toplevel_170 true) (=> (= temp___is_init_168 true) (or (and (<= 1 temp___expr_171) (<= temp___expr_171 5)) (or (and (<= 8 temp___expr_171) (<= temp___expr_171 8)) (and (<= 10 temp___expr_171) (<= temp___expr_171 10))))))))
(define-fun dynamic_predicate ((temp___175 Int)) Bool (or (and (<= 1 temp___175) (<= temp___175 5)) (or (and (<= 8 temp___175) (<= temp___175 8)) (and (<= 10 temp___175) (<= temp___175 10)))))
(declare-const total_score Int)
(declare-const letter_index Int)
(declare-const result Int)
(declare-const total_score1 Int)
(declare-const result1 Int)
(declare-const letter_index1 Int)
(declare-const total_score2 Int)
(declare-const letter_index2 Int)
(assert (dynamic_invariant2 lookup_table true false true))
(assert (= (scrabble__lookup_table__aggregate_def 1 3 3 2 1 4 2 4 1 8 5 1 3 1 1 3 10 1 1 1 1 4 4 8 4 10) lookup_table))
(assert (dynamic_invariant word true false true))
(assert (<= (length word) 10))
(assert (= result total_score))
(assert (= total_score1 0))
(assert (in_range5 total_score1))
(assert (= result1 letter_index))
(assert (= letter_index1 (to_rep2 (first (rt word)))))
(assert (<= (to_rep2 (first (rt word))) letter_index1))
(assert (<= letter_index1 (to_rep2 (last (rt word)))))
(assert (<= total_score2 (* 10 (- letter_index2 (to_rep2 (first (rt word)))))))
(assert (and (and (=> (<= (to_rep2 (first (rt word))) (to_rep2 (last (rt word)))) (dynamic_property1 (to_rep2 (first (rt word))) (to_rep2 (last (rt word))) letter_index2)) (=> (<= 0 100) (in_range5 total_score2))) (and (<= (to_rep2 (first (rt word))) letter_index2) (<= letter_index2 (to_rep2 (last (rt word)))))))
(assert (not (in_range1 (+ total_score2 (to_rep1 (select lookup_table (to_rep (select (elts word) letter_index2))))))))
(check-sat)
(exit)
