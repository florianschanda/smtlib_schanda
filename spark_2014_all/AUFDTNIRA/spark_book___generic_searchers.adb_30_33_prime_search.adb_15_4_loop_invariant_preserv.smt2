(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index_type 0)
(declare-fun index_typeqtint (index_type) Int)
(assert (forall ((i index_type)) (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index_type index_type) Bool)
(declare-const dummy1 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (element_type element_type) Bool)
(declare-const dummy2 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant ((temp___expr_188 Int) (temp___is_init_184 Bool) (temp___skip_constant_185 Bool) (temp___do_toplevel_186 Bool) (temp___do_typ_inv_187 Bool)) Bool (=> (or (= temp___is_init_184 true) (<= 0 2147483647)) (in_range3 temp___expr_188)))
(declare-sort index_type1 0)
(declare-fun index_typeqtint1 (index_type1) Int)
(assert (forall ((i index_type1)) (and (<= 1 (index_typeqtint1 i)) (<= (index_typeqtint1 i) 10))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index_type1 index_type1) Bool)
(declare-const dummy3 index_type1)
(declare-datatypes () ((index_type__ref1 (mk_index_type__ref1 (index_type__content1 index_type1)))))
(define-fun index_type__ref___2__projection ((a index_type__ref1)) index_type1 (index_type__content1 a))
(define-fun dynamic_invariant1 ((temp___expr_195 Int) (temp___is_init_191 Bool) (temp___skip_constant_192 Bool) (temp___do_toplevel_193 Bool) (temp___do_typ_inv_194 Bool)) Bool (=> (or (= temp___is_init_191 true) (<= 1 10)) (in_range4 temp___expr_195)))
(declare-const search_item Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const items (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant3 ((temp___expr_171 Int) (temp___is_init_167 Bool) (temp___skip_constant_168 Bool) (temp___do_toplevel_169 Bool) (temp___do_typ_inv_170 Bool)) Bool (=> (or (= temp___is_init_167 true) (<= 1 10)) (in_range2 temp___expr_171)))
(declare-const found Bool)
(declare-const result__ Int)
(declare-const low_index Int)
(declare-const mid_index Int)
(declare-const high_index Int)
(declare-const o Int)
(declare-const o1 natural)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const result Int)
(declare-const low_index1 Int)
(declare-const result1 Int)
(declare-const high_index1 Int)
(declare-const result2 Bool)
(declare-const found1 Bool)
(declare-const result3 Int)
(declare-const result__1 Int)
(declare-const result4 Int)
(declare-const mid_index1 Int)
(declare-const found2 Bool)
(declare-const result__2 Int)
(declare-const found3 Bool)
(declare-const result__3 Int)
(declare-const low_index2 Int)
(declare-const mid_index2 Int)
(declare-const high_index2 Int)
(declare-const temp___216 Int)
(declare-const temp___215 Int)
(declare-const result5 Int)
(declare-const temp___2161 Int)
(declare-const result6 Int)
(declare-const temp___2151 Int)
(declare-const result7 Bool)
(declare-const result8 Int)
(declare-const low_index3 Int)
(declare-const result9 Int)
(declare-const high_index3 Int)
(declare-const result10 Int)
(declare-const mid_index3 Int)
(declare-const found4 Bool)
(declare-const result__4 Int)
(assert (in_range3 search_item))
(assert (=> (<= 1 10) (in_range4 result__)))
(assert (forall ((j Int)) (=> (and (<= 1 j) (<= j 10)) (forall ((k Int)) (=> (and (<= (+ j 1) k) (<= k 10)) (< (to_rep (select items j)) (to_rep (select items k))))))))
(assert (= (mk_int__ref result) (mk_int__ref low_index)))
(assert (= low_index1 1))
(assert (in_range4 low_index1))
(assert (=> (<= 1 10) (in_range4 mid_index)))
(assert (= (mk_int__ref result1) (mk_int__ref high_index)))
(assert (= high_index1 10))
(assert (in_range4 high_index1))
(assert (= (mk_bool__ref result2) (mk_bool__ref found)))
(assert (= found1 (distinct 0 0)))
(assert (= (mk_int__ref result3) (mk_int__ref result__)))
(assert (= result__1 1))
(assert (not (not (not (< search_item (to_rep (select items low_index1)))))))
(assert (not (< (to_rep (select items high_index1)) search_item)))
(assert (= (mk_int__ref result4) (mk_int__ref mid_index)))
(assert (= mid_index1 (div1 (+ low_index1 high_index1) 2)))
(assert (not (= search_item (to_rep (select items mid_index1)))))
(assert (= result__2 result__1))
(assert (= found2 found1))
(assert (not (= low_index1 high_index1)))
(assert (not (= found3 true)))
(assert (and (<= low_index2 mid_index2) (< mid_index2 high_index2)))
(assert (or (< (to_rep (select items low_index2)) search_item) (= (to_rep (select items low_index2)) search_item)))
(assert (or (< search_item (to_rep (select items high_index2))) (= search_item (to_rep (select items high_index2)))))
(assert (and (and (and (=> (<= 1 10) (in_range4 result__3)) (=> (<= 1 10) (in_range4 low_index2))) (=> (<= 1 10) (in_range4 mid_index2))) (=> (<= 1 10) (in_range4 high_index2))))
(assert (= temp___216 result5))
(assert (= temp___2161 low_index2))
(assert (= temp___215 result6))
(assert (= temp___2151 high_index2))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (and (<= 1 (+ mid_index2 1)) (<= (+ mid_index2 1) 10))))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (= o (+ mid_index2 1))))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (= o1 (select items o))))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (= o2 (to_rep o1))))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (= result7 (ite (< search_item o2) true false))))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (not (= result7 true))))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (and (= o3 (+ mid_index2 1)) (in_range4 (+ mid_index2 1)))))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (= low_index2 result8)))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (= low_index3 o3)))
(assert (=> (< (to_rep (select items mid_index2)) search_item) (= high_index3 high_index2)))
(assert (=> (not (< (to_rep (select items mid_index2)) search_item)) (= high_index2 result9)))
(assert (=> (not (< (to_rep (select items mid_index2)) search_item)) (= high_index3 mid_index2)))
(assert (=> (not (< (to_rep (select items mid_index2)) search_item)) (= low_index3 low_index2)))
(assert (= mid_index2 result10))
(assert (= mid_index3 (div1 (+ low_index3 high_index3) 2)))
(assert (not (= search_item (to_rep (select items mid_index3)))))
(assert (= result__4 result__3))
(assert (= found4 found3))
(assert (not (= low_index3 high_index3)))
(assert (not (not (= found4 true))))
(check-sat)
(exit)
