(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,integer) farray

logic dummy3 : t

type integer_array__ref = { integer_array__content : us_t
}

function integer_array__ref___projection(a: integer_array__ref) : us_t =
  (a).integer_array__content

logic dummy4 : (int,integer) farray

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,integer) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,integer) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq4((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,(int,integer) farray) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,(int,integer) farray) farray = (a).elts1

function of_array1(a: (int,(int,integer) farray) farray, f: int,
  l: int) : us_t1 = { elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,(int,integer) farray) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,(int,integer) farray) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,(int,integer) farray) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,(int,integer) farray) farray.
  (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__alignment2(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy5 : (int,(int,integer) farray) farray

logic dummy6 : t1

type integer_product_type__ref = { integer_product_type__content : us_t1
}

function integer_product_type__ref___projection(a: integer_product_type__ref) : us_t1 =
  (a).integer_product_type__content

logic in_array__2 : (int,integer) farray, us_t1 -> bool

logic in_array__2__function_guard : bool, (int,integer) farray, us_t1 -> prop

type tpair_typeD1

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : tpair_typeD1, tpair_typeD1 -> bool

logic dummy7 : tpair_typeD1

type tpair_typeD1__ref = { tpair_typeD1__content : tpair_typeD1
}

function tpair_typeD1__ref___projection(a: tpair_typeD1__ref) : tpair_typeD1 =
  (a).tpair_typeD1__content

axiom in_array__2__post_axiom : true

axiom in_array__2__def_axiom :
  (forall element:(int,integer) farray.
  (forall arr:(int,(int,integer) farray) farray. forall arr1:t1
  [in_array__2(element, { elts1 = arr; rt1 = arr1 })]. ((in_array__2(element,
  { elts1 = arr; rt1 = arr1 }) = true) <->
  (exists i:int. (((to_rep(first2(arr1)) <= i) and
  (i <= to_rep(last2(arr1)))) and (bool_eq4((arr[i]), 1, 2, element, 1,
  2) = true))))))

logic array1 : (int,integer) farray

logic array11 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic array2 : (int,integer) farray

logic array21 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic result_length : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type tTresultSP1__ref = { tTresultSP1__content : integer
}

function tTresultSP1__ref___projection(a: tTresultSP1__ref) : integer =
  (a).tTresultSP1__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,(int,integer) farray) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,(int,integer) farray) farray = (a).elts2

function of_array2(a: (int,(int,integer) farray) farray, f: int,
  l: int) : us_t2 = { elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,(int,integer) farray) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,(int,integer) farray) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,(int,integer) farray) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,(int,integer) farray) farray.
  (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq6((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,(int,integer) farray) farray

logic dummy10 : t2

type tresultS__ref = { tresultS__content : us_t2
}

function tresultS__ref___projection(a: tresultS__ref) : us_t2 =
  (a).tresultS__content

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy11 : integer

type t5b__ref = { t5b__content : integer
}

function t5b__ref___projection(a: t5b__ref) : integer = (a).t5b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first6(mk3(f, l))) = f) and (to_rep(last6(mk3(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,(int,integer) farray) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,(int,integer) farray) farray = (a).elts3

function of_array3(a: (int,(int,integer) farray) farray, f: int,
  l: int) : us_t3 = { elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep(first6((a).rt3))

function last7(a: us_t3) : int = to_rep(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,(int,integer) farray) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,(int,integer) farray) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,(int,integer) farray) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,(int,integer) farray) farray.
  (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__alignment4(a)))

function bool_eq12(x: us_t3, y: us_t3) : bool = bool_eq6((x).elts3,
  to_rep(first6((x).rt3)), to_rep(last6((x).rt3)), (y).elts3,
  to_rep(first6((y).rt3)), to_rep(last6((y).rt3)))

logic user_eq9 : us_t3, us_t3 -> bool

logic dummy12 : (int,(int,integer) farray) farray

logic dummy13 : t3

type t6b__ref = { t6b__content : us_t3
}

function t6b__ref___projection(a: t6b__ref) : us_t3 = (a).t6b__content

logic result____first : integer

logic result____last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy14 : integer

type t7b__ref = { t7b__content : integer
}

function t7b__ref___projection(a: t7b__ref) : integer = (a).t7b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy15 : integer

type t8b__ref = { t8b__content : integer
}

function t8b__ref___projection(a: t8b__ref) : integer = (a).t8b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic temp___198 : int, int -> (int,integer) farray

logic cartesian__cartesian_product__result__aggregate_def : (int,integer) farray,
  int, int -> us_t3

logic temp___257 : int, int -> (int,integer) farray

logic temp___265 : int, int -> (int,integer) farray

axiom result_length__def_axiom : (result_length = (length({ elts = array1;
  rt = array11 }) * length({ elts = array2; rt = array21 })))

axiom def_axiom :
  (forall temp___253:(int,integer) farray.
  (forall temp___254:int. forall temp___255:int. ((dynamic_property1(0,
  2147483647, temp___254, temp___255) ->
  ((to_rep(first6((cartesian__cartesian_product__result__aggregate_def(temp___253,
  temp___254, temp___255)).rt3)) = temp___254) and
  (to_rep(last6((cartesian__cartesian_product__result__aggregate_def(temp___253,
  temp___254, temp___255)).rt3)) = temp___255))) and
  (forall temp___256:int.
  (((cartesian__cartesian_product__result__aggregate_def(temp___253,
  temp___254, temp___255)).elts3[temp___256]) = temp___253)))))

axiom def_axiom1 :
  (forall temp___259:int. forall temp___260:int. ((in_range1(temp___259) and
  in_range1(temp___260)) -> ((to_rep((temp___257(temp___259,
  temp___260)[1])) = temp___259) and (to_rep((temp___257(temp___259,
  temp___260)[2])) = temp___260))))

axiom def_axiom2 :
  (forall temp___267:int. forall temp___268:int. ((in_range1(temp___267) and
  in_range1(temp___268)) -> ((to_rep((temp___265(temp___267,
  temp___268)[1])) = temp___267) and (to_rep((temp___265(temp___267,
  temp___268)[2])) = temp___268))))

axiom def_axiom3 :
  (forall temp___200:int. forall temp___201:int. ((in_range1(temp___200) and
  in_range1(temp___201)) -> ((to_rep((temp___198(temp___200,
  temp___201)[1])) = temp___200) and (to_rep((temp___198(temp___200,
  temp___201)[2])) = temp___201))))

 (* File "cartesian.ads", line 17, characters 0-0 *)
goal WP_parameter_def :
  (forall result__:(int,(int,integer) farray) farray.
  forall result_index:int. forall index1:int. forall index2:int.
  forall o:int. forall o1:int. forall o2:int. forall o3:int.
  forall cartesian__cartesian_product__result_length__assume:int.
  forall temp___263:(int,(int,integer) farray) farray. forall temp___2631:t3.
  forall cartesian__cartesian_product__result__assume:(int,(int,integer) farray) farray.
  forall cartesian__cartesian_product__result__assume1:t2. forall o4:int.
  forall o5:int. forall o6:(int,(int,integer) farray) farray.
  forall result:(int,(int,integer) farray) farray.
  forall result__1:(int,(int,integer) farray) farray. forall result1:int.
  forall result_index1:int. forall result2:int. forall index11:int.
  forall result3:int. forall index21:int. forall result4:int.
  forall result_index2:int. forall result5:(int,(int,integer) farray) farray.
  forall result__2:(int,(int,integer) farray) farray.
  forall result__3:(int,(int,integer) farray) farray.
  forall result_index3:int. forall index22:int. (dynamic_property(0,
  2147483647, to_rep(first(array11)), to_rep(last(array11))) ->
  (dynamic_property(0, 2147483647, to_rep(first(array21)),
  to_rep(last(array21))) -> (((length({ elts = array1; rt = array11
  }) <  255) and (length({ elts = array2; rt = array21 }) <  255)) ->
  (((((((o = length({ elts = array2; rt = array21 })) and in_range1(length({
  elts = array2; rt = array21 }))) and (((o1 = length({ elts = array1; rt =
  array11 })) and in_range1(length({ elts = array1; rt = array11 }))) and
  (o2 = (o1 * o)))) and ((o3 = o2) and in_range1(o2))) and
  ((cartesian__cartesian_product__result_length__assume = o3) and
  in_range2(o3))) and
  (cartesian__cartesian_product__result_length__assume = result_length)) ->
  (in_range2(result_length) ->
  (((((to_rep(first6((cartesian__cartesian_product__result__aggregate_def(temp___257(0,
  0), 1, result_length)).rt3)) = 1) and
  ((to_rep(last6((cartesian__cartesian_product__result__aggregate_def(temp___257(0,
  0), 1, result_length)).rt3)) = result_length) and ({ elts3 = temp___263;
  rt3 = temp___2631
  } = cartesian__cartesian_product__result__aggregate_def(temp___257(0, 0),
  1, result_length)))) and
  ((((to_rep(first6(temp___2631)) <= to_rep(last6(temp___2631))) and
  (((1 <= result_length) and
  (((to_rep(last6(temp___2631)) - to_rep(first6(temp___2631))) + 1) = ((result_length - 1) + 1))) or
  ((not (1 <= result_length)) and
  (((to_rep(last6(temp___2631)) - to_rep(first6(temp___2631))) + 1) = 0)))) or
  ((not (to_rep(first6(temp___2631)) <= to_rep(last6(temp___2631)))) and
  (((1 <= result_length) and (0 = ((result_length - 1) + 1))) or
  (not (1 <= result_length))))) and
  ((temp___263 = cartesian__cartesian_product__result__assume) and
  (mk2(to_rep(first6(temp___2631)),
  to_rep(last6(temp___2631))) = cartesian__cartesian_product__result__assume1)))) and
  ((({ map__content1 = result } = { map__content1 = result__ }) and
  (result__1 = cartesian__cartesian_product__result__assume)) and
  ((to_rep(result____first) = to_rep(first4(cartesian__cartesian_product__result__assume1))) and
  (to_rep(result____last) = to_rep(last4(cartesian__cartesian_product__result__assume1)))))) ->
  ((dynamic_property3(1, result_length, to_rep(result____first),
  to_rep(result____last)) and ((to_rep(result____first) = 1) and
  (to_rep(result____last) = result_length))) -> ((({ int__content = result1
  } = { int__content = result_index }) and (result_index1 = 0)) ->
  (in_range2(result_index1) -> ((({ int__content = result2 } = {
  int__content = index1 }) and (index11 = to_rep(first(array11)))) ->
  (((to_rep(first(array11)) <= index11) and
  (index11 <= to_rep(last(array11)))) -> ((({ int__content = result3 } = {
  int__content = index2 }) and (index21 = to_rep(first(array21)))) ->
  (((to_rep(first(array21)) <= index21) and
  (index21 <= to_rep(last(array21)))) -> ((((o4 = (result_index1 + 1)) and
  in_range1((result_index1 + 1))) and ((result_index1 = result4) and
  (result_index2 = o4))) ->
  ((((((to_rep(result____first) <= result_index2) and
  (result_index2 <= to_rep(result____last))) and (o5 = result_index2)) and
  (o6 = (result__1[o5 <- temp___265(to_rep((array1[index11])),
  to_rep((array2[index21])))]))) and ((result__1 = result5) and
  (result__2 = o6))) ->
  (((result_index3 = ((((index11 - to_rep(first(array11))) * length({ elts =
  array2; rt = array21 })) + (index22 - to_rep(first(array21)))) + 1)) and
  ((forall j:int. (((to_rep(first(array21)) <= j) and (j <= index22)) ->
   (to_rep(((result__3[((((index11 - to_rep(first(array11))) * length({
   elts = array2; rt = array21
   })) + (j - to_rep(first(array21)))) + 1)])[1])) = to_rep((array1[index11]))))) and
  (forall j:int. (((to_rep(first(array21)) <= j) and (j <= index22)) ->
  (to_rep(((result__3[((((index11 - to_rep(first(array11))) * length({ elts =
  array2; rt = array21
  })) + (j - to_rep(first(array21)))) + 1)])[2])) = to_rep((array2[j]))))))) ->
  (((((0 <= 2147483647) -> in_range2(result_index3)) and
  ((to_rep(first(array21)) <= to_rep(last(array21))) ->
  dynamic_property7(to_rep(first(array21)), to_rep(last(array21)),
  index22))) and ((to_rep(first(array21)) <= index22) and
  (index22 <= to_rep(last(array21))))) ->
  in_range1((index22 - to_rep(first(array21))))))))))))))))))))))
