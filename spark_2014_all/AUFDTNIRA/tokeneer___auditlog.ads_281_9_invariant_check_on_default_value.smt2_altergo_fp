(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic nullfile : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

type statust

predicate in_range(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq1 : statust, statust -> bool

logic dummy1 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type logfileindext

predicate in_range1(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : logfileindext, logfileindext -> bool

logic dummy2 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep : logfileindext -> int

logic of_rep : int -> logfileindext

axiom inversion_axiom :
  (forall x:logfileindext [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:logfileindext [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type logentrycountt

predicate in_range2(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : logentrycountt, logentrycountt -> bool

logic dummy3 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep1 : logentrycountt -> int

logic of_rep1 : int -> logentrycountt

axiom inversion_axiom1 :
  (forall x:logentrycountt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:logentrycountt [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type logfilecountt

predicate in_range3(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : logfilecountt, logfilecountt -> bool

logic dummy4 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep2 : logfilecountt -> int

logic of_rep2 : int -> logfilecountt

axiom inversion_axiom2 :
  (forall x:logfilecountt [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:logfilecountt [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,logfileindext) farray
}

logic slide : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq :
  (forall a:(int,logfileindext) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> (int,logfileindext) farray

axiom concat_def :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : logfileindext, int -> (int,logfileindext) farray

axiom singleton_def :
  (forall v:logfileindext.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_150:int. ((((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) and
  (to_rep((a[temp___idx_150])) = to_rep((b[((b__first - a__first) + temp___idx_150)])))) or
  (not ((a__first <= temp___idx_150) and (temp___idx_150 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_150:int. (((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) ->
  (to_rep((a[temp___idx_150])) = to_rep((b[((b__first - a__first) + temp___idx_150)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_150:int. (((a__first <= temp___idx_150) and
  (temp___idx_150 <= a__last)) ->
  (to_rep((a[temp___idx_150])) = to_rep((b[((b__first - a__first) + temp___idx_150)])))))))))

logic compare : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy5 : (int,logfileindext) farray

logic value__size1 : int

logic object__size1 : (int,logfileindext) farray -> int

logic value__component__size : int

logic object__component__size : (int,logfileindext) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,logfileindext) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment1(a)))

logic user_eq5 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type us_split_fields = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__2__projection(a: us_split_fields) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___8__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  ((((((bool_eq6(((a).us_split_fields1).rec__auditlog__logfilelistt__list, 1,
  17, ((b).us_split_fields1).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep(((a).us_split_fields1).rec__auditlog__logfilelistt__head) = to_rep(((b).us_split_fields1).rec__auditlog__logfilelistt__head))) and
  (to_rep(((a).us_split_fields1).rec__auditlog__logfilelistt__lasti) = to_rep(((b).us_split_fields1).rec__auditlog__logfilelistt__lasti))) and
  (to_rep2(((a).us_split_fields1).rec__auditlog__logfilelistt__length) = to_rep2(((b).us_split_fields1).rec__auditlog__logfilelistt__length))) ->
  (bool_eq7(a, b) = true)) and
  ((not ((((bool_eq6(((a).us_split_fields1).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields1).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep(((a).us_split_fields1).rec__auditlog__logfilelistt__head) = to_rep(((b).us_split_fields1).rec__auditlog__logfilelistt__head))) and
  (to_rep(((a).us_split_fields1).rec__auditlog__logfilelistt__lasti) = to_rep(((b).us_split_fields1).rec__auditlog__logfilelistt__lasti))) and
  (to_rep2(((a).us_split_fields1).rec__auditlog__logfilelistt__length) = to_rep2(((b).us_split_fields1).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq7(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size2({
  us_split_fields1 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment2({ us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : (int,logfileindext) farray

logic dummy7 : logfileindext

logic dummy8 : logfileindext

logic dummy9 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep1
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep1 =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range4(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : fileentrycountt, fileentrycountt -> bool

logic dummy10 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep3 : fileentrycountt -> int

logic of_rep3 : int -> fileentrycountt

axiom inversion_axiom3 :
  (forall x:fileentrycountt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:fileentrycountt [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,fileentrycountt) farray
}

logic slide1 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq1 :
  (forall a:(int,fileentrycountt) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> (int,fileentrycountt) farray

axiom concat_def1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : fileentrycountt, int -> (int,fileentrycountt) farray

axiom singleton_def1 :
  (forall v:fileentrycountt.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq9 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq9(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep3((a[temp___idx_151])) = to_rep3((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep3((a[temp___idx_151])) = to_rep3((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep3((a[temp___idx_151])) = to_rep3((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare1 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq9(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq9(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep3((a[(i + 1)])) <  to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq9(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep3((b[(i + 1)])) <  to_rep3((a[(j + 1)]))))))))))))

logic dummy11 : (int,fileentrycountt) farray

logic value__size3 : int

logic object__size3 : (int,fileentrycountt) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,fileentrycountt) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,fileentrycountt) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment3(a)))

logic user_eq8 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields2 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep1;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields2) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields2) : us_rep1 =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields2) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___9__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  ((((((to_rep(((a).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile) = to_rep(((b).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep1(((a).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries) = to_rep1(((b).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq7(((a).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq9(((a).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq10(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile) = to_rep(((b).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep1(((a).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries) = to_rep1(((b).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq7(((a).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq9(((a).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq10(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size4({
  us_split_fields3 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment4({
  us_split_fields3 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy12 : logfileindext

logic dummy13 : logentrycountt

logic dummy14 : (int,logfileindext) farray

logic dummy15 : logfileindext

logic dummy16 : logfileindext

logic dummy17 : logfilecountt

logic dummy18 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep2
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep2 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep1,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep1,
  (int,fileentrycountt) farray -> prop

logic temp___1076 : int -> (int,logfileindext) farray

axiom def_axiom :
  (forall temp___1078:int.
  (forall temp___1079:int.
  ((temp___1076(temp___1078)[temp___1079]) = of_rep(temp___1078))))

logic temp___1080 : int -> (int,fileentrycountt) farray

axiom def_axiom1 :
  (forall temp___1082:int.
  (forall temp___1083:int.
  ((temp___1080(temp___1082)[temp___1083]) = of_rep3(temp___1082))))

type map__ref2 = { map__content2 : (int,us_rep) farray
}

logic slide2 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq2 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : us_rep, int -> (int,us_rep) farray

axiom singleton_def2 :
  (forall v:us_rep.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq11 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def9 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and (bool_eq((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true)) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true))))) -> (bool_eq11(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq((a[temp___idx_152]),
  (b[((b__first - a__first) + temp___idx_152)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type filestatust

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq10 : filestatust, filestatust -> bool

logic dummy19 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep4 : filestatust -> int

logic of_rep4 : int -> filestatust

axiom inversion_axiom4 :
  (forall x:filestatust [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:filestatust [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref3 = { map__content3 : (int,filestatust) farray
}

logic slide3 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq3 :
  (forall a:(int,filestatust) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,filestatust) farray, int, int, (int,filestatust) farray,
  int, int -> (int,filestatust) farray

axiom concat_def3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : filestatust, int -> (int,filestatust) farray

axiom singleton_def3 :
  (forall v:filestatust.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq13 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def11 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_153:int. ((((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) and
  (to_rep4((a[temp___idx_153])) = to_rep4((b[((b__first - a__first) + temp___idx_153)])))) or
  (not ((a__first <= temp___idx_153) and (temp___idx_153 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep4((a[temp___idx_153])) = to_rep4((b[((b__first - a__first) + temp___idx_153)]))))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep4((a[temp___idx_153])) = to_rep4((b[((b__first - a__first) + temp___idx_153)])))))))))

logic compare2 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> int

axiom compare_def_eq2 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq13(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt2 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq13(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep4((a[(i + 1)])) <  to_rep4((b[(j + 1)]))))))))))))

axiom compare_def_gt2 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare2(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq13(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep4((b[(i + 1)])) <  to_rep4((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type character

predicate in_range6(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq11 : character, character -> bool

logic dummy20 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep5 : character -> int

logic of_rep5 : int -> character

axiom inversion_axiom5 :
  (forall x:character [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:character [to_rep5(x)]. in_range6(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range6(x) ->
  (to_rep5(of_rep5(x)) = x)))

type map__ref4 = { map__content4 : (int,character) farray
}

logic slide4 : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq4 :
  (forall a:(int,character) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> (int,character) farray

axiom concat_def4 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : character, int -> (int,character) farray

axiom singleton_def4 :
  (forall v:character.
  (forall i:int [(singleton4(v, i)[i])]. ((singleton4(v, i)[i]) = v)))

logic bool_eq15 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def13 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq15(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep5((a[temp___idx_78])) = to_rep5((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep5((a[temp___idx_78])) = to_rep5((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep5((a[temp___idx_78])) = to_rep5((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare3 : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq15(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq15(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep5((a[(i + 1)])) <  to_rep5((b[(j + 1)]))))))))))))

axiom compare_def_gt3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare3(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq15(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep5((b[(i + 1)])) <  to_rep5((a[(j + 1)]))))))))))))

logic dummy21 : (int,character) farray

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

logic user_eq12 : (int,character) farray, (int,character) farray -> bool

type map__ref5 = { map__content5 : (int,(int,character) farray) farray
}

logic slide5 : (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom slide_eq5 :
  (forall a:(int,(int,character) farray) farray.
  (forall first:int [slide5(a, first, first)]. (slide5(a, first, first) = a)))

axiom slide_def5 :
  (forall a:(int,(int,character) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide5(a, old_first, new_first)[i])]. ((slide5(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat5 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom concat_def5 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat5(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat5(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat5(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton5 : (int,character) farray,
  int -> (int,(int,character) farray) farray

axiom singleton_def5 :
  (forall v:(int,character) farray.
  (forall i:int [(singleton5(v, i)[i])]. ((singleton5(v, i)[i]) = v)))

logic bool_eq16 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int, int -> bool

axiom bool_eq_def14 :
  (forall a:(int,(int,character) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,character) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq16(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq15((a[temp___idx_154]), 1, 16,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 16) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq15((a[temp___idx_154]), 1, 16,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 16) = true))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev5 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq15((a[temp___idx_154]), 1, 16,
  (b[((b__first - a__first) + temp___idx_154)]), 1, 16) = true)))))))

logic emptylist : (int,logfileindext) farray

logic emptylist1 : logfileindext

logic emptylist2 : logfileindext

logic emptylist3 : logfilecountt

logic attr__ATTRIBUTE_ADDRESS5 : int

logic temp___155 : int -> (int,logfileindext) farray

axiom def_axiom2 :
  (forall temp___157:int.
  (forall temp___158:int.
  ((temp___155(temp___157)[temp___158]) = of_rep(temp___157))))

logic logdirectory : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS6 : int

logic temp___String_Literal_159 : unit -> (int,character) farray

axiom temp___String_Literal_159__def_axiom :
  (((to_rep5((temp___String_Literal_159(void)[1])) = 76) and
  (to_rep5((temp___String_Literal_159(void)[2])) = 111)) and
  (to_rep5((temp___String_Literal_159(void)[3])) = 103))

logic archivefilename : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS7 : int

logic temp___String_Literal_160 : unit -> (int,character) farray

axiom temp___String_Literal_160__def_axiom :
  (((((((((((((((((to_rep5((temp___String_Literal_160(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_160(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_160(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_160(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_160(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_160(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_160(void)[7])) = 97)) and
  (to_rep5((temp___String_Literal_160(void)[8])) = 114)) and
  (to_rep5((temp___String_Literal_160(void)[9])) = 99)) and
  (to_rep5((temp___String_Literal_160(void)[10])) = 104)) and
  (to_rep5((temp___String_Literal_160(void)[11])) = 105)) and
  (to_rep5((temp___String_Literal_160(void)[12])) = 118)) and
  (to_rep5((temp___String_Literal_160(void)[13])) = 101)) and
  (to_rep5((temp___String_Literal_160(void)[14])) = 46)) and
  (to_rep5((temp___String_Literal_160(void)[15])) = 108)) and
  (to_rep5((temp___String_Literal_160(void)[16])) = 111)) and
  (to_rep5((temp___String_Literal_160(void)[17])) = 103))

logic noelement : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS8 : int

logic auditlog__noelement__aggregate_def : int -> (int,character) farray

axiom def_axiom3 :
  (forall temp___162:int.
  (forall temp___163:int.
  ((auditlog__noelement__aggregate_def(temp___162)[temp___163]) = of_rep5(temp___162))))

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields1 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields1 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep2(usedlogfiles3)) and
  (numberlogentries = (((to_rep2(usedlogfiles3) - 1) * 1024) + to_rep3((logfileentries[currentlogfile])))))))))

logic logfilenames : (int,(int,character) farray) farray

logic attr__ATTRIBUTE_ADDRESS9 : int

logic auditlog__logfilenames__aggregate_def : (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray, (int,character) farray, (int,character) farray,
  (int,character) farray -> (int,(int,character) farray) farray

axiom def_axiom4 :
  (forall temp___165:(int,character) farray.
  forall temp___166:(int,character) farray.
  forall temp___167:(int,character) farray.
  forall temp___168:(int,character) farray.
  forall temp___169:(int,character) farray.
  forall temp___170:(int,character) farray.
  forall temp___171:(int,character) farray.
  forall temp___172:(int,character) farray.
  forall temp___173:(int,character) farray.
  forall temp___174:(int,character) farray.
  forall temp___175:(int,character) farray.
  forall temp___176:(int,character) farray.
  forall temp___177:(int,character) farray.
  forall temp___178:(int,character) farray.
  forall temp___179:(int,character) farray.
  forall temp___180:(int,character) farray.
  forall temp___181:(int,character) farray.
  ((((((((((((((((((auditlog__logfilenames__aggregate_def(temp___165,
  temp___166, temp___167, temp___168, temp___169, temp___170, temp___171,
  temp___172, temp___173, temp___174, temp___175, temp___176, temp___177,
  temp___178, temp___179, temp___180, temp___181)[1]) = temp___165) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[2]) = temp___166)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[3]) = temp___167)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[4]) = temp___168)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[5]) = temp___169)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[6]) = temp___170)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[7]) = temp___171)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[8]) = temp___172)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[9]) = temp___173)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[10]) = temp___174)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[11]) = temp___175)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[12]) = temp___176)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[13]) = temp___177)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[14]) = temp___178)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[15]) = temp___179)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[16]) = temp___180)) and
  ((auditlog__logfilenames__aggregate_def(temp___165, temp___166, temp___167,
  temp___168, temp___169, temp___170, temp___171, temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181)[17]) = temp___181)))

logic temp___String_Literal_183 : unit -> (int,character) farray

axiom temp___String_Literal_183__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_183(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_183(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_183(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_183(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_183(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_183(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_183(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_183(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_183(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_183(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_183(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_183(void)[12])) = 49)) and
  (to_rep5((temp___String_Literal_183(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_183(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_183(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_183(void)[16])) = 103))

logic temp___String_Literal_184 : unit -> (int,character) farray

axiom temp___String_Literal_184__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_184(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_184(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_184(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_184(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_184(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_184(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_184(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_184(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_184(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_184(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_184(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_184(void)[12])) = 50)) and
  (to_rep5((temp___String_Literal_184(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_184(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_184(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_184(void)[16])) = 103))

logic temp___String_Literal_185 : unit -> (int,character) farray

axiom temp___String_Literal_185__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_185(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_185(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_185(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_185(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_185(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_185(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_185(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_185(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_185(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_185(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_185(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_185(void)[12])) = 51)) and
  (to_rep5((temp___String_Literal_185(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_185(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_185(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_185(void)[16])) = 103))

logic temp___String_Literal_186 : unit -> (int,character) farray

axiom temp___String_Literal_186__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_186(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_186(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_186(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_186(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_186(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_186(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_186(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_186(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_186(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_186(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_186(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_186(void)[12])) = 52)) and
  (to_rep5((temp___String_Literal_186(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_186(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_186(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_186(void)[16])) = 103))

logic temp___String_Literal_187 : unit -> (int,character) farray

axiom temp___String_Literal_187__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_187(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_187(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_187(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_187(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_187(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_187(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_187(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_187(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_187(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_187(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_187(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_187(void)[12])) = 53)) and
  (to_rep5((temp___String_Literal_187(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_187(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_187(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_187(void)[16])) = 103))

logic temp___String_Literal_188 : unit -> (int,character) farray

axiom temp___String_Literal_188__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_188(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_188(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_188(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_188(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_188(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_188(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_188(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_188(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_188(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_188(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_188(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_188(void)[12])) = 54)) and
  (to_rep5((temp___String_Literal_188(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_188(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_188(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_188(void)[16])) = 103))

logic temp___String_Literal_189 : unit -> (int,character) farray

axiom temp___String_Literal_189__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_189(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_189(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_189(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_189(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_189(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_189(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_189(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_189(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_189(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_189(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_189(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_189(void)[12])) = 55)) and
  (to_rep5((temp___String_Literal_189(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_189(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_189(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_189(void)[16])) = 103))

logic temp___String_Literal_190 : unit -> (int,character) farray

axiom temp___String_Literal_190__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_190(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_190(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_190(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_190(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_190(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_190(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_190(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_190(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_190(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_190(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_190(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_190(void)[12])) = 56)) and
  (to_rep5((temp___String_Literal_190(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_190(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_190(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_190(void)[16])) = 103))

logic temp___String_Literal_191 : unit -> (int,character) farray

axiom temp___String_Literal_191__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_191(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_191(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_191(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_191(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_191(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_191(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_191(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_191(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_191(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_191(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_191(void)[11])) = 48)) and
  (to_rep5((temp___String_Literal_191(void)[12])) = 57)) and
  (to_rep5((temp___String_Literal_191(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_191(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_191(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_191(void)[16])) = 103))

logic temp___String_Literal_192 : unit -> (int,character) farray

axiom temp___String_Literal_192__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_192(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_192(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_192(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_192(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_192(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_192(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_192(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_192(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_192(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_192(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_192(void)[11])) = 49)) and
  (to_rep5((temp___String_Literal_192(void)[12])) = 48)) and
  (to_rep5((temp___String_Literal_192(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_192(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_192(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_192(void)[16])) = 103))

logic temp___String_Literal_193 : unit -> (int,character) farray

axiom temp___String_Literal_193__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_193(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_193(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_193(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_193(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_193(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_193(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_193(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_193(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_193(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_193(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_193(void)[11])) = 49)) and
  (to_rep5((temp___String_Literal_193(void)[12])) = 49)) and
  (to_rep5((temp___String_Literal_193(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_193(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_193(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_193(void)[16])) = 103))

logic temp___String_Literal_194 : unit -> (int,character) farray

axiom temp___String_Literal_194__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_194(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_194(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_194(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_194(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_194(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_194(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_194(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_194(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_194(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_194(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_194(void)[11])) = 49)) and
  (to_rep5((temp___String_Literal_194(void)[12])) = 50)) and
  (to_rep5((temp___String_Literal_194(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_194(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_194(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_194(void)[16])) = 103))

logic temp___String_Literal_195 : unit -> (int,character) farray

axiom temp___String_Literal_195__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_195(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_195(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_195(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_195(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_195(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_195(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_195(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_195(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_195(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_195(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_195(void)[11])) = 49)) and
  (to_rep5((temp___String_Literal_195(void)[12])) = 51)) and
  (to_rep5((temp___String_Literal_195(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_195(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_195(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_195(void)[16])) = 103))

logic temp___String_Literal_196 : unit -> (int,character) farray

axiom temp___String_Literal_196__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_196(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_196(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_196(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_196(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_196(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_196(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_196(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_196(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_196(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_196(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_196(void)[11])) = 49)) and
  (to_rep5((temp___String_Literal_196(void)[12])) = 52)) and
  (to_rep5((temp___String_Literal_196(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_196(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_196(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_196(void)[16])) = 103))

logic temp___String_Literal_197 : unit -> (int,character) farray

axiom temp___String_Literal_197__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_197(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_197(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_197(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_197(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_197(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_197(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_197(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_197(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_197(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_197(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_197(void)[11])) = 49)) and
  (to_rep5((temp___String_Literal_197(void)[12])) = 53)) and
  (to_rep5((temp___String_Literal_197(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_197(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_197(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_197(void)[16])) = 103))

logic temp___String_Literal_198 : unit -> (int,character) farray

axiom temp___String_Literal_198__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_198(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_198(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_198(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_198(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_198(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_198(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_198(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_198(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_198(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_198(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_198(void)[11])) = 49)) and
  (to_rep5((temp___String_Literal_198(void)[12])) = 54)) and
  (to_rep5((temp___String_Literal_198(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_198(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_198(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_198(void)[16])) = 103))

logic temp___String_Literal_199 : unit -> (int,character) farray

axiom temp___String_Literal_199__def_axiom :
  ((((((((((((((((to_rep5((temp___String_Literal_199(void)[1])) = 46) and
  (to_rep5((temp___String_Literal_199(void)[2])) = 47)) and
  (to_rep5((temp___String_Literal_199(void)[3])) = 76)) and
  (to_rep5((temp___String_Literal_199(void)[4])) = 111)) and
  (to_rep5((temp___String_Literal_199(void)[5])) = 103)) and
  (to_rep5((temp___String_Literal_199(void)[6])) = 47)) and
  (to_rep5((temp___String_Literal_199(void)[7])) = 70)) and
  (to_rep5((temp___String_Literal_199(void)[8])) = 105)) and
  (to_rep5((temp___String_Literal_199(void)[9])) = 108)) and
  (to_rep5((temp___String_Literal_199(void)[10])) = 101)) and
  (to_rep5((temp___String_Literal_199(void)[11])) = 49)) and
  (to_rep5((temp___String_Literal_199(void)[12])) = 55)) and
  (to_rep5((temp___String_Literal_199(void)[13])) = 46)) and
  (to_rep5((temp___String_Literal_199(void)[14])) = 108)) and
  (to_rep5((temp___String_Literal_199(void)[15])) = 111)) and
  (to_rep5((temp___String_Literal_199(void)[16])) = 103))

logic auditlog__logfiles__aggregate_def : us_rep -> (int,us_rep) farray

axiom def_axiom5 :
  (forall temp___1327:us_rep.
  (forall temp___1328:int.
  ((auditlog__logfiles__aggregate_def(temp___1327)[temp___1328]) = temp___1327)))

axiom logfilenames__def_axiom :
  (logfilenames = auditlog__logfilenames__aggregate_def(temp___String_Literal_183(void),
  temp___String_Literal_184(void), temp___String_Literal_185(void),
  temp___String_Literal_186(void), temp___String_Literal_187(void),
  temp___String_Literal_188(void), temp___String_Literal_189(void),
  temp___String_Literal_190(void), temp___String_Literal_191(void),
  temp___String_Literal_192(void), temp___String_Literal_193(void),
  temp___String_Literal_194(void), temp___String_Literal_195(void),
  temp___String_Literal_196(void), temp___String_Literal_197(void),
  temp___String_Literal_198(void), temp___String_Literal_199(void)))

axiom emptylist__def_axiom : ((emptylist = temp___155(1)) and
  ((emptylist1 = of_rep(17)) and ((emptylist2 = of_rep(1)) and
  (emptylist3 = of_rep2(0)))))

axiom logdirectory__def_axiom :
  (logdirectory = temp___String_Literal_159(void))

axiom archivefilename__def_axiom :
  (archivefilename = temp___String_Literal_160(void))

axiom noelement__def_axiom :
  (noelement = auditlog__noelement__aggregate_def(32))

logic o : logfilecountt

logic o1 : logfileindext

logic o2 : logfileindext

logic o3 : (int,logfileindext) farray

logic o4 : logfileindext

logic o5 : logfileindext

logic o6 : logfilecountt

logic auditlog__emptylist__assume : (int,logfileindext) farray

logic auditlog__emptylist__assume1 : logfileindext

logic auditlog__emptylist__assume2 : logfileindext

logic auditlog__emptylist__assume3 : logfilecountt

logic temp___1329 : logfileindext

logic temp___13291 : logentrycountt

logic temp___13292 : (int,logfileindext) farray

logic temp___13293 : logfileindext

logic temp___13294 : logfileindext

logic temp___13295 : logfilecountt

logic temp___13296 : (int,fileentrycountt) farray

axiom H : (to_rep2(o) = 0)

axiom H1 : (to_rep(o1) = 1)

axiom H2 : (to_rep(o2) = 17)

axiom H3 : (temp___155(1) = o3)

axiom H4 : (o2 = o4)

axiom H5 : (o1 = o5)

axiom H6 : (o = o6)

axiom H7 : (auditlog__emptylist__assume = o3)

axiom H8 : (auditlog__emptylist__assume1 = o4)

axiom H9 : (auditlog__emptylist__assume2 = o5)

axiom H10 : (auditlog__emptylist__assume3 = o6)

axiom H11 : ((auditlog__emptylist__assume = emptylist) and
  ((auditlog__emptylist__assume1 = emptylist1) and
  ((auditlog__emptylist__assume2 = emptylist2) and
  (auditlog__emptylist__assume3 = emptylist3))))

axiom H12 : (auditlog__noelement__aggregate_def(32) = noelement)

axiom H13 : ((((to_rep(temp___1329) = 1) and (to_rep1(temp___13291) = 0)) and
  ((temp___13292 = temp___1076(1)) and ((temp___13293 = of_rep(1)) and
  ((temp___13294 = of_rep(1)) and (temp___13295 = of_rep2(1)))))) and
  (temp___13296 = temp___1080(0)))

 (* File "auditlog.adb", line 954, characters 0-0 *)
goal WP_parameter_def : (valid_numberlogentries(to_rep(temp___1329),
  to_rep1(temp___13291), { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = temp___13292;
  rec__auditlog__logfilelistt__head = temp___13293;
  rec__auditlog__logfilelistt__lasti = temp___13294;
  rec__auditlog__logfilelistt__length = temp___13295 } },
  temp___13296) = true)
