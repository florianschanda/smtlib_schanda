(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,integer) farray

logic dummy3 : t

type integer_array__ref = { integer_array__content : us_t
}

function integer_array__ref___projection(a: integer_array__ref) : us_t =
  (a).integer_array__content

logic dummy4 : (int,integer) farray

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,integer) farray,
  int -> (int,(int,integer) farray) farray

axiom singleton_def1 :
  (forall v:(int,integer) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq6 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,integer) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,integer) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq4((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq4((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq4((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true)))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,(int,integer) farray) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,(int,integer) farray) farray = (a).elts1

function of_array1(a: (int,(int,integer) farray) farray, f: int,
  l: int) : us_t1 = { elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,(int,integer) farray) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,(int,integer) farray) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,(int,integer) farray) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,(int,integer) farray) farray.
  (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__alignment2(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy5 : (int,(int,integer) farray) farray

logic dummy6 : t1

type integer_product_type__ref = { integer_product_type__content : us_t1
}

function integer_product_type__ref___projection(a: integer_product_type__ref) : us_t1 =
  (a).integer_product_type__content

logic in_array__2 : (int,integer) farray, us_t1 -> bool

logic in_array__2__function_guard : bool, (int,integer) farray, us_t1 -> prop

type tpair_typeD1

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : tpair_typeD1, tpair_typeD1 -> bool

logic dummy7 : tpair_typeD1

type tpair_typeD1__ref = { tpair_typeD1__content : tpair_typeD1
}

function tpair_typeD1__ref___projection(a: tpair_typeD1__ref) : tpair_typeD1 =
  (a).tpair_typeD1__content

axiom in_array__2__post_axiom : true

axiom in_array__2__def_axiom :
  (forall element:(int,integer) farray.
  (forall arr:(int,(int,integer) farray) farray. forall arr1:t1
  [in_array__2(element, { elts1 = arr; rt1 = arr1 })]. ((in_array__2(element,
  { elts1 = arr; rt1 = arr1 }) = true) <->
  (exists i:int. (((to_rep(first2(arr1)) <= i) and
  (i <= to_rep(last2(arr1)))) and (bool_eq4((arr[i]), 1, 2, element, 1,
  2) = true))))))

logic array1 : (int,integer) farray

logic array11 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic array2 : (int,integer) farray

logic array21 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic result_length : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type tTresultSP1__ref = { tTresultSP1__content : integer
}

function tTresultSP1__ref___projection(a: tTresultSP1__ref) : integer =
  (a).tTresultSP1__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,(int,integer) farray) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,(int,integer) farray) farray = (a).elts2

function of_array2(a: (int,(int,integer) farray) farray, f: int,
  l: int) : us_t2 = { elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,(int,integer) farray) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,(int,integer) farray) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,(int,integer) farray) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,(int,integer) farray) farray.
  (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq6((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,(int,integer) farray) farray

logic dummy10 : t2

type tresultS__ref = { tresultS__content : us_t2
}

function tresultS__ref___projection(a: tresultS__ref) : us_t2 =
  (a).tresultS__content

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy11 : integer

type t5b__ref = { t5b__content : integer
}

function t5b__ref___projection(a: t5b__ref) : integer = (a).t5b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first6(mk3(f, l))) = f) and (to_rep(last6(mk3(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,(int,integer) farray) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,(int,integer) farray) farray = (a).elts3

function of_array3(a: (int,(int,integer) farray) farray, f: int,
  l: int) : us_t3 = { elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep(first6((a).rt3))

function last7(a: us_t3) : int = to_rep(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,(int,integer) farray) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,(int,integer) farray) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,(int,integer) farray) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,(int,integer) farray) farray.
  (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,(int,integer) farray) farray. (0 <= object__alignment4(a)))

function bool_eq12(x: us_t3, y: us_t3) : bool = bool_eq6((x).elts3,
  to_rep(first6((x).rt3)), to_rep(last6((x).rt3)), (y).elts3,
  to_rep(first6((y).rt3)), to_rep(last6((y).rt3)))

logic user_eq9 : us_t3, us_t3 -> bool

logic dummy12 : (int,(int,integer) farray) farray

logic dummy13 : t3

type t6b__ref = { t6b__content : us_t3
}

function t6b__ref___projection(a: t6b__ref) : us_t3 = (a).t6b__content

logic result____first : integer

logic result____last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy14 : integer

type t7b__ref = { t7b__content : integer
}

function t7b__ref___projection(a: t7b__ref) : integer = (a).t7b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy15 : integer

type t8b__ref = { t8b__content : integer
}

function t8b__ref___projection(a: t8b__ref) : integer = (a).t8b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic temp___173 : int, int -> (int,integer) farray

axiom def_axiom :
  (forall temp___175:int. forall temp___176:int. (((temp___173(temp___175,
  temp___176)[1]) = of_rep(temp___175)) and ((temp___173(temp___175,
  temp___176)[2]) = of_rep(temp___176))))

logic cartesian__cartesian_product__result__aggregate_def : (int,integer) farray,
  int, int -> us_t3

axiom def_axiom1 :
  (forall temp___225:(int,integer) farray.
  (forall temp___226:int. forall temp___227:int. ((dynamic_property1(0,
  2147483647, temp___226, temp___227) ->
  ((to_rep(first6((cartesian__cartesian_product__result__aggregate_def(temp___225,
  temp___226, temp___227)).rt3)) = temp___226) and
  (to_rep(last6((cartesian__cartesian_product__result__aggregate_def(temp___225,
  temp___226, temp___227)).rt3)) = temp___227))) and
  (forall temp___228:int.
  (((cartesian__cartesian_product__result__aggregate_def(temp___225,
  temp___226, temp___227)).elts3[temp___228]) = temp___225)))))

logic temp___229 : int, int -> (int,integer) farray

axiom def_axiom2 :
  (forall temp___231:int. forall temp___232:int. (((temp___229(temp___231,
  temp___232)[1]) = of_rep(temp___231)) and ((temp___229(temp___231,
  temp___232)[2]) = of_rep(temp___232))))

logic temp___237 : int, int -> (int,integer) farray

axiom def_axiom3 :
  (forall temp___239:int. forall temp___240:int. (((temp___237(temp___239,
  temp___240)[1]) = of_rep(temp___239)) and ((temp___237(temp___239,
  temp___240)[2]) = of_rep(temp___240))))

axiom result_length__def_axiom : (result_length = (length({ elts = array1;
  rt = array11 }) * length({ elts = array2; rt = array21 })))

logic result__ : (int,(int,integer) farray) farray

logic result_index : int

logic index1 : int

logic index2 : int

logic cartesian__cartesian_product__result : (int,(int,integer) farray) farray

logic cartesian__cartesian_product__result1 : t1

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic cartesian__cartesian_product__result_length__assume : int

logic temp___235 : (int,(int,integer) farray) farray

logic temp___2351 : t3

logic cartesian__cartesian_product__result__assume : (int,(int,integer) farray) farray

logic cartesian__cartesian_product__result__assume1 : t2

logic temp___260 : (int,(int,integer) farray) farray

logic temp___258 : int

logic temp___257 : int

logic temp___245 : (int,(int,integer) farray) farray

logic temp___243 : int

logic temp___242 : int

logic o4 : int

logic o5 : int

logic o6 : (int,(int,integer) farray) farray

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic j : int

logic o16 : int

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : int

logic o22 : int

logic o23 : int

logic temp___247 : int

logic o24 : int

logic o25 : integer

logic o26 : int

logic j1 : int

logic o27 : int

logic o28 : int

logic o29 : int

logic o30 : int

logic o31 : int

logic o32 : int

logic o33 : int

logic o34 : int

logic temp___251 : int

logic o35 : int

logic o36 : integer

logic o37 : int

logic o38 : int

logic o39 : int

logic o40 : (int,(int,integer) farray) farray

logic o41 : int

logic o42 : int

logic o43 : int

logic o44 : int

logic o45 : int

logic o46 : int

logic i : int

logic j2 : int

logic o47 : int

logic o48 : int

logic o49 : int

logic o50 : int

logic o51 : int

logic o52 : int

logic o53 : int

logic o54 : int

logic temp___262 : int

logic o55 : int

logic o56 : integer

logic o57 : int

logic i1 : int

logic j3 : int

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : int

logic o62 : int

logic o63 : int

logic o64 : int

logic o65 : int

logic temp___267 : int

logic o66 : int

logic o67 : integer

logic o68 : int

logic temp___2451 : (int,(int,integer) farray) farray

logic temp___2431 : int

logic temp___2421 : int

logic o69 : int

logic o70 : int

logic o71 : (int,(int,integer) farray) farray

logic o72 : int

logic o73 : int

logic o74 : int

logic o75 : int

logic o76 : int

logic o77 : int

logic o78 : int

logic o79 : int

logic o80 : int

logic j4 : int

logic o81 : int

logic o82 : int

logic o83 : int

logic o84 : int

logic o85 : int

logic o86 : int

logic o87 : int

logic o88 : int

logic temp___2471 : int

logic o89 : int

logic o90 : integer

logic o91 : int

logic j5 : int

logic o92 : int

logic o93 : int

logic o94 : int

logic o95 : int

logic o96 : int

logic o97 : int

logic o98 : int

logic o99 : int

logic temp___2511 : int

logic o100 : int

logic o101 : integer

logic o102 : int

logic o103 : int

logic o104 : int

logic o105 : (int,(int,integer) farray) farray

logic i2 : int

logic j6 : int

logic o106 : int

logic o107 : int

logic o108 : int

logic o109 : int

logic o110 : int

logic o111 : int

logic o112 : int

logic o113 : int

logic temp___274 : int

logic o114 : int

logic o115 : integer

logic o116 : int

logic i3 : int

logic j7 : int

logic o117 : int

logic o118 : int

logic o119 : int

logic o120 : int

logic o121 : int

logic o122 : int

logic o123 : int

logic o124 : int

logic temp___279 : int

logic o125 : int

logic o126 : integer

logic o127 : int

logic i4 : int

logic j8 : int

logic o128 : int

logic o129 : integer

logic o130 : int

logic index21 : int

logic result : (int,(int,integer) farray) farray

logic result__1 : (int,(int,integer) farray) farray

logic result1 : int

logic result_index1 : int

logic result2 : int

logic index11 : int

logic result3 : int

logic index22 : int

logic result4 : int

logic result_index2 : int

logic result5 : (int,(int,integer) farray) farray

logic result__2 : (int,(int,integer) farray) farray

logic result__3 : (int,(int,integer) farray) farray

logic result_index3 : int

logic index23 : int

logic result6 : int

logic index24 : int

logic result7 : int

logic result_index4 : int

logic result8 : (int,(int,integer) farray) farray

logic result__4 : (int,(int,integer) farray) farray

logic result__5 : (int,(int,integer) farray) farray

logic result_index5 : int

logic index25 : int

logic result__6 : (int,(int,integer) farray) farray

logic result_index6 : int

logic index26 : int

logic result__7 : (int,(int,integer) farray) farray

logic result_index7 : int

logic index27 : int

logic result__8 : (int,(int,integer) farray) farray

logic result_index8 : int

logic index28 : int

logic result__9 : (int,(int,integer) farray) farray

logic result_index9 : int

logic index12 : int

logic index29 : int

logic result9 : int

logic index13 : int

logic result10 : int

logic index210 : int

logic result11 : int

logic result_index10 : int

logic result12 : (int,(int,integer) farray) farray

logic result__10 : (int,(int,integer) farray) farray

logic result__11 : (int,(int,integer) farray) farray

logic result_index11 : int

logic index211 : int

logic result13 : int

logic index212 : int

logic result14 : int

logic result_index12 : int

logic result15 : (int,(int,integer) farray) farray

logic result__12 : (int,(int,integer) farray) farray

logic result__13 : (int,(int,integer) farray) farray

logic result_index13 : int

logic index213 : int

logic result__14 : (int,(int,integer) farray) farray

logic result_index14 : int

logic index214 : int

logic result__15 : (int,(int,integer) farray) farray

logic result_index15 : int

logic index215 : int

logic result__16 : (int,(int,integer) farray) farray

logic result_index16 : int

logic index216 : int

logic result__17 : (int,(int,integer) farray) farray

logic result_index17 : int

logic index217 : int

logic result__18 : (int,(int,integer) farray) farray

logic result_index18 : int

logic index218 : int

logic result__19 : (int,(int,integer) farray) farray

logic result_index19 : int

logic index14 : int

logic index219 : int

logic result__20 : (int,(int,integer) farray) farray

logic result_index20 : int

logic index15 : int

logic index220 : int

logic result__21 : (int,(int,integer) farray) farray

logic result_index21 : int

logic index16 : int

logic index221 : int

logic result__22 : (int,(int,integer) farray) farray

logic result_index22 : int

logic index17 : int

logic index222 : int

logic result__23 : (int,(int,integer) farray) farray

logic result_index23 : int

logic index18 : int

logic index223 : int

logic result__24 : (int,(int,integer) farray) farray

logic result_index24 : int

logic index19 : int

logic index224 : int

logic result16 : (int,(int,integer) farray) farray

logic result17 : t1

logic cartesian__cartesian_product__result2 : (int,(int,integer) farray) farray

logic cartesian__cartesian_product__result3 : t1

logic cartesian__cartesian_product__result4 : (int,(int,integer) farray) farray

logic cartesian__cartesian_product__result5 : t1

logic cartesian__cartesian_product__result6 : (int,(int,integer) farray) farray

logic cartesian__cartesian_product__result7 : t1

logic result__25 : (int,(int,integer) farray) farray

logic result_index25 : int

logic index110 : int

logic index225 : int

logic cartesian__cartesian_product__result8 : (int,(int,integer) farray) farray

logic cartesian__cartesian_product__result9 : t1

logic result__26 : (int,(int,integer) farray) farray

logic result_index26 : int

logic index111 : int

logic index226 : int

logic cartesian__cartesian_product__result10 : (int,(int,integer) farray) farray

logic cartesian__cartesian_product__result11 : t1

axiom H : dynamic_property(0, 2147483647, to_rep(first(array11)),
  to_rep(last(array11)))

axiom H1 : dynamic_property(0, 2147483647, to_rep(first(array21)),
  to_rep(last(array21)))

axiom H2 : ((length({ elts = array1; rt = array11 }) <  255) and (length({
  elts = array2; rt = array21 }) <  255))

axiom H3 : ((o = length({ elts = array2; rt = array21 })) and
  in_range1(length({ elts = array2; rt = array21 })))

axiom H4 : ((o1 = length({ elts = array1; rt = array11 })) and
  in_range1(length({ elts = array1; rt = array11 })))

axiom H5 : (o2 = (o1 * o))

axiom H6 : ((o3 = o2) and in_range1(o2))

axiom H7 : ((cartesian__cartesian_product__result_length__assume = o3) and
  in_range2(o3))

axiom H8 :
  (cartesian__cartesian_product__result_length__assume = result_length)

axiom H9 : in_range2(result_length)

axiom H10 :
  (to_rep(first6((cartesian__cartesian_product__result__aggregate_def(temp___229(0,
  0), 1, result_length)).rt3)) = 1)

axiom H11 :
  (to_rep(last6((cartesian__cartesian_product__result__aggregate_def(temp___229(0,
  0), 1, result_length)).rt3)) = result_length)

axiom H12 : ({ elts3 = temp___235; rt3 = temp___2351
  } = cartesian__cartesian_product__result__aggregate_def(temp___229(0, 0),
  1, result_length))

axiom H13 : (((to_rep(first6(temp___2351)) <= to_rep(last6(temp___2351))) ->
  (((1 <= result_length) ->
  (((to_rep(last6(temp___2351)) - to_rep(first6(temp___2351))) + 1) = ((result_length - 1) + 1))) and
  ((not (1 <= result_length)) ->
  (((to_rep(last6(temp___2351)) - to_rep(first6(temp___2351))) + 1) = 0)))) and
  ((not (to_rep(first6(temp___2351)) <= to_rep(last6(temp___2351)))) ->
  ((1 <= result_length) -> (0 = ((result_length - 1) + 1)))))

axiom H14 : (temp___235 = cartesian__cartesian_product__result__assume)

axiom H15 : (mk2(to_rep(first6(temp___2351)),
  to_rep(last6(temp___2351))) = cartesian__cartesian_product__result__assume1)

axiom H16 : (result = result__)

axiom H17 : (result__1 = cartesian__cartesian_product__result__assume)

axiom H18 :
  (to_rep(result____first) = to_rep(first4(cartesian__cartesian_product__result__assume1)))

axiom H19 :
  (to_rep(result____last) = to_rep(last4(cartesian__cartesian_product__result__assume1)))

axiom H20 : (dynamic_property3(1, result_length, to_rep(result____first),
  to_rep(result____last)) and ((to_rep(result____first) = 1) and
  (to_rep(result____last) = result_length)))

axiom H21 : (result1 = result_index)

axiom H22 : (result_index1 = 0)

axiom H23 : in_range2(result_index1)

axiom H24 : (result2 = index1)

axiom H25 : (index11 = to_rep(first(array11)))

axiom H26 : (to_rep(first(array11)) <= index11)

axiom H27 : (index11 <= to_rep(last(array11)))

axiom H28 : (result3 = index2)

axiom H29 : (index22 = to_rep(first(array21)))

axiom H30 : (to_rep(first(array21)) <= index22)

axiom H31 : (index22 <= to_rep(last(array21)))

axiom H32 : ((o4 = (result_index1 + 1)) and in_range1((result_index1 + 1)))

axiom H33 : (result_index1 = result4)

axiom H34 : (result_index2 = o4)

axiom H35 : ((to_rep(result____first) <= result_index2) and
  (result_index2 <= to_rep(result____last)))

axiom H36 : (o5 = result_index2)

axiom H37 : (o6 = (result__1[o5 <- temp___237(to_rep((array1[index11])),
  to_rep((array2[index22])))]))

axiom H38 : (result__1 = result5)

axiom H39 : (result__2 = o6)

logic j9 : int

axiom H40 : (to_rep(first(array21)) <= j9)

axiom H41 : (j9 <= index22)

 (* File "cartesian.ads", line 17, characters 0-0 *)
goal WP_parameter_def :
  (to_rep(((result__2[((((index11 - to_rep(first(array11))) * length({ elts =
  array2; rt = array21
  })) + (j9 - to_rep(first(array21)))) + 1)])[2])) = to_rep((array2[j9])))
