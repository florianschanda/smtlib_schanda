(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort topt_indexB 0)
(declare-fun topt_indexBqtint (topt_indexB) Int)
(assert (forall ((i topt_indexB)) (and (<= (- 2147483648) (topt_indexBqtint i)) (<= (topt_indexBqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (topt_indexB topt_indexB) Bool)
(declare-const dummy1 topt_indexB)
(declare-datatypes () ((topt_indexB__ref (mk_topt_indexB__ref (topt_indexB__content topt_indexB)))))
(define-fun topt_indexB__ref___projection ((a topt_indexB__ref)) topt_indexB (topt_indexB__content a))
(define-fun to_rep1 ((x topt_indexB)) Int (topt_indexBqtint x))
(declare-fun of_rep1 (Int) topt_indexB)
(assert (forall ((x topt_indexB)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x topt_indexB)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) topt_indexB)
(declare-fun last (t) topt_indexB)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((ar__ref (mk_ar__ref (ar__content us_t)))))
(define-fun ar__ref___projection ((a ar__ref)) us_t (ar__content a))
(declare-fun empty (us_t) Bool)
(declare-fun empty__function_guard (Bool us_t) Bool)
(define-fun dynamic_invariant1 ((temp___expr_173 us_t) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (not (= temp___skip_constant_170 true)) (dynamic_property 1 2147483647 (first1 temp___expr_173) (last1 temp___expr_173))))
(assert true)
(assert (forall ((a us_t)) (! (= (= (empty a) true) (< (last1 a) (first1 a))) :pattern ((empty a)))))
(declare-fun sorted (us_t) Bool)
(declare-fun sorted__function_guard (Bool us_t) Bool)
(assert true)
(assert (forall ((a us_t)) (! (= (= (sorted a) true) (forall ((i1 Int)) (=> (and (<= (first1 a) i1) (<= i1 (last1 a))) (forall ((i2 Int)) (=> (and (<= i1 i2) (<= i2 (last1 a))) (<= (to_rep (select (to_array a) i1)) (to_rep (select (to_array a) i2)))))))) :pattern ((sorted a)))))
(define-fun dynamic_invariant2 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 2147483647)) (in_range3 temp___expr_166)))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const left Int)
(declare-const right Int)
(declare-const med Int)
(declare-const binary_search__search__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 integer)
(declare-const o4 Int)
(declare-const o5 Bool)
(declare-const o6 Int)
(declare-const o7 integer)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 integer)
(declare-const o11 Int)
(declare-const o12 Bool)
(declare-const o13 Bool)
(declare-const binary_search__search__result1 Int)
(declare-const result Bool)
(declare-const binary_search__search__result2 Int)
(declare-const result1 Int)
(declare-const left1 Int)
(declare-const result2 Int)
(declare-const right1 Int)
(declare-const result3 Bool)
(declare-const binary_search__search__result3 Int)
(declare-const result4 Bool)
(declare-const binary_search__search__result4 Int)
(declare-const left2 Int)
(declare-const right2 Int)
(declare-const med1 Int)
(declare-const temp___196 Int)
(declare-const result5 Int)
(declare-const temp___1961 Int)
(assert (dynamic_invariant1 a true false true true))
(assert (in_range1 i))
(assert (= (sorted a) true))
(assert (=> (<= 1 2147483647) (in_range3 left)))
(assert (=> (<= 1 2147483647) (in_range3 right)))
(assert (=> (<= 1 2147483647) (in_range3 med)))
(assert (and (= result (empty a)) (= (= result true) (< (to_rep1 (last (rt a))) (to_rep1 (first (rt a)))))))
(assert (not (= result true)))
(assert (= binary_search__search__result2 binary_search__search__result))
(assert (= binary_search__search__result2 binary_search__search__result1))
(assert (and (= o (to_rep1 (first (rt a)))) (in_range3 (to_rep1 (first (rt a))))))
(assert (= (mk_int__ref result1) (mk_int__ref left)))
(assert (= left1 o))
(assert (and (= o1 (to_rep1 (last (rt a)))) (in_range3 (to_rep1 (last (rt a))))))
(assert (= (mk_int__ref result2) (mk_int__ref right)))
(assert (= right1 o1))
(assert (and (<= (to_rep1 (first (rt a))) left1) (<= left1 (to_rep1 (last (rt a))))))
(assert (= o2 left1))
(assert (= o3 (select (elts a) o2)))
(assert (= o4 (to_rep o3)))
(assert (= o5 (ite (= o4 i) true false)))
(assert (= result3 (ite (= left1 right1) o5 false)))
(assert (not (= result3 true)))
(assert (and (<= (to_rep1 (first (rt a))) right1) (<= right1 (to_rep1 (last (rt a))))))
(assert (= o9 right1))
(assert (= o10 (select (elts a) o9)))
(assert (= o11 (to_rep o10)))
(assert (= o12 (ite (< o11 i) true false)))
(assert (and (<= (to_rep1 (first (rt a))) left1) (<= left1 (to_rep1 (last (rt a))))))
(assert (= o6 left1))
(assert (= o7 (select (elts a) o6)))
(assert (= o8 (to_rep o7)))
(assert (= o13 (ite (< i o8) true false)))
(assert (= result4 (ite (= o13 false) o12 true)))
(assert (not (= result4 true)))
(assert (= binary_search__search__result4 binary_search__search__result2))
(assert (= binary_search__search__result3 binary_search__search__result4))
(assert (< left1 right1))
(assert (and (and (<= (to_rep1 (first (rt a))) left2) (<= left2 (to_rep1 (last (rt a))))) (and (<= (to_rep1 (first (rt a))) right2) (<= right2 (to_rep1 (last (rt a)))))))
(assert (and (and (and (=> (<= 1 2147483647) (in_range3 left2)) (=> (<= 1 2147483647) (in_range3 right2))) (=> (<= 1 2147483647) (in_range3 med1))) (< left2 right2)))
(assert (= temp___196 result5))
(assert (= temp___1961 (- right2 left2)))
(assert (not (not (= 2 0))))
(check-sat)
(exit)
