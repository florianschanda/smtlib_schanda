(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort times 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 86399)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (times times) Bool)
(declare-const dummy times)
(declare-datatypes () ((times__ref (mk_times__ref (times__content times)))))
(define-fun times__ref___projection ((a times__ref)) times (times__content a))
(define-fun dynamic_invariant ((temp___expr_137 Int) (temp___is_init_134 Bool) (temp___skip_constant_135 Bool) (temp___do_toplevel_136 Bool)) Bool (=> (or (= temp___is_init_134 true) (<= 0 86399)) (in_range1 temp___expr_137)))
(declare-fun to_rep (times) Int)
(declare-fun of_rep (Int) times)
(assert (forall ((x times)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x times)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort displaydigits 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 9)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (displaydigits displaydigits) Bool)
(declare-const dummy1 displaydigits)
(declare-datatypes () ((displaydigits__ref (mk_displaydigits__ref (displaydigits__content displaydigits)))))
(define-fun displaydigits__ref___projection ((a displaydigits__ref)) displaydigits (displaydigits__content a))
(declare-fun to_rep1 (displaydigits) Int)
(declare-fun of_rep1 (Int) displaydigits)
(assert (forall ((x displaydigits)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x displaydigits)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int displaydigits))))))
(declare-fun slide ((Array Int displaydigits) Int Int) (Array Int displaydigits))
(assert (forall ((a (Array Int displaydigits))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int displaydigits))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int displaydigits) Int Int (Array Int displaydigits) Int Int) (Array Int displaydigits))
(assert (forall ((a (Array Int displaydigits)) (b (Array Int displaydigits))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (displaydigits Int) (Array Int displaydigits))
(assert (forall ((v displaydigits)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int displaydigits)) (a__first Int) (a__last Int) (b (Array Int displaydigits)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int displaydigits)) (b (Array Int displaydigits))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int displaydigits) Int Int (Array Int displaydigits) Int Int) Int)
(assert (forall ((a (Array Int displaydigits)) (b (Array Int displaydigits))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int displaydigits)) (b (Array Int displaydigits))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int displaydigits)) (b (Array Int displaydigits))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort positions 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positions positions) Bool)
(declare-const dummy2 positions)
(declare-datatypes () ((positions__ref (mk_positions__ref (positions__content positions)))))
(define-fun positions__ref___projection ((a positions__ref)) positions (positions__content a))
(define-fun dynamic_invariant1 ((temp___expr_171 Int) (temp___is_init_168 Bool) (temp___skip_constant_169 Bool) (temp___do_toplevel_170 Bool)) Bool (=> (or (= temp___is_init_168 true) (<= 0 5)) (in_range3 temp___expr_171)))
(declare-sort advancemodes 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (advancemodes advancemodes) Bool)
(declare-const dummy3 advancemodes)
(declare-datatypes () ((advancemodes__ref (mk_advancemodes__ref (advancemodes__content advancemodes)))))
(define-fun advancemodes__ref___projection ((a advancemodes__ref)) advancemodes (advancemodes__content a))
(define-fun dynamic_invariant2 ((temp___expr_177 Int) (temp___is_init_174 Bool) (temp___skip_constant_175 Bool) (temp___do_toplevel_176 Bool)) Bool (=> (or (= temp___is_init_174 true) (<= 0 1)) (in_range4 temp___expr_177)))
(declare-fun currentmode (us_private) Int)
(declare-fun currentmode__function_guard (Int us_private) Bool)
(assert (forall ((advancebutton__advancemode us_private)) (! (dynamic_invariant2 (currentmode advancebutton__advancemode) true false true) :pattern ((currentmode advancebutton__advancemode)))))
(declare-const hoursinday Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const minutesinhour Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const secondsinminute Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const secondsinhour Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort programtimes 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 2 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (programtimes programtimes) Bool)
(declare-const dummy4 programtimes)
(declare-datatypes () ((programtimes__ref (mk_programtimes__ref (programtimes__content programtimes)))))
(define-fun programtimes__ref___projection ((a programtimes__ref)) programtimes (programtimes__content a))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int times))))))
(declare-fun slide1 ((Array Int times) Int Int) (Array Int times))
(assert (forall ((a (Array Int times))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int times))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int times) Int Int (Array Int times) Int Int) (Array Int times))
(assert (forall ((a (Array Int times)) (b (Array Int times))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (times Int) (Array Int times))
(assert (forall ((v times)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int times)) (a__first Int) (a__last Int) (b (Array Int times)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133))))))) true false))
(assert (forall ((a (Array Int times)) (b (Array Int times))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_133 Int)) (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last)) (= (to_rep (select a temp___idx_133)) (to_rep (select b (+ (- b__first a__first) temp___idx_133)))))))))))
(declare-fun compare1 ((Array Int times) Int Int (Array Int times) Int Int) Int)
(assert (forall ((a (Array Int times)) (b (Array Int times))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int times)) (b (Array Int times))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int times)) (b (Array Int times))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(declare-const c40b Int)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-sort hours 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 23)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (hours hours) Bool)
(declare-const dummy5 hours)
(declare-datatypes () ((hours__ref (mk_hours__ref (hours__content hours)))))
(define-fun hours__ref___3__projection ((a hours__ref)) hours (hours__content a))
(define-fun dynamic_invariant3 ((temp___expr_259 Int) (temp___is_init_256 Bool) (temp___skip_constant_257 Bool) (temp___do_toplevel_258 Bool)) Bool (=> (or (= temp___is_init_256 true) (<= 0 23)) (in_range6 temp___expr_259)))
(declare-sort minutes 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 59)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (minutes minutes) Bool)
(declare-const dummy6 minutes)
(declare-datatypes () ((minutes__ref (mk_minutes__ref (minutes__content minutes)))))
(define-fun minutes__ref___3__projection ((a minutes__ref)) minutes (minutes__content a))
(define-fun dynamic_invariant4 ((temp___expr_265 Int) (temp___is_init_262 Bool) (temp___skip_constant_263 Bool) (temp___do_toplevel_264 Bool)) Bool (=> (or (= temp___is_init_262 true) (<= 0 59)) (in_range7 temp___expr_265)))
(declare-const attr__ATTRIBUTE_ADDRESS18 Int)
(declare-const attr__ATTRIBUTE_ADDRESS19 Int)
(declare-const attr__ATTRIBUTE_ADDRESS20 Int)
(declare-fun temp___268 (Int Int Int Int) (Array Int times))
(assert (forall ((temp___270 Int) (temp___271 Int) (temp___272 Int) (temp___273 Int)) (let ((temp___269 (temp___268 temp___270 temp___271 temp___272 temp___273))) (and (and (and (= (select temp___269 2) (of_rep temp___270)) (= (select temp___269 3) (of_rep temp___271))) (= (select temp___269 4) (of_rep temp___272))) (= (select temp___269 5) (of_rep temp___273))))))
(declare-fun temp___275 (Int Int Int Int) (Array Int displaydigits))
(assert (forall ((temp___277 Int) (temp___278 Int) (temp___279 Int) (temp___280 Int)) (let ((temp___276 (temp___275 temp___277 temp___278 temp___279 temp___280))) (and (and (and (= (select temp___276 0) (of_rep1 temp___277)) (= (select temp___276 1) (of_rep1 temp___278))) (= (select temp___276 2) (of_rep1 temp___279))) (= (select temp___276 3) (of_rep1 temp___280))))))
(assert (= hoursinday 24))
(assert (= minutesinhour 60))
(assert (= secondsinminute 60))
(assert (= secondsinhour 3600))
(define-fun dynamic_invariant5 ((temp___expr_219 Int) (temp___is_init_216 Bool) (temp___skip_constant_217 Bool) (temp___do_toplevel_218 Bool)) Bool (=> (or (= temp___is_init_216 true) (<= 2 5)) (in_range5 temp___expr_219)))
(define-fun dynamic_invariant6 ((temp___expr_143 Int) (temp___is_init_140 Bool) (temp___skip_constant_141 Bool) (temp___do_toplevel_142 Bool)) Bool (=> (or (= temp___is_init_140 true) (<= 0 9)) (in_range2 temp___expr_143)))
(declare-const onofftime (Array Int times))
(declare-const clockoffset Int)
(declare-const heatingison Bool)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 times)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 times)
(declare-const o6 Int)
(declare-const o7 (Array Int times))
(declare-const result Bool)
(declare-const heatingison1 Bool)
(declare-const result1 Int)
(declare-const clockoffset1 Int)
(declare-const result2 map__ref1)
(declare-const onofftime1 (Array Int times))
(declare-const onofftime2 (Array Int times))
(declare-const clockoffset2 Int)
(declare-const switchposition Int)
(declare-const timer Int)
(declare-const slowadvance Bool)
(declare-const fastadvance Bool)
(declare-const changetoslowmode Bool)
(declare-const changetofastmode Bool)
(declare-const slowadvance1 Bool)
(declare-const fastadvance1 Bool)
(declare-const changetoslowmode1 Bool)
(declare-const changetofastmode1 Bool)
(declare-const hour Int)
(declare-const minute Int)
(declare-const advancemode us_private)
(declare-const advpressed us_private)
(declare-const advtimer us_private)
(declare-const switchposition1 Int)
(declare-const timer1 Int)
(declare-const result3 int__ref)
(declare-const timer2 Int)
(declare-const timer3 Int)
(declare-const result4 Bool)
(declare-const slowadvance2 Bool)
(declare-const result5 int__ref)
(declare-const clockoffset3 Int)
(declare-const changetofastmode2 Bool)
(declare-const advpressed1 us_private)
(declare-const advtimer1 us_private)
(declare-const advancemode1 us_private)
(declare-const fastadvance2 Bool)
(declare-const advtimer2 us_private)
(declare-const result6 int__ref)
(declare-const clockoffset4 Int)
(declare-const changetoslowmode2 Bool)
(declare-const advpressed2 us_private)
(declare-const advancemode2 us_private)
(declare-const result7 int__ref)
(declare-const timer4 Int)
(declare-const result8 int__ref)
(declare-const timer5 Int)
(declare-const result9 Bool)
(declare-const slowadvance3 Bool)
(declare-const result10 int__ref)
(declare-const timer6 Int)
(declare-const changetofastmode3 Bool)
(declare-const advpressed3 us_private)
(declare-const advtimer3 us_private)
(declare-const advancemode3 us_private)
(declare-const fastadvance3 Bool)
(declare-const advtimer4 us_private)
(declare-const result11 int__ref)
(declare-const timer7 Int)
(declare-const changetoslowmode3 Bool)
(declare-const advpressed4 us_private)
(declare-const advancemode4 us_private)
(declare-const result12 map__ref1)
(declare-const onofftime3 (Array Int times))
(declare-const result13 int__ref)
(declare-const hour1 Int)
(declare-const result14 int__ref)
(declare-const minute1 Int)
(assert (in_range1 hoursinday))
(assert (in_range1 minutesinhour))
(assert (in_range1 secondsinminute))
(assert (in_range1 secondsinhour))
(assert (=> (<= 0 86399) (in_range1 clockoffset)))
(assert (= result heatingison))
(assert (= heatingison1 (of_int 0)))
(assert (= result1 clockoffset))
(assert (= clockoffset1 0))
(assert (= result2 (mk_map__ref1 onofftime)))
(assert (= onofftime1 (temp___268 0 0 0 0)))
(assert (=> (<= 0 86399) (in_range1 clockoffset2)))
(assert (=> (<= 0 5) (in_range3 switchposition)))
(assert (=> (<= 0 86399) (in_range1 timer)))
(assert (in_range3 switchposition1))
(assert (not (= switchposition1 0)))
(assert (= switchposition1 1))
(assert (in_range1 timer3))
(assert (and (= o (currentmode advancemode)) (in_range4 o)))
(assert (= result4 (ite (= o 0) true false)))
(assert (=> (= result4 true) (=> (= slowadvance2 true) (= result5 (mk_int__ref clockoffset2)))))
(assert (=> (= result4 true) (=> (= slowadvance2 true) (= clockoffset3 (mod2 (+ clockoffset2 60) 86400)))))
(assert (=> (= result4 true) (=> (not (= slowadvance2 true)) (= clockoffset3 clockoffset2))))
(assert (=> (= result4 true) (=> (not (= changetofastmode2 true)) (= advancemode1 advancemode))))
(assert (=> (= result4 true) (= changetoslowmode2 changetoslowmode)))
(assert (=> (= result4 true) (= fastadvance2 fastadvance)))
(assert (=> (not (= result4 true)) (=> (= fastadvance2 true) (= result6 (mk_int__ref clockoffset2)))))
(assert (=> (not (= result4 true)) (=> (= fastadvance2 true) (= clockoffset4 (mod2 (+ clockoffset2 600) 86400)))))
(assert (=> (not (= result4 true)) (=> (not (= fastadvance2 true)) (= clockoffset4 clockoffset2))))
(assert (=> (not (= result4 true)) (=> (not (= changetoslowmode2 true)) (= advancemode2 advancemode))))
(assert (=> (not (= result4 true)) (= advtimer1 advtimer2)))
(assert (=> (not (= result4 true)) (= advpressed1 advpressed2)))
(assert (=> (not (= result4 true)) (= advancemode1 advancemode2)))
(assert (=> (not (= result4 true)) (= changetofastmode2 changetofastmode)))
(assert (=> (not (= result4 true)) (= slowadvance2 slowadvance)))
(assert (=> (not (= result4 true)) (= clockoffset3 clockoffset4)))
(assert (not (not (= 86400 0))))
(check-sat)
(exit)
