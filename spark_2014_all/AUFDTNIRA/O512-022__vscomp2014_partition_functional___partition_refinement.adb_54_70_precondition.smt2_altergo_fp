(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tcount_typeB

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tcount_typeB, tcount_typeB -> bool

logic dummy : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type count_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

type tindex_countB

predicate in_range3(x: int) = (((- 128) <= x) and (x <= 127))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tindex_countB, tindex_countB -> bool

logic dummy2 : tindex_countB

type tindex_countB__ref = { tindex_countB__content : tindex_countB
}

function tindex_countB__ref___projection(a: tindex_countB__ref) : tindex_countB =
  (a).tindex_countB__content

type index_count

predicate in_range4(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index_count, index_count -> bool

logic dummy3 : index_count

type index_count__ref = { index_count__content : index_count
}

function index_count__ref___projection(a: index_count__ref) : index_count =
  (a).index_count__content

logic to_rep : index_count -> int

logic of_rep : int -> index_count

axiom inversion_axiom :
  (forall x:index_count [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index_count [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range5(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : index, index -> bool

logic dummy4 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep1 : index -> int

logic of_rep1 : int -> index

axiom inversion_axiom1 :
  (forall x:index [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:index [to_rep1(x)]. in_range5(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range5(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__partition_refinement__interval__first : index;
rec__partition_refinement__interval__last : index;
rec__partition_refinement__interval__count : index_count
}

function us_split_fields_First__projection(a: us_split_fields) : index =
  (a).rec__partition_refinement__interval__first

function us_split_fields_Last__projection(a: us_split_fields) : index =
  (a).rec__partition_refinement__interval__last

function us_split_fields_Count__projection(a: us_split_fields) : index_count =
  (a).rec__partition_refinement__interval__count

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___13__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  (((((to_rep1(((a).us_split_fields1).rec__partition_refinement__interval__first) = to_rep1(((b).us_split_fields1).rec__partition_refinement__interval__first)) and
  (to_rep1(((a).us_split_fields1).rec__partition_refinement__interval__last) = to_rep1(((b).us_split_fields1).rec__partition_refinement__interval__last))) and
  (to_rep(((a).us_split_fields1).rec__partition_refinement__interval__count) = to_rep(((b).us_split_fields1).rec__partition_refinement__interval__count))) ->
  (bool_eq7(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields1).rec__partition_refinement__interval__first) = to_rep1(((b).us_split_fields1).rec__partition_refinement__interval__first)) and
  (to_rep1(((a).us_split_fields1).rec__partition_refinement__interval__last) = to_rep1(((b).us_split_fields1).rec__partition_refinement__interval__last))) and
  (to_rep(((a).us_split_fields1).rec__partition_refinement__interval__count) = to_rep(((b).us_split_fields1).rec__partition_refinement__interval__count)))) ->
  (bool_eq7(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:index. forall a1:index. forall a2:index_count.
  (0 <= object__size({ us_split_fields1 = {
  rec__partition_refinement__interval__first = a;
  rec__partition_refinement__interval__last = a1;
  rec__partition_refinement__interval__count = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:index. forall a1:index. forall a2:index_count.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__partition_refinement__interval__first = a;
  rec__partition_refinement__interval__last = a1;
  rec__partition_refinement__interval__count = a2 } })))

logic partition_refinement__interval__first__first__bit : int

logic partition_refinement__interval__first__last__bit : int

logic partition_refinement__interval__first__position : int

axiom partition_refinement__interval__first__first__bit_axiom :
  (0 <= partition_refinement__interval__first__first__bit)

axiom partition_refinement__interval__first__last__bit_axiom :
  (partition_refinement__interval__first__first__bit <  partition_refinement__interval__first__last__bit)

axiom partition_refinement__interval__first__position_axiom :
  (0 <= partition_refinement__interval__first__position)

logic partition_refinement__interval__last__first__bit : int

logic partition_refinement__interval__last__last__bit : int

logic partition_refinement__interval__last__position : int

axiom partition_refinement__interval__last__first__bit_axiom :
  (0 <= partition_refinement__interval__last__first__bit)

axiom partition_refinement__interval__last__last__bit_axiom :
  (partition_refinement__interval__last__first__bit <  partition_refinement__interval__last__last__bit)

axiom partition_refinement__interval__last__position_axiom :
  (0 <= partition_refinement__interval__last__position)

logic partition_refinement__interval__count__first__bit : int

logic partition_refinement__interval__count__last__bit : int

logic partition_refinement__interval__count__position : int

axiom partition_refinement__interval__count__first__bit_axiom :
  (0 <= partition_refinement__interval__count__first__bit)

axiom partition_refinement__interval__count__last__bit_axiom :
  (partition_refinement__interval__count__first__bit <  partition_refinement__interval__count__last__bit)

axiom partition_refinement__interval__count__position_axiom :
  (0 <= partition_refinement__interval__count__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : index

logic dummy6 : index

logic dummy7 : index_count

type interval__ref = { interval__content : us_rep
}

function interval__ref___projection(a: interval__ref) : us_rep =
  (a).interval__content

type tpartition_indexB

predicate in_range6(x: int) = (((- 32768) <= x) and (x <= 32767))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tpartition_indexB, tpartition_indexB -> bool

logic dummy8 : tpartition_indexB

type tpartition_indexB__ref = { tpartition_indexB__content :
tpartition_indexB
}

function tpartition_indexB__ref___projection(a: tpartition_indexB__ref) : tpartition_indexB =
  (a).tpartition_indexB__content

type partition_index

predicate in_range7(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : partition_index, partition_index -> bool

logic dummy9 : partition_index

type partition_index__ref = { partition_index__content : partition_index
}

function partition_index__ref___projection(a: partition_index__ref) : partition_index =
  (a).partition_index__content

logic to_rep2 : partition_index -> int

logic of_rep2 : int -> partition_index

axiom inversion_axiom2 :
  (forall x:partition_index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:partition_index [to_rep2(x)]. in_range7(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range7(x) ->
  (to_rep2(of_rep2(x)) = x)))

type index_type

predicate in_range8(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : index_type, index_type -> bool

logic dummy10 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___3__projection(a: index_type__ref) : index_type =
  (a).index_type__content

type element_type__ref = { element_type__content : us_rep
}

function element_type__ref___8__projection(a: element_type__ref) : us_rep =
  (a).element_type__content

type capacity_range

predicate in_range9(x: int) = ((0 <= x) and (x <= 10001))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : capacity_range, capacity_range -> bool

logic dummy11 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__partition_refinement__partitions__vector__capacity : capacity_range
}

function us_split_discrs___3__projection(a: us_split_discrs) : capacity_range =
  (a).rec__partition_refinement__partitions__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__partition_refinement__partitions__vector :
us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields2) : us_main_type =
  (a).rec__partition_refinement__partitions__vector

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___14__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___15__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitions__vector = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitions__vector = a1 }
  })))

logic partition_refinement__partitions__vector__capacity__first__bit : int

logic partition_refinement__partitions__vector__capacity__last__bit : int

logic partition_refinement__partitions__vector__capacity__position : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom :
  (partition_refinement__partitions__vector__capacity__first__bit <  partition_refinement__partitions__vector__capacity__last__bit)

axiom partition_refinement__partitions__vector__capacity__position_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy12 : capacity_range

logic dummy13 : us_main_type

type vector__ref = { vector__content : us_rep1
}

function vector__ref___projection(a: vector__ref) : us_rep1 =
  (a).vector__content

logic to_rep3 : capacity_range -> int

logic of_rep3 : int -> capacity_range

axiom inversion_axiom3 :
  (forall x:capacity_range [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:capacity_range [to_rep3(x)]. in_range9(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range9(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic capacity__function_guard : int, us_rep1 -> prop

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } })]. ((((of_int(1) = true) -> (length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } }) <= to_rep3(container))) and ((not (of_int(1) = true)) ->
  (length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } }) <= 10001))) and in_range9(length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } }))))

type element_type__ref1 = { element_type__content1 : us_rep
}

function element_type__ref___9__projection(a: element_type__ref1) : us_rep =
  (a).element_type__content1

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq12 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy14 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___3__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> us_rep

logic get__function_guard : us_rep, us_rep2, int -> prop

logic model__ : us_rep1 -> us_rep2

logic model____function_guard : us_rep2, us_rep1 -> prop

logic element__function_guard : us_rep, us_rep1, int -> prop

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic last_index__function_guard : int, us_rep1 -> prop

logic first_index__function_guard : int, us_rep1 -> prop

logic equal_except__function_guard : bool, us_rep2, us_rep2, int -> prop

logic olt__function_guard : bool, us_rep2, us_rep2 -> prop

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size3({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitions__vector = a1 }
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitions__vector = a1 }
  })))

logic partition_refinement__partitions__vector__capacity__first__bit1 : int

logic partition_refinement__partitions__vector__capacity__last__bit1 : int

logic partition_refinement__partitions__vector__capacity__position1 : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit1)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom1 :
  (partition_refinement__partitions__vector__capacity__first__bit1 <  partition_refinement__partitions__vector__capacity__last__bit1)

axiom partition_refinement__partitions__vector__capacity__position_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__position1)

logic user_eq12 : us_rep1, us_rep1 -> bool

logic dummy15 : capacity_range

logic dummy16 : us_main_type

type partition__ref = { partition__content : us_rep1
}

function partition__ref___projection(a: partition__ref) : us_rep1 =
  (a).partition__content

type map__ref = { map__content : (int,partition_index) farray
}

logic slide : (int,partition_index) farray, int,
  int -> (int,partition_index) farray

axiom slide_eq :
  (forall a:(int,partition_index) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,partition_index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> (int,partition_index) farray

axiom concat_def :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : partition_index, int -> (int,partition_index) farray

axiom singleton_def :
  (forall v:partition_index.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq13 : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> bool

axiom bool_eq_def11 :
  (forall a:(int,partition_index) farray. forall a__first:int.
  forall a__last:int. forall b:(int,partition_index) farray.
  forall b__first:int. forall b__last:int [bool_eq13(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq13(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq13(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq13(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic p__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r50b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic save_length : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic f_loop_entry : (int,partition_index) farray

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r54b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic r55b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic to_rep4 : tindex_countB -> int

logic of_rep4 : int -> tindex_countB

axiom inversion_axiom4 :
  (forall x:tindex_countB [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:tindex_countB [to_rep4(x)]. in_range3(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range3(x) ->
  (to_rep4(of_rep4(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : tindex_countB, tindex_countB -> bool

logic dummy17 : tindex_countB

type t56b__ref = { t56b__content : tindex_countB
}

function t56b__ref___projection(a: t56b__ref) : tindex_countB =
  (a).t56b__content

logic attr__ATTRIBUTE_ADDRESS11 : int

type extended_index

predicate in_range10(x: int) = (((- 1) <= x) and (x <= 10001))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : extended_index, extended_index -> bool

logic dummy18 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___3__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2 [user_eq11(a, b)].
  (((forall n:int. (((0 <= n) and (n <= ((- 1) + length1(a)))) ->
    (bool_eq7(get(a, n), get(b, n)) = true))) ->
  (user_eq11(a, b) = match_bool(bool_eq1(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((0 <= n) and (n <= ((- 1) + length1(a)))) ->
        (bool_eq7(get(a, n), get(b, n)) = true)))) ->
  (user_eq11(a, b) = match_bool(bool_eq1(length1(a), length1(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [model__({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } })]. (length1(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } })) = length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitions__vector =
  container1 } })))

type extended_index1

predicate in_range11(x: int) = (((- 1) <= x) and (x <= 10000))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq15 : extended_index1, extended_index1 -> bool

logic dummy19 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___4__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  ((((- 1) + length1(container)) <= 10000) and
  in_range2(length1(container))))

axiom get__post_axiom : true

logic p__split_fields : us_main_type

logic f : (int,partition_index) farray

logic p_elem__split_fields : index

logic p_elem__split_fields1 : index

logic p_elem__split_fields2 : index_count

logic p_prime__split_fields : index

logic p_prime__split_fields1 : index

logic p_prime__split_fields2 : index_count

logic p_prime_index : int

logic j : int

logic i : int

logic j1 : int

logic o : int

logic o1 : int

logic o2 : bool

logic k : int

logic o3 : int

logic o4 : index

logic o5 : index

logic o6 : index_count

logic o7 : index

logic o8 : index

logic o9 : index_count

logic o10 : index

logic o11 : int

logic o12 : int

logic o13 : index

logic o14 : index

logic o15 : index_count

logic o16 : index

logic o17 : index

logic o18 : index_count

logic o19 : index

logic o20 : int

logic o21 : bool

logic o22 : bool

logic j2 : int

logic o23 : index

logic o24 : index

logic o25 : index_count

logic o26 : index

logic o27 : index

logic o28 : index_count

logic o29 : index

logic o30 : index

logic o31 : index_count

logic o32 : index

logic o33 : int

logic o34 : bool

logic o35 : int

logic o36 : int

logic o37 : int

logic o38 : int

logic o39 : int

logic o40 : int

logic partition_refinement__make_new_partitions__L_1__R50b__assume : int

logic temp___1226 : int

logic temp___1225 : int

logic temp___1232 : int

logic temp___1231 : index

logic temp___12311 : index

logic temp___12312 : index_count

logic temp___1229 : (int,partition_index) farray

logic temp___1228 : index

logic temp___12281 : index

logic temp___12282 : index_count

logic temp___1227 : capacity_range

logic temp___12271 : us_main_type

logic temp___1212 : index

logic temp___12121 : index

logic temp___12122 : index_count

logic o41 : int

logic o42 : index_count

logic o43 : index

logic o44 : index

logic o45 : index

logic o46 : index_count

logic temp___1213 : index

logic temp___12131 : index

logic temp___12132 : index_count

logic o47 : int

logic o48 : index

logic o49 : index

logic o50 : index

logic o51 : index_count

logic temp___1215 : index

logic temp___12151 : index

logic temp___12152 : index_count

logic o52 : index_count

logic o53 : index

logic o54 : index

logic o55 : index_count

logic temp___1217 : index

logic temp___12171 : index

logic temp___12172 : index_count

logic partition_refinement__make_new_partitions__B_2__save_length__assume : int

logic o56 : int

logic o57 : int

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : index

logic o62 : index

logic o63 : index_count

logic temp___1222 : int

logic temp___1220 : (int,partition_index) farray

logic o64 : partition_index

logic o65 : (int,partition_index) farray

logic k1 : int

logic k2 : int

logic o66 : int

logic o67 : partition_index

logic o68 : int

logic k3 : int

logic us : int

logic o69 : int

logic o70 : bool

logic o71 : int

logic o72 : partition_index

logic o73 : int

logic o74 : partition_index

logic o75 : (int,partition_index) farray

logic k4 : int

logic o76 : int

logic o77 : int

logic k5 : int

logic o78 : int

logic o79 : partition_index

logic o80 : int

logic o81 : int

logic o82 : int

logic o83 : bool

logic k6 : int

logic o84 : int

logic o85 : partition_index

logic o86 : int

logic o87 : int

logic o88 : int

logic o89 : bool

logic k7 : int

logic o90 : int

logic o91 : partition_index

logic o92 : int

logic o93 : index

logic o94 : index

logic o95 : index_count

logic k8 : int

logic o96 : int

logic o97 : partition_index

logic o98 : int

logic o99 : index

logic o100 : index

logic o101 : index_count

logic o102 : int

logic o103 : partition_index

logic o104 : int

logic o105 : index

logic o106 : index

logic o107 : index_count

logic o108 : index

logic o109 : index

logic o110 : index_count

logic o111 : index

logic o112 : int

logic o113 : bool

logic k9 : int

logic o114 : int

logic o115 : partition_index

logic o116 : int

logic o117 : index

logic o118 : index

logic o119 : index_count

logic k10 : int

logic o120 : int

logic o121 : partition_index

logic o122 : int

logic o123 : index

logic o124 : index

logic o125 : index_count

logic o126 : int

logic o127 : partition_index

logic o128 : int

logic o129 : index

logic o130 : index

logic o131 : index_count

logic o132 : index

logic o133 : index

logic o134 : index_count

logic o135 : index

logic o136 : int

logic o137 : bool

logic k11 : int

logic o138 : int

logic o139 : partition_index

logic o140 : int

logic o141 : index

logic o142 : index

logic o143 : index_count

logic o144 : int

logic o145 : partition_index

logic o146 : int

logic o147 : index

logic o148 : index

logic o149 : index_count

logic o150 : index

logic o151 : index

logic o152 : index_count

logic o153 : index

logic o154 : int

logic o155 : bool

logic k12 : int

logic o156 : int

logic o157 : partition_index

logic o158 : int

logic o159 : index

logic o160 : index

logic o161 : index_count

logic o162 : int

logic o163 : partition_index

logic o164 : int

logic o165 : index

logic o166 : index

logic o167 : index_count

logic o168 : index

logic o169 : index

logic o170 : index_count

logic o171 : index

logic o172 : int

logic o173 : bool

logic k13 : int

logic l : int

logic o174 : int

logic o175 : index

logic o176 : index

logic o177 : index_count

logic o178 : int

logic o179 : index

logic o180 : index

logic o181 : index_count

logic o182 : int

logic o183 : index

logic o184 : index

logic o185 : index_count

logic o186 : index

logic o187 : index

logic o188 : index_count

logic o189 : index

logic o190 : int

logic o191 : int

logic o192 : index

logic o193 : index

logic o194 : index_count

logic o195 : index

logic o196 : index

logic o197 : index_count

logic o198 : index

logic o199 : int

logic o200 : bool

logic o201 : bool

logic l1 : int

logic o202 : int

logic o203 : index

logic o204 : index

logic o205 : index_count

logic o206 : int

logic o207 : index

logic o208 : index

logic o209 : index_count

logic o210 : int

logic o211 : index

logic o212 : index

logic o213 : index_count

logic o214 : index

logic o215 : index

logic o216 : index_count

logic o217 : index

logic o218 : int

logic o219 : int

logic o220 : index

logic o221 : index

logic o222 : index_count

logic o223 : index

logic o224 : index

logic o225 : index_count

logic o226 : index

logic o227 : int

logic o228 : bool

logic o229 : bool

logic k14 : int

logic o230 : int

logic o231 : int

logic o232 : int

logic o233 : bool

logic o234 : bool

logic l2 : int

logic o235 : int

logic o236 : index

logic o237 : index

logic o238 : index_count

logic o239 : int

logic o240 : index

logic o241 : index

logic o242 : index_count

logic o243 : int

logic o244 : index

logic o245 : index

logic o246 : index_count

logic o247 : index

logic o248 : index

logic o249 : index_count

logic o250 : index

logic o251 : int

logic o252 : int

logic o253 : index

logic o254 : index

logic o255 : index_count

logic o256 : index

logic o257 : index

logic o258 : index_count

logic o259 : index

logic o260 : int

logic o261 : bool

logic o262 : bool

logic k15 : int

logic o263 : index

logic o264 : index

logic o265 : index_count

logic o266 : index

logic o267 : index

logic o268 : index_count

logic o269 : index

logic o270 : index

logic o271 : index_count

logic o272 : index

logic o273 : int

logic o274 : bool

logic k16 : int

logic o275 : int

logic o276 : int

logic o277 : bool

logic l3 : int

logic o278 : int

logic o279 : index

logic o280 : index

logic o281 : index_count

logic o282 : int

logic o283 : index

logic o284 : index

logic o285 : index_count

logic o286 : int

logic o287 : index

logic o288 : index

logic o289 : index_count

logic o290 : index

logic o291 : index

logic o292 : index_count

logic o293 : index

logic o294 : int

logic o295 : int

logic o296 : index

logic o297 : index

logic o298 : index_count

logic o299 : index

logic o300 : index

logic o301 : index_count

logic o302 : index

logic o303 : int

logic o304 : bool

logic o305 : bool

logic j3 : int

logic o306 : int

logic o307 : int

logic o308 : bool

logic k17 : int

logic o309 : int

logic o310 : index

logic o311 : index

logic o312 : index_count

logic o313 : index

logic o314 : index

logic o315 : index_count

logic o316 : index

logic o317 : int

logic o318 : int

logic o319 : index

logic o320 : index

logic o321 : index_count

logic o322 : index

logic o323 : index

logic o324 : index_count

logic o325 : index

logic o326 : int

logic o327 : bool

logic o328 : bool

logic j4 : int

logic o329 : index

logic o330 : index

logic o331 : index_count

logic o332 : index

logic o333 : index

logic o334 : index_count

logic o335 : index

logic o336 : index

logic o337 : index_count

logic o338 : index

logic o339 : int

logic o340 : bool

logic p__split_fields1 : us_main_type

logic f1 : (int,partition_index) farray

logic p_elem__split_fields3 : index

logic p_elem__split_fields4 : index

logic p_elem__split_fields5 : index_count

logic p_prime__split_fields3 : index

logic p_prime__split_fields4 : index

logic p_prime__split_fields5 : index_count

logic p_prime_index1 : int

logic i1 : int

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : bool

logic result6 : int

logic j5 : int

logic p__split_fields2 : us_main_type

logic f2 : (int,partition_index) farray

logic p_elem__split_fields6 : index

logic p_elem__split_fields7 : index

logic p_elem__split_fields8 : index_count

logic p_prime__split_fields6 : index

logic p_prime__split_fields7 : index

logic p_prime__split_fields8 : index_count

logic p_prime_index2 : int

logic j6 : int

logic i2 : int

logic rho : us_main_type

logic rho1 : us_main_type

logic result7 : index

logic result8 : index

logic result9 : index_count

logic p_elem__split_fields9 : index

logic p_elem__split_fields10 : index

logic p_elem__split_fields11 : index_count

logic result10 : index

logic result11 : index

logic result12 : index_count

logic p_prime__split_fields9 : index

logic p_prime__split_fields10 : index

logic p_prime__split_fields11 : index_count

logic result13 : index

logic result14 : index

logic result15 : index_count

logic p_elem__split_fields12 : index

logic p_elem__split_fields13 : index

logic p_elem__split_fields14 : index_count

logic result16 : index

logic result17 : index

logic result18 : index_count

logic p_elem__split_fields15 : index

logic p_elem__split_fields16 : index

logic p_elem__split_fields17 : index_count

logic partition_refinement__partitions__replace_element__container__fields : us_main_type

logic result19 : us_main_type

logic p__split_fields3 : us_main_type

logic result20 : int

logic p_prime_index3 : int

logic partition_refinement__partitions__append__2__container__fields : us_main_type

logic result21 : us_main_type

logic p__split_fields4 : us_main_type

logic result22 : int

logic i3 : int

logic result23 : (int,partition_index) farray

logic f3 : (int,partition_index) farray

logic f4 : (int,partition_index) farray

logic i4 : int

logic result24 : bool

logic result25 : int

logic i5 : int

logic result26 : (int,partition_index) farray

logic f5 : (int,partition_index) farray

logic f6 : (int,partition_index) farray

logic i6 : int

logic f7 : (int,partition_index) farray

logic i7 : int

logic f8 : (int,partition_index) farray

logic i8 : int

logic f9 : (int,partition_index) farray

logic i9 : int

logic result27 : bool

logic result28 : bool

logic result29 : bool

logic result30 : bool

logic p__split_fields5 : us_main_type

logic f10 : (int,partition_index) farray

logic p_elem__split_fields18 : index

logic p_elem__split_fields19 : index

logic p_elem__split_fields20 : index_count

logic p_prime__split_fields12 : index

logic p_prime__split_fields13 : index

logic p_prime__split_fields14 : index_count

logic p_prime_index4 : int

logic i10 : int

logic p__split_fields6 : us_main_type

logic f11 : (int,partition_index) farray

logic p_elem__split_fields21 : index

logic p_elem__split_fields22 : index

logic p_elem__split_fields23 : index_count

logic p_prime__split_fields15 : index

logic p_prime__split_fields16 : index

logic p_prime__split_fields17 : index_count

logic p_prime_index5 : int

logic i11 : int

logic rho2 : us_main_type

logic rho3 : us_main_type

logic result31 : bool

logic result32 : bool

logic p__split_fields7 : us_main_type

logic f12 : (int,partition_index) farray

logic p_elem__split_fields24 : index

logic p_elem__split_fields25 : index

logic p_elem__split_fields26 : index_count

logic p_prime__split_fields18 : index

logic p_prime__split_fields19 : index

logic p_prime__split_fields20 : index_count

logic p_prime_index6 : int

logic j7 : int

logic i12 : int

logic p__split_fields8 : us_main_type

logic f13 : (int,partition_index) farray

logic p_elem__split_fields27 : index

logic p_elem__split_fields28 : index

logic p_elem__split_fields29 : index_count

logic p_prime__split_fields21 : index

logic p_prime__split_fields22 : index

logic p_prime__split_fields23 : index_count

logic p_prime_index7 : int

logic j8 : int

logic i13 : int

logic p__split_fields9 : us_main_type

logic f14 : (int,partition_index) farray

logic p_elem__split_fields30 : index

logic p_elem__split_fields31 : index

logic p_elem__split_fields32 : index_count

logic p_prime__split_fields24 : index

logic p_prime__split_fields25 : index

logic p_prime__split_fields26 : index_count

logic p_prime_index8 : int

logic j9 : int

logic i14 : int

logic p__split_fields10 : us_main_type

logic f15 : (int,partition_index) farray

logic p_elem__split_fields33 : index

logic p_elem__split_fields34 : index

logic p_elem__split_fields35 : index_count

logic p_prime__split_fields27 : index

logic p_prime__split_fields28 : index

logic p_prime__split_fields29 : index_count

logic p_prime_index9 : int

logic j10 : int

logic i15 : int

logic p__split_fields11 : us_main_type

logic f16 : (int,partition_index) farray

logic p_elem__split_fields36 : index

logic p_elem__split_fields37 : index

logic p_elem__split_fields38 : index_count

logic p_prime__split_fields30 : index

logic p_prime__split_fields31 : index

logic p_prime__split_fields32 : index_count

logic p_prime_index10 : int

logic j11 : int

logic i16 : int

logic p__split_fields12 : us_main_type

logic f17 : (int,partition_index) farray

logic p_elem__split_fields39 : index

logic p_elem__split_fields40 : index

logic p_elem__split_fields41 : index_count

logic p_prime__split_fields33 : index

logic p_prime__split_fields34 : index

logic p_prime__split_fields35 : index_count

logic p_prime_index11 : int

logic j12 : int

logic i17 : int

logic result33 : bool

logic result34 : bool

logic result35 : bool

logic result36 : bool

axiom H : ((((of_int(1) = true) -> (o38 = to_rep3(p__split_discrs))) and
  ((not (of_int(1) = true)) -> (o38 = 10001))) and (in_range9(o38) and
  (((of_int(1) = true) -> (o38 = to_rep3(p__split_discrs))) and
  ((not (of_int(1) = true)) -> (o38 = 10001)))))

axiom H1 : ((o36 = length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields3 = { rec__partition_refinement__partitions__vector =
  p__split_fields } })) and (in_range9(o36) and (((of_int(1) = true) ->
  (o36 <= to_rep3(p__split_discrs))) and ((not (of_int(1) = true)) ->
  (o36 <= 10001)))))

axiom H2 : (o37 = (2 * o36))

axiom H3 : ((o39 = o37) and in_range1(o37))

axiom H4 : (((o39 <= o38) -> (result = true)) and ((not (o39 <= o38)) ->
  (result = false)))

axiom H5 : (result = true)

axiom H6 : ((o35 = length({ us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields3 = { rec__partition_refinement__partitions__vector =
  p__split_fields } })) and (in_range9(o35) and (((of_int(1) = true) ->
  (o35 <= to_rep3(p__split_discrs))) and ((not (of_int(1) = true)) ->
  (o35 <= 10001)))))

axiom H7 : (((o35 <= 5000) -> (result1 = true)) and ((not (o35 <= 5000)) ->
  (result1 = false)))

axiom H8 : (result1 = true)

axiom H9 : ((result2 = true) <->
  (forall j13:int. (((0 <= j13) and (j13 <= 5)) ->
  ((0 <= to_rep2((f[j13]))) and (to_rep2((f[j13])) <= (length({
  us_split_discrs1 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields3 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }) - 1))))))

axiom H10 : (result2 = true)

axiom H11 : (0 <= j2)

axiom H12 : (j2 <= 5)

 (* File "partition_refinement.adb", line 18, characters 0-0 *)
goal WP_parameter_def : (0 <= to_rep2((f[j2])))
