(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic concat_singleton_left : character, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_singleton_left_def :
  (forall a:character.
  (forall b:(int,character) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  (((concat_singleton_left(a, a_first, b, b_first, b_last)[a_first]) = a) and
  (forall i:int [(concat_singleton_left(a, a_first, b, b_first, b_last)[i])].
  ((a_first <  i) -> ((concat_singleton_left(a, a_first, b, b_first,
  b_last)[i]) = (b[((i - a_first) + (b_first - 1))]))))))))

logic concat_singleton_right : (int,character) farray, int, int,
  character -> (int,character) farray

axiom concat_singleton_right_def :
  (forall a:(int,character) farray.
  (forall b:character.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)]. (((concat_singleton_right(a, a_first, a_last,
  b)[(a_last + 1)]) = b) and
  (forall i:int [(concat_singleton_right(a, a_first, a_last, b)[i])| (a[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat_singleton_right(a, a_first,
  a_last, b)[i]) = (a[i]))))))))

logic concat_singletons : character, int, character -> (int,character) farray

axiom concat_singletons_def :
  (forall a:character. forall b:character.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  (((concat_singletons(a, a_first, b)[a_first]) = a) and
  ((concat_singletons(a, a_first, b)[(a_first + 1)]) = b))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___String_Literal_575 : unit -> (int,character) farray

axiom temp___String_Literal_575__def_axiom :
  ((((to_rep((temp___String_Literal_575(void)[1])) = 83) and
  (to_rep((temp___String_Literal_575(void)[2])) = 117)) and
  (to_rep((temp___String_Literal_575(void)[3])) = 109)) and
  (to_rep((temp___String_Literal_575(void)[4])) = 40))

logic temp___String_Literal_578 : unit -> (int,character) farray

axiom temp___String_Literal_578__def_axiom :
  (((((to_rep((temp___String_Literal_578(void)[1])) = 32) and
  (to_rep((temp___String_Literal_578(void)[2])) = 41)) and
  (to_rep((temp___String_Literal_578(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_578(void)[4])) = 61)) and
  (to_rep((temp___String_Literal_578(void)[5])) = 32))

logic temp___String_Literal_583 : unit -> (int,character) farray

axiom temp___String_Literal_583__def_axiom :
  (((((((((((to_rep((temp___String_Literal_583(void)[1])) = 83) and
  (to_rep((temp___String_Literal_583(void)[2])) = 117)) and
  (to_rep((temp___String_Literal_583(void)[3])) = 109)) and
  (to_rep((temp___String_Literal_583(void)[4])) = 95)) and
  (to_rep((temp___String_Literal_583(void)[5])) = 79)) and
  (to_rep((temp___String_Literal_583(void)[6])) = 102)) and
  (to_rep((temp___String_Literal_583(void)[7])) = 95)) and
  (to_rep((temp___String_Literal_583(void)[8])) = 83)) and
  (to_rep((temp___String_Literal_583(void)[9])) = 117)) and
  (to_rep((temp___String_Literal_583(void)[10])) = 109)) and
  (to_rep((temp___String_Literal_583(void)[11])) = 40))

logic temp___String_Literal_586 : unit -> (int,character) farray

axiom temp___String_Literal_586__def_axiom :
  (((((to_rep((temp___String_Literal_586(void)[1])) = 32) and
  (to_rep((temp___String_Literal_586(void)[2])) = 41)) and
  (to_rep((temp___String_Literal_586(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_586(void)[4])) = 61)) and
  (to_rep((temp___String_Literal_586(void)[5])) = 32))

 (* File "main.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall x:int. forall n:int. forall i:int. forall result__:int.
  forall result2:int. forall o:int. forall o1:int. forall o2:int.
  forall o3:int. forall o4:int. forall o5:int.
  forall temp___579:(int,character) farray. forall temp___5791:t.
  forall o6:int. forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall temp___581:(int,character) farray.
  forall temp___5811:t. forall o12:int. forall o13:int. forall o14:int.
  forall o15:int. forall o16:int. forall o17:int.
  forall o18:(int,character) farray. forall o19:t. forall o20:int.
  forall o21:int. forall o22:int. forall o23:int. forall o24:int.
  forall o25:int. forall temp___587:(int,character) farray.
  forall temp___5871:t. forall o26:int. forall o27:int. forall o28:int.
  forall o29:int. forall o30:int. forall o31:int.
  forall temp___589:(int,character) farray. forall temp___5891:t.
  forall o32:int. forall o33:int. forall o34:int. forall o35:int.
  forall o36:int. forall o37:int. forall o38:(int,character) farray.
  forall o39:t. forall result:int. forall x1:int. forall result1:int.
  forall n1:int. forall result3:int. forall i1:int. forall i2:int.
  forall result__1:int. forall result21:int.
  forall power_and_sum__sum__result:int. forall result4:int.
  forall result__2:int. forall power_and_sum__sum_of_sum__result:int.
  forall result5:int. forall result22:int. (((result = x) and (x1 = 2)) ->
  (in_range1(x1) -> (((result1 = n) and (n1 = 15)) -> (in_range1(n1) ->
  (((result3 = i) and (i1 = 1)) -> (in_range2(i1) ->
  ((((- 2147483648) <= 2147483647) -> in_range1(result__)) ->
  ((((- 2147483648) <= 2147483647) -> in_range1(result2)) -> ((i1 <= n1) ->
  ((((((1 <= 2147483647) -> in_range2(i2)) and
  (((- 2147483648) <= 2147483647) -> in_range1(result__1))) and
  (((- 2147483648) <= 2147483647) -> in_range1(result21))) and (i2 <= n1)) ->
  (((((2 * power_and_sum__sum__result) = (i2 * (i2 + 1))) and
  in_range2(power_and_sum__sum__result)) and ((result4 = result__1) and
  (result__2 = power_and_sum__sum__result))) ->
  (((((6 * power_and_sum__sum_of_sum__result) = ((i2 * (i2 + 1)) * (i2 + 2))) and
  in_range2(power_and_sum__sum_of_sum__result)) and ((result5 = result21) and
  (result22 = power_and_sum__sum_of_sum__result))) ->
  (((((((((((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt))) and
  (o = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt))) + 1))) or
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)))) and
  (o = 0))) and ((((1 <= 4) and (o1 = ((4 - 1) + 1))) or ((not (1 <= 4)) and
  (o1 = 0))) and (o2 = (o1 + o)))) and (o3 = (1 + o2))) and
  (o4 = (o3 - 1))) and ((o5 = o4) and in_range2(o4))) and
  ((concat(temp___String_Literal_575(void), 1, 4,
  (to_string(attr__ATTRIBUTE_IMAGE1(i2))).elts,
  to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt))) = temp___579) and
  (mk(1, o5) = temp___5791))) and (((length({ elts = temp___579; rt =
  temp___5791 }) = 0) and ((temp___String_Literal_578(void) = temp___581) and
  (mk(1, 5) = temp___5811))) or ((not (length({ elts = temp___579; rt =
  temp___5791 }) = 0)) and ((((((((1 <= 5) and (o6 = ((5 - 1) + 1))) or
  ((not (1 <= 5)) and (o6 = 0))) and
  ((((to_rep1(first(temp___5791)) <= to_rep1(last(temp___5791))) and
  (o7 = ((to_rep1(last(temp___5791)) - to_rep1(first(temp___5791))) + 1))) or
  ((not (to_rep1(first(temp___5791)) <= to_rep1(last(temp___5791)))) and
  (o7 = 0))) and (o8 = (o7 + o6)))) and
  (o9 = (to_rep1(first(temp___5791)) + o8))) and (o10 = (o9 - 1))) and
  ((o11 = o10) and in_range2(o10))) and ((concat(temp___579,
  to_rep1(first(temp___5791)), to_rep1(last(temp___5791)),
  temp___String_Literal_578(void), 1, 5) = temp___581) and
  (mk(to_rep1(first(temp___5791)), o11) = temp___5811)))))) and (((length({
  elts = temp___581; rt = temp___5811 }) = 0) and
  (((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).elts = o18) and
  (mk(to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt))) = o19))) or
  ((not (length({ elts = temp___581; rt = temp___5811 }) = 0)) and
  ((((((((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt))) and
  (o12 = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt))) + 1))) or
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt)))) and
  (o12 = 0))) and
  ((((to_rep1(first(temp___5811)) <= to_rep1(last(temp___5811))) and
  (o13 = ((to_rep1(last(temp___5811)) - to_rep1(first(temp___5811))) + 1))) or
  ((not (to_rep1(first(temp___5811)) <= to_rep1(last(temp___5811)))) and
  (o13 = 0))) and (o14 = (o13 + o12)))) and
  (o15 = (to_rep1(first(temp___5811)) + o14))) and (o16 = (o15 - 1))) and
  ((o17 = o16) and in_range2(o16))) and ((concat(temp___581,
  to_rep1(first(temp___5811)), to_rep1(last(temp___5811)),
  (to_string(attr__ATTRIBUTE_IMAGE1(result__2))).elts,
  to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result__2))).rt))) = o18) and
  (mk(to_rep1(first(temp___5811)), o17) = o19)))))) ->
  (((((((((((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt))) and
  (o20 = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt))) + 1))) or
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)))) and
  (o20 = 0))) and ((((1 <= 11) and (o21 = ((11 - 1) + 1))) or
  ((not (1 <= 11)) and (o21 = 0))) and (o22 = (o21 + o20)))) and
  (o23 = (1 + o22))) and (o24 = (o23 - 1))) and ((o25 = o24) and
  in_range2(o24))) and ((concat(temp___String_Literal_583(void), 1, 11,
  (to_string(attr__ATTRIBUTE_IMAGE1(i2))).elts,
  to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(i2))).rt))) = temp___587) and
  (mk(1, o25) = temp___5871))) and (((length({ elts = temp___587; rt =
  temp___5871 }) = 0) and ((temp___String_Literal_586(void) = temp___589) and
  (mk(1, 5) = temp___5891))) or ((not (length({ elts = temp___587; rt =
  temp___5871 }) = 0)) and ((((((((1 <= 5) and (o26 = ((5 - 1) + 1))) or
  ((not (1 <= 5)) and (o26 = 0))) and
  ((((to_rep1(first(temp___5871)) <= to_rep1(last(temp___5871))) and
  (o27 = ((to_rep1(last(temp___5871)) - to_rep1(first(temp___5871))) + 1))) or
  ((not (to_rep1(first(temp___5871)) <= to_rep1(last(temp___5871)))) and
  (o27 = 0))) and (o28 = (o27 + o26)))) and
  (o29 = (to_rep1(first(temp___5871)) + o28))) and (o30 = (o29 - 1))) and
  ((o31 = o30) and in_range2(o30))) and ((concat(temp___587,
  to_rep1(first(temp___5871)), to_rep1(last(temp___5871)),
  temp___String_Literal_586(void), 1, 5) = temp___589) and
  (mk(to_rep1(first(temp___5871)), o31) = temp___5891)))))) and (((length({
  elts = temp___589; rt = temp___5891 }) = 0) and
  (((to_string(attr__ATTRIBUTE_IMAGE1(result22))).elts = o38) and
  (mk(to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt))) = o39))) or
  ((not (length({ elts = temp___589; rt = temp___5891 }) = 0)) and
  ((((((((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt))) and
  (o32 = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt))) + 1))) or
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt)))) and
  (o32 = 0))) and
  ((((to_rep1(first(temp___5891)) <= to_rep1(last(temp___5891))) and
  (o33 = ((to_rep1(last(temp___5891)) - to_rep1(first(temp___5891))) + 1))) or
  ((not (to_rep1(first(temp___5891)) <= to_rep1(last(temp___5891)))) and
  (o33 = 0))) and (o34 = (o33 + o32)))) and
  (o35 = (to_rep1(first(temp___5891)) + o34))) and (o36 = (o35 - 1))) and
  ((o37 = o36) and in_range2(o36))) and ((concat(temp___589,
  to_rep1(first(temp___5891)), to_rep1(last(temp___5891)),
  (to_string(attr__ATTRIBUTE_IMAGE1(result22))).elts,
  to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(result22))).rt))) = o38) and
  (mk(to_rep1(first(temp___5891)), o37) = o39)))))) ->
  in_range1((i2 + 1)))))))))))))))))
