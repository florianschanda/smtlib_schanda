(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type program_phase_t

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : program_phase_t, program_phase_t -> bool

logic dummy5 : program_phase_t

type program_phase_t__ref = { program_phase_t__content : program_phase_t
}

function program_phase_t__ref___projection(a: program_phase_t__ref) : program_phase_t =
  (a).program_phase_t__content

type counter_range_t

predicate in_range5(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : counter_range_t, counter_range_t -> bool

logic dummy6 : counter_range_t

type counter_range_t__ref = { counter_range_t__content : counter_range_t
}

function counter_range_t__ref___projection(a: counter_range_t__ref) : counter_range_t =
  (a).counter_range_t__content

logic to_rep2 : counter_range_t -> int

logic of_rep2 : int -> counter_range_t

axiom inversion_axiom2 :
  (forall x:counter_range_t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:counter_range_t [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type candidate_number_t

predicate in_range6(x: int) = ((0 <= x) and (x <= 20))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : candidate_number_t, candidate_number_t -> bool

logic dummy7 : candidate_number_t

type candidate_number_t__ref = { candidate_number_t__content :
candidate_number_t
}

function candidate_number_t__ref___projection(a: candidate_number_t__ref) : candidate_number_t =
  (a).candidate_number_t__content

type ttotal_range_tB

predicate in_range7(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : ttotal_range_tB, ttotal_range_tB -> bool

logic dummy8 : ttotal_range_tB

type ttotal_range_tB__ref = { ttotal_range_tB__content : ttotal_range_tB
}

function ttotal_range_tB__ref___projection(a: ttotal_range_tB__ref) : ttotal_range_tB =
  (a).ttotal_range_tB__content

type total_range_t

predicate in_range8(x: int) = ((0 <= x) and (x <= 210000))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : total_range_t, total_range_t -> bool

logic dummy9 : total_range_t

type total_range_t__ref = { total_range_t__content : total_range_t
}

function total_range_t__ref___projection(a: total_range_t__ref) : total_range_t =
  (a).total_range_t__content

logic dummy10 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type map__ref1 = { map__content1 : (int,(int,character) farray) farray
}

logic slide1 : (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,character) farray) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,(int,character) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq12 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int, int -> bool

axiom bool_eq_def10 :
  (forall a:(int,(int,character) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,character) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq12(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_174:int. ((((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) and (bool_eq5((a[temp___idx_174]), 1, 70,
  (b[((b__first - a__first) + temp___idx_174)]), 1, 70) = true)) or
  (not ((a__first <= temp___idx_174) and (temp___idx_174 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq5((a[temp___idx_174]), 1, 70,
  (b[((b__first - a__first) + temp___idx_174)]), 1, 70) = true))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq5((a[temp___idx_174]), 1, 70,
  (b[((b__first - a__first) + temp___idx_174)]), 1, 70) = true)))))))

type map__ref2 = { map__content2 : (int,counter_range_t) farray
}

logic slide2 : (int,counter_range_t) farray, int,
  int -> (int,counter_range_t) farray

axiom slide_eq2 :
  (forall a:(int,counter_range_t) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,counter_range_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq13 : (int,counter_range_t) farray, int, int,
  (int,counter_range_t) farray, int, int -> bool

axiom bool_eq_def11 :
  (forall a:(int,counter_range_t) farray. forall a__first:int.
  forall a__last:int. forall b:(int,counter_range_t) farray.
  forall b__first:int. forall b__last:int [bool_eq13(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_175:int. ((((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) and
  (to_rep2((a[temp___idx_175])) = to_rep2((b[((b__first - a__first) + temp___idx_175)])))) or
  (not ((a__first <= temp___idx_175) and (temp___idx_175 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) ->
  (to_rep2((a[temp___idx_175])) = to_rep2((b[((b__first - a__first) + temp___idx_175)]))))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) ->
  (to_rep2((a[temp___idx_175])) = to_rep2((b[((b__first - a__first) + temp___idx_175)])))))))))

type map__ref3 = { map__content3 : (int,bool) farray
}

logic slide3 : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq3 :
  (forall a:(int,bool) farray.
  (forall first2:int [slide3(a, first2, first2)]. (slide3(a, first2,
  first2) = a)))

axiom slide_def3 :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq14 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def12 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq14(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_176:int. ((((a__first <= temp___idx_176) and
  (temp___idx_176 <= a__last)) and
  ((a[temp___idx_176]) = (b[((b__first - a__first) + temp___idx_176)]))) or
  (not ((a__first <= temp___idx_176) and (temp___idx_176 <= a__last)))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_176:int. (((a__first <= temp___idx_176) and
  (temp___idx_176 <= a__last)) ->
  ((a[temp___idx_176]) = (b[((b__first - a__first) + temp___idx_176)])))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_176:int. (((a__first <= temp___idx_176) and
  (temp___idx_176 <= a__last)) ->
  ((a[temp___idx_176]) = (b[((b__first - a__first) + temp___idx_176)]))))))))

logic program_phase : int

logic attr__ATTRIBUTE_ADDRESS : int

logic candidates : (int,(int,character) farray) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic last_candidate : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic counters : (int,counter_range_t) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

type tcandidate_number_tB

predicate in_range9(x: int) = (((- 128) <= x) and (x <= 127))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : tcandidate_number_tB, tcandidate_number_tB -> bool

logic dummy11 : tcandidate_number_tB

type tcandidate_number_tB__ref = { tcandidate_number_tB__content :
tcandidate_number_tB
}

function tcandidate_number_tB__ref___projection(a: tcandidate_number_tB__ref) : tcandidate_number_tB =
  (a).tcandidate_number_tB__content

logic to_rep3 : tcandidate_number_tB -> int

logic of_rep3 : int -> tcandidate_number_tB

axiom inversion_axiom3 :
  (forall x:tcandidate_number_tB [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:tcandidate_number_tB [to_rep3(x)]. in_range9(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range9(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq11 : tcandidate_number_tB, tcandidate_number_tB -> bool

logic dummy12 : tcandidate_number_tB

type t83b__ref = { t83b__content : tcandidate_number_tB
}

function t83b__ref___projection(a: t83b__ref) : tcandidate_number_tB =
  (a).t83b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic temp___String_Literal_798 : unit -> (int,character) farray

axiom temp___String_Literal_798__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_798(void)[1])) = 42) and
  (to_rep((temp___String_Literal_798(void)[2])) = 42)) and
  (to_rep((temp___String_Literal_798(void)[3])) = 42)) and
  (to_rep((temp___String_Literal_798(void)[4])) = 42)) and
  (to_rep((temp___String_Literal_798(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_798(void)[6])) = 82)) and
  (to_rep((temp___String_Literal_798(void)[7])) = 101)) and
  (to_rep((temp___String_Literal_798(void)[8])) = 115)) and
  (to_rep((temp___String_Literal_798(void)[9])) = 117)) and
  (to_rep((temp___String_Literal_798(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_798(void)[11])) = 116)) and
  (to_rep((temp___String_Literal_798(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_798(void)[13])) = 42)) and
  (to_rep((temp___String_Literal_798(void)[14])) = 42)) and
  (to_rep((temp___String_Literal_798(void)[15])) = 42)) and
  (to_rep((temp___String_Literal_798(void)[16])) = 42))

logic temp___String_Literal_803 : unit -> (int,character) farray

axiom temp___String_Literal_803__def_axiom :
  ((((((((((to_rep((temp___String_Literal_803(void)[1])) = 32) and
  (to_rep((temp___String_Literal_803(void)[2])) = 118)) and
  (to_rep((temp___String_Literal_803(void)[3])) = 111)) and
  (to_rep((temp___String_Literal_803(void)[4])) = 116)) and
  (to_rep((temp___String_Literal_803(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_803(void)[6])) = 40)) and
  (to_rep((temp___String_Literal_803(void)[7])) = 115)) and
  (to_rep((temp___String_Literal_803(void)[8])) = 41)) and
  (to_rep((temp___String_Literal_803(void)[9])) = 58)) and
  (to_rep((temp___String_Literal_803(void)[10])) = 32))

logic temp___String_Literal_804 : unit -> (int,character) farray

axiom temp___String_Literal_804__def_axiom : true

logic temp___String_Literal_807 : unit -> (int,character) farray

axiom temp___String_Literal_807__def_axiom :
  (((((((((((((((((((((((to_rep((temp___String_Literal_807(void)[1])) = 84) and
  (to_rep((temp___String_Literal_807(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_807(void)[3])) = 116)) and
  (to_rep((temp___String_Literal_807(void)[4])) = 97)) and
  (to_rep((temp___String_Literal_807(void)[5])) = 108)) and
  (to_rep((temp___String_Literal_807(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_807(void)[7])) = 110)) and
  (to_rep((temp___String_Literal_807(void)[8])) = 117)) and
  (to_rep((temp___String_Literal_807(void)[9])) = 109)) and
  (to_rep((temp___String_Literal_807(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_807(void)[11])) = 101)) and
  (to_rep((temp___String_Literal_807(void)[12])) = 114)) and
  (to_rep((temp___String_Literal_807(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_807(void)[14])) = 111)) and
  (to_rep((temp___String_Literal_807(void)[15])) = 102)) and
  (to_rep((temp___String_Literal_807(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_807(void)[17])) = 118)) and
  (to_rep((temp___String_Literal_807(void)[18])) = 111)) and
  (to_rep((temp___String_Literal_807(void)[19])) = 116)) and
  (to_rep((temp___String_Literal_807(void)[20])) = 101)) and
  (to_rep((temp___String_Literal_807(void)[21])) = 115)) and
  (to_rep((temp___String_Literal_807(void)[22])) = 58)) and
  (to_rep((temp___String_Literal_807(void)[23])) = 32))

logic temp___String_Literal_808 : unit -> (int,character) farray

axiom temp___String_Literal_808__def_axiom : true

logic temp___String_Literal_809 : unit -> (int,character) farray

axiom temp___String_Literal_809__def_axiom :
  (((((((((((((((((((((((((((((to_rep((temp___String_Literal_809(void)[1])) = 84) and
  (to_rep((temp___String_Literal_809(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_809(void)[3])) = 116)) and
  (to_rep((temp___String_Literal_809(void)[4])) = 97)) and
  (to_rep((temp___String_Literal_809(void)[5])) = 108)) and
  (to_rep((temp___String_Literal_809(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_809(void)[7])) = 110)) and
  (to_rep((temp___String_Literal_809(void)[8])) = 117)) and
  (to_rep((temp___String_Literal_809(void)[9])) = 109)) and
  (to_rep((temp___String_Literal_809(void)[10])) = 98)) and
  (to_rep((temp___String_Literal_809(void)[11])) = 101)) and
  (to_rep((temp___String_Literal_809(void)[12])) = 114)) and
  (to_rep((temp___String_Literal_809(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_809(void)[14])) = 111)) and
  (to_rep((temp___String_Literal_809(void)[15])) = 102)) and
  (to_rep((temp___String_Literal_809(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_809(void)[17])) = 118)) and
  (to_rep((temp___String_Literal_809(void)[18])) = 97)) and
  (to_rep((temp___String_Literal_809(void)[19])) = 108)) and
  (to_rep((temp___String_Literal_809(void)[20])) = 105)) and
  (to_rep((temp___String_Literal_809(void)[21])) = 100)) and
  (to_rep((temp___String_Literal_809(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_809(void)[23])) = 118)) and
  (to_rep((temp___String_Literal_809(void)[24])) = 111)) and
  (to_rep((temp___String_Literal_809(void)[25])) = 116)) and
  (to_rep((temp___String_Literal_809(void)[26])) = 101)) and
  (to_rep((temp___String_Literal_809(void)[27])) = 115)) and
  (to_rep((temp___String_Literal_809(void)[28])) = 58)) and
  (to_rep((temp___String_Literal_809(void)[29])) = 32))

logic temp___String_Literal_810 : unit -> (int,character) farray

axiom temp___String_Literal_810__def_axiom : true

logic temp___String_Literal_811 : unit -> (int,character) farray

axiom temp___String_Literal_811__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_811(void)[1])) = 42) and
  (to_rep((temp___String_Literal_811(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_811(void)[3])) = 87)) and
  (to_rep((temp___String_Literal_811(void)[4])) = 105)) and
  (to_rep((temp___String_Literal_811(void)[5])) = 110)) and
  (to_rep((temp___String_Literal_811(void)[6])) = 110)) and
  (to_rep((temp___String_Literal_811(void)[7])) = 101)) and
  (to_rep((temp___String_Literal_811(void)[8])) = 114)) and
  (to_rep((temp___String_Literal_811(void)[9])) = 40)) and
  (to_rep((temp___String_Literal_811(void)[10])) = 115)) and
  (to_rep((temp___String_Literal_811(void)[11])) = 41)) and
  (to_rep((temp___String_Literal_811(void)[12])) = 32))

logic temp___String_Literal_812 : unit -> (int,character) farray

axiom temp___String_Literal_812__def_axiom : true

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall total:int. forall valid_total:int. forall i:int. forall result:int.
  forall total1:int. forall result1:int. forall i1:int. forall total2:int.
  forall i2:int. (in_range4(program_phase) -> (in_range6(last_candidate) ->
  ((program_phase = 2) -> (((result = total) and (total1 = 0)) ->
  (in_range8(total1) -> (((0 <= 210000) -> in_range8(valid_total)) -> ((({
  int__content = result1 } = { int__content = i }) and (i1 = 0)) ->
  (((0 <= i1) and (i1 <= last_candidate)) -> ((((((0 <  i2) ->
  (to_rep2((counters[0])) <= total2)) and (last_candidate <= 20)) and
  ((0 <= i2) and (i2 <= 20))) and (total2 <= (i2 * 10000))) ->
  (((((0 <= 210000) -> in_range8(total2)) and ((0 <= last_candidate) ->
  dynamic_property1(0, last_candidate, i2))) and ((0 <= i2) and
  (i2 <= last_candidate))) -> in_range7((i2 * 10000)))))))))))))
