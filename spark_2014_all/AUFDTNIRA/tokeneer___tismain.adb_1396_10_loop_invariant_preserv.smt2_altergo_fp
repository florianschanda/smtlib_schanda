(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type presencet

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : presencet, presencet -> bool

logic dummy : presencet

type presencet__ref = { presencet__content : presencet
}

function presencet__ref___projection(a: presencet__ref) : presencet =
  (a).presencet__content

type privileget

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : privileget, privileget -> bool

logic dummy1 : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep : privileget -> int

logic of_rep : int -> privileget

axiom inversion_axiom :
  (forall x:privileget [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:privileget [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type opandnullt

predicate in_range3(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : opandnullt, opandnullt -> bool

logic dummy2 : opandnullt

type opandnullt__ref = { opandnullt__content : opandnullt
}

function opandnullt__ref___projection(a: opandnullt__ref) : opandnullt =
  (a).opandnullt__content

logic to_rep1 : opandnullt -> int

logic of_rep1 : int -> opandnullt

axiom inversion_axiom1 :
  (forall x:opandnullt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:opandnullt [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__admin__t__rolepresent : privileget;
rec__admin__t__currentop : opandnullt
}

function us_split_fields_RolePresent__projection(a: us_split_fields) : privileget =
  (a).rec__admin__t__rolepresent

function us_split_fields_CurrentOp__projection(a: us_split_fields) : opandnullt =
  (a).rec__admin__t__currentop

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep1(((a).us_split_fields1).rec__admin__t__currentop) = to_rep1(((b).us_split_fields1).rec__admin__t__currentop))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep1(((a).us_split_fields1).rec__admin__t__currentop) = to_rep1(((b).us_split_fields1).rec__admin__t__currentop)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__size({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__alignment({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

logic admin__t__rolepresent__first__bit : int

logic admin__t__rolepresent__last__bit : int

logic admin__t__rolepresent__position : int

axiom admin__t__rolepresent__first__bit_axiom :
  (0 <= admin__t__rolepresent__first__bit)

axiom admin__t__rolepresent__last__bit_axiom :
  (admin__t__rolepresent__first__bit <  admin__t__rolepresent__last__bit)

axiom admin__t__rolepresent__position_axiom :
  (0 <= admin__t__rolepresent__position)

logic admin__t__currentop__first__bit : int

logic admin__t__currentop__last__bit : int

logic admin__t__currentop__position : int

axiom admin__t__currentop__first__bit_axiom :
  (0 <= admin__t__currentop__first__bit)

axiom admin__t__currentop__last__bit_axiom :
  (admin__t__currentop__first__bit <  admin__t__currentop__last__bit)

axiom admin__t__currentop__position_axiom :
  (0 <= admin__t__currentop__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : privileget

logic dummy4 : opandnullt

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic rolepresent : us_rep -> int

logic rolepresent__function_guard : int, us_rep -> prop

axiom rolepresent__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. in_range2(rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })))

axiom rolepresent__def_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. (rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = to_rep(theadmin)))

logic isdoingop : us_rep -> bool

logic isdoingop__function_guard : bool, us_rep -> prop

type opt

predicate in_range4(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : opt, opt -> bool

logic dummy5 : opt

type opt__ref = { opt__content : opt
}

function opt__ref___projection(a: opt__ref) : opt = (a).opt__content

axiom isdoingop__post_axiom : true

axiom isdoingop__def_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) <->
  in_range4(to_rep1(theadmin1))))

logic thecurrentop : us_rep -> int

logic thecurrentop__function_guard : int, us_rep -> prop

axiom thecurrentop__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [thecurrentop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) ->
  in_range4(thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }))))

logic ispresent : us_rep -> bool

logic ispresent__function_guard : bool, us_rep -> prop

type adminprivileget

predicate in_range5(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : adminprivileget, adminprivileget -> bool

logic dummy6 : adminprivileget

type adminprivileget__ref = { adminprivileget__content : adminprivileget
}

function adminprivileget__ref___projection(a: adminprivileget__ref) : adminprivileget =
  (a).adminprivileget__content

axiom ispresent__post_axiom : true

axiom ispresent__def_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) <->
  in_range5(to_rep(theadmin))))

type tokenidt

predicate in_range6(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tokenidt, tokenidt -> bool

logic dummy7 : tokenidt

type tokenidt__ref = { tokenidt__content : tokenidt
}

function tokenidt__ref___projection(a: tokenidt__ref) : tokenidt =
  (a).tokenidt__content

type tryt

predicate in_range7(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tryt, tryt -> bool

logic dummy8 : tryt

type tryt__ref = { tryt__content : tryt
}

function tryt__ref___projection(a: tryt__ref) : tryt = (a).tryt__content

type statust

predicate in_range8(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : statust, statust -> bool

logic dummy9 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type yearst

predicate in_range9(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : yearst, yearst -> bool

logic dummy10 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep2 : yearst -> int

logic of_rep2 : int -> yearst

axiom inversion_axiom2 :
  (forall x:yearst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:yearst [to_rep2(x)]. in_range9(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range9(x) ->
  (to_rep2(of_rep2(x)) = x)))

type monthst

predicate in_range10(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : monthst, monthst -> bool

logic dummy11 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep3 : monthst -> int

logic of_rep3 : int -> monthst

axiom inversion_axiom3 :
  (forall x:monthst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:monthst [to_rep3(x)]. in_range10(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range10(x) ->
  (to_rep3(of_rep3(x)) = x)))

type dayst

predicate in_range11(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq11 : dayst, dayst -> bool

logic dummy12 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep4 : dayst -> int

logic of_rep4 : int -> dayst

axiom inversion_axiom4 :
  (forall x:dayst [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:dayst [to_rep4(x)]. in_range11(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range11(x) ->
  (to_rep4(of_rep4(x)) = x)))

type millisecst

predicate in_range12(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq12 : millisecst, millisecst -> bool

logic dummy13 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep5 : millisecst -> int

logic of_rep5 : int -> millisecst

axiom inversion_axiom5 :
  (forall x:millisecst [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:millisecst [to_rep5(x)]. in_range12(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range12(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields2) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields2) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields2) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields2) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___6__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq15 : us_rep1, us_rep1 -> bool

axiom bool_eq_def14 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq15(a, b)].
  ((((((to_rep2(((a).us_split_fields3).rec__clock__timet__year) = to_rep2(((b).us_split_fields3).rec__clock__timet__year)) and
  (to_rep3(((a).us_split_fields3).rec__clock__timet__month) = to_rep3(((b).us_split_fields3).rec__clock__timet__month))) and
  (to_rep4(((a).us_split_fields3).rec__clock__timet__day) = to_rep4(((b).us_split_fields3).rec__clock__timet__day))) and
  (to_rep5(((a).us_split_fields3).rec__clock__timet__millisec) = to_rep5(((b).us_split_fields3).rec__clock__timet__millisec))) ->
  (bool_eq15(a, b) = true)) and
  ((not ((((to_rep2(((a).us_split_fields3).rec__clock__timet__year) = to_rep2(((b).us_split_fields3).rec__clock__timet__year)) and
  (to_rep3(((a).us_split_fields3).rec__clock__timet__month) = to_rep3(((b).us_split_fields3).rec__clock__timet__month))) and
  (to_rep4(((a).us_split_fields3).rec__clock__timet__day) = to_rep4(((b).us_split_fields3).rec__clock__timet__day))) and
  (to_rep5(((a).us_split_fields3).rec__clock__timet__millisec) = to_rep5(((b).us_split_fields3).rec__clock__timet__millisec)))) ->
  (bool_eq15(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size1({ us_split_fields3 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment1({ us_split_fields3 = { rec__clock__timet__year =
  a; rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq13 : us_rep1, us_rep1 -> bool

logic dummy14 : yearst

logic dummy15 : monthst

logic dummy16 : dayst

logic dummy17 : millisecst

type timet__ref = { timet__content : us_rep1
}

function timet__ref___projection(a: timet__ref) : us_rep1 =
  (a).timet__content

logic attr__ATTRIBUTE_ADDRESS : int

logic thecurrenttime : us_split_fields2, us_private -> us_rep1

logic thecurrenttime__function_guard : us_rep1, us_split_fields2,
  us_private -> prop

axiom thecurrenttime__post_axiom : true

axiom thecurrenttime__def_axiom :
  (forall clock__currenttimevar__fields:yearst.
  forall clock__currenttimevar__fields1:monthst.
  forall clock__currenttimevar__fields2:dayst.
  forall clock__currenttimevar__fields3:millisecst.
  (forall clock__currenttime:us_private [thecurrenttime({
  rec__clock__timet__year = clock__currenttimevar__fields;
  rec__clock__timet__month = clock__currenttimevar__fields1;
  rec__clock__timet__day = clock__currenttimevar__fields2;
  rec__clock__timet__millisec = clock__currenttimevar__fields3 },
  clock__currenttime)]. (thecurrenttime({ rec__clock__timet__year =
  clock__currenttimevar__fields; rec__clock__timet__month =
  clock__currenttimevar__fields1; rec__clock__timet__day =
  clock__currenttimevar__fields2; rec__clock__timet__millisec =
  clock__currenttimevar__fields3 }, clock__currenttime) = {
  us_split_fields3 = { rec__clock__timet__year =
  clock__currenttimevar__fields; rec__clock__timet__month =
  clock__currenttimevar__fields1; rec__clock__timet__day =
  clock__currenttimevar__fields2; rec__clock__timet__millisec =
  clock__currenttimevar__fields3 } })))

logic greaterthanorequal : us_rep1, us_rep1 -> bool

logic greaterthanorequal__function_guard : bool, us_rep1, us_rep1 -> prop

logic greaterthan : us_rep1, us_rep1 -> bool

logic greaterthan__function_guard : bool, us_rep1, us_rep1 -> prop

axiom greaterthanorequal__post_axiom : true

axiom greaterthanorequal__def_axiom :
  (forall left:yearst. forall left1:monthst. forall left2:dayst.
  forall left3:millisecst. forall right:yearst. forall right1:monthst.
  forall right2:dayst. forall right3:millisecst [greaterthanorequal({
  us_split_fields3 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  })]. ((greaterthanorequal({ us_split_fields3 = { rec__clock__timet__year =
  left; rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true) <-> ((greaterthan({ us_split_fields3 = {
  rec__clock__timet__year = left; rec__clock__timet__month = left1;
  rec__clock__timet__day = left2; rec__clock__timet__millisec = left3 } }, {
  us_split_fields3 = { rec__clock__timet__year = right;
  rec__clock__timet__month = right1; rec__clock__timet__day = right2;
  rec__clock__timet__millisec = right3 } }) = true) or (bool_eq15({
  us_split_fields3 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true))))

type logfileindext

predicate in_range13(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq14 : logfileindext, logfileindext -> bool

logic dummy18 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep6 : logfileindext -> int

logic of_rep6 : int -> logfileindext

axiom inversion_axiom6 :
  (forall x:logfileindext [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:logfileindext [to_rep6(x)]. in_range13(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range13(x) ->
  (to_rep6(of_rep6(x)) = x)))

type logentrycountt

predicate in_range14(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq15 : logentrycountt, logentrycountt -> bool

logic dummy19 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep7 : logentrycountt -> int

logic of_rep7 : int -> logentrycountt

axiom inversion_axiom7 :
  (forall x:logentrycountt [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:logentrycountt [to_rep7(x)]. in_range14(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range14(x) ->
  (to_rep7(of_rep7(x)) = x)))

type logfilecountt

predicate in_range15(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq16 : logfilecountt, logfilecountt -> bool

logic dummy20 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep8 : logfilecountt -> int

logic of_rep8 : int -> logfilecountt

axiom inversion_axiom8 :
  (forall x:logfilecountt [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:logfilecountt [to_rep8(x)]. in_range15(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range15(x) ->
  (to_rep8(of_rep8(x)) = x)))

type map__ref = { map__content : (int,logfileindext) farray
}

logic slide : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq :
  (forall a:(int,logfileindext) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq19 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def18 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq19(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_195:int. ((((a__first <= temp___idx_195) and
  (temp___idx_195 <= a__last)) and
  (to_rep6((a[temp___idx_195])) = to_rep6((b[((b__first - a__first) + temp___idx_195)])))) or
  (not ((a__first <= temp___idx_195) and (temp___idx_195 <= a__last)))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_195:int. (((a__first <= temp___idx_195) and
  (temp___idx_195 <= a__last)) ->
  (to_rep6((a[temp___idx_195])) = to_rep6((b[((b__first - a__first) + temp___idx_195)]))))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_195:int. (((a__first <= temp___idx_195) and
  (temp___idx_195 <= a__last)) ->
  (to_rep6((a[temp___idx_195])) = to_rep6((b[((b__first - a__first) + temp___idx_195)])))))))))

logic dummy21 : (int,logfileindext) farray

logic value__size2 : int

logic object__size2 : (int,logfileindext) farray -> int

logic value__component__size : int

logic object__component__size : (int,logfileindext) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,logfileindext) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,logfileindext) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment2(a)))

logic user_eq17 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type us_split_fields4 = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields4) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields4) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields4) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__3__projection(a: us_split_fields4) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___10__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq20 : us_rep2, us_rep2 -> bool

axiom bool_eq_def19 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq20(a, b)].
  ((((((bool_eq19(((a).us_split_fields5).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilelistt__head) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilelistt__head))) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilelistt__lasti) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilelistt__lasti))) and
  (to_rep8(((a).us_split_fields5).rec__auditlog__logfilelistt__length) = to_rep8(((b).us_split_fields5).rec__auditlog__logfilelistt__length))) ->
  (bool_eq20(a, b) = true)) and
  ((not ((((bool_eq19(((a).us_split_fields5).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilelistt__head) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilelistt__head))) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilelistt__lasti) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilelistt__lasti))) and
  (to_rep8(((a).us_split_fields5).rec__auditlog__logfilelistt__length) = to_rep8(((b).us_split_fields5).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq20(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size3({
  us_split_fields5 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment3({ us_split_fields5 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq18 : us_rep2, us_rep2 -> bool

logic dummy22 : (int,logfileindext) farray

logic dummy23 : logfileindext

logic dummy24 : logfileindext

logic dummy25 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep2
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep2 =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range16(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq19 : fileentrycountt, fileentrycountt -> bool

logic dummy26 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep9 : fileentrycountt -> int

logic of_rep9 : int -> fileentrycountt

axiom inversion_axiom9 :
  (forall x:fileentrycountt [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:fileentrycountt [to_rep9(x)]. in_range16(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range16(x) ->
  (to_rep9(of_rep9(x)) = x)))

type map__ref1 = { map__content1 : (int,fileentrycountt) farray
}

logic slide1 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq1 :
  (forall a:(int,fileentrycountt) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq22 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def21 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq22(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_196:int. ((((a__first <= temp___idx_196) and
  (temp___idx_196 <= a__last)) and
  (to_rep9((a[temp___idx_196])) = to_rep9((b[((b__first - a__first) + temp___idx_196)])))) or
  (not ((a__first <= temp___idx_196) and (temp___idx_196 <= a__last)))))) ->
  (bool_eq22(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_196:int. (((a__first <= temp___idx_196) and
  (temp___idx_196 <= a__last)) ->
  (to_rep9((a[temp___idx_196])) = to_rep9((b[((b__first - a__first) + temp___idx_196)]))))))) ->
  (bool_eq22(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq22(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_196:int. (((a__first <= temp___idx_196) and
  (temp___idx_196 <= a__last)) ->
  (to_rep9((a[temp___idx_196])) = to_rep9((b[((b__first - a__first) + temp___idx_196)])))))))))

logic dummy27 : (int,fileentrycountt) farray

logic value__size4 : int

logic object__size4 : (int,fileentrycountt) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,fileentrycountt) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,fileentrycountt) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment4(a)))

logic user_eq20 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields6 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep2;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields6) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields6) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields6) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___11__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq23 : us_rep3, us_rep3 -> bool

axiom bool_eq_def22 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq23(a, b)].
  ((((((to_rep6(((a).us_split_fields7).rec__auditlog__logfilestatet__currentlogfile) = to_rep6(((b).us_split_fields7).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep7(((a).us_split_fields7).rec__auditlog__logfilestatet__numberlogentries) = to_rep7(((b).us_split_fields7).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq20(((a).us_split_fields7).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields7).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq22(((a).us_split_fields7).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields7).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq23(a, b) = true)) and
  ((not ((((to_rep6(((a).us_split_fields7).rec__auditlog__logfilestatet__currentlogfile) = to_rep6(((b).us_split_fields7).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep7(((a).us_split_fields7).rec__auditlog__logfilestatet__numberlogentries) = to_rep7(((b).us_split_fields7).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq20(((a).us_split_fields7).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields7).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq22(((a).us_split_fields7).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields7).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq23(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size5({
  us_split_fields7 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment5({
  us_split_fields7 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq21 : us_rep3, us_rep3 -> bool

logic dummy28 : logfileindext

logic dummy29 : logentrycountt

logic dummy30 : (int,logfileindext) farray

logic dummy31 : logfileindext

logic dummy32 : logfileindext

logic dummy33 : logfilecountt

logic dummy34 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep3
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep3 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep2,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep2,
  (int,fileentrycountt) farray -> prop

logic temp___1365 : int -> (int,logfileindext) farray

logic temp___1369 : int -> (int,fileentrycountt) farray

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep4

logic bool_eq24 : us_rep4, us_rep4 -> bool

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (forall a:us_rep4. (0 <= object__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep4. (0 <= object__alignment6(a)))

logic user_eq22 : us_rep4, us_rep4 -> bool

logic dummy35 : us_rep4

type t__ref1 = { t__content1 : us_rep4
}

function t__ref___2__projection(a: t__ref1) : us_rep4 = (a).t__content1

type map__ref2 = { map__content2 : (int,us_rep4) farray
}

logic slide2 : (int,us_rep4) farray, int, int -> (int,us_rep4) farray

axiom slide_eq2 :
  (forall a:(int,us_rep4) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep4) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq25 : (int,us_rep4) farray, int, int, (int,us_rep4) farray, int,
  int -> bool

axiom bool_eq_def23 :
  (forall a:(int,us_rep4) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep4) farray. forall b__first:int. forall b__last:int
  [bool_eq25(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_197:int. ((((a__first <= temp___idx_197) and
  (temp___idx_197 <= a__last)) and (bool_eq24((a[temp___idx_197]),
  (b[((b__first - a__first) + temp___idx_197)])) = true)) or
  (not ((a__first <= temp___idx_197) and (temp___idx_197 <= a__last)))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_197:int. (((a__first <= temp___idx_197) and
  (temp___idx_197 <= a__last)) -> (bool_eq24((a[temp___idx_197]),
  (b[((b__first - a__first) + temp___idx_197)])) = true))))) -> (bool_eq25(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq25(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_197:int. (((a__first <= temp___idx_197) and
  (temp___idx_197 <= a__last)) -> (bool_eq24((a[temp___idx_197]),
  (b[((b__first - a__first) + temp___idx_197)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type filestatust

predicate in_range17(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def24 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq23 : filestatust, filestatust -> bool

logic dummy36 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep10 : filestatust -> int

logic of_rep10 : int -> filestatust

axiom inversion_axiom10 :
  (forall x:filestatust [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:filestatust [to_rep10(x)]. in_range17(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range17(x) ->
  (to_rep10(of_rep10(x)) = x)))

type map__ref3 = { map__content3 : (int,filestatust) farray
}

logic slide3 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq3 :
  (forall a:(int,filestatust) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq27 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def25 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq27(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_198:int. ((((a__first <= temp___idx_198) and
  (temp___idx_198 <= a__last)) and
  (to_rep10((a[temp___idx_198])) = to_rep10((b[((b__first - a__first) + temp___idx_198)])))) or
  (not ((a__first <= temp___idx_198) and (temp___idx_198 <= a__last)))))) ->
  (bool_eq27(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_198:int. (((a__first <= temp___idx_198) and
  (temp___idx_198 <= a__last)) ->
  (to_rep10((a[temp___idx_198])) = to_rep10((b[((b__first - a__first) + temp___idx_198)]))))))) ->
  (bool_eq27(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq27(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_198:int. (((a__first <= temp___idx_198) and
  (temp___idx_198 <= a__last)) ->
  (to_rep10((a[temp___idx_198])) = to_rep10((b[((b__first - a__first) + temp___idx_198)])))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic systemfaultoccurred : (int,filestatust) farray, us_private,
  us_split_fields6, int, bool -> bool

logic systemfaultoccurred__function_guard : bool, (int,filestatust) farray,
  us_private, us_split_fields6, int, bool -> prop

axiom systemfaultoccurred__post_axiom : true

type namecountt

predicate in_range18(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def26 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq24 : namecountt, namecountt -> bool

logic dummy37 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep11 : namecountt -> int

logic of_rep11 : int -> namecountt

axiom inversion_axiom11 :
  (forall x:namecountt [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:namecountt [to_rep11(x)]. in_range18(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range18(x) ->
  (to_rep11(of_rep11(x)) = x)))

type character

predicate in_range19(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq29 : int, int -> bool

axiom bool_eq_def27 :
  (forall x:int. forall y:int [bool_eq29(x, y)]. (((x = y) -> (bool_eq29(x,
  y) = true)) and ((not (x = y)) -> (bool_eq29(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE19 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check19 : us_image -> prop

logic attr__ATTRIBUTE_VALUE19 : us_image -> int

logic user_eq25 : character, character -> bool

logic dummy38 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep12 : character -> int

logic of_rep12 : int -> character

axiom inversion_axiom12 :
  (forall x:character [to_rep12(x)]. (of_rep12(to_rep12(x)) = x))

axiom range_axiom12 :
  (forall x:character [to_rep12(x)]. in_range19(to_rep12(x)))

axiom coerce_axiom12 :
  (forall x:int [to_rep12(of_rep12(x))]. (in_range19(x) ->
  (to_rep12(of_rep12(x)) = x)))

type map__ref4 = { map__content4 : (int,character) farray
}

logic slide4 : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq4 :
  (forall a:(int,character) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq30 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def28 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq30(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep12((a[temp___idx_91])) = to_rep12((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq30(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep12((a[temp___idx_91])) = to_rep12((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq30(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq30(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep12((a[temp___idx_91])) = to_rep12((b[((b__first - a__first) + temp___idx_91)])))))))))

logic dummy39 : (int,character) farray

logic value__size7 : int

logic object__size7 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,character) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,character) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,character) farray. (0 <= object__alignment7(a)))

logic user_eq26 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range20(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq31 : int, int -> bool

axiom bool_eq_def29 :
  (forall x:int. forall y:int [bool_eq31(x, y)]. (((x = y) -> (bool_eq31(x,
  y) = true)) and ((not (x = y)) -> (bool_eq31(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE20 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check20 : us_image -> prop

logic attr__ATTRIBUTE_VALUE20 : us_image -> int

logic user_eq27 : issueridt, issueridt -> bool

logic dummy40 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep13 : issueridt -> int

logic of_rep13 : int -> issueridt

axiom inversion_axiom13 :
  (forall x:issueridt [to_rep13(x)]. (of_rep13(to_rep13(x)) = x))

axiom range_axiom13 :
  (forall x:issueridt [to_rep13(x)]. in_range20(to_rep13(x)))

axiom coerce_axiom13 :
  (forall x:int [to_rep13(of_rep13(x))]. (in_range20(x) ->
  (to_rep13(of_rep13(x)) = x)))

type us_split_fields8 = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields8) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields8) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields8) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep5 = { us_split_fields9 : us_split_fields8
}

function us_rep___4__projection(a: us_rep5) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq32 : us_rep5, us_rep5 -> bool

axiom bool_eq_def30 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq32(a, b)].
  (((((to_rep13(((a).us_split_fields9).rec__cryptotypes__issuert__id) = to_rep13(((b).us_split_fields9).rec__cryptotypes__issuert__id)) and
  (to_rep11(((a).us_split_fields9).rec__cryptotypes__issuert__namelength) = to_rep11(((b).us_split_fields9).rec__cryptotypes__issuert__namelength))) and
  (bool_eq30(((a).us_split_fields9).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields9).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq32(a, b) = true)) and
  ((not (((to_rep13(((a).us_split_fields9).rec__cryptotypes__issuert__id) = to_rep13(((b).us_split_fields9).rec__cryptotypes__issuert__id)) and
  (to_rep11(((a).us_split_fields9).rec__cryptotypes__issuert__namelength) = to_rep11(((b).us_split_fields9).rec__cryptotypes__issuert__namelength))) and
  (bool_eq30(((a).us_split_fields9).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields9).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq32(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep5 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep5 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size8({ us_split_fields9 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment8({
  us_split_fields9 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq28 : us_rep5, us_rep5 -> bool

logic dummy41 : issueridt

logic dummy42 : namecountt

logic dummy43 : (int,character) farray

type issuert__ref = { issuert__content : us_rep5
}

function issuert__ref___projection(a: issuert__ref) : us_rep5 =
  (a).issuert__content

type us_split_fields10 = { rec__keystore__optionalprivatekeyt__ispresent :
bool; rec__keystore__optionalprivatekeyt__owner : us_rep5
}

function us_split_fields_IsPresent__projection(a: us_split_fields10) : bool =
  (a).rec__keystore__optionalprivatekeyt__ispresent

function us_split_fields_Owner__projection(a: us_split_fields10) : us_rep5 =
  (a).rec__keystore__optionalprivatekeyt__owner

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___14__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep6 = { us_split_fields11 : us_split_fields10
}

function us_rep___15__projection(a: us_rep6) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq33 : us_rep6, us_rep6 -> bool

axiom bool_eq_def31 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq33(a, b)].
  ((((((a).us_split_fields11).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields11).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq32(((a).us_split_fields11).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields11).rec__keystore__optionalprivatekeyt__owner) = true)) ->
  (bool_eq33(a, b) = true)) and
  ((not ((((a).us_split_fields11).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields11).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq32(((a).us_split_fields11).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields11).rec__keystore__optionalprivatekeyt__owner) = true))) ->
  (bool_eq33(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__size9({ us_split_fields11 =
  { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__alignment9({
  us_split_fields11 = { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

logic keystore__optionalprivatekeyt__ispresent__first__bit : int

logic keystore__optionalprivatekeyt__ispresent__last__bit : int

logic keystore__optionalprivatekeyt__ispresent__position : int

axiom keystore__optionalprivatekeyt__ispresent__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__first__bit)

axiom keystore__optionalprivatekeyt__ispresent__last__bit_axiom :
  (keystore__optionalprivatekeyt__ispresent__first__bit <  keystore__optionalprivatekeyt__ispresent__last__bit)

axiom keystore__optionalprivatekeyt__ispresent__position_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__position)

logic keystore__optionalprivatekeyt__owner__first__bit : int

logic keystore__optionalprivatekeyt__owner__last__bit : int

logic keystore__optionalprivatekeyt__owner__position : int

axiom keystore__optionalprivatekeyt__owner__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__first__bit)

axiom keystore__optionalprivatekeyt__owner__last__bit_axiom :
  (keystore__optionalprivatekeyt__owner__first__bit <  keystore__optionalprivatekeyt__owner__last__bit)

axiom keystore__optionalprivatekeyt__owner__position_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__position)

logic user_eq29 : us_rep6, us_rep6 -> bool

logic dummy44 : bool

logic dummy45 : issueridt

logic dummy46 : namecountt

logic dummy47 : (int,character) farray

type optionalprivatekeyt__ref = { optionalprivatekeyt__content : us_rep6
}

function optionalprivatekeyt__ref___projection(a: optionalprivatekeyt__ref) : us_rep6 =
  (a).optionalprivatekeyt__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic privatekeypresent : us_split_fields10, us_private -> bool

logic privatekeypresent__function_guard : bool, us_split_fields10,
  us_private -> prop

axiom privatekeypresent__post_axiom : true

axiom privatekeypresent__def_axiom :
  (forall keystore__thistisinfo__fields:bool.
  forall keystore__thistisinfo__fields1:issueridt.
  forall keystore__thistisinfo__fields2:namecountt.
  forall keystore__thistisinfo__fields3:(int,character) farray.
  (forall keystore__state:us_private [privatekeypresent({
  rec__keystore__optionalprivatekeyt__ispresent =
  keystore__thistisinfo__fields; rec__keystore__optionalprivatekeyt__owner =
  { us_split_fields9 = { rec__cryptotypes__issuert__id =
  keystore__thistisinfo__fields1; rec__cryptotypes__issuert__namelength =
  keystore__thistisinfo__fields2; rec__cryptotypes__issuert__name =
  keystore__thistisinfo__fields3 } } }, keystore__state)].
  ((privatekeypresent({ rec__keystore__optionalprivatekeyt__ispresent =
  keystore__thistisinfo__fields; rec__keystore__optionalprivatekeyt__owner =
  { us_split_fields9 = { rec__cryptotypes__issuert__id =
  keystore__thistisinfo__fields1; rec__cryptotypes__issuert__namelength =
  keystore__thistisinfo__fields2; rec__cryptotypes__issuert__name =
  keystore__thistisinfo__fields3 } } }, keystore__state) = true) <->
  (keystore__thistisinfo__fields = true))))

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

type classt

predicate in_range21(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq34 : int, int -> bool

axiom bool_eq_def32 :
  (forall x:int. forall y:int [bool_eq34(x, y)]. (((x = y) -> (bool_eq34(x,
  y) = true)) and ((not (x = y)) -> (bool_eq34(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE21 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check21 : us_image -> prop

logic attr__ATTRIBUTE_VALUE21 : us_image -> int

logic user_eq30 : classt, classt -> bool

logic dummy48 : classt

type classt__ref = { classt__content : classt
}

function classt__ref___projection(a: classt__ref) : classt =
  (a).classt__content

logic to_rep14 : classt -> int

logic of_rep14 : int -> classt

axiom inversion_axiom14 :
  (forall x:classt [to_rep14(x)]. (of_rep14(to_rep14(x)) = x))

axiom range_axiom14 :
  (forall x:classt [to_rep14(x)]. in_range21(to_rep14(x)))

axiom coerce_axiom14 :
  (forall x:int [to_rep14(of_rep14(x))]. (in_range21(x) ->
  (to_rep14(of_rep14(x)) = x)))

type us_split_fields12 = { rec__privtypes__clearancet__class : classt
}

function us_split_fields_Class__projection(a: us_split_fields12) : classt =
  (a).rec__privtypes__clearancet__class

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep7 = { us_split_fields13 : us_split_fields12
}

function us_rep___projection(a: us_rep7) : us_split_fields12 =
  (a).us_split_fields13

logic bool_eq35 : us_rep7, us_rep7 -> bool

axiom bool_eq_def33 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq35(a, b)].
  (((to_rep14(((a).us_split_fields13).rec__privtypes__clearancet__class) = to_rep14(((b).us_split_fields13).rec__privtypes__clearancet__class)) ->
  (bool_eq35(a, b) = true)) and
  ((not (to_rep14(((a).us_split_fields13).rec__privtypes__clearancet__class) = to_rep14(((b).us_split_fields13).rec__privtypes__clearancet__class))) ->
  (bool_eq35(a, b) = false))))

logic value__size10 : int

logic object__size10 : us_rep7 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep7 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:classt. (0 <= object__size10({ us_split_fields13 = {
  rec__privtypes__clearancet__class = a } })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:classt. (0 <= object__alignment10({ us_split_fields13 = {
  rec__privtypes__clearancet__class = a } })))

logic privtypes__clearancet__class__first__bit : int

logic privtypes__clearancet__class__last__bit : int

logic privtypes__clearancet__class__position : int

axiom privtypes__clearancet__class__first__bit_axiom :
  (0 <= privtypes__clearancet__class__first__bit)

axiom privtypes__clearancet__class__last__bit_axiom :
  (privtypes__clearancet__class__first__bit <  privtypes__clearancet__class__last__bit)

axiom privtypes__clearancet__class__position_axiom :
  (0 <= privtypes__clearancet__class__position)

logic user_eq31 : us_rep7, us_rep7 -> bool

logic dummy49 : classt

type clearancet__ref = { clearancet__content : us_rep7
}

function clearancet__ref___projection(a: clearancet__ref) : us_rep7 =
  (a).clearancet__content

type algorithmt

predicate in_range22(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq36 : int, int -> bool

axiom bool_eq_def34 :
  (forall x:int. forall y:int [bool_eq36(x, y)]. (((x = y) -> (bool_eq36(x,
  y) = true)) and ((not (x = y)) -> (bool_eq36(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE22 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check22 : us_image -> prop

logic attr__ATTRIBUTE_VALUE22 : us_image -> int

logic user_eq32 : algorithmt, algorithmt -> bool

logic dummy50 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic to_rep15 : algorithmt -> int

logic of_rep15 : int -> algorithmt

axiom inversion_axiom15 :
  (forall x:algorithmt [to_rep15(x)]. (of_rep15(to_rep15(x)) = x))

axiom range_axiom15 :
  (forall x:algorithmt [to_rep15(x)]. in_range22(to_rep15(x)))

axiom coerce_axiom15 :
  (forall x:int [to_rep15(of_rep15(x))]. (in_range22(x) ->
  (to_rep15(of_rep15(x)) = x)))

type serialnumbert

predicate in_range23(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq37 : int, int -> bool

axiom bool_eq_def35 :
  (forall x:int. forall y:int [bool_eq37(x, y)]. (((x = y) -> (bool_eq37(x,
  y) = true)) and ((not (x = y)) -> (bool_eq37(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE23 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check23 : us_image -> prop

logic attr__ATTRIBUTE_VALUE23 : us_image -> int

logic user_eq33 : serialnumbert, serialnumbert -> bool

logic dummy51 : serialnumbert

type serialnumbert__ref = { serialnumbert__content : serialnumbert
}

function serialnumbert__ref___projection(a: serialnumbert__ref) : serialnumbert =
  (a).serialnumbert__content

logic to_rep16 : serialnumbert -> int

logic of_rep16 : int -> serialnumbert

axiom inversion_axiom16 :
  (forall x:serialnumbert [to_rep16(x)]. (of_rep16(to_rep16(x)) = x))

axiom range_axiom16 :
  (forall x:serialnumbert [to_rep16(x)]. in_range23(to_rep16(x)))

axiom coerce_axiom16 :
  (forall x:int [to_rep16(of_rep16(x))]. (in_range23(x) ->
  (to_rep16(of_rep16(x)) = x)))

type us_split_fields14 = { rec__certtypes__idt__issuer : us_rep5;
rec__certtypes__idt__serialnumber : serialnumbert
}

function us_split_fields_Issuer__projection(a: us_split_fields14) : us_rep5 =
  (a).rec__certtypes__idt__issuer

function us_split_fields_SerialNumber__projection(a: us_split_fields14) : serialnumbert =
  (a).rec__certtypes__idt__serialnumber

type us_split_fields__ref7 = { us_split_fields__content7 : us_split_fields14
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref7) : us_split_fields14 =
  (a).us_split_fields__content7

type us_rep8 = { us_split_fields15 : us_split_fields14
}

function us_rep___14__projection(a: us_rep8) : us_split_fields14 =
  (a).us_split_fields15

logic bool_eq38 : us_rep8, us_rep8 -> bool

axiom bool_eq_def36 :
  (forall a:us_rep8. forall b:us_rep8 [bool_eq38(a, b)].
  ((((bool_eq32(((a).us_split_fields15).rec__certtypes__idt__issuer,
  ((b).us_split_fields15).rec__certtypes__idt__issuer) = true) and
  (to_rep16(((a).us_split_fields15).rec__certtypes__idt__serialnumber) = to_rep16(((b).us_split_fields15).rec__certtypes__idt__serialnumber))) ->
  (bool_eq38(a, b) = true)) and
  ((not ((bool_eq32(((a).us_split_fields15).rec__certtypes__idt__issuer,
  ((b).us_split_fields15).rec__certtypes__idt__issuer) = true) and
  (to_rep16(((a).us_split_fields15).rec__certtypes__idt__serialnumber) = to_rep16(((b).us_split_fields15).rec__certtypes__idt__serialnumber)))) ->
  (bool_eq38(a, b) = false))))

logic value__size11 : int

logic object__size11 : us_rep8 -> int

logic value__alignment11 : int

logic object__alignment11 : us_rep8 -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__size11({ us_split_fields15 = { rec__certtypes__idt__issuer =
  { us_split_fields9 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__alignment11({ us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = a; rec__cryptotypes__issuert__namelength =
  a1; rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

logic certtypes__idt__issuer__first__bit : int

logic certtypes__idt__issuer__last__bit : int

logic certtypes__idt__issuer__position : int

axiom certtypes__idt__issuer__first__bit_axiom :
  (0 <= certtypes__idt__issuer__first__bit)

axiom certtypes__idt__issuer__last__bit_axiom :
  (certtypes__idt__issuer__first__bit <  certtypes__idt__issuer__last__bit)

axiom certtypes__idt__issuer__position_axiom :
  (0 <= certtypes__idt__issuer__position)

logic certtypes__idt__serialnumber__first__bit : int

logic certtypes__idt__serialnumber__last__bit : int

logic certtypes__idt__serialnumber__position : int

axiom certtypes__idt__serialnumber__first__bit_axiom :
  (0 <= certtypes__idt__serialnumber__first__bit)

axiom certtypes__idt__serialnumber__last__bit_axiom :
  (certtypes__idt__serialnumber__first__bit <  certtypes__idt__serialnumber__last__bit)

axiom certtypes__idt__serialnumber__position_axiom :
  (0 <= certtypes__idt__serialnumber__position)

logic user_eq34 : us_rep8, us_rep8 -> bool

logic dummy52 : issueridt

logic dummy53 : namecountt

logic dummy54 : (int,character) farray

logic dummy55 : serialnumbert

type idt__ref = { idt__content : us_rep8
}

function idt__ref___projection(a: idt__ref) : us_rep8 = (a).idt__content

type us_split_fields16 = { rec__cert__attr__auth__contentst__id : us_rep8;
rec__cert__attr__auth__contentst__notbefore : us_rep1;
rec__cert__attr__auth__contentst__notafter : us_rep1;
rec__cert__attr__auth__contentst__mechanism : algorithmt;
rec__cert__attr__auth__contentst__basecertid : us_rep8;
rec__cert__attr__auth__contentst__role : privileget;
rec__cert__attr__auth__contentst__clearance : us_rep7
}

function us_split_fields_ID__5__projection(a: us_split_fields16) : us_rep8 =
  (a).rec__cert__attr__auth__contentst__id

function us_split_fields_NotBefore__3__projection(a: us_split_fields16) : us_rep1 =
  (a).rec__cert__attr__auth__contentst__notbefore

function us_split_fields_NotAfter__3__projection(a: us_split_fields16) : us_rep1 =
  (a).rec__cert__attr__auth__contentst__notafter

function us_split_fields_Mechanism__3__projection(a: us_split_fields16) : algorithmt =
  (a).rec__cert__attr__auth__contentst__mechanism

function us_split_fields_BaseCertID__2__projection(a: us_split_fields16) : us_rep8 =
  (a).rec__cert__attr__auth__contentst__basecertid

function us_split_fields_Role__projection(a: us_split_fields16) : privileget =
  (a).rec__cert__attr__auth__contentst__role

function us_split_fields_Clearance__projection(a: us_split_fields16) : us_rep7 =
  (a).rec__cert__attr__auth__contentst__clearance

type us_split_fields__ref8 = { us_split_fields__content8 : us_split_fields16
}

function us_split_fields__ref___17__projection(a: us_split_fields__ref8) : us_split_fields16 =
  (a).us_split_fields__content8

type us_rep9 = { us_split_fields17 : us_split_fields16
}

function us_rep___18__projection(a: us_rep9) : us_split_fields16 =
  (a).us_split_fields17

logic bool_eq39 : us_rep9, us_rep9 -> bool

axiom bool_eq_def37 :
  (forall a:us_rep9. forall b:us_rep9 [bool_eq39(a, b)].
  (((((((((bool_eq38(((a).us_split_fields17).rec__cert__attr__auth__contentst__id,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields17).rec__cert__attr__auth__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields17).rec__cert__attr__auth__contentst__notafter,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__notafter) = true)) and
  (to_rep15(((a).us_split_fields17).rec__cert__attr__auth__contentst__mechanism) = to_rep15(((b).us_split_fields17).rec__cert__attr__auth__contentst__mechanism))) and
  (bool_eq38(((a).us_split_fields17).rec__cert__attr__auth__contentst__basecertid,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__basecertid) = true)) and
  (to_rep(((a).us_split_fields17).rec__cert__attr__auth__contentst__role) = to_rep(((b).us_split_fields17).rec__cert__attr__auth__contentst__role))) and
  (bool_eq35(((a).us_split_fields17).rec__cert__attr__auth__contentst__clearance,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__clearance) = true)) ->
  (bool_eq39(a, b) = true)) and
  ((not (((((((bool_eq38(((a).us_split_fields17).rec__cert__attr__auth__contentst__id,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields17).rec__cert__attr__auth__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields17).rec__cert__attr__auth__contentst__notafter,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__notafter) = true)) and
  (to_rep15(((a).us_split_fields17).rec__cert__attr__auth__contentst__mechanism) = to_rep15(((b).us_split_fields17).rec__cert__attr__auth__contentst__mechanism))) and
  (bool_eq38(((a).us_split_fields17).rec__cert__attr__auth__contentst__basecertid,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__basecertid) = true)) and
  (to_rep(((a).us_split_fields17).rec__cert__attr__auth__contentst__role) = to_rep(((b).us_split_fields17).rec__cert__attr__auth__contentst__role))) and
  (bool_eq35(((a).us_split_fields17).rec__cert__attr__auth__contentst__clearance,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__clearance) = true))) ->
  (bool_eq39(a, b) = false))))

logic value__size12 : int

logic object__size12 : us_rep9 -> int

logic value__alignment12 : int

logic object__alignment12 : us_rep9 -> int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 : (forall a:us_rep9. (0 <= object__size12(a)))

axiom value__alignment_axiom12 : (0 <= value__alignment12)

axiom object__alignment_axiom12 :
  (forall a:us_rep9. (0 <= object__alignment12(a)))

logic cert__attr__auth__contentst__id__first__bit : int

logic cert__attr__auth__contentst__id__last__bit : int

logic cert__attr__auth__contentst__id__position : int

axiom cert__attr__auth__contentst__id__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__id__first__bit)

axiom cert__attr__auth__contentst__id__last__bit_axiom :
  (cert__attr__auth__contentst__id__first__bit <  cert__attr__auth__contentst__id__last__bit)

axiom cert__attr__auth__contentst__id__position_axiom :
  (0 <= cert__attr__auth__contentst__id__position)

logic cert__attr__auth__contentst__notbefore__first__bit : int

logic cert__attr__auth__contentst__notbefore__last__bit : int

logic cert__attr__auth__contentst__notbefore__position : int

axiom cert__attr__auth__contentst__notbefore__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__notbefore__first__bit)

axiom cert__attr__auth__contentst__notbefore__last__bit_axiom :
  (cert__attr__auth__contentst__notbefore__first__bit <  cert__attr__auth__contentst__notbefore__last__bit)

axiom cert__attr__auth__contentst__notbefore__position_axiom :
  (0 <= cert__attr__auth__contentst__notbefore__position)

logic cert__attr__auth__contentst__notafter__first__bit : int

logic cert__attr__auth__contentst__notafter__last__bit : int

logic cert__attr__auth__contentst__notafter__position : int

axiom cert__attr__auth__contentst__notafter__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__notafter__first__bit)

axiom cert__attr__auth__contentst__notafter__last__bit_axiom :
  (cert__attr__auth__contentst__notafter__first__bit <  cert__attr__auth__contentst__notafter__last__bit)

axiom cert__attr__auth__contentst__notafter__position_axiom :
  (0 <= cert__attr__auth__contentst__notafter__position)

logic cert__attr__auth__contentst__mechanism__first__bit : int

logic cert__attr__auth__contentst__mechanism__last__bit : int

logic cert__attr__auth__contentst__mechanism__position : int

axiom cert__attr__auth__contentst__mechanism__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__mechanism__first__bit)

axiom cert__attr__auth__contentst__mechanism__last__bit_axiom :
  (cert__attr__auth__contentst__mechanism__first__bit <  cert__attr__auth__contentst__mechanism__last__bit)

axiom cert__attr__auth__contentst__mechanism__position_axiom :
  (0 <= cert__attr__auth__contentst__mechanism__position)

logic cert__attr__auth__contentst__basecertid__first__bit : int

logic cert__attr__auth__contentst__basecertid__last__bit : int

logic cert__attr__auth__contentst__basecertid__position : int

axiom cert__attr__auth__contentst__basecertid__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__basecertid__first__bit)

axiom cert__attr__auth__contentst__basecertid__last__bit_axiom :
  (cert__attr__auth__contentst__basecertid__first__bit <  cert__attr__auth__contentst__basecertid__last__bit)

axiom cert__attr__auth__contentst__basecertid__position_axiom :
  (0 <= cert__attr__auth__contentst__basecertid__position)

logic cert__attr__auth__contentst__role__first__bit : int

logic cert__attr__auth__contentst__role__last__bit : int

logic cert__attr__auth__contentst__role__position : int

axiom cert__attr__auth__contentst__role__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__role__first__bit)

axiom cert__attr__auth__contentst__role__last__bit_axiom :
  (cert__attr__auth__contentst__role__first__bit <  cert__attr__auth__contentst__role__last__bit)

axiom cert__attr__auth__contentst__role__position_axiom :
  (0 <= cert__attr__auth__contentst__role__position)

logic cert__attr__auth__contentst__clearance__first__bit : int

logic cert__attr__auth__contentst__clearance__last__bit : int

logic cert__attr__auth__contentst__clearance__position : int

axiom cert__attr__auth__contentst__clearance__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__clearance__first__bit)

axiom cert__attr__auth__contentst__clearance__last__bit_axiom :
  (cert__attr__auth__contentst__clearance__first__bit <  cert__attr__auth__contentst__clearance__last__bit)

axiom cert__attr__auth__contentst__clearance__position_axiom :
  (0 <= cert__attr__auth__contentst__clearance__position)

logic user_eq35 : us_rep9, us_rep9 -> bool

logic dummy56 : issueridt

logic dummy57 : namecountt

logic dummy58 : (int,character) farray

logic dummy59 : serialnumbert

logic dummy60 : yearst

logic dummy61 : monthst

logic dummy62 : dayst

logic dummy63 : millisecst

logic dummy64 : yearst

logic dummy65 : monthst

logic dummy66 : dayst

logic dummy67 : millisecst

logic dummy68 : algorithmt

logic dummy69 : issueridt

logic dummy70 : namecountt

logic dummy71 : (int,character) farray

logic dummy72 : serialnumbert

logic dummy73 : privileget

logic dummy74 : classt

type contentst__ref = { contentst__content : us_rep9
}

function contentst__ref___3__projection(a: contentst__ref) : us_rep9 =
  (a).contentst__content

type us_split_fields18 = { rec__admintoken__validauthcertt__valid : bool;
rec__admintoken__validauthcertt__contents : us_rep9
}

function us_split_fields_Valid__projection(a: us_split_fields18) : bool =
  (a).rec__admintoken__validauthcertt__valid

function us_split_fields_Contents__projection(a: us_split_fields18) : us_rep9 =
  (a).rec__admintoken__validauthcertt__contents

type us_split_fields__ref9 = { us_split_fields__content9 : us_split_fields18
}

function us_split_fields__ref___19__projection(a: us_split_fields__ref9) : us_split_fields18 =
  (a).us_split_fields__content9

type us_rep10 = { us_split_fields19 : us_split_fields18
}

function us_rep___20__projection(a: us_rep10) : us_split_fields18 =
  (a).us_split_fields19

logic bool_eq40 : us_rep10, us_rep10 -> bool

axiom bool_eq_def38 :
  (forall a:us_rep10. forall b:us_rep10 [bool_eq40(a, b)].
  ((((((a).us_split_fields19).rec__admintoken__validauthcertt__valid = ((b).us_split_fields19).rec__admintoken__validauthcertt__valid) and
  (bool_eq39(((a).us_split_fields19).rec__admintoken__validauthcertt__contents,
  ((b).us_split_fields19).rec__admintoken__validauthcertt__contents) = true)) ->
  (bool_eq40(a, b) = true)) and
  ((not ((((a).us_split_fields19).rec__admintoken__validauthcertt__valid = ((b).us_split_fields19).rec__admintoken__validauthcertt__valid) and
  (bool_eq39(((a).us_split_fields19).rec__admintoken__validauthcertt__contents,
  ((b).us_split_fields19).rec__admintoken__validauthcertt__contents) = true))) ->
  (bool_eq40(a, b) = false))))

logic value__size13 : int

logic object__size13 : us_rep10 -> int

logic value__alignment13 : int

logic object__alignment13 : us_rep10 -> int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 : (forall a:us_rep10. (0 <= object__size13(a)))

axiom value__alignment_axiom13 : (0 <= value__alignment13)

axiom object__alignment_axiom13 :
  (forall a:us_rep10. (0 <= object__alignment13(a)))

logic admintoken__validauthcertt__valid__first__bit : int

logic admintoken__validauthcertt__valid__last__bit : int

logic admintoken__validauthcertt__valid__position : int

axiom admintoken__validauthcertt__valid__first__bit_axiom :
  (0 <= admintoken__validauthcertt__valid__first__bit)

axiom admintoken__validauthcertt__valid__last__bit_axiom :
  (admintoken__validauthcertt__valid__first__bit <  admintoken__validauthcertt__valid__last__bit)

axiom admintoken__validauthcertt__valid__position_axiom :
  (0 <= admintoken__validauthcertt__valid__position)

logic admintoken__validauthcertt__contents__first__bit : int

logic admintoken__validauthcertt__contents__last__bit : int

logic admintoken__validauthcertt__contents__position : int

axiom admintoken__validauthcertt__contents__first__bit_axiom :
  (0 <= admintoken__validauthcertt__contents__first__bit)

axiom admintoken__validauthcertt__contents__last__bit_axiom :
  (admintoken__validauthcertt__contents__first__bit <  admintoken__validauthcertt__contents__last__bit)

axiom admintoken__validauthcertt__contents__position_axiom :
  (0 <= admintoken__validauthcertt__contents__position)

logic user_eq36 : us_rep10, us_rep10 -> bool

logic dummy75 : bool

logic dummy76 : issueridt

logic dummy77 : namecountt

logic dummy78 : (int,character) farray

logic dummy79 : serialnumbert

logic dummy80 : yearst

logic dummy81 : monthst

logic dummy82 : dayst

logic dummy83 : millisecst

logic dummy84 : yearst

logic dummy85 : monthst

logic dummy86 : dayst

logic dummy87 : millisecst

logic dummy88 : algorithmt

logic dummy89 : issueridt

logic dummy90 : namecountt

logic dummy91 : (int,character) farray

logic dummy92 : serialnumbert

logic dummy93 : privileget

logic dummy94 : classt

type validauthcertt__ref = { validauthcertt__content : us_rep10
}

function validauthcertt__ref___projection(a: validauthcertt__ref) : us_rep10 =
  (a).validauthcertt__content

logic attr__ATTRIBUTE_ADDRESS10 : int

type keyidt

predicate in_range24(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq41 : int, int -> bool

axiom bool_eq_def39 :
  (forall x:int. forall y:int [bool_eq41(x, y)]. (((x = y) -> (bool_eq41(x,
  y) = true)) and ((not (x = y)) -> (bool_eq41(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE24 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check24 : us_image -> prop

logic attr__ATTRIBUTE_VALUE24 : us_image -> int

logic user_eq37 : keyidt, keyidt -> bool

logic dummy95 : keyidt

type keyidt__ref = { keyidt__content : keyidt
}

function keyidt__ref___projection(a: keyidt__ref) : keyidt =
  (a).keyidt__content

logic to_rep17 : keyidt -> int

logic of_rep17 : int -> keyidt

axiom inversion_axiom17 :
  (forall x:keyidt [to_rep17(x)]. (of_rep17(to_rep17(x)) = x))

axiom range_axiom17 :
  (forall x:keyidt [to_rep17(x)]. in_range24(to_rep17(x)))

axiom coerce_axiom17 :
  (forall x:int [to_rep17(of_rep17(x))]. (in_range24(x) ->
  (to_rep17(of_rep17(x)) = x)))

type keylengtht

predicate in_range25(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq42 : int, int -> bool

axiom bool_eq_def40 :
  (forall x:int. forall y:int [bool_eq42(x, y)]. (((x = y) -> (bool_eq42(x,
  y) = true)) and ((not (x = y)) -> (bool_eq42(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE25 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check25 : us_image -> prop

logic attr__ATTRIBUTE_VALUE25 : us_image -> int

logic user_eq38 : keylengtht, keylengtht -> bool

logic dummy96 : keylengtht

type keylengtht__ref = { keylengtht__content : keylengtht
}

function keylengtht__ref___projection(a: keylengtht__ref) : keylengtht =
  (a).keylengtht__content

logic to_rep18 : keylengtht -> int

logic of_rep18 : int -> keylengtht

axiom inversion_axiom18 :
  (forall x:keylengtht [to_rep18(x)]. (of_rep18(to_rep18(x)) = x))

axiom range_axiom18 :
  (forall x:keylengtht [to_rep18(x)]. in_range25(to_rep18(x)))

axiom coerce_axiom18 :
  (forall x:int [to_rep18(of_rep18(x))]. (in_range25(x) ->
  (to_rep18(of_rep18(x)) = x)))

type us_split_fields20 = { rec__cryptotypes__keypartt__algorithmid :
algorithmt; rec__cryptotypes__keypartt__keyid : keyidt;
rec__cryptotypes__keypartt__keylength : keylengtht
}

function us_split_fields_AlgorithmID__projection(a: us_split_fields20) : algorithmt =
  (a).rec__cryptotypes__keypartt__algorithmid

function us_split_fields_KeyID__projection(a: us_split_fields20) : keyidt =
  (a).rec__cryptotypes__keypartt__keyid

function us_split_fields_KeyLength__projection(a: us_split_fields20) : keylengtht =
  (a).rec__cryptotypes__keypartt__keylength

type us_split_fields__ref10 = { us_split_fields__content10 :
us_split_fields20
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref10) : us_split_fields20 =
  (a).us_split_fields__content10

type us_rep11 = { us_split_fields21 : us_split_fields20
}

function us_rep___5__projection(a: us_rep11) : us_split_fields20 =
  (a).us_split_fields21

logic bool_eq43 : us_rep11, us_rep11 -> bool

axiom bool_eq_def41 :
  (forall a:us_rep11. forall b:us_rep11 [bool_eq43(a, b)].
  (((((to_rep15(((a).us_split_fields21).rec__cryptotypes__keypartt__algorithmid) = to_rep15(((b).us_split_fields21).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep17(((a).us_split_fields21).rec__cryptotypes__keypartt__keyid) = to_rep17(((b).us_split_fields21).rec__cryptotypes__keypartt__keyid))) and
  (to_rep18(((a).us_split_fields21).rec__cryptotypes__keypartt__keylength) = to_rep18(((b).us_split_fields21).rec__cryptotypes__keypartt__keylength))) ->
  (bool_eq43(a, b) = true)) and
  ((not (((to_rep15(((a).us_split_fields21).rec__cryptotypes__keypartt__algorithmid) = to_rep15(((b).us_split_fields21).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep17(((a).us_split_fields21).rec__cryptotypes__keypartt__keyid) = to_rep17(((b).us_split_fields21).rec__cryptotypes__keypartt__keyid))) and
  (to_rep18(((a).us_split_fields21).rec__cryptotypes__keypartt__keylength) = to_rep18(((b).us_split_fields21).rec__cryptotypes__keypartt__keylength)))) ->
  (bool_eq43(a, b) = false))))

logic value__size14 : int

logic object__size14 : us_rep11 -> int

logic value__alignment14 : int

logic object__alignment14 : us_rep11 -> int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__size14({ us_split_fields21 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

axiom value__alignment_axiom14 : (0 <= value__alignment14)

axiom object__alignment_axiom14 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__alignment14({ us_split_fields21 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

logic cryptotypes__keypartt__algorithmid__first__bit : int

logic cryptotypes__keypartt__algorithmid__last__bit : int

logic cryptotypes__keypartt__algorithmid__position : int

axiom cryptotypes__keypartt__algorithmid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__first__bit)

axiom cryptotypes__keypartt__algorithmid__last__bit_axiom :
  (cryptotypes__keypartt__algorithmid__first__bit <  cryptotypes__keypartt__algorithmid__last__bit)

axiom cryptotypes__keypartt__algorithmid__position_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__position)

logic cryptotypes__keypartt__keyid__first__bit : int

logic cryptotypes__keypartt__keyid__last__bit : int

logic cryptotypes__keypartt__keyid__position : int

axiom cryptotypes__keypartt__keyid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keyid__first__bit)

axiom cryptotypes__keypartt__keyid__last__bit_axiom :
  (cryptotypes__keypartt__keyid__first__bit <  cryptotypes__keypartt__keyid__last__bit)

axiom cryptotypes__keypartt__keyid__position_axiom :
  (0 <= cryptotypes__keypartt__keyid__position)

logic cryptotypes__keypartt__keylength__first__bit : int

logic cryptotypes__keypartt__keylength__last__bit : int

logic cryptotypes__keypartt__keylength__position : int

axiom cryptotypes__keypartt__keylength__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keylength__first__bit)

axiom cryptotypes__keypartt__keylength__last__bit_axiom :
  (cryptotypes__keypartt__keylength__first__bit <  cryptotypes__keypartt__keylength__last__bit)

axiom cryptotypes__keypartt__keylength__position_axiom :
  (0 <= cryptotypes__keypartt__keylength__position)

logic user_eq39 : us_rep11, us_rep11 -> bool

logic dummy97 : algorithmt

logic dummy98 : keyidt

logic dummy99 : keylengtht

type keypartt__ref = { keypartt__content : us_rep11
}

function keypartt__ref___projection(a: keypartt__ref) : us_rep11 =
  (a).keypartt__content

type us_split_fields22 = { rec__cert__id__contentst__id : us_rep8;
rec__cert__id__contentst__notbefore : us_rep1;
rec__cert__id__contentst__notafter : us_rep1;
rec__cert__id__contentst__mechanism : algorithmt;
rec__cert__id__contentst__subject : us_rep5;
rec__cert__id__contentst__subjectpublickey : us_rep11
}

function us_split_fields_ID__6__projection(a: us_split_fields22) : us_rep8 =
  (a).rec__cert__id__contentst__id

function us_split_fields_NotBefore__4__projection(a: us_split_fields22) : us_rep1 =
  (a).rec__cert__id__contentst__notbefore

function us_split_fields_NotAfter__4__projection(a: us_split_fields22) : us_rep1 =
  (a).rec__cert__id__contentst__notafter

function us_split_fields_Mechanism__4__projection(a: us_split_fields22) : algorithmt =
  (a).rec__cert__id__contentst__mechanism

function us_split_fields_Subject__projection(a: us_split_fields22) : us_rep5 =
  (a).rec__cert__id__contentst__subject

function us_split_fields_SubjectPublicKey__projection(a: us_split_fields22) : us_rep11 =
  (a).rec__cert__id__contentst__subjectpublickey

type us_split_fields__ref11 = { us_split_fields__content11 :
us_split_fields22
}

function us_split_fields__ref___18__projection(a: us_split_fields__ref11) : us_split_fields22 =
  (a).us_split_fields__content11

type us_rep12 = { us_split_fields23 : us_split_fields22
}

function us_rep___19__projection(a: us_rep12) : us_split_fields22 =
  (a).us_split_fields23

logic bool_eq44 : us_rep12, us_rep12 -> bool

axiom bool_eq_def42 :
  (forall a:us_rep12. forall b:us_rep12 [bool_eq44(a, b)].
  ((((((((bool_eq38(((a).us_split_fields23).rec__cert__id__contentst__id,
  ((b).us_split_fields23).rec__cert__id__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields23).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields23).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields23).rec__cert__id__contentst__notafter,
  ((b).us_split_fields23).rec__cert__id__contentst__notafter) = true)) and
  (to_rep15(((a).us_split_fields23).rec__cert__id__contentst__mechanism) = to_rep15(((b).us_split_fields23).rec__cert__id__contentst__mechanism))) and
  (bool_eq32(((a).us_split_fields23).rec__cert__id__contentst__subject,
  ((b).us_split_fields23).rec__cert__id__contentst__subject) = true)) and
  (bool_eq43(((a).us_split_fields23).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields23).rec__cert__id__contentst__subjectpublickey) = true)) ->
  (bool_eq44(a, b) = true)) and
  ((not ((((((bool_eq38(((a).us_split_fields23).rec__cert__id__contentst__id,
  ((b).us_split_fields23).rec__cert__id__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields23).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields23).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields23).rec__cert__id__contentst__notafter,
  ((b).us_split_fields23).rec__cert__id__contentst__notafter) = true)) and
  (to_rep15(((a).us_split_fields23).rec__cert__id__contentst__mechanism) = to_rep15(((b).us_split_fields23).rec__cert__id__contentst__mechanism))) and
  (bool_eq32(((a).us_split_fields23).rec__cert__id__contentst__subject,
  ((b).us_split_fields23).rec__cert__id__contentst__subject) = true)) and
  (bool_eq43(((a).us_split_fields23).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields23).rec__cert__id__contentst__subjectpublickey) = true))) ->
  (bool_eq44(a, b) = false))))

logic value__size15 : int

logic object__size15 : us_rep12 -> int

logic value__alignment15 : int

logic object__alignment15 : us_rep12 -> int

axiom value__size_axiom15 : (0 <= value__size15)

axiom object__size_axiom15 : (forall a:us_rep12. (0 <= object__size15(a)))

axiom value__alignment_axiom15 : (0 <= value__alignment15)

axiom object__alignment_axiom15 :
  (forall a:us_rep12. (0 <= object__alignment15(a)))

logic cert__id__contentst__id__first__bit : int

logic cert__id__contentst__id__last__bit : int

logic cert__id__contentst__id__position : int

axiom cert__id__contentst__id__first__bit_axiom :
  (0 <= cert__id__contentst__id__first__bit)

axiom cert__id__contentst__id__last__bit_axiom :
  (cert__id__contentst__id__first__bit <  cert__id__contentst__id__last__bit)

axiom cert__id__contentst__id__position_axiom :
  (0 <= cert__id__contentst__id__position)

logic cert__id__contentst__notbefore__first__bit : int

logic cert__id__contentst__notbefore__last__bit : int

logic cert__id__contentst__notbefore__position : int

axiom cert__id__contentst__notbefore__first__bit_axiom :
  (0 <= cert__id__contentst__notbefore__first__bit)

axiom cert__id__contentst__notbefore__last__bit_axiom :
  (cert__id__contentst__notbefore__first__bit <  cert__id__contentst__notbefore__last__bit)

axiom cert__id__contentst__notbefore__position_axiom :
  (0 <= cert__id__contentst__notbefore__position)

logic cert__id__contentst__notafter__first__bit : int

logic cert__id__contentst__notafter__last__bit : int

logic cert__id__contentst__notafter__position : int

axiom cert__id__contentst__notafter__first__bit_axiom :
  (0 <= cert__id__contentst__notafter__first__bit)

axiom cert__id__contentst__notafter__last__bit_axiom :
  (cert__id__contentst__notafter__first__bit <  cert__id__contentst__notafter__last__bit)

axiom cert__id__contentst__notafter__position_axiom :
  (0 <= cert__id__contentst__notafter__position)

logic cert__id__contentst__mechanism__first__bit : int

logic cert__id__contentst__mechanism__last__bit : int

logic cert__id__contentst__mechanism__position : int

axiom cert__id__contentst__mechanism__first__bit_axiom :
  (0 <= cert__id__contentst__mechanism__first__bit)

axiom cert__id__contentst__mechanism__last__bit_axiom :
  (cert__id__contentst__mechanism__first__bit <  cert__id__contentst__mechanism__last__bit)

axiom cert__id__contentst__mechanism__position_axiom :
  (0 <= cert__id__contentst__mechanism__position)

logic cert__id__contentst__subject__first__bit : int

logic cert__id__contentst__subject__last__bit : int

logic cert__id__contentst__subject__position : int

axiom cert__id__contentst__subject__first__bit_axiom :
  (0 <= cert__id__contentst__subject__first__bit)

axiom cert__id__contentst__subject__last__bit_axiom :
  (cert__id__contentst__subject__first__bit <  cert__id__contentst__subject__last__bit)

axiom cert__id__contentst__subject__position_axiom :
  (0 <= cert__id__contentst__subject__position)

logic cert__id__contentst__subjectpublickey__first__bit : int

logic cert__id__contentst__subjectpublickey__last__bit : int

logic cert__id__contentst__subjectpublickey__position : int

axiom cert__id__contentst__subjectpublickey__first__bit_axiom :
  (0 <= cert__id__contentst__subjectpublickey__first__bit)

axiom cert__id__contentst__subjectpublickey__last__bit_axiom :
  (cert__id__contentst__subjectpublickey__first__bit <  cert__id__contentst__subjectpublickey__last__bit)

axiom cert__id__contentst__subjectpublickey__position_axiom :
  (0 <= cert__id__contentst__subjectpublickey__position)

logic user_eq40 : us_rep12, us_rep12 -> bool

logic dummy100 : issueridt

logic dummy101 : namecountt

logic dummy102 : (int,character) farray

logic dummy103 : serialnumbert

logic dummy104 : yearst

logic dummy105 : monthst

logic dummy106 : dayst

logic dummy107 : millisecst

logic dummy108 : yearst

logic dummy109 : monthst

logic dummy110 : dayst

logic dummy111 : millisecst

logic dummy112 : algorithmt

logic dummy113 : issueridt

logic dummy114 : namecountt

logic dummy115 : (int,character) farray

logic dummy116 : algorithmt

logic dummy117 : keyidt

logic dummy118 : keylengtht

type contentst__ref1 = { contentst__content1 : us_rep12
}

function contentst__ref___4__projection(a: contentst__ref1) : us_rep12 =
  (a).contentst__content1

type us_split_fields24 = { rec__admintoken__valididcertt__valid : bool;
rec__admintoken__valididcertt__contents : us_rep12
}

function us_split_fields_Valid__2__projection(a: us_split_fields24) : bool =
  (a).rec__admintoken__valididcertt__valid

function us_split_fields_Contents__2__projection(a: us_split_fields24) : us_rep12 =
  (a).rec__admintoken__valididcertt__contents

type us_split_fields__ref12 = { us_split_fields__content12 :
us_split_fields24
}

function us_split_fields__ref___20__projection(a: us_split_fields__ref12) : us_split_fields24 =
  (a).us_split_fields__content12

type us_rep13 = { us_split_fields25 : us_split_fields24
}

function us_rep___21__projection(a: us_rep13) : us_split_fields24 =
  (a).us_split_fields25

logic bool_eq45 : us_rep13, us_rep13 -> bool

axiom bool_eq_def43 :
  (forall a:us_rep13. forall b:us_rep13 [bool_eq45(a, b)].
  ((((((a).us_split_fields25).rec__admintoken__valididcertt__valid = ((b).us_split_fields25).rec__admintoken__valididcertt__valid) and
  (bool_eq44(((a).us_split_fields25).rec__admintoken__valididcertt__contents,
  ((b).us_split_fields25).rec__admintoken__valididcertt__contents) = true)) ->
  (bool_eq45(a, b) = true)) and
  ((not ((((a).us_split_fields25).rec__admintoken__valididcertt__valid = ((b).us_split_fields25).rec__admintoken__valididcertt__valid) and
  (bool_eq44(((a).us_split_fields25).rec__admintoken__valididcertt__contents,
  ((b).us_split_fields25).rec__admintoken__valididcertt__contents) = true))) ->
  (bool_eq45(a, b) = false))))

logic value__size16 : int

logic object__size16 : us_rep13 -> int

logic value__alignment16 : int

logic object__alignment16 : us_rep13 -> int

axiom value__size_axiom16 : (0 <= value__size16)

axiom object__size_axiom16 : (forall a:us_rep13. (0 <= object__size16(a)))

axiom value__alignment_axiom16 : (0 <= value__alignment16)

axiom object__alignment_axiom16 :
  (forall a:us_rep13. (0 <= object__alignment16(a)))

logic admintoken__valididcertt__valid__first__bit : int

logic admintoken__valididcertt__valid__last__bit : int

logic admintoken__valididcertt__valid__position : int

axiom admintoken__valididcertt__valid__first__bit_axiom :
  (0 <= admintoken__valididcertt__valid__first__bit)

axiom admintoken__valididcertt__valid__last__bit_axiom :
  (admintoken__valididcertt__valid__first__bit <  admintoken__valididcertt__valid__last__bit)

axiom admintoken__valididcertt__valid__position_axiom :
  (0 <= admintoken__valididcertt__valid__position)

logic admintoken__valididcertt__contents__first__bit : int

logic admintoken__valididcertt__contents__last__bit : int

logic admintoken__valididcertt__contents__position : int

axiom admintoken__valididcertt__contents__first__bit_axiom :
  (0 <= admintoken__valididcertt__contents__first__bit)

axiom admintoken__valididcertt__contents__last__bit_axiom :
  (admintoken__valididcertt__contents__first__bit <  admintoken__valididcertt__contents__last__bit)

axiom admintoken__valididcertt__contents__position_axiom :
  (0 <= admintoken__valididcertt__contents__position)

logic user_eq41 : us_rep13, us_rep13 -> bool

logic dummy119 : bool

logic dummy120 : issueridt

logic dummy121 : namecountt

logic dummy122 : (int,character) farray

logic dummy123 : serialnumbert

logic dummy124 : yearst

logic dummy125 : monthst

logic dummy126 : dayst

logic dummy127 : millisecst

logic dummy128 : yearst

logic dummy129 : monthst

logic dummy130 : dayst

logic dummy131 : millisecst

logic dummy132 : algorithmt

logic dummy133 : issueridt

logic dummy134 : namecountt

logic dummy135 : (int,character) farray

logic dummy136 : algorithmt

logic dummy137 : keyidt

logic dummy138 : keylengtht

type valididcertt__ref = { valididcertt__content : us_rep13
}

function valididcertt__ref___projection(a: valididcertt__ref) : us_rep13 =
  (a).valididcertt__content

logic attr__ATTRIBUTE_ADDRESS11 : int

logic theauthcertrole : int, us_private, int, int, us_split_fields18,
  us_split_fields24 -> int

logic theauthcertrole__function_guard : int, int, us_private, int, int,
  us_split_fields18, us_split_fields24 -> prop

logic therole : us_rep9 -> int

logic therole__function_guard : int, us_rep9 -> prop

axiom theauthcertrole__post_axiom :
  (forall admintoken__tokenpresence:int. forall admintoken__tokentry:int.
  forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [theauthcertrole(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)]. (((in_range1(admintoken__tokenpresence) and
  in_range7(admintoken__tokentry)) and in_range6(admintoken__tokenid)) ->
  in_range2(theauthcertrole(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)))))))

axiom theauthcertrole__def_axiom :
  (forall admintoken__tokenpresence:int. forall admintoken__tokentry:int.
  forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [theauthcertrole(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)]. (((in_range1(admintoken__tokenpresence) and
  in_range7(admintoken__tokentry)) and in_range6(admintoken__tokenid)) ->
  (theauthcertrole(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields) = therole((admintoken__authcert__fields).rec__admintoken__validauthcertt__contents)))))))

logic isgood : int, us_private, int, int, us_split_fields18,
  us_split_fields24 -> bool

logic isgood__function_guard : bool, int, us_private, int, int,
  us_split_fields18, us_split_fields24 -> prop

axiom isgood__post_axiom : true

axiom isgood__def_axiom :
  (forall admintoken__tokenpresence:int. forall admintoken__tokentry:int.
  forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [isgood(admintoken__tokenpresence, admintoken__state, admintoken__tokentry,
  admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)]. ((isgood(admintoken__tokenpresence,
  admintoken__state, admintoken__tokentry, admintoken__tokenid,
  admintoken__authcert__fields, admintoken__idcert__fields) = true) <->
  ((admintoken__idcert__fields).rec__admintoken__valididcertt__valid = true))))))

logic authcertvalid : int, us_private, int, int, us_split_fields18,
  us_split_fields24 -> bool

logic authcertvalid__function_guard : bool, int, us_private, int, int,
  us_split_fields18, us_split_fields24 -> prop

axiom authcertvalid__post_axiom : true

axiom authcertvalid__def_axiom :
  (forall admintoken__tokenpresence:int. forall admintoken__tokentry:int.
  forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [authcertvalid(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)]. ((authcertvalid(admintoken__tokenpresence,
  admintoken__state, admintoken__tokentry, admintoken__tokenid,
  admintoken__authcert__fields, admintoken__idcert__fields) = true) <->
  ((admintoken__authcert__fields).rec__admintoken__validauthcertt__valid = true))))))

type t

predicate in_range26(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq46 : int, int -> bool

axiom bool_eq_def44 :
  (forall x:int. forall y:int [bool_eq46(x, y)]. (((x = y) -> (bool_eq46(x,
  y) = true)) and ((not (x = y)) -> (bool_eq46(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE26 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check26 : us_image -> prop

logic attr__ATTRIBUTE_VALUE26 : us_image -> int

logic user_eq42 : t, t -> bool

logic dummy139 : t

type t__ref2 = { t__content2 : t
}

function t__ref___3__projection(a: t__ref2) : t = (a).t__content2

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic latchislocked : unit -> bool

logic latchislocked__function_guard : bool, unit -> prop

logic islocked : int, us_private, us_split_fields2 -> bool

logic islocked__function_guard : bool, int, us_private,
  us_split_fields2 -> prop

axiom islocked__post_axiom : true

axiom islocked__def_axiom :
  (forall latch__currentlatch:int.
  (forall latch__state:us_private.
  (forall latch__latchtimeout__fields:yearst.
  forall latch__latchtimeout__fields1:monthst.
  forall latch__latchtimeout__fields2:dayst.
  forall latch__latchtimeout__fields3:millisecst
  [islocked(latch__currentlatch, latch__state, { rec__clock__timet__year =
  latch__latchtimeout__fields; rec__clock__timet__month =
  latch__latchtimeout__fields1; rec__clock__timet__day =
  latch__latchtimeout__fields2; rec__clock__timet__millisec =
  latch__latchtimeout__fields3 })]. ((islocked(latch__currentlatch,
  latch__state, { rec__clock__timet__year = latch__latchtimeout__fields;
  rec__clock__timet__month = latch__latchtimeout__fields1;
  rec__clock__timet__day = latch__latchtimeout__fields2;
  rec__clock__timet__millisec = latch__latchtimeout__fields3 }) = true) <->
  (latch__currentlatch = 0)))))

logic alarm_timeout : us_private -> us_rep1

logic alarm_timeout__function_guard : us_rep1, us_private -> prop

axiom alarm_timeout__post_axiom : true

logic thecurrentdoor : us_private -> int

logic thecurrentdoor__function_guard : int, us_private -> prop

type t1

predicate in_range27(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq47 : int, int -> bool

axiom bool_eq_def45 :
  (forall x:int. forall y:int [bool_eq47(x, y)]. (((x = y) -> (bool_eq47(x,
  y) = true)) and ((not (x = y)) -> (bool_eq47(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE27 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check27 : us_image -> prop

logic attr__ATTRIBUTE_VALUE27 : us_image -> int

logic user_eq43 : t1, t1 -> bool

logic dummy140 : t1

type t__ref3 = { t__content3 : t1
}

function t__ref___4__projection(a: t__ref3) : t1 = (a).t__content3

axiom thecurrentdoor__post_axiom :
  (forall door__state:us_private [thecurrentdoor(door__state)].
  in_range27(thecurrentdoor(door__state)))

logic isalarming : unit -> bool

logic isalarming__function_guard : bool, unit -> prop

type statscount

predicate in_range28(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq48 : int, int -> bool

axiom bool_eq_def46 :
  (forall x:int. forall y:int [bool_eq48(x, y)]. (((x = y) -> (bool_eq48(x,
  y) = true)) and ((not (x = y)) -> (bool_eq48(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE28 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check28 : us_image -> prop

logic attr__ATTRIBUTE_VALUE28 : us_image -> int

logic user_eq44 : statscount, statscount -> bool

logic dummy141 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep19 : statscount -> int

logic of_rep19 : int -> statscount

axiom inversion_axiom19 :
  (forall x:statscount [to_rep19(x)]. (of_rep19(to_rep19(x)) = x))

axiom range_axiom19 :
  (forall x:statscount [to_rep19(x)]. in_range28(to_rep19(x)))

axiom coerce_axiom19 :
  (forall x:int [to_rep19(of_rep19(x))]. (in_range28(x) ->
  (to_rep19(of_rep19(x)) = x)))

type us_split_fields26 = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields26) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields26) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields26) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields26) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref13 = { us_split_fields__content13 :
us_split_fields26
}

function us_split_fields__ref___24__projection(a: us_split_fields__ref13) : us_split_fields26 =
  (a).us_split_fields__content13

type us_rep14 = { us_split_fields27 : us_split_fields26
}

function us_rep___25__projection(a: us_rep14) : us_split_fields26 =
  (a).us_split_fields27

logic bool_eq49 : us_rep14, us_rep14 -> bool

axiom bool_eq_def47 :
  (forall a:us_rep14. forall b:us_rep14 [bool_eq49(a, b)].
  ((((((to_rep19(((a).us_split_fields27).rec__stats__t__successentry) = to_rep19(((b).us_split_fields27).rec__stats__t__successentry)) and
  (to_rep19(((a).us_split_fields27).rec__stats__t__failentry) = to_rep19(((b).us_split_fields27).rec__stats__t__failentry))) and
  (to_rep19(((a).us_split_fields27).rec__stats__t__successbio) = to_rep19(((b).us_split_fields27).rec__stats__t__successbio))) and
  (to_rep19(((a).us_split_fields27).rec__stats__t__failbio) = to_rep19(((b).us_split_fields27).rec__stats__t__failbio))) ->
  (bool_eq49(a, b) = true)) and
  ((not ((((to_rep19(((a).us_split_fields27).rec__stats__t__successentry) = to_rep19(((b).us_split_fields27).rec__stats__t__successentry)) and
  (to_rep19(((a).us_split_fields27).rec__stats__t__failentry) = to_rep19(((b).us_split_fields27).rec__stats__t__failentry))) and
  (to_rep19(((a).us_split_fields27).rec__stats__t__successbio) = to_rep19(((b).us_split_fields27).rec__stats__t__successbio))) and
  (to_rep19(((a).us_split_fields27).rec__stats__t__failbio) = to_rep19(((b).us_split_fields27).rec__stats__t__failbio)))) ->
  (bool_eq49(a, b) = false))))

logic value__size17 : int

logic object__size17 : us_rep14 -> int

logic value__alignment17 : int

logic object__alignment17 : us_rep14 -> int

axiom value__size_axiom17 : (0 <= value__size17)

axiom object__size_axiom17 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size17({ us_split_fields27 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom17 : (0 <= value__alignment17)

axiom object__alignment_axiom17 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment17({ us_split_fields27 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq45 : us_rep14, us_rep14 -> bool

logic dummy142 : statscount

logic dummy143 : statscount

logic dummy144 : statscount

logic dummy145 : statscount

type t__ref4 = { t__content4 : us_rep14
}

function t__ref___5__projection(a: t__ref4) : us_rep14 = (a).t__content4

type statust1

predicate in_range29(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq50 : int, int -> bool

axiom bool_eq_def48 :
  (forall x:int. forall y:int [bool_eq50(x, y)]. (((x = y) -> (bool_eq50(x,
  y) = true)) and ((not (x = y)) -> (bool_eq50(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE29 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check29 : us_image -> prop

logic attr__ATTRIBUTE_VALUE29 : us_image -> int

logic user_eq46 : statust1, statust1 -> bool

logic dummy146 : statust1

type statust__ref1 = { statust__content1 : statust1
}

function statust__ref___2__projection(a: statust__ref1) : statust1 =
  (a).statust__content1

logic attr__ATTRIBUTE_ADDRESS14 : int

logic statusisgotadmintoken : int, us_private -> bool

logic statusisgotadmintoken__function_guard : bool, int, us_private -> prop

axiom statusisgotadmintoken__post_axiom : true

axiom statusisgotadmintoken__def_axiom :
  (forall enclave__status:int.
  (forall enclave__state:us_private [statusisgotadmintoken(enclave__status,
  enclave__state)]. ((statusisgotadmintoken(enclave__status,
  enclave__state) = true) <-> (enclave__status = 5))))

logic statusiswaitingremoveadmintokenfail : int, us_private -> bool

logic statusiswaitingremoveadmintokenfail__function_guard : bool, int,
  us_private -> prop

axiom statusiswaitingremoveadmintokenfail__post_axiom : true

axiom statusiswaitingremoveadmintokenfail__def_axiom :
  (forall enclave__status:int.
  (forall enclave__state:us_private
  [statusiswaitingremoveadmintokenfail(enclave__status, enclave__state)].
  ((statusiswaitingremoveadmintokenfail(enclave__status,
  enclave__state) = true) <-> (enclave__status = 4))))

logic statusiswaitingstartadminop : int, us_private -> bool

logic statusiswaitingstartadminop__function_guard : bool, int,
  us_private -> prop

axiom statusiswaitingstartadminop__post_axiom : true

axiom statusiswaitingstartadminop__def_axiom :
  (forall enclave__status:int.
  (forall enclave__state:us_private
  [statusiswaitingstartadminop(enclave__status, enclave__state)].
  ((statusiswaitingstartadminop(enclave__status, enclave__state) = true) <->
  (enclave__status = 6))))

logic statusiswaitingfinishadminop : int, us_private -> bool

logic statusiswaitingfinishadminop__function_guard : bool, int,
  us_private -> prop

axiom statusiswaitingfinishadminop__post_axiom : true

axiom statusiswaitingfinishadminop__def_axiom :
  (forall enclave__status:int.
  (forall enclave__state:us_private
  [statusiswaitingfinishadminop(enclave__status, enclave__state)].
  ((statusiswaitingfinishadminop(enclave__status, enclave__state) = true) <->
  (enclave__status = 7))))

logic statusisenclavequiescent : int, us_private -> bool

logic statusisenclavequiescent__function_guard : bool, int,
  us_private -> prop

axiom statusisenclavequiescent__post_axiom : true

axiom statusisenclavequiescent__def_axiom :
  (forall enclave__status:int.
  (forall enclave__state:us_private
  [statusisenclavequiescent(enclave__status, enclave__state)].
  ((statusisenclavequiescent(enclave__status, enclave__state) = true) <->
  (enclave__status = 3))))

logic statusisshutdown : int, us_private -> bool

logic statusisshutdown__function_guard : bool, int, us_private -> prop

axiom statusisshutdown__post_axiom : true

axiom statusisshutdown__def_axiom :
  (forall enclave__status:int.
  (forall enclave__state:us_private [statusisshutdown(enclave__status,
  enclave__state)]. ((statusisshutdown(enclave__status,
  enclave__state) = true) <-> (enclave__status = 8))))

logic enrolmentisinprogress : int, us_private -> bool

logic enrolmentisinprogress__function_guard : bool, int, us_private -> prop

type enrolmentstates

predicate in_range30(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq51 : int, int -> bool

axiom bool_eq_def49 :
  (forall x:int. forall y:int [bool_eq51(x, y)]. (((x = y) -> (bool_eq51(x,
  y) = true)) and ((not (x = y)) -> (bool_eq51(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE30 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check30 : us_image -> prop

logic attr__ATTRIBUTE_VALUE30 : us_image -> int

logic user_eq47 : enrolmentstates, enrolmentstates -> bool

logic dummy147 : enrolmentstates

type enrolmentstates__ref = { enrolmentstates__content : enrolmentstates
}

function enrolmentstates__ref___projection(a: enrolmentstates__ref) : enrolmentstates =
  (a).enrolmentstates__content

axiom enrolmentisinprogress__post_axiom : true

axiom enrolmentisinprogress__def_axiom :
  (forall enclave__status:int.
  (forall enclave__state:us_private [enrolmentisinprogress(enclave__status,
  enclave__state)]. ((enrolmentisinprogress(enclave__status,
  enclave__state) = true) <-> in_range30(enclave__status))))

logic hasshutdown : int, us_private -> bool

logic hasshutdown__function_guard : bool, int, us_private -> prop

axiom hasshutdown__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields5 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields5 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep8(usedlogfiles3)) and
  (numberlogentries = (((to_rep8(usedlogfiles3) - 1) * 1024) + to_rep9((logfileentries[currentlogfile])))))))))

axiom def_axiom :
  (forall temp___1371:int. (in_range16(temp___1371) ->
  (forall temp___1372:int.
  (to_rep9((temp___1369(temp___1371)[temp___1372])) = temp___1371))))

axiom greaterthan__post_axiom : true

axiom greaterthan__def_axiom :
  (forall left:yearst. forall left1:monthst. forall left2:dayst.
  forall left3:millisecst. forall right:yearst. forall right1:monthst.
  forall right2:dayst. forall right3:millisecst [greaterthan({
  us_split_fields3 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  })]. ((greaterthan({ us_split_fields3 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true) <-> ((((to_rep2(right) <  to_rep2(left)) or
  ((to_rep2(left) = to_rep2(right)) and
  (to_rep3(right1) <  to_rep3(left1)))) or
  (((to_rep2(left) = to_rep2(right)) and
  (to_rep3(left1) = to_rep3(right1))) and
  (to_rep4(right2) <  to_rep4(left2)))) or
  ((((to_rep2(left) = to_rep2(right)) and
  (to_rep3(left1) = to_rep3(right1))) and
  (to_rep4(left2) = to_rep4(right2))) and
  (to_rep5(right3) <  to_rep5(left3))))))

axiom therole__post_axiom :
  (forall contents:us_rep9 [therole(contents)]. in_range2(therole(contents)))

axiom therole__def_axiom :
  (forall contents:us_rep9 [therole(contents)].
  (therole(contents) = to_rep(((contents).us_split_fields17).rec__cert__attr__auth__contentst__role)))

axiom def_axiom1 :
  (forall temp___1367:int. (in_range13(temp___1367) ->
  (forall temp___1368:int.
  (to_rep6((temp___1365(temp___1367)[temp___1368])) = temp___1367))))

 (* File "tismain.adb", line 147, characters 0-0 *)
goal WP_parameter_def :
  (forall logfilestate__split_fields:logfileindext.
  forall logfilestate__split_fields1:logentrycountt.
  forall logfilestate__split_fields2:(int,logfileindext) farray.
  forall logfilestate__split_fields3:logfileindext.
  forall logfilestate__split_fields4:logfileindext.
  forall logfilestate__split_fields5:logfilecountt.
  forall logfilestate__split_fields6:(int,fileentrycountt) farray.
  forall auditalarm:int. forall tokenpresence:int. forall tokentry:int.
  forall tokenid:int. forall currentlatch:int. forall status:int.
  forall logfilestate__split_fields7:logfileindext.
  forall logfilestate__split_fields8:logentrycountt.
  forall logfilestate__split_fields9:(int,logfileindext) farray.
  forall logfilestate__split_fields10:logfileindext.
  forall logfilestate__split_fields11:logfileindext.
  forall logfilestate__split_fields12:logfilecountt.
  forall logfilestate__split_fields13:(int,fileentrycountt) farray.
  forall auditalarm1:int. forall thistisinfo__split_fields:us_split_fields10.
  forall tokenpresence1:int. forall tokentry1:int. forall tokenid1:int.
  forall authcert__split_fields:us_split_fields18.
  forall idcert__split_fields:us_split_fields24. forall currentlatch1:int.
  forall latchtimeout__split_fields:us_split_fields2. forall status1:int.
  forall theadmin__split_fields:us_split_fields. forall state:us_private.
  forall state1:us_private. forall state2:us_private.
  forall state3:us_private.
  forall logfilestate__split_fields14:us_split_fields6.
  forall auditalarm2:int.
  forall thistisinfo__split_fields1:us_split_fields10.
  forall tokenpresence2:int. forall tokentry2:int. forall tokenid2:int.
  forall authcert__split_fields1:us_split_fields18.
  forall idcert__split_fields1:us_split_fields24. forall currentlatch2:int.
  forall latchtimeout__split_fields1:us_split_fields2. forall status2:int.
  forall theadmin__split_fields1:us_split_fields. forall state4:us_private.
  forall state5:us_private. forall state6:us_private.
  forall state7:us_private.
  forall currenttimevar__split_fields:us_split_fields2.
  forall thistisinfo__split_fields2:us_split_fields10.
  forall tokenpresence3:int. forall tokentry3:int. forall tokenid3:int.
  forall authcert__split_fields2:us_split_fields18.
  forall idcert__split_fields2:us_split_fields24. forall status3:int.
  forall systemfault:bool. forall currenttime:us_private.
  forall state8:us_private. forall state9:us_private.
  forall state10:us_private. forall shutdowncompleted:bool.
  forall currentlatch3:int.
  forall latchtimeout__split_fields2:us_split_fields2.
  forall theadmin__split_fields2:us_split_fields. forall state11:us_private.
  forall state12:us_private. (((0 <= 1) -> in_range1(tokenpresence)) ->
  (((0 <= 2) -> in_range7(tokentry)) -> (((0 <= 4294967295) ->
  in_range6(tokenid)) ->
  ((valid_numberlogentries(to_rep6(logfilestate__split_fields),
  to_rep7(logfilestate__split_fields1), { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields2;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields3;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields4;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields5 } },
  logfilestate__split_fields6) = true) -> (((0 <= 1) ->
  in_range8(auditalarm)) -> (((0 <= 1) -> in_range26(currentlatch)) ->
  (((0 <= 8) -> in_range29(status)) ->
  ((((((((((((((not (enrolmentisinprogress(status1, state3) = true)) <->
  (privatekeypresent(thistisinfo__split_fields, state) = true)) and
  ((enrolmentisinprogress(status1, state3) = true) or
  (statusisenclavequiescent(status1, state3) = true))) and (not (ispresent({
  us_split_fields1 = theadmin__split_fields }) = true))) and
  (not (isdoingop({ us_split_fields1 = theadmin__split_fields
  }) = true))) and (not (rolepresent({ us_split_fields1 =
  theadmin__split_fields }) = 1))) and
  (not (statusiswaitingstartadminop(status1, state3) = true))) and
  (not (statusiswaitingfinishadminop(status1, state3) = true))) and
  (not (statusisshutdown(status1, state3) = true))) and
  (not (isgood(tokenpresence1, state1, tokentry1, tokenid1,
  authcert__split_fields, idcert__split_fields) = true))) and
  (not (authcertvalid(tokenpresence1, state1, tokentry1, tokenid1,
  authcert__split_fields, idcert__split_fields) = true))) and
  (not (theauthcertrole(tokenpresence1, state1, tokentry1, tokenid1,
  authcert__split_fields, idcert__split_fields) = 1))) and
  ((((((in_range8(auditalarm1) and in_range26(currentlatch1)) and
  in_range7(tokentry1)) and in_range29(status1)) and in_range6(tokenid1)) and
  in_range1(tokenpresence1)) and
  (valid_numberlogentries(to_rep6(logfilestate__split_fields7),
  to_rep7(logfilestate__split_fields8), { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields9;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields10;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields11;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields12 } },
  logfilestate__split_fields13) = true))) -> (((islocked(currentlatch1,
  state2, latchtimeout__split_fields) = true) <->
  (latchislocked(void) = true)) ->
  ((((((((((((((not (enrolmentisinprogress(status2, state7) = true)) <->
  (privatekeypresent(thistisinfo__split_fields1, state4) = true)) and
  ((islocked(currentlatch2, state6, latchtimeout__split_fields1) = true) <->
  (latchislocked(void) = true))) and ((rolepresent({ us_split_fields1 =
  theadmin__split_fields1 }) = 1) -> (((isgood(tokenpresence2, state5,
  tokentry2, tokenid2, authcert__split_fields1,
  idcert__split_fields1) = true) and (authcertvalid(tokenpresence2, state5,
  tokentry2, tokenid2, authcert__split_fields1,
  idcert__split_fields1) = true)) and (theauthcertrole(tokenpresence2,
  state5, tokentry2, tokenid2, authcert__split_fields1,
  idcert__split_fields1) = 1)))) and (((isdoingop({ us_split_fields1 =
  theadmin__split_fields1 }) = true) and (thecurrentop({ us_split_fields1 =
  theadmin__split_fields1 }) = 3)) -> (rolepresent({ us_split_fields1 =
  theadmin__split_fields1 }) = 1))) and ((rolepresent({ us_split_fields1 =
  theadmin__split_fields1 }) = 1) -> (((isdoingop({ us_split_fields1 =
  theadmin__split_fields1 }) = true) and (thecurrentop({ us_split_fields1 =
  theadmin__split_fields1 }) = 3)) or (not (isdoingop({ us_split_fields1 =
  theadmin__split_fields1 }) = true))))) and ((not (ispresent({
  us_split_fields1 = theadmin__split_fields1 }) = true)) -> (not (isdoingop({
  us_split_fields1 = theadmin__split_fields1 }) = true)))) and (((isdoingop({
  us_split_fields1 = theadmin__split_fields1 }) = true) and (thecurrentop({
  us_split_fields1 = theadmin__split_fields1 }) = 4)) ->
  (statusiswaitingstartadminop(status2, state7) = true))) and
  (((statusisgotadmintoken(status2, state7) = true) or
  (statusiswaitingremoveadmintokenfail(status2, state7) = true)) ->
  (not (ispresent({ us_split_fields1 = theadmin__split_fields1
  }) = true)))) and (((statusiswaitingstartadminop(status2,
  state7) = true) or (statusiswaitingfinishadminop(status2,
  state7) = true)) -> ((ispresent({ us_split_fields1 =
  theadmin__split_fields1 }) = true) and (isdoingop({ us_split_fields1 =
  theadmin__split_fields1 }) = true)))) and
  ((statusisenclavequiescent(status2, state7) = true) -> (not (isdoingop({
  us_split_fields1 = theadmin__split_fields1 }) = true)))) and
  ((statusisshutdown(status2, state7) = true) -> ((not (isdoingop({
  us_split_fields1 = theadmin__split_fields1 }) = true)) and (rolepresent({
  us_split_fields1 = theadmin__split_fields1 }) = 0)))) and
  ((enrolmentisinprogress(status2, state7) = true) -> ((not (ispresent({
  us_split_fields1 = theadmin__split_fields1 }) = true)) and
  (not (isdoingop({ us_split_fields1 = theadmin__split_fields1
  }) = true))))) -> ((((((((((0 <= 1) -> in_range26(currentlatch2)) and
  ((0 <= 1) -> in_range8(auditalarm2))) and ((0 <= 8) ->
  in_range29(status2))) and ((0 <= 2) -> in_range7(tokentry2))) and
  ((0 <= 4294967295) -> in_range6(tokenid2))) and ((0 <= 1) ->
  in_range1(tokenpresence2))) and
  (valid_numberlogentries(to_rep6((logfilestate__split_fields14).rec__auditlog__logfilestatet__currentlogfile),
  to_rep7((logfilestate__split_fields14).rec__auditlog__logfilestatet__numberlogentries),
  (logfilestate__split_fields14).rec__auditlog__logfilestatet__usedlogfiles,
  (logfilestate__split_fields14).rec__auditlog__logfilestatet__logfileentries) = true)) and
  ((((((((((((((((not (shutdowncompleted = true)) and
  (not (systemfault = true))) and ((not (enrolmentisinprogress(status3,
  state10) = true)) <-> (privatekeypresent(thistisinfo__split_fields2,
  state8) = true))) and ((((islocked(currentlatch3, state11,
  latchtimeout__split_fields2) = true) and (thecurrentdoor(state12) = 0)) and
  (greaterthanorequal(thecurrenttime(currenttimevar__split_fields,
  currenttime), alarm_timeout(state12)) = true)) ->
  ((isalarming(void) = true) or (systemfault = true)))) and
  (((islocked(currentlatch3, state11,
  latchtimeout__split_fields2) = true) <-> (latchislocked(void) = true)) or
  (systemfault = true))) and ((rolepresent({ us_split_fields1 =
  theadmin__split_fields2 }) = 1) -> (((isgood(tokenpresence3, state9,
  tokentry3, tokenid3, authcert__split_fields2,
  idcert__split_fields2) = true) and (authcertvalid(tokenpresence3, state9,
  tokentry3, tokenid3, authcert__split_fields2,
  idcert__split_fields2) = true)) and (theauthcertrole(tokenpresence3,
  state9, tokentry3, tokenid3, authcert__split_fields2,
  idcert__split_fields2) = 1)))) and (((isdoingop({ us_split_fields1 =
  theadmin__split_fields2 }) = true) and (thecurrentop({ us_split_fields1 =
  theadmin__split_fields2 }) = 3)) -> (rolepresent({ us_split_fields1 =
  theadmin__split_fields2 }) = 1))) and ((rolepresent({ us_split_fields1 =
  theadmin__split_fields2 }) = 1) -> (((isdoingop({ us_split_fields1 =
  theadmin__split_fields2 }) = true) and (thecurrentop({ us_split_fields1 =
  theadmin__split_fields2 }) = 3)) or (not (isdoingop({ us_split_fields1 =
  theadmin__split_fields2 }) = true))))) and ((not (ispresent({
  us_split_fields1 = theadmin__split_fields2 }) = true)) -> (not (isdoingop({
  us_split_fields1 = theadmin__split_fields2 }) = true)))) and (((isdoingop({
  us_split_fields1 = theadmin__split_fields2 }) = true) and (thecurrentop({
  us_split_fields1 = theadmin__split_fields2 }) = 4)) ->
  (statusiswaitingstartadminop(status3, state10) = true))) and
  (((statusisgotadmintoken(status3, state10) = true) or
  (statusiswaitingremoveadmintokenfail(status3, state10) = true)) ->
  (not (ispresent({ us_split_fields1 = theadmin__split_fields2
  }) = true)))) and (((statusiswaitingstartadminop(status3,
  state10) = true) or (statusiswaitingfinishadminop(status3,
  state10) = true)) -> ((isdoingop({ us_split_fields1 =
  theadmin__split_fields2 }) = true) and (ispresent({ us_split_fields1 =
  theadmin__split_fields2 }) = true)))) and
  ((statusisenclavequiescent(status3, state10) = true) -> (not (isdoingop({
  us_split_fields1 = theadmin__split_fields2 }) = true)))) and
  ((statusisshutdown(status3, state10) = true) -> ((not (isdoingop({
  us_split_fields1 = theadmin__split_fields2 }) = true)) and (rolepresent({
  us_split_fields1 = theadmin__split_fields2 }) = 0)))) and
  ((enrolmentisinprogress(status3, state10) = true) -> ((not (ispresent({
  us_split_fields1 = theadmin__split_fields2 }) = true)) and
  (not (isdoingop({ us_split_fields1 = theadmin__split_fields2
  }) = true))))) and (((0 <= 1) -> in_range1(tokenpresence3)) and
  (((0 <= 2) -> in_range7(tokentry3)) and (((0 <= 4294967295) ->
  in_range6(tokenid3)) and (((0 <= 1) -> in_range26(currentlatch3)) and
  ((0 <= 8) -> in_range29(status3)))))))) ->
  ((not (enrolmentisinprogress(status3, state10) = true)) ->
  (privatekeypresent(thistisinfo__split_fields2, state8) = true))))))))))))))
