(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__container__cursor__index natural)))))
(define-fun us_split_fields_Index__projection ((a us_split_fields)) natural (rec__container__cursor__index a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (= (to_rep (rec__container__cursor__index (us_split_fields1 a))) (to_rep (rec__container__cursor__index (us_split_fields1 b)))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const container__cursor__index__first__bit Int)
(declare-const container__cursor__index__last__bit Int)
(declare-const container__cursor__index__position Int)
(assert (<= 0 container__cursor__index__first__bit))
(assert (< container__cursor__index__first__bit container__cursor__index__last__bit))
(assert (<= 0 container__cursor__index__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((cursor__ref (mk_cursor__ref (cursor__content us_rep)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep (cursor__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (positive positive) Bool)
(declare-const dummy3 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun to_rep1 ((x positive)) Int (positiveqtint x))
(declare-fun of_rep1 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x positive)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))
(assert (forall ((a (Array Int positive))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int positive))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int positive)) (a__first Int) (a__last Int) (b (Array Int positive)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep1 (select a temp___idx_173)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep1 (select a temp___idx_173)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-const dummy4 (Array Int positive))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int positive)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int positive)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int positive)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int positive))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int positive))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int positive))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int positive) (Array Int positive)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__container__container__a (Array Int positive))))))
(define-fun us_split_fields_A__projection ((a us_split_fields2)) (Array Int positive) (rec__container__container__a a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (= (bool_eq1 (rec__container__container__a (us_split_fields3 a)) 1 200 (rec__container__container__a (us_split_fields3 b)) 1 200) true) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const container__container__a__first__bit Int)
(declare-const container__container__a__last__bit Int)
(declare-const container__container__a__position Int)
(assert (<= 0 container__container__a__first__bit))
(assert (< container__container__a__first__bit container__container__a__last__bit))
(assert (<= 0 container__container__a__position))
(declare-fun user_eq5 (us_rep1 us_rep1) Bool)
(declare-const dummy5 us_rep1)
(declare-datatypes () ((container__ref (mk_container__ref (container__content us_rep1)))))
(define-fun container__ref___projection ((a container__ref)) us_rep1 (container__content a))
(declare-fun first (us_rep1) us_rep)
(declare-fun first__function_guard (us_rep us_rep1) Bool)
(assert true)
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 1))
(assert (forall ((c us_rep1)) (! (= (first c) (mk___rep (mk___split_fields rliteral))) :pattern ((first c)))))
(declare-fun has_element (us_rep1 us_rep) Bool)
(declare-fun has_element__function_guard (Bool us_rep1 us_rep) Bool)
(assert true)
(assert (forall ((c us_rep1)) (forall ((p us_rep)) (! (= (= (has_element c p) true) (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields1 p)))) (<= (to_rep (rec__container__cursor__index (us_split_fields1 p))) 200))) :pattern ((has_element c p))))))
(declare-fun next (us_rep1 us_rep) us_rep)
(declare-fun next__function_guard (us_rep us_rep1 us_rep) Bool)
(assert true)
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 0))
(assert (forall ((c us_rep1)) (forall ((p us_rep)) (! (= (next c p) (ite (< (to_rep (rec__container__cursor__index (us_split_fields1 p))) 200) (mk___rep (mk___split_fields (of_rep (+ (to_rep (rec__container__cursor__index (us_split_fields1 p))) 1)))) (mk___rep (mk___split_fields rliteral1)))) :pattern ((next c p))))))
(declare-fun element (us_rep1 us_rep) Int)
(declare-fun element__function_guard (Int us_rep1 us_rep) Bool)
(assert (forall ((c us_rep1)) (forall ((p us_rep)) (! (=> (= (has_element c p) true) (dynamic_invariant (element c p) true false true true)) :pattern ((element c p))))))
(assert (forall ((c us_rep1)) (forall ((p us_rep)) (! (= (element c p) (to_rep1 (let ((temp___621 (rec__container__container__a (us_split_fields3 c)))) (select temp___621 (to_rep (rec__container__cursor__index (us_split_fields1 p))))))) :pattern ((element c p))))))
(declare-sort my_integer 0)
(declare-fun my_integerqtint (my_integer) Int)
(assert (forall ((i my_integer)) (and (<= 1 (my_integerqtint i)) (<= (my_integerqtint i) 200))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 200)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (my_integer my_integer) Bool)
(declare-const dummy6 my_integer)
(declare-datatypes () ((my_integer__ref (mk_my_integer__ref (my_integer__content my_integer)))))
(define-fun my_integer__ref___projection ((a my_integer__ref)) my_integer (my_integer__content a))
(define-fun dynamic_invariant1 ((temp___expr_573 Int) (temp___is_init_569 Bool) (temp___skip_constant_570 Bool) (temp___do_toplevel_571 Bool) (temp___do_typ_inv_572 Bool)) Bool (=> (or (= temp___is_init_569 true) (<= 1 200)) (in_range4 temp___expr_573)))
(declare-sort small_int 0)
(declare-fun small_intqtint (small_int) Int)
(assert (forall ((i small_int)) (and (<= 1 (small_intqtint i)) (<= (small_intqtint i) 10))))
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (small_int small_int) Bool)
(declare-const dummy7 small_int)
(declare-datatypes () ((small_int__ref (mk_small_int__ref (small_int__content small_int)))))
(define-fun small_int__ref___projection ((a small_int__ref)) small_int (small_int__content a))
(define-fun dynamic_invariant2 ((temp___expr_580 Int) (temp___is_init_576 Bool) (temp___skip_constant_577 Bool) (temp___do_toplevel_578 Bool) (temp___do_typ_inv_579 Bool)) Bool (=> (or (= temp___is_init_576 true) (<= 1 10)) (in_range5 temp___expr_580)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-fun container__arr__aggregate_def (Int) (Array Int positive))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range3 temp___expr_46)))
(declare-const rliteral2 positive)
(assert (= (positiveqtint rliteral2) 3))
(assert (forall ((temp___657 Int)) (=> (dynamic_invariant4 temp___657 true true true true) (forall ((temp___658 Int)) (= (select (container__arr__aggregate_def temp___657) temp___658) rliteral2)))))
(declare-const x Int)
(declare-const r Int)
(declare-const i Int)
(declare-const b Bool)
(declare-const arr (Array Int positive))
(declare-const my_container__split_fields (Array Int positive))
(declare-const position__split_fields natural)
(declare-const e Int)
(declare-const e1 Int)
(declare-const e2 Int)
(declare-const temp___623 Int)
(declare-const temp___622 Bool)
(declare-const o Int)
(declare-const temp___625 Int)
(declare-const temp___624 Int)
(declare-const temp___627 Int)
(declare-const temp___626 Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const temp___628 Int)
(declare-const o3 Int)
(declare-const temp___629 Int)
(declare-const temp___630 Int)
(declare-const o4 Int)
(declare-const o5 natural)
(declare-const temp___634 natural)
(declare-const o6 Int)
(declare-const temp___633 Bool)
(declare-const o7 us_rep)
(declare-const o8 Bool)
(declare-const o9 us_rep)
(declare-const temp___641 cursor__ref)
(declare-const o10 Int)
(declare-const temp___640 Int)
(declare-const temp___639 Bool)
(declare-const temp___637 Int)
(declare-const temp___638 int__ref)
(declare-const o11 Int)
(declare-const o12 us_rep)
(declare-const o13 Bool)
(declare-const o14 us_rep)
(declare-const temp___655 cursor__ref)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const temp___647 Int)
(declare-const temp___646 Int)
(declare-const temp___649 int__ref)
(declare-const temp___648 int__ref)
(declare-const o17 Int)
(declare-const b1 Bool)
(declare-const e3 Int)
(declare-const e4 Int)
(declare-const e5 Int)
(declare-const result int__ref)
(declare-const x1 Int)
(declare-const result1 int__ref)
(declare-const r1 Int)
(declare-const result2 int__ref)
(declare-const i1 Int)
(declare-const result3 map__ref)
(declare-const arr1 (Array Int positive))
(declare-const result4 us_split_fields__ref1)
(declare-const my_container__split_fields1 us_split_fields2)
(declare-const result5 us_split_fields__ref)
(declare-const position__split_fields1 us_split_fields)
(declare-const x2 Int)
(declare-const b2 Bool)
(declare-const result6 bool__ref)
(declare-const b3 Bool)
(declare-const result7 int__ref)
(declare-const x3 Int)
(declare-const x4 int__ref)
(declare-const b4 bool__ref)
(declare-const x5 Int)
(declare-const b5 Bool)
(declare-const x6 int__ref)
(declare-const b6 bool__ref)
(declare-const x7 Int)
(declare-const b7 Bool)
(declare-const r2 Int)
(declare-const i2 Int)
(declare-const temp___6271 Int)
(declare-const temp___6261 Int)
(declare-const result8 int__ref)
(declare-const temp___6272 Int)
(declare-const result9 int__ref)
(declare-const temp___6262 Int)
(declare-const result10 int__ref)
(declare-const r3 Int)
(declare-const result11 int__ref)
(declare-const i3 Int)
(declare-const r4 int__ref)
(declare-const i4 int__ref)
(declare-const r5 Int)
(declare-const i5 Int)
(declare-const r6 int__ref)
(declare-const i6 int__ref)
(declare-const r7 Int)
(declare-const i7 Int)
(declare-const x8 Int)
(declare-const result12 int__ref)
(declare-const x9 Int)
(declare-const x10 int__ref)
(declare-const x11 Int)
(declare-const x12 int__ref)
(declare-const x13 Int)
(declare-const result13 int__ref)
(declare-const x14 Int)
(declare-const x15 Int)
(declare-const temp___6301 Int)
(declare-const result14 int__ref)
(declare-const temp___6302 Int)
(declare-const x16 int__ref)
(declare-const x17 Int)
(declare-const x18 int__ref)
(declare-const x19 Int)
(declare-const temp___6341 us_rep)
(declare-const result15 Bool)
(declare-const result16 int__ref)
(declare-const e6 Int)
(declare-const e7 int__ref)
(declare-const e8 Int)
(declare-const result17 Bool)
(declare-const b8 Bool)
(declare-const e9 Int)
(declare-const temp___6342 us_rep)
(declare-const result18 bool__ref)
(declare-const b9 Bool)
(declare-const result19 Bool)
(declare-const b10 bool__ref)
(declare-const e10 int__ref)
(declare-const temp___6343 cursor__ref)
(declare-const b11 Bool)
(declare-const e11 Int)
(declare-const temp___6344 us_rep)
(declare-const b12 bool__ref)
(declare-const e12 int__ref)
(declare-const temp___6345 cursor__ref)
(declare-const b13 Bool)
(declare-const e13 Int)
(declare-const temp___6346 us_rep)
(declare-const temp___6411 us_rep)
(declare-const result20 Bool)
(declare-const result21 int__ref)
(declare-const e14 Int)
(declare-const e15 int__ref)
(declare-const e16 Int)
(declare-const result22 Bool)
(declare-const x20 Int)
(declare-const b14 Bool)
(declare-const e17 Int)
(declare-const temp___6412 us_rep)
(declare-const result23 int__ref)
(declare-const x21 Int)
(declare-const x22 Int)
(declare-const temp___6381 Int)
(declare-const result24 int__ref)
(declare-const temp___6382 Int)
(declare-const x23 int__ref)
(declare-const x24 Int)
(declare-const rho Int)
(declare-const x25 int__ref)
(declare-const x26 Int)
(declare-const rho1 Int)
(declare-const result25 bool__ref)
(declare-const b15 Bool)
(declare-const result26 Bool)
(declare-const x27 int__ref)
(declare-const b16 bool__ref)
(declare-const e18 int__ref)
(declare-const temp___6413 cursor__ref)
(declare-const x28 Int)
(declare-const b17 Bool)
(declare-const e19 Int)
(declare-const temp___6414 us_rep)
(declare-const x29 int__ref)
(declare-const b18 bool__ref)
(declare-const e20 int__ref)
(declare-const temp___6415 cursor__ref)
(declare-const x30 Int)
(declare-const b19 Bool)
(declare-const e21 Int)
(declare-const temp___6416 us_rep)
(declare-const result27 Bool)
(declare-const result28 int__ref)
(declare-const e22 Int)
(declare-const e23 int__ref)
(declare-const e24 Int)
(declare-const result29 Bool)
(declare-const result30 bool__ref)
(declare-const b20 Bool)
(declare-const result31 int__ref)
(declare-const r8 Int)
(declare-const x31 Int)
(declare-const r9 Int)
(declare-const b21 Bool)
(declare-const e25 Int)
(declare-const i8 Int)
(declare-const temp___6551 us_rep)
(declare-const temp___654 Int)
(declare-const rho2 Int)
(declare-const rho3 Int)
(declare-const result32 int__ref)
(declare-const temp___6541 Int)
(declare-const result33 int__ref)
(declare-const i9 Int)
(declare-const result34 int__ref)
(declare-const x32 Int)
(declare-const x33 Int)
(declare-const i10 Int)
(declare-const temp___6491 Int)
(declare-const temp___6481 Int)
(declare-const result35 int__ref)
(declare-const temp___6482 Int)
(declare-const result36 int__ref)
(declare-const temp___6492 Int)
(declare-const x34 int__ref)
(declare-const i11 int__ref)
(declare-const x35 Int)
(declare-const i12 Int)
(declare-const rho4 Int)
(declare-const rho5 Int)
(declare-const x36 int__ref)
(declare-const i13 int__ref)
(declare-const x37 Int)
(declare-const i14 Int)
(declare-const rho6 Int)
(declare-const rho7 Int)
(define-fun e26 () int__ref (mk_int__ref e2))
(define-fun e27 () int__ref (mk_int__ref e1))
(define-fun e28 () int__ref (mk_int__ref e))
(assert (= result (mk_int__ref x)))
(assert (= x1 1))
(assert (in_range4 x1))
(assert (= result1 (mk_int__ref r)))
(assert (= r1 100))
(assert (in_range4 r1))
(assert (= result2 (mk_int__ref i)))
(assert (= i1 1))
(assert (in_range5 i1))
(assert (= result3 (mk_map__ref arr)))
(assert (= arr1 (container__arr__aggregate_def 3)))
(assert (= result4 (mk___split_fields__ref1 (mk___split_fields1 my_container__split_fields))))
(assert (= my_container__split_fields1 (mk___split_fields1 arr1)))
(assert (= result5 (mk___split_fields__ref (mk___split_fields position__split_fields))))
(assert (= position__split_fields1 (mk___split_fields rliteral1)))
(assert (=> (< 0 x1) (= temp___623 x1)))
(assert (=> (< 0 x1) (= temp___622 b)))
(assert (=> (< 0 x1) (and (=> (<= 1 200) (in_range4 x2)) (< 0 x2))))
(assert (=> (< 0 x1) (= result6 (mk_bool__ref b2))))
(assert (=> (< 0 x1) (= b3 (distinct 1 0))))
(assert (=> (< 0 x1) (=> (< x2 200) (and (= o (+ x2 1)) (in_range4 (+ x2 1))))))
(assert (=> (< 0 x1) (=> (< x2 200) (= result7 (mk_int__ref x2)))))
(assert (=> (< 0 x1) (=> (< x2 200) (= x3 o))))
(assert (=> (< 0 x1) (=> (not (< x2 200)) (= x3 x2))))
(assert (=> (< 0 x1) (not (< 0 x3))))
(assert (=> (< 0 x1) (= b4 (mk_bool__ref b3))))
(assert (=> (< 0 x1) (= x4 (mk_int__ref x3))))
(assert (=> (< 0 x1) (= b5 b3)))
(assert (=> (< 0 x1) (= x5 x3)))
(assert (=> (< 0 x1) (= b6 b4)))
(assert (=> (< 0 x1) (= x6 x4)))
(assert (=> (< 0 x1) (= b7 b5)))
(assert (=> (< 0 x1) (= x7 x5)))
(assert (=> (not (< 0 x1)) (= b6 (mk_bool__ref b))))
(assert (=> (not (< 0 x1)) (= x6 (mk_int__ref x1))))
(assert (=> (not (< 0 x1)) (= b7 b1)))
(assert (=> (not (< 0 x1)) (= x7 x1)))
(assert (=> (< i1 10) (= temp___625 i1)))
(assert (=> (< i1 10) (= temp___624 r1)))
(assert (=> (< i1 10) (= 0 temp___627)))
(assert (=> (< i1 10) (= 0 temp___626)))
(assert (=> (< i1 10) (<= (- 100 (* 10 i2)) r2)))
(assert (=> (< i1 10) (and (and (=> (<= 1 200) (in_range4 r2)) (=> (<= 1 10) (in_range5 i2))) (< i2 10))))
(assert (=> (< i1 10) (= result8 (mk_int__ref temp___6271))))
(assert (=> (< i1 10) (= temp___6272 i2)))
(assert (=> (< i1 10) (= result9 (mk_int__ref temp___6261))))
(assert (=> (< i1 10) (= temp___6262 r2)))
(assert (=> (< i1 10) (and (= o1 (- r2 i2)) (in_range4 (- r2 i2)))))
(assert (=> (< i1 10) (= result10 (mk_int__ref r2))))
(assert (=> (< i1 10) (= r3 o1)))
(assert (=> (< i1 10) (and (= o2 (+ i2 1)) (in_range5 (+ i2 1)))))
(assert (=> (< i1 10) (= result11 (mk_int__ref i2))))
(assert (=> (< i1 10) (= i3 o2)))
(assert (=> (< i1 10) (not (< i3 10))))
(assert (=> (< i1 10) (= i4 (mk_int__ref i3))))
(assert (=> (< i1 10) (= r4 (mk_int__ref r3))))
(assert (=> (< i1 10) (= i5 i3)))
(assert (=> (< i1 10) (= r5 r3)))
(assert (=> (< i1 10) (= i6 i4)))
(assert (=> (< i1 10) (= r6 r4)))
(assert (=> (< i1 10) (= i7 i5)))
(assert (=> (< i1 10) (= r7 r5)))
(assert (=> (not (< i1 10)) (= i6 (mk_int__ref i1))))
(assert (=> (not (< i1 10)) (= r6 (mk_int__ref r1))))
(assert (=> (not (< i1 10)) (= i7 i1)))
(assert (=> (not (< i1 10)) (= r7 r1)))
(assert (= temp___628 (int__content x6)))
(assert (=> (<= 1 200) (in_range4 x8)))
(assert (and (= o3 (+ x8 1)) (in_range4 (+ x8 1))))
(assert (= result12 (mk_int__ref x8)))
(assert (= x9 o3))
(assert (< x9 0))
(assert (= x10 (mk_int__ref x9)))
(assert (= x11 x9))
(assert (= x12 x10))
(assert (= x13 x11))
(assert (= temp___629 (int__content x12)))
(assert (= 0 temp___630))
(assert (and (= o4 (+ (int__content x12) 1)) (in_range4 (+ (int__content x12) 1))))
(assert (= result13 x12))
(assert (= x14 o4))
(assert (=> (<= 1 200) (in_range4 x15)))
(assert (= result14 (mk_int__ref temp___6301)))
(assert (= temp___6302 x15))
(assert (= x15 5))
(assert (= x16 (mk_int__ref x15)))
(assert (= x17 x15))
(assert (= x18 x16))
(assert (= x19 x17))
(assert (and (= (mk___rep (mk___split_fields o5)) (first (mk___rep1 my_container__split_fields1))) (= rliteral o5)))
(assert (= temp___634 o5))
(assert (and (= result15 (has_element (mk___rep1 my_container__split_fields1) (mk___rep (mk___split_fields temp___634)))) (= (= result15 true) (and (<= 1 (to_rep temp___634)) (<= (to_rep temp___634) 200)))))
(assert (=> (= result15 true) (and (= o6 (element (mk___rep1 my_container__split_fields1) (mk___rep (mk___split_fields temp___634)))) (and (in_range1 o6) (= o6 (to_rep1 (select (rec__container__container__a my_container__split_fields1) (to_rep temp___634))))))))
(assert (=> (= result15 true) (= result16 e28)))
(assert (=> (= result15 true) (= e6 o6)))
(assert (=> (= result15 true) (= e7 (mk_int__ref e6))))
(assert (=> (= result15 true) (= e8 e6)))
(assert (=> (not (= result15 true)) (= e7 e28)))
(assert (=> (not (= result15 true)) (= e8 e3)))
(assert (and (= result17 (has_element (mk___rep1 my_container__split_fields1) (mk___rep (mk___split_fields temp___634)))) (= (= result17 true) (and (<= 1 (to_rep temp___634)) (<= (to_rep temp___634) 200)))))
(assert (=> (= result17 true) (= temp___633 (bool__content b6))))
(assert (=> (= result17 true) (and (= (has_element (mk___rep1 my_container__split_fields1) temp___6342) true) (= e9 (element (mk___rep1 my_container__split_fields1) temp___6342)))))
(assert (=> (= result17 true) (= result18 (mk_bool__ref b8))))
(assert (=> (= result17 true) (= b9 (distinct 0 0))))
(assert (=> (= result17 true) (and (= o7 (next (mk___rep1 my_container__split_fields1) temp___6342)) (= o7 (ite (< (to_rep (rec__container__cursor__index (us_split_fields1 temp___6342))) 200) (mk___rep (mk___split_fields (of_rep (+ (to_rep (rec__container__cursor__index (us_split_fields1 temp___6342))) 1)))) (mk___rep (mk___split_fields rliteral1)))))))
(assert (=> (= result17 true) (and (= o8 (has_element (mk___rep1 my_container__split_fields1) o7)) (= (= o8 true) (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields1 o7)))) (<= (to_rep (rec__container__cursor__index (us_split_fields1 o7))) 200))))))
(assert (=> (= result17 true) (= result19 (ite (not (= o8 true)) true false))))
(assert (=> (= result17 true) (= result19 true)))
(assert (=> (= result17 true) (= temp___6343 (mk_cursor__ref temp___6342))))
(assert (=> (= result17 true) (= e10 (mk_int__ref e9))))
(assert (=> (= result17 true) (= b10 (mk_bool__ref b9))))
(assert (=> (= result17 true) (= temp___6344 temp___6342)))
(assert (=> (= result17 true) (= e11 e9)))
(assert (=> (= result17 true) (= b11 b9)))
(assert (=> (= result17 true) (= temp___6345 temp___6343)))
(assert (=> (= result17 true) (= e12 e10)))
(assert (=> (= result17 true) (= b12 b10)))
(assert (=> (= result17 true) (= temp___6346 temp___6344)))
(assert (=> (= result17 true) (= e13 e11)))
(assert (=> (= result17 true) (= b13 b11)))
(assert (=> (not (= result17 true)) (= temp___6345 (mk_cursor__ref (mk___rep (mk___split_fields temp___634))))))
(assert (=> (not (= result17 true)) (= e12 e7)))
(assert (=> (not (= result17 true)) (= b12 b6)))
(assert (=> (not (= result17 true)) (= temp___6346 temp___6341)))
(assert (=> (not (= result17 true)) (= e13 e8)))
(assert (=> (not (= result17 true)) (= b13 b7)))
(assert (and (= o9 (first (mk___rep1 my_container__split_fields1))) (= o9 (mk___rep (mk___split_fields rliteral)))))
(assert (= temp___641 (mk_cursor__ref o9)))
(assert (and (= result20 (has_element (mk___rep1 my_container__split_fields1) (cursor__content temp___641))) (= (= result20 true) (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___641))))) (<= (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___641)))) 200)))))
(assert (=> (= result20 true) (and (= o10 (element (mk___rep1 my_container__split_fields1) (cursor__content temp___641))) (and (in_range1 o10) (= o10 (to_rep1 (select (rec__container__container__a my_container__split_fields1) (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___641)))))))))))
(assert (=> (= result20 true) (= result21 e27)))
(assert (=> (= result20 true) (= e14 o10)))
(assert (=> (= result20 true) (= e15 (mk_int__ref e14))))
(assert (=> (= result20 true) (= e16 e14)))
(assert (=> (not (= result20 true)) (= e15 e27)))
(assert (=> (not (= result20 true)) (= e16 e4)))
(assert (and (= result22 (has_element (mk___rep1 my_container__split_fields1) (cursor__content temp___641))) (= (= result22 true) (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___641))))) (<= (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___641)))) 200)))))
(assert (=> (= result22 true) (= temp___640 (int__content x18))))
(assert (=> (= result22 true) (= temp___639 (bool__content b12))))
(assert (=> (= result22 true) (and (=> (<= 1 200) (in_range4 x20)) (and (= (has_element (mk___rep1 my_container__split_fields1) (let ((subject temp___641)) temp___6412)) true) (= e17 (element (mk___rep1 my_container__split_fields1) (let ((subject temp___641)) temp___6412)))))))
(assert (=> (= result22 true) (= temp___637 x20)))
(assert (=> (= result22 true) (= temp___638 (mk_int__ref 0))))
(assert (=> (= result22 true) (and (= o11 (+ x20 1)) (in_range4 (+ x20 1)))))
(assert (=> (= result22 true) (= result23 (mk_int__ref x20))))
(assert (=> (= result22 true) (= x21 o11)))
(assert (=> (= result22 true) (=> (<= 1 200) (in_range4 x22))))
(assert (=> (= result22 true) (= result24 (let ((subject temp___638)) (mk_int__ref temp___6381)))))
(assert (=> (= result22 true) (= (let ((subject temp___638)) temp___6382) x22)))
(assert (=> (= result22 true) (= x22 5)))
(assert (=> (= result22 true) (= x23 (mk_int__ref x22))))
(assert (=> (= result22 true) (= rho temp___6382)))
(assert (=> (= result22 true) (= x24 x22)))
(assert (=> (= result22 true) (= x25 x23)))
(assert (=> (= result22 true) (= rho1 rho)))
(assert (=> (= result22 true) (= x26 x24)))
(assert (=> (= result22 true) (= result25 (mk_bool__ref b14))))
(assert (=> (= result22 true) (= b15 (distinct 0 0))))
(assert (=> (= result22 true) (and (= o12 (next (mk___rep1 my_container__split_fields1) (let ((subject temp___641)) temp___6412))) (= o12 (ite (< (to_rep (rec__container__cursor__index (us_split_fields1 (let ((subject temp___641)) temp___6412)))) 200) (mk___rep (mk___split_fields (of_rep (+ (to_rep (rec__container__cursor__index (us_split_fields1 (let ((subject temp___641)) temp___6412)))) 1)))) (mk___rep (mk___split_fields rliteral1)))))))
(assert (=> (= result22 true) (and (= o13 (has_element (mk___rep1 my_container__split_fields1) o12)) (= (= o13 true) (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields1 o12)))) (<= (to_rep (rec__container__cursor__index (us_split_fields1 o12))) 200))))))
(assert (=> (= result22 true) (= result26 (ite (not (= o13 true)) true false))))
(assert (=> (= result22 true) (= result26 true)))
(assert (=> (= result22 true) (= temp___6413 (let ((subject temp___641)) (mk_cursor__ref temp___6412)))))
(assert (=> (= result22 true) (= e18 (mk_int__ref e17))))
(assert (=> (= result22 true) (= b16 (mk_bool__ref b15))))
(assert (=> (= result22 true) (= x27 x25)))
(assert (=> (= result22 true) (= temp___6414 temp___6412)))
(assert (=> (= result22 true) (= e19 e17)))
(assert (=> (= result22 true) (= b17 b15)))
(assert (=> (= result22 true) (= x28 x26)))
(assert (=> (= result22 true) (= temp___6415 temp___6413)))
(assert (=> (= result22 true) (= e20 e18)))
(assert (=> (= result22 true) (= b18 b16)))
(assert (=> (= result22 true) (= x29 x27)))
(assert (=> (= result22 true) (= temp___6416 temp___6414)))
(assert (=> (= result22 true) (= e21 e19)))
(assert (=> (= result22 true) (= b19 b17)))
(assert (=> (= result22 true) (= x30 x28)))
(assert (=> (not (= result22 true)) (= temp___6415 temp___641)))
(assert (=> (not (= result22 true)) (= e20 e15)))
(assert (=> (not (= result22 true)) (= b18 b12)))
(assert (=> (not (= result22 true)) (= x29 x18)))
(assert (=> (not (= result22 true)) (= temp___6416 temp___6411)))
(assert (=> (not (= result22 true)) (= e21 e16)))
(assert (=> (not (= result22 true)) (= b19 b13)))
(assert (=> (not (= result22 true)) (= x30 x19)))
(assert (and (= o14 (first (mk___rep1 my_container__split_fields1))) (= o14 (mk___rep (mk___split_fields rliteral)))))
(assert (= temp___655 (mk_cursor__ref o14)))
(assert (and (= result27 (has_element (mk___rep1 my_container__split_fields1) (cursor__content temp___655))) (= (= result27 true) (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___655))))) (<= (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___655)))) 200)))))
(assert (=> (= result27 true) (and (= o15 (element (mk___rep1 my_container__split_fields1) (cursor__content temp___655))) (and (in_range1 o15) (= o15 (to_rep1 (select (rec__container__container__a my_container__split_fields1) (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___655)))))))))))
(assert (=> (= result27 true) (= result28 e26)))
(assert (=> (= result27 true) (= e22 o15)))
(assert (=> (= result27 true) (= e23 (mk_int__ref e22))))
(assert (=> (= result27 true) (= e24 e22)))
(assert (=> (not (= result27 true)) (= e23 e26)))
(assert (=> (not (= result27 true)) (= e24 e5)))
(assert (and (= result29 (has_element (mk___rep1 my_container__split_fields1) (cursor__content temp___655))) (= (= result29 true) (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___655))))) (<= (to_rep (rec__container__cursor__index (us_split_fields1 (cursor__content temp___655)))) 200)))))
(assert (= result29 true))
(assert (= result30 b18))
(assert (= b20 (distinct 1 0)))
(assert (and (= o16 (- (int__content r6) 1)) (in_range4 (- (int__content r6) 1))))
(assert (= result31 r6))
(assert (= r8 o16))
(assert (= b21 true))
(assert (and (and (and (=> (<= 1 200) (in_range4 r9)) (=> (<= (- 2147483648) 2147483647) (in_range1 e25))) (=> (<= 1 200) (in_range4 x31))) (and (= (has_element (mk___rep1 my_container__split_fields1) (let ((subject temp___655)) temp___6551)) true) (= e25 (element (mk___rep1 my_container__split_fields1) (let ((subject temp___655)) temp___6551))))))
(assert (= result32 (mk_int__ref temp___654)))
(assert (= temp___6541 r9))
(assert (= result33 (mk_int__ref i8)))
(assert (= i9 1))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= temp___647 x31)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= temp___646 i9)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= temp___649 (mk_int__ref 0))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= temp___648 (mk_int__ref 0))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (and (= o17 (+ x31 1)) (in_range4 (+ x31 1)))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= result34 (mk_int__ref x31))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= x32 o17)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (and (and (=> (<= 1 200) (in_range4 i10)) (=> (<= 1 200) (in_range4 x33))) (and (<= 1 i10) (<= i10 200)))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= result35 (let ((subject temp___648)) (mk_int__ref temp___6481)))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= (let ((subject temp___648)) temp___6482) i10)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= result36 (let ((subject temp___649)) (mk_int__ref temp___6491)))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= (let ((subject temp___649)) temp___6492) x33)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= i10 200)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= i11 (mk_int__ref i10))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= x34 (mk_int__ref x33))))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= rho5 temp___6482)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= rho4 temp___6492)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= i12 i10)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= x35 x33)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= i13 i11)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= x36 x34)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= rho7 rho5)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= rho6 rho4)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= i14 i12)))
(assert (=> (and (<= 1 i9) (<= i9 200)) (= x37 x35)))
(assert (=> (not (and (<= 1 i9) (<= i9 200))) (= i13 (mk_int__ref i9))))
(assert (=> (not (and (<= 1 i9) (<= i9 200))) (= x36 (mk_int__ref x31))))
(assert (=> (not (and (<= 1 i9) (<= i9 200))) (= rho7 rho3)))
(assert (=> (not (and (<= 1 i9) (<= i9 200))) (= rho6 rho2)))
(assert (=> (not (and (<= 1 i9) (<= i9 200))) (= i14 i9)))
(assert (=> (not (and (<= 1 i9) (<= i9 200))) (= x37 x31)))
(assert (not (= (has_element (mk___rep1 my_container__split_fields1) (let ((subject temp___655)) temp___6551)) true)))
(check-sat)
(exit)
