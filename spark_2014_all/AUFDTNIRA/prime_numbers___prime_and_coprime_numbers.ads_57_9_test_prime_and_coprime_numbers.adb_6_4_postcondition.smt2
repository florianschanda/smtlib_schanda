(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun are_coprime (Int Int) Bool)
(declare-fun are_coprime__function_guard (Bool Int Int) Bool)
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort value_type 0)
(declare-fun value_typeqtint (value_type) Int)
(assert (forall ((i value_type)) (and (<= 0 (value_typeqtint i)) (<= (value_typeqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (value_type value_type) Bool)
(declare-const dummy value_type)
(declare-datatypes () ((value_type__ref (mk_value_type__ref (value_type__content value_type)))))
(define-fun value_type__ref___projection ((a value_type__ref)) value_type (value_type__content a))
(define-fun dynamic_invariant ((temp___expr_208 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 2147483647)) (in_range1 temp___expr_208)))
(assert true)
(assert (forall ((v1 Int) (v2 Int)) (! (= (= (are_coprime v1 v2) true) (and (and (< 0 v1) (< 0 v2)) (forall ((v Int)) (=> (and (<= 2 v) (<= v (ite (< v1 v2) v1 v2))) (not (and (= (mod2 v1 v) 0) (= (mod2 v2 v) 0))))))) :pattern ((are_coprime v1 v2)))))
(declare-fun euclid (Int Int) Int)
(declare-fun euclid__function_guard (Int Int Int) Bool)
(declare-sort tnumber_list_typeD1 0)
(declare-fun tnumber_list_typeD1qtint (tnumber_list_typeD1) Int)
(assert (forall ((i tnumber_list_typeD1)) (and (<= 0 (tnumber_list_typeD1qtint i)) (<= (tnumber_list_typeD1qtint i) 100000))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (tnumber_list_typeD1 tnumber_list_typeD1) Bool)
(declare-const dummy1 tnumber_list_typeD1)
(declare-datatypes () ((tnumber_list_typeD1__ref (mk_tnumber_list_typeD1__ref (tnumber_list_typeD1__content tnumber_list_typeD1)))))
(define-fun tnumber_list_typeD1__ref___projection ((a tnumber_list_typeD1__ref)) tnumber_list_typeD1 (tnumber_list_typeD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-const value Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t62b 0)
(declare-fun t62bqtint (t62b) Int)
(assert (forall ((i t62b)) (and (<= 0 (t62bqtint i)) (<= (t62bqtint i) 100000))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (t62b t62b) Bool)
(declare-const dummy2 t62b)
(declare-datatypes () ((t62b__ref (mk_t62b__ref (t62b__content t62b)))))
(define-fun t62b__ref___projection ((a t62b__ref)) t62b (t62b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const result__ (Array Int Bool))
(declare-const index Int)
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__result (Array Int Bool))
(declare-const temp___264 Int)
(declare-const temp___262 (Array Int Bool))
(declare-const o Int)
(declare-const o1 Bool)
(declare-const o2 (Array Int Bool))
(declare-const result__1 (Array Int Bool))
(declare-const result Int)
(declare-const index1 Int)
(declare-const result1 (Array Int Bool))
(declare-const result__2 (Array Int Bool))
(declare-const result__3 (Array Int Bool))
(declare-const index2 Int)
(declare-const result__4 (Array Int Bool))
(declare-const index3 Int)
(declare-const result__5 (Array Int Bool))
(declare-const index4 Int)
(declare-const result__6 (Array Int Bool))
(declare-const index5 Int)
(declare-const result__7 (Array Int Bool))
(declare-const index6 Int)
(declare-const result2 (Array Int Bool))
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__result1 (Array Int Bool))
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__result2 (Array Int Bool))
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__result3 (Array Int Bool))
(declare-const result__8 (Array Int Bool))
(declare-const index7 Int)
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__result4 (Array Int Bool))
(declare-const result__9 (Array Int Bool))
(declare-const index8 Int)
(declare-const test_prime_and_coprime_numbers__p__initialize_coprime_list__result5 (Array Int Bool))
(define-fun result__10 () map__ref (mk_map__ref result__6))
(define-fun result__11 () map__ref (mk_map__ref result__))
(declare-const result3 (Array Int Bool))
(assert (in_range1 value))
(assert (<= 2 value))
(assert (= (mk_int__ref result) (mk_int__ref index)))
(assert (= index1 0))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= temp___264 index1)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= temp___262 result__)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (and (= o (euclid value index1)) (and (in_range1 o) (ite (= (are_coprime value index1) true) (= o 1) (< 1 o))))))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= o1 (ite (= o 1) true false))))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= o2 (store result__ index1 o1))))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= (mk_map__ref result1) result__11)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= result__2 o2)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (forall ((v Int)) (=> (and (<= 0 v) (<= v index2)) (= (= (select result__3 v) true) (= (are_coprime value v) true))))))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (and (and (forall ((temp___263 Int)) (=> (and (<= 0 temp___263) (<= temp___263 100000)) (=> (or (< 100000 temp___263) (or (< temp___263 0) (< index2 temp___263))) (= (select result__3 temp___263) (select temp___262 temp___263))))) (=> (<= 0 100000) (in_range3 index2))) (and (<= 0 index2) (<= index2 100000)))))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= index2 100000)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= index2 index3)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= result__3 result__4)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= index4 index2)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= result__5 result__3)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= (mk_int__ref index5) (mk_int__ref index3))))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= result__10 (mk_map__ref result__4))))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= index6 index4)))
(assert (=> (and (<= 0 index1) (<= index1 100000)) (= result__7 result__5)))
(assert (=> (not (and (<= 0 index1) (<= index1 100000))) (= index1 index5)))
(assert (=> (not (and (<= 0 index1) (<= index1 100000))) (= result__10 result__11)))
(assert (=> (not (and (<= 0 index1) (<= index1 100000))) (= index6 index1)))
(assert (=> (not (and (<= 0 index1) (<= index1 100000))) (= result__7 result__1)))
(assert (= test_prime_and_coprime_numbers__p__initialize_coprime_list__result1 test_prime_and_coprime_numbers__p__initialize_coprime_list__result2))
(assert (= test_prime_and_coprime_numbers__p__initialize_coprime_list__result3 test_prime_and_coprime_numbers__p__initialize_coprime_list__result1))
(assert (= result2 test_prime_and_coprime_numbers__p__initialize_coprime_list__result))
(assert (= test_prime_and_coprime_numbers__p__initialize_coprime_list__result1 result__6))
(assert (= (mk_map__ref test_prime_and_coprime_numbers__p__initialize_coprime_list__result4) (mk_map__ref test_prime_and_coprime_numbers__p__initialize_coprime_list__result2)))
(assert (= index7 index5))
(assert (= result__8 result__6))
(assert (= test_prime_and_coprime_numbers__p__initialize_coprime_list__result5 test_prime_and_coprime_numbers__p__initialize_coprime_list__result3))
(assert (= index8 index6))
(assert (= result__9 result__7))
(assert (= result3 test_prime_and_coprime_numbers__p__initialize_coprime_list__result4))
(declare-const v Int)
(assert (<= 0 v))
(assert (<= v 100000))
(assert (= (are_coprime value v) true))
(assert (not (= (select test_prime_and_coprime_numbers__p__initialize_coprime_list__result4 v) true)))
(check-sat)
(exit)
