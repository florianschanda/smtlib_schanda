(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 65536))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 65536)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (indexqtint x)) x) :pattern ((indexqtint x)))))
(assert (forall ((x index)) (! (in_range3 (indexqtint x)) :pattern ((indexqtint x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (indexqtint (of_rep x)) x)) :pattern ((indexqtint (of_rep x))))))
(declare-sort extended_index 0)
(declare-fun extended_indexqtint (extended_index) Int)
(assert (forall ((i extended_index)) (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 65536))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 65536)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (extended_index extended_index) Bool)
(declare-const dummy3 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(declare-fun of_rep1 (Int) extended_index)
(assert (forall ((x extended_index)) (! (= (of_rep1 (extended_indexqtint x)) x) :pattern ((extended_indexqtint x)))))
(assert (forall ((x extended_index)) (! (in_range4 (extended_indexqtint x)) :pattern ((extended_indexqtint x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (extended_indexqtint (of_rep1 x)) x)) :pattern ((extended_indexqtint (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__sums__slice_bounds__lo index) (rec__sums__slice_bounds__hi extended_index)))))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(declare-datatypes () ((slice_bounds (mk_slice_bounds (us_split_fields1 us_split_fields)))))
(declare-datatypes () ((slice_bounds__ref (mk_slice_bounds__ref (slice_bounds__content slice_bounds)))))
(define-fun usrec__lo ((b slice_bounds)) Int (indexqtint (rec__sums__slice_bounds__lo (us_split_fields1 b))))
(define-fun usrec__hi ((b slice_bounds)) Int (extended_indexqtint (rec__sums__slice_bounds__hi (us_split_fields1 b))))
(define-fun bool_eq ((a slice_bounds) (b slice_bounds)) Bool (ite (and (= (usrec__lo a) (usrec__lo b)) (= (usrec__hi a) (usrec__hi b))) true false))
(declare-const dummy4 slice_bounds)
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort vector_element 0)
(declare-fun vector_elementqtint (vector_element) Int)
(assert (forall ((i vector_element)) (and (<= (- 32768) (vector_elementqtint i)) (<= (vector_elementqtint i) 32767))))
(define-fun in_range5 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (vector_element vector_element) Bool)
(declare-const dummy5 vector_element)
(declare-datatypes () ((vector_element__ref (mk_vector_element__ref (vector_element__content vector_element)))))
(declare-fun of_rep2 (Int) vector_element)
(assert (forall ((x vector_element)) (! (= (of_rep2 (vector_elementqtint x)) x) :pattern ((vector_elementqtint x)))))
(assert (forall ((x vector_element)) (! (in_range5 (vector_elementqtint x)) :pattern ((vector_elementqtint x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (vector_elementqtint (of_rep2 x)) x)) :pattern ((vector_elementqtint (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int vector_element))))))
(declare-fun slide ((Array Int vector_element) Int Int) (Array Int vector_element))
(assert (forall ((a (Array Int vector_element))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int vector_element))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int vector_element)) (af Int) (al Int) (b (Array Int vector_element)) (bf Int) (bl Int)) Bool (ite (and (ite (<= af al) (= (- al af) (- bl bf)) (< bl bf)) (forall ((idx Int)) (=> (and (<= af idx) (<= idx al)) (= (select a idx) (select b (+ (- bf af) idx)))))) true false))
(declare-fun compare ((Array Int vector_element) Int Int (Array Int vector_element) Int Int) Int)
(assert (forall ((a (Array Int vector_element)) (b (Array Int vector_element))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int vector_element)) (b (Array Int vector_element))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (vector_elementqtint (select a (+ i 1))) (vector_elementqtint (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int vector_element)) (b (Array Int vector_element))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (vector_elementqtint (select b (+ i 1))) (vector_elementqtint (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun le (t t) Bool)
(declare-fun lt (t t) Bool)
(declare-fun gt (t t) Bool)
(declare-fun add (t t) t)
(declare-fun sub (t t) t)
(declare-const one t)
(declare-sort component_type 0)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array t component_type))))))
(declare-fun slide1 ((Array t component_type) t t) (Array t component_type))
(assert (forall ((a (Array t component_type))) (forall ((first t)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array t component_type))) (forall ((old_first t)) (forall ((new_first t)) (forall ((i t)) (! (= (select (slide1 a old_first new_first) i) (select a (sub i (sub new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep3 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep3 (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep3 x)) x)) :pattern ((to_rep (of_rep3 x))))))
(define-fun index_dynamic_property ((first Int) (last Int) (x Int)) Bool (and (<= first x) (<= x last)))
(declare-sort t1 0)
(declare-fun first (t1) integer)
(declare-fun last (t1) integer)
(declare-fun mk (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (index_dynamic_property range_first range_last low) (index_dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int vector_element)) (rt t1)))))
(define-fun of_array ((a (Array Int vector_element)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int vector_element)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int vector_element)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int vector_element)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int vector_element))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int vector_element))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int vector_element))) (<= 0 (object__alignment a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq1 (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy6 us_t)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_t)))))
(define-fun usget ((v us_t) (i Int)) Int (vector_elementqtint (select (elts v) i)))
(define-fun dynamic_invariant2 ((expr us_t) (us Bool) (skip_bounds Bool) (us1 Bool) (us2 Bool)) Bool (=> (not (= skip_bounds true)) (dynamic_property 1 65536 (first1 expr) (last1 expr))))
(declare-fun sum__logic (us_t slice_bounds) Int)
(assert (forall ((v us_t) (b slice_bounds)) (! (and (in_range1 (sum__logic v b)) (and (=> (< (usrec__hi b) (usrec__lo b)) (= (sum__logic v b) 0)) (=> (and (<= (first1 v) (usrec__lo b)) (and (<= (usrec__lo b) (usrec__hi b)) (<= (usrec__hi b) (last1 v)))) (and (=> (= (usrec__lo b) (usrec__hi b)) (= (sum__logic v b) (usget v (usrec__lo b)))) (forall ((b1 slice_bounds)) (! (and (=> (and (= (usrec__hi b1) (usrec__hi b)) (and (< (usrec__lo b) (usrec__lo b1)) (<= (usrec__lo b1) (usrec__hi b)))) (= (sum__logic v b) (+ (sum__logic v b1) (sum__logic v (mk_slice_bounds (mk___split_fields (rec__sums__slice_bounds__lo (us_split_fields1 b)) (of_rep1 (- (usrec__lo b1) 1)))))))) (=> (and (= (usrec__lo b1) (usrec__lo b)) (and (<= (usrec__lo b) (usrec__hi b1)) (< (usrec__hi b1) (usrec__hi b)))) (= (sum__logic v b) (+ (sum__logic v b1) (sum__logic v (mk_slice_bounds (mk___split_fields (of_rep (+ (usrec__hi b1) 1)) (rec__sums__slice_bounds__hi (us_split_fields1 b))))))))) :pattern ((sum__logic v b1)))))))) :pattern ((sum__logic v b)))))
(declare-const x us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy7 integer)
(declare-datatypes () ((t26b__ref (mk_t26b__ref (t26b__content integer)))))
(define-fun t26b__ref___projection ((a t26b__ref)) integer (t26b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const rliteral index)
(assert (= (indexqtint rliteral) 1))
(declare-const rliteral1 extended_index)
(assert (= (extended_indexqtint rliteral1) 0))
(declare-const max_sum Int)
(declare-const current_sum Int)
(declare-const current_lo Int)
(declare-const result____split_fields index)
(declare-const result____split_fields1 extended_index)
(declare-const current_hi Int)
(declare-const slice_sums__maximal_sum_slice_bounds_2__result index)
(declare-const slice_sums__maximal_sum_slice_bounds_2__result1 extended_index)
(declare-const o Int)
(declare-const o1 index)
(declare-const o2 index)
(declare-const o3 extended_index)
(declare-const temp___200 index)
(declare-const temp___2001 extended_index)
(declare-const temp___211 index)
(declare-const temp___2111 extended_index)
(declare-const temp___210 Int)
(declare-const temp___209 Int)
(declare-const temp___208 Int)
(declare-const temp___207 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 index)
(declare-const o7 us_split_fields)
(declare-const temp___204 slice_bounds)
(declare-const o8 Int)
(declare-const o9 extended_index)
(declare-const o10 us_split_fields)
(declare-const temp___206 slice_bounds)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const current_lo1 Int)
(declare-const current_hi1 Int)
(declare-const result int__ref)
(declare-const max_sum1 Int)
(declare-const result1 int__ref)
(declare-const current_sum1 Int)
(declare-const result2 us_split_fields__ref)
(declare-const result____split_fields2 us_split_fields)
(declare-const result3 us_split_fields__ref)
(declare-const result____split_fields3 us_split_fields)
(declare-const result4 int__ref)
(declare-const current_lo2 Int)
(declare-const result5 int__ref)
(declare-const current_hi2 Int)
(declare-const max_sum2 Int)
(declare-const current_sum2 Int)
(declare-const current_lo3 Int)
(declare-const result____split_fields4 us_split_fields)
(declare-const current_hi3 Int)
(declare-const result6 int__ref)
(declare-const current_sum3 Int)
(declare-const result7 int__ref)
(declare-const max_sum3 Int)
(declare-const result8 us_split_fields__ref)
(declare-const result____split_fields5 us_split_fields)
(declare-const result9 us_split_fields__ref)
(declare-const result____split_fields6 us_split_fields)
(declare-const result10 int__ref)
(declare-const current_lo4 Int)
(declare-const result11 int__ref)
(declare-const current_sum4 Int)
(declare-const max_sum4 int__ref)
(declare-const current_sum5 int__ref)
(declare-const current_lo5 int__ref)
(declare-const result____split_fields7 us_split_fields__ref)
(declare-const current_hi4 int__ref)
(declare-const max_sum5 Int)
(declare-const current_sum6 Int)
(declare-const current_lo6 Int)
(declare-const result____split_fields8 us_split_fields)
(declare-const current_hi5 Int)
(declare-const max_sum6 int__ref)
(declare-const current_sum7 int__ref)
(declare-const current_lo7 int__ref)
(declare-const result____split_fields9 us_split_fields__ref)
(declare-const current_hi6 int__ref)
(declare-const max_sum7 Int)
(declare-const current_sum8 Int)
(declare-const current_lo8 Int)
(declare-const result____split_fields10 us_split_fields)
(declare-const current_hi7 Int)
(declare-const max_sum8 int__ref)
(declare-const current_sum9 int__ref)
(declare-const current_lo9 int__ref)
(declare-const result____split_fields11 us_split_fields__ref)
(declare-const current_hi8 int__ref)
(declare-const max_sum9 Int)
(declare-const current_sum10 Int)
(declare-const current_lo10 Int)
(declare-const result____split_fields12 us_split_fields)
(declare-const current_hi9 Int)
(declare-const result12 slice_bounds__ref)
(declare-const slice_sums__maximal_sum_slice_bounds_2__result2 slice_bounds)
(declare-const slice_sums__maximal_sum_slice_bounds_2__result3 slice_bounds__ref)
(declare-const slice_sums__maximal_sum_slice_bounds_2__result4 slice_bounds)
(declare-const max_sum10 int__ref)
(declare-const current_sum11 int__ref)
(declare-const current_lo11 int__ref)
(declare-const result____split_fields13 us_split_fields__ref)
(declare-const current_hi10 int__ref)
(declare-const slice_sums__maximal_sum_slice_bounds_2__result5 slice_bounds__ref)
(declare-const max_sum11 Int)
(declare-const current_sum12 Int)
(declare-const current_lo12 Int)
(declare-const result____split_fields14 us_split_fields)
(declare-const current_hi11 Int)
(declare-const slice_sums__maximal_sum_slice_bounds_2__result6 slice_bounds)
(define-fun current_hi12 () int__ref (mk_int__ref current_hi))
(define-fun result____split_fields15 () us_split_fields__ref (mk___split_fields__ref (mk___split_fields result____split_fields result____split_fields1)))
(define-fun current_lo13 () int__ref (mk_int__ref current_lo))
(declare-const result13 index)
(declare-const result14 extended_index)
(assert (dynamic_invariant2 x true false true true))
(assert (= result (mk_int__ref max_sum)))
(assert (= max_sum1 0))
(assert (in_range2 max_sum1))
(assert (= result1 (mk_int__ref current_sum)))
(assert (= current_sum1 0))
(assert (in_range1 current_sum1))
(assert (in_range3 current_lo))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= result2 result____split_fields15)))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= result____split_fields2 (mk___split_fields rliteral rliteral1))))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= current_hi8 current_hi12)))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= result____split_fields11 (mk___split_fields__ref result____split_fields2))))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= current_lo9 current_lo13)))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= current_sum9 (mk_int__ref current_sum1))))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= max_sum8 (mk_int__ref max_sum1))))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= current_hi9 current_hi1)))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= result____split_fields12 result____split_fields2)))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= current_lo10 current_lo1)))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= current_sum10 current_sum1)))
(assert (=> (< (to_rep (last (rt x))) (to_rep (first (rt x)))) (= max_sum9 max_sum1)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (and (= o (to_rep (first (rt x)))) (in_range3 (to_rep (first (rt x)))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= (indexqtint o1) o)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= o1 o2)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= rliteral1 o3)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= temp___200 o2)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= temp___2001 o3)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= result3 result____split_fields15)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= result____split_fields3 (mk___split_fields temp___200 temp___2001))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= result4 current_lo13)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= current_lo2 (indexqtint (rec__sums__slice_bounds__lo result____split_fields3)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= result5 current_hi12)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= current_hi2 (to_rep (first (rt x))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= result____split_fields3 (mk___split_fields temp___211 temp___2111)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= temp___210 current_hi2))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= temp___209 current_lo2))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= temp___208 current_sum1))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= temp___207 max_sum1))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (and (and (and (<= (to_rep (first (rt x))) current_lo3) (<= current_lo3 current_hi3)) (<= 0 current_sum2)) (<= current_sum2 (* (- current_hi3 current_lo3) 32767))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_sum2 (sum__logic x (mk_slice_bounds (mk___split_fields (of_rep current_lo3) (of_rep1 (- current_hi3 1)))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (<= (indexqtint (rec__sums__slice_bounds__lo result____split_fields4)) (extended_indexqtint (rec__sums__slice_bounds__hi result____split_fields4))) (and (and (<= (to_rep (first (rt x))) (indexqtint (rec__sums__slice_bounds__lo result____split_fields4))) (<= (extended_indexqtint (rec__sums__slice_bounds__hi result____split_fields4)) (to_rep (last (rt x))))) (= max_sum2 (sum__logic x (mk_slice_bounds result____split_fields4))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (forall ((lo_index Int)) (=> (and (<= (to_rep (first (rt x))) lo_index) (<= lo_index (- current_hi3 1))) (forall ((hi_index Int)) (=> (and (<= (to_rep (first (rt x))) hi_index) (<= hi_index (- current_hi3 1))) (<= (sum__logic x (mk_slice_bounds (mk___split_fields (of_rep lo_index) (of_rep1 hi_index)))) max_sum2))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (forall ((lo_index Int)) (=> (and (<= (to_rep (first (rt x))) lo_index) (<= lo_index (- current_lo3 1))) (<= (sum__logic x (mk_slice_bounds (mk___split_fields (of_rep lo_index) (of_rep1 (- current_lo3 1))))) 0))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (forall ((hi_index Int)) (=> (and (<= current_lo3 hi_index) (<= hi_index (- current_hi3 1))) (<= 0 (sum__logic x (mk_slice_bounds (mk___split_fields (of_rep current_lo3) (of_rep1 hi_index))))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (and (and (and (and (=> (<= 0 2147483647) (in_range2 max_sum2)) (=> (<= (- 2147483648) 2147483647) (in_range1 current_sum2))) (in_range3 current_lo3)) (=> (<= (to_rep (first (rt x))) (to_rep (last (rt x)))) (dynamic_property1 (to_rep (first (rt x))) (to_rep (last (rt x))) current_hi3))) (and (<= (to_rep (first (rt x))) current_hi3) (<= current_hi3 (to_rep (last (rt x)))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (and (= o4 (+ current_sum2 (vector_elementqtint (select (elts x) current_hi3)))) (in_range1 (+ current_sum2 (vector_elementqtint (select (elts x) current_hi3))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= result6 (mk_int__ref current_sum2)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_sum3 o4))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (and (= o5 current_sum3) (in_range2 current_sum3))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= result7 (mk_int__ref max_sum2))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= max_sum3 o5)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= (indexqtint o6) current_lo3)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= o7 (mk___split_fields o6 (rec__sums__slice_bounds__hi result____split_fields4)))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= temp___204 (mk_slice_bounds o7))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= result8 (mk___split_fields__ref result____split_fields4))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= result____split_fields5 (us_split_fields1 temp___204))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (and (= o8 current_hi3) (in_range4 current_hi3))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= (extended_indexqtint o9) o8)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= o10 (mk___split_fields (rec__sums__slice_bounds__lo result____split_fields5) o9))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= temp___206 (mk_slice_bounds o10))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= result9 (mk___split_fields__ref result____split_fields5))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= result____split_fields6 (us_split_fields1 temp___206))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= current_lo4 current_lo3)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (< max_sum2 current_sum3) (= current_sum4 current_sum3)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (< current_sum3 0) (=> (not (= current_hi3 65536)) (and (= o11 (+ current_hi3 1)) (in_range1 (+ current_hi3 1)))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (< current_sum3 0) (=> (not (= current_hi3 65536)) (and (= o12 o11) (in_range3 o11))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (< current_sum3 0) (=> (not (= current_hi3 65536)) (= result10 (mk_int__ref current_lo3))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (< current_sum3 0) (=> (not (= current_hi3 65536)) (= current_lo4 o12)))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (< current_sum3 0) (=> (not (= current_hi3 65536)) (= result11 (mk_int__ref current_sum3))))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (< current_sum3 0) (=> (not (= current_hi3 65536)) (= current_sum4 0)))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (< current_sum3 0) (=> (not (not (= current_hi3 65536))) (= current_lo4 current_lo3)))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (< current_sum3 0) (=> (not (not (= current_hi3 65536))) (= current_sum4 current_sum3)))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (not (< current_sum3 0)) (= current_lo4 current_lo3))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (=> (not (< current_sum3 0)) (= current_sum4 current_sum3))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (= result____split_fields6 result____split_fields4)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (=> (not (< max_sum2 current_sum3)) (= max_sum3 max_sum2)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_hi3 (to_rep (last (rt x)))))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_hi4 (mk_int__ref current_hi3)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= result____split_fields7 (mk___split_fields__ref result____split_fields6)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_lo5 (mk_int__ref current_lo4)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_sum5 (mk_int__ref current_sum4)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= max_sum4 (mk_int__ref max_sum3)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_hi5 current_hi3))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= result____split_fields8 result____split_fields6))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_lo6 current_lo4))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_sum6 current_sum4))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= max_sum5 max_sum3))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_hi6 current_hi4))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= result____split_fields9 result____split_fields7))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_lo7 current_lo5))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_sum7 current_sum5))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= max_sum6 max_sum4))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_hi7 current_hi5))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= result____split_fields10 result____split_fields8))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_lo8 current_lo6))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= current_sum8 current_sum6))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x))))) (= max_sum7 max_sum5))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= current_hi6 (mk_int__ref current_hi2)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= result____split_fields9 (mk___split_fields__ref result____split_fields3)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= current_lo7 (mk_int__ref current_lo2)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= current_sum7 (mk_int__ref current_sum1)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= max_sum6 (mk_int__ref max_sum1)))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= current_hi7 current_hi2))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= result____split_fields10 result____split_fields3))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= current_lo8 current_lo2))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= current_sum8 current_sum1))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (=> (not (and (<= (to_rep (first (rt x))) current_hi2) (<= current_hi2 (to_rep (last (rt x)))))) (= max_sum7 max_sum1))))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= current_hi8 current_hi6)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= result____split_fields11 result____split_fields9)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= current_lo9 current_lo7)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= current_sum9 current_sum7)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= max_sum8 max_sum6)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= current_hi9 current_hi7)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= result____split_fields12 result____split_fields10)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= current_lo10 current_lo8)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= current_sum10 current_sum8)))
(assert (=> (not (< (to_rep (last (rt x))) (to_rep (first (rt x))))) (= max_sum9 max_sum7)))
(assert (= slice_sums__maximal_sum_slice_bounds_2__result3 (mk_slice_bounds__ref slice_sums__maximal_sum_slice_bounds_2__result2)))
(assert (= slice_sums__maximal_sum_slice_bounds_2__result4 slice_sums__maximal_sum_slice_bounds_2__result2))
(assert (= result12 (mk_slice_bounds__ref (mk_slice_bounds (mk___split_fields slice_sums__maximal_sum_slice_bounds_2__result slice_sums__maximal_sum_slice_bounds_2__result1)))))
(assert (= slice_sums__maximal_sum_slice_bounds_2__result2 (mk_slice_bounds (us_split_fields__content result____split_fields11))))
(assert (= slice_sums__maximal_sum_slice_bounds_2__result5 slice_sums__maximal_sum_slice_bounds_2__result3))
(assert (= current_hi10 current_hi8))
(assert (= result____split_fields13 result____split_fields11))
(assert (= current_lo11 current_lo9))
(assert (= current_sum11 current_sum9))
(assert (= max_sum10 max_sum8))
(assert (= slice_sums__maximal_sum_slice_bounds_2__result6 slice_sums__maximal_sum_slice_bounds_2__result4))
(assert (= current_hi11 current_hi9))
(assert (= result____split_fields14 result____split_fields12))
(assert (= current_lo12 current_lo10))
(assert (= current_sum12 current_sum10))
(assert (= max_sum11 max_sum9))
(assert (= (mk_slice_bounds (mk___split_fields result13 result14)) (slice_bounds__content slice_sums__maximal_sum_slice_bounds_2__result5)))
(assert (<= (indexqtint (rec__sums__slice_bounds__lo (us_split_fields1 (slice_bounds__content slice_sums__maximal_sum_slice_bounds_2__result5)))) (extended_indexqtint (rec__sums__slice_bounds__hi (us_split_fields1 (slice_bounds__content slice_sums__maximal_sum_slice_bounds_2__result5))))))
(assert (not (<= (to_rep (first (rt x))) (indexqtint (rec__sums__slice_bounds__lo (us_split_fields1 (slice_bounds__content slice_sums__maximal_sum_slice_bounds_2__result5)))))))
(check-sat)
(exit)
