(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type my_int

predicate in_range3(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : my_int, my_int -> bool

logic dummy2 : my_int

type my_int__ref = { my_int__content : my_int
}

function my_int__ref___projection(a: my_int__ref) : my_int =
  (a).my_int__content

logic add : int, int -> int

logic add__function_guard : int, int, int -> prop

axiom add__post_axiom :
  (forall x:int. forall y:int [add(x, y)]. ((in_range3(x) and
  in_range3(y)) -> (((((x + y) <  10000) -> (add(x, y) = (x + y))) and
  ((not ((x + y) <  10000)) -> ((10000 <= (x + y)) -> (add(x,
  y) = 10000)))) and in_range3(add(x, y)))))

logic to_rep : my_int -> int

logic of_rep : int -> my_int

axiom inversion_axiom :
  (forall x:my_int [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:my_int [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__pricing__item__price : my_int;
rec__pricing__item__number : my_int
}

function us_split_fields_Price__projection(a: us_split_fields) : my_int =
  (a).rec__pricing__item__price

function us_split_fields_Number__projection(a: us_split_fields) : my_int =
  (a).rec__pricing__item__number

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__pricing__item__price) = to_rep(((b).us_split_fields1).rec__pricing__item__price)) and
  (to_rep(((a).us_split_fields1).rec__pricing__item__number) = to_rep(((b).us_split_fields1).rec__pricing__item__number))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__pricing__item__price) = to_rep(((b).us_split_fields1).rec__pricing__item__price)) and
  (to_rep(((a).us_split_fields1).rec__pricing__item__number) = to_rep(((b).us_split_fields1).rec__pricing__item__number)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:my_int. forall a1:my_int. (0 <= object__size({ us_split_fields1 =
  { rec__pricing__item__price = a; rec__pricing__item__number = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:my_int. forall a1:my_int. (0 <= object__alignment({
  us_split_fields1 = { rec__pricing__item__price = a;
  rec__pricing__item__number = a1 } })))

logic pricing__item__price__first__bit : int

logic pricing__item__price__last__bit : int

logic pricing__item__price__position : int

axiom pricing__item__price__first__bit_axiom :
  (0 <= pricing__item__price__first__bit)

axiom pricing__item__price__last__bit_axiom :
  (pricing__item__price__first__bit <  pricing__item__price__last__bit)

axiom pricing__item__price__position_axiom :
  (0 <= pricing__item__price__position)

logic pricing__item__number__first__bit : int

logic pricing__item__number__last__bit : int

logic pricing__item__number__position : int

axiom pricing__item__number__first__bit_axiom :
  (0 <= pricing__item__number__first__bit)

axiom pricing__item__number__last__bit_axiom :
  (pricing__item__number__first__bit <  pricing__item__number__last__bit)

axiom pricing__item__number__position_axiom :
  (0 <= pricing__item__number__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : my_int

logic dummy4 : my_int

type item__ref = { item__content : us_rep
}

function item__ref___projection(a: item__ref) : us_rep = (a).item__content

logic price_of_item : us_rep -> int

logic price_of_item__function_guard : int, us_rep -> prop

logic mult : int, int -> int

logic mult__function_guard : int, int, int -> prop

axiom price_of_item__post_axiom :
  (forall it:my_int. forall it1:my_int [price_of_item({ us_split_fields1 = {
  rec__pricing__item__price = it; rec__pricing__item__number = it1 } })].
  ((price_of_item({ us_split_fields1 = { rec__pricing__item__price = it;
  rec__pricing__item__number = it1 } }) = mult(to_rep(it), to_rep(it1))) and
  in_range3(price_of_item({ us_split_fields1 = { rec__pricing__item__price =
  it; rec__pricing__item__number = it1 } }))))

axiom price_of_item__def_axiom :
  (forall it:my_int. forall it1:my_int [price_of_item({ us_split_fields1 = {
  rec__pricing__item__price = it; rec__pricing__item__number = it1 } })].
  (price_of_item({ us_split_fields1 = { rec__pricing__item__price = it;
  rec__pricing__item__number = it1 } }) = mult(to_rep(it), to_rep(it1))))

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))) -> (bool_eq6(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy5 : (int,us_rep) farray

logic dummy6 : t

type basket__ref = { basket__content : us_t
}

function basket__ref___projection(a: basket__ref) : us_t =
  (a).basket__content

logic bk : (int,us_rep) farray

logic bk1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy7 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom mult__post_axiom :
  (forall x:int. forall y:int [mult(x, y)]. ((in_range3(x) and
  in_range3(y)) -> (((((x * y) <  10000) -> (mult(x, y) = (x * y))) and
  ((not ((x * y) <  10000)) -> ((10000 <= (x * y)) -> (mult(x,
  y) = 10000)))) and in_range3(mult(x, y)))))

 (* File "sat.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall total:int. forall it:int.
  forall pricing__price_of_basket__result:int. forall temp___192:int.
  forall temp___191:int. forall o:int. forall o1:int. forall result:int.
  forall total1:int. forall result1:int. forall it1:int. forall total2:int.
  forall it2:int. forall result2:int. forall total3:int. forall total4:int.
  forall it3:int. forall total5:int. forall it4:int. forall total6:int.
  forall it5:int. forall total7:int. forall it6:int. forall result3:int.
  forall pricing__price_of_basket__result1:int.
  forall pricing__price_of_basket__result2:int.
  forall pricing__price_of_basket__result3:int. forall total8:int.
  forall it7:int. forall pricing__price_of_basket__result4:int.
  forall total9:int. forall it8:int.
  forall pricing__price_of_basket__result5:int. (dynamic_property(1,
  2147483647, to_rep1(first(bk1)), to_rep1(last(bk1))) -> ((((({
  int__content = result } = { int__content = total }) and (total1 = 0)) and
  (in_range3(total1) and (((({ int__content = result1 } = { int__content = it
  }) and (it1 = to_rep1(first(bk1)))) and ((((to_rep1(first(bk1)) <= it1) and
  (it1 <= to_rep1(last(bk1)))) and ((((temp___192 = it1) and
  ((temp___191 = total1) and
  ((forall k:int. (((to_rep1(first(bk1)) <= k) and (k <= (it2 - 1))) ->
   (price_of_item((bk[k])) <= total2))) and
  (((((0 <= 10000) -> in_range3(total2)) and
  ((to_rep1(first(bk1)) <= to_rep1(last(bk1))) ->
  dynamic_property1(to_rep1(first(bk1)), to_rep1(last(bk1)), it2))) and
  ((to_rep1(first(bk1)) <= it2) and (it2 <= to_rep1(last(bk1))))) and
  (((((o = price_of_item((bk[it2]))) and (in_range3(o) and
  (o = mult(to_rep((((bk[it2])).us_split_fields1).rec__pricing__item__price),
  to_rep((((bk[it2])).us_split_fields1).rec__pricing__item__number))))) and
  ((o1 = add(total2, o)) and (in_range3(o1) and (((bool_lt((total2 + o),
  10000) = true) and (o1 = (total2 + o))) or ((not (bool_lt((total2 + o),
  10000) = true)) and ((bool_ge((total2 + o), 10000) = true) ->
  (o1 = 10000))))))) and ((total2 = result2) and (total3 = o1))) and
  (it2 = to_rep1(last(bk1)))))))) and (((it2 = it3) and
  (total3 = total4)) and ((it4 = it2) and (total5 = total3)))) and ((({
  int__content = it5 } = { int__content = it3 }) and ({ int__content = total6
  } = { int__content = total4 })) and ((it6 = it4) and
  (total7 = total5))))) or ((not ((to_rep1(first(bk1)) <= it1) and
  (it1 <= to_rep1(last(bk1))))) and (((it1 = it5) and (total1 = total6)) and
  ((it6 = it1) and (total7 = total1)))))) and
  (((pricing__price_of_basket__result1 = pricing__price_of_basket__result2) and
  (pricing__price_of_basket__result3 = pricing__price_of_basket__result1)) and
  (({ int__content = result3 } = { int__content =
  pricing__price_of_basket__result }) and
  (pricing__price_of_basket__result1 = total6)))))) and ((({ int__content =
  pricing__price_of_basket__result4 } = { int__content =
  pricing__price_of_basket__result2 }) and (({ int__content = it7 } = {
  int__content = it5 }) and ({ int__content = total8 } = { int__content =
  total6 }))) and
  ((pricing__price_of_basket__result5 = pricing__price_of_basket__result3) and
  ((it8 = it6) and (total9 = total7))))) ->
  ((to_rep1(first(bk1)) <= to_rep1(last(bk1))) ->
  (1 <= to_rep1(first(bk1)))))))
