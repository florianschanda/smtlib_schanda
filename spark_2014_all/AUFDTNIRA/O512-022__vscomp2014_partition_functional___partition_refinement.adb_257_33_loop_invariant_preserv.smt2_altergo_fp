(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type tcount_typeB

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tcount_typeB, tcount_typeB -> bool

logic dummy1 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type index_count

predicate in_range3(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_count, index_count -> bool

logic dummy2 : index_count

type index_count__ref = { index_count__content : index_count
}

function index_count__ref___projection(a: index_count__ref) : index_count =
  (a).index_count__content

logic to_rep1 : index_count -> int

logic of_rep1 : int -> index_count

axiom inversion_axiom1 :
  (forall x:index_count [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:index_count [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index

predicate in_range4(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep2 : index -> int

logic of_rep2 : int -> index

axiom inversion_axiom2 :
  (forall x:index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:index [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,positive) farray
}

logic slide : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq :
  (forall a:(int,positive) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> (int,positive) farray

axiom concat_def :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : positive, int -> (int,positive) farray

axiom singleton_def :
  (forall v:positive.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type count_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : count_type, count_type -> bool

logic dummy4 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep3 : count_type -> int

logic of_rep3 : int -> count_type

axiom inversion_axiom3 :
  (forall x:count_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:count_type [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = {
rec__partition_refinement__partitioning_sets__cursor__node : count_type
}

function us_split_fields_Node__projection(a: us_split_fields) : count_type =
  (a).rec__partition_refinement__partitioning_sets__cursor__node

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___9__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq8(a, b)].
  (((to_rep3(((a).us_split_fields1).rec__partition_refinement__partitioning_sets__cursor__node) = to_rep3(((b).us_split_fields1).rec__partition_refinement__partitioning_sets__cursor__node)) ->
  (bool_eq8(a, b) = true)) and
  ((not (to_rep3(((a).us_split_fields1).rec__partition_refinement__partitioning_sets__cursor__node) = to_rep3(((b).us_split_fields1).rec__partition_refinement__partitioning_sets__cursor__node))) ->
  (bool_eq8(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. (0 <= object__size({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. (0 <= object__alignment({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = a } })))

logic partition_refinement__partitioning_sets__cursor__node__first__bit : int

logic partition_refinement__partitioning_sets__cursor__node__last__bit : int

logic partition_refinement__partitioning_sets__cursor__node__position : int

axiom partition_refinement__partitioning_sets__cursor__node__first__bit_axiom :
  (0 <= partition_refinement__partitioning_sets__cursor__node__first__bit)

axiom partition_refinement__partitioning_sets__cursor__node__last__bit_axiom :
  (partition_refinement__partitioning_sets__cursor__node__first__bit <  partition_refinement__partitioning_sets__cursor__node__last__bit)

axiom partition_refinement__partitioning_sets__cursor__node__position_axiom :
  (0 <= partition_refinement__partitioning_sets__cursor__node__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : count_type

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref___projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__partition_refinement__partitioning_sets__list__capacity : count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__partition_refinement__partitioning_sets__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__partition_refinement__partitioning_sets__list
: us_main_type
}

function us_split_fields_List__projection(a: us_split_fields2) : us_main_type =
  (a).rec__partition_refinement__partitioning_sets__list

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___7__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___8__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  ((((to_rep3(((a).us_split_discrs1).rec__partition_refinement__partitioning_sets__list__capacity) = to_rep3(((b).us_split_discrs1).rec__partition_refinement__partitioning_sets__list__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__partition_refinement__partitioning_sets__list,
  ((b).us_split_fields3).rec__partition_refinement__partitioning_sets__list) = true)) ->
  (bool_eq9(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs1).rec__partition_refinement__partitioning_sets__list__capacity) = to_rep3(((b).us_split_discrs1).rec__partition_refinement__partitioning_sets__list__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__partition_refinement__partitioning_sets__list,
  ((b).us_split_fields3).rec__partition_refinement__partitioning_sets__list) = true))) ->
  (bool_eq9(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment1({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  a1 } })))

logic partition_refinement__partitioning_sets__list__capacity__first__bit : int

logic partition_refinement__partitioning_sets__list__capacity__last__bit : int

logic partition_refinement__partitioning_sets__list__capacity__position : int

axiom partition_refinement__partitioning_sets__list__capacity__first__bit_axiom :
  (0 <= partition_refinement__partitioning_sets__list__capacity__first__bit)

axiom partition_refinement__partitioning_sets__list__capacity__last__bit_axiom :
  (partition_refinement__partitioning_sets__list__capacity__first__bit <  partition_refinement__partitioning_sets__list__capacity__last__bit)

axiom partition_refinement__partitioning_sets__list__capacity__position_axiom :
  (0 <= partition_refinement__partitioning_sets__list__capacity__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : count_type

logic dummy7 : us_main_type

type list__ref = { list__content : us_rep1
}

function list__ref___projection(a: list__ref) : us_rep1 = (a).list__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq10 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep2

type map__ref1 = { map__content1 : us_rep2
}

function map__ref___projection(a: map__ref1) : us_rep2 = (a).map__content1

type key_type__ref = { key_type__content : us_rep
}

function key_type__ref___projection(a: key_type__ref) : us_rep =
  (a).key_type__content

logic has_key : us_rep2, us_rep -> bool

logic has_key__function_guard : bool, us_rep2, us_rep -> prop

logic positions : us_rep1 -> us_rep2

logic positions__function_guard : us_rep2, us_rep1 -> prop

logic has_element__function_guard : bool, us_rep1, us_rep -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq11 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy9 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref___projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic get : us_rep3, int -> int

logic get__function_guard : int, us_rep3, int -> prop

logic get1 : us_rep2, us_rep -> int

logic get__function_guard1 : int, us_rep2, us_rep -> prop

logic model__ : us_rep1 -> us_rep3

logic model____function_guard : us_rep3, us_rep1 -> prop

logic element__function_guard : int, us_rep1, us_rep -> prop

type element_type

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : element_type, element_type -> bool

logic dummy10 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic first : us_rep1 -> us_rep

logic first__function_guard : us_rep, us_rep1 -> prop

axiom first__post_axiom :
  (forall container:count_type. forall container1:us_main_type [first({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } })]. (((length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }) = 0) -> (bool_eq8(first({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }) = true)) and ((not (length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }) = 0)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), first({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), first({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } })) = 1)))))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size4({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment4({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = a };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  a1 } })))

logic partition_refinement__partitioning_sets__list__capacity__first__bit1 : int

logic partition_refinement__partitioning_sets__list__capacity__last__bit1 : int

logic partition_refinement__partitioning_sets__list__capacity__position1 : int

axiom partition_refinement__partitioning_sets__list__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__partitioning_sets__list__capacity__first__bit1)

axiom partition_refinement__partitioning_sets__list__capacity__last__bit_axiom1 :
  (partition_refinement__partitioning_sets__list__capacity__first__bit1 <  partition_refinement__partitioning_sets__list__capacity__last__bit1)

axiom partition_refinement__partitioning_sets__list__capacity__position_axiom1 :
  (0 <= partition_refinement__partitioning_sets__list__capacity__position1)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy11 : count_type

logic dummy12 : us_main_type

type partitioning_set__ref = { partitioning_set__content : us_rep1
}

function partitioning_set__ref___projection(a: partitioning_set__ref) : us_rep1 =
  (a).partitioning_set__content

type us_split_fields4 = {
rec__partition_refinement__inverse_sets__cursor__node : count_type
}

function us_split_fields_Node__2__projection(a: us_split_fields4) : count_type =
  (a).rec__partition_refinement__inverse_sets__cursor__node

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep4 = { us_split_fields5 : us_split_fields4
}

function us_rep___12__projection(a: us_rep4) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq13 : us_rep4, us_rep4 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq13(a, b)].
  (((to_rep3(((a).us_split_fields5).rec__partition_refinement__inverse_sets__cursor__node) = to_rep3(((b).us_split_fields5).rec__partition_refinement__inverse_sets__cursor__node)) ->
  (bool_eq13(a, b) = true)) and
  ((not (to_rep3(((a).us_split_fields5).rec__partition_refinement__inverse_sets__cursor__node) = to_rep3(((b).us_split_fields5).rec__partition_refinement__inverse_sets__cursor__node))) ->
  (bool_eq13(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:count_type. (0 <= object__size5({ us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = a } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:count_type. (0 <= object__alignment5({ us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = a } })))

logic partition_refinement__inverse_sets__cursor__node__first__bit : int

logic partition_refinement__inverse_sets__cursor__node__last__bit : int

logic partition_refinement__inverse_sets__cursor__node__position : int

axiom partition_refinement__inverse_sets__cursor__node__first__bit_axiom :
  (0 <= partition_refinement__inverse_sets__cursor__node__first__bit)

axiom partition_refinement__inverse_sets__cursor__node__last__bit_axiom :
  (partition_refinement__inverse_sets__cursor__node__first__bit <  partition_refinement__inverse_sets__cursor__node__last__bit)

axiom partition_refinement__inverse_sets__cursor__node__position_axiom :
  (0 <= partition_refinement__inverse_sets__cursor__node__position)

logic user_eq11 : us_rep4, us_rep4 -> bool

logic dummy13 : count_type

type cursor__ref1 = { cursor__content1 : us_rep4
}

function cursor__ref___2__projection(a: cursor__ref1) : us_rep4 =
  (a).cursor__content1

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_split_discrs2 = {
rec__partition_refinement__inverse_sets__map__capacity : count_type
}

function us_split_discrs___2__projection(a: us_split_discrs2) : count_type =
  (a).rec__partition_refinement__inverse_sets__map__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields6 = { rec__partition_refinement__inverse_sets__map :
us_main_type3
}

function us_split_fields_Map__projection(a: us_split_fields6) : us_main_type3 =
  (a).rec__partition_refinement__inverse_sets__map

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep5 = { us_split_discrs3 : us_split_discrs2; us_split_fields7 :
us_split_fields6
}

function us_rep___10__projection(a: us_rep5) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___11__projection(a: us_rep5) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq14 : us_rep5, us_rep5 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq14(a, b)].
  ((((to_rep3(((a).us_split_discrs3).rec__partition_refinement__inverse_sets__map__capacity) = to_rep3(((b).us_split_discrs3).rec__partition_refinement__inverse_sets__map__capacity)) and
  (us_main_eq3(((a).us_split_fields7).rec__partition_refinement__inverse_sets__map,
  ((b).us_split_fields7).rec__partition_refinement__inverse_sets__map) = true)) ->
  (bool_eq14(a, b) = true)) and
  ((not ((to_rep3(((a).us_split_discrs3).rec__partition_refinement__inverse_sets__map__capacity) = to_rep3(((b).us_split_discrs3).rec__partition_refinement__inverse_sets__map__capacity)) and
  (us_main_eq3(((a).us_split_fields7).rec__partition_refinement__inverse_sets__map,
  ((b).us_split_fields7).rec__partition_refinement__inverse_sets__map) = true))) ->
  (bool_eq14(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep5 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep5 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:count_type. forall a1:us_main_type3. (0 <= object__size6({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 }
  })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:count_type. forall a1:us_main_type3. (0 <= object__alignment6({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 }
  })))

logic partition_refinement__inverse_sets__map__capacity__first__bit : int

logic partition_refinement__inverse_sets__map__capacity__last__bit : int

logic partition_refinement__inverse_sets__map__capacity__position : int

axiom partition_refinement__inverse_sets__map__capacity__first__bit_axiom :
  (0 <= partition_refinement__inverse_sets__map__capacity__first__bit)

axiom partition_refinement__inverse_sets__map__capacity__last__bit_axiom :
  (partition_refinement__inverse_sets__map__capacity__first__bit <  partition_refinement__inverse_sets__map__capacity__last__bit)

axiom partition_refinement__inverse_sets__map__capacity__position_axiom :
  (0 <= partition_refinement__inverse_sets__map__capacity__position)

logic user_eq12 : us_rep5, us_rep5 -> bool

logic dummy14 : count_type

logic dummy15 : us_main_type3

type map__ref2 = { map__content2 : us_rep5
}

function map__ref___2__projection(a: map__ref2) : us_rep5 = (a).map__content2

type us_main_type4

logic us_main_eq4 : us_main_type4, us_main_type4 -> bool

type us_rep6

logic bool_eq15 : us_rep6, us_rep6 -> bool

logic value__size7 : int

logic object__size7 : us_rep6 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep6 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (forall a:us_rep6. (0 <= object__size7(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:us_rep6. (0 <= object__alignment7(a)))

logic user_eq13 : us_rep6, us_rep6 -> bool

logic dummy16 : us_rep6

type map__ref3 = { map__content3 : us_rep6
}

function map__ref___4__projection(a: map__ref3) : us_rep6 = (a).map__content3

type key_type__ref1 = { key_type__content1 : us_rep4
}

function key_type__ref___4__projection(a: key_type__ref1) : us_rep4 =
  (a).key_type__content1

logic has_key1 : us_rep6, us_rep4 -> bool

logic has_key__function_guard1 : bool, us_rep6, us_rep4 -> prop

logic positions1 : us_rep5 -> us_rep6

logic positions__function_guard1 : us_rep6, us_rep5 -> prop

logic has_element__function_guard1 : bool, us_rep5, us_rep4 -> prop

logic has_element : int, us_rep5, us_rep4 -> bool

logic has_element__function_guard2 : bool, int, us_rep5, us_rep4 -> prop

logic oeq : us_rep5, us_rep5 -> bool

logic oeq__function_guard : bool, us_rep5, us_rep5 -> prop

logic oeq1 : int, us_rep5, us_rep5 -> bool

logic oeq__function_guard1 : bool, int, us_rep5, us_rep5 -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:us_main_type3. forall b:count_type.
  forall b1:us_main_type3 [user_eq12({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = b1 }
  })]. (user_eq12({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = b1 }
  }) = oeq({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = b1 }
  })))

axiom has_element__post__dispatch_axiom : true

type us_main_type5

logic us_main_eq5 : us_main_type5, us_main_type5 -> bool

type us_rep7

logic bool_eq16 : us_rep7, us_rep7 -> bool

logic value__size8 : int

logic object__size8 : us_rep7 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep7 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (forall a:us_rep7. (0 <= object__size8(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:us_rep7. (0 <= object__alignment8(a)))

logic user_eq14 : us_rep7, us_rep7 -> bool

logic dummy17 : us_rep7

type sequence__ref1 = { sequence__content1 : us_rep7
}

function sequence__ref___2__projection(a: sequence__ref1) : us_rep7 =
  (a).sequence__content1

logic get2 : us_rep7, int -> int

logic get__function_guard2 : int, us_rep7, int -> prop

logic get3 : us_rep6, us_rep4 -> int

logic get__function_guard3 : int, us_rep6, us_rep4 -> prop

logic keys : us_rep5 -> us_rep7

logic keys__function_guard : us_rep7, us_rep5 -> prop

logic key__function_guard : int, us_rep5, us_rep4 -> prop

logic key : int, us_rep5, us_rep4 -> int

logic key__function_guard1 : int, int, us_rep5, us_rep4 -> prop

type key_type

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq15 : key_type, key_type -> bool

logic dummy18 : key_type

type key_type__ref2 = { key_type__content2 : key_type
}

function key_type__ref___2__projection(a: key_type__ref2) : key_type =
  (a).key_type__content2

axiom key__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type3.
  (forall position:count_type [key(attr__tag, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = position } })].
  in_range7(key(attr__tag, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = position } })))))

type us_main_type6

logic us_main_eq6 : us_main_type6, us_main_type6 -> bool

type us_rep8

logic bool_eq18 : us_rep8, us_rep8 -> bool

logic value__size9 : int

logic object__size9 : us_rep8 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep8 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (forall a:us_rep8. (0 <= object__size9(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:us_rep8. (0 <= object__alignment9(a)))

logic user_eq16 : us_rep8, us_rep8 -> bool

logic dummy19 : us_rep8

type map__ref4 = { map__content4 : us_rep8
}

function map__ref___3__projection(a: map__ref4) : us_rep8 = (a).map__content4

logic get4 : us_rep8, int -> int

logic get__function_guard4 : int, us_rep8, int -> prop

logic model__1 : us_rep5 -> us_rep8

logic model____function_guard1 : us_rep8, us_rep5 -> prop

logic element__function_guard1 : int, us_rep5, us_rep4 -> prop

logic element : int, us_rep5, us_rep4 -> int

logic element__function_guard2 : int, int, us_rep5, us_rep4 -> prop

type element_type1

predicate in_range8(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq17 : element_type1, element_type1 -> bool

logic dummy20 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___4__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type3.
  (forall position:count_type [element(attr__tag, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = position } })].
  in_range8(element(attr__tag, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = position } })))))

logic has_key2 : us_rep8, int -> bool

logic has_key__function_guard2 : bool, us_rep8, int -> prop

logic contains__function_guard : bool, us_rep5, int -> prop

logic contains : int, us_rep5, int -> bool

logic contains__function_guard1 : bool, int, us_rep5, int -> prop

axiom contains__post__dispatch_axiom : true

logic find : us_rep5, int -> us_rep4

logic find__function_guard : us_rep4, us_rep5, int -> prop

logic find1 : int, us_rep5, int -> us_rep4

logic find__function_guard1 : us_rep4, int, us_rep5, int -> prop

logic equivalent_keys__function_guard : bool, int, int -> prop

logic no_element1 : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic find2 : us_rep7, int -> int

logic find__function_guard2 : int, us_rep7, int -> prop

axiom find__post_axiom :
  (forall container:count_type. forall container1:us_main_type3.
  (forall key1:int [find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)]. (in_range7(key1) -> (((not (has_key2(model__1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key1) = true)) -> ((not (has_key1(positions1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)) = true)) and (bool_eq13(find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = no_element1 }
  }) = true))) and ((has_key2(model__1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key1) = true) -> (((has_key1(positions1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)) = true) and (get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)) = find2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key1))) and ((not (bool_lt(get2(keys({ us_split_discrs3 =
  { rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1))), key1) = true)) and ((bool_lt(get2(keys({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1))), key1) = false) -> (not (bool_lt(key1, get2(keys({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)))) = true))))))))))

axiom find__post__dispatch_axiom : true

logic value__size10 : int

logic object__size10 : us_rep5 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep5 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:count_type. forall a1:us_main_type3. (0 <= object__size10({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 }
  })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:count_type. forall a1:us_main_type3. (0 <= object__alignment10({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 }
  })))

logic partition_refinement__inverse_sets__map__capacity__first__bit1 : int

logic partition_refinement__inverse_sets__map__capacity__last__bit1 : int

logic partition_refinement__inverse_sets__map__capacity__position1 : int

axiom partition_refinement__inverse_sets__map__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__inverse_sets__map__capacity__first__bit1)

axiom partition_refinement__inverse_sets__map__capacity__last__bit_axiom1 :
  (partition_refinement__inverse_sets__map__capacity__first__bit1 <  partition_refinement__inverse_sets__map__capacity__last__bit1)

axiom partition_refinement__inverse_sets__map__capacity__position_axiom1 :
  (0 <= partition_refinement__inverse_sets__map__capacity__position1)

logic user_eq18 : us_rep5, us_rep5 -> bool

logic dummy21 : count_type

logic dummy22 : us_main_type3

type inverse_set__ref = { inverse_set__content : us_rep5
}

function inverse_set__ref___projection(a: inverse_set__ref) : us_rep5 =
  (a).inverse_set__content

axiom user_eq__def_axiom1 :
  (forall a:count_type. forall a1:us_main_type3. forall b:count_type.
  forall b1:us_main_type3 [user_eq18({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = b1 }
  })]. (user_eq18({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = b1 }
  }) = oeq({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = a };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = a1 } },
  { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = b };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = b1 }
  })))

type partition_index

predicate in_range9(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq19 : partition_index, partition_index -> bool

logic dummy23 : partition_index

type partition_index__ref = { partition_index__content : partition_index
}

function partition_index__ref___projection(a: partition_index__ref) : partition_index =
  (a).partition_index__content

logic to_rep4 : partition_index -> int

logic of_rep4 : int -> partition_index

axiom inversion_axiom4 :
  (forall x:partition_index [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:partition_index [to_rep4(x)]. in_range9(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range9(x) ->
  (to_rep4(of_rep4(x)) = x)))

type index_type

predicate in_range10(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq20 : index_type, index_type -> bool

logic dummy24 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___3__projection(a: index_type__ref) : index_type =
  (a).index_type__content

type us_split_fields8 = { rec__partition_refinement__interval__first : index;
rec__partition_refinement__interval__last : index;
rec__partition_refinement__interval__count : index_count
}

function us_split_fields_First__projection(a: us_split_fields8) : index =
  (a).rec__partition_refinement__interval__first

function us_split_fields_Last__projection(a: us_split_fields8) : index =
  (a).rec__partition_refinement__interval__last

function us_split_fields_Count__projection(a: us_split_fields8) : index_count =
  (a).rec__partition_refinement__interval__count

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep9 = { us_split_fields9 : us_split_fields8
}

function us_rep___13__projection(a: us_rep9) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq22 : us_rep9, us_rep9 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep9. forall b:us_rep9 [bool_eq22(a, b)].
  (((((to_rep2(((a).us_split_fields9).rec__partition_refinement__interval__first) = to_rep2(((b).us_split_fields9).rec__partition_refinement__interval__first)) and
  (to_rep2(((a).us_split_fields9).rec__partition_refinement__interval__last) = to_rep2(((b).us_split_fields9).rec__partition_refinement__interval__last))) and
  (to_rep1(((a).us_split_fields9).rec__partition_refinement__interval__count) = to_rep1(((b).us_split_fields9).rec__partition_refinement__interval__count))) ->
  (bool_eq22(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields9).rec__partition_refinement__interval__first) = to_rep2(((b).us_split_fields9).rec__partition_refinement__interval__first)) and
  (to_rep2(((a).us_split_fields9).rec__partition_refinement__interval__last) = to_rep2(((b).us_split_fields9).rec__partition_refinement__interval__last))) and
  (to_rep1(((a).us_split_fields9).rec__partition_refinement__interval__count) = to_rep1(((b).us_split_fields9).rec__partition_refinement__interval__count)))) ->
  (bool_eq22(a, b) = false))))

logic value__size11 : int

logic object__size11 : us_rep9 -> int

logic value__alignment11 : int

logic object__alignment11 : us_rep9 -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:index. forall a1:index. forall a2:index_count.
  (0 <= object__size11({ us_split_fields9 = {
  rec__partition_refinement__interval__first = a;
  rec__partition_refinement__interval__last = a1;
  rec__partition_refinement__interval__count = a2 } })))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:index. forall a1:index. forall a2:index_count.
  (0 <= object__alignment11({ us_split_fields9 = {
  rec__partition_refinement__interval__first = a;
  rec__partition_refinement__interval__last = a1;
  rec__partition_refinement__interval__count = a2 } })))

logic partition_refinement__interval__first__first__bit : int

logic partition_refinement__interval__first__last__bit : int

logic partition_refinement__interval__first__position : int

axiom partition_refinement__interval__first__first__bit_axiom :
  (0 <= partition_refinement__interval__first__first__bit)

axiom partition_refinement__interval__first__last__bit_axiom :
  (partition_refinement__interval__first__first__bit <  partition_refinement__interval__first__last__bit)

axiom partition_refinement__interval__first__position_axiom :
  (0 <= partition_refinement__interval__first__position)

logic partition_refinement__interval__last__first__bit : int

logic partition_refinement__interval__last__last__bit : int

logic partition_refinement__interval__last__position : int

axiom partition_refinement__interval__last__first__bit_axiom :
  (0 <= partition_refinement__interval__last__first__bit)

axiom partition_refinement__interval__last__last__bit_axiom :
  (partition_refinement__interval__last__first__bit <  partition_refinement__interval__last__last__bit)

axiom partition_refinement__interval__last__position_axiom :
  (0 <= partition_refinement__interval__last__position)

logic partition_refinement__interval__count__first__bit : int

logic partition_refinement__interval__count__last__bit : int

logic partition_refinement__interval__count__position : int

axiom partition_refinement__interval__count__first__bit_axiom :
  (0 <= partition_refinement__interval__count__first__bit)

axiom partition_refinement__interval__count__last__bit_axiom :
  (partition_refinement__interval__count__first__bit <  partition_refinement__interval__count__last__bit)

axiom partition_refinement__interval__count__position_axiom :
  (0 <= partition_refinement__interval__count__position)

logic user_eq21 : us_rep9, us_rep9 -> bool

logic dummy25 : index

logic dummy26 : index

logic dummy27 : index_count

type interval__ref = { interval__content : us_rep9
}

function interval__ref___projection(a: interval__ref) : us_rep9 =
  (a).interval__content

type element_type__ref2 = { element_type__content2 : us_rep9
}

function element_type__ref___8__projection(a: element_type__ref2) : us_rep9 =
  (a).element_type__content2

type capacity_range

predicate in_range11(x: int) = ((0 <= x) and (x <= 10001))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq22 : capacity_range, capacity_range -> bool

logic dummy28 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

logic to_rep5 : capacity_range -> int

logic of_rep5 : int -> capacity_range

axiom inversion_axiom5 :
  (forall x:capacity_range [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:capacity_range [to_rep5(x)]. in_range11(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range11(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_main_type7

logic us_main_eq7 : us_main_type7, us_main_type7 -> bool

type us_split_discrs4 = {
rec__partition_refinement__partitions__vector__capacity : capacity_range
}

function us_split_discrs___3__projection(a: us_split_discrs4) : capacity_range =
  (a).rec__partition_refinement__partitions__vector__capacity

type us_split_discrs__ref2 = { us_split_discrs__content2 : us_split_discrs4
}

function us_split_discrs__ref___3__projection(a: us_split_discrs__ref2) : us_split_discrs4 =
  (a).us_split_discrs__content2

type us_split_fields10 = { rec__partition_refinement__partitions__vector :
us_main_type7
}

function us_split_fields_Vector__projection(a: us_split_fields10) : us_main_type7 =
  (a).rec__partition_refinement__partitions__vector

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep10 = { us_split_discrs5 : us_split_discrs4; us_split_fields11 :
us_split_fields10
}

function us_rep___14__projection(a: us_rep10) : us_split_discrs4 =
  (a).us_split_discrs5

function us_rep___15__projection(a: us_rep10) : us_split_fields10 =
  (a).us_split_fields11

logic value__size12 : int

logic object__size12 : us_rep10 -> int

logic value__alignment12 : int

logic object__alignment12 : us_rep10 -> int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 :
  (forall a:capacity_range. forall a1:us_main_type7. (0 <= object__size12({
  us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields11 = { rec__partition_refinement__partitions__vector = a1 }
  })))

axiom value__alignment_axiom12 : (0 <= value__alignment12)

axiom object__alignment_axiom12 :
  (forall a:capacity_range. forall a1:us_main_type7.
  (0 <= object__alignment12({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields11 = { rec__partition_refinement__partitions__vector = a1 }
  })))

logic partition_refinement__partitions__vector__capacity__first__bit : int

logic partition_refinement__partitions__vector__capacity__last__bit : int

logic partition_refinement__partitions__vector__capacity__position : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom :
  (partition_refinement__partitions__vector__capacity__first__bit <  partition_refinement__partitions__vector__capacity__last__bit)

axiom partition_refinement__partitions__vector__capacity__position_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__position)

logic user_eq23 : us_rep10, us_rep10 -> bool

logic dummy29 : capacity_range

logic dummy30 : us_main_type7

type vector__ref = { vector__content : us_rep10
}

function vector__ref___projection(a: vector__ref) : us_rep10 =
  (a).vector__content

logic capacity__function_guard : int, us_rep10 -> prop

logic length1 : us_rep10 -> int

logic length__function_guard1 : int, us_rep10 -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type7
  [length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields11 = { rec__partition_refinement__partitions__vector =
  container1 } })]. ((((of_int(1) = true) -> (length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields11 = { rec__partition_refinement__partitions__vector =
  container1 } }) <= to_rep5(container))) and ((not (of_int(1) = true)) ->
  (length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields11 = { rec__partition_refinement__partitions__vector =
  container1 } }) <= 10001))) and in_range11(length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields11 = { rec__partition_refinement__partitions__vector =
  container1 } }))))

type element_type__ref3 = { element_type__content3 : us_rep9
}

function element_type__ref___9__projection(a: element_type__ref3) : us_rep9 =
  (a).element_type__content3

type us_main_type8

logic us_main_eq8 : us_main_type8, us_main_type8 -> bool

type us_rep11

logic bool_eq24 : us_rep11, us_rep11 -> bool

logic value__size13 : int

logic object__size13 : us_rep11 -> int

logic value__alignment13 : int

logic object__alignment13 : us_rep11 -> int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 : (forall a:us_rep11. (0 <= object__size13(a)))

axiom value__alignment_axiom13 : (0 <= value__alignment13)

axiom object__alignment_axiom13 :
  (forall a:us_rep11. (0 <= object__alignment13(a)))

logic user_eq24 : us_rep11, us_rep11 -> bool

logic dummy31 : us_rep11

type sequence__ref2 = { sequence__content2 : us_rep11
}

function sequence__ref___3__projection(a: sequence__ref2) : us_rep11 =
  (a).sequence__content2

logic get5 : us_rep11, int -> us_rep9

logic get__function_guard5 : us_rep9, us_rep11, int -> prop

logic model__2 : us_rep10 -> us_rep11

logic model____function_guard2 : us_rep11, us_rep10 -> prop

logic element__function_guard3 : us_rep9, us_rep10, int -> prop

logic length2 : us_rep11 -> int

logic length__function_guard2 : int, us_rep11 -> prop

logic last__function_guard : int, us_rep11 -> prop

logic last_index__function_guard : int, us_rep10 -> prop

logic first_index__function_guard : int, us_rep10 -> prop

logic value__size14 : int

logic object__size14 : us_rep10 -> int

logic value__alignment14 : int

logic object__alignment14 : us_rep10 -> int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 :
  (forall a:capacity_range. forall a1:us_main_type7. (0 <= object__size14({
  us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields11 = { rec__partition_refinement__partitions__vector = a1 }
  })))

axiom value__alignment_axiom14 : (0 <= value__alignment14)

axiom object__alignment_axiom14 :
  (forall a:capacity_range. forall a1:us_main_type7.
  (0 <= object__alignment14({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = a };
  us_split_fields11 = { rec__partition_refinement__partitions__vector = a1 }
  })))

logic partition_refinement__partitions__vector__capacity__first__bit1 : int

logic partition_refinement__partitions__vector__capacity__last__bit1 : int

logic partition_refinement__partitions__vector__capacity__position1 : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit1)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom1 :
  (partition_refinement__partitions__vector__capacity__first__bit1 <  partition_refinement__partitions__vector__capacity__last__bit1)

axiom partition_refinement__partitions__vector__capacity__position_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__position1)

logic user_eq25 : us_rep10, us_rep10 -> bool

logic dummy32 : capacity_range

logic dummy33 : us_main_type7

type partition__ref = { partition__content : us_rep10
}

function partition__ref___projection(a: partition__ref) : us_rep10 =
  (a).partition__content

type map__ref5 = { map__content5 : (int,partition_index) farray
}

logic slide1 : (int,partition_index) farray, int,
  int -> (int,partition_index) farray

axiom slide_eq1 :
  (forall a:(int,partition_index) farray.
  (forall first1:int [slide1(a, first1, first1)]. (slide1(a, first1,
  first1) = a)))

axiom slide_def1 :
  (forall a:(int,partition_index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> (int,partition_index) farray

axiom concat_def1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : partition_index, int -> (int,partition_index) farray

axiom singleton_def1 :
  (forall v:partition_index.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq25 : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> bool

axiom bool_eq_def18 :
  (forall a:(int,partition_index) farray. forall a__first:int.
  forall a__last:int. forall b:(int,partition_index) farray.
  forall b__first:int. forall b__last:int [bool_eq25(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep4((a[temp___idx_134])) = to_rep4((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep4((a[temp___idx_134])) = to_rep4((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq25(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep4((a[temp___idx_134])) = to_rep4((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare1 : (int,partition_index) farray, int, int,
  (int,partition_index) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq25(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq25(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep4((a[(i + 1)])) <  to_rep4((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq25(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep4((b[(i + 1)])) <  to_rep4((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic d__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS3 : int

logic p__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic x : count_type

logic x1 : us_main_type

logic attr__ATTRIBUTE_ADDRESS6 : int

logic element__2__function_guard : int, us_rep5, int -> prop

logic element__2 : int, us_rep5, int -> int

logic element__2__function_guard1 : int, int, us_rep5, int -> prop

logic attr__ATTRIBUTE_ADDRESS7 : int

logic d_old : count_type

logic d_old1 : us_main_type3

logic attr__ATTRIBUTE_ADDRESS8 : int

axiom no_element__def_axiom : (no_element = of_rep3(0))

axiom length__post_axiom1 :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } })]. ((length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }) <= to_rep3(container)) and in_range5(length({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }))))

logic length3 : us_rep3 -> int

logic length__function_guard3 : int, us_rep3 -> prop

logic last__function_guard1 : int, us_rep3 -> prop

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq8(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length3(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq8(a, b) = match_bool(bool_eq1(length3(a), length3(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length3(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq8(a, b) = match_bool(bool_eq1(length3(a), length3(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:count_type. forall container1:us_main_type [model__({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } })]. (length3(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } })) = length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } })))

logic length4 : us_rep2 -> int

logic length__function_guard4 : int, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

axiom positions__post_axiom :
  (forall container:count_type. forall container1:us_main_type [positions({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } })]. ((not (has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = i }
  }) = true) -> (((1 <= get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = i } })) and
  (get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = i }
  }) <= length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = j }
  }) = true) -> ((get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = i }
  }) = get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = container };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  container1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = j } })) ->
  (bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = i } }, {
  us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = j }
  }) = true)))))))))

type extended_index

predicate in_range12(x2: int) = ((0 <= x2) and (x2 <= 2147483647))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def19 :
  (forall x2:int. forall y:int [bool_eq26(x2, y)]. (((x2 = y) ->
  (bool_eq26(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq26(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq26 : extended_index, extended_index -> bool

logic dummy34 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom length__post_axiom2 :
  (forall container:us_rep3 [length3(container)].
  (((0 + length3(container)) <= 2147483647) and
  in_range5(length3(container))))

type element_type2

predicate in_range13(x2: int) = ((1 <= x2) and (x2 <= 2147483647))

logic bool_eq27 : int, int -> bool

axiom bool_eq_def20 :
  (forall x2:int. forall y:int [bool_eq27(x2, y)]. (((x2 = y) ->
  (bool_eq27(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq27(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq27 : element_type2, element_type2 -> bool

logic dummy35 : element_type2

type element_type__ref4 = { element_type__content4 : element_type2
}

function element_type__ref___2__projection(a: element_type__ref4) : element_type2 =
  (a).element_type__content4

axiom get__post_axiom :
  (forall container:us_rep3.
  (forall position:int [get(container, position)]. ((in_range12(position) and
  ((1 <= position) and (position <= (0 + length3(container))))) ->
  in_range13(get(container, position)))))

axiom has_key__post_axiom :
  (forall container:us_rep2.
  (forall key1:count_type [has_key(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 } })].
  ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields1 = {
   rec__partition_refinement__partitioning_sets__cursor__node = k }
   }) = true) and (bool_eq8({ us_split_fields1 = {
   rec__partition_refinement__partitioning_sets__cursor__node = k } }, {
   us_split_fields1 = {
   rec__partition_refinement__partitioning_sets__cursor__node = key1 }
   }) = true))) ->
  (has_key(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  }) = true)))))

type element_type3

predicate in_range14(x2: int) = ((1 <= x2) and (x2 <= 2147483647))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def21 :
  (forall x2:int. forall y:int [bool_eq28(x2, y)]. (((x2 = y) ->
  (bool_eq28(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq28(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq28 : element_type3, element_type3 -> bool

logic dummy36 : element_type3

type element_type__ref5 = { element_type__content5 : element_type3
}

function element_type__ref___3__projection(a: element_type__ref5) : element_type3 =
  (a).element_type__content5

logic witness : us_rep2, us_rep -> int

logic witness__function_guard : int, us_rep2, us_rep -> prop

logic w_get : us_rep2, int -> int

logic w_get__function_guard : int, us_rep2, int -> prop

axiom get__post_axiom1 :
  (forall container:us_rep2.
  (forall key1:count_type [get1(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 } })].
  ((has_key(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  }) = true) -> (((of_int(0) = true) -> ((get1(container, {
  us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  }) = w_get(container, witness(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = k }
  }) = true) -> ((bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = k } }, {
  us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  }) = true) <-> (witness(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  }) = witness(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = k } }))))))) and
  in_range14(get1(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 } }))))))

axiom length__post_axiom3 :
  (forall container:us_rep2 [length4(container)].
  in_range5(length4(container)))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty(container)].
  ((is_empty(container) = true) <->
  (forall key1:count_type. (not (has_key(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  }) = true)))))

logic has_witness : us_rep2, int -> bool

logic has_witness__function_guard : bool, us_rep2, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep2.
  (forall key1:count_type [witness(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 } })].
  ((has_key(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  }) = true) -> ((has_witness(container, witness(container, {
  us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 }
  })) = true) and in_range5(witness(container, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = key1 } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep2.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range5(witness1) and (has_witness(container, witness1) = true)) ->
  in_range14(w_get(container, witness1)))))

axiom no_element__def_axiom1 : (no_element1 = of_rep3(0))

logic length5 : us_rep5 -> int

logic length__function_guard5 : int, us_rep5 -> prop

logic length6 : int, us_rep5 -> int

logic length__function_guard6 : int, int, us_rep5 -> prop

axiom length__post_axiom4 :
  (forall container:count_type. forall container1:us_main_type3 [length5({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })]. ((length5({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }) <= to_rep3(container)) and in_range5(length5({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type3
  [length6(attr__tag, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })]. in_range5(length6(attr__tag, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))))

logic length7 : us_rep7 -> int

logic length__function_guard7 : int, us_rep7 -> prop

logic k_bigger_than_range__function_guard : bool, us_rep7, int, int,
  int -> prop

logic k_smaller_than_range__function_guard : bool, us_rep7, int, int,
  int -> prop

logic k_is_find__function_guard : bool, us_rep7, int, int -> prop

logic last__function_guard2 : int, us_rep7 -> prop

logic oeq__function_guard3 : bool, us_rep7, us_rep7 -> prop

axiom user_eq__def_axiom3 :
  (forall a:us_rep7. forall b:us_rep7 [user_eq14(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length7(a)))) -> (get2(a,
    n) = get2(b, n)))) ->
  (user_eq14(a, b) = match_bool(bool_eq1(length7(a), length7(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length7(a)))) -> (get2(a,
        n) = get2(b, n))))) ->
  (user_eq14(a, b) = match_bool(bool_eq1(length7(a), length7(b)), false,
  false)))))

axiom find__post_axiom1 :
  (forall container:us_rep7.
  (forall key1:int [find2(container, key1)]. (in_range7(key1) ->
  (((0 <  find2(container, key1)) -> ((find2(container,
  key1) <= length7(container)) and ((not (bool_lt(key1, get2(container,
  find2(container, key1))) = true)) and ((bool_lt(key1, get2(container,
  find2(container, key1))) = false) -> (not (bool_lt(get2(container,
  find2(container, key1)), key1) = true)))))) and in_range5(find2(container,
  key1))))))

logic length8 : us_rep8 -> int

logic length__function_guard8 : int, us_rep8 -> prop

logic is_empty1 : us_rep8 -> bool

logic is_empty__function_guard1 : bool, us_rep8 -> prop

axiom model____post_axiom1 : true

type key_type1

predicate in_range15(x2: int) = ((1 <= x2) and (x2 <= 2147483647))

logic bool_eq29 : int, int -> bool

axiom bool_eq_def22 :
  (forall x2:int. forall y:int [bool_eq29(x2, y)]. (((x2 = y) ->
  (bool_eq29(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq29(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq29 : key_type1, key_type1 -> bool

logic dummy37 : key_type1

type key_type__ref3 = { key_type__content3 : key_type1
}

function key_type__ref___3__projection(a: key_type__ref3) : key_type1 =
  (a).key_type__content3

type extended_index1

predicate in_range16(x2: int) = ((0 <= x2) and (x2 <= 2147483647))

logic bool_eq30 : int, int -> bool

axiom bool_eq_def23 :
  (forall x2:int. forall y:int [bool_eq30(x2, y)]. (((x2 = y) ->
  (bool_eq30(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq30(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq30 : extended_index1, extended_index1 -> bool

logic dummy38 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

logic iter_has_element__function_guard : bool, us_rep7, int -> prop

axiom keys__post_axiom :
  (forall container:count_type. forall container1:us_main_type3 [keys({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })]. ((((length7(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })) = length5({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })) and
  (forall temp___607:int. ((in_range16(temp___607) and ((1 <= temp___607) and
  (temp___607 <= (0 + length7(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })))))) -> (has_key2(model__1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), get2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), temp___607)) = true)))) and
  (forall key1:int. ((in_range15(key1) and (has_key2(model__1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key1) = true)) -> ((0 <  find2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key1)) and ((not (bool_lt(get2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key1)), key1) = true)) and ((bool_lt(get2(keys({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key1)), key1) = false) -> (not (bool_lt(key1, get2(keys({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), find2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), key1))) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length5({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) -> ((find2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), get2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), i)) = i) and (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get2(keys({
    us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i1) <  get2(keys({ us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i)))) ->
  (((i <  length7(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length7(keys({
    us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } })))) -> (get2(keys({ us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i) <  get2(keys({ us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i1)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length7(keys({
        us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } })))) -> (get2(keys({ us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i) <  get2(keys({ us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i1))))) ->
  (match_bool(true, false, false) = true)))) and ((not (i <  length7(keys({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })))) -> (match_bool(true, of_int(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get2(keys({
        us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i1) <  get2(keys({ us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i))))) ->
  (((i <  length7(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length7(keys({
    us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } })))) -> (get2(keys({ us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i) <  get2(keys({ us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i1)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length7(keys({
        us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } })))) -> (get2(keys({ us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i) <  get2(keys({ us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i1))))) ->
  (match_bool(false, false, false) = true)))) and ((not (i <  length7(keys({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })))) -> (match_bool(false, of_int(1), false) = true)))))) and
  ((not (0 <  i)) -> (((i <  length7(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length7(keys({
    us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } })))) -> (get2(keys({ us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i) <  get2(keys({ us_split_discrs3 = {
    rec__partition_refinement__inverse_sets__map__capacity = container };
    us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
    container1 } }), i1)))) ->
  (match_bool(of_int(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length7(keys({
        us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } })))) -> (get2(keys({ us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i) <  get2(keys({ us_split_discrs3 = {
        rec__partition_refinement__inverse_sets__map__capacity = container };
        us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
        container1 } }), i1))))) ->
  (match_bool(of_int(1), false, false) = true)))) and
  ((not (i <  length7(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })))) -> (match_bool(of_int(1), of_int(1),
  false) = true))))))))))

logic length9 : us_rep6 -> int

logic length__function_guard9 : int, us_rep6 -> prop

logic is_empty2 : us_rep6 -> bool

logic is_empty__function_guard2 : bool, us_rep6 -> prop

axiom positions__post_axiom1 :
  (forall container:count_type. forall container1:us_main_type3 [positions1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } })]. ((not (has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = no_element1 }
  }) = true)) and
  (forall i:count_type. ((has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = i } }) = true) ->
  (((1 <= get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = i } })) and
  (get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = i } }) <= length5({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }))) and
  (forall j:count_type. ((has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = j } }) = true) ->
  ((get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = i }
  }) = get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = j } })) ->
  (bool_eq13({ us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = i } }, {
  us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = j } }) = true)))))))))

logic oeq2 : us_rep8, us_rep8 -> bool

logic oeq__function_guard4 : bool, us_rep8, us_rep8 -> prop

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:us_main_type3.
  forall right:count_type. forall right1:us_main_type3 [oeq({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = left };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = left1 }
  }, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = right };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = right1
  } })]. ((oeq({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = left };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = left1 }
  }, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = right };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = right1
  } }) = true) <-> (oeq2(model__1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = left };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = left1 }
  }), model__1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = right };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = right1
  } })) = true)))

axiom oeq__post__dispatch_axiom : true

axiom element__2__post__dispatch_axiom :
  (forall attr__tag:int. forall key1:int.
  (forall container:count_type. forall container1:us_main_type3
  [element__2(attr__tag, { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)]. (in_range7(key1) -> in_range8(element__2(attr__tag,
  { us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = container };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  container1 } }, key1)))))

axiom has_key__post_axiom1 :
  (forall container:us_rep8.
  (forall key1:int [has_key2(container, key1)]. (in_range15(key1) ->
  ((of_int(1) = true) ->
  ((exists k:int. ((in_range15(k) and (has_key2(container, k) = true)) and
   ((bool_lt(k, key1) = false) and (bool_lt(key1, k) = false)))) ->
  (has_key2(container, key1) = true))))))

type element_type4

predicate in_range17(x2: int) = ((0 <= x2) and (x2 <= 5))

logic bool_eq31 : int, int -> bool

axiom bool_eq_def24 :
  (forall x2:int. forall y:int [bool_eq31(x2, y)]. (((x2 = y) ->
  (bool_eq31(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq31(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq31 : element_type4, element_type4 -> bool

logic dummy39 : element_type4

type element_type__ref6 = { element_type__content6 : element_type4
}

function element_type__ref___5__projection(a: element_type__ref6) : element_type4 =
  (a).element_type__content6

logic witness1 : us_rep8, int -> int

logic witness__function_guard1 : int, us_rep8, int -> prop

logic w_get1 : us_rep8, int -> int

logic w_get__function_guard1 : int, us_rep8, int -> prop

axiom get__post_axiom2 :
  (forall container:us_rep8.
  (forall key1:int [get4(container, key1)]. ((in_range15(key1) and
  (has_key2(container, key1) = true)) -> (((of_int(1) = true) ->
  ((get4(container, key1) = w_get1(container, witness1(container, key1))) and
  (forall k:int. ((in_range15(k) and (has_key2(container, k) = true)) ->
  ((((bool_lt(k, key1) = false) and (bool_lt(key1, k) = false)) ->
  (witness1(container, key1) = witness1(container, k))) and
  ((witness1(container, key1) = witness1(container, k)) -> ((not (bool_lt(k,
  key1) = true)) and ((bool_lt(k, key1) = false) -> (not (bool_lt(key1,
  k) = true)))))))))) and in_range17(get4(container, key1))))))

axiom length__post_axiom5 :
  (forall container:us_rep8 [length8(container)].
  in_range5(length8(container)))

axiom oeq__post_axiom1 :
  (forall left:us_rep8. forall right:us_rep8 [oeq2(left, right)].
  ((oeq2(left, right) = true) <->
  ((forall key1:int. ((in_range15(key1) and (has_key2(left, key1) = true)) ->
   ((has_key2(right, key1) = true) and (get4(right, key1) = get4(left,
   key1))))) and
  (forall key1:int. ((in_range15(key1) and (has_key2(right, key1) = true)) ->
  (has_key2(left, key1) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep8 [is_empty1(container)].
  ((is_empty1(container) = true) <->
  (forall key1:int. (not (in_range15(key1) and (has_key2(container,
  key1) = true))))))

logic has_witness1 : us_rep8, int -> bool

logic has_witness__function_guard1 : bool, us_rep8, int -> prop

axiom has_witness__post_axiom1 : true

axiom witness__post_axiom1 :
  (forall container:us_rep8.
  (forall key1:int [witness1(container, key1)]. ((in_range15(key1) and
  (has_key2(container, key1) = true)) -> ((has_witness1(container,
  witness1(container, key1)) = true) and in_range5(witness1(container,
  key1))))))

axiom w_get__post_axiom1 :
  (forall container:us_rep8.
  (forall witness2:int [w_get1(container, witness2)].
  ((in_range5(witness2) and (has_witness1(container, witness2) = true)) ->
  in_range17(w_get1(container, witness2)))))

axiom length__post_axiom6 :
  (forall container:us_rep7 [length7(container)].
  (((0 + length7(container)) <= 2147483647) and
  in_range5(length7(container))))

type element_type5

predicate in_range18(x2: int) = ((1 <= x2) and (x2 <= 2147483647))

logic bool_eq32 : int, int -> bool

axiom bool_eq_def25 :
  (forall x2:int. forall y:int [bool_eq32(x2, y)]. (((x2 = y) ->
  (bool_eq32(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq32(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq32 : element_type5, element_type5 -> bool

logic dummy40 : element_type5

type element_type__ref7 = { element_type__content7 : element_type5
}

function element_type__ref___6__projection(a: element_type__ref7) : element_type5 =
  (a).element_type__content7

axiom get__post_axiom3 :
  (forall container:us_rep7.
  (forall position:int [get2(container, position)].
  ((in_range16(position) and ((1 <= position) and
  (position <= (0 + length7(container))))) -> in_range18(get2(container,
  position)))))

axiom has_key__post_axiom2 :
  (forall container:us_rep6.
  (forall key1:count_type [has_key1(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } })].
  ((of_int(0) = true) ->
  ((exists k:count_type. ((has_key1(container, { us_split_fields5 = {
   rec__partition_refinement__inverse_sets__cursor__node = k } }) = true) and
   (bool_eq13({ us_split_fields5 = {
   rec__partition_refinement__inverse_sets__cursor__node = k } }, {
   us_split_fields5 = {
   rec__partition_refinement__inverse_sets__cursor__node = key1 }
   }) = true))) ->
  (has_key1(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true)))))

type element_type6

predicate in_range19(x2: int) = ((1 <= x2) and (x2 <= 2147483647))

logic bool_eq33 : int, int -> bool

axiom bool_eq_def26 :
  (forall x2:int. forall y:int [bool_eq33(x2, y)]. (((x2 = y) ->
  (bool_eq33(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq33(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE19 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check19 : us_image -> prop

logic attr__ATTRIBUTE_VALUE19 : us_image -> int

logic user_eq33 : element_type6, element_type6 -> bool

logic dummy41 : element_type6

type element_type__ref8 = { element_type__content8 : element_type6
}

function element_type__ref___7__projection(a: element_type__ref8) : element_type6 =
  (a).element_type__content8

logic witness2 : us_rep6, us_rep4 -> int

logic witness__function_guard2 : int, us_rep6, us_rep4 -> prop

logic w_get2 : us_rep6, int -> int

logic w_get__function_guard2 : int, us_rep6, int -> prop

axiom get__post_axiom4 :
  (forall container:us_rep6.
  (forall key1:count_type [get3(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } })].
  ((has_key1(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true) -> (((of_int(0) = true) -> ((get3(container, {
  us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = w_get2(container, witness2(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }))) and
  (forall k:count_type. ((has_key1(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = k } }) = true) ->
  ((bool_eq13({ us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = k } }, {
  us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true) <-> (witness2(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = witness2(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = k } }))))))) and
  in_range19(get3(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }))))))

axiom length__post_axiom7 :
  (forall container:us_rep6 [length9(container)].
  in_range5(length9(container)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep6 [is_empty2(container)].
  ((is_empty2(container) = true) <->
  (forall key1:count_type. (not (has_key1(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }) = true)))))

logic has_witness2 : us_rep6, int -> bool

logic has_witness__function_guard2 : bool, us_rep6, int -> prop

axiom has_witness__post_axiom2 : true

axiom witness__post_axiom2 :
  (forall container:us_rep6.
  (forall key1:count_type [witness2(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } })].
  ((has_key1(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  }) = true) -> ((has_witness2(container, witness2(container, {
  us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 }
  })) = true) and in_range5(witness2(container, { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = key1 } }))))))

axiom w_get__post_axiom2 :
  (forall container:us_rep6.
  (forall witness3:int [w_get2(container, witness3)].
  ((in_range5(witness3) and (has_witness2(container, witness3) = true)) ->
  in_range19(w_get2(container, witness3)))))

type extended_index2

predicate in_range20(x2: int) = (((- 1) <= x2) and (x2 <= 10001))

logic bool_eq34 : int, int -> bool

axiom bool_eq_def27 :
  (forall x2:int. forall y:int [bool_eq34(x2, y)]. (((x2 = y) ->
  (bool_eq34(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq34(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE20 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check20 : us_image -> prop

logic attr__ATTRIBUTE_VALUE20 : us_image -> int

logic user_eq34 : extended_index2, extended_index2 -> bool

logic dummy42 : extended_index2

type extended_index__ref2 = { extended_index__content2 : extended_index2
}

function extended_index__ref___3__projection(a: extended_index__ref2) : extended_index2 =
  (a).extended_index__content2

logic oeq__function_guard5 : bool, us_rep11, us_rep11 -> prop

axiom user_eq__def_axiom4 :
  (forall a:us_rep11. forall b:us_rep11 [user_eq24(a, b)].
  (((forall n:int. (((0 <= n) and (n <= ((- 1) + length2(a)))) ->
    (bool_eq22(get5(a, n), get5(b, n)) = true))) ->
  (user_eq24(a, b) = match_bool(bool_eq1(length2(a), length2(b)), true,
  false))) and
  ((not (forall n:int. (((0 <= n) and (n <= ((- 1) + length2(a)))) ->
        (bool_eq22(get5(a, n), get5(b, n)) = true)))) ->
  (user_eq24(a, b) = match_bool(bool_eq1(length2(a), length2(b)), false,
  false)))))

axiom model____post_axiom2 :
  (forall container:capacity_range. forall container1:us_main_type7
  [model__2({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields11 = { rec__partition_refinement__partitions__vector =
  container1 } })]. (length2(model__2({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields11 = { rec__partition_refinement__partitions__vector =
  container1 } })) = length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = container };
  us_split_fields11 = { rec__partition_refinement__partitions__vector =
  container1 } })))

type extended_index3

predicate in_range21(x2: int) = (((- 1) <= x2) and (x2 <= 10000))

logic bool_eq35 : int, int -> bool

axiom bool_eq_def28 :
  (forall x2:int. forall y:int [bool_eq35(x2, y)]. (((x2 = y) ->
  (bool_eq35(x2, y) = true)) and ((not (x2 = y)) -> (bool_eq35(x2,
  y) = false))))

logic attr__ATTRIBUTE_IMAGE21 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check21 : us_image -> prop

logic attr__ATTRIBUTE_VALUE21 : us_image -> int

logic user_eq35 : extended_index3, extended_index3 -> bool

logic dummy43 : extended_index3

type extended_index__ref3 = { extended_index__content3 : extended_index3
}

function extended_index__ref___4__projection(a: extended_index__ref3) : extended_index3 =
  (a).extended_index__content3

axiom length__post_axiom8 :
  (forall container:us_rep11 [length2(container)].
  ((((- 1) + length2(container)) <= 10000) and
  in_range5(length2(container))))

axiom get__post_axiom5 : true

logic a : (int,positive) farray

logic d__split_fields : us_main_type3

logic p__split_fields : us_main_type7

logic f : (int,partition_index) farray

logic c__split_fields : count_type

logic j : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : bool

logic o4 : int

logic o5 : index

logic o6 : index

logic o7 : index_count

logic j1 : int

logic o8 : int

logic o9 : int

logic o10 : bool

logic k : int

logic o11 : int

logic o12 : index

logic o13 : index

logic o14 : index_count

logic o15 : int

logic o16 : index

logic o17 : index

logic o18 : index_count

logic o19 : int

logic o20 : index

logic o21 : index

logic o22 : index_count

logic o23 : index

logic o24 : index

logic o25 : index_count

logic o26 : index

logic o27 : int

logic o28 : int

logic o29 : index

logic o30 : index

logic o31 : index_count

logic o32 : index

logic o33 : index

logic o34 : index_count

logic o35 : index

logic o36 : int

logic o37 : bool

logic o38 : bool

logic j2 : int

logic o39 : index

logic o40 : index

logic o41 : index_count

logic o42 : index

logic o43 : index

logic o44 : index_count

logic o45 : index

logic o46 : index

logic o47 : index_count

logic o48 : index

logic o49 : int

logic o50 : bool

logic c : count_type

logic o51 : bool

logic o52 : bool

logic o53 : int

logic c1 : count_type

logic o54 : bool

logic o55 : bool

logic o56 : int

logic o57 : int

logic o58 : int

logic o59 : int

logic o60 : int

logic o61 : int

logic o62 : int

logic partition_refinement__refine__c__assume : count_type

logic temp___1137 : capacity_range

logic temp___11371 : us_main_type7

logic temp___1136 : count_type

logic temp___11361 : us_main_type3

logic temp___1135 : (int,positive) farray

logic temp___1139 : int

logic temp___1134 : count_type

logic temp___1138 : int

logic o63 : int

logic o64 : int

logic o65 : int

logic c2 : count_type

logic o66 : bool

logic o67 : bool

logic o68 : int

logic o69 : int

logic c3 : count_type

logic o70 : bool

logic c4 : count_type

logic o71 : bool

logic o72 : bool

logic o73 : int

logic j3 : int

logic o74 : index

logic o75 : index

logic o76 : index_count

logic o77 : index

logic o78 : index

logic o79 : index_count

logic o80 : index

logic o81 : index

logic o82 : index_count

logic o83 : index

logic o84 : int

logic o85 : bool

logic j4 : int

logic o86 : int

logic o87 : int

logic o88 : bool

logic k1 : int

logic o89 : int

logic o90 : index

logic o91 : index

logic o92 : index_count

logic o93 : index

logic o94 : index

logic o95 : index_count

logic o96 : index

logic o97 : int

logic o98 : int

logic o99 : index

logic o100 : index

logic o101 : index_count

logic o102 : index

logic o103 : index

logic o104 : index_count

logic o105 : index

logic o106 : int

logic o107 : bool

logic o108 : bool

logic o109 : bool

logic o110 : int

logic o111 : int

logic o112 : int

logic j5 : int

logic o113 : index

logic o114 : index

logic o115 : index_count

logic o116 : index

logic o117 : index

logic o118 : index_count

logic o119 : index

logic o120 : index

logic o121 : index_count

logic o122 : index

logic o123 : int

logic o124 : bool

logic a1 : (int,positive) farray

logic d__split_fields1 : us_main_type3

logic p__split_fields1 : us_main_type7

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : bool

logic result6 : bool

logic result7 : bool

logic result8 : bool

logic result9 : bool

logic result10 : bool

logic result11 : bool

logic result12 : bool

logic result13 : count_type

logic c__split_fields1 : count_type

logic result14 : bool

logic a2 : (int,positive) farray

logic d__split_fields2 : us_main_type3

logic p__split_fields2 : us_main_type7

logic c__split_fields2 : count_type

logic a3 : (int,positive) farray

logic d__split_fields3 : us_main_type3

logic p__split_fields3 : us_main_type7

logic c__split_fields3 : count_type

logic result15 : bool

logic result16 : bool

logic result17 : bool

logic result18 : bool

logic result19 : bool

logic a4 : (int,positive) farray

logic d__split_fields4 : us_main_type3

logic p__split_fields4 : us_main_type7

logic c__split_fields4 : count_type

logic a5 : (int,positive) farray

logic d__split_fields5 : us_main_type3

logic p__split_fields5 : us_main_type7

logic c__split_fields5 : count_type

logic a6 : (int,positive) farray

logic d__split_fields6 : us_main_type3

logic p__split_fields6 : us_main_type7

logic c__split_fields6 : count_type

logic a7 : (int,positive) farray

logic d__split_fields7 : us_main_type3

logic p__split_fields7 : us_main_type7

logic c__split_fields7 : count_type

logic a8 : (int,positive) farray

logic d__split_fields8 : us_main_type3

logic p__split_fields8 : us_main_type7

logic c__split_fields8 : count_type

logic a9 : (int,positive) farray

logic d__split_fields9 : us_main_type3

logic p__split_fields9 : us_main_type7

logic c__split_fields9 : count_type

logic a10 : (int,positive) farray

logic d__split_fields10 : us_main_type3

logic p__split_fields10 : us_main_type7

logic c__split_fields10 : count_type

logic p__split_fields11 : us_main_type7

logic f1 : (int,partition_index) farray

logic a11 : (int,positive) farray

logic d__split_fields11 : us_main_type3

logic p__split_fields12 : us_main_type7

logic f2 : (int,partition_index) farray

logic c__split_fields11 : count_type

logic a12 : (int,positive) farray

logic d__split_fields12 : us_main_type3

logic p__split_fields13 : us_main_type7

logic f3 : (int,partition_index) farray

logic c__split_fields12 : count_type

logic result20 : bool

axiom H : ((((of_int(1) = true) -> ((2 * length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields } })) <= to_rep5(p__split_discrs))) and
  ((not (of_int(1) = true)) -> ((2 * length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields } })) <= 10001))) and ((length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }) <= 5000) and
  ((forall j6:int. (((0 <= j6) and (j6 <= 5)) -> (has_key2(model__1({
   us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), to_rep((a[j6]))) = true))) and
  ((forall c5:count_type. ((has_key1(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), { us_split_fields5 = {
   rec__partition_refinement__inverse_sets__cursor__node = c5 } }) = true) ->
   (to_rep((a[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), get2(keys({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), get3(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), { us_split_fields5 = {
   rec__partition_refinement__inverse_sets__cursor__node = c5 }
   })))])) = get2(keys({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), get3(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), { us_split_fields5 = {
   rec__partition_refinement__inverse_sets__cursor__node = c5 } }))))) and
  ((forall c5:count_type. ((has_key(positions({ us_split_discrs1 = {
   rec__partition_refinement__partitioning_sets__list__capacity = x };
   us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
   x1 } }), { us_split_fields1 = {
   rec__partition_refinement__partitioning_sets__cursor__node = c5 }
   }) = true) -> (has_key2(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), get(model__({ us_split_discrs1 = {
   rec__partition_refinement__partitioning_sets__list__capacity = x };
   us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
   x1 } }), get1(positions({ us_split_discrs1 = {
   rec__partition_refinement__partitioning_sets__list__capacity = x };
   us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
   x1 } }), { us_split_fields1 = {
   rec__partition_refinement__partitioning_sets__cursor__node = c5 }
   }))) = true))) and
  ((forall j6:int. (((0 <= j6) and (j6 <= 5)) -> ((0 <= to_rep4((f[j6]))) and
   (to_rep4((f[j6])) <= (length1({ us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }) - 1))))) and
  ((forall j6:int. (((0 <= j6) and (j6 <= 5)) -> ((to_rep2(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }),
   to_rep4((f[j6])))).us_split_fields9).rec__partition_refinement__interval__first) <= j6) and
   (j6 <= to_rep2(((get5(model__2({ us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }),
   to_rep4((f[j6])))).us_split_fields9).rec__partition_refinement__interval__last))))) and
  ((forall j6:int. (((0 <= j6) and (j6 <= (length1({ us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }) - 1))) ->
   (forall k2:int. (((to_rep2(((get5(model__2({ us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }),
   j6)).us_split_fields9).rec__partition_refinement__interval__first) <= k2) and
   (k2 <= to_rep2(((get5(model__2({ us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }),
   j6)).us_split_fields9).rec__partition_refinement__interval__last))) ->
   (to_rep4((f[k2])) = j6))))) and
  (forall j6:int. (((0 <= j6) and (j6 <= (length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }) - 1))) -> (to_rep1(((get5(model__2({
  us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }),
  j6)).us_split_fields9).rec__partition_refinement__interval__count) = 0)))))))))))

axiom H1 : (({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  partition_refinement__refine__c__assume } } = first({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } })) and (((bool_eq1(length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), 0) = true) -> (bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  partition_refinement__refine__c__assume } }, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }) = true)) and ((not (bool_eq1(length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), 0) = true)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  partition_refinement__refine__c__assume } }) = true) and (get1(positions({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  partition_refinement__refine__c__assume } }) = 1)))))

axiom H2 : (result13 = c__split_fields)

axiom H3 : (c__split_fields1 = partition_refinement__refine__c__assume)

axiom H4 : ((d__split_discrs = d_old) and (d__split_fields = d_old1))

axiom H5 : ((result14 = has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } })) and ((result14 = true) <-> (has_key(positions({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } }) = true)))

axiom H6 : (result14 = true)

axiom H7 : (has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d_old };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = d_old1
  } }, get(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } })))) = true)

axiom H8 : (has_key2(model__1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), get(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } }))) = true)

axiom H9 : ((o65 = get(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } }))) and (in_range6(o65) and (o65 = get(model__({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } })))))

axiom H10 :
  ((forall k2:int. (((0 <= k2) and (k2 <= 5)) -> (((k2 = get4(model__1({
   us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), o65)) ->
   (to_rep((a2[k2])) = to_rep((a[(to_rep2(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }),
   o65)])))).us_split_fields9).rec__partition_refinement__interval__first) + to_rep1(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }),
   o65)])))).us_split_fields9).rec__partition_refinement__interval__count))])))) and
   ((not (k2 = get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), o65))) -> (((k2 = (to_rep2(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }),
   o65)])))).us_split_fields9).rec__partition_refinement__interval__first) + to_rep1(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }),
   o65)])))).us_split_fields9).rec__partition_refinement__interval__count))) ->
   (to_rep((a2[k2])) = to_rep((a[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }), o65)])))) and ((not (k2 = (to_rep2(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }),
   o65)])))).us_split_fields9).rec__partition_refinement__interval__first) + to_rep1(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields } }),
   o65)])))).us_split_fields9).rec__partition_refinement__interval__count)))) ->
   (to_rep((a2[k2])) = to_rep((a[k2]))))))))) and ((length1({
  us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields2 } }) = length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields } })) and
  ((forall j6:int. (((0 <= j6) and (j6 <= 5)) -> (has_key2(model__1({
   us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields2 } }), to_rep((a2[j6]))) = true))) and
  ((forall c5:us_rep4. ((has_key1(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields2 } }), c5) = true) -> (to_rep((a2[get4(model__1({
   us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields2 } }), get2(keys({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields2 } }), get3(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields2 } }), c5)))])) = get2(keys({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields2 } }), get3(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields2 } }), c5))))) and
  (forall c5:us_rep4. ((has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }), c5) = true) -> (has_key1(positions1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields2 } }), c5) = true)))))))

axiom H11 : (((match_bool(bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } }, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } }), length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }))) = true) -> (bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields2 } }, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }) = true)) and ((not (match_bool(bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } }, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } }), length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }))) = true)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields2 } }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields2 } }) = (get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields1 } }) + 1)))))

axiom H12 : true

axiom H13 : (length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields3 } }) = length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }))

axiom H14 :
  (forall j6:int. (((0 <= j6) and (j6 <= 5)) -> (has_key2(model__1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), to_rep((a3[j6]))) = true)))

axiom H15 :
  (forall c5:us_rep4. ((has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), c5) = true) -> (to_rep((a3[get4(model__1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), get2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), c5)))])) = get2(keys({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), get3(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), c5)))))

axiom H16 :
  (forall c5:us_rep4. ((has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d_old };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = d_old1
  } }), c5) = true) -> (has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), c5) = true)))

axiom H17 :
  (forall c5:us_rep. ((has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), c5) = true) -> (has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d_old };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = d_old1
  } }, get(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), c5)))) = true)))

axiom H18 :
  (forall j6:int. (((0 <= j6) and (j6 <= 5)) -> ((0 <= to_rep4((f[j6]))) and
  (to_rep4((f[j6])) <= (length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields3 } }) - 1)))))

axiom H19 :
  (forall j6:int. (((0 <= j6) and (j6 <= 5)) -> ((to_rep2(((get5(model__2({
  us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields3 } }),
  to_rep4((f[j6])))).us_split_fields9).rec__partition_refinement__interval__first) <= j6) and
  (j6 <= to_rep2(((get5(model__2({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields3 } }),
  to_rep4((f[j6])))).us_split_fields9).rec__partition_refinement__interval__last)))))

axiom H20 :
  (forall j6:int. (((0 <= j6) and (j6 <= (length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields3 } }) - 1))) ->
  (forall k2:int. (((to_rep2(((get5(model__2({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields3 } }),
  j6)).us_split_fields9).rec__partition_refinement__interval__first) <= k2) and
  (k2 <= to_rep2(((get5(model__2({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields3 } }),
  j6)).us_split_fields9).rec__partition_refinement__interval__last))) ->
  (to_rep4((f[k2])) = j6)))))

axiom H21 : ((o109 = has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } })) and ((o109 = true) <-> (has_key(positions({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } }) = true)))

axiom H22 : (((not (o109 = true)) -> (result19 = true)) and ((o109 = true) ->
  (result19 = false)))

axiom H23 : (not (result19 = true))

axiom H24 : (has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), find({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d_old };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = d_old1
  } }, get(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } })))) = true)

axiom H25 : (has_key2(model__1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), get(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } }))) = true)

axiom H26 : ((o112 = get(model__({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } }))) and (in_range6(o112) and (o112 = get(model__({
  us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } })))))

axiom H27 :
  ((forall k2:int. (((0 <= k2) and (k2 <= 5)) -> (((k2 = get4(model__1({
   us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }), o112)) ->
   (to_rep((a4[k2])) = to_rep((a3[(to_rep2(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields3 } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }),
   o112)])))).us_split_fields9).rec__partition_refinement__interval__first) + to_rep1(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields3 } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }),
   o112)])))).us_split_fields9).rec__partition_refinement__interval__count))])))) and
   ((not (k2 = get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }), o112))) -> (((k2 = (to_rep2(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields3 } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }),
   o112)])))).us_split_fields9).rec__partition_refinement__interval__first) + to_rep1(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields3 } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }),
   o112)])))).us_split_fields9).rec__partition_refinement__interval__count))) ->
   (to_rep((a4[k2])) = to_rep((a3[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }), o112)])))) and
   ((not (k2 = (to_rep2(((get5(model__2({ us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields3 } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }),
   o112)])))).us_split_fields9).rec__partition_refinement__interval__first) + to_rep1(((get5(model__2({
   us_split_discrs5 = {
   rec__partition_refinement__partitions__vector__capacity = p__split_discrs
   }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
   p__split_fields3 } }), to_rep4((f[get4(model__1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields3 } }),
   o112)])))).us_split_fields9).rec__partition_refinement__interval__count)))) ->
   (to_rep((a4[k2])) = to_rep((a3[k2]))))))))) and ((length1({
  us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields4 } }) = length1({ us_split_discrs5 = {
  rec__partition_refinement__partitions__vector__capacity = p__split_discrs
  }; us_split_fields11 = { rec__partition_refinement__partitions__vector =
  p__split_fields3 } })) and
  ((forall j6:int. (((0 <= j6) and (j6 <= 5)) -> (has_key2(model__1({
   us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields4 } }), to_rep((a4[j6]))) = true))) and
  ((forall c5:us_rep4. ((has_key1(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields4 } }), c5) = true) -> (to_rep((a4[get4(model__1({
   us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields4 } }), get2(keys({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields4 } }), get3(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields4 } }), c5)))])) = get2(keys({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields4 } }), get3(positions1({ us_split_discrs3 = {
   rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs
   }; us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
   d__split_fields4 } }), c5))))) and
  (forall c5:us_rep4. ((has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields3 } }), c5) = true) -> (has_key1(positions1({
  us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields4 } }), c5) = true)))))))

axiom H28 : (((match_bool(bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } }, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } }), length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }))) = true) -> (bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields4 } }, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }) = true)) and ((not (match_bool(bool_eq8({ us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } }, { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node = no_element }
  }), true, bool_eq1(get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } }), length({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }))) = true)) -> ((has_key(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields4 } }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields4 } }) = (get1(positions({ us_split_discrs1 = {
  rec__partition_refinement__partitioning_sets__list__capacity = x };
  us_split_fields3 = { rec__partition_refinement__partitioning_sets__list =
  x1 } }), { us_split_fields1 = {
  rec__partition_refinement__partitioning_sets__cursor__node =
  c__split_fields3 } }) + 1)))))

logic c5 : count_type

axiom H29 : (has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d_old };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map = d_old1
  } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = c5 } }) = true)

 (* File "a-cofove.ads", line 807, characters 0-0 *)
goal WP_parameter_def : (has_key1(positions1({ us_split_discrs3 = {
  rec__partition_refinement__inverse_sets__map__capacity = d__split_discrs };
  us_split_fields7 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields4 } }), { us_split_fields5 = {
  rec__partition_refinement__inverse_sets__cursor__node = c5 } }) = true)
