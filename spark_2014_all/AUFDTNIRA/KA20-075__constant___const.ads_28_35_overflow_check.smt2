(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a1 (Array Int integer))) (forall ((first Int)) (! (= (slide a1 first first) a1) :pattern ((slide a1 first first))))))
(assert (forall ((a1 (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a1 old_first new_first) i) (select a1 (- i (- new_first old_first)))) :pattern ((select (slide a1 old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a1 (Array Int integer)) (b1 (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a1 a_first a_last b1 b_first b_last) i) (select a1 i))) (=> (< a_last i) (= (select (concat1 a1 a_first a_last b1 b_first b_last) i) (select b1 (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a1 a_first a_last b1 b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a1 (Array Int integer)) (a__first Int) (a__last Int) (b1 (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a1 temp___idx_132)) (to_rep (select b1 (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a1 (Array Int integer)) (b1 (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b1 b__first b__last a1 a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a1 temp___idx_132)) (to_rep (select b1 (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a1 (Array Int integer)) (b1 (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a1 a_first a_last b1 b_first b_last) 0) (= (bool_eq a1 a_first a_last b1 b_first b_last) true)) :pattern ((compare a1 a_first a_last b1 b_first b_last))))))
(assert (forall ((a1 (Array Int integer)) (b1 (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a1 a_first a_last b1 b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a1 a_first i b1 b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a1 (+ i 1))) (to_rep (select b1 (+ j 1))))))))))) :pattern ((compare a1 a_first a_last b1 b_first b_last))))))
(assert (forall ((a1 (Array Int integer)) (b1 (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a1 a_first a_last b1 b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a1 a_first j b1 b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b1 (+ i 1))) (to_rep (select a1 (+ j 1))))))))))) :pattern ((compare a1 a_first a_last b1 b_first b_last))))))
(declare-const c (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun const__c__aggregate_def (Int) (Array Int integer))
(assert (forall ((temp___134 Int)) (forall ((temp___135 Int)) (= (select (const__c__aggregate_def temp___134) temp___135) (of_rep temp___134)))))
(declare-const c2 (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun const__c2__aggregate_def (Int) (Array Int integer))
(assert (forall ((temp___137 Int)) (forall ((temp___138 Int)) (= (select (const__c2__aggregate_def temp___137) temp___138) (of_rep temp___137)))))
(declare-const d (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun const__d__aggregate_def (Int Int) (Array Int integer))
(assert (forall ((temp___140 Int) (temp___141 Int)) (let ((temp___139 (const__d__aggregate_def temp___140 temp___141))) (and (= (select temp___139 1) (of_rep temp___140)) (= (select temp___139 2) (of_rep temp___141))))))
(declare-const d2 (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun const__d2__aggregate_def (Int Int) (Array Int integer))
(assert (forall ((temp___144 Int) (temp___145 Int)) (let ((temp___143 (const__d2__aggregate_def temp___144 temp___145))) (and (= (select temp___143 1) (of_rep temp___144)) (= (select temp___143 2) (of_rep temp___145))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__const__te__x integer) (rec__const__te__y integer)))))
(define-fun us_split_fields_X__projection ((a1 us_split_fields)) integer (rec__const__te__x a1))
(define-fun us_split_fields_Y__projection ((a1 us_split_fields)) integer (rec__const__te__y a1))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a1 us_split_fields__ref)) us_split_fields (us_split_fields__content a1))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a1 us_rep)) us_split_fields (us_split_fields1 a1))
(define-fun bool_eq1 ((a1 us_rep) (b1 us_rep)) Bool (ite (and (= (to_rep (rec__const__te__x (us_split_fields1 a1))) (to_rep (rec__const__te__x (us_split_fields1 b1)))) (= (to_rep (rec__const__te__y (us_split_fields1 a1))) (to_rep (rec__const__te__y (us_split_fields1 b1))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a1 us_rep)) (<= 0 (object__size a1))))
(assert (<= 0 value__alignment))
(assert (forall ((a1 us_rep)) (<= 0 (object__alignment a1))))
(declare-const const__te__x__first__bit Int)
(declare-const const__te__x__last__bit Int)
(declare-const const__te__x__position Int)
(assert (<= 0 const__te__x__first__bit))
(assert (< const__te__x__first__bit const__te__x__last__bit))
(assert (<= 0 const__te__x__position))
(declare-const const__te__y__first__bit Int)
(declare-const const__te__y__last__bit Int)
(declare-const const__te__y__position Int)
(assert (<= 0 const__te__y__first__bit))
(assert (< const__te__y__first__bit const__te__y__last__bit))
(assert (<= 0 const__te__y__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((te__ref (mk_te__ref (te__content us_rep)))))
(define-fun te__ref___projection ((a1 te__ref)) us_rep (te__content a1))
(declare-const e us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const f us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const g us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-fun fi (tuple0) Int)
(declare-fun fi__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (fi us_void_param) true false true) :pattern ((fi us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (fi us_void_param) 1) :pattern ((fi us_void_param)))))
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-fun fk (tuple0) Int)
(declare-fun fk__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (fk us_void_param) true false true) :pattern ((fk us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (fk us_void_param) 1) :pattern ((fk us_void_param)))))
(declare-const k Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const l Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-fun fm (Int) Int)
(declare-fun fm__function_guard (Int Int) Bool)
(assert (forall ((x Int)) (! (=> (dynamic_invariant x true true true) (dynamic_invariant (fm x) true false true)) :pattern ((fm x)))))
(assert (forall ((x Int)) (! (=> (dynamic_invariant x true true true) (= (fm x) x)) :pattern ((fm x)))))
(declare-const m Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const p Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(assert (= a 1))
(assert (= b 1))
(assert (= c (const__c__aggregate_def 1)))
(assert (= c2 (const__c2__aggregate_def 1)))
(assert (= d (const__d__aggregate_def 1 1)))
(assert (= d2 (const__d2__aggregate_def 1 1)))
(assert (= e (mk___rep (mk___split_fields (of_rep 1) (of_rep 1)))))
(assert (= f (mk___rep (mk___split_fields (of_rep 1) (of_rep 1)))))
(assert (= g (mk___rep (mk___split_fields (of_rep 1) (of_rep 1)))))
(assert (= i (fi Tuple0)))
(assert (= j (- (* 2 (fi Tuple0)) 1)))
(assert (= k (fk Tuple0)))
(assert (= l (- (* 2 (fk Tuple0)) 1)))
(assert (= m (fm 1)))
(assert (= n (- (* 2 (fm 1)) 1)))
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const const__e__assume integer)
(declare-const const__e__assume1 integer)
(declare-const o4 integer)
(declare-const o5 integer)
(declare-const o6 integer)
(declare-const o7 integer)
(declare-const const__f__assume integer)
(declare-const const__f__assume1 integer)
(declare-const o8 integer)
(declare-const o9 integer)
(declare-const o10 integer)
(declare-const o11 integer)
(declare-const const__g__assume integer)
(declare-const const__g__assume1 integer)
(declare-const const__i__assume Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const const__j__assume Int)
(declare-const const__k__assume Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const const__l__assume Int)
(declare-const const__m__assume Int)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const const__n__assume Int)
(assert (in_range a))
(assert (in_range b))
(assert (= (const__c__aggregate_def 1) c))
(assert (= (const__c2__aggregate_def 1) c2))
(assert (= (const__d__aggregate_def 1 1) d))
(assert (= (const__d2__aggregate_def 1 1) d2))
(assert (= (to_rep o) 1))
(assert (= (to_rep o1) 1))
(assert (= o1 o2))
(assert (= o o3))
(assert (= const__e__assume o2))
(assert (= const__e__assume1 o3))
(assert (= (mk___rep (mk___split_fields const__e__assume const__e__assume1)) e))
(assert (= (to_rep o4) 1))
(assert (= (to_rep o5) 1))
(assert (= o5 o6))
(assert (= o4 o7))
(assert (= const__f__assume o6))
(assert (= const__f__assume1 o7))
(assert (= (mk___rep (mk___split_fields const__f__assume const__f__assume1)) f))
(assert (= (to_rep o8) 1))
(assert (= (to_rep o9) 1))
(assert (= o9 o10))
(assert (= o8 o11))
(assert (= const__g__assume o10))
(assert (= const__g__assume1 o11))
(assert (= (mk___rep (mk___split_fields const__g__assume const__g__assume1)) g))
(assert (and (= const__i__assume (fi Tuple0)) (and (in_range const__i__assume) (= const__i__assume 1))))
(assert (= const__i__assume i))
(assert (in_range i))
(assert (and (= o12 (fi Tuple0)) (and (in_range o12) (= o12 1))))
(assert (= o13 (* 2 o12)))
(assert (and (= o14 o13) (in_range o13)))
(assert (= o15 (- o14 1)))
(assert (and (= const__j__assume o15) (in_range o15)))
(assert (= const__j__assume j))
(assert (in_range j))
(assert (and (= const__k__assume (fk Tuple0)) (and (in_range const__k__assume) (= const__k__assume 1))))
(assert (= const__k__assume k))
(assert (in_range k))
(assert (and (= o16 (fk Tuple0)) (and (in_range o16) (= o16 1))))
(assert (= o17 (* 2 o16)))
(assert (and (= o18 o17) (in_range o17)))
(assert (= o19 (- o18 1)))
(assert (not (in_range o19)))
(check-sat)
(exit)
