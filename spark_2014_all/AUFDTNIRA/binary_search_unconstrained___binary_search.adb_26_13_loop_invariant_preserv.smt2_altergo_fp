(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type topt_indexB

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : topt_indexB, topt_indexB -> bool

logic dummy1 : topt_indexB

type topt_indexB__ref = { topt_indexB__content : topt_indexB
}

function topt_indexB__ref___projection(a: topt_indexB__ref) : topt_indexB =
  (a).topt_indexB__content

type index

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483646))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic to_rep1 : topt_indexB -> int

logic of_rep1 : int -> topt_indexB

axiom inversion_axiom1 :
  (forall x:topt_indexB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:topt_indexB [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> topt_indexB

logic last : t -> topt_indexB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,integer) farray

logic dummy4 : t

type ar__ref = { ar__content : us_t
}

function ar__ref___projection(a: ar__ref) : us_t = (a).ar__content

logic empty : us_t -> bool

logic empty__function_guard : bool, us_t -> prop

axiom empty__post_axiom : true

axiom empty__def_axiom :
  (forall a:(int,integer) farray. forall a1:t [empty({ elts = a; rt = a1 })].
  ((empty({ elts = a; rt = a1 }) = true) <->
  (to_rep1(last(a1)) <  to_rep1(first(a1)))))

logic sorted : us_t -> bool

logic sorted__function_guard : bool, us_t -> prop

axiom sorted__post_axiom : true

axiom sorted__def_axiom :
  (forall a:(int,integer) farray. forall a1:t [sorted({ elts = a; rt = a1
  })]. ((sorted({ elts = a; rt = a1 }) = true) <->
  (forall i1:int. (((to_rep1(first(a1)) <= i1) and
  (i1 <= to_rep1(last(a1)))) ->
  (forall i2:int. (((i1 <= i2) and (i2 <= to_rep1(last(a1)))) ->
  (to_rep((a[i1])) <= to_rep((a[i2])))))))))

logic a : (int,integer) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "binary_search.ads", line 16, characters 0-0 *)
goal WP_parameter_def :
  (forall left:int. forall right:int. forall med:int.
  forall binary_search__search__result:int. forall o:int. forall o1:int.
  forall o2:int. forall o3:integer. forall o4:int. forall o5:bool.
  forall o6:int. forall o7:integer. forall o8:int. forall o9:int.
  forall o10:integer. forall o11:int. forall o12:bool. forall o13:bool.
  forall o14:int. forall o15:int. forall o16:int. forall o17:integer.
  forall o18:int. forall o19:int. forall o20:int. forall o21:int.
  forall o22:integer. forall o23:int. forall o24:int.
  forall binary_search__search__result1:int. forall result:bool.
  forall binary_search__search__result2:int. forall result1:int.
  forall left1:int. forall result2:int. forall right1:int.
  forall result3:bool. forall binary_search__search__result3:int.
  forall result4:bool. forall binary_search__search__result4:int.
  forall left2:int. forall right2:int. forall med1:int.
  forall binary_search__search__result5:int. forall temp___196:int.
  forall result5:int. forall temp___1961:int. forall result6:int.
  forall med2:int. forall result7:bool. forall result8:int. forall left3:int.
  forall result9:bool. forall result10:int. forall right3:int.
  forall binary_search__search__result6:int. (dynamic_property(1, 2147483646,
  to_rep1(first(a1)), to_rep1(last(a1))) -> (in_range1(i) -> ((sorted({
  elts = a; rt = a1 }) = true) -> (((1 <= 2147483646) -> in_range3(left)) ->
  (((1 <= 2147483646) -> in_range3(right)) -> (((1 <= 2147483646) ->
  in_range3(med)) -> ((((result = empty({ elts = a; rt = a1 })) and
  ((result = true) <-> (to_rep1(last(a1)) <  to_rep1(first(a1))))) and
  ((not (result = true)) and
  ((binary_search__search__result2 = binary_search__search__result) and
  (binary_search__search__result2 = binary_search__search__result1)))) ->
  ((((o = to_rep1(first(a1))) and in_range3(to_rep1(first(a1)))) and (({
  int__content = result1 } = { int__content = left }) and (left1 = o))) ->
  ((((o1 = to_rep1(last(a1))) and in_range3(to_rep1(last(a1)))) and (({
  int__content = result2 } = { int__content = right }) and (right1 = o1))) ->
  (((((((((to_rep1(first(a1)) <= left1) and (left1 <= to_rep1(last(a1)))) and
  (o2 = left1)) and (o3 = (a[o2]))) and (o4 = to_rep(o3))) and (((o4 = i) and
  (o5 = true)) or ((not (o4 = i)) and (o5 = false)))) and
  (((left1 = right1) and (result3 = o5)) or ((not (left1 = right1)) and
  (result3 = false)))) and ((not (result3 = true)) and
  (((((((((to_rep1(first(a1)) <= right1) and
  (right1 <= to_rep1(last(a1)))) and (o9 = right1)) and (o10 = (a[o9]))) and
  (o11 = to_rep(o10))) and (((o11 <  i) and (o12 = true)) or
  ((not (o11 <  i)) and (o12 = false)))) and
  (((((((to_rep1(first(a1)) <= left1) and (left1 <= to_rep1(last(a1)))) and
  (o6 = left1)) and (o7 = (a[o6]))) and (o8 = to_rep(o7))) and
  (((i <  o8) and (o13 = true)) or ((not (i <  o8)) and (o13 = false)))) and
  (result4 = match_bool(o13, true, o12)))) and ((not (result4 = true)) and
  (binary_search__search__result4 = binary_search__search__result2))) and
  (binary_search__search__result3 = binary_search__search__result4)))) ->
  ((left1 <= right1) -> (((((to_rep1(first(a1)) <= left2) and
  (left2 <= to_rep1(last(a1)))) and ((to_rep1(first(a1)) <= right2) and
  (right2 <= to_rep1(last(a1))))) and
  ((forall index1:int. (((to_rep1(first(a1)) <= index1) and
   (index1 <= (left2 - 1))) -> (to_rep((a[index1])) <  i))) and
  (forall index1:int. (((to_rep1(first(a1)) <= index1) and
  (index1 <= to_rep1(last(a1)))) -> ((right2 <  index1) ->
  (i <  to_rep((a[index1])))))))) -> (((((((1 <= 2147483646) ->
  in_range3(left2)) and ((1 <= 2147483646) -> in_range3(right2))) and
  ((1 <= 2147483646) -> in_range3(med1))) and (left2 <= right2)) and
  (((temp___196 = result5) and (temp___1961 = (right2 - left2))) and
  (((((o14 = (left2 + comp_div((right2 - left2),2))) and
  in_range2((left2 + comp_div((right2 - left2),2)))) and ((o15 = o14) and
  in_range3(o14))) and ((med1 = result6) and (med2 = o15))) and
  ((forall i1:int. (((to_rep1(first(a1)) <= i1) and
   (i1 <= to_rep1(last(a1)))) ->
   (forall i2:int. (((i1 <= i2) and (i2 <= to_rep1(last(a1)))) ->
   (to_rep((a[i1])) <= to_rep((a[i2]))))))) and
  ((((((((to_rep1(first(a1)) <= med2) and (med2 <= to_rep1(last(a1)))) and
  (o16 = med2)) and (o17 = (a[o16]))) and (o18 = to_rep(o17))) and
  (((o18 <  i) and (result7 = true)) or ((not (o18 <  i)) and
  (result7 = false)))) and (((result7 = true) and ((((((o19 = (med2 + 1)) and
  in_range2((med2 + 1))) and ((o20 = o19) and in_range3(o19))) and
  ((left2 = result8) and (left3 = o20))) and
  (forall i1:int. (((to_rep1(first(a1)) <= i1) and (i1 <= med2)) ->
  (to_rep((a[i1])) <= to_rep((a[med2])))))) and
  ((binary_search__search__result6 = binary_search__search__result5) and
  (right3 = right2)))) or ((not (result7 = true)) and
  ((((((((to_rep1(first(a1)) <= med2) and (med2 <= to_rep1(last(a1)))) and
  (o21 = med2)) and (o22 = (a[o21]))) and (o23 = to_rep(o22))) and
  (((i <  o23) and (result9 = true)) or ((not (i <  o23)) and
  (result9 = false)))) and ((result9 = true) and (((((o24 = (med2 - 1)) and
  in_range3((med2 - 1))) and ((right2 = result10) and (right3 = o24))) and
  (((to_rep1(first(a1)) <= med2) and (med2 <= to_rep1(last(a1)))) and
  (forall i2:int. (((med2 <= i2) and (i2 <= to_rep1(last(a1)))) ->
  (to_rep((a[med2])) <= to_rep((a[i2]))))))) and
  (binary_search__search__result6 = binary_search__search__result5)))) and
  (left3 = left2))))) and (left3 <= right3)))))) ->
  (forall index1:int. (((to_rep1(first(a1)) <= index1) and
  (index1 <= (left3 - 1))) -> (to_rep((a[index1])) <  i)))))))))))))))))
