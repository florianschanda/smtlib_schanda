(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort t 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (t t) Bool)
(declare-const dummy2 t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_181 Int) (temp___is_init_178 Bool) (temp___skip_constant_179 Bool) (temp___do_toplevel_180 Bool) (dyn_pred_in_loop__L_1__i Int)) Bool (and (=> (or (= temp___is_init_178 true) (<= 0 2147483647)) (in_range3 temp___expr_181)) (=> (= temp___do_toplevel_180 true) (=> (= temp___is_init_178 true) (< (* temp___expr_181 dyn_pred_in_loop__L_1__i) 2147483647)))))
(define-fun dynamic_predicate ((temp___185 Int) (dyn_pred_in_loop__L_1__i Int)) Bool (< (* temp___185 dyn_pred_in_loop__L_1__i) 2147483647))
(declare-const a (Array Int natural))
(declare-const i Int)
(declare-const x Int)
(declare-const o Bool)
(declare-const temp___187 Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Bool)
(declare-const o4 Bool)
(declare-const o5 natural)
(declare-const o6 (Array Int natural))
(declare-const o7 Bool)
(declare-const temp___1871 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Bool)
(declare-const o11 Bool)
(declare-const o12 natural)
(declare-const o13 (Array Int natural))
(declare-const o14 Bool)
(declare-const temp___1872 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Bool)
(declare-const o18 Bool)
(declare-const o19 natural)
(declare-const o20 (Array Int natural))
(declare-const o21 Bool)
(declare-const temp___1873 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const o24 Bool)
(declare-const o25 Bool)
(declare-const o26 natural)
(declare-const o27 (Array Int natural))
(declare-const o28 Bool)
(declare-const temp___1874 Int)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const o31 Bool)
(declare-const o32 Bool)
(declare-const o33 natural)
(declare-const o34 (Array Int natural))
(declare-const o35 Bool)
(declare-const temp___1875 Int)
(declare-const o36 Int)
(declare-const o37 Int)
(declare-const o38 Bool)
(declare-const o39 Bool)
(declare-const o40 natural)
(declare-const o41 (Array Int natural))
(declare-const o42 Bool)
(declare-const temp___1876 Int)
(declare-const o43 Int)
(declare-const o44 Int)
(declare-const o45 Bool)
(declare-const o46 Bool)
(declare-const o47 natural)
(declare-const o48 (Array Int natural))
(declare-const o49 Bool)
(declare-const temp___1877 Int)
(declare-const o50 Int)
(declare-const o51 Int)
(declare-const o52 Bool)
(declare-const o53 Bool)
(declare-const o54 natural)
(declare-const o55 (Array Int natural))
(declare-const o56 Bool)
(declare-const temp___1878 Int)
(declare-const o57 Int)
(declare-const o58 Int)
(declare-const o59 Bool)
(declare-const o60 Bool)
(declare-const o61 natural)
(declare-const o62 (Array Int natural))
(declare-const o63 Bool)
(declare-const o64 Int)
(declare-const o65 Int)
(declare-const result Int)
(declare-const i1 Int)
(declare-const result1 Int)
(declare-const x1 Int)
(declare-const result2 Bool)
(declare-const x2 Int)
(declare-const result3 Int)
(declare-const x3 Int)
(declare-const result4 Bool)
(declare-const x4 Int)
(declare-const x5 Int)
(declare-const x6 Int)
(declare-const x7 Int)
(declare-const result5 (Array Int natural))
(declare-const a1 (Array Int natural))
(declare-const result6 Int)
(declare-const i2 Int)
(declare-const result7 Int)
(declare-const x8 Int)
(declare-const result8 Bool)
(declare-const x9 Int)
(declare-const result9 Int)
(declare-const x10 Int)
(declare-const result10 Bool)
(declare-const x11 Int)
(declare-const x12 Int)
(declare-const x13 Int)
(declare-const x14 Int)
(declare-const result11 (Array Int natural))
(declare-const a2 (Array Int natural))
(declare-const result12 Int)
(declare-const i3 Int)
(declare-const result13 Int)
(declare-const x15 Int)
(declare-const result14 Bool)
(declare-const x16 Int)
(declare-const result15 Int)
(declare-const x17 Int)
(declare-const result16 Bool)
(declare-const x18 int__ref)
(declare-const x19 Int)
(declare-const x20 int__ref)
(declare-const x21 Int)
(declare-const result17 map__ref)
(declare-const a3 (Array Int natural))
(declare-const result18 int__ref)
(declare-const i4 Int)
(declare-const result19 int__ref)
(declare-const x22 Int)
(declare-const result20 Bool)
(declare-const x23 Int)
(declare-const result21 int__ref)
(declare-const x24 Int)
(declare-const result22 Bool)
(declare-const x25 int__ref)
(declare-const x26 Int)
(declare-const x27 int__ref)
(declare-const x28 Int)
(declare-const result23 map__ref)
(declare-const a4 (Array Int natural))
(declare-const result24 int__ref)
(declare-const i5 Int)
(declare-const result25 int__ref)
(declare-const x29 Int)
(declare-const result26 Bool)
(declare-const x30 Int)
(declare-const result27 int__ref)
(declare-const x31 Int)
(declare-const result28 Bool)
(declare-const x32 int__ref)
(declare-const x33 Int)
(declare-const x34 int__ref)
(declare-const x35 Int)
(declare-const result29 map__ref)
(declare-const a5 (Array Int natural))
(declare-const result30 int__ref)
(declare-const i6 Int)
(declare-const result31 int__ref)
(declare-const x36 Int)
(declare-const result32 Bool)
(declare-const x37 Int)
(declare-const result33 int__ref)
(declare-const x38 Int)
(declare-const result34 Bool)
(declare-const x39 int__ref)
(declare-const x40 Int)
(declare-const x41 int__ref)
(declare-const x42 Int)
(declare-const result35 map__ref)
(declare-const a6 (Array Int natural))
(declare-const result36 int__ref)
(declare-const i7 Int)
(declare-const result37 int__ref)
(declare-const x43 Int)
(declare-const result38 Bool)
(declare-const x44 Int)
(declare-const result39 int__ref)
(declare-const x45 Int)
(declare-const result40 Bool)
(declare-const x46 int__ref)
(declare-const x47 Int)
(declare-const x48 int__ref)
(declare-const x49 Int)
(declare-const result41 map__ref)
(declare-const a7 (Array Int natural))
(declare-const result42 int__ref)
(declare-const i8 Int)
(declare-const result43 int__ref)
(declare-const x50 Int)
(declare-const result44 Bool)
(declare-const x51 Int)
(declare-const result45 int__ref)
(declare-const x52 Int)
(declare-const result46 Bool)
(declare-const x53 int__ref)
(declare-const x54 Int)
(declare-const x55 int__ref)
(declare-const x56 Int)
(declare-const result47 map__ref)
(declare-const a8 (Array Int natural))
(declare-const result48 int__ref)
(declare-const i9 Int)
(declare-const result49 int__ref)
(declare-const x57 Int)
(declare-const result50 Bool)
(declare-const x58 Int)
(declare-const result51 int__ref)
(declare-const x59 Int)
(declare-const result52 Bool)
(declare-const x60 int__ref)
(declare-const x61 Int)
(declare-const x62 int__ref)
(declare-const x63 Int)
(declare-const result53 map__ref)
(declare-const a9 (Array Int natural))
(declare-const result54 int__ref)
(declare-const i10 Int)
(declare-const result55 int__ref)
(declare-const x64 Int)
(declare-const result56 Bool)
(declare-const x65 Int)
(assert (= result i))
(assert (= i1 1))
(assert (= result1 x))
(assert (= x1 1))
(assert (in_range2 x1))
(assert (= (= o true) (< (* x1 i1) 2147483647)))
(assert (= result2 (ite (in_range3 x1) o false)))
(assert (= result2 true))
(assert (and (=> (<= 0 2147483647) (in_range2 x2)) (and (in_range3 x2) (< (* x2 i1) 2147483647))))
(assert (not (in_range1 (* x2 i1))))
(check-sat)
(exit)
