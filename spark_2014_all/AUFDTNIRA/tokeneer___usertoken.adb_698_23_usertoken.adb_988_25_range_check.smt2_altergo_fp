(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type tryt

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tryt, tryt -> bool

logic dummy1 : tryt

type tryt__ref = { tryt__content : tryt
}

function tryt__ref___projection(a: tryt__ref) : tryt = (a).tryt__content

type statust

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : statust, statust -> bool

logic dummy2 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type descriptioni

predicate in_range4(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : descriptioni, descriptioni -> bool

logic dummy3 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic nodescription : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic audittypes__nodescription__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___140:int.
  (forall temp___141:int.
  ((audittypes__nodescription__aggregate_def(temp___140)[temp___141]) = of_rep(temp___140))))

type yearst

predicate in_range5(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : yearst, yearst -> bool

logic dummy4 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep1 : yearst -> int

logic of_rep1 : int -> yearst

axiom inversion_axiom1 :
  (forall x:yearst [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:yearst [to_rep1(x)]. in_range5(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range5(x) ->
  (to_rep1(of_rep1(x)) = x)))

type monthst

predicate in_range6(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : monthst, monthst -> bool

logic dummy5 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep2 : monthst -> int

logic of_rep2 : int -> monthst

axiom inversion_axiom2 :
  (forall x:monthst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:monthst [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

type dayst

predicate in_range7(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : dayst, dayst -> bool

logic dummy6 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep3 : dayst -> int

logic of_rep3 : int -> dayst

axiom inversion_axiom3 :
  (forall x:dayst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:dayst [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

type millisecst

predicate in_range8(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : millisecst, millisecst -> bool

logic dummy7 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep4 : millisecst -> int

logic of_rep4 : int -> millisecst

axiom inversion_axiom4 :
  (forall x:millisecst [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:millisecst [to_rep4(x)]. in_range8(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range8(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___7__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def10 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((((to_rep1(((a).us_split_fields1).rec__clock__timet__year) = to_rep1(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__month) = to_rep2(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__day) = to_rep3(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep4(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep4(((b).us_split_fields1).rec__clock__timet__millisec))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields1).rec__clock__timet__year) = to_rep1(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__month) = to_rep2(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__day) = to_rep3(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep4(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep4(((b).us_split_fields1).rec__clock__timet__millisec)))) ->
  (bool_eq11(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : yearst

logic dummy9 : monthst

logic dummy10 : dayst

logic dummy11 : millisecst

type timet__ref = { timet__content : us_rep
}

function timet__ref___projection(a: timet__ref) : us_rep = (a).timet__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type logfileindext

predicate in_range9(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : logfileindext, logfileindext -> bool

logic dummy12 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep5 : logfileindext -> int

logic of_rep5 : int -> logfileindext

axiom inversion_axiom5 :
  (forall x:logfileindext [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:logfileindext [to_rep5(x)]. in_range9(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range9(x) ->
  (to_rep5(of_rep5(x)) = x)))

type logentrycountt

predicate in_range10(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : logentrycountt, logentrycountt -> bool

logic dummy13 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep6 : logentrycountt -> int

logic of_rep6 : int -> logentrycountt

axiom inversion_axiom6 :
  (forall x:logentrycountt [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:logentrycountt [to_rep6(x)]. in_range10(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range10(x) ->
  (to_rep6(of_rep6(x)) = x)))

type map__ref1 = { map__content1 : (int,logfileindext) farray
}

logic slide1 : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq1 :
  (forall a:(int,logfileindext) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> (int,logfileindext) farray

axiom concat_def1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : logfileindext, int -> (int,logfileindext) farray

axiom singleton_def1 :
  (forall v:logfileindext.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq14 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def13 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq14(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_153:int. ((((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) and
  (to_rep5((a[temp___idx_153])) = to_rep5((b[((b__first - a__first) + temp___idx_153)])))) or
  (not ((a__first <= temp___idx_153) and (temp___idx_153 <= a__last)))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep5((a[temp___idx_153])) = to_rep5((b[((b__first - a__first) + temp___idx_153)]))))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep5((a[temp___idx_153])) = to_rep5((b[((b__first - a__first) + temp___idx_153)])))))))))

logic compare1 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq14(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq14(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep5((a[(i + 1)])) <  to_rep5((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq14(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep5((b[(i + 1)])) <  to_rep5((a[(j + 1)]))))))))))))

logic dummy14 : (int,logfileindext) farray

logic value__size1 : int

logic object__size1 : (int,logfileindext) farray -> int

logic value__component__size : int

logic object__component__size : (int,logfileindext) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,logfileindext) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment1(a)))

logic user_eq11 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type logfilecountt

predicate in_range11(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq12 : logfilecountt, logfilecountt -> bool

logic dummy15 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep7 : logfilecountt -> int

logic of_rep7 : int -> logfilecountt

axiom inversion_axiom7 :
  (forall x:logfilecountt [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:logfilecountt [to_rep7(x)]. in_range11(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range11(x) ->
  (to_rep7(of_rep7(x)) = x)))

type us_split_fields2 = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields2) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__2__projection(a: us_split_fields2) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___11__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq16 : us_rep1, us_rep1 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq16(a, b)].
  ((((((bool_eq14(((a).us_split_fields3).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__head) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__head))) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__lasti) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__lasti))) and
  (to_rep7(((a).us_split_fields3).rec__auditlog__logfilelistt__length) = to_rep7(((b).us_split_fields3).rec__auditlog__logfilelistt__length))) ->
  (bool_eq16(a, b) = true)) and
  ((not ((((bool_eq14(((a).us_split_fields3).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__head) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__head))) and
  (to_rep5(((a).us_split_fields3).rec__auditlog__logfilelistt__lasti) = to_rep5(((b).us_split_fields3).rec__auditlog__logfilelistt__lasti))) and
  (to_rep7(((a).us_split_fields3).rec__auditlog__logfilelistt__length) = to_rep7(((b).us_split_fields3).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq16(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size2({
  us_split_fields3 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq13 : us_rep1, us_rep1 -> bool

logic dummy16 : (int,logfileindext) farray

logic dummy17 : logfileindext

logic dummy18 : logfileindext

logic dummy19 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep1
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep1 =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range12(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq14 : fileentrycountt, fileentrycountt -> bool

logic dummy20 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep8 : fileentrycountt -> int

logic of_rep8 : int -> fileentrycountt

axiom inversion_axiom8 :
  (forall x:fileentrycountt [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:fileentrycountt [to_rep8(x)]. in_range12(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range12(x) ->
  (to_rep8(of_rep8(x)) = x)))

type map__ref2 = { map__content2 : (int,fileentrycountt) farray
}

logic slide2 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq2 :
  (forall a:(int,fileentrycountt) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> (int,fileentrycountt) farray

axiom concat_def2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : fileentrycountt, int -> (int,fileentrycountt) farray

axiom singleton_def2 :
  (forall v:fileentrycountt.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq18 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def17 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq18(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep8((a[temp___idx_154])) = to_rep8((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep8((a[temp___idx_154])) = to_rep8((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq18(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep8((a[temp___idx_154])) = to_rep8((b[((b__first - a__first) + temp___idx_154)])))))))))

logic compare2 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> int

axiom compare_def_eq2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq18(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq18(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep8((a[(i + 1)])) <  to_rep8((b[(j + 1)]))))))))))))

axiom compare_def_gt2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare2(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq18(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep8((b[(i + 1)])) <  to_rep8((a[(j + 1)]))))))))))))

logic dummy21 : (int,fileentrycountt) farray

logic value__size3 : int

logic object__size3 : (int,fileentrycountt) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,fileentrycountt) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,fileentrycountt) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment3(a)))

logic user_eq15 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields4 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep1;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields4) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields4) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields4) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___12__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq19 : us_rep2, us_rep2 -> bool

axiom bool_eq_def18 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq19(a, b)].
  ((((((to_rep5(((a).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile) = to_rep5(((b).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq16(((a).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq18(((a).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq19(a, b) = true)) and
  ((not ((((to_rep5(((a).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile) = to_rep5(((b).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq16(((a).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq18(((a).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq19(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size4({
  us_split_fields5 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment4({
  us_split_fields5 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq16 : us_rep2, us_rep2 -> bool

logic dummy22 : logfileindext

logic dummy23 : logentrycountt

logic dummy24 : (int,logfileindext) farray

logic dummy25 : logfileindext

logic dummy26 : logfileindext

logic dummy27 : logfilecountt

logic dummy28 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep2
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep2 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep1,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep1,
  (int,fileentrycountt) farray -> prop

logic temp___1193 : int -> (int,logfileindext) farray

axiom def_axiom1 :
  (forall temp___1195:int.
  (forall temp___1196:int.
  ((temp___1193(temp___1195)[temp___1196]) = of_rep5(temp___1195))))

logic temp___1197 : int -> (int,fileentrycountt) farray

axiom def_axiom2 :
  (forall temp___1199:int.
  (forall temp___1200:int.
  ((temp___1197(temp___1199)[temp___1200]) = of_rep8(temp___1199))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep3

logic bool_eq20 : us_rep3, us_rep3 -> bool

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep3. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep3. (0 <= object__alignment5(a)))

logic user_eq17 : us_rep3, us_rep3 -> bool

logic dummy29 : us_rep3

type t__ref = { t__content : us_rep3
}

function t__ref___projection(a: t__ref) : us_rep3 = (a).t__content

type map__ref3 = { map__content3 : (int,us_rep3) farray
}

logic slide3 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq3 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> (int,us_rep3) farray

axiom concat_def3 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : us_rep3, int -> (int,us_rep3) farray

axiom singleton_def3 :
  (forall v:us_rep3.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq21 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def19 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq21(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq20((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq21(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq20((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))) -> (bool_eq21(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq21(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq20((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

type filestatust

predicate in_range13(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq18 : filestatust, filestatust -> bool

logic dummy30 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep9 : filestatust -> int

logic of_rep9 : int -> filestatust

axiom inversion_axiom9 :
  (forall x:filestatust [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:filestatust [to_rep9(x)]. in_range13(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range13(x) ->
  (to_rep9(of_rep9(x)) = x)))

type map__ref4 = { map__content4 : (int,filestatust) farray
}

logic slide4 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq4 :
  (forall a:(int,filestatust) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,filestatust) farray, int, int, (int,filestatust) farray,
  int, int -> (int,filestatust) farray

axiom concat_def4 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : filestatust, int -> (int,filestatust) farray

axiom singleton_def4 :
  (forall v:filestatust.
  (forall i:int [(singleton4(v, i)[i])]. ((singleton4(v, i)[i]) = v)))

logic bool_eq23 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def21 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq23(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and
  (to_rep9((a[temp___idx_156])) = to_rep9((b[((b__first - a__first) + temp___idx_156)])))) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq23(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep9((a[temp___idx_156])) = to_rep9((b[((b__first - a__first) + temp___idx_156)]))))))) ->
  (bool_eq23(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq23(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep9((a[temp___idx_156])) = to_rep9((b[((b__first - a__first) + temp___idx_156)])))))))))

logic compare3 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> int

axiom compare_def_eq3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq23(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq23(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep9((a[(i + 1)])) <  to_rep9((b[(j + 1)]))))))))))))

axiom compare_def_gt3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare3(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq23(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep9((b[(i + 1)])) <  to_rep9((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type algorithmt

predicate in_range14(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq19 : algorithmt, algorithmt -> bool

logic dummy31 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic to_rep10 : algorithmt -> int

logic of_rep10 : int -> algorithmt

axiom inversion_axiom10 :
  (forall x:algorithmt [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:algorithmt [to_rep10(x)]. in_range14(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range14(x) ->
  (to_rep10(of_rep10(x)) = x)))

type namecountt

predicate in_range15(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def23 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq20 : namecountt, namecountt -> bool

logic dummy32 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep11 : namecountt -> int

logic of_rep11 : int -> namecountt

axiom inversion_axiom11 :
  (forall x:namecountt [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:namecountt [to_rep11(x)]. in_range15(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range15(x) ->
  (to_rep11(of_rep11(x)) = x)))

logic dummy33 : (int,character) farray

logic value__size6 : int

logic object__size6 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,character) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,character) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,character) farray. (0 <= object__alignment6(a)))

logic user_eq21 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range16(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def24 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq22 : issueridt, issueridt -> bool

logic dummy34 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep12 : issueridt -> int

logic of_rep12 : int -> issueridt

axiom inversion_axiom12 :
  (forall x:issueridt [to_rep12(x)]. (of_rep12(to_rep12(x)) = x))

axiom range_axiom12 :
  (forall x:issueridt [to_rep12(x)]. in_range16(to_rep12(x)))

axiom coerce_axiom12 :
  (forall x:int [to_rep12(of_rep12(x))]. (in_range16(x) ->
  (to_rep12(of_rep12(x)) = x)))

type us_split_fields6 = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields6) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields6) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields6) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq27 : us_rep4, us_rep4 -> bool

axiom bool_eq_def25 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq27(a, b)].
  (((((to_rep12(((a).us_split_fields7).rec__cryptotypes__issuert__id) = to_rep12(((b).us_split_fields7).rec__cryptotypes__issuert__id)) and
  (to_rep11(((a).us_split_fields7).rec__cryptotypes__issuert__namelength) = to_rep11(((b).us_split_fields7).rec__cryptotypes__issuert__namelength))) and
  (bool_eq3(((a).us_split_fields7).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields7).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq27(a, b) = true)) and
  ((not (((to_rep12(((a).us_split_fields7).rec__cryptotypes__issuert__id) = to_rep12(((b).us_split_fields7).rec__cryptotypes__issuert__id)) and
  (to_rep11(((a).us_split_fields7).rec__cryptotypes__issuert__namelength) = to_rep11(((b).us_split_fields7).rec__cryptotypes__issuert__namelength))) and
  (bool_eq3(((a).us_split_fields7).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields7).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq27(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep4 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep4 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size7({ us_split_fields7 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment7({
  us_split_fields7 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq23 : us_rep4, us_rep4 -> bool

logic dummy35 : issueridt

logic dummy36 : namecountt

logic dummy37 : (int,character) farray

type issuert__ref = { issuert__content : us_rep4
}

function issuert__ref___projection(a: issuert__ref) : us_rep4 =
  (a).issuert__content

type serialnumbert

predicate in_range17(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def26 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq24 : serialnumbert, serialnumbert -> bool

logic dummy38 : serialnumbert

type serialnumbert__ref = { serialnumbert__content : serialnumbert
}

function serialnumbert__ref___projection(a: serialnumbert__ref) : serialnumbert =
  (a).serialnumbert__content

logic to_rep13 : serialnumbert -> int

logic of_rep13 : int -> serialnumbert

axiom inversion_axiom13 :
  (forall x:serialnumbert [to_rep13(x)]. (of_rep13(to_rep13(x)) = x))

axiom range_axiom13 :
  (forall x:serialnumbert [to_rep13(x)]. in_range17(to_rep13(x)))

axiom coerce_axiom13 :
  (forall x:int [to_rep13(of_rep13(x))]. (in_range17(x) ->
  (to_rep13(of_rep13(x)) = x)))

type us_split_fields8 = { rec__certtypes__idt__issuer : us_rep4;
rec__certtypes__idt__serialnumber : serialnumbert
}

function us_split_fields_Issuer__projection(a: us_split_fields8) : us_rep4 =
  (a).rec__certtypes__idt__issuer

function us_split_fields_SerialNumber__projection(a: us_split_fields8) : serialnumbert =
  (a).rec__certtypes__idt__serialnumber

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep5 = { us_split_fields9 : us_split_fields8
}

function us_rep___5__projection(a: us_rep5) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq29 : us_rep5, us_rep5 -> bool

axiom bool_eq_def27 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq29(a, b)].
  ((((bool_eq27(((a).us_split_fields9).rec__certtypes__idt__issuer,
  ((b).us_split_fields9).rec__certtypes__idt__issuer) = true) and
  (to_rep13(((a).us_split_fields9).rec__certtypes__idt__serialnumber) = to_rep13(((b).us_split_fields9).rec__certtypes__idt__serialnumber))) ->
  (bool_eq29(a, b) = true)) and
  ((not ((bool_eq27(((a).us_split_fields9).rec__certtypes__idt__issuer,
  ((b).us_split_fields9).rec__certtypes__idt__issuer) = true) and
  (to_rep13(((a).us_split_fields9).rec__certtypes__idt__serialnumber) = to_rep13(((b).us_split_fields9).rec__certtypes__idt__serialnumber)))) ->
  (bool_eq29(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep5 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep5 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__size8({ us_split_fields9 = { rec__certtypes__idt__issuer = {
  us_split_fields7 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__alignment8({ us_split_fields9 = {
  rec__certtypes__idt__issuer = { us_split_fields7 = {
  rec__cryptotypes__issuert__id = a; rec__cryptotypes__issuert__namelength =
  a1; rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

logic certtypes__idt__issuer__first__bit : int

logic certtypes__idt__issuer__last__bit : int

logic certtypes__idt__issuer__position : int

axiom certtypes__idt__issuer__first__bit_axiom :
  (0 <= certtypes__idt__issuer__first__bit)

axiom certtypes__idt__issuer__last__bit_axiom :
  (certtypes__idt__issuer__first__bit <  certtypes__idt__issuer__last__bit)

axiom certtypes__idt__issuer__position_axiom :
  (0 <= certtypes__idt__issuer__position)

logic certtypes__idt__serialnumber__first__bit : int

logic certtypes__idt__serialnumber__last__bit : int

logic certtypes__idt__serialnumber__position : int

axiom certtypes__idt__serialnumber__first__bit_axiom :
  (0 <= certtypes__idt__serialnumber__first__bit)

axiom certtypes__idt__serialnumber__last__bit_axiom :
  (certtypes__idt__serialnumber__first__bit <  certtypes__idt__serialnumber__last__bit)

axiom certtypes__idt__serialnumber__position_axiom :
  (0 <= certtypes__idt__serialnumber__position)

logic user_eq25 : us_rep5, us_rep5 -> bool

logic dummy39 : issueridt

logic dummy40 : namecountt

logic dummy41 : (int,character) farray

logic dummy42 : serialnumbert

type idt__ref = { idt__content : us_rep5
}

function idt__ref___projection(a: idt__ref) : us_rep5 = (a).idt__content

type privileget

predicate in_range18(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq30 : int, int -> bool

axiom bool_eq_def28 :
  (forall x:int. forall y:int [bool_eq30(x, y)]. (((x = y) -> (bool_eq30(x,
  y) = true)) and ((not (x = y)) -> (bool_eq30(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq26 : privileget, privileget -> bool

logic dummy43 : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep14 : privileget -> int

logic of_rep14 : int -> privileget

axiom inversion_axiom14 :
  (forall x:privileget [to_rep14(x)]. (of_rep14(to_rep14(x)) = x))

axiom range_axiom14 :
  (forall x:privileget [to_rep14(x)]. in_range18(to_rep14(x)))

axiom coerce_axiom14 :
  (forall x:int [to_rep14(of_rep14(x))]. (in_range18(x) ->
  (to_rep14(of_rep14(x)) = x)))

type classt

predicate in_range19(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq31 : int, int -> bool

axiom bool_eq_def29 :
  (forall x:int. forall y:int [bool_eq31(x, y)]. (((x = y) -> (bool_eq31(x,
  y) = true)) and ((not (x = y)) -> (bool_eq31(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE19 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check19 : us_image -> prop

logic attr__ATTRIBUTE_VALUE19 : us_image -> int

logic user_eq27 : classt, classt -> bool

logic dummy44 : classt

type classt__ref = { classt__content : classt
}

function classt__ref___projection(a: classt__ref) : classt =
  (a).classt__content

logic to_rep15 : classt -> int

logic of_rep15 : int -> classt

axiom inversion_axiom15 :
  (forall x:classt [to_rep15(x)]. (of_rep15(to_rep15(x)) = x))

axiom range_axiom15 :
  (forall x:classt [to_rep15(x)]. in_range19(to_rep15(x)))

axiom coerce_axiom15 :
  (forall x:int [to_rep15(of_rep15(x))]. (in_range19(x) ->
  (to_rep15(of_rep15(x)) = x)))

type us_split_fields10 = { rec__privtypes__clearancet__class : classt
}

function us_split_fields_Class__projection(a: us_split_fields10) : classt =
  (a).rec__privtypes__clearancet__class

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep6 = { us_split_fields11 : us_split_fields10
}

function us_rep___6__projection(a: us_rep6) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq32 : us_rep6, us_rep6 -> bool

axiom bool_eq_def30 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq32(a, b)].
  (((to_rep15(((a).us_split_fields11).rec__privtypes__clearancet__class) = to_rep15(((b).us_split_fields11).rec__privtypes__clearancet__class)) ->
  (bool_eq32(a, b) = true)) and
  ((not (to_rep15(((a).us_split_fields11).rec__privtypes__clearancet__class) = to_rep15(((b).us_split_fields11).rec__privtypes__clearancet__class))) ->
  (bool_eq32(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:classt. (0 <= object__size9({ us_split_fields11 = {
  rec__privtypes__clearancet__class = a } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:classt. (0 <= object__alignment9({ us_split_fields11 = {
  rec__privtypes__clearancet__class = a } })))

logic privtypes__clearancet__class__first__bit : int

logic privtypes__clearancet__class__last__bit : int

logic privtypes__clearancet__class__position : int

axiom privtypes__clearancet__class__first__bit_axiom :
  (0 <= privtypes__clearancet__class__first__bit)

axiom privtypes__clearancet__class__last__bit_axiom :
  (privtypes__clearancet__class__first__bit <  privtypes__clearancet__class__last__bit)

axiom privtypes__clearancet__class__position_axiom :
  (0 <= privtypes__clearancet__class__position)

logic user_eq28 : us_rep6, us_rep6 -> bool

logic dummy45 : classt

type clearancet__ref = { clearancet__content : us_rep6
}

function clearancet__ref___projection(a: clearancet__ref) : us_rep6 =
  (a).clearancet__content

type us_split_fields12 = { rec__cert__attr__priv__contentst__id : us_rep5;
rec__cert__attr__priv__contentst__notbefore : us_rep;
rec__cert__attr__priv__contentst__notafter : us_rep;
rec__cert__attr__priv__contentst__mechanism : algorithmt;
rec__cert__attr__priv__contentst__basecertid : us_rep5;
rec__cert__attr__priv__contentst__role : privileget;
rec__cert__attr__priv__contentst__clearance : us_rep6
}

function us_split_fields_ID__6__projection(a: us_split_fields12) : us_rep5 =
  (a).rec__cert__attr__priv__contentst__id

function us_split_fields_NotBefore__4__projection(a: us_split_fields12) : us_rep =
  (a).rec__cert__attr__priv__contentst__notbefore

function us_split_fields_NotAfter__4__projection(a: us_split_fields12) : us_rep =
  (a).rec__cert__attr__priv__contentst__notafter

function us_split_fields_Mechanism__4__projection(a: us_split_fields12) : algorithmt =
  (a).rec__cert__attr__priv__contentst__mechanism

function us_split_fields_BaseCertID__2__projection(a: us_split_fields12) : us_rep5 =
  (a).rec__cert__attr__priv__contentst__basecertid

function us_split_fields_Role__projection(a: us_split_fields12) : privileget =
  (a).rec__cert__attr__priv__contentst__role

function us_split_fields_Clearance__projection(a: us_split_fields12) : us_rep6 =
  (a).rec__cert__attr__priv__contentst__clearance

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___16__projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep7 = { us_split_fields13 : us_split_fields12
}

function us_rep___17__projection(a: us_rep7) : us_split_fields12 =
  (a).us_split_fields13

logic bool_eq33 : us_rep7, us_rep7 -> bool

axiom bool_eq_def31 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq33(a, b)].
  (((((((((bool_eq29(((a).us_split_fields13).rec__cert__attr__priv__contentst__id,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__id) = true) and
  (bool_eq11(((a).us_split_fields13).rec__cert__attr__priv__contentst__notbefore,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__notbefore) = true)) and
  (bool_eq11(((a).us_split_fields13).rec__cert__attr__priv__contentst__notafter,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__notafter) = true)) and
  (to_rep10(((a).us_split_fields13).rec__cert__attr__priv__contentst__mechanism) = to_rep10(((b).us_split_fields13).rec__cert__attr__priv__contentst__mechanism))) and
  (bool_eq29(((a).us_split_fields13).rec__cert__attr__priv__contentst__basecertid,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__basecertid) = true)) and
  (to_rep14(((a).us_split_fields13).rec__cert__attr__priv__contentst__role) = to_rep14(((b).us_split_fields13).rec__cert__attr__priv__contentst__role))) and
  (bool_eq32(((a).us_split_fields13).rec__cert__attr__priv__contentst__clearance,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__clearance) = true)) ->
  (bool_eq33(a, b) = true)) and
  ((not (((((((bool_eq29(((a).us_split_fields13).rec__cert__attr__priv__contentst__id,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__id) = true) and
  (bool_eq11(((a).us_split_fields13).rec__cert__attr__priv__contentst__notbefore,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__notbefore) = true)) and
  (bool_eq11(((a).us_split_fields13).rec__cert__attr__priv__contentst__notafter,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__notafter) = true)) and
  (to_rep10(((a).us_split_fields13).rec__cert__attr__priv__contentst__mechanism) = to_rep10(((b).us_split_fields13).rec__cert__attr__priv__contentst__mechanism))) and
  (bool_eq29(((a).us_split_fields13).rec__cert__attr__priv__contentst__basecertid,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__basecertid) = true)) and
  (to_rep14(((a).us_split_fields13).rec__cert__attr__priv__contentst__role) = to_rep14(((b).us_split_fields13).rec__cert__attr__priv__contentst__role))) and
  (bool_eq32(((a).us_split_fields13).rec__cert__attr__priv__contentst__clearance,
  ((b).us_split_fields13).rec__cert__attr__priv__contentst__clearance) = true))) ->
  (bool_eq33(a, b) = false))))

logic value__size10 : int

logic object__size10 : us_rep7 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep7 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 : (forall a:us_rep7. (0 <= object__size10(a)))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:us_rep7. (0 <= object__alignment10(a)))

logic cert__attr__priv__contentst__id__first__bit : int

logic cert__attr__priv__contentst__id__last__bit : int

logic cert__attr__priv__contentst__id__position : int

axiom cert__attr__priv__contentst__id__first__bit_axiom :
  (0 <= cert__attr__priv__contentst__id__first__bit)

axiom cert__attr__priv__contentst__id__last__bit_axiom :
  (cert__attr__priv__contentst__id__first__bit <  cert__attr__priv__contentst__id__last__bit)

axiom cert__attr__priv__contentst__id__position_axiom :
  (0 <= cert__attr__priv__contentst__id__position)

logic cert__attr__priv__contentst__notbefore__first__bit : int

logic cert__attr__priv__contentst__notbefore__last__bit : int

logic cert__attr__priv__contentst__notbefore__position : int

axiom cert__attr__priv__contentst__notbefore__first__bit_axiom :
  (0 <= cert__attr__priv__contentst__notbefore__first__bit)

axiom cert__attr__priv__contentst__notbefore__last__bit_axiom :
  (cert__attr__priv__contentst__notbefore__first__bit <  cert__attr__priv__contentst__notbefore__last__bit)

axiom cert__attr__priv__contentst__notbefore__position_axiom :
  (0 <= cert__attr__priv__contentst__notbefore__position)

logic cert__attr__priv__contentst__notafter__first__bit : int

logic cert__attr__priv__contentst__notafter__last__bit : int

logic cert__attr__priv__contentst__notafter__position : int

axiom cert__attr__priv__contentst__notafter__first__bit_axiom :
  (0 <= cert__attr__priv__contentst__notafter__first__bit)

axiom cert__attr__priv__contentst__notafter__last__bit_axiom :
  (cert__attr__priv__contentst__notafter__first__bit <  cert__attr__priv__contentst__notafter__last__bit)

axiom cert__attr__priv__contentst__notafter__position_axiom :
  (0 <= cert__attr__priv__contentst__notafter__position)

logic cert__attr__priv__contentst__mechanism__first__bit : int

logic cert__attr__priv__contentst__mechanism__last__bit : int

logic cert__attr__priv__contentst__mechanism__position : int

axiom cert__attr__priv__contentst__mechanism__first__bit_axiom :
  (0 <= cert__attr__priv__contentst__mechanism__first__bit)

axiom cert__attr__priv__contentst__mechanism__last__bit_axiom :
  (cert__attr__priv__contentst__mechanism__first__bit <  cert__attr__priv__contentst__mechanism__last__bit)

axiom cert__attr__priv__contentst__mechanism__position_axiom :
  (0 <= cert__attr__priv__contentst__mechanism__position)

logic cert__attr__priv__contentst__basecertid__first__bit : int

logic cert__attr__priv__contentst__basecertid__last__bit : int

logic cert__attr__priv__contentst__basecertid__position : int

axiom cert__attr__priv__contentst__basecertid__first__bit_axiom :
  (0 <= cert__attr__priv__contentst__basecertid__first__bit)

axiom cert__attr__priv__contentst__basecertid__last__bit_axiom :
  (cert__attr__priv__contentst__basecertid__first__bit <  cert__attr__priv__contentst__basecertid__last__bit)

axiom cert__attr__priv__contentst__basecertid__position_axiom :
  (0 <= cert__attr__priv__contentst__basecertid__position)

logic cert__attr__priv__contentst__role__first__bit : int

logic cert__attr__priv__contentst__role__last__bit : int

logic cert__attr__priv__contentst__role__position : int

axiom cert__attr__priv__contentst__role__first__bit_axiom :
  (0 <= cert__attr__priv__contentst__role__first__bit)

axiom cert__attr__priv__contentst__role__last__bit_axiom :
  (cert__attr__priv__contentst__role__first__bit <  cert__attr__priv__contentst__role__last__bit)

axiom cert__attr__priv__contentst__role__position_axiom :
  (0 <= cert__attr__priv__contentst__role__position)

logic cert__attr__priv__contentst__clearance__first__bit : int

logic cert__attr__priv__contentst__clearance__last__bit : int

logic cert__attr__priv__contentst__clearance__position : int

axiom cert__attr__priv__contentst__clearance__first__bit_axiom :
  (0 <= cert__attr__priv__contentst__clearance__first__bit)

axiom cert__attr__priv__contentst__clearance__last__bit_axiom :
  (cert__attr__priv__contentst__clearance__first__bit <  cert__attr__priv__contentst__clearance__last__bit)

axiom cert__attr__priv__contentst__clearance__position_axiom :
  (0 <= cert__attr__priv__contentst__clearance__position)

logic user_eq29 : us_rep7, us_rep7 -> bool

logic dummy46 : issueridt

logic dummy47 : namecountt

logic dummy48 : (int,character) farray

logic dummy49 : serialnumbert

logic dummy50 : yearst

logic dummy51 : monthst

logic dummy52 : dayst

logic dummy53 : millisecst

logic dummy54 : yearst

logic dummy55 : monthst

logic dummy56 : dayst

logic dummy57 : millisecst

logic dummy58 : algorithmt

logic dummy59 : issueridt

logic dummy60 : namecountt

logic dummy61 : (int,character) farray

logic dummy62 : serialnumbert

logic dummy63 : privileget

logic dummy64 : classt

type contentst__ref = { contentst__content : us_rep7
}

function contentst__ref___4__projection(a: contentst__ref) : us_rep7 =
  (a).contentst__content

type fart

predicate in_range20(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq34 : int, int -> bool

axiom bool_eq_def32 :
  (forall x:int. forall y:int [bool_eq34(x, y)]. (((x = y) -> (bool_eq34(x,
  y) = true)) and ((not (x = y)) -> (bool_eq34(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE20 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check20 : us_image -> prop

logic attr__ATTRIBUTE_VALUE20 : us_image -> int

logic user_eq30 : fart, fart -> bool

logic dummy65 : fart

type fart__ref = { fart__content : fart
}

function fart__ref___projection(a: fart__ref) : fart = (a).fart__content

logic to_rep16 : fart -> int

logic of_rep16 : int -> fart

axiom inversion_axiom16 :
  (forall x:fart [to_rep16(x)]. (of_rep16(to_rep16(x)) = x))

axiom range_axiom16 : (forall x:fart [to_rep16(x)]. in_range20(to_rep16(x)))

axiom coerce_axiom16 :
  (forall x:int [to_rep16(of_rep16(x))]. (in_range20(x) ->
  (to_rep16(of_rep16(x)) = x)))

type bytet

predicate in_range21(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq35 : int, int -> bool

axiom bool_eq_def33 :
  (forall x:int. forall y:int [bool_eq35(x, y)]. (((x = y) -> (bool_eq35(x,
  y) = true)) and ((not (x = y)) -> (bool_eq35(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE21 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check21 : us_image -> prop

logic attr__ATTRIBUTE_VALUE21 : us_image -> int

logic user_eq31 : bytet, bytet -> bool

logic dummy66 : bytet

type bytet__ref = { bytet__content : bytet
}

function bytet__ref___projection(a: bytet__ref) : bytet = (a).bytet__content

logic to_rep17 : bytet -> int

logic of_rep17 : int -> bytet

axiom inversion_axiom17 :
  (forall x:bytet [to_rep17(x)]. (of_rep17(to_rep17(x)) = x))

axiom range_axiom17 : (forall x:bytet [to_rep17(x)]. in_range21(to_rep17(x)))

axiom coerce_axiom17 :
  (forall x:int [to_rep17(of_rep17(x))]. (in_range21(x) ->
  (to_rep17(of_rep17(x)) = x)))

type map__ref5 = { map__content5 : (int,bytet) farray
}

logic slide5 : (int,bytet) farray, int, int -> (int,bytet) farray

axiom slide_eq5 :
  (forall a:(int,bytet) farray.
  (forall first:int [slide5(a, first, first)]. (slide5(a, first, first) = a)))

axiom slide_def5 :
  (forall a:(int,bytet) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide5(a, old_first, new_first)[i])]. ((slide5(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat5 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> (int,bytet) farray

axiom concat_def5 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat5(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat5(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat5(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton5 : bytet, int -> (int,bytet) farray

axiom singleton_def5 :
  (forall v:bytet.
  (forall i:int [(singleton5(v, i)[i])]. ((singleton5(v, i)[i]) = v)))

logic bool_eq36 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> bool

axiom bool_eq_def34 :
  (forall a:(int,bytet) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bytet) farray. forall b__first:int. forall b__last:int
  [bool_eq36(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_145:int. ((((a__first <= temp___idx_145) and
  (temp___idx_145 <= a__last)) and
  (to_rep17((a[temp___idx_145])) = to_rep17((b[((b__first - a__first) + temp___idx_145)])))) or
  (not ((a__first <= temp___idx_145) and (temp___idx_145 <= a__last)))))) ->
  (bool_eq36(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_145:int. (((a__first <= temp___idx_145) and
  (temp___idx_145 <= a__last)) ->
  (to_rep17((a[temp___idx_145])) = to_rep17((b[((b__first - a__first) + temp___idx_145)]))))))) ->
  (bool_eq36(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev5 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq36(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_145:int. (((a__first <= temp___idx_145) and
  (temp___idx_145 <= a__last)) ->
  (to_rep17((a[temp___idx_145])) = to_rep17((b[((b__first - a__first) + temp___idx_145)])))))))))

logic compare4 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> int

axiom compare_def_eq4 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare4(a, a_first, a_last, b, b_first, b_last)].
  ((compare4(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq36(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt4 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare4(a, a_first, a_last, b, b_first, b_last)].
  ((compare4(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq36(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep17((a[(i + 1)])) <  to_rep17((b[(j + 1)]))))))))))))

axiom compare_def_gt4 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare4(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare4(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq36(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep17((b[(i + 1)])) <  to_rep17((a[(j + 1)]))))))))))))

logic dummy67 : (int,bytet) farray

logic value__size11 : int

logic object__size11 : (int,bytet) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,bytet) farray -> int

logic value__alignment11 : int

logic object__alignment11 : (int,bytet) farray -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:(int,bytet) farray. (0 <= object__size11(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,bytet) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:(int,bytet) farray. (0 <= object__alignment11(a)))

logic user_eq32 : (int,bytet) farray, (int,bytet) farray -> bool

type templatelengtht

predicate in_range22(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq37 : int, int -> bool

axiom bool_eq_def35 :
  (forall x:int. forall y:int [bool_eq37(x, y)]. (((x = y) -> (bool_eq37(x,
  y) = true)) and ((not (x = y)) -> (bool_eq37(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE22 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check22 : us_image -> prop

logic attr__ATTRIBUTE_VALUE22 : us_image -> int

logic user_eq33 : templatelengtht, templatelengtht -> bool

logic dummy68 : templatelengtht

type templatelengtht__ref = { templatelengtht__content : templatelengtht
}

function templatelengtht__ref___projection(a: templatelengtht__ref) : templatelengtht =
  (a).templatelengtht__content

logic to_rep18 : templatelengtht -> int

logic of_rep18 : int -> templatelengtht

axiom inversion_axiom18 :
  (forall x:templatelengtht [to_rep18(x)]. (of_rep18(to_rep18(x)) = x))

axiom range_axiom18 :
  (forall x:templatelengtht [to_rep18(x)]. in_range22(to_rep18(x)))

axiom coerce_axiom18 :
  (forall x:int [to_rep18(of_rep18(x))]. (in_range22(x) ->
  (to_rep18(of_rep18(x)) = x)))

logic dummy69 : (int,character) farray

logic value__size12 : int

logic object__size12 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment12 : int

logic object__alignment12 : (int,character) farray -> int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 :
  (forall a:(int,character) farray. (0 <= object__size12(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom12 : (0 <= value__alignment12)

axiom object__alignment_axiom12 :
  (forall a:(int,character) farray. (0 <= object__alignment12(a)))

logic user_eq34 : (int,character) farray, (int,character) farray -> bool

type us_split_fields14 = { rec__iandatypes__templatet__length :
templatelengtht; rec__iandatypes__templatet__requiredmaxfar : fart;
rec__iandatypes__templatet__id : (int,character) farray;
rec__iandatypes__templatet__pad : (int,bytet) farray
}

function us_split_fields_Length__projection(a: us_split_fields14) : templatelengtht =
  (a).rec__iandatypes__templatet__length

function us_split_fields_RequiredMaxFAR__projection(a: us_split_fields14) : fart =
  (a).rec__iandatypes__templatet__requiredmaxfar

function us_split_fields_ID__2__projection(a: us_split_fields14) : (int,character) farray =
  (a).rec__iandatypes__templatet__id

function us_split_fields_Pad__projection(a: us_split_fields14) : (int,bytet) farray =
  (a).rec__iandatypes__templatet__pad

type us_split_fields__ref7 = { us_split_fields__content7 : us_split_fields14
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref7) : us_split_fields14 =
  (a).us_split_fields__content7

type us_rep8 = { us_split_fields15 : us_split_fields14
}

function us_rep___10__projection(a: us_rep8) : us_split_fields14 =
  (a).us_split_fields15

logic bool_eq38 : us_rep8, us_rep8 -> bool

axiom bool_eq_def36 :
  (forall a:us_rep8. forall b:us_rep8 [bool_eq38(a, b)].
  ((((((to_rep18(((a).us_split_fields15).rec__iandatypes__templatet__length) = to_rep18(((b).us_split_fields15).rec__iandatypes__templatet__length)) and
  (to_rep16(((a).us_split_fields15).rec__iandatypes__templatet__requiredmaxfar) = to_rep16(((b).us_split_fields15).rec__iandatypes__templatet__requiredmaxfar))) and
  (bool_eq3(((a).us_split_fields15).rec__iandatypes__templatet__id, 1, 40,
  ((b).us_split_fields15).rec__iandatypes__templatet__id, 1, 40) = true)) and
  (bool_eq36(((a).us_split_fields15).rec__iandatypes__templatet__pad, 1, 452,
  ((b).us_split_fields15).rec__iandatypes__templatet__pad, 1,
  452) = true)) -> (bool_eq38(a, b) = true)) and
  ((not ((((to_rep18(((a).us_split_fields15).rec__iandatypes__templatet__length) = to_rep18(((b).us_split_fields15).rec__iandatypes__templatet__length)) and
  (to_rep16(((a).us_split_fields15).rec__iandatypes__templatet__requiredmaxfar) = to_rep16(((b).us_split_fields15).rec__iandatypes__templatet__requiredmaxfar))) and
  (bool_eq3(((a).us_split_fields15).rec__iandatypes__templatet__id, 1, 40,
  ((b).us_split_fields15).rec__iandatypes__templatet__id, 1, 40) = true)) and
  (bool_eq36(((a).us_split_fields15).rec__iandatypes__templatet__pad, 1, 452,
  ((b).us_split_fields15).rec__iandatypes__templatet__pad, 1,
  452) = true))) -> (bool_eq38(a, b) = false))))

logic value__size13 : int

logic object__size13 : us_rep8 -> int

logic value__alignment13 : int

logic object__alignment13 : us_rep8 -> int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 :
  (forall a:templatelengtht. forall a1:fart.
  forall a2:(int,character) farray. forall a3:(int,bytet) farray.
  (0 <= object__size13({ us_split_fields15 = {
  rec__iandatypes__templatet__length = a;
  rec__iandatypes__templatet__requiredmaxfar = a1;
  rec__iandatypes__templatet__id = a2; rec__iandatypes__templatet__pad = a3 }
  })))

axiom value__alignment_axiom13 : (0 <= value__alignment13)

axiom object__alignment_axiom13 :
  (forall a:templatelengtht. forall a1:fart.
  forall a2:(int,character) farray. forall a3:(int,bytet) farray.
  (0 <= object__alignment13({ us_split_fields15 = {
  rec__iandatypes__templatet__length = a;
  rec__iandatypes__templatet__requiredmaxfar = a1;
  rec__iandatypes__templatet__id = a2; rec__iandatypes__templatet__pad = a3 }
  })))

logic iandatypes__templatet__length__first__bit : int

logic iandatypes__templatet__length__last__bit : int

logic iandatypes__templatet__length__position : int

axiom iandatypes__templatet__length__first__bit_axiom :
  (0 <= iandatypes__templatet__length__first__bit)

axiom iandatypes__templatet__length__last__bit_axiom :
  (iandatypes__templatet__length__first__bit <  iandatypes__templatet__length__last__bit)

axiom iandatypes__templatet__length__position_axiom :
  (0 <= iandatypes__templatet__length__position)

logic iandatypes__templatet__requiredmaxfar__first__bit : int

logic iandatypes__templatet__requiredmaxfar__last__bit : int

logic iandatypes__templatet__requiredmaxfar__position : int

axiom iandatypes__templatet__requiredmaxfar__first__bit_axiom :
  (0 <= iandatypes__templatet__requiredmaxfar__first__bit)

axiom iandatypes__templatet__requiredmaxfar__last__bit_axiom :
  (iandatypes__templatet__requiredmaxfar__first__bit <  iandatypes__templatet__requiredmaxfar__last__bit)

axiom iandatypes__templatet__requiredmaxfar__position_axiom :
  (0 <= iandatypes__templatet__requiredmaxfar__position)

logic iandatypes__templatet__id__first__bit : int

logic iandatypes__templatet__id__last__bit : int

logic iandatypes__templatet__id__position : int

axiom iandatypes__templatet__id__first__bit_axiom :
  (0 <= iandatypes__templatet__id__first__bit)

axiom iandatypes__templatet__id__last__bit_axiom :
  (iandatypes__templatet__id__first__bit <  iandatypes__templatet__id__last__bit)

axiom iandatypes__templatet__id__position_axiom :
  (0 <= iandatypes__templatet__id__position)

logic iandatypes__templatet__pad__first__bit : int

logic iandatypes__templatet__pad__last__bit : int

logic iandatypes__templatet__pad__position : int

axiom iandatypes__templatet__pad__first__bit_axiom :
  (0 <= iandatypes__templatet__pad__first__bit)

axiom iandatypes__templatet__pad__last__bit_axiom :
  (iandatypes__templatet__pad__first__bit <  iandatypes__templatet__pad__last__bit)

axiom iandatypes__templatet__pad__position_axiom :
  (0 <= iandatypes__templatet__pad__position)

logic user_eq35 : us_rep8, us_rep8 -> bool

logic dummy70 : templatelengtht

logic dummy71 : fart

logic dummy72 : (int,character) farray

logic dummy73 : (int,bytet) farray

type templatet__ref = { templatet__content : us_rep8
}

function templatet__ref___projection(a: templatet__ref) : us_rep8 =
  (a).templatet__content

type us_split_fields16 = { rec__cert__attr__ianda__contentst__id : us_rep5;
rec__cert__attr__ianda__contentst__notbefore : us_rep;
rec__cert__attr__ianda__contentst__notafter : us_rep;
rec__cert__attr__ianda__contentst__mechanism : algorithmt;
rec__cert__attr__ianda__contentst__basecertid : us_rep5;
rec__cert__attr__ianda__contentst__template : us_rep8
}

function us_split_fields_ID__8__projection(a: us_split_fields16) : us_rep5 =
  (a).rec__cert__attr__ianda__contentst__id

function us_split_fields_NotBefore__6__projection(a: us_split_fields16) : us_rep =
  (a).rec__cert__attr__ianda__contentst__notbefore

function us_split_fields_NotAfter__6__projection(a: us_split_fields16) : us_rep =
  (a).rec__cert__attr__ianda__contentst__notafter

function us_split_fields_Mechanism__6__projection(a: us_split_fields16) : algorithmt =
  (a).rec__cert__attr__ianda__contentst__mechanism

function us_split_fields_BaseCertID__4__projection(a: us_split_fields16) : us_rep5 =
  (a).rec__cert__attr__ianda__contentst__basecertid

function us_split_fields_Template__projection(a: us_split_fields16) : us_rep8 =
  (a).rec__cert__attr__ianda__contentst__template

type us_split_fields__ref8 = { us_split_fields__content8 : us_split_fields16
}

function us_split_fields__ref___18__projection(a: us_split_fields__ref8) : us_split_fields16 =
  (a).us_split_fields__content8

type us_rep9 = { us_split_fields17 : us_split_fields16
}

function us_rep___19__projection(a: us_rep9) : us_split_fields16 =
  (a).us_split_fields17

logic bool_eq39 : us_rep9, us_rep9 -> bool

axiom bool_eq_def37 :
  (forall a:us_rep9. forall b:us_rep9 [bool_eq39(a, b)].
  ((((((((bool_eq29(((a).us_split_fields17).rec__cert__attr__ianda__contentst__id,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__id) = true) and
  (bool_eq11(((a).us_split_fields17).rec__cert__attr__ianda__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__notbefore) = true)) and
  (bool_eq11(((a).us_split_fields17).rec__cert__attr__ianda__contentst__notafter,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__notafter) = true)) and
  (to_rep10(((a).us_split_fields17).rec__cert__attr__ianda__contentst__mechanism) = to_rep10(((b).us_split_fields17).rec__cert__attr__ianda__contentst__mechanism))) and
  (bool_eq29(((a).us_split_fields17).rec__cert__attr__ianda__contentst__basecertid,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__basecertid) = true)) and
  (bool_eq38(((a).us_split_fields17).rec__cert__attr__ianda__contentst__template,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__template) = true)) ->
  (bool_eq39(a, b) = true)) and
  ((not ((((((bool_eq29(((a).us_split_fields17).rec__cert__attr__ianda__contentst__id,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__id) = true) and
  (bool_eq11(((a).us_split_fields17).rec__cert__attr__ianda__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__notbefore) = true)) and
  (bool_eq11(((a).us_split_fields17).rec__cert__attr__ianda__contentst__notafter,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__notafter) = true)) and
  (to_rep10(((a).us_split_fields17).rec__cert__attr__ianda__contentst__mechanism) = to_rep10(((b).us_split_fields17).rec__cert__attr__ianda__contentst__mechanism))) and
  (bool_eq29(((a).us_split_fields17).rec__cert__attr__ianda__contentst__basecertid,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__basecertid) = true)) and
  (bool_eq38(((a).us_split_fields17).rec__cert__attr__ianda__contentst__template,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__template) = true))) ->
  (bool_eq39(a, b) = false))))

logic value__size14 : int

logic object__size14 : us_rep9 -> int

logic value__alignment14 : int

logic object__alignment14 : us_rep9 -> int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 : (forall a:us_rep9. (0 <= object__size14(a)))

axiom value__alignment_axiom14 : (0 <= value__alignment14)

axiom object__alignment_axiom14 :
  (forall a:us_rep9. (0 <= object__alignment14(a)))

logic cert__attr__ianda__contentst__id__first__bit : int

logic cert__attr__ianda__contentst__id__last__bit : int

logic cert__attr__ianda__contentst__id__position : int

axiom cert__attr__ianda__contentst__id__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__id__first__bit)

axiom cert__attr__ianda__contentst__id__last__bit_axiom :
  (cert__attr__ianda__contentst__id__first__bit <  cert__attr__ianda__contentst__id__last__bit)

axiom cert__attr__ianda__contentst__id__position_axiom :
  (0 <= cert__attr__ianda__contentst__id__position)

logic cert__attr__ianda__contentst__notbefore__first__bit : int

logic cert__attr__ianda__contentst__notbefore__last__bit : int

logic cert__attr__ianda__contentst__notbefore__position : int

axiom cert__attr__ianda__contentst__notbefore__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__notbefore__first__bit)

axiom cert__attr__ianda__contentst__notbefore__last__bit_axiom :
  (cert__attr__ianda__contentst__notbefore__first__bit <  cert__attr__ianda__contentst__notbefore__last__bit)

axiom cert__attr__ianda__contentst__notbefore__position_axiom :
  (0 <= cert__attr__ianda__contentst__notbefore__position)

logic cert__attr__ianda__contentst__notafter__first__bit : int

logic cert__attr__ianda__contentst__notafter__last__bit : int

logic cert__attr__ianda__contentst__notafter__position : int

axiom cert__attr__ianda__contentst__notafter__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__notafter__first__bit)

axiom cert__attr__ianda__contentst__notafter__last__bit_axiom :
  (cert__attr__ianda__contentst__notafter__first__bit <  cert__attr__ianda__contentst__notafter__last__bit)

axiom cert__attr__ianda__contentst__notafter__position_axiom :
  (0 <= cert__attr__ianda__contentst__notafter__position)

logic cert__attr__ianda__contentst__mechanism__first__bit : int

logic cert__attr__ianda__contentst__mechanism__last__bit : int

logic cert__attr__ianda__contentst__mechanism__position : int

axiom cert__attr__ianda__contentst__mechanism__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__mechanism__first__bit)

axiom cert__attr__ianda__contentst__mechanism__last__bit_axiom :
  (cert__attr__ianda__contentst__mechanism__first__bit <  cert__attr__ianda__contentst__mechanism__last__bit)

axiom cert__attr__ianda__contentst__mechanism__position_axiom :
  (0 <= cert__attr__ianda__contentst__mechanism__position)

logic cert__attr__ianda__contentst__basecertid__first__bit : int

logic cert__attr__ianda__contentst__basecertid__last__bit : int

logic cert__attr__ianda__contentst__basecertid__position : int

axiom cert__attr__ianda__contentst__basecertid__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__basecertid__first__bit)

axiom cert__attr__ianda__contentst__basecertid__last__bit_axiom :
  (cert__attr__ianda__contentst__basecertid__first__bit <  cert__attr__ianda__contentst__basecertid__last__bit)

axiom cert__attr__ianda__contentst__basecertid__position_axiom :
  (0 <= cert__attr__ianda__contentst__basecertid__position)

logic cert__attr__ianda__contentst__template__first__bit : int

logic cert__attr__ianda__contentst__template__last__bit : int

logic cert__attr__ianda__contentst__template__position : int

axiom cert__attr__ianda__contentst__template__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__template__first__bit)

axiom cert__attr__ianda__contentst__template__last__bit_axiom :
  (cert__attr__ianda__contentst__template__first__bit <  cert__attr__ianda__contentst__template__last__bit)

axiom cert__attr__ianda__contentst__template__position_axiom :
  (0 <= cert__attr__ianda__contentst__template__position)

logic user_eq36 : us_rep9, us_rep9 -> bool

logic dummy74 : issueridt

logic dummy75 : namecountt

logic dummy76 : (int,character) farray

logic dummy77 : serialnumbert

logic dummy78 : yearst

logic dummy79 : monthst

logic dummy80 : dayst

logic dummy81 : millisecst

logic dummy82 : yearst

logic dummy83 : monthst

logic dummy84 : dayst

logic dummy85 : millisecst

logic dummy86 : algorithmt

logic dummy87 : issueridt

logic dummy88 : namecountt

logic dummy89 : (int,character) farray

logic dummy90 : serialnumbert

logic dummy91 : templatelengtht

logic dummy92 : fart

logic dummy93 : (int,character) farray

logic dummy94 : (int,bytet) farray

type contentst__ref1 = { contentst__content1 : us_rep9
}

function contentst__ref___6__projection(a: contentst__ref1) : us_rep9 =
  (a).contentst__content1

logic attr__ATTRIBUTE_ADDRESS6 : int

type keyidt

predicate in_range23(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq40 : int, int -> bool

axiom bool_eq_def38 :
  (forall x:int. forall y:int [bool_eq40(x, y)]. (((x = y) -> (bool_eq40(x,
  y) = true)) and ((not (x = y)) -> (bool_eq40(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE23 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check23 : us_image -> prop

logic attr__ATTRIBUTE_VALUE23 : us_image -> int

logic user_eq37 : keyidt, keyidt -> bool

logic dummy95 : keyidt

type keyidt__ref = { keyidt__content : keyidt
}

function keyidt__ref___projection(a: keyidt__ref) : keyidt =
  (a).keyidt__content

logic to_rep19 : keyidt -> int

logic of_rep19 : int -> keyidt

axiom inversion_axiom19 :
  (forall x:keyidt [to_rep19(x)]. (of_rep19(to_rep19(x)) = x))

axiom range_axiom19 :
  (forall x:keyidt [to_rep19(x)]. in_range23(to_rep19(x)))

axiom coerce_axiom19 :
  (forall x:int [to_rep19(of_rep19(x))]. (in_range23(x) ->
  (to_rep19(of_rep19(x)) = x)))

type keylengtht

predicate in_range24(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq41 : int, int -> bool

axiom bool_eq_def39 :
  (forall x:int. forall y:int [bool_eq41(x, y)]. (((x = y) -> (bool_eq41(x,
  y) = true)) and ((not (x = y)) -> (bool_eq41(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE24 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check24 : us_image -> prop

logic attr__ATTRIBUTE_VALUE24 : us_image -> int

logic user_eq38 : keylengtht, keylengtht -> bool

logic dummy96 : keylengtht

type keylengtht__ref = { keylengtht__content : keylengtht
}

function keylengtht__ref___projection(a: keylengtht__ref) : keylengtht =
  (a).keylengtht__content

logic to_rep20 : keylengtht -> int

logic of_rep20 : int -> keylengtht

axiom inversion_axiom20 :
  (forall x:keylengtht [to_rep20(x)]. (of_rep20(to_rep20(x)) = x))

axiom range_axiom20 :
  (forall x:keylengtht [to_rep20(x)]. in_range24(to_rep20(x)))

axiom coerce_axiom20 :
  (forall x:int [to_rep20(of_rep20(x))]. (in_range24(x) ->
  (to_rep20(of_rep20(x)) = x)))

type us_split_fields18 = { rec__cryptotypes__keypartt__algorithmid :
algorithmt; rec__cryptotypes__keypartt__keyid : keyidt;
rec__cryptotypes__keypartt__keylength : keylengtht
}

function us_split_fields_AlgorithmID__projection(a: us_split_fields18) : algorithmt =
  (a).rec__cryptotypes__keypartt__algorithmid

function us_split_fields_KeyID__projection(a: us_split_fields18) : keyidt =
  (a).rec__cryptotypes__keypartt__keyid

function us_split_fields_KeyLength__projection(a: us_split_fields18) : keylengtht =
  (a).rec__cryptotypes__keypartt__keylength

type us_split_fields__ref9 = { us_split_fields__content9 : us_split_fields18
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref9) : us_split_fields18 =
  (a).us_split_fields__content9

type us_rep10 = { us_split_fields19 : us_split_fields18
}

function us_rep___2__projection(a: us_rep10) : us_split_fields18 =
  (a).us_split_fields19

logic bool_eq42 : us_rep10, us_rep10 -> bool

axiom bool_eq_def40 :
  (forall a:us_rep10. forall b:us_rep10 [bool_eq42(a, b)].
  (((((to_rep10(((a).us_split_fields19).rec__cryptotypes__keypartt__algorithmid) = to_rep10(((b).us_split_fields19).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep19(((a).us_split_fields19).rec__cryptotypes__keypartt__keyid) = to_rep19(((b).us_split_fields19).rec__cryptotypes__keypartt__keyid))) and
  (to_rep20(((a).us_split_fields19).rec__cryptotypes__keypartt__keylength) = to_rep20(((b).us_split_fields19).rec__cryptotypes__keypartt__keylength))) ->
  (bool_eq42(a, b) = true)) and
  ((not (((to_rep10(((a).us_split_fields19).rec__cryptotypes__keypartt__algorithmid) = to_rep10(((b).us_split_fields19).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep19(((a).us_split_fields19).rec__cryptotypes__keypartt__keyid) = to_rep19(((b).us_split_fields19).rec__cryptotypes__keypartt__keyid))) and
  (to_rep20(((a).us_split_fields19).rec__cryptotypes__keypartt__keylength) = to_rep20(((b).us_split_fields19).rec__cryptotypes__keypartt__keylength)))) ->
  (bool_eq42(a, b) = false))))

logic value__size15 : int

logic object__size15 : us_rep10 -> int

logic value__alignment15 : int

logic object__alignment15 : us_rep10 -> int

axiom value__size_axiom15 : (0 <= value__size15)

axiom object__size_axiom15 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__size15({ us_split_fields19 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

axiom value__alignment_axiom15 : (0 <= value__alignment15)

axiom object__alignment_axiom15 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__alignment15({ us_split_fields19 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

logic cryptotypes__keypartt__algorithmid__first__bit : int

logic cryptotypes__keypartt__algorithmid__last__bit : int

logic cryptotypes__keypartt__algorithmid__position : int

axiom cryptotypes__keypartt__algorithmid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__first__bit)

axiom cryptotypes__keypartt__algorithmid__last__bit_axiom :
  (cryptotypes__keypartt__algorithmid__first__bit <  cryptotypes__keypartt__algorithmid__last__bit)

axiom cryptotypes__keypartt__algorithmid__position_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__position)

logic cryptotypes__keypartt__keyid__first__bit : int

logic cryptotypes__keypartt__keyid__last__bit : int

logic cryptotypes__keypartt__keyid__position : int

axiom cryptotypes__keypartt__keyid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keyid__first__bit)

axiom cryptotypes__keypartt__keyid__last__bit_axiom :
  (cryptotypes__keypartt__keyid__first__bit <  cryptotypes__keypartt__keyid__last__bit)

axiom cryptotypes__keypartt__keyid__position_axiom :
  (0 <= cryptotypes__keypartt__keyid__position)

logic cryptotypes__keypartt__keylength__first__bit : int

logic cryptotypes__keypartt__keylength__last__bit : int

logic cryptotypes__keypartt__keylength__position : int

axiom cryptotypes__keypartt__keylength__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keylength__first__bit)

axiom cryptotypes__keypartt__keylength__last__bit_axiom :
  (cryptotypes__keypartt__keylength__first__bit <  cryptotypes__keypartt__keylength__last__bit)

axiom cryptotypes__keypartt__keylength__position_axiom :
  (0 <= cryptotypes__keypartt__keylength__position)

logic user_eq39 : us_rep10, us_rep10 -> bool

logic dummy97 : algorithmt

logic dummy98 : keyidt

logic dummy99 : keylengtht

type keypartt__ref = { keypartt__content : us_rep10
}

function keypartt__ref___projection(a: keypartt__ref) : us_rep10 =
  (a).keypartt__content

type us_split_fields20 = { rec__cert__id__contentst__id : us_rep5;
rec__cert__id__contentst__notbefore : us_rep;
rec__cert__id__contentst__notafter : us_rep;
rec__cert__id__contentst__mechanism : algorithmt;
rec__cert__id__contentst__subject : us_rep4;
rec__cert__id__contentst__subjectpublickey : us_rep10
}

function us_split_fields_ID__4__projection(a: us_split_fields20) : us_rep5 =
  (a).rec__cert__id__contentst__id

function us_split_fields_NotBefore__2__projection(a: us_split_fields20) : us_rep =
  (a).rec__cert__id__contentst__notbefore

function us_split_fields_NotAfter__2__projection(a: us_split_fields20) : us_rep =
  (a).rec__cert__id__contentst__notafter

function us_split_fields_Mechanism__2__projection(a: us_split_fields20) : algorithmt =
  (a).rec__cert__id__contentst__mechanism

function us_split_fields_Subject__projection(a: us_split_fields20) : us_rep4 =
  (a).rec__cert__id__contentst__subject

function us_split_fields_SubjectPublicKey__projection(a: us_split_fields20) : us_rep10 =
  (a).rec__cert__id__contentst__subjectpublickey

type us_split_fields__ref10 = { us_split_fields__content10 :
us_split_fields20
}

function us_split_fields__ref___14__projection(a: us_split_fields__ref10) : us_split_fields20 =
  (a).us_split_fields__content10

type us_rep11 = { us_split_fields21 : us_split_fields20
}

function us_rep___15__projection(a: us_rep11) : us_split_fields20 =
  (a).us_split_fields21

logic bool_eq43 : us_rep11, us_rep11 -> bool

axiom bool_eq_def41 :
  (forall a:us_rep11. forall b:us_rep11 [bool_eq43(a, b)].
  ((((((((bool_eq29(((a).us_split_fields21).rec__cert__id__contentst__id,
  ((b).us_split_fields21).rec__cert__id__contentst__id) = true) and
  (bool_eq11(((a).us_split_fields21).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields21).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq11(((a).us_split_fields21).rec__cert__id__contentst__notafter,
  ((b).us_split_fields21).rec__cert__id__contentst__notafter) = true)) and
  (to_rep10(((a).us_split_fields21).rec__cert__id__contentst__mechanism) = to_rep10(((b).us_split_fields21).rec__cert__id__contentst__mechanism))) and
  (bool_eq27(((a).us_split_fields21).rec__cert__id__contentst__subject,
  ((b).us_split_fields21).rec__cert__id__contentst__subject) = true)) and
  (bool_eq42(((a).us_split_fields21).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields21).rec__cert__id__contentst__subjectpublickey) = true)) ->
  (bool_eq43(a, b) = true)) and
  ((not ((((((bool_eq29(((a).us_split_fields21).rec__cert__id__contentst__id,
  ((b).us_split_fields21).rec__cert__id__contentst__id) = true) and
  (bool_eq11(((a).us_split_fields21).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields21).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq11(((a).us_split_fields21).rec__cert__id__contentst__notafter,
  ((b).us_split_fields21).rec__cert__id__contentst__notafter) = true)) and
  (to_rep10(((a).us_split_fields21).rec__cert__id__contentst__mechanism) = to_rep10(((b).us_split_fields21).rec__cert__id__contentst__mechanism))) and
  (bool_eq27(((a).us_split_fields21).rec__cert__id__contentst__subject,
  ((b).us_split_fields21).rec__cert__id__contentst__subject) = true)) and
  (bool_eq42(((a).us_split_fields21).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields21).rec__cert__id__contentst__subjectpublickey) = true))) ->
  (bool_eq43(a, b) = false))))

logic value__size16 : int

logic object__size16 : us_rep11 -> int

logic value__alignment16 : int

logic object__alignment16 : us_rep11 -> int

axiom value__size_axiom16 : (0 <= value__size16)

axiom object__size_axiom16 : (forall a:us_rep11. (0 <= object__size16(a)))

axiom value__alignment_axiom16 : (0 <= value__alignment16)

axiom object__alignment_axiom16 :
  (forall a:us_rep11. (0 <= object__alignment16(a)))

logic cert__id__contentst__id__first__bit : int

logic cert__id__contentst__id__last__bit : int

logic cert__id__contentst__id__position : int

axiom cert__id__contentst__id__first__bit_axiom :
  (0 <= cert__id__contentst__id__first__bit)

axiom cert__id__contentst__id__last__bit_axiom :
  (cert__id__contentst__id__first__bit <  cert__id__contentst__id__last__bit)

axiom cert__id__contentst__id__position_axiom :
  (0 <= cert__id__contentst__id__position)

logic cert__id__contentst__notbefore__first__bit : int

logic cert__id__contentst__notbefore__last__bit : int

logic cert__id__contentst__notbefore__position : int

axiom cert__id__contentst__notbefore__first__bit_axiom :
  (0 <= cert__id__contentst__notbefore__first__bit)

axiom cert__id__contentst__notbefore__last__bit_axiom :
  (cert__id__contentst__notbefore__first__bit <  cert__id__contentst__notbefore__last__bit)

axiom cert__id__contentst__notbefore__position_axiom :
  (0 <= cert__id__contentst__notbefore__position)

logic cert__id__contentst__notafter__first__bit : int

logic cert__id__contentst__notafter__last__bit : int

logic cert__id__contentst__notafter__position : int

axiom cert__id__contentst__notafter__first__bit_axiom :
  (0 <= cert__id__contentst__notafter__first__bit)

axiom cert__id__contentst__notafter__last__bit_axiom :
  (cert__id__contentst__notafter__first__bit <  cert__id__contentst__notafter__last__bit)

axiom cert__id__contentst__notafter__position_axiom :
  (0 <= cert__id__contentst__notafter__position)

logic cert__id__contentst__mechanism__first__bit : int

logic cert__id__contentst__mechanism__last__bit : int

logic cert__id__contentst__mechanism__position : int

axiom cert__id__contentst__mechanism__first__bit_axiom :
  (0 <= cert__id__contentst__mechanism__first__bit)

axiom cert__id__contentst__mechanism__last__bit_axiom :
  (cert__id__contentst__mechanism__first__bit <  cert__id__contentst__mechanism__last__bit)

axiom cert__id__contentst__mechanism__position_axiom :
  (0 <= cert__id__contentst__mechanism__position)

logic cert__id__contentst__subject__first__bit : int

logic cert__id__contentst__subject__last__bit : int

logic cert__id__contentst__subject__position : int

axiom cert__id__contentst__subject__first__bit_axiom :
  (0 <= cert__id__contentst__subject__first__bit)

axiom cert__id__contentst__subject__last__bit_axiom :
  (cert__id__contentst__subject__first__bit <  cert__id__contentst__subject__last__bit)

axiom cert__id__contentst__subject__position_axiom :
  (0 <= cert__id__contentst__subject__position)

logic cert__id__contentst__subjectpublickey__first__bit : int

logic cert__id__contentst__subjectpublickey__last__bit : int

logic cert__id__contentst__subjectpublickey__position : int

axiom cert__id__contentst__subjectpublickey__first__bit_axiom :
  (0 <= cert__id__contentst__subjectpublickey__first__bit)

axiom cert__id__contentst__subjectpublickey__last__bit_axiom :
  (cert__id__contentst__subjectpublickey__first__bit <  cert__id__contentst__subjectpublickey__last__bit)

axiom cert__id__contentst__subjectpublickey__position_axiom :
  (0 <= cert__id__contentst__subjectpublickey__position)

logic user_eq40 : us_rep11, us_rep11 -> bool

logic dummy100 : issueridt

logic dummy101 : namecountt

logic dummy102 : (int,character) farray

logic dummy103 : serialnumbert

logic dummy104 : yearst

logic dummy105 : monthst

logic dummy106 : dayst

logic dummy107 : millisecst

logic dummy108 : yearst

logic dummy109 : monthst

logic dummy110 : dayst

logic dummy111 : millisecst

logic dummy112 : algorithmt

logic dummy113 : issueridt

logic dummy114 : namecountt

logic dummy115 : (int,character) farray

logic dummy116 : algorithmt

logic dummy117 : keyidt

logic dummy118 : keylengtht

type contentst__ref2 = { contentst__content2 : us_rep11
}

function contentst__ref___2__projection(a: contentst__ref2) : us_rep11 =
  (a).contentst__content2

type certificatestatus

predicate in_range25(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq44 : int, int -> bool

axiom bool_eq_def42 :
  (forall x:int. forall y:int [bool_eq44(x, y)]. (((x = y) -> (bool_eq44(x,
  y) = true)) and ((not (x = y)) -> (bool_eq44(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE25 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check25 : us_image -> prop

logic attr__ATTRIBUTE_VALUE25 : us_image -> int

logic user_eq41 : certificatestatus, certificatestatus -> bool

logic dummy119 : certificatestatus

type certificatestatus__ref = { certificatestatus__content :
certificatestatus
}

function certificatestatus__ref___projection(a: certificatestatus__ref) : certificatestatus =
  (a).certificatestatus__content

logic to_rep21 : certificatestatus -> int

logic of_rep21 : int -> certificatestatus

axiom inversion_axiom21 :
  (forall x:certificatestatus [to_rep21(x)]. (of_rep21(to_rep21(x)) = x))

axiom range_axiom21 :
  (forall x:certificatestatus [to_rep21(x)]. in_range25(to_rep21(x)))

axiom coerce_axiom21 :
  (forall x:int [to_rep21(of_rep21(x))]. (in_range25(x) ->
  (to_rep21(of_rep21(x)) = x)))

type us_split_fields22 = { rec__usertoken__valididcertt__valid : bool;
rec__usertoken__valididcertt__idstatus : certificatestatus;
rec__usertoken__valididcertt__contents : us_rep11
}

function us_split_fields_Valid__projection(a: us_split_fields22) : bool =
  (a).rec__usertoken__valididcertt__valid

function us_split_fields_IDStatus__projection(a: us_split_fields22) : certificatestatus =
  (a).rec__usertoken__valididcertt__idstatus

function us_split_fields_Contents__projection(a: us_split_fields22) : us_rep11 =
  (a).rec__usertoken__valididcertt__contents

type us_split_fields__ref11 = { us_split_fields__content11 :
us_split_fields22
}

function us_split_fields__ref___27__projection(a: us_split_fields__ref11) : us_split_fields22 =
  (a).us_split_fields__content11

type us_rep12 = { us_split_fields23 : us_split_fields22
}

function us_rep___28__projection(a: us_rep12) : us_split_fields22 =
  (a).us_split_fields23

logic bool_eq45 : us_rep12, us_rep12 -> bool

axiom bool_eq_def43 :
  (forall a:us_rep12. forall b:us_rep12 [bool_eq45(a, b)].
  (((((((a).us_split_fields23).rec__usertoken__valididcertt__valid = ((b).us_split_fields23).rec__usertoken__valididcertt__valid) and
  (to_rep21(((a).us_split_fields23).rec__usertoken__valididcertt__idstatus) = to_rep21(((b).us_split_fields23).rec__usertoken__valididcertt__idstatus))) and
  (bool_eq43(((a).us_split_fields23).rec__usertoken__valididcertt__contents,
  ((b).us_split_fields23).rec__usertoken__valididcertt__contents) = true)) ->
  (bool_eq45(a, b) = true)) and
  ((not (((((a).us_split_fields23).rec__usertoken__valididcertt__valid = ((b).us_split_fields23).rec__usertoken__valididcertt__valid) and
  (to_rep21(((a).us_split_fields23).rec__usertoken__valididcertt__idstatus) = to_rep21(((b).us_split_fields23).rec__usertoken__valididcertt__idstatus))) and
  (bool_eq43(((a).us_split_fields23).rec__usertoken__valididcertt__contents,
  ((b).us_split_fields23).rec__usertoken__valididcertt__contents) = true))) ->
  (bool_eq45(a, b) = false))))

logic value__size17 : int

logic object__size17 : us_rep12 -> int

logic value__alignment17 : int

logic object__alignment17 : us_rep12 -> int

axiom value__size_axiom17 : (0 <= value__size17)

axiom object__size_axiom17 : (forall a:us_rep12. (0 <= object__size17(a)))

axiom value__alignment_axiom17 : (0 <= value__alignment17)

axiom object__alignment_axiom17 :
  (forall a:us_rep12. (0 <= object__alignment17(a)))

logic usertoken__valididcertt__valid__first__bit : int

logic usertoken__valididcertt__valid__last__bit : int

logic usertoken__valididcertt__valid__position : int

axiom usertoken__valididcertt__valid__first__bit_axiom :
  (0 <= usertoken__valididcertt__valid__first__bit)

axiom usertoken__valididcertt__valid__last__bit_axiom :
  (usertoken__valididcertt__valid__first__bit <  usertoken__valididcertt__valid__last__bit)

axiom usertoken__valididcertt__valid__position_axiom :
  (0 <= usertoken__valididcertt__valid__position)

logic usertoken__valididcertt__idstatus__first__bit : int

logic usertoken__valididcertt__idstatus__last__bit : int

logic usertoken__valididcertt__idstatus__position : int

axiom usertoken__valididcertt__idstatus__first__bit_axiom :
  (0 <= usertoken__valididcertt__idstatus__first__bit)

axiom usertoken__valididcertt__idstatus__last__bit_axiom :
  (usertoken__valididcertt__idstatus__first__bit <  usertoken__valididcertt__idstatus__last__bit)

axiom usertoken__valididcertt__idstatus__position_axiom :
  (0 <= usertoken__valididcertt__idstatus__position)

logic usertoken__valididcertt__contents__first__bit : int

logic usertoken__valididcertt__contents__last__bit : int

logic usertoken__valididcertt__contents__position : int

axiom usertoken__valididcertt__contents__first__bit_axiom :
  (0 <= usertoken__valididcertt__contents__first__bit)

axiom usertoken__valididcertt__contents__last__bit_axiom :
  (usertoken__valididcertt__contents__first__bit <  usertoken__valididcertt__contents__last__bit)

axiom usertoken__valididcertt__contents__position_axiom :
  (0 <= usertoken__valididcertt__contents__position)

logic user_eq42 : us_rep12, us_rep12 -> bool

logic dummy120 : bool

logic dummy121 : certificatestatus

logic dummy122 : issueridt

logic dummy123 : namecountt

logic dummy124 : (int,character) farray

logic dummy125 : serialnumbert

logic dummy126 : yearst

logic dummy127 : monthst

logic dummy128 : dayst

logic dummy129 : millisecst

logic dummy130 : yearst

logic dummy131 : monthst

logic dummy132 : dayst

logic dummy133 : millisecst

logic dummy134 : algorithmt

logic dummy135 : issueridt

logic dummy136 : namecountt

logic dummy137 : (int,character) farray

logic dummy138 : algorithmt

logic dummy139 : keyidt

logic dummy140 : keylengtht

type valididcertt__ref = { valididcertt__content : us_rep12
}

function valididcertt__ref___projection(a: valididcertt__ref) : us_rep12 =
  (a).valididcertt__content

logic attr__ATTRIBUTE_ADDRESS7 : int

type us_split_fields24 = { rec__usertoken__validiandacertt__valid : bool;
rec__usertoken__validiandacertt__contents : us_rep9
}

function us_split_fields_Valid__4__projection(a: us_split_fields24) : bool =
  (a).rec__usertoken__validiandacertt__valid

function us_split_fields_Contents__4__projection(a: us_split_fields24) : us_rep9 =
  (a).rec__usertoken__validiandacertt__contents

type us_split_fields__ref12 = { us_split_fields__content12 :
us_split_fields24
}

function us_split_fields__ref___30__projection(a: us_split_fields__ref12) : us_split_fields24 =
  (a).us_split_fields__content12

type us_rep13 = { us_split_fields25 : us_split_fields24
}

function us_rep___31__projection(a: us_rep13) : us_split_fields24 =
  (a).us_split_fields25

logic bool_eq46 : us_rep13, us_rep13 -> bool

axiom bool_eq_def44 :
  (forall a:us_rep13. forall b:us_rep13 [bool_eq46(a, b)].
  ((((((a).us_split_fields25).rec__usertoken__validiandacertt__valid = ((b).us_split_fields25).rec__usertoken__validiandacertt__valid) and
  (bool_eq39(((a).us_split_fields25).rec__usertoken__validiandacertt__contents,
  ((b).us_split_fields25).rec__usertoken__validiandacertt__contents) = true)) ->
  (bool_eq46(a, b) = true)) and
  ((not ((((a).us_split_fields25).rec__usertoken__validiandacertt__valid = ((b).us_split_fields25).rec__usertoken__validiandacertt__valid) and
  (bool_eq39(((a).us_split_fields25).rec__usertoken__validiandacertt__contents,
  ((b).us_split_fields25).rec__usertoken__validiandacertt__contents) = true))) ->
  (bool_eq46(a, b) = false))))

logic value__size18 : int

logic object__size18 : us_rep13 -> int

logic value__alignment18 : int

logic object__alignment18 : us_rep13 -> int

axiom value__size_axiom18 : (0 <= value__size18)

axiom object__size_axiom18 : (forall a:us_rep13. (0 <= object__size18(a)))

axiom value__alignment_axiom18 : (0 <= value__alignment18)

axiom object__alignment_axiom18 :
  (forall a:us_rep13. (0 <= object__alignment18(a)))

logic usertoken__validiandacertt__valid__first__bit : int

logic usertoken__validiandacertt__valid__last__bit : int

logic usertoken__validiandacertt__valid__position : int

axiom usertoken__validiandacertt__valid__first__bit_axiom :
  (0 <= usertoken__validiandacertt__valid__first__bit)

axiom usertoken__validiandacertt__valid__last__bit_axiom :
  (usertoken__validiandacertt__valid__first__bit <  usertoken__validiandacertt__valid__last__bit)

axiom usertoken__validiandacertt__valid__position_axiom :
  (0 <= usertoken__validiandacertt__valid__position)

logic usertoken__validiandacertt__contents__first__bit : int

logic usertoken__validiandacertt__contents__last__bit : int

logic usertoken__validiandacertt__contents__position : int

axiom usertoken__validiandacertt__contents__first__bit_axiom :
  (0 <= usertoken__validiandacertt__contents__first__bit)

axiom usertoken__validiandacertt__contents__last__bit_axiom :
  (usertoken__validiandacertt__contents__first__bit <  usertoken__validiandacertt__contents__last__bit)

axiom usertoken__validiandacertt__contents__position_axiom :
  (0 <= usertoken__validiandacertt__contents__position)

logic user_eq43 : us_rep13, us_rep13 -> bool

logic dummy141 : bool

logic dummy142 : issueridt

logic dummy143 : namecountt

logic dummy144 : (int,character) farray

logic dummy145 : serialnumbert

logic dummy146 : yearst

logic dummy147 : monthst

logic dummy148 : dayst

logic dummy149 : millisecst

logic dummy150 : yearst

logic dummy151 : monthst

logic dummy152 : dayst

logic dummy153 : millisecst

logic dummy154 : algorithmt

logic dummy155 : issueridt

logic dummy156 : namecountt

logic dummy157 : (int,character) farray

logic dummy158 : serialnumbert

logic dummy159 : templatelengtht

logic dummy160 : fart

logic dummy161 : (int,character) farray

logic dummy162 : (int,bytet) farray

type validiandacertt__ref = { validiandacertt__content : us_rep13
}

function validiandacertt__ref___projection(a: validiandacertt__ref) : us_rep13 =
  (a).validiandacertt__content

logic attr__ATTRIBUTE_ADDRESS8 : int

type us_split_fields26 = { rec__usertoken__validprivcertt__valid : bool;
rec__usertoken__validprivcertt__contents : us_rep7
}

function us_split_fields_Valid__2__projection(a: us_split_fields26) : bool =
  (a).rec__usertoken__validprivcertt__valid

function us_split_fields_Contents__2__projection(a: us_split_fields26) : us_rep7 =
  (a).rec__usertoken__validprivcertt__contents

type us_split_fields__ref13 = { us_split_fields__content13 :
us_split_fields26
}

function us_split_fields__ref___28__projection(a: us_split_fields__ref13) : us_split_fields26 =
  (a).us_split_fields__content13

type us_rep14 = { us_split_fields27 : us_split_fields26
}

function us_rep___29__projection(a: us_rep14) : us_split_fields26 =
  (a).us_split_fields27

logic bool_eq47 : us_rep14, us_rep14 -> bool

axiom bool_eq_def45 :
  (forall a:us_rep14. forall b:us_rep14 [bool_eq47(a, b)].
  ((((((a).us_split_fields27).rec__usertoken__validprivcertt__valid = ((b).us_split_fields27).rec__usertoken__validprivcertt__valid) and
  (bool_eq33(((a).us_split_fields27).rec__usertoken__validprivcertt__contents,
  ((b).us_split_fields27).rec__usertoken__validprivcertt__contents) = true)) ->
  (bool_eq47(a, b) = true)) and
  ((not ((((a).us_split_fields27).rec__usertoken__validprivcertt__valid = ((b).us_split_fields27).rec__usertoken__validprivcertt__valid) and
  (bool_eq33(((a).us_split_fields27).rec__usertoken__validprivcertt__contents,
  ((b).us_split_fields27).rec__usertoken__validprivcertt__contents) = true))) ->
  (bool_eq47(a, b) = false))))

logic value__size19 : int

logic object__size19 : us_rep14 -> int

logic value__alignment19 : int

logic object__alignment19 : us_rep14 -> int

axiom value__size_axiom19 : (0 <= value__size19)

axiom object__size_axiom19 : (forall a:us_rep14. (0 <= object__size19(a)))

axiom value__alignment_axiom19 : (0 <= value__alignment19)

axiom object__alignment_axiom19 :
  (forall a:us_rep14. (0 <= object__alignment19(a)))

logic usertoken__validprivcertt__valid__first__bit : int

logic usertoken__validprivcertt__valid__last__bit : int

logic usertoken__validprivcertt__valid__position : int

axiom usertoken__validprivcertt__valid__first__bit_axiom :
  (0 <= usertoken__validprivcertt__valid__first__bit)

axiom usertoken__validprivcertt__valid__last__bit_axiom :
  (usertoken__validprivcertt__valid__first__bit <  usertoken__validprivcertt__valid__last__bit)

axiom usertoken__validprivcertt__valid__position_axiom :
  (0 <= usertoken__validprivcertt__valid__position)

logic usertoken__validprivcertt__contents__first__bit : int

logic usertoken__validprivcertt__contents__last__bit : int

logic usertoken__validprivcertt__contents__position : int

axiom usertoken__validprivcertt__contents__first__bit_axiom :
  (0 <= usertoken__validprivcertt__contents__first__bit)

axiom usertoken__validprivcertt__contents__last__bit_axiom :
  (usertoken__validprivcertt__contents__first__bit <  usertoken__validprivcertt__contents__last__bit)

axiom usertoken__validprivcertt__contents__position_axiom :
  (0 <= usertoken__validprivcertt__contents__position)

logic user_eq44 : us_rep14, us_rep14 -> bool

logic dummy163 : bool

logic dummy164 : issueridt

logic dummy165 : namecountt

logic dummy166 : (int,character) farray

logic dummy167 : serialnumbert

logic dummy168 : yearst

logic dummy169 : monthst

logic dummy170 : dayst

logic dummy171 : millisecst

logic dummy172 : yearst

logic dummy173 : monthst

logic dummy174 : dayst

logic dummy175 : millisecst

logic dummy176 : algorithmt

logic dummy177 : issueridt

logic dummy178 : namecountt

logic dummy179 : (int,character) farray

logic dummy180 : serialnumbert

logic dummy181 : privileget

logic dummy182 : classt

type validprivcertt__ref = { validprivcertt__content : us_rep14
}

function validprivcertt__ref___projection(a: validprivcertt__ref) : us_rep14 =
  (a).validprivcertt__content

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c88b : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic temp___String_Literal_2569 : unit -> (int,character) farray

axiom temp___String_Literal_2569__def_axiom :
  (((((((((to_rep((temp___String_Literal_2569(void)[1])) = 84) and
  (to_rep((temp___String_Literal_2569(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_2569(void)[3])) = 107)) and
  (to_rep((temp___String_Literal_2569(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_2569(void)[5])) = 110)) and
  (to_rep((temp___String_Literal_2569(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_2569(void)[7])) = 66)) and
  (to_rep((temp___String_Literal_2569(void)[8])) = 97)) and
  (to_rep((temp___String_Literal_2569(void)[9])) = 100))

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields3 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields3 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep7(usedlogfiles3)) and
  (numberlogentries = (((to_rep7(usedlogfiles3) - 1) * 1024) + to_rep8((logfileentries[currentlogfile])))))))))

axiom nodescription__def_axiom :
  (nodescription = audittypes__nodescription__aggregate_def(32))

logic logfilestate__split_fields : logfileindext

logic logfilestate__split_fields1 : logentrycountt

logic logfilestate__split_fields2 : (int,logfileindext) farray

logic logfilestate__split_fields3 : logfileindext

logic logfilestate__split_fields4 : logfileindext

logic logfilestate__split_fields5 : logfilecountt

logic logfilestate__split_fields6 : (int,fileentrycountt) farray

logic auditalarm : int

logic tokentry : int

logic privvalid : bool

logic iandavalid : bool

logic result__ : (int,character) farray

logic result : bool

logic privvalid1 : bool

logic result1 : bool

logic iandavalid1 : bool

logic result2 : (int,character) farray

logic result__1 : (int,character) farray

axiom H : (audittypes__nodescription__aggregate_def(32) = nodescription)

axiom H1 : in_range2(tokentry)

axiom H2 : (valid_numberlogentries(to_rep5(logfilestate__split_fields),
  to_rep6(logfilestate__split_fields1), { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields2;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields3;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields4;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields5 } },
  logfilestate__split_fields6) = true)

axiom H3 : in_range3(auditalarm)

axiom H4 : (not (tokentry = 2))

axiom H5 : (result = privvalid)

axiom H6 : (privvalid1 = of_int(0))

axiom H7 : (result1 = iandavalid)

axiom H8 : (iandavalid1 = of_int(0))

axiom H9 : (result2 = result__)

axiom H10 : (result__1 = nodescription)

axiom H11 : (not (of_int(1) = true))

axiom H12 : (1 <= 150)

 (* File "usertoken.adb", line 371, characters 0-0 *)
goal WP_parameter_def : (1 <= 1)
