(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort tcount_typeB 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (tcount_typeB tcount_typeB) Bool)
(declare-const dummy tcount_typeB)
(declare-datatypes () ((tcount_typeB__ref (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB (tcount_typeB__content a))
(declare-sort count_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (count_type count_type) Bool)
(declare-const dummy1 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant ((temp___expr_176 Int) (temp___is_init_172 Bool) (temp___skip_constant_173 Bool) (temp___do_toplevel_174 Bool) (temp___do_typ_inv_175 Bool)) Bool (=> (or (= temp___is_init_172 true) (<= 0 2147483647)) (in_range2 temp___expr_176)))
(declare-sort tindex_countB 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tindex_countB tindex_countB) Bool)
(declare-const dummy2 tindex_countB)
(declare-datatypes () ((tindex_countB__ref (mk_tindex_countB__ref (tindex_countB__content tindex_countB)))))
(define-fun tindex_countB__ref___projection ((a tindex_countB__ref)) tindex_countB (tindex_countB__content a))
(declare-sort index_count 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 6)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index_count index_count) Bool)
(declare-const dummy3 index_count)
(declare-datatypes () ((index_count__ref (mk_index_count__ref (index_count__content index_count)))))
(define-fun index_count__ref___projection ((a index_count__ref)) index_count (index_count__content a))
(declare-fun to_rep (index_count) Int)
(declare-fun of_rep (Int) index_count)
(assert (forall ((x index_count)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index_count)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (index index) Bool)
(declare-const dummy4 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant1 ((temp___expr_333 Int) (temp___is_init_329 Bool) (temp___skip_constant_330 Bool) (temp___do_toplevel_331 Bool) (temp___do_typ_inv_332 Bool)) Bool (=> (or (= temp___is_init_329 true) (<= 0 5)) (in_range5 temp___expr_333)))
(declare-fun to_rep1 (index) Int)
(declare-fun of_rep1 (Int) index)
(assert (forall ((x index)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x index)) (! (in_range5 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__partition_refinement__interval__first index) (rec__partition_refinement__interval__last index) (rec__partition_refinement__interval__count index_count)))))
(define-fun us_split_fields_First__projection ((a us_split_fields)) index (rec__partition_refinement__interval__first a))
(define-fun us_split_fields_Last__projection ((a us_split_fields)) index (rec__partition_refinement__interval__last a))
(define-fun us_split_fields_Count__projection ((a us_split_fields)) index_count (rec__partition_refinement__interval__count a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___13__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 a))) (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 b)))) (= (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 a))) (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 b))))) (= (to_rep (rec__partition_refinement__interval__count (us_split_fields1 a))) (to_rep (rec__partition_refinement__interval__count (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const partition_refinement__interval__first__first__bit Int)
(declare-const partition_refinement__interval__first__last__bit Int)
(declare-const partition_refinement__interval__first__position Int)
(assert (<= 0 partition_refinement__interval__first__first__bit))
(assert (< partition_refinement__interval__first__first__bit partition_refinement__interval__first__last__bit))
(assert (<= 0 partition_refinement__interval__first__position))
(declare-const partition_refinement__interval__last__first__bit Int)
(declare-const partition_refinement__interval__last__last__bit Int)
(declare-const partition_refinement__interval__last__position Int)
(assert (<= 0 partition_refinement__interval__last__first__bit))
(assert (< partition_refinement__interval__last__first__bit partition_refinement__interval__last__last__bit))
(assert (<= 0 partition_refinement__interval__last__position))
(declare-const partition_refinement__interval__count__first__bit Int)
(declare-const partition_refinement__interval__count__last__bit Int)
(declare-const partition_refinement__interval__count__position Int)
(assert (<= 0 partition_refinement__interval__count__first__bit))
(assert (< partition_refinement__interval__count__first__bit partition_refinement__interval__count__last__bit))
(assert (<= 0 partition_refinement__interval__count__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((interval__ref (mk_interval__ref (interval__content us_rep)))))
(define-fun interval__ref___projection ((a interval__ref)) us_rep (interval__content a))
(declare-sort tpartition_indexB 0)
(define-fun in_range6 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (tpartition_indexB tpartition_indexB) Bool)
(declare-const dummy6 tpartition_indexB)
(declare-datatypes () ((tpartition_indexB__ref (mk_tpartition_indexB__ref (tpartition_indexB__content tpartition_indexB)))))
(define-fun tpartition_indexB__ref___projection ((a tpartition_indexB__ref)) tpartition_indexB (tpartition_indexB__content a))
(declare-sort partition_index 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (partition_index partition_index) Bool)
(declare-const dummy7 partition_index)
(declare-datatypes () ((partition_index__ref (mk_partition_index__ref (partition_index__content partition_index)))))
(define-fun partition_index__ref___projection ((a partition_index__ref)) partition_index (partition_index__content a))
(define-fun dynamic_invariant2 ((temp___expr_768 Int) (temp___is_init_764 Bool) (temp___skip_constant_765 Bool) (temp___do_toplevel_766 Bool) (temp___do_typ_inv_767 Bool)) Bool (=> (or (= temp___is_init_764 true) (<= 0 10000)) (in_range7 temp___expr_768)))
(declare-fun to_rep2 (partition_index) Int)
(declare-fun of_rep2 (Int) partition_index)
(assert (forall ((x partition_index)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x partition_index)) (! (in_range7 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort index_type 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (index_type index_type) Bool)
(declare-const dummy8 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___3__projection ((a index_type__ref)) index_type (index_type__content a))
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content us_rep)))))
(define-fun element_type__ref___8__projection ((a element_type__ref)) us_rep (element_type__content a))
(declare-sort capacity_range 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq9 (capacity_range capacity_range) Bool)
(declare-const dummy9 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__partition_refinement__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs)) capacity_range (rec__partition_refinement__partitions__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__partition_refinement__partitions__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type (rec__partition_refinement__partitions__vector a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___14__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___15__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const partition_refinement__partitions__vector__capacity__first__bit Int)
(declare-const partition_refinement__partitions__vector__capacity__last__bit Int)
(declare-const partition_refinement__partitions__vector__capacity__position Int)
(assert (<= 0 partition_refinement__partitions__vector__capacity__first__bit))
(assert (< partition_refinement__partitions__vector__capacity__first__bit partition_refinement__partitions__vector__capacity__last__bit))
(assert (<= 0 partition_refinement__partitions__vector__capacity__position))
(declare-fun user_eq10 (us_rep1 us_rep1) Bool)
(declare-const dummy10 us_rep1)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content a))
(declare-fun to_rep3 (capacity_range) Int)
(declare-fun of_rep3 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x capacity_range)) (! (in_range9 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(define-fun capacity ((container us_rep1)) Int (ite (= (distinct 1 0) true) (to_rep3 (rec__partition_refinement__partitions__vector__capacity (us_split_discrs1 container))) 10001))
(declare-fun capacity__function_guard (Int us_rep1) Bool)
(define-fun dynamic_invariant3 ((temp___expr_799 Int) (temp___is_init_795 Bool) (temp___skip_constant_796 Bool) (temp___do_toplevel_797 Bool) (temp___do_typ_inv_798 Bool)) Bool (=> (or (= temp___is_init_795 true) (<= 0 10001)) (in_range9 temp___expr_799)))
(declare-fun length (us_rep1) Int)
(declare-fun length__function_guard (Int us_rep1) Bool)
(assert (forall ((container us_rep1)) (! (let ((result (length container))) (and (<= result (capacity container)) (dynamic_invariant3 result true false true true))) :pattern ((length container)))))
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep)))))
(define-fun element_type__ref___9__projection ((a element_type__ref1)) us_rep (element_type__content1 a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq1 (us_rep2 us_rep2) Bool)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-fun user_eq11 (us_rep2 us_rep2) Bool)
(declare-const dummy11 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___3__projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun get (us_rep2 Int) us_rep)
(declare-fun get__function_guard (us_rep us_rep2 Int) Bool)
(declare-fun model__ (us_rep1) us_rep2)
(declare-fun model____function_guard (us_rep2 us_rep1) Bool)
(define-fun element ((container us_rep1) (index1 Int)) us_rep (get (model__ container) index1))
(declare-fun element__function_guard (us_rep us_rep1 Int) Bool)
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(define-fun last ((container us_rep2)) Int (+ (- 1) (length1 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(define-fun last_index ((container us_rep1)) Int (last (model__ container)))
(declare-fun last_index__function_guard (Int us_rep1) Bool)
(declare-fun first_index__function_guard (Int us_rep1) Bool)
(define-fun equal_except ((left us_rep2) (right us_rep2) (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((i Int)) (=> (and (<= 0 i) (<= i (last left))) (=> (not (= i position)) (= (bool_eq (get left i) (get right i)) true)))) true false)))
(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)
(define-fun olt ((left us_rep2) (right us_rep2)) Bool (and (< (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 0 n) (<= n (last left))) (= (bool_eq (get left n) (get right n)) true))) true false)))
(declare-fun olt__function_guard (Bool us_rep2 us_rep2) Bool)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const partition_refinement__partitions__vector__capacity__first__bit1 Int)
(declare-const partition_refinement__partitions__vector__capacity__last__bit1 Int)
(declare-const partition_refinement__partitions__vector__capacity__position1 Int)
(assert (<= 0 partition_refinement__partitions__vector__capacity__first__bit1))
(assert (< partition_refinement__partitions__vector__capacity__first__bit1 partition_refinement__partitions__vector__capacity__last__bit1))
(assert (<= 0 partition_refinement__partitions__vector__capacity__position1))
(declare-fun user_eq12 (us_rep1 us_rep1) Bool)
(declare-const dummy12 us_rep1)
(declare-datatypes () ((partition__ref (mk_partition__ref (partition__content us_rep1)))))
(define-fun partition__ref___projection ((a partition__ref)) us_rep1 (partition__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int partition_index))))))
(declare-fun slide ((Array Int partition_index) Int Int) (Array Int partition_index))
(assert (forall ((a (Array Int partition_index))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int partition_index))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int partition_index)) (a__first Int) (a__last Int) (b (Array Int partition_index)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep2 (select a temp___idx_156)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_156))))))) true false))
(assert (forall ((a (Array Int partition_index)) (b (Array Int partition_index))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep2 (select a temp___idx_156)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_156)))))))))))
(declare-const p__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const r50b Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const save_length Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const f_loop_entry (Array Int partition_index))
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const r54b Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const r55b Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-fun to_rep4 (tindex_countB) Int)
(declare-fun of_rep4 (Int) tindex_countB)
(assert (forall ((x tindex_countB)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x tindex_countB)) (! (in_range3 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq13 (tindex_countB tindex_countB) Bool)
(declare-const dummy13 tindex_countB)
(declare-datatypes () ((t56b__ref (mk_t56b__ref (t56b__content tindex_countB)))))
(define-fun t56b__ref___projection ((a t56b__ref)) tindex_countB (t56b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(define-fun dynamic_invariant4 ((temp___expr_326 Int) (temp___is_init_322 Bool) (temp___skip_constant_323 Bool) (temp___do_toplevel_324 Bool) (temp___do_typ_inv_325 Bool)) Bool (=> (or (= temp___is_init_322 true) (<= 0 6)) (in_range4 temp___expr_326)))
(declare-sort extended_index 0)
(define-fun in_range10 ((x Int)) Bool (and (<= (- 1) x) (<= x 10001)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq14 (extended_index extended_index) Bool)
(declare-const dummy14 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___3__projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant5 ((temp___expr_792 Int) (temp___is_init_788 Bool) (temp___skip_constant_789 Bool) (temp___do_toplevel_790 Bool) (temp___do_typ_inv_791 Bool)) Bool (=> (or (= temp___is_init_788 true) (<= (- 1) 10001)) (in_range10 temp___expr_792)))
(define-fun oeq ((left us_rep2) (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite (forall ((n Int)) (=> (and (<= 0 n) (<= n (last left))) (= (bool_eq (get left n) (get right n)) true))) true false)))
(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq11 a b) (oeq a b)) :pattern ((user_eq11 a b)))))
(define-fun default_initial_assumption ((temp___expr_841 us_rep2) (temp___skip_top_level_842 Bool)) Bool (=> (not (= temp___skip_top_level_842 true)) (= (length1 temp___expr_841) 0)))
(assert (forall ((container us_rep1)) (! (= (length1 (model__ container)) (length container)) :pattern ((model__ container)))))
(define-fun dynamic_invariant6 ((temp___expr_775 Int) (temp___is_init_771 Bool) (temp___skip_constant_772 Bool) (temp___do_toplevel_773 Bool) (temp___do_typ_inv_774 Bool)) Bool (=> (or (= temp___is_init_771 true) (<= 0 10000)) (in_range8 temp___expr_775)))
(declare-sort extended_index1 0)
(define-fun in_range11 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq15 (extended_index1 extended_index1) Bool)
(declare-const dummy15 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___4__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant7 ((temp___expr_833 Int) (temp___is_init_829 Bool) (temp___skip_constant_830 Bool) (temp___do_toplevel_831 Bool) (temp___do_typ_inv_832 Bool)) Bool (=> (or (= temp___is_init_829 true) (<= (- 1) 10000)) (in_range11 temp___expr_833)))
(assert (forall ((container us_rep2)) (! (let ((result (length1 container))) (and (<= (+ (- 1) result) 10000) (dynamic_invariant result true false true true))) :pattern ((length1 container)))))
(assert true)
(declare-const p__split_fields us_main_type)
(declare-const f (Array Int partition_index))
(declare-const p_prime_index Int)
(declare-const j Int)
(declare-const o Int)
(declare-const partition_refinement__make_new_partitions__L_1__R50b__assume Int)
(declare-const temp___1285 us_rep)
(declare-const o1 Int)
(declare-const o2 index_count)
(declare-const o3 index)
(declare-const o4 us_split_fields)
(declare-const temp___1286 us_rep)
(declare-const o5 Int)
(declare-const o6 index)
(declare-const o7 us_split_fields)
(declare-const temp___1288 us_rep)
(declare-const o8 index_count)
(declare-const o9 us_split_fields)
(declare-const temp___1290 us_rep)
(declare-const partition_refinement__make_new_partitions__B_2__save_length__assume Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const temp___1295 Int)
(declare-const temp___1293 (Array Int partition_index))
(declare-const o12 partition_index)
(declare-const o13 (Array Int partition_index))
(declare-const o14 Int)
(declare-const result int__ref)
(declare-const j1 Int)
(declare-const p__split_fields1 us_split_fields2)
(declare-const f1 (Array Int partition_index))
(declare-const p_elem__split_fields us_split_fields)
(declare-const p_prime__split_fields us_split_fields)
(declare-const p_prime_index1 Int)
(declare-const j2 Int)
(declare-const i Int)
(declare-const result1 us_split_fields__ref)
(declare-const p_elem__split_fields1 us_split_fields)
(declare-const result2 us_split_fields__ref)
(declare-const p_prime__split_fields1 us_split_fields)
(declare-const result3 us_split_fields__ref)
(declare-const p_elem__split_fields2 us_split_fields)
(declare-const result4 us_split_fields__ref)
(declare-const p_elem__split_fields3 us_split_fields)
(declare-const partition_refinement__partitions__replace_element__container__fields us_split_fields2)
(declare-const result5 us_split_fields__ref1)
(declare-const p__split_fields2 us_split_fields2)
(declare-const result6 int__ref)
(declare-const p_prime_index2 Int)
(declare-const partition_refinement__partitions__append__2__container__fields us_split_fields2)
(declare-const result7 us_split_fields__ref1)
(declare-const p__split_fields3 us_split_fields2)
(declare-const result8 int__ref)
(declare-const i1 Int)
(declare-const result9 map__ref)
(declare-const f2 (Array Int partition_index))
(declare-const f3 (Array Int partition_index))
(declare-const i2 Int)
(declare-const f4 map__ref)
(declare-const i3 int__ref)
(declare-const f5 (Array Int partition_index))
(declare-const i4 Int)
(declare-const f6 map__ref)
(declare-const i5 int__ref)
(declare-const f7 (Array Int partition_index))
(declare-const i6 Int)
(assert (and (<= (* 2 (length (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))) (capacity (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))) (and (<= (length (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) 5000) (and (forall ((j3 Int)) (=> (and (<= 0 j3) (<= j3 5)) (and (<= 0 (to_rep2 (select f j3))) (<= (to_rep2 (select f j3)) (- (length (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) 1))))) (and (forall ((j3 Int)) (=> (and (<= 0 j3) (<= j3 5)) (and (<= (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) (to_rep2 (select f j3)))))) j3) (<= j3 (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) (to_rep2 (select f j3)))))))))) (forall ((j3 Int)) (=> (and (<= 0 j3) (<= j3 (- (length (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) 1))) (forall ((k Int)) (=> (and (<= (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) j3)))) k) (<= k (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) j3)))))) (= (to_rep2 (select f k)) j3))))))))))
(assert (=> (<= 0 10000) (in_range7 p_prime_index)))
(assert (and (= o (length (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))) (and (in_range9 o) (<= o (capacity (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))))))
(assert (= partition_refinement__make_new_partitions__L_1__R50b__assume (- o 1)))
(assert (= partition_refinement__make_new_partitions__L_1__R50b__assume r50b))
(assert (in_range6 r50b))
(assert (= result (mk_int__ref j)))
(assert (= j1 0))
(assert (<= 0 j1))
(assert (<= j1 r50b))
(assert (and (=> (<= 0 10000) (in_range7 p_prime_index1)) (and (<= 0 j2) (<= j2 r50b))))
(assert (and (= temp___1285 (get (model__ (mk___rep1 p__split_discrs p__split_fields1)) j2)) (= (bool_eq temp___1285 (get (model__ (mk___rep1 p__split_discrs p__split_fields1)) j2)) true)))
(assert (= result1 (mk___split_fields__ref p_elem__split_fields)))
(assert (= p_elem__split_fields1 (us_split_fields1 temp___1285)))
(assert (<= 1 (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1))))
(assert (<= (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1)) (- (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) (to_rep1 (rec__partition_refinement__interval__first p_elem__split_fields1)))))
(assert (= (to_rep o2) 0))
(assert (and (= o1 (+ (to_rep1 (rec__partition_refinement__interval__first p_elem__split_fields1)) (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1)))) (in_range5 (+ (to_rep1 (rec__partition_refinement__interval__first p_elem__split_fields1)) (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1))))))
(assert (= (to_rep1 o3) o1))
(assert (= o4 (mk___split_fields o3 (rec__partition_refinement__interval__last p_elem__split_fields1) o2)))
(assert (= temp___1286 (mk___rep o4)))
(assert (= result2 (mk___split_fields__ref p_prime__split_fields)))
(assert (= p_prime__split_fields1 (us_split_fields1 temp___1286)))
(assert (and (= o5 (- (+ (to_rep1 (rec__partition_refinement__interval__first p_elem__split_fields1)) (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1))) 1)) (in_range5 (- (+ (to_rep1 (rec__partition_refinement__interval__first p_elem__split_fields1)) (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1))) 1))))
(assert (= (to_rep1 o6) o5))
(assert (= o7 (mk___split_fields (rec__partition_refinement__interval__first p_elem__split_fields1) o6 (rec__partition_refinement__interval__count p_elem__split_fields1))))
(assert (= temp___1288 (mk___rep o7)))
(assert (= result3 (mk___split_fields__ref p_elem__split_fields1)))
(assert (= p_elem__split_fields2 (us_split_fields1 temp___1288)))
(assert (= (to_rep o8) 0))
(assert (= o9 (mk___split_fields (rec__partition_refinement__interval__first p_elem__split_fields2) (rec__partition_refinement__interval__last p_elem__split_fields2) o8)))
(assert (= temp___1290 (mk___rep o9)))
(assert (= result4 (mk___split_fields__ref p_elem__split_fields2)))
(assert (= p_elem__split_fields3 (us_split_fields1 temp___1290)))
(assert (and (and (= (length (mk___rep1 p__split_discrs partition_refinement__partitions__replace_element__container__fields)) (length (mk___rep1 p__split_discrs p__split_fields1))) (= (bool_eq (get (model__ (mk___rep1 p__split_discrs partition_refinement__partitions__replace_element__container__fields)) j2) (mk___rep p_elem__split_fields3)) true)) (= (equal_except (model__ (mk___rep1 p__split_discrs p__split_fields1)) (model__ (mk___rep1 p__split_discrs partition_refinement__partitions__replace_element__container__fields)) j2) true)))
(assert (= result5 (mk___split_fields__ref1 p__split_fields1)))
(assert (= p__split_fields2 partition_refinement__partitions__replace_element__container__fields))
(assert (and (= partition_refinement__make_new_partitions__B_2__save_length__assume (length (mk___rep1 p__split_discrs p__split_fields2))) (and (in_range9 partition_refinement__make_new_partitions__B_2__save_length__assume) (<= partition_refinement__make_new_partitions__B_2__save_length__assume (capacity (mk___rep1 p__split_discrs p__split_fields2))))))
(assert (= partition_refinement__make_new_partitions__B_2__save_length__assume save_length))
(assert (in_range2 save_length))
(assert (and (= o10 (length (mk___rep1 p__split_discrs p__split_fields2))) (and (in_range9 o10) (<= o10 (capacity (mk___rep1 p__split_discrs p__split_fields2))))))
(assert (and (= o11 o10) (in_range7 o10)))
(assert (= result6 (mk_int__ref p_prime_index1)))
(assert (= p_prime_index2 o11))
(assert (and (and (= (length (mk___rep1 p__split_discrs partition_refinement__partitions__append__2__container__fields)) (+ (length (mk___rep1 p__split_discrs p__split_fields2)) 1)) (= (olt (model__ (mk___rep1 p__split_discrs p__split_fields2)) (model__ (mk___rep1 p__split_discrs partition_refinement__partitions__append__2__container__fields))) true)) (= (bool_eq (get (model__ (mk___rep1 p__split_discrs partition_refinement__partitions__append__2__container__fields)) (+ (last (model__ (mk___rep1 p__split_discrs p__split_fields2))) 1)) (mk___rep p_prime__split_fields1)) true)))
(assert (= result7 (mk___split_fields__ref1 p__split_fields2)))
(assert (= p__split_fields3 partition_refinement__partitions__append__2__container__fields))
(assert (= (length (mk___rep1 p__split_discrs p__split_fields3)) (+ save_length 1)))
(assert (= p_prime_index2 (- (length (mk___rep1 p__split_discrs p__split_fields3)) 1)))
(assert (= (bool_eq (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) p_prime_index2) (mk___rep p_prime__split_fields1)) true))
(assert (= f1 f_loop_entry))
(assert (= (to_rep1 (rec__partition_refinement__interval__first p_prime__split_fields1)) r54b))
(assert (in_range5 r54b))
(assert (= (to_rep1 (rec__partition_refinement__interval__last p_prime__split_fields1)) r55b))
(assert (in_range5 r55b))
(assert (= result8 (mk_int__ref i)))
(assert (= i1 r54b))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= temp___1295 i1)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= temp___1293 f1)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= (to_rep2 o12) p_prime_index2)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= o13 (store f1 i1 o12))))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= result9 (mk_map__ref f1))))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= f2 o13)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (forall ((k Int)) (=> (and (<= (to_rep1 (rec__partition_refinement__interval__first p_prime__split_fields1)) k) (<= k i2)) (= (to_rep2 (select f3 k)) p_prime_index2)))))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (forall ((k Int)) (=> (and (<= 0 k) (<= k (- (to_rep1 (rec__partition_refinement__interval__first p_prime__split_fields1)) 1))) (= (to_rep2 (select f3 k)) (to_rep2 (select f_loop_entry k)))))))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (forall ((k Int)) (=> (and (<= (+ i2 1) k) (<= k 5)) (= (to_rep2 (select f3 k)) (to_rep2 (select f_loop_entry k)))))))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (and (and (forall ((temp___1294 Int)) (=> (and (<= 0 temp___1294) (<= temp___1294 5)) (=> (< i2 temp___1294) (= (select f3 temp___1294) (select temp___1293 temp___1294))))) (=> (<= r54b r55b) (dynamic_property r54b r55b i2))) (and (<= r54b i2) (<= i2 r55b)))))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= i2 r55b)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= i3 (mk_int__ref i2))))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= f4 (mk_map__ref f3))))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= i4 i2)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= f5 f3)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= i5 i3)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= f6 f4)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= i6 i4)))
(assert (=> (and (<= r54b i1) (<= i1 r55b)) (= f7 f5)))
(assert (=> (not (and (<= r54b i1) (<= i1 r55b))) (= i5 (mk_int__ref i1))))
(assert (=> (not (and (<= r54b i1) (<= i1 r55b))) (= f6 (mk_map__ref f1))))
(assert (=> (not (and (<= r54b i1) (<= i1 r55b))) (= i6 i1)))
(assert (=> (not (and (<= r54b i1) (<= i1 r55b))) (= f7 f1)))
(assert (forall ((k Int)) (=> (and (<= (to_rep1 (rec__partition_refinement__interval__first p_prime__split_fields1)) k) (<= k (to_rep1 (rec__partition_refinement__interval__last p_prime__split_fields1)))) (= (to_rep2 (select (map__content f6) k)) (- (length (mk___rep1 p__split_discrs p__split_fields3)) 1)))))
(assert (forall ((k Int)) (=> (and (<= 0 k) (<= k (- (to_rep1 (rec__partition_refinement__interval__first p_prime__split_fields1)) 1))) (and (<= 0 (to_rep2 (select (map__content f6) k))) (<= (to_rep2 (select (map__content f6) k)) (- (length (mk___rep1 p__split_discrs p__split_fields3)) 1))))))
(assert (forall ((k Int)) (=> (and (<= (+ (to_rep1 (rec__partition_refinement__interval__last p_prime__split_fields1)) 1) k) (<= k 5)) (and (<= 0 (to_rep2 (select (map__content f6) k))) (<= (to_rep2 (select (map__content f6) k)) (- (length (mk___rep1 p__split_discrs p__split_fields3)) 1))))))
(assert (forall ((k Int)) (=> (and (<= (to_rep1 (rec__partition_refinement__interval__first p_elem__split_fields3)) k) (<= k (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields3)))) (= (bool_eq (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k))) (mk___rep p_elem__split_fields3)) true))))
(assert (forall ((k Int)) (=> (and (<= (to_rep1 (rec__partition_refinement__interval__first p_elem__split_fields3)) k) (<= k (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields3)))) (and (<= (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k)))))) k) (<= k (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k)))))))))))
(assert (forall ((k Int)) (=> (and (<= (to_rep1 (rec__partition_refinement__interval__first p_prime__split_fields1)) k) (<= k (to_rep1 (rec__partition_refinement__interval__last p_prime__split_fields1)))) (= (bool_eq (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k))) (mk___rep p_prime__split_fields1)) true))))
(assert (forall ((k Int)) (=> (and (<= (to_rep1 (rec__partition_refinement__interval__first p_prime__split_fields1)) k) (<= k (to_rep1 (rec__partition_refinement__interval__last p_prime__split_fields1)))) (and (<= (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k)))))) k) (<= k (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k)))))))))))
(assert (forall ((k Int)) (=> (and (<= 0 k) (<= k (- (to_rep1 (rec__partition_refinement__interval__first p_elem__split_fields3)) 1))) (and (<= (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k)))))) k) (<= k (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k)))))))))))
(assert (forall ((k Int)) (=> (and (<= (+ (to_rep1 (rec__partition_refinement__interval__last p_prime__split_fields1)) 1) k) (<= k 5)) (and (<= (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k)))))) k) (<= k (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) (to_rep2 (select (map__content f6) k)))))))))))
(assert (forall ((k Int)) (=> (and (<= 0 k) (<= k (- j2 1))) (forall ((l Int)) (=> (and (<= (to_rep1 (rec__partition_refinement__interval__first (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) k)))) l) (<= l (to_rep1 (rec__partition_refinement__interval__last (us_split_fields1 (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) k)))))) (= (to_rep2 (select (map__content f6) l)) k))))))
(assert (and (= o14 j2) (in_range8 j2)))
(assert (not (<= 0 o14)))
(check-sat)
(exit)
