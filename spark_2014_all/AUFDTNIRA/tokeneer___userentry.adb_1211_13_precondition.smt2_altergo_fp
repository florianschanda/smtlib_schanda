(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type statust

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : statust, statust -> bool

logic dummy : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type yearst

predicate in_range2(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : yearst, yearst -> bool

logic dummy1 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep : yearst -> int

logic of_rep : int -> yearst

axiom inversion_axiom :
  (forall x:yearst [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:yearst [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type monthst

predicate in_range3(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : monthst, monthst -> bool

logic dummy2 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep1 : monthst -> int

logic of_rep1 : int -> monthst

axiom inversion_axiom1 :
  (forall x:monthst [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:monthst [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type dayst

predicate in_range4(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : dayst, dayst -> bool

logic dummy3 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep2 : dayst -> int

logic of_rep2 : int -> dayst

axiom inversion_axiom2 :
  (forall x:dayst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:dayst [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type millisecst

predicate in_range5(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : millisecst, millisecst -> bool

logic dummy4 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep3 : millisecst -> int

logic of_rep3 : int -> millisecst

axiom inversion_axiom3 :
  (forall x:millisecst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:millisecst [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  ((((((to_rep(((a).us_split_fields1).rec__clock__timet__year) = to_rep(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep1(((a).us_split_fields1).rec__clock__timet__month) = to_rep1(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__day) = to_rep2(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep3(((b).us_split_fields1).rec__clock__timet__millisec))) ->
  (bool_eq7(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields1).rec__clock__timet__year) = to_rep(((b).us_split_fields1).rec__clock__timet__year)) and
  (to_rep1(((a).us_split_fields1).rec__clock__timet__month) = to_rep1(((b).us_split_fields1).rec__clock__timet__month))) and
  (to_rep2(((a).us_split_fields1).rec__clock__timet__day) = to_rep2(((b).us_split_fields1).rec__clock__timet__day))) and
  (to_rep3(((a).us_split_fields1).rec__clock__timet__millisec) = to_rep3(((b).us_split_fields1).rec__clock__timet__millisec)))) ->
  (bool_eq7(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment({ us_split_fields1 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : yearst

logic dummy6 : monthst

logic dummy7 : dayst

logic dummy8 : millisecst

type timet__ref = { timet__content : us_rep
}

function timet__ref___projection(a: timet__ref) : us_rep = (a).timet__content

logic attr__ATTRIBUTE_ADDRESS : int

logic thecurrenttime : us_split_fields, us_private -> us_rep

logic thecurrenttime__function_guard : us_rep, us_split_fields,
  us_private -> prop

axiom thecurrenttime__post_axiom : true

axiom thecurrenttime__def_axiom :
  (forall clock__currenttimevar__fields:yearst.
  forall clock__currenttimevar__fields1:monthst.
  forall clock__currenttimevar__fields2:dayst.
  forall clock__currenttimevar__fields3:millisecst.
  (forall clock__currenttime:us_private [thecurrenttime({
  rec__clock__timet__year = clock__currenttimevar__fields;
  rec__clock__timet__month = clock__currenttimevar__fields1;
  rec__clock__timet__day = clock__currenttimevar__fields2;
  rec__clock__timet__millisec = clock__currenttimevar__fields3 },
  clock__currenttime)]. (thecurrenttime({ rec__clock__timet__year =
  clock__currenttimevar__fields; rec__clock__timet__month =
  clock__currenttimevar__fields1; rec__clock__timet__day =
  clock__currenttimevar__fields2; rec__clock__timet__millisec =
  clock__currenttimevar__fields3 }, clock__currenttime) = {
  us_split_fields1 = { rec__clock__timet__year =
  clock__currenttimevar__fields; rec__clock__timet__month =
  clock__currenttimevar__fields1; rec__clock__timet__day =
  clock__currenttimevar__fields2; rec__clock__timet__millisec =
  clock__currenttimevar__fields3 } })))

logic greaterthanorequal : us_rep, us_rep -> bool

logic greaterthanorequal__function_guard : bool, us_rep, us_rep -> prop

logic greaterthan : us_rep, us_rep -> bool

logic greaterthan__function_guard : bool, us_rep, us_rep -> prop

axiom greaterthanorequal__post_axiom : true

axiom greaterthanorequal__def_axiom :
  (forall left:yearst. forall left1:monthst. forall left2:dayst.
  forall left3:millisecst. forall right:yearst. forall right1:monthst.
  forall right2:dayst. forall right3:millisecst [greaterthanorequal({
  us_split_fields1 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields1 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  })]. ((greaterthanorequal({ us_split_fields1 = { rec__clock__timet__year =
  left; rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields1 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true) <-> ((greaterthan({ us_split_fields1 = {
  rec__clock__timet__year = left; rec__clock__timet__month = left1;
  rec__clock__timet__day = left2; rec__clock__timet__millisec = left3 } }, {
  us_split_fields1 = { rec__clock__timet__year = right;
  rec__clock__timet__month = right1; rec__clock__timet__day = right2;
  rec__clock__timet__millisec = right3 } }) = true) or (bool_eq7({
  us_split_fields1 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields1 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true))))

type logfileindext

predicate in_range6(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : logfileindext, logfileindext -> bool

logic dummy9 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep4 : logfileindext -> int

logic of_rep4 : int -> logfileindext

axiom inversion_axiom4 :
  (forall x:logfileindext [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:logfileindext [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type logentrycountt

predicate in_range7(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : logentrycountt, logentrycountt -> bool

logic dummy10 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep5 : logentrycountt -> int

logic of_rep5 : int -> logentrycountt

axiom inversion_axiom5 :
  (forall x:logentrycountt [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:logentrycountt [to_rep5(x)]. in_range7(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range7(x) ->
  (to_rep5(of_rep5(x)) = x)))

type logfilecountt

predicate in_range8(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : logfilecountt, logfilecountt -> bool

logic dummy11 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep6 : logfilecountt -> int

logic of_rep6 : int -> logfilecountt

axiom inversion_axiom6 :
  (forall x:logfilecountt [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:logfilecountt [to_rep6(x)]. in_range8(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range8(x) ->
  (to_rep6(of_rep6(x)) = x)))

type map__ref = { map__content : (int,logfileindext) farray
}

logic slide : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq :
  (forall a:(int,logfileindext) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq11 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def10 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq11(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_172:int. ((((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) and
  (to_rep4((a[temp___idx_172])) = to_rep4((b[((b__first - a__first) + temp___idx_172)])))) or
  (not ((a__first <= temp___idx_172) and (temp___idx_172 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_172:int. (((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) ->
  (to_rep4((a[temp___idx_172])) = to_rep4((b[((b__first - a__first) + temp___idx_172)]))))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_172:int. (((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) ->
  (to_rep4((a[temp___idx_172])) = to_rep4((b[((b__first - a__first) + temp___idx_172)])))))))))

logic dummy12 : (int,logfileindext) farray

logic value__size1 : int

logic object__size1 : (int,logfileindext) farray -> int

logic value__component__size : int

logic object__component__size : (int,logfileindext) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,logfileindext) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment1(a)))

logic user_eq9 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type us_split_fields2 = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields2) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__2__projection(a: us_split_fields2) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___8__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq12 : us_rep1, us_rep1 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq12(a, b)].
  ((((((bool_eq11(((a).us_split_fields3).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep4(((a).us_split_fields3).rec__auditlog__logfilelistt__head) = to_rep4(((b).us_split_fields3).rec__auditlog__logfilelistt__head))) and
  (to_rep4(((a).us_split_fields3).rec__auditlog__logfilelistt__lasti) = to_rep4(((b).us_split_fields3).rec__auditlog__logfilelistt__lasti))) and
  (to_rep6(((a).us_split_fields3).rec__auditlog__logfilelistt__length) = to_rep6(((b).us_split_fields3).rec__auditlog__logfilelistt__length))) ->
  (bool_eq12(a, b) = true)) and
  ((not ((((bool_eq11(((a).us_split_fields3).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep4(((a).us_split_fields3).rec__auditlog__logfilelistt__head) = to_rep4(((b).us_split_fields3).rec__auditlog__logfilelistt__head))) and
  (to_rep4(((a).us_split_fields3).rec__auditlog__logfilelistt__lasti) = to_rep4(((b).us_split_fields3).rec__auditlog__logfilelistt__lasti))) and
  (to_rep6(((a).us_split_fields3).rec__auditlog__logfilelistt__length) = to_rep6(((b).us_split_fields3).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq12(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size2({
  us_split_fields3 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy13 : (int,logfileindext) farray

logic dummy14 : logfileindext

logic dummy15 : logfileindext

logic dummy16 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep1
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep1 =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range9(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : fileentrycountt, fileentrycountt -> bool

logic dummy17 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep7 : fileentrycountt -> int

logic of_rep7 : int -> fileentrycountt

axiom inversion_axiom7 :
  (forall x:fileentrycountt [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:fileentrycountt [to_rep7(x)]. in_range9(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range9(x) ->
  (to_rep7(of_rep7(x)) = x)))

type map__ref1 = { map__content1 : (int,fileentrycountt) farray
}

logic slide1 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq1 :
  (forall a:(int,fileentrycountt) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq14 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def13 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq14(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep7((a[temp___idx_173])) = to_rep7((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep7((a[temp___idx_173])) = to_rep7((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep7((a[temp___idx_173])) = to_rep7((b[((b__first - a__first) + temp___idx_173)])))))))))

logic dummy18 : (int,fileentrycountt) farray

logic value__size3 : int

logic object__size3 : (int,fileentrycountt) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,fileentrycountt) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,fileentrycountt) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment3(a)))

logic user_eq12 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields4 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep1;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields4) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields4) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields4) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___9__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq15 : us_rep2, us_rep2 -> bool

axiom bool_eq_def14 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq15(a, b)].
  ((((((to_rep4(((a).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile) = to_rep4(((b).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep5(((a).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries) = to_rep5(((b).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq12(((a).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq14(((a).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq15(a, b) = true)) and
  ((not ((((to_rep4(((a).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile) = to_rep4(((b).us_split_fields5).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep5(((a).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries) = to_rep5(((b).us_split_fields5).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq12(((a).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields5).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq14(((a).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq15(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size4({
  us_split_fields5 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment4({
  us_split_fields5 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq13 : us_rep2, us_rep2 -> bool

logic dummy19 : logfileindext

logic dummy20 : logentrycountt

logic dummy21 : (int,logfileindext) farray

logic dummy22 : logfileindext

logic dummy23 : logfileindext

logic dummy24 : logfilecountt

logic dummy25 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep2
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep2 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep1,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep1,
  (int,fileentrycountt) farray -> prop

logic temp___1239 : int -> (int,logfileindext) farray

logic temp___1243 : int -> (int,fileentrycountt) farray

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep3

logic bool_eq16 : us_rep3, us_rep3 -> bool

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (forall a:us_rep3. (0 <= object__size5(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:us_rep3. (0 <= object__alignment5(a)))

logic user_eq14 : us_rep3, us_rep3 -> bool

logic dummy26 : us_rep3

type t__ref = { t__content : us_rep3
}

function t__ref___projection(a: t__ref) : us_rep3 = (a).t__content

type map__ref2 = { map__content2 : (int,us_rep3) farray
}

logic slide2 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq2 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq17 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def15 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq17(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_174:int. ((((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) and (bool_eq16((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true)) or
  (not ((a__first <= temp___idx_174) and (temp___idx_174 <= a__last)))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq16((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true))))) -> (bool_eq17(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq17(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq16((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type filestatust

predicate in_range10(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq15 : filestatust, filestatust -> bool

logic dummy27 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep8 : filestatust -> int

logic of_rep8 : int -> filestatust

axiom inversion_axiom8 :
  (forall x:filestatust [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:filestatust [to_rep8(x)]. in_range10(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range10(x) ->
  (to_rep8(of_rep8(x)) = x)))

type map__ref3 = { map__content3 : (int,filestatust) farray
}

logic slide3 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq3 :
  (forall a:(int,filestatust) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq19 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def17 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq19(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_175:int. ((((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) and
  (to_rep8((a[temp___idx_175])) = to_rep8((b[((b__first - a__first) + temp___idx_175)])))) or
  (not ((a__first <= temp___idx_175) and (temp___idx_175 <= a__last)))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) ->
  (to_rep8((a[temp___idx_175])) = to_rep8((b[((b__first - a__first) + temp___idx_175)]))))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) ->
  (to_rep8((a[temp___idx_175])) = to_rep8((b[((b__first - a__first) + temp___idx_175)])))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type t

predicate in_range11(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq16 : t, t -> bool

logic dummy28 : t

type t__ref1 = { t__content1 : t
}

function t__ref___2__projection(a: t__ref1) : t = (a).t__content1

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic islocked : int, us_private, us_split_fields -> bool

logic islocked__function_guard : bool, int, us_private,
  us_split_fields -> prop

axiom islocked__post_axiom : true

axiom islocked__def_axiom :
  (forall latch__currentlatch:int.
  (forall latch__state:us_private.
  (forall latch__latchtimeout__fields:yearst.
  forall latch__latchtimeout__fields1:monthst.
  forall latch__latchtimeout__fields2:dayst.
  forall latch__latchtimeout__fields3:millisecst
  [islocked(latch__currentlatch, latch__state, { rec__clock__timet__year =
  latch__latchtimeout__fields; rec__clock__timet__month =
  latch__latchtimeout__fields1; rec__clock__timet__day =
  latch__latchtimeout__fields2; rec__clock__timet__millisec =
  latch__latchtimeout__fields3 })]. ((islocked(latch__currentlatch,
  latch__state, { rec__clock__timet__year = latch__latchtimeout__fields;
  rec__clock__timet__month = latch__latchtimeout__fields1;
  rec__clock__timet__day = latch__latchtimeout__fields2;
  rec__clock__timet__millisec = latch__latchtimeout__fields3 }) = true) <->
  (latch__currentlatch = 0)))))

logic alarm_timeout : us_private -> us_rep

logic alarm_timeout__function_guard : us_rep, us_private -> prop

axiom alarm_timeout__post_axiom : true

logic thecurrentdoor : us_private -> int

logic thecurrentdoor__function_guard : int, us_private -> prop

type t1

predicate in_range12(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq17 : t1, t1 -> bool

logic dummy29 : t1

type t__ref2 = { t__content2 : t1
}

function t__ref___3__projection(a: t__ref2) : t1 = (a).t__content2

axiom thecurrentdoor__post_axiom :
  (forall door__state:us_private [thecurrentdoor(door__state)].
  in_range12(thecurrentdoor(door__state)))

logic thedooralarm : us_private -> int

logic thedooralarm__function_guard : int, us_private -> prop

axiom thedooralarm__post_axiom :
  (forall door__state:us_private [thedooralarm(door__state)].
  in_range1(thedooralarm(door__state)))

type namecountt

predicate in_range13(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq18 : namecountt, namecountt -> bool

logic dummy30 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep9 : namecountt -> int

logic of_rep9 : int -> namecountt

axiom inversion_axiom9 :
  (forall x:namecountt [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:namecountt [to_rep9(x)]. in_range13(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range13(x) ->
  (to_rep9(of_rep9(x)) = x)))

type character

predicate in_range14(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq19 : character, character -> bool

logic dummy31 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep10 : character -> int

logic of_rep10 : int -> character

axiom inversion_axiom10 :
  (forall x:character [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:character [to_rep10(x)]. in_range14(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range14(x) ->
  (to_rep10(of_rep10(x)) = x)))

type map__ref4 = { map__content4 : (int,character) farray
}

logic slide4 : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq4 :
  (forall a:(int,character) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq24 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def22 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq24(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep10((a[temp___idx_91])) = to_rep10((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep10((a[temp___idx_91])) = to_rep10((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq24(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep10((a[temp___idx_91])) = to_rep10((b[((b__first - a__first) + temp___idx_91)])))))))))

logic dummy32 : (int,character) farray

logic value__size6 : int

logic object__size6 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,character) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,character) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,character) farray. (0 <= object__alignment6(a)))

logic user_eq20 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range15(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def23 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq21 : issueridt, issueridt -> bool

logic dummy33 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep11 : issueridt -> int

logic of_rep11 : int -> issueridt

axiom inversion_axiom11 :
  (forall x:issueridt [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:issueridt [to_rep11(x)]. in_range15(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range15(x) ->
  (to_rep11(of_rep11(x)) = x)))

type us_split_fields6 = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields6) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields6) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields6) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq26 : us_rep4, us_rep4 -> bool

axiom bool_eq_def24 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq26(a, b)].
  (((((to_rep11(((a).us_split_fields7).rec__cryptotypes__issuert__id) = to_rep11(((b).us_split_fields7).rec__cryptotypes__issuert__id)) and
  (to_rep9(((a).us_split_fields7).rec__cryptotypes__issuert__namelength) = to_rep9(((b).us_split_fields7).rec__cryptotypes__issuert__namelength))) and
  (bool_eq24(((a).us_split_fields7).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields7).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq26(a, b) = true)) and
  ((not (((to_rep11(((a).us_split_fields7).rec__cryptotypes__issuert__id) = to_rep11(((b).us_split_fields7).rec__cryptotypes__issuert__id)) and
  (to_rep9(((a).us_split_fields7).rec__cryptotypes__issuert__namelength) = to_rep9(((b).us_split_fields7).rec__cryptotypes__issuert__namelength))) and
  (bool_eq24(((a).us_split_fields7).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields7).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq26(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep4 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep4 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size7({ us_split_fields7 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment7({
  us_split_fields7 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq22 : us_rep4, us_rep4 -> bool

logic dummy34 : issueridt

logic dummy35 : namecountt

logic dummy36 : (int,character) farray

type issuert__ref = { issuert__content : us_rep4
}

function issuert__ref___projection(a: issuert__ref) : us_rep4 =
  (a).issuert__content

type us_split_fields8 = { rec__keystore__optionalprivatekeyt__ispresent :
bool; rec__keystore__optionalprivatekeyt__owner : us_rep4
}

function us_split_fields_IsPresent__projection(a: us_split_fields8) : bool =
  (a).rec__keystore__optionalprivatekeyt__ispresent

function us_split_fields_Owner__projection(a: us_split_fields8) : us_rep4 =
  (a).rec__keystore__optionalprivatekeyt__owner

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___15__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep5 = { us_split_fields9 : us_split_fields8
}

function us_rep___16__projection(a: us_rep5) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq27 : us_rep5, us_rep5 -> bool

axiom bool_eq_def25 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq27(a, b)].
  ((((((a).us_split_fields9).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields9).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq26(((a).us_split_fields9).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields9).rec__keystore__optionalprivatekeyt__owner) = true)) ->
  (bool_eq27(a, b) = true)) and
  ((not ((((a).us_split_fields9).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields9).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq26(((a).us_split_fields9).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields9).rec__keystore__optionalprivatekeyt__owner) = true))) ->
  (bool_eq27(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep5 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep5 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__size8({ us_split_fields9 =
  { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields7 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__alignment8({
  us_split_fields9 = { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields7 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

logic keystore__optionalprivatekeyt__ispresent__first__bit : int

logic keystore__optionalprivatekeyt__ispresent__last__bit : int

logic keystore__optionalprivatekeyt__ispresent__position : int

axiom keystore__optionalprivatekeyt__ispresent__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__first__bit)

axiom keystore__optionalprivatekeyt__ispresent__last__bit_axiom :
  (keystore__optionalprivatekeyt__ispresent__first__bit <  keystore__optionalprivatekeyt__ispresent__last__bit)

axiom keystore__optionalprivatekeyt__ispresent__position_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__position)

logic keystore__optionalprivatekeyt__owner__first__bit : int

logic keystore__optionalprivatekeyt__owner__last__bit : int

logic keystore__optionalprivatekeyt__owner__position : int

axiom keystore__optionalprivatekeyt__owner__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__first__bit)

axiom keystore__optionalprivatekeyt__owner__last__bit_axiom :
  (keystore__optionalprivatekeyt__owner__first__bit <  keystore__optionalprivatekeyt__owner__last__bit)

axiom keystore__optionalprivatekeyt__owner__position_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__position)

logic user_eq23 : us_rep5, us_rep5 -> bool

logic dummy37 : bool

logic dummy38 : issueridt

logic dummy39 : namecountt

logic dummy40 : (int,character) farray

type optionalprivatekeyt__ref = { optionalprivatekeyt__content : us_rep5
}

function optionalprivatekeyt__ref___projection(a: optionalprivatekeyt__ref) : us_rep5 =
  (a).optionalprivatekeyt__content

logic attr__ATTRIBUTE_ADDRESS7 : int

logic privatekeypresent : us_split_fields8, us_private -> bool

logic privatekeypresent__function_guard : bool, us_split_fields8,
  us_private -> prop

axiom privatekeypresent__post_axiom : true

axiom privatekeypresent__def_axiom :
  (forall keystore__thistisinfo__fields:bool.
  forall keystore__thistisinfo__fields1:issueridt.
  forall keystore__thistisinfo__fields2:namecountt.
  forall keystore__thistisinfo__fields3:(int,character) farray.
  (forall keystore__state:us_private [privatekeypresent({
  rec__keystore__optionalprivatekeyt__ispresent =
  keystore__thistisinfo__fields; rec__keystore__optionalprivatekeyt__owner =
  { us_split_fields7 = { rec__cryptotypes__issuert__id =
  keystore__thistisinfo__fields1; rec__cryptotypes__issuert__namelength =
  keystore__thistisinfo__fields2; rec__cryptotypes__issuert__name =
  keystore__thistisinfo__fields3 } } }, keystore__state)].
  ((privatekeypresent({ rec__keystore__optionalprivatekeyt__ispresent =
  keystore__thistisinfo__fields; rec__keystore__optionalprivatekeyt__owner =
  { us_split_fields7 = { rec__cryptotypes__issuert__id =
  keystore__thistisinfo__fields1; rec__cryptotypes__issuert__namelength =
  keystore__thistisinfo__fields2; rec__cryptotypes__issuert__name =
  keystore__thistisinfo__fields3 } } }, keystore__state) = true) <->
  (keystore__thistisinfo__fields = true))))

type statscount

predicate in_range16(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def26 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq24 : statscount, statscount -> bool

logic dummy41 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep12 : statscount -> int

logic of_rep12 : int -> statscount

axiom inversion_axiom12 :
  (forall x:statscount [to_rep12(x)]. (of_rep12(to_rep12(x)) = x))

axiom range_axiom12 :
  (forall x:statscount [to_rep12(x)]. in_range16(to_rep12(x)))

axiom coerce_axiom12 :
  (forall x:int [to_rep12(of_rep12(x))]. (in_range16(x) ->
  (to_rep12(of_rep12(x)) = x)))

type us_split_fields10 = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields10) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields10) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields10) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields10) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___16__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep6 = { us_split_fields11 : us_split_fields10
}

function us_rep___17__projection(a: us_rep6) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq29 : us_rep6, us_rep6 -> bool

axiom bool_eq_def27 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq29(a, b)].
  ((((((to_rep12(((a).us_split_fields11).rec__stats__t__successentry) = to_rep12(((b).us_split_fields11).rec__stats__t__successentry)) and
  (to_rep12(((a).us_split_fields11).rec__stats__t__failentry) = to_rep12(((b).us_split_fields11).rec__stats__t__failentry))) and
  (to_rep12(((a).us_split_fields11).rec__stats__t__successbio) = to_rep12(((b).us_split_fields11).rec__stats__t__successbio))) and
  (to_rep12(((a).us_split_fields11).rec__stats__t__failbio) = to_rep12(((b).us_split_fields11).rec__stats__t__failbio))) ->
  (bool_eq29(a, b) = true)) and
  ((not ((((to_rep12(((a).us_split_fields11).rec__stats__t__successentry) = to_rep12(((b).us_split_fields11).rec__stats__t__successentry)) and
  (to_rep12(((a).us_split_fields11).rec__stats__t__failentry) = to_rep12(((b).us_split_fields11).rec__stats__t__failentry))) and
  (to_rep12(((a).us_split_fields11).rec__stats__t__successbio) = to_rep12(((b).us_split_fields11).rec__stats__t__successbio))) and
  (to_rep12(((a).us_split_fields11).rec__stats__t__failbio) = to_rep12(((b).us_split_fields11).rec__stats__t__failbio)))) ->
  (bool_eq29(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size9({ us_split_fields11 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment9({ us_split_fields11 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq25 : us_rep6, us_rep6 -> bool

logic dummy42 : statscount

logic dummy43 : statscount

logic dummy44 : statscount

logic dummy45 : statscount

type t__ref3 = { t__content3 : us_rep6
}

function t__ref___4__projection(a: t__ref3) : us_rep6 = (a).t__content3

logic attr__ATTRIBUTE_ADDRESS8 : int

logic currentactivitypossible : int, us_private -> bool

logic currentactivitypossible__function_guard : bool, int, us_private -> prop

logic inprogress : int -> bool

logic inprogress__function_guard : bool, int -> prop

type statust1

predicate in_range17(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq30 : int, int -> bool

axiom bool_eq_def28 :
  (forall x:int. forall y:int [bool_eq30(x, y)]. (((x = y) -> (bool_eq30(x,
  y) = true)) and ((not (x = y)) -> (bool_eq30(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq26 : statust1, statust1 -> bool

logic dummy46 : statust1

type statust__ref1 = { statust__content1 : statust1
}

function statust__ref___2__projection(a: statust__ref1) : statust1 =
  (a).statust__content1

logic userhasdeparted : int, us_private -> bool

logic userhasdeparted__function_guard : bool, int, us_private -> prop

axiom currentactivitypossible__post_axiom : true

axiom currentactivitypossible__def_axiom :
  (forall userentry__status:int.
  (forall usertoken__state:us_private
  [currentactivitypossible(userentry__status, usertoken__state)].
  ((currentactivitypossible(userentry__status, usertoken__state) = true) <->
  ((inprogress(userentry__status) = true) or
  (userhasdeparted(userentry__status, usertoken__state) = true)))))

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

type activestatust

predicate in_range18(x: int) = ((1 <= x) and (x <= 7))

logic bool_eq31 : int, int -> bool

axiom bool_eq_def29 :
  (forall x:int. forall y:int [bool_eq31(x, y)]. (((x = y) -> (bool_eq31(x,
  y) = true)) and ((not (x = y)) -> (bool_eq31(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq27 : activestatust, activestatust -> bool

logic dummy47 : activestatust

type activestatust__ref = { activestatust__content : activestatust
}

function activestatust__ref___projection(a: activestatust__ref) : activestatust =
  (a).activestatust__content

logic attr__ATTRIBUTE_ADDRESS13 : int

logic ispresent : us_private -> bool

logic ispresent__function_guard : bool, us_private -> prop

axiom userhasdeparted__post_axiom : true

axiom userhasdeparted__def_axiom :
  (forall userentry__status:int.
  (forall usertoken__state:us_private [userhasdeparted(userentry__status,
  usertoken__state)]. ((userhasdeparted(userentry__status,
  usertoken__state) = true) <-> ((0 <  userentry__status) and
  (not (ispresent(usertoken__state) = true))))))

axiom inprogress__post_axiom : true

axiom inprogress__def_axiom :
  (forall userentry__status:int [inprogress(userentry__status)].
  ((inprogress(userentry__status) = true) <-> ((0 <  userentry__status) and
  (userentry__status <  7))))

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields3 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields3 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep6(usedlogfiles3)) and
  (numberlogentries = (((to_rep6(usedlogfiles3) - 1) * 1024) + to_rep7((logfileentries[currentlogfile])))))))))

axiom def_axiom :
  (forall temp___1245:int. (in_range9(temp___1245) ->
  (forall temp___1246:int.
  (to_rep7((temp___1243(temp___1245)[temp___1246])) = temp___1245))))

axiom greaterthan__post_axiom : true

axiom greaterthan__def_axiom :
  (forall left:yearst. forall left1:monthst. forall left2:dayst.
  forall left3:millisecst. forall right:yearst. forall right1:monthst.
  forall right2:dayst. forall right3:millisecst [greaterthan({
  us_split_fields1 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields1 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  })]. ((greaterthan({ us_split_fields1 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields1 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true) <-> ((((to_rep(right) <  to_rep(left)) or
  ((to_rep(left) = to_rep(right)) and
  (to_rep1(right1) <  to_rep1(left1)))) or
  (((to_rep(left) = to_rep(right)) and
  (to_rep1(left1) = to_rep1(right1))) and
  (to_rep2(right2) <  to_rep2(left2)))) or
  ((((to_rep(left) = to_rep(right)) and
  (to_rep1(left1) = to_rep1(right1))) and
  (to_rep2(left2) = to_rep2(right2))) and
  (to_rep3(right3) <  to_rep3(left3))))))

axiom ispresent__post_axiom : true

axiom def_axiom1 :
  (forall temp___1241:int. (in_range6(temp___1241) ->
  (forall temp___1242:int.
  (to_rep4((temp___1239(temp___1241)[temp___1242])) = temp___1241))))

 (* File "userentry.adb", line 1000, characters 0-0 *)
goal WP_parameter_def :
  (forall currenttimevar__split_fields:yearst.
  forall currenttimevar__split_fields1:monthst.
  forall currenttimevar__split_fields2:dayst.
  forall currenttimevar__split_fields3:millisecst.
  forall logfilestate__split_fields:logfileindext.
  forall logfilestate__split_fields1:logentrycountt.
  forall logfilestate__split_fields2:(int,logfileindext) farray.
  forall logfilestate__split_fields3:logfileindext.
  forall logfilestate__split_fields4:logfileindext.
  forall logfilestate__split_fields5:logfilecountt.
  forall logfilestate__split_fields6:(int,fileentrycountt) farray.
  forall auditalarm:int. forall currentlatch:int.
  forall latchtimeout__split_fields:yearst.
  forall latchtimeout__split_fields1:monthst.
  forall latchtimeout__split_fields2:dayst.
  forall latchtimeout__split_fields3:millisecst.
  forall thistisinfo__split_fields:bool.
  forall thistisinfo__split_fields1:issueridt.
  forall thistisinfo__split_fields2:namecountt.
  forall thistisinfo__split_fields3:(int,character) farray.
  forall status:int. forall localstatus:int. forall currenttime:us_private.
  forall state:us_private. forall state1:us_private.
  forall state2:us_private. forall state3:us_private. forall o:int.
  forall result:int. forall localstatus1:int. (in_range17(status) ->
  ((valid_numberlogentries(to_rep4(logfilestate__split_fields),
  to_rep5(logfilestate__split_fields1), { us_split_fields3 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields2;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields3;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields4;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields5 } },
  logfilestate__split_fields6) = true) -> (in_range1(auditalarm) ->
  (in_range11(currentlatch) -> ((((currentactivitypossible(status,
  state3) = true) and (privatekeypresent({
  rec__keystore__optionalprivatekeyt__ispresent = thistisinfo__split_fields;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields7 = {
  rec__cryptotypes__issuert__id = thistisinfo__split_fields1;
  rec__cryptotypes__issuert__namelength = thistisinfo__split_fields2;
  rec__cryptotypes__issuert__name = thistisinfo__split_fields3 } } },
  state2) = true)) and ((((islocked(currentlatch, state, {
  rec__clock__timet__year = latchtimeout__split_fields;
  rec__clock__timet__month = latchtimeout__split_fields1;
  rec__clock__timet__day = latchtimeout__split_fields2;
  rec__clock__timet__millisec = latchtimeout__split_fields3 }) = true) and
  (thecurrentdoor(state1) = 0)) and (greaterthanorequal(thecurrenttime({
  rec__clock__timet__year = currenttimevar__split_fields;
  rec__clock__timet__month = currenttimevar__split_fields1;
  rec__clock__timet__day = currenttimevar__split_fields2;
  rec__clock__timet__millisec = currenttimevar__split_fields3 },
  currenttime), alarm_timeout(state1)) = true)) <->
  (thedooralarm(state1) = 0))) -> (((1 <= 7) -> in_range18(localstatus)) ->
  ((((o = status) and in_range18(status)) and ((result = localstatus) and
  (localstatus1 = o))) -> ((not (localstatus1 = 1)) ->
  ((not (localstatus1 = 2)) -> ((not (localstatus1 = 3)) ->
  ((not (localstatus1 = 4)) -> ((not (localstatus1 = 5)) ->
  ((localstatus1 = 6) -> (status = 6)))))))))))))))
