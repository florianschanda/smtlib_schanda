(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic concat_singleton_left : character, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_singleton_left_def :
  (forall a:character.
  (forall b:(int,character) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  (((concat_singleton_left(a, a_first, b, b_first, b_last)[a_first]) = a) and
  (forall i:int [(concat_singleton_left(a, a_first, b, b_first, b_last)[i])].
  ((a_first <  i) -> ((concat_singleton_left(a, a_first, b, b_first,
  b_last)[i]) = (b[((i - a_first) + (b_first - 1))]))))))))

logic concat_singleton_right : (int,character) farray, int, int,
  character -> (int,character) farray

axiom concat_singleton_right_def :
  (forall a:(int,character) farray.
  (forall b:character.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)]. (((concat_singleton_right(a, a_first, a_last,
  b)[(a_last + 1)]) = b) and
  (forall i:int [(concat_singleton_right(a, a_first, a_last, b)[i])| (a[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat_singleton_right(a, a_first,
  a_last, b)[i]) = (a[i]))))))))

logic concat_singletons : character, int, character -> (int,character) farray

axiom concat_singletons_def :
  (forall a:character. forall b:character.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  (((concat_singletons(a, a_first, b)[a_first]) = a) and
  ((concat_singletons(a, a_first, b)[(a_first + 1)]) = b))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

type index

predicate in_range3(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : index, index -> bool

logic dummy5 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a:(int,integer) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq7 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))))))

logic all_elements_in : (int,integer) farray, int -> bool

logic all_elements_in__function_guard : bool, (int,integer) farray,
  int -> prop

logic intermediate_form : (int,integer) farray, (int,integer) farray -> bool

logic intermediate_form__function_guard : bool, (int,integer) farray,
  (int,integer) farray -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic main__a__aggregate_def : int, int, int, int, int, int, int,
  int -> (int,integer) farray

logic temp___String_Literal_618 : unit -> (int,character) farray

axiom temp___String_Literal_618__def_axiom :
  (((((to_rep((temp___String_Literal_618(void)[1])) = 65) and
  (to_rep((temp___String_Literal_618(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_618(void)[3])) = 61)) and
  (to_rep((temp___String_Literal_618(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_618(void)[5])) = 40))

logic temp___String_Literal_621 : unit -> (int,character) farray

axiom temp___String_Literal_621__def_axiom :
  ((to_rep((temp___String_Literal_621(void)[1])) = 32) and
  (to_rep((temp___String_Literal_621(void)[2])) = 41))

logic temp___String_Literal_622 : unit -> (int,character) farray

axiom temp___String_Literal_622__def_axiom : true

logic temp___String_Literal_623 : unit -> (int,character) farray

axiom temp___String_Literal_623__def_axiom :
  (((to_rep((temp___String_Literal_623(void)[1])) = 76) and
  (to_rep((temp___String_Literal_623(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_623(void)[3])) = 61))

logic temp___String_Literal_626 : unit -> (int,character) farray

axiom temp___String_Literal_626__def_axiom :
  (((((to_rep((temp___String_Literal_626(void)[1])) = 65) and
  (to_rep((temp___String_Literal_626(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_626(void)[3])) = 61)) and
  (to_rep((temp___String_Literal_626(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_626(void)[5])) = 40))

logic temp___String_Literal_629 : unit -> (int,character) farray

axiom temp___String_Literal_629__def_axiom :
  ((to_rep((temp___String_Literal_629(void)[1])) = 32) and
  (to_rep((temp___String_Literal_629(void)[2])) = 41))

logic temp___String_Literal_630 : unit -> (int,character) farray

axiom temp___String_Literal_630__def_axiom : true

logic temp___String_Literal_631 : unit -> (int,character) farray

axiom temp___String_Literal_631__def_axiom :
  (((((to_rep((temp___String_Literal_631(void)[1])) = 65) and
  (to_rep((temp___String_Literal_631(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_631(void)[3])) = 61)) and
  (to_rep((temp___String_Literal_631(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_631(void)[5])) = 40))

logic temp___String_Literal_634 : unit -> (int,character) farray

axiom temp___String_Literal_634__def_axiom :
  ((to_rep((temp___String_Literal_634(void)[1])) = 32) and
  (to_rep((temp___String_Literal_634(void)[2])) = 41))

logic temp___String_Literal_635 : unit -> (int,character) farray

axiom temp___String_Literal_635__def_axiom : true

axiom def_axiom :
  (forall temp___609:int. forall temp___610:int. forall temp___611:int.
  forall temp___612:int. forall temp___613:int. forall temp___614:int.
  forall temp___615:int. forall temp___616:int.
  ((((((((in_range(temp___609) and in_range(temp___610)) and
  in_range(temp___611)) and in_range(temp___612)) and
  in_range(temp___613)) and in_range(temp___614)) and
  in_range(temp___615)) and in_range(temp___616)) ->
  ((((((((to_rep1((main__a__aggregate_def(temp___609, temp___610, temp___611,
  temp___612, temp___613, temp___614, temp___615,
  temp___616)[0])) = temp___609) and
  (to_rep1((main__a__aggregate_def(temp___609, temp___610, temp___611,
  temp___612, temp___613, temp___614, temp___615,
  temp___616)[1])) = temp___610)) and
  (to_rep1((main__a__aggregate_def(temp___609, temp___610, temp___611,
  temp___612, temp___613, temp___614, temp___615,
  temp___616)[2])) = temp___611)) and
  (to_rep1((main__a__aggregate_def(temp___609, temp___610, temp___611,
  temp___612, temp___613, temp___614, temp___615,
  temp___616)[3])) = temp___612)) and
  (to_rep1((main__a__aggregate_def(temp___609, temp___610, temp___611,
  temp___612, temp___613, temp___614, temp___615,
  temp___616)[4])) = temp___613)) and
  (to_rep1((main__a__aggregate_def(temp___609, temp___610, temp___611,
  temp___612, temp___613, temp___614, temp___615,
  temp___616)[5])) = temp___614)) and
  (to_rep1((main__a__aggregate_def(temp___609, temp___610, temp___611,
  temp___612, temp___613, temp___614, temp___615,
  temp___616)[6])) = temp___615)) and
  (to_rep1((main__a__aggregate_def(temp___609, temp___610, temp___611,
  temp___612, temp___613, temp___614, temp___615,
  temp___616)[7])) = temp___616))))

axiom all_elements_in__post_axiom : true

axiom all_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)]. ((all_elements_in(a,
  max) = true) <->
  (forall k:int. (((0 <= k) and (k <= 7)) -> (((-max) <= to_rep1((a[k]))) and
  (to_rep1((a[k])) <= max)))))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

axiom intermediate_form__post_axiom : true

axiom intermediate_form__def_axiom :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. (((intermediate_form(a, b) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> (((mod((k + 1), 8) = 0) ->
  (to_rep1((a[k])) = (((((((to_rep1((b[0])) + to_rep1((b[1]))) + to_rep1((b[2]))) + to_rep1((b[3]))) + to_rep1((b[4]))) + to_rep1((b[5]))) + to_rep1((b[6]))) + to_rep1((b[7]))))) and
  ((not (mod((k + 1), 8) = 0)) -> (((mod((k + 1), 4) = 0) ->
  (to_rep1((a[k])) = (((to_rep1((b[k])) + to_rep1((b[(k - 1)]))) + to_rep1((b[(k - 2)]))) + to_rep1((b[(k - 3)]))))) and
  ((not (mod((k + 1), 4) = 0)) -> (((mod((k + 1), 2) = 0) ->
  (to_rep1((a[k])) = (to_rep1((b[k])) + to_rep1((b[(k - 1)]))))) and
  ((not (mod((k + 1), 2) = 0)) -> (to_rep1((a[k])) = to_rep1((b[k])))))))))))) and
  ((forall k:int. (((0 <= k) and (k <= 7)) -> (((mod((k + 1), 8) = 0) and
   (to_rep1((a[k])) = (((((((to_rep1((b[0])) + to_rep1((b[1]))) + to_rep1((b[2]))) + to_rep1((b[3]))) + to_rep1((b[4]))) + to_rep1((b[5]))) + to_rep1((b[6]))) + to_rep1((b[7]))))) or
   ((not (mod((k + 1), 8) = 0)) and (((mod((k + 1), 4) = 0) and
   (to_rep1((a[k])) = (((to_rep1((b[k])) + to_rep1((b[(k - 1)]))) + to_rep1((b[(k - 2)]))) + to_rep1((b[(k - 3)]))))) or
   ((not (mod((k + 1), 4) = 0)) and (((mod((k + 1), 2) = 0) and
   (to_rep1((a[k])) = (to_rep1((b[k])) + to_rep1((b[(k - 1)]))))) or
   ((not (mod((k + 1), 2) = 0)) and
   (to_rep1((a[k])) = to_rep1((b[k]))))))))))) ->
  (intermediate_form(a, b) = true))))

 (* File "main.adb", line 16, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,integer) farray. forall space:int.
  forall copy:(int,integer) farray. forall j:int. forall j1:int.
  forall o:int. forall o1:int. forall o2:int. forall o3:int. forall o4:int.
  forall o5:int. forall o6:(int,character) farray. forall o7:t.
  forall result:(int,integer) farray. forall a1:(int,integer) farray.
  forall result1:(int,integer) farray. forall copy1:(int,integer) farray.
  forall result2:int. forall j2:int. forall result3:int. forall j3:int.
  forall result4:int. forall j4:int. forall result5:int. forall j5:int.
  forall result6:int. forall j6:int. forall result7:int. forall j7:int.
  forall result8:int. forall j8:int. forall result9:int. forall j9:int.
  forall a2:(int,integer) farray. forall space1:int. forall result10:int.
  forall j10:int. forall result11:int. forall j11:int. forall result12:int.
  forall j12:int. forall result13:int. forall j13:int. forall result14:int.
  forall j14:int. forall result15:int. forall j15:int. forall result16:int.
  forall j16:int. forall result17:int. forall j17:int. (((result = a) and
  (a1 = main__a__aggregate_def(3, 1, 7, 0, 4, 1, 6, 3))) ->
  (((1 <= 2147483647) -> in_range1(space)) -> (((result1 = copy) and
  (copy1 = a1)) -> ((((result2 = j) and (j2 = 0)) and (((result3 = j2) and
  (j3 = 1)) and (((result4 = j3) and (j4 = 2)) and (((result5 = j4) and
  (j5 = 3)) and (((result6 = j5) and (j6 = 4)) and (((result7 = j6) and
  (j7 = 5)) and (((result8 = j7) and (j8 = 6)) and ((result9 = j8) and
  (j9 = 7))))))))) -> ((((all_elements_in(a2, 8000000) = true) and
  ((space1 = 8) and (intermediate_form(a2, a1) = true))) and
  in_range1(space1)) ->
  (((((((((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE3(space1))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE3(space1))).rt))) and
  (o = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE3(space1))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE3(space1))).rt))) + 1))) or
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE3(space1))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE3(space1))).rt)))) and
  (o = 0))) and ((((1 <= 3) and (o1 = ((3 - 1) + 1))) or ((not (1 <= 3)) and
  (o1 = 0))) and (o2 = (o1 + o)))) and (o3 = (1 + o2))) and
  (o4 = (o3 - 1))) and ((o5 = o4) and in_range1(o4))) and
  ((o6 = concat(temp___String_Literal_623(void), 1, 3,
  (to_string(attr__ATTRIBUTE_IMAGE3(space1))).elts,
  to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE3(space1))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE3(space1))).rt)))) and
  (o7 = mk(1, o5)))) -> ((((result10 = j1) and (j10 = 0)) and
  (((result11 = j10) and (j11 = 1)) and (((result12 = j11) and (j12 = 2)) and
  (((result13 = j12) and (j13 = 3)) and (((result14 = j13) and (j14 = 4)) and
  (((result15 = j14) and (j15 = 5)) and (((result16 = j15) and (j16 = 6)) and
  ((result17 = j16) and (j17 = 7))))))))) -> (all_elements_in(copy1,
  1000000) = true)))))))))
