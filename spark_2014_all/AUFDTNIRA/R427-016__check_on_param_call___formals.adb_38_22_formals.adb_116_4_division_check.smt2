(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun dynamic_invariant ((temp___expr_218 (Array Int natural)) (temp___is_init_214 Bool) (temp___skip_constant_215 Bool) (temp___do_toplevel_216 Bool) (temp___do_typ_inv_217 Bool)) Bool (=> (= temp___do_toplevel_216 true) (=> (= temp___is_init_214 true) (not (= (to_rep (select temp___expr_218 3)) 0)))))
(define-fun dynamic_predicate ((temp___225 (Array Int natural))) Bool (not (= (to_rep (select temp___225 3)) 0)))
(define-fun dynamic_invariant1 ((temp___expr_243 (Array Int natural)) (temp___is_init_239 Bool) (temp___skip_constant_240 Bool) (temp___do_toplevel_241 Bool) (temp___do_typ_inv_242 Bool)) Bool (=> (= temp___do_toplevel_241 true) (=> (= temp___is_init_239 true) (not (= (to_rep (select temp___expr_243 3)) 0)))))
(define-fun dynamic_predicate1 ((temp___250 (Array Int natural))) Bool (not (= (to_rep (select temp___250 3)) 0)))
(declare-sort constr_int 0)
(declare-fun constr_intqtint (constr_int) Int)
(assert (forall ((i constr_int)) (and (<= (- 10) (constr_intqtint i)) (<= (constr_intqtint i) 10))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 10) x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (constr_int constr_int) Bool)
(declare-const dummy1 constr_int)
(declare-datatypes () ((constr_int__ref (mk_constr_int__ref (constr_int__content constr_int)))))
(define-fun constr_int__ref___projection ((a constr_int__ref)) constr_int (constr_int__content a))
(define-fun dynamic_invariant2 ((temp___expr_233 Int) (temp___is_init_229 Bool) (temp___skip_constant_230 Bool) (temp___do_toplevel_231 Bool) (temp___do_typ_inv_232 Bool)) Bool (and (=> (or (= temp___is_init_229 true) (<= (- 10) 10)) (in_range1 temp___expr_233)) (=> (= temp___do_toplevel_231 true) (=> (= temp___is_init_229 true) (or (and (<= (- 10) temp___expr_233) (<= temp___expr_233 (- 1))) (and (<= 1 temp___expr_233) (<= temp___expr_233 10)))))))
(define-fun dynamic_predicate2 ((temp___237 Int)) Bool (or (and (<= (- 10) temp___237) (<= temp___237 (- 1))) (and (<= 1 temp___237) (<= temp___237 10))))
(declare-sort constr_int_2 0)
(declare-fun constr_int_2qtint (constr_int_2) Int)
(assert (forall ((i constr_int_2)) (and (<= (- 10) (constr_int_2qtint i)) (<= (constr_int_2qtint i) 10))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 10) x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (constr_int_2 constr_int_2) Bool)
(declare-const dummy2 constr_int_2)
(declare-datatypes () ((constr_int_2__ref (mk_constr_int_2__ref (constr_int_2__content constr_int_2)))))
(define-fun constr_int_2__ref___projection ((a constr_int_2__ref)) constr_int_2 (constr_int_2__content a))
(define-fun dynamic_invariant3 ((temp___expr_258 Int) (temp___is_init_254 Bool) (temp___skip_constant_255 Bool) (temp___do_toplevel_256 Bool) (temp___do_typ_inv_257 Bool)) Bool (and (=> (or (= temp___is_init_254 true) (<= (- 10) 10)) (in_range2 temp___expr_258)) (=> (= temp___do_toplevel_256 true) (=> (= temp___is_init_254 true) (or (and (<= (- 10) temp___expr_258) (<= temp___expr_258 (- 1))) (and (<= 1 temp___expr_258) (<= temp___expr_258 10)))))))
(define-fun dynamic_predicate3 ((temp___262 Int)) Bool (or (and (<= (- 10) temp___262) (<= temp___262 (- 1))) (and (<= 1 temp___262) (<= temp___262 10))))
(declare-sort my_int 0)
(declare-fun my_intqtint (my_int) Int)
(assert (forall ((i my_int)) (and (<= (- 10) (my_intqtint i)) (<= (my_intqtint i) 10))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 10) x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (my_int my_int) Bool)
(declare-const dummy3 my_int)
(declare-datatypes () ((my_int__ref (mk_my_int__ref (my_int__content my_int)))))
(define-fun my_int__ref___projection ((a my_int__ref)) my_int (my_int__content a))
(define-fun dynamic_invariant4 ((temp___expr_211 Int) (temp___is_init_207 Bool) (temp___skip_constant_208 Bool) (temp___do_toplevel_209 Bool) (temp___do_typ_inv_210 Bool)) Bool (=> (or (= temp___is_init_207 true) (<= (- 10) 10)) (in_range3 temp___expr_211)))
(define-fun to_rep1 ((x my_int)) Int (my_intqtint x))
(declare-fun of_rep1 (Int) my_int)
(assert (forall ((x my_int)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x my_int)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_rep2 ((x constr_int)) Int (constr_intqtint x))
(declare-fun of_rep2 (Int) constr_int)
(assert (forall ((x constr_int)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x constr_int)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun to_rep3 ((x constr_int_2)) Int (constr_int_2qtint x))
(declare-fun of_rep3 (Int) constr_int_2)
(assert (forall ((x constr_int_2)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x constr_int_2)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun formals__x__aggregate_def (Int) (Array Int natural))
(declare-fun formals__y__aggregate_def (Int) (Array Int natural))
(declare-fun formals__u__aggregate_def (Int) (Array Int natural))
(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 1))
(assert (forall ((temp___271 Int)) (=> (dynamic_invariant5 temp___271 true true true true) (forall ((temp___272 Int)) (= (select (formals__x__aggregate_def temp___271) temp___272) rliteral)))))
(assert (forall ((temp___274 Int)) (=> (dynamic_invariant5 temp___274 true true true true) (forall ((temp___275 Int)) (= (select (formals__y__aggregate_def temp___274) temp___275) rliteral)))))
(assert (forall ((temp___278 Int)) (=> (dynamic_invariant5 temp___278 true true true true) (forall ((temp___279 Int)) (= (select (formals__u__aggregate_def temp___278) temp___279) rliteral)))))
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 0))
(declare-const x (Array Int natural))
(declare-const y (Array Int natural))
(declare-const u (Array Int natural))
(declare-const z Int)
(declare-const w Int)
(declare-const v Int)
(declare-const o (Array Int natural))
(declare-const o1 (Array Int natural))
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const formals__p__3__a Int)
(declare-const o5 Int)
(declare-const formals__p__3__a1 Int)
(declare-const o6 Int)
(declare-const formals__p__3__a2 Int)
(declare-const o7 my_int)
(declare-const o8 Int)
(declare-const temp___291 constr_int)
(declare-const o9 constr_int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const formals__p__4__a Int)
(declare-const o12 my_int)
(declare-const o13 Int)
(declare-const temp___296 constr_int_2)
(declare-const o14 constr_int_2)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 (Array Int natural))
(declare-const formals__p__a (Array Int natural))
(declare-const o18 (Array Int natural))
(declare-const formals__p__a1 (Array Int natural))
(declare-const o19 (Array Int natural))
(declare-const formals__p__a2 (Array Int natural))
(declare-const o20 (Array Int natural))
(declare-const temp___307 (Array Int natural))
(declare-const o21 (Array Int natural))
(declare-const temp___309 (Array Int natural))
(declare-const o22 natural)
(declare-const o23 Int)
(declare-const temp___311 (Array Int natural))
(declare-const o24 natural)
(declare-const o25 Int)
(declare-const result (Array Int natural))
(declare-const x1 (Array Int natural))
(declare-const result1 (Array Int natural))
(declare-const y1 (Array Int natural))
(declare-const result2 (Array Int natural))
(declare-const u1 (Array Int natural))
(declare-const result3 Int)
(declare-const z1 Int)
(declare-const result4 Int)
(declare-const w1 Int)
(declare-const result5 Int)
(declare-const v1 Int)
(declare-const formals__p__3__a3 Int)
(declare-const result6 Int)
(declare-const z2 Int)
(declare-const z3 Int)
(declare-const z4 Int)
(declare-const formals__p__3__a4 Int)
(declare-const result7 Int)
(declare-const z5 Int)
(declare-const z6 Int)
(declare-const formals__p__3__a5 Int)
(declare-const result8 int__ref)
(declare-const z7 Int)
(declare-const w2 Int)
(declare-const formals__p2__2__a Int)
(declare-const result9 int__ref)
(declare-const w3 Int)
(declare-const z8 Int)
(declare-const formals__p__4__a1 Int)
(declare-const result10 int__ref)
(declare-const z9 Int)
(declare-const v2 Int)
(declare-const formals__p2__2__a1 Int)
(declare-const result11 int__ref)
(declare-const v3 Int)
(declare-const w4 Int)
(declare-const formals__p2__2__a2 Int)
(declare-const result12 int__ref)
(declare-const w5 Int)
(declare-const formals__p__a3 (Array Int natural))
(declare-const result13 map__ref)
(declare-const x2 (Array Int natural))
(declare-const x3 (Array Int natural))
(declare-const formals__p__a4 (Array Int natural))
(declare-const result14 map__ref)
(declare-const x4 (Array Int natural))
(declare-const x5 (Array Int natural))
(declare-const formals__p__a5 (Array Int natural))
(declare-const result15 map__ref)
(declare-const x6 (Array Int natural))
(declare-const y2 (Array Int natural))
(declare-const formals__p2__a (Array Int natural))
(declare-const result16 map__ref)
(declare-const y3 (Array Int natural))
(declare-const y4 (Array Int natural))
(declare-const formals__p2__a1 (Array Int natural))
(declare-const result17 map__ref)
(declare-const y5 (Array Int natural))
(declare-const y6 (Array Int natural))
(declare-const result18 map__ref)
(declare-const y7 (Array Int natural))
(declare-const x7 (Array Int natural))
(assert (= result x))
(assert (= x1 (formals__x__aggregate_def 1)))
(assert (dynamic_predicate (formals__y__aggregate_def 1)))
(assert (= o (formals__y__aggregate_def 1)))
(assert (= result1 y))
(assert (= y1 o))
(assert (not (= (to_rep (select y1 3)) 0)))
(assert (dynamic_predicate1 (formals__u__aggregate_def 1)))
(assert (= o1 (formals__u__aggregate_def 1)))
(assert (= result2 u))
(assert (= u1 o1))
(assert (not (= (to_rep (select u1 3)) 0)))
(assert (= result3 z))
(assert (= z1 1))
(assert (in_range3 z1))
(assert (or (and (<= (- 10) 1) (<= 1 (- 1))) (and (<= 1 1) (<= 1 10))))
(assert (= o2 1))
(assert (= result4 w))
(assert (= w1 o2))
(assert (dynamic_invariant2 w1 true false true true))
(assert (or (and (<= (- 10) 1) (<= 1 (- 1))) (and (<= 1 1) (<= 1 10))))
(assert (= o3 1))
(assert (= result5 v))
(assert (= v1 o3))
(assert (dynamic_invariant3 v1 true false true true))
(assert (or (and (<= (- 10) z1) (<= z1 (- 1))) (and (<= 1 z1) (<= z1 10))))
(assert (= o4 z1))
(assert (= o4 formals__p__3__a))
(assert (dynamic_invariant2 formals__p__3__a3 true true true true))
(assert (= result6 z1))
(assert (= z2 formals__p__3__a3))
(assert (in_range3 z3))
(assert (in_range3 z4))
(assert (or (and (<= (- 10) z4) (<= z4 (- 1))) (and (<= 1 z4) (<= z4 10))))
(assert (= o5 z4))
(assert (= o5 formals__p__3__a1))
(assert (dynamic_invariant2 formals__p__3__a4 true true true true))
(assert (= result7 z4))
(assert (= z5 formals__p__3__a4))
(assert (in_range3 z6))
(assert (or (and (<= (- 10) z6) (<= z6 (- 1))) (and (<= 1 z6) (<= z6 10))))
(assert (= o6 z6))
(assert (= o6 formals__p__3__a2))
(assert (dynamic_invariant2 formals__p__3__a5 true true true true))
(assert (= (to_rep1 o7) formals__p__3__a5))
(assert (= o8 (to_rep1 o7)))
(assert (= result8 (mk_int__ref z6)))
(assert (= z7 o8))
(assert (dynamic_invariant2 w2 true true true true))
(assert (in_range3 formals__p2__2__a))
(assert (= (to_rep2 temp___291) formals__p2__2__a))
(assert (let ((temp___293 (to_rep2 temp___291))) (or (and (<= (- 10) temp___293) (<= temp___293 (- 1))) (and (<= 1 temp___293) (<= temp___293 10)))))
(assert (= o9 temp___291))
(assert (= o10 (to_rep2 o9)))
(assert (= result9 (mk_int__ref w2)))
(assert (= w3 o10))
(assert (in_range3 z8))
(assert (or (and (<= (- 10) z8) (<= z8 (- 1))) (and (<= 1 z8) (<= z8 10))))
(assert (= o11 z8))
(assert (= o11 formals__p__4__a))
(assert (dynamic_invariant3 formals__p__4__a1 true true true true))
(assert (= (to_rep1 o12) formals__p__4__a1))
(assert (= o13 (to_rep1 o12)))
(assert (= result10 (mk_int__ref z8)))
(assert (= z9 o13))
(assert (dynamic_invariant3 v2 true true true true))
(assert (in_range3 formals__p2__2__a1))
(assert (= (to_rep3 temp___296) formals__p2__2__a1))
(assert (let ((temp___298 (to_rep3 temp___296))) (or (and (<= (- 10) temp___298) (<= temp___298 (- 1))) (and (<= 1 temp___298) (<= temp___298 10)))))
(assert (= o14 temp___296))
(assert (= o15 (to_rep3 o14)))
(assert (= result11 (mk_int__ref v2)))
(assert (= v3 o15))
(assert (dynamic_invariant2 w4 true true true true))
(assert (in_range3 formals__p2__2__a2))
(assert (or (and (<= (- 10) formals__p2__2__a2) (<= formals__p2__2__a2 (- 1))) (and (<= 1 formals__p2__2__a2) (<= formals__p2__2__a2 10))))
(assert (= o16 formals__p2__2__a2))
(assert (= result12 (mk_int__ref w4)))
(assert (= w5 o16))
(assert (dynamic_predicate x1))
(assert (= o17 x1))
(assert (= o17 formals__p__a))
(assert (not (= (to_rep (select formals__p__a3 3)) 0)))
(assert (= result13 (mk_map__ref x1)))
(assert (= x2 formals__p__a3))
(assert (dynamic_predicate x3))
(assert (= o18 x3))
(assert (= o18 formals__p__a1))
(assert (not (= (to_rep (select formals__p__a4 3)) 0)))
(assert (= result14 (mk_map__ref x3)))
(assert (= x4 formals__p__a4))
(assert (dynamic_predicate x5))
(assert (= o19 x5))
(assert (= o19 formals__p__a2))
(assert (not (= (to_rep (select formals__p__a5 3)) 0)))
(assert (= result15 (mk_map__ref x5)))
(assert (= x6 formals__p__a5))
(assert (not (= (to_rep (select y2 3)) 0)))
(assert (= result16 (mk_map__ref y2)))
(assert (= y3 formals__p2__a))
(assert (dynamic_predicate y3))
(assert (not (= (to_rep (select y4 3)) 0)))
(assert (dynamic_predicate formals__p2__a1))
(assert (= o20 formals__p2__a1))
(assert (= result17 (mk_map__ref y4)))
(assert (= y5 o20))
(assert (not (= (to_rep (select y6 3)) 0)))
(assert (=> (= (to_rep (select y6 1)) 0) (dynamic_predicate (store y6 3 rliteral1))))
(assert (=> (= (to_rep (select y6 1)) 0) (= temp___307 (store y6 3 rliteral1))))
(assert (=> (= (to_rep (select y6 1)) 0) (dynamic_predicate temp___307)))
(assert (=> (= (to_rep (select y6 1)) 0) (= o21 temp___307)))
(assert (=> (= (to_rep (select y6 1)) 0) (= result18 (mk_map__ref y6))))
(assert (=> (= (to_rep (select y6 1)) 0) (= y7 o21)))
(assert (=> (not (= (to_rep (select y6 1)) 0)) (= y7 y6)))
(assert (dynamic_predicate x7))
(assert (= temp___311 x7))
(assert (= o24 (select temp___311 3)))
(assert (= o25 (to_rep o24)))
(assert (dynamic_predicate x7))
(assert (= temp___309 x7))
(assert (= o22 (select temp___309 2)))
(assert (= o23 (to_rep o22)))
(assert (not (not (= o25 0))))
(check-sat)
(exit)
