(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic is_digit : int -> bool

logic is_digit__function_guard : bool, int -> prop

axiom is_digit__post_axiom :
  (forall c:int [is_digit(c)]. (in_range3(c) -> (((c = 48) ->
  (is_digit(c) = true)) and ((not (c = 48)) -> (((c = 49) ->
  (is_digit(c) = true)) and ((not (c = 49)) -> (((c = 50) ->
  (is_digit(c) = true)) and ((not (c = 50)) -> (((c = 51) ->
  (is_digit(c) = true)) and ((not (c = 51)) -> (((c = 52) ->
  (is_digit(c) = true)) and ((not (c = 52)) -> (((c = 53) ->
  (is_digit(c) = true)) and ((not (c = 53)) -> (((c = 54) ->
  (is_digit(c) = true)) and ((not (c = 54)) -> (((c = 55) ->
  (is_digit(c) = true)) and ((not (c = 55)) -> (((c = 56) ->
  (is_digit(c) = true)) and ((not (c = 56)) -> (((c = 57) ->
  (is_digit(c) = true)) and ((not (c = 57)) -> (((57 <  c) ->
  (not (is_digit(c) = true))) and ((not (57 <  c)) -> ((c <  48) ->
  (not (is_digit(c) = true)))))))))))))))))))))))))))

logic convert_character_digit_to_integer : int -> int

logic convert_character_digit_to_integer__function_guard : int, int -> prop

axiom convert_character_digit_to_integer__post_axiom :
  (forall source:int [convert_character_digit_to_integer(source)].
  ((in_range3(source) and (is_digit(source) = true)) ->
  ((((0 <= convert_character_digit_to_integer(source)) and
  (convert_character_digit_to_integer(source) <= 9)) and (((source = 48) ->
  (convert_character_digit_to_integer(source) = 0)) and
  ((not (source = 48)) -> (((source = 49) ->
  (convert_character_digit_to_integer(source) = 1)) and
  ((not (source = 49)) -> (((source = 50) ->
  (convert_character_digit_to_integer(source) = 2)) and
  ((not (source = 50)) -> (((source = 51) ->
  (convert_character_digit_to_integer(source) = 3)) and
  ((not (source = 51)) -> (((source = 52) ->
  (convert_character_digit_to_integer(source) = 4)) and
  ((not (source = 52)) -> (((source = 53) ->
  (convert_character_digit_to_integer(source) = 5)) and
  ((not (source = 53)) -> (((source = 54) ->
  (convert_character_digit_to_integer(source) = 6)) and
  ((not (source = 54)) -> (((source = 55) ->
  (convert_character_digit_to_integer(source) = 7)) and
  ((not (source = 55)) -> (((source = 56) ->
  (convert_character_digit_to_integer(source) = 8)) and
  ((not (source = 56)) -> ((source = 57) ->
  (convert_character_digit_to_integer(source) = 9))))))))))))))))))))) and
  in_range1(convert_character_digit_to_integer(source)))))

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a:(int,integer) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : integer, int -> (int,integer) farray

axiom singleton_def1 :
  (forall v:integer.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare1 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic source : (int,character) farray

logic source1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type tnumber_array_typeD1__ref = { tnumber_array_typeD1__content : integer
}

function tnumber_array_typeD1__ref___15__projection(a: tnumber_array_typeD1__ref) : integer =
  (a).tnumber_array_typeD1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq7((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,integer) farray

logic dummy7 : t1

type number_array_type__ref = { number_array_type__content : us_t1
}

function number_array_type__ref___15__projection(a: number_array_type__ref) : us_t1 =
  (a).number_array_type__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t318b__ref = { t318b__content : integer
}

function t318b__ref___projection(a: t318b__ref) : integer =
  (a).t318b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,integer) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,integer) farray = (a).elts2

function of_array2(a: (int,integer) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq11(x: us_t2, y: us_t2) : bool = bool_eq7((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,integer) farray

logic dummy10 : t2

type t319b__ref = { t319b__content : us_t2
}

function t319b__ref___projection(a: t319b__ref) : us_t2 = (a).t319b__content

logic n__first : integer

logic n__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy11 : integer

type t320b__ref = { t320b__content : integer
}

function t320b__ref___projection(a: t320b__ref) : integer =
  (a).t320b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,integer) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,integer) farray = (a).elts3

function of_array3(a: (int,integer) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,integer) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,integer) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,integer) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,integer) farray. (0 <= object__alignment3(a)))

function bool_eq13(x: us_t3, y: us_t3) : bool = bool_eq7((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq9 : us_t3, us_t3 -> bool

logic dummy12 : (int,integer) farray

logic dummy13 : t3

type tnumber_array_typeB__ref = { tnumber_array_typeB__content : us_t3
}

function tnumber_array_typeB__ref___15__projection(a: tnumber_array_typeB__ref) : us_t3 =
  (a).tnumber_array_typeB__content

logic aida__conversion__calculate_positive_target_length_5__n__aggregate_def : int,
  int, int -> us_t2

axiom def_axiom :
  (forall temp___1675:int. forall temp___1676:int. forall temp___1677:int.
  ((dynamic_property6(to_rep1(first(source1)), (to_rep1(first(source1)) + 4),
  temp___1676, temp___1677) ->
  ((to_rep1(first4((aida__conversion__calculate_positive_target_length_5__n__aggregate_def(temp___1675,
  temp___1676, temp___1677)).rt2)) = temp___1676) and
  (to_rep1(last4((aida__conversion__calculate_positive_target_length_5__n__aggregate_def(temp___1675,
  temp___1676, temp___1677)).rt2)) = temp___1677))) and
  (forall temp___1678:int.
  (((aida__conversion__calculate_positive_target_length_5__n__aggregate_def(temp___1675,
  temp___1676, temp___1677)).elts2[temp___1678]) = of_rep1(temp___1675)))))

logic target : int

logic has_failed : bool

logic n : (int,integer) farray

logic index : int

logic index1 : int

logic us : int

logic temp___1680 : (int,integer) farray

logic temp___16801 : t2

logic aida__conversion__calculate_positive_target_length_5__n__assume : (int,integer) farray

logic aida__conversion__calculate_positive_target_length_5__n__assume1 : t1

logic us1 : int

logic temp___1687 : int

logic temp___1684 : (int,integer) farray

logic temp___1682 : int

logic o : int

logic o1 : integer

logic o2 : int

logic aida__conversion__convert_character_digit_to_integer__2__target : int

logic o3 : int

logic o4 : character

logic o5 : int

logic o6 : integer

logic o7 : int

logic o8 : (int,integer) farray

logic j : int

logic o9 : int

logic o10 : character

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : integer

logic o15 : int

logic aida__conversion__convert_character_digit_to_integer__2__target1 : int

logic o16 : int

logic o17 : character

logic o18 : int

logic o19 : integer

logic o20 : int

logic o21 : (int,integer) farray

logic temp___1688 : int

logic o22 : int

logic o23 : integer

logic o24 : int

logic temp___1689 : int

logic o25 : int

logic o26 : integer

logic o27 : int

logic o28 : int

logic o29 : int

logic o30 : int

logic o31 : int

logic temp___1690 : int

logic o32 : int

logic o33 : integer

logic o34 : int

logic o35 : int

logic o36 : int

logic o37 : int

logic o38 : int

logic temp___1691 : int

logic o39 : int

logic o40 : integer

logic o41 : int

logic o42 : int

logic o43 : int

logic o44 : int

logic o45 : int

logic temp___1692 : int

logic o46 : int

logic o47 : integer

logic o48 : int

logic o49 : int

logic o50 : int

logic o51 : int

logic o52 : int

logic temp___1693 : int

logic o53 : int

logic o54 : character

logic o55 : int

logic o56 : int

logic o57 : int

logic temp___1694 : int

logic o58 : int

logic o59 : character

logic o60 : int

logic o61 : int

logic o62 : int

logic o63 : int

logic o64 : int

logic o65 : int

logic temp___1695 : int

logic o66 : int

logic o67 : character

logic o68 : int

logic o69 : int

logic o70 : int

logic o71 : int

logic o72 : int

logic o73 : int

logic temp___1696 : int

logic o74 : int

logic o75 : character

logic o76 : int

logic o77 : int

logic o78 : int

logic o79 : int

logic o80 : int

logic o81 : int

logic temp___1697 : int

logic o82 : int

logic o83 : character

logic o84 : int

logic o85 : int

logic o86 : int

logic o87 : int

logic o88 : int

logic o89 : int

logic o90 : int

logic result : (int,integer) farray

logic n1 : (int,integer) farray

logic result1 : int

logic index2 : int

logic aida__conversion__convert_character_digit_to_integer__2__target2 : int

logic result2 : (int,integer) farray

logic n2 : (int,integer) farray

logic n3 : (int,integer) farray

logic index3 : int

logic result3 : int

logic index4 : int

logic aida__conversion__convert_character_digit_to_integer__2__target3 : int

logic result4 : (int,integer) farray

logic n4 : (int,integer) farray

logic n5 : (int,integer) farray

logic index5 : int

logic n6 : (int,integer) farray

logic index6 : int

logic n7 : (int,integer) farray

logic index7 : int

logic n8 : (int,integer) farray

logic index8 : int

logic n9 : (int,integer) farray

logic index9 : int

logic n10 : (int,integer) farray

logic index10 : int

logic result5 : int

logic target1 : int

logic result6 : int

logic target2 : int

logic result7 : int

logic target3 : int

logic result8 : int

logic target4 : int

logic result9 : int

logic target5 : int

logic result10 : bool

logic has_failed1 : bool

logic target6 : int

logic has_failed2 : bool

logic n11 : (int,integer) farray

logic index11 : int

logic target7 : int

logic has_failed3 : bool

logic n12 : (int,integer) farray

logic index12 : int

axiom H : dynamic_property(1, 2147483647, to_rep1(first(source1)),
  to_rep1(last(source1)))

axiom H1 : (((- 2147483648) <= 2147483647) -> in_range1(target))

axiom H2 : ((length({ elts = source; rt = source1 }) = 5) and
  (forall index13:int. (((to_rep1(first(source1)) <= index13) and
  (index13 <= to_rep1(last(source1)))) ->
  (is_digit(to_rep((source[index13]))) = true))))

axiom H3 :
  ((((((to_rep1(first4((aida__conversion__calculate_positive_target_length_5__n__aggregate_def(0,
  to_rep1(first(source1)),
  (to_rep1(first(source1)) + 4))).rt2)) = to_rep1(first(source1))) and
  ((to_rep1(last4((aida__conversion__calculate_positive_target_length_5__n__aggregate_def(0,
  to_rep1(first(source1)),
  (to_rep1(first(source1)) + 4))).rt2)) = (to_rep1(first(source1)) + 4)) and
  ({ elts2 = temp___1680; rt2 = temp___16801
  } = aida__conversion__calculate_positive_target_length_5__n__aggregate_def(0,
  to_rep1(first(source1)), (to_rep1(first(source1)) + 4))))) and
  ((((to_rep1(first4(temp___16801)) <= to_rep1(last4(temp___16801))) ->
  (((to_rep1(first(source1)) <= (to_rep1(first(source1)) + 4)) ->
  (((to_rep1(last4(temp___16801)) - to_rep1(first4(temp___16801))) + 1) = (((to_rep1(first(source1)) + 4) - to_rep1(first(source1))) + 1))) and
  ((not (to_rep1(first(source1)) <= (to_rep1(first(source1)) + 4))) ->
  (((to_rep1(last4(temp___16801)) - to_rep1(first4(temp___16801))) + 1) = 0)))) and
  ((not (to_rep1(first4(temp___16801)) <= to_rep1(last4(temp___16801)))) ->
  ((to_rep1(first(source1)) <= (to_rep1(first(source1)) + 4)) ->
  (0 = (((to_rep1(first(source1)) + 4) - to_rep1(first(source1))) + 1))))) and
  ((slide1(temp___1680, to_rep1(first4(temp___16801)),
  to_rep1(first(source1))) = aida__conversion__calculate_positive_target_length_5__n__assume) and
  (mk1(to_rep1(first(source1)),
  (to_rep1(first(source1)) + 4)) = aida__conversion__calculate_positive_target_length_5__n__assume1)))) and
  (((result = n) and
  (n1 = aida__conversion__calculate_positive_target_length_5__n__assume)) and
  ((to_rep1(n__first) = to_rep1(first2(aida__conversion__calculate_positive_target_length_5__n__assume1))) and
  (to_rep1(n__last) = to_rep1(last2(aida__conversion__calculate_positive_target_length_5__n__assume1)))))) and
  ((dynamic_property2(to_rep1(first(source1)), (to_rep1(first(source1)) + 4),
  to_rep1(n__first), to_rep1(n__last)) and
  ((to_rep1(n__first) = to_rep1(first(source1))) and
  (to_rep1(n__last) = (to_rep1(first(source1)) + 4)))) and
  ((((temp___1687 = (to_rep1(first(source1)) + 4)) and
  in_range1((to_rep1(first(source1)) + 4))) and (((result1 = index) and
  (index2 = to_rep1(first(source1)))) and
  ((((to_rep1(first(source1)) <= index2) and (index2 <= temp___1687)) ->
  ((((temp___1684 = n1) and ((temp___1682 = index2) and
  ((((((((to_rep1(n__first) <= index2) and (index2 <= to_rep1(n__last))) and
  (o = index2)) and (o1 = (n1[o]))) and (o2 = to_rep1(o1))) and
  (o2 = aida__conversion__convert_character_digit_to_integer__2__target)) and
  (((((((to_rep1(first(source1)) <= index2) and
  (index2 <= to_rep1(last(source1)))) and (o3 = index2)) and
  (o4 = (source[o3]))) and (o5 = to_rep(o4))) and
  (((((0 <= aida__conversion__convert_character_digit_to_integer__2__target2) and
  (aida__conversion__convert_character_digit_to_integer__2__target2 <= 9)) and
  (aida__conversion__convert_character_digit_to_integer__2__target2 = convert_character_digit_to_integer(o5))) and
  (((bool_eq1(o5, 48) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 0)) and
  ((not (bool_eq1(o5, 48) = true)) -> (((bool_eq1(o5, 49) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 1)) and
  ((not (bool_eq1(o5, 49) = true)) -> (((bool_eq1(o5, 50) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 2)) and
  ((not (bool_eq1(o5, 50) = true)) -> (((bool_eq1(o5, 51) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 3)) and
  ((not (bool_eq1(o5, 51) = true)) -> (((bool_eq1(o5, 52) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 4)) and
  ((not (bool_eq1(o5, 52) = true)) -> (((bool_eq1(o5, 53) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 5)) and
  ((not (bool_eq1(o5, 53) = true)) -> (((bool_eq1(o5, 54) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 6)) and
  ((not (bool_eq1(o5, 54) = true)) -> (((bool_eq1(o5, 55) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 7)) and
  ((not (bool_eq1(o5, 55) = true)) -> (((bool_eq1(o5, 56) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 8)) and
  ((not (bool_eq1(o5, 56) = true)) -> ((bool_eq1(o5, 57) = true) ->
  (aida__conversion__convert_character_digit_to_integer__2__target2 = 9))))))))))))))))))))) and
  in_range1(aida__conversion__convert_character_digit_to_integer__2__target2))) and
  (((to_rep1(o6) = aida__conversion__convert_character_digit_to_integer__2__target2) and
  ((((to_rep1(n__first) <= index2) and (index2 <= to_rep1(n__last))) and
  (o7 = index2)) and (o8 = (n1[o7 <- o6])))) and ((n1 = result2) and
  (n2 = o8))))) and
  ((forall j1:int. (((to_rep1(first(source1)) <= j1) and (j1 <= index3)) ->
   (to_rep1((n3[j1])) = convert_character_digit_to_integer(to_rep((source[j1])))))) and
  (((((to_rep1(first(source1)) <= (to_rep1(first(source1)) + 4)) ->
  dynamic_property5(to_rep1(first(source1)), (to_rep1(first(source1)) + 4),
  index3)) and
  (forall temp___1685:int. (((to_rep1(n__first) <= temp___1685) and
  (temp___1685 <= to_rep1(n__last))) -> ((index3 <  temp___1685) ->
  ((n3[temp___1685]) = (temp___1684[temp___1685])))))) and
  ((to_rep1(first(source1)) <= index3) and
  (index3 <= (to_rep1(first(source1)) + 4)))) and
  (index3 = temp___1687)))))) and (((index3 = index7) and (n3 = n7)) and
  ((index8 = index3) and (n8 = n3)))) and (((index9 = index7) and
  (n9 = n7)) and ((index10 = index8) and (n10 = n8))))) and
  ((not ((to_rep1(first(source1)) <= index2) and (index2 <= temp___1687))) ->
  (((index2 = index9) and (n1 = n9)) and ((index10 = index2) and
  (n10 = n1))))))) and
  (((((((temp___1688 = (to_rep1(first(source1)) + 4)) and
  in_range1((to_rep1(first(source1)) + 4))) and
  (((to_rep1(n__first) <= temp___1688) and
  (temp___1688 <= to_rep1(n__last))) and (o22 = temp___1688))) and
  (o23 = (n9[o22]))) and (o24 = to_rep1(o23))) and ((result5 = target) and
  (target1 = o24))) and ((target1 <= 9) and
  (((((((((((temp___1689 = (to_rep1(first(source1)) + 3)) and
  in_range1((to_rep1(first(source1)) + 3))) and
  (((to_rep1(n__first) <= temp___1689) and
  (temp___1689 <= to_rep1(n__last))) and (o25 = temp___1689))) and
  (o26 = (n9[o25]))) and (o27 = to_rep1(o26))) and (o28 = (o27 * 10))) and
  ((o29 = o28) and in_range1(o28))) and (o30 = (target1 + o29))) and
  ((o31 = o30) and in_range1(o30))) and ((target1 = result6) and
  (target2 = o31))) and ((target2 <= 99) and
  (((((((((((temp___1690 = (to_rep1(first(source1)) + 2)) and
  in_range1((to_rep1(first(source1)) + 2))) and
  (((to_rep1(n__first) <= temp___1690) and
  (temp___1690 <= to_rep1(n__last))) and (o32 = temp___1690))) and
  (o33 = (n9[o32]))) and (o34 = to_rep1(o33))) and (o35 = (o34 * 100))) and
  ((o36 = o35) and in_range1(o35))) and (o37 = (target2 + o36))) and
  ((o38 = o37) and in_range1(o37))) and ((result7 = target2) and
  (target3 = o38))) and ((target3 <= 999) and
  (((((((((((temp___1691 = (to_rep1(first(source1)) + 1)) and
  in_range1((to_rep1(first(source1)) + 1))) and
  (((to_rep1(n__first) <= temp___1691) and
  (temp___1691 <= to_rep1(n__last))) and (o39 = temp___1691))) and
  (o40 = (n9[o39]))) and (o41 = to_rep1(o40))) and (o42 = (o41 * 1000))) and
  ((o43 = o42) and in_range1(o42))) and (o44 = (target3 + o43))) and
  ((o45 = o44) and in_range1(o44))) and ((result8 = target3) and
  (target4 = o45))) and ((target4 <= 9999) and
  (((((((((((temp___1692 = (to_rep1(first(source1)) + 0)) and
  in_range1((to_rep1(first(source1)) + 0))) and
  (((to_rep1(n__first) <= temp___1692) and
  (temp___1692 <= to_rep1(n__last))) and (o46 = temp___1692))) and
  (o47 = (n9[o46]))) and (o48 = to_rep1(o47))) and (o49 = (o48 * 10000))) and
  ((o50 = o49) and in_range1(o49))) and (o51 = (target4 + o50))) and
  ((o52 = o51) and in_range1(o51))) and ((result9 = target4) and
  (target5 = o52))) and ((target5 <= 99999) and ((result10 = has_failed) and
  (has_failed1 = of_int(0)))))))))))))))) and (((index11 = index9) and
  ((n11 = n9) and ((has_failed2 = has_failed1) and (target6 = target5)))) and
  ((index12 = index10) and ((n12 = n10) and ((has_failed3 = has_failed1) and
  (target7 = target5))))))

axiom H4 : ((temp___1697 = (to_rep1(first(source1)) + 4)) and
  in_range1((to_rep1(first(source1)) + 4)))

axiom H5 : ((to_rep1(first(source1)) <= temp___1697) and
  (temp___1697 <= to_rep1(last(source1))))

axiom H6 : (o82 = temp___1697)

axiom H7 : (o83 = (source[o82]))

axiom H8 : (o84 = to_rep(o83))

axiom H9 : ((o85 = convert_character_digit_to_integer(o84)) and
  (in_range1(o85) and (((0 <= o85) and (o85 <= 9)) and (((bool_eq1(o84,
  48) = true) -> (o85 = 0)) and ((not (bool_eq1(o84, 48) = true)) ->
  (((bool_eq1(o84, 49) = true) -> (o85 = 1)) and ((not (bool_eq1(o84,
  49) = true)) -> (((bool_eq1(o84, 50) = true) -> (o85 = 2)) and
  ((not (bool_eq1(o84, 50) = true)) -> (((bool_eq1(o84, 51) = true) ->
  (o85 = 3)) and ((not (bool_eq1(o84, 51) = true)) -> (((bool_eq1(o84,
  52) = true) -> (o85 = 4)) and ((not (bool_eq1(o84, 52) = true)) ->
  (((bool_eq1(o84, 53) = true) -> (o85 = 5)) and ((not (bool_eq1(o84,
  53) = true)) -> (((bool_eq1(o84, 54) = true) -> (o85 = 6)) and
  ((not (bool_eq1(o84, 54) = true)) -> (((bool_eq1(o84, 55) = true) ->
  (o85 = 7)) and ((not (bool_eq1(o84, 55) = true)) -> (((bool_eq1(o84,
  56) = true) -> (o85 = 8)) and ((not (bool_eq1(o84, 56) = true)) ->
  ((bool_eq1(o84, 57) = true) -> (o85 = 9)))))))))))))))))))))))

axiom H10 : (o86 = (o85 * 1))

axiom H11 : ((o87 = o86) and in_range1(o86))

axiom H12 : ((temp___1696 = (to_rep1(first(source1)) + 3)) and
  in_range1((to_rep1(first(source1)) + 3)))

axiom H13 : ((to_rep1(first(source1)) <= temp___1696) and
  (temp___1696 <= to_rep1(last(source1))))

axiom H14 : (o74 = temp___1696)

axiom H15 : (o75 = (source[o74]))

axiom H16 : (o76 = to_rep(o75))

axiom H17 : ((o77 = convert_character_digit_to_integer(o76)) and
  (in_range1(o77) and (((0 <= o77) and (o77 <= 9)) and (((bool_eq1(o76,
  48) = true) -> (o77 = 0)) and ((not (bool_eq1(o76, 48) = true)) ->
  (((bool_eq1(o76, 49) = true) -> (o77 = 1)) and ((not (bool_eq1(o76,
  49) = true)) -> (((bool_eq1(o76, 50) = true) -> (o77 = 2)) and
  ((not (bool_eq1(o76, 50) = true)) -> (((bool_eq1(o76, 51) = true) ->
  (o77 = 3)) and ((not (bool_eq1(o76, 51) = true)) -> (((bool_eq1(o76,
  52) = true) -> (o77 = 4)) and ((not (bool_eq1(o76, 52) = true)) ->
  (((bool_eq1(o76, 53) = true) -> (o77 = 5)) and ((not (bool_eq1(o76,
  53) = true)) -> (((bool_eq1(o76, 54) = true) -> (o77 = 6)) and
  ((not (bool_eq1(o76, 54) = true)) -> (((bool_eq1(o76, 55) = true) ->
  (o77 = 7)) and ((not (bool_eq1(o76, 55) = true)) -> (((bool_eq1(o76,
  56) = true) -> (o77 = 8)) and ((not (bool_eq1(o76, 56) = true)) ->
  ((bool_eq1(o76, 57) = true) -> (o77 = 9)))))))))))))))))))))))

axiom H18 : (o78 = (o77 * 10))

axiom H19 : ((o79 = o78) and in_range1(o78))

axiom H20 : ((temp___1695 = (to_rep1(first(source1)) + 2)) and
  in_range1((to_rep1(first(source1)) + 2)))

axiom H21 : ((to_rep1(first(source1)) <= temp___1695) and
  (temp___1695 <= to_rep1(last(source1))))

axiom H22 : (o66 = temp___1695)

axiom H23 : (o67 = (source[o66]))

axiom H24 : (o68 = to_rep(o67))

axiom H25 : ((o69 = convert_character_digit_to_integer(o68)) and
  (in_range1(o69) and (((0 <= o69) and (o69 <= 9)) and (((bool_eq1(o68,
  48) = true) -> (o69 = 0)) and ((not (bool_eq1(o68, 48) = true)) ->
  (((bool_eq1(o68, 49) = true) -> (o69 = 1)) and ((not (bool_eq1(o68,
  49) = true)) -> (((bool_eq1(o68, 50) = true) -> (o69 = 2)) and
  ((not (bool_eq1(o68, 50) = true)) -> (((bool_eq1(o68, 51) = true) ->
  (o69 = 3)) and ((not (bool_eq1(o68, 51) = true)) -> (((bool_eq1(o68,
  52) = true) -> (o69 = 4)) and ((not (bool_eq1(o68, 52) = true)) ->
  (((bool_eq1(o68, 53) = true) -> (o69 = 5)) and ((not (bool_eq1(o68,
  53) = true)) -> (((bool_eq1(o68, 54) = true) -> (o69 = 6)) and
  ((not (bool_eq1(o68, 54) = true)) -> (((bool_eq1(o68, 55) = true) ->
  (o69 = 7)) and ((not (bool_eq1(o68, 55) = true)) -> (((bool_eq1(o68,
  56) = true) -> (o69 = 8)) and ((not (bool_eq1(o68, 56) = true)) ->
  ((bool_eq1(o68, 57) = true) -> (o69 = 9)))))))))))))))))))))))

axiom H26 : (o70 = (o69 * 100))

axiom H27 : ((o71 = o70) and in_range1(o70))

axiom H28 : ((temp___1694 = (to_rep1(first(source1)) + 1)) and
  in_range1((to_rep1(first(source1)) + 1)))

axiom H29 : ((to_rep1(first(source1)) <= temp___1694) and
  (temp___1694 <= to_rep1(last(source1))))

axiom H30 : (o58 = temp___1694)

axiom H31 : (o59 = (source[o58]))

axiom H32 : (o60 = to_rep(o59))

axiom H33 : ((o61 = convert_character_digit_to_integer(o60)) and
  (in_range1(o61) and (((0 <= o61) and (o61 <= 9)) and (((bool_eq1(o60,
  48) = true) -> (o61 = 0)) and ((not (bool_eq1(o60, 48) = true)) ->
  (((bool_eq1(o60, 49) = true) -> (o61 = 1)) and ((not (bool_eq1(o60,
  49) = true)) -> (((bool_eq1(o60, 50) = true) -> (o61 = 2)) and
  ((not (bool_eq1(o60, 50) = true)) -> (((bool_eq1(o60, 51) = true) ->
  (o61 = 3)) and ((not (bool_eq1(o60, 51) = true)) -> (((bool_eq1(o60,
  52) = true) -> (o61 = 4)) and ((not (bool_eq1(o60, 52) = true)) ->
  (((bool_eq1(o60, 53) = true) -> (o61 = 5)) and ((not (bool_eq1(o60,
  53) = true)) -> (((bool_eq1(o60, 54) = true) -> (o61 = 6)) and
  ((not (bool_eq1(o60, 54) = true)) -> (((bool_eq1(o60, 55) = true) ->
  (o61 = 7)) and ((not (bool_eq1(o60, 55) = true)) -> (((bool_eq1(o60,
  56) = true) -> (o61 = 8)) and ((not (bool_eq1(o60, 56) = true)) ->
  ((bool_eq1(o60, 57) = true) -> (o61 = 9)))))))))))))))))))))))

axiom H34 : (o62 = (o61 * 1000))

axiom H35 : ((o63 = o62) and in_range1(o62))

axiom H36 : ((temp___1693 = (to_rep1(first(source1)) + 0)) and
  in_range1((to_rep1(first(source1)) + 0)))

axiom H37 : ((to_rep1(first(source1)) <= temp___1693) and
  (temp___1693 <= to_rep1(last(source1))))

axiom H38 : (o53 = temp___1693)

axiom H39 : (o54 = (source[o53]))

axiom H40 : (o55 = to_rep(o54))

axiom H41 : ((o56 = convert_character_digit_to_integer(o55)) and
  (in_range1(o56) and (((0 <= o56) and (o56 <= 9)) and (((bool_eq1(o55,
  48) = true) -> (o56 = 0)) and ((not (bool_eq1(o55, 48) = true)) ->
  (((bool_eq1(o55, 49) = true) -> (o56 = 1)) and ((not (bool_eq1(o55,
  49) = true)) -> (((bool_eq1(o55, 50) = true) -> (o56 = 2)) and
  ((not (bool_eq1(o55, 50) = true)) -> (((bool_eq1(o55, 51) = true) ->
  (o56 = 3)) and ((not (bool_eq1(o55, 51) = true)) -> (((bool_eq1(o55,
  52) = true) -> (o56 = 4)) and ((not (bool_eq1(o55, 52) = true)) ->
  (((bool_eq1(o55, 53) = true) -> (o56 = 5)) and ((not (bool_eq1(o55,
  53) = true)) -> (((bool_eq1(o55, 54) = true) -> (o56 = 6)) and
  ((not (bool_eq1(o55, 54) = true)) -> (((bool_eq1(o55, 55) = true) ->
  (o56 = 7)) and ((not (bool_eq1(o55, 55) = true)) -> (((bool_eq1(o55,
  56) = true) -> (o56 = 8)) and ((not (bool_eq1(o55, 56) = true)) ->
  ((bool_eq1(o55, 57) = true) -> (o56 = 9)))))))))))))))))))))))

axiom H42 : (o57 = (o56 * 10000))

axiom H43 : ((o64 = o57) and in_range1(o57))

axiom H44 : (o65 = (o64 + o63))

axiom H45 : ((o72 = o65) and in_range1(o65))

axiom H46 : (o73 = (o72 + o71))

axiom H47 : ((o80 = o73) and in_range1(o73))

axiom H48 : (o81 = (o80 + o79))

axiom H49 : ((o88 = o81) and in_range1(o81))

axiom H50 : (o89 = (o88 + o87))

 (* File "aida-conversion.adb", line 909, characters 0-0 *)
goal WP_parameter_def : in_range1(o89)
