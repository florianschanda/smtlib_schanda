(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type presencet

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : presencet, presencet -> bool

logic dummy : presencet

type presencet__ref = { presencet__content : presencet
}

function presencet__ref___projection(a: presencet__ref) : presencet =
  (a).presencet__content

type privileget

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : privileget, privileget -> bool

logic dummy1 : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep : privileget -> int

logic of_rep : int -> privileget

axiom inversion_axiom :
  (forall x:privileget [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:privileget [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type opandnullt

predicate in_range3(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : opandnullt, opandnullt -> bool

logic dummy2 : opandnullt

type opandnullt__ref = { opandnullt__content : opandnullt
}

function opandnullt__ref___projection(a: opandnullt__ref) : opandnullt =
  (a).opandnullt__content

logic to_rep1 : opandnullt -> int

logic of_rep1 : int -> opandnullt

axiom inversion_axiom1 :
  (forall x:opandnullt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:opandnullt [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__admin__t__rolepresent : privileget;
rec__admin__t__currentop : opandnullt
}

function us_split_fields_RolePresent__projection(a: us_split_fields) : privileget =
  (a).rec__admin__t__rolepresent

function us_split_fields_CurrentOp__projection(a: us_split_fields) : opandnullt =
  (a).rec__admin__t__currentop

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep1(((a).us_split_fields1).rec__admin__t__currentop) = to_rep1(((b).us_split_fields1).rec__admin__t__currentop))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep1(((a).us_split_fields1).rec__admin__t__currentop) = to_rep1(((b).us_split_fields1).rec__admin__t__currentop)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__size({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__alignment({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

logic admin__t__rolepresent__first__bit : int

logic admin__t__rolepresent__last__bit : int

logic admin__t__rolepresent__position : int

axiom admin__t__rolepresent__first__bit_axiom :
  (0 <= admin__t__rolepresent__first__bit)

axiom admin__t__rolepresent__last__bit_axiom :
  (admin__t__rolepresent__first__bit <  admin__t__rolepresent__last__bit)

axiom admin__t__rolepresent__position_axiom :
  (0 <= admin__t__rolepresent__position)

logic admin__t__currentop__first__bit : int

logic admin__t__currentop__last__bit : int

logic admin__t__currentop__position : int

axiom admin__t__currentop__first__bit_axiom :
  (0 <= admin__t__currentop__first__bit)

axiom admin__t__currentop__last__bit_axiom :
  (admin__t__currentop__first__bit <  admin__t__currentop__last__bit)

axiom admin__t__currentop__position_axiom :
  (0 <= admin__t__currentop__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : privileget

logic dummy4 : opandnullt

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic rolepresent : us_rep -> int

logic rolepresent__function_guard : int, us_rep -> prop

axiom rolepresent__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. in_range2(rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })))

axiom rolepresent__def_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. (rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = to_rep(theadmin)))

logic isdoingop : us_rep -> bool

logic isdoingop__function_guard : bool, us_rep -> prop

type opt

predicate in_range4(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : opt, opt -> bool

logic dummy5 : opt

type opt__ref = { opt__content : opt
}

function opt__ref___projection(a: opt__ref) : opt = (a).opt__content

axiom isdoingop__post_axiom : true

axiom isdoingop__def_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) <->
  in_range4(to_rep1(theadmin1))))

logic thecurrentop : us_rep -> int

logic thecurrentop__function_guard : int, us_rep -> prop

axiom thecurrentop__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [thecurrentop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) ->
  in_range4(thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }))))

logic ispresent : us_rep -> bool

logic ispresent__function_guard : bool, us_rep -> prop

type adminprivileget

predicate in_range5(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : adminprivileget, adminprivileget -> bool

logic dummy6 : adminprivileget

type adminprivileget__ref = { adminprivileget__content : adminprivileget
}

function adminprivileget__ref___projection(a: adminprivileget__ref) : adminprivileget =
  (a).adminprivileget__content

axiom ispresent__post_axiom : true

axiom ispresent__def_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) <->
  in_range5(to_rep(theadmin))))

type statust

predicate in_range6(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : statust, statust -> bool

logic dummy7 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type yearst

predicate in_range7(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : yearst, yearst -> bool

logic dummy8 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep2 : yearst -> int

logic of_rep2 : int -> yearst

axiom inversion_axiom2 :
  (forall x:yearst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:yearst [to_rep2(x)]. in_range7(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range7(x) ->
  (to_rep2(of_rep2(x)) = x)))

type monthst

predicate in_range8(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : monthst, monthst -> bool

logic dummy9 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep3 : monthst -> int

logic of_rep3 : int -> monthst

axiom inversion_axiom3 :
  (forall x:monthst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:monthst [to_rep3(x)]. in_range8(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range8(x) ->
  (to_rep3(of_rep3(x)) = x)))

type dayst

predicate in_range9(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : dayst, dayst -> bool

logic dummy10 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep4 : dayst -> int

logic of_rep4 : int -> dayst

axiom inversion_axiom4 :
  (forall x:dayst [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:dayst [to_rep4(x)]. in_range9(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range9(x) ->
  (to_rep4(of_rep4(x)) = x)))

type millisecst

predicate in_range10(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : millisecst, millisecst -> bool

logic dummy11 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep5 : millisecst -> int

logic of_rep5 : int -> millisecst

axiom inversion_axiom5 :
  (forall x:millisecst [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:millisecst [to_rep5(x)]. in_range10(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range10(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields2) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields2) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields2) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields2) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq13 : us_rep1, us_rep1 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq13(a, b)].
  ((((((to_rep2(((a).us_split_fields3).rec__clock__timet__year) = to_rep2(((b).us_split_fields3).rec__clock__timet__year)) and
  (to_rep3(((a).us_split_fields3).rec__clock__timet__month) = to_rep3(((b).us_split_fields3).rec__clock__timet__month))) and
  (to_rep4(((a).us_split_fields3).rec__clock__timet__day) = to_rep4(((b).us_split_fields3).rec__clock__timet__day))) and
  (to_rep5(((a).us_split_fields3).rec__clock__timet__millisec) = to_rep5(((b).us_split_fields3).rec__clock__timet__millisec))) ->
  (bool_eq13(a, b) = true)) and
  ((not ((((to_rep2(((a).us_split_fields3).rec__clock__timet__year) = to_rep2(((b).us_split_fields3).rec__clock__timet__year)) and
  (to_rep3(((a).us_split_fields3).rec__clock__timet__month) = to_rep3(((b).us_split_fields3).rec__clock__timet__month))) and
  (to_rep4(((a).us_split_fields3).rec__clock__timet__day) = to_rep4(((b).us_split_fields3).rec__clock__timet__day))) and
  (to_rep5(((a).us_split_fields3).rec__clock__timet__millisec) = to_rep5(((b).us_split_fields3).rec__clock__timet__millisec)))) ->
  (bool_eq13(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size1({ us_split_fields3 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment1({ us_split_fields3 = { rec__clock__timet__year =
  a; rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy12 : yearst

logic dummy13 : monthst

logic dummy14 : dayst

logic dummy15 : millisecst

type timet__ref = { timet__content : us_rep1
}

function timet__ref___projection(a: timet__ref) : us_rep1 =
  (a).timet__content

logic attr__ATTRIBUTE_ADDRESS : int

logic thecurrenttime : us_split_fields2, us_private -> us_rep1

logic thecurrenttime__function_guard : us_rep1, us_split_fields2,
  us_private -> prop

axiom thecurrenttime__post_axiom : true

axiom thecurrenttime__def_axiom :
  (forall clock__currenttimevar__fields:yearst.
  forall clock__currenttimevar__fields1:monthst.
  forall clock__currenttimevar__fields2:dayst.
  forall clock__currenttimevar__fields3:millisecst.
  (forall clock__currenttime:us_private [thecurrenttime({
  rec__clock__timet__year = clock__currenttimevar__fields;
  rec__clock__timet__month = clock__currenttimevar__fields1;
  rec__clock__timet__day = clock__currenttimevar__fields2;
  rec__clock__timet__millisec = clock__currenttimevar__fields3 },
  clock__currenttime)]. (thecurrenttime({ rec__clock__timet__year =
  clock__currenttimevar__fields; rec__clock__timet__month =
  clock__currenttimevar__fields1; rec__clock__timet__day =
  clock__currenttimevar__fields2; rec__clock__timet__millisec =
  clock__currenttimevar__fields3 }, clock__currenttime) = {
  us_split_fields3 = { rec__clock__timet__year =
  clock__currenttimevar__fields; rec__clock__timet__month =
  clock__currenttimevar__fields1; rec__clock__timet__day =
  clock__currenttimevar__fields2; rec__clock__timet__millisec =
  clock__currenttimevar__fields3 } })))

logic greaterthanorequal : us_rep1, us_rep1 -> bool

logic greaterthanorequal__function_guard : bool, us_rep1, us_rep1 -> prop

logic greaterthan : us_rep1, us_rep1 -> bool

logic greaterthan__function_guard : bool, us_rep1, us_rep1 -> prop

axiom greaterthanorequal__post_axiom : true

axiom greaterthanorequal__def_axiom :
  (forall left:yearst. forall left1:monthst. forall left2:dayst.
  forall left3:millisecst. forall right:yearst. forall right1:monthst.
  forall right2:dayst. forall right3:millisecst [greaterthanorequal({
  us_split_fields3 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  })]. ((greaterthanorequal({ us_split_fields3 = { rec__clock__timet__year =
  left; rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true) <-> ((greaterthan({ us_split_fields3 = {
  rec__clock__timet__year = left; rec__clock__timet__month = left1;
  rec__clock__timet__day = left2; rec__clock__timet__millisec = left3 } }, {
  us_split_fields3 = { rec__clock__timet__year = right;
  rec__clock__timet__month = right1; rec__clock__timet__day = right2;
  rec__clock__timet__millisec = right3 } }) = true) or (bool_eq13({
  us_split_fields3 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true))))

type logfileindext

predicate in_range11(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq12 : logfileindext, logfileindext -> bool

logic dummy16 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep6 : logfileindext -> int

logic of_rep6 : int -> logfileindext

axiom inversion_axiom6 :
  (forall x:logfileindext [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:logfileindext [to_rep6(x)]. in_range11(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range11(x) ->
  (to_rep6(of_rep6(x)) = x)))

type logentrycountt

predicate in_range12(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq13 : logentrycountt, logentrycountt -> bool

logic dummy17 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep7 : logentrycountt -> int

logic of_rep7 : int -> logentrycountt

axiom inversion_axiom7 :
  (forall x:logentrycountt [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:logentrycountt [to_rep7(x)]. in_range12(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range12(x) ->
  (to_rep7(of_rep7(x)) = x)))

type map__ref = { map__content : (int,logfileindext) farray
}

logic slide : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq :
  (forall a:(int,logfileindext) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> (int,logfileindext) farray

axiom concat_def :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : logfileindext, int -> (int,logfileindext) farray

axiom singleton_def :
  (forall v:logfileindext.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq16 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def15 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq16(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep6((a[temp___idx_173])) = to_rep6((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep6((a[temp___idx_173])) = to_rep6((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep6((a[temp___idx_173])) = to_rep6((b[((b__first - a__first) + temp___idx_173)])))))))))

logic compare : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq16(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq16(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep6((a[(i + 1)])) <  to_rep6((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq16(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep6((b[(i + 1)])) <  to_rep6((a[(j + 1)]))))))))))))

logic dummy18 : (int,logfileindext) farray

logic value__size2 : int

logic object__size2 : (int,logfileindext) farray -> int

logic value__component__size : int

logic object__component__size : (int,logfileindext) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,logfileindext) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,logfileindext) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment2(a)))

logic user_eq14 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type logfilecountt

predicate in_range13(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq15 : logfilecountt, logfilecountt -> bool

logic dummy19 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep8 : logfilecountt -> int

logic of_rep8 : int -> logfilecountt

axiom inversion_axiom8 :
  (forall x:logfilecountt [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:logfilecountt [to_rep8(x)]. in_range13(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range13(x) ->
  (to_rep8(of_rep8(x)) = x)))

type us_split_fields4 = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields4) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields4) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields4) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__3__projection(a: us_split_fields4) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___10__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq18 : us_rep2, us_rep2 -> bool

axiom bool_eq_def17 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq18(a, b)].
  ((((((bool_eq16(((a).us_split_fields5).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilelistt__head) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilelistt__head))) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilelistt__lasti) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilelistt__lasti))) and
  (to_rep8(((a).us_split_fields5).rec__auditlog__logfilelistt__length) = to_rep8(((b).us_split_fields5).rec__auditlog__logfilelistt__length))) ->
  (bool_eq18(a, b) = true)) and
  ((not ((((bool_eq16(((a).us_split_fields5).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields5).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilelistt__head) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilelistt__head))) and
  (to_rep6(((a).us_split_fields5).rec__auditlog__logfilelistt__lasti) = to_rep6(((b).us_split_fields5).rec__auditlog__logfilelistt__lasti))) and
  (to_rep8(((a).us_split_fields5).rec__auditlog__logfilelistt__length) = to_rep8(((b).us_split_fields5).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq18(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size3({
  us_split_fields5 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment3({ us_split_fields5 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq16 : us_rep2, us_rep2 -> bool

logic dummy20 : (int,logfileindext) farray

logic dummy21 : logfileindext

logic dummy22 : logfileindext

logic dummy23 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep2
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep2 =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range14(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq17 : fileentrycountt, fileentrycountt -> bool

logic dummy24 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep9 : fileentrycountt -> int

logic of_rep9 : int -> fileentrycountt

axiom inversion_axiom9 :
  (forall x:fileentrycountt [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:fileentrycountt [to_rep9(x)]. in_range14(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range14(x) ->
  (to_rep9(of_rep9(x)) = x)))

type map__ref1 = { map__content1 : (int,fileentrycountt) farray
}

logic slide1 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq1 :
  (forall a:(int,fileentrycountt) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> (int,fileentrycountt) farray

axiom concat_def1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : fileentrycountt, int -> (int,fileentrycountt) farray

axiom singleton_def1 :
  (forall v:fileentrycountt.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq20 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def19 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq20(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_174:int. ((((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) and
  (to_rep9((a[temp___idx_174])) = to_rep9((b[((b__first - a__first) + temp___idx_174)])))) or
  (not ((a__first <= temp___idx_174) and (temp___idx_174 <= a__last)))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) ->
  (to_rep9((a[temp___idx_174])) = to_rep9((b[((b__first - a__first) + temp___idx_174)]))))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq20(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) ->
  (to_rep9((a[temp___idx_174])) = to_rep9((b[((b__first - a__first) + temp___idx_174)])))))))))

logic compare1 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq20(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq20(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep9((a[(i + 1)])) <  to_rep9((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq20(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep9((b[(i + 1)])) <  to_rep9((a[(j + 1)]))))))))))))

logic dummy25 : (int,fileentrycountt) farray

logic value__size4 : int

logic object__size4 : (int,fileentrycountt) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,fileentrycountt) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,fileentrycountt) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment4(a)))

logic user_eq18 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields6 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep2;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields6) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields6) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields6) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___10__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___11__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq21 : us_rep3, us_rep3 -> bool

axiom bool_eq_def20 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq21(a, b)].
  ((((((to_rep6(((a).us_split_fields7).rec__auditlog__logfilestatet__currentlogfile) = to_rep6(((b).us_split_fields7).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep7(((a).us_split_fields7).rec__auditlog__logfilestatet__numberlogentries) = to_rep7(((b).us_split_fields7).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq18(((a).us_split_fields7).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields7).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq20(((a).us_split_fields7).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields7).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq21(a, b) = true)) and
  ((not ((((to_rep6(((a).us_split_fields7).rec__auditlog__logfilestatet__currentlogfile) = to_rep6(((b).us_split_fields7).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep7(((a).us_split_fields7).rec__auditlog__logfilestatet__numberlogentries) = to_rep7(((b).us_split_fields7).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq18(((a).us_split_fields7).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields7).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq20(((a).us_split_fields7).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields7).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq21(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size5({
  us_split_fields7 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment5({
  us_split_fields7 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq19 : us_rep3, us_rep3 -> bool

logic dummy26 : logfileindext

logic dummy27 : logentrycountt

logic dummy28 : (int,logfileindext) farray

logic dummy29 : logfileindext

logic dummy30 : logfileindext

logic dummy31 : logfilecountt

logic dummy32 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep3
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep3 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep2,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep2,
  (int,fileentrycountt) farray -> prop

logic temp___1145 : int -> (int,logfileindext) farray

axiom def_axiom :
  (forall temp___1147:int.
  (forall temp___1148:int.
  ((temp___1145(temp___1147)[temp___1148]) = of_rep6(temp___1147))))

logic temp___1149 : int -> (int,fileentrycountt) farray

axiom def_axiom1 :
  (forall temp___1151:int.
  (forall temp___1152:int.
  ((temp___1149(temp___1151)[temp___1152]) = of_rep9(temp___1151))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep4

logic bool_eq22 : us_rep4, us_rep4 -> bool

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (forall a:us_rep4. (0 <= object__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep4. (0 <= object__alignment6(a)))

logic user_eq20 : us_rep4, us_rep4 -> bool

logic dummy33 : us_rep4

type t__ref1 = { t__content1 : us_rep4
}

function t__ref___2__projection(a: t__ref1) : us_rep4 = (a).t__content1

type map__ref2 = { map__content2 : (int,us_rep4) farray
}

logic slide2 : (int,us_rep4) farray, int, int -> (int,us_rep4) farray

axiom slide_eq2 :
  (forall a:(int,us_rep4) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep4) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,us_rep4) farray, int, int, (int,us_rep4) farray, int,
  int -> (int,us_rep4) farray

axiom concat_def2 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : us_rep4, int -> (int,us_rep4) farray

axiom singleton_def2 :
  (forall v:us_rep4.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq23 : (int,us_rep4) farray, int, int, (int,us_rep4) farray, int,
  int -> bool

axiom bool_eq_def21 :
  (forall a:(int,us_rep4) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep4) farray. forall b__first:int. forall b__last:int
  [bool_eq23(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_175:int. ((((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) and (bool_eq22((a[temp___idx_175]),
  (b[((b__first - a__first) + temp___idx_175)])) = true)) or
  (not ((a__first <= temp___idx_175) and (temp___idx_175 <= a__last)))))) ->
  (bool_eq23(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) -> (bool_eq22((a[temp___idx_175]),
  (b[((b__first - a__first) + temp___idx_175)])) = true))))) -> (bool_eq23(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq23(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) -> (bool_eq22((a[temp___idx_175]),
  (b[((b__first - a__first) + temp___idx_175)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type filestatust

predicate in_range15(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq21 : filestatust, filestatust -> bool

logic dummy34 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep10 : filestatust -> int

logic of_rep10 : int -> filestatust

axiom inversion_axiom10 :
  (forall x:filestatust [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:filestatust [to_rep10(x)]. in_range15(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range15(x) ->
  (to_rep10(of_rep10(x)) = x)))

type map__ref3 = { map__content3 : (int,filestatust) farray
}

logic slide3 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq3 :
  (forall a:(int,filestatust) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,filestatust) farray, int, int, (int,filestatust) farray,
  int, int -> (int,filestatust) farray

axiom concat_def3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : filestatust, int -> (int,filestatust) farray

axiom singleton_def3 :
  (forall v:filestatust.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq25 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def23 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq25(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_176:int. ((((a__first <= temp___idx_176) and
  (temp___idx_176 <= a__last)) and
  (to_rep10((a[temp___idx_176])) = to_rep10((b[((b__first - a__first) + temp___idx_176)])))) or
  (not ((a__first <= temp___idx_176) and (temp___idx_176 <= a__last)))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_176:int. (((a__first <= temp___idx_176) and
  (temp___idx_176 <= a__last)) ->
  (to_rep10((a[temp___idx_176])) = to_rep10((b[((b__first - a__first) + temp___idx_176)]))))))) ->
  (bool_eq25(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq25(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_176:int. (((a__first <= temp___idx_176) and
  (temp___idx_176 <= a__last)) ->
  (to_rep10((a[temp___idx_176])) = to_rep10((b[((b__first - a__first) + temp___idx_176)])))))))))

logic compare2 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> int

axiom compare_def_eq2 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq25(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt2 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq25(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep10((a[(i + 1)])) <  to_rep10((b[(j + 1)]))))))))))))

axiom compare_def_gt2 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare2(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq25(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep10((b[(i + 1)])) <  to_rep10((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type tokenidt

predicate in_range16(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def24 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq22 : tokenidt, tokenidt -> bool

logic dummy35 : tokenidt

type tokenidt__ref = { tokenidt__content : tokenidt
}

function tokenidt__ref___projection(a: tokenidt__ref) : tokenidt =
  (a).tokenidt__content

type tryt

predicate in_range17(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq27 : int, int -> bool

axiom bool_eq_def25 :
  (forall x:int. forall y:int [bool_eq27(x, y)]. (((x = y) -> (bool_eq27(x,
  y) = true)) and ((not (x = y)) -> (bool_eq27(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq23 : tryt, tryt -> bool

logic dummy36 : tryt

type tryt__ref = { tryt__content : tryt
}

function tryt__ref___projection(a: tryt__ref) : tryt = (a).tryt__content

type namecountt

predicate in_range18(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def26 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq24 : namecountt, namecountt -> bool

logic dummy37 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep11 : namecountt -> int

logic of_rep11 : int -> namecountt

axiom inversion_axiom11 :
  (forall x:namecountt [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:namecountt [to_rep11(x)]. in_range18(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range18(x) ->
  (to_rep11(of_rep11(x)) = x)))

type character

predicate in_range19(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq29 : int, int -> bool

axiom bool_eq_def27 :
  (forall x:int. forall y:int [bool_eq29(x, y)]. (((x = y) -> (bool_eq29(x,
  y) = true)) and ((not (x = y)) -> (bool_eq29(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE19 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check19 : us_image -> prop

logic attr__ATTRIBUTE_VALUE19 : us_image -> int

logic user_eq25 : character, character -> bool

logic dummy38 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep12 : character -> int

logic of_rep12 : int -> character

axiom inversion_axiom12 :
  (forall x:character [to_rep12(x)]. (of_rep12(to_rep12(x)) = x))

axiom range_axiom12 :
  (forall x:character [to_rep12(x)]. in_range19(to_rep12(x)))

axiom coerce_axiom12 :
  (forall x:int [to_rep12(of_rep12(x))]. (in_range19(x) ->
  (to_rep12(of_rep12(x)) = x)))

type map__ref4 = { map__content4 : (int,character) farray
}

logic slide4 : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq4 :
  (forall a:(int,character) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> (int,character) farray

axiom concat_def4 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : character, int -> (int,character) farray

axiom singleton_def4 :
  (forall v:character.
  (forall i:int [(singleton4(v, i)[i])]. ((singleton4(v, i)[i]) = v)))

logic bool_eq30 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def28 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq30(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep12((a[temp___idx_78])) = to_rep12((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq30(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep12((a[temp___idx_78])) = to_rep12((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq30(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq30(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep12((a[temp___idx_78])) = to_rep12((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare3 : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq30(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((compare3(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq30(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep12((a[(i + 1)])) <  to_rep12((b[(j + 1)]))))))))))))

axiom compare_def_gt3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare3(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare3(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq30(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep12((b[(i + 1)])) <  to_rep12((a[(j + 1)]))))))))))))

logic dummy39 : (int,character) farray

logic value__size7 : int

logic object__size7 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment7 : int

logic object__alignment7 : (int,character) farray -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:(int,character) farray. (0 <= object__size7(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:(int,character) farray. (0 <= object__alignment7(a)))

logic user_eq26 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range20(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq31 : int, int -> bool

axiom bool_eq_def29 :
  (forall x:int. forall y:int [bool_eq31(x, y)]. (((x = y) -> (bool_eq31(x,
  y) = true)) and ((not (x = y)) -> (bool_eq31(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE20 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check20 : us_image -> prop

logic attr__ATTRIBUTE_VALUE20 : us_image -> int

logic user_eq27 : issueridt, issueridt -> bool

logic dummy40 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep13 : issueridt -> int

logic of_rep13 : int -> issueridt

axiom inversion_axiom13 :
  (forall x:issueridt [to_rep13(x)]. (of_rep13(to_rep13(x)) = x))

axiom range_axiom13 :
  (forall x:issueridt [to_rep13(x)]. in_range20(to_rep13(x)))

axiom coerce_axiom13 :
  (forall x:int [to_rep13(of_rep13(x))]. (in_range20(x) ->
  (to_rep13(of_rep13(x)) = x)))

type us_split_fields8 = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields8) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields8) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields8) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep5 = { us_split_fields9 : us_split_fields8
}

function us_rep___7__projection(a: us_rep5) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq32 : us_rep5, us_rep5 -> bool

axiom bool_eq_def30 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq32(a, b)].
  (((((to_rep13(((a).us_split_fields9).rec__cryptotypes__issuert__id) = to_rep13(((b).us_split_fields9).rec__cryptotypes__issuert__id)) and
  (to_rep11(((a).us_split_fields9).rec__cryptotypes__issuert__namelength) = to_rep11(((b).us_split_fields9).rec__cryptotypes__issuert__namelength))) and
  (bool_eq30(((a).us_split_fields9).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields9).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq32(a, b) = true)) and
  ((not (((to_rep13(((a).us_split_fields9).rec__cryptotypes__issuert__id) = to_rep13(((b).us_split_fields9).rec__cryptotypes__issuert__id)) and
  (to_rep11(((a).us_split_fields9).rec__cryptotypes__issuert__namelength) = to_rep11(((b).us_split_fields9).rec__cryptotypes__issuert__namelength))) and
  (bool_eq30(((a).us_split_fields9).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields9).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq32(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep5 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep5 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size8({ us_split_fields9 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment8({
  us_split_fields9 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq28 : us_rep5, us_rep5 -> bool

logic dummy41 : issueridt

logic dummy42 : namecountt

logic dummy43 : (int,character) farray

type issuert__ref = { issuert__content : us_rep5
}

function issuert__ref___projection(a: issuert__ref) : us_rep5 =
  (a).issuert__content

type us_split_fields10 = { rec__keystore__optionalprivatekeyt__ispresent :
bool; rec__keystore__optionalprivatekeyt__owner : us_rep5
}

function us_split_fields_IsPresent__projection(a: us_split_fields10) : bool =
  (a).rec__keystore__optionalprivatekeyt__ispresent

function us_split_fields_Owner__projection(a: us_split_fields10) : us_rep5 =
  (a).rec__keystore__optionalprivatekeyt__owner

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___14__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep6 = { us_split_fields11 : us_split_fields10
}

function us_rep___15__projection(a: us_rep6) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq33 : us_rep6, us_rep6 -> bool

axiom bool_eq_def31 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq33(a, b)].
  ((((((a).us_split_fields11).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields11).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq32(((a).us_split_fields11).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields11).rec__keystore__optionalprivatekeyt__owner) = true)) ->
  (bool_eq33(a, b) = true)) and
  ((not ((((a).us_split_fields11).rec__keystore__optionalprivatekeyt__ispresent = ((b).us_split_fields11).rec__keystore__optionalprivatekeyt__ispresent) and
  (bool_eq32(((a).us_split_fields11).rec__keystore__optionalprivatekeyt__owner,
  ((b).us_split_fields11).rec__keystore__optionalprivatekeyt__owner) = true))) ->
  (bool_eq33(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__size9({ us_split_fields11 =
  { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:bool. forall a1:issueridt. forall a2:namecountt.
  forall a3:(int,character) farray. (0 <= object__alignment9({
  us_split_fields11 = { rec__keystore__optionalprivatekeyt__ispresent = a;
  rec__keystore__optionalprivatekeyt__owner = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = a1; rec__cryptotypes__issuert__namelength =
  a2; rec__cryptotypes__issuert__name = a3 } } } })))

logic keystore__optionalprivatekeyt__ispresent__first__bit : int

logic keystore__optionalprivatekeyt__ispresent__last__bit : int

logic keystore__optionalprivatekeyt__ispresent__position : int

axiom keystore__optionalprivatekeyt__ispresent__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__first__bit)

axiom keystore__optionalprivatekeyt__ispresent__last__bit_axiom :
  (keystore__optionalprivatekeyt__ispresent__first__bit <  keystore__optionalprivatekeyt__ispresent__last__bit)

axiom keystore__optionalprivatekeyt__ispresent__position_axiom :
  (0 <= keystore__optionalprivatekeyt__ispresent__position)

logic keystore__optionalprivatekeyt__owner__first__bit : int

logic keystore__optionalprivatekeyt__owner__last__bit : int

logic keystore__optionalprivatekeyt__owner__position : int

axiom keystore__optionalprivatekeyt__owner__first__bit_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__first__bit)

axiom keystore__optionalprivatekeyt__owner__last__bit_axiom :
  (keystore__optionalprivatekeyt__owner__first__bit <  keystore__optionalprivatekeyt__owner__last__bit)

axiom keystore__optionalprivatekeyt__owner__position_axiom :
  (0 <= keystore__optionalprivatekeyt__owner__position)

logic user_eq29 : us_rep6, us_rep6 -> bool

logic dummy44 : bool

logic dummy45 : issueridt

logic dummy46 : namecountt

logic dummy47 : (int,character) farray

type optionalprivatekeyt__ref = { optionalprivatekeyt__content : us_rep6
}

function optionalprivatekeyt__ref___projection(a: optionalprivatekeyt__ref) : us_rep6 =
  (a).optionalprivatekeyt__content

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

type classt

predicate in_range21(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq34 : int, int -> bool

axiom bool_eq_def32 :
  (forall x:int. forall y:int [bool_eq34(x, y)]. (((x = y) -> (bool_eq34(x,
  y) = true)) and ((not (x = y)) -> (bool_eq34(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE21 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check21 : us_image -> prop

logic attr__ATTRIBUTE_VALUE21 : us_image -> int

logic user_eq30 : classt, classt -> bool

logic dummy48 : classt

type classt__ref = { classt__content : classt
}

function classt__ref___projection(a: classt__ref) : classt =
  (a).classt__content

logic to_rep14 : classt -> int

logic of_rep14 : int -> classt

axiom inversion_axiom14 :
  (forall x:classt [to_rep14(x)]. (of_rep14(to_rep14(x)) = x))

axiom range_axiom14 :
  (forall x:classt [to_rep14(x)]. in_range21(to_rep14(x)))

axiom coerce_axiom14 :
  (forall x:int [to_rep14(of_rep14(x))]. (in_range21(x) ->
  (to_rep14(of_rep14(x)) = x)))

type us_split_fields12 = { rec__privtypes__clearancet__class : classt
}

function us_split_fields_Class__projection(a: us_split_fields12) : classt =
  (a).rec__privtypes__clearancet__class

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep7 = { us_split_fields13 : us_split_fields12
}

function us_rep___projection(a: us_rep7) : us_split_fields12 =
  (a).us_split_fields13

logic bool_eq35 : us_rep7, us_rep7 -> bool

axiom bool_eq_def33 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq35(a, b)].
  (((to_rep14(((a).us_split_fields13).rec__privtypes__clearancet__class) = to_rep14(((b).us_split_fields13).rec__privtypes__clearancet__class)) ->
  (bool_eq35(a, b) = true)) and
  ((not (to_rep14(((a).us_split_fields13).rec__privtypes__clearancet__class) = to_rep14(((b).us_split_fields13).rec__privtypes__clearancet__class))) ->
  (bool_eq35(a, b) = false))))

logic value__size10 : int

logic object__size10 : us_rep7 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep7 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:classt. (0 <= object__size10({ us_split_fields13 = {
  rec__privtypes__clearancet__class = a } })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:classt. (0 <= object__alignment10({ us_split_fields13 = {
  rec__privtypes__clearancet__class = a } })))

logic privtypes__clearancet__class__first__bit : int

logic privtypes__clearancet__class__last__bit : int

logic privtypes__clearancet__class__position : int

axiom privtypes__clearancet__class__first__bit_axiom :
  (0 <= privtypes__clearancet__class__first__bit)

axiom privtypes__clearancet__class__last__bit_axiom :
  (privtypes__clearancet__class__first__bit <  privtypes__clearancet__class__last__bit)

axiom privtypes__clearancet__class__position_axiom :
  (0 <= privtypes__clearancet__class__position)

logic user_eq31 : us_rep7, us_rep7 -> bool

logic dummy49 : classt

type clearancet__ref = { clearancet__content : us_rep7
}

function clearancet__ref___projection(a: clearancet__ref) : us_rep7 =
  (a).clearancet__content

type algorithmt

predicate in_range22(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq36 : int, int -> bool

axiom bool_eq_def34 :
  (forall x:int. forall y:int [bool_eq36(x, y)]. (((x = y) -> (bool_eq36(x,
  y) = true)) and ((not (x = y)) -> (bool_eq36(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE22 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check22 : us_image -> prop

logic attr__ATTRIBUTE_VALUE22 : us_image -> int

logic user_eq32 : algorithmt, algorithmt -> bool

logic dummy50 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic to_rep15 : algorithmt -> int

logic of_rep15 : int -> algorithmt

axiom inversion_axiom15 :
  (forall x:algorithmt [to_rep15(x)]. (of_rep15(to_rep15(x)) = x))

axiom range_axiom15 :
  (forall x:algorithmt [to_rep15(x)]. in_range22(to_rep15(x)))

axiom coerce_axiom15 :
  (forall x:int [to_rep15(of_rep15(x))]. (in_range22(x) ->
  (to_rep15(of_rep15(x)) = x)))

type serialnumbert

predicate in_range23(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq37 : int, int -> bool

axiom bool_eq_def35 :
  (forall x:int. forall y:int [bool_eq37(x, y)]. (((x = y) -> (bool_eq37(x,
  y) = true)) and ((not (x = y)) -> (bool_eq37(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE23 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check23 : us_image -> prop

logic attr__ATTRIBUTE_VALUE23 : us_image -> int

logic user_eq33 : serialnumbert, serialnumbert -> bool

logic dummy51 : serialnumbert

type serialnumbert__ref = { serialnumbert__content : serialnumbert
}

function serialnumbert__ref___projection(a: serialnumbert__ref) : serialnumbert =
  (a).serialnumbert__content

logic to_rep16 : serialnumbert -> int

logic of_rep16 : int -> serialnumbert

axiom inversion_axiom16 :
  (forall x:serialnumbert [to_rep16(x)]. (of_rep16(to_rep16(x)) = x))

axiom range_axiom16 :
  (forall x:serialnumbert [to_rep16(x)]. in_range23(to_rep16(x)))

axiom coerce_axiom16 :
  (forall x:int [to_rep16(of_rep16(x))]. (in_range23(x) ->
  (to_rep16(of_rep16(x)) = x)))

type us_split_fields14 = { rec__certtypes__idt__issuer : us_rep5;
rec__certtypes__idt__serialnumber : serialnumbert
}

function us_split_fields_Issuer__projection(a: us_split_fields14) : us_rep5 =
  (a).rec__certtypes__idt__issuer

function us_split_fields_SerialNumber__projection(a: us_split_fields14) : serialnumbert =
  (a).rec__certtypes__idt__serialnumber

type us_split_fields__ref7 = { us_split_fields__content7 : us_split_fields14
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref7) : us_split_fields14 =
  (a).us_split_fields__content7

type us_rep8 = { us_split_fields15 : us_split_fields14
}

function us_rep___14__projection(a: us_rep8) : us_split_fields14 =
  (a).us_split_fields15

logic bool_eq38 : us_rep8, us_rep8 -> bool

axiom bool_eq_def36 :
  (forall a:us_rep8. forall b:us_rep8 [bool_eq38(a, b)].
  ((((bool_eq32(((a).us_split_fields15).rec__certtypes__idt__issuer,
  ((b).us_split_fields15).rec__certtypes__idt__issuer) = true) and
  (to_rep16(((a).us_split_fields15).rec__certtypes__idt__serialnumber) = to_rep16(((b).us_split_fields15).rec__certtypes__idt__serialnumber))) ->
  (bool_eq38(a, b) = true)) and
  ((not ((bool_eq32(((a).us_split_fields15).rec__certtypes__idt__issuer,
  ((b).us_split_fields15).rec__certtypes__idt__issuer) = true) and
  (to_rep16(((a).us_split_fields15).rec__certtypes__idt__serialnumber) = to_rep16(((b).us_split_fields15).rec__certtypes__idt__serialnumber)))) ->
  (bool_eq38(a, b) = false))))

logic value__size11 : int

logic object__size11 : us_rep8 -> int

logic value__alignment11 : int

logic object__alignment11 : us_rep8 -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__size11({ us_split_fields15 = { rec__certtypes__idt__issuer =
  { us_split_fields9 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__alignment11({ us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = a; rec__cryptotypes__issuert__namelength =
  a1; rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

logic certtypes__idt__issuer__first__bit : int

logic certtypes__idt__issuer__last__bit : int

logic certtypes__idt__issuer__position : int

axiom certtypes__idt__issuer__first__bit_axiom :
  (0 <= certtypes__idt__issuer__first__bit)

axiom certtypes__idt__issuer__last__bit_axiom :
  (certtypes__idt__issuer__first__bit <  certtypes__idt__issuer__last__bit)

axiom certtypes__idt__issuer__position_axiom :
  (0 <= certtypes__idt__issuer__position)

logic certtypes__idt__serialnumber__first__bit : int

logic certtypes__idt__serialnumber__last__bit : int

logic certtypes__idt__serialnumber__position : int

axiom certtypes__idt__serialnumber__first__bit_axiom :
  (0 <= certtypes__idt__serialnumber__first__bit)

axiom certtypes__idt__serialnumber__last__bit_axiom :
  (certtypes__idt__serialnumber__first__bit <  certtypes__idt__serialnumber__last__bit)

axiom certtypes__idt__serialnumber__position_axiom :
  (0 <= certtypes__idt__serialnumber__position)

logic user_eq34 : us_rep8, us_rep8 -> bool

logic dummy52 : issueridt

logic dummy53 : namecountt

logic dummy54 : (int,character) farray

logic dummy55 : serialnumbert

type idt__ref = { idt__content : us_rep8
}

function idt__ref___projection(a: idt__ref) : us_rep8 = (a).idt__content

type us_split_fields16 = { rec__cert__attr__auth__contentst__id : us_rep8;
rec__cert__attr__auth__contentst__notbefore : us_rep1;
rec__cert__attr__auth__contentst__notafter : us_rep1;
rec__cert__attr__auth__contentst__mechanism : algorithmt;
rec__cert__attr__auth__contentst__basecertid : us_rep8;
rec__cert__attr__auth__contentst__role : privileget;
rec__cert__attr__auth__contentst__clearance : us_rep7
}

function us_split_fields_ID__5__projection(a: us_split_fields16) : us_rep8 =
  (a).rec__cert__attr__auth__contentst__id

function us_split_fields_NotBefore__3__projection(a: us_split_fields16) : us_rep1 =
  (a).rec__cert__attr__auth__contentst__notbefore

function us_split_fields_NotAfter__3__projection(a: us_split_fields16) : us_rep1 =
  (a).rec__cert__attr__auth__contentst__notafter

function us_split_fields_Mechanism__3__projection(a: us_split_fields16) : algorithmt =
  (a).rec__cert__attr__auth__contentst__mechanism

function us_split_fields_BaseCertID__2__projection(a: us_split_fields16) : us_rep8 =
  (a).rec__cert__attr__auth__contentst__basecertid

function us_split_fields_Role__projection(a: us_split_fields16) : privileget =
  (a).rec__cert__attr__auth__contentst__role

function us_split_fields_Clearance__projection(a: us_split_fields16) : us_rep7 =
  (a).rec__cert__attr__auth__contentst__clearance

type us_split_fields__ref8 = { us_split_fields__content8 : us_split_fields16
}

function us_split_fields__ref___17__projection(a: us_split_fields__ref8) : us_split_fields16 =
  (a).us_split_fields__content8

type us_rep9 = { us_split_fields17 : us_split_fields16
}

function us_rep___18__projection(a: us_rep9) : us_split_fields16 =
  (a).us_split_fields17

logic bool_eq39 : us_rep9, us_rep9 -> bool

axiom bool_eq_def37 :
  (forall a:us_rep9. forall b:us_rep9 [bool_eq39(a, b)].
  (((((((((bool_eq38(((a).us_split_fields17).rec__cert__attr__auth__contentst__id,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__id) = true) and
  (bool_eq13(((a).us_split_fields17).rec__cert__attr__auth__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__notbefore) = true)) and
  (bool_eq13(((a).us_split_fields17).rec__cert__attr__auth__contentst__notafter,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__notafter) = true)) and
  (to_rep15(((a).us_split_fields17).rec__cert__attr__auth__contentst__mechanism) = to_rep15(((b).us_split_fields17).rec__cert__attr__auth__contentst__mechanism))) and
  (bool_eq38(((a).us_split_fields17).rec__cert__attr__auth__contentst__basecertid,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__basecertid) = true)) and
  (to_rep(((a).us_split_fields17).rec__cert__attr__auth__contentst__role) = to_rep(((b).us_split_fields17).rec__cert__attr__auth__contentst__role))) and
  (bool_eq35(((a).us_split_fields17).rec__cert__attr__auth__contentst__clearance,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__clearance) = true)) ->
  (bool_eq39(a, b) = true)) and
  ((not (((((((bool_eq38(((a).us_split_fields17).rec__cert__attr__auth__contentst__id,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__id) = true) and
  (bool_eq13(((a).us_split_fields17).rec__cert__attr__auth__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__notbefore) = true)) and
  (bool_eq13(((a).us_split_fields17).rec__cert__attr__auth__contentst__notafter,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__notafter) = true)) and
  (to_rep15(((a).us_split_fields17).rec__cert__attr__auth__contentst__mechanism) = to_rep15(((b).us_split_fields17).rec__cert__attr__auth__contentst__mechanism))) and
  (bool_eq38(((a).us_split_fields17).rec__cert__attr__auth__contentst__basecertid,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__basecertid) = true)) and
  (to_rep(((a).us_split_fields17).rec__cert__attr__auth__contentst__role) = to_rep(((b).us_split_fields17).rec__cert__attr__auth__contentst__role))) and
  (bool_eq35(((a).us_split_fields17).rec__cert__attr__auth__contentst__clearance,
  ((b).us_split_fields17).rec__cert__attr__auth__contentst__clearance) = true))) ->
  (bool_eq39(a, b) = false))))

logic value__size12 : int

logic object__size12 : us_rep9 -> int

logic value__alignment12 : int

logic object__alignment12 : us_rep9 -> int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 : (forall a:us_rep9. (0 <= object__size12(a)))

axiom value__alignment_axiom12 : (0 <= value__alignment12)

axiom object__alignment_axiom12 :
  (forall a:us_rep9. (0 <= object__alignment12(a)))

logic cert__attr__auth__contentst__id__first__bit : int

logic cert__attr__auth__contentst__id__last__bit : int

logic cert__attr__auth__contentst__id__position : int

axiom cert__attr__auth__contentst__id__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__id__first__bit)

axiom cert__attr__auth__contentst__id__last__bit_axiom :
  (cert__attr__auth__contentst__id__first__bit <  cert__attr__auth__contentst__id__last__bit)

axiom cert__attr__auth__contentst__id__position_axiom :
  (0 <= cert__attr__auth__contentst__id__position)

logic cert__attr__auth__contentst__notbefore__first__bit : int

logic cert__attr__auth__contentst__notbefore__last__bit : int

logic cert__attr__auth__contentst__notbefore__position : int

axiom cert__attr__auth__contentst__notbefore__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__notbefore__first__bit)

axiom cert__attr__auth__contentst__notbefore__last__bit_axiom :
  (cert__attr__auth__contentst__notbefore__first__bit <  cert__attr__auth__contentst__notbefore__last__bit)

axiom cert__attr__auth__contentst__notbefore__position_axiom :
  (0 <= cert__attr__auth__contentst__notbefore__position)

logic cert__attr__auth__contentst__notafter__first__bit : int

logic cert__attr__auth__contentst__notafter__last__bit : int

logic cert__attr__auth__contentst__notafter__position : int

axiom cert__attr__auth__contentst__notafter__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__notafter__first__bit)

axiom cert__attr__auth__contentst__notafter__last__bit_axiom :
  (cert__attr__auth__contentst__notafter__first__bit <  cert__attr__auth__contentst__notafter__last__bit)

axiom cert__attr__auth__contentst__notafter__position_axiom :
  (0 <= cert__attr__auth__contentst__notafter__position)

logic cert__attr__auth__contentst__mechanism__first__bit : int

logic cert__attr__auth__contentst__mechanism__last__bit : int

logic cert__attr__auth__contentst__mechanism__position : int

axiom cert__attr__auth__contentst__mechanism__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__mechanism__first__bit)

axiom cert__attr__auth__contentst__mechanism__last__bit_axiom :
  (cert__attr__auth__contentst__mechanism__first__bit <  cert__attr__auth__contentst__mechanism__last__bit)

axiom cert__attr__auth__contentst__mechanism__position_axiom :
  (0 <= cert__attr__auth__contentst__mechanism__position)

logic cert__attr__auth__contentst__basecertid__first__bit : int

logic cert__attr__auth__contentst__basecertid__last__bit : int

logic cert__attr__auth__contentst__basecertid__position : int

axiom cert__attr__auth__contentst__basecertid__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__basecertid__first__bit)

axiom cert__attr__auth__contentst__basecertid__last__bit_axiom :
  (cert__attr__auth__contentst__basecertid__first__bit <  cert__attr__auth__contentst__basecertid__last__bit)

axiom cert__attr__auth__contentst__basecertid__position_axiom :
  (0 <= cert__attr__auth__contentst__basecertid__position)

logic cert__attr__auth__contentst__role__first__bit : int

logic cert__attr__auth__contentst__role__last__bit : int

logic cert__attr__auth__contentst__role__position : int

axiom cert__attr__auth__contentst__role__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__role__first__bit)

axiom cert__attr__auth__contentst__role__last__bit_axiom :
  (cert__attr__auth__contentst__role__first__bit <  cert__attr__auth__contentst__role__last__bit)

axiom cert__attr__auth__contentst__role__position_axiom :
  (0 <= cert__attr__auth__contentst__role__position)

logic cert__attr__auth__contentst__clearance__first__bit : int

logic cert__attr__auth__contentst__clearance__last__bit : int

logic cert__attr__auth__contentst__clearance__position : int

axiom cert__attr__auth__contentst__clearance__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__clearance__first__bit)

axiom cert__attr__auth__contentst__clearance__last__bit_axiom :
  (cert__attr__auth__contentst__clearance__first__bit <  cert__attr__auth__contentst__clearance__last__bit)

axiom cert__attr__auth__contentst__clearance__position_axiom :
  (0 <= cert__attr__auth__contentst__clearance__position)

logic user_eq35 : us_rep9, us_rep9 -> bool

logic dummy56 : issueridt

logic dummy57 : namecountt

logic dummy58 : (int,character) farray

logic dummy59 : serialnumbert

logic dummy60 : yearst

logic dummy61 : monthst

logic dummy62 : dayst

logic dummy63 : millisecst

logic dummy64 : yearst

logic dummy65 : monthst

logic dummy66 : dayst

logic dummy67 : millisecst

logic dummy68 : algorithmt

logic dummy69 : issueridt

logic dummy70 : namecountt

logic dummy71 : (int,character) farray

logic dummy72 : serialnumbert

logic dummy73 : privileget

logic dummy74 : classt

type contentst__ref = { contentst__content : us_rep9
}

function contentst__ref___3__projection(a: contentst__ref) : us_rep9 =
  (a).contentst__content

type us_split_fields18 = { rec__admintoken__validauthcertt__valid : bool;
rec__admintoken__validauthcertt__contents : us_rep9
}

function us_split_fields_Valid__projection(a: us_split_fields18) : bool =
  (a).rec__admintoken__validauthcertt__valid

function us_split_fields_Contents__projection(a: us_split_fields18) : us_rep9 =
  (a).rec__admintoken__validauthcertt__contents

type us_split_fields__ref9 = { us_split_fields__content9 : us_split_fields18
}

function us_split_fields__ref___19__projection(a: us_split_fields__ref9) : us_split_fields18 =
  (a).us_split_fields__content9

type us_rep10 = { us_split_fields19 : us_split_fields18
}

function us_rep___20__projection(a: us_rep10) : us_split_fields18 =
  (a).us_split_fields19

logic bool_eq40 : us_rep10, us_rep10 -> bool

axiom bool_eq_def38 :
  (forall a:us_rep10. forall b:us_rep10 [bool_eq40(a, b)].
  ((((((a).us_split_fields19).rec__admintoken__validauthcertt__valid = ((b).us_split_fields19).rec__admintoken__validauthcertt__valid) and
  (bool_eq39(((a).us_split_fields19).rec__admintoken__validauthcertt__contents,
  ((b).us_split_fields19).rec__admintoken__validauthcertt__contents) = true)) ->
  (bool_eq40(a, b) = true)) and
  ((not ((((a).us_split_fields19).rec__admintoken__validauthcertt__valid = ((b).us_split_fields19).rec__admintoken__validauthcertt__valid) and
  (bool_eq39(((a).us_split_fields19).rec__admintoken__validauthcertt__contents,
  ((b).us_split_fields19).rec__admintoken__validauthcertt__contents) = true))) ->
  (bool_eq40(a, b) = false))))

logic value__size13 : int

logic object__size13 : us_rep10 -> int

logic value__alignment13 : int

logic object__alignment13 : us_rep10 -> int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 : (forall a:us_rep10. (0 <= object__size13(a)))

axiom value__alignment_axiom13 : (0 <= value__alignment13)

axiom object__alignment_axiom13 :
  (forall a:us_rep10. (0 <= object__alignment13(a)))

logic admintoken__validauthcertt__valid__first__bit : int

logic admintoken__validauthcertt__valid__last__bit : int

logic admintoken__validauthcertt__valid__position : int

axiom admintoken__validauthcertt__valid__first__bit_axiom :
  (0 <= admintoken__validauthcertt__valid__first__bit)

axiom admintoken__validauthcertt__valid__last__bit_axiom :
  (admintoken__validauthcertt__valid__first__bit <  admintoken__validauthcertt__valid__last__bit)

axiom admintoken__validauthcertt__valid__position_axiom :
  (0 <= admintoken__validauthcertt__valid__position)

logic admintoken__validauthcertt__contents__first__bit : int

logic admintoken__validauthcertt__contents__last__bit : int

logic admintoken__validauthcertt__contents__position : int

axiom admintoken__validauthcertt__contents__first__bit_axiom :
  (0 <= admintoken__validauthcertt__contents__first__bit)

axiom admintoken__validauthcertt__contents__last__bit_axiom :
  (admintoken__validauthcertt__contents__first__bit <  admintoken__validauthcertt__contents__last__bit)

axiom admintoken__validauthcertt__contents__position_axiom :
  (0 <= admintoken__validauthcertt__contents__position)

logic user_eq36 : us_rep10, us_rep10 -> bool

logic dummy75 : bool

logic dummy76 : issueridt

logic dummy77 : namecountt

logic dummy78 : (int,character) farray

logic dummy79 : serialnumbert

logic dummy80 : yearst

logic dummy81 : monthst

logic dummy82 : dayst

logic dummy83 : millisecst

logic dummy84 : yearst

logic dummy85 : monthst

logic dummy86 : dayst

logic dummy87 : millisecst

logic dummy88 : algorithmt

logic dummy89 : issueridt

logic dummy90 : namecountt

logic dummy91 : (int,character) farray

logic dummy92 : serialnumbert

logic dummy93 : privileget

logic dummy94 : classt

type validauthcertt__ref = { validauthcertt__content : us_rep10
}

function validauthcertt__ref___projection(a: validauthcertt__ref) : us_rep10 =
  (a).validauthcertt__content

logic attr__ATTRIBUTE_ADDRESS9 : int

type keyidt

predicate in_range24(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq41 : int, int -> bool

axiom bool_eq_def39 :
  (forall x:int. forall y:int [bool_eq41(x, y)]. (((x = y) -> (bool_eq41(x,
  y) = true)) and ((not (x = y)) -> (bool_eq41(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE24 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check24 : us_image -> prop

logic attr__ATTRIBUTE_VALUE24 : us_image -> int

logic user_eq37 : keyidt, keyidt -> bool

logic dummy95 : keyidt

type keyidt__ref = { keyidt__content : keyidt
}

function keyidt__ref___projection(a: keyidt__ref) : keyidt =
  (a).keyidt__content

logic to_rep17 : keyidt -> int

logic of_rep17 : int -> keyidt

axiom inversion_axiom17 :
  (forall x:keyidt [to_rep17(x)]. (of_rep17(to_rep17(x)) = x))

axiom range_axiom17 :
  (forall x:keyidt [to_rep17(x)]. in_range24(to_rep17(x)))

axiom coerce_axiom17 :
  (forall x:int [to_rep17(of_rep17(x))]. (in_range24(x) ->
  (to_rep17(of_rep17(x)) = x)))

type keylengtht

predicate in_range25(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq42 : int, int -> bool

axiom bool_eq_def40 :
  (forall x:int. forall y:int [bool_eq42(x, y)]. (((x = y) -> (bool_eq42(x,
  y) = true)) and ((not (x = y)) -> (bool_eq42(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE25 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check25 : us_image -> prop

logic attr__ATTRIBUTE_VALUE25 : us_image -> int

logic user_eq38 : keylengtht, keylengtht -> bool

logic dummy96 : keylengtht

type keylengtht__ref = { keylengtht__content : keylengtht
}

function keylengtht__ref___projection(a: keylengtht__ref) : keylengtht =
  (a).keylengtht__content

logic to_rep18 : keylengtht -> int

logic of_rep18 : int -> keylengtht

axiom inversion_axiom18 :
  (forall x:keylengtht [to_rep18(x)]. (of_rep18(to_rep18(x)) = x))

axiom range_axiom18 :
  (forall x:keylengtht [to_rep18(x)]. in_range25(to_rep18(x)))

axiom coerce_axiom18 :
  (forall x:int [to_rep18(of_rep18(x))]. (in_range25(x) ->
  (to_rep18(of_rep18(x)) = x)))

type us_split_fields20 = { rec__cryptotypes__keypartt__algorithmid :
algorithmt; rec__cryptotypes__keypartt__keyid : keyidt;
rec__cryptotypes__keypartt__keylength : keylengtht
}

function us_split_fields_AlgorithmID__projection(a: us_split_fields20) : algorithmt =
  (a).rec__cryptotypes__keypartt__algorithmid

function us_split_fields_KeyID__projection(a: us_split_fields20) : keyidt =
  (a).rec__cryptotypes__keypartt__keyid

function us_split_fields_KeyLength__projection(a: us_split_fields20) : keylengtht =
  (a).rec__cryptotypes__keypartt__keylength

type us_split_fields__ref10 = { us_split_fields__content10 :
us_split_fields20
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref10) : us_split_fields20 =
  (a).us_split_fields__content10

type us_rep11 = { us_split_fields21 : us_split_fields20
}

function us_rep___8__projection(a: us_rep11) : us_split_fields20 =
  (a).us_split_fields21

logic bool_eq43 : us_rep11, us_rep11 -> bool

axiom bool_eq_def41 :
  (forall a:us_rep11. forall b:us_rep11 [bool_eq43(a, b)].
  (((((to_rep15(((a).us_split_fields21).rec__cryptotypes__keypartt__algorithmid) = to_rep15(((b).us_split_fields21).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep17(((a).us_split_fields21).rec__cryptotypes__keypartt__keyid) = to_rep17(((b).us_split_fields21).rec__cryptotypes__keypartt__keyid))) and
  (to_rep18(((a).us_split_fields21).rec__cryptotypes__keypartt__keylength) = to_rep18(((b).us_split_fields21).rec__cryptotypes__keypartt__keylength))) ->
  (bool_eq43(a, b) = true)) and
  ((not (((to_rep15(((a).us_split_fields21).rec__cryptotypes__keypartt__algorithmid) = to_rep15(((b).us_split_fields21).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep17(((a).us_split_fields21).rec__cryptotypes__keypartt__keyid) = to_rep17(((b).us_split_fields21).rec__cryptotypes__keypartt__keyid))) and
  (to_rep18(((a).us_split_fields21).rec__cryptotypes__keypartt__keylength) = to_rep18(((b).us_split_fields21).rec__cryptotypes__keypartt__keylength)))) ->
  (bool_eq43(a, b) = false))))

logic value__size14 : int

logic object__size14 : us_rep11 -> int

logic value__alignment14 : int

logic object__alignment14 : us_rep11 -> int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__size14({ us_split_fields21 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

axiom value__alignment_axiom14 : (0 <= value__alignment14)

axiom object__alignment_axiom14 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__alignment14({ us_split_fields21 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

logic cryptotypes__keypartt__algorithmid__first__bit : int

logic cryptotypes__keypartt__algorithmid__last__bit : int

logic cryptotypes__keypartt__algorithmid__position : int

axiom cryptotypes__keypartt__algorithmid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__first__bit)

axiom cryptotypes__keypartt__algorithmid__last__bit_axiom :
  (cryptotypes__keypartt__algorithmid__first__bit <  cryptotypes__keypartt__algorithmid__last__bit)

axiom cryptotypes__keypartt__algorithmid__position_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__position)

logic cryptotypes__keypartt__keyid__first__bit : int

logic cryptotypes__keypartt__keyid__last__bit : int

logic cryptotypes__keypartt__keyid__position : int

axiom cryptotypes__keypartt__keyid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keyid__first__bit)

axiom cryptotypes__keypartt__keyid__last__bit_axiom :
  (cryptotypes__keypartt__keyid__first__bit <  cryptotypes__keypartt__keyid__last__bit)

axiom cryptotypes__keypartt__keyid__position_axiom :
  (0 <= cryptotypes__keypartt__keyid__position)

logic cryptotypes__keypartt__keylength__first__bit : int

logic cryptotypes__keypartt__keylength__last__bit : int

logic cryptotypes__keypartt__keylength__position : int

axiom cryptotypes__keypartt__keylength__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keylength__first__bit)

axiom cryptotypes__keypartt__keylength__last__bit_axiom :
  (cryptotypes__keypartt__keylength__first__bit <  cryptotypes__keypartt__keylength__last__bit)

axiom cryptotypes__keypartt__keylength__position_axiom :
  (0 <= cryptotypes__keypartt__keylength__position)

logic user_eq39 : us_rep11, us_rep11 -> bool

logic dummy97 : algorithmt

logic dummy98 : keyidt

logic dummy99 : keylengtht

type keypartt__ref = { keypartt__content : us_rep11
}

function keypartt__ref___projection(a: keypartt__ref) : us_rep11 =
  (a).keypartt__content

type us_split_fields22 = { rec__cert__id__contentst__id : us_rep8;
rec__cert__id__contentst__notbefore : us_rep1;
rec__cert__id__contentst__notafter : us_rep1;
rec__cert__id__contentst__mechanism : algorithmt;
rec__cert__id__contentst__subject : us_rep5;
rec__cert__id__contentst__subjectpublickey : us_rep11
}

function us_split_fields_ID__6__projection(a: us_split_fields22) : us_rep8 =
  (a).rec__cert__id__contentst__id

function us_split_fields_NotBefore__4__projection(a: us_split_fields22) : us_rep1 =
  (a).rec__cert__id__contentst__notbefore

function us_split_fields_NotAfter__4__projection(a: us_split_fields22) : us_rep1 =
  (a).rec__cert__id__contentst__notafter

function us_split_fields_Mechanism__4__projection(a: us_split_fields22) : algorithmt =
  (a).rec__cert__id__contentst__mechanism

function us_split_fields_Subject__projection(a: us_split_fields22) : us_rep5 =
  (a).rec__cert__id__contentst__subject

function us_split_fields_SubjectPublicKey__projection(a: us_split_fields22) : us_rep11 =
  (a).rec__cert__id__contentst__subjectpublickey

type us_split_fields__ref11 = { us_split_fields__content11 :
us_split_fields22
}

function us_split_fields__ref___18__projection(a: us_split_fields__ref11) : us_split_fields22 =
  (a).us_split_fields__content11

type us_rep12 = { us_split_fields23 : us_split_fields22
}

function us_rep___19__projection(a: us_rep12) : us_split_fields22 =
  (a).us_split_fields23

logic bool_eq44 : us_rep12, us_rep12 -> bool

axiom bool_eq_def42 :
  (forall a:us_rep12. forall b:us_rep12 [bool_eq44(a, b)].
  ((((((((bool_eq38(((a).us_split_fields23).rec__cert__id__contentst__id,
  ((b).us_split_fields23).rec__cert__id__contentst__id) = true) and
  (bool_eq13(((a).us_split_fields23).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields23).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq13(((a).us_split_fields23).rec__cert__id__contentst__notafter,
  ((b).us_split_fields23).rec__cert__id__contentst__notafter) = true)) and
  (to_rep15(((a).us_split_fields23).rec__cert__id__contentst__mechanism) = to_rep15(((b).us_split_fields23).rec__cert__id__contentst__mechanism))) and
  (bool_eq32(((a).us_split_fields23).rec__cert__id__contentst__subject,
  ((b).us_split_fields23).rec__cert__id__contentst__subject) = true)) and
  (bool_eq43(((a).us_split_fields23).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields23).rec__cert__id__contentst__subjectpublickey) = true)) ->
  (bool_eq44(a, b) = true)) and
  ((not ((((((bool_eq38(((a).us_split_fields23).rec__cert__id__contentst__id,
  ((b).us_split_fields23).rec__cert__id__contentst__id) = true) and
  (bool_eq13(((a).us_split_fields23).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields23).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq13(((a).us_split_fields23).rec__cert__id__contentst__notafter,
  ((b).us_split_fields23).rec__cert__id__contentst__notafter) = true)) and
  (to_rep15(((a).us_split_fields23).rec__cert__id__contentst__mechanism) = to_rep15(((b).us_split_fields23).rec__cert__id__contentst__mechanism))) and
  (bool_eq32(((a).us_split_fields23).rec__cert__id__contentst__subject,
  ((b).us_split_fields23).rec__cert__id__contentst__subject) = true)) and
  (bool_eq43(((a).us_split_fields23).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields23).rec__cert__id__contentst__subjectpublickey) = true))) ->
  (bool_eq44(a, b) = false))))

logic value__size15 : int

logic object__size15 : us_rep12 -> int

logic value__alignment15 : int

logic object__alignment15 : us_rep12 -> int

axiom value__size_axiom15 : (0 <= value__size15)

axiom object__size_axiom15 : (forall a:us_rep12. (0 <= object__size15(a)))

axiom value__alignment_axiom15 : (0 <= value__alignment15)

axiom object__alignment_axiom15 :
  (forall a:us_rep12. (0 <= object__alignment15(a)))

logic cert__id__contentst__id__first__bit : int

logic cert__id__contentst__id__last__bit : int

logic cert__id__contentst__id__position : int

axiom cert__id__contentst__id__first__bit_axiom :
  (0 <= cert__id__contentst__id__first__bit)

axiom cert__id__contentst__id__last__bit_axiom :
  (cert__id__contentst__id__first__bit <  cert__id__contentst__id__last__bit)

axiom cert__id__contentst__id__position_axiom :
  (0 <= cert__id__contentst__id__position)

logic cert__id__contentst__notbefore__first__bit : int

logic cert__id__contentst__notbefore__last__bit : int

logic cert__id__contentst__notbefore__position : int

axiom cert__id__contentst__notbefore__first__bit_axiom :
  (0 <= cert__id__contentst__notbefore__first__bit)

axiom cert__id__contentst__notbefore__last__bit_axiom :
  (cert__id__contentst__notbefore__first__bit <  cert__id__contentst__notbefore__last__bit)

axiom cert__id__contentst__notbefore__position_axiom :
  (0 <= cert__id__contentst__notbefore__position)

logic cert__id__contentst__notafter__first__bit : int

logic cert__id__contentst__notafter__last__bit : int

logic cert__id__contentst__notafter__position : int

axiom cert__id__contentst__notafter__first__bit_axiom :
  (0 <= cert__id__contentst__notafter__first__bit)

axiom cert__id__contentst__notafter__last__bit_axiom :
  (cert__id__contentst__notafter__first__bit <  cert__id__contentst__notafter__last__bit)

axiom cert__id__contentst__notafter__position_axiom :
  (0 <= cert__id__contentst__notafter__position)

logic cert__id__contentst__mechanism__first__bit : int

logic cert__id__contentst__mechanism__last__bit : int

logic cert__id__contentst__mechanism__position : int

axiom cert__id__contentst__mechanism__first__bit_axiom :
  (0 <= cert__id__contentst__mechanism__first__bit)

axiom cert__id__contentst__mechanism__last__bit_axiom :
  (cert__id__contentst__mechanism__first__bit <  cert__id__contentst__mechanism__last__bit)

axiom cert__id__contentst__mechanism__position_axiom :
  (0 <= cert__id__contentst__mechanism__position)

logic cert__id__contentst__subject__first__bit : int

logic cert__id__contentst__subject__last__bit : int

logic cert__id__contentst__subject__position : int

axiom cert__id__contentst__subject__first__bit_axiom :
  (0 <= cert__id__contentst__subject__first__bit)

axiom cert__id__contentst__subject__last__bit_axiom :
  (cert__id__contentst__subject__first__bit <  cert__id__contentst__subject__last__bit)

axiom cert__id__contentst__subject__position_axiom :
  (0 <= cert__id__contentst__subject__position)

logic cert__id__contentst__subjectpublickey__first__bit : int

logic cert__id__contentst__subjectpublickey__last__bit : int

logic cert__id__contentst__subjectpublickey__position : int

axiom cert__id__contentst__subjectpublickey__first__bit_axiom :
  (0 <= cert__id__contentst__subjectpublickey__first__bit)

axiom cert__id__contentst__subjectpublickey__last__bit_axiom :
  (cert__id__contentst__subjectpublickey__first__bit <  cert__id__contentst__subjectpublickey__last__bit)

axiom cert__id__contentst__subjectpublickey__position_axiom :
  (0 <= cert__id__contentst__subjectpublickey__position)

logic user_eq40 : us_rep12, us_rep12 -> bool

logic dummy100 : issueridt

logic dummy101 : namecountt

logic dummy102 : (int,character) farray

logic dummy103 : serialnumbert

logic dummy104 : yearst

logic dummy105 : monthst

logic dummy106 : dayst

logic dummy107 : millisecst

logic dummy108 : yearst

logic dummy109 : monthst

logic dummy110 : dayst

logic dummy111 : millisecst

logic dummy112 : algorithmt

logic dummy113 : issueridt

logic dummy114 : namecountt

logic dummy115 : (int,character) farray

logic dummy116 : algorithmt

logic dummy117 : keyidt

logic dummy118 : keylengtht

type contentst__ref1 = { contentst__content1 : us_rep12
}

function contentst__ref___4__projection(a: contentst__ref1) : us_rep12 =
  (a).contentst__content1

type us_split_fields24 = { rec__admintoken__valididcertt__valid : bool;
rec__admintoken__valididcertt__contents : us_rep12
}

function us_split_fields_Valid__2__projection(a: us_split_fields24) : bool =
  (a).rec__admintoken__valididcertt__valid

function us_split_fields_Contents__2__projection(a: us_split_fields24) : us_rep12 =
  (a).rec__admintoken__valididcertt__contents

type us_split_fields__ref12 = { us_split_fields__content12 :
us_split_fields24
}

function us_split_fields__ref___20__projection(a: us_split_fields__ref12) : us_split_fields24 =
  (a).us_split_fields__content12

type us_rep13 = { us_split_fields25 : us_split_fields24
}

function us_rep___21__projection(a: us_rep13) : us_split_fields24 =
  (a).us_split_fields25

logic bool_eq45 : us_rep13, us_rep13 -> bool

axiom bool_eq_def43 :
  (forall a:us_rep13. forall b:us_rep13 [bool_eq45(a, b)].
  ((((((a).us_split_fields25).rec__admintoken__valididcertt__valid = ((b).us_split_fields25).rec__admintoken__valididcertt__valid) and
  (bool_eq44(((a).us_split_fields25).rec__admintoken__valididcertt__contents,
  ((b).us_split_fields25).rec__admintoken__valididcertt__contents) = true)) ->
  (bool_eq45(a, b) = true)) and
  ((not ((((a).us_split_fields25).rec__admintoken__valididcertt__valid = ((b).us_split_fields25).rec__admintoken__valididcertt__valid) and
  (bool_eq44(((a).us_split_fields25).rec__admintoken__valididcertt__contents,
  ((b).us_split_fields25).rec__admintoken__valididcertt__contents) = true))) ->
  (bool_eq45(a, b) = false))))

logic value__size16 : int

logic object__size16 : us_rep13 -> int

logic value__alignment16 : int

logic object__alignment16 : us_rep13 -> int

axiom value__size_axiom16 : (0 <= value__size16)

axiom object__size_axiom16 : (forall a:us_rep13. (0 <= object__size16(a)))

axiom value__alignment_axiom16 : (0 <= value__alignment16)

axiom object__alignment_axiom16 :
  (forall a:us_rep13. (0 <= object__alignment16(a)))

logic admintoken__valididcertt__valid__first__bit : int

logic admintoken__valididcertt__valid__last__bit : int

logic admintoken__valididcertt__valid__position : int

axiom admintoken__valididcertt__valid__first__bit_axiom :
  (0 <= admintoken__valididcertt__valid__first__bit)

axiom admintoken__valididcertt__valid__last__bit_axiom :
  (admintoken__valididcertt__valid__first__bit <  admintoken__valididcertt__valid__last__bit)

axiom admintoken__valididcertt__valid__position_axiom :
  (0 <= admintoken__valididcertt__valid__position)

logic admintoken__valididcertt__contents__first__bit : int

logic admintoken__valididcertt__contents__last__bit : int

logic admintoken__valididcertt__contents__position : int

axiom admintoken__valididcertt__contents__first__bit_axiom :
  (0 <= admintoken__valididcertt__contents__first__bit)

axiom admintoken__valididcertt__contents__last__bit_axiom :
  (admintoken__valididcertt__contents__first__bit <  admintoken__valididcertt__contents__last__bit)

axiom admintoken__valididcertt__contents__position_axiom :
  (0 <= admintoken__valididcertt__contents__position)

logic user_eq41 : us_rep13, us_rep13 -> bool

logic dummy119 : bool

logic dummy120 : issueridt

logic dummy121 : namecountt

logic dummy122 : (int,character) farray

logic dummy123 : serialnumbert

logic dummy124 : yearst

logic dummy125 : monthst

logic dummy126 : dayst

logic dummy127 : millisecst

logic dummy128 : yearst

logic dummy129 : monthst

logic dummy130 : dayst

logic dummy131 : millisecst

logic dummy132 : algorithmt

logic dummy133 : issueridt

logic dummy134 : namecountt

logic dummy135 : (int,character) farray

logic dummy136 : algorithmt

logic dummy137 : keyidt

logic dummy138 : keylengtht

type valididcertt__ref = { valididcertt__content : us_rep13
}

function valididcertt__ref___projection(a: valididcertt__ref) : us_rep13 =
  (a).valididcertt__content

logic attr__ATTRIBUTE_ADDRESS10 : int

logic theauthcertrole : int, us_private, int, int, us_split_fields18,
  us_split_fields24 -> int

logic theauthcertrole__function_guard : int, int, us_private, int, int,
  us_split_fields18, us_split_fields24 -> prop

logic therole : us_rep9 -> int

logic therole__function_guard : int, us_rep9 -> prop

axiom theauthcertrole__post_axiom :
  (forall admintoken__tokenpresence:int. forall admintoken__tokentry:int.
  forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [theauthcertrole(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)]. (((in_range1(admintoken__tokenpresence) and
  in_range17(admintoken__tokentry)) and in_range16(admintoken__tokenid)) ->
  in_range2(theauthcertrole(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)))))))

axiom theauthcertrole__def_axiom :
  (forall admintoken__tokenpresence:int. forall admintoken__tokentry:int.
  forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [theauthcertrole(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)]. (((in_range1(admintoken__tokenpresence) and
  in_range17(admintoken__tokentry)) and in_range16(admintoken__tokenid)) ->
  (theauthcertrole(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields) = therole((admintoken__authcert__fields).rec__admintoken__validauthcertt__contents)))))))

logic isgood : int, us_private, int, int, us_split_fields18,
  us_split_fields24 -> bool

logic isgood__function_guard : bool, int, us_private, int, int,
  us_split_fields18, us_split_fields24 -> prop

axiom isgood__post_axiom : true

axiom isgood__def_axiom :
  (forall admintoken__tokenpresence:int. forall admintoken__tokentry:int.
  forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [isgood(admintoken__tokenpresence, admintoken__state, admintoken__tokentry,
  admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)]. ((isgood(admintoken__tokenpresence,
  admintoken__state, admintoken__tokentry, admintoken__tokenid,
  admintoken__authcert__fields, admintoken__idcert__fields) = true) <->
  ((admintoken__idcert__fields).rec__admintoken__valididcertt__valid = true))))))

logic authcertvalid : int, us_private, int, int, us_split_fields18,
  us_split_fields24 -> bool

logic authcertvalid__function_guard : bool, int, us_private, int, int,
  us_split_fields18, us_split_fields24 -> prop

axiom authcertvalid__post_axiom : true

axiom authcertvalid__def_axiom :
  (forall admintoken__tokenpresence:int. forall admintoken__tokentry:int.
  forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [authcertvalid(admintoken__tokenpresence, admintoken__state,
  admintoken__tokentry, admintoken__tokenid, admintoken__authcert__fields,
  admintoken__idcert__fields)]. ((authcertvalid(admintoken__tokenpresence,
  admintoken__state, admintoken__tokentry, admintoken__tokenid,
  admintoken__authcert__fields, admintoken__idcert__fields) = true) <->
  ((admintoken__authcert__fields).rec__admintoken__validauthcertt__valid = true))))))

type t

predicate in_range26(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq46 : int, int -> bool

axiom bool_eq_def44 :
  (forall x:int. forall y:int [bool_eq46(x, y)]. (((x = y) -> (bool_eq46(x,
  y) = true)) and ((not (x = y)) -> (bool_eq46(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE26 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check26 : us_image -> prop

logic attr__ATTRIBUTE_VALUE26 : us_image -> int

logic user_eq42 : t, t -> bool

logic dummy139 : t

type t__ref2 = { t__content2 : t
}

function t__ref___3__projection(a: t__ref2) : t = (a).t__content2

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic islocked : int, us_private, us_split_fields2 -> bool

logic islocked__function_guard : bool, int, us_private,
  us_split_fields2 -> prop

axiom islocked__post_axiom : true

axiom islocked__def_axiom :
  (forall latch__currentlatch:int.
  (forall latch__state:us_private.
  (forall latch__latchtimeout__fields:yearst.
  forall latch__latchtimeout__fields1:monthst.
  forall latch__latchtimeout__fields2:dayst.
  forall latch__latchtimeout__fields3:millisecst
  [islocked(latch__currentlatch, latch__state, { rec__clock__timet__year =
  latch__latchtimeout__fields; rec__clock__timet__month =
  latch__latchtimeout__fields1; rec__clock__timet__day =
  latch__latchtimeout__fields2; rec__clock__timet__millisec =
  latch__latchtimeout__fields3 })]. ((islocked(latch__currentlatch,
  latch__state, { rec__clock__timet__year = latch__latchtimeout__fields;
  rec__clock__timet__month = latch__latchtimeout__fields1;
  rec__clock__timet__day = latch__latchtimeout__fields2;
  rec__clock__timet__millisec = latch__latchtimeout__fields3 }) = true) <->
  (latch__currentlatch = 0)))))

logic alarm_timeout : us_private -> us_rep1

logic alarm_timeout__function_guard : us_rep1, us_private -> prop

axiom alarm_timeout__post_axiom : true

logic thecurrentdoor : us_private -> int

logic thecurrentdoor__function_guard : int, us_private -> prop

type t1

predicate in_range27(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq47 : int, int -> bool

axiom bool_eq_def45 :
  (forall x:int. forall y:int [bool_eq47(x, y)]. (((x = y) -> (bool_eq47(x,
  y) = true)) and ((not (x = y)) -> (bool_eq47(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE27 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check27 : us_image -> prop

logic attr__ATTRIBUTE_VALUE27 : us_image -> int

logic user_eq43 : t1, t1 -> bool

logic dummy140 : t1

type t__ref3 = { t__content3 : t1
}

function t__ref___4__projection(a: t__ref3) : t1 = (a).t__content3

axiom thecurrentdoor__post_axiom :
  (forall door__state:us_private [thecurrentdoor(door__state)].
  in_range27(thecurrentdoor(door__state)))

logic thedooralarm : us_private -> int

logic thedooralarm__function_guard : int, us_private -> prop

axiom thedooralarm__post_axiom :
  (forall door__state:us_private [thedooralarm(door__state)].
  in_range6(thedooralarm(door__state)))

type statust1

predicate in_range28(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq48 : int, int -> bool

axiom bool_eq_def46 :
  (forall x:int. forall y:int [bool_eq48(x, y)]. (((x = y) -> (bool_eq48(x,
  y) = true)) and ((not (x = y)) -> (bool_eq48(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE28 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check28 : us_image -> prop

logic attr__ATTRIBUTE_VALUE28 : us_image -> int

logic user_eq44 : statust1, statust1 -> bool

logic dummy141 : statust1

type statust__ref1 = { statust__content1 : statust1
}

function statust__ref___2__projection(a: statust__ref1) : statust1 =
  (a).statust__content1

logic attr__ATTRIBUTE_ADDRESS13 : int

logic statusisgotadmintoken : int -> bool

logic statusisgotadmintoken__function_guard : bool, int -> prop

axiom statusisgotadmintoken__post_axiom : true

axiom statusisgotadmintoken__def_axiom :
  (forall enclave__status:int [statusisgotadmintoken(enclave__status)].
  ((statusisgotadmintoken(enclave__status) = true) <->
  (enclave__status = 5)))

logic statusiswaitingremoveadmintokenfail : int -> bool

logic statusiswaitingremoveadmintokenfail__function_guard : bool, int -> prop

axiom statusiswaitingremoveadmintokenfail__post_axiom : true

axiom statusiswaitingremoveadmintokenfail__def_axiom :
  (forall enclave__status:int
  [statusiswaitingremoveadmintokenfail(enclave__status)].
  ((statusiswaitingremoveadmintokenfail(enclave__status) = true) <->
  (enclave__status = 4)))

logic statusiswaitingstartadminop : int -> bool

logic statusiswaitingstartadminop__function_guard : bool, int -> prop

axiom statusiswaitingstartadminop__post_axiom : true

axiom statusiswaitingstartadminop__def_axiom :
  (forall enclave__status:int [statusiswaitingstartadminop(enclave__status)].
  ((statusiswaitingstartadminop(enclave__status) = true) <->
  (enclave__status = 6)))

logic statusiswaitingfinishadminop : int -> bool

logic statusiswaitingfinishadminop__function_guard : bool, int -> prop

axiom statusiswaitingfinishadminop__post_axiom : true

axiom statusiswaitingfinishadminop__def_axiom :
  (forall enclave__status:int
  [statusiswaitingfinishadminop(enclave__status)].
  ((statusiswaitingfinishadminop(enclave__status) = true) <->
  (enclave__status = 7)))

logic statusisenclavequiescent : int -> bool

logic statusisenclavequiescent__function_guard : bool, int -> prop

axiom statusisenclavequiescent__post_axiom : true

axiom statusisenclavequiescent__def_axiom :
  (forall enclave__status:int [statusisenclavequiescent(enclave__status)].
  ((statusisenclavequiescent(enclave__status) = true) <->
  (enclave__status = 3)))

logic statusisshutdown : int -> bool

logic statusisshutdown__function_guard : bool, int -> prop

axiom statusisshutdown__post_axiom : true

axiom statusisshutdown__def_axiom :
  (forall enclave__status:int [statusisshutdown(enclave__status)].
  ((statusisshutdown(enclave__status) = true) <-> (enclave__status = 8)))

logic enrolmentisinprogress : int -> bool

logic enrolmentisinprogress__function_guard : bool, int -> prop

type enrolmentstates

predicate in_range29(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq49 : int, int -> bool

axiom bool_eq_def47 :
  (forall x:int. forall y:int [bool_eq49(x, y)]. (((x = y) -> (bool_eq49(x,
  y) = true)) and ((not (x = y)) -> (bool_eq49(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE29 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check29 : us_image -> prop

logic attr__ATTRIBUTE_VALUE29 : us_image -> int

logic user_eq45 : enrolmentstates, enrolmentstates -> bool

logic dummy142 : enrolmentstates

type enrolmentstates__ref = { enrolmentstates__content : enrolmentstates
}

function enrolmentstates__ref___projection(a: enrolmentstates__ref) : enrolmentstates =
  (a).enrolmentstates__content

axiom enrolmentisinprogress__post_axiom : true

axiom enrolmentisinprogress__def_axiom :
  (forall enclave__status:int [enrolmentisinprogress(enclave__status)].
  ((enrolmentisinprogress(enclave__status) = true) <->
  in_range29(enclave__status)))

logic currentadminactivitypossible : int, int, us_private, int, int,
  us_split_fields18, us_split_fields24 -> bool

logic currentadminactivitypossible__function_guard : bool, int, int,
  us_private, int, int, us_split_fields18, us_split_fields24 -> prop

logic currentadminactivitypossible1 : int, int, us_private, int, int,
  us_split_fields18, us_split_fields24 -> bool

logic currentadminactivitypossible__function_guard1 : bool, int, int,
  us_private, int, int, us_split_fields18, us_split_fields24 -> prop

type nonquiescentstates

predicate in_range30(x: int) = ((4 <= x) and (x <= 8))

logic bool_eq50 : int, int -> bool

axiom bool_eq_def48 :
  (forall x:int. forall y:int [bool_eq50(x, y)]. (((x = y) -> (bool_eq50(x,
  y) = true)) and ((not (x = y)) -> (bool_eq50(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE30 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check30 : us_image -> prop

logic attr__ATTRIBUTE_VALUE30 : us_image -> int

logic user_eq46 : nonquiescentstates, nonquiescentstates -> bool

logic dummy143 : nonquiescentstates

type nonquiescentstates__ref = { nonquiescentstates__content :
nonquiescentstates
}

function nonquiescentstates__ref___projection(a: nonquiescentstates__ref) : nonquiescentstates =
  (a).nonquiescentstates__content

axiom currentadminactivitypossible__post_axiom : true

axiom currentadminactivitypossible__post_refine_axiom :
  (forall enclave__status:int. forall admintoken__tokenpresence:int.
  forall admintoken__tokentry:int. forall admintoken__tokenid:int.
  (forall admintoken__state:us_private.
  (forall admintoken__authcert__fields:us_split_fields18.
  (forall admintoken__idcert__fields:us_split_fields24
  [currentadminactivitypossible1(enclave__status, admintoken__tokenpresence,
  admintoken__state, admintoken__tokentry, admintoken__tokenid,
  admintoken__authcert__fields, admintoken__idcert__fields)].
  ((((in_range28(enclave__status) and
  in_range1(admintoken__tokenpresence)) and
  in_range17(admintoken__tokentry)) and in_range16(admintoken__tokenid)) ->
  ((currentadminactivitypossible1(enclave__status, admintoken__tokenpresence,
  admintoken__state, admintoken__tokentry, admintoken__tokenid,
  admintoken__authcert__fields, admintoken__idcert__fields) = true) ->
  in_range30(enclave__status)))))))

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields5 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields5 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep8(usedlogfiles3)) and
  (numberlogentries = (((to_rep8(usedlogfiles3) - 1) * 1024) + to_rep9((logfileentries[currentlogfile])))))))))

axiom greaterthan__post_axiom : true

axiom greaterthan__def_axiom :
  (forall left:yearst. forall left1:monthst. forall left2:dayst.
  forall left3:millisecst. forall right:yearst. forall right1:monthst.
  forall right2:dayst. forall right3:millisecst [greaterthan({
  us_split_fields3 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  })]. ((greaterthan({ us_split_fields3 = { rec__clock__timet__year = left;
  rec__clock__timet__month = left1; rec__clock__timet__day = left2;
  rec__clock__timet__millisec = left3 } }, { us_split_fields3 = {
  rec__clock__timet__year = right; rec__clock__timet__month = right1;
  rec__clock__timet__day = right2; rec__clock__timet__millisec = right3 }
  }) = true) <-> ((((to_rep2(right) <  to_rep2(left)) or
  ((to_rep2(left) = to_rep2(right)) and
  (to_rep3(right1) <  to_rep3(left1)))) or
  (((to_rep2(left) = to_rep2(right)) and
  (to_rep3(left1) = to_rep3(right1))) and
  (to_rep4(right2) <  to_rep4(left2)))) or
  ((((to_rep2(left) = to_rep2(right)) and
  (to_rep3(left1) = to_rep3(right1))) and
  (to_rep4(left2) = to_rep4(right2))) and
  (to_rep5(right3) <  to_rep5(left3))))))

axiom therole__post_axiom :
  (forall contents:us_rep9 [therole(contents)]. in_range2(therole(contents)))

axiom therole__def_axiom :
  (forall contents:us_rep9 [therole(contents)].
  (therole(contents) = to_rep(((contents).us_split_fields17).rec__cert__attr__auth__contentst__role)))

logic currenttimevar__split_fields : yearst

logic currenttimevar__split_fields1 : monthst

logic currenttimevar__split_fields2 : dayst

logic currenttimevar__split_fields3 : millisecst

logic logfiles : (int,us_rep4) farray

logic logfilesstatus : (int,filestatust) farray

logic logfilestate__split_fields : logfileindext

logic logfilestate__split_fields1 : logentrycountt

logic logfilestate__split_fields2 : (int,logfileindext) farray

logic logfilestate__split_fields3 : logfileindext

logic logfilestate__split_fields4 : logfileindext

logic logfilestate__split_fields5 : logfilecountt

logic logfilestate__split_fields6 : (int,fileentrycountt) farray

logic auditalarm : int

logic auditsystemfault : bool

logic tokenpresence : int

logic tokentry : int

logic tokenid : int

logic authcert__split_fields : bool

logic authcert__split_fields1 : issueridt

logic authcert__split_fields2 : namecountt

logic authcert__split_fields3 : (int,character) farray

logic authcert__split_fields4 : serialnumbert

logic authcert__split_fields5 : yearst

logic authcert__split_fields6 : monthst

logic authcert__split_fields7 : dayst

logic authcert__split_fields8 : millisecst

logic authcert__split_fields9 : yearst

logic authcert__split_fields10 : monthst

logic authcert__split_fields11 : dayst

logic authcert__split_fields12 : millisecst

logic authcert__split_fields13 : algorithmt

logic authcert__split_fields14 : issueridt

logic authcert__split_fields15 : namecountt

logic authcert__split_fields16 : (int,character) farray

logic authcert__split_fields17 : serialnumbert

logic authcert__split_fields18 : privileget

logic authcert__split_fields19 : classt

logic idcert__split_fields : bool

logic idcert__split_fields1 : issueridt

logic idcert__split_fields2 : namecountt

logic idcert__split_fields3 : (int,character) farray

logic idcert__split_fields4 : serialnumbert

logic idcert__split_fields5 : yearst

logic idcert__split_fields6 : monthst

logic idcert__split_fields7 : dayst

logic idcert__split_fields8 : millisecst

logic idcert__split_fields9 : yearst

logic idcert__split_fields10 : monthst

logic idcert__split_fields11 : dayst

logic idcert__split_fields12 : millisecst

logic idcert__split_fields13 : algorithmt

logic idcert__split_fields14 : issueridt

logic idcert__split_fields15 : namecountt

logic idcert__split_fields16 : (int,character) farray

logic idcert__split_fields17 : algorithmt

logic idcert__split_fields18 : keyidt

logic idcert__split_fields19 : keylengtht

logic currentlatch : int

logic latchtimeout__split_fields : yearst

logic latchtimeout__split_fields1 : monthst

logic latchtimeout__split_fields2 : dayst

logic latchtimeout__split_fields3 : millisecst

logic theadmin__split_fields : privileget

logic theadmin__split_fields1 : opandnullt

logic status : int

logic localstatus : int

logic currenttime : us_private

logic state : us_private

logic filestate : us_private

logic filestate1 : us_private

logic state1 : us_private

logic state2 : us_private

logic status1 : us_private

logic state3 : us_private

logic state4 : us_private

logic state5 : us_private

logic state6 : us_private

logic writtenstate : us_private

logic output : us_private

logic state7 : us_private

logic state8 : us_private

logic o : int

logic o1 : int

logic o2 : bool

logic o3 : bool

logic o4 : int

logic o5 : bool

logic o6 : bool

logic o7 : bool

logic o8 : int

logic o9 : int

logic o10 : bool

logic o11 : int

logic o12 : int

logic o13 : bool

logic o14 : bool

logic o15 : bool

logic o16 : bool

logic o17 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : bool

logic o22 : bool

logic o23 : bool

logic o24 : bool

logic o25 : bool

logic o26 : bool

logic o27 : bool

logic o28 : bool

logic o29 : bool

logic o30 : bool

logic o31 : bool

logic o32 : int

logic o33 : int

logic o34 : bool

logic o35 : bool

logic o36 : bool

logic o37 : bool

logic o38 : bool

logic o39 : bool

logic o40 : int

logic o41 : bool

logic o42 : bool

logic o43 : bool

logic o44 : int

logic o45 : bool

logic o46 : bool

logic o47 : bool

logic o48 : int

logic o49 : bool

logic o50 : bool

logic o51 : bool

logic o52 : int

logic o53 : int

logic o54 : bool

logic o55 : bool

logic o56 : int

logic o57 : bool

logic o58 : bool

logic o59 : bool

logic o60 : int

logic o61 : int

logic o62 : bool

logic o63 : int

logic o64 : int

logic o65 : bool

logic o66 : bool

logic o67 : bool

logic o68 : bool

logic o69 : bool

logic o70 : bool

logic o71 : bool

logic o72 : bool

logic o73 : bool

logic o74 : bool

logic o75 : bool

logic o76 : int

logic o77 : bool

logic o78 : bool

logic o79 : bool

logic o80 : bool

logic o81 : bool

logic o82 : int

logic o83 : bool

logic o84 : bool

logic o85 : bool

logic logfiles1 : (int,us_rep4) farray

logic logfilesstatus1 : (int,filestatust) farray

logic logfilestate__split_fields7 : logfileindext

logic logfilestate__split_fields8 : logentrycountt

logic logfilestate__split_fields9 : (int,logfileindext) farray

logic logfilestate__split_fields10 : logfileindext

logic logfilestate__split_fields11 : logfileindext

logic logfilestate__split_fields12 : logfilecountt

logic logfilestate__split_fields13 : (int,fileentrycountt) farray

logic auditalarm1 : int

logic auditsystemfault1 : bool

logic tokenpresence1 : int

logic tokentry1 : int

logic tokenid1 : int

logic authcert__split_fields20 : bool

logic authcert__split_fields21 : issueridt

logic authcert__split_fields22 : namecountt

logic authcert__split_fields23 : (int,character) farray

logic authcert__split_fields24 : serialnumbert

logic authcert__split_fields25 : yearst

logic authcert__split_fields26 : monthst

logic authcert__split_fields27 : dayst

logic authcert__split_fields28 : millisecst

logic authcert__split_fields29 : yearst

logic authcert__split_fields30 : monthst

logic authcert__split_fields31 : dayst

logic authcert__split_fields32 : millisecst

logic authcert__split_fields33 : algorithmt

logic authcert__split_fields34 : issueridt

logic authcert__split_fields35 : namecountt

logic authcert__split_fields36 : (int,character) farray

logic authcert__split_fields37 : serialnumbert

logic authcert__split_fields38 : privileget

logic authcert__split_fields39 : classt

logic idcert__split_fields20 : bool

logic idcert__split_fields21 : issueridt

logic idcert__split_fields22 : namecountt

logic idcert__split_fields23 : (int,character) farray

logic idcert__split_fields24 : serialnumbert

logic idcert__split_fields25 : yearst

logic idcert__split_fields26 : monthst

logic idcert__split_fields27 : dayst

logic idcert__split_fields28 : millisecst

logic idcert__split_fields29 : yearst

logic idcert__split_fields30 : monthst

logic idcert__split_fields31 : dayst

logic idcert__split_fields32 : millisecst

logic idcert__split_fields33 : algorithmt

logic idcert__split_fields34 : issueridt

logic idcert__split_fields35 : namecountt

logic idcert__split_fields36 : (int,character) farray

logic idcert__split_fields37 : algorithmt

logic idcert__split_fields38 : keyidt

logic idcert__split_fields39 : keylengtht

logic currentlatch1 : int

logic latchtimeout__split_fields4 : yearst

logic latchtimeout__split_fields5 : monthst

logic latchtimeout__split_fields6 : dayst

logic latchtimeout__split_fields7 : millisecst

logic theadmin__split_fields2 : privileget

logic theadmin__split_fields3 : opandnullt

logic status2 : int

logic state9 : us_private

logic filestate2 : us_private

logic filestate3 : us_private

logic state10 : us_private

logic state11 : us_private

logic status3 : us_private

logic state12 : us_private

logic state13 : us_private

logic state14 : us_private

logic state15 : us_private

logic writtenstate1 : us_private

logic output1 : us_private

logic state16 : us_private

logic state17 : us_private

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : bool

logic result6 : int

logic localstatus1 : int

logic logfiles2 : (int,us_rep4) farray

logic logfilesstatus2 : (int,filestatust) farray

logic logfilestate__split_fields14 : logfileindext

logic logfilestate__split_fields15 : logentrycountt

logic logfilestate__split_fields16 : (int,logfileindext) farray

logic logfilestate__split_fields17 : logfileindext

logic logfilestate__split_fields18 : logfileindext

logic logfilestate__split_fields19 : logfilecountt

logic logfilestate__split_fields20 : (int,fileentrycountt) farray

logic auditalarm2 : int

logic auditsystemfault2 : bool

logic tokenpresence2 : int

logic tokentry2 : int

logic tokenid2 : int

logic authcert__split_fields40 : bool

logic authcert__split_fields41 : issueridt

logic authcert__split_fields42 : namecountt

logic authcert__split_fields43 : (int,character) farray

logic authcert__split_fields44 : serialnumbert

logic authcert__split_fields45 : yearst

logic authcert__split_fields46 : monthst

logic authcert__split_fields47 : dayst

logic authcert__split_fields48 : millisecst

logic authcert__split_fields49 : yearst

logic authcert__split_fields50 : monthst

logic authcert__split_fields51 : dayst

logic authcert__split_fields52 : millisecst

logic authcert__split_fields53 : algorithmt

logic authcert__split_fields54 : issueridt

logic authcert__split_fields55 : namecountt

logic authcert__split_fields56 : (int,character) farray

logic authcert__split_fields57 : serialnumbert

logic authcert__split_fields58 : privileget

logic authcert__split_fields59 : classt

logic idcert__split_fields40 : bool

logic idcert__split_fields41 : issueridt

logic idcert__split_fields42 : namecountt

logic idcert__split_fields43 : (int,character) farray

logic idcert__split_fields44 : serialnumbert

logic idcert__split_fields45 : yearst

logic idcert__split_fields46 : monthst

logic idcert__split_fields47 : dayst

logic idcert__split_fields48 : millisecst

logic idcert__split_fields49 : yearst

logic idcert__split_fields50 : monthst

logic idcert__split_fields51 : dayst

logic idcert__split_fields52 : millisecst

logic idcert__split_fields53 : algorithmt

logic idcert__split_fields54 : issueridt

logic idcert__split_fields55 : namecountt

logic idcert__split_fields56 : (int,character) farray

logic idcert__split_fields57 : algorithmt

logic idcert__split_fields58 : keyidt

logic idcert__split_fields59 : keylengtht

logic theadmin__split_fields4 : privileget

logic theadmin__split_fields5 : opandnullt

logic status4 : int

logic filestate4 : us_private

logic state18 : us_private

logic state19 : us_private

logic status5 : us_private

logic state20 : us_private

logic logfiles3 : (int,us_rep4) farray

logic logfilesstatus3 : (int,filestatust) farray

logic logfilestate__split_fields21 : logfileindext

logic logfilestate__split_fields22 : logentrycountt

logic logfilestate__split_fields23 : (int,logfileindext) farray

logic logfilestate__split_fields24 : logfileindext

logic logfilestate__split_fields25 : logfileindext

logic logfilestate__split_fields26 : logfilecountt

logic logfilestate__split_fields27 : (int,fileentrycountt) farray

logic auditalarm3 : int

logic auditsystemfault3 : bool

logic tokenpresence3 : int

logic tokentry3 : int

logic tokenid3 : int

logic authcert__split_fields60 : bool

logic authcert__split_fields61 : issueridt

logic authcert__split_fields62 : namecountt

logic authcert__split_fields63 : (int,character) farray

logic authcert__split_fields64 : serialnumbert

logic authcert__split_fields65 : yearst

logic authcert__split_fields66 : monthst

logic authcert__split_fields67 : dayst

logic authcert__split_fields68 : millisecst

logic authcert__split_fields69 : yearst

logic authcert__split_fields70 : monthst

logic authcert__split_fields71 : dayst

logic authcert__split_fields72 : millisecst

logic authcert__split_fields73 : algorithmt

logic authcert__split_fields74 : issueridt

logic authcert__split_fields75 : namecountt

logic authcert__split_fields76 : (int,character) farray

logic authcert__split_fields77 : serialnumbert

logic authcert__split_fields78 : privileget

logic authcert__split_fields79 : classt

logic idcert__split_fields60 : bool

logic idcert__split_fields61 : issueridt

logic idcert__split_fields62 : namecountt

logic idcert__split_fields63 : (int,character) farray

logic idcert__split_fields64 : serialnumbert

logic idcert__split_fields65 : yearst

logic idcert__split_fields66 : monthst

logic idcert__split_fields67 : dayst

logic idcert__split_fields68 : millisecst

logic idcert__split_fields69 : yearst

logic idcert__split_fields70 : monthst

logic idcert__split_fields71 : dayst

logic idcert__split_fields72 : millisecst

logic idcert__split_fields73 : algorithmt

logic idcert__split_fields74 : issueridt

logic idcert__split_fields75 : namecountt

logic idcert__split_fields76 : (int,character) farray

logic idcert__split_fields77 : algorithmt

logic idcert__split_fields78 : keyidt

logic idcert__split_fields79 : keylengtht

logic status6 : int

logic filestate5 : us_private

logic state21 : us_private

logic state22 : us_private

logic state23 : us_private

logic logfiles4 : (int,us_rep4) farray

logic logfilesstatus4 : (int,filestatust) farray

logic logfilestate__split_fields28 : logfileindext

logic logfilestate__split_fields29 : logentrycountt

logic logfilestate__split_fields30 : (int,logfileindext) farray

logic logfilestate__split_fields31 : logfileindext

logic logfilestate__split_fields32 : logfileindext

logic logfilestate__split_fields33 : logfilecountt

logic logfilestate__split_fields34 : (int,fileentrycountt) farray

logic auditalarm4 : int

logic auditsystemfault4 : bool

logic tokenpresence4 : int

logic tokentry4 : int

logic tokenid4 : int

logic authcert__split_fields80 : bool

logic authcert__split_fields81 : issueridt

logic authcert__split_fields82 : namecountt

logic authcert__split_fields83 : (int,character) farray

logic authcert__split_fields84 : serialnumbert

logic authcert__split_fields85 : yearst

logic authcert__split_fields86 : monthst

logic authcert__split_fields87 : dayst

logic authcert__split_fields88 : millisecst

logic authcert__split_fields89 : yearst

logic authcert__split_fields90 : monthst

logic authcert__split_fields91 : dayst

logic authcert__split_fields92 : millisecst

logic authcert__split_fields93 : algorithmt

logic authcert__split_fields94 : issueridt

logic authcert__split_fields95 : namecountt

logic authcert__split_fields96 : (int,character) farray

logic authcert__split_fields97 : serialnumbert

logic authcert__split_fields98 : privileget

logic authcert__split_fields99 : classt

logic idcert__split_fields80 : bool

logic idcert__split_fields81 : issueridt

logic idcert__split_fields82 : namecountt

logic idcert__split_fields83 : (int,character) farray

logic idcert__split_fields84 : serialnumbert

logic idcert__split_fields85 : yearst

logic idcert__split_fields86 : monthst

logic idcert__split_fields87 : dayst

logic idcert__split_fields88 : millisecst

logic idcert__split_fields89 : yearst

logic idcert__split_fields90 : monthst

logic idcert__split_fields91 : dayst

logic idcert__split_fields92 : millisecst

logic idcert__split_fields93 : algorithmt

logic idcert__split_fields94 : issueridt

logic idcert__split_fields95 : namecountt

logic idcert__split_fields96 : (int,character) farray

logic idcert__split_fields97 : algorithmt

logic idcert__split_fields98 : keyidt

logic idcert__split_fields99 : keylengtht

logic currentlatch2 : int

logic latchtimeout__split_fields8 : yearst

logic latchtimeout__split_fields9 : monthst

logic latchtimeout__split_fields10 : dayst

logic latchtimeout__split_fields11 : millisecst

logic theadmin__split_fields6 : privileget

logic theadmin__split_fields7 : opandnullt

logic status7 : int

logic state24 : us_private

logic filestate6 : us_private

logic filestate7 : us_private

logic state25 : us_private

logic state26 : us_private

logic state27 : us_private

logic state28 : us_private

logic state29 : us_private

logic state30 : us_private

logic writtenstate2 : us_private

logic output2 : us_private

logic state31 : us_private

logic state32 : us_private

logic logfiles5 : (int,us_rep4) farray

logic logfilesstatus5 : (int,filestatust) farray

logic logfilestate__split_fields35 : logfileindext

logic logfilestate__split_fields36 : logentrycountt

logic logfilestate__split_fields37 : (int,logfileindext) farray

logic logfilestate__split_fields38 : logfileindext

logic logfilestate__split_fields39 : logfileindext

logic logfilestate__split_fields40 : logfilecountt

logic logfilestate__split_fields41 : (int,fileentrycountt) farray

logic auditalarm5 : int

logic auditsystemfault5 : bool

logic tokenpresence5 : int

logic tokentry5 : int

logic tokenid5 : int

logic authcert__split_fields100 : bool

logic authcert__split_fields101 : issueridt

logic authcert__split_fields102 : namecountt

logic authcert__split_fields103 : (int,character) farray

logic authcert__split_fields104 : serialnumbert

logic authcert__split_fields105 : yearst

logic authcert__split_fields106 : monthst

logic authcert__split_fields107 : dayst

logic authcert__split_fields108 : millisecst

logic authcert__split_fields109 : yearst

logic authcert__split_fields110 : monthst

logic authcert__split_fields111 : dayst

logic authcert__split_fields112 : millisecst

logic authcert__split_fields113 : algorithmt

logic authcert__split_fields114 : issueridt

logic authcert__split_fields115 : namecountt

logic authcert__split_fields116 : (int,character) farray

logic authcert__split_fields117 : serialnumbert

logic authcert__split_fields118 : privileget

logic authcert__split_fields119 : classt

logic idcert__split_fields100 : bool

logic idcert__split_fields101 : issueridt

logic idcert__split_fields102 : namecountt

logic idcert__split_fields103 : (int,character) farray

logic idcert__split_fields104 : serialnumbert

logic idcert__split_fields105 : yearst

logic idcert__split_fields106 : monthst

logic idcert__split_fields107 : dayst

logic idcert__split_fields108 : millisecst

logic idcert__split_fields109 : yearst

logic idcert__split_fields110 : monthst

logic idcert__split_fields111 : dayst

logic idcert__split_fields112 : millisecst

logic idcert__split_fields113 : algorithmt

logic idcert__split_fields114 : issueridt

logic idcert__split_fields115 : namecountt

logic idcert__split_fields116 : (int,character) farray

logic idcert__split_fields117 : algorithmt

logic idcert__split_fields118 : keyidt

logic idcert__split_fields119 : keylengtht

logic currentlatch3 : int

logic latchtimeout__split_fields12 : yearst

logic latchtimeout__split_fields13 : monthst

logic latchtimeout__split_fields14 : dayst

logic latchtimeout__split_fields15 : millisecst

logic theadmin__split_fields8 : privileget

logic theadmin__split_fields9 : opandnullt

logic status8 : int

logic localstatus2 : int

logic state33 : us_private

logic filestate8 : us_private

logic filestate9 : us_private

logic state34 : us_private

logic state35 : us_private

logic status9 : us_private

logic state36 : us_private

logic state37 : us_private

logic state38 : us_private

logic state39 : us_private

logic writtenstate3 : us_private

logic output3 : us_private

logic state40 : us_private

logic state41 : us_private

logic logfiles6 : (int,us_rep4) farray

logic logfilesstatus6 : (int,filestatust) farray

logic logfilestate__split_fields42 : logfileindext

logic logfilestate__split_fields43 : logentrycountt

logic logfilestate__split_fields44 : (int,logfileindext) farray

logic logfilestate__split_fields45 : logfileindext

logic logfilestate__split_fields46 : logfileindext

logic logfilestate__split_fields47 : logfilecountt

logic logfilestate__split_fields48 : (int,fileentrycountt) farray

logic auditalarm6 : int

logic auditsystemfault6 : bool

logic tokenpresence6 : int

logic tokentry6 : int

logic tokenid6 : int

logic authcert__split_fields120 : bool

logic authcert__split_fields121 : issueridt

logic authcert__split_fields122 : namecountt

logic authcert__split_fields123 : (int,character) farray

logic authcert__split_fields124 : serialnumbert

logic authcert__split_fields125 : yearst

logic authcert__split_fields126 : monthst

logic authcert__split_fields127 : dayst

logic authcert__split_fields128 : millisecst

logic authcert__split_fields129 : yearst

logic authcert__split_fields130 : monthst

logic authcert__split_fields131 : dayst

logic authcert__split_fields132 : millisecst

logic authcert__split_fields133 : algorithmt

logic authcert__split_fields134 : issueridt

logic authcert__split_fields135 : namecountt

logic authcert__split_fields136 : (int,character) farray

logic authcert__split_fields137 : serialnumbert

logic authcert__split_fields138 : privileget

logic authcert__split_fields139 : classt

logic idcert__split_fields120 : bool

logic idcert__split_fields121 : issueridt

logic idcert__split_fields122 : namecountt

logic idcert__split_fields123 : (int,character) farray

logic idcert__split_fields124 : serialnumbert

logic idcert__split_fields125 : yearst

logic idcert__split_fields126 : monthst

logic idcert__split_fields127 : dayst

logic idcert__split_fields128 : millisecst

logic idcert__split_fields129 : yearst

logic idcert__split_fields130 : monthst

logic idcert__split_fields131 : dayst

logic idcert__split_fields132 : millisecst

logic idcert__split_fields133 : algorithmt

logic idcert__split_fields134 : issueridt

logic idcert__split_fields135 : namecountt

logic idcert__split_fields136 : (int,character) farray

logic idcert__split_fields137 : algorithmt

logic idcert__split_fields138 : keyidt

logic idcert__split_fields139 : keylengtht

logic currentlatch4 : int

logic latchtimeout__split_fields16 : yearst

logic latchtimeout__split_fields17 : monthst

logic latchtimeout__split_fields18 : dayst

logic latchtimeout__split_fields19 : millisecst

logic theadmin__split_fields10 : privileget

logic theadmin__split_fields11 : opandnullt

logic status10 : int

logic localstatus3 : int

logic state42 : us_private

logic filestate10 : us_private

logic filestate11 : us_private

logic state43 : us_private

logic state44 : us_private

logic status11 : us_private

logic state45 : us_private

logic state46 : us_private

logic state47 : us_private

logic state48 : us_private

logic writtenstate4 : us_private

logic output4 : us_private

logic state49 : us_private

logic state50 : us_private

logic result7 : bool

logic result8 : bool

logic result9 : bool

logic result10 : bool

logic result11 : bool

logic result12 : bool

logic result13 : bool

logic result14 : bool

logic result15 : bool

logic result16 : bool

logic result17 : bool

logic result18 : bool

logic result19 : bool

logic result20 : bool

logic result21 : bool

logic result22 : bool

axiom H : in_range28(status)

axiom H1 : in_range1(tokenpresence)

axiom H2 : in_range17(tokentry)

axiom H3 : in_range16(tokenid)

axiom H4 : (valid_numberlogentries(to_rep6(logfilestate__split_fields),
  to_rep7(logfilestate__split_fields1), { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields2;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields3;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields4;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields5 } },
  logfilestate__split_fields6) = true)

axiom H5 : in_range6(auditalarm)

axiom H6 : in_range26(currentlatch)

axiom H7 : ((((((((((((not (enrolmentisinprogress(status) = true)) and
  (currentadminactivitypossible1(status, tokenpresence, state2, tokentry,
  tokenid, { rec__admintoken__validauthcertt__valid = authcert__split_fields;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields1;
  rec__cryptotypes__issuert__namelength = authcert__split_fields2;
  rec__cryptotypes__issuert__name = authcert__split_fields3 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields4 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields5;
  rec__clock__timet__month = authcert__split_fields6;
  rec__clock__timet__day = authcert__split_fields7;
  rec__clock__timet__millisec = authcert__split_fields8 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields9;
  rec__clock__timet__month = authcert__split_fields10;
  rec__clock__timet__day = authcert__split_fields11;
  rec__clock__timet__millisec = authcert__split_fields12 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields13;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields14;
  rec__cryptotypes__issuert__namelength = authcert__split_fields15;
  rec__cryptotypes__issuert__name = authcert__split_fields16 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields17 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields18;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields19 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields1;
  rec__cryptotypes__issuert__namelength = idcert__split_fields2;
  rec__cryptotypes__issuert__name = idcert__split_fields3 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields4 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields5; rec__clock__timet__month =
  idcert__split_fields6; rec__clock__timet__day = idcert__split_fields7;
  rec__clock__timet__millisec = idcert__split_fields8 } };
  rec__cert__id__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields9; rec__clock__timet__month =
  idcert__split_fields10; rec__clock__timet__day = idcert__split_fields11;
  rec__clock__timet__millisec = idcert__split_fields12 } };
  rec__cert__id__contentst__mechanism = idcert__split_fields13;
  rec__cert__id__contentst__subject = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields14;
  rec__cryptotypes__issuert__namelength = idcert__split_fields15;
  rec__cryptotypes__issuert__name = idcert__split_fields16 } };
  rec__cert__id__contentst__subjectpublickey = { us_split_fields21 = {
  rec__cryptotypes__keypartt__algorithmid = idcert__split_fields17;
  rec__cryptotypes__keypartt__keyid = idcert__split_fields18;
  rec__cryptotypes__keypartt__keylength = idcert__split_fields19 } } } }
  }) = true)) and ((((islocked(currentlatch, state3, {
  rec__clock__timet__year = latchtimeout__split_fields;
  rec__clock__timet__month = latchtimeout__split_fields1;
  rec__clock__timet__day = latchtimeout__split_fields2;
  rec__clock__timet__millisec = latchtimeout__split_fields3 }) = true) and
  (thecurrentdoor(state4) = 0)) and (greaterthanorequal(thecurrenttime({
  rec__clock__timet__year = currenttimevar__split_fields;
  rec__clock__timet__month = currenttimevar__split_fields1;
  rec__clock__timet__day = currenttimevar__split_fields2;
  rec__clock__timet__millisec = currenttimevar__split_fields3 },
  currenttime), alarm_timeout(state4)) = true)) <->
  (thedooralarm(state4) = 0))) and
  (((statusisgotadmintoken(status) = true) or
  (statusiswaitingremoveadmintokenfail(status) = true)) -> (not (ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true)))) and
  ((not (ispresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true)) -> (not (isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true)))) and
  (((statusiswaitingstartadminop(status) = true) or
  (statusiswaitingfinishadminop(status) = true)) -> ((ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true) and
  (isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true)))) and ((statusisenclavequiescent(status) = true) ->
  (not (isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true)))) and ((statusisshutdown(status) = true) ->
  ((not (isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true)) and (rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = 0)))) and
  (((isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true) and (thecurrentop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = 4)) ->
  (statusiswaitingstartadminop(status) = true))) and ((rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = 1) ->
  (((isgood(tokenpresence, state2, tokentry, tokenid, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields1;
  rec__cryptotypes__issuert__namelength = authcert__split_fields2;
  rec__cryptotypes__issuert__name = authcert__split_fields3 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields4 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields5;
  rec__clock__timet__month = authcert__split_fields6;
  rec__clock__timet__day = authcert__split_fields7;
  rec__clock__timet__millisec = authcert__split_fields8 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields9;
  rec__clock__timet__month = authcert__split_fields10;
  rec__clock__timet__day = authcert__split_fields11;
  rec__clock__timet__millisec = authcert__split_fields12 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields13;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields14;
  rec__cryptotypes__issuert__namelength = authcert__split_fields15;
  rec__cryptotypes__issuert__name = authcert__split_fields16 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields17 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields18;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields19 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields1;
  rec__cryptotypes__issuert__namelength = idcert__split_fields2;
  rec__cryptotypes__issuert__name = idcert__split_fields3 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields4 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields5; rec__clock__timet__month =
  idcert__split_fields6; rec__clock__timet__day = idcert__split_fields7;
  rec__clock__timet__millisec = idcert__split_fields8 } };
  rec__cert__id__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields9; rec__clock__timet__month =
  idcert__split_fields10; rec__clock__timet__day = idcert__split_fields11;
  rec__clock__timet__millisec = idcert__split_fields12 } };
  rec__cert__id__contentst__mechanism = idcert__split_fields13;
  rec__cert__id__contentst__subject = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields14;
  rec__cryptotypes__issuert__namelength = idcert__split_fields15;
  rec__cryptotypes__issuert__name = idcert__split_fields16 } };
  rec__cert__id__contentst__subjectpublickey = { us_split_fields21 = {
  rec__cryptotypes__keypartt__algorithmid = idcert__split_fields17;
  rec__cryptotypes__keypartt__keyid = idcert__split_fields18;
  rec__cryptotypes__keypartt__keylength = idcert__split_fields19 } } } }
  }) = true) and (authcertvalid(tokenpresence, state2, tokentry, tokenid, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields1;
  rec__cryptotypes__issuert__namelength = authcert__split_fields2;
  rec__cryptotypes__issuert__name = authcert__split_fields3 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields4 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields5;
  rec__clock__timet__month = authcert__split_fields6;
  rec__clock__timet__day = authcert__split_fields7;
  rec__clock__timet__millisec = authcert__split_fields8 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields9;
  rec__clock__timet__month = authcert__split_fields10;
  rec__clock__timet__day = authcert__split_fields11;
  rec__clock__timet__millisec = authcert__split_fields12 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields13;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields14;
  rec__cryptotypes__issuert__namelength = authcert__split_fields15;
  rec__cryptotypes__issuert__name = authcert__split_fields16 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields17 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields18;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields19 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields1;
  rec__cryptotypes__issuert__namelength = idcert__split_fields2;
  rec__cryptotypes__issuert__name = idcert__split_fields3 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields4 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields5; rec__clock__timet__month =
  idcert__split_fields6; rec__clock__timet__day = idcert__split_fields7;
  rec__clock__timet__millisec = idcert__split_fields8 } };
  rec__cert__id__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields9; rec__clock__timet__month =
  idcert__split_fields10; rec__clock__timet__day = idcert__split_fields11;
  rec__clock__timet__millisec = idcert__split_fields12 } };
  rec__cert__id__contentst__mechanism = idcert__split_fields13;
  rec__cert__id__contentst__subject = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields14;
  rec__cryptotypes__issuert__namelength = idcert__split_fields15;
  rec__cryptotypes__issuert__name = idcert__split_fields16 } };
  rec__cert__id__contentst__subjectpublickey = { us_split_fields21 = {
  rec__cryptotypes__keypartt__algorithmid = idcert__split_fields17;
  rec__cryptotypes__keypartt__keyid = idcert__split_fields18;
  rec__cryptotypes__keypartt__keylength = idcert__split_fields19 } } } }
  }) = true)) and (theauthcertrole(tokenpresence, state2, tokentry, tokenid,
  { rec__admintoken__validauthcertt__valid = authcert__split_fields;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields1;
  rec__cryptotypes__issuert__namelength = authcert__split_fields2;
  rec__cryptotypes__issuert__name = authcert__split_fields3 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields4 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields5;
  rec__clock__timet__month = authcert__split_fields6;
  rec__clock__timet__day = authcert__split_fields7;
  rec__clock__timet__millisec = authcert__split_fields8 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields9;
  rec__clock__timet__month = authcert__split_fields10;
  rec__clock__timet__day = authcert__split_fields11;
  rec__clock__timet__millisec = authcert__split_fields12 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields13;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields14;
  rec__cryptotypes__issuert__namelength = authcert__split_fields15;
  rec__cryptotypes__issuert__name = authcert__split_fields16 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields17 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields18;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields19 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields1;
  rec__cryptotypes__issuert__namelength = idcert__split_fields2;
  rec__cryptotypes__issuert__name = idcert__split_fields3 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields4 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields5; rec__clock__timet__month =
  idcert__split_fields6; rec__clock__timet__day = idcert__split_fields7;
  rec__clock__timet__millisec = idcert__split_fields8 } };
  rec__cert__id__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields9; rec__clock__timet__month =
  idcert__split_fields10; rec__clock__timet__day = idcert__split_fields11;
  rec__clock__timet__millisec = idcert__split_fields12 } };
  rec__cert__id__contentst__mechanism = idcert__split_fields13;
  rec__cert__id__contentst__subject = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields14;
  rec__cryptotypes__issuert__namelength = idcert__split_fields15;
  rec__cryptotypes__issuert__name = idcert__split_fields16 } };
  rec__cert__id__contentst__subjectpublickey = { us_split_fields21 = {
  rec__cryptotypes__keypartt__algorithmid = idcert__split_fields17;
  rec__cryptotypes__keypartt__keyid = idcert__split_fields18;
  rec__cryptotypes__keypartt__keylength = idcert__split_fields19 } } } }
  }) = 1)))) and (((isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true) and
  (thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = 3)) -> (rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = 1))) and
  ((rolepresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = 1) -> (((isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true) and
  (thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = 3)) or (not (isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = true)))))

axiom H8 : ((4 <= 8) -> in_range30(localstatus))

axiom H9 : ((o17 = status) and in_range30(status))

axiom H10 : (result6 = localstatus)

axiom H11 : (localstatus1 = o17)

axiom H12 : ((localstatus1 = 5) -> ((((((((status4 = 3) or (status4 = 4)) and
  ((status4 = 4) -> (not (ispresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields4;
  rec__admin__t__currentop = theadmin__split_fields5 } }) = true)))) and
  (not (isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields4; rec__admin__t__currentop = theadmin__split_fields5
  } }) = true))) and ((rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields4;
  rec__admin__t__currentop = theadmin__split_fields5 } }) = 1) ->
  (((isgood(tokenpresence2, state19, tokentry2, tokenid2, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields40;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields41;
  rec__cryptotypes__issuert__namelength = authcert__split_fields42;
  rec__cryptotypes__issuert__name = authcert__split_fields43 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields44 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields45;
  rec__clock__timet__month = authcert__split_fields46;
  rec__clock__timet__day = authcert__split_fields47;
  rec__clock__timet__millisec = authcert__split_fields48 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields49;
  rec__clock__timet__month = authcert__split_fields50;
  rec__clock__timet__day = authcert__split_fields51;
  rec__clock__timet__millisec = authcert__split_fields52 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields53;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields54;
  rec__cryptotypes__issuert__namelength = authcert__split_fields55;
  rec__cryptotypes__issuert__name = authcert__split_fields56 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields57 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields58;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields59 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields40;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields41;
  rec__cryptotypes__issuert__namelength = idcert__split_fields42;
  rec__cryptotypes__issuert__name = idcert__split_fields43 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields44 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields45;
  rec__clock__timet__month = idcert__split_fields46; rec__clock__timet__day =
  idcert__split_fields47; rec__clock__timet__millisec =
  idcert__split_fields48 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields49;
  rec__clock__timet__month = idcert__split_fields50; rec__clock__timet__day =
  idcert__split_fields51; rec__clock__timet__millisec =
  idcert__split_fields52 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields53; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields54; rec__cryptotypes__issuert__namelength =
  idcert__split_fields55; rec__cryptotypes__issuert__name =
  idcert__split_fields56 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields57; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields58; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields59 } } } } }) = true) and
  (authcertvalid(tokenpresence2, state19, tokentry2, tokenid2, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields40;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields41;
  rec__cryptotypes__issuert__namelength = authcert__split_fields42;
  rec__cryptotypes__issuert__name = authcert__split_fields43 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields44 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields45;
  rec__clock__timet__month = authcert__split_fields46;
  rec__clock__timet__day = authcert__split_fields47;
  rec__clock__timet__millisec = authcert__split_fields48 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields49;
  rec__clock__timet__month = authcert__split_fields50;
  rec__clock__timet__day = authcert__split_fields51;
  rec__clock__timet__millisec = authcert__split_fields52 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields53;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields54;
  rec__cryptotypes__issuert__namelength = authcert__split_fields55;
  rec__cryptotypes__issuert__name = authcert__split_fields56 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields57 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields58;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields59 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields40;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields41;
  rec__cryptotypes__issuert__namelength = idcert__split_fields42;
  rec__cryptotypes__issuert__name = idcert__split_fields43 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields44 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields45;
  rec__clock__timet__month = idcert__split_fields46; rec__clock__timet__day =
  idcert__split_fields47; rec__clock__timet__millisec =
  idcert__split_fields48 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields49;
  rec__clock__timet__month = idcert__split_fields50; rec__clock__timet__day =
  idcert__split_fields51; rec__clock__timet__millisec =
  idcert__split_fields52 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields53; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields54; rec__cryptotypes__issuert__namelength =
  idcert__split_fields55; rec__cryptotypes__issuert__name =
  idcert__split_fields56 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields57; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields58; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields59 } } } } }) = true)) and
  (theauthcertrole(tokenpresence2, state19, tokentry2, tokenid2, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields40;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields41;
  rec__cryptotypes__issuert__namelength = authcert__split_fields42;
  rec__cryptotypes__issuert__name = authcert__split_fields43 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields44 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields45;
  rec__clock__timet__month = authcert__split_fields46;
  rec__clock__timet__day = authcert__split_fields47;
  rec__clock__timet__millisec = authcert__split_fields48 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields49;
  rec__clock__timet__month = authcert__split_fields50;
  rec__clock__timet__day = authcert__split_fields51;
  rec__clock__timet__millisec = authcert__split_fields52 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields53;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields54;
  rec__cryptotypes__issuert__namelength = authcert__split_fields55;
  rec__cryptotypes__issuert__name = authcert__split_fields56 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields57 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields58;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields59 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields40;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields41;
  rec__cryptotypes__issuert__namelength = idcert__split_fields42;
  rec__cryptotypes__issuert__name = idcert__split_fields43 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields44 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields45;
  rec__clock__timet__month = idcert__split_fields46; rec__clock__timet__day =
  idcert__split_fields47; rec__clock__timet__millisec =
  idcert__split_fields48 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields49;
  rec__clock__timet__month = idcert__split_fields50; rec__clock__timet__day =
  idcert__split_fields51; rec__clock__timet__millisec =
  idcert__split_fields52 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields53; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields54; rec__cryptotypes__issuert__namelength =
  idcert__split_fields55; rec__cryptotypes__issuert__name =
  idcert__split_fields56 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields57; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields58; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields59 } } } } }) = 1)))) and (((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields4;
  rec__admin__t__currentop = theadmin__split_fields5 } }) = true) and
  (thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields4; rec__admin__t__currentop = theadmin__split_fields5
  } }) = 3)) -> (rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields4;
  rec__admin__t__currentop = theadmin__split_fields5 } }) = 1))) and
  ((rolepresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields4; rec__admin__t__currentop = theadmin__split_fields5
  } }) = 1) -> (((isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields4;
  rec__admin__t__currentop = theadmin__split_fields5 } }) = true) and
  (thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields4; rec__admin__t__currentop = theadmin__split_fields5
  } }) = 3)) or (not (isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields4;
  rec__admin__t__currentop = theadmin__split_fields5 } }) = true))))) and
  (((((in_range1(tokenpresence2) and
  (valid_numberlogentries(to_rep6(logfilestate__split_fields14),
  to_rep7(logfilestate__split_fields15), { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields16;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields17;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields18;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields19 } },
  logfilestate__split_fields20) = true)) and in_range6(auditalarm2)) and
  in_range17(tokentry2)) and in_range28(status4)) and in_range16(tokenid2))))

axiom H13 : ((localstatus1 = 5) -> (state32 = state8))

axiom H14 : ((localstatus1 = 5) -> (output2 = output))

axiom H15 : ((localstatus1 = 5) -> (writtenstate2 = writtenstate))

axiom H16 : ((localstatus1 = 5) -> (state30 = state6))

axiom H17 : ((localstatus1 = 5) -> (state29 = state5))

axiom H18 : ((localstatus1 = 5) -> (state28 = state4))

axiom H19 : ((localstatus1 = 5) -> (state27 = state3))

axiom H20 : ((localstatus1 = 5) -> (filestate6 = filestate))

axiom H21 : ((localstatus1 = 5) -> (state24 = state))

axiom H22 : ((localstatus1 = 5) ->
  ((latchtimeout__split_fields8 = latchtimeout__split_fields) and
  ((latchtimeout__split_fields9 = latchtimeout__split_fields1) and
  ((latchtimeout__split_fields10 = latchtimeout__split_fields2) and
  (latchtimeout__split_fields11 = latchtimeout__split_fields3)))))

axiom H23 : ((localstatus1 = 5) -> (currentlatch2 = currentlatch))

axiom H24 : ((localstatus1 = 5) -> (state32 = state17))

axiom H25 : ((localstatus1 = 5) -> (output2 = output1))

axiom H26 : ((localstatus1 = 5) -> (writtenstate2 = writtenstate1))

axiom H27 : ((localstatus1 = 5) -> (state30 = state15))

axiom H28 : ((localstatus1 = 5) -> (state29 = state14))

axiom H29 : ((localstatus1 = 5) -> (state28 = state13))

axiom H30 : ((localstatus1 = 5) -> (state27 = state12))

axiom H31 : ((localstatus1 = 5) -> (filestate6 = filestate2))

axiom H32 : ((localstatus1 = 5) -> (state24 = state9))

axiom H33 : ((localstatus1 = 5) ->
  ((latchtimeout__split_fields8 = latchtimeout__split_fields4) and
  ((latchtimeout__split_fields9 = latchtimeout__split_fields5) and
  ((latchtimeout__split_fields10 = latchtimeout__split_fields6) and
  (latchtimeout__split_fields11 = latchtimeout__split_fields7)))))

axiom H34 : ((localstatus1 = 5) -> (currentlatch2 = currentlatch1))

axiom H35 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  ((status6 = 3) and (((((in_range1(tokenpresence3) and
  (valid_numberlogentries(to_rep6(logfilestate__split_fields21),
  to_rep7(logfilestate__split_fields22), { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields23;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields24;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields25;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields26 } },
  logfilestate__split_fields27) = true)) and in_range6(auditalarm3)) and
  in_range17(tokentry3)) and in_range28(status6)) and
  in_range16(tokenid3)))))

axiom H36 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state32 = state8)))

axiom H37 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (output2 = output)))

axiom H38 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (writtenstate2 = writtenstate)))

axiom H39 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state30 = state6)))

axiom H40 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state29 = state5)))

axiom H41 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state28 = state4)))

axiom H42 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state27 = state3)))

axiom H43 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (filestate6 = filestate)))

axiom H44 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state24 = state)))

axiom H45 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  ((theadmin__split_fields6 = theadmin__split_fields) and
  (theadmin__split_fields7 = theadmin__split_fields1))))

axiom H46 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  ((latchtimeout__split_fields8 = latchtimeout__split_fields) and
  ((latchtimeout__split_fields9 = latchtimeout__split_fields1) and
  ((latchtimeout__split_fields10 = latchtimeout__split_fields2) and
  (latchtimeout__split_fields11 = latchtimeout__split_fields3))))))

axiom H47 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (currentlatch2 = currentlatch)))

axiom H48 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state32 = state17)))

axiom H49 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (output2 = output1)))

axiom H50 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (writtenstate2 = writtenstate1)))

axiom H51 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state30 = state15)))

axiom H52 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state29 = state14)))

axiom H53 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state28 = state13)))

axiom H54 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state27 = state12)))

axiom H55 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (filestate6 = filestate2)))

axiom H56 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (state24 = state9)))

axiom H57 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  ((theadmin__split_fields6 = theadmin__split_fields2) and
  (theadmin__split_fields7 = theadmin__split_fields3))))

axiom H58 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  ((latchtimeout__split_fields8 = latchtimeout__split_fields4) and
  ((latchtimeout__split_fields9 = latchtimeout__split_fields5) and
  ((latchtimeout__split_fields10 = latchtimeout__split_fields6) and
  (latchtimeout__split_fields11 = latchtimeout__split_fields7))))))

axiom H59 : ((not (localstatus1 = 5)) -> ((localstatus1 = 4) ->
  (currentlatch2 = currentlatch1)))

axiom H60 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (((not (localstatus1 = 6)) -> (localstatus1 = 7)) ->
  (((((((((((((((status7 = 6) or (status7 = 7)) or (status7 = 3)) or
  (status7 = 8)) and (((status7 = 6) or (status7 = 7)) -> (((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = true) and
  (ispresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields6; rec__admin__t__currentop = theadmin__split_fields7
  } }) = true)) and (rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }))))) and
  ((status7 = 3) -> (((not (isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = true)) and
  (ispresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields6; rec__admin__t__currentop = theadmin__split_fields7
  } }) = true)) and (rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }))))) and
  ((status7 = 8) -> ((not (isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = true)) and
  (rolepresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields6; rec__admin__t__currentop = theadmin__split_fields7
  } }) = 0)))) and (((isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = true) and
  (thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields6; rec__admin__t__currentop = theadmin__split_fields7
  } }) = 4)) -> (status7 = 6))) and ((((islocked(currentlatch2, state27, {
  rec__clock__timet__year = latchtimeout__split_fields8;
  rec__clock__timet__month = latchtimeout__split_fields9;
  rec__clock__timet__day = latchtimeout__split_fields10;
  rec__clock__timet__millisec = latchtimeout__split_fields11 }) = true) and
  (thecurrentdoor(state28) = 0)) and (greaterthanorequal(thecurrenttime({
  rec__clock__timet__year = currenttimevar__split_fields;
  rec__clock__timet__month = currenttimevar__split_fields1;
  rec__clock__timet__day = currenttimevar__split_fields2;
  rec__clock__timet__millisec = currenttimevar__split_fields3 },
  currenttime), alarm_timeout(state28)) = true)) <->
  (thedooralarm(state28) = 0))) and ((rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = 1) ->
  (((isgood(tokenpresence4, state26, tokentry4, tokenid4, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields80;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields81;
  rec__cryptotypes__issuert__namelength = authcert__split_fields82;
  rec__cryptotypes__issuert__name = authcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields84 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields85;
  rec__clock__timet__month = authcert__split_fields86;
  rec__clock__timet__day = authcert__split_fields87;
  rec__clock__timet__millisec = authcert__split_fields88 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields89;
  rec__clock__timet__month = authcert__split_fields90;
  rec__clock__timet__day = authcert__split_fields91;
  rec__clock__timet__millisec = authcert__split_fields92 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields93;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields94;
  rec__cryptotypes__issuert__namelength = authcert__split_fields95;
  rec__cryptotypes__issuert__name = authcert__split_fields96 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields97 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields98;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields99 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields80;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields81;
  rec__cryptotypes__issuert__namelength = idcert__split_fields82;
  rec__cryptotypes__issuert__name = idcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields84 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields85;
  rec__clock__timet__month = idcert__split_fields86; rec__clock__timet__day =
  idcert__split_fields87; rec__clock__timet__millisec =
  idcert__split_fields88 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields89;
  rec__clock__timet__month = idcert__split_fields90; rec__clock__timet__day =
  idcert__split_fields91; rec__clock__timet__millisec =
  idcert__split_fields92 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields93; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields94; rec__cryptotypes__issuert__namelength =
  idcert__split_fields95; rec__cryptotypes__issuert__name =
  idcert__split_fields96 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields97; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields98; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields99 } } } } }) = true) and
  (authcertvalid(tokenpresence4, state26, tokentry4, tokenid4, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields80;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields81;
  rec__cryptotypes__issuert__namelength = authcert__split_fields82;
  rec__cryptotypes__issuert__name = authcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields84 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields85;
  rec__clock__timet__month = authcert__split_fields86;
  rec__clock__timet__day = authcert__split_fields87;
  rec__clock__timet__millisec = authcert__split_fields88 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields89;
  rec__clock__timet__month = authcert__split_fields90;
  rec__clock__timet__day = authcert__split_fields91;
  rec__clock__timet__millisec = authcert__split_fields92 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields93;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields94;
  rec__cryptotypes__issuert__namelength = authcert__split_fields95;
  rec__cryptotypes__issuert__name = authcert__split_fields96 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields97 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields98;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields99 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields80;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields81;
  rec__cryptotypes__issuert__namelength = idcert__split_fields82;
  rec__cryptotypes__issuert__name = idcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields84 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields85;
  rec__clock__timet__month = idcert__split_fields86; rec__clock__timet__day =
  idcert__split_fields87; rec__clock__timet__millisec =
  idcert__split_fields88 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields89;
  rec__clock__timet__month = idcert__split_fields90; rec__clock__timet__day =
  idcert__split_fields91; rec__clock__timet__millisec =
  idcert__split_fields92 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields93; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields94; rec__cryptotypes__issuert__namelength =
  idcert__split_fields95; rec__cryptotypes__issuert__name =
  idcert__split_fields96 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields97; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields98; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields99 } } } } }) = true)) and
  (theauthcertrole(tokenpresence4, state26, tokentry4, tokenid4, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields80;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields81;
  rec__cryptotypes__issuert__namelength = authcert__split_fields82;
  rec__cryptotypes__issuert__name = authcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields84 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields85;
  rec__clock__timet__month = authcert__split_fields86;
  rec__clock__timet__day = authcert__split_fields87;
  rec__clock__timet__millisec = authcert__split_fields88 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields89;
  rec__clock__timet__month = authcert__split_fields90;
  rec__clock__timet__day = authcert__split_fields91;
  rec__clock__timet__millisec = authcert__split_fields92 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields93;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields94;
  rec__cryptotypes__issuert__namelength = authcert__split_fields95;
  rec__cryptotypes__issuert__name = authcert__split_fields96 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields97 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields98;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields99 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields80;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields81;
  rec__cryptotypes__issuert__namelength = idcert__split_fields82;
  rec__cryptotypes__issuert__name = idcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields84 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields85;
  rec__clock__timet__month = idcert__split_fields86; rec__clock__timet__day =
  idcert__split_fields87; rec__clock__timet__millisec =
  idcert__split_fields88 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields89;
  rec__clock__timet__month = idcert__split_fields90; rec__clock__timet__day =
  idcert__split_fields91; rec__clock__timet__millisec =
  idcert__split_fields92 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields93; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields94; rec__cryptotypes__issuert__namelength =
  idcert__split_fields95; rec__cryptotypes__issuert__name =
  idcert__split_fields96 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields97; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields98; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields99 } } } } }) = 1)))) and
  (((not (islocked(currentlatch2, state27, { rec__clock__timet__year =
  latchtimeout__split_fields8; rec__clock__timet__month =
  latchtimeout__split_fields9; rec__clock__timet__day =
  latchtimeout__split_fields10; rec__clock__timet__millisec =
  latchtimeout__split_fields11 }) = true)) and (islocked(currentlatch,
  state3, { rec__clock__timet__year = latchtimeout__split_fields;
  rec__clock__timet__month = latchtimeout__split_fields1;
  rec__clock__timet__day = latchtimeout__split_fields2;
  rec__clock__timet__millisec = latchtimeout__split_fields3 }) = true)) ->
  (((isgood(tokenpresence4, state26, tokentry4, tokenid4, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields80;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields81;
  rec__cryptotypes__issuert__namelength = authcert__split_fields82;
  rec__cryptotypes__issuert__name = authcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields84 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields85;
  rec__clock__timet__month = authcert__split_fields86;
  rec__clock__timet__day = authcert__split_fields87;
  rec__clock__timet__millisec = authcert__split_fields88 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields89;
  rec__clock__timet__month = authcert__split_fields90;
  rec__clock__timet__day = authcert__split_fields91;
  rec__clock__timet__millisec = authcert__split_fields92 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields93;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields94;
  rec__cryptotypes__issuert__namelength = authcert__split_fields95;
  rec__cryptotypes__issuert__name = authcert__split_fields96 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields97 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields98;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields99 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields80;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields81;
  rec__cryptotypes__issuert__namelength = idcert__split_fields82;
  rec__cryptotypes__issuert__name = idcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields84 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields85;
  rec__clock__timet__month = idcert__split_fields86; rec__clock__timet__day =
  idcert__split_fields87; rec__clock__timet__millisec =
  idcert__split_fields88 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields89;
  rec__clock__timet__month = idcert__split_fields90; rec__clock__timet__day =
  idcert__split_fields91; rec__clock__timet__millisec =
  idcert__split_fields92 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields93; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields94; rec__cryptotypes__issuert__namelength =
  idcert__split_fields95; rec__cryptotypes__issuert__name =
  idcert__split_fields96 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields97; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields98; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields99 } } } } }) = true) and
  (authcertvalid(tokenpresence4, state26, tokentry4, tokenid4, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields80;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields81;
  rec__cryptotypes__issuert__namelength = authcert__split_fields82;
  rec__cryptotypes__issuert__name = authcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields84 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields85;
  rec__clock__timet__month = authcert__split_fields86;
  rec__clock__timet__day = authcert__split_fields87;
  rec__clock__timet__millisec = authcert__split_fields88 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields89;
  rec__clock__timet__month = authcert__split_fields90;
  rec__clock__timet__day = authcert__split_fields91;
  rec__clock__timet__millisec = authcert__split_fields92 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields93;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields94;
  rec__cryptotypes__issuert__namelength = authcert__split_fields95;
  rec__cryptotypes__issuert__name = authcert__split_fields96 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields97 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields98;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields99 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields80;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields81;
  rec__cryptotypes__issuert__namelength = idcert__split_fields82;
  rec__cryptotypes__issuert__name = idcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields84 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields85;
  rec__clock__timet__month = idcert__split_fields86; rec__clock__timet__day =
  idcert__split_fields87; rec__clock__timet__millisec =
  idcert__split_fields88 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields89;
  rec__clock__timet__month = idcert__split_fields90; rec__clock__timet__day =
  idcert__split_fields91; rec__clock__timet__millisec =
  idcert__split_fields92 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields93; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields94; rec__cryptotypes__issuert__namelength =
  idcert__split_fields95; rec__cryptotypes__issuert__name =
  idcert__split_fields96 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields97; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields98; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields99 } } } } }) = true)) and
  (theauthcertrole(tokenpresence4, state26, tokentry4, tokenid4, {
  rec__admintoken__validauthcertt__valid = authcert__split_fields80;
  rec__admintoken__validauthcertt__contents = { us_split_fields17 = {
  rec__cert__attr__auth__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields81;
  rec__cryptotypes__issuert__namelength = authcert__split_fields82;
  rec__cryptotypes__issuert__name = authcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields84 } };
  rec__cert__attr__auth__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields85;
  rec__clock__timet__month = authcert__split_fields86;
  rec__clock__timet__day = authcert__split_fields87;
  rec__clock__timet__millisec = authcert__split_fields88 } };
  rec__cert__attr__auth__contentst__notafter = { us_split_fields3 = {
  rec__clock__timet__year = authcert__split_fields89;
  rec__clock__timet__month = authcert__split_fields90;
  rec__clock__timet__day = authcert__split_fields91;
  rec__clock__timet__millisec = authcert__split_fields92 } };
  rec__cert__attr__auth__contentst__mechanism = authcert__split_fields93;
  rec__cert__attr__auth__contentst__basecertid = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = authcert__split_fields94;
  rec__cryptotypes__issuert__namelength = authcert__split_fields95;
  rec__cryptotypes__issuert__name = authcert__split_fields96 } };
  rec__certtypes__idt__serialnumber = authcert__split_fields97 } };
  rec__cert__attr__auth__contentst__role = authcert__split_fields98;
  rec__cert__attr__auth__contentst__clearance = { us_split_fields13 = {
  rec__privtypes__clearancet__class = authcert__split_fields99 } } } } }, {
  rec__admintoken__valididcertt__valid = idcert__split_fields80;
  rec__admintoken__valididcertt__contents = { us_split_fields23 = {
  rec__cert__id__contentst__id = { us_split_fields15 = {
  rec__certtypes__idt__issuer = { us_split_fields9 = {
  rec__cryptotypes__issuert__id = idcert__split_fields81;
  rec__cryptotypes__issuert__namelength = idcert__split_fields82;
  rec__cryptotypes__issuert__name = idcert__split_fields83 } };
  rec__certtypes__idt__serialnumber = idcert__split_fields84 } };
  rec__cert__id__contentst__notbefore = { us_split_fields3 = {
  rec__clock__timet__year = idcert__split_fields85;
  rec__clock__timet__month = idcert__split_fields86; rec__clock__timet__day =
  idcert__split_fields87; rec__clock__timet__millisec =
  idcert__split_fields88 } }; rec__cert__id__contentst__notafter = {
  us_split_fields3 = { rec__clock__timet__year = idcert__split_fields89;
  rec__clock__timet__month = idcert__split_fields90; rec__clock__timet__day =
  idcert__split_fields91; rec__clock__timet__millisec =
  idcert__split_fields92 } }; rec__cert__id__contentst__mechanism =
  idcert__split_fields93; rec__cert__id__contentst__subject = {
  us_split_fields9 = { rec__cryptotypes__issuert__id =
  idcert__split_fields94; rec__cryptotypes__issuert__namelength =
  idcert__split_fields95; rec__cryptotypes__issuert__name =
  idcert__split_fields96 } }; rec__cert__id__contentst__subjectpublickey = {
  us_split_fields21 = { rec__cryptotypes__keypartt__algorithmid =
  idcert__split_fields97; rec__cryptotypes__keypartt__keyid =
  idcert__split_fields98; rec__cryptotypes__keypartt__keylength =
  idcert__split_fields99 } } } } }) = 1)))) and (((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = true) and
  (thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields6; rec__admin__t__currentop = theadmin__split_fields7
  } }) = 3)) -> (rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = 1))) and
  ((rolepresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields6; rec__admin__t__currentop = theadmin__split_fields7
  } }) = 1) -> (((isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = true) and
  (thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields6; rec__admin__t__currentop = theadmin__split_fields7
  } }) = 3)) or (not (isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields6;
  rec__admin__t__currentop = theadmin__split_fields7 } }) = true))))) and
  (((not (islocked(currentlatch2, state27, { rec__clock__timet__year =
  latchtimeout__split_fields8; rec__clock__timet__month =
  latchtimeout__split_fields9; rec__clock__timet__day =
  latchtimeout__split_fields10; rec__clock__timet__millisec =
  latchtimeout__split_fields11 }) = true)) and (islocked(currentlatch,
  state3, { rec__clock__timet__year = latchtimeout__split_fields;
  rec__clock__timet__month = latchtimeout__split_fields1;
  rec__clock__timet__day = latchtimeout__split_fields2;
  rec__clock__timet__millisec = latchtimeout__split_fields3 }) = true)) ->
  ((isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true) and (thecurrentop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } }) = 3)))) and
  ((((((in_range1(tokenpresence4) and
  (valid_numberlogentries(to_rep6(logfilestate__split_fields28),
  to_rep7(logfilestate__split_fields29), { us_split_fields5 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields30;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields31;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields32;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields33 } },
  logfilestate__split_fields34) = true)) and in_range6(auditalarm4)) and
  in_range17(tokentry4)) and in_range28(status7)) and
  in_range26(currentlatch2)) and in_range16(tokenid4))))))

axiom H61 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state32 = state8))))

axiom H62 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state31 = state7))))

axiom H63 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (output2 = output))))

axiom H64 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (writtenstate2 = writtenstate))))

axiom H65 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state30 = state6))))

axiom H66 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state29 = state5))))

axiom H67 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state28 = state4))))

axiom H68 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state27 = state3))))

axiom H69 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state26 = state2))))

axiom H70 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state25 = state1))))

axiom H71 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (filestate7 = filestate1))))

axiom H72 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (filestate6 = filestate))))

axiom H73 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state24 = state))))

axiom H74 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (status7 = status))))

axiom H75 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((theadmin__split_fields6 = theadmin__split_fields) and
  (theadmin__split_fields7 = theadmin__split_fields1)))))

axiom H76 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((latchtimeout__split_fields8 = latchtimeout__split_fields) and
  ((latchtimeout__split_fields9 = latchtimeout__split_fields1) and
  ((latchtimeout__split_fields10 = latchtimeout__split_fields2) and
  (latchtimeout__split_fields11 = latchtimeout__split_fields3)))))))

axiom H77 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (currentlatch2 = currentlatch))))

axiom H78 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((idcert__split_fields80 = idcert__split_fields) and
  ((((idcert__split_fields81 = idcert__split_fields1) and
  ((idcert__split_fields82 = idcert__split_fields2) and
  (idcert__split_fields83 = idcert__split_fields3))) and
  (idcert__split_fields84 = idcert__split_fields4)) and
  (((idcert__split_fields85 = idcert__split_fields5) and
  ((idcert__split_fields86 = idcert__split_fields6) and
  ((idcert__split_fields87 = idcert__split_fields7) and
  (idcert__split_fields88 = idcert__split_fields8)))) and
  (((idcert__split_fields89 = idcert__split_fields9) and
  ((idcert__split_fields90 = idcert__split_fields10) and
  ((idcert__split_fields91 = idcert__split_fields11) and
  (idcert__split_fields92 = idcert__split_fields12)))) and
  ((idcert__split_fields93 = idcert__split_fields13) and
  (((idcert__split_fields94 = idcert__split_fields14) and
  ((idcert__split_fields95 = idcert__split_fields15) and
  (idcert__split_fields96 = idcert__split_fields16))) and
  ((idcert__split_fields97 = idcert__split_fields17) and
  ((idcert__split_fields98 = idcert__split_fields18) and
  (idcert__split_fields99 = idcert__split_fields19))))))))))))

axiom H79 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((authcert__split_fields80 = authcert__split_fields) and
  ((((authcert__split_fields81 = authcert__split_fields1) and
  ((authcert__split_fields82 = authcert__split_fields2) and
  (authcert__split_fields83 = authcert__split_fields3))) and
  (authcert__split_fields84 = authcert__split_fields4)) and
  (((authcert__split_fields85 = authcert__split_fields5) and
  ((authcert__split_fields86 = authcert__split_fields6) and
  ((authcert__split_fields87 = authcert__split_fields7) and
  (authcert__split_fields88 = authcert__split_fields8)))) and
  (((authcert__split_fields89 = authcert__split_fields9) and
  ((authcert__split_fields90 = authcert__split_fields10) and
  ((authcert__split_fields91 = authcert__split_fields11) and
  (authcert__split_fields92 = authcert__split_fields12)))) and
  ((authcert__split_fields93 = authcert__split_fields13) and
  ((((authcert__split_fields94 = authcert__split_fields14) and
  ((authcert__split_fields95 = authcert__split_fields15) and
  (authcert__split_fields96 = authcert__split_fields16))) and
  (authcert__split_fields97 = authcert__split_fields17)) and
  ((authcert__split_fields98 = authcert__split_fields18) and
  (authcert__split_fields99 = authcert__split_fields19)))))))))))

axiom H80 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (tokenid4 = tokenid))))

axiom H81 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (tokentry4 = tokentry))))

axiom H82 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (tokenpresence4 = tokenpresence))))

axiom H83 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (auditsystemfault4 = auditsystemfault))))

axiom H84 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (auditalarm4 = auditalarm))))

axiom H85 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((logfilestate__split_fields28 = logfilestate__split_fields) and
  ((logfilestate__split_fields29 = logfilestate__split_fields1) and
  (((logfilestate__split_fields30 = logfilestate__split_fields2) and
  ((logfilestate__split_fields31 = logfilestate__split_fields3) and
  ((logfilestate__split_fields32 = logfilestate__split_fields4) and
  (logfilestate__split_fields33 = logfilestate__split_fields5)))) and
  (logfilestate__split_fields34 = logfilestate__split_fields6)))))))

axiom H86 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (logfilesstatus4 = logfilesstatus))))

axiom H87 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (logfiles4 = logfiles))))

axiom H88 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state32 = state17))))

axiom H89 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state31 = state16))))

axiom H90 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (output2 = output1))))

axiom H91 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (writtenstate2 = writtenstate1))))

axiom H92 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state30 = state15))))

axiom H93 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state29 = state14))))

axiom H94 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state28 = state13))))

axiom H95 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state27 = state12))))

axiom H96 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state26 = state11))))

axiom H97 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state25 = state10))))

axiom H98 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (filestate7 = filestate3))))

axiom H99 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (filestate6 = filestate2))))

axiom H100 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (state24 = state9))))

axiom H101 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (status7 = status2))))

axiom H102 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((theadmin__split_fields6 = theadmin__split_fields2) and
  (theadmin__split_fields7 = theadmin__split_fields3)))))

axiom H103 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((latchtimeout__split_fields8 = latchtimeout__split_fields4) and
  ((latchtimeout__split_fields9 = latchtimeout__split_fields5) and
  ((latchtimeout__split_fields10 = latchtimeout__split_fields6) and
  (latchtimeout__split_fields11 = latchtimeout__split_fields7)))))))

axiom H104 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (currentlatch2 = currentlatch1))))

axiom H105 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((idcert__split_fields80 = idcert__split_fields20) and
  ((((idcert__split_fields81 = idcert__split_fields21) and
  ((idcert__split_fields82 = idcert__split_fields22) and
  (idcert__split_fields83 = idcert__split_fields23))) and
  (idcert__split_fields84 = idcert__split_fields24)) and
  (((idcert__split_fields85 = idcert__split_fields25) and
  ((idcert__split_fields86 = idcert__split_fields26) and
  ((idcert__split_fields87 = idcert__split_fields27) and
  (idcert__split_fields88 = idcert__split_fields28)))) and
  (((idcert__split_fields89 = idcert__split_fields29) and
  ((idcert__split_fields90 = idcert__split_fields30) and
  ((idcert__split_fields91 = idcert__split_fields31) and
  (idcert__split_fields92 = idcert__split_fields32)))) and
  ((idcert__split_fields93 = idcert__split_fields33) and
  (((idcert__split_fields94 = idcert__split_fields34) and
  ((idcert__split_fields95 = idcert__split_fields35) and
  (idcert__split_fields96 = idcert__split_fields36))) and
  ((idcert__split_fields97 = idcert__split_fields37) and
  ((idcert__split_fields98 = idcert__split_fields38) and
  (idcert__split_fields99 = idcert__split_fields39))))))))))))

axiom H106 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((authcert__split_fields80 = authcert__split_fields20) and
  ((((authcert__split_fields81 = authcert__split_fields21) and
  ((authcert__split_fields82 = authcert__split_fields22) and
  (authcert__split_fields83 = authcert__split_fields23))) and
  (authcert__split_fields84 = authcert__split_fields24)) and
  (((authcert__split_fields85 = authcert__split_fields25) and
  ((authcert__split_fields86 = authcert__split_fields26) and
  ((authcert__split_fields87 = authcert__split_fields27) and
  (authcert__split_fields88 = authcert__split_fields28)))) and
  (((authcert__split_fields89 = authcert__split_fields29) and
  ((authcert__split_fields90 = authcert__split_fields30) and
  ((authcert__split_fields91 = authcert__split_fields31) and
  (authcert__split_fields92 = authcert__split_fields32)))) and
  ((authcert__split_fields93 = authcert__split_fields33) and
  ((((authcert__split_fields94 = authcert__split_fields34) and
  ((authcert__split_fields95 = authcert__split_fields35) and
  (authcert__split_fields96 = authcert__split_fields36))) and
  (authcert__split_fields97 = authcert__split_fields37)) and
  ((authcert__split_fields98 = authcert__split_fields38) and
  (authcert__split_fields99 = authcert__split_fields39)))))))))))

axiom H107 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (tokenid4 = tokenid1))))

axiom H108 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (tokentry4 = tokentry1))))

axiom H109 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (tokenpresence4 = tokenpresence1))))

axiom H110 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (auditsystemfault4 = auditsystemfault1))))

axiom H111 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (auditalarm4 = auditalarm1))))

axiom H112 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  ((logfilestate__split_fields28 = logfilestate__split_fields7) and
  ((logfilestate__split_fields29 = logfilestate__split_fields8) and
  (((logfilestate__split_fields30 = logfilestate__split_fields9) and
  ((logfilestate__split_fields31 = logfilestate__split_fields10) and
  ((logfilestate__split_fields32 = logfilestate__split_fields11) and
  (logfilestate__split_fields33 = logfilestate__split_fields12)))) and
  (logfilestate__split_fields34 = logfilestate__split_fields13)))))))

axiom H113 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (logfilesstatus4 = logfilesstatus1))))

axiom H114 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((not ((not (localstatus1 = 6)) -> (localstatus1 = 7))) ->
  (logfiles4 = logfiles1))))

axiom H115 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (state23 = state31)))

axiom H116 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (state22 = state26)))

axiom H117 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (state21 = state25)))

axiom H118 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (filestate5 = filestate7)))

axiom H119 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (status6 = status7)))

axiom H120 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((idcert__split_fields60 = idcert__split_fields80) and
  ((((idcert__split_fields61 = idcert__split_fields81) and
  ((idcert__split_fields62 = idcert__split_fields82) and
  (idcert__split_fields63 = idcert__split_fields83))) and
  (idcert__split_fields64 = idcert__split_fields84)) and
  (((idcert__split_fields65 = idcert__split_fields85) and
  ((idcert__split_fields66 = idcert__split_fields86) and
  ((idcert__split_fields67 = idcert__split_fields87) and
  (idcert__split_fields68 = idcert__split_fields88)))) and
  (((idcert__split_fields69 = idcert__split_fields89) and
  ((idcert__split_fields70 = idcert__split_fields90) and
  ((idcert__split_fields71 = idcert__split_fields91) and
  (idcert__split_fields72 = idcert__split_fields92)))) and
  ((idcert__split_fields73 = idcert__split_fields93) and
  (((idcert__split_fields74 = idcert__split_fields94) and
  ((idcert__split_fields75 = idcert__split_fields95) and
  (idcert__split_fields76 = idcert__split_fields96))) and
  ((idcert__split_fields77 = idcert__split_fields97) and
  ((idcert__split_fields78 = idcert__split_fields98) and
  (idcert__split_fields79 = idcert__split_fields99)))))))))))

axiom H121 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((authcert__split_fields60 = authcert__split_fields80) and
  ((((authcert__split_fields61 = authcert__split_fields81) and
  ((authcert__split_fields62 = authcert__split_fields82) and
  (authcert__split_fields63 = authcert__split_fields83))) and
  (authcert__split_fields64 = authcert__split_fields84)) and
  (((authcert__split_fields65 = authcert__split_fields85) and
  ((authcert__split_fields66 = authcert__split_fields86) and
  ((authcert__split_fields67 = authcert__split_fields87) and
  (authcert__split_fields68 = authcert__split_fields88)))) and
  (((authcert__split_fields69 = authcert__split_fields89) and
  ((authcert__split_fields70 = authcert__split_fields90) and
  ((authcert__split_fields71 = authcert__split_fields91) and
  (authcert__split_fields72 = authcert__split_fields92)))) and
  ((authcert__split_fields73 = authcert__split_fields93) and
  ((((authcert__split_fields74 = authcert__split_fields94) and
  ((authcert__split_fields75 = authcert__split_fields95) and
  (authcert__split_fields76 = authcert__split_fields96))) and
  (authcert__split_fields77 = authcert__split_fields97)) and
  ((authcert__split_fields78 = authcert__split_fields98) and
  (authcert__split_fields79 = authcert__split_fields99))))))))))

axiom H122 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (tokenid3 = tokenid4)))

axiom H123 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (tokentry3 = tokentry4)))

axiom H124 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (tokenpresence3 = tokenpresence4)))

axiom H125 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (auditsystemfault3 = auditsystemfault4)))

axiom H126 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (auditalarm3 = auditalarm4)))

axiom H127 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((logfilestate__split_fields21 = logfilestate__split_fields28) and
  ((logfilestate__split_fields22 = logfilestate__split_fields29) and
  (((logfilestate__split_fields23 = logfilestate__split_fields30) and
  ((logfilestate__split_fields24 = logfilestate__split_fields31) and
  ((logfilestate__split_fields25 = logfilestate__split_fields32) and
  (logfilestate__split_fields26 = logfilestate__split_fields33)))) and
  (logfilestate__split_fields27 = logfilestate__split_fields34))))))

axiom H128 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (logfilesstatus3 = logfilesstatus4)))

axiom H129 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (logfiles3 = logfiles4)))

axiom H130 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (state23 = state31)))

axiom H131 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (state22 = state26)))

axiom H132 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (state21 = state25)))

axiom H133 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (filestate5 = filestate7)))

axiom H134 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (status6 = status7)))

axiom H135 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((idcert__split_fields60 = idcert__split_fields80) and
  ((((idcert__split_fields61 = idcert__split_fields81) and
  ((idcert__split_fields62 = idcert__split_fields82) and
  (idcert__split_fields63 = idcert__split_fields83))) and
  (idcert__split_fields64 = idcert__split_fields84)) and
  (((idcert__split_fields65 = idcert__split_fields85) and
  ((idcert__split_fields66 = idcert__split_fields86) and
  ((idcert__split_fields67 = idcert__split_fields87) and
  (idcert__split_fields68 = idcert__split_fields88)))) and
  (((idcert__split_fields69 = idcert__split_fields89) and
  ((idcert__split_fields70 = idcert__split_fields90) and
  ((idcert__split_fields71 = idcert__split_fields91) and
  (idcert__split_fields72 = idcert__split_fields92)))) and
  ((idcert__split_fields73 = idcert__split_fields93) and
  (((idcert__split_fields74 = idcert__split_fields94) and
  ((idcert__split_fields75 = idcert__split_fields95) and
  (idcert__split_fields76 = idcert__split_fields96))) and
  ((idcert__split_fields77 = idcert__split_fields97) and
  ((idcert__split_fields78 = idcert__split_fields98) and
  (idcert__split_fields79 = idcert__split_fields99)))))))))))

axiom H136 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((authcert__split_fields60 = authcert__split_fields80) and
  ((((authcert__split_fields61 = authcert__split_fields81) and
  ((authcert__split_fields62 = authcert__split_fields82) and
  (authcert__split_fields63 = authcert__split_fields83))) and
  (authcert__split_fields64 = authcert__split_fields84)) and
  (((authcert__split_fields65 = authcert__split_fields85) and
  ((authcert__split_fields66 = authcert__split_fields86) and
  ((authcert__split_fields67 = authcert__split_fields87) and
  (authcert__split_fields68 = authcert__split_fields88)))) and
  (((authcert__split_fields69 = authcert__split_fields89) and
  ((authcert__split_fields70 = authcert__split_fields90) and
  ((authcert__split_fields71 = authcert__split_fields91) and
  (authcert__split_fields72 = authcert__split_fields92)))) and
  ((authcert__split_fields73 = authcert__split_fields93) and
  ((((authcert__split_fields74 = authcert__split_fields94) and
  ((authcert__split_fields75 = authcert__split_fields95) and
  (authcert__split_fields76 = authcert__split_fields96))) and
  (authcert__split_fields77 = authcert__split_fields97)) and
  ((authcert__split_fields78 = authcert__split_fields98) and
  (authcert__split_fields79 = authcert__split_fields99))))))))))

axiom H137 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (tokenid3 = tokenid4)))

axiom H138 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (tokentry3 = tokentry4)))

axiom H139 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (tokenpresence3 = tokenpresence4)))

axiom H140 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (auditsystemfault3 = auditsystemfault4)))

axiom H141 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (auditalarm3 = auditalarm4)))

axiom H142 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  ((logfilestate__split_fields21 = logfilestate__split_fields28) and
  ((logfilestate__split_fields22 = logfilestate__split_fields29) and
  (((logfilestate__split_fields23 = logfilestate__split_fields30) and
  ((logfilestate__split_fields24 = logfilestate__split_fields31) and
  ((logfilestate__split_fields25 = logfilestate__split_fields32) and
  (logfilestate__split_fields26 = logfilestate__split_fields33)))) and
  (logfilestate__split_fields27 = logfilestate__split_fields34))))))

axiom H143 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (logfilesstatus3 = logfilesstatus4)))

axiom H144 : ((not (localstatus1 = 5)) -> ((not (localstatus1 = 4)) ->
  (logfiles3 = logfiles4)))

axiom H145 : ((not (localstatus1 = 5)) -> (state20 = state23))

axiom H146 : ((not (localstatus1 = 5)) -> (status5 = status1))

axiom H147 : ((not (localstatus1 = 5)) -> (state19 = state22))

axiom H148 : ((not (localstatus1 = 5)) -> (state18 = state21))

axiom H149 : ((not (localstatus1 = 5)) -> (filestate4 = filestate5))

axiom H150 : ((not (localstatus1 = 5)) -> (status4 = status6))

axiom H151 : ((not (localstatus1 = 5)) ->
  ((theadmin__split_fields4 = theadmin__split_fields6) and
  (theadmin__split_fields5 = theadmin__split_fields7)))

axiom H152 : ((not (localstatus1 = 5)) ->
  ((idcert__split_fields40 = idcert__split_fields60) and
  ((((idcert__split_fields41 = idcert__split_fields61) and
  ((idcert__split_fields42 = idcert__split_fields62) and
  (idcert__split_fields43 = idcert__split_fields63))) and
  (idcert__split_fields44 = idcert__split_fields64)) and
  (((idcert__split_fields45 = idcert__split_fields65) and
  ((idcert__split_fields46 = idcert__split_fields66) and
  ((idcert__split_fields47 = idcert__split_fields67) and
  (idcert__split_fields48 = idcert__split_fields68)))) and
  (((idcert__split_fields49 = idcert__split_fields69) and
  ((idcert__split_fields50 = idcert__split_fields70) and
  ((idcert__split_fields51 = idcert__split_fields71) and
  (idcert__split_fields52 = idcert__split_fields72)))) and
  ((idcert__split_fields53 = idcert__split_fields73) and
  (((idcert__split_fields54 = idcert__split_fields74) and
  ((idcert__split_fields55 = idcert__split_fields75) and
  (idcert__split_fields56 = idcert__split_fields76))) and
  ((idcert__split_fields57 = idcert__split_fields77) and
  ((idcert__split_fields58 = idcert__split_fields78) and
  (idcert__split_fields59 = idcert__split_fields79))))))))))

axiom H153 : ((not (localstatus1 = 5)) ->
  ((authcert__split_fields40 = authcert__split_fields60) and
  ((((authcert__split_fields41 = authcert__split_fields61) and
  ((authcert__split_fields42 = authcert__split_fields62) and
  (authcert__split_fields43 = authcert__split_fields63))) and
  (authcert__split_fields44 = authcert__split_fields64)) and
  (((authcert__split_fields45 = authcert__split_fields65) and
  ((authcert__split_fields46 = authcert__split_fields66) and
  ((authcert__split_fields47 = authcert__split_fields67) and
  (authcert__split_fields48 = authcert__split_fields68)))) and
  (((authcert__split_fields49 = authcert__split_fields69) and
  ((authcert__split_fields50 = authcert__split_fields70) and
  ((authcert__split_fields51 = authcert__split_fields71) and
  (authcert__split_fields52 = authcert__split_fields72)))) and
  ((authcert__split_fields53 = authcert__split_fields73) and
  ((((authcert__split_fields54 = authcert__split_fields74) and
  ((authcert__split_fields55 = authcert__split_fields75) and
  (authcert__split_fields56 = authcert__split_fields76))) and
  (authcert__split_fields57 = authcert__split_fields77)) and
  ((authcert__split_fields58 = authcert__split_fields78) and
  (authcert__split_fields59 = authcert__split_fields79)))))))))

axiom H154 : ((not (localstatus1 = 5)) -> (tokenid2 = tokenid3))

axiom H155 : ((not (localstatus1 = 5)) -> (tokentry2 = tokentry3))

axiom H156 : ((not (localstatus1 = 5)) -> (tokenpresence2 = tokenpresence3))

axiom H157 : ((not (localstatus1 = 5)) ->
  (auditsystemfault2 = auditsystemfault3))

axiom H158 : ((not (localstatus1 = 5)) -> (auditalarm2 = auditalarm3))

axiom H159 : ((not (localstatus1 = 5)) ->
  ((logfilestate__split_fields14 = logfilestate__split_fields21) and
  ((logfilestate__split_fields15 = logfilestate__split_fields22) and
  (((logfilestate__split_fields16 = logfilestate__split_fields23) and
  ((logfilestate__split_fields17 = logfilestate__split_fields24) and
  ((logfilestate__split_fields18 = logfilestate__split_fields25) and
  (logfilestate__split_fields19 = logfilestate__split_fields26)))) and
  (logfilestate__split_fields20 = logfilestate__split_fields27)))))

axiom H160 : ((not (localstatus1 = 5)) ->
  (logfilesstatus2 = logfilesstatus3))

axiom H161 : ((not (localstatus1 = 5)) -> (logfiles2 = logfiles3))

axiom H162 : ((not (localstatus1 = 5)) -> (state20 = state23))

axiom H163 : ((not (localstatus1 = 5)) -> (status5 = status3))

axiom H164 : ((not (localstatus1 = 5)) -> (state19 = state22))

axiom H165 : ((not (localstatus1 = 5)) -> (state18 = state21))

axiom H166 : ((not (localstatus1 = 5)) -> (filestate4 = filestate5))

axiom H167 : ((not (localstatus1 = 5)) -> (status4 = status6))

axiom H168 : ((not (localstatus1 = 5)) ->
  ((theadmin__split_fields4 = theadmin__split_fields6) and
  (theadmin__split_fields5 = theadmin__split_fields7)))

axiom H169 : ((not (localstatus1 = 5)) ->
  ((idcert__split_fields40 = idcert__split_fields60) and
  ((((idcert__split_fields41 = idcert__split_fields61) and
  ((idcert__split_fields42 = idcert__split_fields62) and
  (idcert__split_fields43 = idcert__split_fields63))) and
  (idcert__split_fields44 = idcert__split_fields64)) and
  (((idcert__split_fields45 = idcert__split_fields65) and
  ((idcert__split_fields46 = idcert__split_fields66) and
  ((idcert__split_fields47 = idcert__split_fields67) and
  (idcert__split_fields48 = idcert__split_fields68)))) and
  (((idcert__split_fields49 = idcert__split_fields69) and
  ((idcert__split_fields50 = idcert__split_fields70) and
  ((idcert__split_fields51 = idcert__split_fields71) and
  (idcert__split_fields52 = idcert__split_fields72)))) and
  ((idcert__split_fields53 = idcert__split_fields73) and
  (((idcert__split_fields54 = idcert__split_fields74) and
  ((idcert__split_fields55 = idcert__split_fields75) and
  (idcert__split_fields56 = idcert__split_fields76))) and
  ((idcert__split_fields57 = idcert__split_fields77) and
  ((idcert__split_fields58 = idcert__split_fields78) and
  (idcert__split_fields59 = idcert__split_fields79))))))))))

axiom H170 : ((not (localstatus1 = 5)) ->
  ((authcert__split_fields40 = authcert__split_fields60) and
  ((((authcert__split_fields41 = authcert__split_fields61) and
  ((authcert__split_fields42 = authcert__split_fields62) and
  (authcert__split_fields43 = authcert__split_fields63))) and
  (authcert__split_fields44 = authcert__split_fields64)) and
  (((authcert__split_fields45 = authcert__split_fields65) and
  ((authcert__split_fields46 = authcert__split_fields66) and
  ((authcert__split_fields47 = authcert__split_fields67) and
  (authcert__split_fields48 = authcert__split_fields68)))) and
  (((authcert__split_fields49 = authcert__split_fields69) and
  ((authcert__split_fields50 = authcert__split_fields70) and
  ((authcert__split_fields51 = authcert__split_fields71) and
  (authcert__split_fields52 = authcert__split_fields72)))) and
  ((authcert__split_fields53 = authcert__split_fields73) and
  ((((authcert__split_fields54 = authcert__split_fields74) and
  ((authcert__split_fields55 = authcert__split_fields75) and
  (authcert__split_fields56 = authcert__split_fields76))) and
  (authcert__split_fields57 = authcert__split_fields77)) and
  ((authcert__split_fields58 = authcert__split_fields78) and
  (authcert__split_fields59 = authcert__split_fields79)))))))))

axiom H171 : ((not (localstatus1 = 5)) -> (tokenid2 = tokenid3))

axiom H172 : ((not (localstatus1 = 5)) -> (tokentry2 = tokentry3))

axiom H173 : ((not (localstatus1 = 5)) -> (tokenpresence2 = tokenpresence3))

axiom H174 : ((not (localstatus1 = 5)) ->
  (auditsystemfault2 = auditsystemfault3))

axiom H175 : ((not (localstatus1 = 5)) -> (auditalarm2 = auditalarm3))

axiom H176 : ((not (localstatus1 = 5)) ->
  ((logfilestate__split_fields14 = logfilestate__split_fields21) and
  ((logfilestate__split_fields15 = logfilestate__split_fields22) and
  (((logfilestate__split_fields16 = logfilestate__split_fields23) and
  ((logfilestate__split_fields17 = logfilestate__split_fields24) and
  ((logfilestate__split_fields18 = logfilestate__split_fields25) and
  (logfilestate__split_fields19 = logfilestate__split_fields26)))) and
  (logfilestate__split_fields20 = logfilestate__split_fields27)))))

axiom H177 : ((not (localstatus1 = 5)) ->
  (logfilesstatus2 = logfilesstatus3))

axiom H178 : ((not (localstatus1 = 5)) -> (logfiles2 = logfiles3))

axiom H179 : (state41 = state32)

axiom H180 : (state40 = state20)

axiom H181 : (output3 = output2)

axiom H182 : (writtenstate3 = writtenstate2)

axiom H183 : (state39 = state30)

axiom H184 : (state38 = state29)

axiom H185 : (state37 = state28)

axiom H186 : (state36 = state27)

axiom H187 : (status9 = status5)

axiom H188 : (state35 = state19)

axiom H189 : (state34 = state18)

axiom H190 : (filestate9 = filestate4)

axiom H191 : (filestate8 = filestate6)

axiom H192 : (state33 = state24)

axiom H193 : (localstatus2 = localstatus1)

axiom H194 : (status8 = status4)

axiom H195 : ((theadmin__split_fields8 = theadmin__split_fields4) and
  (theadmin__split_fields9 = theadmin__split_fields5))

axiom H196 :
  ((latchtimeout__split_fields12 = latchtimeout__split_fields8) and
  ((latchtimeout__split_fields13 = latchtimeout__split_fields9) and
  ((latchtimeout__split_fields14 = latchtimeout__split_fields10) and
  (latchtimeout__split_fields15 = latchtimeout__split_fields11))))

axiom H197 : (currentlatch3 = currentlatch2)

axiom H198 : ((idcert__split_fields100 = idcert__split_fields40) and
  ((((idcert__split_fields101 = idcert__split_fields41) and
  ((idcert__split_fields102 = idcert__split_fields42) and
  (idcert__split_fields103 = idcert__split_fields43))) and
  (idcert__split_fields104 = idcert__split_fields44)) and
  (((idcert__split_fields105 = idcert__split_fields45) and
  ((idcert__split_fields106 = idcert__split_fields46) and
  ((idcert__split_fields107 = idcert__split_fields47) and
  (idcert__split_fields108 = idcert__split_fields48)))) and
  (((idcert__split_fields109 = idcert__split_fields49) and
  ((idcert__split_fields110 = idcert__split_fields50) and
  ((idcert__split_fields111 = idcert__split_fields51) and
  (idcert__split_fields112 = idcert__split_fields52)))) and
  ((idcert__split_fields113 = idcert__split_fields53) and
  (((idcert__split_fields114 = idcert__split_fields54) and
  ((idcert__split_fields115 = idcert__split_fields55) and
  (idcert__split_fields116 = idcert__split_fields56))) and
  ((idcert__split_fields117 = idcert__split_fields57) and
  ((idcert__split_fields118 = idcert__split_fields58) and
  (idcert__split_fields119 = idcert__split_fields59)))))))))

axiom H199 : ((authcert__split_fields100 = authcert__split_fields40) and
  ((((authcert__split_fields101 = authcert__split_fields41) and
  ((authcert__split_fields102 = authcert__split_fields42) and
  (authcert__split_fields103 = authcert__split_fields43))) and
  (authcert__split_fields104 = authcert__split_fields44)) and
  (((authcert__split_fields105 = authcert__split_fields45) and
  ((authcert__split_fields106 = authcert__split_fields46) and
  ((authcert__split_fields107 = authcert__split_fields47) and
  (authcert__split_fields108 = authcert__split_fields48)))) and
  (((authcert__split_fields109 = authcert__split_fields49) and
  ((authcert__split_fields110 = authcert__split_fields50) and
  ((authcert__split_fields111 = authcert__split_fields51) and
  (authcert__split_fields112 = authcert__split_fields52)))) and
  ((authcert__split_fields113 = authcert__split_fields53) and
  ((((authcert__split_fields114 = authcert__split_fields54) and
  ((authcert__split_fields115 = authcert__split_fields55) and
  (authcert__split_fields116 = authcert__split_fields56))) and
  (authcert__split_fields117 = authcert__split_fields57)) and
  ((authcert__split_fields118 = authcert__split_fields58) and
  (authcert__split_fields119 = authcert__split_fields59))))))))

axiom H200 : (tokenid5 = tokenid2)

axiom H201 : (tokentry5 = tokentry2)

axiom H202 : (tokenpresence5 = tokenpresence2)

axiom H203 : (auditsystemfault5 = auditsystemfault2)

axiom H204 : (auditalarm5 = auditalarm2)

axiom H205 :
  ((logfilestate__split_fields35 = logfilestate__split_fields14) and
  ((logfilestate__split_fields36 = logfilestate__split_fields15) and
  (((logfilestate__split_fields37 = logfilestate__split_fields16) and
  ((logfilestate__split_fields38 = logfilestate__split_fields17) and
  ((logfilestate__split_fields39 = logfilestate__split_fields18) and
  (logfilestate__split_fields40 = logfilestate__split_fields19)))) and
  (logfilestate__split_fields41 = logfilestate__split_fields20))))

axiom H206 : (logfilesstatus5 = logfilesstatus2)

axiom H207 : (logfiles5 = logfiles2)

axiom H208 : (state50 = state32)

axiom H209 : (state49 = state20)

axiom H210 : (output4 = output2)

axiom H211 : (writtenstate4 = writtenstate2)

axiom H212 : (state48 = state30)

axiom H213 : (state47 = state29)

axiom H214 : (state46 = state28)

axiom H215 : (state45 = state27)

axiom H216 : (status11 = status5)

axiom H217 : (state44 = state19)

axiom H218 : (state43 = state18)

axiom H219 : (filestate11 = filestate4)

axiom H220 : (filestate10 = filestate6)

axiom H221 : (state42 = state24)

axiom H222 : (localstatus3 = localstatus1)

axiom H223 : (status10 = status4)

axiom H224 : ((theadmin__split_fields10 = theadmin__split_fields4) and
  (theadmin__split_fields11 = theadmin__split_fields5))

axiom H225 :
  ((latchtimeout__split_fields16 = latchtimeout__split_fields8) and
  ((latchtimeout__split_fields17 = latchtimeout__split_fields9) and
  ((latchtimeout__split_fields18 = latchtimeout__split_fields10) and
  (latchtimeout__split_fields19 = latchtimeout__split_fields11))))

axiom H226 : (currentlatch4 = currentlatch2)

axiom H227 : ((idcert__split_fields120 = idcert__split_fields40) and
  ((((idcert__split_fields121 = idcert__split_fields41) and
  ((idcert__split_fields122 = idcert__split_fields42) and
  (idcert__split_fields123 = idcert__split_fields43))) and
  (idcert__split_fields124 = idcert__split_fields44)) and
  (((idcert__split_fields125 = idcert__split_fields45) and
  ((idcert__split_fields126 = idcert__split_fields46) and
  ((idcert__split_fields127 = idcert__split_fields47) and
  (idcert__split_fields128 = idcert__split_fields48)))) and
  (((idcert__split_fields129 = idcert__split_fields49) and
  ((idcert__split_fields130 = idcert__split_fields50) and
  ((idcert__split_fields131 = idcert__split_fields51) and
  (idcert__split_fields132 = idcert__split_fields52)))) and
  ((idcert__split_fields133 = idcert__split_fields53) and
  (((idcert__split_fields134 = idcert__split_fields54) and
  ((idcert__split_fields135 = idcert__split_fields55) and
  (idcert__split_fields136 = idcert__split_fields56))) and
  ((idcert__split_fields137 = idcert__split_fields57) and
  ((idcert__split_fields138 = idcert__split_fields58) and
  (idcert__split_fields139 = idcert__split_fields59)))))))))

axiom H228 : ((authcert__split_fields120 = authcert__split_fields40) and
  ((((authcert__split_fields121 = authcert__split_fields41) and
  ((authcert__split_fields122 = authcert__split_fields42) and
  (authcert__split_fields123 = authcert__split_fields43))) and
  (authcert__split_fields124 = authcert__split_fields44)) and
  (((authcert__split_fields125 = authcert__split_fields45) and
  ((authcert__split_fields126 = authcert__split_fields46) and
  ((authcert__split_fields127 = authcert__split_fields47) and
  (authcert__split_fields128 = authcert__split_fields48)))) and
  (((authcert__split_fields129 = authcert__split_fields49) and
  ((authcert__split_fields130 = authcert__split_fields50) and
  ((authcert__split_fields131 = authcert__split_fields51) and
  (authcert__split_fields132 = authcert__split_fields52)))) and
  ((authcert__split_fields133 = authcert__split_fields53) and
  ((((authcert__split_fields134 = authcert__split_fields54) and
  ((authcert__split_fields135 = authcert__split_fields55) and
  (authcert__split_fields136 = authcert__split_fields56))) and
  (authcert__split_fields137 = authcert__split_fields57)) and
  ((authcert__split_fields138 = authcert__split_fields58) and
  (authcert__split_fields139 = authcert__split_fields59))))))))

axiom H229 : (tokenid6 = tokenid2)

axiom H230 : (tokentry6 = tokentry2)

axiom H231 : (tokenpresence6 = tokenpresence2)

axiom H232 : (auditsystemfault6 = auditsystemfault2)

axiom H233 : (auditalarm6 = auditalarm2)

axiom H234 :
  ((logfilestate__split_fields42 = logfilestate__split_fields14) and
  ((logfilestate__split_fields43 = logfilestate__split_fields15) and
  (((logfilestate__split_fields44 = logfilestate__split_fields16) and
  ((logfilestate__split_fields45 = logfilestate__split_fields17) and
  ((logfilestate__split_fields46 = logfilestate__split_fields18) and
  (logfilestate__split_fields47 = logfilestate__split_fields19)))) and
  (logfilestate__split_fields48 = logfilestate__split_fields20))))

axiom H235 : (logfilesstatus6 = logfilesstatus2)

axiom H236 : (logfiles6 = logfiles2)

axiom H237 : ((o46 = islocked(currentlatch3, state36, {
  rec__clock__timet__year = latchtimeout__split_fields12;
  rec__clock__timet__month = latchtimeout__split_fields13;
  rec__clock__timet__day = latchtimeout__split_fields14;
  rec__clock__timet__millisec = latchtimeout__split_fields15 })) and
  ((o46 = true) <-> (currentlatch3 = 0)))

axiom H238 : (((not (o46 = true)) -> (o47 = true)) and ((o46 = true) ->
  (o47 = false)))

axiom H239 : (result7 = match_bool(o47, islocked(currentlatch, state3, {
  rec__clock__timet__year = latchtimeout__split_fields;
  rec__clock__timet__month = latchtimeout__split_fields1;
  rec__clock__timet__day = latchtimeout__split_fields2;
  rec__clock__timet__millisec = latchtimeout__split_fields3 }), false))

axiom H240 : ((result7 = true) -> ((o48 = thecurrentop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  in_range4(o48)))

axiom H241 : ((result7 = true) -> (((o48 = 3) -> (o49 = true)) and
  ((not (o48 = 3)) -> (o49 = false))))

axiom H242 : ((result7 = true) -> ((o50 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  ((o50 = true) <-> in_range4(to_rep1(theadmin__split_fields1)))))

axiom H243 : ((result7 = true) -> (o51 = match_bool(o50, o49, false)))

axiom H244 : ((not (result7 = true)) -> (o51 = of_int(1)))

axiom H245 : ((result9 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((result9 = true) <-> in_range4(to_rep1(theadmin__split_fields9))))

axiom H246 : ((result9 = true) -> ((o44 = thecurrentop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  in_range4(o44)))

axiom H247 : ((result9 = true) -> (((o44 = 4) -> (result8 = true)) and
  ((not (o44 = 4)) -> (result8 = false))))

axiom H248 : ((not (result9 = true)) -> (result8 = false))

axiom H249 : ((result8 = true) -> (((status8 = 6) -> (o45 = true)) and
  ((not (status8 = 6)) -> (o45 = false))))

axiom H250 : ((not (result8 = true)) -> (o45 = of_int(1)))

axiom H251 : ((status8 = 8) -> ((o40 = rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  (in_range2(o40) and (o40 = to_rep(theadmin__split_fields8)))))

axiom H252 : ((status8 = 8) -> (((o40 = 0) -> (o41 = true)) and
  ((not (o40 = 0)) -> (o41 = false))))

axiom H253 : ((status8 = 8) -> ((o39 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((o39 = true) <-> in_range4(to_rep1(theadmin__split_fields9)))))

axiom H254 : ((status8 = 8) -> (((not (o39 = true)) -> (o42 = true)) and
  ((o39 = true) -> (o42 = false))))

axiom H255 : ((status8 = 8) -> (o43 = match_bool(o42, o41, false)))

axiom H256 : ((not (status8 = 8)) -> (o43 = of_int(1)))

axiom H257 : ((status8 = 3) -> ((o37 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((o37 = true) <-> in_range4(to_rep1(theadmin__split_fields9)))))

axiom H258 : ((status8 = 3) -> (((not (o37 = true)) -> (o38 = true)) and
  ((o37 = true) -> (o38 = false))))

axiom H259 : ((not (status8 = 3)) -> (o38 = of_int(1)))

axiom H260 : (((not (status8 = 6)) -> (status8 = 7)) -> ((o32 = rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  (in_range2(o32) and (o32 = to_rep(theadmin__split_fields)))))

axiom H261 : (((not (status8 = 6)) -> (status8 = 7)) -> ((o33 = rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  (in_range2(o33) and (o33 = to_rep(theadmin__split_fields8)))))

axiom H262 : (((not (status8 = 6)) -> (status8 = 7)) -> (((o33 = o32) ->
  (o34 = true)) and ((not (o33 = o32)) -> (o34 = false))))

axiom H263 : (((not (status8 = 6)) -> (status8 = 7)) -> ((o30 = ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((o30 = true) <-> in_range5(to_rep(theadmin__split_fields8)))))

axiom H264 : (((not (status8 = 6)) -> (status8 = 7)) -> ((o31 = isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((o31 = true) <-> in_range4(to_rep1(theadmin__split_fields9)))))

axiom H265 : (((not (status8 = 6)) -> (status8 = 7)) ->
  (o35 = match_bool(o31, o30, false)))

axiom H266 : (((not (status8 = 6)) -> (status8 = 7)) ->
  (o36 = match_bool(o35, o34, false)))

axiom H267 : ((not ((not (status8 = 6)) -> (status8 = 7))) ->
  (o36 = of_int(1)))

axiom H268 : (((not (status8 = 5)) -> (status8 = 4)) -> ((o28 = ispresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((o28 = true) <-> in_range5(to_rep(theadmin__split_fields8)))))

axiom H269 : (((not (status8 = 5)) -> (status8 = 4)) ->
  (((not (o28 = true)) -> (o29 = true)) and ((o28 = true) -> (o29 = false))))

axiom H270 : ((not ((not (status8 = 5)) -> (status8 = 4))) ->
  (o29 = of_int(1)))

axiom H271 : ((o25 = ispresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((o25 = true) <-> in_range5(to_rep(theadmin__split_fields8))))

axiom H272 : (((not (o25 = true)) -> (result10 = true)) and ((o25 = true) ->
  (result10 = false)))

axiom H273 : ((result10 = true) -> ((o26 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((o26 = true) <-> in_range4(to_rep1(theadmin__split_fields9)))))

axiom H274 : ((result10 = true) -> (((not (o26 = true)) -> (o27 = true)) and
  ((o26 = true) -> (o27 = false))))

axiom H275 : ((not (result10 = true)) -> (o27 = of_int(1)))

axiom H276 : ((o19 = rolepresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  (in_range2(o19) and (o19 = to_rep(theadmin__split_fields8))))

axiom H277 : (((o19 = 1) -> (result11 = true)) and ((not (o19 = 1)) ->
  (result11 = false)))

axiom H278 : ((result11 = true) -> ((o21 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((o21 = true) <-> in_range4(to_rep1(theadmin__split_fields9)))))

axiom H279 : ((result11 = true) -> (((not (o21 = true)) -> (o22 = true)) and
  ((o21 = true) -> (o22 = false))))

axiom H280 : ((result11 = true) -> ((result12 = isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((result12 = true) <-> in_range4(to_rep1(theadmin__split_fields9)))))

axiom H281 : ((result11 = true) -> ((result12 = true) ->
  ((o20 = thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields8; rec__admin__t__currentop = theadmin__split_fields9
  } })) and in_range4(o20))))

axiom H282 : ((result11 = true) -> ((result12 = true) -> (((o20 = 3) ->
  (o23 = true)) and ((not (o20 = 3)) -> (o23 = false)))))

axiom H283 : ((result11 = true) -> ((not (result12 = true)) ->
  (o23 = false)))

axiom H284 : ((result11 = true) -> (o24 = match_bool(o23, true, o22)))

axiom H285 : ((not (result11 = true)) -> (o24 = of_int(1)))

axiom H286 : ((result13 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } })) and
  ((result13 = true) <-> in_range4(to_rep1(theadmin__split_fields9))))

axiom H287 : (result13 = true)

 (* File "enclave.ads", line 77, characters 0-0 *)
goal WP_parameter_def : (isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields8;
  rec__admin__t__currentop = theadmin__split_fields9 } }) = true)
