(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort value_type 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (value_type value_type) Bool)
(declare-const dummy1 value_type)
(declare-datatypes () ((value_type__ref (mk_value_type__ref (value_type__content value_type)))))
(define-fun value_type__ref___projection ((a value_type__ref)) value_type (value_type__content a))
(define-fun dynamic_invariant ((temp___expr_208 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 0 2147483647)) (in_range2 temp___expr_208)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-sort nearest_mode 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (nearest_mode nearest_mode) Bool)
(declare-const dummy2 nearest_mode)
(declare-datatypes () ((nearest_mode__ref (mk_nearest_mode__ref (nearest_mode__content nearest_mode)))))
(define-fun nearest_mode__ref___projection ((a nearest_mode__ref)) nearest_mode (nearest_mode__content a))
(define-fun dynamic_invariant1 ((temp___expr_225 Int) (temp___is_init_221 Bool) (temp___skip_constant_222 Bool) (temp___do_toplevel_223 Bool) (temp___do_typ_inv_224 Bool)) Bool (=> (or (= temp___is_init_221 true) (<= 0 2)) (in_range3 temp___expr_225)))
(declare-fun is_prime (Int) Bool)
(declare-fun is_prime__function_guard (Bool Int) Bool)
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(assert true)
(assert (forall ((value Int)) (! (= (= (is_prime value) true) (and (<= 2 value) (forall ((v Int)) (=> (and (<= 2 v) (<= v (- value 1))) (not (= (mod2 value v) 0)))))) :pattern ((is_prime value)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun valid_prime_data ((Array Int Bool)) Bool)
(declare-fun valid_prime_data__function_guard (Bool (Array Int Bool)) Bool)
(assert true)
(assert (forall ((test_prime_and_coprime_numbers__p__set__is_prime (Array Int Bool))) (! (= (= (valid_prime_data test_prime_and_coprime_numbers__p__set__is_prime) true) (forall ((v Int)) (=> (and (<= 0 v) (<= v 100000)) (= (= (select test_prime_and_coprime_numbers__p__set__is_prime v) true) (= (is_prime v) true))))) :pattern ((valid_prime_data test_prime_and_coprime_numbers__p__set__is_prime)))))
(declare-fun has_prime (Int Int) Bool)
(declare-fun has_prime__function_guard (Bool Int Int) Bool)
(assert true)
(assert (forall ((low Int) (high Int)) (! (= (= (has_prime low high) true) (exists ((v Int)) (and (and (<= low v) (<= v high)) (= (is_prime v) true)))) :pattern ((has_prime low high)))))
(declare-fun has_true ((Array Int Bool) Int Int) Bool)
(declare-fun has_true__function_guard (Bool (Array Int Bool) Int Int) Bool)
(declare-fun nearest_number ((Array Int Bool) Int Int) Int)
(declare-fun nearest_number__function_guard (Int (Array Int Bool) Int Int) Bool)
(declare-const value Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const mode Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert true)
(assert (forall ((number_list (Array Int Bool))) (forall ((low Int) (high Int)) (! (= (= (has_true number_list low high) true) (exists ((v Int)) (and (and (<= low v) (<= v high)) (= (select number_list v) true)))) :pattern ((has_true number_list low high))))))
(declare-const is_prime1 (Array Int Bool))
(declare-const test_prime_and_coprime_numbers__p__nearest_prime_number__result Int)
(declare-const o Int)
(declare-const v Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Bool)
(declare-const v1 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Bool)
(declare-const result Int)
(declare-const test_prime_and_coprime_numbers__p__nearest_prime_number__result1 Int)
(declare-const test_prime_and_coprime_numbers__p__nearest_prime_number__result2 Int)
(declare-const test_prime_and_coprime_numbers__p__nearest_prime_number__result3 Int)
(declare-const test_prime_and_coprime_numbers__p__nearest_prime_number__result4 Int)
(declare-const test_prime_and_coprime_numbers__p__nearest_prime_number__result5 Int)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Bool)
(assert (in_range2 value))
(assert (in_range3 mode))
(assert (and (and (<= 0 value) (<= value 100000)) (and (= (valid_prime_data is_prime1) true) (ite (= mode 0) (= (has_prime value 100000) true) (ite (= mode 1) (= (has_prime 0 value) true) (= (has_prime 0 100000) true))))))
(assert (= test_prime_and_coprime_numbers__p__nearest_prime_number__result1 test_prime_and_coprime_numbers__p__nearest_prime_number__result2))
(assert (= test_prime_and_coprime_numbers__p__nearest_prime_number__result3 test_prime_and_coprime_numbers__p__nearest_prime_number__result1))
(assert (and (= o (nearest_number is_prime1 mode value)) (and (in_range2 o) (and (and (and (<= 0 o) (<= o 100000)) (= (select is_prime1 o) true)) (ite (= (= (ite (select is_prime1 value) 1 0) (ite (distinct 1 0) 1 0)) true) (= o value) (ite (= (ite (= (= (ite (select is_prime1 value) 1 0) (ite (distinct 0 0) 1 0)) true) (= mode 0) false) true) (and (< value o) (forall ((v2 Int)) (=> (and (<= value v2) (<= v2 (- o 1))) (not (= (select is_prime1 v2) true))))) (ite (= (ite (= (= (ite (select is_prime1 value) 1 0) (ite (distinct 0 0) 1 0)) true) (= mode 1) false) true) (and (< o value) (forall ((v2 Int)) (=> (and (<= (+ o 1) v2) (<= v2 value)) (not (= (select is_prime1 v2) true))))) (=> (= (ite (= (= (ite (select is_prime1 value) 1 0) (ite (distinct 0 0) 1 0)) true) (= mode 2) false) true) (and (forall ((v2 Int)) (=> (and (<= (ite (< 0 (+ (- value (abs (- value o))) 1)) (+ (- value (abs (- value o))) 1) 0) v2) (<= v2 value)) (not (= (select is_prime1 v2) true)))) (forall ((v2 Int)) (=> (and (<= value v2) (<= v2 (ite (< 100000 (- (+ value (abs (- value o))) 1)) 100000 (- (+ value (abs (- value o))) 1)))) (not (= (select is_prime1 v2) true)))))))))))))
(assert (= (mk_int__ref result) (mk_int__ref test_prime_and_coprime_numbers__p__nearest_prime_number__result)))
(assert (= test_prime_and_coprime_numbers__p__nearest_prime_number__result1 o))
(assert (= (mk_int__ref test_prime_and_coprime_numbers__p__nearest_prime_number__result4) (mk_int__ref test_prime_and_coprime_numbers__p__nearest_prime_number__result2)))
(assert (= test_prime_and_coprime_numbers__p__nearest_prime_number__result5 test_prime_and_coprime_numbers__p__nearest_prime_number__result3))
(assert (=> (= (is_prime value) true) (= test_prime_and_coprime_numbers__p__nearest_prime_number__result4 value)))
(assert (=> (= (ite (= (is_prime value) false) (= mode 0) false) true) (and (< value test_prime_and_coprime_numbers__p__nearest_prime_number__result4) (forall ((v2 Int)) (=> (and (<= value v2) (<= v2 (- test_prime_and_coprime_numbers__p__nearest_prime_number__result4 1))) (not (= (is_prime v2) true)))))))
(assert (=> (= (ite (= (is_prime value) false) (= mode 1) false) true) (and (< test_prime_and_coprime_numbers__p__nearest_prime_number__result4 value) (forall ((v2 Int)) (=> (and (<= (+ test_prime_and_coprime_numbers__p__nearest_prime_number__result4 1) v2) (<= v2 value)) (not (= (is_prime v2) true)))))))
(assert (= (ite (= (is_prime value) false) (= mode 2) false) true))
(assert (and (= o10 (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result4)) (in_range1 (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result4))))
(assert (= o11 (abs o10)))
(assert (and (= o12 o11) (in_range1 o11)))
(assert (= o13 (- value o12)))
(assert (and (= o14 o13) (in_range1 o13)))
(assert (= o15 (+ o14 1)))
(assert (and (= o16 o15) (in_range1 o15)))
(assert (= o17 (ite (< 0 o16) o16 0)))
(assert (= o18 (ite (<= o17 v1) true false)))
(assert (= result2 (ite (= o18 true) (ite (<= v1 value) true false) false)))
(assert (= (= result1 true) (forall ((v2 Int)) (=> (and (<= (ite (< 0 (+ (- value (abs (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result4))) 1)) (+ (- value (abs (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result4))) 1) 0) v2) (<= v2 value)) (not (= (is_prime v2) true))))))
(assert (= result1 true))
(assert (and (= o1 (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result4)) (in_range1 (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result4))))
(assert (= o2 (abs o1)))
(assert (and (= o3 o2) (in_range1 o2)))
(assert (= o4 (+ value o3)))
(assert (and (= o5 o4) (in_range1 o4)))
(assert (= o6 (- o5 1)))
(assert (and (= o7 o6) (in_range1 o6)))
(assert (= o8 (ite (< 100000 o7) 100000 o7)))
(assert (= o9 (ite (<= v o8) true false)))
(assert (= result3 (ite (<= value v) o9 false)))
(assert (= result3 true))
(assert (not (in_range2 v)))
(check-sat)
(exit)
