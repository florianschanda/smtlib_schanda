(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-const dummy4 (Array Int character))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int character)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__instr__instrument__name (Array Int character)) (rec__ext__ us_private)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) (rec__instr__instrument__name a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (= (bool_eq (rec__instr__instrument__name (us_split_fields1 a)) 1 14 (rec__instr__instrument__name (us_split_fields1 b)) 1 14) true) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const instr__instrument__name__first__bit Int)
(declare-const instr__instrument__name__last__bit Int)
(declare-const instr__instrument__name__position Int)
(assert (<= 0 instr__instrument__name__first__bit))
(assert (< instr__instrument__name__first__bit instr__instrument__name__last__bit))
(assert (<= 0 instr__instrument__name__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((instrument__ref (mk_instrument__ref (instrument__content us_rep)))))
(define-fun instrument__ref___projection ((a instrument__ref)) us_rep (instrument__content a))
(declare-sort sixty 0)
(declare-fun sixtyqtint (sixty) Int)
(assert (forall ((i sixty)) (and (<= 0 (sixtyqtint i)) (<= (sixtyqtint i) 60))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 60)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq6 (sixty sixty) Bool)
(declare-const dummy6 sixty)
(declare-datatypes () ((sixty__ref (mk_sixty__ref (sixty__content sixty)))))
(define-fun sixty__ref___projection ((a sixty__ref)) sixty (sixty__content a))
(define-fun to_rep2 ((x sixty)) Int (sixtyqtint x))
(declare-fun of_rep2 (Int) sixty)
(assert (forall ((x sixty)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x sixty)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort twenty_four 0)
(declare-fun twenty_fourqtint (twenty_four) Int)
(assert (forall ((i twenty_four)) (and (<= 0 (twenty_fourqtint i)) (<= (twenty_fourqtint i) 24))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 24)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (twenty_four twenty_four) Bool)
(declare-const dummy7 twenty_four)
(declare-datatypes () ((twenty_four__ref (mk_twenty_four__ref (twenty_four__content twenty_four)))))
(define-fun twenty_four__ref___projection ((a twenty_four__ref)) twenty_four (twenty_four__content a))
(define-fun to_rep3 ((x twenty_four)) Int (twenty_fourqtint x))
(declare-fun of_rep3 (Int) twenty_four)
(assert (forall ((x twenty_four)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x twenty_four)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__instr__clock__seconds sixty) (rec__instr__clock__minutes sixty) (rec__instr__clock__hours twenty_four) (rec__instr__instrument__name1 (Array Int character)) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Seconds__projection ((a us_split_fields2)) sixty (rec__instr__clock__seconds a))
(define-fun us_split_fields_Minutes__projection ((a us_split_fields2)) sixty (rec__instr__clock__minutes a))
(define-fun us_split_fields_Hours__projection ((a us_split_fields2)) twenty_four (rec__instr__clock__hours a))
(define-fun us_split_fields_Name__5__projection ((a us_split_fields2)) (Array Int character) (rec__instr__instrument__name1 a))
(define-fun us_split_fields___5__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___10__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (sixty sixty twenty_four us_private) us_private)
(declare-fun extract__seconds (us_private) sixty)
(assert (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__2 us_private)) (= (extract__seconds (hide_ext__ seconds minutes hours rec__ext__2)) seconds)))))
(declare-fun extract__minutes (us_private) sixty)
(assert (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__2 us_private)) (= (extract__minutes (hide_ext__ seconds minutes hours rec__ext__2)) minutes)))))
(declare-fun extract__hours (us_private) twenty_four)
(assert (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__2 us_private)) (= (extract__hours (hide_ext__ seconds minutes hours rec__ext__2)) hours)))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__instr__instrument__name1 (us_split_fields3 a)) (hide_ext__ (rec__instr__clock__seconds (us_split_fields3 a)) (rec__instr__clock__minutes (us_split_fields3 a)) (rec__instr__clock__hours (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__seconds (rec__ext__ (us_split_fields1 r))) (extract__minutes (rec__ext__ (us_split_fields1 r))) (extract__hours (rec__ext__ (us_split_fields1 r))) (rec__instr__instrument__name (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep2 (rec__instr__clock__seconds (us_split_fields3 a))) (to_rep2 (rec__instr__clock__seconds (us_split_fields3 b)))) (= (to_rep2 (rec__instr__clock__minutes (us_split_fields3 a))) (to_rep2 (rec__instr__clock__minutes (us_split_fields3 b))))) (= (to_rep3 (rec__instr__clock__hours (us_split_fields3 a))) (to_rep3 (rec__instr__clock__hours (us_split_fields3 b))))) (= (bool_eq (rec__instr__instrument__name1 (us_split_fields3 a)) 1 14 (rec__instr__instrument__name1 (us_split_fields3 b)) 1 14) true)) true false))
(declare-const us_tag1 Int)
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const instr__clock__seconds__first__bit Int)
(declare-const instr__clock__seconds__last__bit Int)
(declare-const instr__clock__seconds__position Int)
(assert (<= 0 instr__clock__seconds__first__bit))
(assert (< instr__clock__seconds__first__bit instr__clock__seconds__last__bit))
(assert (<= 0 instr__clock__seconds__position))
(declare-const instr__clock__minutes__first__bit Int)
(declare-const instr__clock__minutes__last__bit Int)
(declare-const instr__clock__minutes__position Int)
(assert (<= 0 instr__clock__minutes__first__bit))
(assert (< instr__clock__minutes__first__bit instr__clock__minutes__last__bit))
(assert (<= 0 instr__clock__minutes__position))
(declare-const instr__clock__hours__first__bit Int)
(declare-const instr__clock__hours__last__bit Int)
(declare-const instr__clock__hours__position Int)
(assert (<= 0 instr__clock__hours__first__bit))
(assert (< instr__clock__hours__first__bit instr__clock__hours__last__bit))
(assert (<= 0 instr__clock__hours__position))
(declare-const instr__instrument__name__first__bit1 Int)
(declare-const instr__instrument__name__last__bit1 Int)
(declare-const instr__instrument__name__position1 Int)
(assert (<= 0 instr__instrument__name__first__bit1))
(assert (< instr__instrument__name__first__bit1 instr__instrument__name__last__bit1))
(assert (<= 0 instr__instrument__name__position1))
(declare-fun user_eq8 (us_rep1 us_rep1) Bool)
(declare-const dummy8 us_rep1)
(declare-datatypes () ((clock__ref (mk_clock__ref (clock__content us_rep1)))))
(define-fun clock__ref___projection ((a clock__ref)) us_rep1 (clock__content a))
(declare-const us_tag2 Int)
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const instr__instrument__name__first__bit2 Int)
(declare-const instr__instrument__name__last__bit2 Int)
(declare-const instr__instrument__name__position2 Int)
(assert (<= 0 instr__instrument__name__first__bit2))
(assert (< instr__instrument__name__first__bit2 instr__instrument__name__last__bit2))
(assert (<= 0 instr__instrument__name__position2))
(declare-const instr__clock__seconds__first__bit1 Int)
(declare-const instr__clock__seconds__last__bit1 Int)
(declare-const instr__clock__seconds__position1 Int)
(assert (<= 0 instr__clock__seconds__first__bit1))
(assert (< instr__clock__seconds__first__bit1 instr__clock__seconds__last__bit1))
(assert (<= 0 instr__clock__seconds__position1))
(declare-const instr__clock__minutes__first__bit1 Int)
(declare-const instr__clock__minutes__last__bit1 Int)
(declare-const instr__clock__minutes__position1 Int)
(assert (<= 0 instr__clock__minutes__first__bit1))
(assert (< instr__clock__minutes__first__bit1 instr__clock__minutes__last__bit1))
(assert (<= 0 instr__clock__minutes__position1))
(declare-const instr__clock__hours__first__bit1 Int)
(declare-const instr__clock__hours__last__bit1 Int)
(declare-const instr__clock__hours__position1 Int)
(assert (<= 0 instr__clock__hours__first__bit1))
(assert (< instr__clock__hours__first__bit1 instr__clock__hours__last__bit1))
(assert (<= 0 instr__clock__hours__position1))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((chronometer__ref (mk_chronometer__ref (chronometer__content us_rep1)))))
(define-fun chronometer__ref___projection ((a chronometer__ref)) us_rep1 (chronometer__content a))
(declare-sort thousand 0)
(declare-fun thousandqtint (thousand) Int)
(assert (forall ((i thousand)) (and (<= 0 (thousandqtint i)) (<= (thousandqtint i) 1000))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq10 (thousand thousand) Bool)
(declare-const dummy10 thousand)
(declare-datatypes () ((thousand__ref (mk_thousand__ref (thousand__content thousand)))))
(define-fun thousand__ref___projection ((a thousand__ref)) thousand (thousand__content a))
(define-fun to_rep4 ((x thousand)) Int (thousandqtint x))
(declare-fun of_rep4 (Int) thousand)
(assert (forall ((x thousand)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x thousand)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__instr__child__accurate_clock__millisec thousand) (rec__instr__instrument__name2 (Array Int character)) (rec__instr__clock__seconds1 sixty) (rec__instr__clock__minutes1 sixty) (rec__instr__clock__hours1 twenty_four) (rec__ext__2 us_private)))))
(define-fun us_split_fields_MilliSec__projection ((a us_split_fields4)) thousand (rec__instr__child__accurate_clock__millisec a))
(define-fun us_split_fields_Name__6__projection ((a us_split_fields4)) (Array Int character) (rec__instr__instrument__name2 a))
(define-fun us_split_fields_Seconds__2__projection ((a us_split_fields4)) sixty (rec__instr__clock__seconds1 a))
(define-fun us_split_fields_Minutes__2__projection ((a us_split_fields4)) sixty (rec__instr__clock__minutes1 a))
(define-fun us_split_fields_Hours__2__projection ((a us_split_fields4)) twenty_four (rec__instr__clock__hours1 a))
(define-fun us_split_fields___6__projection ((a us_split_fields4)) us_private (rec__ext__2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4) (attr__tag2 Int)))))
(define-fun us_rep___11__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___12__projection ((a us_rep2)) Int (attr__tag2 a))
(declare-fun hide_ext__1 (thousand sixty sixty twenty_four us_private) us_private)
(declare-fun extract__millisec (us_private) thousand)
(assert (forall ((millisec thousand)) (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__3 us_private)) (= (extract__millisec (hide_ext__1 millisec seconds minutes hours rec__ext__3)) millisec))))))
(assert (forall ((millisec thousand)) (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__3 us_private)) (= (extract__seconds (hide_ext__1 millisec seconds minutes hours rec__ext__3)) seconds))))))
(assert (forall ((millisec thousand)) (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__3 us_private)) (= (extract__minutes (hide_ext__1 millisec seconds minutes hours rec__ext__3)) minutes))))))
(assert (forall ((millisec thousand)) (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__3 us_private)) (= (extract__hours (hide_ext__1 millisec seconds minutes hours rec__ext__3)) hours))))))
(declare-fun extract__ext__1 (us_private) us_private)
(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (mk___split_fields (rec__instr__instrument__name2 (us_split_fields5 a)) (hide_ext__1 (rec__instr__child__accurate_clock__millisec (us_split_fields5 a)) (rec__instr__clock__seconds1 (us_split_fields5 a)) (rec__instr__clock__minutes1 (us_split_fields5 a)) (rec__instr__clock__hours1 (us_split_fields5 a)) (rec__ext__2 (us_split_fields5 a)))) (attr__tag2 a)))
(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (mk___split_fields2 (extract__millisec (rec__ext__ (us_split_fields1 r))) (rec__instr__instrument__name (us_split_fields1 r)) (extract__seconds (rec__ext__ (us_split_fields1 r))) (extract__minutes (rec__ext__ (us_split_fields1 r))) (extract__hours (rec__ext__ (us_split_fields1 r))) (extract__ext__1 (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq4 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (and (and (= (to_rep4 (rec__instr__child__accurate_clock__millisec (us_split_fields5 a))) (to_rep4 (rec__instr__child__accurate_clock__millisec (us_split_fields5 b)))) (= (bool_eq (rec__instr__instrument__name2 (us_split_fields5 a)) 1 14 (rec__instr__instrument__name2 (us_split_fields5 b)) 1 14) true)) (= (to_rep2 (rec__instr__clock__seconds1 (us_split_fields5 a))) (to_rep2 (rec__instr__clock__seconds1 (us_split_fields5 b))))) (= (to_rep2 (rec__instr__clock__minutes1 (us_split_fields5 a))) (to_rep2 (rec__instr__clock__minutes1 (us_split_fields5 b))))) (= (to_rep3 (rec__instr__clock__hours1 (us_split_fields5 a))) (to_rep3 (rec__instr__clock__hours1 (us_split_fields5 b))))) true false))
(declare-const us_tag3 Int)
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep2) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep2) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))
(declare-const instr__child__accurate_clock__millisec__first__bit Int)
(declare-const instr__child__accurate_clock__millisec__last__bit Int)
(declare-const instr__child__accurate_clock__millisec__position Int)
(assert (<= 0 instr__child__accurate_clock__millisec__first__bit))
(assert (< instr__child__accurate_clock__millisec__first__bit instr__child__accurate_clock__millisec__last__bit))
(assert (<= 0 instr__child__accurate_clock__millisec__position))
(declare-const instr__instrument__name__first__bit3 Int)
(declare-const instr__instrument__name__last__bit3 Int)
(declare-const instr__instrument__name__position3 Int)
(assert (<= 0 instr__instrument__name__first__bit3))
(assert (< instr__instrument__name__first__bit3 instr__instrument__name__last__bit3))
(assert (<= 0 instr__instrument__name__position3))
(declare-const instr__clock__seconds__first__bit2 Int)
(declare-const instr__clock__seconds__last__bit2 Int)
(declare-const instr__clock__seconds__position2 Int)
(assert (<= 0 instr__clock__seconds__first__bit2))
(assert (< instr__clock__seconds__first__bit2 instr__clock__seconds__last__bit2))
(assert (<= 0 instr__clock__seconds__position2))
(declare-const instr__clock__minutes__first__bit2 Int)
(declare-const instr__clock__minutes__last__bit2 Int)
(declare-const instr__clock__minutes__position2 Int)
(assert (<= 0 instr__clock__minutes__first__bit2))
(assert (< instr__clock__minutes__first__bit2 instr__clock__minutes__last__bit2))
(assert (<= 0 instr__clock__minutes__position2))
(declare-const instr__clock__hours__first__bit2 Int)
(declare-const instr__clock__hours__last__bit2 Int)
(declare-const instr__clock__hours__position2 Int)
(assert (<= 0 instr__clock__hours__first__bit2))
(assert (< instr__clock__hours__first__bit2 instr__clock__hours__last__bit2))
(assert (<= 0 instr__clock__hours__position2))
(declare-fun user_eq11 (us_rep2 us_rep2) Bool)
(declare-const dummy11 us_rep2)
(declare-datatypes () ((accurate_clock__ref (mk_accurate_clock__ref (accurate_clock__content us_rep2)))))
(define-fun accurate_clock__ref___projection ((a accurate_clock__ref)) us_rep2 (accurate_clock__content a))
(declare-fun display_value__5__specific_post (Int us_rep1) Bool)
(assert true)
(assert true)
(assert true)
(declare-fun temp___String_Literal_175 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_175 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_175 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 3)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 5)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 6)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 11)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 12)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 13)) 32)) (= (to_rep (select (temp___String_Literal_175 us_void_param) 14)) 32)) :pattern ((temp___String_Literal_175 us_void_param)))))
(define-fun default_initial_assumption ((temp___expr_316 us_rep2) (temp___skip_top_level_317 Bool)) Bool (and (= (attr__tag2 temp___expr_316) us_tag3) (and (and (and (and (= (to_rep4 (rec__instr__child__accurate_clock__millisec (us_split_fields5 temp___expr_316))) 0) (= (rec__instr__instrument__name2 (us_split_fields5 temp___expr_316)) (temp___String_Literal_175 Tuple0))) (= (to_rep2 (rec__instr__clock__seconds1 (us_split_fields5 temp___expr_316))) 0)) (= (to_rep2 (rec__instr__clock__minutes1 (us_split_fields5 temp___expr_316))) 0)) (= (to_rep3 (rec__instr__clock__hours1 (us_split_fields5 temp___expr_316))) 0))))
(declare-const x us_rep2)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun temp___String_Literal_324 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (= (to_rep (select (temp___String_Literal_324 us_void_param) 1)) 58) :pattern ((temp___String_Literal_324 us_void_param)))))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(define-fun dynamic_invariant2 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant4 ((temp___expr_307 Int) (temp___is_init_303 Bool) (temp___skip_constant_304 Bool) (temp___do_toplevel_305 Bool) (temp___do_typ_inv_306 Bool)) Bool (=> (or (= temp___is_init_303 true) (<= 0 1000)) (in_range5 temp___expr_307)))
(define-fun dynamic_invariant5 ((temp___expr_257 Int) (temp___is_init_253 Bool) (temp___skip_constant_254 Bool) (temp___do_toplevel_255 Bool) (temp___do_typ_inv_256 Bool)) Bool (=> (or (= temp___is_init_253 true) (<= 0 60)) (in_range3 temp___expr_257)))
(define-fun dynamic_invariant6 ((temp___expr_264 Int) (temp___is_init_260 Bool) (temp___skip_constant_261 Bool) (temp___do_toplevel_262 Bool) (temp___do_typ_inv_263 Bool)) Bool (=> (or (= temp___is_init_260 true) (<= 0 24)) (in_range4 temp___expr_264)))
(define-fun default_initial_assumption1 ((temp___expr_173 us_rep) (temp___skip_top_level_174 Bool)) Bool (and (= (attr__tag temp___expr_173) us_tag) (= (rec__instr__instrument__name (us_split_fields1 temp___expr_173)) (temp___String_Literal_175 Tuple0))))
(define-fun default_initial_assumption2 ((temp___expr_273 us_rep1) (temp___skip_top_level_274 Bool)) Bool (and (= (attr__tag1 temp___expr_273) us_tag1) (and (and (and (= (to_rep2 (rec__instr__clock__seconds (us_split_fields3 temp___expr_273))) 0) (= (to_rep2 (rec__instr__clock__minutes (us_split_fields3 temp___expr_273))) 0)) (= (to_rep3 (rec__instr__clock__hours (us_split_fields3 temp___expr_273))) 0)) (= (rec__instr__instrument__name1 (us_split_fields3 temp___expr_273)) (temp___String_Literal_175 Tuple0)))))
(define-fun default_initial_assumption3 ((temp___expr_299 us_rep1) (temp___skip_top_level_300 Bool)) Bool (and (= (attr__tag1 temp___expr_299) us_tag2) (and (and (and (= (rec__instr__instrument__name1 (us_split_fields3 temp___expr_299)) (temp___String_Literal_175 Tuple0)) (= (to_rep2 (rec__instr__clock__seconds (us_split_fields3 temp___expr_299))) 0)) (= (to_rep2 (rec__instr__clock__minutes (us_split_fields3 temp___expr_299))) 0)) (= (to_rep3 (rec__instr__clock__hours (us_split_fields3 temp___expr_299))) 0))))
(assert (not (not (= 10 0))))
(check-sat)
(exit)
