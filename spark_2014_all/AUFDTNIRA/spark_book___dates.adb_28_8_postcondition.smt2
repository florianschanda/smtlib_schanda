(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort year_type 0)
(declare-fun year_typeqtint (year_type) Int)
(assert (forall ((i year_type)) (and (<= 2000 (year_typeqtint i)) (<= (year_typeqtint i) 2099))))
(define-fun in_range1 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (year_type year_type) Bool)
(declare-const dummy year_type)
(declare-datatypes () ((year_type__ref (mk_year_type__ref (year_type__content year_type)))))
(define-fun year_type__ref___projection ((a year_type__ref)) year_type (year_type__content a))
(define-fun dynamic_invariant ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 2000 2099)) (in_range1 temp___expr_173)))
(declare-sort month_type 0)
(declare-fun month_typeqtint (month_type) Int)
(assert (forall ((i month_type)) (and (<= 1 (month_typeqtint i)) (<= (month_typeqtint i) 12))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 12)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (month_type month_type) Bool)
(declare-const dummy1 month_type)
(declare-datatypes () ((month_type__ref (mk_month_type__ref (month_type__content month_type)))))
(define-fun month_type__ref___projection ((a month_type__ref)) month_type (month_type__content a))
(define-fun dynamic_invariant1 ((temp___expr_180 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 1 12)) (in_range2 temp___expr_180)))
(declare-sort day_type 0)
(declare-fun day_typeqtint (day_type) Int)
(assert (forall ((i day_type)) (and (<= 1 (day_typeqtint i)) (<= (day_typeqtint i) 31))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 31)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (day_type day_type) Bool)
(declare-const dummy2 day_type)
(declare-datatypes () ((day_type__ref (mk_day_type__ref (day_type__content day_type)))))
(define-fun day_type__ref___projection ((a day_type__ref)) day_type (day_type__content a))
(define-fun dynamic_invariant2 ((temp___expr_187 Int) (temp___is_init_183 Bool) (temp___skip_constant_184 Bool) (temp___do_toplevel_185 Bool) (temp___do_typ_inv_186 Bool)) Bool (=> (or (= temp___is_init_183 true) (<= 1 31)) (in_range3 temp___expr_187)))
(define-fun to_rep ((x day_type)) Int (day_typeqtint x))
(declare-fun of_rep (Int) day_type)
(assert (forall ((x day_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x day_type)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const year Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const month Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int day_type))))))
(declare-fun slide ((Array Int day_type) Int Int) (Array Int day_type))
(assert (forall ((a (Array Int day_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int day_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int day_type)) (a__first Int) (a__last Int) (b (Array Int day_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int day_type)) (b (Array Int day_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const month_length (Array Int day_type))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun dates__get_month_length__month_length__aggregate_def (Int Int Int Int Int Int Int Int Int Int Int Int) (Array Int day_type))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const c8b Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(assert (= month_length (dates__get_month_length__month_length__aggregate_def 31 28 31 30 31 30 31 31 30 31 30 31)))
(declare-const rliteral day_type)
(assert (= (day_typeqtint rliteral) 31))
(declare-const rliteral1 day_type)
(assert (= (day_typeqtint rliteral1) 28))
(declare-const rliteral2 day_type)
(assert (= (day_typeqtint rliteral2) 30))
(assert (forall ((temp___156 Int) (temp___157 Int) (temp___158 Int) (temp___159 Int) (temp___160 Int) (temp___161 Int) (temp___162 Int) (temp___163 Int) (temp___164 Int) (temp___165 Int) (temp___166 Int) (temp___167 Int)) (let ((temp___155 (dates__get_month_length__month_length__aggregate_def temp___156 temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167))) (=> (and (and (and (and (and (and (and (and (and (and (and (dynamic_invariant2 temp___156 true true true true) (dynamic_invariant2 temp___157 true true true true)) (dynamic_invariant2 temp___158 true true true true)) (dynamic_invariant2 temp___159 true true true true)) (dynamic_invariant2 temp___160 true true true true)) (dynamic_invariant2 temp___161 true true true true)) (dynamic_invariant2 temp___162 true true true true)) (dynamic_invariant2 temp___163 true true true true)) (dynamic_invariant2 temp___164 true true true true)) (dynamic_invariant2 temp___165 true true true true)) (dynamic_invariant2 temp___166 true true true true)) (dynamic_invariant2 temp___167 true true true true)) (and (and (and (and (and (and (and (and (and (and (and (= (select temp___155 1) rliteral) (= (select temp___155 2) rliteral1)) (= (select temp___155 3) rliteral)) (= (select temp___155 4) rliteral2)) (= (select temp___155 5) rliteral)) (= (select temp___155 6) rliteral2)) (= (select temp___155 7) rliteral)) (= (select temp___155 8) rliteral)) (= (select temp___155 9) rliteral2)) (= (select temp___155 10) rliteral)) (= (select temp___155 11) rliteral2)) (= (select temp___155 12) rliteral))))))
(declare-const length Int)
(declare-const c9b Bool)
(declare-const result__ Bool)
(declare-const dates__get_month_length__result Int)
(declare-const result Bool)
(declare-const result__1 Bool)
(declare-const result1 Bool)
(declare-const result__2 Bool)
(declare-const result2 Bool)
(declare-const c9b1 Bool)
(declare-const result3 Int)
(declare-const length1 Int)
(declare-const result4 Int)
(declare-const length2 Int)
(declare-const result5 Int)
(declare-const dates__get_month_length__result1 Int)
(declare-const dates__get_month_length__result2 Int)
(declare-const dates__get_month_length__result3 Int)
(declare-const length3 Int)
(declare-const c9b2 Bool)
(declare-const result__3 Bool)
(declare-const dates__get_month_length__result4 Int)
(declare-const length4 Int)
(declare-const c9b3 Bool)
(declare-const result__4 Bool)
(declare-const dates__get_month_length__result5 Int)
(declare-const result6 Int)
(assert (in_range1 year))
(assert (in_range2 month))
(assert (= (dates__get_month_length__month_length__aggregate_def 31 28 31 30 31 30 31 31 30 31 30 31) month_length))
(assert (=> (<= 1 31) (in_range3 length)))
(assert (= year c8b))
(assert (in_range1 c8b))
(assert (= (mk_bool__ref result) (mk_bool__ref result__)))
(assert (= result__1 (distinct 0 0)))
(assert (=> (= (mod2 c8b 4) 0) (= result1 result__1)))
(assert (=> (= (mod2 c8b 4) 0) (= result__2 (distinct 1 0))))
(assert (=> (not (= (mod2 c8b 4) 0)) (= result__2 result__1)))
(assert (= result2 c9b))
(assert (= c9b1 result__2))
(assert (=> (ite (= c9b1 true) (= month 2) false) (= result3 length)))
(assert (=> (ite (= c9b1 true) (= month 2) false) (= length1 29)))
(assert (=> (not (ite (= c9b1 true) (= month 2) false)) (= result4 length)))
(assert (=> (not (ite (= c9b1 true) (= month 2) false)) (= length2 (to_rep (select month_length month)))))
(assert (=> (not (ite (= c9b1 true) (= month 2) false)) (= length1 length2)))
(assert (= dates__get_month_length__result1 dates__get_month_length__result2))
(assert (= dates__get_month_length__result3 dates__get_month_length__result1))
(assert (= result5 dates__get_month_length__result))
(assert (= dates__get_month_length__result1 length1))
(assert (= (mk_int__ref dates__get_month_length__result4) (mk_int__ref dates__get_month_length__result2)))
(assert (= result__3 result__2))
(assert (= c9b2 c9b1))
(assert (= length3 length1))
(assert (= dates__get_month_length__result5 dates__get_month_length__result3))
(assert (= result__4 result__2))
(assert (= c9b3 c9b1))
(assert (= length4 length1))
(assert (= result6 dates__get_month_length__result4))
(assert (= month 2))
(assert (not (or (= dates__get_month_length__result4 28) (= dates__get_month_length__result4 29))))
(check-sat)
(exit)
