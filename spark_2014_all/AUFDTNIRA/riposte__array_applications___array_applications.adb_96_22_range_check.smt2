(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun power (Int Int) Int)
(assert (forall ((x Int)) (= (power x 0) 1)))
(assert (forall ((x Int) (n Int)) (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))
(assert (forall ((x Int) (n Int)) (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))
(assert (forall ((x Int)) (= (power x 1) x)))
(assert (forall ((x Int) (n Int) (m Int)) (=> (<= 0 n) (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))
(assert (forall ((x Int) (n Int) (m Int)) (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))
(assert (forall ((x Int) (y Int) (n Int)) (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))
(assert (forall ((x Int) (n Int) (m Int)) (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort fibonacci_index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 30)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (fibonacci_index fibonacci_index) Bool)
(declare-const dummy2 fibonacci_index)
(declare-datatypes () ((fibonacci_index__ref (mk_fibonacci_index__ref (fibonacci_index__content fibonacci_index)))))
(define-fun fibonacci_index__ref___projection ((a fibonacci_index__ref)) fibonacci_index (fibonacci_index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (natural Int) (Array Int natural))
(assert (forall ((v natural)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int Int) Int)
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t26b 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 2 x) (<= x 30)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (t26b t26b) Bool)
(declare-const dummy3 t26b)
(declare-datatypes () ((t26b__ref (mk_t26b__ref (t26b__content t26b)))))
(define-fun t26b__ref___projection ((a t26b__ref)) t26b (t26b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 0 30)) (in_range3 temp___expr_136)))
(declare-const a (Array Int natural))
(declare-const i Int)
(declare-const o natural)
(declare-const o1 (Array Int natural))
(declare-const o2 natural)
(declare-const o3 (Array Int natural))
(declare-const temp___173 (Array Int natural))
(declare-const temp___172 Int)
(declare-const o4 Int)
(declare-const o5 natural)
(declare-const o6 (Array Int natural))
(declare-const j Int)
(declare-const o7 Int)
(declare-const o8 natural)
(declare-const o9 Int)
(declare-const o10 natural)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const j1 Int)
(declare-const o15 Int)
(declare-const o16 natural)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Bool)
(declare-const o20 Bool)
(declare-const o21 Int)
(declare-const o22 natural)
(declare-const o23 (Array Int natural))
(declare-const result (Array Int natural))
(declare-const a1 (Array Int natural))
(declare-const result1 (Array Int natural))
(declare-const a2 (Array Int natural))
(declare-const result2 Int)
(declare-const i1 Int)
(declare-const result3 (Array Int natural))
(declare-const a3 (Array Int natural))
(declare-const a4 (Array Int natural))
(declare-const i2 Int)
(declare-const result4 Int)
(declare-const i3 Int)
(declare-const result5 (Array Int natural))
(declare-const a5 (Array Int natural))
(declare-const a6 (Array Int natural))
(declare-const i4 Int)
(declare-const a7 (Array Int natural))
(declare-const i5 Int)
(declare-const a8 (Array Int natural))
(declare-const i6 Int)
(declare-const a9 (Array Int natural))
(declare-const i7 Int)
(declare-const a10 (Array Int natural))
(declare-const i8 Int)
(declare-const a11 (Array Int natural))
(declare-const i9 Int)
(declare-const a12 (Array Int natural))
(declare-const i10 Int)
(declare-const a13 (Array Int natural))
(declare-const i11 Int)
(assert (= (to_rep o) 0))
(assert (= o1 (store a 0 o)))
(assert (= (mk_map__ref result) (mk_map__ref a)))
(assert (= a1 o1))
(assert (= (to_rep o2) 1))
(assert (= o3 (store a1 1 o2)))
(assert (= a1 result1))
(assert (= a2 o3))
(assert (= (mk_int__ref result2) (mk_int__ref i)))
(assert (= i1 2))
(assert (<= 2 i1))
(assert (<= i1 30))
(assert (and (= o4 (+ (to_rep (select a2 (- i1 1))) (to_rep (select a2 (- i1 2))))) (in_range1 (+ (to_rep (select a2 (- i1 1))) (to_rep (select a2 (- i1 2)))))))
(assert (= (to_rep o5) o4))
(assert (= o6 (store a2 i1 o5)))
(assert (= a2 result3))
(assert (= a3 o6))
(assert (and (and (and (= (to_rep (select a4 0)) 0) (= (to_rep (select a4 1)) 1)) (forall ((j2 Int)) (=> (and (<= 2 j2) (<= j2 i2)) (= (to_rep (select a4 j2)) (+ (to_rep (select a4 (- j2 1))) (to_rep (select a4 (- j2 2)))))))) (forall ((j2 Int)) (=> (and (<= 0 j2) (<= j2 i2)) (and (<= 0 (to_rep (select a4 j2))) (< (to_rep (select a4 j2)) (power 2 j2)))))))
(assert (and (and (=> (<= 2 30) (in_range4 i2)) (forall ((temp___174 Int)) (=> (and (<= 0 temp___174) (<= temp___174 30)) (=> (< i2 temp___174) (= (select a4 temp___174) (select a2 temp___174)))))) (and (<= 2 i2) (<= i2 30))))
(assert (<= 0 i2))
(assert (not (<= 0 0)))
(check-sat)
(exit)
