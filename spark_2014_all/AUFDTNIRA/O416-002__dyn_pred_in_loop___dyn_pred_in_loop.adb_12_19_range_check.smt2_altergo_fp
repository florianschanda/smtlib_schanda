(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type t

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t, t -> bool

logic dummy2 : t

type t__ref = { t__content : t
}

function t__ref___projection(a: t__ref) : t = (a).t__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic a : (int,natural) farray

logic i : int

logic x : int

logic o : bool

logic temp___187 : int

logic o1 : int

logic o2 : int

logic o3 : bool

logic o4 : bool

logic o5 : natural

logic o6 : (int,natural) farray

logic o7 : bool

logic temp___1871 : int

logic o8 : int

logic o9 : int

logic o10 : bool

logic o11 : bool

logic o12 : natural

logic o13 : (int,natural) farray

logic o14 : bool

logic temp___1872 : int

logic o15 : int

logic o16 : int

logic o17 : bool

logic o18 : bool

logic o19 : natural

logic o20 : (int,natural) farray

logic o21 : bool

logic temp___1873 : int

logic o22 : int

logic o23 : int

logic o24 : bool

logic o25 : bool

logic o26 : natural

logic o27 : (int,natural) farray

logic o28 : bool

logic temp___1874 : int

logic o29 : int

logic o30 : int

logic o31 : bool

logic o32 : bool

logic o33 : natural

logic o34 : (int,natural) farray

logic o35 : bool

logic temp___1875 : int

logic o36 : int

logic o37 : int

logic o38 : bool

logic o39 : bool

logic o40 : natural

logic o41 : (int,natural) farray

logic o42 : bool

logic temp___1876 : int

logic o43 : int

logic o44 : int

logic o45 : bool

logic o46 : bool

logic o47 : natural

logic o48 : (int,natural) farray

logic o49 : bool

logic temp___1877 : int

logic o50 : int

logic o51 : int

logic o52 : bool

logic o53 : bool

logic o54 : natural

logic o55 : (int,natural) farray

logic o56 : bool

logic temp___1878 : int

logic o57 : int

logic o58 : int

logic o59 : bool

logic o60 : bool

logic o61 : natural

logic o62 : (int,natural) farray

logic o63 : bool

logic o64 : int

logic o65 : int

logic result : int

logic i1 : int

logic result1 : int

logic x1 : int

logic result2 : bool

logic x2 : int

logic result3 : int

logic x3 : int

logic result4 : bool

logic x4 : int

logic x5 : int

logic x6 : int

logic x7 : int

logic result5 : (int,natural) farray

logic a1 : (int,natural) farray

logic result6 : int

logic i2 : int

logic result7 : int

logic x8 : int

logic result8 : bool

logic x9 : int

logic result9 : int

logic x10 : int

logic result10 : bool

logic x11 : int

logic x12 : int

logic x13 : int

logic x14 : int

logic result11 : (int,natural) farray

logic a2 : (int,natural) farray

logic result12 : int

logic i3 : int

logic result13 : int

logic x15 : int

logic result14 : bool

logic x16 : int

logic result15 : int

logic x17 : int

logic result16 : bool

logic x18 : int

logic x19 : int

logic x20 : int

logic x21 : int

logic result17 : (int,natural) farray

logic a3 : (int,natural) farray

logic result18 : int

logic i4 : int

logic result19 : int

logic x22 : int

logic result20 : bool

logic x23 : int

logic result21 : int

logic x24 : int

logic result22 : bool

logic x25 : int

logic x26 : int

logic x27 : int

logic x28 : int

logic result23 : (int,natural) farray

logic a4 : (int,natural) farray

logic result24 : int

logic i5 : int

logic result25 : int

logic x29 : int

logic result26 : bool

logic x30 : int

logic result27 : int

logic x31 : int

logic result28 : bool

logic x32 : int

logic x33 : int

logic x34 : int

logic x35 : int

logic result29 : (int,natural) farray

logic a5 : (int,natural) farray

logic result30 : int

logic i6 : int

logic result31 : int

logic x36 : int

logic result32 : bool

logic x37 : int

logic result33 : int

logic x38 : int

logic result34 : bool

logic x39 : int

logic x40 : int

logic x41 : int

logic x42 : int

logic result35 : (int,natural) farray

logic a6 : (int,natural) farray

logic result36 : int

logic i7 : int

logic result37 : int

logic x43 : int

logic result38 : bool

logic x44 : int

logic result39 : int

logic x45 : int

logic result40 : bool

logic x46 : int

logic x47 : int

logic x48 : int

logic x49 : int

logic result41 : (int,natural) farray

logic a7 : (int,natural) farray

logic result42 : int

logic i8 : int

logic result43 : int

logic x50 : int

logic result44 : bool

logic x51 : int

logic result45 : int

logic x52 : int

logic result46 : bool

logic x53 : int

logic x54 : int

logic x55 : int

logic x56 : int

logic result47 : (int,natural) farray

logic a8 : (int,natural) farray

logic result48 : int

logic i9 : int

logic result49 : int

logic x57 : int

logic result50 : bool

logic x58 : int

logic result51 : int

logic x59 : int

logic result52 : bool

logic x60 : int

logic x61 : int

logic x62 : int

logic x63 : int

logic result53 : (int,natural) farray

logic a9 : (int,natural) farray

logic result54 : int

logic i10 : int

logic result55 : int

logic x64 : int

logic result56 : bool

logic x65 : int

axiom H : (result = i)

axiom H1 : (i1 = 1)

axiom H2 : (result1 = x)

axiom H3 : (x1 = 1)

axiom H4 : in_range2(x1)

axiom H5 : ((o = true) <-> ((x1 * i1) <  2147483647))

axiom H6 : ((in_range3(x1) -> (result2 = o)) and ((not in_range3(x1)) ->
  (result2 = false)))

axiom H7 : (result2 = true)

axiom H8 : (((0 <= 2147483647) -> in_range2(x2)) and (in_range3(x2) and
  ((x2 * i1) <  2147483647)))

axiom H9 : ((o1 = (x2 * i1)) and in_range1((x2 * i1)))

 (* File "dyn_pred_in_loop.adb", line 5, characters 0-0 *)
goal WP_parameter_def : in_range2(o1)
