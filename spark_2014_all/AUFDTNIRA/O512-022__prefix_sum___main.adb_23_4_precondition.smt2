(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (character Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a character)) (forall ((b (Array Int character))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array Int character) Int Int character) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((b character)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (character Int character) (Array Int character))
(assert (forall ((a character) (b character)) (forall ((a_first Int)) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int integer))))))
(declare-fun slide1 ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun all_elements_in ((Array Int integer) Int) Bool)
(declare-fun all_elements_in__function_guard (Bool (Array Int integer) Int) Bool)
(declare-fun intermediate_form ((Array Int integer) (Array Int integer)) Bool)
(declare-fun intermediate_form__function_guard (Bool (Array Int integer) (Array Int integer)) Bool)
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 7))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (index index) Bool)
(declare-const dummy4 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun main__a__aggregate_def (Int Int Int Int Int Int Int Int) (Array Int integer))
(declare-fun temp___String_Literal_611 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_611 us_void_param) 1)) 65) (= (to_rep (select (temp___String_Literal_611 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_611 us_void_param) 3)) 61)) (= (to_rep (select (temp___String_Literal_611 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_611 us_void_param) 5)) 40)) :pattern ((temp___String_Literal_611 us_void_param)))))
(declare-fun temp___String_Literal_614 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (= (to_rep (select (temp___String_Literal_614 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_614 us_void_param) 2)) 41)) :pattern ((temp___String_Literal_614 us_void_param)))))
(declare-fun temp___String_Literal_615 (tuple0) (Array Int character))
(assert true)
(declare-fun temp___String_Literal_616 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (= (to_rep (select (temp___String_Literal_616 us_void_param) 1)) 76) (= (to_rep (select (temp___String_Literal_616 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_616 us_void_param) 3)) 61)) :pattern ((temp___String_Literal_616 us_void_param)))))
(declare-fun temp___String_Literal_619 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_619 us_void_param) 1)) 65) (= (to_rep (select (temp___String_Literal_619 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_619 us_void_param) 3)) 61)) (= (to_rep (select (temp___String_Literal_619 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_619 us_void_param) 5)) 40)) :pattern ((temp___String_Literal_619 us_void_param)))))
(declare-fun temp___String_Literal_622 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (= (to_rep (select (temp___String_Literal_622 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_622 us_void_param) 2)) 41)) :pattern ((temp___String_Literal_622 us_void_param)))))
(declare-fun temp___String_Literal_623 (tuple0) (Array Int character))
(assert true)
(declare-fun temp___String_Literal_624 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (= (to_rep (select (temp___String_Literal_624 us_void_param) 1)) 65) (= (to_rep (select (temp___String_Literal_624 us_void_param) 2)) 32)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 3)) 61)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 4)) 32)) (= (to_rep (select (temp___String_Literal_624 us_void_param) 5)) 40)) :pattern ((temp___String_Literal_624 us_void_param)))))
(declare-fun temp___String_Literal_627 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (= (to_rep (select (temp___String_Literal_627 us_void_param) 1)) 32) (= (to_rep (select (temp___String_Literal_627 us_void_param) 2)) 41)) :pattern ((temp___String_Literal_627 us_void_param)))))
(declare-fun temp___String_Literal_628 (tuple0) (Array Int character))
(assert true)
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range2 temp___expr_74)))
(define-fun dynamic_invariant3 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 3))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(declare-const rliteral2 integer)
(assert (= (integerqtint rliteral2) 7))
(declare-const rliteral3 integer)
(assert (= (integerqtint rliteral3) 0))
(declare-const rliteral4 integer)
(assert (= (integerqtint rliteral4) 4))
(declare-const rliteral5 integer)
(assert (= (integerqtint rliteral5) 6))
(assert (forall ((temp___602 Int) (temp___603 Int) (temp___604 Int) (temp___605 Int) (temp___606 Int) (temp___607 Int) (temp___608 Int) (temp___609 Int)) (let ((temp___601 (main__a__aggregate_def temp___602 temp___603 temp___604 temp___605 temp___606 temp___607 temp___608 temp___609))) (=> (and (and (and (and (and (and (and (dynamic_invariant1 temp___602 true true true true) (dynamic_invariant1 temp___603 true true true true)) (dynamic_invariant1 temp___604 true true true true)) (dynamic_invariant1 temp___605 true true true true)) (dynamic_invariant1 temp___606 true true true true)) (dynamic_invariant1 temp___607 true true true true)) (dynamic_invariant1 temp___608 true true true true)) (dynamic_invariant1 temp___609 true true true true)) (and (and (and (and (and (and (and (= (select temp___601 0) rliteral) (= (select temp___601 1) rliteral1)) (= (select temp___601 2) rliteral2)) (= (select temp___601 3) rliteral3)) (= (select temp___601 4) rliteral4)) (= (select temp___601 5) rliteral1)) (= (select temp___601 6) rliteral5)) (= (select temp___601 7) rliteral))))))
(define-fun dynamic_invariant4 ((temp___expr_178 Int) (temp___is_init_174 Bool) (temp___skip_constant_175 Bool) (temp___do_toplevel_176 Bool) (temp___do_typ_inv_177 Bool)) Bool (=> (or (= temp___is_init_174 true) (<= 0 7)) (in_range3 temp___expr_178)))
(assert true)
(assert (forall ((a (Array Int integer))) (forall ((max Int)) (! (= (= (all_elements_in a max) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (and (<= (- max) (to_rep1 (select a k))) (<= (to_rep1 (select a k)) max))))) :pattern ((all_elements_in a max))))))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(assert true)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (! (= (= (intermediate_form a b) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (= (mod2 (+ k 1) 8) 0) (= (to_rep1 (select a k)) (+ (+ (+ (+ (+ (+ (+ (to_rep1 (select b 0)) (to_rep1 (select b 1))) (to_rep1 (select b 2))) (to_rep1 (select b 3))) (to_rep1 (select b 4))) (to_rep1 (select b 5))) (to_rep1 (select b 6))) (to_rep1 (select b 7)))) (ite (= (mod2 (+ k 1) 4) 0) (= (to_rep1 (select a k)) (+ (+ (+ (to_rep1 (select b k)) (to_rep1 (select b (- k 1)))) (to_rep1 (select b (- k 2)))) (to_rep1 (select b (- k 3))))) (ite (= (mod2 (+ k 1) 2) 0) (= (to_rep1 (select a k)) (+ (to_rep1 (select b k)) (to_rep1 (select b (- k 1))))) (= (to_rep1 (select a k)) (to_rep1 (select b k))))))))) :pattern ((intermediate_form a b)))))
(declare-const a (Array Int integer))
(declare-const space Int)
(declare-const copy (Array Int integer))
(declare-const j Int)
(declare-const result (Array Int integer))
(declare-const a1 (Array Int integer))
(declare-const result1 (Array Int integer))
(declare-const copy1 (Array Int integer))
(declare-const result2 Int)
(declare-const j1 Int)
(declare-const result3 Int)
(declare-const j2 Int)
(declare-const result4 Int)
(declare-const j3 Int)
(declare-const result5 Int)
(declare-const j4 Int)
(declare-const result6 Int)
(declare-const j5 Int)
(declare-const result7 Int)
(declare-const j6 Int)
(declare-const result8 Int)
(declare-const j7 Int)
(declare-const result9 Int)
(declare-const j8 Int)
(assert (= result a))
(assert (= a1 (main__a__aggregate_def 3 1 7 0 4 1 6 3)))
(assert (=> (<= 1 2147483647) (in_range1 space)))
(assert (= result1 copy))
(assert (= copy1 a1))
(assert (= result2 j))
(assert (= j1 0))
(assert (= result3 j1))
(assert (= j2 1))
(assert (= result4 j2))
(assert (= j3 2))
(assert (= result5 j3))
(assert (= j4 3))
(assert (= result6 j4))
(assert (= j5 4))
(assert (= result7 j5))
(assert (= j6 5))
(assert (= result8 j6))
(assert (= j7 6))
(assert (= result9 j7))
(assert (= j8 7))
(assert (not (= (all_elements_in a1 1000000) true)))
(check-sat)
(exit)
