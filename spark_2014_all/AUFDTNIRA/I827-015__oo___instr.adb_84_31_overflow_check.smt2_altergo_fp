(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type sixty

predicate in_range1(x: int) = ((0 <= x) and (x <= 60))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : sixty, sixty -> bool

logic dummy1 : sixty

type sixty__ref = { sixty__content : sixty
}

function sixty__ref___projection(a: sixty__ref) : sixty = (a).sixty__content

logic to_rep : sixty -> int

logic of_rep : int -> sixty

axiom inversion_axiom : (forall x:sixty [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:sixty [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type twenty_four

predicate in_range2(x: int) = ((0 <= x) and (x <= 24))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : twenty_four, twenty_four -> bool

logic dummy2 : twenty_four

type twenty_four__ref = { twenty_four__content : twenty_four
}

function twenty_four__ref___projection(a: twenty_four__ref) : twenty_four =
  (a).twenty_four__content

logic to_rep1 : twenty_four -> int

logic of_rep1 : int -> twenty_four

axiom inversion_axiom1 :
  (forall x:twenty_four [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:twenty_four [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep2 : character -> int

logic of_rep2 : int -> character

axiom inversion_axiom2 :
  (forall x:character [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:character [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic dummy4 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq4 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__instr__instrument__name :
(int,character) farray; rec__ext__ : us_private
}

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__instr__instrument__name

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((bool_eq5(((a).us_split_fields1).rec__instr__instrument__name, 1, 14,
  ((b).us_split_fields1).rec__instr__instrument__name, 1, 14) = true) ->
  (bool_eq6(a, b) = true)) and
  ((not (bool_eq5(((a).us_split_fields1).rec__instr__instrument__name, 1, 14,
  ((b).us_split_fields1).rec__instr__instrument__name, 1, 14) = true)) ->
  (bool_eq6(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. forall a1:us_private. forall a2:int.
  (0 <= object__size1({ us_split_fields1 = { rec__instr__instrument__name =
  a; rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. forall a1:us_private. forall a2:int.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__instr__instrument__name = a; rec__ext__ = a1 }; attr__tag = a2 })))

logic instr__instrument__name__first__bit : int

logic instr__instrument__name__last__bit : int

logic instr__instrument__name__position : int

axiom instr__instrument__name__first__bit_axiom :
  (0 <= instr__instrument__name__first__bit)

axiom instr__instrument__name__last__bit_axiom :
  (instr__instrument__name__first__bit <  instr__instrument__name__last__bit)

axiom instr__instrument__name__position_axiom :
  (0 <= instr__instrument__name__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : (int,character) farray

logic dummy6 : us_private

logic dummy7 : int

type instrument__ref = { instrument__content : us_rep
}

function instrument__ref___projection(a: instrument__ref) : us_rep =
  (a).instrument__content

type us_split_fields2 = { rec__instr__clock__seconds : sixty;
rec__instr__clock__minutes : sixty; rec__instr__clock__hours : twenty_four;
rec__instr__instrument__name1 : (int,character) farray; rec__ext__1 :
us_private
}

function us_split_fields_Seconds__projection(a: us_split_fields2) : sixty =
  (a).rec__instr__clock__seconds

function us_split_fields_Minutes__projection(a: us_split_fields2) : sixty =
  (a).rec__instr__clock__minutes

function us_split_fields_Hours__projection(a: us_split_fields2) : twenty_four =
  (a).rec__instr__clock__hours

function us_split_fields_Name__5__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__instr__instrument__name1

function us_split_fields___5__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___9__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___10__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : sixty, sixty, twenty_four, us_private -> us_private

logic extract__seconds : us_private -> sixty

axiom extract__seconds__conv :
  (forall seconds:sixty. forall minutes:sixty.
  (forall hours:twenty_four.
  (forall rec__ext__2:us_private. (extract__seconds(hide_ext__(seconds,
  minutes, hours, rec__ext__2)) = seconds))))

logic extract__minutes : us_private -> sixty

axiom extract__minutes__conv :
  (forall seconds:sixty. forall minutes:sixty.
  (forall hours:twenty_four.
  (forall rec__ext__2:us_private. (extract__minutes(hide_ext__(seconds,
  minutes, hours, rec__ext__2)) = minutes))))

logic extract__hours : us_private -> twenty_four

axiom extract__hours__conv :
  (forall seconds:sixty. forall minutes:sixty.
  (forall hours:twenty_four.
  (forall rec__ext__2:us_private. (extract__hours(hide_ext__(seconds,
  minutes, hours, rec__ext__2)) = hours))))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields3).rec__instr__instrument__name1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__instr__clock__seconds,
  ((a).us_split_fields3).rec__instr__clock__minutes,
  ((a).us_split_fields3).rec__instr__clock__hours,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__instr__clock__seconds =
  extract__seconds(((r).us_split_fields1).rec__ext__);
  rec__instr__clock__minutes =
  extract__minutes(((r).us_split_fields1).rec__ext__);
  rec__instr__clock__hours =
  extract__hours(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name1 =
  ((r).us_split_fields1).rec__instr__instrument__name; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  ((((((to_rep(((a).us_split_fields3).rec__instr__clock__seconds) = to_rep(((b).us_split_fields3).rec__instr__clock__seconds)) and
  (to_rep(((a).us_split_fields3).rec__instr__clock__minutes) = to_rep(((b).us_split_fields3).rec__instr__clock__minutes))) and
  (to_rep1(((a).us_split_fields3).rec__instr__clock__hours) = to_rep1(((b).us_split_fields3).rec__instr__clock__hours))) and
  (bool_eq5(((a).us_split_fields3).rec__instr__instrument__name1, 1, 14,
  ((b).us_split_fields3).rec__instr__instrument__name1, 1, 14) = true)) ->
  (bool_eq7(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields3).rec__instr__clock__seconds) = to_rep(((b).us_split_fields3).rec__instr__clock__seconds)) and
  (to_rep(((a).us_split_fields3).rec__instr__clock__minutes) = to_rep(((b).us_split_fields3).rec__instr__clock__minutes))) and
  (to_rep1(((a).us_split_fields3).rec__instr__clock__hours) = to_rep1(((b).us_split_fields3).rec__instr__clock__hours))) and
  (bool_eq5(((a).us_split_fields3).rec__instr__instrument__name1, 1, 14,
  ((b).us_split_fields3).rec__instr__instrument__name1, 1, 14) = true))) ->
  (bool_eq7(a, b) = false))))

logic us_tag1 : int

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:sixty. forall a1:sixty. forall a2:twenty_four.
  forall a3:(int,character) farray. forall a4:us_private. forall a5:int.
  (0 <= object__size2({ us_split_fields3 = { rec__instr__clock__seconds = a;
  rec__instr__clock__minutes = a1; rec__instr__clock__hours = a2;
  rec__instr__instrument__name1 = a3; rec__ext__1 = a4 }; attr__tag1 = a5
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:sixty. forall a1:sixty. forall a2:twenty_four.
  forall a3:(int,character) farray. forall a4:us_private. forall a5:int.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__instr__clock__seconds = a; rec__instr__clock__minutes = a1;
  rec__instr__clock__hours = a2; rec__instr__instrument__name1 = a3;
  rec__ext__1 = a4 }; attr__tag1 = a5 })))

logic instr__clock__seconds__first__bit : int

logic instr__clock__seconds__last__bit : int

logic instr__clock__seconds__position : int

axiom instr__clock__seconds__first__bit_axiom :
  (0 <= instr__clock__seconds__first__bit)

axiom instr__clock__seconds__last__bit_axiom :
  (instr__clock__seconds__first__bit <  instr__clock__seconds__last__bit)

axiom instr__clock__seconds__position_axiom :
  (0 <= instr__clock__seconds__position)

logic instr__clock__minutes__first__bit : int

logic instr__clock__minutes__last__bit : int

logic instr__clock__minutes__position : int

axiom instr__clock__minutes__first__bit_axiom :
  (0 <= instr__clock__minutes__first__bit)

axiom instr__clock__minutes__last__bit_axiom :
  (instr__clock__minutes__first__bit <  instr__clock__minutes__last__bit)

axiom instr__clock__minutes__position_axiom :
  (0 <= instr__clock__minutes__position)

logic instr__clock__hours__first__bit : int

logic instr__clock__hours__last__bit : int

logic instr__clock__hours__position : int

axiom instr__clock__hours__first__bit_axiom :
  (0 <= instr__clock__hours__first__bit)

axiom instr__clock__hours__last__bit_axiom :
  (instr__clock__hours__first__bit <  instr__clock__hours__last__bit)

axiom instr__clock__hours__position_axiom :
  (0 <= instr__clock__hours__position)

logic instr__instrument__name__first__bit1 : int

logic instr__instrument__name__last__bit1 : int

logic instr__instrument__name__position1 : int

axiom instr__instrument__name__first__bit_axiom1 :
  (0 <= instr__instrument__name__first__bit1)

axiom instr__instrument__name__last__bit_axiom1 :
  (instr__instrument__name__first__bit1 <  instr__instrument__name__last__bit1)

axiom instr__instrument__name__position_axiom1 :
  (0 <= instr__instrument__name__position1)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy8 : sixty

logic dummy9 : sixty

logic dummy10 : twenty_four

logic dummy11 : (int,character) farray

logic dummy12 : us_private

logic dummy13 : int

type clock__ref = { clock__content : us_rep1
}

function clock__ref___projection(a: clock__ref) : us_rep1 =
  (a).clock__content

logic temp___String_Literal_163 : unit -> (int,character) farray

axiom temp___String_Literal_163__def_axiom :
  ((((((((((((((to_rep2((temp___String_Literal_163(void)[1])) = 32) and
  (to_rep2((temp___String_Literal_163(void)[2])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[3])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[4])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[5])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[6])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[7])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[8])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[9])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[10])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[11])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[12])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[13])) = 32)) and
  (to_rep2((temp___String_Literal_163(void)[14])) = 32))

logic x__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic inc : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic x__split_fields : sixty

logic x__split_fields1 : sixty

logic x__split_fields2 : twenty_four

logic x__split_fields3 : (int,character) farray

logic x__split_fields4 : us_private

logic ninc : int

logic o : int

logic o1 : int

logic o2 : sixty

logic o3 : sixty

logic o4 : sixty

logic o5 : twenty_four

logic o6 : (int,character) farray

logic o7 : us_private

logic temp___367 : sixty

logic temp___3671 : sixty

logic temp___3672 : twenty_four

logic temp___3673 : (int,character) farray

logic temp___3674 : us_private

logic temp___3675 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic o12 : sixty

logic o13 : sixty

logic o14 : sixty

logic o15 : twenty_four

logic o16 : (int,character) farray

logic o17 : us_private

logic temp___369 : sixty

logic temp___3691 : sixty

logic temp___3692 : twenty_four

logic temp___3693 : (int,character) farray

logic temp___3694 : us_private

logic temp___3695 : int

logic o18 : int

logic o19 : int

logic o20 : int

logic o21 : int

logic result : sixty

logic result1 : sixty

logic result2 : twenty_four

logic result3 : (int,character) farray

logic result4 : us_private

logic x__split_fields5 : sixty

logic x__split_fields6 : sixty

logic x__split_fields7 : twenty_four

logic x__split_fields8 : (int,character) farray

logic x__split_fields9 : us_private

logic result5 : int

logic ninc1 : int

logic result6 : sixty

logic result7 : sixty

logic result8 : twenty_four

logic result9 : (int,character) farray

logic result10 : us_private

logic x__split_fields10 : sixty

logic x__split_fields11 : sixty

logic x__split_fields12 : twenty_four

logic x__split_fields13 : (int,character) farray

logic x__split_fields14 : us_private

logic result11 : int

logic ninc2 : int

axiom H : in_range(inc)

axiom H1 : (((- 2147483648) <= 2147483647) -> in_range(ninc))

axiom H2 : ((o = (to_rep(x__split_fields) + inc)) and
  in_range((to_rep(x__split_fields) + inc)))

axiom H3 : (o1 = mod(o, 60))

axiom H4 : (to_rep(o2) = o1)

axiom H5 : (o2 = o3)

axiom H6 : (x__split_fields1 = o4)

axiom H7 : (x__split_fields2 = o5)

axiom H8 : (x__split_fields3 = o6)

axiom H9 : (x__split_fields4 = o7)

axiom H10 : (temp___367 = o3)

axiom H11 : (temp___3671 = o4)

axiom H12 : (temp___3672 = o5)

axiom H13 : (temp___3673 = o6)

axiom H14 : (temp___3674 = o7)

axiom H15 : (x__attr__tag = temp___3675)

axiom H16 : (result = x__split_fields)

axiom H17 : (result1 = x__split_fields1)

axiom H18 : (result2 = x__split_fields2)

axiom H19 : (result3 = x__split_fields3)

axiom H20 : (result4 = x__split_fields4)

axiom H21 : (temp___367 = x__split_fields5)

axiom H22 : (temp___3671 = x__split_fields6)

axiom H23 : (temp___3672 = x__split_fields7)

axiom H24 : (temp___3673 = x__split_fields8)

axiom H25 : (temp___3674 = x__split_fields9)

axiom H26 : ((o8 = (to_rep(x__split_fields5) + inc)) and
  in_range((to_rep(x__split_fields5) + inc)))

axiom H27 : (o9 = comp_div(o8,60))

axiom H28 : (result5 = ninc)

axiom H29 : (ninc1 = o9)

 (* File "instr.ads", line 61, characters 0-0 *)
goal WP_parameter_def : in_range((to_rep(x__split_fields6) + ninc1))
