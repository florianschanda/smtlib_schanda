(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(declare-fun is_digit (Int) Bool)
(declare-fun is_digit__function_guard (Bool Int) Bool)
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(assert (forall ((c Int)) (! (=> (dynamic_invariant2 c true true true) (let ((result (is_digit c))) (ite (= c 48) (= result true) (ite (= c 49) (= result true) (ite (= c 50) (= result true) (ite (= c 51) (= result true) (ite (= c 52) (= result true) (ite (= c 53) (= result true) (ite (= c 54) (= result true) (ite (= c 55) (= result true) (ite (= c 56) (= result true) (ite (= c 57) (= result true) (ite (< 57 c) (not (= result true)) (=> (< c 48) (not (= result true)))))))))))))))) :pattern ((is_digit c)))))
(declare-fun convert_character_digit_to_integer (Int) Int)
(declare-fun convert_character_digit_to_integer__function_guard (Int Int) Bool)
(assert (forall ((source Int)) (! (=> (and (dynamic_invariant2 source true true true) (= (is_digit source) true)) (let ((result (convert_character_digit_to_integer source))) (and (and (and (<= 0 result) (<= result 9)) (ite (= source 48) (= result 0) (ite (= source 49) (= result 1) (ite (= source 50) (= result 2) (ite (= source 51) (= result 3) (ite (= source 52) (= result 4) (ite (= source 53) (= result 5) (ite (= source 54) (= result 6) (ite (= source 55) (= result 7) (ite (= source 56) (= result 8) (=> (= source 57) (= result 9)))))))))))) (dynamic_invariant result true false true)))) :pattern ((convert_character_digit_to_integer source)))))
(declare-const source us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(declare-const target Int)
(declare-const has_failed Bool)
(declare-const temp___1775 Int)
(declare-const o Int)
(declare-const o1 character)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___1776 Int)
(declare-const o5 Int)
(declare-const o6 character)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const temp___1777 Int)
(declare-const o13 Int)
(declare-const o14 character)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const temp___1778 Int)
(declare-const o19 Int)
(declare-const o20 character)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const o24 Int)
(declare-const target1 Int)
(declare-const has_failed1 Bool)
(declare-const target2 Int)
(declare-const has_failed2 Bool)
(declare-const target3 Int)
(declare-const has_failed3 Bool)
(declare-const target4 Int)
(declare-const has_failed4 Bool)
(declare-const target5 Int)
(declare-const has_failed5 Bool)
(declare-const target6 Int)
(declare-const has_failed6 Bool)
(declare-const target7 Int)
(declare-const has_failed7 Bool)
(declare-const target8 Int)
(declare-const has_failed8 Bool)
(declare-const target9 Int)
(declare-const has_failed9 Bool)
(declare-const result Int)
(declare-const target10 Int)
(declare-const result1 Bool)
(declare-const has_failed10 Bool)
(declare-const target11 Int)
(declare-const has_failed11 Bool)
(declare-const target12 Int)
(declare-const has_failed12 Bool)
(assert (dynamic_invariant1 source true false true))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 target)))
(assert (and (and (< 0 (length source)) (< (length source) 10)) (forall ((index Int)) (=> (and (<= (to_rep1 (first (rt source))) index) (<= index (to_rep1 (last (rt source))))) (= (is_digit (to_rep (select (elts source) index))) true)))))
(assert (=> (= (length source) 1) (and (and (not (= has_failed1 true)) (= target1 (convert_character_digit_to_integer (to_rep (select (elts source) (to_rep1 (first (rt source)))))))) (in_range1 target1))))
(assert (=> (not (= (length source) 1)) (=> (= (length source) 2) (and (and (not (= has_failed2 true)) (= target2 (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10) (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1))))))) (in_range1 target2)))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (= (length source) 3) (and (and (not (= has_failed3 true)) (= target3 (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1)))) (in_range1 target3))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (= (length source) 4) (and (and (not (= has_failed4 true)) (= target4 (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 1000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1)))) (in_range1 target4)))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (= (length source) 5) (and (and (not (= has_failed5 true)) (= target5 (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1)))) (in_range1 target5))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (= (length source) 6) (and (and (not (= has_failed6 true)) (= target6 (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 1)))) (in_range1 target6)))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (= (length source) 7) (and (and (not (= has_failed7 true)) (= target7 (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 1000000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 1)))) (in_range1 target7))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (= (length source) 8) (and (and (not (= has_failed8 true)) (= target8 (+ (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10000000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 7)))) 1)))) (in_range1 target8)))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (= (length source) 9) (and (and (not (= has_failed9 true)) (= target9 (+ (+ (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100000000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10000000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1000000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 100000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 7)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 8)))) 1)))) (in_range1 target9))))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= (mk_int__ref result) (mk_int__ref target))))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= target10 0)))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= (mk_bool__ref result1) (mk_bool__ref has_failed))))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= has_failed10 (of_int 1))))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= has_failed9 has_failed10)))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= target9 target10)))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (= has_failed8 has_failed9))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (= target8 target9))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (= has_failed7 has_failed8)))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (= target7 target8)))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (= has_failed6 has_failed7))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (= target6 target7))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (= has_failed5 has_failed6)))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (= target5 target6)))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (= has_failed4 has_failed5))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (= target4 target5))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (= has_failed3 has_failed4)))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (= target3 target4)))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (= has_failed2 has_failed3))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (= target2 target3))))
(assert (=> (not (= (length source) 1)) (= has_failed1 has_failed2)))
(assert (=> (not (= (length source) 1)) (= target1 target2)))
(assert (= has_failed1 has_failed11))
(assert (= target1 target11))
(assert (= has_failed12 has_failed1))
(assert (= target12 target1))
(assert (=> (= (= (length source) 1) true) (= target11 (convert_character_digit_to_integer (to_rep (select (elts source) (to_rep1 (first (rt source)))))))))
(assert (=> (= (= (length source) 2) true) (= target11 (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10) (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1))))))))
(assert (=> (= (= (length source) 3) true) (= target11 (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1)))))
(assert (= (= (length source) 4) true))
(assert (and (= temp___1778 (+ (to_rep1 (first (rt source))) 3)) (in_range1 (+ (to_rep1 (first (rt source))) 3))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1778) (<= temp___1778 (to_rep1 (last (rt source))))))
(assert (= o19 temp___1778))
(assert (= o20 (select (elts source) o19)))
(assert (= o21 (to_rep o20)))
(assert (and (= o22 (convert_character_digit_to_integer o21)) (and (in_range1 o22) (and (and (<= 0 o22) (<= o22 9)) (ite (= (= o21 48) true) (= o22 0) (ite (= (= o21 49) true) (= o22 1) (ite (= (= o21 50) true) (= o22 2) (ite (= (= o21 51) true) (= o22 3) (ite (= (= o21 52) true) (= o22 4) (ite (= (= o21 53) true) (= o22 5) (ite (= (= o21 54) true) (= o22 6) (ite (= (= o21 55) true) (= o22 7) (ite (= (= o21 56) true) (= o22 8) (=> (= (= o21 57) true) (= o22 9)))))))))))))))
(assert (= o23 (* o22 1)))
(assert (and (= o24 o23) (in_range1 o23)))
(assert (and (= temp___1777 (+ (to_rep1 (first (rt source))) 2)) (in_range1 (+ (to_rep1 (first (rt source))) 2))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1777) (<= temp___1777 (to_rep1 (last (rt source))))))
(assert (= o13 temp___1777))
(assert (= o14 (select (elts source) o13)))
(assert (= o15 (to_rep o14)))
(assert (and (= o16 (convert_character_digit_to_integer o15)) (and (in_range1 o16) (and (and (<= 0 o16) (<= o16 9)) (ite (= (= o15 48) true) (= o16 0) (ite (= (= o15 49) true) (= o16 1) (ite (= (= o15 50) true) (= o16 2) (ite (= (= o15 51) true) (= o16 3) (ite (= (= o15 52) true) (= o16 4) (ite (= (= o15 53) true) (= o16 5) (ite (= (= o15 54) true) (= o16 6) (ite (= (= o15 55) true) (= o16 7) (ite (= (= o15 56) true) (= o16 8) (=> (= (= o15 57) true) (= o16 9)))))))))))))))
(assert (= o17 (* o16 10)))
(assert (and (= o18 o17) (in_range1 o17)))
(assert (and (= temp___1776 (+ (to_rep1 (first (rt source))) 1)) (in_range1 (+ (to_rep1 (first (rt source))) 1))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1776) (<= temp___1776 (to_rep1 (last (rt source))))))
(assert (= o5 temp___1776))
(assert (= o6 (select (elts source) o5)))
(assert (= o7 (to_rep o6)))
(assert (and (= o8 (convert_character_digit_to_integer o7)) (and (in_range1 o8) (and (and (<= 0 o8) (<= o8 9)) (ite (= (= o7 48) true) (= o8 0) (ite (= (= o7 49) true) (= o8 1) (ite (= (= o7 50) true) (= o8 2) (ite (= (= o7 51) true) (= o8 3) (ite (= (= o7 52) true) (= o8 4) (ite (= (= o7 53) true) (= o8 5) (ite (= (= o7 54) true) (= o8 6) (ite (= (= o7 55) true) (= o8 7) (ite (= (= o7 56) true) (= o8 8) (=> (= (= o7 57) true) (= o8 9)))))))))))))))
(assert (= o9 (* o8 100)))
(assert (and (= o10 o9) (in_range1 o9)))
(assert (and (= temp___1775 (+ (to_rep1 (first (rt source))) 0)) (in_range1 (+ (to_rep1 (first (rt source))) 0))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1775) (<= temp___1775 (to_rep1 (last (rt source))))))
(assert (= o temp___1775))
(assert (= o1 (select (elts source) o)))
(assert (= o2 (to_rep o1)))
(assert (and (= o3 (convert_character_digit_to_integer o2)) (and (in_range1 o3) (and (and (<= 0 o3) (<= o3 9)) (ite (= (= o2 48) true) (= o3 0) (ite (= (= o2 49) true) (= o3 1) (ite (= (= o2 50) true) (= o3 2) (ite (= (= o2 51) true) (= o3 3) (ite (= (= o2 52) true) (= o3 4) (ite (= (= o2 53) true) (= o3 5) (ite (= (= o2 54) true) (= o3 6) (ite (= (= o2 55) true) (= o3 7) (ite (= (= o2 56) true) (= o3 8) (=> (= (= o2 57) true) (= o3 9)))))))))))))))
(assert (= o4 (* o3 1000)))
(assert (and (= o11 o4) (in_range1 o4)))
(assert (= o12 (+ o11 o10)))
(assert (not (in_range1 o12)))
(check-sat)
(exit)
