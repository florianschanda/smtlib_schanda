(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-sort sixty 0)
(declare-fun sixtyqtint (sixty) Int)
(assert (forall ((i sixty)) (and (<= 0 (sixtyqtint i)) (<= (sixtyqtint i) 60))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 60)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (sixty sixty) Bool)
(declare-const dummy1 sixty)
(declare-datatypes () ((sixty__ref (mk_sixty__ref (sixty__content sixty)))))
(define-fun sixty__ref___projection ((a sixty__ref)) sixty (sixty__content a))
(define-fun to_rep ((x sixty)) Int (sixtyqtint x))
(declare-fun of_rep (Int) sixty)
(assert (forall ((x sixty)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x sixty)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort twenty_four 0)
(declare-fun twenty_fourqtint (twenty_four) Int)
(assert (forall ((i twenty_four)) (and (<= 0 (twenty_fourqtint i)) (<= (twenty_fourqtint i) 24))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 24)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (twenty_four twenty_four) Bool)
(declare-const dummy2 twenty_four)
(declare-datatypes () ((twenty_four__ref (mk_twenty_four__ref (twenty_four__content twenty_four)))))
(define-fun twenty_four__ref___projection ((a twenty_four__ref)) twenty_four (twenty_four__content a))
(define-fun to_rep1 ((x twenty_four)) Int (twenty_fourqtint x))
(declare-fun of_rep1 (Int) twenty_four)
(assert (forall ((x twenty_four)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x twenty_four)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (character character) Bool)
(declare-const dummy3 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep2 (character) Int)
(declare-fun of_rep2 (Int) character)
(assert (forall ((x character)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep2 (select a temp___idx_91)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep2 (select a temp___idx_91)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-const dummy4 (Array Int character))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(declare-fun user_eq4 ((Array Int character) (Array Int character)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__instr__instrument__name (Array Int character)) (rec__ext__ us_private)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) (rec__instr__instrument__name a))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private (rec__ext__ a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields) (attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (= (bool_eq (rec__instr__instrument__name (us_split_fields1 a)) 1 14 (rec__instr__instrument__name (us_split_fields1 b)) 1 14) true) true false))
(declare-fun us_dispatch_eq (us_rep us_rep) Bool)
(declare-const us_tag Int)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const instr__instrument__name__first__bit Int)
(declare-const instr__instrument__name__last__bit Int)
(declare-const instr__instrument__name__position Int)
(assert (<= 0 instr__instrument__name__first__bit))
(assert (< instr__instrument__name__first__bit instr__instrument__name__last__bit))
(assert (<= 0 instr__instrument__name__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((instrument__ref (mk_instrument__ref (instrument__content us_rep)))))
(define-fun instrument__ref___projection ((a instrument__ref)) us_rep (instrument__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__instr__clock__seconds sixty) (rec__instr__clock__minutes sixty) (rec__instr__clock__hours twenty_four) (rec__instr__instrument__name1 (Array Int character)) (rec__ext__1 us_private)))))
(define-fun us_split_fields_Seconds__projection ((a us_split_fields2)) sixty (rec__instr__clock__seconds a))
(define-fun us_split_fields_Minutes__projection ((a us_split_fields2)) sixty (rec__instr__clock__minutes a))
(define-fun us_split_fields_Hours__projection ((a us_split_fields2)) twenty_four (rec__instr__clock__hours a))
(define-fun us_split_fields_Name__5__projection ((a us_split_fields2)) (Array Int character) (rec__instr__instrument__name1 a))
(define-fun us_split_fields___5__projection ((a us_split_fields2)) us_private (rec__ext__1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2) (attr__tag1 Int)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___10__projection ((a us_rep1)) Int (attr__tag1 a))
(declare-fun hide_ext__ (sixty sixty twenty_four us_private) us_private)
(declare-fun extract__seconds (us_private) sixty)
(assert (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__2 us_private)) (= (extract__seconds (hide_ext__ seconds minutes hours rec__ext__2)) seconds)))))
(declare-fun extract__minutes (us_private) sixty)
(assert (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__2 us_private)) (= (extract__minutes (hide_ext__ seconds minutes hours rec__ext__2)) minutes)))))
(declare-fun extract__hours (us_private) twenty_four)
(assert (forall ((seconds sixty) (minutes sixty)) (forall ((hours twenty_four)) (forall ((rec__ext__2 us_private)) (= (extract__hours (hide_ext__ seconds minutes hours rec__ext__2)) hours)))))
(declare-fun extract__ext__ (us_private) us_private)
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (mk___split_fields (rec__instr__instrument__name1 (us_split_fields3 a)) (hide_ext__ (rec__instr__clock__seconds (us_split_fields3 a)) (rec__instr__clock__minutes (us_split_fields3 a)) (rec__instr__clock__hours (us_split_fields3 a)) (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (mk___split_fields1 (extract__seconds (rec__ext__ (us_split_fields1 r))) (extract__minutes (rec__ext__ (us_split_fields1 r))) (extract__hours (rec__ext__ (us_split_fields1 r))) (rec__instr__instrument__name (us_split_fields1 r)) (extract__ext__ (rec__ext__ (us_split_fields1 r)))) (attr__tag r)))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (= (to_rep (rec__instr__clock__seconds (us_split_fields3 a))) (to_rep (rec__instr__clock__seconds (us_split_fields3 b)))) (= (to_rep (rec__instr__clock__minutes (us_split_fields3 a))) (to_rep (rec__instr__clock__minutes (us_split_fields3 b))))) (= (to_rep1 (rec__instr__clock__hours (us_split_fields3 a))) (to_rep1 (rec__instr__clock__hours (us_split_fields3 b))))) (= (bool_eq (rec__instr__instrument__name1 (us_split_fields3 a)) 1 14 (rec__instr__instrument__name1 (us_split_fields3 b)) 1 14) true)) true false))
(declare-const us_tag1 Int)
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const instr__clock__seconds__first__bit Int)
(declare-const instr__clock__seconds__last__bit Int)
(declare-const instr__clock__seconds__position Int)
(assert (<= 0 instr__clock__seconds__first__bit))
(assert (< instr__clock__seconds__first__bit instr__clock__seconds__last__bit))
(assert (<= 0 instr__clock__seconds__position))
(declare-const instr__clock__minutes__first__bit Int)
(declare-const instr__clock__minutes__last__bit Int)
(declare-const instr__clock__minutes__position Int)
(assert (<= 0 instr__clock__minutes__first__bit))
(assert (< instr__clock__minutes__first__bit instr__clock__minutes__last__bit))
(assert (<= 0 instr__clock__minutes__position))
(declare-const instr__clock__hours__first__bit Int)
(declare-const instr__clock__hours__last__bit Int)
(declare-const instr__clock__hours__position Int)
(assert (<= 0 instr__clock__hours__first__bit))
(assert (< instr__clock__hours__first__bit instr__clock__hours__last__bit))
(assert (<= 0 instr__clock__hours__position))
(declare-const instr__instrument__name__first__bit1 Int)
(declare-const instr__instrument__name__last__bit1 Int)
(declare-const instr__instrument__name__position1 Int)
(assert (<= 0 instr__instrument__name__first__bit1))
(assert (< instr__instrument__name__first__bit1 instr__instrument__name__last__bit1))
(assert (<= 0 instr__instrument__name__position1))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((clock__ref (mk_clock__ref (clock__content us_rep1)))))
(define-fun clock__ref___projection ((a clock__ref)) us_rep1 (clock__content a))
(declare-fun temp___String_Literal_187 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 1)) 32) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 2)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 3)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 4)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 5)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 6)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 7)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 8)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 9)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 10)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 11)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 12)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 13)) 32)) (= (to_rep2 (select (temp___String_Literal_187 us_void_param) 14)) 32)) :pattern ((temp___String_Literal_187 us_void_param)))))
(define-fun default_initial_assumption ((temp___expr_284 us_rep1) (temp___skip_top_level_285 Bool)) Bool (and (= (attr__tag1 temp___expr_284) us_tag1) (and (and (and (= (to_rep (rec__instr__clock__seconds (us_split_fields3 temp___expr_284))) 0) (= (to_rep (rec__instr__clock__minutes (us_split_fields3 temp___expr_284))) 0)) (= (to_rep1 (rec__instr__clock__hours (us_split_fields3 temp___expr_284))) 0)) (= (rec__instr__instrument__name1 (us_split_fields3 temp___expr_284)) (temp___String_Literal_187 Tuple0)))))
(declare-const x__attr__tag Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const inc Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(define-fun dynamic_invariant2 ((temp___expr_268 Int) (temp___is_init_264 Bool) (temp___skip_constant_265 Bool) (temp___do_toplevel_266 Bool) (temp___do_typ_inv_267 Bool)) Bool (=> (or (= temp___is_init_264 true) (<= 0 60)) (in_range1 temp___expr_268)))
(define-fun dynamic_invariant3 ((temp___expr_275 Int) (temp___is_init_271 Bool) (temp___skip_constant_272 Bool) (temp___do_toplevel_273 Bool) (temp___do_typ_inv_274 Bool)) Bool (=> (or (= temp___is_init_271 true) (<= 0 24)) (in_range2 temp___expr_275)))
(define-fun default_initial_assumption1 ((temp___expr_185 us_rep) (temp___skip_top_level_186 Bool)) Bool (and (= (attr__tag temp___expr_185) us_tag) (= (rec__instr__instrument__name (us_split_fields1 temp___expr_185)) (temp___String_Literal_187 Tuple0))))
(declare-const x__split_fields sixty)
(declare-const x__split_fields1 sixty)
(declare-const x__split_fields2 twenty_four)
(declare-const x__split_fields3 (Array Int character))
(declare-const x__split_fields4 us_private)
(declare-const ninc Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 sixty)
(declare-const o3 sixty)
(declare-const o4 sixty)
(declare-const o5 twenty_four)
(declare-const o6 (Array Int character))
(declare-const o7 us_private)
(declare-const temp___391 sixty)
(declare-const temp___3911 sixty)
(declare-const temp___3912 twenty_four)
(declare-const temp___3913 (Array Int character))
(declare-const temp___3914 us_private)
(declare-const temp___3915 Int)
(declare-const o8 Int)
(declare-const result sixty)
(declare-const result1 sixty)
(declare-const result2 twenty_four)
(declare-const result3 (Array Int character))
(declare-const result4 us_private)
(declare-const x__split_fields5 sixty)
(declare-const x__split_fields6 sixty)
(declare-const x__split_fields7 twenty_four)
(declare-const x__split_fields8 (Array Int character))
(declare-const x__split_fields9 us_private)
(assert (in_range inc))
(assert (=> (<= (- 2147483648) 2147483647) (in_range ninc)))
(assert (and (= o (+ (to_rep x__split_fields) inc)) (in_range (+ (to_rep x__split_fields) inc))))
(assert (= o1 (mod2 o 60)))
(assert (= (to_rep o2) o1))
(assert (= o2 o3))
(assert (= x__split_fields1 o4))
(assert (= x__split_fields2 o5))
(assert (= x__split_fields3 o6))
(assert (= x__split_fields4 o7))
(assert (= temp___391 o3))
(assert (= temp___3911 o4))
(assert (= temp___3912 o5))
(assert (= temp___3913 o6))
(assert (= temp___3914 o7))
(assert (= x__attr__tag temp___3915))
(assert (= result x__split_fields))
(assert (= result1 x__split_fields1))
(assert (= result2 x__split_fields2))
(assert (= result3 x__split_fields3))
(assert (= result4 x__split_fields4))
(assert (= temp___391 x__split_fields5))
(assert (= temp___3911 x__split_fields6))
(assert (= temp___3912 x__split_fields7))
(assert (= temp___3913 x__split_fields8))
(assert (= temp___3914 x__split_fields9))
(assert (and (= o8 (+ (to_rep x__split_fields5) inc)) (in_range (+ (to_rep x__split_fields5) inc))))
(assert (not (not (= 60 0))))
(check-sat)
(exit)
