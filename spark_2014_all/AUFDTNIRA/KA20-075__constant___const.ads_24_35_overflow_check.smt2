(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-fun fi (tuple0) Int)
(declare-fun fi__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (fi us_void_param) true false true true) :pattern ((fi us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (fi us_void_param) 1) :pattern ((fi us_void_param)))))
(declare-fun fk (tuple0) Int)
(declare-fun fk__function_guard (Int tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (dynamic_invariant (fk us_void_param) true false true true) :pattern ((fk us_void_param)))))
(assert (forall ((us_void_param tuple0)) (! (= (fk us_void_param) 1) :pattern ((fk us_void_param)))))
(declare-fun fm (Int) Int)
(declare-fun fm__function_guard (Int Int) Bool)
(assert (forall ((x Int)) (! (=> (dynamic_invariant x true true true true) (dynamic_invariant (fm x) true false true true)) :pattern ((fm x)))))
(assert (forall ((x Int)) (! (=> (dynamic_invariant x true true true true) (= (fm x) x)) :pattern ((fm x)))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a1 (Array Int integer))) (forall ((first Int)) (! (= (slide a1 first first) a1) :pattern ((slide a1 first first))))))
(assert (forall ((a1 (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a1 old_first new_first) i) (select a1 (- i (- new_first old_first)))) :pattern ((select (slide a1 old_first new_first) i))))))))
(define-fun bool_eq ((a1 (Array Int integer)) (a__first Int) (a__last Int) (b1 (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a1 temp___idx_154)) (to_rep (select b1 (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a1 (Array Int integer)) (b1 (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b1 b__first b__last a1 a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a1 temp___idx_154)) (to_rep (select b1 (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const c (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun const__c__aggregate_def (Int) (Array Int integer))
(declare-const c2 (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun const__c2__aggregate_def (Int) (Array Int integer))
(declare-const d (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun const__d__aggregate_def (Int Int) (Array Int integer))
(declare-const d2 (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-fun const__d2__aggregate_def (Int Int) (Array Int integer))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__const__te__x integer) (rec__const__te__y integer)))))
(define-fun us_split_fields_X__projection ((a1 us_split_fields)) integer (rec__const__te__x a1))
(define-fun us_split_fields_Y__projection ((a1 us_split_fields)) integer (rec__const__te__y a1))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a1 us_split_fields__ref)) us_split_fields (us_split_fields__content a1))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a1 us_rep)) us_split_fields (us_split_fields1 a1))
(define-fun bool_eq1 ((a1 us_rep) (b1 us_rep)) Bool (ite (and (= (to_rep (rec__const__te__x (us_split_fields1 a1))) (to_rep (rec__const__te__x (us_split_fields1 b1)))) (= (to_rep (rec__const__te__y (us_split_fields1 a1))) (to_rep (rec__const__te__y (us_split_fields1 b1))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a1 us_rep)) (<= 0 (object__size a1))))
(assert (<= 0 value__alignment))
(assert (forall ((a1 us_rep)) (<= 0 (object__alignment a1))))
(declare-const const__te__x__first__bit Int)
(declare-const const__te__x__last__bit Int)
(declare-const const__te__x__position Int)
(assert (<= 0 const__te__x__first__bit))
(assert (< const__te__x__first__bit const__te__x__last__bit))
(assert (<= 0 const__te__x__position))
(declare-const const__te__y__first__bit Int)
(declare-const const__te__y__last__bit Int)
(declare-const const__te__y__position Int)
(assert (<= 0 const__te__y__first__bit))
(assert (< const__te__y__first__bit const__te__y__last__bit))
(assert (<= 0 const__te__y__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((te__ref (mk_te__ref (te__content us_rep)))))
(define-fun te__ref___projection ((a1 te__ref)) us_rep (te__content a1))
(declare-const e us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const f us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const g us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const k Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-const l Int)
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const m Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const n Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const p Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(assert (= a 1))
(assert (= b 1))
(assert (= c (const__c__aggregate_def 1)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 1))
(assert (forall ((temp___156 Int)) (=> (dynamic_invariant temp___156 true true true true) (forall ((temp___157 Int)) (= (select (const__c__aggregate_def temp___156) temp___157) rliteral)))))
(assert (= c2 (const__c2__aggregate_def 1)))
(assert (forall ((temp___159 Int)) (=> (dynamic_invariant temp___159 true true true true) (forall ((temp___160 Int)) (= (select (const__c2__aggregate_def temp___159) temp___160) rliteral)))))
(assert (= d (const__d__aggregate_def 1 1)))
(assert (forall ((temp___162 Int) (temp___163 Int)) (let ((temp___161 (const__d__aggregate_def temp___162 temp___163))) (=> (and (dynamic_invariant temp___162 true true true true) (dynamic_invariant temp___163 true true true true)) (and (= (select temp___161 1) rliteral) (= (select temp___161 2) rliteral))))))
(assert (= d2 (const__d2__aggregate_def 1 1)))
(assert (forall ((temp___166 Int) (temp___167 Int)) (let ((temp___165 (const__d2__aggregate_def temp___166 temp___167))) (=> (and (dynamic_invariant temp___166 true true true true) (dynamic_invariant temp___167 true true true true)) (and (= (select temp___165 1) rliteral) (= (select temp___165 2) rliteral))))))
(assert (= e (mk___rep (mk___split_fields rliteral rliteral))))
(assert (= f (mk___rep (mk___split_fields rliteral rliteral))))
(assert (= g (mk___rep (mk___split_fields rliteral rliteral))))
(assert (= i (fi Tuple0)))
(assert (= j (- (* 2 (fi Tuple0)) 1)))
(assert (= k (fk Tuple0)))
(assert (= l (- (* 2 (fk Tuple0)) 1)))
(assert (= m (fm 1)))
(assert (= n (- (* 2 (fm 1)) 1)))
(declare-const const__i__assume Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(assert (in_range a))
(assert (in_range b))
(assert (= (const__c__aggregate_def 1) c))
(assert (= (const__c2__aggregate_def 1) c2))
(assert (= (const__d__aggregate_def 1 1) d))
(assert (= (const__d2__aggregate_def 1 1) d2))
(assert (= (mk___rep (mk___split_fields rliteral rliteral)) e))
(assert (= (mk___rep (mk___split_fields rliteral rliteral)) f))
(assert (= (mk___rep (mk___split_fields rliteral rliteral)) g))
(assert (and (= const__i__assume (fi Tuple0)) (and (in_range const__i__assume) (= const__i__assume 1))))
(assert (= const__i__assume i))
(assert (in_range i))
(assert (and (= o (fi Tuple0)) (and (in_range o) (= o 1))))
(assert (= o1 (* 2 o)))
(assert (and (= o2 o1) (in_range o1)))
(assert (= o3 (- o2 1)))
(assert (not (in_range o3)))
(check-sat)
(exit)
