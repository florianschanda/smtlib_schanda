(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type statust

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : statust, statust -> bool

logic dummy5 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

type unsigned32t

predicate in_range5(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : unsigned32t, unsigned32t -> bool

logic dummy6 : unsigned32t

type unsigned32t__ref = { unsigned32t__content : unsigned32t
}

function unsigned32t__ref___projection(a: unsigned32t__ref) : unsigned32t =
  (a).unsigned32t__content

logic to_rep2 : unsigned32t -> int

logic of_rep2 : int -> unsigned32t

axiom inversion_axiom2 :
  (forall x:unsigned32t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:unsigned32t [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy7 : (int,character) farray

logic dummy8 : t1

type stringf1l1000__ref = { stringf1l1000__content : us_t1
}

function stringf1l1000__ref___projection(a: stringf1l1000__ref) : us_t1 =
  (a).stringf1l1000__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,character) farray

logic dummy10 : t2

type stringf1__ref = { stringf1__content : us_t2
}

function stringf1__ref___projection(a: stringf1__ref) : us_t2 =
  (a).stringf1__content

type descriptioni

predicate in_range6(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : descriptioni, descriptioni -> bool

logic dummy11 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic nouser : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___String_Literal_158 : unit -> (int,character) farray

axiom temp___String_Literal_158__def_axiom :
  ((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_158(void)[1])) = 78) and
  (to_rep((temp___String_Literal_158(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_158(void)[3])) = 85)) and
  (to_rep((temp___String_Literal_158(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_158(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_158(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_158(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[11])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[13])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[17])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[18])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[24])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[26])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[28])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[29])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[30])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[31])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[32])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[33])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[34])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[35])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[36])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[38])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[39])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[40])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[41])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[42])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[43])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[44])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[45])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[46])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[47])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[48])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[49])) = 32)) and
  (to_rep((temp___String_Literal_158(void)[50])) = 32))

type algorithmt

predicate in_range7(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : algorithmt, algorithmt -> bool

logic dummy12 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

type logfileindext

predicate in_range8(x: int) = ((1 <= x) and (x <= 17))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : logfileindext, logfileindext -> bool

logic dummy13 : logfileindext

type logfileindext__ref = { logfileindext__content : logfileindext
}

function logfileindext__ref___projection(a: logfileindext__ref) : logfileindext =
  (a).logfileindext__content

logic to_rep3 : logfileindext -> int

logic of_rep3 : int -> logfileindext

axiom inversion_axiom3 :
  (forall x:logfileindext [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:logfileindext [to_rep3(x)]. in_range8(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range8(x) ->
  (to_rep3(of_rep3(x)) = x)))

type logentrycountt

predicate in_range9(x: int) = ((0 <= x) and (x <= 17408))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : logentrycountt, logentrycountt -> bool

logic dummy14 : logentrycountt

type logentrycountt__ref = { logentrycountt__content : logentrycountt
}

function logentrycountt__ref___projection(a: logentrycountt__ref) : logentrycountt =
  (a).logentrycountt__content

logic to_rep4 : logentrycountt -> int

logic of_rep4 : int -> logentrycountt

axiom inversion_axiom4 :
  (forall x:logentrycountt [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:logentrycountt [to_rep4(x)]. in_range9(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range9(x) ->
  (to_rep4(of_rep4(x)) = x)))

type logfilecountt

predicate in_range10(x: int) = ((0 <= x) and (x <= 17))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : logfilecountt, logfilecountt -> bool

logic dummy15 : logfilecountt

type logfilecountt__ref = { logfilecountt__content : logfilecountt
}

function logfilecountt__ref___projection(a: logfilecountt__ref) : logfilecountt =
  (a).logfilecountt__content

logic to_rep5 : logfilecountt -> int

logic of_rep5 : int -> logfilecountt

axiom inversion_axiom5 :
  (forall x:logfilecountt [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:logfilecountt [to_rep5(x)]. in_range10(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range10(x) ->
  (to_rep5(of_rep5(x)) = x)))

type map__ref1 = { map__content1 : (int,logfileindext) farray
}

logic slide1 : (int,logfileindext) farray, int,
  int -> (int,logfileindext) farray

axiom slide_eq1 :
  (forall a:(int,logfileindext) farray.
  (forall first6:int [slide1(a, first6, first6)]. (slide1(a, first6,
  first6) = a)))

axiom slide_def1 :
  (forall a:(int,logfileindext) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq16 : (int,logfileindext) farray, int, int,
  (int,logfileindext) farray, int, int -> bool

axiom bool_eq_def12 :
  (forall a:(int,logfileindext) farray. forall a__first:int.
  forall a__last:int. forall b:(int,logfileindext) farray.
  forall b__first:int. forall b__last:int [bool_eq16(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_172:int. ((((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) and
  (to_rep3((a[temp___idx_172])) = to_rep3((b[((b__first - a__first) + temp___idx_172)])))) or
  (not ((a__first <= temp___idx_172) and (temp___idx_172 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_172:int. (((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) ->
  (to_rep3((a[temp___idx_172])) = to_rep3((b[((b__first - a__first) + temp___idx_172)]))))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,logfileindext) farray. forall b:(int,logfileindext) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_172:int. (((a__first <= temp___idx_172) and
  (temp___idx_172 <= a__last)) ->
  (to_rep3((a[temp___idx_172])) = to_rep3((b[((b__first - a__first) + temp___idx_172)])))))))))

logic dummy16 : (int,logfileindext) farray

logic value__size3 : int

logic object__size3 : (int,logfileindext) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,logfileindext) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,logfileindext) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,logfileindext) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,logfileindext) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,logfileindext) farray. (0 <= object__alignment3(a)))

logic user_eq13 : (int,logfileindext) farray,
  (int,logfileindext) farray -> bool

type us_split_fields = { rec__auditlog__logfilelistt__list :
(int,logfileindext) farray; rec__auditlog__logfilelistt__head :
logfileindext; rec__auditlog__logfilelistt__lasti : logfileindext;
rec__auditlog__logfilelistt__length : logfilecountt
}

function us_split_fields_List__projection(a: us_split_fields) : (int,logfileindext) farray =
  (a).rec__auditlog__logfilelistt__list

function us_split_fields_Head__projection(a: us_split_fields) : logfileindext =
  (a).rec__auditlog__logfilelistt__head

function us_split_fields_LastI__projection(a: us_split_fields) : logfileindext =
  (a).rec__auditlog__logfilelistt__lasti

function us_split_fields_Length__2__projection(a: us_split_fields) : logfilecountt =
  (a).rec__auditlog__logfilelistt__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq17 : us_rep, us_rep -> bool

axiom bool_eq_def13 :
  (forall a:us_rep. forall b:us_rep [bool_eq17(a, b)].
  ((((((bool_eq16(((a).us_split_fields1).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields1).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep3(((a).us_split_fields1).rec__auditlog__logfilelistt__head) = to_rep3(((b).us_split_fields1).rec__auditlog__logfilelistt__head))) and
  (to_rep3(((a).us_split_fields1).rec__auditlog__logfilelistt__lasti) = to_rep3(((b).us_split_fields1).rec__auditlog__logfilelistt__lasti))) and
  (to_rep5(((a).us_split_fields1).rec__auditlog__logfilelistt__length) = to_rep5(((b).us_split_fields1).rec__auditlog__logfilelistt__length))) ->
  (bool_eq17(a, b) = true)) and
  ((not ((((bool_eq16(((a).us_split_fields1).rec__auditlog__logfilelistt__list,
  1, 17, ((b).us_split_fields1).rec__auditlog__logfilelistt__list, 1,
  17) = true) and
  (to_rep3(((a).us_split_fields1).rec__auditlog__logfilelistt__head) = to_rep3(((b).us_split_fields1).rec__auditlog__logfilelistt__head))) and
  (to_rep3(((a).us_split_fields1).rec__auditlog__logfilelistt__lasti) = to_rep3(((b).us_split_fields1).rec__auditlog__logfilelistt__lasti))) and
  (to_rep5(((a).us_split_fields1).rec__auditlog__logfilelistt__length) = to_rep5(((b).us_split_fields1).rec__auditlog__logfilelistt__length)))) ->
  (bool_eq17(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt. (0 <= object__size4({
  us_split_fields1 = { rec__auditlog__logfilelistt__list = a;
  rec__auditlog__logfilelistt__head = a1;
  rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,logfileindext) farray. forall a1:logfileindext.
  forall a2:logfileindext. forall a3:logfilecountt.
  (0 <= object__alignment4({ us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a; rec__auditlog__logfilelistt__head =
  a1; rec__auditlog__logfilelistt__lasti = a2;
  rec__auditlog__logfilelistt__length = a3 } })))

logic auditlog__logfilelistt__list__first__bit : int

logic auditlog__logfilelistt__list__last__bit : int

logic auditlog__logfilelistt__list__position : int

axiom auditlog__logfilelistt__list__first__bit_axiom :
  (0 <= auditlog__logfilelistt__list__first__bit)

axiom auditlog__logfilelistt__list__last__bit_axiom :
  (auditlog__logfilelistt__list__first__bit <  auditlog__logfilelistt__list__last__bit)

axiom auditlog__logfilelistt__list__position_axiom :
  (0 <= auditlog__logfilelistt__list__position)

logic auditlog__logfilelistt__head__first__bit : int

logic auditlog__logfilelistt__head__last__bit : int

logic auditlog__logfilelistt__head__position : int

axiom auditlog__logfilelistt__head__first__bit_axiom :
  (0 <= auditlog__logfilelistt__head__first__bit)

axiom auditlog__logfilelistt__head__last__bit_axiom :
  (auditlog__logfilelistt__head__first__bit <  auditlog__logfilelistt__head__last__bit)

axiom auditlog__logfilelistt__head__position_axiom :
  (0 <= auditlog__logfilelistt__head__position)

logic auditlog__logfilelistt__lasti__first__bit : int

logic auditlog__logfilelistt__lasti__last__bit : int

logic auditlog__logfilelistt__lasti__position : int

axiom auditlog__logfilelistt__lasti__first__bit_axiom :
  (0 <= auditlog__logfilelistt__lasti__first__bit)

axiom auditlog__logfilelistt__lasti__last__bit_axiom :
  (auditlog__logfilelistt__lasti__first__bit <  auditlog__logfilelistt__lasti__last__bit)

axiom auditlog__logfilelistt__lasti__position_axiom :
  (0 <= auditlog__logfilelistt__lasti__position)

logic auditlog__logfilelistt__length__first__bit : int

logic auditlog__logfilelistt__length__last__bit : int

logic auditlog__logfilelistt__length__position : int

axiom auditlog__logfilelistt__length__first__bit_axiom :
  (0 <= auditlog__logfilelistt__length__first__bit)

axiom auditlog__logfilelistt__length__last__bit_axiom :
  (auditlog__logfilelistt__length__first__bit <  auditlog__logfilelistt__length__last__bit)

axiom auditlog__logfilelistt__length__position_axiom :
  (0 <= auditlog__logfilelistt__length__position)

logic user_eq14 : us_rep, us_rep -> bool

logic dummy17 : (int,logfileindext) farray

logic dummy18 : logfileindext

logic dummy19 : logfileindext

logic dummy20 : logfilecountt

type logfilelistt__ref = { logfilelistt__content : us_rep
}

function logfilelistt__ref___projection(a: logfilelistt__ref) : us_rep =
  (a).logfilelistt__content

type fileentrycountt

predicate in_range11(x: int) = ((0 <= x) and (x <= 1024))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : fileentrycountt, fileentrycountt -> bool

logic dummy21 : fileentrycountt

type fileentrycountt__ref = { fileentrycountt__content : fileentrycountt
}

function fileentrycountt__ref___projection(a: fileentrycountt__ref) : fileentrycountt =
  (a).fileentrycountt__content

logic to_rep6 : fileentrycountt -> int

logic of_rep6 : int -> fileentrycountt

axiom inversion_axiom6 :
  (forall x:fileentrycountt [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:fileentrycountt [to_rep6(x)]. in_range11(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range11(x) ->
  (to_rep6(of_rep6(x)) = x)))

type map__ref2 = { map__content2 : (int,fileentrycountt) farray
}

logic slide2 : (int,fileentrycountt) farray, int,
  int -> (int,fileentrycountt) farray

axiom slide_eq2 :
  (forall a:(int,fileentrycountt) farray.
  (forall first6:int [slide2(a, first6, first6)]. (slide2(a, first6,
  first6) = a)))

axiom slide_def2 :
  (forall a:(int,fileentrycountt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq19 : (int,fileentrycountt) farray, int, int,
  (int,fileentrycountt) farray, int, int -> bool

axiom bool_eq_def15 :
  (forall a:(int,fileentrycountt) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fileentrycountt) farray.
  forall b__first:int. forall b__last:int [bool_eq19(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_173:int. ((((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) and
  (to_rep6((a[temp___idx_173])) = to_rep6((b[((b__first - a__first) + temp___idx_173)])))) or
  (not ((a__first <= temp___idx_173) and (temp___idx_173 <= a__last)))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep6((a[temp___idx_173])) = to_rep6((b[((b__first - a__first) + temp___idx_173)]))))))) ->
  (bool_eq19(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,fileentrycountt) farray.
  forall b:(int,fileentrycountt) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_173:int. (((a__first <= temp___idx_173) and
  (temp___idx_173 <= a__last)) ->
  (to_rep6((a[temp___idx_173])) = to_rep6((b[((b__first - a__first) + temp___idx_173)])))))))))

logic dummy22 : (int,fileentrycountt) farray

logic value__size5 : int

logic object__size5 : (int,fileentrycountt) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,fileentrycountt) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,fileentrycountt) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,fileentrycountt) farray. (0 <= object__alignment5(a)))

logic user_eq16 : (int,fileentrycountt) farray,
  (int,fileentrycountt) farray -> bool

type us_split_fields2 = { rec__auditlog__logfilestatet__currentlogfile :
logfileindext; rec__auditlog__logfilestatet__numberlogentries :
logentrycountt; rec__auditlog__logfilestatet__usedlogfiles : us_rep;
rec__auditlog__logfilestatet__logfileentries : (int,fileentrycountt) farray
}

function us_split_fields_CurrentLogFile__projection(a: us_split_fields2) : logfileindext =
  (a).rec__auditlog__logfilestatet__currentlogfile

function us_split_fields_NumberLogEntries__projection(a: us_split_fields2) : logentrycountt =
  (a).rec__auditlog__logfilestatet__numberlogentries

function us_split_fields_UsedLogFiles__projection(a: us_split_fields2) : us_rep =
  (a).rec__auditlog__logfilestatet__usedlogfiles

function us_split_fields_LogFileEntries__projection(a: us_split_fields2) : (int,fileentrycountt) farray =
  (a).rec__auditlog__logfilestatet__logfileentries

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___9__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq20 : us_rep1, us_rep1 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq20(a, b)].
  ((((((to_rep3(((a).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile) = to_rep3(((b).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep4(((a).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries) = to_rep4(((b).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq17(((a).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq19(((a).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true)) -> (bool_eq20(a, b) = true)) and
  ((not ((((to_rep3(((a).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile) = to_rep3(((b).us_split_fields3).rec__auditlog__logfilestatet__currentlogfile)) and
  (to_rep4(((a).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries) = to_rep4(((b).us_split_fields3).rec__auditlog__logfilestatet__numberlogentries))) and
  (bool_eq17(((a).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles,
  ((b).us_split_fields3).rec__auditlog__logfilestatet__usedlogfiles) = true)) and
  (bool_eq19(((a).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17, ((b).us_split_fields3).rec__auditlog__logfilestatet__logfileentries,
  1, 17) = true))) -> (bool_eq20(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep1 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep1 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__size6({
  us_split_fields3 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:logfileindext. forall a1:logentrycountt.
  forall a2:(int,logfileindext) farray. forall a3:logfileindext.
  forall a4:logfileindext. forall a5:logfilecountt.
  forall a6:(int,fileentrycountt) farray. (0 <= object__alignment6({
  us_split_fields3 = { rec__auditlog__logfilestatet__currentlogfile = a;
  rec__auditlog__logfilestatet__numberlogentries = a1;
  rec__auditlog__logfilestatet__usedlogfiles = { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = a2; rec__auditlog__logfilelistt__head =
  a3; rec__auditlog__logfilelistt__lasti = a4;
  rec__auditlog__logfilelistt__length = a5 } };
  rec__auditlog__logfilestatet__logfileentries = a6 } })))

logic auditlog__logfilestatet__currentlogfile__first__bit : int

logic auditlog__logfilestatet__currentlogfile__last__bit : int

logic auditlog__logfilestatet__currentlogfile__position : int

axiom auditlog__logfilestatet__currentlogfile__first__bit_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__first__bit)

axiom auditlog__logfilestatet__currentlogfile__last__bit_axiom :
  (auditlog__logfilestatet__currentlogfile__first__bit <  auditlog__logfilestatet__currentlogfile__last__bit)

axiom auditlog__logfilestatet__currentlogfile__position_axiom :
  (0 <= auditlog__logfilestatet__currentlogfile__position)

logic auditlog__logfilestatet__numberlogentries__first__bit : int

logic auditlog__logfilestatet__numberlogentries__last__bit : int

logic auditlog__logfilestatet__numberlogentries__position : int

axiom auditlog__logfilestatet__numberlogentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__first__bit)

axiom auditlog__logfilestatet__numberlogentries__last__bit_axiom :
  (auditlog__logfilestatet__numberlogentries__first__bit <  auditlog__logfilestatet__numberlogentries__last__bit)

axiom auditlog__logfilestatet__numberlogentries__position_axiom :
  (0 <= auditlog__logfilestatet__numberlogentries__position)

logic auditlog__logfilestatet__usedlogfiles__first__bit : int

logic auditlog__logfilestatet__usedlogfiles__last__bit : int

logic auditlog__logfilestatet__usedlogfiles__position : int

axiom auditlog__logfilestatet__usedlogfiles__first__bit_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__first__bit)

axiom auditlog__logfilestatet__usedlogfiles__last__bit_axiom :
  (auditlog__logfilestatet__usedlogfiles__first__bit <  auditlog__logfilestatet__usedlogfiles__last__bit)

axiom auditlog__logfilestatet__usedlogfiles__position_axiom :
  (0 <= auditlog__logfilestatet__usedlogfiles__position)

logic auditlog__logfilestatet__logfileentries__first__bit : int

logic auditlog__logfilestatet__logfileentries__last__bit : int

logic auditlog__logfilestatet__logfileentries__position : int

axiom auditlog__logfilestatet__logfileentries__first__bit_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__first__bit)

axiom auditlog__logfilestatet__logfileentries__last__bit_axiom :
  (auditlog__logfilestatet__logfileentries__first__bit <  auditlog__logfilestatet__logfileentries__last__bit)

axiom auditlog__logfilestatet__logfileentries__position_axiom :
  (0 <= auditlog__logfilestatet__logfileentries__position)

logic user_eq17 : us_rep1, us_rep1 -> bool

logic dummy23 : logfileindext

logic dummy24 : logentrycountt

logic dummy25 : (int,logfileindext) farray

logic dummy26 : logfileindext

logic dummy27 : logfileindext

logic dummy28 : logfilecountt

logic dummy29 : (int,fileentrycountt) farray

type logfilestatet__ref = { logfilestatet__content : us_rep1
}

function logfilestatet__ref___projection(a: logfilestatet__ref) : us_rep1 =
  (a).logfilestatet__content

logic valid_numberlogentries : int, int, us_rep,
  (int,fileentrycountt) farray -> bool

logic valid_numberlogentries__function_guard : bool, int, int, us_rep,
  (int,fileentrycountt) farray -> prop

logic temp___1282 : int -> (int,logfileindext) farray

logic temp___1286 : int -> (int,fileentrycountt) farray

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep2

logic bool_eq21 : us_rep2, us_rep2 -> bool

logic value__size7 : int

logic object__size7 : us_rep2 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep2 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (forall a:us_rep2. (0 <= object__size7(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:us_rep2. (0 <= object__alignment7(a)))

logic user_eq18 : us_rep2, us_rep2 -> bool

logic dummy30 : us_rep2

type t__ref = { t__content : us_rep2
}

function t__ref___projection(a: t__ref) : us_rep2 = (a).t__content

type map__ref3 = { map__content3 : (int,us_rep2) farray
}

logic slide3 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq3 :
  (forall a:(int,us_rep2) farray.
  (forall first6:int [slide3(a, first6, first6)]. (slide3(a, first6,
  first6) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq22 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def17 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq22(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_174:int. ((((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) and (bool_eq21((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true)) or
  (not ((a__first <= temp___idx_174) and (temp___idx_174 <= a__last)))))) ->
  (bool_eq22(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq21((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true))))) -> (bool_eq22(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq22(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_174:int. (((a__first <= temp___idx_174) and
  (temp___idx_174 <= a__last)) -> (bool_eq21((a[temp___idx_174]),
  (b[((b__first - a__first) + temp___idx_174)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type filestatust

predicate in_range12(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq19 : filestatust, filestatust -> bool

logic dummy31 : filestatust

type filestatust__ref = { filestatust__content : filestatust
}

function filestatust__ref___projection(a: filestatust__ref) : filestatust =
  (a).filestatust__content

logic to_rep7 : filestatust -> int

logic of_rep7 : int -> filestatust

axiom inversion_axiom7 :
  (forall x:filestatust [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:filestatust [to_rep7(x)]. in_range12(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range12(x) ->
  (to_rep7(of_rep7(x)) = x)))

type map__ref4 = { map__content4 : (int,filestatust) farray
}

logic slide4 : (int,filestatust) farray, int, int -> (int,filestatust) farray

axiom slide_eq4 :
  (forall a:(int,filestatust) farray.
  (forall first6:int [slide4(a, first6, first6)]. (slide4(a, first6,
  first6) = a)))

axiom slide_def4 :
  (forall a:(int,filestatust) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq24 : (int,filestatust) farray, int, int,
  (int,filestatust) farray, int, int -> bool

axiom bool_eq_def19 :
  (forall a:(int,filestatust) farray. forall a__first:int.
  forall a__last:int. forall b:(int,filestatust) farray. forall b__first:int.
  forall b__last:int [bool_eq24(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_175:int. ((((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) and
  (to_rep7((a[temp___idx_175])) = to_rep7((b[((b__first - a__first) + temp___idx_175)])))) or
  (not ((a__first <= temp___idx_175) and (temp___idx_175 <= a__last)))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) ->
  (to_rep7((a[temp___idx_175])) = to_rep7((b[((b__first - a__first) + temp___idx_175)]))))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,filestatust) farray. forall b:(int,filestatust) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq24(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_175:int. (((a__first <= temp___idx_175) and
  (temp___idx_175 <= a__last)) ->
  (to_rep7((a[temp___idx_175])) = to_rep7((b[((b__first - a__first) + temp___idx_175)])))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type rawcertificatei

predicate in_range13(x: int) = ((1 <= x) and (x <= 4096))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq20 : rawcertificatei, rawcertificatei -> bool

logic dummy32 : rawcertificatei

type rawcertificatei__ref = { rawcertificatei__content : rawcertificatei
}

function rawcertificatei__ref___projection(a: rawcertificatei__ref) : rawcertificatei =
  (a).rawcertificatei__content

logic to_rep8 : rawcertificatei -> int

logic of_rep8 : int -> rawcertificatei

axiom inversion_axiom8 :
  (forall x:rawcertificatei [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:rawcertificatei [to_rep8(x)]. in_range13(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range13(x) ->
  (to_rep8(of_rep8(x)) = x)))

logic dummy33 : (int,character) farray

logic value__size8 : int

logic object__size8 : (int,character) farray -> int

logic value__component__size5 : int

logic object__component__size5 : (int,character) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,character) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,character) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom5 : (0 <= value__component__size5)

axiom object__component__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__component__size5(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,character) farray. (0 <= object__alignment8(a)))

logic user_eq21 : (int,character) farray, (int,character) farray -> bool

type us_split_fields4 = { rec__certtypes__rawdatat__rawdata :
(int,character) farray; rec__certtypes__rawdatat__datalength :
rawcertificatei
}

function us_split_fields_RawData__projection(a: us_split_fields4) : (int,character) farray =
  (a).rec__certtypes__rawdatat__rawdata

function us_split_fields_DataLength__projection(a: us_split_fields4) : rawcertificatei =
  (a).rec__certtypes__rawdatat__datalength

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___10__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq26 : us_rep3, us_rep3 -> bool

axiom bool_eq_def21 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq26(a, b)].
  ((((bool_eq5(((a).us_split_fields5).rec__certtypes__rawdatat__rawdata, 1,
  4096, ((b).us_split_fields5).rec__certtypes__rawdatat__rawdata, 1,
  4096) = true) and
  (to_rep8(((a).us_split_fields5).rec__certtypes__rawdatat__datalength) = to_rep8(((b).us_split_fields5).rec__certtypes__rawdatat__datalength))) ->
  (bool_eq26(a, b) = true)) and
  ((not ((bool_eq5(((a).us_split_fields5).rec__certtypes__rawdatat__rawdata,
  1, 4096, ((b).us_split_fields5).rec__certtypes__rawdatat__rawdata, 1,
  4096) = true) and
  (to_rep8(((a).us_split_fields5).rec__certtypes__rawdatat__datalength) = to_rep8(((b).us_split_fields5).rec__certtypes__rawdatat__datalength)))) ->
  (bool_eq26(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep3 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep3 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:(int,character) farray. forall a1:rawcertificatei.
  (0 <= object__size9({ us_split_fields5 = {
  rec__certtypes__rawdatat__rawdata = a;
  rec__certtypes__rawdatat__datalength = a1 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:(int,character) farray. forall a1:rawcertificatei.
  (0 <= object__alignment9({ us_split_fields5 = {
  rec__certtypes__rawdatat__rawdata = a;
  rec__certtypes__rawdatat__datalength = a1 } })))

logic certtypes__rawdatat__rawdata__first__bit : int

logic certtypes__rawdatat__rawdata__last__bit : int

logic certtypes__rawdatat__rawdata__position : int

axiom certtypes__rawdatat__rawdata__first__bit_axiom :
  (0 <= certtypes__rawdatat__rawdata__first__bit)

axiom certtypes__rawdatat__rawdata__last__bit_axiom :
  (certtypes__rawdatat__rawdata__first__bit <  certtypes__rawdatat__rawdata__last__bit)

axiom certtypes__rawdatat__rawdata__position_axiom :
  (0 <= certtypes__rawdatat__rawdata__position)

logic certtypes__rawdatat__datalength__first__bit : int

logic certtypes__rawdatat__datalength__last__bit : int

logic certtypes__rawdatat__datalength__position : int

axiom certtypes__rawdatat__datalength__first__bit_axiom :
  (0 <= certtypes__rawdatat__datalength__first__bit)

axiom certtypes__rawdatat__datalength__last__bit_axiom :
  (certtypes__rawdatat__datalength__first__bit <  certtypes__rawdatat__datalength__last__bit)

axiom certtypes__rawdatat__datalength__position_axiom :
  (0 <= certtypes__rawdatat__datalength__position)

logic user_eq22 : us_rep3, us_rep3 -> bool

logic dummy34 : (int,character) farray

logic dummy35 : rawcertificatei

type rawdatat__ref = { rawdatat__content : us_rep3
}

function rawdatat__ref___projection(a: rawdatat__ref) : us_rep3 =
  (a).rawdatat__content

type returnvaluet

predicate in_range14(x: int) = ((0 <= x) and (x <= 28))

logic bool_eq27 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq27(x, y)]. (((x = y) -> (bool_eq27(x,
  y) = true)) and ((not (x = y)) -> (bool_eq27(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq23 : returnvaluet, returnvaluet -> bool

logic dummy36 : returnvaluet

type returnvaluet__ref = { returnvaluet__content : returnvaluet
}

function returnvaluet__ref___projection(a: returnvaluet__ref) : returnvaluet =
  (a).returnvaluet__content

logic to_rep9 : returnvaluet -> int

logic of_rep9 : int -> returnvaluet

axiom inversion_axiom9 :
  (forall x:returnvaluet [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:returnvaluet [to_rep9(x)]. in_range14(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range14(x) ->
  (to_rep9(of_rep9(x)) = x)))

type bytet

predicate in_range15(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def23 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq24 : bytet, bytet -> bool

logic dummy37 : bytet

type bytet__ref = { bytet__content : bytet
}

function bytet__ref___projection(a: bytet__ref) : bytet = (a).bytet__content

logic to_rep10 : bytet -> int

logic of_rep10 : int -> bytet

axiom inversion_axiom10 :
  (forall x:bytet [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 : (forall x:bytet [to_rep10(x)]. in_range15(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range15(x) ->
  (to_rep10(of_rep10(x)) = x)))

type map__ref5 = { map__content5 : (int,bytet) farray
}

logic slide5 : (int,bytet) farray, int, int -> (int,bytet) farray

axiom slide_eq5 :
  (forall a:(int,bytet) farray.
  (forall first6:int [slide5(a, first6, first6)]. (slide5(a, first6,
  first6) = a)))

axiom slide_def5 :
  (forall a:(int,bytet) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide5(a, old_first, new_first)[i])]. ((slide5(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq29 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> bool

axiom bool_eq_def24 :
  (forall a:(int,bytet) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bytet) farray. forall b__first:int. forall b__last:int
  [bool_eq29(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_164:int. ((((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) and
  (to_rep10((a[temp___idx_164])) = to_rep10((b[((b__first - a__first) + temp___idx_164)])))) or
  (not ((a__first <= temp___idx_164) and (temp___idx_164 <= a__last)))))) ->
  (bool_eq29(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_164:int. (((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) ->
  (to_rep10((a[temp___idx_164])) = to_rep10((b[((b__first - a__first) + temp___idx_164)]))))))) ->
  (bool_eq29(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev5 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq29(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_164:int. (((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) ->
  (to_rep10((a[temp___idx_164])) = to_rep10((b[((b__first - a__first) + temp___idx_164)])))))))))

logic dummy38 : (int,bytet) farray

logic value__size10 : int

logic object__size10 : (int,bytet) farray -> int

logic value__component__size6 : int

logic object__component__size6 : (int,bytet) farray -> int

logic value__alignment10 : int

logic object__alignment10 : (int,bytet) farray -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:(int,bytet) farray. (0 <= object__size10(a)))

axiom value__component__size_axiom6 : (0 <= value__component__size6)

axiom object__component__size_axiom6 :
  (forall a:(int,bytet) farray. (0 <= object__component__size6(a)))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:(int,bytet) farray. (0 <= object__alignment10(a)))

logic user_eq25 : (int,bytet) farray, (int,bytet) farray -> bool

type us_split_fields6 = { rec__keystore__interfac__digestt__digestid :
unsigned32t; rec__keystore__interfac__digestt__signreturn : returnvaluet;
rec__keystore__interfac__digestt__verifyreturn : returnvaluet;
rec__keystore__interfac__digestt__pad : (int,bytet) farray
}

function us_split_fields_DigestID__projection(a: us_split_fields6) : unsigned32t =
  (a).rec__keystore__interfac__digestt__digestid

function us_split_fields_SignReturn__projection(a: us_split_fields6) : returnvaluet =
  (a).rec__keystore__interfac__digestt__signreturn

function us_split_fields_VerifyReturn__projection(a: us_split_fields6) : returnvaluet =
  (a).rec__keystore__interfac__digestt__verifyreturn

function us_split_fields_Pad__2__projection(a: us_split_fields6) : (int,bytet) farray =
  (a).rec__keystore__interfac__digestt__pad

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___14__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_fields7 : us_split_fields6
}

function us_rep___15__projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq30 : us_rep4, us_rep4 -> bool

axiom bool_eq_def25 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq30(a, b)].
  ((((((to_rep2(((a).us_split_fields7).rec__keystore__interfac__digestt__digestid) = to_rep2(((b).us_split_fields7).rec__keystore__interfac__digestt__digestid)) and
  (to_rep9(((a).us_split_fields7).rec__keystore__interfac__digestt__signreturn) = to_rep9(((b).us_split_fields7).rec__keystore__interfac__digestt__signreturn))) and
  (to_rep9(((a).us_split_fields7).rec__keystore__interfac__digestt__verifyreturn) = to_rep9(((b).us_split_fields7).rec__keystore__interfac__digestt__verifyreturn))) and
  (bool_eq29(((a).us_split_fields7).rec__keystore__interfac__digestt__pad, 1,
  20, ((b).us_split_fields7).rec__keystore__interfac__digestt__pad, 1,
  20) = true)) -> (bool_eq30(a, b) = true)) and
  ((not ((((to_rep2(((a).us_split_fields7).rec__keystore__interfac__digestt__digestid) = to_rep2(((b).us_split_fields7).rec__keystore__interfac__digestt__digestid)) and
  (to_rep9(((a).us_split_fields7).rec__keystore__interfac__digestt__signreturn) = to_rep9(((b).us_split_fields7).rec__keystore__interfac__digestt__signreturn))) and
  (to_rep9(((a).us_split_fields7).rec__keystore__interfac__digestt__verifyreturn) = to_rep9(((b).us_split_fields7).rec__keystore__interfac__digestt__verifyreturn))) and
  (bool_eq29(((a).us_split_fields7).rec__keystore__interfac__digestt__pad, 1,
  20, ((b).us_split_fields7).rec__keystore__interfac__digestt__pad, 1,
  20) = true))) -> (bool_eq30(a, b) = false))))

logic value__size11 : int

logic object__size11 : us_rep4 -> int

logic value__alignment11 : int

logic object__alignment11 : us_rep4 -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:unsigned32t. forall a1:returnvaluet. forall a2:returnvaluet.
  forall a3:(int,bytet) farray. (0 <= object__size11({ us_split_fields7 = {
  rec__keystore__interfac__digestt__digestid = a;
  rec__keystore__interfac__digestt__signreturn = a1;
  rec__keystore__interfac__digestt__verifyreturn = a2;
  rec__keystore__interfac__digestt__pad = a3 } })))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:unsigned32t. forall a1:returnvaluet. forall a2:returnvaluet.
  forall a3:(int,bytet) farray. (0 <= object__alignment11({
  us_split_fields7 = { rec__keystore__interfac__digestt__digestid = a;
  rec__keystore__interfac__digestt__signreturn = a1;
  rec__keystore__interfac__digestt__verifyreturn = a2;
  rec__keystore__interfac__digestt__pad = a3 } })))

logic keystore__interfac__digestt__digestid__first__bit : int

logic keystore__interfac__digestt__digestid__last__bit : int

logic keystore__interfac__digestt__digestid__position : int

axiom keystore__interfac__digestt__digestid__first__bit_axiom :
  (0 <= keystore__interfac__digestt__digestid__first__bit)

axiom keystore__interfac__digestt__digestid__last__bit_axiom :
  (keystore__interfac__digestt__digestid__first__bit <  keystore__interfac__digestt__digestid__last__bit)

axiom keystore__interfac__digestt__digestid__position_axiom :
  (0 <= keystore__interfac__digestt__digestid__position)

logic keystore__interfac__digestt__signreturn__first__bit : int

logic keystore__interfac__digestt__signreturn__last__bit : int

logic keystore__interfac__digestt__signreturn__position : int

axiom keystore__interfac__digestt__signreturn__first__bit_axiom :
  (0 <= keystore__interfac__digestt__signreturn__first__bit)

axiom keystore__interfac__digestt__signreturn__last__bit_axiom :
  (keystore__interfac__digestt__signreturn__first__bit <  keystore__interfac__digestt__signreturn__last__bit)

axiom keystore__interfac__digestt__signreturn__position_axiom :
  (0 <= keystore__interfac__digestt__signreturn__position)

logic keystore__interfac__digestt__verifyreturn__first__bit : int

logic keystore__interfac__digestt__verifyreturn__last__bit : int

logic keystore__interfac__digestt__verifyreturn__position : int

axiom keystore__interfac__digestt__verifyreturn__first__bit_axiom :
  (0 <= keystore__interfac__digestt__verifyreturn__first__bit)

axiom keystore__interfac__digestt__verifyreturn__last__bit_axiom :
  (keystore__interfac__digestt__verifyreturn__first__bit <  keystore__interfac__digestt__verifyreturn__last__bit)

axiom keystore__interfac__digestt__verifyreturn__position_axiom :
  (0 <= keystore__interfac__digestt__verifyreturn__position)

logic keystore__interfac__digestt__pad__first__bit : int

logic keystore__interfac__digestt__pad__last__bit : int

logic keystore__interfac__digestt__pad__position : int

axiom keystore__interfac__digestt__pad__first__bit_axiom :
  (0 <= keystore__interfac__digestt__pad__first__bit)

axiom keystore__interfac__digestt__pad__last__bit_axiom :
  (keystore__interfac__digestt__pad__first__bit <  keystore__interfac__digestt__pad__last__bit)

axiom keystore__interfac__digestt__pad__position_axiom :
  (0 <= keystore__interfac__digestt__pad__position)

logic user_eq26 : us_rep4, us_rep4 -> bool

logic dummy39 : unsigned32t

logic dummy40 : returnvaluet

logic dummy41 : returnvaluet

logic dummy42 : (int,bytet) farray

type digestt__ref = { digestt__content : us_rep4
}

function digestt__ref___projection(a: digestt__ref) : us_rep4 =
  (a).digestt__content

logic nulldigest : unsigned32t

logic nulldigest1 : returnvaluet

logic nulldigest2 : returnvaluet

logic nulldigest3 : (int,bytet) farray

logic attr__ATTRIBUTE_ADDRESS6 : int

logic temp___190 : int -> (int,bytet) farray

type map__ref6 = { map__content6 : (int,bool) farray
}

logic slide6 : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq6 :
  (forall a:(int,bool) farray.
  (forall first6:int [slide6(a, first6, first6)]. (slide6(a, first6,
  first6) = a)))

axiom slide_def6 :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide6(a, old_first, new_first)[i])]. ((slide6(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq31 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def26 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq31(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_194:int. ((((a__first <= temp___idx_194) and
  (temp___idx_194 <= a__last)) and
  ((a[temp___idx_194]) = (b[((b__first - a__first) + temp___idx_194)]))) or
  (not ((a__first <= temp___idx_194) and (temp___idx_194 <= a__last)))))) ->
  (bool_eq31(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_194:int. (((a__first <= temp___idx_194) and
  (temp___idx_194 <= a__last)) ->
  ((a[temp___idx_194]) = (b[((b__first - a__first) + temp___idx_194)])))))) ->
  (bool_eq31(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev6 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq31(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_194:int. (((a__first <= temp___idx_194) and
  (temp___idx_194 <= a__last)) ->
  ((a[temp___idx_194]) = (b[((b__first - a__first) + temp___idx_194)]))))))))

logic issystem : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS7 : int

logic keystore__issystem__aggregate_def : bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> (int,bool) farray

logic convertretvaltotext : int, us_t1 -> (int,character) farray

logic convertretvaltotext__function_guard : (int,character) farray, int,
  us_t1 -> prop

axiom convertretvaltotext__post_axiom : true

logic mechanism : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic rawcertdata : (int,character) farray

logic rawcertdata1 : rawcertificatei

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic getblock : (int,character) farray, int, int -> (int,character) farray

logic getblock__function_guard : (int,character) farray,
  (int,character) farray, int, int -> prop

axiom getblock__post_axiom : true

logic r29b : int

logic attr__ATTRIBUTE_ADDRESS19 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq32 : int, int -> bool

axiom bool_eq_def27 :
  (forall x:int. forall y:int [bool_eq32(x, y)]. (((x = y) -> (bool_eq32(x,
  y) = true)) and ((not (x = y)) -> (bool_eq32(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq27 : integer, integer -> bool

logic dummy43 : integer

type t30b__ref = { t30b__content : integer
}

function t30b__ref___projection(a: t30b__ref) : integer = (a).t30b__content

logic attr__ATTRIBUTE_ADDRESS20 : int

logic temp___String_Literal_1905 : unit -> (int,character) farray

axiom temp___String_Literal_1905__def_axiom :
  ((((((((((to_rep((temp___String_Literal_1905(void)[1])) = 68) and
  (to_rep((temp___String_Literal_1905(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1905(void)[3])) = 103)) and
  (to_rep((temp___String_Literal_1905(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1905(void)[5])) = 115)) and
  (to_rep((temp___String_Literal_1905(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_1905(void)[7])) = 73)) and
  (to_rep((temp___String_Literal_1905(void)[8])) = 110)) and
  (to_rep((temp___String_Literal_1905(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_1905(void)[10])) = 116))

logic temp___String_Literal_1907 : unit -> (int,character) farray

axiom temp___String_Literal_1907__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_1907(void)[1])) = 68) and
  (to_rep((temp___String_Literal_1907(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1907(void)[3])) = 103)) and
  (to_rep((temp___String_Literal_1907(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1907(void)[5])) = 115)) and
  (to_rep((temp___String_Literal_1907(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_1907(void)[7])) = 85)) and
  (to_rep((temp___String_Literal_1907(void)[8])) = 112)) and
  (to_rep((temp___String_Literal_1907(void)[9])) = 100)) and
  (to_rep((temp___String_Literal_1907(void)[10])) = 97)) and
  (to_rep((temp___String_Literal_1907(void)[11])) = 116)) and
  (to_rep((temp___String_Literal_1907(void)[12])) = 101))

logic temp___String_Literal_1909 : unit -> (int,character) farray

axiom temp___String_Literal_1909__def_axiom :
  (((((((((((to_rep((temp___String_Literal_1909(void)[1])) = 68) and
  (to_rep((temp___String_Literal_1909(void)[2])) = 105)) and
  (to_rep((temp___String_Literal_1909(void)[3])) = 103)) and
  (to_rep((temp___String_Literal_1909(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1909(void)[5])) = 115)) and
  (to_rep((temp___String_Literal_1909(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_1909(void)[7])) = 70)) and
  (to_rep((temp___String_Literal_1909(void)[8])) = 105)) and
  (to_rep((temp___String_Literal_1909(void)[9])) = 110)) and
  (to_rep((temp___String_Literal_1909(void)[10])) = 97)) and
  (to_rep((temp___String_Literal_1909(void)[11])) = 108))

axiom issystem__def_axiom :
  (issystem = keystore__issystem__aggregate_def(of_int(0), of_int(1),
  of_int(1), of_int(1), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(1), of_int(1), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(1), of_int(1), of_int(1)))

axiom def_axiom :
  (forall temp___196:bool. forall temp___197:bool. forall temp___198:bool.
  forall temp___199:bool. forall temp___200:bool. forall temp___201:bool.
  forall temp___202:bool. forall temp___203:bool. forall temp___204:bool.
  forall temp___205:bool. forall temp___206:bool. forall temp___207:bool.
  forall temp___208:bool. forall temp___209:bool. forall temp___210:bool.
  forall temp___211:bool. forall temp___212:bool. forall temp___213:bool.
  forall temp___214:bool. forall temp___215:bool. forall temp___216:bool.
  forall temp___217:bool. forall temp___218:bool. forall temp___219:bool.
  forall temp___220:bool. forall temp___221:bool. forall temp___222:bool.
  forall temp___223:bool. forall temp___224:bool.
  ((((((((((((((((((((((((((((((keystore__issystem__aggregate_def(temp___196,
  temp___197, temp___198, temp___199, temp___200, temp___201, temp___202,
  temp___203, temp___204, temp___205, temp___206, temp___207, temp___208,
  temp___209, temp___210, temp___211, temp___212, temp___213, temp___214,
  temp___215, temp___216, temp___217, temp___218, temp___219, temp___220,
  temp___221, temp___222, temp___223, temp___224)[0]) = temp___196) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[1]) = temp___197)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[2]) = temp___198)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[3]) = temp___199)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[4]) = temp___200)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[5]) = temp___201)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[6]) = temp___202)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[7]) = temp___203)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[8]) = temp___204)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[9]) = temp___205)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[10]) = temp___206)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[11]) = temp___207)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[12]) = temp___208)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[13]) = temp___209)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[14]) = temp___210)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[15]) = temp___211)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[16]) = temp___212)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[17]) = temp___213)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[18]) = temp___214)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[19]) = temp___215)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[20]) = temp___216)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[21]) = temp___217)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[22]) = temp___218)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[23]) = temp___219)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[24]) = temp___220)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[25]) = temp___221)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[26]) = temp___222)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[27]) = temp___223)) and
  ((keystore__issystem__aggregate_def(temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207, temp___208, temp___209, temp___210,
  temp___211, temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224)[28]) = temp___224)))

axiom nouser__def_axiom : (nouser = temp___String_Literal_158(void))

axiom valid_numberlogentries__post_axiom : true

axiom valid_numberlogentries__def_axiom :
  (forall currentlogfile:int. forall numberlogentries:int.
  (forall usedlogfiles:(int,logfileindext) farray.
  forall usedlogfiles1:logfileindext. forall usedlogfiles2:logfileindext.
  forall usedlogfiles3:logfilecountt.
  (forall logfileentries:(int,fileentrycountt) farray
  [valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields1 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } }, logfileentries)].
  ((valid_numberlogentries(currentlogfile, numberlogentries, {
  us_split_fields1 = { rec__auditlog__logfilelistt__list = usedlogfiles;
  rec__auditlog__logfilelistt__head = usedlogfiles1;
  rec__auditlog__logfilelistt__lasti = usedlogfiles2;
  rec__auditlog__logfilelistt__length = usedlogfiles3 } },
  logfileentries) = true) <-> ((1 <= to_rep5(usedlogfiles3)) and
  (numberlogentries = (((to_rep5(usedlogfiles3) - 1) * 1024) + to_rep6((logfileentries[currentlogfile])))))))))

axiom def_axiom1 :
  (forall temp___1288:int. (in_range11(temp___1288) ->
  (forall temp___1289:int.
  (to_rep6((temp___1286(temp___1288)[temp___1289])) = temp___1288))))

axiom nulldigest__def_axiom : ((nulldigest = of_rep2(0)) and
  ((nulldigest1 = of_rep9(3)) and ((nulldigest2 = of_rep9(3)) and
  (nulldigest3 = temp___190(0)))))

axiom def_axiom2 :
  (forall temp___192:int. (in_range15(temp___192) ->
  (forall temp___193:int.
  (to_rep10((temp___190(temp___192)[temp___193])) = temp___192))))

axiom def_axiom3 :
  (forall temp___1284:int. (in_range8(temp___1284) ->
  (forall temp___1285:int.
  (to_rep3((temp___1282(temp___1284)[temp___1285])) = temp___1284))))

 (* File "audittypes.ads", line 103, characters 0-0 *)
goal WP_parameter_def :
  (forall logfilestate__split_fields:logfileindext.
  forall logfilestate__split_fields1:logentrycountt.
  forall logfilestate__split_fields2:(int,logfileindext) farray.
  forall logfilestate__split_fields3:logfileindext.
  forall logfilestate__split_fields4:logfileindext.
  forall logfilestate__split_fields5:logfilecountt.
  forall logfilestate__split_fields6:(int,fileentrycountt) farray.
  forall auditalarm:int. forall thedigest__split_fields:unsigned32t.
  forall thedigest__split_fields1:returnvaluet.
  forall thedigest__split_fields2:returnvaluet.
  forall thedigest__split_fields3:(int,bytet) farray. forall retvalini:int.
  forall retvalupd:int. forall retvalfin:int. forall loopmax:int.
  forall bytesleft:int. forall size:int. forall j:int. forall o:returnvaluet.
  forall o1:returnvaluet. forall o2:unsigned32t. forall o3:unsigned32t.
  forall o4:returnvaluet. forall o5:returnvaluet.
  forall o6:(int,bytet) farray. forall temp___1921:unsigned32t.
  forall temp___19211:returnvaluet. forall temp___19212:returnvaluet.
  forall temp___19213:(int,bytet) farray. forall o7:(int,character) farray.
  forall result:int. forall retvalupd1:int. forall result1:int.
  forall retvalfin1:int. forall result2:int. forall size1:int.
  forall result3:unsigned32t. forall result4:returnvaluet.
  forall result5:returnvaluet. forall result6:(int,bytet) farray.
  forall thedigest__split_fields4:unsigned32t.
  forall thedigest__split_fields5:returnvaluet.
  forall thedigest__split_fields6:returnvaluet.
  forall thedigest__split_fields7:(int,bytet) farray. forall retvalini1:int.
  forall result7:int__ref. forall loopmax1:int. forall result8:int__ref.
  forall bytesleft1:int. forall result9:int__ref. forall j1:int.
  forall retvalupd2:int. forall bytesleft2:int.
  forall block:(int,character) farray. forall size2:int. forall j2:int.
  forall result10:int__ref. forall size3:int. forall result11:map__ref.
  forall block1:(int,character) farray. forall retvalupd3:int.
  ((keystore__issystem__aggregate_def(of_int(0), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(1), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(1)) = issystem) ->
  ((temp___String_Literal_158(void) = nouser) -> (((((to_rep9(o) = 3) and
  ((to_rep9(o1) = 3) and ((to_rep2(o2) = 0) and ((o2 = o3) and ((o1 = o4) and
  ((o = o5) and (temp___190(0) = o6))))))) and ((temp___1921 = o3) and
  ((temp___19211 = o4) and ((temp___19212 = o5) and
  (temp___19213 = o6))))) and ((nulldigest = temp___1921) and
  ((nulldigest1 = temp___19211) and ((nulldigest2 = temp___19212) and
  (nulldigest3 = temp___19213))))) -> (in_range7(mechanism) ->
  ((valid_numberlogentries(to_rep3(logfilestate__split_fields),
  to_rep4(logfilestate__split_fields1), { us_split_fields1 = {
  rec__auditlog__logfilelistt__list = logfilestate__split_fields2;
  rec__auditlog__logfilelistt__head = logfilestate__split_fields3;
  rec__auditlog__logfilelistt__lasti = logfilestate__split_fields4;
  rec__auditlog__logfilelistt__length = logfilestate__split_fields5 } },
  logfilestate__split_fields6) = true) -> (in_range4(auditalarm) ->
  (((0 <= 28) -> in_range14(retvalini)) -> (((result = retvalupd) and
  (retvalupd1 = 0)) -> (in_range14(retvalupd1) -> (((result1 = retvalfin) and
  (retvalfin1 = 0)) -> (in_range14(retvalfin1) -> (((1 <= 2147483647) ->
  in_range2(loopmax)) -> (((1 <= 2147483647) -> in_range2(bytesleft)) ->
  (((result2 = size) and (size1 = 100)) -> (in_range5(size1) ->
  ((((result3 = thedigest__split_fields) and
  ((result4 = thedigest__split_fields1) and
  ((result5 = thedigest__split_fields2) and
  (result6 = thedigest__split_fields3)))) and
  ((thedigest__split_fields4 = nulldigest) and
  ((thedigest__split_fields5 = nulldigest1) and
  ((thedigest__split_fields6 = nulldigest2) and
  (thedigest__split_fields7 = nulldigest3))))) -> (in_range14(retvalini1) ->
  ((retvalini1 = 0) -> (((result7 = { int__content = loopmax }) and
  (loopmax1 = (comp_div((to_rep8(rawcertdata1) - 1),100) + 1))) ->
  (((result8 = { int__content = bytesleft }) and
  (bytesleft1 = to_rep8(rawcertdata1))) -> (((loopmax1 = r29b) and
  in_range2(r29b)) -> (((result9 = { int__content = j }) and (j1 = 1)) ->
  (((1 <= j1) and (j1 <= r29b)) ->
  (((((((loopmax1 = (comp_div((to_rep8(rawcertdata1) - 1),100) + 1)) and
  ((1 <= j2) and (j2 <= loopmax1))) and
  (bytesleft2 = (to_rep8(rawcertdata1) - ((j2 - 1) * 100)))) and
  ((1 <= size2) and (size2 <= 100))) and (retvalini1 = 0)) and
  (retvalfin1 = 0)) -> (((((((1 <= 2147483647) -> in_range2(bytesleft2)) and
  ((0 <= 28) -> in_range14(retvalupd2))) and ((0 <= 4294967295) ->
  in_range5(size2))) and ((1 <= r29b) -> dynamic_property3(1, r29b, j2))) and
  ((1 <= j2) and (j2 <= r29b))) -> ((((bytesleft2 <  100) and ((result10 = {
  int__content = size2 }) and (size3 = bytesleft2))) or
  ((not (bytesleft2 <  100)) and (size3 = size2))) ->
  (((o7 = getblock(rawcertdata, j2, size3)) and ((result11 = { map__content =
  block }) and (block1 = o7))) -> (in_range14(retvalupd3) ->
  ((not ((retvalupd3 = 0) -> (j2 = loopmax1))) ->
  in_range2((bytesleft2 - 100))))))))))))))))))))))))))))))))
