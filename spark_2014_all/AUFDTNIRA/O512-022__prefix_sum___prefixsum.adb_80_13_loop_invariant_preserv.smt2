(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range3 temp___expr_39)))
(declare-sort index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index index) Bool)
(declare-const dummy3 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun all_elements_in ((Array Int integer) Int) Bool)
(declare-fun all_elements_in__function_guard (Bool (Array Int integer) Int) Bool)
(assert true)
(assert (forall ((a (Array Int integer))) (forall ((max Int)) (! (= (= (all_elements_in a max) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (and (<= (- max) (to_rep (select a k))) (<= (to_rep (select a k)) max))))) :pattern ((all_elements_in a max))))))
(declare-fun intermediate_form ((Array Int integer) (Array Int integer)) Bool)
(declare-fun intermediate_form__function_guard (Bool (Array Int integer) (Array Int integer)) Bool)
(assert true)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (! (= (= (intermediate_form a b) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (= (mod2 (+ k 1) 8) 0) (= (to_rep (select a k)) (+ (+ (+ (+ (+ (+ (+ (to_rep (select b 0)) (to_rep (select b 1))) (to_rep (select b 2))) (to_rep (select b 3))) (to_rep (select b 4))) (to_rep (select b 5))) (to_rep (select b 6))) (to_rep (select b 7)))) (ite (= (mod2 (+ k 1) 4) 0) (= (to_rep (select a k)) (+ (+ (+ (to_rep (select b k)) (to_rep (select b (- k 1)))) (to_rep (select b (- k 2)))) (to_rep (select b (- k 3))))) (ite (= (mod2 (+ k 1) 2) 0) (= (to_rep (select a k)) (+ (to_rep (select b k)) (to_rep (select b (- k 1))))) (= (to_rep (select a k)) (to_rep (select b k))))))))) :pattern ((intermediate_form a b)))))
(declare-const ghost__ (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const input_space Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant3 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 0 7)) (in_range4 temp___expr_136)))
(declare-const a (Array Int integer))
(declare-const space Int)
(declare-const left Int)
(declare-const right Int)
(declare-const temp Int)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 (Array Int integer))
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const temp___220 (Array Int integer))
(declare-const temp___219 (Array Int integer))
(declare-const temp___212 (Array Int integer))
(declare-const temp___211 Int)
(declare-const temp___217 (Array Int integer))
(declare-const temp___210 Int)
(declare-const temp___209 Int)
(declare-const temp___215 (Array Int integer))
(declare-const temp___214 (Array Int integer))
(declare-const temp___221 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 integer)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 integer)
(declare-const o14 Int)
(declare-const o15 integer)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 integer)
(declare-const o21 Int)
(declare-const o22 (Array Int integer))
(declare-const o23 integer)
(declare-const o24 Int)
(declare-const o25 (Array Int integer))
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const result Int)
(declare-const space1 Int)
(declare-const result1 (Array Int integer))
(declare-const a1 (Array Int integer))
(declare-const result2 Int)
(declare-const space2 Int)
(declare-const a2 (Array Int integer))
(declare-const space3 Int)
(declare-const left1 Int)
(declare-const right1 Int)
(declare-const temp1 Int)
(declare-const temp___244 Int)
(declare-const rho Int)
(declare-const result3 Int)
(declare-const temp___2441 Int)
(declare-const result4 Int)
(declare-const right2 Int)
(declare-const a3 (Array Int integer))
(declare-const left2 Int)
(declare-const right3 Int)
(declare-const temp2 Int)
(declare-const temp___2211 Int)
(declare-const result5 Int)
(declare-const temp___2212 Int)
(declare-const result6 Int)
(declare-const left3 Int)
(declare-const result7 Int)
(declare-const temp3 Int)
(declare-const result8 (Array Int integer))
(declare-const a4 (Array Int integer))
(declare-const result9 (Array Int integer))
(declare-const a5 (Array Int integer))
(declare-const result10 Int)
(declare-const right4 Int)
(declare-const a6 map__ref)
(declare-const left4 int__ref)
(declare-const right5 int__ref)
(declare-const temp4 int__ref)
(declare-const a7 (Array Int integer))
(declare-const left5 Int)
(declare-const right6 Int)
(declare-const temp5 Int)
(declare-const rho1 Int)
(declare-const a8 map__ref)
(declare-const left6 int__ref)
(declare-const right7 int__ref)
(declare-const temp6 int__ref)
(declare-const a9 (Array Int integer))
(declare-const left7 Int)
(declare-const right8 Int)
(declare-const temp7 Int)
(declare-const rho2 Int)
(declare-const result11 int__ref)
(declare-const space4 Int)
(declare-const a10 map__ref)
(declare-const space5 int__ref)
(declare-const left8 int__ref)
(declare-const right9 int__ref)
(declare-const temp8 int__ref)
(declare-const temp___2442 int__ref)
(declare-const a11 (Array Int integer))
(declare-const space6 Int)
(declare-const left9 Int)
(declare-const right10 Int)
(declare-const temp9 Int)
(declare-const temp___2443 Int)
(declare-const rho3 Int)
(assert (in_range3 input_space))
(assert (and (= (all_elements_in ghost__ 1000000) true) (and (= (all_elements_in a 8000000) true) (and (= input_space 8) (= (intermediate_form a ghost__) true)))))
(assert (and (= o input_space) (in_range2 input_space)))
(assert (= (mk_int__ref result) (mk_int__ref space)))
(assert (= space1 o))
(assert (in_range2 space1))
(assert (=> (<= 0 2147483647) (in_range2 left)))
(assert (=> (<= 0 2147483647) (in_range2 right)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 temp)))
(assert (= (to_rep o1) 0))
(assert (= o2 (store a 7 o1)))
(assert (= (mk_map__ref result1) (mk_map__ref a)))
(assert (= a1 o2))
(assert (= space1 result2))
(assert (= space2 (div1 space1 2)))
(assert (< 0 space2))
(assert (and (and (or (or (= space3 4) (= space3 2)) (= space3 1)) (= (all_elements_in a2 (* (* (div1 4 space3) 8) 1000000)) true)) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (= space3 4) (= (to_rep (select a2 k)) (to_rep (select a1 k))) (ite (and (= space3 2) (= (mod2 (+ k 1) 8) 0)) (= (to_rep (select a2 k)) (+ (to_rep (select a1 k)) (to_rep (select a1 (- k (* 2 space3)))))) (ite (and (= space3 2) (= (mod2 (+ k 1) 4) 0)) (= (to_rep (select a2 k)) (to_rep (select a1 (+ k (* 2 space3))))) (ite (= space3 2) (= (to_rep (select a2 k)) (to_rep (select a1 k))) (ite (and (= space3 1) (= (mod2 (+ k 1) 2) 0)) (and (and (and (= (to_rep (select a2 1)) (to_rep (select a1 7))) (= (to_rep (select a2 3)) (+ (to_rep (select a1 1)) (to_rep (select a1 7))))) (= (to_rep (select a2 5)) (+ (to_rep (select a1 7)) (to_rep (select a1 3))))) (= (to_rep (select a2 7)) (+ (+ (to_rep (select a1 5)) (to_rep (select a1 7))) (to_rep (select a1 3))))) (= (to_rep (select a2 k)) (to_rep (select a1 k))))))))))))
(assert (and (and (and (and (=> (<= 0 2147483647) (in_range2 space3)) (=> (<= 0 2147483647) (in_range2 left1))) (=> (<= 0 2147483647) (in_range2 right1))) (=> (<= (- 2147483648) 2147483647) (in_range1 temp1))) (< 0 space3)))
(assert (= temp___244 result3))
(assert (= temp___2441 space3))
(assert (and (= o3 (* space3 2)) (in_range1 (* space3 2))))
(assert (= o4 (- o3 1)))
(assert (and (= o5 o4) (in_range1 o4)))
(assert (and (= o6 o5) (in_range2 o5)))
(assert (= right1 result4))
(assert (= right2 o6))
(assert (=> (< right2 8) (= temp___220 a2)))
(assert (=> (< right2 8) (= temp___219 a2)))
(assert (=> (< right2 8) (= temp___212 a2)))
(assert (=> (< right2 8) (= temp___211 temp1)))
(assert (=> (< right2 8) (= temp___217 a2)))
(assert (=> (< right2 8) (= temp___210 right2)))
(assert (=> (< right2 8) (= temp___209 left1)))
(assert (=> (< right2 8) (= temp___215 a2)))
(assert (=> (< right2 8) (= temp___214 a2)))
(assert (=> (< right2 8) (= 0 temp___221)))
(assert (=> (< right2 8) (and (and (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (and (<= 0 k) (<= k (- right3 (* space3 2)))) (ite (= (mod2 (+ k 1) (* 2 space3)) 0) (= (to_rep (select a3 k)) (+ (to_rep (select temp___214 k)) (to_rep (select temp___215 (- k space3))))) (ite (= (mod2 (+ k 1) space3) 0) (= (to_rep (select a3 k)) (to_rep (select temp___217 (+ k space3)))) (= (to_rep (select a3 k)) (to_rep (select temp___219 k))))) (= (to_rep (select a3 k)) (to_rep (select temp___220 k)))))) (= (mod2 (+ right3 1) (* space3 2)) 0)) (not (<= 8 right3)))))
(assert (=> (< right2 8) (and (and (and (=> (<= 0 2147483647) (in_range2 left2)) (=> (<= 0 2147483647) (in_range2 right3))) (=> (<= (- 2147483648) 2147483647) (in_range1 temp2))) (< right3 8))))
(assert (=> (< right2 8) (= temp___2211 result5)))
(assert (=> (< right2 8) (= temp___2212 right3)))
(assert (=> (< right2 8) (and (= o7 (- right3 space3)) (in_range1 (- right3 space3)))))
(assert (=> (< right2 8) (and (= o8 o7) (in_range2 o7))))
(assert (=> (< right2 8) (= left2 result6)))
(assert (=> (< right2 8) (= left3 o8)))
(assert (=> (< right2 8) (and (<= 0 right3) (<= right3 7))))
(assert (=> (< right2 8) (= o9 right3)))
(assert (=> (< right2 8) (= o10 (select a3 o9))))
(assert (=> (< right2 8) (= o11 (to_rep o10))))
(assert (=> (< right2 8) (= temp2 result7)))
(assert (=> (< right2 8) (= temp3 o11)))
(assert (=> (< right2 8) (and (<= 0 right3) (<= right3 7))))
(assert (=> (< right2 8) (= o14 right3)))
(assert (=> (< right2 8) (= o15 (select a3 o14))))
(assert (=> (< right2 8) (= o16 (to_rep o15))))
(assert (=> (< right2 8) (and (<= 0 left3) (<= left3 7))))
(assert (=> (< right2 8) (= o12 left3)))
(assert (=> (< right2 8) (= o13 (select a3 o12))))
(assert (=> (< right2 8) (= o17 (to_rep o13))))
(assert (=> (< right2 8) (= o18 (+ o17 o16))))
(assert (=> (< right2 8) (and (= o19 o18) (in_range1 o18))))
(assert (=> (< right2 8) (= (to_rep o20) o19)))
(assert (=> (< right2 8) (and (<= 0 right3) (<= right3 7))))
(assert (=> (< right2 8) (= o21 right3)))
(assert (=> (< right2 8) (= o22 (store a3 o21 o20))))
(assert (=> (< right2 8) (= a3 result8)))
(assert (=> (< right2 8) (= a4 o22)))
(assert (=> (< right2 8) (= (to_rep o23) temp3)))
(assert (=> (< right2 8) (and (<= 0 left3) (<= left3 7))))
(assert (=> (< right2 8) (= o24 left3)))
(assert (=> (< right2 8) (= o25 (store a4 o24 o23))))
(assert (=> (< right2 8) (= a4 result9)))
(assert (=> (< right2 8) (= a5 o25)))
(assert (=> (< right2 8) (and (= o26 (* space3 2)) (in_range1 (* space3 2)))))
(assert (=> (< right2 8) (= o27 (+ right3 o26))))
(assert (=> (< right2 8) (and (= o28 o27) (in_range1 o27))))
(assert (=> (< right2 8) (and (= o29 o28) (in_range2 o28))))
(assert (=> (< right2 8) (= right3 result10)))
(assert (=> (< right2 8) (= right4 o29)))
(assert (=> (< right2 8) (not (< right4 8))))
(assert (=> (< right2 8) (= temp4 (mk_int__ref temp3))))
(assert (=> (< right2 8) (= right5 (mk_int__ref right4))))
(assert (=> (< right2 8) (= left4 (mk_int__ref left3))))
(assert (=> (< right2 8) (= a6 (mk_map__ref a5))))
(assert (=> (< right2 8) (= rho1 temp___2212)))
(assert (=> (< right2 8) (= temp5 temp3)))
(assert (=> (< right2 8) (= right6 right4)))
(assert (=> (< right2 8) (= left5 left3)))
(assert (=> (< right2 8) (= a7 a5)))
(assert (=> (< right2 8) (= temp6 temp4)))
(assert (=> (< right2 8) (= right7 right5)))
(assert (=> (< right2 8) (= left6 left4)))
(assert (=> (< right2 8) (= a8 a6)))
(assert (=> (< right2 8) (= rho2 rho1)))
(assert (=> (< right2 8) (= temp7 temp5)))
(assert (=> (< right2 8) (= right8 right6)))
(assert (=> (< right2 8) (= left7 left5)))
(assert (=> (< right2 8) (= a9 a7)))
(assert (=> (not (< right2 8)) (= temp6 (mk_int__ref temp1))))
(assert (=> (not (< right2 8)) (= right7 (mk_int__ref right2))))
(assert (=> (not (< right2 8)) (= left6 (mk_int__ref left1))))
(assert (=> (not (< right2 8)) (= a8 (mk_map__ref a2))))
(assert (=> (not (< right2 8)) (= rho2 rho)))
(assert (=> (not (< right2 8)) (= temp7 temp1)))
(assert (=> (not (< right2 8)) (= right8 right2)))
(assert (=> (not (< right2 8)) (= left7 left1)))
(assert (=> (not (< right2 8)) (= a9 a2)))
(assert (= result11 (mk_int__ref space3)))
(assert (= space4 (div1 space3 2)))
(assert (< 0 space4))
(assert (= temp___2442 (mk_int__ref temp___2441)))
(assert (= temp8 temp6))
(assert (= right9 right7))
(assert (= left8 left6))
(assert (= space5 (mk_int__ref space4)))
(assert (= a10 a8))
(assert (= rho3 rho2))
(assert (= temp___2443 temp___2441))
(assert (= temp9 temp7))
(assert (= right10 right8))
(assert (= left9 left7))
(assert (= space6 space4))
(assert (= a11 a9))
(assert (not (or (or (= (int__content space5) 4) (= (int__content space5) 2)) (= (int__content space5) 1))))
(check-sat)
(exit)
