(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range3 temp___expr_39)))
(declare-sort index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index index) Bool)
(declare-const dummy3 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun all_elements_in ((Array Int integer) Int) Bool)
(declare-fun all_elements_in__function_guard (Bool (Array Int integer) Int) Bool)
(assert true)
(assert (forall ((a (Array Int integer))) (forall ((max Int)) (! (= (= (all_elements_in a max) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (and (<= (- max) (to_rep (select a k))) (<= (to_rep (select a k)) max))))) :pattern ((all_elements_in a max))))))
(declare-fun intermediate_form ((Array Int integer) (Array Int integer)) Bool)
(declare-fun intermediate_form__function_guard (Bool (Array Int integer) (Array Int integer)) Bool)
(assert true)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (! (= (= (intermediate_form a b) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (= (mod2 (+ k 1) 8) 0) (= (to_rep (select a k)) (+ (+ (+ (+ (+ (+ (+ (to_rep (select b 0)) (to_rep (select b 1))) (to_rep (select b 2))) (to_rep (select b 3))) (to_rep (select b 4))) (to_rep (select b 5))) (to_rep (select b 6))) (to_rep (select b 7)))) (ite (= (mod2 (+ k 1) 4) 0) (= (to_rep (select a k)) (+ (+ (+ (to_rep (select b k)) (to_rep (select b (- k 1)))) (to_rep (select b (- k 2)))) (to_rep (select b (- k 3))))) (ite (= (mod2 (+ k 1) 2) 0) (= (to_rep (select a k)) (+ (to_rep (select b k)) (to_rep (select b (- k 1))))) (= (to_rep (select a k)) (to_rep (select b k))))))))) :pattern ((intermediate_form a b)))))
(declare-const ghost__ (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const input_space Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant3 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 0 7)) (in_range4 temp___expr_136)))
(declare-const a (Array Int integer))
(declare-const space Int)
(declare-const left Int)
(declare-const right Int)
(declare-const temp Int)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 (Array Int integer))
(declare-const temp___228 (Array Int integer))
(declare-const temp___232 (Array Int integer))
(declare-const temp___237 (Array Int integer))
(declare-const temp___236 (Array Int integer))
(declare-const temp___243 (Array Int integer))
(declare-const temp___226 (Array Int integer))
(declare-const temp___225 Int)
(declare-const temp___242 (Array Int integer))
(declare-const temp___235 (Array Int integer))
(declare-const temp___241 (Array Int integer))
(declare-const temp___230 (Array Int integer))
(declare-const temp___224 Int)
(declare-const temp___240 (Array Int integer))
(declare-const temp___229 (Array Int integer))
(declare-const temp___223 Int)
(declare-const temp___234 (Array Int integer))
(declare-const temp___239 (Array Int integer))
(declare-const temp___222 Int)
(declare-const temp___238 (Array Int integer))
(declare-const temp___244 Int)
(declare-const k Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const temp___220 (Array Int integer))
(declare-const temp___219 (Array Int integer))
(declare-const temp___212 (Array Int integer))
(declare-const temp___211 Int)
(declare-const temp___217 (Array Int integer))
(declare-const temp___210 Int)
(declare-const temp___209 Int)
(declare-const temp___215 (Array Int integer))
(declare-const temp___214 (Array Int integer))
(declare-const temp___221 Int)
(declare-const k1 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 integer)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 integer)
(declare-const o15 Int)
(declare-const o16 integer)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 integer)
(declare-const o22 Int)
(declare-const o23 (Array Int integer))
(declare-const o24 integer)
(declare-const o25 Int)
(declare-const o26 (Array Int integer))
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const left1 Int)
(declare-const right1 Int)
(declare-const temp1 Int)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Int)
(declare-const space1 Int)
(declare-const result3 (Array Int integer))
(declare-const a1 (Array Int integer))
(declare-const result4 Int)
(declare-const space2 Int)
(declare-const a2 (Array Int integer))
(declare-const space3 Int)
(declare-const left2 Int)
(declare-const right2 Int)
(declare-const temp2 Int)
(declare-const temp___2441 Int)
(declare-const rho Int)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const result7 Bool)
(declare-const result8 Int)
(declare-const temp___2442 Int)
(declare-const result9 Int)
(declare-const right3 Int)
(declare-const a3 (Array Int integer))
(declare-const left3 Int)
(declare-const right4 Int)
(declare-const temp3 Int)
(declare-const temp___2211 Int)
(declare-const result10 Bool)
(declare-const result11 Int)
(declare-const temp___2212 Int)
(declare-const result12 Int)
(declare-const left4 Int)
(declare-const result13 Int)
(declare-const temp4 Int)
(declare-const result14 (Array Int integer))
(declare-const a4 (Array Int integer))
(declare-const result15 (Array Int integer))
(declare-const a5 (Array Int integer))
(declare-const result16 Int)
(declare-const right5 Int)
(declare-const a6 (Array Int integer))
(declare-const left5 Int)
(declare-const right6 Int)
(declare-const temp5 int__ref)
(declare-const temp___2213 int__ref)
(declare-const a7 (Array Int integer))
(declare-const left6 Int)
(declare-const right7 Int)
(declare-const temp6 Int)
(declare-const temp___2214 Int)
(declare-const a8 map__ref)
(declare-const left7 int__ref)
(declare-const right8 int__ref)
(declare-const temp7 int__ref)
(declare-const a9 (Array Int integer))
(declare-const left8 Int)
(declare-const right9 Int)
(declare-const temp8 Int)
(declare-const rho1 Int)
(declare-const a10 map__ref)
(declare-const left9 int__ref)
(declare-const right10 int__ref)
(declare-const temp9 int__ref)
(declare-const a11 (Array Int integer))
(declare-const left10 Int)
(declare-const right11 Int)
(declare-const temp10 Int)
(declare-const rho2 Int)
(declare-const result17 int__ref)
(declare-const space4 Int)
(declare-const a12 map__ref)
(declare-const space5 int__ref)
(declare-const left11 int__ref)
(declare-const right12 int__ref)
(declare-const temp11 int__ref)
(declare-const temp___2443 int__ref)
(declare-const a13 (Array Int integer))
(declare-const space6 Int)
(declare-const left12 Int)
(declare-const right13 Int)
(declare-const temp12 Int)
(declare-const temp___2444 Int)
(declare-const rho3 Int)
(declare-const a14 map__ref)
(declare-const space7 int__ref)
(declare-const left13 int__ref)
(declare-const right14 int__ref)
(declare-const temp13 int__ref)
(declare-const temp___2445 int__ref)
(declare-const a15 (Array Int integer))
(declare-const space8 Int)
(declare-const left14 Int)
(declare-const right15 Int)
(declare-const temp14 Int)
(declare-const temp___2446 Int)
(declare-const a16 map__ref)
(declare-const space9 int__ref)
(declare-const left15 int__ref)
(declare-const right16 int__ref)
(declare-const temp15 int__ref)
(declare-const a17 (Array Int integer))
(declare-const space10 Int)
(declare-const left16 Int)
(declare-const right17 Int)
(declare-const temp16 Int)
(declare-const a18 map__ref)
(declare-const space11 int__ref)
(declare-const left17 int__ref)
(declare-const right18 int__ref)
(declare-const temp17 int__ref)
(declare-const a19 (Array Int integer))
(declare-const space12 Int)
(declare-const left18 Int)
(declare-const right19 Int)
(declare-const temp18 Int)
(declare-const a20 map__ref)
(declare-const space13 int__ref)
(declare-const left19 int__ref)
(declare-const right20 int__ref)
(declare-const temp19 int__ref)
(declare-const a21 (Array Int integer))
(declare-const space14 Int)
(declare-const left20 Int)
(declare-const right21 Int)
(declare-const temp20 Int)
(assert (in_range3 input_space))
(assert (and (= (all_elements_in ghost__ 1000000) true) (and (= (all_elements_in a 8000000) true) (and (= input_space 8) (= (intermediate_form a ghost__) true)))))
(assert (and (= o input_space) (in_range2 input_space)))
(assert (= (mk_int__ref result2) (mk_int__ref space)))
(assert (= space1 o))
(assert (in_range2 space1))
(assert (=> (<= 0 2147483647) (in_range2 left)))
(assert (=> (<= 0 2147483647) (in_range2 right)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 temp)))
(assert (= (to_rep o1) 0))
(assert (= o2 (store a 7 o1)))
(assert (= (mk_map__ref result3) (mk_map__ref a)))
(assert (= a1 o2))
(assert (= space1 result4))
(assert (= space2 (div1 space1 2)))
(assert (=> (< 0 space2) (and (and (= temp___228 a1) (and (= temp___232 a1) (and (= temp___237 a1) (and (= temp___236 a1) (and (= temp___243 a1) (and (= temp___226 a1) (and (= temp___225 temp) (and (= temp___242 a1) (and (= temp___235 a1) (and (= temp___241 a1) (and (= temp___230 a1) (and (= temp___224 right) (and (= temp___240 a1) (and (= temp___229 a1) (and (= temp___223 left) (and (= temp___234 a1) (and (= temp___239 a1) (and (= temp___222 space2) (and (= temp___238 a1) (and (= 0 temp___244) (and (and (and (or (or (= space3 4) (= space3 2)) (= space3 1)) (= (all_elements_in a2 (* (* (div1 4 space3) 8) 1000000)) true)) (forall ((k2 Int)) (=> (and (<= 0 k2) (<= k2 7)) (ite (= space3 4) (= (to_rep (select a2 k2)) (to_rep (select temp___228 k2))) (ite (and (= space3 2) (= (mod2 (+ k2 1) 8) 0)) (= (to_rep (select a2 k2)) (+ (to_rep (select temp___229 k2)) (to_rep (select temp___230 (- k2 (* 2 space3)))))) (ite (and (= space3 2) (= (mod2 (+ k2 1) 4) 0)) (= (to_rep (select a2 k2)) (to_rep (select temp___232 (+ k2 (* 2 space3))))) (ite (= space3 2) (= (to_rep (select a2 k2)) (to_rep (select temp___234 k2))) (ite (and (= space3 1) (= (mod2 (+ k2 1) 2) 0)) (and (and (and (= (to_rep (select a2 1)) (to_rep (select temp___235 7))) (= (to_rep (select a2 3)) (+ (to_rep (select temp___236 1)) (to_rep (select temp___237 7))))) (= (to_rep (select a2 5)) (+ (to_rep (select temp___238 7)) (to_rep (select temp___239 3))))) (= (to_rep (select a2 7)) (+ (+ (to_rep (select temp___240 5)) (to_rep (select temp___241 7))) (to_rep (select temp___242 3))))) (= (to_rep (select a2 k2)) (to_rep (select temp___243 k2))))))))))) (and (and (and (and (and (=> (<= 0 2147483647) (in_range2 space3)) (=> (<= 0 2147483647) (in_range2 left2))) (=> (<= 0 2147483647) (in_range2 right2))) (=> (<= (- 2147483648) 2147483647) (in_range1 temp2))) (< 0 space3)) (and (and (= temp___2441 result8) (= temp___2442 space3)) (and (and (and (and (and (and (= o4 (* space3 2)) (in_range1 (* space3 2))) (= o5 (- o4 1))) (and (= o6 o5) (in_range1 o5))) (and (= o7 o6) (in_range2 o6))) (and (= right2 result9) (= right3 o7))) (and (ite (< right3 8) (and (and (and (= temp___220 a2) (and (= temp___219 a2) (and (= temp___212 a2) (and (= temp___211 temp2) (and (= temp___217 a2) (and (= temp___210 right3) (and (= temp___209 left2) (and (= temp___215 a2) (and (= temp___214 a2) (and (= 0 temp___221) (and (and (and (forall ((k2 Int)) (=> (and (<= 0 k2) (<= k2 7)) (ite (and (<= 0 k2) (<= k2 (- right4 (* space3 2)))) (ite (= (mod2 (+ k2 1) (* 2 space3)) 0) (= (to_rep (select a3 k2)) (+ (to_rep (select temp___214 k2)) (to_rep (select temp___215 (- k2 space3))))) (ite (= (mod2 (+ k2 1) space3) 0) (= (to_rep (select a3 k2)) (to_rep (select temp___217 (+ k2 space3)))) (= (to_rep (select a3 k2)) (to_rep (select temp___219 k2))))) (= (to_rep (select a3 k2)) (to_rep (select temp___220 k2)))))) (= (mod2 (+ right4 1) (* space3 2)) 0)) (not (<= 8 right4))) (and (and (and (and (=> (<= 0 2147483647) (in_range2 left3)) (=> (<= 0 2147483647) (in_range2 right4))) (=> (<= (- 2147483648) 2147483647) (in_range1 temp3))) (< right4 8)) (and (and (= temp___2211 result11) (= temp___2212 right4)) (and (and (and (and (= o8 (- right4 space3)) (in_range1 (- right4 space3))) (and (= o9 o8) (in_range2 o8))) (and (= left3 result12) (= left4 o9))) (and (and (and (and (and (and (<= 0 right4) (<= right4 7)) (= o10 right4)) (= o11 (select a3 o10))) (= o12 (to_rep o11))) (and (= temp3 result13) (= temp4 o12))) (and (and (and (and (and (and (and (and (and (and (<= 0 right4) (<= right4 7)) (= o15 right4)) (= o16 (select a3 o15))) (= o17 (to_rep o16))) (and (and (and (and (and (<= 0 left4) (<= left4 7)) (= o13 left4)) (= o14 (select a3 o13))) (= o18 (to_rep o14))) (= o19 (+ o18 o17)))) (and (= o20 o19) (in_range1 o19))) (= (to_rep o21) o20)) (and (and (and (<= 0 right4) (<= right4 7)) (= o22 right4)) (= o23 (store a3 o22 o21)))) (and (= a3 result14) (= a4 o23))) (and (and (and (= (to_rep o24) temp4) (and (and (and (<= 0 left4) (<= left4 7)) (= o25 left4)) (= o26 (store a4 o25 o24)))) (and (= a4 result15) (= a5 o26))) (and (and (and (and (and (and (= o27 (* space3 2)) (in_range1 (* space3 2))) (= o28 (+ right4 o27))) (and (= o29 o28) (in_range1 o28))) (and (= o30 o29) (in_range2 o29))) (and (= right4 result16) (= right5 o30))) (not (< right5 8)))))))))))))))))))) (and (and (= temp7 (mk_int__ref temp4)) (and (= right8 (mk_int__ref right5)) (and (= left7 (mk_int__ref left4)) (= a8 (mk_map__ref a5))))) (and (= rho1 temp___2212) (and (= temp8 temp4) (and (= right9 right5) (and (= left8 left4) (= a9 a5))))))) (and (and (= temp9 temp7) (and (= right10 right8) (and (= left9 left7) (= a10 a8)))) (and (= rho2 rho1) (and (= temp10 temp8) (and (= right11 right9) (and (= left10 left8) (= a11 a9))))))) (and (and (= temp9 (mk_int__ref temp2)) (and (= right10 (mk_int__ref right3)) (and (= left9 (mk_int__ref left2)) (= a10 (mk_map__ref a2))))) (and (= rho2 rho) (and (= temp10 temp2) (and (= right11 right3) (and (= left10 left2) (= a11 a2))))))) (and (and (= result17 (mk_int__ref space3)) (= space4 (div1 space3 2))) (not (< 0 space4)))))))))))))))))))))))))))) (and (and (= temp15 temp9) (and (= right16 right10) (and (= left15 left9) (and (= space9 (mk_int__ref space4)) (= a16 a10))))) (and (= temp16 temp10) (and (= right17 right11) (and (= left16 left10) (and (= space10 space4) (= a17 a11)))))))))
(assert (=> (< 0 space2) (= temp17 temp15)))
(assert (=> (< 0 space2) (= right18 right16)))
(assert (=> (< 0 space2) (= left17 left15)))
(assert (=> (< 0 space2) (= space11 space9)))
(assert (=> (< 0 space2) (= a18 a16)))
(assert (=> (< 0 space2) (= temp18 temp16)))
(assert (=> (< 0 space2) (= right19 right17)))
(assert (=> (< 0 space2) (= left18 left16)))
(assert (=> (< 0 space2) (= space12 space10)))
(assert (=> (< 0 space2) (= a19 a17)))
(assert (=> (not (< 0 space2)) (= temp17 (mk_int__ref temp))))
(assert (=> (not (< 0 space2)) (= right18 (mk_int__ref right))))
(assert (=> (not (< 0 space2)) (= left17 (mk_int__ref left))))
(assert (=> (not (< 0 space2)) (= space11 (mk_int__ref space2))))
(assert (=> (not (< 0 space2)) (= a18 (mk_map__ref a1))))
(assert (=> (not (< 0 space2)) (= temp18 temp1)))
(assert (=> (not (< 0 space2)) (= right19 right1)))
(assert (=> (not (< 0 space2)) (= left18 left1)))
(assert (=> (not (< 0 space2)) (= space12 space2)))
(assert (=> (not (< 0 space2)) (= a19 a1)))
(assert (= temp19 temp17))
(assert (= right20 right18))
(assert (= left19 left17))
(assert (= space13 space11))
(assert (= a20 a18))
(assert (= temp20 temp18))
(assert (= right21 right19))
(assert (= left20 left18))
(assert (= space14 space12))
(assert (= a21 a19))
(assert (not (= (to_rep (select (map__content a20) 0)) 0)))
(check-sat)
(exit)
