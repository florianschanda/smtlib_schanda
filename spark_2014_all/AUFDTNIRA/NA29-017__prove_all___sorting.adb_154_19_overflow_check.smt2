(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((int_array__ref (mk_int_array__ref (int_array__content us_t)))))
(define-fun int_array__ref___projection ((a int_array__ref)) us_t (int_array__content a))
(declare-fun sorted (us_t Int Int) Bool)
(declare-fun sorted__function_guard (Bool us_t Int Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_136 us_t) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (not (= temp___skip_constant_134 true)) (dynamic_property 0 2147483647 (first1 temp___expr_136) (last1 temp___expr_136))))
(assert true)
(declare-fun perm (us_t us_t Int Int) Bool)
(declare-fun perm__function_guard (Bool us_t us_t Int Int) Bool)
(assert true)
(declare-const a__first integer)
(declare-const a__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const a_first Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const length1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const b__first integer)
(declare-const b__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const a (Array Int integer))
(declare-const b (Array Int integer))
(declare-const i Int)
(declare-const l Int)
(declare-const k Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Bool)
(declare-const temp___219 (Array Int integer))
(declare-const temp___228 (Array Int integer))
(declare-const temp___227 Int)
(declare-const temp___226 Int)
(declare-const temp___225 (Array Int integer))
(declare-const temp___223 Int)
(declare-const temp___218 (Array Int integer))
(declare-const temp___222 (Array Int integer))
(declare-const j Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Bool)
(declare-const temp___217 Int)
(declare-const temp___216 (Array Int integer))
(declare-const temp___214 Int)
(declare-const temp___213 (Array Int integer))
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const j1 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const o30 Int)
(declare-const o31 Int)
(declare-const o32 Int)
(declare-const o33 Int)
(declare-const o34 Int)
(declare-const o35 Bool)
(declare-const j2 Int)
(declare-const o36 Int)
(declare-const o37 Int)
(declare-const o38 Int)
(declare-const o39 Int)
(declare-const o40 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const o43 Int)
(declare-const o44 Int)
(declare-const o45 Int)
(declare-const o46 Int)
(declare-const o47 Int)
(declare-const o48 Int)
(declare-const o49 Bool)
(declare-const o50 Bool)
(declare-const o51 Int)
(declare-const o52 Bool)
(declare-const o53 Int)
(declare-const o54 Int)
(declare-const o55 Int)
(declare-const o56 Int)
(declare-const o57 Int)
(declare-const o58 Int)
(declare-const o59 Int)
(declare-const o60 Int)
(declare-const o61 Int)
(declare-const j3 Int)
(declare-const o62 Int)
(declare-const o63 Int)
(declare-const o64 Int)
(declare-const o65 Int)
(declare-const o66 Int)
(declare-const o67 Int)
(declare-const o68 Int)
(declare-const o69 Int)
(declare-const o70 Int)
(declare-const o71 Int)
(declare-const o72 Int)
(declare-const o73 Int)
(declare-const o74 Int)
(declare-const o75 Int)
(declare-const o76 Int)
(declare-const o77 Int)
(declare-const o78 Int)
(declare-const o79 Bool)
(declare-const o80 Int)
(declare-const o81 Int)
(declare-const o82 Int)
(declare-const result Int)
(declare-const l1 Int)
(declare-const a1 (Array Int integer))
(declare-const b1 (Array Int integer))
(declare-const i1 Int)
(declare-const l2 Int)
(declare-const k1 Int)
(declare-const result1 Bool)
(declare-const result2 Int)
(declare-const i2 Int)
(declare-const a2 (Array Int integer))
(declare-const b2 (Array Int integer))
(declare-const i3 Int)
(declare-const k2 Int)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Int)
(declare-const k3 Int)
(declare-const a3 (Array Int integer))
(declare-const b3 (Array Int integer))
(declare-const result7 Int)
(declare-const i4 Int)
(declare-const a4 (Array Int integer))
(declare-const b4 (Array Int integer))
(declare-const i5 Int)
(declare-const k4 Int)
(declare-const a5 (Array Int integer))
(declare-const b5 (Array Int integer))
(declare-const i6 Int)
(declare-const k5 Int)
(declare-const a6 (Array Int integer))
(declare-const b6 (Array Int integer))
(declare-const i7 Int)
(declare-const k6 Int)
(declare-const a7 (Array Int integer))
(declare-const b7 (Array Int integer))
(declare-const i8 Int)
(declare-const k7 Int)
(declare-const a8 (Array Int integer))
(declare-const b8 (Array Int integer))
(declare-const i9 Int)
(declare-const k8 Int)
(declare-const a9 (Array Int integer))
(declare-const b9 (Array Int integer))
(declare-const i10 Int)
(declare-const k9 Int)
(declare-const a10 map__ref)
(declare-const b10 map__ref)
(declare-const i11 int__ref)
(declare-const k10 int__ref)
(declare-const a11 (Array Int integer))
(declare-const b11 (Array Int integer))
(declare-const i12 Int)
(declare-const k11 Int)
(declare-const result8 Bool)
(declare-const result9 Bool)
(declare-const result10 int__ref)
(declare-const l3 Int)
(declare-const l4 int__ref)
(declare-const l5 Int)
(declare-const a12 map__ref)
(declare-const b12 map__ref)
(declare-const i13 int__ref)
(declare-const l6 int__ref)
(declare-const k12 int__ref)
(declare-const a13 (Array Int integer))
(declare-const b13 (Array Int integer))
(declare-const i14 Int)
(declare-const l7 Int)
(declare-const k13 Int)
(declare-const a14 map__ref)
(declare-const b14 map__ref)
(declare-const i15 int__ref)
(declare-const l8 int__ref)
(declare-const k14 int__ref)
(declare-const a15 (Array Int integer))
(declare-const b15 (Array Int integer))
(declare-const i16 Int)
(declare-const l9 Int)
(declare-const k15 Int)
(declare-const a16 map__ref)
(declare-const b16 map__ref)
(declare-const i17 int__ref)
(declare-const l10 int__ref)
(declare-const k16 int__ref)
(declare-const a17 (Array Int integer))
(declare-const b17 (Array Int integer))
(declare-const i18 Int)
(declare-const l11 Int)
(declare-const k17 Int)
(declare-const a18 map__ref)
(declare-const b18 map__ref)
(declare-const i19 int__ref)
(declare-const l12 int__ref)
(declare-const k18 int__ref)
(declare-const a19 (Array Int integer))
(declare-const b19 (Array Int integer))
(declare-const i20 Int)
(declare-const l13 Int)
(declare-const k19 Int)
(declare-const a20 map__ref)
(declare-const b20 map__ref)
(declare-const i21 int__ref)
(declare-const l14 int__ref)
(declare-const k20 int__ref)
(declare-const a21 (Array Int integer))
(declare-const b21 (Array Int integer))
(declare-const i22 Int)
(declare-const l15 Int)
(declare-const k21 Int)
(assert (dynamic_property 0 2147483647 (to_rep a__first) (to_rep a__last)))
(assert (in_range2 a_first))
(assert (in_range2 length1))
(assert (dynamic_property 0 2147483647 (to_rep b__first) (to_rep b__last)))
(assert (and (and (<= (to_rep a__first) a_first) (<= (+ a_first length1) (+ (to_rep a__last) 1))) (<= length1 (ite (<= (to_rep b__first) (to_rep b__last)) (+ (- (to_rep b__last) (to_rep b__first)) 1) 0))))
(assert (=> (<= 0 2147483647) (in_range2 i)))
(assert (=> (<= 0 2147483647) (in_range2 l)))
(assert (=> (<= 0 2147483647) (in_range2 k)))
(assert (= (mk_int__ref result) (mk_int__ref l)))
(assert (= l1 1))
(assert (and (and (forall ((j4 Int)) (=> (and (<= 0 j4) (<= j4 2147483647)) (=> (< (* j4 l2) length1) (= (sorted (mk___t a1 (mk (to_rep a__first) (to_rep a__last))) (+ a_first (* j4 l2)) (ite (< l2 (- length1 (* j4 l2))) l2 (- length1 (* j4 l2)))) true)))) (= (perm (mk___t a (mk (to_rep a__first) (to_rep a__last))) (mk___t a1 (mk (to_rep a__first) (to_rep a__last))) a_first length1) true)) (<= 1 l2)))
(assert (and (and (=> (<= 0 2147483647) (in_range2 i1)) (=> (<= 0 2147483647) (in_range2 l2))) (=> (<= 0 2147483647) (in_range2 k1))))
(assert (= i1 result2))
(assert (= i2 0))
(assert (and (and (= temp___217 k1) (and (= temp___216 a1) (and (= temp___214 i2) (and (= temp___213 b1) (and (and (and (and (and (and (<= i3 length1) (=> (< i3 length1) (= (mod2 i3 (* l2 2)) 0))) (forall ((j4 Int)) (=> (and (<= 0 j4) (<= j4 2147483647)) (=> (< (* (* j4 l2) 2) i3) (= (sorted (mk___t a2 (mk (to_rep a__first) (to_rep a__last))) (+ a_first (* (* j4 l2) 2)) (ite (< (* l2 2) (- length1 (* (* j4 l2) 2))) (* l2 2) (- length1 (* (* j4 l2) 2)))) true))))) (forall ((j4 Int)) (=> (and (<= 0 j4) (<= j4 2147483647)) (=> (< (* j4 l2) (- length1 i3)) (= (sorted (mk___t a2 (mk (to_rep a__first) (to_rep a__last))) (+ (+ a_first i3) (* j4 l2)) (ite (< l2 (- (- length1 i3) (* j4 l2))) l2 (- (- length1 i3) (* j4 l2)))) true))))) (= (perm (mk___t a (mk (to_rep a__first) (to_rep a__last))) (mk___t a2 (mk (to_rep a__first) (to_rep a__last))) a_first length1) true)) (<= 1 l2)) (and (and (=> (<= 0 2147483647) (in_range2 i3)) (=> (<= 0 2147483647) (in_range2 k2))) (and (and (and (= k2 k4) (and (= i3 i5) (and (= b2 b4) (= a2 a4)))) (and (= k5 k2) (and (= i6 i3) (and (= b5 b2) (= a5 a2))))) (and (and (and (and (= o51 (- length1 l2)) (in_range1 (- length1 l2))) (= o52 (ite (< i3 o51) true false))) (= result5 (ite (not (= o52 true)) true false))) (= result5 true))))))))) (and (and (= (mk_int__ref k8) (mk_int__ref k4)) (and (= (mk_int__ref i9) (mk_int__ref i5)) (and (= (mk_map__ref b8) (mk_map__ref b4)) (= (mk_map__ref a8) (mk_map__ref a4))))) (and (= k9 k5) (and (= i10 i6) (and (= b9 b5) (= a9 a5)))))))
(assert (= k10 (mk_int__ref k8)))
(assert (= i11 (mk_int__ref i9)))
(assert (= b10 (mk_map__ref b8)))
(assert (= a10 (mk_map__ref a8)))
(assert (= k11 k9))
(assert (= i12 i10))
(assert (= b11 b9))
(assert (= a11 a9))
(assert (= o79 (perm (mk___t a (mk (to_rep a__first) (to_rep a__last))) (mk___t (map__content a10) (mk (to_rep a__first) (to_rep a__last))) a_first length1)))
(assert (<= 0 j3))
(assert (<= j3 2147483647))
(assert (not (in_range1 (* j3 l2))))
(check-sat)
(exit)
