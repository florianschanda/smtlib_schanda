(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range3 temp___expr_39)))
(declare-sort index 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index index) Bool)
(declare-const dummy3 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun all_elements_in ((Array Int integer) Int) Bool)
(declare-fun all_elements_in__function_guard (Bool (Array Int integer) Int) Bool)
(assert true)
(assert (forall ((a (Array Int integer))) (forall ((max Int)) (! (= (= (all_elements_in a max) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (and (<= (- max) (to_rep (select a k))) (<= (to_rep (select a k)) max))))) :pattern ((all_elements_in a max))))))
(declare-fun all_left_elements_in ((Array Int integer) Int Int) Bool)
(declare-fun all_left_elements_in__function_guard (Bool (Array Int integer) Int Int) Bool)
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(assert true)
(assert (forall ((a (Array Int integer))) (forall ((right Int) (max Int)) (! (= (= (all_left_elements_in a right max) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (=> (< k right) (and (<= (- max) (to_rep (select a k))) (<= (to_rep (select a k)) max)))))) :pattern ((all_left_elements_in a right max))))))
(declare-fun all_right_elements_in ((Array Int integer) Int Int) Bool)
(declare-fun all_right_elements_in__function_guard (Bool (Array Int integer) Int Int) Bool)
(assert true)
(assert (forall ((a (Array Int integer))) (forall ((left Int) (max Int)) (! (= (= (all_right_elements_in a left max) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (=> (< left k) (and (<= (- max) (to_rep (select a k))) (<= (to_rep (select a k)) max)))))) :pattern ((all_right_elements_in a left max))))))
(declare-fun intermediate_form ((Array Int integer) (Array Int integer)) Bool)
(declare-fun intermediate_form__function_guard (Bool (Array Int integer) (Array Int integer)) Bool)
(assert true)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (! (= (= (intermediate_form a b) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (= (mod2 (+ k 1) 8) 0) (= (to_rep (select a k)) (+ (+ (+ (+ (+ (+ (+ (to_rep (select b 0)) (to_rep (select b 1))) (to_rep (select b 2))) (to_rep (select b 3))) (to_rep (select b 4))) (to_rep (select b 5))) (to_rep (select b 6))) (to_rep (select b 7)))) (ite (= (mod2 (+ k 1) 4) 0) (= (to_rep (select a k)) (+ (+ (+ (to_rep (select b k)) (to_rep (select b (- k 1)))) (to_rep (select b (- k 2)))) (to_rep (select b (- k 3))))) (ite (= (mod2 (+ k 1) 2) 0) (= (to_rep (select a k)) (+ (to_rep (select b k)) (to_rep (select b (- k 1))))) (= (to_rep (select a k)) (to_rep (select b k))))))))) :pattern ((intermediate_form a b)))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant3 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 0 7)) (in_range4 temp___expr_136)))
(declare-const a (Array Int integer))
(declare-const output_space Int)
(declare-const space Int)
(declare-const left Int)
(declare-const right Int)
(declare-const temp___188 (Array Int integer))
(declare-const temp___194 (Array Int integer))
(declare-const temp___187 (Array Int integer))
(declare-const temp___202 (Array Int integer))
(declare-const temp___186 (Array Int integer))
(declare-const temp___201 (Array Int integer))
(declare-const temp___193 (Array Int integer))
(declare-const temp___185 Int)
(declare-const temp___183 (Array Int integer))
(declare-const temp___192 (Array Int integer))
(declare-const temp___182 Int)
(declare-const temp___199 (Array Int integer))
(declare-const temp___191 (Array Int integer))
(declare-const temp___190 (Array Int integer))
(declare-const temp___197 (Array Int integer))
(declare-const temp___181 Int)
(declare-const temp___189 (Array Int integer))
(declare-const temp___204 (Array Int integer))
(declare-const temp___195 (Array Int integer))
(declare-const temp___205 Int)
(declare-const k Int)
(declare-const o Int)
(declare-const o1 integer)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 integer)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Bool)
(declare-const temp___179 (Array Int integer))
(declare-const temp___175 Int)
(declare-const temp___173 (Array Int integer))
(declare-const temp___177 (Array Int integer))
(declare-const temp___172 Int)
(declare-const temp___176 (Array Int integer))
(declare-const temp___180 Int)
(declare-const k1 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Bool)
(declare-const o11 Bool)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 integer)
(declare-const o15 Int)
(declare-const o16 integer)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 integer)
(declare-const o22 Int)
(declare-const o23 (Array Int integer))
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const a1 (Array Int integer))
(declare-const left1 Int)
(declare-const right1 Int)
(declare-const result Int)
(declare-const space1 Int)
(declare-const a2 (Array Int integer))
(declare-const space2 Int)
(declare-const left2 Int)
(declare-const right2 Int)
(declare-const temp___2051 Int)
(declare-const rho Int)
(declare-const result1 Bool)
(declare-const result2 Int)
(declare-const temp___2052 Int)
(declare-const result3 Int)
(declare-const left3 Int)
(declare-const a3 (Array Int integer))
(declare-const left4 Int)
(declare-const right3 Int)
(declare-const temp___1801 Int)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const result7 Bool)
(declare-const result8 Int)
(declare-const temp___1802 Int)
(declare-const result9 Int)
(declare-const right4 Int)
(declare-const result10 (Array Int integer))
(declare-const a4 (Array Int integer))
(declare-const result11 Int)
(declare-const left5 Int)
(declare-const a5 (Array Int integer))
(declare-const left6 Int)
(declare-const right5 Int)
(declare-const temp___1803 Int)
(declare-const a6 (Array Int integer))
(declare-const left7 Int)
(declare-const right6 Int)
(declare-const temp___1804 Int)
(declare-const a7 (Array Int integer))
(declare-const left8 Int)
(declare-const right7 Int)
(declare-const a8 (Array Int integer))
(declare-const left9 Int)
(declare-const right8 Int)
(declare-const rho1 Int)
(declare-const a9 map__ref)
(declare-const left10 int__ref)
(declare-const right9 int__ref)
(declare-const a10 (Array Int integer))
(declare-const left11 Int)
(declare-const right10 Int)
(declare-const rho2 Int)
(declare-const result12 int__ref)
(declare-const space3 Int)
(declare-const a11 map__ref)
(declare-const space4 int__ref)
(declare-const left12 int__ref)
(declare-const right11 int__ref)
(declare-const temp___2053 int__ref)
(declare-const a12 (Array Int integer))
(declare-const space5 Int)
(declare-const left13 Int)
(declare-const right12 Int)
(declare-const temp___2054 Int)
(declare-const rho3 Int)
(declare-const a13 map__ref)
(declare-const space6 int__ref)
(declare-const left14 int__ref)
(declare-const right13 int__ref)
(declare-const temp___2055 int__ref)
(declare-const a14 (Array Int integer))
(declare-const space7 Int)
(declare-const left15 Int)
(declare-const right14 Int)
(declare-const temp___2056 Int)
(declare-const a15 map__ref)
(declare-const space8 int__ref)
(declare-const left16 int__ref)
(declare-const right15 int__ref)
(declare-const a16 (Array Int integer))
(declare-const space9 Int)
(declare-const left17 Int)
(declare-const right16 Int)
(declare-const a17 map__ref)
(declare-const space10 int__ref)
(declare-const left18 int__ref)
(declare-const right17 int__ref)
(declare-const a18 (Array Int integer))
(declare-const space11 Int)
(declare-const left19 Int)
(declare-const right18 Int)
(declare-const result13 int__ref)
(declare-const output_space1 Int)
(declare-const a19 map__ref)
(declare-const output_space2 int__ref)
(declare-const space12 int__ref)
(declare-const left20 int__ref)
(declare-const right19 int__ref)
(declare-const a20 (Array Int integer))
(declare-const output_space3 Int)
(declare-const space13 Int)
(declare-const left21 Int)
(declare-const right20 Int)
(declare-const result14 Bool)
(assert (=> (<= 1 2147483647) (in_range3 output_space)))
(assert (= (all_elements_in a 1000000) true))
(assert (= (mk_int__ref result) (mk_int__ref space)))
(assert (= space1 1))
(assert (in_range3 space1))
(assert (=> (<= 0 2147483647) (in_range2 left)))
(assert (=> (<= 0 2147483647) (in_range2 right)))
(assert (< space1 8))
(assert (and (and (= (all_elements_in a2 (* space2 1000000)) true) (or (or (= space2 1) (= space2 2)) (= space2 4))) (forall ((k2 Int)) (=> (and (<= 0 k2) (<= k2 7)) (ite (and (= (mod2 (+ k2 1) 8) 0) (= space2 8)) (= (to_rep (select a2 k2)) (+ (+ (+ (+ (+ (+ (+ (to_rep (select a 0)) (to_rep (select a 1))) (to_rep (select a 2))) (to_rep (select a 3))) (to_rep (select a 4))) (to_rep (select a 5))) (to_rep (select a 6))) (to_rep (select a 7)))) (ite (and (= (mod2 (+ k2 1) 4) 0) (<= 4 space2)) (= (to_rep (select a2 k2)) (+ (+ (+ (to_rep (select a k2)) (to_rep (select a (- k2 1)))) (to_rep (select a (- k2 2)))) (to_rep (select a (- k2 3))))) (ite (and (= (mod2 (+ k2 1) 2) 0) (<= 2 space2)) (= (to_rep (select a2 k2)) (+ (to_rep (select a k2)) (to_rep (select a (- k2 1))))) (= (to_rep (select a2 k2)) (to_rep (select a k2))))))))))
(assert (and (and (and (=> (<= 1 2147483647) (in_range3 space2)) (=> (<= 0 2147483647) (in_range2 left2))) (=> (<= 0 2147483647) (in_range2 right2))) (< space2 8)))
(assert (= temp___2051 result2))
(assert (= temp___2052 space2))
(assert (= left2 result3))
(assert (= left3 (- space2 1)))
(assert (< left3 8))
(assert (and (and (and (and (and (= (mod2 (+ left4 1) space2) 0) (= (all_left_elements_in a3 left4 (* (* space2 2) 1000000)) true)) (= (all_right_elements_in a3 (- left4 1) (* space2 1000000)) true)) (= (mod2 (+ left4 1) (* space2 2)) space2)) (=> (<= 8 left4) (or (= left4 8) (= left4 9)))) (forall ((k2 Int)) (=> (and (<= 0 k2) (<= k2 7)) (ite (and (and (<= 0 k2) (<= k2 (- left4 space2))) (= (mod2 (+ k2 1) (* 2 space2)) 0)) (= (to_rep (select a3 k2)) (+ (to_rep (select a2 k2)) (to_rep (select a2 (- k2 space2))))) (= (to_rep (select a3 k2)) (to_rep (select a2 k2))))))))
(assert (and (and (=> (<= 0 2147483647) (in_range2 left4)) (=> (<= 0 2147483647) (in_range2 right3))) (< left4 8)))
(assert (=> (= (mod2 (+ left4 1) space2) 0) (and (= o9 (* (* space2 2) 1000000)) (in_range3 (* (* space2 2) 1000000)))))
(assert (=> (= (mod2 (+ left4 1) space2) 0) (and (= result6 (all_left_elements_in a3 left4 o9)) (= (= result6 true) (forall ((k2 Int)) (=> (and (<= 0 k2) (<= k2 7)) (=> (< k2 left4) (and (<= (- o9) (to_rep (select a3 k2))) (<= (to_rep (select a3 k2)) o9)))))))))
(assert (=> (not (= (mod2 (+ left4 1) space2) 0)) (= result6 false)))
(assert (= result6 true))
(assert (not (in_range3 (* space2 1000000))))
(check-sat)
(exit)
