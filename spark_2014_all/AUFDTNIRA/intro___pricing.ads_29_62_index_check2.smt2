(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-fun add (Int Int) Int)
(declare-fun add__function_guard (Int Int Int) Bool)
(declare-sort my_int 0)
(declare-fun my_intqtint (my_int) Int)
(assert (forall ((i my_int)) (and (<= 0 (my_intqtint i)) (<= (my_intqtint i) 10000))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (my_int my_int) Bool)
(declare-const dummy2 my_int)
(declare-datatypes () ((my_int__ref (mk_my_int__ref (my_int__content my_int)))))
(define-fun my_int__ref___projection ((a my_int__ref)) my_int (my_int__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 10000)) (in_range3 temp___expr_159)))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (let ((result (add x y))) (and (ite (< (+ x y) 10000) (= result (+ x y)) (=> (<= 10000 (+ x y)) (= result 10000))) (dynamic_invariant result true false true true)))) :pattern ((add x y)))))
(define-fun to_rep ((x my_int)) Int (my_intqtint x))
(declare-fun of_rep (Int) my_int)
(assert (forall ((x my_int)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x my_int)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__pricing__item__price my_int) (rec__pricing__item__number my_int)))))
(define-fun us_split_fields_Price__projection ((a us_split_fields)) my_int (rec__pricing__item__price a))
(define-fun us_split_fields_Number__projection ((a us_split_fields)) my_int (rec__pricing__item__number a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__pricing__item__price (us_split_fields1 a))) (to_rep (rec__pricing__item__price (us_split_fields1 b)))) (= (to_rep (rec__pricing__item__number (us_split_fields1 a))) (to_rep (rec__pricing__item__number (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const pricing__item__price__first__bit Int)
(declare-const pricing__item__price__last__bit Int)
(declare-const pricing__item__price__position Int)
(assert (<= 0 pricing__item__price__first__bit))
(assert (< pricing__item__price__first__bit pricing__item__price__last__bit))
(assert (<= 0 pricing__item__price__position))
(declare-const pricing__item__number__first__bit Int)
(declare-const pricing__item__number__last__bit Int)
(declare-const pricing__item__number__position Int)
(assert (<= 0 pricing__item__number__first__bit))
(assert (< pricing__item__number__first__bit pricing__item__number__last__bit))
(assert (<= 0 pricing__item__number__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((item__ref (mk_item__ref (item__content us_rep)))))
(define-fun item__ref___projection ((a item__ref)) us_rep (item__content a))
(declare-fun price_of_item (us_rep) Int)
(declare-fun price_of_item__function_guard (Int us_rep) Bool)
(declare-fun mult (Int Int) Int)
(declare-fun mult__function_guard (Int Int Int) Bool)
(assert (forall ((it us_rep)) (! (let ((result (price_of_item it))) (and (= result (mult (to_rep (rec__pricing__item__price (us_split_fields1 it))) (to_rep (rec__pricing__item__number (us_split_fields1 it))))) (dynamic_invariant result true false true true))) :pattern ((price_of_item it)))))
(assert (forall ((it us_rep)) (! (= (price_of_item it) (mult (to_rep (rec__pricing__item__price (us_split_fields1 it))) (to_rep (rec__pricing__item__number (us_split_fields1 it))))) :pattern ((price_of_item it)))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int us_rep)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int us_rep) (elts a))
(define-fun of_array ((a (Array Int us_rep)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int us_rep)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int us_rep)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((basket__ref (mk_basket__ref (basket__content us_t)))))
(define-fun basket__ref___projection ((a basket__ref)) us_t (basket__content a))
(define-fun dynamic_invariant1 ((temp___expr_175 us_t) (temp___is_init_171 Bool) (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool) (temp___do_typ_inv_174 Bool)) Bool (=> (not (= temp___skip_constant_172 true)) (dynamic_property 1 2147483647 (first1 temp___expr_175) (last1 temp___expr_175))))
(declare-const bk us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (integer integer) Bool)
(declare-const dummy5 integer)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content integer)))))
(define-fun t3b__ref___projection ((a t3b__ref)) integer (t3b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(assert (forall ((x Int) (y Int)) (! (=> (and (dynamic_invariant x true true true true) (dynamic_invariant y true true true true)) (let ((result (mult x y))) (and (ite (< (* x y) 10000) (= result (* x y)) (=> (<= 10000 (* x y)) (= result 10000))) (dynamic_invariant result true false true true)))) :pattern ((mult x y)))))
(declare-const total Int)
(declare-const it Int)
(declare-const pricing__price_of_basket__result Int)
(declare-const temp___194 Int)
(declare-const temp___193 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const it1 Int)
(declare-const result Int)
(declare-const total1 Int)
(declare-const result1 Int)
(declare-const it2 Int)
(declare-const total2 Int)
(declare-const it3 Int)
(declare-const result2 Int)
(declare-const total3 Int)
(declare-const total4 Int)
(declare-const it4 Int)
(declare-const total5 Int)
(declare-const it5 Int)
(declare-const total6 Int)
(declare-const it6 Int)
(declare-const total7 Int)
(declare-const it7 Int)
(declare-const result3 Int)
(declare-const pricing__price_of_basket__result1 Int)
(declare-const pricing__price_of_basket__result2 Int)
(declare-const pricing__price_of_basket__result3 Int)
(declare-const total8 Int)
(declare-const it8 Int)
(declare-const pricing__price_of_basket__result4 Int)
(declare-const total9 Int)
(declare-const it9 Int)
(declare-const pricing__price_of_basket__result5 Int)
(define-fun it10 () int__ref (mk_int__ref it6))
(define-fun total10 () int__ref (mk_int__ref total6))
(assert (dynamic_invariant1 bk true false true true))
(assert (= (mk_int__ref result) (mk_int__ref total)))
(assert (= total1 0))
(assert (in_range3 total1))
(assert (= (mk_int__ref result1) (mk_int__ref it)))
(assert (= it2 (to_rep1 (first (rt bk)))))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= temp___194 it2)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= temp___193 total1)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (forall ((k Int)) (=> (and (<= (to_rep1 (first (rt bk))) k) (<= k (- it3 1))) (<= (price_of_item (select (elts bk) k)) total2)))))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (and (and (=> (<= 0 10000) (in_range3 total2)) (=> (<= (to_rep1 (first (rt bk))) (to_rep1 (last (rt bk)))) (dynamic_property1 (to_rep1 (first (rt bk))) (to_rep1 (last (rt bk))) it3))) (and (<= (to_rep1 (first (rt bk))) it3) (<= it3 (to_rep1 (last (rt bk))))))))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (and (= o (price_of_item (select (elts bk) it3))) (and (in_range3 o) (= o (mult (to_rep (rec__pricing__item__price (us_split_fields1 (select (elts bk) it3)))) (to_rep (rec__pricing__item__number (us_split_fields1 (select (elts bk) it3))))))))))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (and (= o1 (add total2 o)) (and (in_range3 o1) (ite (= (< (+ total2 o) 10000) true) (= o1 (+ total2 o)) (=> (= (>= (+ total2 o) 10000) true) (= o1 10000)))))))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= total2 result2)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= total3 o1)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= it3 (to_rep1 (last (rt bk))))))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= it3 it4)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= total3 total4)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= it5 it3)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= total5 total3)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= it10 (mk_int__ref it4))))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= total10 (mk_int__ref total4))))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= it7 it5)))
(assert (=> (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk))))) (= total7 total5)))
(assert (=> (not (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk)))))) (= it2 it6)))
(assert (=> (not (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk)))))) (= total1 total6)))
(assert (=> (not (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk)))))) (= it7 it2)))
(assert (=> (not (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk)))))) (= total7 total1)))
(assert (= pricing__price_of_basket__result1 pricing__price_of_basket__result2))
(assert (= pricing__price_of_basket__result3 pricing__price_of_basket__result1))
(assert (= (mk_int__ref result3) (mk_int__ref pricing__price_of_basket__result)))
(assert (= pricing__price_of_basket__result1 total6))
(assert (= (mk_int__ref pricing__price_of_basket__result4) (mk_int__ref pricing__price_of_basket__result2)))
(assert (= (mk_int__ref it8) it10))
(assert (= (mk_int__ref total8) total10))
(assert (= pricing__price_of_basket__result5 pricing__price_of_basket__result3))
(assert (= it9 it7))
(assert (= total9 total7))
(assert (<= (to_rep1 (first (rt bk))) it1))
(assert (<= it1 (to_rep1 (last (rt bk)))))
(assert (not (<= (to_rep1 (first (rt bk))) it1)))
(check-sat)
(exit)
