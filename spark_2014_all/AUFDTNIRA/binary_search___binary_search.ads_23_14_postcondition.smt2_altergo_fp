(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type u

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : u, u -> bool

logic dummy1 : u

type u__ref = { u__content : u
}

function u__ref___projection(a: u__ref) : u = (a).u__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic a : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "binary_search.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall left:int. forall right:int. forall med:int.
  forall binary_search__search__result:int. forall temp___183:int.
  forall temp___182:int. forall temp___181:int. forall temp___184:int.
  forall o:int. forall o1:int. forall o2:int. forall med1:int.
  forall binary_search__search__result1:int. forall result:int.
  forall left1:int. forall result1:int. forall right1:int.
  forall result2:int. forall binary_search__search__result2:int.
  forall left2:int. forall right2:int. forall med2:int.
  forall binary_search__search__result3:int. forall temp___1841:int.
  forall result3:int. forall temp___1842:int. forall result4:int.
  forall med3:int. forall result5:int. forall left3:int. forall result6:int.
  forall right3:int. forall result7:int.
  forall binary_search__search__result4:int. forall left4:int.
  forall right4:int. forall med4:int.
  forall binary_search__search__result5:int. forall left5:int.
  forall right5:int. forall med5:int.
  forall binary_search__search__result6:int. forall left6:int.
  forall right6:int. forall med6:int.
  forall binary_search__search__result7:int. forall left7:int.
  forall right7:int. forall med7:int.
  forall binary_search__search__result8:int. forall result8:int.
  forall binary_search__search__result9:int.
  forall binary_search__search__result10:int.
  forall binary_search__search__result11:int. forall left8:int.
  forall right8:int. forall med8:int.
  forall binary_search__search__result12:int. forall left9:int.
  forall right9:int. forall med9:int.
  forall binary_search__search__result13:int. forall left10:int.
  forall right10:int. forall med10:int.
  forall binary_search__search__result14:int. forall left11:int.
  forall right11:int. forall med11:int.
  forall binary_search__search__result15:int. forall left12:int.
  forall right12:int. forall med12:int.
  forall binary_search__search__result16:int. forall left13:int.
  forall right13:int. forall med13:int.
  forall binary_search__search__result17:int.
  (forall result9:int. ((in_range1(i) and
  ((forall i1:int. (((1 <= i1) and (i1 <= 10)) ->
   (forall i2:int. (((i1 <= i2) and (i2 <= 10)) ->
   (to_rep((a[i1])) <= to_rep((a[i2]))))))) and
  (((((1 <= 10) -> in_range2(left)) and (((1 <= 10) -> in_range2(right)) and
  (((1 <= 10) -> in_range2(med)) and ((({ int__content = result } = {
  int__content = left }) and (left1 = 1)) and ((({ int__content = result1
  } = { int__content = right }) and (right1 = 10)) and
  (((((binary_search__search__result2 = binary_search__search__result14) and
  (({ int__content = med10 } = { int__content = med }) and
  ((right1 = right10) and (left1 = left10)))) and
  ((binary_search__search__result15 = binary_search__search__result2) and
  ((med11 = med1) and ((right11 = right1) and (left11 = left1))))) and
  (((i <  to_rep((a[left1]))) or (to_rep((a[right1])) <  i)) and (({
  int__content = result2 } = { int__content = binary_search__search__result
  }) and (binary_search__search__result2 = 0)))) or
  (((not ((i <  to_rep((a[left1]))) or (to_rep((a[right1])) <  i))) and
  ((binary_search__search__result2 = binary_search__search__result) and
  (binary_search__search__result2 = binary_search__search__result1))) and
  (((({ int__content = binary_search__search__result14 } = { int__content =
  binary_search__search__result12 }) and (({ int__content = med10 } = {
  int__content = med8 }) and (({ int__content = right10 } = { int__content =
  right8 }) and ({ int__content = left10 } = { int__content = left8 })))) and
  ((binary_search__search__result15 = binary_search__search__result13) and
  ((med11 = med9) and ((right11 = right9) and (left11 = left9))))) and
  (((((binary_search__search__result4 = binary_search__search__result12) and
  ((med3 = med8) and ((right2 = right8) and (left2 = left8)))) and
  ((binary_search__search__result13 = binary_search__search__result4) and
  ((med9 = med3) and ((right9 = right2) and (left9 = left2))))) and
  ((left1 <= right1) and ((temp___183 = med) and ((temp___182 = right1) and
  ((temp___181 = left1) and ((0 = temp___184) and
  (((forall index:int. (((1 <= index) and (index <= (left2 - 1))) ->
    (to_rep((a[index])) <  i))) and
  (forall index:int. ((((right2 + 1) <= index) and (index <= 10)) ->
  (i <  to_rep((a[index])))))) and ((((((1 <= 10) -> in_range2(left2)) and
  ((1 <= 10) -> in_range2(right2))) and ((1 <= 10) -> in_range2(med2))) and
  (left2 <= right2)) and (((temp___1841 = result3) and
  (temp___1842 = (right2 - left2))) and
  ((((o = (left2 + comp_div((right2 - left2),2))) and
  in_range2((left2 + comp_div((right2 - left2),2)))) and
  ((med2 = result4) and (med3 = o))) and ((not (to_rep((a[med3])) <  i)) and
  ((not (i <  to_rep((a[med3])))) and
  ((binary_search__search__result3 = result7) and
  (binary_search__search__result4 = med3)))))))))))))) or
  ((((left1 <= right1) and ((((temp___183 = med) and
  ((temp___182 = right1) and ((temp___181 = left1) and ((0 = temp___184) and
  (((forall index:int. (((1 <= index) and (index <= (left2 - 1))) ->
    (to_rep((a[index])) <  i))) and
  (forall index:int. ((((right2 + 1) <= index) and (index <= 10)) ->
  (i <  to_rep((a[index])))))) and ((((((1 <= 10) -> in_range2(left2)) and
  ((1 <= 10) -> in_range2(right2))) and ((1 <= 10) -> in_range2(med2))) and
  (left2 <= right2)) and (((temp___1841 = result3) and
  (temp___1842 = (right2 - left2))) and
  ((((o = (left2 + comp_div((right2 - left2),2))) and
  in_range2((left2 + comp_div((right2 - left2),2)))) and
  ((med2 = result4) and (med3 = o))) and ((((to_rep((a[med3])) <  i) and
  ((((o1 = (med3 + 1)) and in_range2((med3 + 1))) and ((left2 = result5) and
  (left3 = o1))) and
  ((binary_search__search__result4 = binary_search__search__result3) and
  (right3 = right2)))) or ((not (to_rep((a[med3])) <  i)) and
  (((i <  to_rep((a[med3]))) and ((((o2 = (med3 - 1)) and
  in_range2((med3 - 1))) and ((right2 = result6) and (right3 = o2))) and
  (binary_search__search__result4 = binary_search__search__result3))) and
  (left3 = left2)))) and (not (left3 <= right3))))))))))) and
  (((binary_search__search__result4 = binary_search__search__result5) and
  ((med3 = med4) and ((right3 = right4) and (left3 = left4)))) and
  ((binary_search__search__result6 = binary_search__search__result4) and
  ((med5 = med3) and ((right5 = right3) and (left5 = left3)))))) and ((({
  int__content = binary_search__search__result7 } = { int__content =
  binary_search__search__result5 }) and (({ int__content = med6 } = {
  int__content = med4 }) and (({ int__content = right6 } = { int__content =
  right4 }) and ({ int__content = left6 } = { int__content = left4 })))) and
  ((binary_search__search__result8 = binary_search__search__result6) and
  ((med7 = med5) and ((right7 = right5) and (left7 = left5))))))) or
  ((not (left1 <= right1)) and
  (((binary_search__search__result2 = binary_search__search__result7) and (({
  int__content = med6 } = { int__content = med }) and ((right1 = right6) and
  (left1 = left6)))) and
  ((binary_search__search__result8 = binary_search__search__result2) and
  ((med7 = med1) and ((right7 = right1) and (left7 = left1))))))) and (((({
  int__content = binary_search__search__result12 } = { int__content =
  binary_search__search__result10 }) and (({ int__content = med8 } = {
  int__content = med6 }) and (({ int__content = right8 } = { int__content =
  right6 }) and ({ int__content = left8 } = { int__content = left6 })))) and
  ((binary_search__search__result13 = binary_search__search__result11) and
  ((med9 = med7) and ((right9 = right7) and (left9 = left7))))) and
  (((binary_search__search__result9 = binary_search__search__result10) and
  (binary_search__search__result11 = binary_search__search__result9)) and
  ((result8 = binary_search__search__result7) and
  (binary_search__search__result9 = 0)))))))))))))) and ((({ int__content =
  binary_search__search__result16 } = { int__content =
  binary_search__search__result14 }) and ((med12 = med10) and
  ((right12 = right10) and (left12 = left10)))) and
  ((binary_search__search__result17 = binary_search__search__result15) and
  ((med13 = med11) and ((right13 = right11) and (left13 = left11)))))) and
  (result9 = binary_search__search__result16)))) ->
  (((1 <= binary_search__search__result16) and
  (binary_search__search__result16 <= 10)) ->
  (to_rep((a[binary_search__search__result16])) = i)))))
