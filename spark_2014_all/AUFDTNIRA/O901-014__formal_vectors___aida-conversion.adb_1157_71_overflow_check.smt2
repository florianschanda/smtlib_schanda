(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant1 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(declare-fun is_digit (Int) Bool)
(declare-fun is_digit__function_guard (Bool Int) Bool)
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(assert (forall ((c Int)) (! (=> (dynamic_invariant2 c true true true) (let ((result (is_digit c))) (ite (= c 48) (= result true) (ite (= c 49) (= result true) (ite (= c 50) (= result true) (ite (= c 51) (= result true) (ite (= c 52) (= result true) (ite (= c 53) (= result true) (ite (= c 54) (= result true) (ite (= c 55) (= result true) (ite (= c 56) (= result true) (ite (= c 57) (= result true) (ite (< 57 c) (not (= result true)) (=> (< c 48) (not (= result true)))))))))))))))) :pattern ((is_digit c)))))
(declare-fun convert_character_digit_to_integer (Int) Int)
(declare-fun convert_character_digit_to_integer__function_guard (Int Int) Bool)
(assert (forall ((source Int)) (! (=> (and (dynamic_invariant2 source true true true) (= (is_digit source) true)) (let ((result (convert_character_digit_to_integer source))) (and (and (and (<= 0 result) (<= result 9)) (ite (= source 48) (= result 0) (ite (= source 49) (= result 1) (ite (= source 50) (= result 2) (ite (= source 51) (= result 3) (ite (= source 52) (= result 4) (ite (= source 53) (= result 5) (ite (= source 54) (= result 6) (ite (= source 55) (= result 7) (ite (= source 56) (= result 8) (=> (= source 57) (= result 9)))))))))))) (dynamic_invariant result true false true)))) :pattern ((convert_character_digit_to_integer source)))))
(declare-const source us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(declare-const target Int)
(declare-const has_failed Bool)
(declare-const index Int)
(declare-const o Int)
(declare-const o1 character)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const temp___1770 Int)
(declare-const o4 Int)
(declare-const o5 character)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const temp___1771 Int)
(declare-const o9 Int)
(declare-const o10 character)
(declare-const o11 Int)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const temp___1772 Int)
(declare-const o16 Int)
(declare-const o17 character)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const temp___1773 Int)
(declare-const o21 Int)
(declare-const o22 character)
(declare-const o23 Int)
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const o28 Int)
(declare-const temp___1774 Int)
(declare-const o29 Int)
(declare-const o30 character)
(declare-const o31 Int)
(declare-const o32 Int)
(declare-const o33 Int)
(declare-const o34 Int)
(declare-const o35 Int)
(declare-const o36 Int)
(declare-const o37 Int)
(declare-const temp___1775 Int)
(declare-const o38 Int)
(declare-const o39 character)
(declare-const o40 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const temp___1776 Int)
(declare-const o43 Int)
(declare-const o44 character)
(declare-const o45 Int)
(declare-const o46 Int)
(declare-const o47 Int)
(declare-const o48 Int)
(declare-const o49 Int)
(declare-const o50 Int)
(declare-const temp___1777 Int)
(declare-const o51 Int)
(declare-const o52 character)
(declare-const o53 Int)
(declare-const o54 Int)
(declare-const o55 Int)
(declare-const o56 Int)
(declare-const o57 Int)
(declare-const o58 Int)
(declare-const temp___1778 Int)
(declare-const o59 Int)
(declare-const o60 character)
(declare-const o61 Int)
(declare-const o62 Int)
(declare-const o63 Int)
(declare-const o64 Int)
(declare-const o65 Int)
(declare-const o66 Int)
(declare-const o67 Int)
(declare-const temp___1779 Int)
(declare-const o68 Int)
(declare-const o69 character)
(declare-const o70 Int)
(declare-const o71 Int)
(declare-const o72 Int)
(declare-const temp___1780 Int)
(declare-const o73 Int)
(declare-const o74 character)
(declare-const o75 Int)
(declare-const o76 Int)
(declare-const o77 Int)
(declare-const o78 Int)
(declare-const o79 Int)
(declare-const o80 Int)
(declare-const temp___1781 Int)
(declare-const o81 Int)
(declare-const o82 character)
(declare-const o83 Int)
(declare-const o84 Int)
(declare-const o85 Int)
(declare-const o86 Int)
(declare-const o87 Int)
(declare-const o88 Int)
(declare-const temp___1782 Int)
(declare-const o89 Int)
(declare-const o90 character)
(declare-const o91 Int)
(declare-const o92 Int)
(declare-const o93 Int)
(declare-const o94 Int)
(declare-const o95 Int)
(declare-const o96 Int)
(declare-const temp___1783 Int)
(declare-const o97 Int)
(declare-const o98 character)
(declare-const o99 Int)
(declare-const o100 Int)
(declare-const o101 Int)
(declare-const o102 Int)
(declare-const o103 Int)
(declare-const o104 Int)
(declare-const o105 Int)
(declare-const temp___1784 Int)
(declare-const o106 Int)
(declare-const o107 character)
(declare-const o108 Int)
(declare-const o109 Int)
(declare-const o110 Int)
(declare-const temp___1785 Int)
(declare-const o111 Int)
(declare-const o112 character)
(declare-const o113 Int)
(declare-const o114 Int)
(declare-const o115 Int)
(declare-const o116 Int)
(declare-const o117 Int)
(declare-const o118 Int)
(declare-const temp___1786 Int)
(declare-const o119 Int)
(declare-const o120 character)
(declare-const o121 Int)
(declare-const o122 Int)
(declare-const o123 Int)
(declare-const o124 Int)
(declare-const o125 Int)
(declare-const o126 Int)
(declare-const temp___1787 Int)
(declare-const o127 Int)
(declare-const o128 character)
(declare-const o129 Int)
(declare-const o130 Int)
(declare-const o131 Int)
(declare-const o132 Int)
(declare-const o133 Int)
(declare-const o134 Int)
(declare-const temp___1788 Int)
(declare-const o135 Int)
(declare-const o136 character)
(declare-const o137 Int)
(declare-const o138 Int)
(declare-const o139 Int)
(declare-const o140 Int)
(declare-const o141 Int)
(declare-const o142 Int)
(declare-const temp___1789 Int)
(declare-const o143 Int)
(declare-const o144 character)
(declare-const o145 Int)
(declare-const o146 Int)
(declare-const o147 Int)
(declare-const o148 Int)
(declare-const o149 Int)
(declare-const o150 Int)
(declare-const o151 Int)
(declare-const temp___1790 Int)
(declare-const o152 Int)
(declare-const o153 character)
(declare-const o154 Int)
(declare-const o155 Int)
(declare-const o156 Int)
(declare-const temp___1791 Int)
(declare-const o157 Int)
(declare-const o158 character)
(declare-const o159 Int)
(declare-const o160 Int)
(declare-const o161 Int)
(declare-const o162 Int)
(declare-const o163 Int)
(declare-const o164 Int)
(declare-const temp___1792 Int)
(declare-const o165 Int)
(declare-const o166 character)
(declare-const o167 Int)
(declare-const o168 Int)
(declare-const o169 Int)
(declare-const o170 Int)
(declare-const o171 Int)
(declare-const o172 Int)
(declare-const temp___1793 Int)
(declare-const o173 Int)
(declare-const o174 character)
(declare-const o175 Int)
(declare-const o176 Int)
(declare-const o177 Int)
(declare-const o178 Int)
(declare-const o179 Int)
(declare-const o180 Int)
(declare-const temp___1794 Int)
(declare-const o181 Int)
(declare-const o182 character)
(declare-const o183 Int)
(declare-const o184 Int)
(declare-const o185 Int)
(declare-const o186 Int)
(declare-const o187 Int)
(declare-const o188 Int)
(declare-const temp___1795 Int)
(declare-const o189 Int)
(declare-const o190 character)
(declare-const o191 Int)
(declare-const o192 Int)
(declare-const o193 Int)
(declare-const o194 Int)
(declare-const o195 Int)
(declare-const o196 Int)
(declare-const temp___1796 Int)
(declare-const o197 Int)
(declare-const o198 character)
(declare-const o199 Int)
(declare-const o200 Int)
(declare-const o201 Int)
(declare-const o202 Int)
(declare-const o203 Int)
(declare-const o204 Int)
(declare-const o205 Int)
(declare-const temp___1797 Int)
(declare-const o206 Int)
(declare-const o207 character)
(declare-const o208 Int)
(declare-const o209 Int)
(declare-const o210 Int)
(declare-const temp___1798 Int)
(declare-const o211 Int)
(declare-const o212 character)
(declare-const o213 Int)
(declare-const o214 Int)
(declare-const o215 Int)
(declare-const o216 Int)
(declare-const o217 Int)
(declare-const o218 Int)
(declare-const temp___1799 Int)
(declare-const o219 Int)
(declare-const o220 character)
(declare-const o221 Int)
(declare-const o222 Int)
(declare-const o223 Int)
(declare-const o224 Int)
(declare-const o225 Int)
(declare-const o226 Int)
(declare-const temp___1800 Int)
(declare-const o227 Int)
(declare-const o228 character)
(declare-const o229 Int)
(declare-const o230 Int)
(declare-const o231 Int)
(declare-const o232 Int)
(declare-const o233 Int)
(declare-const o234 Int)
(declare-const temp___1801 Int)
(declare-const o235 Int)
(declare-const o236 character)
(declare-const o237 Int)
(declare-const o238 Int)
(declare-const o239 Int)
(declare-const o240 Int)
(declare-const o241 Int)
(declare-const o242 Int)
(declare-const temp___1802 Int)
(declare-const o243 Int)
(declare-const o244 character)
(declare-const o245 Int)
(declare-const o246 Int)
(declare-const o247 Int)
(declare-const o248 Int)
(declare-const o249 Int)
(declare-const o250 Int)
(declare-const temp___1803 Int)
(declare-const o251 Int)
(declare-const o252 character)
(declare-const o253 Int)
(declare-const o254 Int)
(declare-const o255 Int)
(declare-const o256 Int)
(declare-const o257 Int)
(declare-const o258 Int)
(declare-const temp___1804 Int)
(declare-const o259 Int)
(declare-const o260 character)
(declare-const o261 Int)
(declare-const o262 Int)
(declare-const o263 Int)
(declare-const o264 Int)
(declare-const o265 Int)
(declare-const o266 Int)
(declare-const o267 Int)
(declare-const temp___1805 Int)
(declare-const o268 Int)
(declare-const o269 character)
(declare-const o270 Int)
(declare-const o271 Int)
(declare-const o272 Int)
(declare-const temp___1806 Int)
(declare-const o273 Int)
(declare-const o274 character)
(declare-const o275 Int)
(declare-const o276 Int)
(declare-const o277 Int)
(declare-const o278 Int)
(declare-const o279 Int)
(declare-const o280 Int)
(declare-const temp___1807 Int)
(declare-const o281 Int)
(declare-const o282 character)
(declare-const o283 Int)
(declare-const o284 Int)
(declare-const o285 Int)
(declare-const o286 Int)
(declare-const o287 Int)
(declare-const o288 Int)
(declare-const temp___1808 Int)
(declare-const o289 Int)
(declare-const o290 character)
(declare-const o291 Int)
(declare-const o292 Int)
(declare-const o293 Int)
(declare-const o294 Int)
(declare-const o295 Int)
(declare-const o296 Int)
(declare-const temp___1809 Int)
(declare-const o297 Int)
(declare-const o298 character)
(declare-const o299 Int)
(declare-const o300 Int)
(declare-const o301 Int)
(declare-const o302 Int)
(declare-const o303 Int)
(declare-const o304 Int)
(declare-const temp___1810 Int)
(declare-const o305 Int)
(declare-const o306 character)
(declare-const o307 Int)
(declare-const o308 Int)
(declare-const o309 Int)
(declare-const o310 Int)
(declare-const o311 Int)
(declare-const o312 Int)
(declare-const temp___1811 Int)
(declare-const o313 Int)
(declare-const o314 character)
(declare-const o315 Int)
(declare-const o316 Int)
(declare-const o317 Int)
(declare-const o318 Int)
(declare-const o319 Int)
(declare-const o320 Int)
(declare-const temp___1812 Int)
(declare-const o321 Int)
(declare-const o322 character)
(declare-const o323 Int)
(declare-const o324 Int)
(declare-const o325 Int)
(declare-const o326 Int)
(declare-const o327 Int)
(declare-const o328 Int)
(declare-const temp___1813 Int)
(declare-const o329 Int)
(declare-const o330 character)
(declare-const o331 Int)
(declare-const o332 Int)
(declare-const o333 Int)
(declare-const o334 Int)
(declare-const o335 Int)
(declare-const o336 Int)
(declare-const o337 Int)
(declare-const target1 Int)
(declare-const has_failed1 Bool)
(declare-const target2 Int)
(declare-const has_failed2 Bool)
(declare-const target3 Int)
(declare-const has_failed3 Bool)
(declare-const target4 Int)
(declare-const has_failed4 Bool)
(declare-const target5 Int)
(declare-const has_failed5 Bool)
(declare-const target6 Int)
(declare-const has_failed6 Bool)
(declare-const target7 Int)
(declare-const has_failed7 Bool)
(declare-const target8 Int)
(declare-const has_failed8 Bool)
(declare-const target9 Int)
(declare-const has_failed9 Bool)
(declare-const result Int)
(declare-const target10 Int)
(declare-const result1 Bool)
(declare-const has_failed10 Bool)
(declare-const target11 Int)
(declare-const has_failed11 Bool)
(declare-const target12 Int)
(declare-const has_failed12 Bool)
(assert (dynamic_invariant1 source true false true))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 target)))
(assert (and (and (< 0 (length source)) (< (length source) 10)) (forall ((index1 Int)) (=> (and (<= (to_rep1 (first (rt source))) index1) (<= index1 (to_rep1 (last (rt source))))) (= (is_digit (to_rep (select (elts source) index1))) true)))))
(assert (=> (= (length source) 1) (and (and (not (= has_failed1 true)) (= target1 (convert_character_digit_to_integer (to_rep (select (elts source) (to_rep1 (first (rt source)))))))) (in_range1 target1))))
(assert (=> (not (= (length source) 1)) (=> (= (length source) 2) (and (and (not (= has_failed2 true)) (= target2 (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10) (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1))))))) (in_range1 target2)))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (= (length source) 3) (and (and (not (= has_failed3 true)) (= target3 (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1)))) (in_range1 target3))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (= (length source) 4) (and (and (not (= has_failed4 true)) (= target4 (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 1000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1)))) (in_range1 target4)))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (= (length source) 5) (and (and (not (= has_failed5 true)) (= target5 (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1)))) (in_range1 target5))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (= (length source) 6) (and (and (not (= has_failed6 true)) (= target6 (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 1)))) (in_range1 target6)))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (= (length source) 7) (and (and (not (= has_failed7 true)) (= target7 (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 1000000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 1)))) (in_range1 target7))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (= (length source) 8) (and (and (not (= has_failed8 true)) (= target8 (+ (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10000000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 7)))) 1)))) (in_range1 target8)))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (= (length source) 9) (and (and (not (= has_failed9 true)) (= target9 (+ (+ (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100000000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10000000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1000000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 100000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 7)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 8)))) 1)))) (in_range1 target9))))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= (mk_int__ref result) (mk_int__ref target))))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= target10 0)))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= (mk_bool__ref result1) (mk_bool__ref has_failed))))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= has_failed10 (of_int 1))))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= has_failed9 has_failed10)))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (=> (not (= (length source) 9)) (= target9 target10)))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (= has_failed8 has_failed9))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (=> (not (= (length source) 8)) (= target8 target9))))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (= has_failed7 has_failed8)))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (=> (not (= (length source) 7)) (= target7 target8)))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (= has_failed6 has_failed7))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (=> (not (= (length source) 6)) (= target6 target7))))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (= has_failed5 has_failed6)))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (=> (not (= (length source) 5)) (= target5 target6)))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (= has_failed4 has_failed5))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (=> (not (= (length source) 4)) (= target4 target5))))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (= has_failed3 has_failed4)))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (=> (not (= (length source) 3)) (= target3 target4)))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (= has_failed2 has_failed3))))
(assert (=> (not (= (length source) 1)) (=> (not (= (length source) 2)) (= target2 target3))))
(assert (=> (not (= (length source) 1)) (= has_failed1 has_failed2)))
(assert (=> (not (= (length source) 1)) (= target1 target2)))
(assert (= has_failed1 has_failed11))
(assert (= target1 target11))
(assert (= has_failed12 has_failed1))
(assert (= target12 target1))
(assert (=> (= (= (length source) 1) true) (= target11 (convert_character_digit_to_integer (to_rep (select (elts source) (to_rep1 (first (rt source)))))))))
(assert (=> (= (= (length source) 2) true) (= target11 (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10) (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1))))))))
(assert (=> (= (= (length source) 3) true) (= target11 (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1)))))
(assert (=> (= (= (length source) 4) true) (= target11 (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 1000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1)))))
(assert (=> (= (= (length source) 5) true) (= target11 (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1)))))
(assert (=> (= (= (length source) 6) true) (= target11 (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 1)))))
(assert (=> (= (= (length source) 7) true) (= target11 (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 1000000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 1)))))
(assert (=> (= (= (length source) 8) true) (= target11 (+ (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10000000) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1000)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 100)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 10)) (* (convert_character_digit_to_integer (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 7)))) 1)))))
(assert (= (= (length source) 9) true))
(assert (and (= temp___1813 (+ (to_rep1 (first (rt source))) 8)) (in_range1 (+ (to_rep1 (first (rt source))) 8))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1813) (<= temp___1813 (to_rep1 (last (rt source))))))
(assert (= o329 temp___1813))
(assert (= o330 (select (elts source) o329)))
(assert (= o331 (to_rep o330)))
(assert (and (= o332 (convert_character_digit_to_integer o331)) (and (in_range1 o332) (and (and (<= 0 o332) (<= o332 9)) (ite (= (= o331 48) true) (= o332 0) (ite (= (= o331 49) true) (= o332 1) (ite (= (= o331 50) true) (= o332 2) (ite (= (= o331 51) true) (= o332 3) (ite (= (= o331 52) true) (= o332 4) (ite (= (= o331 53) true) (= o332 5) (ite (= (= o331 54) true) (= o332 6) (ite (= (= o331 55) true) (= o332 7) (ite (= (= o331 56) true) (= o332 8) (=> (= (= o331 57) true) (= o332 9)))))))))))))))
(assert (= o333 (* o332 1)))
(assert (and (= o334 o333) (in_range1 o333)))
(assert (and (= temp___1812 (+ (to_rep1 (first (rt source))) 7)) (in_range1 (+ (to_rep1 (first (rt source))) 7))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1812) (<= temp___1812 (to_rep1 (last (rt source))))))
(assert (= o321 temp___1812))
(assert (= o322 (select (elts source) o321)))
(assert (= o323 (to_rep o322)))
(assert (and (= o324 (convert_character_digit_to_integer o323)) (and (in_range1 o324) (and (and (<= 0 o324) (<= o324 9)) (ite (= (= o323 48) true) (= o324 0) (ite (= (= o323 49) true) (= o324 1) (ite (= (= o323 50) true) (= o324 2) (ite (= (= o323 51) true) (= o324 3) (ite (= (= o323 52) true) (= o324 4) (ite (= (= o323 53) true) (= o324 5) (ite (= (= o323 54) true) (= o324 6) (ite (= (= o323 55) true) (= o324 7) (ite (= (= o323 56) true) (= o324 8) (=> (= (= o323 57) true) (= o324 9)))))))))))))))
(assert (= o325 (* o324 10)))
(assert (and (= o326 o325) (in_range1 o325)))
(assert (and (= temp___1811 (+ (to_rep1 (first (rt source))) 6)) (in_range1 (+ (to_rep1 (first (rt source))) 6))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1811) (<= temp___1811 (to_rep1 (last (rt source))))))
(assert (= o313 temp___1811))
(assert (= o314 (select (elts source) o313)))
(assert (= o315 (to_rep o314)))
(assert (and (= o316 (convert_character_digit_to_integer o315)) (and (in_range1 o316) (and (and (<= 0 o316) (<= o316 9)) (ite (= (= o315 48) true) (= o316 0) (ite (= (= o315 49) true) (= o316 1) (ite (= (= o315 50) true) (= o316 2) (ite (= (= o315 51) true) (= o316 3) (ite (= (= o315 52) true) (= o316 4) (ite (= (= o315 53) true) (= o316 5) (ite (= (= o315 54) true) (= o316 6) (ite (= (= o315 55) true) (= o316 7) (ite (= (= o315 56) true) (= o316 8) (=> (= (= o315 57) true) (= o316 9)))))))))))))))
(assert (= o317 (* o316 100)))
(assert (and (= o318 o317) (in_range1 o317)))
(assert (and (= temp___1810 (+ (to_rep1 (first (rt source))) 5)) (in_range1 (+ (to_rep1 (first (rt source))) 5))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1810) (<= temp___1810 (to_rep1 (last (rt source))))))
(assert (= o305 temp___1810))
(assert (= o306 (select (elts source) o305)))
(assert (= o307 (to_rep o306)))
(assert (and (= o308 (convert_character_digit_to_integer o307)) (and (in_range1 o308) (and (and (<= 0 o308) (<= o308 9)) (ite (= (= o307 48) true) (= o308 0) (ite (= (= o307 49) true) (= o308 1) (ite (= (= o307 50) true) (= o308 2) (ite (= (= o307 51) true) (= o308 3) (ite (= (= o307 52) true) (= o308 4) (ite (= (= o307 53) true) (= o308 5) (ite (= (= o307 54) true) (= o308 6) (ite (= (= o307 55) true) (= o308 7) (ite (= (= o307 56) true) (= o308 8) (=> (= (= o307 57) true) (= o308 9)))))))))))))))
(assert (= o309 (* o308 1000)))
(assert (and (= o310 o309) (in_range1 o309)))
(assert (and (= temp___1809 (+ (to_rep1 (first (rt source))) 4)) (in_range1 (+ (to_rep1 (first (rt source))) 4))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1809) (<= temp___1809 (to_rep1 (last (rt source))))))
(assert (= o297 temp___1809))
(assert (= o298 (select (elts source) o297)))
(assert (= o299 (to_rep o298)))
(assert (and (= o300 (convert_character_digit_to_integer o299)) (and (in_range1 o300) (and (and (<= 0 o300) (<= o300 9)) (ite (= (= o299 48) true) (= o300 0) (ite (= (= o299 49) true) (= o300 1) (ite (= (= o299 50) true) (= o300 2) (ite (= (= o299 51) true) (= o300 3) (ite (= (= o299 52) true) (= o300 4) (ite (= (= o299 53) true) (= o300 5) (ite (= (= o299 54) true) (= o300 6) (ite (= (= o299 55) true) (= o300 7) (ite (= (= o299 56) true) (= o300 8) (=> (= (= o299 57) true) (= o300 9)))))))))))))))
(assert (= o301 (* o300 10000)))
(assert (and (= o302 o301) (in_range1 o301)))
(assert (and (= temp___1808 (+ (to_rep1 (first (rt source))) 3)) (in_range1 (+ (to_rep1 (first (rt source))) 3))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1808) (<= temp___1808 (to_rep1 (last (rt source))))))
(assert (= o289 temp___1808))
(assert (= o290 (select (elts source) o289)))
(assert (= o291 (to_rep o290)))
(assert (and (= o292 (convert_character_digit_to_integer o291)) (and (in_range1 o292) (and (and (<= 0 o292) (<= o292 9)) (ite (= (= o291 48) true) (= o292 0) (ite (= (= o291 49) true) (= o292 1) (ite (= (= o291 50) true) (= o292 2) (ite (= (= o291 51) true) (= o292 3) (ite (= (= o291 52) true) (= o292 4) (ite (= (= o291 53) true) (= o292 5) (ite (= (= o291 54) true) (= o292 6) (ite (= (= o291 55) true) (= o292 7) (ite (= (= o291 56) true) (= o292 8) (=> (= (= o291 57) true) (= o292 9)))))))))))))))
(assert (= o293 (* o292 100000)))
(assert (and (= o294 o293) (in_range1 o293)))
(assert (and (= temp___1807 (+ (to_rep1 (first (rt source))) 2)) (in_range1 (+ (to_rep1 (first (rt source))) 2))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1807) (<= temp___1807 (to_rep1 (last (rt source))))))
(assert (= o281 temp___1807))
(assert (= o282 (select (elts source) o281)))
(assert (= o283 (to_rep o282)))
(assert (and (= o284 (convert_character_digit_to_integer o283)) (and (in_range1 o284) (and (and (<= 0 o284) (<= o284 9)) (ite (= (= o283 48) true) (= o284 0) (ite (= (= o283 49) true) (= o284 1) (ite (= (= o283 50) true) (= o284 2) (ite (= (= o283 51) true) (= o284 3) (ite (= (= o283 52) true) (= o284 4) (ite (= (= o283 53) true) (= o284 5) (ite (= (= o283 54) true) (= o284 6) (ite (= (= o283 55) true) (= o284 7) (ite (= (= o283 56) true) (= o284 8) (=> (= (= o283 57) true) (= o284 9)))))))))))))))
(assert (= o285 (* o284 1000000)))
(assert (and (= o286 o285) (in_range1 o285)))
(assert (and (= temp___1806 (+ (to_rep1 (first (rt source))) 1)) (in_range1 (+ (to_rep1 (first (rt source))) 1))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1806) (<= temp___1806 (to_rep1 (last (rt source))))))
(assert (= o273 temp___1806))
(assert (= o274 (select (elts source) o273)))
(assert (= o275 (to_rep o274)))
(assert (and (= o276 (convert_character_digit_to_integer o275)) (and (in_range1 o276) (and (and (<= 0 o276) (<= o276 9)) (ite (= (= o275 48) true) (= o276 0) (ite (= (= o275 49) true) (= o276 1) (ite (= (= o275 50) true) (= o276 2) (ite (= (= o275 51) true) (= o276 3) (ite (= (= o275 52) true) (= o276 4) (ite (= (= o275 53) true) (= o276 5) (ite (= (= o275 54) true) (= o276 6) (ite (= (= o275 55) true) (= o276 7) (ite (= (= o275 56) true) (= o276 8) (=> (= (= o275 57) true) (= o276 9)))))))))))))))
(assert (= o277 (* o276 10000000)))
(assert (and (= o278 o277) (in_range1 o277)))
(assert (and (= temp___1805 (+ (to_rep1 (first (rt source))) 0)) (in_range1 (+ (to_rep1 (first (rt source))) 0))))
(assert (and (<= (to_rep1 (first (rt source))) temp___1805) (<= temp___1805 (to_rep1 (last (rt source))))))
(assert (= o268 temp___1805))
(assert (= o269 (select (elts source) o268)))
(assert (= o270 (to_rep o269)))
(assert (and (= o271 (convert_character_digit_to_integer o270)) (and (in_range1 o271) (and (and (<= 0 o271) (<= o271 9)) (ite (= (= o270 48) true) (= o271 0) (ite (= (= o270 49) true) (= o271 1) (ite (= (= o270 50) true) (= o271 2) (ite (= (= o270 51) true) (= o271 3) (ite (= (= o270 52) true) (= o271 4) (ite (= (= o270 53) true) (= o271 5) (ite (= (= o270 54) true) (= o271 6) (ite (= (= o270 55) true) (= o271 7) (ite (= (= o270 56) true) (= o271 8) (=> (= (= o270 57) true) (= o271 9)))))))))))))))
(assert (= o272 (* o271 100000000)))
(assert (and (= o279 o272) (in_range1 o272)))
(assert (= o280 (+ o279 o278)))
(assert (and (= o287 o280) (in_range1 o280)))
(assert (= o288 (+ o287 o286)))
(assert (and (= o295 o288) (in_range1 o288)))
(assert (= o296 (+ o295 o294)))
(assert (not (in_range1 o296)))
(check-sat)
(exit)
