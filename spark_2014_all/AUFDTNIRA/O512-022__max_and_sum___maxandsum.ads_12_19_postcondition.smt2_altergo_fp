(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type element

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : element, element -> bool

logic dummy2 : element

type element__ref = { element__content : element
}

function element__ref___projection(a: element__ref) : element =
  (a).element__content

type telementarrayC

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : telementarrayC, telementarrayC -> bool

logic dummy3 : telementarrayC

type telementarrayC__ref = { telementarrayC__content : telementarrayC
}

function telementarrayC__ref___projection(a: telementarrayC__ref) : telementarrayC =
  (a).telementarrayC__content

logic to_rep : telementarrayC -> int

logic of_rep : int -> telementarrayC

axiom inversion_axiom :
  (forall x:telementarrayC [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:telementarrayC [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,telementarrayC) farray
}

logic slide : (int,telementarrayC) farray, int,
  int -> (int,telementarrayC) farray

axiom slide_eq :
  (forall a:(int,telementarrayC) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,telementarrayC) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq6 : (int,telementarrayC) farray, int, int,
  (int,telementarrayC) farray, int, int -> bool

axiom bool_eq_def5 :
  (forall a:(int,telementarrayC) farray. forall a__first:int.
  forall a__last:int. forall b:(int,telementarrayC) farray.
  forall b__first:int. forall b__last:int [bool_eq6(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,telementarrayC) farray.
  forall b:(int,telementarrayC) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic a : (int,telementarrayC) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t1b

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : t1b, t1b -> bool

logic dummy4 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref___projection(a1: t1b__ref) : t1b = (a1).t1b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "maxandsum.ads", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall sum:int. forall max:int. forall i:int. forall temp___175:int.
  forall temp___174:int. forall temp___173:int. forall o:int.
  forall result:int. forall sum1:int. forall result1:int. forall max1:int.
  forall result2:int. forall i1:int. forall sum2:int. forall max2:int.
  forall i2:int. forall result3:int. forall sum3:int. forall result4:int.
  forall max3:int. forall sum4:int. forall max4:int. forall i3:int.
  forall sum5:int. forall max5:int. forall i4:int. forall sum6:int.
  forall max6:int. forall i5:int. forall sum7:int. forall max7:int.
  forall i6:int. forall sum8:int. forall max8:int. forall i7:int.
  forall sum9:int. forall max9:int. forall i8:int. ((((0 <= 2147483647) ->
  in_range2(sum)) and (((0 <= 100) -> in_range3(max)) and (((({
  int__content = result } = { int__content = sum }) and (sum1 = 0)) and ((({
  int__content = result1 } = { int__content = max }) and (max1 = 0)) and ((({
  int__content = result2 } = { int__content = i }) and (i1 = 1)) and
  ((((1 <= i1) and (i1 <= 100)) and ((((temp___175 = i1) and
  ((temp___174 = max1) and ((temp___173 = sum1) and
  ((sum2 <= ((i2 - 1) * max2)) and ((((((0 <= 2147483647) ->
  in_range2(sum2)) and ((0 <= 100) -> in_range3(max2))) and ((1 <= 100) ->
  in_range5(i2))) and ((1 <= i2) and (i2 <= 100))) and
  ((((o = (sum2 + to_rep((a[i2])))) and
  in_range1((sum2 + to_rep((a[i2]))))) and ((sum2 = result3) and
  (sum3 = o))) and ((((max2 <  to_rep((a[i2]))) and ((max2 = result4) and
  (max3 = to_rep((a[i2]))))) or ((not (max2 <  to_rep((a[i2])))) and
  (max3 = max2))) and ((sum3 <= (i2 * max3)) and (i2 = 100))))))))) and
  (((i2 = i3) and ((max3 = max4) and (sum3 = sum4))) and ((i4 = i2) and
  ((max5 = max3) and (sum5 = sum3))))) and (((i5 = i3) and (({ int__content =
  max6 } = { int__content = max4 }) and ({ int__content = sum6 } = {
  int__content = sum4 }))) and ((i6 = i4) and ((max7 = max5) and
  (sum7 = sum5)))))) or ((not ((1 <= i1) and (i1 <= 100))) and
  (((i1 = i5) and ((max1 = max6) and (sum1 = sum6))) and ((i6 = i1) and
  ((max7 = max1) and (sum7 = sum1))))))))) and (((i7 = i5) and
  ((max8 = max6) and (sum8 = sum6))) and ((i8 = i6) and ((max9 = max7) and
  (sum9 = sum7))))))) -> (sum8 <= (100 * max8))))
