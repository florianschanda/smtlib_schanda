(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range4 temp___expr_33)))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(declare-sort int__ 0)
(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (int__ int__) Bool)
(declare-const dummy5 int__)
(declare-datatypes () ((int____ref (mk_int____ref (int____content int__)))))
(define-fun int____ref___2__projection ((a int____ref)) int__ (int____content a))
(define-fun dynamic_invariant3 ((temp___expr_338 Int) (temp___is_init_335 Bool) (temp___skip_constant_336 Bool) (temp___do_toplevel_337 Bool)) Bool (=> (or (= temp___is_init_335 true) (<= (- 2147483648) 2147483647)) (in_range5 temp___expr_338)))
(declare-const eof Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const eof_ch Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort file_descr 0)
(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (file_descr file_descr) Bool)
(declare-const dummy6 file_descr)
(declare-datatypes () ((file_descr__ref (mk_file_descr__ref (file_descr__content file_descr)))))
(define-fun file_descr__ref___projection ((a file_descr__ref)) file_descr (file_descr__content a))
(declare-fun to_rep2 (file_descr) Int)
(declare-fun of_rep2 (Int) file_descr)
(assert (forall ((x file_descr)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x file_descr)) (! (in_range6 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort count 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (count count) Bool)
(declare-const dummy7 count)
(declare-datatypes () ((count__ref (mk_count__ref (count__content count)))))
(define-fun count__ref___projection ((a count__ref)) count (count__content a))
(declare-fun to_rep3 (count) Int)
(declare-fun of_rep3 (Int) count)
(assert (forall ((x count)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x count)) (! (in_range7 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range7 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__textio__file_type__descr file_descr) (rec__textio__file_type__before_lm Bool) (rec__textio__file_type__before_lm_pm Bool) (rec__textio__file_type__col count) (rec__textio__file_type__line count) (rec__textio__file_type__page count) (rec__textio__file_type__is_regular_file Bool)))))
(define-fun us_split_fields_Descr__projection ((a us_split_fields)) file_descr (rec__textio__file_type__descr a))
(define-fun us_split_fields_Before_LM__projection ((a us_split_fields)) Bool (rec__textio__file_type__before_lm a))
(define-fun us_split_fields_Before_LM_PM__projection ((a us_split_fields)) Bool (rec__textio__file_type__before_lm_pm a))
(define-fun us_split_fields_Col__projection ((a us_split_fields)) count (rec__textio__file_type__col a))
(define-fun us_split_fields_Line__projection ((a us_split_fields)) count (rec__textio__file_type__line a))
(define-fun us_split_fields_Page__projection ((a us_split_fields)) count (rec__textio__file_type__page a))
(define-fun us_split_fields_Is_Regular_File__projection ((a us_split_fields)) Bool (rec__textio__file_type__is_regular_file a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (= (to_rep2 (rec__textio__file_type__descr (us_split_fields1 a))) (to_rep2 (rec__textio__file_type__descr (us_split_fields1 b)))) (= (rec__textio__file_type__before_lm (us_split_fields1 a)) (rec__textio__file_type__before_lm (us_split_fields1 b)))) (= (rec__textio__file_type__before_lm_pm (us_split_fields1 a)) (rec__textio__file_type__before_lm_pm (us_split_fields1 b)))) (= (to_rep3 (rec__textio__file_type__col (us_split_fields1 a))) (to_rep3 (rec__textio__file_type__col (us_split_fields1 b))))) (= (to_rep3 (rec__textio__file_type__line (us_split_fields1 a))) (to_rep3 (rec__textio__file_type__line (us_split_fields1 b))))) (= (to_rep3 (rec__textio__file_type__page (us_split_fields1 a))) (to_rep3 (rec__textio__file_type__page (us_split_fields1 b))))) (= (rec__textio__file_type__is_regular_file (us_split_fields1 a)) (rec__textio__file_type__is_regular_file (us_split_fields1 b)))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const textio__file_type__descr__first__bit Int)
(declare-const textio__file_type__descr__last__bit Int)
(declare-const textio__file_type__descr__position Int)
(assert (<= 0 textio__file_type__descr__first__bit))
(assert (< textio__file_type__descr__first__bit textio__file_type__descr__last__bit))
(assert (<= 0 textio__file_type__descr__position))
(declare-const textio__file_type__before_lm__first__bit Int)
(declare-const textio__file_type__before_lm__last__bit Int)
(declare-const textio__file_type__before_lm__position Int)
(assert (<= 0 textio__file_type__before_lm__first__bit))
(assert (< textio__file_type__before_lm__first__bit textio__file_type__before_lm__last__bit))
(assert (<= 0 textio__file_type__before_lm__position))
(declare-const textio__file_type__before_lm_pm__first__bit Int)
(declare-const textio__file_type__before_lm_pm__last__bit Int)
(declare-const textio__file_type__before_lm_pm__position Int)
(assert (<= 0 textio__file_type__before_lm_pm__first__bit))
(assert (< textio__file_type__before_lm_pm__first__bit textio__file_type__before_lm_pm__last__bit))
(assert (<= 0 textio__file_type__before_lm_pm__position))
(declare-const textio__file_type__col__first__bit Int)
(declare-const textio__file_type__col__last__bit Int)
(declare-const textio__file_type__col__position Int)
(assert (<= 0 textio__file_type__col__first__bit))
(assert (< textio__file_type__col__first__bit textio__file_type__col__last__bit))
(assert (<= 0 textio__file_type__col__position))
(declare-const textio__file_type__line__first__bit Int)
(declare-const textio__file_type__line__last__bit Int)
(declare-const textio__file_type__line__position Int)
(assert (<= 0 textio__file_type__line__first__bit))
(assert (< textio__file_type__line__first__bit textio__file_type__line__last__bit))
(assert (<= 0 textio__file_type__line__position))
(declare-const textio__file_type__page__first__bit Int)
(declare-const textio__file_type__page__last__bit Int)
(declare-const textio__file_type__page__position Int)
(assert (<= 0 textio__file_type__page__first__bit))
(assert (< textio__file_type__page__first__bit textio__file_type__page__last__bit))
(assert (<= 0 textio__file_type__page__position))
(declare-const textio__file_type__is_regular_file__first__bit Int)
(declare-const textio__file_type__is_regular_file__last__bit Int)
(declare-const textio__file_type__is_regular_file__position Int)
(assert (<= 0 textio__file_type__is_regular_file__first__bit))
(assert (< textio__file_type__is_regular_file__first__bit textio__file_type__is_regular_file__last__bit))
(assert (<= 0 textio__file_type__is_regular_file__position))
(declare-fun user_eq8 (us_rep us_rep) Bool)
(declare-const dummy8 us_rep)
(declare-datatypes () ((file_type__ref (mk_file_type__ref (file_type__content us_rep)))))
(define-fun file_type__ref___projection ((a file_type__ref)) us_rep (file_type__content a))
(declare-fun end_of_file (us_rep Int (Array Int character)) Bool)
(declare-fun end_of_file__function_guard (Bool us_rep Int (Array Int character)) Bool)
(declare-fun fpeek (us_rep Int (Array Int character)) Int)
(declare-fun fpeek__function_guard (Int us_rep Int (Array Int character)) Bool)
(assert (forall ((file us_rep)) (forall ((helpers__cur_position Int)) (forall ((helpers__the_file (Array Int character))) (! (=> (dynamic_invariant1 helpers__cur_position true true true) (= (= (end_of_file file helpers__cur_position helpers__the_file) true) (= (fpeek file helpers__cur_position helpers__the_file) eof))) :pattern ((end_of_file file helpers__cur_position helpers__the_file)))))))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const result____first integer)
(declare-const result____last integer)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const cur_position_at_start Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-fun temp___String_Literal_574 (tuple0) (Array Int character))
(assert true)
(define-fun dynamic_invariant4 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant6 ((temp___expr_423 Int) (temp___is_init_420 Bool) (temp___skip_constant_421 Bool) (temp___do_toplevel_422 Bool)) Bool (=> (or (= temp___is_init_420 true) (<= 0 2147483647)) (in_range7 temp___expr_423)))
(declare-fun fpeek1 (Int Int (Array Int character)) Int)
(declare-fun fpeek__function_guard1 (Int Int Int (Array Int character)) Bool)
(assert (forall ((file us_rep)) (forall ((helpers__cur_position Int)) (forall ((helpers__the_file (Array Int character))) (! (=> (dynamic_invariant1 helpers__cur_position true true true) (dynamic_invariant3 (fpeek file helpers__cur_position helpers__the_file) true false true)) :pattern ((fpeek file helpers__cur_position helpers__the_file)))))))
(assert (forall ((file us_rep)) (forall ((helpers__cur_position Int)) (forall ((helpers__the_file (Array Int character))) (! (=> (dynamic_invariant1 helpers__cur_position true true true) (= (fpeek file helpers__cur_position helpers__the_file) (fpeek1 (to_rep2 (rec__textio__file_type__descr (us_split_fields1 file))) helpers__cur_position helpers__the_file))) :pattern ((fpeek file helpers__cur_position helpers__the_file)))))))
(assert (= eof_ch (mod2 eof 256)))
(define-fun dynamic_invariant7 ((temp___expr_386 Int) (temp___is_init_383 Bool) (temp___skip_constant_384 Bool) (temp___do_toplevel_385 Bool)) Bool (=> (or (= temp___is_init_383 true) (<= (- 2147483648) 2147483647)) (in_range6 temp___expr_386)))
(assert (forall ((stream Int) (helpers__cur_position Int)) (forall ((helpers__the_file (Array Int character))) (! (=> (and (dynamic_invariant7 stream true true true) (dynamic_invariant1 helpers__cur_position true true true)) (dynamic_invariant3 (fpeek1 stream helpers__cur_position helpers__the_file) true false true)) :pattern ((fpeek1 stream helpers__cur_position helpers__the_file))))))
(assert (forall ((stream Int) (helpers__cur_position Int)) (forall ((helpers__the_file (Array Int character))) (! (=> (and (dynamic_invariant7 stream true true true) (dynamic_invariant1 helpers__cur_position true true true)) (= (fpeek1 stream helpers__cur_position helpers__the_file) (ite (= (to_rep (select helpers__the_file helpers__cur_position)) eof_ch) eof (to_rep (select helpers__the_file helpers__cur_position))))) :pattern ((fpeek1 stream helpers__cur_position helpers__the_file))))))
(declare-const the_file (Array Int character))
(declare-const cur_position Int)
(declare-const file__split_fields file_descr)
(declare-const file__split_fields1 Bool)
(declare-const file__split_fields2 Bool)
(declare-const file__split_fields3 count)
(declare-const file__split_fields4 count)
(declare-const file__split_fields5 count)
(declare-const file__split_fields6 Bool)
(declare-const num Int)
(declare-const idx Int)
(declare-const the_file1 (Array Int character))
(declare-const cur_position1 Int)
(declare-const file__split_fields7 file_descr)
(declare-const file__split_fields8 Bool)
(declare-const file__split_fields9 Bool)
(declare-const file__split_fields10 count)
(declare-const file__split_fields11 count)
(declare-const file__split_fields12 count)
(declare-const file__split_fields13 Bool)
(declare-const result__ (Array Int character))
(declare-const num1 Int)
(declare-const the_file2 (Array Int character))
(declare-const cur_position2 Int)
(declare-const file__split_fields14 file_descr)
(declare-const file__split_fields15 Bool)
(declare-const file__split_fields16 Bool)
(declare-const file__split_fields17 count)
(declare-const file__split_fields18 count)
(declare-const file__split_fields19 count)
(declare-const file__split_fields20 Bool)
(declare-const result__1 (Array Int character))
(declare-const num2 Int)
(declare-const the_file3 (Array Int character))
(declare-const cur_position3 Int)
(declare-const file__split_fields21 file_descr)
(declare-const file__split_fields22 Bool)
(declare-const file__split_fields23 Bool)
(declare-const file__split_fields24 count)
(declare-const file__split_fields25 count)
(declare-const file__split_fields26 count)
(declare-const file__split_fields27 Bool)
(declare-const result__2 (Array Int character))
(declare-const num3 Int)
(assert (dynamic_property 1 2147483647 (to_rep1 result____first) (to_rep1 result____last)))
(assert (=> (<= 0 2147483647) (in_range4 num)))
(assert (in_range2 cur_position))
(assert (in_range3 eof_ch))
(assert (= (mod2 eof 256) eof_ch))
(assert (in_range5 eof))
(assert (and (not (= (end_of_file (mk___rep (mk___split_fields file__split_fields file__split_fields1 file__split_fields2 file__split_fields3 file__split_fields4 file__split_fields5 file__split_fields6)) cur_position the_file) true)) (and (= (to_rep1 result____first) 1) (= (to_rep1 result____last) 2147483647))))
(assert (= cur_position cur_position_at_start))
(assert (in_range2 cur_position_at_start))
(assert (and (and (forall ((idx1 Int)) (=> (and (<= 1 idx1) (<= idx1 num1)) (= (to_rep (select result__ idx1)) (to_rep (select the_file1 (+ (- idx1 1) cur_position_at_start)))))) (and (= cur_position1 (+ cur_position_at_start num1)) (or (= (to_rep (select the_file1 cur_position1)) eof_ch) (= (to_rep (select the_file1 cur_position1)) 10)))) (and (in_range4 num1) (in_range2 cur_position1))))
(assert (= num1 num2))
(assert (= result__ result__1))
(assert (= file__split_fields14 file__split_fields7))
(assert (= file__split_fields15 file__split_fields8))
(assert (= file__split_fields16 file__split_fields9))
(assert (= file__split_fields17 file__split_fields10))
(assert (= file__split_fields18 file__split_fields11))
(assert (= file__split_fields19 file__split_fields12))
(assert (= file__split_fields20 file__split_fields13))
(assert (= cur_position1 cur_position2))
(assert (= the_file1 the_file2))
(assert (= num3 num1))
(assert (= result__2 result__))
(assert (= (mk___split_fields file__split_fields21 file__split_fields22 file__split_fields23 file__split_fields24 file__split_fields25 file__split_fields26 file__split_fields27) (mk___split_fields file__split_fields7 file__split_fields8 file__split_fields9 file__split_fields10 file__split_fields11 file__split_fields12 file__split_fields13)))
(assert (= cur_position3 cur_position1))
(assert (= the_file3 the_file1))
(assert (<= 1 idx))
(assert (<= idx num2))
(assert (not (<= (to_rep1 result____first) idx)))
(check-sat)
(exit)
