(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type index

predicate in_range2(x: int) = ((0 <= x) and (x <= 300))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type bounded_integer

predicate in_range3(x: int) = (((- 2000) <= x) and (x <= 2000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : bounded_integer, bounded_integer -> bool

logic dummy2 : bounded_integer

type bounded_integer__ref = { bounded_integer__content : bounded_integer
}

function bounded_integer__ref___projection(a: bounded_integer__ref) : bounded_integer =
  (a).bounded_integer__content

logic to_rep : bounded_integer -> int

logic of_rep : int -> bounded_integer

axiom inversion_axiom :
  (forall x:bounded_integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:bounded_integer [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,bounded_integer) farray
}

logic slide : (int,bounded_integer) farray, int,
  int -> (int,bounded_integer) farray

axiom slide_eq :
  (forall a:(int,bounded_integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bounded_integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bounded_integer) farray, int, int,
  (int,bounded_integer) farray, int, int -> (int,bounded_integer) farray

axiom concat_def :
  (forall a:(int,bounded_integer) farray.
  forall b:(int,bounded_integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bounded_integer, int -> (int,bounded_integer) farray

axiom singleton_def :
  (forall v:bounded_integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,bounded_integer) farray, int, int,
  (int,bounded_integer) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,bounded_integer) farray. forall a__first:int.
  forall a__last:int. forall b:(int,bounded_integer) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bounded_integer) farray.
  forall b:(int,bounded_integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,bounded_integer) farray, int, int,
  (int,bounded_integer) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,bounded_integer) farray.
  forall b:(int,bounded_integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bounded_integer) farray.
  forall b:(int,bounded_integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bounded_integer) farray.
  forall b:(int,bounded_integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic sum : (int,bounded_integer) farray, int, int -> int

logic sum__function_guard : int, (int,bounded_integer) farray, int,
  int -> prop

axiom sum__def_axiom :
  (forall a:(int,bounded_integer) farray.
  (forall i:int. forall j:int [sum(a, i, j)]. ((in_range2(i) and
  in_range2(j)) -> (((j <= i) -> (sum(a, i, j) = 0)) and ((not (j <= i)) ->
  (sum(a, i, j) = (to_rep((a[i])) + sum(a, (i + 1), j))))))))

logic a : (int,bounded_integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t1b__ref = { t1b__content : integer
}

function t1b__ref___projection(a1: t1b__ref) : integer = (a1).t1b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom h :
  (forall a1:(int,bounded_integer) farray. forall x:int. forall j1:int.
  (((0 <  j1) and (j1 <= 300)) -> (((0 <  x) and (x <= j1)) -> (sum(a1,
  (j1 - x), j1) = (sum(a1, (j1 - x), (j1 - 1)) + to_rep((a1[(j1 - 1)])))))))

logic s : int

logic k : int

logic sum__simple_sum__result : int

logic temp___159 : int

logic temp___158 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic result : int

logic s1 : int

logic result1 : int

logic k1 : int

logic s2 : int

logic k2 : int

logic result2 : int

logic s3 : int

logic result3 : int

logic k3 : int

logic s4 : int

logic k4 : int

logic s5 : int

logic k5 : int

logic s6 : int

logic k6 : int

logic s7 : int

logic k7 : int

logic result4 : int

logic sum__simple_sum__result1 : int

logic sum__simple_sum__result2 : int

logic sum__simple_sum__result3 : int

logic s8 : int

logic k8 : int

logic sum__simple_sum__result4 : int

logic s9 : int

logic k9 : int

logic sum__simple_sum__result5 : int

logic result5 : int

axiom H : in_range2(i)

axiom H1 : in_range2(j)

axiom H2 : (i <= j)

axiom H3 : (result = s)

axiom H4 : (s1 = 0)

axiom H5 : in_range1(s1)

axiom H6 : (result1 = k)

axiom H7 : (k1 = i)

axiom H8 : (((i <= k1) and (k1 <= (j - 1))) -> (temp___159 = k1))

axiom H9 : (((i <= k1) and (k1 <= (j - 1))) -> (temp___158 = s1))

axiom H10 : (((i <= k1) and (k1 <= (j - 1))) -> (abs_int(s2) <= (k2 * 2000)))

axiom H11 : (((i <= k1) and (k1 <= (j - 1))) -> (s2 = sum(a, i, k2)))

axiom H12 : (((i <= k1) and (k1 <= (j - 1))) ->
  (((((- 2147483648) <= 2147483647) -> in_range1(s2)) and ((i <= (j - 1)) ->
  dynamic_property(i, (j - 1), k2))) and ((i <= k2) and (k2 <= (j - 1)))))

axiom H13 : (((i <= k1) and (k1 <= (j - 1))) ->
  ((o4 = (s2 + to_rep((a[k2])))) and in_range1((s2 + to_rep((a[k2]))))))

axiom H14 : (((i <= k1) and (k1 <= (j - 1))) -> (s2 = result2))

axiom H15 : (((i <= k1) and (k1 <= (j - 1))) -> (s3 = o4))

axiom H16 : (((i <= k1) and (k1 <= (j - 1))) -> (k2 = (j - 1)))

axiom H17 : (((i <= k1) and (k1 <= (j - 1))) -> (k2 = k4))

axiom H18 : (((i <= k1) and (k1 <= (j - 1))) -> (s3 = s4))

axiom H19 : (((i <= k1) and (k1 <= (j - 1))) -> (k5 = k2))

axiom H20 : (((i <= k1) and (k1 <= (j - 1))) -> (s5 = s3))

axiom H21 : (((i <= k1) and (k1 <= (j - 1))) -> (k6 = k4))

axiom H22 : (((i <= k1) and (k1 <= (j - 1))) -> (s6 = s4))

axiom H23 : (((i <= k1) and (k1 <= (j - 1))) -> (k7 = k5))

axiom H24 : (((i <= k1) and (k1 <= (j - 1))) -> (s7 = s5))

axiom H25 : ((not ((i <= k1) and (k1 <= (j - 1)))) -> (k1 = k6))

axiom H26 : ((not ((i <= k1) and (k1 <= (j - 1)))) -> (s1 = s6))

axiom H27 : ((not ((i <= k1) and (k1 <= (j - 1)))) -> (k7 = k1))

axiom H28 : ((not ((i <= k1) and (k1 <= (j - 1)))) -> (s7 = s1))

axiom H29 : (sum__simple_sum__result1 = sum__simple_sum__result2)

axiom H30 : (sum__simple_sum__result3 = sum__simple_sum__result1)

axiom H31 : (result4 = sum__simple_sum__result)

axiom H32 : (sum__simple_sum__result1 = s6)

axiom H33 : (sum__simple_sum__result4 = sum__simple_sum__result2)

axiom H34 : (k8 = k6)

axiom H35 : (s8 = s6)

axiom H36 : (sum__simple_sum__result5 = sum__simple_sum__result3)

axiom H37 : (k9 = k7)

axiom H38 : (s9 = s7)

axiom H39 : (result5 = sum__simple_sum__result4)

axiom Hinst :
  (forall x:int. forall j1:int. (((0 <  j1) and (j1 <= 300)) ->
  (((0 <  x) and (x <= j1)) -> (sum(a, (j1 - x), j1) = (sum(a, (j1 - x),
  (j1 - 1)) + to_rep((a[(j1 - 1)])))))))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (sum__simple_sum__result4 = sum(a, i, j))
