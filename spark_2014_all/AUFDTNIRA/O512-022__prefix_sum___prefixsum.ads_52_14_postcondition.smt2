(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range3 temp___expr_46)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun all_elements_in ((Array Int integer) Int) Bool)
(declare-fun all_elements_in__function_guard (Bool (Array Int integer) Int) Bool)
(assert true)
(assert (forall ((a (Array Int integer))) (forall ((max Int)) (! (= (= (all_elements_in a max) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (and (<= (- max) (to_rep (select a k))) (<= (to_rep (select a k)) max))))) :pattern ((all_elements_in a max))))))
(declare-fun intermediate_form ((Array Int integer) (Array Int integer)) Bool)
(declare-fun intermediate_form__function_guard (Bool (Array Int integer) (Array Int integer)) Bool)
(assert true)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (! (= (= (intermediate_form a b) true) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (= (mod2 (+ k 1) 8) 0) (= (to_rep (select a k)) (+ (+ (+ (+ (+ (+ (+ (to_rep (select b 0)) (to_rep (select b 1))) (to_rep (select b 2))) (to_rep (select b 3))) (to_rep (select b 4))) (to_rep (select b 5))) (to_rep (select b 6))) (to_rep (select b 7)))) (ite (= (mod2 (+ k 1) 4) 0) (= (to_rep (select a k)) (+ (+ (+ (to_rep (select b k)) (to_rep (select b (- k 1)))) (to_rep (select b (- k 2)))) (to_rep (select b (- k 3))))) (ite (= (mod2 (+ k 1) 2) 0) (= (to_rep (select a k)) (+ (to_rep (select b k)) (to_rep (select b (- k 1))))) (= (to_rep (select a k)) (to_rep (select b k))))))))) :pattern ((intermediate_form a b)))))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 7))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (index index) Bool)
(declare-const dummy3 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-const ghost__ (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const input_space Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant3 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 7)) (in_range4 temp___expr_159)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 0))
(declare-const a (Array Int integer))
(declare-const space Int)
(declare-const left Int)
(declare-const right Int)
(declare-const temp Int)
(declare-const o Int)
(declare-const temp___252 (Array Int integer))
(declare-const temp___256 (Array Int integer))
(declare-const temp___261 (Array Int integer))
(declare-const temp___260 (Array Int integer))
(declare-const temp___267 (Array Int integer))
(declare-const temp___250 (Array Int integer))
(declare-const temp___249 Int)
(declare-const temp___266 (Array Int integer))
(declare-const temp___259 (Array Int integer))
(declare-const temp___265 (Array Int integer))
(declare-const temp___254 (Array Int integer))
(declare-const temp___248 Int)
(declare-const temp___264 (Array Int integer))
(declare-const temp___253 (Array Int integer))
(declare-const temp___247 Int)
(declare-const temp___258 (Array Int integer))
(declare-const temp___263 (Array Int integer))
(declare-const temp___246 Int)
(declare-const temp___262 (Array Int integer))
(declare-const temp___268 Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___244 (Array Int integer))
(declare-const temp___243 (Array Int integer))
(declare-const temp___236 (Array Int integer))
(declare-const temp___235 Int)
(declare-const temp___241 (Array Int integer))
(declare-const temp___234 Int)
(declare-const temp___233 Int)
(declare-const temp___239 (Array Int integer))
(declare-const temp___238 (Array Int integer))
(declare-const temp___245 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 integer)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 integer)
(declare-const o12 Int)
(declare-const o13 integer)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 integer)
(declare-const o19 Int)
(declare-const o20 (Array Int integer))
(declare-const o21 integer)
(declare-const o22 Int)
(declare-const o23 (Array Int integer))
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const left1 Int)
(declare-const right1 Int)
(declare-const temp1 Int)
(declare-const result Int)
(declare-const space1 Int)
(declare-const result1 (Array Int integer))
(declare-const a1 (Array Int integer))
(declare-const result2 Int)
(declare-const space2 Int)
(declare-const a2 (Array Int integer))
(declare-const space3 Int)
(declare-const left2 Int)
(declare-const right2 Int)
(declare-const temp2 Int)
(declare-const temp___2681 Int)
(declare-const rho Int)
(declare-const result3 Int)
(declare-const temp___2682 Int)
(declare-const result4 Int)
(declare-const right3 Int)
(declare-const a3 (Array Int integer))
(declare-const left3 Int)
(declare-const right4 Int)
(declare-const temp3 Int)
(declare-const temp___2451 Int)
(declare-const result5 Int)
(declare-const temp___2452 Int)
(declare-const result6 Int)
(declare-const left4 Int)
(declare-const result7 Int)
(declare-const temp4 Int)
(declare-const result8 (Array Int integer))
(declare-const a4 (Array Int integer))
(declare-const result9 (Array Int integer))
(declare-const a5 (Array Int integer))
(declare-const result10 Int)
(declare-const right5 Int)
(declare-const a6 map__ref)
(declare-const left5 int__ref)
(declare-const right6 int__ref)
(declare-const temp5 int__ref)
(declare-const a7 (Array Int integer))
(declare-const left6 Int)
(declare-const right7 Int)
(declare-const temp6 Int)
(declare-const rho1 Int)
(declare-const a8 map__ref)
(declare-const left7 int__ref)
(declare-const right8 int__ref)
(declare-const temp7 int__ref)
(declare-const a9 (Array Int integer))
(declare-const left8 Int)
(declare-const right9 Int)
(declare-const temp8 Int)
(declare-const rho2 Int)
(declare-const result11 int__ref)
(declare-const space4 Int)
(declare-const a10 map__ref)
(declare-const space5 int__ref)
(declare-const left9 int__ref)
(declare-const right10 int__ref)
(declare-const temp9 int__ref)
(declare-const a11 (Array Int integer))
(declare-const space6 Int)
(declare-const left10 Int)
(declare-const right11 Int)
(declare-const temp10 Int)
(declare-const a12 map__ref)
(declare-const space7 int__ref)
(declare-const left11 int__ref)
(declare-const right12 int__ref)
(declare-const temp11 int__ref)
(declare-const a13 (Array Int integer))
(declare-const space8 Int)
(declare-const left12 Int)
(declare-const right13 Int)
(declare-const temp12 Int)
(declare-const a14 map__ref)
(declare-const space9 int__ref)
(declare-const left13 int__ref)
(declare-const right14 int__ref)
(declare-const temp13 int__ref)
(declare-const a15 (Array Int integer))
(declare-const space10 Int)
(declare-const left14 Int)
(declare-const right15 Int)
(declare-const temp14 Int)
(assert (in_range3 input_space))
(assert (and (= (all_elements_in ghost__ 1000000) true) (and (= (all_elements_in a 8000000) true) (and (= input_space 8) (= (intermediate_form a ghost__) true)))))
(assert (and (= o input_space) (in_range2 input_space)))
(assert (= (mk_int__ref result) (mk_int__ref space)))
(assert (= space1 o))
(assert (in_range2 space1))
(assert (=> (<= 0 2147483647) (in_range2 left)))
(assert (=> (<= 0 2147483647) (in_range2 right)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 temp)))
(assert (= (mk_map__ref result1) (mk_map__ref a)))
(assert (= a1 (store a 7 rliteral)))
(assert (= space1 result2))
(assert (= space2 (div1 space1 2)))
(assert (=> (< 0 space2) (= temp___252 a1)))
(assert (=> (< 0 space2) (= temp___256 a1)))
(assert (=> (< 0 space2) (= temp___261 a1)))
(assert (=> (< 0 space2) (= temp___260 a1)))
(assert (=> (< 0 space2) (= temp___267 a1)))
(assert (=> (< 0 space2) (= temp___250 a1)))
(assert (=> (< 0 space2) (= temp___249 temp)))
(assert (=> (< 0 space2) (= temp___266 a1)))
(assert (=> (< 0 space2) (= temp___259 a1)))
(assert (=> (< 0 space2) (= temp___265 a1)))
(assert (=> (< 0 space2) (= temp___254 a1)))
(assert (=> (< 0 space2) (= temp___248 right)))
(assert (=> (< 0 space2) (= temp___264 a1)))
(assert (=> (< 0 space2) (= temp___253 a1)))
(assert (=> (< 0 space2) (= temp___247 left)))
(assert (=> (< 0 space2) (= temp___258 a1)))
(assert (=> (< 0 space2) (= temp___263 a1)))
(assert (=> (< 0 space2) (= temp___246 space2)))
(assert (=> (< 0 space2) (= temp___262 a1)))
(assert (=> (< 0 space2) (= 0 temp___268)))
(assert (=> (< 0 space2) (and (and (or (or (= space3 4) (= space3 2)) (= space3 1)) (= (all_elements_in a2 (* (* (div1 4 space3) 8) 1000000)) true)) (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (= space3 4) (= (to_rep (select a2 k)) (to_rep (select temp___252 k))) (ite (and (= space3 2) (= (mod2 (+ k 1) 8) 0)) (= (to_rep (select a2 k)) (+ (to_rep (select temp___253 k)) (to_rep (select temp___254 (- k (* 2 space3)))))) (ite (and (= space3 2) (= (mod2 (+ k 1) 4) 0)) (= (to_rep (select a2 k)) (to_rep (select temp___256 (+ k (* 2 space3))))) (ite (= space3 2) (= (to_rep (select a2 k)) (to_rep (select temp___258 k))) (ite (and (= space3 1) (= (mod2 (+ k 1) 2) 0)) (and (and (and (= (to_rep (select a2 1)) (to_rep (select temp___259 7))) (= (to_rep (select a2 3)) (+ (to_rep (select temp___260 1)) (to_rep (select temp___261 7))))) (= (to_rep (select a2 5)) (+ (to_rep (select temp___262 7)) (to_rep (select temp___263 3))))) (= (to_rep (select a2 7)) (+ (+ (to_rep (select temp___264 5)) (to_rep (select temp___265 7))) (to_rep (select temp___266 3))))) (= (to_rep (select a2 k)) (to_rep (select temp___267 k)))))))))))))
(assert (=> (< 0 space2) (and (and (and (and (=> (<= 0 2147483647) (in_range2 space3)) (=> (<= 0 2147483647) (in_range2 left2))) (=> (<= 0 2147483647) (in_range2 right2))) (=> (<= (- 2147483648) 2147483647) (in_range1 temp2))) (< 0 space3))))
(assert (=> (< 0 space2) (= temp___2681 result3)))
(assert (=> (< 0 space2) (= temp___2682 space3)))
(assert (=> (< 0 space2) (and (= o1 (* space3 2)) (in_range1 (* space3 2)))))
(assert (=> (< 0 space2) (= o2 (- o1 1))))
(assert (=> (< 0 space2) (and (= o3 o2) (in_range1 o2))))
(assert (=> (< 0 space2) (and (= o4 o3) (in_range2 o3))))
(assert (=> (< 0 space2) (= right2 result4)))
(assert (=> (< 0 space2) (= right3 o4)))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___244 a2))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___243 a2))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___236 a2))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___235 temp2))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___241 a2))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___234 right3))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___233 left2))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___239 a2))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___238 a2))))
(assert (=> (< 0 space2) (=> (< right3 8) (= 0 temp___245))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (and (forall ((k Int)) (=> (and (<= 0 k) (<= k 7)) (ite (and (<= 0 k) (<= k (- right4 (* space3 2)))) (ite (= (mod2 (+ k 1) (* 2 space3)) 0) (= (to_rep (select a3 k)) (+ (to_rep (select temp___238 k)) (to_rep (select temp___239 (- k space3))))) (ite (= (mod2 (+ k 1) space3) 0) (= (to_rep (select a3 k)) (to_rep (select temp___241 (+ k space3)))) (= (to_rep (select a3 k)) (to_rep (select temp___243 k))))) (= (to_rep (select a3 k)) (to_rep (select temp___244 k)))))) (= (mod2 (+ right4 1) (* space3 2)) 0)) (not (<= 8 right4))))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (and (and (=> (<= 0 2147483647) (in_range2 left3)) (=> (<= 0 2147483647) (in_range2 right4))) (=> (<= (- 2147483648) 2147483647) (in_range1 temp3))) (< right4 8)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___2451 result5))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp___2452 right4))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (= o5 (- right4 space3)) (in_range1 (- right4 space3))))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (= o6 o5) (in_range2 o5)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= left3 result6))))
(assert (=> (< 0 space2) (=> (< right3 8) (= left4 o6))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (<= 0 right4) (<= right4 7)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o7 right4))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o8 (select a3 o7)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o9 (to_rep o8)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp3 result7))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp4 o9))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (<= 0 right4) (<= right4 7)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o12 right4))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o13 (select a3 o12)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o14 (to_rep o13)))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (<= 0 left4) (<= left4 7)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o10 left4))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o11 (select a3 o10)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o15 (to_rep o11)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o16 (+ o15 o14)))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (= o17 o16) (in_range1 o16)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= (to_rep o18) o17))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (<= 0 right4) (<= right4 7)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o19 right4))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o20 (store a3 o19 o18)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= a3 result8))))
(assert (=> (< 0 space2) (=> (< right3 8) (= a4 o20))))
(assert (=> (< 0 space2) (=> (< right3 8) (= (to_rep o21) temp4))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (<= 0 left4) (<= left4 7)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o22 left4))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o23 (store a4 o22 o21)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= a4 result9))))
(assert (=> (< 0 space2) (=> (< right3 8) (= a5 o23))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (= o24 (* space3 2)) (in_range1 (* space3 2))))))
(assert (=> (< 0 space2) (=> (< right3 8) (= o25 (+ right4 o24)))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (= o26 o25) (in_range1 o25)))))
(assert (=> (< 0 space2) (=> (< right3 8) (and (= o27 o26) (in_range2 o26)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= right4 result10))))
(assert (=> (< 0 space2) (=> (< right3 8) (= right5 o27))))
(assert (=> (< 0 space2) (=> (< right3 8) (not (< right5 8)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp5 (mk_int__ref temp4)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= right6 (mk_int__ref right5)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= left5 (mk_int__ref left4)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= a6 (mk_map__ref a5)))))
(assert (=> (< 0 space2) (=> (< right3 8) (= rho1 temp___2452))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp6 temp4))))
(assert (=> (< 0 space2) (=> (< right3 8) (= right7 right5))))
(assert (=> (< 0 space2) (=> (< right3 8) (= left6 left4))))
(assert (=> (< 0 space2) (=> (< right3 8) (= a7 a5))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp7 temp5))))
(assert (=> (< 0 space2) (=> (< right3 8) (= right8 right6))))
(assert (=> (< 0 space2) (=> (< right3 8) (= left7 left5))))
(assert (=> (< 0 space2) (=> (< right3 8) (= a8 a6))))
(assert (=> (< 0 space2) (=> (< right3 8) (= rho2 rho1))))
(assert (=> (< 0 space2) (=> (< right3 8) (= temp8 temp6))))
(assert (=> (< 0 space2) (=> (< right3 8) (= right9 right7))))
(assert (=> (< 0 space2) (=> (< right3 8) (= left8 left6))))
(assert (=> (< 0 space2) (=> (< right3 8) (= a9 a7))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= temp7 (mk_int__ref temp2)))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= right8 (mk_int__ref right3)))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= left7 (mk_int__ref left2)))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= a8 (mk_map__ref a2)))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= rho2 rho))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= temp8 temp2))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= right9 right3))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= left8 left2))))
(assert (=> (< 0 space2) (=> (not (< right3 8)) (= a9 a2))))
(assert (=> (< 0 space2) (= result11 (mk_int__ref space3))))
(assert (=> (< 0 space2) (= space4 (div1 space3 2))))
(assert (=> (< 0 space2) (not (< 0 space4))))
(assert (=> (< 0 space2) (= temp9 temp7)))
(assert (=> (< 0 space2) (= right10 right8)))
(assert (=> (< 0 space2) (= left9 left7)))
(assert (=> (< 0 space2) (= space5 (mk_int__ref space4))))
(assert (=> (< 0 space2) (= a10 a8)))
(assert (=> (< 0 space2) (= temp10 temp8)))
(assert (=> (< 0 space2) (= right11 right9)))
(assert (=> (< 0 space2) (= left10 left8)))
(assert (=> (< 0 space2) (= space6 space4)))
(assert (=> (< 0 space2) (= a11 a9)))
(assert (=> (< 0 space2) (= temp11 temp9)))
(assert (=> (< 0 space2) (= right12 right10)))
(assert (=> (< 0 space2) (= left11 left9)))
(assert (=> (< 0 space2) (= space7 space5)))
(assert (=> (< 0 space2) (= a12 a10)))
(assert (=> (< 0 space2) (= temp12 temp10)))
(assert (=> (< 0 space2) (= right13 right11)))
(assert (=> (< 0 space2) (= left12 left10)))
(assert (=> (< 0 space2) (= space8 space6)))
(assert (=> (< 0 space2) (= a13 a11)))
(assert (=> (not (< 0 space2)) (= temp11 (mk_int__ref temp))))
(assert (=> (not (< 0 space2)) (= right12 (mk_int__ref right))))
(assert (=> (not (< 0 space2)) (= left11 (mk_int__ref left))))
(assert (=> (not (< 0 space2)) (= space7 (mk_int__ref space2))))
(assert (=> (not (< 0 space2)) (= a12 (mk_map__ref a1))))
(assert (=> (not (< 0 space2)) (= temp12 temp1)))
(assert (=> (not (< 0 space2)) (= right13 right1)))
(assert (=> (not (< 0 space2)) (= left12 left1)))
(assert (=> (not (< 0 space2)) (= space8 space2)))
(assert (=> (not (< 0 space2)) (= a13 a1)))
(assert (= temp13 temp11))
(assert (= right14 right12))
(assert (= left13 left11))
(assert (= space9 space7))
(assert (= a14 a12))
(assert (= temp14 temp12))
(assert (= right15 right13))
(assert (= left14 left12))
(assert (= space10 space8))
(assert (= a15 a13))
(assert (not (= (to_rep (select (map__content a14) 1)) (to_rep (select ghost__ 0)))))
(check-sat)
(exit)
