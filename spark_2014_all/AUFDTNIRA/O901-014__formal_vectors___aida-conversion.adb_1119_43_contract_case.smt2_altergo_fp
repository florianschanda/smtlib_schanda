(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic is_digit : int -> bool

logic is_digit__function_guard : bool, int -> prop

axiom is_digit__post_axiom :
  (forall c:int [is_digit(c)]. (in_range3(c) -> (((c = 48) ->
  (is_digit(c) = true)) and ((not (c = 48)) -> (((c = 49) ->
  (is_digit(c) = true)) and ((not (c = 49)) -> (((c = 50) ->
  (is_digit(c) = true)) and ((not (c = 50)) -> (((c = 51) ->
  (is_digit(c) = true)) and ((not (c = 51)) -> (((c = 52) ->
  (is_digit(c) = true)) and ((not (c = 52)) -> (((c = 53) ->
  (is_digit(c) = true)) and ((not (c = 53)) -> (((c = 54) ->
  (is_digit(c) = true)) and ((not (c = 54)) -> (((c = 55) ->
  (is_digit(c) = true)) and ((not (c = 55)) -> (((c = 56) ->
  (is_digit(c) = true)) and ((not (c = 56)) -> (((c = 57) ->
  (is_digit(c) = true)) and ((not (c = 57)) -> (((57 <  c) ->
  (not (is_digit(c) = true))) and ((not (57 <  c)) -> ((c <  48) ->
  (not (is_digit(c) = true)))))))))))))))))))))))))))

logic convert_character_digit_to_integer : int -> int

logic convert_character_digit_to_integer__function_guard : int, int -> prop

axiom convert_character_digit_to_integer__post_axiom :
  (forall source:int [convert_character_digit_to_integer(source)].
  ((in_range3(source) and (is_digit(source) = true)) ->
  ((((0 <= convert_character_digit_to_integer(source)) and
  (convert_character_digit_to_integer(source) <= 9)) and (((source = 48) ->
  (convert_character_digit_to_integer(source) = 0)) and
  ((not (source = 48)) -> (((source = 49) ->
  (convert_character_digit_to_integer(source) = 1)) and
  ((not (source = 49)) -> (((source = 50) ->
  (convert_character_digit_to_integer(source) = 2)) and
  ((not (source = 50)) -> (((source = 51) ->
  (convert_character_digit_to_integer(source) = 3)) and
  ((not (source = 51)) -> (((source = 52) ->
  (convert_character_digit_to_integer(source) = 4)) and
  ((not (source = 52)) -> (((source = 53) ->
  (convert_character_digit_to_integer(source) = 5)) and
  ((not (source = 53)) -> (((source = 54) ->
  (convert_character_digit_to_integer(source) = 6)) and
  ((not (source = 54)) -> (((source = 55) ->
  (convert_character_digit_to_integer(source) = 7)) and
  ((not (source = 55)) -> (((source = 56) ->
  (convert_character_digit_to_integer(source) = 8)) and
  ((not (source = 56)) -> ((source = 57) ->
  (convert_character_digit_to_integer(source) = 9))))))))))))))))))))) and
  in_range1(convert_character_digit_to_integer(source)))))

logic source : (int,character) farray

logic source1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic target : int

logic has_failed : bool

logic index : int

logic o : int

logic o1 : character

logic o2 : int

logic o3 : int

logic temp___1770 : int

logic o4 : int

logic o5 : character

logic o6 : int

logic o7 : int

logic o8 : int

logic temp___1771 : int

logic o9 : int

logic o10 : character

logic o11 : int

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic temp___1772 : int

logic o16 : int

logic o17 : character

logic o18 : int

logic o19 : int

logic o20 : int

logic temp___1773 : int

logic o21 : int

logic o22 : character

logic o23 : int

logic o24 : int

logic o25 : int

logic o26 : int

logic o27 : int

logic o28 : int

logic temp___1774 : int

logic o29 : int

logic o30 : character

logic o31 : int

logic o32 : int

logic o33 : int

logic o34 : int

logic o35 : int

logic o36 : int

logic o37 : int

logic temp___1775 : int

logic o38 : int

logic o39 : character

logic o40 : int

logic o41 : int

logic o42 : int

logic temp___1776 : int

logic o43 : int

logic o44 : character

logic o45 : int

logic o46 : int

logic o47 : int

logic o48 : int

logic o49 : int

logic o50 : int

logic temp___1777 : int

logic o51 : int

logic o52 : character

logic o53 : int

logic o54 : int

logic o55 : int

logic o56 : int

logic o57 : int

logic o58 : int

logic temp___1778 : int

logic o59 : int

logic o60 : character

logic o61 : int

logic o62 : int

logic o63 : int

logic o64 : int

logic o65 : int

logic o66 : int

logic o67 : int

logic temp___1779 : int

logic o68 : int

logic o69 : character

logic o70 : int

logic o71 : int

logic o72 : int

logic temp___1780 : int

logic o73 : int

logic o74 : character

logic o75 : int

logic o76 : int

logic o77 : int

logic o78 : int

logic o79 : int

logic o80 : int

logic temp___1781 : int

logic o81 : int

logic o82 : character

logic o83 : int

logic o84 : int

logic o85 : int

logic o86 : int

logic o87 : int

logic o88 : int

logic temp___1782 : int

logic o89 : int

logic o90 : character

logic o91 : int

logic o92 : int

logic o93 : int

logic o94 : int

logic o95 : int

logic o96 : int

logic temp___1783 : int

logic o97 : int

logic o98 : character

logic o99 : int

logic o100 : int

logic o101 : int

logic o102 : int

logic o103 : int

logic o104 : int

logic o105 : int

logic temp___1784 : int

logic o106 : int

logic o107 : character

logic o108 : int

logic o109 : int

logic o110 : int

logic temp___1785 : int

logic o111 : int

logic o112 : character

logic o113 : int

logic o114 : int

logic o115 : int

logic o116 : int

logic o117 : int

logic o118 : int

logic temp___1786 : int

logic o119 : int

logic o120 : character

logic o121 : int

logic o122 : int

logic o123 : int

logic o124 : int

logic o125 : int

logic o126 : int

logic temp___1787 : int

logic o127 : int

logic o128 : character

logic o129 : int

logic o130 : int

logic o131 : int

logic o132 : int

logic o133 : int

logic o134 : int

logic temp___1788 : int

logic o135 : int

logic o136 : character

logic o137 : int

logic o138 : int

logic o139 : int

logic o140 : int

logic o141 : int

logic o142 : int

logic temp___1789 : int

logic o143 : int

logic o144 : character

logic o145 : int

logic o146 : int

logic o147 : int

logic o148 : int

logic o149 : int

logic o150 : int

logic o151 : int

logic temp___1790 : int

logic o152 : int

logic o153 : character

logic o154 : int

logic o155 : int

logic o156 : int

logic temp___1791 : int

logic o157 : int

logic o158 : character

logic o159 : int

logic o160 : int

logic o161 : int

logic o162 : int

logic o163 : int

logic o164 : int

logic temp___1792 : int

logic o165 : int

logic o166 : character

logic o167 : int

logic o168 : int

logic o169 : int

logic o170 : int

logic o171 : int

logic o172 : int

logic temp___1793 : int

logic o173 : int

logic o174 : character

logic o175 : int

logic o176 : int

logic o177 : int

logic o178 : int

logic o179 : int

logic o180 : int

logic temp___1794 : int

logic o181 : int

logic o182 : character

logic o183 : int

logic o184 : int

logic o185 : int

logic o186 : int

logic o187 : int

logic o188 : int

logic temp___1795 : int

logic o189 : int

logic o190 : character

logic o191 : int

logic o192 : int

logic o193 : int

logic o194 : int

logic o195 : int

logic o196 : int

logic temp___1796 : int

logic o197 : int

logic o198 : character

logic o199 : int

logic o200 : int

logic o201 : int

logic o202 : int

logic o203 : int

logic o204 : int

logic o205 : int

logic temp___1797 : int

logic o206 : int

logic o207 : character

logic o208 : int

logic o209 : int

logic o210 : int

logic temp___1798 : int

logic o211 : int

logic o212 : character

logic o213 : int

logic o214 : int

logic o215 : int

logic o216 : int

logic o217 : int

logic o218 : int

logic temp___1799 : int

logic o219 : int

logic o220 : character

logic o221 : int

logic o222 : int

logic o223 : int

logic o224 : int

logic o225 : int

logic o226 : int

logic temp___1800 : int

logic o227 : int

logic o228 : character

logic o229 : int

logic o230 : int

logic o231 : int

logic o232 : int

logic o233 : int

logic o234 : int

logic temp___1801 : int

logic o235 : int

logic o236 : character

logic o237 : int

logic o238 : int

logic o239 : int

logic o240 : int

logic o241 : int

logic o242 : int

logic temp___1802 : int

logic o243 : int

logic o244 : character

logic o245 : int

logic o246 : int

logic o247 : int

logic o248 : int

logic o249 : int

logic o250 : int

logic temp___1803 : int

logic o251 : int

logic o252 : character

logic o253 : int

logic o254 : int

logic o255 : int

logic o256 : int

logic o257 : int

logic o258 : int

logic temp___1804 : int

logic o259 : int

logic o260 : character

logic o261 : int

logic o262 : int

logic o263 : int

logic o264 : int

logic o265 : int

logic o266 : int

logic o267 : int

logic temp___1805 : int

logic o268 : int

logic o269 : character

logic o270 : int

logic o271 : int

logic o272 : int

logic temp___1806 : int

logic o273 : int

logic o274 : character

logic o275 : int

logic o276 : int

logic o277 : int

logic o278 : int

logic o279 : int

logic o280 : int

logic temp___1807 : int

logic o281 : int

logic o282 : character

logic o283 : int

logic o284 : int

logic o285 : int

logic o286 : int

logic o287 : int

logic o288 : int

logic temp___1808 : int

logic o289 : int

logic o290 : character

logic o291 : int

logic o292 : int

logic o293 : int

logic o294 : int

logic o295 : int

logic o296 : int

logic temp___1809 : int

logic o297 : int

logic o298 : character

logic o299 : int

logic o300 : int

logic o301 : int

logic o302 : int

logic o303 : int

logic o304 : int

logic temp___1810 : int

logic o305 : int

logic o306 : character

logic o307 : int

logic o308 : int

logic o309 : int

logic o310 : int

logic o311 : int

logic o312 : int

logic temp___1811 : int

logic o313 : int

logic o314 : character

logic o315 : int

logic o316 : int

logic o317 : int

logic o318 : int

logic o319 : int

logic o320 : int

logic temp___1812 : int

logic o321 : int

logic o322 : character

logic o323 : int

logic o324 : int

logic o325 : int

logic o326 : int

logic o327 : int

logic o328 : int

logic temp___1813 : int

logic o329 : int

logic o330 : character

logic o331 : int

logic o332 : int

logic o333 : int

logic o334 : int

logic o335 : int

logic o336 : int

logic o337 : int

logic target1 : int

logic has_failed1 : bool

logic target2 : int

logic has_failed2 : bool

logic target3 : int

logic has_failed3 : bool

logic target4 : int

logic has_failed4 : bool

logic target5 : int

logic has_failed5 : bool

logic target6 : int

logic has_failed6 : bool

logic target7 : int

logic has_failed7 : bool

logic target8 : int

logic has_failed8 : bool

logic target9 : int

logic has_failed9 : bool

logic result : int

logic target10 : int

logic result1 : bool

logic has_failed10 : bool

logic target11 : int

logic has_failed11 : bool

logic target12 : int

logic has_failed12 : bool

axiom H : dynamic_property(1, 2147483647, to_rep1(first(source1)),
  to_rep1(last(source1)))

axiom H1 : (((- 2147483648) <= 2147483647) -> in_range1(target))

axiom H2 : (((0 <  length({ elts = source; rt = source1 })) and (length({
  elts = source; rt = source1 }) <  10)) and
  (forall index1:int. (((to_rep1(first(source1)) <= index1) and
  (index1 <= to_rep1(last(source1)))) ->
  (is_digit(to_rep((source[index1]))) = true))))

axiom H3 : ((length({ elts = source; rt = source1 }) = 1) ->
  (((not (has_failed1 = true)) and
  (target1 = convert_character_digit_to_integer(to_rep((source[to_rep1(first(source1))]))))) and
  in_range1(target1)))

axiom H4 : ((not (length({ elts = source; rt = source1 }) = 1)) -> ((length({
  elts = source; rt = source1 }) = 2) -> (((not (has_failed2 = true)) and
  (target2 = ((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10) + convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)])))))) and
  in_range1(target2))))

axiom H5 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((length({ elts =
  source; rt = source1 }) = 3) -> (((not (has_failed3 = true)) and
  (target3 = (((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1)))) and
  in_range1(target3)))))

axiom H6 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((length({ elts = source; rt =
  source1 }) = 4) -> (((not (has_failed4 = true)) and
  (target4 = ((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 1000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 1)))) and
  in_range1(target4))))))

axiom H7 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((length({ elts = source; rt = source1 }) = 5) ->
  (((not (has_failed5 = true)) and
  (target5 = (((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 1)))) and
  in_range1(target5)))))))

axiom H8 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((length({ elts = source; rt = source1 }) = 6) ->
  (((not (has_failed6 = true)) and
  (target6 = ((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 1)))) and
  in_range1(target6))))))))

axiom H9 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((length({ elts =
  source; rt = source1 }) = 7) -> (((not (has_failed7 = true)) and
  (target7 = (((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 1000000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 100000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 6)]))) * 1)))) and
  in_range1(target7)))))))))

axiom H10 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((length({ elts = source; rt =
  source1 }) = 8) -> (((not (has_failed8 = true)) and
  (target8 = ((((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10000000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 1000000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 100000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 6)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 7)]))) * 1)))) and
  in_range1(target8))))))))))

axiom H11 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> ((length({ elts = source; rt = source1 }) = 9) ->
  (((not (has_failed9 = true)) and
  (target9 = (((((((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100000000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10000000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1000000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 100000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 4)]))) * 10000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 5)]))) * 1000)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 6)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 7)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 8)]))) * 1)))) and
  in_range1(target9)))))))))))

axiom H12 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> ((not (length({ elts = source; rt = source1 }) = 9)) ->
  (result = target))))))))))

axiom H13 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> ((not (length({ elts = source; rt = source1 }) = 9)) ->
  (target10 = 0))))))))))

axiom H14 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> ((not (length({ elts = source; rt = source1 }) = 9)) ->
  (result1 = has_failed))))))))))

axiom H15 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> ((not (length({ elts = source; rt = source1 }) = 9)) ->
  (has_failed10 = of_int(1)))))))))))

axiom H16 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> ((not (length({ elts = source; rt = source1 }) = 9)) ->
  (has_failed9 = has_failed10))))))))))

axiom H17 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> ((not (length({ elts = source; rt = source1 }) = 9)) ->
  (target9 = target10))))))))))

axiom H18 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> (has_failed8 = has_failed9)))))))))

axiom H19 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> ((not (length({ elts = source; rt =
  source1 }) = 8)) -> (target8 = target9)))))))))

axiom H20 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> (has_failed7 = has_failed8))))))))

axiom H21 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) -> ((not (length({
  elts = source; rt = source1 }) = 7)) -> (target7 = target8))))))))

axiom H22 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) ->
  (has_failed6 = has_failed7)))))))

axiom H23 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  ((not (length({ elts = source; rt = source1 }) = 6)) ->
  (target6 = target7)))))))

axiom H24 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  (has_failed5 = has_failed6))))))

axiom H25 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> ((not (length({ elts = source; rt = source1 }) = 5)) ->
  (target5 = target6))))))

axiom H26 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> (has_failed4 = has_failed5)))))

axiom H27 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> ((not (length({ elts = source; rt =
  source1 }) = 4)) -> (target4 = target5)))))

axiom H28 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> (has_failed3 = has_failed4))))

axiom H29 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) -> ((not (length({
  elts = source; rt = source1 }) = 3)) -> (target3 = target4))))

axiom H30 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) ->
  (has_failed2 = has_failed3)))

axiom H31 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  ((not (length({ elts = source; rt = source1 }) = 2)) ->
  (target2 = target3)))

axiom H32 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  (has_failed1 = has_failed2))

axiom H33 : ((not (length({ elts = source; rt = source1 }) = 1)) ->
  (target1 = target2))

axiom H34 : (has_failed1 = has_failed11)

axiom H35 : (target1 = target11)

axiom H36 : (has_failed12 = has_failed1)

axiom H37 : (target12 = target1)

axiom H38 : ((bool_eq(length({ elts = source; rt = source1 }), 1) = true) ->
  (target11 = convert_character_digit_to_integer(to_rep((source[to_rep1(first(source1))])))))

axiom H39 : ((bool_eq(length({ elts = source; rt = source1 }), 2) = true) ->
  (target11 = ((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 10) + convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))))))

axiom H40 : ((bool_eq(length({ elts = source; rt = source1 }), 3) = true) ->
  (target11 = (((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 100) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 1))))

axiom H41 : (bool_eq(length({ elts = source; rt = source1 }), 4) = true)

 (* File "aida-conversion.adb", line 1093, characters 0-0 *)
goal WP_parameter_def :
  (target11 = ((((convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 0)]))) * 1000) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 1)]))) * 100)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 2)]))) * 10)) + (convert_character_digit_to_integer(to_rep((source[(to_rep1(first(source1)) + 3)]))) * 1)))
