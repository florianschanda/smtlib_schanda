(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type int__

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : int__, int__ -> bool

logic dummy6 : int__

type int____ref = { int____content : int__
}

function int____ref___2__projection(a: int____ref) : int__ =
  (a).int____content

logic eof : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic eof_ch : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type file_descr

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : file_descr, file_descr -> bool

logic dummy7 : file_descr

type file_descr__ref = { file_descr__content : file_descr
}

function file_descr__ref___projection(a: file_descr__ref) : file_descr =
  (a).file_descr__content

logic to_rep2 : file_descr -> int

logic of_rep2 : int -> file_descr

axiom inversion_axiom2 :
  (forall x:file_descr [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:file_descr [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

type count

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : count, count -> bool

logic dummy8 : count

type count__ref = { count__content : count
}

function count__ref___projection(a: count__ref) : count = (a).count__content

logic to_rep3 : count -> int

logic of_rep3 : int -> count

axiom inversion_axiom3 :
  (forall x:count [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:count [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__textio__file_type__descr : file_descr;
rec__textio__file_type__before_lm : bool;
rec__textio__file_type__before_lm_pm : bool; rec__textio__file_type__col :
count; rec__textio__file_type__line : count; rec__textio__file_type__page :
count; rec__textio__file_type__is_regular_file : bool
}

function us_split_fields_Descr__projection(a: us_split_fields) : file_descr =
  (a).rec__textio__file_type__descr

function us_split_fields_Before_LM__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm

function us_split_fields_Before_LM_PM__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm_pm

function us_split_fields_Col__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__col

function us_split_fields_Line__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__line

function us_split_fields_Page__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__page

function us_split_fields_Is_Regular_File__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__is_regular_file

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  (((((((((to_rep2(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep2(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm = ((b).us_split_fields1).rec__textio__file_type__before_lm)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm_pm = ((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__col) = to_rep3(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__line) = to_rep3(((b).us_split_fields1).rec__textio__file_type__line))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__page) = to_rep3(((b).us_split_fields1).rec__textio__file_type__page))) and
  (((a).us_split_fields1).rec__textio__file_type__is_regular_file = ((b).us_split_fields1).rec__textio__file_type__is_regular_file)) ->
  (bool_eq11(a, b) = true)) and
  ((not (((((((to_rep2(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep2(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm = ((b).us_split_fields1).rec__textio__file_type__before_lm)) and
  (((a).us_split_fields1).rec__textio__file_type__before_lm_pm = ((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__col) = to_rep3(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__line) = to_rep3(((b).us_split_fields1).rec__textio__file_type__line))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__page) = to_rep3(((b).us_split_fields1).rec__textio__file_type__page))) and
  (((a).us_split_fields1).rec__textio__file_type__is_regular_file = ((b).us_split_fields1).rec__textio__file_type__is_regular_file))) ->
  (bool_eq11(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:file_descr. forall a1:bool. forall a2:bool. forall a3:count.
  forall a4:count. forall a5:count. forall a6:bool. (0 <= object__size1({
  us_split_fields1 = { rec__textio__file_type__descr = a;
  rec__textio__file_type__before_lm = a1;
  rec__textio__file_type__before_lm_pm = a2; rec__textio__file_type__col =
  a3; rec__textio__file_type__line = a4; rec__textio__file_type__page = a5;
  rec__textio__file_type__is_regular_file = a6 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:file_descr. forall a1:bool. forall a2:bool. forall a3:count.
  forall a4:count. forall a5:count. forall a6:bool.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__textio__file_type__descr = a; rec__textio__file_type__before_lm = a1;
  rec__textio__file_type__before_lm_pm = a2; rec__textio__file_type__col =
  a3; rec__textio__file_type__line = a4; rec__textio__file_type__page = a5;
  rec__textio__file_type__is_regular_file = a6 } })))

logic textio__file_type__descr__first__bit : int

logic textio__file_type__descr__last__bit : int

logic textio__file_type__descr__position : int

axiom textio__file_type__descr__first__bit_axiom :
  (0 <= textio__file_type__descr__first__bit)

axiom textio__file_type__descr__last__bit_axiom :
  (textio__file_type__descr__first__bit <  textio__file_type__descr__last__bit)

axiom textio__file_type__descr__position_axiom :
  (0 <= textio__file_type__descr__position)

logic textio__file_type__before_lm__first__bit : int

logic textio__file_type__before_lm__last__bit : int

logic textio__file_type__before_lm__position : int

axiom textio__file_type__before_lm__first__bit_axiom :
  (0 <= textio__file_type__before_lm__first__bit)

axiom textio__file_type__before_lm__last__bit_axiom :
  (textio__file_type__before_lm__first__bit <  textio__file_type__before_lm__last__bit)

axiom textio__file_type__before_lm__position_axiom :
  (0 <= textio__file_type__before_lm__position)

logic textio__file_type__before_lm_pm__first__bit : int

logic textio__file_type__before_lm_pm__last__bit : int

logic textio__file_type__before_lm_pm__position : int

axiom textio__file_type__before_lm_pm__first__bit_axiom :
  (0 <= textio__file_type__before_lm_pm__first__bit)

axiom textio__file_type__before_lm_pm__last__bit_axiom :
  (textio__file_type__before_lm_pm__first__bit <  textio__file_type__before_lm_pm__last__bit)

axiom textio__file_type__before_lm_pm__position_axiom :
  (0 <= textio__file_type__before_lm_pm__position)

logic textio__file_type__col__first__bit : int

logic textio__file_type__col__last__bit : int

logic textio__file_type__col__position : int

axiom textio__file_type__col__first__bit_axiom :
  (0 <= textio__file_type__col__first__bit)

axiom textio__file_type__col__last__bit_axiom :
  (textio__file_type__col__first__bit <  textio__file_type__col__last__bit)

axiom textio__file_type__col__position_axiom :
  (0 <= textio__file_type__col__position)

logic textio__file_type__line__first__bit : int

logic textio__file_type__line__last__bit : int

logic textio__file_type__line__position : int

axiom textio__file_type__line__first__bit_axiom :
  (0 <= textio__file_type__line__first__bit)

axiom textio__file_type__line__last__bit_axiom :
  (textio__file_type__line__first__bit <  textio__file_type__line__last__bit)

axiom textio__file_type__line__position_axiom :
  (0 <= textio__file_type__line__position)

logic textio__file_type__page__first__bit : int

logic textio__file_type__page__last__bit : int

logic textio__file_type__page__position : int

axiom textio__file_type__page__first__bit_axiom :
  (0 <= textio__file_type__page__first__bit)

axiom textio__file_type__page__last__bit_axiom :
  (textio__file_type__page__first__bit <  textio__file_type__page__last__bit)

axiom textio__file_type__page__position_axiom :
  (0 <= textio__file_type__page__position)

logic textio__file_type__is_regular_file__first__bit : int

logic textio__file_type__is_regular_file__last__bit : int

logic textio__file_type__is_regular_file__position : int

axiom textio__file_type__is_regular_file__first__bit_axiom :
  (0 <= textio__file_type__is_regular_file__first__bit)

axiom textio__file_type__is_regular_file__last__bit_axiom :
  (textio__file_type__is_regular_file__first__bit <  textio__file_type__is_regular_file__last__bit)

axiom textio__file_type__is_regular_file__position_axiom :
  (0 <= textio__file_type__is_regular_file__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : file_descr

logic dummy10 : bool

logic dummy11 : bool

logic dummy12 : count

logic dummy13 : count

logic dummy14 : count

logic dummy15 : bool

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref___projection(a: file_type__ref) : us_rep =
  (a).file_type__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic item__first : integer

logic item__last : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic end_of_file : us_rep, int, (int,character) farray -> bool

logic end_of_file__function_guard : bool, us_rep, int,
  (int,character) farray -> prop

logic fpeek : us_rep, int, (int,character) farray -> int

logic fpeek__function_guard : int, us_rep, int,
  (int,character) farray -> prop

axiom end_of_file__post_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> ((end_of_file({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = true) <-> (fpeek({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = eof))))))

logic cur_position_at_start : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic eof_at_start : bool

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic no_char_in_slice : int, int, int, (int,character) farray -> bool

logic no_char_in_slice__function_guard : bool, int, int, int,
  (int,character) farray -> prop

logic find_char_in_slice : int, int, int, (int,character) farray -> int

logic find_char_in_slice__function_guard : int, int, int, int,
  (int,character) farray -> prop

logic attr__ATTRIBUTE_ADDRESS11 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy16 : integer

type t49b__ref = { t49b__content : integer
}

function t49b__ref___projection(a: t49b__ref) : integer = (a).t49b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq13(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq10 : us_t1, us_t1 -> bool

logic dummy17 : (int,character) farray

logic dummy18 : t1

type t50b__ref = { t50b__content : us_t1
}

function t50b__ref___projection(a: t50b__ref) : us_t1 = (a).t50b__content

logic temp___605 : int, int, int -> us_t1

logic fpeek1 : int, int, (int,character) farray -> int

logic fpeek__function_guard1 : int, int, int, (int,character) farray -> prop

axiom fpeek__post_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> in_range5(fpeek({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file))))))

axiom fpeek__def_axiom :
  (forall file:file_descr. forall file1:bool. forall file2:bool.
  forall file3:count. forall file4:count. forall file5:count.
  forall file6:bool.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek({
  us_split_fields1 = { rec__textio__file_type__descr = file;
  rec__textio__file_type__before_lm = file1;
  rec__textio__file_type__before_lm_pm = file2; rec__textio__file_type__col =
  file3; rec__textio__file_type__line = file4; rec__textio__file_type__page =
  file5; rec__textio__file_type__is_regular_file = file6 } },
  helpers__cur_position, helpers__the_file)].
  (in_range2(helpers__cur_position) -> (fpeek({ us_split_fields1 = {
  rec__textio__file_type__descr = file; rec__textio__file_type__before_lm =
  file1; rec__textio__file_type__before_lm_pm = file2;
  rec__textio__file_type__col = file3; rec__textio__file_type__line = file4;
  rec__textio__file_type__page = file5;
  rec__textio__file_type__is_regular_file = file6 } }, helpers__cur_position,
  helpers__the_file) = fpeek1(to_rep2(file), helpers__cur_position,
  helpers__the_file))))))

axiom eof_ch__def_axiom : (eof_ch = mod(eof, 256))

axiom fpeek__post_axiom1 :
  (forall stream:int. forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek1(stream,
  helpers__cur_position, helpers__the_file)]. ((in_range6(stream) and
  in_range2(helpers__cur_position)) -> in_range5(fpeek1(stream,
  helpers__cur_position, helpers__the_file)))))

axiom fpeek__def_axiom1 :
  (forall stream:int. forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek1(stream,
  helpers__cur_position, helpers__the_file)]. ((in_range6(stream) and
  in_range2(helpers__cur_position)) ->
  (((to_rep((helpers__the_file[helpers__cur_position])) = eof_ch) ->
  (fpeek1(stream, helpers__cur_position, helpers__the_file) = eof)) and
  ((not (to_rep((helpers__the_file[helpers__cur_position])) = eof_ch)) ->
  (fpeek1(stream, helpers__cur_position,
  helpers__the_file) = to_rep((helpers__the_file[helpers__cur_position]))))))))

axiom no_char_in_slice__post_axiom : true

axiom no_char_in_slice__def_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [no_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((no_char_in_slice(ch, from, to__,
  helpers__the_file) = true) <->
  (forall idx:int. (((from <= idx) and (idx <= to__)) ->
  (not (to_rep((helpers__the_file[idx])) = ch)))))))

logic has_char_in_slice : int, int, int, (int,character) farray -> bool

logic has_char_in_slice__function_guard : bool, int, int, int,
  (int,character) farray -> prop

axiom has_char_in_slice__post_axiom : true

axiom has_char_in_slice__def_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [has_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((has_char_in_slice(ch, from, to__,
  helpers__the_file) = true) <->
  (exists idx:int. (((from <= idx) and (idx <= to__)) and
  (to_rep((helpers__the_file[idx])) = ch))))))

axiom find_char_in_slice__post_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [find_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((((in_range3(ch) and in_range2(from)) and
  in_range2(to__)) and (has_char_in_slice(ch, from, to__,
  helpers__the_file) = true)) -> ((((from <= find_char_in_slice(ch, from,
  to__, helpers__the_file)) and (find_char_in_slice(ch, from, to__,
  helpers__the_file) <= to__)) and ((no_char_in_slice(ch, from,
  (find_char_in_slice(ch, from, to__, helpers__the_file) - 1),
  helpers__the_file) = true) and
  (to_rep((helpers__the_file[find_char_in_slice(ch, from, to__,
  helpers__the_file)])) = ch))) and in_range2(find_char_in_slice(ch, from,
  to__, helpers__the_file))))))

axiom def_axiom :
  (forall temp___607:int. forall temp___608:int. forall temp___609:int.
  (in_range3(temp___607) -> ((dynamic_property(1, 2147483647, temp___608,
  temp___609) -> ((to_rep1(first2((temp___605(temp___607, temp___608,
  temp___609)).rt1)) = temp___608) and (to_rep1(last2((temp___605(temp___607,
  temp___608, temp___609)).rt1)) = temp___609))) and
  (forall temp___610:int. (to_rep(((temp___605(temp___607, temp___608,
  temp___609)).elts1[temp___610])) = temp___607)))))

 (* File "textio-get_line.adb", line 173, characters 0-0 *)
goal WP_parameter_def :
  (forall the_file:(int,character) farray. forall cur_position:int.
  forall file__split_fields:file_descr. forall file__split_fields1:bool.
  forall file__split_fields2:bool. forall file__split_fields3:count.
  forall file__split_fields4:count. forall file__split_fields5:count.
  forall file__split_fields6:bool. forall item:(int,character) farray.
  forall last4:int. forall ch:int. forall n:int. forall rest:int.
  forall textio__get_line__eof_at_start__assume:bool.
  forall temp___612:(int,character) farray. forall temp___6121:t1.
  forall temp___613:(int,character) farray. forall temp___6131:t.
  forall temp___614:(int,character) farray. forall temp___6141:t.
  forall o:(int,character) farray. forall o1:int. forall o2:int.
  forall o3:int. forall o4:int. forall o5:int. forall o6:int.
  forall temp___620:int. forall temp___619:int.
  forall temp___618:(int,character) farray. forall temp___616:int.
  forall temp___623:int. forall temp___621:int. forall temp___615:int.
  forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall cur_position1:int. forall rest1:int.
  forall result:(int,character) farray. forall item1:(int,character) farray.
  forall result1:int. forall last5:int. forall result2:int. forall n1:int.
  forall cur_position2:int. forall item2:(int,character) farray.
  forall last6:int. forall n2:int. forall rest2:int.
  forall cur_position3:int. forall item3:(int,character) farray.
  forall last7:int. forall textio__get_line__get_chunk__rest:int.
  forall result3:int. forall rest3:int. forall result4:int. forall n3:int.
  forall result5:int. forall n4:int. forall cur_position4:int.
  forall item4:(int,character) farray. forall last8:int. forall n5:int.
  forall rest4:int. forall cur_position5:int.
  forall item5:(int,character) farray. forall last9:int. forall n6:int.
  forall rest5:int. forall cur_position6:int.
  forall item6:(int,character) farray. forall last10:int. forall n7:int.
  forall rest6:int. forall cur_position7:int.
  forall item7:(int,character) farray. forall last11:int. forall n8:int.
  forall rest7:int. forall cur_position8:int.
  forall item8:(int,character) farray. forall last12:int.
  forall textio__get_line__get_chunk__rest1:int. forall result6:int.
  forall rest8:int. forall result7:int. forall n9:int.
  forall cur_position9:int. forall item9:(int,character) farray.
  forall last13:int. forall n10:int. forall rest9:int.
  forall cur_position10:int. forall item10:(int,character) farray.
  forall last14:int. forall n11:int. forall rest10:int.
  forall cur_position11:int. forall ch1:int. forall result8:int.
  forall last15:int. (dynamic_property(1, 2147483647, to_rep1(item__first),
  to_rep1(item__last)) -> (((0 <= 2147483647) -> in_range4(last4)) ->
  (in_range2(cur_position) -> (in_range3(eof_ch) -> ((mod(eof,
  256) = eof_ch) -> (in_range5(eof) -> ((not (end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position, the_file) = true)) ->
  ((cur_position = cur_position_at_start) ->
  (in_range2(cur_position_at_start) ->
  ((((textio__get_line__eof_at_start__assume = end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position, the_file)) and
  ((textio__get_line__eof_at_start__assume = true) <-> (fpeek({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position, the_file) = eof))) and
  (textio__get_line__eof_at_start__assume = eof_at_start)) ->
  ((((- 2147483648) <= 2147483647) -> in_range5(ch)) ->
  (((0 <= 2147483647) -> in_range4(n)) -> ((((- 2147483648) <= 2147483647) ->
  in_range1(rest)) -> (((((((to_rep1(first2((temp___605(32,
  to_rep1(item__first),
  to_rep1(item__last))).rt1)) = to_rep1(item__first)) and
  ((to_rep1(last2((temp___605(32, to_rep1(item__first),
  to_rep1(item__last))).rt1)) = to_rep1(item__last)) and ({ elts1 =
  temp___612; rt1 = temp___6121 } = temp___605(32, to_rep1(item__first),
  to_rep1(item__last))))) and ((temp___612 = temp___613) and
  (mk(to_rep1(first2(temp___6121)),
  to_rep1(last2(temp___6121))) = temp___6131))) and
  ((((to_rep1(first(temp___6131)) <= to_rep1(last(temp___6131))) and
  (((to_rep1(item__first) <= to_rep1(item__last)) and
  (((to_rep1(last(temp___6131)) - to_rep1(first(temp___6131))) + 1) = ((to_rep1(item__last) - to_rep1(item__first)) + 1))) or
  ((not (to_rep1(item__first) <= to_rep1(item__last))) and
  (((to_rep1(last(temp___6131)) - to_rep1(first(temp___6131))) + 1) = 0)))) or
  ((not (to_rep1(first(temp___6131)) <= to_rep1(last(temp___6131)))) and
  (((to_rep1(item__first) <= to_rep1(item__last)) and
  (0 = ((to_rep1(item__last) - to_rep1(item__first)) + 1))) or
  (not (to_rep1(item__first) <= to_rep1(item__last)))))) and ({ elts =
  temp___614; rt = temp___6141 } = { elts = temp___613; rt = temp___6131
  }))) and (o = slide(temp___614, to_rep1(first(temp___6141)),
  to_rep1(item__first)))) and (({ map__content = result } = { map__content =
  item }) and (item1 = o))) -> (((((o1 = (to_rep1(item__first) - 1)) and
  in_range1((to_rep1(item__first) - 1))) and ((o2 = o1) and
  in_range4(o1))) and (({ int__content = result1 } = { int__content = last4
  }) and (last5 = o2))) ->
  ((not (to_rep1(item__last) <  to_rep1(item__first))) ->
  (((((((o3 = (to_rep1(item__last) - to_rep1(item__first))) and
  in_range1((to_rep1(item__last) - to_rep1(item__first)))) and
  (o4 = (o3 + 1))) and ((o5 = o4) and in_range1(o4))) and ((o6 = o5) and
  in_range4(o5))) and (({ int__content = result2 } = { int__content = n
  }) and (n1 = o6))) -> ((((80 <= n1) and ((((temp___620 = cur_position) and
  ((temp___619 = n1) and ((temp___618 = item1) and ((temp___616 = rest) and
  ((temp___623 = cur_position) and ((temp___621 = cur_position) and
  ((temp___615 = last5) and ((((to_rep1(item__first) <= (last6 + 1)) and
  ((last6 + n2) = to_rep1(item__last))) and
  ((forall idx:int. (((to_rep1(item__first) <= idx) and (idx <= last6)) ->
   (to_rep((item2[idx])) = to_rep((the_file[((idx - to_rep1(item__first)) + temp___621)]))))) and
  (cur_position2 = (((temp___623 + last6) - to_rep1(item__first)) + 1)))) and
  (((((((0 <= 2147483647) -> in_range4(last6)) and
  (((- 2147483648) <= 2147483647) -> in_range1(rest2))) and
  ((0 <= 2147483647) -> in_range4(n2))) and in_range2(cur_position2)) and
  (80 <= n2)) and ((cur_position2 <= 10000) and
  (((((forall idx:int. (((to_rep1(item__first) <= idx) and (idx <= last6)) ->
      (to_rep((item3[idx])) = to_rep((item2[idx]))))) and
  (((cur_position3 - cur_position2) = (last7 - last6)) and
  ((forall idx:int. ((((last6 + 1) <= idx) and (idx <= last7)) ->
   (to_rep((item3[idx])) = to_rep((the_file[(((idx - last6) - 1) + cur_position2)]))))) and
  (((80 = 1) and ((last7 = last6) and
  (textio__get_line__get_chunk__rest = 1))) or ((not (80 = 1)) and
  (((end_of_file({ us_split_fields1 = { rec__textio__file_type__descr =
  file__split_fields; rec__textio__file_type__before_lm =
  file__split_fields1; rec__textio__file_type__before_lm_pm =
  file__split_fields2; rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position2, the_file) = true) and ((last7 = last6) and
  (textio__get_line__get_chunk__rest = 0))) or ((not (end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position2, the_file) = true)) and ((((no_char_in_slice(10,
  cur_position2, ((cur_position2 + 80) - 2), the_file) = true) and
  (no_char_in_slice(eof_ch, cur_position2, ((cur_position2 + 80) - 2),
  the_file) = true)) and (((last7 = ((last6 + 80) - 1)) and
  (forall idx:int. (((1 <= idx) and (idx <= (80 - 1))) ->
  (to_rep((item3[(last6 + idx)])) = to_rep((the_file[((cur_position2 + idx) - 1)])))))) and
  (textio__get_line__get_chunk__rest = 1))) or ((not ((no_char_in_slice(10,
  cur_position2, ((cur_position2 + 80) - 2), the_file) = true) and
  (no_char_in_slice(eof_ch, cur_position2, ((cur_position2 + 80) - 2),
  the_file) = true))) and (((no_char_in_slice(eof_ch, cur_position2,
  ((cur_position2 + 80) - 2), the_file) = true) and
  (((last7 = ((last6 + find_char_in_slice(10, cur_position2,
  ((cur_position2 + 80) - 2), the_file)) - cur_position2)) and
  (forall idx:int. (((cur_position2 <= idx) and
  (idx <= (find_char_in_slice(10, cur_position2, ((cur_position2 + 80) - 2),
  the_file) - 1))) ->
  (to_rep((item3[(((last6 + idx) - cur_position2) + 1)])) = to_rep((the_file[idx])))))) and
  (textio__get_line__get_chunk__rest = 0))) or
  ((not (no_char_in_slice(eof_ch, cur_position2, ((cur_position2 + 80) - 2),
  the_file) = true)) and (((last7 = ((last6 + find_char_in_slice(eof_ch,
  cur_position2, ((cur_position2 + 80) - 2), the_file)) - cur_position2)) and
  (forall idx:int. (((cur_position2 <= idx) and
  (idx <= (find_char_in_slice(eof_ch, cur_position2,
  ((cur_position2 + 80) - 2), the_file) - 1))) ->
  (to_rep((item3[(((last6 + idx) - cur_position2) + 1)])) = to_rep((the_file[idx])))))) and
  (textio__get_line__get_chunk__rest = 0))))))))))))) and
  ((in_range4(textio__get_line__get_chunk__rest) and in_range4(last7)) and
  in_range2(cur_position3))) and ((rest2 = result3) and
  (rest3 = textio__get_line__get_chunk__rest))) and ((((rest3 = 0) and
  ((n2 = result4) and (n3 = 0))) or ((not (rest3 = 0)) and
  ((((o7 = ((n2 - 80) + 1)) and in_range4(((n2 - 80) + 1))) and
  ((n2 = result5) and (n4 = o7))) and (n3 = n4)))) and
  (not (80 <= n3)))))))))))))) and (((rest3 = rest4) and ((n3 = n5) and
  ((last7 = last8) and ((item3 = item4) and
  (cur_position3 = cur_position4))))) and ((rest5 = rest3) and ((n6 = n3) and
  ((last9 = last7) and ((item5 = item3) and
  (cur_position5 = cur_position3))))))) and ((({ int__content = rest6 } = {
  int__content = rest4 }) and (({ int__content = n7 } = { int__content = n5
  }) and (({ int__content = last10 } = { int__content = last8 }) and (({
  map__content = item6 } = { map__content = item4 }) and ({ int__content =
  cur_position6 } = { int__content = cur_position4 }))))) and
  ((rest7 = rest5) and ((n8 = n6) and ((last11 = last9) and
  ((item7 = item5) and (cur_position7 = cur_position5)))))))) or
  ((not (80 <= n1)) and ((({ int__content = rest6 } = { int__content = rest
  }) and ((n1 = n7) and ((last5 = last10) and ((item1 = item6) and ({
  int__content = cur_position6 } = { int__content = cur_position }))))) and
  ((rest7 = rest1) and ((n8 = n1) and ((last11 = last5) and
  ((item7 = item1) and (cur_position7 = cur_position1)))))))) ->
  ((((1 <  n7) and (((cur_position6 <= 10000) and (((((o8 = n7) and
  in_range2(n7)) and
  (((forall idx:int. (((to_rep1(item__first) <= idx) and (idx <= last10)) ->
    (to_rep((item8[idx])) = to_rep((item6[idx]))))) and
  (((cur_position8 - cur_position6) = (last12 - last10)) and
  ((forall idx:int. ((((last10 + 1) <= idx) and (idx <= last12)) ->
   (to_rep((item8[idx])) = to_rep((the_file[(((idx - last10) - 1) + cur_position6)]))))) and
  (((o8 = 1) and ((last12 = last10) and
  (textio__get_line__get_chunk__rest1 = 1))) or ((not (o8 = 1)) and
  (((end_of_file({ us_split_fields1 = { rec__textio__file_type__descr =
  file__split_fields; rec__textio__file_type__before_lm =
  file__split_fields1; rec__textio__file_type__before_lm_pm =
  file__split_fields2; rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position6, the_file) = true) and ((last12 = last10) and
  (textio__get_line__get_chunk__rest1 = 0))) or ((not (end_of_file({
  us_split_fields1 = { rec__textio__file_type__descr = file__split_fields;
  rec__textio__file_type__before_lm = file__split_fields1;
  rec__textio__file_type__before_lm_pm = file__split_fields2;
  rec__textio__file_type__col = file__split_fields3;
  rec__textio__file_type__line = file__split_fields4;
  rec__textio__file_type__page = file__split_fields5;
  rec__textio__file_type__is_regular_file = file__split_fields6 } },
  cur_position6, the_file) = true)) and ((((no_char_in_slice(10,
  cur_position6, ((cur_position6 + o8) - 2), the_file) = true) and
  (no_char_in_slice(eof_ch, cur_position6, ((cur_position6 + o8) - 2),
  the_file) = true)) and (((last12 = ((last10 + o8) - 1)) and
  (forall idx:int. (((1 <= idx) and (idx <= (o8 - 1))) ->
  (to_rep((item8[(last10 + idx)])) = to_rep((the_file[((cur_position6 + idx) - 1)])))))) and
  (textio__get_line__get_chunk__rest1 = 1))) or ((not ((no_char_in_slice(10,
  cur_position6, ((cur_position6 + o8) - 2), the_file) = true) and
  (no_char_in_slice(eof_ch, cur_position6, ((cur_position6 + o8) - 2),
  the_file) = true))) and (((no_char_in_slice(eof_ch, cur_position6,
  ((cur_position6 + o8) - 2), the_file) = true) and
  (((last12 = ((last10 + find_char_in_slice(10, cur_position6,
  ((cur_position6 + o8) - 2), the_file)) - cur_position6)) and
  (forall idx:int. (((cur_position6 <= idx) and
  (idx <= (find_char_in_slice(10, cur_position6, ((cur_position6 + o8) - 2),
  the_file) - 1))) ->
  (to_rep((item8[(((last10 + idx) - cur_position6) + 1)])) = to_rep((the_file[idx])))))) and
  (textio__get_line__get_chunk__rest1 = 0))) or
  ((not (no_char_in_slice(eof_ch, cur_position6, ((cur_position6 + o8) - 2),
  the_file) = true)) and (((last12 = ((last10 + find_char_in_slice(eof_ch,
  cur_position6, ((cur_position6 + o8) - 2), the_file)) - cur_position6)) and
  (forall idx:int. (((cur_position6 <= idx) and
  (idx <= (find_char_in_slice(eof_ch, cur_position6,
  ((cur_position6 + o8) - 2), the_file) - 1))) ->
  (to_rep((item8[(((last10 + idx) - cur_position6) + 1)])) = to_rep((the_file[idx])))))) and
  (textio__get_line__get_chunk__rest1 = 0))))))))))))) and
  ((in_range4(textio__get_line__get_chunk__rest1) and in_range4(last12)) and
  in_range2(cur_position8)))) and ((result6 = rest6) and
  (rest8 = textio__get_line__get_chunk__rest1))) and (((o9 = rest8) and
  in_range4(rest8)) and ((result7 = n7) and (n9 = o9))))) and
  (((rest8 = rest9) and ((n9 = n10) and ((last12 = last13) and
  ((item8 = item9) and (cur_position8 = cur_position9))))) and
  ((rest10 = rest8) and ((n11 = n9) and ((last14 = last12) and
  ((item10 = item8) and (cur_position10 = cur_position8)))))))) or
  ((not (1 <  n7)) and ((({ int__content = rest9 } = { int__content = rest6
  }) and (({ int__content = n10 } = { int__content = n7 }) and (({
  int__content = last13 } = { int__content = last10 }) and (({ map__content =
  item9 } = { map__content = item6 }) and ({ int__content = cur_position9
  } = { int__content = cur_position6 }))))) and ((rest10 = rest7) and
  ((n11 = n8) and ((last14 = last11) and ((item10 = item7) and
  (cur_position10 = cur_position7)))))))) -> ((n10 = 1) ->
  (((last13 + n10) = to_rep1(item__last)) ->
  (((((to_rep((the_file[cur_position9])) = eof_ch) and
  ((cur_position11 = cur_position9) and (ch1 = eof))) or
  ((not (to_rep((the_file[cur_position9])) = eof_ch)) and
  (((to_rep((the_file[cur_position9])) = 10) and
  ((cur_position11 = cur_position9) and (ch1 = 10))) or
  ((not (to_rep((the_file[cur_position9])) = 10)) and
  ((cur_position11 = (cur_position9 + 1)) and
  (ch1 = to_rep((the_file[cur_position9])))))))) and (in_range5(ch1) and
  in_range2(cur_position11))) -> ((not (ch1 = eof)) -> ((not (ch1 = 10)) ->
  ((((o10 = (last13 + 1)) and in_range1((last13 + 1))) and
  ((result8 = last13) and (last15 = o10))) ->
  in_range3(ch1)))))))))))))))))))))))))))
