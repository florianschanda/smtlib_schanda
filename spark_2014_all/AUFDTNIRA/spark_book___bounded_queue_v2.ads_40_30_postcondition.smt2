(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (positive positive) Bool)
(declare-const dummy2 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun to_rep1 ((x positive)) Int (positiveqtint x))
(declare-fun of_rep1 (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x positive)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun to_rep2 ((x integer)) Int (integerqtint x))
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort element_type 0)
(declare-fun element_typeqtint (element_type) Int)
(assert (forall ((i element_type)) (and (<= (- 2147483648) (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (element_type element_type) Bool)
(declare-const dummy3 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun to_rep3 ((x element_type)) Int (element_typeqtint x))
(declare-fun of_rep3 (Int) element_type)
(assert (forall ((x element_type)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x element_type)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int element_type))))))
(declare-fun slide ((Array Int element_type) Int Int) (Array Int element_type))
(assert (forall ((a (Array Int element_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int element_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int element_type)) (a__first Int) (a__last Int) (b (Array Int element_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep3 (select a temp___idx_154)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int element_type)) (b (Array Int element_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep3 (select a temp___idx_154)) (to_rep3 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (integer integer) Bool)
(declare-const dummy4 integer)
(declare-datatypes () ((t14s__ref (mk_t14s__ref (t14s__content integer)))))
(define-fun t14s__ref___projection ((a t14s__ref)) integer (t14s__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int element_type)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int element_type) (elts a))
(define-fun of_array ((a (Array Int element_type)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int element_type)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int element_type)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int element_type)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int element_type))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int element_type))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int element_type))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((t15s__ref (mk_t15s__ref (t15s__content us_t)))))
(define-fun t15s__ref___projection ((a t15s__ref)) us_t (t15s__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__bounded_queue_v2__queue_type__max_size positive)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) positive (rec__bounded_queue_v2__queue_type__max_size a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__bounded_queue_v2__queue_type__count natural) (rec__bounded_queue_v2__queue_type__front positive) (rec__bounded_queue_v2__queue_type__rear positive) (rec__bounded_queue_v2__queue_type__items us_t)))))
(define-fun us_split_fields_Count__projection ((a us_split_fields)) natural (rec__bounded_queue_v2__queue_type__count a))
(define-fun us_split_fields_Front__projection ((a us_split_fields)) positive (rec__bounded_queue_v2__queue_type__front a))
(define-fun us_split_fields_Rear__projection ((a us_split_fields)) positive (rec__bounded_queue_v2__queue_type__rear a))
(define-fun us_split_fields_Items__projection ((a us_split_fields)) us_t (rec__bounded_queue_v2__queue_type__items a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__bounded_queue_v2__queue_type__max_size (us_split_discrs1 a))) (to_rep1 (rec__bounded_queue_v2__queue_type__max_size (us_split_discrs1 b)))) (and (and (and (= (to_rep (rec__bounded_queue_v2__queue_type__count (us_split_fields1 a))) (to_rep (rec__bounded_queue_v2__queue_type__count (us_split_fields1 b)))) (= (to_rep1 (rec__bounded_queue_v2__queue_type__front (us_split_fields1 a))) (to_rep1 (rec__bounded_queue_v2__queue_type__front (us_split_fields1 b))))) (= (to_rep1 (rec__bounded_queue_v2__queue_type__rear (us_split_fields1 a))) (to_rep1 (rec__bounded_queue_v2__queue_type__rear (us_split_fields1 b))))) (= (bool_eq1 (rec__bounded_queue_v2__queue_type__items (us_split_fields1 a)) (rec__bounded_queue_v2__queue_type__items (us_split_fields1 b))) true))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const bounded_queue_v2__queue_type__max_size__first__bit Int)
(declare-const bounded_queue_v2__queue_type__max_size__last__bit Int)
(declare-const bounded_queue_v2__queue_type__max_size__position Int)
(assert (<= 0 bounded_queue_v2__queue_type__max_size__first__bit))
(assert (< bounded_queue_v2__queue_type__max_size__first__bit bounded_queue_v2__queue_type__max_size__last__bit))
(assert (<= 0 bounded_queue_v2__queue_type__max_size__position))
(declare-const bounded_queue_v2__queue_type__count__first__bit Int)
(declare-const bounded_queue_v2__queue_type__count__last__bit Int)
(declare-const bounded_queue_v2__queue_type__count__position Int)
(assert (<= 0 bounded_queue_v2__queue_type__count__first__bit))
(assert (< bounded_queue_v2__queue_type__count__first__bit bounded_queue_v2__queue_type__count__last__bit))
(assert (<= 0 bounded_queue_v2__queue_type__count__position))
(declare-const bounded_queue_v2__queue_type__front__first__bit Int)
(declare-const bounded_queue_v2__queue_type__front__last__bit Int)
(declare-const bounded_queue_v2__queue_type__front__position Int)
(assert (<= 0 bounded_queue_v2__queue_type__front__first__bit))
(assert (< bounded_queue_v2__queue_type__front__first__bit bounded_queue_v2__queue_type__front__last__bit))
(assert (<= 0 bounded_queue_v2__queue_type__front__position))
(declare-const bounded_queue_v2__queue_type__rear__first__bit Int)
(declare-const bounded_queue_v2__queue_type__rear__last__bit Int)
(declare-const bounded_queue_v2__queue_type__rear__position Int)
(assert (<= 0 bounded_queue_v2__queue_type__rear__first__bit))
(assert (< bounded_queue_v2__queue_type__rear__first__bit bounded_queue_v2__queue_type__rear__last__bit))
(assert (<= 0 bounded_queue_v2__queue_type__rear__position))
(declare-const bounded_queue_v2__queue_type__items__first__bit Int)
(declare-const bounded_queue_v2__queue_type__items__last__bit Int)
(declare-const bounded_queue_v2__queue_type__items__position Int)
(assert (<= 0 bounded_queue_v2__queue_type__items__first__bit))
(assert (< bounded_queue_v2__queue_type__items__first__bit bounded_queue_v2__queue_type__items__last__bit))
(assert (<= 0 bounded_queue_v2__queue_type__items__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((queue_type__ref (mk_queue_type__ref (queue_type__content us_rep)))))
(define-fun queue_type__ref___projection ((a queue_type__ref)) us_rep (queue_type__content a))
(declare-fun empty (us_rep) Bool)
(declare-fun empty__function_guard (Bool us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_182 us_rep) (temp___is_init_178 Bool) (temp___skip_constant_179 Bool) (temp___do_toplevel_180 Bool) (temp___do_typ_inv_181 Bool)) Bool (let ((temp___183 (rec__bounded_queue_v2__queue_type__max_size (us_split_discrs1 temp___expr_182)))) (and (dynamic_property1 1 (to_rep1 temp___183) (first1 (rec__bounded_queue_v2__queue_type__items (us_split_fields1 temp___expr_182))) (last1 (rec__bounded_queue_v2__queue_type__items (us_split_fields1 temp___expr_182)))) (and (= (first1 (rec__bounded_queue_v2__queue_type__items (us_split_fields1 temp___expr_182))) 1) (= (last1 (rec__bounded_queue_v2__queue_type__items (us_split_fields1 temp___expr_182))) (to_rep1 temp___183))))))
(assert true)
(declare-fun size (us_rep) Int)
(declare-fun size__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range1 temp___expr_39)))
(assert (forall ((queue us_rep)) (! (=> (dynamic_invariant queue true true true true) (dynamic_invariant1 (size queue) true false true true)) :pattern ((size queue)))))
(declare-fun first_element (us_rep) Int)
(declare-fun first_element__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant2 ((temp___expr_169 Int) (temp___is_init_165 Bool) (temp___skip_constant_166 Bool) (temp___do_toplevel_167 Bool) (temp___do_typ_inv_168 Bool)) Bool (=> (or (= temp___is_init_165 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_169)))
(assert (forall ((queue us_rep)) (! (=> (and (dynamic_invariant queue true true true true) (not (= (empty queue) true))) (dynamic_invariant2 (first_element queue) true false true true)) :pattern ((first_element queue)))))
(declare-const queue__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-const queue__split_fields natural)
(declare-const queue__split_fields1 positive)
(declare-const queue__split_fields2 positive)
(declare-const queue__split_fields3 (Array Int element_type))
(declare-const queue__split_fields4 t)
(declare-const item Int)
(declare-const o Int)
(declare-const o1 element_type)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 positive)
(declare-const o6 natural)
(declare-const o7 positive)
(declare-const o8 positive)
(declare-const o9 (Array Int element_type))
(declare-const o10 t)
(declare-const temp___325 positive)
(declare-const temp___3251 natural)
(declare-const temp___3252 positive)
(declare-const temp___3253 positive)
(declare-const temp___3254 (Array Int element_type))
(declare-const temp___3255 t)
(declare-const o11 Int)
(declare-const o12 natural)
(declare-const o13 natural)
(declare-const o14 positive)
(declare-const o15 positive)
(declare-const o16 (Array Int element_type))
(declare-const o17 t)
(declare-const temp___327 positive)
(declare-const temp___3271 natural)
(declare-const temp___3272 positive)
(declare-const temp___3273 positive)
(declare-const temp___3274 (Array Int element_type))
(declare-const temp___3275 t)
(declare-const result Int)
(declare-const item1 Int)
(declare-const result1 natural)
(declare-const result2 positive)
(declare-const result3 positive)
(declare-const result4 (Array Int element_type))
(declare-const result5 t)
(declare-const queue__split_fields5 natural)
(declare-const queue__split_fields6 positive)
(declare-const queue__split_fields7 positive)
(declare-const queue__split_fields8 (Array Int element_type))
(declare-const queue__split_fields9 t)
(declare-const result6 us_split_fields__ref)
(declare-const queue__split_fields10 us_split_fields)
(declare-const queue__split_fields11 us_split_fields__ref)
(declare-const item2 int__ref)
(declare-const queue__split_fields12 us_split_fields)
(declare-const item3 Int)
(assert (dynamic_invariant (mk___rep queue__split_discrs (mk___split_fields queue__split_fields queue__split_fields1 queue__split_fields2 (mk___t queue__split_fields3 queue__split_fields4))) true false true true))
(assert (=> (<= (- 2147483648) 2147483647) (in_range3 item)))
(assert (not (= (empty (mk___rep queue__split_discrs (mk___split_fields queue__split_fields queue__split_fields1 queue__split_fields2 (mk___t queue__split_fields3 queue__split_fields4)))) true)))
(assert (and (<= (to_rep2 (first queue__split_fields4)) (to_rep1 queue__split_fields1)) (<= (to_rep1 queue__split_fields1) (to_rep2 (last queue__split_fields4)))))
(assert (= o (to_rep1 queue__split_fields1)))
(assert (= o1 (select queue__split_fields3 o)))
(assert (= o2 (to_rep3 o1)))
(assert (= (mk_int__ref result) (mk_int__ref item)))
(assert (= item1 o2))
(assert (and (= o3 (+ (mod1 (to_rep1 queue__split_fields1) (to_rep1 (rec__bounded_queue_v2__queue_type__max_size queue__split_discrs))) 1)) (in_range (+ (mod1 (to_rep1 queue__split_fields1) (to_rep1 (rec__bounded_queue_v2__queue_type__max_size queue__split_discrs))) 1))))
(assert (and (= o4 o3) (in_range2 o3)))
(assert (= (to_rep1 o5) o4))
(assert (= queue__split_fields o6))
(assert (= o5 o7))
(assert (= queue__split_fields2 o8))
(assert (= queue__split_fields3 o9))
(assert (= queue__split_fields4 o10))
(assert (= queue__split_discrs (mk___split_discrs temp___325)))
(assert (= temp___3251 o6))
(assert (= temp___3252 o7))
(assert (= temp___3253 o8))
(assert (= temp___3254 o9))
(assert (= temp___3255 o10))
(assert (= (mk___split_fields__ref (mk___split_fields result1 result2 result3 (mk___t result4 result5))) (mk___split_fields__ref (mk___split_fields queue__split_fields queue__split_fields1 queue__split_fields2 (mk___t queue__split_fields3 queue__split_fields4)))))
(assert (= temp___3251 queue__split_fields5))
(assert (= temp___3252 queue__split_fields6))
(assert (= temp___3253 queue__split_fields7))
(assert (= temp___3254 queue__split_fields8))
(assert (= temp___3255 queue__split_fields9))
(assert (= queue__split_discrs (mk___split_discrs temp___325)))
(assert (and (= o11 (- (to_rep queue__split_fields5) 1)) (in_range1 (- (to_rep queue__split_fields5) 1))))
(assert (= (to_rep o12) o11))
(assert (= o12 o13))
(assert (= queue__split_fields6 o14))
(assert (= queue__split_fields7 o15))
(assert (= queue__split_fields8 o16))
(assert (= queue__split_fields9 o17))
(assert (= queue__split_discrs (mk___split_discrs temp___327)))
(assert (= temp___3271 o13))
(assert (= temp___3272 o14))
(assert (= temp___3273 o15))
(assert (= temp___3274 o16))
(assert (= temp___3275 o17))
(assert (= result6 (mk___split_fields__ref (mk___split_fields queue__split_fields5 queue__split_fields6 queue__split_fields7 (mk___t queue__split_fields8 queue__split_fields9)))))
(assert (= queue__split_fields10 (mk___split_fields temp___3271 temp___3272 temp___3273 (mk___t temp___3274 temp___3275))))
(assert (= queue__split_discrs (mk___split_discrs temp___327)))
(assert (= item2 (mk_int__ref item1)))
(assert (= queue__split_fields11 (mk___split_fields__ref queue__split_fields10)))
(assert (= item3 item1))
(assert (= queue__split_fields12 queue__split_fields10))
(assert (not (= (size (mk___rep queue__split_discrs (us_split_fields__content queue__split_fields11))) (- (size (mk___rep queue__split_discrs (mk___split_fields queue__split_fields queue__split_fields1 queue__split_fields2 (mk___t queue__split_fields3 queue__split_fields4)))) 1))))
(check-sat)
(exit)
