(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTNIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-fun div1 (Int Int) Int)
(declare-fun mod1 (Int Int) Int)
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))
(assert (forall ((x Int) (y Int)) (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))
(assert (forall ((x Int)) (= (div1 x 1) x)))
(assert (forall ((x Int)) (= (mod1 x 1) 0)))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))
(assert (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1 (+ (* x y) z) x)))))
(assert (forall ((x Int) (y Int) (z Int)) (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z))) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)))))
(define-fun mod2 ((x Int) (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort topt_indexB 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (topt_indexB topt_indexB) Bool)
(declare-const dummy1 topt_indexB)
(declare-datatypes () ((topt_indexB__ref (mk_topt_indexB__ref (topt_indexB__content topt_indexB)))))
(define-fun topt_indexB__ref___projection ((a topt_indexB__ref)) topt_indexB (topt_indexB__content a))
(declare-sort index 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (index index) Bool)
(declare-const dummy2 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant1 ((temp___expr_142 Int) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (or (= temp___is_init_139 true) (<= 1 2147483647)) (in_range3 temp___expr_142)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (topt_indexB) Int)
(declare-fun of_rep1 (Int) topt_indexB)
(assert (forall ((x topt_indexB)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x topt_indexB)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) topt_indexB)
(declare-fun last (t) topt_indexB)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((ar__ref (mk_ar__ref (ar__content us_t)))))
(define-fun ar__ref___projection ((a ar__ref)) us_t (ar__content a))
(define-fun dynamic_invariant2 ((temp___expr_148 us_t) (temp___is_init_145 Bool) (temp___skip_constant_146 Bool) (temp___do_toplevel_147 Bool)) Bool (=> (not (= temp___skip_constant_146 true)) (dynamic_property 1 2147483647 (first1 temp___expr_148) (last1 temp___expr_148))))
(declare-fun empty (us_t) Bool)
(declare-fun empty__function_guard (Bool us_t) Bool)
(assert true)
(assert (forall ((a us_t)) (! (= (= (empty a) true) (< (last1 a) (first1 a))) :pattern ((empty a)))))
(declare-fun sorted (us_t) Bool)
(declare-fun sorted__function_guard (Bool us_t) Bool)
(assert true)
(assert (forall ((a us_t)) (! (= (= (sorted a) true) (forall ((i1 Int)) (=> (and (<= (first1 a) i1) (<= i1 (last1 a))) (forall ((i2 Int)) (=> (and (<= i1 i2) (<= i2 (last1 a))) (<= (to_rep (select (to_array a) i1)) (to_rep (select (to_array a) i2)))))))) :pattern ((sorted a)))))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const left Int)
(declare-const right Int)
(declare-const med Int)
(declare-const binary_search__search__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 integer)
(declare-const o4 Int)
(declare-const o5 Bool)
(declare-const o6 Int)
(declare-const o7 integer)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 integer)
(declare-const o11 Int)
(declare-const o12 Bool)
(declare-const o13 Bool)
(declare-const temp___169 Int)
(declare-const temp___168 Int)
(declare-const temp___167 Int)
(declare-const temp___170 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 integer)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 integer)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const index1 Int)
(declare-const left1 Int)
(declare-const right1 Int)
(declare-const med1 Int)
(declare-const binary_search__search__result1 Int)
(declare-const result Bool)
(declare-const result1 Int)
(declare-const binary_search__search__result2 Int)
(declare-const result2 Int)
(declare-const left2 Int)
(declare-const result3 Int)
(declare-const right2 Int)
(declare-const result4 Bool)
(declare-const result5 Int)
(declare-const binary_search__search__result3 Int)
(declare-const result6 Bool)
(declare-const result7 Int)
(declare-const binary_search__search__result4 Int)
(declare-const binary_search__search__result5 Int)
(declare-const binary_search__search__result6 Int)
(declare-const left3 Int)
(declare-const right3 Int)
(declare-const med2 Int)
(declare-const binary_search__search__result7 Int)
(declare-const temp___1701 Int)
(declare-const result8 Int)
(declare-const temp___1702 Int)
(declare-const result9 Int)
(declare-const med3 Int)
(declare-const result10 Bool)
(declare-const result11 Int)
(declare-const left4 Int)
(declare-const result12 Bool)
(declare-const result13 Int)
(declare-const right4 Int)
(declare-const result14 Int)
(declare-const binary_search__search__result8 Int)
(declare-const left5 Int)
(declare-const right5 Int)
(declare-const med4 Int)
(declare-const binary_search__search__result9 Int)
(declare-const temp___1703 Int)
(declare-const left6 Int)
(declare-const right6 Int)
(declare-const med5 Int)
(declare-const binary_search__search__result10 Int)
(declare-const temp___1704 Int)
(declare-const left7 int__ref)
(declare-const right7 int__ref)
(declare-const med6 int__ref)
(declare-const binary_search__search__result11 int__ref)
(declare-const left8 Int)
(declare-const right8 Int)
(declare-const med7 Int)
(declare-const binary_search__search__result12 Int)
(declare-const left9 int__ref)
(declare-const right9 int__ref)
(declare-const med8 int__ref)
(declare-const binary_search__search__result13 int__ref)
(declare-const left10 Int)
(declare-const right10 Int)
(declare-const med9 Int)
(declare-const binary_search__search__result14 Int)
(declare-const result15 int__ref)
(declare-const binary_search__search__result15 Int)
(declare-const binary_search__search__result16 int__ref)
(declare-const binary_search__search__result17 Int)
(declare-const left11 int__ref)
(declare-const right11 int__ref)
(declare-const med10 int__ref)
(declare-const binary_search__search__result18 int__ref)
(declare-const left12 Int)
(declare-const right12 Int)
(declare-const med11 Int)
(declare-const binary_search__search__result19 Int)
(declare-const left13 int__ref)
(declare-const right13 int__ref)
(declare-const med12 int__ref)
(declare-const binary_search__search__result20 int__ref)
(declare-const left14 Int)
(declare-const right14 Int)
(declare-const med13 Int)
(declare-const binary_search__search__result21 Int)
(declare-const left15 int__ref)
(declare-const right15 int__ref)
(declare-const med14 int__ref)
(declare-const binary_search__search__result22 int__ref)
(declare-const left16 Int)
(declare-const right16 Int)
(declare-const med15 Int)
(declare-const binary_search__search__result23 Int)
(declare-const left17 int__ref)
(declare-const right17 int__ref)
(declare-const med16 int__ref)
(declare-const binary_search__search__result24 int__ref)
(declare-const left18 Int)
(declare-const right18 Int)
(declare-const med17 Int)
(declare-const binary_search__search__result25 Int)
(declare-const result16 Int)
(assert (dynamic_invariant2 a true false true))
(assert (in_range1 i))
(assert (= (sorted a) true))
(assert (=> (<= 1 2147483647) (in_range3 left)))
(assert (=> (<= 1 2147483647) (in_range3 right)))
(assert (=> (<= 1 2147483647) (in_range3 med)))
(assert (or (and (and (and (= binary_search__search__result22 (mk_int__ref binary_search__search__result2)) (and (= med14 (mk_int__ref med)) (and (= right15 (mk_int__ref right)) (= left15 (mk_int__ref left))))) (and (= binary_search__search__result23 binary_search__search__result2) (and (= med15 med1) (and (= right16 right1) (= left16 left1))))) (and (and (= result (empty a)) (= (= result true) (< (to_rep1 (last (rt a))) (to_rep1 (first (rt a)))))) (and (= result true) (and (= (mk_int__ref result1) (mk_int__ref binary_search__search__result)) (= binary_search__search__result2 0))))) (and (and (and (= result (empty a)) (= (= result true) (< (to_rep1 (last (rt a))) (to_rep1 (first (rt a)))))) (and (not (= result true)) (and (= binary_search__search__result2 binary_search__search__result) (= binary_search__search__result2 binary_search__search__result1)))) (and (and (and (= binary_search__search__result22 binary_search__search__result20) (and (= med14 med12) (and (= right15 right13) (= left15 left13)))) (and (= binary_search__search__result23 binary_search__search__result21) (and (= med15 med13) (and (= right16 right14) (= left16 left14))))) (and (and (and (= o (to_rep1 (first (rt a)))) (in_range3 (to_rep1 (first (rt a))))) (and (= (mk_int__ref result2) (mk_int__ref left)) (= left2 o))) (and (and (and (= o1 (to_rep1 (last (rt a)))) (in_range3 (to_rep1 (last (rt a))))) (and (= (mk_int__ref result3) (mk_int__ref right)) (= right2 o1))) (or (and (and (and (= binary_search__search__result20 (mk_int__ref binary_search__search__result5)) (and (= med12 (mk_int__ref med)) (and (= right13 (mk_int__ref right2)) (= left13 (mk_int__ref left2))))) (and (= binary_search__search__result21 binary_search__search__result6) (and (= med13 med1) (and (= right14 right2) (= left14 left2))))) (and (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) left2) (<= left2 (to_rep1 (last (rt a))))) (= o2 left2)) (= o3 (select (elts a) o2))) (= o4 (to_rep o3))) (= o5 (ite (= o4 i) true false))) (= result4 (ite (= left2 right2) o5 false))) (ite (= result4 true) (and (and (= binary_search__search__result3 binary_search__search__result5) (= binary_search__search__result6 binary_search__search__result3)) (and (= binary_search__search__result2 result5) (= binary_search__search__result3 left2))) (and (and (= binary_search__search__result4 binary_search__search__result5) (= binary_search__search__result6 binary_search__search__result4)) (and (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) right2) (<= right2 (to_rep1 (last (rt a))))) (= o9 right2)) (= o10 (select (elts a) o9))) (= o11 (to_rep o10))) (= o12 (ite (< o11 i) true false))) (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) left2) (<= left2 (to_rep1 (last (rt a))))) (= o6 left2)) (= o7 (select (elts a) o6))) (= o8 (to_rep o7))) (= o13 (ite (< i o8) true false))) (= result6 (ite (= o13 false) o12 true)))) (and (= result6 true) (and (= binary_search__search__result2 result7) (= binary_search__search__result4 0)))))))) (and (and (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) left2) (<= left2 (to_rep1 (last (rt a))))) (= o2 left2)) (= o3 (select (elts a) o2))) (= o4 (to_rep o3))) (= o5 (ite (= o4 i) true false))) (= result4 (ite (= left2 right2) o5 false))) (and (not (= result4 true)) (and (and (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) right2) (<= right2 (to_rep1 (last (rt a))))) (= o9 right2)) (= o10 (select (elts a) o9))) (= o11 (to_rep o10))) (= o12 (ite (< o11 i) true false))) (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) left2) (<= left2 (to_rep1 (last (rt a))))) (= o6 left2)) (= o7 (select (elts a) o6))) (= o8 (to_rep o7))) (= o13 (ite (< i o8) true false))) (= result6 (ite (= o13 false) o12 true)))) (and (not (= result6 true)) (= binary_search__search__result4 binary_search__search__result2))) (= binary_search__search__result3 binary_search__search__result4)))) (and (and (and (= binary_search__search__result20 binary_search__search__result18) (and (= med12 med10) (and (= right13 right11) (= left13 left11)))) (and (= binary_search__search__result21 binary_search__search__result19) (and (= med13 med11) (and (= right14 right12) (= left14 left12))))) (or (and (and (and (= binary_search__search__result18 (mk_int__ref binary_search__search__result8)) (and (= med10 (mk_int__ref med3)) (and (= right11 (mk_int__ref right3)) (= left11 (mk_int__ref left3))))) (and (= binary_search__search__result19 binary_search__search__result8) (and (= med11 med3) (and (= right12 right3) (= left12 left3))))) (and (< left2 right2) (and (= temp___169 med) (and (= temp___168 right2) (and (= temp___167 left2) (and (= 0 temp___170) (and (and (and (<= (to_rep1 (first (rt a))) left3) (<= left3 (to_rep1 (last (rt a))))) (and (<= (to_rep1 (first (rt a))) right3) (<= right3 (to_rep1 (last (rt a)))))) (and (and (and (and (=> (<= 1 2147483647) (in_range3 left3)) (=> (<= 1 2147483647) (in_range3 right3))) (=> (<= 1 2147483647) (in_range3 med2))) (< left3 right3)) (and (and (= temp___1701 result8) (= temp___1702 (- right3 left3))) (and (and (and (and (= o14 (+ left3 (div1 (- right3 left3) 2))) (in_range2 (+ left3 (div1 (- right3 left3) 2)))) (and (= o15 o14) (in_range3 o14))) (and (= med2 result9) (= med3 o15))) (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) med3) (<= med3 (to_rep1 (last (rt a))))) (= o16 med3)) (= o17 (select (elts a) o16))) (= o18 (to_rep o17))) (= result10 (ite (< o18 i) true false))) (and (not (= result10 true)) (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) med3) (<= med3 (to_rep1 (last (rt a))))) (= o20 med3)) (= o21 (select (elts a) o20))) (= o22 (to_rep o21))) (= result12 (ite (< i o22) true false))) (and (not (= result12 true)) (and (= binary_search__search__result7 result14) (= binary_search__search__result8 med3)))))))))))))))) (and (ite (< left2 right2) (and (and (and (= temp___169 med) (and (= temp___168 right2) (and (= temp___167 left2) (and (= 0 temp___170) (and (and (and (<= (to_rep1 (first (rt a))) left3) (<= left3 (to_rep1 (last (rt a))))) (and (<= (to_rep1 (first (rt a))) right3) (<= right3 (to_rep1 (last (rt a)))))) (and (and (and (and (=> (<= 1 2147483647) (in_range3 left3)) (=> (<= 1 2147483647) (in_range3 right3))) (=> (<= 1 2147483647) (in_range3 med2))) (< left3 right3)) (and (and (= temp___1701 result8) (= temp___1702 (- right3 left3))) (and (and (and (and (= o14 (+ left3 (div1 (- right3 left3) 2))) (in_range2 (+ left3 (div1 (- right3 left3) 2)))) (and (= o15 o14) (in_range3 o14))) (and (= med2 result9) (= med3 o15))) (and (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) med3) (<= med3 (to_rep1 (last (rt a))))) (= o16 med3)) (= o17 (select (elts a) o16))) (= o18 (to_rep o17))) (= result10 (ite (< o18 i) true false))) (ite (= result10 true) (and (and (and (= o19 (+ med3 1)) (in_range2 (+ med3 1))) (and (= left3 result11) (= left4 o19))) (and (= binary_search__search__result8 binary_search__search__result7) (= right4 right3))) (and (and (and (and (and (and (and (<= (to_rep1 (first (rt a))) med3) (<= med3 (to_rep1 (last (rt a))))) (= o20 med3)) (= o21 (select (elts a) o20))) (= o22 (to_rep o21))) (= result12 (ite (< i o22) true false))) (and (= result12 true) (and (and (and (= o23 (- med3 1)) (in_range3 (- med3 1))) (and (= right3 result13) (= right4 o23))) (= binary_search__search__result8 binary_search__search__result7)))) (= left4 left3)))) (not (< left4 right4))))))))))) (and (and (= binary_search__search__result11 (mk_int__ref binary_search__search__result8)) (and (= med6 (mk_int__ref med3)) (and (= right7 (mk_int__ref right4)) (= left7 (mk_int__ref left4))))) (and (= binary_search__search__result12 binary_search__search__result8) (and (= med7 med3) (and (= right8 right4) (= left8 left4)))))) (and (and (= binary_search__search__result13 binary_search__search__result11) (and (= med8 med6) (and (= right9 right7) (= left9 left7)))) (and (= binary_search__search__result14 binary_search__search__result12) (and (= med9 med7) (and (= right10 right8) (= left10 left8)))))) (and (and (= binary_search__search__result13 (mk_int__ref binary_search__search__result3)) (and (= med8 (mk_int__ref med)) (and (= right9 (mk_int__ref right2)) (= left9 (mk_int__ref left2))))) (and (= binary_search__search__result14 binary_search__search__result3) (and (= med9 med1) (and (= right10 right2) (= left10 left2)))))) (and (and (and (= binary_search__search__result18 binary_search__search__result16) (and (= med10 med8) (and (= right11 right9) (= left11 left9)))) (and (= binary_search__search__result19 binary_search__search__result17) (and (= med11 med9) (and (= right12 right10) (= left12 left10))))) (and (and (= binary_search__search__result16 (mk_int__ref binary_search__search__result15)) (= binary_search__search__result17 binary_search__search__result15)) (and (= result15 binary_search__search__result13) (= binary_search__search__result15 0)))))))))))))))
(assert (= binary_search__search__result24 binary_search__search__result22))
(assert (= med16 med14))
(assert (= right17 right15))
(assert (= left17 left15))
(assert (= binary_search__search__result25 binary_search__search__result23))
(assert (= med17 med15))
(assert (= right18 right16))
(assert (= left18 left16))
(assert (= result16 (int__content binary_search__search__result24)))
(assert (<= (to_rep1 (first (rt a))) (int__content binary_search__search__result24)))
(assert (<= (int__content binary_search__search__result24) (to_rep1 (last (rt a)))))
(assert (not (= (to_rep (select (elts a) (int__content binary_search__search__result24))) i)))
(check-sat)
(exit)
