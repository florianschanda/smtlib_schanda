(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type program_phase_t

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : program_phase_t, program_phase_t -> bool

logic dummy6 : program_phase_t

type program_phase_t__ref = { program_phase_t__content : program_phase_t
}

function program_phase_t__ref___projection(a: program_phase_t__ref) : program_phase_t =
  (a).program_phase_t__content

type counter_range_t

predicate in_range6(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : counter_range_t, counter_range_t -> bool

logic dummy7 : counter_range_t

type counter_range_t__ref = { counter_range_t__content : counter_range_t
}

function counter_range_t__ref___projection(a: counter_range_t__ref) : counter_range_t =
  (a).counter_range_t__content

logic to_rep2 : counter_range_t -> int

logic of_rep2 : int -> counter_range_t

axiom inversion_axiom2 :
  (forall x:counter_range_t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:counter_range_t [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

type candidate_number_t

predicate in_range7(x: int) = ((0 <= x) and (x <= 20))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : candidate_number_t, candidate_number_t -> bool

logic dummy8 : candidate_number_t

type candidate_number_t__ref = { candidate_number_t__content :
candidate_number_t
}

function candidate_number_t__ref___projection(a: candidate_number_t__ref) : candidate_number_t =
  (a).candidate_number_t__content

logic dummy9 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq8 : (int,character) farray, (int,character) farray -> bool

type map__ref1 = { map__content1 : (int,(int,character) farray) farray
}

logic slide1 : (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,character) farray) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,(int,character) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,character) farray,
  int -> (int,(int,character) farray) farray

axiom singleton_def1 :
  (forall v:(int,character) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq11 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int, int -> bool

axiom bool_eq_def9 :
  (forall a:(int,(int,character) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,character) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq11(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and (bool_eq5((a[temp___idx_152]), 1, 70,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 70) = true)) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq5((a[temp___idx_152]), 1, 70,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 70) = true))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq5((a[temp___idx_152]), 1, 70,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 70) = true)))))))

type map__ref2 = { map__content2 : (int,counter_range_t) farray
}

logic slide2 : (int,counter_range_t) farray, int,
  int -> (int,counter_range_t) farray

axiom slide_eq2 :
  (forall a:(int,counter_range_t) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,counter_range_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,counter_range_t) farray, int, int,
  (int,counter_range_t) farray, int, int -> (int,counter_range_t) farray

axiom concat_def2 :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : counter_range_t, int -> (int,counter_range_t) farray

axiom singleton_def2 :
  (forall v:counter_range_t.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq12 : (int,counter_range_t) farray, int, int,
  (int,counter_range_t) farray, int, int -> bool

axiom bool_eq_def10 :
  (forall a:(int,counter_range_t) farray. forall a__first:int.
  forall a__last:int. forall b:(int,counter_range_t) farray.
  forall b__first:int. forall b__last:int [bool_eq12(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_153:int. ((((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) and
  (to_rep2((a[temp___idx_153])) = to_rep2((b[((b__first - a__first) + temp___idx_153)])))) or
  (not ((a__first <= temp___idx_153) and (temp___idx_153 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep2((a[temp___idx_153])) = to_rep2((b[((b__first - a__first) + temp___idx_153)]))))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) ->
  (to_rep2((a[temp___idx_153])) = to_rep2((b[((b__first - a__first) + temp___idx_153)])))))))))

logic compare1 : (int,counter_range_t) farray, int, int,
  (int,counter_range_t) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq12(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq12(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,counter_range_t) farray.
  forall b:(int,counter_range_t) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq12(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic program_phase : int

logic attr__ATTRIBUTE_ADDRESS : int

logic candidates : (int,(int,character) farray) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic last_candidate : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type tTbufSP1

predicate in_range8(x: int) = ((1 <= x) and (x <= 255))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : tTbufSP1, tTbufSP1 -> bool

logic dummy10 : tTbufSP1

type tTbufSP1__ref = { tTbufSP1__content : tTbufSP1
}

function tTbufSP1__ref___projection(a: tTbufSP1__ref) : tTbufSP1 =
  (a).tTbufSP1__content

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type t55b

predicate in_range9(x: int) = ((1 <= x) and (x <= 11))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : t55b, t55b -> bool

logic dummy11 : t55b

type t55b__ref = { t55b__content : t55b
}

function t55b__ref___projection(a: t55b__ref) : t55b = (a).t55b__content

logic temp___String_Literal_679 : unit -> (int,character) farray

axiom temp___String_Literal_679__def_axiom :
  ((((((((((((((((to_rep((temp___String_Literal_679(void)[1])) = 42) and
  (to_rep((temp___String_Literal_679(void)[2])) = 42)) and
  (to_rep((temp___String_Literal_679(void)[3])) = 42)) and
  (to_rep((temp___String_Literal_679(void)[4])) = 42)) and
  (to_rep((temp___String_Literal_679(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_679(void)[6])) = 86)) and
  (to_rep((temp___String_Literal_679(void)[7])) = 111)) and
  (to_rep((temp___String_Literal_679(void)[8])) = 116)) and
  (to_rep((temp___String_Literal_679(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_679(void)[10])) = 110)) and
  (to_rep((temp___String_Literal_679(void)[11])) = 103)) and
  (to_rep((temp___String_Literal_679(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_679(void)[13])) = 42)) and
  (to_rep((temp___String_Literal_679(void)[14])) = 42)) and
  (to_rep((temp___String_Literal_679(void)[15])) = 42)) and
  (to_rep((temp___String_Literal_679(void)[16])) = 42))

logic temp___String_Literal_680 : unit -> (int,character) farray

axiom temp___String_Literal_680__def_axiom :
  (((((((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_680(void)[1])) = 68) and
  (to_rep((temp___String_Literal_680(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[4])) = 121)) and
  (to_rep((temp___String_Literal_680(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[6])) = 117)) and
  (to_rep((temp___String_Literal_680(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[8])) = 119)) and
  (to_rep((temp___String_Literal_680(void)[9])) = 97)) and
  (to_rep((temp___String_Literal_680(void)[10])) = 110)) and
  (to_rep((temp___String_Literal_680(void)[11])) = 116)) and
  (to_rep((temp___String_Literal_680(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_680(void)[14])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[16])) = 118)) and
  (to_rep((temp___String_Literal_680(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_680(void)[19])) = 101)) and
  (to_rep((temp___String_Literal_680(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[21])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[22])) = 114)) and
  (to_rep((temp___String_Literal_680(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[24])) = 115)) and
  (to_rep((temp___String_Literal_680(void)[25])) = 116)) and
  (to_rep((temp___String_Literal_680(void)[26])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[27])) = 112)) and
  (to_rep((temp___String_Literal_680(void)[28])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[29])) = 116)) and
  (to_rep((temp___String_Literal_680(void)[30])) = 104)) and
  (to_rep((temp___String_Literal_680(void)[31])) = 101)) and
  (to_rep((temp___String_Literal_680(void)[32])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[33])) = 118)) and
  (to_rep((temp___String_Literal_680(void)[34])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[35])) = 116)) and
  (to_rep((temp___String_Literal_680(void)[36])) = 101)) and
  (to_rep((temp___String_Literal_680(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[38])) = 40)) and
  (to_rep((temp___String_Literal_680(void)[39])) = 118)) and
  (to_rep((temp___String_Literal_680(void)[40])) = 47)) and
  (to_rep((temp___String_Literal_680(void)[41])) = 39)) and
  (to_rep((temp___String_Literal_680(void)[42])) = 101)) and
  (to_rep((temp___String_Literal_680(void)[43])) = 110)) and
  (to_rep((temp___String_Literal_680(void)[44])) = 100)) and
  (to_rep((temp___String_Literal_680(void)[45])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[46])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[47])) = 102)) and
  (to_rep((temp___String_Literal_680(void)[48])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[49])) = 118)) and
  (to_rep((temp___String_Literal_680(void)[50])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[51])) = 116)) and
  (to_rep((temp___String_Literal_680(void)[52])) = 101)) and
  (to_rep((temp___String_Literal_680(void)[53])) = 39)) and
  (to_rep((temp___String_Literal_680(void)[54])) = 41)) and
  (to_rep((temp___String_Literal_680(void)[55])) = 63))

logic temp___String_Literal_684 : unit -> (int,character) farray

axiom temp___String_Literal_684__def_axiom :
  (((((((((((to_rep((temp___String_Literal_684(void)[1])) = 101) and
  (to_rep((temp___String_Literal_684(void)[2])) = 110)) and
  (to_rep((temp___String_Literal_684(void)[3])) = 100)) and
  (to_rep((temp___String_Literal_684(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_684(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_684(void)[6])) = 102)) and
  (to_rep((temp___String_Literal_684(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_684(void)[8])) = 118)) and
  (to_rep((temp___String_Literal_684(void)[9])) = 111)) and
  (to_rep((temp___String_Literal_684(void)[10])) = 116)) and
  (to_rep((temp___String_Literal_684(void)[11])) = 101))

logic temp___String_Literal_687 : unit -> (int,character) farray

axiom temp___String_Literal_687__def_axiom :
  (((((((((((((to_rep((temp___String_Literal_687(void)[1])) = 86) and
  (to_rep((temp___String_Literal_687(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_687(void)[3])) = 116)) and
  (to_rep((temp___String_Literal_687(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_687(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_687(void)[6])) = 115)) and
  (to_rep((temp___String_Literal_687(void)[7])) = 116)) and
  (to_rep((temp___String_Literal_687(void)[8])) = 111)) and
  (to_rep((temp___String_Literal_687(void)[9])) = 114)) and
  (to_rep((temp___String_Literal_687(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_687(void)[11])) = 100)) and
  (to_rep((temp___String_Literal_687(void)[12])) = 58)) and
  (to_rep((temp___String_Literal_687(void)[13])) = 32))

logic temp___String_Literal_688 : unit -> (int,character) farray

axiom temp___String_Literal_688__def_axiom : true

logic counters : (int,counter_range_t) farray

logic number_of_votes : int

logic buf : (int,character) farray

logic last2 : int

logic chosen_vote : int

logic o : int

logic temp___693 : (int,counter_range_t) farray

logic temp___692 : (int,character) farray

logic temp___691 : int

logic temp___690 : int

logic temp___689 : int

logic i : int

logic o1 : integer

logic o2 : integer

logic o3 : int

logic o4 : counter_range_t

logic o5 : (int,counter_range_t) farray

logic o6 : int

logic temp___685 : (int,character) farray

logic o7 : int

logic o8 : bool

logic i1 : int

logic counters1 : (int,counter_range_t) farray

logic number_of_votes1 : int

logic buf1 : (int,character) farray

logic last3 : int

logic chosen_vote1 : int

logic result : bool

logic counters2 : (int,counter_range_t) farray

logic number_of_votes2 : int

logic buf2 : (int,character) farray

logic last4 : int

logic chosen_vote2 : int

logic last5 : int

logic ada__text_io__get_line__2__item : (int,character) farray

logic result1 : (int,character) farray

logic buf3 : (int,character) farray

logic chosen_vote3 : int

logic result2 : (int,counter_range_t) farray

logic counters3 : (int,counter_range_t) farray

logic result3 : int

logic number_of_votes3 : int

logic result4 : bool

logic chosen_vote4 : int

logic chosen_vote5 : int

logic result5 : bool

logic counters4 : (int,counter_range_t) farray

logic number_of_votes4 : int

logic buf4 : (int,character) farray

logic last6 : int

logic chosen_vote6 : int

logic counters5 : (int,counter_range_t) farray

logic number_of_votes5 : int

logic buf5 : (int,character) farray

logic last7 : int

logic chosen_vote7 : int

logic counters6 : (int,counter_range_t) farray

logic number_of_votes6 : int

logic buf6 : (int,character) farray

logic last8 : int

logic chosen_vote8 : int

logic counters7 : (int,counter_range_t) farray

logic number_of_votes7 : int

logic buf7 : (int,character) farray

logic last9 : int

logic chosen_vote9 : int

logic counters8 : (int,counter_range_t) farray

logic number_of_votes8 : int

logic buf8 : (int,character) farray

logic last10 : int

logic chosen_vote10 : int

logic counters9 : (int,counter_range_t) farray

logic number_of_votes9 : int

logic buf9 : (int,character) farray

logic last11 : int

logic chosen_vote11 : int

logic counters10 : (int,counter_range_t) farray

logic number_of_votes10 : int

logic buf10 : (int,character) farray

logic last12 : int

logic chosen_vote12 : int

logic counters11 : (int,counter_range_t) farray

logic number_of_votes11 : int

logic buf11 : (int,character) farray

logic last13 : int

logic chosen_vote13 : int

logic counters12 : (int,counter_range_t) farray

logic number_of_votes12 : int

logic buf12 : (int,character) farray

logic last14 : int

logic chosen_vote14 : int

logic counters13 : (int,counter_range_t) farray

logic number_of_votes13 : int

logic buf13 : (int,character) farray

logic last15 : int

logic chosen_vote15 : int

axiom H : in_range5(program_phase)

axiom H1 : in_range7(last_candidate)

axiom H2 : in_range4(number_of_votes)

axiom H3 : ((program_phase = 1) and
  ((forall i2:int. (((0 <= i2) and (i2 <= 20)) ->
   (to_rep2((counters[i2])) = 0))) and (number_of_votes = 0)))

axiom H4 : ((0 <= 2147483647) -> in_range4(last2))

axiom H5 : ((0 <= 20) -> in_range7(chosen_vote))

axiom H6 : (((((chosen_vote12 = chosen_vote4) and ((last12 = last5) and
  ((buf10 = buf3) and ((number_of_votes10 = number_of_votes2) and
  (counters10 = counters2))))) and ((chosen_vote13 = chosen_vote5) and
  ((last13 = last5) and ((buf11 = buf3) and
  ((number_of_votes11 = number_of_votes2) and
  (counters11 = counters2)))))) and ((((o = (last_candidate * 20)) and
  in_range1((last_candidate * 20))) and (((number_of_votes <  o) ->
  (result = true)) and ((not (number_of_votes <  o)) ->
  (result = false)))) and ((result = true) and ((temp___693 = counters) and
  ((temp___692 = buf) and ((temp___691 = chosen_vote) and
  ((temp___690 = last2) and ((temp___689 = number_of_votes) and
  ((forall i2:int. ((((last_candidate + 1) <= i2) and (i2 <= 20)) ->
   (to_rep2((counters2[i2])) = 0))) and ((((in_range4(number_of_votes2) and
  ((0 <= 2147483647) -> in_range4(last4))) and ((0 <= 20) ->
  in_range7(chosen_vote2))) and
  (number_of_votes2 <  (last_candidate * 20))) and ((((to_rep1(o2) = 255) and
  ((to_rep1(o1) = 1) and in_range4(last5))) and ((buf2 = result1) and
  (buf3 = slide(ada__text_io__get_line__2__item, to_rep1(first(mk(1, 255))),
  1)))) and (((to_rep((buf3[1])) = 118) ->
  (((chosen_vote3 = chosen_vote4) and (chosen_vote5 = chosen_vote3)) and
  (((chosen_vote3 <= last_candidate) and in_range7(chosen_vote3)) and
  (not (to_rep2((counters2[chosen_vote3])) <  10000))))) and
  ((not (to_rep((buf3[1])) = 118)) -> (((chosen_vote2 = chosen_vote4) and
  (chosen_vote5 = chosen_vote2)) and (((((1 <= 11) -> (((1 <= 1) and
  (1 <= 255)) and ((1 <= 11) and (11 <= 255)))) and (temp___685 = buf3)) and
  (result4 = bool_eq5(temp___685, 1, 11, temp___String_Literal_684(void), 1,
  11))) and (result4 = true)))))))))))))))) or
  (((((o = (last_candidate * 20)) and in_range1((last_candidate * 20))) and
  (((number_of_votes <  o) -> (result = true)) and
  ((not (number_of_votes <  o)) -> (result = false)))) and
  (((result = true) -> ((((temp___693 = counters) and ((temp___692 = buf) and
  ((temp___691 = chosen_vote) and ((temp___690 = last2) and
  ((temp___689 = number_of_votes) and
  ((forall i2:int. ((((last_candidate + 1) <= i2) and (i2 <= 20)) ->
   (to_rep2((counters2[i2])) = 0))) and ((((in_range4(number_of_votes2) and
  ((0 <= 2147483647) -> in_range4(last4))) and ((0 <= 20) ->
  in_range7(chosen_vote2))) and
  (number_of_votes2 <  (last_candidate * 20))) and ((((to_rep1(o2) = 255) and
  ((to_rep1(o1) = 1) and in_range4(last5))) and ((buf2 = result1) and
  (buf3 = slide(ada__text_io__get_line__2__item, to_rep1(first(mk(1, 255))),
  1)))) and ((((to_rep((buf3[1])) = 118) ->
  (((chosen_vote3 <= last_candidate) and in_range7(chosen_vote3)) and
  ((to_rep2((counters2[chosen_vote3])) <  10000) and
  ((((((o3 = (to_rep2((counters2[chosen_vote3])) + 1)) and
  in_range6((to_rep2((counters2[chosen_vote3])) + 1))) and
  (to_rep2(o4) = o3)) and (o5 = (counters2[chosen_vote3 <- o4]))) and
  ((counters2 = result2) and (counters3 = o5))) and
  (((o6 = (number_of_votes2 + 1)) and in_range1((number_of_votes2 + 1))) and
  ((number_of_votes2 = result3) and (number_of_votes3 = o6))))))) and
  ((not (to_rep((buf3[1])) = 118)) -> ((((((1 <= 11) -> (((1 <= 1) and
  (1 <= 255)) and ((1 <= 11) and (11 <= 255)))) and (temp___685 = buf3)) and
  (result4 = bool_eq5(temp___685, 1, 11, temp___String_Literal_684(void), 1,
  11))) and (not (result4 = true))) and ((chosen_vote3 = chosen_vote2) and
  ((number_of_votes3 = number_of_votes2) and (counters3 = counters2)))))) and
  (((((o7 = (last_candidate * 20)) and in_range1((last_candidate * 20))) and
  (((number_of_votes3 <  o7) -> (o8 = true)) and
  ((not (number_of_votes3 <  o7)) -> (o8 = false)))) and
  (((not (o8 = true)) -> (result5 = true)) and ((o8 = true) ->
  (result5 = false)))) and (result5 = true))))))))))) and
  (((chosen_vote3 = chosen_vote8) and ((last5 = last8) and ((buf3 = buf6) and
  ((number_of_votes3 = number_of_votes6) and (counters3 = counters6))))) and
  ((chosen_vote9 = chosen_vote3) and ((last9 = last5) and ((buf7 = buf3) and
  ((number_of_votes7 = number_of_votes3) and
  (counters7 = counters3))))))) and (((chosen_vote10 = chosen_vote8) and
  ((last10 = last8) and ((buf8 = buf6) and
  ((number_of_votes8 = number_of_votes6) and (counters8 = counters6))))) and
  ((chosen_vote11 = chosen_vote9) and ((last11 = last9) and
  ((buf9 = buf7) and ((number_of_votes9 = number_of_votes7) and
  (counters9 = counters7)))))))) and ((not (result = true)) ->
  (((chosen_vote10 = chosen_vote) and ((last10 = last2) and ((buf8 = buf) and
  ((number_of_votes8 = number_of_votes) and (counters8 = counters))))) and
  ((chosen_vote11 = chosen_vote1) and ((last11 = last3) and
  ((buf9 = buf1) and ((number_of_votes9 = number_of_votes1) and
  (counters9 = counters1))))))))) and (((chosen_vote12 = chosen_vote10) and
  ((last12 = last10) and ((buf10 = buf8) and
  ((number_of_votes10 = number_of_votes8) and
  (counters10 = counters8))))) and ((chosen_vote13 = chosen_vote11) and
  ((last13 = last11) and ((buf11 = buf9) and
  ((number_of_votes11 = number_of_votes9) and (counters11 = counters9))))))))

axiom H7 : (chosen_vote14 = chosen_vote12)

axiom H8 : (last14 = last12)

axiom H9 : (buf12 = buf10)

axiom H10 : (number_of_votes12 = number_of_votes10)

axiom H11 : (counters12 = counters10)

axiom H12 : (chosen_vote15 = chosen_vote13)

axiom H13 : (last15 = last13)

axiom H14 : (buf13 = buf11)

axiom H15 : (number_of_votes13 = number_of_votes11)

axiom H16 : (counters13 = counters11)

logic i2 : int

axiom H17 : ((last_candidate + 1) <= i2)

axiom H18 : (i2 <= 20)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (to_rep2((counters12[i2])) = 0)
