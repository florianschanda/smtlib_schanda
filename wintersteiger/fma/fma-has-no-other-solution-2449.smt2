(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.26997453483420752462507152813486754894256591796875p136 {+ 1215857214478860 136 (1.1063e+041)}
; Y = -1.342892995059607574859228407149203121662139892578125p-743 {- 1544252764778402 -743 (-2.90238e-224)}
; Z = -1.92010963890152108746178782894276082515716552734375p23 {- 4143805426896892 23 (-1.6107e+007)}
; 1.26997453483420752462507152813486754894256591796875p136 x -1.342892995059607574859228407149203121662139892578125p-743 -1.92010963890152108746178782894276082515716552734375p23 == -1.92010963890152108746178782894276082515716552734375p23
; [HW: -1.92010963890152108746178782894276082515716552734375p23] 

; mpf : - 4143805426896892 23
; mpfd: - 4143805426896892 23 (-1.6107e+007) class: Neg. norm. non-zero
; hwf : - 4143805426896892 23 (-1.6107e+007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010000111 #b0100010100011101000011010001010111011101101000001100)))
(assert (= y (fp #b1 #b00100011000 #b0101011111000111110101011101011111001110111110100010)))
(assert (= z (fp #b1 #b10000010110 #b1110101110001100010011100010011111010000111111111100)))
(assert (= r (fp #b1 #b10000010110 #b1110101110001100010011100010011111010000111111111100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
