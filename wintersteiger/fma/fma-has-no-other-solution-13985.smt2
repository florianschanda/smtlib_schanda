(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.620980132082213476252263717469759285449981689453125p555 {+ 2796645891449938 555 (1.91172e+167)}
; Y = 1.2682650518843114895162216271273791790008544921875p-765 {+ 1208158387702712 -765 (6.53527e-231)}
; Z = -0.5328843502444089441638652715482749044895172119140625p-1022 {- 2399897761192289 -1023 (-1.18571e-308)}
; 1.620980132082213476252263717469759285449981689453125p555 x 1.2682650518843114895162216271273791790008544921875p-765 -0.5328843502444089441638652715482749044895172119140625p-1022 == 1.0279162256593432633877682746970094740390777587890625p-209
; [HW: 1.0279162256593432633877682746970094740390777587890625p-209] 

; mpf : + 125723503477009 -209
; mpfd: + 125723503477009 -209 (1.24936e-063) class: Pos. norm. non-zero
; hwf : + 125723503477009 -209 (1.24936e-063) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000101010 #b1001111011111000100011011100111011000010010001010010)))
(assert (= y (fp #b0 #b00100000010 #b0100010010101101000001001011100010000000101110111000)))
(assert (= z (fp #b1 #b00000000000 #b1000100001101011000110111101100011011001100101100001)))
(assert (= r (fp #b0 #b01100101110 #b0000011100100101100001001000110000111100000100010001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
