(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9377070581646453906188298788038082420825958251953125p-125 {+ 4223057157732981 -125 (4.55553e-038)}
; Y = 1.151317320914897468497883892268873751163482666015625p758 {+ 681472630087034 758 (1.74555e+228)}
; Z = 1.3131242659667987648930420618853531777858734130859375p-624 {+ 1410186327528735 -624 (1.8862e-188)}
; 1.9377070581646453906188298788038082420825958251953125p-125 x 1.151317320914897468497883892268873751163482666015625p758 1.3131242659667987648930420618853531777858734130859375p-624 == 1.115457849462003547813537807087413966655731201171875p634
; [HW: 1.115457849462003547813537807087413966655731201171875p634] 

; mpf : + 519975927814078 634
; mpfd: + 519975927814078 634 (7.95189e+190) class: Pos. norm. non-zero
; hwf : + 519975927814078 634 (7.95189e+190) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110000010 #b1111000000001101100100011101110000001011101001110101)))
(assert (= y (fp #b0 #b11011110101 #b0010011010111100101110110110000010100101110101111010)))
(assert (= z (fp #b0 #b00110001111 #b0101000000101000111010010111000111101001010100011111)))
(assert (= r (fp #b0 #b11001111001 #b0001110110001110101001010100011110000001011110111110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
