(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.35161264150301718700575293041765689849853515625p-131 {- 1583522561251744 -131 (-4.96504e-040)}
; Y = -1.2282756393248772663895351797691546380519866943359375p657 {- 1028062084201279 657 (-7.34519e+197)}
; Z = -0.310344559952568044280951653490774333477020263671875p-1022 {- 1397667644558846 -1023 (-6.9054e-309)}
; -1.35161264150301718700575293041765689849853515625p-131 x -1.2282756393248772663895351797691546380519866943359375p657 -0.310344559952568044280951653490774333477020263671875p-1022 == 1.66015288136170457988782800384797155857086181640625p526
; [HW: 1.66015288136170457988782800384797155857086181640625p526] 

; mpf : + 2973064270508132 526
; mpfd: + 2973064270508132 526 (3.64692e+158) class: Pos. norm. non-zero
; hwf : + 2973064270508132 526 (3.64692e+158) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101111100 #b0101101000000011010010010011110000011101100110100000)))
(assert (= y (fp #b1 #b11010010000 #b0011101001110000010001011011010101011111101100111111)))
(assert (= z (fp #b1 #b00000000000 #b0100111101110010101111011011011101111100110111111110)))
(assert (= r (fp #b0 #b11000001101 #b1010100011111111110001110111101111001111000001100100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
