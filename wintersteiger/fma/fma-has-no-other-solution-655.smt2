(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.796690804612963265896041775704361498355865478515625p-5 {+ 3587976410784442 -5 (0.0561466)}
; Y = -1.89856501933187526987012461177073419094085693359375p811 {- 4046777086231196 811 (-2.5927e+244)}
; Z = 1.6794263693279247728895597902010194957256317138671875p163 {+ 3059864343730931 163 (1.96359e+049)}
; 1.796690804612963265896041775704361498355865478515625p-5 x -1.89856501933187526987012461177073419094085693359375p811 1.6794263693279247728895597902010194957256317138671875p163 == -1.7055671560967067268421715198201127350330352783203125p807
; [HW: -1.7055671560967067268421715198201127350330352783203125p807] 

; mpf : - 3177591981281989 807
; mpfd: - 3177591981281989 807 (-1.45571e+243) class: Neg. norm. non-zero
; hwf : - 3177591981281989 807 (-1.45571e+243) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111111010 #b1100101111110011111011011011011011010110001010111010)))
(assert (= y (fp #b1 #b11100101010 #b1110011000001000010110110110101101011100001010011100)))
(assert (= z (fp #b0 #b10010100010 #b1010110111101110111000101111010001001101101011110011)))
(assert (= r (fp #b1 #b11100100110 #b1011010010100000000011001001010010010001001011000101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
