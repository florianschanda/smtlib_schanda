(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4092884487443253505034590489231050014495849609375p-345 {+ 1843271305251992 -345 (1.96631e-104)}
; Y = 1.23684695230882102379155185190029442310333251953125p-4 {+ 1066663846161844 -4 (0.0773029)}
; Z = 1.3440087665864177690622227601124905049800872802734375p886 {+ 1549277753010775 886 (6.93391e+266)}
; 1.4092884487443253505034590489231050014495849609375p-345 x 1.23684695230882102379155185190029442310333251953125p-4 1.3440087665864177690622227601124905049800872802734375p886 == 1.3440087665864177690622227601124905049800872802734375p886
; [HW: 1.3440087665864177690622227601124905049800872802734375p886] 

; mpf : + 1549277753010775 886
; mpfd: + 1549277753010775 886 (6.93391e+266) class: Pos. norm. non-zero
; hwf : + 1549277753010775 886 (6.93391e+266) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010100110 #b0110100011000111001000001011010111111100110010011000)))
(assert (= y (fp #b0 #b01111111011 #b0011110010100010000000000111101001010010110110110100)))
(assert (= z (fp #b0 #b11101110101 #b0101100000010000111101010110001000000110101001010111)))
(assert (= r (fp #b0 #b11101110101 #b0101100000010000111101010110001000000110101001010111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
