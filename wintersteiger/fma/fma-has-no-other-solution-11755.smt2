(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4898875074094968251614545806660316884517669677734375p-605 {- 2206257195822871 -605 (-1.12203e-182)}
; Y = 1.01601798903483331315555915352888405323028564453125p-321 {+ 72138609448500 -321 (2.37833e-097)}
; Z = 1.540970574177935592530275243916548788547515869140625p651 {+ 2436314876286154 651 (1.43986e+196)}
; -1.4898875074094968251614545806660316884517669677734375p-605 x 1.01601798903483331315555915352888405323028564453125p-321 1.540970574177935592530275243916548788547515869140625p651 == 1.5409705741779353704856703188852407038211822509765625p651
; [HW: 1.5409705741779353704856703188852407038211822509765625p651] 

; mpf : + 2436314876286153 651
; mpfd: + 2436314876286153 651 (1.43986e+196) class: Pos. norm. non-zero
; hwf : + 2436314876286153 651 (1.43986e+196) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110100010 #b0111110101101001010001001000011100001010111100010111)))
(assert (= y (fp #b0 #b01010111110 #b0000010000011001110000010100001100001101011000110100)))
(assert (= z (fp #b0 #b11010001010 #b1000101001111101000011000010110000110001010011001010)))
(assert (= r (fp #b0 #b11010001010 #b1000101001111101000011000010110000110001010011001001)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
