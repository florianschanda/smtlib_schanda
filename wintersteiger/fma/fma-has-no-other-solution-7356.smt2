(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5136211659635474546803379780612885951995849609375p-66 {- 2313144091643032 -66 (-2.05134e-020)}
; Y = 1.8867355069208355811127830747864209115505218505859375p-1017 {+ 3993501698544863 -1017 (1.3434e-306)}
; Z = 1.590818227670319995326053685857914388179779052734375p-1015 {+ 2660808749979750 -1015 (4.5308e-306)}
; -1.5136211659635474546803379780612885951995849609375p-66 x 1.8867355069208355811127830747864209115505218505859375p-1017 1.590818227670319995326053685857914388179779052734375p-1015 == 1.590818227670319995326053685857914388179779052734375p-1015
; [HW: 1.590818227670319995326053685857914388179779052734375p-1015] 

; mpf : + 2660808749979750 -1015
; mpfd: + 2660808749979750 -1015 (4.5308e-306) class: Pos. norm. non-zero
; hwf : + 2660808749979750 -1015 (4.5308e-306) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110111101 #b1000001101111100101011010011111001011000110010011000)))
(assert (= y (fp #b0 #b00000000110 #b1110001100000001000110010010001001101101010011011111)))
(assert (= z (fp #b0 #b00000001000 #b1001011100111111110111010000010110111001100001100110)))
(assert (= r (fp #b0 #b00000001000 #b1001011100111111110111010000010110111001100001100110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
