(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0071230672670470340790416230447590351104736328125p852 {- 32079443089608 852 (-3.0244e+256)}
; Y = 1.0509555182439440645936201690346933901309967041015625p-495 {+ 229483252975897 -495 (1.02739e-149)}
; Z = 1.235027925156445771648350273608230054378509521484375p771 {+ 1058471676156230 771 (1.53392e+232)}
; -1.0071230672670470340790416230447590351104736328125p852 x 1.0509555182439440645936201690346933901309967041015625p-495 1.235027925156445771648350273608230054378509521484375p771 == 1.2350279251564455496037453485769219696521759033203125p771
; [HW: 1.2350279251564455496037453485769219696521759033203125p771] 

; mpf : + 1058471676156229 771
; mpfd: + 1058471676156229 771 (1.53392e+232) class: Pos. norm. non-zero
; hwf : + 1058471676156229 771 (1.53392e+232) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101010011 #b0000000111010010110100010011110011110101100011001000)))
(assert (= y (fp #b0 #b01000010000 #b0000110100001011011010111011110001101000100100011001)))
(assert (= z (fp #b0 #b11100000010 #b0011110000101010110010100100010000110001100101000110)))
(assert (= r (fp #b0 #b11100000010 #b0011110000101010110010100100010000110001100101000101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
