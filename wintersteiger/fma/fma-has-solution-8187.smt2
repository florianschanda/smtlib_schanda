(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9105017420430445707069111449527554214000701904296875p260 {- 4100535306185243 260 (-3.53954e+078)}
; Y = -1.8841745351439904698764848944847472012042999267578125p342 {- 3981968107004957 342 (-1.68803e+103)}
; Z = -1.0356022388371217690661296728649176657199859619140625p-292 {- 160338229560417 -292 (-1.30147e-088)}
; -1.9105017420430445707069111449527554214000701904296875p260 x -1.8841745351439904698764848944847472012042999267578125p342 -1.0356022388371217690661296728649176657199859619140625p-292 == 1.7998593658528687644349020047229714691638946533203125p603
; [HW: 1.7998593658528687644349020047229714691638946533203125p603] 

; mpf : + 3602246342003781 603
; mpfd: + 3602246342003781 603 (5.97484e+181) class: Pos. norm. non-zero
; hwf : + 3602246342003781 603 (5.97484e+181) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100000011 #b1110100100010110101001000110010100000110101000011011)))
(assert (= y (fp #b1 #b10101010101 #b1110001001011001010000110010100001100110010000011101)))
(assert (= z (fp #b1 #b01011011011 #b0000100100011101001110100111001101111000010001100001)))
(assert (= r (fp #b0 #b11001011010 #b1100110011000011100101010101100110111100110001000101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
