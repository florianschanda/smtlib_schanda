(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0605325480326339704362226257217116653919219970703125p268 {- 272614360763557 268 (-5.02994e+080)}
; Y = -1.2829063912581688544634062054683454334735870361328125p-700 {- 1274097118251021 -700 (-2.43892e-211)}
; Z = -1.0717868430234840371184645846369676291942596435546875p84 {- 323299199490667 84 (-2.07314e+025)}
; -1.0605325480326339704362226257217116653919219970703125p268 x -1.2829063912581688544634062054683454334735870361328125p-700 -1.0717868430234840371184645846369676291942596435546875p84 == -1.071786843023483815073859659605659544467926025390625p84
; [HW: -1.071786843023483815073859659605659544467926025390625p84] 

; mpf : - 323299199490666 84
; mpfd: - 323299199490666 84 (-2.07314e+025) class: Neg. norm. non-zero
; hwf : - 323299199490666 84 (-2.07314e+025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100001011 #b0000111101111111000011111010001000100100110010100101)))
(assert (= y (fp #b1 #b00101000011 #b0100100001101100100011011010001001001000100000001101)))
(assert (= z (fp #b1 #b10001010011 #b0001001001100000100111110101111100010001101001101011)))
(assert (= r (fp #b1 #b10001010011 #b0001001001100000100111110101111100010001101001101010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
