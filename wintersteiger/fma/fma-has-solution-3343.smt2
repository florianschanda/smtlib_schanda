(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 0.7227664992743829674992639411357231438159942626953125p-1022 {+ 3255050936807989 -1023 (1.60821e-308)}
; Y = -1.9875818905895712429554578193346969783306121826171875p808 {- 4447673434457043 808 (-3.39283e+243)}
; Z = -1.4858135314588214459519122101482935249805450439453125p-852 {- 2187909639249493 -852 (-4.94775e-257)}
; 0.7227664992743829674992639411357231438159942626953125p-1022 x -1.9875818905895712429554578193346969783306121826171875p808 -1.4858135314588214459519122101482935249805450439453125p-852 == -1.436557605082584121447553116013295948505401611328125p-214
; [HW: -1.436557605082584121447553116013295948505401611328125p-214] 

; mpf : - 1966080667575682 -214
; mpfd: - 1966080667575682 -214 (-5.45637e-065) class: Neg. norm. non-zero
; hwf : - 1966080667575682 -214 (-5.45637e-065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1011100100000111001110011010110100000111001000110101)))
(assert (= y (fp #b1 #b11100100111 #b1111110011010010001010101011001000110100001111010011)))
(assert (= z (fp #b1 #b00010101011 #b0111110001011110010001101000110110010001111001010101)))
(assert (= r (fp #b1 #b01100101001 #b0110111111000010001111010011110010100110010110000010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
