(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9048571900121606947919872254715301096439361572265625p362 {- 4075114503762281 362 (-1.78946e+109)}
; Y = 1.912365152819781588533487592940218746662139892578125p-646 {+ 4108927362264994 -646 (6.54928e-195)}
; Z = -1.598061881926712946011548410751856863498687744140625p-912 {- 2693431268589642 -912 (-4.6157e-275)}
; -1.9048571900121606947919872254715301096439361572265625p362 x 1.912365152819781588533487592940218746662139892578125p-646 -1.598061881926712946011548410751856863498687744140625p-912 == -1.8213912556387328312013096365262754261493682861328125p-283
; [HW: -1.8213912556387328312013096365262754261493682861328125p-283] 

; mpf : - 3699217352819981 -283
; mpfd: - 3699217352819981 -283 (-1.17196e-085) class: Neg. norm. non-zero
; hwf : - 3699217352819981 -283 (-1.17196e-085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101001 #b1110011110100100101110001000011010100111000101101001)))
(assert (= y (fp #b0 #b00101111001 #b1110100110010000110000110011110101011110111110100010)))
(assert (= z (fp #b1 #b00001101111 #b1001100100011010100101010101111111011100000001001010)))
(assert (= r (fp #b1 #b01011100100 #b1101001001000110101100101000010000110000010100001101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
