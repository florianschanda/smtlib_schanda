(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.44893407465971524317183138919062912464141845703125p22 {- 2021819331351412 22 (-6.07727e+006)}
; Y = 1.4987045399070828555210255217389203608036041259765625p-230 {+ 2245965580093513 -230 (8.68594e-070)}
; Z = 1.360285759949370731902718034689314663410186767578125p-771 {+ 1622582814254882 -771 (1.09523e-232)}
; -1.44893407465971524317183138919062912464141845703125p22 x 1.4987045399070828555210255217389203608036041259765625p-230 1.360285759949370731902718034689314663410186767578125p-771 == -1.0857620378592915955096032121218740940093994140625p-207
; [HW: -1.0857620378592915955096032121218740940093994140625p-207] 

; mpf : - 386237881745640 -207
; mpfd: - 386237881745640 -207 (-5.27868e-063) class: Neg. norm. non-zero
; hwf : - 386237881745640 -207 (-5.27868e-063) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000010101 #b0111001011101101010101111111000010111001001101110100)))
(assert (= y (fp #b0 #b01100011001 #b0111111110101011000110011100100101000100100001001001)))
(assert (= z (fp #b0 #b00011111100 #b0101110000111011101100000000010000110010011100100010)))
(assert (= r (fp #b1 #b01100110000 #b0001010111110100100000000011101111011000000011101000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
