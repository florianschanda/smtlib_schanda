(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0006543920798574021091553731821477413177490234375p495 {+ 2947119927000 495 (1.0236e+149)}
; Y = -1.70532616938507697312843447434715926647186279296875p795 {- 3176506673617292 795 (-3.55348e+239)}
; Z = 1.3534425792982098801786605690722353756427764892578125p1011 {+ 1591763868424285 1011 (2.97006e+304)}
; 1.0006543920798574021091553731821477413177490234375p495 x -1.70532616938507697312843447434715926647186279296875p795 1.3534425792982098801786605690722353756427764892578125p1011 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111101110 #b0000000000101010111000101110000010010100111011011000)))
(assert (= y (fp #b1 #b11100011010 #b1011010010010000010000010111111010000101100110001100)))
(assert (= z (fp #b0 #b11111110010 #b0101101001111011001101100111111100011001100001011101)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
