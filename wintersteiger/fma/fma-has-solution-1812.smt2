(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.587929026051541736563876838772557675838470458984375p-482 {+ 2647796942646022 -482 (1.27167e-145)}
; Y = 1.3219276755491076169590769495698623359203338623046875p-555 {+ 1449833359643211 -555 (1.12088e-167)}
; Z = 1.8745728884922387980083158254274167120456695556640625p963 {+ 3938726134721985 963 (1.46146e+290)}
; 1.587929026051541736563876838772557675838470458984375p-482 x 1.3219276755491076169590769495698623359203338623046875p-555 1.8745728884922387980083158254274167120456695556640625p963 == 1.874572888492239020052920750458724796772003173828125p963
; [HW: 1.874572888492239020052920750458724796772003173828125p963] 

; mpf : + 3938726134721986 963
; mpfd: + 3938726134721986 963 (1.46146e+290) class: Pos. norm. non-zero
; hwf : + 3938726134721986 963 (1.46146e+290) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011101 #b1001011010000010100001000100001101000010101100000110)))
(assert (= y (fp #b0 #b00111010100 #b0101001001101001110110100010011000101001001001001011)))
(assert (= z (fp #b0 #b11111000010 #b1101111111100100000000100100001000001010110111000001)))
(assert (= r (fp #b0 #b11111000010 #b1101111111100100000000100100001000001010110111000010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
