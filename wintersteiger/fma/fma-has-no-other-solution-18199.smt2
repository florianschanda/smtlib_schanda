(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0270949362682906258470438842778094112873077392578125p109 {- 122024744881501 109 (-6.66623e+032)}
; Y = -1.8691549074628921456309171844623051583766937255859375p-492 {- 3914325717377119 -492 (-1.4618e-148)}
; Z = 1.1383053467444106399142356167430989444255828857421875p-707 {+ 622871908061475 -707 (1.69064e-213)}
; -1.0270949362682906258470438842778094112873077392578125p109 x -1.8691549074628921456309171844623051583766937255859375p-492 1.1383053467444106399142356167430989444255828857421875p-707 == 1.91979954055616186536781242466531693935394287109375p-383
; [HW: 1.91979954055616186536781242466531693935394287109375p-383] 

; mpf : + 4142408868104284 -383
; mpfd: + 4142408868104284 -383 (9.74468e-116) class: Pos. norm. non-zero
; hwf : + 4142408868104284 -383 (9.74468e-116) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001101100 #b0000011011101111101100011001100100101000110101011101)))
(assert (= y (fp #b1 #b01000010011 #b1101111010000000111011111001111010110110000001011111)))
(assert (= z (fp #b0 #b00100111100 #b0010001101100111111110101010110100100001000100100011)))
(assert (= r (fp #b0 #b01010000000 #b1110101101110111111110111001000110010000100001011100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
