(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4870991119707561711749121968750841915607452392578125p737 {+ 2193699379163997 737 (1.07509e+222)}
; Y = 1.2987328376318079126150450974819250404834747314453125p990 {+ 1345373096241941 990 (1.35899e+298)}
; Z = 1.1867906756815076452227231129654683172702789306640625p373 {+ 841230417395521 373 (2.2833e+112)}
; 1.4870991119707561711749121968750841915607452392578125p737 x 1.2987328376318079126150450974819250404834747314453125p990 1.1867906756815076452227231129654683172702789306640625p373 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011100000 #b0111110010110010100001110000001111010011001101011101)))
(assert (= y (fp #b0 #b11111011101 #b0100110001111001110000010101011111011110101100010101)))
(assert (= z (fp #b0 #b10101110100 #b0010111111010001100000111000001100111111111101000001)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
