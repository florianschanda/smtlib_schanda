(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.763872651294294602308809771784581243991851806640625p-530 {+ 3440176587727498 -530 (5.01845e-160)}
; Y = -1.263600140753708078733552611083723604679107666015625p754 {- 1187149495673210 754 (-1.19736e+227)}
; Z = 1.5578882517166097176897210374590940773487091064453125p-553 {+ 2512505322545301 -553 (5.28383e-167)}
; 1.763872651294294602308809771784581243991851806640625p-530 x -1.263600140753708078733552611083723604679107666015625p754 1.5578882517166097176897210374590940773487091064453125p-553 == -1.11441486522354349375518722808919847011566162109375p225
; [HW: -1.11441486522354349375518722808919847011566162109375p225] 

; mpf : - 515278744386396 225
; mpfd: - 515278744386396 225 (-6.00891e+067) class: Neg. norm. non-zero
; hwf : - 515278744386396 225 (-6.00891e+067) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111101101 #b1100001110001101001010000111011110011110001010001010)))
(assert (= y (fp #b1 #b11011110001 #b0100001101111011010011000111111111000010000101111010)))
(assert (= z (fp #b0 #b00111010110 #b1000111011010001110000111011001111110010000010010101)))
(assert (= r (fp #b1 #b10011100000 #b0001110101001010010010101110100001001111101101011100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
