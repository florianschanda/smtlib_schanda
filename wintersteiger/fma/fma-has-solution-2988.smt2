(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.648838459910229037319595590815879404544830322265625p526 {- 2922108646275354 526 (-3.62206e+158)}
; Y = 1.5572142463372415921440961028565652668476104736328125p600 {+ 2509469872169933 600 (6.46168e+180)}
; Z = -1.187275324755474148474831963540054857730865478515625p7 {- 843413082784442 7 (-151.971)}
; -1.648838459910229037319595590815879404544830322265625p526 x 1.5572142463372415921440961028565652668476104736328125p600 -1.187275324755474148474831963540054857730865478515625p7 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000001101 #b1010011000011010010001101111110110110011100100011010)))
(assert (= y (fp #b0 #b11001010111 #b1000111010100101100101111100010011100010001111001101)))
(assert (= z (fp #b1 #b10000000110 #b0010111111110001010001101001001100101100001010111010)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
