(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9858144335711418460022059662151150405406951904296875p570 {- 4439713515687451 570 (-7.67425e+171)}
; Y = 1.40357540073008468795023873099125921726226806640625p-865 {+ 1817542024343908 -865 (5.70544e-261)}
; Z = -1.499601730912033747955547369201667606830596923828125p332 {- 2250006169169090 332 (-1.312e+100)}
; -1.9858144335711418460022059662151150405406951904296875p570 x 1.40357540073008468795023873099125921726226806640625p-865 -1.499601730912033747955547369201667606830596923828125p332 == -1.499601730912033747955547369201667606830596923828125p332
; [HW: -1.499601730912033747955547369201667606830596923828125p332] 

; mpf : - 2250006169169090 332
; mpfd: - 2250006169169090 332 (-1.312e+100) class: Neg. norm. non-zero
; hwf : - 2250006169169090 332 (-1.312e+100) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111001 #b1111110001011110010101011011000000011100111000011011)))
(assert (= y (fp #b0 #b00010011110 #b0110011101010000101101111010101110011011000101100100)))
(assert (= z (fp #b1 #b10101001011 #b0111111111100101111001100010011101001010110011000010)))
(assert (= r (fp #b1 #b10101001011 #b0111111111100101111001100010011101001010110011000010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
