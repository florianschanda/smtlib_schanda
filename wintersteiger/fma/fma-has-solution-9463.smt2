(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.02633065490964359156578211695887148380279541015625p-462 {+ 118582727639492 -462 (8.61845e-140)}
; Y = -1.53629873538733630056185575085692107677459716796875p380 {- 2415274784849676 380 (-3.78333e+114)}
; Z = 1.8371814960844472519596592974266968667507171630859375p-833 {+ 3770330273807391 -833 (3.20749e-251)}
; 1.02633065490964359156578211695887148380279541015625p-462 x -1.53629873538733630056185575085692107677459716796875p380 1.8371814960844472519596592974266968667507171630859375p-833 == -1.576750487226941999097107327543199062347412109375p-82
; [HW: -1.576750487226941999097107327543199062347412109375p-82] 

; mpf : - 2597453279361008 -82
; mpfd: - 2597453279361008 -82 (-3.26064e-025) class: Neg. norm. non-zero
; hwf : - 2597453279361008 -82 (-3.26064e-025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000110001 #b0000011010111101100110110001010110111000000111000100)))
(assert (= y (fp #b1 #b10101111011 #b1000100101001010110111111011100101011111111100001100)))
(assert (= z (fp #b0 #b00010111110 #b1101011001010001100001101100101001111111110000011111)))
(assert (= r (fp #b1 #b01110101101 #b1001001110100101111010111000000010010111011111110000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
