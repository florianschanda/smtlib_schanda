(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8708065212600020199573691570549272000789642333984375p-104 {- 3921763924658343 -104 (-9.22379e-032)}
; Y = 1.626360338196935817478561148163862526416778564453125p-861 {+ 2820876185703378 -861 (1.05777e-259)}
; Z = -1.6669582837557490595514764208928681910037994384765625p-287 {- 3003713078194057 -287 (-6.70372e-087)}
; -1.8708065212600020199573691570549272000789642333984375p-104 x 1.626360338196935817478561148163862526416778564453125p-861 -1.6669582837557490595514764208928681910037994384765625p-287 == -1.6669582837557490595514764208928681910037994384765625p-287
; [HW: -1.6669582837557490595514764208928681910037994384765625p-287] 

; mpf : - 3003713078194057 -287
; mpfd: - 3003713078194057 -287 (-6.70372e-087) class: Neg. norm. non-zero
; hwf : - 3003713078194057 -287 (-6.70372e-087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110010111 #b1101111011101101001011010001100111110100100010100111)))
(assert (= y (fp #b0 #b00010100010 #b1010000001011001001001101011000000010001001111010010)))
(assert (= z (fp #b1 #b01011100000 #b1010101010111101110001110011000010000110111110001001)))
(assert (= r (fp #b1 #b01011100000 #b1010101010111101110001110011000010000110111110001001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
