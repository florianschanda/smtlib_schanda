(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.052465179148442064871460388530977070331573486328125p356 {- 236282161262850 356 (-1.54485e+107)}
; Y = -1.844699472360110892310558483586646616458892822265625p483 {- 3804188228961050 483 (-4.60695e+145)}
; Z = -1.494720358714835217739391737268306314945220947265625p230 {- 2228022423160730 230 (-2.57905e+069)}
; -1.052465179148442064871460388530977070331573486328125p356 x -1.844699472360110892310558483586646616458892822265625p483 -1.494720358714835217739391737268306314945220947265625p230 == 1.9414819606525208772751511787646450102329254150390625p839
; [HW: 1.9414819606525208772751511787646450102329254150390625p839] 

; mpf : + 4240057807170737 839
; mpfd: + 4240057807170737 839 (7.11705e+252) class: Pos. norm. non-zero
; hwf : + 4240057807170737 839 (7.11705e+252) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101100011 #b0000110101101110010110111010010010011111000100000010)))
(assert (= y (fp #b1 #b10111100010 #b1101100000111110001110011000000010111100001100011010)))
(assert (= z (fp #b1 #b10011100101 #b0111111010100101111111100101000101011000011110011010)))
(assert (= r (fp #b0 #b11101000110 #b1111000100000100111101100011011011000110110010110001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
