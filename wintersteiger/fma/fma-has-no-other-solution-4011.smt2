(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6060371110931708216185143101029098033905029296875p-976 {+ 2729348507691896 -976 (2.51466e-294)}
; Y = 1.021035542247962002448957719025202095508575439453125p85 {+ 94735660229458 85 (3.94994e+025)}
; Z = -1.7217549489448062960406105048605240881443023681640625p92 {- 3250495319120641 92 (-8.52572e+027)}
; 1.6060371110931708216185143101029098033905029296875p-976 x 1.021035542247962002448957719025202095508575439453125p85 -1.7217549489448062960406105048605240881443023681640625p92 == -1.7217549489448062960406105048605240881443023681640625p92
; [HW: -1.7217549489448062960406105048605240881443023681640625p92] 

; mpf : - 3250495319120641 92
; mpfd: - 3250495319120641 92 (-8.52572e+027) class: Neg. norm. non-zero
; hwf : - 3250495319120641 92 (-8.52572e+027) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000101111 #b1001101100100101001111111000010001001110101101111000)))
(assert (= y (fp #b0 #b10001010100 #b0000010101100010100101011101011000000010001101010010)))
(assert (= z (fp #b1 #b10001011011 #b1011100011000100111011101010110101110001101100000001)))
(assert (= r (fp #b1 #b10001011011 #b1011100011000100111011101010110101110001101100000001)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
