(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8268716586272315538508337340317666530609130859375p-255 {+ 3723898893676824 -255 (3.15543e-077)}
; Y = 1.6159743779669109020602491000317968428134918212890625p200 {+ 2774101979081553 200 (2.59677e+060)}
; Z = 1.622115674001034957285583004704676568508148193359375p870 {+ 2801759917612406 870 (1.27696e+262)}
; 1.8268716586272315538508337340317666530609130859375p-255 x 1.6159743779669109020602491000317968428134918212890625p200 1.622115674001034957285583004704676568508148193359375p870 == 1.622115674001034957285583004704676568508148193359375p870
; [HW: 1.622115674001034957285583004704676568508148193359375p870] 

; mpf : + 2801759917612406 870
; mpfd: + 2801759917612406 870 (1.27696e+262) class: Pos. norm. non-zero
; hwf : + 2801759917612406 870 (1.27696e+262) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100000000 #b1101001110101101110111000110101111001011000100011000)))
(assert (= y (fp #b0 #b10011000111 #b1001110110110000011111110011000010001010101101010001)))
(assert (= z (fp #b0 #b11101100101 #b1001111101000010111110010000101000101001110101110110)))
(assert (= r (fp #b0 #b11101100101 #b1001111101000010111110010000101000101001110101110110)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
