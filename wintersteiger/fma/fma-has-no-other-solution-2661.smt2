(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5456512925878087560960238988627679646015167236328125p-517 {+ 2457394957972685 -517 (3.6025e-156)}
; Y = 1.2192463239601958324698216529213823378086090087890625p-695 {+ 987397662889489 -695 (7.41728e-210)}
; Z = 1.4639861986457021192364891248871572315692901611328125p104 {+ 2089608071325837 104 (2.96932e+031)}
; 1.5456512925878087560960238988627679646015167236328125p-517 x 1.2192463239601958324698216529213823378086090087890625p-695 1.4639861986457021192364891248871572315692901611328125p104 == 1.4639861986457021192364891248871572315692901611328125p104
; [HW: 1.4639861986457021192364891248871572315692901611328125p104] 

; mpf : + 2089608071325837 104
; mpfd: + 2089608071325837 104 (2.96932e+031) class: Pos. norm. non-zero
; hwf : + 2089608071325837 104 (2.96932e+031) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111111010 #b1000101110101111110011011001100010101111010011001101)))
(assert (= y (fp #b0 #b00101001000 #b0011100000100000100001101110111100101101011000010001)))
(assert (= z (fp #b0 #b10001100111 #b0111011011000111110011001010110011111010100010001101)))
(assert (= r (fp #b0 #b10001100111 #b0111011011000111110011001010110011111010100010001101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
