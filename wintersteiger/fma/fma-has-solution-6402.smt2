(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.921863006013064367749620942049659788608551025390625p237 {+ 4151701890367082 237 (4.24455e+071)}
; Y = 1.638383629470192115462623405619524419307708740234375p-129 {+ 2875024275801382 -129 (2.40739e-039)}
; Z = -1.3410879158779049902250335435383021831512451171875p289 {- 1536123410848312 289 (-1.33391e+087)}
; 1.921863006013064367749620942049659788608551025390625p237 x 1.638383629470192115462623405619524419307708740234375p-129 -1.3410879158779049902250335435383021831512451171875p289 == -1.3410879158779047681804286185069940984249114990234375p289
; [HW: -1.3410879158779047681804286185069940984249114990234375p289] 

; mpf : - 1536123410848311 289
; mpfd: - 1536123410848311 289 (-1.33391e+087) class: Neg. norm. non-zero
; hwf : - 1536123410848311 289 (-1.33391e+087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011101100 #b1110101111111111001101101100011000110111111001101010)))
(assert (= y (fp #b0 #b01101111110 #b1010001101101101000111000000101011100000010100100110)))
(assert (= z (fp #b1 #b10100100000 #b0101011101010001100010011010001111000001101000111000)))
(assert (= r (fp #b1 #b10100100000 #b0101011101010001100010011010001111000001101000110111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
