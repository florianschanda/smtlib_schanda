(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.33197018221216634259462807676754891872406005859375p-313 {+ 1495060788908828 -313 (7.98189e-095)}
; Y = 1.2089937331307869516905384443816728889942169189453125p-846 {+ 941224098650581 -846 (2.5766e-255)}
; Z = -1.6664234292944535287261942357872612774372100830078125p167 {- 3001304307841469 167 (-3.11742e+050)}
; 1.33197018221216634259462807676754891872406005859375p-313 x 1.2089937331307869516905384443816728889942169189453125p-846 -1.6664234292944535287261942357872612774372100830078125p167 == -1.66642342929445330668158931075595319271087646484375p167
; [HW: -1.66642342929445330668158931075595319271087646484375p167] 

; mpf : - 3001304307841468 167
; mpfd: - 3001304307841468 167 (-3.11742e+050) class: Neg. norm. non-zero
; hwf : - 3001304307841468 167 (-3.11742e+050) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011000110 #b0101010011111011111111110111001111011001001100011100)))
(assert (= y (fp #b0 #b00010110001 #b0011010110000000100111010000000011011101100111010101)))
(assert (= z (fp #b1 #b10010100110 #b1010101010011010101110011101001000011011100110111101)))
(assert (= r (fp #b1 #b10010100110 #b1010101010011010101110011101001000011011100110111100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
