(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4724778450015743036516369102173484861850738525390625p-757 {- 2127851046689905 -757 (-1.94242e-228)}
; Y = 1.2640345024070074320121648270287550985813140869140625p-349 {+ 1189105686653153 -349 (1.10228e-105)}
; Z = 1.01076064668394938195206123054958879947662353515625p459 {+ 48461644396100 459 (1.50458e+138)}
; -1.4724778450015743036516369102173484861850738525390625p-757 x 1.2640345024070074320121648270287550985813140869140625p-349 1.01076064668394938195206123054958879947662353515625p459 == 1.0107606466839491599074563055182807147502899169921875p459
; [HW: 1.0107606466839491599074563055182807147502899169921875p459] 

; mpf : + 48461644396099 459
; mpfd: + 48461644396099 459 (1.50458e+138) class: Pos. norm. non-zero
; hwf : + 48461644396099 459 (1.50458e+138) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100001010 #b0111100011110100010011101101110001011101110001110001)))
(assert (= y (fp #b0 #b01010100010 #b0100001110010111110000111110000011011010100011100001)))
(assert (= z (fp #b0 #b10111001010 #b0000001011000001001101011011000110010111011001000100)))
(assert (= r (fp #b0 #b10111001010 #b0000001011000001001101011011000110010111011001000011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
