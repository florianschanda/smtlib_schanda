(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.6157420460902149894621970815933309495449066162109375p-733 {+ 2773055649328239 -733 (3.5759e-221)}
; Y = -1.0352104997501125893677453859709203243255615234375p564 {- 158573993554136 564 (-6.25095e+169)}
; Z = -1.938453790527761899653569344081915915012359619140625p-98 {- 4226420141325258 -98 (-6.11668e-030)}
; 1.6157420460902149894621970815933309495449066162109375p-733 x -1.0352104997501125893677453859709203243255615234375p564 -1.938453790527761899653569344081915915012359619140625p-98 == -1.938453790527761899653569344081915915012359619140625p-98
; [HW: -1.938453790527761899653569344081915915012359619140625p-98] 

; mpf : - 4226420141325258 -98
; mpfd: - 4226420141325258 -98 (-6.11668e-030) class: Neg. norm. non-zero
; hwf : - 4226420141325258 -98 (-6.11668e-030) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100100010 #b1001110110100001010001010100111010111010110001101111)))
(assert (= y (fp #b1 #b11000110011 #b0000100100000011100011100010100011100111000011011000)))
(assert (= z (fp #b1 #b01110011101 #b1111000000111110100000011111001100011111101111001010)))
(assert (= r (fp #b1 #b01110011101 #b1111000000111110100000011111001100011111101111001010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
