(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3658939289494111957168342996737919747829437255859375p629 {- 1647839762073695 629 (-3.04288e+189)}
; Y = 1.5729966980929379616327423718757927417755126953125p5 {+ 2580547716015880 5 (50.3359)}
; Z = -1.4785758547273122331944250618107616901397705078125p948 {- 2155314041018440 948 (-3.51787e+285)}
; -1.3658939289494111957168342996737919747829437255859375p629 x 1.5729966980929379616327423718757927417755126953125p5 -1.4785758547273122331944250618107616901397705078125p948 == -1.4785758547273122331944250618107616901397705078125p948
; [HW: -1.4785758547273122331944250618107616901397705078125p948] 

; mpf : - 2155314041018440 948
; mpfd: - 2155314041018440 948 (-3.51787e+285) class: Neg. norm. non-zero
; hwf : - 2155314041018440 948 (-3.51787e+285) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001110100 #b0101110110101011001110010111101010100100100001011111)))
(assert (= y (fp #b0 #b10000000100 #b1001001010101111111010010101111100000110011100001000)))
(assert (= z (fp #b1 #b11110110011 #b0111101010000011111100100111110010110101100001001000)))
(assert (= r (fp #b1 #b11110110011 #b0111101010000011111100100111110010110101100001001000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
