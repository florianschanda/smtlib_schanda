(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3058603836128017672280066108214668929576873779296875p842 {- 1377472709666011 842 (-3.8296e+253)}
; Y = 1.913811303864466406565725264954380691051483154296875p69 {+ 4115440247570958 69 (1.12971e+021)}
; Z = 1.82737459963401871476662563509307801723480224609375p809 {+ 3726163938607580 809 (6.2387e+243)}
; -1.3058603836128017672280066108214668929576873779296875p842 x 1.913811303864466406565725264954380691051483154296875p69 1.82737459963401871476662563509307801723480224609375p809 == -1.2495851817134842054457521953736431896686553955078125p912
; [HW: -1.2495851817134842054457521953736431896686553955078125p912] 

; mpf : - 1124031731362045 912
; mpfd: - 1124031731362045 912 (-4.32635e+274) class: Neg. norm. non-zero
; hwf : - 1124031731362045 912 (-4.32635e+274) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101001001 #b0100111001001100110111011011100011000010010011011011)))
(assert (= y (fp #b0 #b10001000100 #b1110100111101111100010011010000011010000001000001110)))
(assert (= z (fp #b0 #b11100101000 #b1101001111001110110100100101111011111000000111011100)))
(assert (= r (fp #b1 #b11110001111 #b0011111111100100110100001000000100000110100011111101)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
