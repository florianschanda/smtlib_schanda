(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3596477828789137465292924389359541237354278564453125p139 {+ 1619709620958101 139 (9.47536e+041)}
; Y = -1.6942542199786128076510749451699666678905487060546875p-867 {- 3126643046396075 -867 (-1.72176e-261)}
; Z = 1.13934526955788495428123496822081506252288818359375p-14 {+ 627555304056732 -14 (6.95401e-005)}
; 1.3596477828789137465292924389359541237354278564453125p139 x -1.6942542199786128076510749451699666678905487060546875p-867 1.13934526955788495428123496822081506252288818359375p-14 == 1.1393452695578847322366300431895069777965545654296875p-14
; [HW: 1.1393452695578847322366300431895069777965545654296875p-14] 

; mpf : + 627555304056731 -14
; mpfd: + 627555304056731 -14 (6.95401e-005) class: Pos. norm. non-zero
; hwf : + 627555304056731 -14 (6.95401e-005) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010001010 #b0101110000010001111000001000100110001011001110010101)))
(assert (= y (fp #b1 #b00010011100 #b1011000110111010101001010000000111101011000010101011)))
(assert (= z (fp #b0 #b01111110001 #b0010001110101100001000011010111110011010011110011100)))
(assert (= r (fp #b0 #b01111110001 #b0010001110101100001000011010111110011010011110011011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
