(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9265308380668904053578671664581634104251861572265625p826 {+ 4172723937065321 826 (8.6209e+248)}
; Y = 1.4433971644293672742520584506564773619174957275390625p-328 {+ 1996883304501233 -328 (2.63966e-099)}
; Z = -1.336309386097250584413131946348585188388824462890625p76 {- 1514602825908778 76 (-1.00969e+023)}
; 1.9265308380668904053578671664581634104251861572265625p826 x 1.4433971644293672742520584506564773619174957275390625p-328 -1.336309386097250584413131946348585188388824462890625p76 == 1.3903745744257409722166585197555832564830780029296875p499
; [HW: 1.3903745744257409722166585197555832564830780029296875p499] 

; mpf : + 1758090787918683 499
; mpfd: + 1758090787918683 499 (2.27562e+150) class: Pos. norm. non-zero
; hwf : + 1758090787918683 499 (2.27562e+150) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100111001 #b1110110100110001001000000000000000111011100101101001)))
(assert (= y (fp #b0 #b01010110111 #b0111000110000010011110100000000001011100111111110001)))
(assert (= z (fp #b1 #b10001001011 #b0101011000011000010111110011011010100000001000101010)))
(assert (= r (fp #b0 #b10111110010 #b0110001111101111100101101000111001011001001101011011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
