(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.973859200373389466420803728397004306316375732421875p-207 {- 4385871931912926 -207 (-9.59637e-063)}
; Y = 1.144425339833965882263555613462813198566436767578125p-760 {+ 650433906659106 -760 (1.88708e-229)}
; Z = -1.0986254173101823727876080738496966660022735595703125p-708 {- 444169392647397 -708 (-8.15854e-214)}
; -1.973859200373389466420803728397004306316375732421875p-207 x 1.144425339833965882263555613462813198566436767578125p-760 -1.0986254173101823727876080738496966660022735595703125p-708 == -1.0986254173101823727876080738496966660022735595703125p-708
; [HW: -1.0986254173101823727876080738496966660022735595703125p-708] 

; mpf : - 444169392647397 -708
; mpfd: - 444169392647397 -708 (-8.15854e-214) class: Neg. norm. non-zero
; hwf : - 444169392647397 -708 (-8.15854e-214) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110000 #b1111100101001110110101100010100010000011001011011110)))
(assert (= y (fp #b0 #b00100000111 #b0010010011111001000011110001111101001100111100100010)))
(assert (= z (fp #b1 #b00100111011 #b0001100100111111100000111110110111100110110011100101)))
(assert (= r (fp #b1 #b00100111011 #b0001100100111111100000111110110111100110110011100101)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
