(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7759713203454838836847784477868117392063140869140625p-931 {- 3494664149158113 -931 (-9.78385e-281)}
; Y = -1.868546742981052499743555017630569636821746826171875p1013 {- 3911586788043326 1013 (-1.64017e+305)}
; Z = 1.6041932388720268054527195999980904161930084228515625p3 {+ 2721044445443833 3 (12.8335)}
; -1.7759713203454838836847784477868117392063140869140625p-931 x -1.868546742981052499743555017630569636821746826171875p1013 1.6041932388720268054527195999980904161930084228515625p3 == 1.65924271312965654345816801651380956172943115234375p83
; [HW: 1.65924271312965654345816801651380956172943115234375p83] 

; mpf : + 2968965237197436 83
; mpfd: + 2968965237197436 83 (1.60472e+025) class: Pos. norm. non-zero
; hwf : + 2968965237197436 83 (1.60472e+025) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001011100 #b1100011010100110000011100111001110000100100011100001)))
(assert (= y (fp #b1 #b11111110100 #b1101111001011001000101000101000000100110101000111110)))
(assert (= z (fp #b0 #b10000000010 #b1001101010101100011010000111100101101011011011111001)))
(assert (= r (fp #b0 #b10001010010 #b1010100011000100001000010110010100000100101001111100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
