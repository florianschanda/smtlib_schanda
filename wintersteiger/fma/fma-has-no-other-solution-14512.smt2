(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.237526030437774426928854154539294540882110595703125p-536 {- 1069722142170354 -536 (-5.50144e-162)}
; Y = -1.5961433997218372748960746321245096623897552490234375p-816 {- 2684791192846647 -816 (-3.65254e-246)}
; Z = -1.823336132007028265178405490587465465068817138671875p-409 {- 3707976297307518 -409 (-1.37911e-123)}
; -1.237526030437774426928854154539294540882110595703125p-536 x -1.5961433997218372748960746321245096623897552490234375p-816 -1.823336132007028265178405490587465465068817138671875p-409 == -1.8233361320070280431338005655561573803424835205078125p-409
; [HW: -1.8233361320070280431338005655561573803424835205078125p-409] 

; mpf : - 3707976297307517 -409
; mpfd: - 3707976297307517 -409 (-1.37911e-123) class: Neg. norm. non-zero
; hwf : - 3707976297307517 -409 (-1.37911e-123) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111100111 #b0011110011001110100000011000010010101101110011110010)))
(assert (= y (fp #b1 #b00011001111 #b1001100010011100110110101001010110001000000100110111)))
(assert (= z (fp #b1 #b01001100110 #b1101001011000110001010000010000010010101110101111110)))
(assert (= r (fp #b1 #b01001100110 #b1101001011000110001010000010000010010101110101111101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
