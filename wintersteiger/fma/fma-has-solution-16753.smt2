(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2514276308539009630038663090090267360210418701171875p485 {- 1132329384624275 485 (-1.25013e+146)}
; Y = 1.9160225042440384157771404716186225414276123046875p-814 {+ 4125398608776440 -814 (1.75382e-245)}
; Z = -1.01436923084299479569381219334900379180908203125p-457 {- 64713262670112 -457 (-2.72576e-138)}
; -1.2514276308539009630038663090090267360210418701171875p485 x 1.9160225042440384157771404716186225414276123046875p-814 -1.01436923084299479569381219334900379180908203125p-457 == -1.1988817515744376596131814949330873787403106689453125p-328
; [HW: -1.1988817515744376596131814949330873787403106689453125p-328] 

; mpf : - 895683782281429 -328
; mpfd: - 895683782281429 -328 (-2.19249e-099) class: Neg. norm. non-zero
; hwf : - 895683782281429 -328 (-2.19249e-099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111100100 #b0100000001011101100011111010101111010100000010010011)))
(assert (= y (fp #b0 #b00011010001 #b1110101010000000011100110110101000100000110011111000)))
(assert (= z (fp #b1 #b01000110110 #b0000001110101101101100111011000010001010000100100000)))
(assert (= r (fp #b1 #b01010110111 #b0011001011101001111010100001101011001000100011010101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
