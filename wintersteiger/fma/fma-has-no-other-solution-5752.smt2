(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1863275745384971315843358752317726612091064453125p-489 {- 839144795260424 -489 (-7.42227e-148)}
; Y = 1.2548434649776909477481012800126336514949798583984375p-977 {+ 1147712933911335 -977 (9.8239e-295)}
; Z = -1.629247406950191656704873821581713855266571044921875p548 {- 2833878387464734 548 (-1.50115e+165)}
; -1.1863275745384971315843358752317726612091064453125p-489 x 1.2548434649776909477481012800126336514949798583984375p-977 -1.629247406950191656704873821581713855266571044921875p548 == -1.629247406950191656704873821581713855266571044921875p548
; [HW: -1.629247406950191656704873821581713855266571044921875p548] 

; mpf : - 2833878387464734 548
; mpfd: - 2833878387464734 548 (-1.50115e+165) class: Neg. norm. non-zero
; hwf : - 2833878387464734 548 (-1.50115e+165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010110 #b0010111110110011001010011111011011111100011000001000)))
(assert (= y (fp #b0 #b00000101110 #b0100000100111101011010111101101110101101101100100111)))
(assert (= z (fp #b1 #b11000100011 #b1010000100010110010110111010100111110001101000011110)))
(assert (= r (fp #b1 #b11000100011 #b1010000100010110010110111010100111110001101000011110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
