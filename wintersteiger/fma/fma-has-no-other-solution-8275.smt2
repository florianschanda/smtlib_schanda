(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6058638601815518054394260616390965878963470458984375p-877 {+ 2728568254950887 -877 (1.59369e-264)}
; Y = -1.858008434330424396563330446952022612094879150390625p-289 {- 3864126465131242 -289 (-1.86801e-087)}
; Z = -1.7285663086737164118034115745103918015956878662109375p164 {- 3281170956257647 164 (-4.04208e+049)}
; 1.6058638601815518054394260616390965878963470458984375p-877 x -1.858008434330424396563330446952022612094879150390625p-289 -1.7285663086737164118034115745103918015956878662109375p164 == -1.728566308673716633848016499541699886322021484375p164
; [HW: -1.728566308673716633848016499541699886322021484375p164] 

; mpf : - 3281170956257648 164
; mpfd: - 3281170956257648 164 (-4.04208e+049) class: Neg. norm. non-zero
; hwf : - 3281170956257648 164 (-4.04208e+049) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010010010 #b1001101100011001111001001101100101001110110111100111)))
(assert (= y (fp #b1 #b01011011110 #b1101101110100110011100001101010100100100001011101010)))
(assert (= z (fp #b1 #b10010100011 #b1011101010000011010100100101010010111000100101101111)))
(assert (= r (fp #b1 #b10010100011 #b1011101010000011010100100101010010111000100101110000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
