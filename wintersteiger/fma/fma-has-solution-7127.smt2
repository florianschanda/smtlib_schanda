(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3243437354041258657844082335941493511199951171875p-220 {- 1460714325905976 -220 (-7.85962e-067)}
; Y = 1.906420368963638534154370063333772122859954833984375p-468 {+ 4082154435905670 -468 (2.50139e-141)}
; Z = 1.9672051335618065959209843640564940869808197021484375p-389 {+ 4355904679099783 -389 (1.5602e-117)}
; -1.3243437354041258657844082335941493511199951171875p-220 x 1.906420368963638534154370063333772122859954833984375p-468 1.9672051335618065959209843640564940869808197021484375p-389 == 1.9672051335618065959209843640564940869808197021484375p-389
; [HW: 1.9672051335618065959209843640564940869808197021484375p-389] 

; mpf : + 4355904679099783 -389
; mpfd: + 4355904679099783 -389 (1.5602e-117) class: Pos. norm. non-zero
; hwf : + 4355904679099783 -389 (1.5602e-117) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100100011 #b0101001100001000001100001110100000111001001000111000)))
(assert (= y (fp #b0 #b01000101011 #b1110100000001011001010100101000100100000100010000110)))
(assert (= z (fp #b0 #b01001111010 #b1111011110011010110000010111000100101011110110000111)))
(assert (= r (fp #b0 #b01001111010 #b1111011110011010110000010111000100101011110110000111)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
