(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0615865722983903740583855324075557291507720947265625p-403 {- 277361264054057 -403 (-5.13886e-122)}
; Y = -1.9888811817383640345724415965378284454345703125p-698 {- 4453524921590592 -698 (-1.51242e-210)}
; Z = -1.48174259085973591965057494235225021839141845703125p904 {- 2169575752684404 904 (-2.00396e+272)}
; -1.0615865722983903740583855324075557291507720947265625p-403 x -1.9888811817383640345724415965378284454345703125p-698 -1.48174259085973591965057494235225021839141845703125p904 == -1.4817425908597356976059700173209421336650848388671875p904
; [HW: -1.4817425908597356976059700173209421336650848388671875p904] 

; mpf : - 2169575752684403 904
; mpfd: - 2169575752684403 904 (-2.00396e+272) class: Neg. norm. non-zero
; hwf : - 2169575752684403 904 (-2.00396e+272) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001101100 #b0000111111000100001000110011100111100100111100101001)))
(assert (= y (fp #b1 #b00101000101 #b1111110100100111010100010010111100110010001101000000)))
(assert (= z (fp #b1 #b11110000111 #b0111101101010011011110111000000011010101001101110100)))
(assert (= r (fp #b1 #b11110000111 #b0111101101010011011110111000000011010101001101110011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
