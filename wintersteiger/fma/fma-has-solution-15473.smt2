(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.409837058056605751943379800650291144847869873046875p-727 {- 1845742021946350 -727 (-1.99693e-219)}
; Y = 1.739667338429388365739214350469410419464111328125p666 {+ 3331165549728720 666 (5.32652e+200)}
; Z = -1.411577522944782003833097405731678009033203125p275 {- 1853580378968192 275 (-8.56946e+082)}
; -1.409837058056605751943379800650291144847869873046875p-727 x 1.739667338429388365739214350469410419464111328125p666 -1.411577522944782003833097405731678009033203125p275 == -1.411577522944782003833097405731678009033203125p275
; [HW: -1.411577522944782003833097405731678009033203125p275] 

; mpf : - 1853580378968192 275
; mpfd: - 1853580378968192 275 (-8.56946e+082) class: Neg. norm. non-zero
; hwf : - 1853580378968192 275 (-8.56946e+082) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100101000 #b0110100011101011000101001101100100001010101111101110)))
(assert (= y (fp #b0 #b11010011001 #b1011110101011010110101101011010001111001001111010000)))
(assert (= z (fp #b1 #b10100010010 #b0110100101011101001001010000000011010001000010000000)))
(assert (= r (fp #b1 #b10100010010 #b0110100101011101001001010000000011010001000010000000)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
