(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8348791664152785951813484643935225903987884521484375p-918 {+ 3759961502767239 -918 (8.28078e-277)}
; Y = -1.7033443434951280881506363584776408970355987548828125p-588 {- 3167581323277805 -588 (-1.68138e-177)}
; Z = 1.394868590298948607397733212565071880817413330078125p-790 {+ 1778330036130658 -790 (2.14209e-238)}
; 1.8348791664152785951813484643935225903987884521484375p-918 x -1.7033443434951280881506363584776408970355987548828125p-588 1.394868590298948607397733212565071880817413330078125p-790 == 1.3948685902989483853531282875337637960910797119140625p-790
; [HW: 1.3948685902989483853531282875337637960910797119140625p-790] 

; mpf : + 1778330036130657 -790
; mpfd: + 1778330036130657 -790 (2.14209e-238) class: Pos. norm. non-zero
; hwf : + 1778330036130657 -790 (2.14209e-238) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001101001 #b1101010110111010101001000001101111011101100010000111)))
(assert (= y (fp #b1 #b00110110011 #b1011010000001110010111111111100100100011010111101101)))
(assert (= z (fp #b0 #b00011101001 #b0110010100010110000110111010000110001101001101100010)))
(assert (= r (fp #b0 #b00011101001 #b0110010100010110000110111010000110001101001101100001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
