(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.069539129316347203513259955798275768756866455078125p-1010 {+ 313176396876770 -1010 (9.74768e-305)}
; Y = -1.1561506520433777467360414448194205760955810546875p692 {- 703240018356216 692 (-2.37559e+208)}
; Z = -1.141889104147641997855089357472024857997894287109375p-681 {- 639011716567254 -681 (-1.13814e-205)}
; 1.069539129316347203513259955798275768756866455078125p-1010 x -1.1561506520433777467360414448194205760955810546875p692 -1.141889104147641997855089357472024857997894287109375p-681 == -1.2365483617450012676641790676512755453586578369140625p-318
; [HW: -1.2365483617450012676641790676512755453586578369140625p-318] 

; mpf : - 1065319113809889 -318
; mpfd: - 1065319113809889 -318 (-2.31565e-096) class: Neg. norm. non-zero
; hwf : - 1065319113809889 -318 (-2.31565e-096) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000001101 #b0001000111001101010100001111111000110100101111100010)))
(assert (= y (fp #b1 #b11010110011 #b0010011111111001011111010011011111000110011111111000)))
(assert (= z (fp #b1 #b00101010110 #b0010010001010010110110000010010111111001000011010110)))
(assert (= r (fp #b1 #b01011000001 #b0011110010001110011011101111010110011101111111100001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
