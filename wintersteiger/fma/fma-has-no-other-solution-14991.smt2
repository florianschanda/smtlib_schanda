(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.937408454872422414183574801427312195301055908203125p532 {- 4221712368057394 532 (-2.72382e+160)}
; Y = 1.0760930178537202461797051000758074223995208740234375p-985 {+ 342692486851511 -985 (3.29082e-297)}
; Z = -1.38134734861793706528487746254540979862213134765625p489 {- 1717435777134468 489 (-2.20786e+147)}
; -1.937408454872422414183574801427312195301055908203125p532 x 1.0760930178537202461797051000758074223995208740234375p-985 -1.38134734861793706528487746254540979862213134765625p489 == -1.38134734861793706528487746254540979862213134765625p489
; [HW: -1.38134734861793706528487746254540979862213134765625p489] 

; mpf : - 1717435777134468 489
; mpfd: - 1717435777134468 489 (-2.20786e+147) class: Neg. norm. non-zero
; hwf : - 1717435777134468 489 (-2.20786e+147) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000010011 #b1110111111111010000000000010000010101011110000110010)))
(assert (= y (fp #b0 #b00000100110 #b0001001101111010110101001111111100100010101110110111)))
(assert (= z (fp #b1 #b10111101000 #b0110000110011111111110101101011010111010111110000100)))
(assert (= r (fp #b1 #b10111101000 #b0110000110011111111110101101011010111010111110000100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
