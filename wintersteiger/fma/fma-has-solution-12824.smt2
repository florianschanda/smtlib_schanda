(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6237886654323554491696768309338949620723724365234375p737 {- 2809294401199095 737 (-1.17391e+222)}
; Y = 1.2666730545349482728312295876094140112400054931640625p91 {+ 1200988669033345 91 (3.13613e+027)}
; Z = 1.888952387242117225696347304619848728179931640625p863 {+ 4003485639933712 863 (1.16174e+260)}
; -1.6237886654323554491696768309338949620723724365234375p737 x 1.2666730545349482728312295876094140112400054931640625p91 1.888952387242117225696347304619848728179931640625p863 == 1.888952387182256220654608114273287355899810791015625p863
; [HW: 1.888952387182256220654608114273287355899810791015625p863] 

; mpf : + 4003485639664122 863
; mpfd: + 4003485639664122 863 (1.16174e+260) class: Pos. norm. non-zero
; hwf : + 4003485639664122 863 (1.16174e+260) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011100000 #b1001111110110000100111010010110110100101101111110111)))
(assert (= y (fp #b0 #b10001011010 #b0100010001000100101011110110111111110011101110000001)))
(assert (= z (fp #b0 #b11101011110 #b1110001110010010011000100011011011100111111100010000)))
(assert (= r (fp #b0 #b11101011110 #b1110001110010010011000100011011010100110000111111010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
