(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.79355572569852572684112601564265787601470947265625p-703 {- 3573857270553604 -703 (-4.26214e-212)}
; Y = -1.1953882859818605322033135962556116282939910888671875p819 {- 879950611940467 819 (-4.17903e+246)}
; Z = 1.2135730010302065995375642160070128738880157470703125p-912 {+ 961847287856037 -912 (3.50518e-275)}
; -1.79355572569852572684112601564265787601470947265625p-703 x -1.1953882859818605322033135962556116282939910888671875p819 1.2135730010302065995375642160070128738880157470703125p-912 == 1.0719977523778563277545572418603114783763885498046875p117
; [HW: 1.0719977523778563277545572418603114783763885498046875p117] 

; mpf : + 324249050780427 117
; mpfd: + 324249050780427 117 (1.78116e+035) class: Pos. norm. non-zero
; hwf : + 324249050780427 117 (1.78116e+035) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000000 #b1100101100100110011101111101000101101101110000000100)))
(assert (= y (fp #b1 #b11100110010 #b0011001000000100111101110111101001010000010001110011)))
(assert (= z (fp #b0 #b00001101111 #b0011011010101100101110000101111010111011101110100101)))
(assert (= r (fp #b0 #b10001110100 #b0001001001101110011100011101011111011001001100001011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
