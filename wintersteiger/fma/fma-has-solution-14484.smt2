(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9916052877916381458334171838941983878612518310546875p100 {+ 4465793204597035 100 (2.52466e+030)}
; Y = 1.4654463485067470429612512816675007343292236328125p554 {+ 2096184001695944 554 (8.64147e+166)}
; Z = 1.363102034439648502228692450444214046001434326171875p-414 {+ 1635266186999870 -414 (3.22189e-125)}
; 1.9916052877916381458334171838941983878612518310546875p100 x 1.4654463485067470429612512816675007343292236328125p554 1.363102034439648502228692450444214046001434326171875p-414 == 1.45929534833049245889924350194633007049560546875p655
; [HW: 1.45929534833049245889924350194633007049560546875p655] 

; mpf : + 2068482359594208 655
; mpfd: + 2068482359594208 655 (2.18168e+197) class: Pos. norm. non-zero
; hwf : + 2068482359594208 655 (2.18168e+197) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001100011 #b1111110111011001110110000001100110011011000100101011)))
(assert (= y (fp #b0 #b11000101001 #b0111011100100111011111011110110011100001000011001000)))
(assert (= z (fp #b0 #b01001100001 #b0101110011110100010000010100001100000111100000111110)))
(assert (= r (fp #b0 #b11010001110 #b0111010110010100011000010100010001001000110011100000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
