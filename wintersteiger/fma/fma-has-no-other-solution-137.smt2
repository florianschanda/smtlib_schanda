(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.67599381437442307429819265962578356266021728515625p-441 {- 3044405490521412 -441 (-2.95151e-133)}
; Y = 1.9342235953016844174356947405613027513027191162109375p-275 {+ 4207369035681391 -275 (3.18609e-083)}
; Z = -1.212486528058546841890574796707369387149810791015625p-651 {- 956954248585722 -651 (-1.29763e-196)}
; -1.67599381437442307429819265962578356266021728515625p-441 x 1.9342235953016844174356947405613027513027191162109375p-275 -1.212486528058546841890574796707369387149810791015625p-651 == -1.212486528058546841890574796707369387149810791015625p-651
; [HW: -1.212486528058546841890574796707369387149810791015625p-651] 

; mpf : - 956954248585722 -651
; mpfd: - 956954248585722 -651 (-1.29763e-196) class: Neg. norm. non-zero
; hwf : - 956954248585722 -651 (-1.29763e-196) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001000110 #b1010110100001101111011100011110100001001010101000100)))
(assert (= y (fp #b0 #b01011101100 #b1110111100101001010001110000110011111000111001101111)))
(assert (= z (fp #b1 #b00101110100 #b0011011001100101100001000110000011011010000111111010)))
(assert (= r (fp #b1 #b00101110100 #b0011011001100101100001000110000011011010000111111010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
