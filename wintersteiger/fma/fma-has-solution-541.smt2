(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5325533224619583005932099695201031863689422607421875p371 {- 2398406944594595 371 (-7.3713e+111)}
; Y = 1.7498738634871260355652111684321425855159759521484375p178 {+ 3377131652175495 178 (6.70418e+053)}
; Z = -1.6607260895789999199934072748874314129352569580078125p-929 {- 2975645770821949 -929 (-3.65959e-280)}
; -1.5325533224619583005932099695201031863689422607421875p371 x 1.7498738634871260355652111684321425855159759521484375p178 -1.6607260895789999199934072748874314129352569580078125p-929 == -1.34088750168826909003882974502630531787872314453125p550
; [HW: -1.34088750168826909003882974502630531787872314453125p550] 

; mpf : - 1535220825578548 550
; mpfd: - 1535220825578548 550 (-4.94185e+165) class: Neg. norm. non-zero
; hwf : - 1535220825578548 550 (-4.94185e+165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101110010 #b1000100001010101011010100001111101011001101010100011)))
(assert (= y (fp #b0 #b10010110001 #b1011111111110111101110111100011111001101011010000111)))
(assert (= z (fp #b1 #b00001011110 #b1010100100100101010110000101001001011011000100111101)))
(assert (= r (fp #b1 #b11000100101 #b0101011101000100011001110011111101011101110000110100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
