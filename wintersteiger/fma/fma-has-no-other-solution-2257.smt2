(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7096058999743248829616959483246318995952606201171875p700 {- 3195780866704275 700 (-8.99276e+210)}
; Y = 1.7897352722165249527819241848192177712917327880859375p-138 {+ 3556651477675679 -138 (5.13629e-042)}
; Z = -1.8934073810584208796825578247080557048320770263671875p-193 {- 4023549148424755 -193 (-1.50819e-058)}
; -1.7096058999743248829616959483246318995952606201171875p700 x 1.7897352722165249527819241848192177712917327880859375p-138 -1.8934073810584208796825578247080557048320770263671875p-193 == -1.52987099038676266360425870516337454319000244140625p563
; [HW: -1.52987099038676266360425870516337454319000244140625p563] 

; mpf : - 2386326794860260 563
; mpfd: - 2386326794860260 563 (-4.61894e+169) class: Neg. norm. non-zero
; hwf : - 2386326794860260 563 (-4.61894e+169) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010111011 #b1011010110101000101110110111010101110000001110010011)))
(assert (= y (fp #b0 #b01101110101 #b1100101000101100000101110011111010101010111010011111)))
(assert (= z (fp #b1 #b01100111110 #b1110010010110110010110001001101110100110101000110011)))
(assert (= r (fp #b1 #b11000110010 #b1000011110100101101000000000111011001111011011100100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
