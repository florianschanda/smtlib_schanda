(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 0.8117968688729650938995519027230329811573028564453125p-1022 {+ 3656008076156821 -1023 (1.80631e-308)}
; Y = 1.9950003126355746463360674169962294399738311767578125p929 {+ 4481083037219101 929 (9.05334e+279)}
; Z = -1.9645790125241597845473506822600029408931732177734375p-690 {- 4344077681373207 -690 (-3.82448e-208)}
; 0.8117968688729650938995519027230329811573028564453125p-1022 x 1.9950003126355746463360674169962294399738311767578125p929 -1.9645790125241597845473506822600029408931732177734375p-690 == 1.61953500719814602604174069711007177829742431640625p-93
; [HW: 1.61953500719814602604174069711007177829742431640625p-93] 

; mpf : + 2790137627560548 -93
; mpfd: + 2790137627560548 -93 (1.63531e-028) class: Pos. norm. non-zero
; hwf : + 2790137627560548 -93 (1.63531e-028) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1100111111010001111010110110101011001101111110010101)))
(assert (= y (fp #b0 #b11110100000 #b1111111010111000010101110010101001000111100100011101)))
(assert (= z (fp #b1 #b00101001101 #b1111011011101110101001100111000100110011000000010111)))
(assert (= r (fp #b0 #b01110100010 #b1001111010011001110110001010001010100100101001100100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
