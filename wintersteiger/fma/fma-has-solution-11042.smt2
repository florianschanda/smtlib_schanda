(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5494919461392402393329348342376761138439178466796875p814 {+ 2474691723875771 814 (1.6928e+245)}
; Y = 1.2372490446816966080945121575496159493923187255859375p-763 {+ 1068474709222495 -763 (2.55018e-230)}
; Z = -1.9104828556011399509628745363443158566951751708984375p-983 {- 4100450249212519 -983 (-2.33699e-296)}
; 1.5494919461392402393329348342376761138439178466796875p814 x 1.2372490446816966080945121575496159493923187255859375p-763 -1.9104828556011399509628745363443158566951751708984375p-983 == 1.9171074301027577480027730416622944176197052001953125p51
; [HW: 1.9171074301027577480027730416622944176197052001953125p51] 

; mpf : + 4130284680469493 51
; mpfd: + 4130284680469493 51 (4.31694e+015) class: Pos. norm. non-zero
; hwf : + 4130284680469493 51 (4.31694e+015) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100101101 #b1000110010101011100000010001001000010101010110111011)))
(assert (= y (fp #b0 #b00100000100 #b0011110010111100010110100111011111101010010001011111)))
(assert (= z (fp #b1 #b00000101000 #b1110100100010101011001111000100001100000001001100111)))
(assert (= r (fp #b0 #b10000110010 #b1110101011000111100011010111001100110101101111110101)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
