(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = +zero {+ 0 -1023 (0)}
; Y = 1.6431749609707611003983629416325129568576812744140625p-832 {+ 2896602514561953 -832 (5.73756e-251)}
; Z = -1.5440403732950211956875818941625766456127166748046875p-741 {- 2450140022445963 -741 (-1.33485e-223)}
; +zero x 1.6431749609707611003983629416325129568576812744140625p-832 -1.5440403732950211956875818941625766456127166748046875p-741 == -1.5440403732950211956875818941625766456127166748046875p-741
; [HW: -1.5440403732950211956875818941625766456127166748046875p-741] 

; mpf : - 2450140022445963 -741
; mpfd: - 2450140022445963 -741 (-1.33485e-223) class: Neg. norm. non-zero
; hwf : - 2450140022445963 -741 (-1.33485e-223) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b0 #b00010111111 #b1010010010100111000111010011111011111001101110100001)))
(assert (= z (fp #b1 #b00100011010 #b1000101101000110001110101101101100000001011110001011)))
(assert (= r (fp #b1 #b00100011010 #b1000101101000110001110101101101100000001011110001011)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
