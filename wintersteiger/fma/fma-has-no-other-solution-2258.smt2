(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.92946695771100706906509003601968288421630859375p-975 {+ 4185947044400480 -975 (6.04215e-294)}
; Y = 1.4992180071965552912161001586355268955230712890625p328 {+ 2248278031187048 328 (8.19791e+098)}
; Z = 1.6573885666417813578021878129220567643642425537109375p119 {+ 2960614903765551 119 (1.10152e+036)}
; 1.92946695771100706906509003601968288421630859375p-975 x 1.4992180071965552912161001586355268955230712890625p328 1.6573885666417813578021878129220567643642425537109375p119 == 1.6573885666417813578021878129220567643642425537109375p119
; [HW: 1.6573885666417813578021878129220567643642425537109375p119] 

; mpf : + 2960614903765551 119
; mpfd: + 2960614903765551 119 (1.10152e+036) class: Pos. norm. non-zero
; hwf : + 2960614903765551 119 (1.10152e+036) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000110000 #b1110110111110001100010111110101000010100110101100000)))
(assert (= y (fp #b0 #b10101000111 #b0111111111001100110000000101011001111011110001101000)))
(assert (= z (fp #b0 #b10001110110 #b1010100001001010100111011111101001111101101000101111)))
(assert (= r (fp #b0 #b10001110110 #b1010100001001010100111011111101001111101101000101111)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
