(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9068387292644037867006545639014802873134613037109375p734 {+ 4084038563200303 734 (1.72318e+221)}
; Y = 1.8613281033382478302229401379008777439594268798828125p-868 {+ 3879076925237869 -868 (9.45773e-262)}
; Z = 1.6837483007321651928833716738154180347919464111328125p405 {+ 3079328592392589 405 (1.39131e+122)}
; 1.9068387292644037867006545639014802873134613037109375p734 x 1.8613281033382478302229401379008777439594268798828125p-868 1.6837483007321651928833716738154180347919464111328125p405 == 1.6837483007321651928833716738154180347919464111328125p405
; [HW: 1.6837483007321651928833716738154180347919464111328125p405] 

; mpf : + 3079328592392589 405
; mpfd: + 3079328592392589 405 (1.39131e+122) class: Pos. norm. non-zero
; hwf : + 3079328592392589 405 (1.39131e+122) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011011101 #b1110100000100110100101010011110011101111110100101111)))
(assert (= y (fp #b0 #b00010011011 #b1101110001111111111111111010001011110110101001101101)))
(assert (= z (fp #b0 #b10110010100 #b1010111100001010001000001110111001010111000110001101)))
(assert (= r (fp #b0 #b10110010100 #b1010111100001010001000001110111001010111000110001101)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
