(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.360543905285907850810644958983175456523895263671875p-618 {- 1623745397496318 -618 (-1.25076e-186)}
; Y = 1.459416663617317144741036827326752245426177978515625p73 {+ 2069028715074746 73 (1.37838e+022)}
; Z = 1.537004254927442303824136615730822086334228515625p-332 {+ 2418452162387600 -332 (1.75678e-100)}
; -1.360543905285907850810644958983175456523895263671875p-618 x 1.459416663617317144741036827326752245426177978515625p73 1.537004254927442303824136615730822086334228515625p-332 == 1.537004254927442303824136615730822086334228515625p-332
; [HW: 1.537004254927442303824136615730822086334228515625p-332] 

; mpf : + 2418452162387600 -332
; mpfd: + 2418452162387600 -332 (1.75678e-100) class: Pos. norm. non-zero
; hwf : + 2418452162387600 -332 (1.75678e-100) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110010101 #b0101110001001100100110101111100111111001100111111110)))
(assert (= y (fp #b0 #b10001001000 #b0111010110011100010101001001100101111001010010111010)))
(assert (= z (fp #b0 #b01010110011 #b1000100101111001000111000110000010111001111010010000)))
(assert (= r (fp #b0 #b01010110011 #b1000100101111001000111000110000010111001111010010000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
