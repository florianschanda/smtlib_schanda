(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.555190583466568465809132248978130519390106201171875p415 {+ 2500356104819646 415 (1.31593e+125)}
; Y = -1.0227194764451843500552286059246398508548736572265625p-112 {- 102319425652585 -112 (-1.96969e-034)}
; Z = -0.4930033038719476845557210253900848329067230224609375p-1022 {- 2220289495610127 -1023 (-1.09697e-308)}
; 1.555190583466568465809132248978130519390106201171875p415 x -1.0227194764451843500552286059246398508548736572265625p-112 -0.4930033038719476845557210253900848329067230224609375p-1022 == -1.590523699295409709719706370378844439983367919921875p303
; [HW: -1.590523699295409709719706370378844439983367919921875p303] 

; mpf : - 2659482312100254 303
; mpfd: - 2659482312100254 303 (-2.59196e+091) class: Neg. norm. non-zero
; hwf : - 2659482312100254 303 (-2.59196e+091) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110011110 #b1000111000100000111110000101011100001001001110111110)))
(assert (= y (fp #b1 #b01110001111 #b0000010111010000111100011001000001010000011101101001)))
(assert (= z (fp #b1 #b00000000000 #b0111111000110101011101101110101011110011001100001111)))
(assert (= r (fp #b1 #b10100101110 #b1001011100101100100011111010011111111100100110011110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
