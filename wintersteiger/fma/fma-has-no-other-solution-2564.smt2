(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.53087128490733359598152674152515828609466552734375p-245 {+ 2390831720890364 -245 (2.70763e-074)}
; Y = 1.8120419936447993425332469996646977961063385009765625p-633 {+ 3657112019987913 -633 (5.08371e-191)}
; Z = -1.707987124336682871472703482140786945819854736328125p1018 {- 3188490549345794 1018 (-4.79756e+306)}
; 1.53087128490733359598152674152515828609466552734375p-245 x 1.8120419936447993425332469996646977961063385009765625p-633 -1.707987124336682871472703482140786945819854736328125p1018 == -1.707987124336682871472703482140786945819854736328125p1018
; [HW: -1.707987124336682871472703482140786945819854736328125p1018] 

; mpf : - 3188490549345794 1018
; mpfd: - 3188490549345794 1018 (-4.79756e+306) class: Neg. norm. non-zero
; hwf : - 3188490549345794 1018 (-4.79756e+306) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100001010 #b1000011111100111001011100011011100001111111111111100)))
(assert (= y (fp #b0 #b00110000110 #b1100111111100001111110111110110110101110110111001001)))
(assert (= z (fp #b1 #b11111111001 #b1011010100111110101001001110100100000011111000000010)))
(assert (= r (fp #b1 #b11111111001 #b1011010100111110101001001110100100000011111000000010)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
