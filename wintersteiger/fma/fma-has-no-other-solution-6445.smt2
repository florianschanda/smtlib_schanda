(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9326720012286398020506794637185521423816680908203125p-856 {- 4200381277192197 -856 (-4.02237e-258)}
; Y = -1.775456272012377656466242115129716694355010986328125p967 {- 3492344577677058 967 (-2.2147e+291)}
; Z = -1.19028352781195589926710454165004193782806396484375p-596 {- 856960824948668 -596 (-4.58958e-180)}
; -1.9326720012286398020506794637185521423816680908203125p-856 x -1.775456272012377656466242115129716694355010986328125p967 -1.19028352781195589926710454165004193782806396484375p-596 == 1.71568731316205091985693798051215708255767822265625p112
; [HW: 1.71568731316205091985693798051215708255767822265625p112] 

; mpf : + 3223169116870404 112
; mpfd: + 3223169116870404 112 (8.90836e+033) class: Pos. norm. non-zero
; hwf : + 3223169116870404 112 (8.90836e+033) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010100111 #b1110111011000011100101111001111100101100000000000101)))
(assert (= y (fp #b1 #b11111000110 #b1100011010000100010011010101111111000101011100000010)))
(assert (= z (fp #b1 #b00110101011 #b0011000010110110011010111101100011101011011110111100)))
(assert (= r (fp #b0 #b10001101111 #b1011011100110111010010001010010000110001011100000100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
