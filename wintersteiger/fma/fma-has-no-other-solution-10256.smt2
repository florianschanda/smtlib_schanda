(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.17827267166165228218233096413314342498779296875p347 {+ 802868737665760 347 (3.37796e+104)}
; Y = -1.4174294056349641124370464240200817584991455078125p782 {- 1879934915671112 782 (-3.60544e+235)}
; Z = -1.0291551612973837137587906909175217151641845703125p597 {- 131303173554824 597 (-5.33812e+179)}
; 1.17827267166165228218233096413314342498779296875p347 x -1.4174294056349641124370464240200817584991455078125p782 -1.0291551612973837137587906909175217151641845703125p597 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101011010 #b0010110110100011010001110001111010001110101011100000)))
(assert (= y (fp #b1 #b11100001101 #b0110101011011100101001110100110110010111010001001000)))
(assert (= z (fp #b1 #b11001010100 #b0000011101110110101101100111000001001000001010001000)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
