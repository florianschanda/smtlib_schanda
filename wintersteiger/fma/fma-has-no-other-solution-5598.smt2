(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.76819533003335660481525337672792375087738037109375p233 {- 3459644202085980 233 (-2.44073e+070)}
; Y = -1.5412372644847651681487832320271991193294525146484375p131 {- 2437515942652615 131 (-4.19565e+039)}
; Z = -1.2749354640602315047459569541388191282749176025390625p901 {- 1238199253492593 901 (-2.15533e+271)}
; -1.76819533003335660481525337672792375087738037109375p233 x -1.5412372644847651681487832320271991193294525146484375p131 -1.2749354640602315047459569541388191282749176025390625p901 == -1.274935464060231282701352029107511043548583984375p901
; [HW: -1.274935464060231282701352029107511043548583984375p901] 

; mpf : - 1238199253492592 901
; mpfd: - 1238199253492592 901 (-2.15533e+271) class: Neg. norm. non-zero
; hwf : - 1238199253492592 901 (-2.15533e+271) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011101000 #b1100010010101000011100101111101101101110111001011100)))
(assert (= y (fp #b1 #b10010000010 #b1000101010001110100001100111111001010110101011000111)))
(assert (= z (fp #b1 #b11110000100 #b0100011001100010001010111010101010100110001101110001)))
(assert (= r (fp #b1 #b11110000100 #b0100011001100010001010111010101010100110001101110000)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
