(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1548179388086168284388577376375906169414520263671875p-426 {- 697238011528755 -426 (-6.66401e-129)}
; Y = 1.8569496891779813108058760917629115283489227294921875p-652 {+ 3859358300857219 -652 (9.93672e-197)}
; Z = 1.335903942160864943389242398552596569061279296875p234 {+ 1512776868747952 234 (3.68803e+070)}
; -1.1548179388086168284388577376375906169414520263671875p-426 x 1.8569496891779813108058760917629115283489227294921875p-652 1.335903942160864943389242398552596569061279296875p234 == 1.335903942160864943389242398552596569061279296875p234
; [HW: 1.335903942160864943389242398552596569061279296875p234] 

; mpf : + 1512776868747952 234
; mpfd: + 1512776868747952 234 (3.68803e+070) class: Pos. norm. non-zero
; hwf : + 1512776868747952 234 (3.68803e+070) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001010101 #b0010011110100010001001100000000000000100011000110011)))
(assert (= y (fp #b0 #b00101110011 #b1101101101100001000011100000100101010110001110000011)))
(assert (= z (fp #b0 #b10011101001 #b0101010111111101110011001111111000101101101010110000)))
(assert (= r (fp #b0 #b10011101001 #b0101010111111101110011001111111000101101101010110000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
