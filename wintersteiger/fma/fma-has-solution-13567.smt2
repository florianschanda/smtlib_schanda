(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.04335680748820980312530082301236689090728759765625p381 {+ 195261702047876 381 (5.13879e+114)}
; Y = 1.2965468862056985788200336173758842051029205322265625p299 {+ 1335528446213865 299 (1.32056e+090)}
; Z = -1.1096217080249310971140630499576218426227569580078125p717 {- 493692283412797 717 (-7.65036e+215)}
; 1.04335680748820980312530082301236689090728759765625p381 x 1.2965468862056985788200336173758842051029205322265625p299 -1.1096217080249310971140630499576218426227569580078125p717 == -1.1096217080150883038669462621328420937061309814453125p717
; [HW: -1.1096217080150883038669462621328420937061309814453125p717] 

; mpf : - 493692283368469 717
; mpfd: - 493692283368469 717 (-7.65036e+215) class: Neg. norm. non-zero
; hwf : - 493692283368469 717 (-7.65036e+215) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101111100 #b0000101100011001011011101000011000111000100010000100)))
(assert (= y (fp #b0 #b10100101010 #b0100101111101010011111110010100111111011111011101001)))
(assert (= z (fp #b1 #b11011001100 #b0001110000010000001010110001001011100110000100111101)))
(assert (= r (fp #b1 #b11011001100 #b0001110000010000001010110001001011011011010000010101)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
