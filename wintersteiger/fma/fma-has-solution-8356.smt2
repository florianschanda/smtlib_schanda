(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4901881007827473268889661994762718677520751953125p134 {+ 2207610948026632 134 (3.24534e+040)}
; Y = 1.995444823688212299117594739072956144809722900390625p-595 {+ 4483084937030122 -595 (1.53884e-179)}
; Z = -1.624325456816812174309916372294537723064422607421875p997 {- 2811711894678110 997 (-2.1756e+300)}
; 1.4901881007827473268889661994762718677520751953125p134 x 1.995444823688212299117594739072956144809722900390625p-595 -1.624325456816812174309916372294537723064422607421875p997 == -1.624325456816812174309916372294537723064422607421875p997
; [HW: -1.624325456816812174309916372294537723064422607421875p997] 

; mpf : - 2811711894678110 997
; mpfd: - 2811711894678110 997 (-2.1756e+300) class: Neg. norm. non-zero
; hwf : - 2811711894678110 997 (-2.1756e+300) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010000101 #b0111110101111100111101111010010111000000000100001000)))
(assert (= y (fp #b0 #b00110101100 #b1111111011010101011110001101001010110110100111101010)))
(assert (= z (fp #b1 #b11111100100 #b1001111111010011110010110000101100010110101001011110)))
(assert (= r (fp #b1 #b11111100100 #b1001111111010011110010110000101100010110101001011110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
