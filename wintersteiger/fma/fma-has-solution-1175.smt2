(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8547952725689194064528919625445269048213958740234375p-830 {+ 3849655671019447 -830 (2.5906e-250)}
; Y = -1.4893854309280936121240301872603595256805419921875p621 {- 2203996044368312 621 (-1.29609e+187)}
; Z = 1.515069697389373803986245548003353178501129150390625p573 {+ 2319667697232618 573 (4.68403e+172)}
; 1.8547952725689194064528919625445269048213958740234375p-830 x -1.4893854309280936121240301872603595256805419921875p621 1.515069697389373803986245548003353178501129150390625p573 == 1.5150696973893735819416406229720450937747955322265625p573
; [HW: 1.5150696973893735819416406229720450937747955322265625p573] 

; mpf : + 2319667697232617 573
; mpfd: + 2319667697232617 573 (4.68403e+172) class: Pos. norm. non-zero
; hwf : + 2319667697232617 573 (4.68403e+172) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011000001 #b1101101011010011110111001110110001110101011110110111)))
(assert (= y (fp #b1 #b11001101100 #b0111110101001000010111010001010011111001100110111000)))
(assert (= z (fp #b0 #b11000111100 #b1000001111011011100110111001000101110010101011101010)))
(assert (= r (fp #b0 #b11000111100 #b1000001111011011100110111001000101110010101011101001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
