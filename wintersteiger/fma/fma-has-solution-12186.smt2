(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6724810547154562723193294004886411130428314208984375p-330 {+ 3028585427430247 -330 (7.6465e-100)}
; Y = -1.9164411091389077501645488155190832912921905517578125p-232 {- 4127283837624989 -232 (-2.77675e-070)}
; Z = -1.0802827047233416468685618383460678160190582275390625p625 {- 361561159076337 625 (-1.50413e+188)}
; 1.6724810547154562723193294004886411130428314208984375p-330 x -1.9164411091389077501645488155190832912921905517578125p-232 -1.0802827047233416468685618383460678160190582275390625p625 == -1.0802827047233416468685618383460678160190582275390625p625
; [HW: -1.0802827047233416468685618383460678160190582275390625p625] 

; mpf : - 361561159076337 625
; mpfd: - 361561159076337 625 (-1.50413e+188) class: Neg. norm. non-zero
; hwf : - 361561159076337 625 (-1.50413e+188) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010110101 #b1010110000100111101101111110100100101110101101100111)))
(assert (= y (fp #b1 #b01100010111 #b1110101010011011111000100111000001110110001010011101)))
(assert (= z (fp #b1 #b11001110000 #b0001010010001101011010000100011100111000100111110001)))
(assert (= r (fp #b1 #b11001110000 #b0001010010001101011010000100011100111000100111110001)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
