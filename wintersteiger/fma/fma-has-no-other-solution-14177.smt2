(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2876312024841769510175026880460791289806365966796875p446 {+ 1295375776327867 446 (2.33975e+134)}
; Y = 1.1094417287087348089613669799291528761386871337890625p286 {+ 492881728631441 286 (1.37938e+086)}
; Z = -1.552702788608692596739047075971029698848724365234375p85 {- 2489152072824742 85 (-6.00673e+025)}
; 1.2876312024841769510175026880460791289806365966796875p446 x 1.1094417287087348089613669799291528761386871337890625p286 -1.552702788608692596739047075971029698848724365234375p85 == 1.4285517872233521874392181416624225676059722900390625p732
; [HW: 1.4285517872233521874392181416624225676059722900390625p732] 

; mpf : + 1930025669248049 732
; mpfd: + 1930025669248049 732 (3.2274e+220) class: Pos. norm. non-zero
; hwf : + 1930025669248049 732 (3.2274e+220) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110111101 #b0100100110100010001100101100111111111010100010111011)))
(assert (= y (fp #b0 #b10100011101 #b0001110000000100010111111000010110011111001010010001)))
(assert (= z (fp #b1 #b10001010100 #b1000110101111101111011100001000101111011011110100110)))
(assert (= r (fp #b0 #b11011011011 #b0110110110110101100100011110011011000100010000110001)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
