(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6769571855485241318461930859484709799289703369140625p1012 {+ 3048744128582113 1012 (7.36e+304)}
; Y = -1.938280902515875592229122048593126237392425537109375p200 {- 4225641522939350 200 (-3.1147e+060)}
; Z = 1.174624954654891251237813776242546737194061279296875p-659 {+ 786440880713358 -659 (4.91057e-199)}
; 1.6769571855485241318461930859484709799289703369140625p1012 x -1.938280902515875592229122048593126237392425537109375p200 1.174624954654891251237813776242546737194061279296875p-659 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111110011 #b1010110101001101000100001110110010111001000111100001)))
(assert (= y (fp #b1 #b10011000111 #b1111000000110011001011010101111011000100010111010110)))
(assert (= z (fp #b0 #b00101101100 #b0010110010110100001110001001010101001110111010001110)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
