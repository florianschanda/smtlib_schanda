(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8773560509374285221184663896565325558185577392578125p-964 {+ 3951260384073053 -964 (1.20401e-290)}
; Y = -1.05834154328581320214652805589139461517333984375p793 {- 262746952602208 793 (-5.51331e+238)}
; Z = -1.2375840647480218503773130578338168561458587646484375p733 {- 1069983505468359 733 (-5.59193e+220)}
; 1.8773560509374285221184663896565325558185577392578125p-964 x -1.05834154328581320214652805589139461517333984375p793 -1.2375840647480218503773130578338168561458587646484375p733 == -1.2375840647480220724219179828651249408721923828125p733
; [HW: -1.2375840647480220724219179828651249408721923828125p733] 

; mpf : - 1069983505468360 733
; mpfd: - 1069983505468360 733 (-5.59193e+220) class: Neg. norm. non-zero
; hwf : - 1069983505468360 733 (-5.59193e+220) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000111011 #b1110000010011010011001111111100110111001010101011101)))
(assert (= y (fp #b1 #b11100011000 #b0000111011101111011110001010110001101001001001100000)))
(assert (= z (fp #b1 #b11011011100 #b0011110011010010010011110010110000100100101111000111)))
(assert (= r (fp #b1 #b11011011100 #b0011110011010010010011110010110000100100101111001000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
