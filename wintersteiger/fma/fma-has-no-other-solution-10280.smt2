(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4867972365847290650009426826727576553821563720703125p-634 {- 2192339853287973 -634 (-2.08562e-191)}
; Y = 1.9633282113648700129004964765044860541820526123046875p1011 {+ 4338444573738315 1011 (4.30842e+304)}
; Z = -1.14038946650212924538436709553934633731842041015625p636 {- 632257949025732 636 (-3.25185e+191)}
; -1.4867972365847290650009426826727576553821563720703125p-634 x 1.9633282113648700129004964765044860541820526123046875p1011 -1.14038946650212924538436709553934633731842041015625p636 == -1.14038946650212924538436709553934633731842041015625p636
; [HW: -1.14038946650212924538436709553934633731842041015625p636] 

; mpf : - 632257949025732 636
; mpfd: - 632257949025732 636 (-3.25185e+191) class: Neg. norm. non-zero
; hwf : - 632257949025732 636 (-3.25185e+191) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110000101 #b0111110010011110101111100110001011101010001000100101)))
(assert (= y (fp #b0 #b11111110010 #b1111011010011100101011010111101100100000010101001011)))
(assert (= z (fp #b1 #b11001111011 #b0010001111110000100100000110011101010100010111000100)))
(assert (= r (fp #b1 #b11001111011 #b0010001111110000100100000110011101010100010111000100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
