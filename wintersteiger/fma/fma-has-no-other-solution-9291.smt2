(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8920222274941040918605494880466721951961517333984375p-233 {+ 4017310971348647 -233 (1.37068e-070)}
; Y = -1.5189204797602382512877738918177783489227294921875p27 {- 2337010079283128 27 (-2.03866e+008)}
; Z = -1.2221674237079891423007893536123447120189666748046875p203 {- 1000553126625163 203 (-1.57116e+061)}
; 1.8920222274941040918605494880466721951961517333984375p-233 x -1.5189204797602382512877738918177783489227294921875p27 -1.2221674237079891423007893536123447120189666748046875p203 == -1.22216742370798936434539427864365279674530029296875p203
; [HW: -1.22216742370798936434539427864365279674530029296875p203] 

; mpf : - 1000553126625164 203
; mpfd: - 1000553126625164 203 (-1.57116e+061) class: Neg. norm. non-zero
; hwf : - 1000553126625164 203 (-1.57116e+061) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100010110 #b1110010001011011100100011001011001100100011010100111)))
(assert (= y (fp #b1 #b10000011010 #b1000010011010111111110001111100111001011011110111000)))
(assert (= z (fp #b1 #b10011001010 #b0011100011011111111101101101101100001111111110001011)))
(assert (= r (fp #b1 #b10011001010 #b0011100011011111111101101101101100001111111110001100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
