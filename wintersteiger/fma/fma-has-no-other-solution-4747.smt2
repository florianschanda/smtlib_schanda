(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9500048830140632727392357992357574403285980224609375p595 {+ 4278441637142287 595 (2.52862e+179)}
; Y = -1.7990113452039337982313327302108518779277801513671875p-930 {- 3598427196525235 -930 (-1.98216e-280)}
; Z = -1.641449022591094486500651328242383897304534912109375p-579 {- 2888829579118422 -579 (-8.29583e-175)}
; 1.9500048830140632727392357992357574403285980224609375p595 x -1.7990113452039337982313327302108518779277801513671875p-930 -1.641449022591094486500651328242383897304534912109375p-579 == -1.754040453872684590663766357465647161006927490234375p-334
; [HW: -1.754040453872684590663766357465647161006927490234375p-334] 

; mpf : - 3395896307083302 -334
; mpfd: - 3395896307083302 -334 (-5.01212e-101) class: Neg. norm. non-zero
; hwf : - 3395896307083302 -334 (-5.01212e-101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001010010 #b1111001100110011100001010001111110010101111100001111)))
(assert (= y (fp #b1 #b00001011101 #b1100110010001100000000011110110011001000101010110011)))
(assert (= z (fp #b1 #b00110111100 #b1010010000110110000000001100111000010100011101010110)))
(assert (= r (fp #b1 #b01010110001 #b1100000100001000110010111001000100111110100000100110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
