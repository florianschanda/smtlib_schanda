(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6057377808256119156027352801174856722354888916015625p997 {+ 2728000444010457 997 (2.1507e+300)}
; Y = 1.1581623253103419113330119216698221862316131591796875p792 {+ 712299789331707 792 (3.01666e+238)}
; Z = 1.02714788607678020326829937403090298175811767578125p477 {+ 122263209619284 477 (4.00812e+143)}
; 1.6057377808256119156027352801174856722354888916015625p997 x 1.1581623253103419113330119216698221862316131591796875p792 1.02714788607678020326829937403090298175811767578125p477 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111100100 #b1001101100010001101000011001011010011000111111011001)))
(assert (= y (fp #b0 #b11100010111 #b0010100001111101010100110111111010101010110011111011)))
(assert (= z (fp #b0 #b10111011100 #b0000011011110011001010011111001011011010111101010100)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
