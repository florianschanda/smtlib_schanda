(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4457023473619574627235806474345736205577850341796875p138 {- 2007264925497467 138 (-5.03754e+041)}
; Y = -1.6318081024575790127784102878649719059467315673828125p-161 {- 2845410734797613 -161 (-5.58264e-049)}
; Z = -1.842013238564110366723980405367910861968994140625p-847 {- 3792090507438352 -847 (-1.96285e-255)}
; -1.4457023473619574627235806474345736205577850341796875p138 x -1.6318081024575790127784102878649719059467315673828125p-161 -1.842013238564110366723980405367910861968994140625p-847 == 1.1795544020835919685197268336196430027484893798828125p-22
; [HW: 1.1795544020835919685197268336196430027484893798828125p-22] 

; mpf : + 808641138316397 -22
; mpfd: + 808641138316397 -22 (2.81228e-007) class: Pos. norm. non-zero
; hwf : + 808641138316397 -22 (2.81228e-007) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010001001 #b0111001000011001100011001000110110101011100001111011)))
(assert (= y (fp #b1 #b01101011110 #b1010000110111110001011010000000101100111001100101101)))
(assert (= z (fp #b1 #b00010110000 #b1101011110001110001011011111101001101110100100010000)))
(assert (= r (fp #b0 #b01111101001 #b0010110111110111010001101111110011001101010001101101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
