(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7846118496753733406734454547404311597347259521484375p71 {+ 3533577633828487 71 (4.2138e+021)}
; Y = 1.316880235706176183185789341223426163196563720703125p-771 {+ 1427101711447410 -771 (1.06028e-232)}
; Z = 1.2171626830209312242203623100067488849163055419921875p-841 {+ 978013778331843 -841 (8.30084e-254)}
; 1.7846118496753733406734454547404311597347259521484375p71 x 1.316880235706176183185789341223426163196563720703125p-771 1.2171626830209312242203623100067488849163055419921875p-841 == 1.175060036622270320805228038807399570941925048828125p-699
; [HW: 1.175060036622270320805228038807399570941925048828125p-699] 

; mpf : + 788400315699522 -699
; mpfd: + 788400315699522 -699 (4.46779e-211) class: Pos. norm. non-zero
; hwf : + 788400315699522 -699 (4.46779e-211) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001000110 #b1100100011011100010100100111101001101000111010000111)))
(assert (= y (fp #b0 #b00011111100 #b0101000100011111000100000010100100011011010101110010)))
(assert (= z (fp #b0 #b00010110110 #b0011011110010111111110010011110101111100100011000011)))
(assert (= r (fp #b0 #b00101000100 #b0010110011010000101111000000110000100001000101000010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
