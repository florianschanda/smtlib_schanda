(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2409538397599326753351078878040425479412078857421875p-1012 {+ 1085159622956323 -1012 (2.82748e-305)}
; Y = -1.4262953702275800171861419585184194147586822509765625p-156 {- 1919863670506697 -156 (-1.56146e-047)}
; Z = -1.5199169299891475137798124706023372709751129150390625p262 {- 2341497692162737 262 (-1.12636e+079)}
; 1.2409538397599326753351078878040425479412078857421875p-1012 x -1.4262953702275800171861419585184194147586822509765625p-156 -1.5199169299891475137798124706023372709751129150390625p262 == -1.5199169299891475137798124706023372709751129150390625p262
; [HW: -1.5199169299891475137798124706023372709751129150390625p262] 

; mpf : - 2341497692162737 262
; mpfd: - 2341497692162737 262 (-1.12636e+079) class: Neg. norm. non-zero
; hwf : - 2341497692162737 262 (-1.12636e+079) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000001011 #b0011110110101111001001101001110110011101010100100011)))
(assert (= y (fp #b1 #b01101100011 #b0110110100100001101100011000000110010000010011001001)))
(assert (= z (fp #b1 #b10100000101 #b1000010100011001010001101010001011110000101010110001)))
(assert (= r (fp #b1 #b10100000101 #b1000010100011001010001101010001011110000101010110001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
