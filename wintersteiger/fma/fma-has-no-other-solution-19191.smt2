(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4483091249477235695763965850346721708774566650390625p989 {+ 2019004808061361 989 (7.57752e+297)}
; Y = 1.0448499098464172352151990708080120384693145751953125p769 {+ 201986037271925 769 (3.2443e+231)}
; Z = 1.4214858714323399535572889362811110913753509521484375p-652 {+ 1898203613524615 -652 (7.60651e-197)}
; 1.4483091249477235695763965850346721708774566650390625p989 x 1.0448499098464172352151990708080120384693145751953125p769 1.4214858714323399535572889362811110913753509521484375p-652 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111011100 #b0111001011000100011000110000011000100110000110110001)))
(assert (= y (fp #b0 #b11100000000 #b0000101101111011010010001010000000000100110101110101)))
(assert (= z (fp #b0 #b00101110011 #b0110101111100110011111111000000110000111001010000111)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
