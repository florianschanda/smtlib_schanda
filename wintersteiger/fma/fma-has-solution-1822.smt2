(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2632429688406852097415367097710259258747100830078125p978 {- 1185540936378813 978 (-3.22718e+294)}
; Y = -1.8591300214255432887711094736005179584026336669921875p-972 {- 3869177644354883 -972 (-4.65751e-293)}
; Z = -1.791152779643956360899892388260923326015472412109375p817 {- 3563035363597654 817 (-1.56545e+246)}
; -1.2632429688406852097415367097710259258747100830078125p978 x -1.8591300214255432887711094736005179584026336669921875p-972 -1.791152779643956360899892388260923326015472412109375p817 == -1.791152779643956360899892388260923326015472412109375p817
; [HW: -1.791152779643956360899892388260923326015472412109375p817] 

; mpf : - 3563035363597654 817
; mpfd: - 3563035363597654 817 (-1.56545e+246) class: Neg. norm. non-zero
; hwf : - 3563035363597654 817 (-1.56545e+246) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111010001 #b0100001101100011111001000010011000010010100110111101)))
(assert (= y (fp #b1 #b00000110011 #b1101101111101111111100011111000100001000110101000011)))
(assert (= z (fp #b1 #b11100110000 #b1100101010001000111111010001001010110101110101010110)))
(assert (= r (fp #b1 #b11100110000 #b1100101010001000111111010001001010110101110101010110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
