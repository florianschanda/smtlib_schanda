(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.11190854148055873196199172525666654109954833984375p-27 {+ 503991265711420 -27 (8.28436e-009)}
; Y = 1.7030404799043623587095908078481443226337432861328125p-767 {+ 3166212843323661 -767 (2.19391e-231)}
; Z = 1.443110411475126308999961111112497746944427490234375p752 {+ 1995591884003366 752 (3.41866e+226)}
; 1.11190854148055873196199172525666654109954833984375p-27 x 1.7030404799043623587095908078481443226337432861328125p-767 1.443110411475126308999961111112497746944427490234375p752 == 1.443110411475126308999961111112497746944427490234375p752
; [HW: 1.443110411475126308999961111112497746944427490234375p752] 

; mpf : + 1995591884003366 752
; mpfd: + 1995591884003366 752 (3.41866e+226) class: Pos. norm. non-zero
; hwf : + 1995591884003366 752 (3.41866e+226) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111100100 #b0001110010100110000010011100010111001101010100111100)))
(assert (= y (fp #b0 #b00100000000 #b1011001111111010011101011111110011110100000100001101)))
(assert (= z (fp #b0 #b11011101111 #b0111000101101111101011110001010111001101100000100110)))
(assert (= r (fp #b0 #b11011101111 #b0111000101101111101011110001010111001101100000100110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
