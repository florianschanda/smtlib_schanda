(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3507479387926990543888905449421145021915435791015625p-470 {- 1579628286447769 -470 (-4.43074e-142)}
; Y = -1.6868079153125552505088080579298548400402069091796875p541 {- 3093107871476731 541 (-1.21421e+163)}
; Z = -1.535800640595258226284158808994106948375701904296875p246 {- 2413031565329678 246 (-1.73666e+074)}
; -1.3507479387926990543888905449421145021915435791015625p-470 x -1.6868079153125552505088080579298548400402069091796875p541 -1.535800640595258226284158808994106948375701904296875p246 == -1.535800640595258226284158808994106948375701904296875p246
; [HW: -1.535800640595258226284158808994106948375701904296875p246] 

; mpf : - 2413031565329678 246
; mpfd: - 2413031565329678 246 (-1.73666e+074) class: Neg. norm. non-zero
; hwf : - 2413031565329678 246 (-1.73666e+074) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000101001 #b0101100111001010100111011110111001000001000010011001)))
(assert (= y (fp #b1 #b11000011100 #b1010111111010010101001001011111011100110101111111011)))
(assert (= z (fp #b1 #b10011110101 #b1000100100101010001110110001010010001000010100001110)))
(assert (= r (fp #b1 #b10011110101 #b1000100100101010001110110001010010001000010100001110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
