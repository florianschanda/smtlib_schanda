(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.020512904545654020438405495951883494853973388671875p-682 {- 92381909268094 -682 (-5.08583e-206)}
; Y = 1.2548238403286189335261724409065209329128265380859375p-29 {+ 1147624552349087 -29 (2.33729e-009)}
; Z = 1.2901019271813460864706257780198939144611358642578125p95 {+ 1306502931153373 95 (5.11062e+028)}
; -1.020512904545654020438405495951883494853973388671875p-682 x 1.2548238403286189335261724409065209329128265380859375p-29 1.2901019271813460864706257780198939144611358642578125p95 == 1.2901019271813460864706257780198939144611358642578125p95
; [HW: 1.2901019271813460864706257780198939144611358642578125p95] 

; mpf : + 1306502931153373 95
; mpfd: + 1306502931153373 95 (5.11062e+028) class: Pos. norm. non-zero
; hwf : + 1306502931153373 95 (5.11062e+028) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010101 #b0000010101000000010101010110111000101011011001111110)))
(assert (= y (fp #b0 #b01111100010 #b0100000100111100001000101001110001110011110110011111)))
(assert (= z (fp #b0 #b10001011110 #b0100101001000100000111101011000111000000000111011101)))
(assert (= r (fp #b0 #b10001011110 #b0100101001000100000111101011000111000000000111011101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
