(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0641330772212722610703394821030087769031524658203125p400 {+ 288829702675845 400 (2.74786e+120)}
; Y = 1.597910226914741382842066741432063281536102294921875p330 {+ 2692748275134238 330 (3.49503e+099)}
; Z = 1.8854874302630497684418742210255004465579986572265625p-597 {+ 3987880860973929 -597 (3.6351e-180)}
; 1.0641330772212722610703394821030087769031524658203125p400 x 1.597910226914741382842066741432063281536102294921875p330 1.8854874302630497684418742210255004465579986572265625p-597 == 1.700389126890125002233844497823156416416168212890625p730
; [HW: 1.700389126890125002233844497823156416416168212890625p730] 

; mpf : + 3154272210876714 730
; mpfd: + 3154272210876714 730 (9.60385e+219) class: Pos. norm. non-zero
; hwf : + 3154272210876714 730 (9.60385e+219) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110001111 #b0001000001101011000001100111110101000001110110000101)))
(assert (= y (fp #b0 #b10101001001 #b1001100100010000101001010000011010001010111100011110)))
(assert (= z (fp #b0 #b00110101010 #b1110001010101111010011011110000111111111101101101001)))
(assert (= r (fp #b0 #b11011011001 #b1011001101001100101100111010101001110111100100101010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
