(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5719993619773706683417913154698908329010009765625p-210 {+ 2576056113457448 -210 (9.5533e-064)}
; Y = -1.91928194410081243148624707828275859355926513671875p-706 {- 4140077820900844 -706 (-5.70114e-213)}
; Z = -1.0745127220633012843364895161357708275318145751953125p-388 {- 335575467318645 -388 (-1.70441e-117)}
; 1.5719993619773706683417913154698908329010009765625p-210 x -1.91928194410081243148624707828275859355926513671875p-706 -1.0745127220633012843364895161357708275318145751953125p-388 == -1.0745127220633012843364895161357708275318145751953125p-388
; [HW: -1.0745127220633012843364895161357708275318145751953125p-388] 

; mpf : - 335575467318645 -388
; mpfd: - 335575467318645 -388 (-1.70441e-117) class: Neg. norm. non-zero
; hwf : - 335575467318645 -388 (-1.70441e-117) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100101101 #b1001001001101110100011001101100100000110100100101000)))
(assert (= y (fp #b1 #b00100111101 #b1110101101010110000011111011110110110111010111101100)))
(assert (= z (fp #b1 #b01001111011 #b0001001100010011010001000000100001100101110101110101)))
(assert (= r (fp #b1 #b01001111011 #b0001001100010011010001000000100001100101110101110101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
