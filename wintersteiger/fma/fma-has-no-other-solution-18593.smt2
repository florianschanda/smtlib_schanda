(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0036942339164387494321317717549391090869903564453125p24 {+ 16637350489493 24 (1.68392e+007)}
; Y = -1.4086157228989601986057778049143962562084197998046875p957 {- 1840241617385483 957 (-1.71593e+288)}
; Z = 1.045624011676530518144545567338354885578155517578125p-721 {+ 205472281985570 -721 (9.4787e-218)}
; 1.0036942339164387494321317717549391090869903564453125p24 x -1.4086157228989601986057778049143962562084197998046875p957 1.045624011676530518144545567338354885578155517578125p-721 == -1.41381947887772252414606555248610675334930419921875p981
; [HW: -1.41381947887772252414606555248610675334930419921875p981] 

; mpf : - 1863677250872364 981
; mpfd: - 1863677250872364 981 (-2.88948e+295) class: Neg. norm. non-zero
; hwf : - 1863677250872364 981 (-2.88948e+295) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000010111 #b0000000011110010000110101111010111011010110110010101)))
(assert (= y (fp #b1 #b11110111100 #b0110100010011011000010100011111001111011100000001011)))
(assert (= z (fp #b0 #b00100101110 #b0000101110101110000000111110011000010000001000100010)))
(assert (= r (fp #b1 #b11111010100 #b0110100111110000000100101100100000111010010000101100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
