(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.931985374718316439413001717184670269489288330078125p791 {+ 4197288986296162 791 (2.51611e+238)}
; Y = -1.859710067707286640370512031950056552886962890625p-102 {- 3871789940573200 -102 (-3.66763e-031)}
; Z = 1.4704999754217669138967039543786086142063140869140625p834 {+ 2118943513987297 834 (1.68454e+251)}
; 1.931985374718316439413001717184670269489288330078125p791 x -1.859710067707286640370512031950056552886962890625p-102 1.4704999754217669138967039543786086142063140869140625p834 == 1.47049997542176669185209902934730052947998046875p834
; [HW: 1.47049997542176669185209902934730052947998046875p834] 

; mpf : + 2118943513987296 834
; mpfd: + 2118943513987296 834 (1.68454e+251) class: Pos. norm. non-zero
; hwf : + 2118943513987296 834 (1.68454e+251) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100010110 #b1110111010010110100101111111000011000011111101100010)))
(assert (= y (fp #b1 #b01110011001 #b1101110000010101111101011000000011011000010000010000)))
(assert (= z (fp #b0 #b11101000001 #b0111100001110010101011111011011100110100100011100001)))
(assert (= r (fp #b0 #b11101000001 #b0111100001110010101011111011011100110100100011100000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
