(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0007401051195099483948069973848760128021240234375p-283 {- 3333137140440 -283 (-6.43921e-086)}
; Y = 1.51004241316743037515379910473711788654327392578125p802 {+ 2297026821883988 802 (4.02759e+241)}
; Z = -1.02472858868826666167706207488663494586944580078125p-175 {- 111367662801876 -175 (-2.13973e-053)}
; -1.0007401051195099483948069973848760128021240234375p-283 x 1.51004241316743037515379910473711788654327392578125p802 -1.02472858868826666167706207488663494586944580078125p-175 == -1.51116000328809274577679389039985835552215576171875p519
; [HW: -1.51116000328809274577679389039985835552215576171875p519] 

; mpf : - 2302060000334956 519
; mpfd: - 2302060000334956 519 (-2.59345e+156) class: Neg. norm. non-zero
; hwf : - 2302060000334956 519 (-2.59345e+156) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100100 #b0000000000110000100000001110011101001000101011011000)))
(assert (= y (fp #b0 #b11100100001 #b1000001010010010001000111011110000100000100001010100)))
(assert (= z (fp #b1 #b01101010000 #b0000011001010100100111001101111110110001001111010100)))
(assert (= r (fp #b1 #b11000000110 #b1000001011011011011000011100100100100101010001101100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
