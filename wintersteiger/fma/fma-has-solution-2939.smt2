(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3142949456951520392777865708922035992145538330078125p213 {- 1415458600317117 213 (-1.73014e+064)}
; Y = -1.5973599633300292754967131259036250412464141845703125p-577 {- 2690270108259173 -577 (-3.2292e-174)}
; Z = -1.6215155943740260369168026954866945743560791015625p-88 {- 2799057399227816 -88 (-5.2394e-027)}
; -1.3142949456951520392777865708922035992145538330078125p213 x -1.5973599633300292754967131259036250412464141845703125p-577 -1.6215155943740260369168026954866945743560791015625p-88 == -1.6215155943740260369168026954866945743560791015625p-88
; [HW: -1.6215155943740260369168026954866945743560791015625p-88] 

; mpf : - 2799057399227816 -88
; mpfd: - 2799057399227816 -88 (-5.2394e-027) class: Neg. norm. non-zero
; hwf : - 2799057399227816 -88 (-5.2394e-027) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011010100 #b0101000001110101101000100011000100001111000010111101)))
(assert (= y (fp #b1 #b00110111110 #b1001100011101100100101010010001001110001001101100101)))
(assert (= z (fp #b1 #b01110100111 #b1001111100011011101001010101111111001010010110101000)))
(assert (= r (fp #b1 #b01110100111 #b1001111100011011101001010101111111001010010110101000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
