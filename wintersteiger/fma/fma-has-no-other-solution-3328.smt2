(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2185314353250202845657668149215169250965118408203125p364 {- 984178090698501 364 (-4.57884e+109)}
; Y = 1.00981191729175190374689918826334178447723388671875p-507 {+ 44188947058924 -507 (2.41009e-153)}
; Z = -1.037363281392703839856039849109947681427001953125p139 {- 168269260157520 139 (-7.22937e+041)}
; -1.2185314353250202845657668149215169250965118408203125p364 x 1.00981191729175190374689918826334178447723388671875p-507 -1.037363281392703839856039849109947681427001953125p139 == -1.037363281392703839856039849109947681427001953125p139
; [HW: -1.037363281392703839856039849109947681427001953125p139] 

; mpf : - 168269260157520 139
; mpfd: - 168269260157520 139 (-7.22937e+041) class: Neg. norm. non-zero
; hwf : - 168269260157520 139 (-7.22937e+041) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101011 #b0011011111110001101011010001011111011110011100000101)))
(assert (= y (fp #b0 #b01000000100 #b0000001010000011000010001010011111100001000011101100)))
(assert (= z (fp #b1 #b10010001010 #b0000100110010000101000111101011110100111001001010000)))
(assert (= r (fp #b1 #b10010001010 #b0000100110010000101000111101011110100111001001010000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
