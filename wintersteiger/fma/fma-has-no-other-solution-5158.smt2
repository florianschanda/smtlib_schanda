(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2424545654682110917832460472709499299526214599609375p62 {- 1091918290696911 62 (-5.72981e+018)}
; Y = -1.8820422400850815858319720064173452556133270263671875p-858 {- 3972365103772211 -858 (-9.79249e-259)}
; Z = 1.36535116590489646881678709178231656551361083984375p768 {+ 1645395374628668 768 (2.11973e+231)}
; -1.2424545654682110917832460472709499299526214599609375p62 x -1.8820422400850815858319720064173452556133270263671875p-858 1.36535116590489646881678709178231656551361083984375p768 == 1.36535116590489646881678709178231656551361083984375p768
; [HW: 1.36535116590489646881678709178231656551361083984375p768] 

; mpf : + 1645395374628668 768
; mpfd: + 1645395374628668 768 (2.11973e+231) class: Pos. norm. non-zero
; hwf : + 1645395374628668 768 (2.11973e+231) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000111101 #b0011111000010001100000001001110101110011101011001111)))
(assert (= y (fp #b1 #b00010100101 #b1110000111001101100001010010111011011011001000110011)))
(assert (= z (fp #b0 #b11011111111 #b0101110110000111101001110110110100011101111100111100)))
(assert (= r (fp #b0 #b11011111111 #b0101110110000111101001110110110100011101111100111100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
