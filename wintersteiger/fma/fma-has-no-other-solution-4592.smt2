(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7086493769928157160364889932679943740367889404296875p417 {- 3191473070161179 417 (-5.78311e+125)}
; Y = -1.981306982504098090913657870260067284107208251953125p-924 {- 4419413760741522 -924 (-1.39713e-278)}
; Z = -1.6403288137136831092988131786114536225795745849609375p329 {- 2883784606835535 329 (-1.79391e+099)}
; -1.7086493769928157160364889932679943740367889404296875p417 x -1.981306982504098090913657870260067284107208251953125p-924 -1.6403288137136831092988131786114536225795745849609375p329 == -1.6403288137136831092988131786114536225795745849609375p329
; [HW: -1.6403288137136831092988131786114536225795745849609375p329] 

; mpf : - 2883784606835535 329
; mpfd: - 2883784606835535 329 (-1.79391e+099) class: Neg. norm. non-zero
; hwf : - 2883784606835535 329 (-1.79391e+099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110100000 #b1011010101101010000010111010101010000011110100011011)))
(assert (= y (fp #b1 #b00001100011 #b1111101100110110111011110011010100110001000010010010)))
(assert (= z (fp #b1 #b10101001000 #b1010001111101100100101101101000110010110001101001111)))
(assert (= r (fp #b1 #b10101001000 #b1010001111101100100101101101000110010110001101001111)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
