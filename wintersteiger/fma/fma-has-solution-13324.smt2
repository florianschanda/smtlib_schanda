(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.10936571477486101144904750981368124485015869140625p694 {+ 492539392307172 694 (9.11784e+208)}
; Y = 1.7349569427653921405152459556120447814464569091796875p-737 {+ 3309951813571579 -737 (2.39984e-222)}
; Z = -1.32704587200329360285877555725164711475372314453125p-661 {- 1472883667287092 -661 (-1.38694e-199)}
; 1.10936571477486101144904750981368124485015869140625p694 x 1.7349569427653921405152459556120447814464569091796875p-737 -1.32704587200329360285877555725164711475372314453125p-661 == 1.924701748914536825196819336269982159137725830078125p-43
; [HW: 1.924701748914536825196819336269982159137725830078125p-43] 

; mpf : + 4164486451840354 -43
; mpfd: + 4164486451840354 -43 (2.18813e-013) class: Pos. norm. non-zero
; hwf : + 4164486451840354 -43 (2.18813e-013) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010110101 #b0001101111111111011001000011100001000010111111100100)))
(assert (= y (fp #b0 #b00100011110 #b1011110000100110001000110110000100100101001111111011)))
(assert (= z (fp #b1 #b00101101010 #b0101001110111001010001110011110010001011110000110100)))
(assert (= r (fp #b0 #b01111010100 #b1110110010111001010000001111101000100100010101100010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
