(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3713129851753926846669173755799420177936553955078125p-1000 {+ 1672245021673725 -1000 (1.2798e-301)}
; Y = 1.207794141025458234395273393602110445499420166015625p948 {+ 935821616092026 948 (2.87362e+285)}
; Z = 1.52549121792243536077648968785069882869720458984375p397 {+ 2366602053221948 397 (4.924e+119)}
; 1.3713129851753926846669173755799420177936553955078125p-1000 x 1.207794141025458234395273393602110445499420166015625p948 1.52549121792243536077648968785069882869720458984375p397 == 1.52549121792243536077648968785069882869720458984375p397
; [HW: 1.52549121792243536077648968785069882869720458984375p397] 

; mpf : + 2366602053221948 397
; mpfd: + 2366602053221948 397 (4.924e+119) class: Pos. norm. non-zero
; hwf : + 2366602053221948 397 (4.924e+119) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010111 #b0101111100001110010111100010011111101000100011111101)))
(assert (= y (fp #b0 #b11110110011 #b0011010100110001111111110011000000000001001101111010)))
(assert (= z (fp #b0 #b10110001100 #b1000011010000110100101111010101101001111111000111100)))
(assert (= r (fp #b0 #b10110001100 #b1000011010000110100101111010101101001111111000111100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
