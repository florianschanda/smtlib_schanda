(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.202241528008240578628829098306596279144287109375p-852 {- 910814870176752 -852 (-4.00346e-257)}
; Y = 1.4026218707965274479221307046827860176563262939453125p225 {+ 1813247707290453 225 (7.56292e+067)}
; Z = -1.522605869926849653239742110599763691425323486328125p-376 {- 2353607601064194 -376 (-9.89257e-114)}
; -1.202241528008240578628829098306596279144287109375p-852 x 1.4026218707965274479221307046827860176563262939453125p225 -1.522605869926849653239742110599763691425323486328125p-376 == -1.522605869926849653239742110599763691425323486328125p-376
; [HW: -1.522605869926849653239742110599763691425323486328125p-376] 

; mpf : - 2353607601064194 -376
; mpfd: - 2353607601064194 -376 (-9.89257e-114) class: Neg. norm. non-zero
; hwf : - 2353607601064194 -376 (-9.89257e-114) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010101011 #b0011001111000110000110011100110010110000001111110000)))
(assert (= y (fp #b0 #b10011100000 #b0110011100010010001110100001011110111001101101010101)))
(assert (= z (fp #b1 #b01010000111 #b1000010111001001011111111001000000001000100100000010)))
(assert (= r (fp #b1 #b01010000111 #b1000010111001001011111111001000000001000100100000010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
