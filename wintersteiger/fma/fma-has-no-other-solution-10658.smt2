(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6164606113575417101202447156538255512714385986328125p-701 {- 2776291779598413 -701 (-1.53652e-211)}
; Y = 1.053980856738743643319367038202472031116485595703125p156 {+ 243108166293746 156 (9.62747e+046)}
; Z = -1.085700582458251073347810233826749026775360107421875p-635 {- 385961111224414 -635 (-7.61488e-192)}
; -1.6164606113575417101202447156538255512714385986328125p-701 x 1.053980856738743643319367038202472031116485595703125p156 -1.085700582458251073347810233826749026775360107421875p-635 == -1.70371854004305500751570434658788144588470458984375p-545
; [HW: -1.70371854004305500751570434658788144588470458984375p-545] 

; mpf : - 3169266554711612 -545
; mpfd: - 3169266554711612 -545 (-1.47928e-164) class: Neg. norm. non-zero
; hwf : - 3169266554711612 -545 (-1.47928e-164) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000010 #b1001110111010000010111001101010100001101100001001101)))
(assert (= y (fp #b0 #b10010011011 #b0000110111010001101100000111111001001101100011110010)))
(assert (= z (fp #b1 #b00110000100 #b0001010111110000011110010010111011101000000001011110)))
(assert (= r (fp #b1 #b00111011110 #b1011010000100110111001011111001100010010111000111100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
