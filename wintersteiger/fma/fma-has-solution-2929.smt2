(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.941924497175475661236987434676848351955413818359375p-527 {+ 4242050814490614 -527 (4.42002e-159)}
; Y = -1.05198057807179612410664049093611538410186767578125p993 {- 234099712034644 993 (-8.8063e+298)}
; Z = -1.78708892367614424756538937799632549285888671875p899 {- 3544733383375328 899 (-7.55287e+270)}
; 1.941924497175475661236987434676848351955413818359375p-527 x -1.05198057807179612410664049093611538410186767578125p993 -1.78708892367614424756538937799632549285888671875p899 == -1.78708892367614424756538937799632549285888671875p899
; [HW: -1.78708892367614424756538937799632549285888671875p899] 

; mpf : - 3544733383375328 899
; mpfd: - 3544733383375328 899 (-7.55287e+270) class: Neg. norm. non-zero
; hwf : - 3544733383375328 899 (-7.55287e+270) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111110000 #b1111000100100001111101101011111010101011011111110110)))
(assert (= y (fp #b1 #b11111100000 #b0000110101001110100110010110001011011000011101010100)))
(assert (= z (fp #b1 #b11110000010 #b1100100101111110101010001110001000111011100111100000)))
(assert (= r (fp #b1 #b11110000010 #b1100100101111110101010001110001000111011100111100000)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
