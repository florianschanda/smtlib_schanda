(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4920282532104576223019876124453730881214141845703125p-569 {+ 2215898257814373 -569 (7.72164e-172)}
; Y = -1.433199014609948473975009619607590138912200927734375p-39 {- 1950954920774630 -39 (-2.60697e-012)}
; Z = 1.237465515814144989548140074475668370723724365234375p189 {+ 1069449608533926 189 (9.70962e+056)}
; 1.4920282532104576223019876124453730881214141845703125p-569 x -1.433199014609948473975009619607590138912200927734375p-39 1.237465515814144989548140074475668370723724365234375p189 == 1.2374655158141447675035351494443602859973907470703125p189
; [HW: 1.2374655158141447675035351494443602859973907470703125p189] 

; mpf : + 1069449608533925 189
; mpfd: + 1069449608533925 189 (9.70962e+056) class: Pos. norm. non-zero
; hwf : + 1069449608533925 189 (9.70962e+056) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111000110 #b0111110111110101100100000100100000111111001101100101)))
(assert (= y (fp #b1 #b01111011000 #b0110111011100110001000010111000001101000101111100110)))
(assert (= z (fp #b0 #b10010111100 #b0011110011001010100010100100000001011001011110100110)))
(assert (= r (fp #b0 #b10010111100 #b0011110011001010100010100100000001011001011110100101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
