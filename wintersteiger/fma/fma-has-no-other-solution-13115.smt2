(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.386969893950364518531159774283878505229949951171875p-791 {+ 1742757470198462 -791 (1.06498e-238)}
; Y = -1.987776929527205194148109512752853333950042724609375p-497 {- 4448551811743894 -497 (-4.85803e-150)}
; Z = 1.186601226914967721626226193620823323726654052734375p773 {+ 840377216001126 773 (5.8951e+232)}
; 1.386969893950364518531159774283878505229949951171875p-791 x -1.987776929527205194148109512752853333950042724609375p-497 1.186601226914967721626226193620823323726654052734375p773 == 1.1866012269149674995816212685895152390003204345703125p773
; [HW: 1.1866012269149674995816212685895152390003204345703125p773] 

; mpf : + 840377216001125 773
; mpfd: + 840377216001125 773 (5.8951e+232) class: Pos. norm. non-zero
; hwf : + 840377216001125 773 (5.8951e+232) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011101000 #b0110001100010000011101010111111100001101101010111110)))
(assert (= y (fp #b1 #b01000001110 #b1111110011011110111100101110100000010000000010010110)))
(assert (= z (fp #b0 #b11100000100 #b0010111111000101000110010001011011111110010001100110)))
(assert (= r (fp #b0 #b11100000100 #b0010111111000101000110010001011011111110010001100101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
