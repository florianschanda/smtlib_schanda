(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5453828908057751778670763087575323879718780517578125p-836 {- 2456186183807133 -836 (-3.37256e-252)}
; Y = -1.879415228266948734159313971758820116519927978515625p-677 {- 3960534094326970 -677 (-2.9972e-204)}
; Z = 1.190799183275645045654300702153705060482025146484375p-301 {+ 859283130702790 -301 (2.92287e-091)}
; -1.5453828908057751778670763087575323879718780517578125p-836 x -1.879415228266948734159313971758820116519927978515625p-677 1.190799183275645045654300702153705060482025146484375p-301 == 1.1907991832756452676989056271850131452083587646484375p-301
; [HW: 1.1907991832756452676989056271850131452083587646484375p-301] 

; mpf : + 859283130702791 -301
; mpfd: + 859283130702791 -301 (2.92287e-091) class: Pos. norm. non-zero
; hwf : + 859283130702791 -301 (2.92287e-091) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010111011 #b1000101110011110001101101000111111001111000010011101)))
(assert (= y (fp #b1 #b00101011010 #b1110000100100001010110110011110100000010110010111010)))
(assert (= z (fp #b0 #b01011010010 #b0011000011011000001101110001110001000101101111000110)))
(assert (= r (fp #b0 #b01011010010 #b0011000011011000001101110001110001000101101111000111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
