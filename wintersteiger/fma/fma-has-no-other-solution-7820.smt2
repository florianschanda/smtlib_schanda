(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1266471342819865952833424671553075313568115234375p545 {+ 570367986759896 545 (1.29758e+164)}
; Y = 1.2314381418689779312813925571390427649021148681640625p-865 {+ 1042304729480449 -865 (5.00572e-261)}
; Z = 1.0406885223194703993243592776707373559474945068359375p454 {+ 183244813956223 454 (4.84104e+136)}
; 1.1266471342819865952833424671553075313568115234375p545 x 1.2314381418689779312813925571390427649021148681640625p-865 1.0406885223194703993243592776707373559474945068359375p454 == 1.040688522319470621368964202702045440673828125p454
; [HW: 1.040688522319470621368964202702045440673828125p454] 

; mpf : + 183244813956224 454
; mpfd: + 183244813956224 454 (4.84104e+136) class: Pos. norm. non-zero
; hwf : + 183244813956224 454 (4.84104e+136) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000100000 #b0010000001101011111100100101001111011111100011011000)))
(assert (= y (fp #b0 #b00010011110 #b0011101100111111100001111011001001011111110100000001)))
(assert (= z (fp #b0 #b10111000101 #b0000101001101010100100000010000010101111010001111111)))
(assert (= r (fp #b0 #b10111000101 #b0000101001101010100100000010000010101111010010000000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
