(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2034077767488768895276507464586757123470306396484375p-166 {+ 916067187570503 -166 (1.28657e-050)}
; Y = 1.355743731534210017031227835104800760746002197265625p-147 {+ 1602127336776858 -147 (7.59921e-045)}
; Z = 1.15076272822666236805844164337031543254852294921875p495 {+ 678974966662956 495 (1.17715e+149)}
; 1.2034077767488768895276507464586757123470306396484375p-166 x 1.355743731534210017031227835104800760746002197265625p-147 1.15076272822666236805844164337031543254852294921875p495 == 1.15076272822666236805844164337031543254852294921875p495
; [HW: 1.15076272822666236805844164337031543254852294921875p495] 

; mpf : + 678974966662956 495
; mpfd: + 678974966662956 495 (1.17715e+149) class: Pos. norm. non-zero
; hwf : + 678974966662956 495 (1.17715e+149) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101011001 #b0011010000010010100010000011010011100011011101000111)))
(assert (= y (fp #b0 #b01101101100 #b0101101100010010000001010110110010110010010010011010)))
(assert (= z (fp #b0 #b10111101110 #b0010011010011000011000101101101100110000011100101100)))
(assert (= r (fp #b0 #b10111101110 #b0010011010011000011000101101101100110000011100101100)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
