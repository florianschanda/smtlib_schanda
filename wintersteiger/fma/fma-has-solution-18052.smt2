(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1478219249638546006764272533473558723926544189453125p-132 {+ 665730766184405 -132 (2.10822e-040)}
; Y = -1.59783056874676976377713799593038856983184814453125p536 {- 2692389526638644 536 (-3.59425e+161)}
; Z = 1.4030618284030607068046947460970841348171234130859375p-145 {+ 1815229100203295 -145 (3.14577e-044)}
; 1.1478219249638546006764272533473558723926544189453125p-132 x -1.59783056874676976377713799593038856983184814453125p536 1.4030618284030607068046947460970841348171234130859375p-145 == -1.8340249591850079635690917712054215371608734130859375p404
; [HW: -1.8340249591850079635690917712054215371608734130859375p404] 

; mpf : - 3756114495403295 404
; mpfd: - 3756114495403295 404 (-7.57746e+121) class: Neg. norm. non-zero
; hwf : - 3756114495403295 404 (-7.57746e+121) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101111011 #b0010010111010111101010000101110101011001111111010101)))
(assert (= y (fp #b1 #b11000010111 #b1001100100001011011011001001010101010001000000110100)))
(assert (= z (fp #b0 #b01101101110 #b0110011100101111000011110101101101000001110100011111)))
(assert (= r (fp #b1 #b10110010011 #b1101010110000010101010001110001110111111010100011111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
