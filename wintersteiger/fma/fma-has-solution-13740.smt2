(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7698108841664268453541808412410318851470947265625p412 {+ 3466920011077672 412 (1.87191e+124)}
; Y = -1.9342531390288117965070568970986641943454742431640625p226 {- 4207502088799873 226 (-2.08589e+068)}
; Z = -1.0363213404725026833830270334146916866302490234375p4 {- 163576775417560 4 (-16.5811)}
; 1.7698108841664268453541808412410318851470947265625p412 x -1.9342531390288117965070568970986641943454742431640625p226 -1.0363213404725026833830270334146916866302490234375p4 == -1.71163112909313408493972019641660153865814208984375p639
; [HW: -1.71163112909313408493972019641660153865814208984375p639] 

; mpf : - 3204901687809084 639
; mpfd: - 3204901687809084 639 (-3.90461e+192) class: Neg. norm. non-zero
; hwf : - 3204901687809084 639 (-3.90461e+192) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110011011 #b1100010100010010010100110111101110011001100000101000)))
(assert (= y (fp #b1 #b10011100001 #b1110111100101011001101101011011001010000011010000001)))
(assert (= z (fp #b1 #b10000000011 #b0000100101001100010110101111100101111001111011011000)))
(assert (= r (fp #b1 #b11001111110 #b1011011000101101011101010010101001000101010000111100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
