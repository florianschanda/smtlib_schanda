(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9446151972779650574096876880503259599208831787109375p232 {- 4254168650469551 232 (-1.34212e+070)}
; Y = -1.05009453756307724603402675711549818515777587890625p374 {- 225605740702372 374 (-4.04061e+112)}
; Z = -1.4595010000348682677184797285008244216442108154296875p-497 {- 2069408532533403 -497 (-3.56695e-150)}
; -1.9446151972779650574096876880503259599208831787109375p232 x -1.05009453756307724603402675711549818515777587890625p374 -1.4595010000348682677184797285008244216442108154296875p-497 == 1.02101489816186852266355344909243285655975341796875p607
; [HW: 1.02101489816186852266355344909243285655975341796875p607] 

; mpf : + 94642687531020 607
; mpfd: + 94642687531020 607 (5.423e+182) class: Pos. norm. non-zero
; hwf : + 94642687531020 607 (5.423e+182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011100111 #b1111000111010010010011010011001110011101000010101111)))
(assert (= y (fp #b1 #b10101110101 #b0000110011010010111111101110000010001010101010100100)))
(assert (= z (fp #b1 #b01000001110 #b0111010110100001110110111000011110100001000010011011)))
(assert (= r (fp #b0 #b11001011110 #b0000010101100001001110110111110001010101100000001100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
