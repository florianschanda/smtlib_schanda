(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0903750132822278562372275700909085571765899658203125p818 {- 407012876141445 818 (-1.90595e+246)}
; Y = -1.4198041548264346278784842070308513939380645751953125p580 {- 1890629835244917 580 (-5.61857e+174)}
; Z = -1.6011007060729063322668253022129647433757781982421875p-515 {- 2707116915882083 -515 (-1.49269e-155)}
; -1.0903750132822278562372275700909085571765899658203125p818 x -1.4198041548264346278784842070308513939380645751953125p580 -1.6011007060729063322668253022129647433757781982421875p-515 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100110001 #b0001011100100010110100010001111001101100001110000101)))
(assert (= y (fp #b1 #b11001000011 #b0110101101111000010010001111101110110100010101110101)))
(assert (= z (fp #b1 #b00111111100 #b1001100111100001101111000110001000101111100001100011)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
