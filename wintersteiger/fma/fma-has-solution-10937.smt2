(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4190492159507519520644791555241681635379791259765625p-384 {- 1887229892805705 -384 (-3.60146e-116)}
; Y = -1.5163728317487927821360926827765069901943206787109375p248 {- 2325536492648111 248 (-6.85875e+074)}
; Z = 1.938892635094489502733949848334304988384246826171875p859 {+ 4228396521552446 859 (7.45281e+258)}
; -1.4190492159507519520644791555241681635379791259765625p-384 x -1.5163728317487927821360926827765069901943206787109375p248 1.938892635094489502733949848334304988384246826171875p859 == 1.938892635094489502733949848334304988384246826171875p859
; [HW: 1.938892635094489502733949848334304988384246826171875p859] 

; mpf : + 4228396521552446 859
; mpfd: + 4228396521552446 859 (7.45281e+258) class: Pos. norm. non-zero
; hwf : + 4228396521552446 859 (7.45281e+258) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001111111 #b0110101101000110110011110011010111101100010001001001)))
(assert (= y (fp #b1 #b10011110111 #b1000010000110001000000101000100011100111011010101111)))
(assert (= z (fp #b0 #b11101011010 #b1111000001011011010001001000101000101111101000111110)))
(assert (= r (fp #b0 #b11101011010 #b1111000001011011010001001000101000101111101000111110)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
