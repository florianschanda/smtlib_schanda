(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.96277101637534645561800061841495335102081298828125p-893 {- 4335935190591124 -893 (-2.97224e-269)}
; Y = -1.50256495138011647583198282518424093723297119140625p-872 {- 2263351327764964 -872 (-4.77174e-263)}
; Z = 1.6727003034799619030081885284744203090667724609375p816 {+ 3029572836084376 816 (7.30962e+245)}
; -1.96277101637534645561800061841495335102081298828125p-893 x -1.50256495138011647583198282518424093723297119140625p-872 1.6727003034799619030081885284744203090667724609375p816 == 1.6727003034799619030081885284744203090667724609375p816
; [HW: 1.6727003034799619030081885284744203090667724609375p816] 

; mpf : + 3029572836084376 816
; mpfd: + 3029572836084376 816 (7.30962e+245) class: Pos. norm. non-zero
; hwf : + 3029572836084376 816 (7.30962e+245) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010000010 #b1111011001111000001010010100110011011110011010010100)))
(assert (= y (fp #b1 #b00010010111 #b1000000010101000000110001011111001001011000111100100)))
(assert (= z (fp #b0 #b11100101111 #b1010110000110110000101100100101101110100101010011000)))
(assert (= r (fp #b0 #b11100101111 #b1010110000110110000101100100101101110100101010011000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
