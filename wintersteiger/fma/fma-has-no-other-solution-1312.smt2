(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9620635294379855650959143531508743762969970703125p-582 {- 4332748952683656 -582 (-1.23953e-175)}
; Y = -1.2386122415680642649959963819128461182117462158203125p235 {- 1074614002211973 235 (-6.83887e+070)}
; Z = 1.0096491275800356657299516882630996406078338623046875p-388 {+ 43455807373899 -388 (1.60152e-117)}
; -1.9620635294379855650959143531508743762969970703125p-582 x -1.2386122415680642649959963819128461182117462158203125p235 1.0096491275800356657299516882630996406078338623046875p-388 == 1.215117953148295182330684838234446942806243896484375p-346
; [HW: 1.215117953148295182330684838234446942806243896484375p-346] 

; mpf : + 968805133639366 -346
; mpfd: + 968805133639366 -346 (8.47696e-105) class: Pos. norm. non-zero
; hwf : + 968805133639366 -346 (8.47696e-105) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111001 #b1111011001001001110010111010001110011100010010001000)))
(assert (= y (fp #b1 #b10011101010 #b0011110100010101101100010001110111110101110010000101)))
(assert (= z (fp #b0 #b01001111011 #b0000001001111000010111010111111101100100001001001011)))
(assert (= r (fp #b0 #b01010100101 #b0011011100010001111110000101110110001101111011000110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
