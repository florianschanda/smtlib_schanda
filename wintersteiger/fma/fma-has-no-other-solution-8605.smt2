(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.29438820056339043418347500846721231937408447265625p803 {+ 1325806590359556 803 (6.9048e+241)}
; Y = -1.7264529550950997727198910070001147687435150146484375p-445 {- 3271653257868487 -445 (-1.90023e-134)}
; Z = 1.1897719578423646691334170100162737071514129638671875p-967 {+ 854656918624243 -967 (9.53801e-292)}
; 1.29438820056339043418347500846721231937408447265625p803 x -1.7264529550950997727198910070001147687435150146484375p-445 1.1897719578423646691334170100162737071514129638671875p-967 == -1.117350166951446954755056140129454433917999267578125p359
; [HW: -1.117350166951446954755056140129454433917999267578125p359] 

; mpf : - 528498168154402 359
; mpfd: - 528498168154402 359 (-1.31207e+108) class: Neg. norm. non-zero
; hwf : - 528498168154402 359 (-1.31207e+108) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100100010 #b0100101101011101000001100110110110111111100000000100)))
(assert (= y (fp #b1 #b01001000010 #b1011100111111000110100100010010000110111010011000111)))
(assert (= z (fp #b0 #b00000111000 #b0011000010010100111001010010000010100001011111110011)))
(assert (= r (fp #b1 #b10101100110 #b0001111000001010101010010001100100111100100100100010)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
