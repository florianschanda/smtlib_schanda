(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.599917740171907354351787944324314594268798828125p-627 {- 2701789311091152 -627 (-2.8727e-189)}
; Y = -1.0876480986462435662787129331263713538646697998046875p91 {- 394731944402955 91 (-2.69289e+027)}
; Z = -1.6986005768831831108656160722603090107440948486328125p-44 {- 3146217297731917 -44 (-9.65543e-014)}
; -1.599917740171907354351787944324314594268798828125p-627 x -1.0876480986462435662787129331263713538646697998046875p91 -1.6986005768831831108656160722603090107440948486328125p-44 == -1.6986005768831831108656160722603090107440948486328125p-44
; [HW: -1.6986005768831831108656160722603090107440948486328125p-44] 

; mpf : - 3146217297731917 -44
; mpfd: - 3146217297731917 -44 (-9.65543e-014) class: Neg. norm. non-zero
; hwf : - 3146217297731917 -44 (-9.65543e-014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110001100 #b1001100110010100001101011000001001010100000111010000)))
(assert (= y (fp #b1 #b10001011010 #b0001011001110000000110110001010100111110000000001011)))
(assert (= z (fp #b1 #b01111010011 #b1011001011010111011111001100011010101110000101001101)))
(assert (= r (fp #b1 #b01111010011 #b1011001011010111011111001100011010101110000101001101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
