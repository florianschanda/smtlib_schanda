(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.310292856060124133676936253323219716548919677734375p899 {+ 1397434790928102 899 (5.53776e+270)}
; Y = -1.1838756669715702063427897883229888975620269775390625p-1003 {- 828102385255665 -1003 (-1.38109e-302)}
; Z = 1.8280563673977960892358396449708379805088043212890625p-330 {+ 3729234347654481 -330 (8.35778e-100)}
; 1.310292856060124133676936253323219716548919677734375p899 x -1.1838756669715702063427897883229888975620269775390625p-1003 1.8280563673977960892358396449708379805088043212890625p-330 == -1.55122382889626297952645472832955420017242431640625p-104
; [HW: -1.55122382889626297952645472832955420017242431640625p-104] 

; mpf : - 2482491430414948 -104
; mpfd: - 2482491430414948 -104 (-7.64812e-032) class: Neg. norm. non-zero
; hwf : - 2482491430414948 -104 (-7.64812e-032) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110000010 #b0100111101101111010110100100010011110101111011100110)))
(assert (= y (fp #b1 #b00000010100 #b0010111100010010011110011100100000101100010011110001)))
(assert (= z (fp #b0 #b01010110101 #b1101001111111011100000001000100100110111110101010001)))
(assert (= r (fp #b1 #b01110010111 #b1000110100011101000000010011110111100010101001100100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
