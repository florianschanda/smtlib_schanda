(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2686299468148245495058290543965995311737060546875p-453 {- 1209801728375800 -453 (-5.4544e-137)}
; Y = -1.569530186791158854475725092925131320953369140625p-566 {- 2564935937008912 -566 (-6.49819e-171)}
; Z = 1.9569244321338186143321991039556451141834259033203125p143 {+ 4309604515979589 143 (2.18204e+043)}
; -1.2686299468148245495058290543965995311737060546875p-453 x -1.569530186791158854475725092925131320953369140625p-566 1.9569244321338186143321991039556451141834259033203125p143 == 1.956924432133818836376804028986953198909759521484375p143
; [HW: 1.956924432133818836376804028986953198909759521484375p143] 

; mpf : + 4309604515979590 143
; mpfd: + 4309604515979590 143 (2.18204e+043) class: Pos. norm. non-zero
; hwf : + 4309604515979590 143 (2.18204e+043) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000111010 #b0100010011000100111011101010010001001011101111111000)))
(assert (= y (fp #b1 #b00111001001 #b1001000111001100101110101111011001011010010100010000)))
(assert (= z (fp #b0 #b10010001110 #b1111010011111000111111111110010011000010000101000101)))
(assert (= r (fp #b0 #b10010001110 #b1111010011111000111111111110010011000010000101000110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
