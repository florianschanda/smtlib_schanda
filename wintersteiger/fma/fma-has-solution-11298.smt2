(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5025268522200116994014251758926548063755035400390625p-35 {- 2263179744401713 -35 (-4.37293e-011)}
; Y = -1.9682134075252626370655661958153359591960906982421875p-492 {- 4360445541345891 -492 (-1.53927e-148)}
; Z = 1.15707181269431647052670086850412189960479736328125p-135 {+ 707388557120532 -135 (2.65651e-041)}
; -1.5025268522200116994014251758926548063755035400390625p-35 x -1.9682134075252626370655661958153359591960906982421875p-492 1.15707181269431647052670086850412189960479736328125p-135 == 1.15707181269431647052670086850412189960479736328125p-135
; [HW: 1.15707181269431647052670086850412189960479736328125p-135] 

; mpf : + 707388557120532 -135
; mpfd: + 707388557120532 -135 (2.65651e-041) class: Pos. norm. non-zero
; hwf : + 707388557120532 -135 (2.65651e-041) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111011100 #b1000000010100101100110011000101110100101100100110001)))
(assert (= y (fp #b1 #b01000010011 #b1111011111011100110101010111100011011110101001100011)))
(assert (= z (fp #b0 #b01101111000 #b0010100000110101110110111011101010100101010000010100)))
(assert (= r (fp #b0 #b01101111000 #b0010100000110101110110111011101010100101010000010100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
