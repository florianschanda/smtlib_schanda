(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.47899857517126065431511960923671722412109375p424 {- 2157217804652288 424 (-6.40746e+127)}
; Y = -1.3248129190383952646925536100752651691436767578125p-731 {- 1462827341146440 -731 (-1.17281e-220)}
; Z = 1.1528698756161188665458894320181570947170257568359375p738 {+ 688464714860927 738 (1.66693e+222)}
; -1.47899857517126065431511960923671722412109375p424 x -1.3248129190383952646925536100752651691436767578125p-731 1.1528698756161188665458894320181570947170257568359375p738 == 1.1528698756161188665458894320181570947170257568359375p738
; [HW: 1.1528698756161188665458894320181570947170257568359375p738] 

; mpf : + 688464714860927 738
; mpfd: + 688464714860927 738 (1.66693e+222) class: Pos. norm. non-zero
; hwf : + 688464714860927 738 (1.66693e+222) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110100111 #b0111101010011111101001101000111100110000111100000000)))
(assert (= y (fp #b1 #b00100100100 #b0101001100100110111100001000000010010110100101001000)))
(assert (= z (fp #b0 #b11011100001 #b0010011100100010011110101110110001010000100101111111)))
(assert (= r (fp #b0 #b11011100001 #b0010011100100010011110101110110001010000100101111111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
