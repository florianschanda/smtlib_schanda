(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8772969392672116395459624982322566211223602294921875p-684 {- 3950994168777091 -684 (-2.33892e-206)}
; Y = -1.6653855869175153703309888442163355648517608642578125p-329 {- 2996630281299421 -329 (-1.52281e-099)}
; Z = -1.7573898770453395545843022773624397814273834228515625p297 {- 3410980768035577 297 (-4.47483e+089)}
; -1.8772969392672116395459624982322566211223602294921875p-684 x -1.6653855869175153703309888442163355648517608642578125p-329 -1.7573898770453395545843022773624397814273834228515625p297 == -1.7573898770453393325396973523311316967010498046875p297
; [HW: -1.7573898770453393325396973523311316967010498046875p297] 

; mpf : - 3410980768035576 297
; mpfd: - 3410980768035576 297 (-4.47483e+089) class: Neg. norm. non-zero
; hwf : - 3410980768035576 297 (-4.47483e+089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010011 #b1110000010010110100010000011111100001000100110000011)))
(assert (= y (fp #b1 #b01010110110 #b1010101001010110101101011011011100001010010111011101)))
(assert (= z (fp #b1 #b10100101000 #b1100000111100100010011011001000000111011001011111001)))
(assert (= r (fp #b1 #b10100101000 #b1100000111100100010011011001000000111011001011111000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
