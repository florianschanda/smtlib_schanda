(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0167013512133971087081363293691538274288177490234375p665 {- 75216199101239 665 (-1.55647e+200)}
; Y = 1.2761349384897406888939030977780930697917938232421875p54 {+ 1243601206086371 54 (2.29888e+016)}
; Z = -1.6645060710105814560932913082069717347621917724609375p-835 {- 2992669293788687 -835 (-7.26506e-252)}
; -1.0167013512133971087081363293691538274288177490234375p665 x 1.2761349384897406888939030977780930697917938232421875p54 -1.6645060710105814560932913082069717347621917724609375p-835 == -1.2974481162931448263719858005060814321041107177734375p719
; [HW: -1.2974481162931448263719858005060814321041107177734375p719] 

; mpf : - 1339587225699863 719
; mpfd: - 1339587225699863 719 (-3.57814e+216) class: Neg. norm. non-zero
; hwf : - 1339587225699863 719 (-3.57814e+216) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010011000 #b0000010001000110100010100010110101000010101100110111)))
(assert (= y (fp #b0 #b10000110101 #b0100011010110000110001111000001000011000101011100011)))
(assert (= z (fp #b1 #b00010111100 #b1010101000011101000100011110001011111011111000001111)))
(assert (= r (fp #b1 #b11011001110 #b0100110000100101100011110100101110111100011000010111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
