(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9918532965857889127647695204359479248523712158203125p-710 {+ 4466910136909957 -710 (3.69794e-214)}
; Y = 1.8348231030139228181496946490369737148284912109375p-865 {+ 3759709015653784 -865 (7.45844e-261)}
; Z = 1.0722060669227728713082115064025856554508209228515625p-521 {+ 325187216087289 -521 (1.56189e-157)}
; 1.9918532965857889127647695204359479248523712158203125p-710 x 1.8348231030139228181496946490369737148284912109375p-865 1.0722060669227728713082115064025856554508209228515625p-521 == 1.0722060669227728713082115064025856554508209228515625p-521
; [HW: 1.0722060669227728713082115064025856554508209228515625p-521] 

; mpf : + 325187216087289 -521
; mpfd: + 325187216087289 -521 (1.56189e-157) class: Pos. norm. non-zero
; hwf : + 325187216087289 -521 (1.56189e-157) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100111001 #b1111110111101010000110001111111101000100000010000101)))
(assert (= y (fp #b0 #b00010011110 #b1101010110110110111101111000010101100011110110011000)))
(assert (= z (fp #b0 #b00111110110 #b0001001001111100000110001100100000000001100011111001)))
(assert (= r (fp #b0 #b00111110110 #b0001001001111100000110001100100000000001100011111001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
