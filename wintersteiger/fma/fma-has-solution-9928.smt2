(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.948606169635333618117556397919543087482452392578125p-890 {- 4272142392091042 -890 (-2.36063e-268)}
; Y = -1.374902212682245217223453437327407300472259521484375p-750 {- 1688409465336134 -750 (-2.32153e-226)}
; Z = -1.6965861081163053913911653580726124346256256103515625p-411 {- 3137144936944057 -411 (-3.2081e-124)}
; -1.948606169635333618117556397919543087482452392578125p-890 x -1.374902212682245217223453437327407300472259521484375p-750 -1.6965861081163053913911653580726124346256256103515625p-411 == -1.6965861081163051693465604330413043498992919921875p-411
; [HW: -1.6965861081163051693465604330413043498992919921875p-411] 

; mpf : - 3137144936944056 -411
; mpfd: - 3137144936944056 -411 (-3.2081e-124) class: Neg. norm. non-zero
; hwf : - 3137144936944056 -411 (-3.2081e-124) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010000101 #b1111001011010111110110101001101101011110000110100010)))
(assert (= y (fp #b1 #b00100010001 #b0101111111111001100101110110011010101011000101000110)))
(assert (= z (fp #b1 #b01001100100 #b1011001001010011011101111001100100110101000110111001)))
(assert (= r (fp #b1 #b01001100100 #b1011001001010011011101111001100100110101000110111000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
