(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4423262847971012323711192948394455015659332275390625p-358 {+ 1992060491388401 -358 (2.45655e-108)}
; Y = 1.834501556381030074049931499757803976535797119140625p-178 {+ 3758260898357706 -178 (4.78827e-054)}
; Z = 1.8385959471520367802810369539656676352024078369140625p661 {+ 3776700395108321 661 (1.75919e+199)}
; 1.4423262847971012323711192948394455015659332275390625p-358 x 1.834501556381030074049931499757803976535797119140625p-178 1.8385959471520367802810369539656676352024078369140625p661 == 1.838595947152037002325641878996975719928741455078125p661
; [HW: 1.838595947152037002325641878996975719928741455078125p661] 

; mpf : + 3776700395108322 661
; mpfd: + 3776700395108322 661 (1.75919e+199) class: Pos. norm. non-zero
; hwf : + 3776700395108322 661 (1.75919e+199) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010011001 #b0111000100111100010010111001111101011101010111110001)))
(assert (= y (fp #b0 #b01101001101 #b1101010110100001111001001101110100011110000111001010)))
(assert (= z (fp #b0 #b11010010100 #b1101011010101110001110010101011110010011011111100001)))
(assert (= r (fp #b0 #b11010010100 #b1101011010101110001110010101011110010011011111100010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
