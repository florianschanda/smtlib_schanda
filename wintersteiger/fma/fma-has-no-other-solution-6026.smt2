(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6387725214355928216036772937513887882232666015625p-291 {+ 2876775689511848 -291 (4.11898e-088)}
; Y = -1.295206601737056484324739358271472156047821044921875p966 {- 1329492341580318 966 (-8.0782e+290)}
; Z = 1.632479642372413053408308769576251506805419921875p445 {+ 2848435081707824 445 (1.48319e+134)}
; 1.6387725214355928216036772937513887882232666015625p-291 x -1.295206601737056484324739358271472156047821044921875p966 1.632479642372413053408308769576251506805419921875p445 == -1.061274494254330846843004110269248485565185546875p676
; [HW: -1.061274494254330846843004110269248485565185546875p676] 

; mpf : - 275955789491120 676
; mpfd: - 275955789491120 676 (-3.3274e+203) class: Neg. norm. non-zero
; hwf : - 275955789491120 676 (-3.3274e+203) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011100 #b1010001110000110100110001001000100100110001110101000)))
(assert (= y (fp #b1 #b11111000101 #b0100101110010010101010001110110000000110001000011110)))
(assert (= z (fp #b0 #b10110111100 #b1010000111101010001011111001001101100000000100110000)))
(assert (= r (fp #b1 #b11010100011 #b0000111110101111101011110110110011100110101110110000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
