(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2107190721462324223267614797805435955524444580078125p-503 {+ 948994334797629 -503 (4.62334e-152)}
; Y = 1.1132881031395329696209728354006074368953704833984375p-519 {+ 510204259084711 -519 (6.48694e-157)}
; Z = -1.6813661669774351281603230745531618595123291015625p507 {- 3068600415702440 507 (-7.04482e+152)}
; 1.2107190721462324223267614797805435955524444580078125p-503 x 1.1132881031395329696209728354006074368953704833984375p-519 -1.6813661669774351281603230745531618595123291015625p507 == -1.6813661669774351281603230745531618595123291015625p507
; [HW: -1.6813661669774351281603230745531618595123291015625p507] 

; mpf : - 3068600415702440 507
; mpfd: - 3068600415702440 507 (-7.04482e+152) class: Neg. norm. non-zero
; hwf : - 3068600415702440 507 (-7.04482e+152) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000001000 #b0011010111110001101011110110001110000010111100111101)))
(assert (= y (fp #b0 #b00111111000 #b0001110100000000011100101111101000000010100110100111)))
(assert (= z (fp #b1 #b10111111010 #b1010111001101110000000110101101111000100110110101000)))
(assert (= r (fp #b1 #b10111111010 #b1010111001101110000000110101101111000100110110101000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
