(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.944318722446683356253060992457903921604156494140625p24 {+ 4252833446529866 24 (3.26203e+007)}
; Y = 1.343435337827393549758880908484570682048797607421875p237 {+ 1546695259465310 237 (2.96706e+071)}
; Z = -1.7582246580926235157704695666325278580188751220703125p-216 {- 3414740287649061 -216 (-1.66953e-065)}
; 1.944318722446683356253060992457903921604156494140625p24 x 1.343435337827393549758880908484570682048797607421875p237 -1.7582246580926235157704695666325278580188751220703125p-216 == 1.3060332398671430365055812217178754508495330810546875p262
; [HW: 1.3060332398671430365055812217178754508495330810546875p262] 

; mpf : + 1378251185028651 262
; mpfd: + 1378251185028651 262 (9.67861e+078) class: Pos. norm. non-zero
; hwf : + 1378251185028651 262 (9.67861e+078) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000010111 #b1111000110111110110111110010110111101000101101001010)))
(assert (= y (fp #b0 #b10011101100 #b0101011111101011011000001101100001000010011001011110)))
(assert (= z (fp #b1 #b01100100111 #b1100001000011011000000101101110110000111010100100101)))
(assert (= r (fp #b0 #b10100000101 #b0100111001011000001100011100010010110111111000101011)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
