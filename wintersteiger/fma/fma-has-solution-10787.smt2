(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.887791237795717780301174570922739803791046142578125p896 {+ 3998256287719586 896 (9.9731e+269)}
; Y = 1.1978676275339104062567230357672087848186492919921875p60 {+ 891116573630403 60 (1.38105e+018)}
; Z = 0.0523107802172038116594876555609516799449920654296875p-1022 {+ 235586810293659 -1023 (1.16395e-309)}
; 1.887791237795717780301174570922739803791046142578125p896 x 1.1978676275339104062567230357672087848186492919921875p60 0.0523107802172038116594876555609516799449920654296875p-1022 == 1.1306620056488301262476170450099743902683258056640625p957
; [HW: 1.1306620056488301262476170450099743902683258056640625p957] 

; mpf : + 588449359951553 957
; mpfd: + 588449359951553 957 (1.37733e+288) class: Pos. norm. non-zero
; hwf : + 588449359951553 957 (1.37733e+288) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101111111 #b1110001101000110010010010101110000000010000010100010)))
(assert (= y (fp #b0 #b10000111011 #b0011001010100111011100111110110100110001111111000011)))
(assert (= z (fp #b0 #b00000000000 #b0000110101100100001111010100001001000010110110011011)))
(assert (= r (fp #b0 #b11110111100 #b0010000101110011000100001011000100010111011011000001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
