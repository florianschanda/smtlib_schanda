(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0245137407623570169334925594739615917205810546875p-803 {+ 110400073762808 -803 (1.92057e-242)}
; Y = -1.13396611274465097807251368067227303981781005859375p-14 {- 603329735437084 -14 (-6.92118e-005)}
; Z = 1.4688325374239730169989570640609599649906158447265625p738 {+ 2111434040841769 738 (2.12378e+222)}
; 1.0245137407623570169334925594739615917205810546875p-803 x -1.13396611274465097807251368067227303981781005859375p-14 1.4688325374239730169989570640609599649906158447265625p738 == 1.4688325374239730169989570640609599649906158447265625p738
; [HW: 1.4688325374239730169989570640609599649906158447265625p738] 

; mpf : + 2111434040841769 738
; mpfd: + 2111434040841769 738 (2.12378e+222) class: Pos. norm. non-zero
; hwf : + 2111434040841769 738 (2.12378e+222) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011011100 #b0000011001000110100010000101001011100000011111111000)))
(assert (= y (fp #b1 #b01111110001 #b0010001001001011100110100110100100000010101100011100)))
(assert (= z (fp #b0 #b11011100001 #b0111100000000101011010001011111110001001011000101001)))
(assert (= r (fp #b0 #b11011100001 #b0111100000000101011010001011111110001001011000101001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
