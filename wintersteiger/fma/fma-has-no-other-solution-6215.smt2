(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0860262415181853867807149072177708148956298828125p898 {+ 387427749245384 898 (2.29497e+270)}
; Y = 1.237093010040388296744140461669303476810455322265625p-914 {+ 1067771991670042 -914 (8.93277e-276)}
; Z = -1.9335345725918404724552601692266762256622314453125p-853 {- 4204265953262088 -853 (-3.21933e-257)}
; 1.0860262415181853867807149072177708148956298828125p898 x 1.237093010040388296744140461669303476810455322265625p-914 -1.9335345725918404724552601692266762256622314453125p-853 == 1.343515472102581487234829182852990925312042236328125p-16
; [HW: 1.343515472102581487234829182852990925312042236328125p-16] 

; mpf : + 1547056152157186 -16
; mpfd: + 1547056152157186 -16 (2.05004e-005) class: Pos. norm. non-zero
; hwf : + 1547056152157186 -16 (2.05004e-005) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110000001 #b0001011000000101110100001101010111101011000111001000)))
(assert (= y (fp #b0 #b00001101101 #b0011110010110010001000001010010000111011110100011010)))
(assert (= z (fp #b1 #b00010101010 #b1110111011111100000111110010101011110111101000001000)))
(assert (= r (fp #b0 #b01111101111 #b0101011111110000101000010100011001011001110000000010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
