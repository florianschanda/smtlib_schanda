(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.691157827720860762354959661024622619152069091796875p382 {+ 3112698135377870 382 (1.66588e+115)}
; Y = 1.965267472142158577952386622200720012187957763671875p476 {+ 4347178227852286 476 (3.83442e+143)}
; Z = -1.391863730108860774947743266238830983638763427734375p-326 {- 1764797348898278 -326 (-1.01816e-098)}
; 1.691157827720860762354959661024622619152069091796875p382 x 1.965267472142158577952386622200720012187957763671875p476 -1.391863730108860774947743266238830983638763427734375p-326 == 1.6617887345391999520671788559411652386188507080078125p859
; [HW: 1.6617887345391999520671788559411652386188507080078125p859] 

; mpf : + 2980431498268733 859
; mpfd: + 2980431498268733 859 (6.38766e+258) class: Pos. norm. non-zero
; hwf : + 2980431498268733 859 (6.38766e+258) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101111101 #b1011000011101111101110000010101001101111011111001110)))
(assert (= y (fp #b0 #b10111011011 #b1111011100011011110001001110000010111110001111111110)))
(assert (= z (fp #b1 #b01010111001 #b0110010001010001001011100111000101001110010111100110)))
(assert (= r (fp #b0 #b11101011010 #b1010100101101010111111001000101110110101000000111101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
