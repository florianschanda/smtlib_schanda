(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.612735219609271464236144311144016683101654052734375p-285 {+ 2759514106709094 -285 (2.59426e-086)}
; Y = 1.812645541788239000879912055097520351409912109375p312 {+ 3659830159181808 312 (1.51242e+094)}
; Z = 1.6884595598809795102823727575014345347881317138671875p-435 {+ 3100546217339635 -435 (1.90302e-131)}
; 1.612735219609271464236144311144016683101654052734375p-285 x 1.812645541788239000879912055097520351409912109375p312 1.6884595598809795102823727575014345347881317138671875p-435 == 1.461658652954811454804939785390160977840423583984375p28
; [HW: 1.461658652954811454804939785390160977840423583984375p28] 

; mpf : + 2079125737419654 28
; mpfd: + 2079125737419654 28 (3.92361e+008) class: Pos. norm. non-zero
; hwf : + 2079125737419654 28 (3.92361e+008) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011100010 #b1001110011011100001101110010000101010100010001100110)))
(assert (= y (fp #b0 #b10100110111 #b1101000000001001100010011100100100111000011111110000)))
(assert (= z (fp #b0 #b01001001100 #b1011000000111110111000101011111001001110101011110011)))
(assert (= r (fp #b0 #b10000011011 #b0111011000101111010000101111000001011011001110000110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
