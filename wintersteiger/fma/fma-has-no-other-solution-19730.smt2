(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6502137841805766260705468084779568016529083251953125p-597 {+ 2928302556146805 -597 (3.18151e-180)}
; Y = -1.9679370651052019436377804595394991338253021240234375p-532 {- 4359201005725879 -532 (-1.39976e-160)}
; Z = -1.010295981111493102133636057260446250438690185546875p-125 {- 46368976697134 -125 (-2.37519e-038)}
; 1.6502137841805766260705468084779568016529083251953125p-597 x -1.9679370651052019436377804595394991338253021240234375p-532 -1.010295981111493102133636057260446250438690185546875p-125 == -1.010295981111493102133636057260446250438690185546875p-125
; [HW: -1.010295981111493102133636057260446250438690185546875p-125] 

; mpf : - 46368976697134 -125
; mpfd: - 46368976697134 -125 (-2.37519e-038) class: Neg. norm. non-zero
; hwf : - 46368976697134 -125 (-2.37519e-038) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101010 #b1010011001110100011010010001101001110110110001110101)))
(assert (= y (fp #b1 #b00111101011 #b1111011111001010101110010011011100110110100010110111)))
(assert (= z (fp #b1 #b01110000010 #b0000001010100010110000011110011000100111011100101110)))
(assert (= r (fp #b1 #b01110000010 #b0000001010100010110000011110011000100111011100101110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
