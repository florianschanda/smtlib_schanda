(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5227369773894745552667018273496069014072418212890625p-796 {- 2354198056584017 -796 (-3.65383e-240)}
; Y = 1.315396522022092451464914120151661336421966552734375p1 {+ 1420419659052646 1 (2.63079)}
; Z = -1.682716759131760664303101293626241385936737060546875p202 {- 3074682942025390 202 (-1.08161e+061)}
; -1.5227369773894745552667018273496069014072418212890625p-796 x 1.315396522022092451464914120151661336421966552734375p1 -1.682716759131760664303101293626241385936737060546875p202 == -1.682716759131760664303101293626241385936737060546875p202
; [HW: -1.682716759131760664303101293626241385936737060546875p202] 

; mpf : - 3074682942025390 202
; mpfd: - 3074682942025390 202 (-1.08161e+061) class: Neg. norm. non-zero
; hwf : - 3074682942025390 202 (-1.08161e+061) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011100011 #b1000010111010010000101110010111001001100001101010001)))
(assert (= y (fp #b0 #b10000000000 #b0101000010111101110100111001001101011011011001100110)))
(assert (= z (fp #b1 #b10011001001 #b1010111011000110100001101000100011100110111010101110)))
(assert (= r (fp #b1 #b10011001001 #b1010111011000110100001101000100011100110111010101110)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
