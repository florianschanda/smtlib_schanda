(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.72028480760458801768209013971500098705291748046875p694 {+ 3243874391128652 694 (1.4139e+209)}
; Y = -1.6681052213347642432239581467001698911190032958984375p-646 {- 3008878425847527 -646 (-5.71276e-195)}
; Z = 1.5140455408548050275641116968472488224506378173828125p-964 {+ 2315055306245165 -964 (9.71009e-291)}
; 1.72028480760458801768209013971500098705291748046875p694 x -1.6681052213347642432239581467001698911190032958984375p-646 1.5140455408548050275641116968472488224506378173828125p-964 == -1.434808034874041737793959327973425388336181640625p49
; [HW: -1.434808034874041737793959327973425388336181640625p49] 

; mpf : - 1958201303836432 49
; mpfd: - 1958201303836432 49 (-8.07725e+014) class: Neg. norm. non-zero
; hwf : - 1958201303836432 49 (-8.07725e+014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010110101 #b1011100001100100100101011100110001110111101001001100)))
(assert (= y (fp #b1 #b00101111001 #b1010101100001000111100011001101111101011011011100111)))
(assert (= z (fp #b0 #b00000111011 #b1000001110011000011111010001001010100000010000101101)))
(assert (= r (fp #b1 #b10000110000 #b0110111101001111100101000101000111010010011100010000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
