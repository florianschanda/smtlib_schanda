(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7904740011430895219035619447822682559490203857421875p79 {+ 3559978416994083 79 (1.08228e+024)}
; Y = 1.3706900121640093193065013110754080116748809814453125p-455 {+ 1669439400651797 -455 (1.4733e-137)}
; Z = -1.14453986882075309239326088572852313518524169921875p715 {- 650949699361324 715 (-1.97278e+215)}
; 1.7904740011430895219035619447822682559490203857421875p79 x 1.3706900121640093193065013110754080116748809814453125p-455 -1.14453986882075309239326088572852313518524169921875p715 == -1.14453986882075309239326088572852313518524169921875p715
; [HW: -1.14453986882075309239326088572852313518524169921875p715] 

; mpf : - 650949699361324 715
; mpfd: - 650949699361324 715 (-1.97278e+215) class: Neg. norm. non-zero
; hwf : - 650949699361324 715 (-1.97278e+215) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001001110 #b1100101001011100100000010000111100111111011100100011)))
(assert (= y (fp #b0 #b01000111000 #b0101111011100101100010100110011100110010110000010101)))
(assert (= z (fp #b1 #b11011001010 #b0010010100000000100100001001100110001101101000101100)))
(assert (= r (fp #b1 #b11011001010 #b0010010100000000100100001001100110001101101000101100)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
