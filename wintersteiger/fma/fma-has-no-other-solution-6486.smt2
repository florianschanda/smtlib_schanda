(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.421529862953976763861874132999219000339508056640625p98 {- 1898401733725066 98 (-4.50501e+029)}
; Y = 1.5928411508717610356455907094641588628292083740234375p-508 {+ 2669919186155959 -508 (1.90079e-153)}
; Z = 1.17086397943932940535205489140935242176055908203125p590 {+ 769502954134004 590 (4.74465e+177)}
; -1.421529862953976763861874132999219000339508056640625p98 x 1.5928411508717610356455907094641588628292083740234375p-508 1.17086397943932940535205489140935242176055908203125p590 == 1.17086397943932940535205489140935242176055908203125p590
; [HW: 1.17086397943932940535205489140935242176055908203125p590] 

; mpf : + 769502954134004 590
; mpfd: + 769502954134004 590 (4.74465e+177) class: Pos. norm. non-zero
; hwf : + 769502954134004 590 (4.74465e+177) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001100001 #b0110101111101001011000011000111110101100101110001010)))
(assert (= y (fp #b0 #b01000000011 #b1001011111000100011100000000101010110111100110110111)))
(assert (= z (fp #b0 #b11001001101 #b0010101110111101101111011110001111000001100111110100)))
(assert (= r (fp #b0 #b11001001101 #b0010101110111101101111011110001111000001100111110100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
