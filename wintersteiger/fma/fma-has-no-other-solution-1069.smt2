(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6531173006583281814840802326216362416744232177734375p915 {- 2941378831874071 915 (-4.57878e+275)}
; Y = -zero {- 0 -1023 (-0)}
; Z = 1.3894224004049522402937100196140818297863006591796875p-206 {+ 1753802577353467 -206 (1.351e-062)}
; -1.6531173006583281814840802326216362416744232177734375p915 x -zero 1.3894224004049522402937100196140818297863006591796875p-206 == 1.3894224004049522402937100196140818297863006591796875p-206
; [HW: 1.3894224004049522402937100196140818297863006591796875p-206] 

; mpf : + 1753802577353467 -206
; mpfd: + 1753802577353467 -206 (1.351e-062) class: Pos. norm. non-zero
; hwf : + 1753802577353467 -206 (1.351e-062) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110010010 #b1010011100110010101100100000011011000111100000010111)))
(assert (= y (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= z (fp #b0 #b01100110001 #b0110001110110001001011111011101000010001101011111011)))
(assert (= r (fp #b0 #b01100110001 #b0110001110110001001011111011101000010001101011111011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
