(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3874110042934539865910892331157810986042022705078125p-191 {- 1744744054575229 -191 (-4.42055e-058)}
; Y = -1.007744149911584230494554503820836544036865234375p758 {- 34876550656112 758 (-1.52787e+228)}
; Z = -1.551918848565752018231478359666652977466583251953125p-95 {- 2485621520739474 -95 (-3.91759e-029)}
; -1.3874110042934539865910892331157810986042022705078125p-191 x -1.007744149911584230494554503820836544036865234375p758 -1.551918848565752018231478359666652977466583251953125p-95 == 1.39815532309968393320787072298116981983184814453125p567
; [HW: 1.39815532309968393320787072298116981983184814453125p567] 

; mpf : + 1793132164747316 567
; mpfd: + 1793132164747316 567 (6.75403e+170) class: Pos. norm. non-zero
; hwf : + 1793132164747316 567 (6.75403e+170) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101000000 #b0110001100101101010111100001100110001101000001111101)))
(assert (= y (fp #b1 #b11011110101 #b0000000111111011100001010100011010011011000001110000)))
(assert (= z (fp #b1 #b01110100000 #b1000110101001010100011011011110010100010110010010010)))
(assert (= r (fp #b0 #b11000110110 #b0110010111101101100000011101101101110001000000110100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
