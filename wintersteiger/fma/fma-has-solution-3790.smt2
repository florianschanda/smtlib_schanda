(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2213232457919562801151869280147366225719451904296875p-569 {+ 996751287277083 -569 (6.32067e-172)}
; Y = -1.02666369727530426558814724558033049106597900390625p969 {- 120082617113380 969 (-5.12264e+291)}
; Z = -1.27159070336866619754800922237336635589599609375p585 {- 1223135790488416 585 (-1.61026e+176)}
; 1.2213232457919562801151869280147366225719451904296875p-569 x -1.02666369727530426558814724558033049106597900390625p969 -1.27159070336866619754800922237336635589599609375p585 == -1.27159070336866619754800922237336635589599609375p585
; [HW: -1.27159070336866619754800922237336635589599609375p585] 

; mpf : - 1223135790488416 585
; mpfd: - 1223135790488416 585 (-1.61026e+176) class: Neg. norm. non-zero
; hwf : - 1223135790488416 585 (-1.61026e+176) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111000110 #b0011100010101000101000111110011010000101011000011011)))
(assert (= y (fp #b1 #b11111001000 #b0000011011010011011011101001101111001001101100100100)))
(assert (= z (fp #b1 #b11001001000 #b0100010110000110111101111110010011011101101101100000)))
(assert (= r (fp #b1 #b11001001000 #b0100010110000110111101111110010011011101101101100000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
