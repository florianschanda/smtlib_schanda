(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7663598973901972755129463621415197849273681640625p-462 {+ 3451378148318184 -462 (1.48327e-139)}
; Y = -1.4331295788478477515326403590734116733074188232421875p-937 {- 1950642209902307 -937 (-1.23361e-282)}
; Z = -1.62846656993370419996836062637157738208770751953125p716 {- 2830361810168244 716 (-5.61378e+215)}
; 1.7663598973901972755129463621415197849273681640625p-462 x -1.4331295788478477515326403590734116733074188232421875p-937 -1.62846656993370419996836062637157738208770751953125p716 == -1.62846656993370419996836062637157738208770751953125p716
; [HW: -1.62846656993370419996836062637157738208770751953125p716] 

; mpf : - 2830361810168244 716
; mpfd: - 2830361810168244 716 (-5.61378e+215) class: Neg. norm. non-zero
; hwf : - 2830361810168244 716 (-5.61378e+215) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000110001 #b1100010000110000001010011000100001000001101111101000)))
(assert (= y (fp #b1 #b00001010110 #b0110111011100001100101001000000000010100111011100011)))
(assert (= z (fp #b1 #b11011001011 #b1010000011100011001011110110010001111110100110110100)))
(assert (= r (fp #b1 #b11011001011 #b1010000011100011001011110110010001111110100110110100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
