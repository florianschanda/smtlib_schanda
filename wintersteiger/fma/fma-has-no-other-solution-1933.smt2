(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6965418390162254613784398316056467592716217041015625p-661 {- 3136945566641433 -661 (-1.77312e-199)}
; Y = 1.805512051284491992220182510209269821643829345703125p725 {+ 3627703774007282 725 (3.18674e+218)}
; Z = -1.709426185656436114612688470515422523021697998046875p722 {- 3194971505369198 722 (-3.77144e+217)}
; -1.6965418390162254613784398316056467592716217041015625p-661 x 1.805512051284491992220182510209269821643829345703125p725 -1.709426185656436114612688470515422523021697998046875p722 == -1.7094261856564363366572933955467306077480316162109375p722
; [HW: -1.7094261856564363366572933955467306077480316162109375p722] 

; mpf : - 3194971505369199 722
; mpfd: - 3194971505369199 722 (-3.77144e+217) class: Neg. norm. non-zero
; hwf : - 3194971505369199 722 (-3.77144e+217) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101101010 #b1011001001010000100100001110001011011110110100011001)))
(assert (= y (fp #b0 #b11011010100 #b1100111000110110000010011010110011001100111111110010)))
(assert (= z (fp #b1 #b11011010001 #b1011010110011100111101000101101001010010000001101110)))
(assert (= r (fp #b1 #b11011010001 #b1011010110011100111101000101101001010010000001101111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
