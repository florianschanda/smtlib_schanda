(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.95004037670371932478019516565836966037750244140625p190 {+ 4278601486509796 190 (3.06015e+057)}
; Y = 1.23970102097485312953040192951448261737823486328125p580 {+ 1079517428742676 580 (4.90585e+174)}
; Z = -1.6402373367381037905232687990064732730388641357421875p412 {- 2883372631162403 412 (-1.73486e+124)}
; 1.95004037670371932478019516565836966037750244140625p190 x 1.23970102097485312953040192951448261737823486328125p580 -1.6402373367381037905232687990064732730388641357421875p412 == 1.2087335229708939809967205292196013033390045166015625p771
; [HW: 1.2087335229708939809967205292196013033390045166015625p771] 

; mpf : + 940052216271449 771
; mpfd: + 940052216271449 771 (1.50126e+232) class: Pos. norm. non-zero
; hwf : + 940052216271449 771 (1.50126e+232) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010111101 #b1111001100110101110110001001101111010010011011100100)))
(assert (= y (fp #b0 #b11001000011 #b0011110101011101000010111100110111100111101000010100)))
(assert (= z (fp #b1 #b10110011011 #b1010001111100110100110000001011011110111111000100011)))
(assert (= r (fp #b0 #b11100000010 #b0011010101101111100011110110011010111101001001011001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
