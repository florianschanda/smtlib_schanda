(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.778398912677657595082791885943152010440826416015625p-488 {- 3505597053080698 -488 (-2.22531e-147)}
; Y = -1.1680381370575323440874626612639985978603363037109375p-13 {- 756776491436335 -13 (-0.000142583)}
; Z = 1.3068922372472056014913732724380679428577423095703125p-227 {+ 1382119765309413 -227 (6.05942e-069)}
; -1.778398912677657595082791885943152010440826416015625p-488 x -1.1680381370575323440874626612639985978603363037109375p-13 1.3068922372472056014913732724380679428577423095703125p-227 == 1.3068922372472056014913732724380679428577423095703125p-227
; [HW: 1.3068922372472056014913732724380679428577423095703125p-227] 

; mpf : + 1382119765309413 -227
; mpfd: + 1382119765309413 -227 (6.05942e-069) class: Pos. norm. non-zero
; hwf : + 1382119765309413 -227 (6.05942e-069) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010111 #b1100011101000101001001101011000100110001010001111010)))
(assert (= y (fp #b1 #b01111110010 #b0010101100000100100011000001111100100100100100101111)))
(assert (= z (fp #b0 #b01100011100 #b0100111010010000011111010101101001011111011111100101)))
(assert (= r (fp #b0 #b01100011100 #b0100111010010000011111010101101001011111011111100101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
