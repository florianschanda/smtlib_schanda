(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.133825759471999372607342593255452811717987060546875p-988 {+ 602697640490670 -988 (4.33422e-298)}
; Y = 1.9949516109197300561817201014491729438304901123046875p-1012 {+ 4480863704189771 -1012 (4.54545e-305)}
; Z = 1.0428523281353860863163163230638019740581512451171875p-975 {+ 192989729022483 -975 (3.26571e-294)}
; 1.133825759471999372607342593255452811717987060546875p-988 x 1.9949516109197300561817201014491729438304901123046875p-1012 1.0428523281353860863163163230638019740581512451171875p-975 == 1.0428523281353860863163163230638019740581512451171875p-975
; [HW: 1.0428523281353860863163163230638019740581512451171875p-975] 

; mpf : + 192989729022483 -975
; mpfd: + 192989729022483 -975 (3.26571e-294) class: Pos. norm. non-zero
; hwf : + 192989729022483 -975 (3.26571e-294) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000100011 #b0010001001000010011001111010110001001011011010101110)))
(assert (= y (fp #b0 #b00000001011 #b1111111010110101001001100001011000000000101101001011)))
(assert (= z (fp #b0 #b00000110000 #b0000101011111000010111101100001111100110001000010011)))
(assert (= r (fp #b0 #b00000110000 #b0000101011111000010111101100001111100110001000010011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
