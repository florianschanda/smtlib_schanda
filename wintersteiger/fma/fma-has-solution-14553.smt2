(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8256786337960229094079522838001139461994171142578125p-709 {- 3718525987491549 -709 (-6.77887e-214)}
; Y = -1.0957380605470172785231852685683406889438629150390625p869 {- 431165893804721 869 (-4.31294e+261)}
; Z = 1.2769164700433408565771742360084317624568939208984375p495 {+ 1247120911299943 495 (1.3062e+149)}
; -1.8256786337960229094079522838001139461994171142578125p-709 x -1.0957380605470172785231852685683406889438629150390625p869 1.2769164700433408565771742360084317624568939208984375p495 == 1.2769164700433410786217791610397398471832275390625p495
; [HW: 1.2769164700433410786217791610397398471832275390625p495] 

; mpf : + 1247120911299944 495
; mpfd: + 1247120911299944 495 (1.3062e+149) class: Pos. norm. non-zero
; hwf : + 1247120911299944 495 (1.3062e+149) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100111010 #b1101001101011111101011001100100100101000111011011101)))
(assert (= y (fp #b1 #b11101100100 #b0001100010000010010010100001111100001000001010110001)))
(assert (= z (fp #b0 #b10111101110 #b0100011011100011111111110110111010001111010101100111)))
(assert (= r (fp #b0 #b10111101110 #b0100011011100011111111110110111010001111010101101000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
