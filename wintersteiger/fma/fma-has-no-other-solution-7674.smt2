(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8565892401967152292030505122966133058071136474609375p-610 {+ 3857734982959503 -610 (4.36937e-184)}
; Y = -1.72684911779213745575134453247301280498504638671875p876 {- 3273437416043244 876 (-8.70023e+263)}
; Z = -1.0935717204922965617441832364420406520366668701171875p-817 {- 421409565541523 -817 (-1.25124e-246)}
; 1.8565892401967152292030505122966133058071136474609375p-610 x -1.72684911779213745575134453247301280498504638671875p876 -1.0935717204922965617441832364420406520366668701171875p-817 == -1.6030247457680364409071671616402454674243927001953125p267
; [HW: -1.6030247457680364409071671616402454674243927001953125p267] 

; mpf : - 2715782020336117 267
; mpfd: - 2715782020336117 267 (-3.80145e+080) class: Neg. norm. non-zero
; hwf : - 2715782020336117 267 (-3.80145e+080) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110011101 #b1101101101001001011011101011010011000000000110001111)))
(assert (= y (fp #b1 #b11101101011 #b1011101000010010110010001010011000001011001011101100)))
(assert (= z (fp #b1 #b00011001110 #b0001011111110100010100001111011101011000010010010011)))
(assert (= r (fp #b1 #b10100001010 #b1001101001011111110101000110100111000000100111110101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
