(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1110808891246006790964884203276596963405609130859375p258 {+ 500263850869535 258 (5.14618e+077)}
; Y = 1.1689749326016214414636351648368872702121734619140625p598 {+ 760995443499617 598 (1.21267e+180)}
; Z = 1.0765481632651388022026139879017136991024017333984375p-658 {+ 344742279556775 -658 (9.00112e-199)}
; 1.1110808891246006790964884203276596963405609130859375p258 x 1.1689749326016214414636351648368872702121734619140625p598 1.0765481632651388022026139879017136991024017333984375p-658 == 1.2988257074793796430611791947740130126476287841796875p856
; [HW: 1.2988257074793796430611791947740130126476287841796875p856] 

; mpf : + 1345791344852859 856
; mpfd: + 1345791344852859 856 (6.24061e+257) class: Pos. norm. non-zero
; hwf : + 1345791344852859 856 (6.24061e+257) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000001 #b0001110001101111110011000001001000000000001100011111)))
(assert (= y (fp #b0 #b11001010101 #b0010101101000001111100001111000101011110001001100001)))
(assert (= z (fp #b0 #b00101101101 #b0001001110011000101010010001000111001010111010100111)))
(assert (= r (fp #b0 #b11101010111 #b0100110001111111110101110111000011010011111101111011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
