(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.88683878973473095896906670532189309597015380859375p-742 {- 3993966842987036 -742 (-8.15601e-224)}
; Y = 1.6064037763769245525935502882930450141429901123046875p-40 {+ 2730999821327179 -40 (1.46102e-012)}
; Z = 1.302345214814591312091351937851868569850921630859375p-552 {+ 1361641796776246 -552 (8.83423e-167)}
; -1.88683878973473095896906670532189309597015380859375p-742 x 1.6064037763769245525935502882930450141429901123046875p-40 1.302345214814591312091351937851868569850921630859375p-552 == 1.3023452148145910900467470128205604851245880126953125p-552
; [HW: 1.3023452148145910900467470128205604851245880126953125p-552] 

; mpf : + 1361641796776245 -552
; mpfd: + 1361641796776245 -552 (8.83423e-167) class: Pos. norm. non-zero
; hwf : + 1361641796776245 -552 (8.83423e-167) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100011001 #b1110001100000111110111011110111010111100001000011100)))
(assert (= y (fp #b0 #b01111010111 #b1001101100111101010001110010001110110101101101001011)))
(assert (= z (fp #b0 #b00111010111 #b0100110101100110011111101111100110111011000100110110)))
(assert (= r (fp #b0 #b00111010111 #b0100110101100110011111101111100110111011000100110101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
