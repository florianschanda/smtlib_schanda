(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.13154455910272400132043912890367209911346435546875p533 {+ 592424027357644 533 (3.1817e+160)}
; Y = 1.8317833463801227456002607141272164881229400634765625p-131 {+ 3746019168810505 -131 (6.72891e-040)}
; Z = 1.5478449180701383536273851859732531011104583740234375p-276 {+ 2467274168877495 -276 (1.27482e-083)}
; 1.13154455910272400132043912890367209911346435546875p533 x 1.8317833463801227456002607141272164881229400634765625p-131 1.5478449180701383536273851859732531011104583740234375p-276 == 1.0363722395257040087557243168703280389308929443359375p403
; [HW: 1.0363722395257040087557243168703280389308929443359375p403] 

; mpf : + 163806004374591 403
; mpfd: + 163806004374591 403 (2.14094e+121) class: Pos. norm. non-zero
; hwf : + 163806004374591 403 (2.14094e+121) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000010100 #b0010000110101100111001110111101101010000000111001100)))
(assert (= y (fp #b0 #b01101111100 #b1101010011101111110000001101111000001111011000001001)))
(assert (= z (fp #b0 #b01011101011 #b1000110000111111100100001000011001100100000110110111)))
(assert (= r (fp #b0 #b10110010010 #b0000100101001111101100001110101100111110110000111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
