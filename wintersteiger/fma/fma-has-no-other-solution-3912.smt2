(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3912444448938663388304348700330592691898345947265625p-229 {+ 1762008336234793 -229 (1.61263e-069)}
; Y = 1.29304313062884990159773224149830639362335205078125p-471 {+ 1319748933903572 -471 (2.12073e-142)}
; Z = -1.7641391229733429657500209941645152866840362548828125p-899 {- 3441376669481965 -899 (-4.17414e-271)}
; 1.3912444448938663388304348700330592691898345947265625p-229 x 1.29304313062884990159773224149830639362335205078125p-471 -1.7641391229733429657500209941645152866840362548828125p-899 == 1.7989390724955611755575546339969150722026824951171875p-700
; [HW: 1.7989390724955611755575546339969150722026824951171875p-700] 

; mpf : + 3598101709182739 -700
; mpfd: + 3598101709182739 -700 (3.41995e-211) class: Pos. norm. non-zero
; hwf : + 3598101709182739 -700 (3.41995e-211) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100011010 #b0110010000101000100110001000111110001111100100101001)))
(assert (= y (fp #b0 #b01000101000 #b0100101100000100110111111110011001011110010011010100)))
(assert (= z (fp #b1 #b00001111100 #b1100001110011110100111110001111011000011101111101101)))
(assert (= r (fp #b0 #b00101000011 #b1100110010000111010001010110001111011101011100010011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
