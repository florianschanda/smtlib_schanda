(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.18257811126393885814422901603393256664276123046875p520 {- 822258713854284 520 (-4.05908e+156)}
; Y = 1.2682761187463660323970771059975959360599517822265625p-420 {+ 1208208228418537 -420 (4.68399e-127)}
; Z = -1.2936043621158062055798154688091017305850982666015625p-912 {- 1322276495819097 -912 (-3.73633e-275)}
; -1.18257811126393885814422901603393256664276123046875p520 x 1.2682761187463660323970771059975959360599517822265625p-420 -1.2936043621158062055798154688091017305850982666015625p-912 == -1.4998355770682365584178796780179254710674285888671875p100
; [HW: -1.4998355770682365584178796780179254710674285888671875p100] 

; mpf : - 2251059318631027 100
; mpfd: - 2251059318631027 100 (-1.90127e+030) class: Neg. norm. non-zero
; hwf : - 2251059318631027 100 (-1.90127e+030) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000000111 #b0010111010111101011100000110100011011000000101001100)))
(assert (= y (fp #b0 #b01001011011 #b0100010010101101101111100110010001010000001111101001)))
(assert (= z (fp #b1 #b00001101111 #b0100101100101001101001111100110101000000000101011001)))
(assert (= r (fp #b1 #b10001100011 #b0111111111110101001110010111000011100010101001110011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
