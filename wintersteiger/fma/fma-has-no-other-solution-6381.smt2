(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.550932379654050397022047036443836987018585205078125p105 {- 2481178859716322 105 (-6.29133e+031)}
; Y = 1.7194252945448964542407566113979555666446685791015625p-126 {+ 3240003488433305 -126 (2.02117e-038)}
; Z = -1.055927128105919710066018524230457842350006103515625p241 {- 251873393297722 241 (-3.73132e+072)}
; -1.550932379654050397022047036443836987018585205078125p105 x 1.7194252945448964542407566113979555666446685791015625p-126 -1.055927128105919710066018524230457842350006103515625p241 == -1.055927128105919710066018524230457842350006103515625p241
; [HW: -1.055927128105919710066018524230457842350006103515625p241] 

; mpf : - 251873393297722 241
; mpfd: - 251873393297722 241 (-3.73132e+072) class: Neg. norm. non-zero
; hwf : - 251873393297722 241 (-3.73132e+072) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001101000 #b1000110100001001111001111000100011101011111011100010)))
(assert (= y (fp #b0 #b01110000001 #b1011100000101100010000011000111111111100010010011001)))
(assert (= z (fp #b1 #b10011110000 #b0000111001010001001111011000001000101100100100111010)))
(assert (= r (fp #b1 #b10011110000 #b0000111001010001001111011000001000101100100100111010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
