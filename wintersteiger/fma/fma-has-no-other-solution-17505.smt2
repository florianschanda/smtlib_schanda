(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.06262731327877180120822231401689350605010986328125p642 {- 282048344745492 642 (-1.93927e+193)}
; Y = -1.476756332130671811597721898579038679599761962890625p-59 {- 2147119639730218 -59 (-2.56176e-018)}
; Z = -1.60778991221563760660728803486563265323638916015625p-43 {- 2737242422173892 -43 (-1.82785e-013)}
; -1.06262731327877180120822231401689350605010986328125p642 x -1.476756332130671811597721898579038679599761962890625p-59 -1.60778991221563760660728803486563265323638916015625p-43 == 1.569241613579429373004359149490483105182647705078125p583
; [HW: 1.569241613579429373004359149490483105182647705078125p583] 

; mpf : + 2563636318800098 583
; mpfd: + 2563636318800098 583 (4.96795e+175) class: Pos. norm. non-zero
; hwf : + 2563636318800098 583 (4.96795e+175) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010000001 #b0001000000001000010101111111011001011110011000010100)))
(assert (= y (fp #b1 #b01111000100 #b0111101000001100101100111111011010101001100000101010)))
(assert (= z (fp #b1 #b01111010100 #b1001101110011000000111101010001111001110000011000100)))
(assert (= r (fp #b0 #b11001000110 #b1001000110111001110100011000000111011000100011100010)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
