(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.669936886753049076759225499699823558330535888671875p-176 {+ 3017127513542782 -176 (1.7435e-053)}
; Y = -1.1580940060289346416055877853068523108959197998046875p872 {- 711992106641419 872 (-3.6467e+262)}
; Z = 1.4176794055266792593528180077555589377880096435546875p697 {+ 1881060815090283 697 (9.32148e+209)}
; 1.669936886753049076759225499699823558330535888671875p-176 x -1.1580940060289346416055877853068523108959197998046875p872 1.4176794055266792593528180077555589377880096435546875p697 == 1.8028298241160649606484867035760544240474700927734375p695
; [HW: 1.8028298241160649606484867035760544240474700927734375p695] 

; mpf : + 3615624096731031 695
; mpfd: + 3615624096731031 695 (2.96348e+209) class: Pos. norm. non-zero
; hwf : + 3615624096731031 695 (2.96348e+209) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001111 #b1010101110000000111110111101101011111101000001111110)))
(assert (= y (fp #b1 #b11101100111 #b0010100001111000110110010100100110010110100000001011)))
(assert (= z (fp #b0 #b11010111000 #b0110101011101101000010011001101011110011001001101011)))
(assert (= r (fp #b0 #b11010110110 #b1100110110000110010000010101111011010100111110010111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
