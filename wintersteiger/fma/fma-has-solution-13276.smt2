(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1138096588079215987221459727152250707149505615234375p543 {+ 512553136998519 543 (3.207e+163)}
; Y = -0.6183595496888829590176328565576113760471343994140625p-1022 {- 2784843837559841 -1023 (-1.3759e-308)}
; Z = 1.042237483909096429357532542780973017215728759765625p-11 {+ 190220716794074 -11 (0.000508905)}
; 1.1138096588079215987221459727152250707149505615234375p543 x -0.6183595496888829590176328565576113760471343994140625p-1022 1.042237483909096429357532542780973017215728759765625p-11 == 1.0422374839090962073129276177496649324893951416015625p-11
; [HW: 1.0422374839090962073129276177496649324893951416015625p-11] 

; mpf : + 190220716794073 -11
; mpfd: + 190220716794073 -11 (0.000508905) class: Pos. norm. non-zero
; hwf : + 190220716794073 -11 (0.000508905) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000011110 #b0001110100100010101000010011101010001100100001110111)))
(assert (= y (fp #b1 #b00000000000 #b1001111001001100110011111011101100010101010000100001)))
(assert (= z (fp #b0 #b01111110100 #b0000101011010000000100110110010000001110000011011010)))
(assert (= r (fp #b0 #b01111110100 #b0000101011010000000100110110010000001110000011011001)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
