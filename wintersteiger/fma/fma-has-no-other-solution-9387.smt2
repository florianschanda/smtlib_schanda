(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.870238405687646210395769230672158300876617431640625p660 {- 3919205359578378 660 (-8.94734e+198)}
; Y = -1.652291802195255510099514140165410935878753662109375p-667 {- 2937661117303382 -667 (-2.69823e-201)}
; Z = -1.5759644930157754583177620588685385882854461669921875p-800 {- 2593913476124483 -800 (-2.36347e-241)}
; -1.870238405687646210395769230672158300876617431640625p660 x -1.652291802195255510099514140165410935878753662109375p-667 -1.5759644930157754583177620588685385882854461669921875p-800 == 1.545089792934211114783238372183404862880706787109375p-6
; [HW: 1.545089792934211114783238372183404862880706787109375p-6] 

; mpf : + 2454866188341974 -6
; mpfd: + 2454866188341974 -6 (0.024142) class: Pos. norm. non-zero
; hwf : + 2454866188341974 -6 (0.024142) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010010011 #b1101111011000111111100011011010000100110110100001010)))
(assert (= y (fp #b1 #b00101100100 #b1010011011111100100110000111010111100000101001010110)))
(assert (= z (fp #b1 #b00011011111 #b1001001101110010011010001011010100101000111101000011)))
(assert (= r (fp #b0 #b01111111001 #b1000101110001011000000010011001000001001001011010110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
