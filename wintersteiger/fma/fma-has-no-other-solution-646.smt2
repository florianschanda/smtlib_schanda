(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.833441043779864276785929178004153072834014892578125p-730 {+ 3753484774202274 -730 (3.24616e-220)}
; Y = 1.1804395074319964376030611674650572240352630615234375p1 {+ 812627298433655 1 (2.36088)}
; Z = -1.5922728446835685556237649507238529622554779052734375p-213 {- 2667359762618583 -213 (-1.20956e-064)}
; 1.833441043779864276785929178004153072834014892578125p-730 x 1.1804395074319964376030611674650572240352630615234375p1 -1.5922728446835685556237649507238529622554779052734375p-213 == -1.592272844683568333579160025692544877529144287109375p-213
; [HW: -1.592272844683568333579160025692544877529144287109375p-213] 

; mpf : - 2667359762618582 -213
; mpfd: - 2667359762618582 -213 (-1.20956e-064) class: Neg. norm. non-zero
; hwf : - 2667359762618582 -213 (-1.20956e-064) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100100101 #b1101010101011100011001000110101000101101101110100010)))
(assert (= y (fp #b0 #b10000000000 #b0010111000110001010010001001011101010011101001110111)))
(assert (= z (fp #b1 #b01100101010 #b1001011110011111001100010111001000111001100011010111)))
(assert (= r (fp #b1 #b01100101010 #b1001011110011111001100010111001000111001100011010110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
