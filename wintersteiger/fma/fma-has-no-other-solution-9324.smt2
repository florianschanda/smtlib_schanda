(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0879304123153497041442960835411213338375091552734375p-987 {- 396003372137943 -987 (-8.31755e-298)}
; Y = 1.918933366627926684344629393308423459529876708984375p985 {+ 4138507967523846 985 (6.27488e+296)}
; Z = -1.0929396969595079891490740919834934175014495849609375p55 {- 418563184594767 55 (-3.93773e+016)}
; -1.0879304123153497041442960835411213338375091552734375p-987 x 1.918933366627926684344629393308423459529876708984375p985 -1.0929396969595079891490740919834934175014495849609375p55 == -1.092939696959508211193679017014801502227783203125p55
; [HW: -1.092939696959508211193679017014801502227783203125p55] 

; mpf : - 418563184594768 55
; mpfd: - 418563184594768 55 (-3.93773e+016) class: Neg. norm. non-zero
; hwf : - 418563184594768 55 (-3.93773e+016) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000100100 #b0001011010000010100110111000010100110111110111010111)))
(assert (= y (fp #b0 #b11111011000 #b1110101100111111001101111001010011011110110000000110)))
(assert (= z (fp #b1 #b10000110110 #b0001011111001010111001010101111011110000111101001111)))
(assert (= r (fp #b1 #b10000110110 #b0001011111001010111001010101111011110000111101010000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
