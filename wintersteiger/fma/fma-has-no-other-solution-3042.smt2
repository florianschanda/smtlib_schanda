(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7568555455088878947123021134757436811923980712890625p582 {- 3408574352727121 582 (-2.78095e+175)}
; Y = 1.92825038591046382663307667826302349567413330078125p709 {+ 4180468092092884 709 (5.19314e+213)}
; Z = 1.5464390771125910983840867629623971879482269287109375p-435 {+ 2460942824064943 -435 (1.74295e-131)}
; -1.7568555455088878947123021134757436811923980712890625p582 x 1.92825038591046382663307667826302349567413330078125p709 1.5464390771125910983840867629623971879482269287109375p-435 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001000101 #b1100000111000001010010001111011111000001110001010001)))
(assert (= y (fp #b0 #b11011000100 #b1110110110100001110100010011100111111100000111010100)))
(assert (= z (fp #b0 #b01001001100 #b1000101111100011011011100110110101110100011110101111)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
