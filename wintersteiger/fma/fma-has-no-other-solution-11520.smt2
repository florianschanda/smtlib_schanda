(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.609924873452099891579791801632381975650787353515625p-59 {+ 2746857432802874 -59 (2.79277e-018)}
; Y = 1.49358397455862412783744730404578149318695068359375p-50 {+ 2222904603898268 -50 (1.32657e-015)}
; Z = -1.2271168706965325245761277983547188341617584228515625p-768 {- 1022843454238457 -768 (-7.90404e-232)}
; 1.609924873452099891579791801632381975650787353515625p-59 x 1.49358397455862412783744730404578149318695068359375p-50 -1.2271168706965325245761277983547188341617584228515625p-768 == 1.2022789956156885171623116548289544880390167236328125p-108
; [HW: 1.2022789956156885171623116548289544880390167236328125p-108] 

; mpf : + 910983609279693 -108
; mpfd: + 910983609279693 -108 (3.70481e-033) class: Pos. norm. non-zero
; hwf : + 910983609279693 -108 (3.70481e-033) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000100 #b1001110000100100000010010101100001111110011000111010)))
(assert (= y (fp #b0 #b01111001101 #b0111111001011011100001001111010010001111000110011100)))
(assert (= z (fp #b1 #b00011111111 #b0011101000100100010101001100110000000010111011111001)))
(assert (= r (fp #b0 #b01110010011 #b0011001111001000100011100110011011010110010011001101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
