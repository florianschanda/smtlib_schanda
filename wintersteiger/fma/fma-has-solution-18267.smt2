(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.756901878849348452860112956841476261615753173828125p-169 {+ 3408783019541954 -169 (2.34789e-051)}
; Y = 1.8898409019234596595282482667244039475917816162109375p-483 {+ 4007487154321519 -483 (7.56724e-146)}
; Z = 1.2205311908208151816523923116619698703289031982421875p697 {+ 993184188804195 697 (8.0252e+209)}
; 1.756901878849348452860112956841476261615753173828125p-169 x 1.8898409019234596595282482667244039475917816162109375p-483 1.2205311908208151816523923116619698703289031982421875p697 == 1.2205311908208151816523923116619698703289031982421875p697
; [HW: 1.2205311908208151816523923116619698703289031982421875p697] 

; mpf : + 993184188804195 697
; mpfd: + 993184188804195 697 (8.0252e+209) class: Pos. norm. non-zero
; hwf : + 993184188804195 697 (8.0252e+209) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101010110 #b1100000111000100010100100100111111110000010111000010)))
(assert (= y (fp #b0 #b01000011100 #b1110001111001100100111010000010001100111100001101111)))
(assert (= z (fp #b0 #b11010111000 #b0011100001110100101110110110110001010010110001100011)))
(assert (= r (fp #b0 #b11010111000 #b0011100001110100101110110110110001010010110001100011)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
