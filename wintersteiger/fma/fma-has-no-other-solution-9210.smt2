(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5014083220480867186807927282643504440784454345703125p-835 {- 2258142332336229 -835 (-6.55319e-252)}
; Y = -1.2489819884998769605743973443168215453624725341796875p-62 {- 1121315190630011 -62 (-2.7083e-019)}
; Z = -1.0834917876613412435204963912838138639926910400390625p-449 {- 376013583800113 -449 (-7.45345e-136)}
; -1.5014083220480867186807927282643504440784454345703125p-835 x -1.2489819884998769605743973443168215453624725341796875p-62 -1.0834917876613412435204963912838138639926910400390625p-449 == -1.0834917876613412435204963912838138639926910400390625p-449
; [HW: -1.0834917876613412435204963912838138639926910400390625p-449] 

; mpf : - 376013583800113 -449
; mpfd: - 376013583800113 -449 (-7.45345e-136) class: Neg. norm. non-zero
; hwf : - 376013583800113 -449 (-7.45345e-136) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010111100 #b1000000001011100010010111011100100100011100001100101)))
(assert (= y (fp #b1 #b01111000001 #b0011111110111101010010001001100111100110011001111011)))
(assert (= z (fp #b1 #b01000111110 #b0001010101011111101101111100000101111101011100110001)))
(assert (= r (fp #b1 #b01000111110 #b0001010101011111101101111100000101111101011100110001)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
