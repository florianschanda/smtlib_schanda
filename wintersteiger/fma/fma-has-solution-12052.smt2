(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2547662344340384521501619019545614719390869140625p-192 {+ 1147365118463720 -192 (1.99896e-058)}
; Y = -1.5412742663523406605463605956174433231353759765625p-896 {- 2437682584249640 -896 (-2.91745e-270)}
; Z = -1.5770618775762692553854549259995110332965850830078125p855 {- 2598855656822205 855 (-3.78874e+257)}
; 1.2547662344340384521501619019545614719390869140625p-192 x -1.5412742663523406605463605956174433231353759765625p-896 -1.5770618775762692553854549259995110332965850830078125p855 == -1.5770618775762692553854549259995110332965850830078125p855
; [HW: -1.5770618775762692553854549259995110332965850830078125p855] 

; mpf : - 2598855656822205 855
; mpfd: - 2598855656822205 855 (-3.78874e+257) class: Neg. norm. non-zero
; hwf : - 2598855656822205 855 (-3.78874e+257) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100111111 #b0100000100111000010111000010010100000100111011101000)))
(assert (= y (fp #b1 #b00001111111 #b1000101010010000111100110100100000100110010100101000)))
(assert (= z (fp #b1 #b11101010110 #b1001001110111010010100111100001111110101010110111101)))
(assert (= r (fp #b1 #b11101010110 #b1001001110111010010100111100001111110101010110111101)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
