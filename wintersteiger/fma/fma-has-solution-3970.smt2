(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6505463135727183043854893185198307037353515625p-817 {- 2929800135393344 -817 (-1.88852e-246)}
; Y = -1.1189364382536586273175771566457115113735198974609375p573 {- 535642098999951 573 (-3.45934e+172)}
; Z = -1.4970352762300180859966758362133987247943878173828125p753 {- 2238447884819501 753 (-7.09282e+226)}
; -1.6505463135727183043854893185198307037353515625p-817 x -1.1189364382536586273175771566457115113735198974609375p573 -1.4970352762300180859966758362133987247943878173828125p753 == -1.49703527623001786395207091118209064006805419921875p753
; [HW: -1.49703527623001786395207091118209064006805419921875p753] 

; mpf : - 2238447884819500 753
; mpfd: - 2238447884819500 753 (-7.09282e+226) class: Neg. norm. non-zero
; hwf : - 2238447884819500 753 (-7.09282e+226) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011001110 #b1010011010001010001101000000010101010100000001000000)))
(assert (= y (fp #b1 #b11000111100 #b0001111001110010100111100101000010011010001010001111)))
(assert (= z (fp #b1 #b11011110000 #b0111111100111101101101000011000001011101110000101101)))
(assert (= r (fp #b1 #b11011110000 #b0111111100111101101101000011000001011101110000101100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
