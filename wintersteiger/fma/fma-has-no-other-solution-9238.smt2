(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.29532783234351445145193792995996773242950439453125p-223 {- 1330038315694388 -223 (-9.60928e-068)}
; Y = -1.9089982020523577066484222086728550493717193603515625p898 {- 4093763964043449 898 (-4.03405e+270)}
; Z = -1.4664010287883335603709156202967278659343719482421875p614 {- 2100483499456355 614 (-9.96942e+184)}
; -1.29532783234351445145193792995996773242950439453125p-223 x -1.9089982020523577066484222086728550493717193603515625p898 -1.4664010287883335603709156202967278659343719482421875p614 == 1.236389251506073261310802990919910371303558349609375p676
; [HW: 1.236389251506073261310802990919910371303558349609375p676] 

; mpf : + 1064602544997142 676
; mpfd: + 1064602544997142 676 (3.87643e+203) class: Pos. norm. non-zero
; hwf : + 1064602544997142 676 (3.87643e+203) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100100000 #b0100101110011010100110101101010110000011100100110100)))
(assert (= y (fp #b1 #b11110000001 #b1110100010110100000110110010110111110000000010111001)))
(assert (= z (fp #b1 #b11001100101 #b0111011101100110000011101100110101110111011101100011)))
(assert (= r (fp #b0 #b11010100011 #b0011110010000100000000011000100001011000001100010110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
