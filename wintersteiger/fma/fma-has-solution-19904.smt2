(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.64960959677602314599198507494293153285980224609375p293 {+ 2925581537976796 293 (2.62525e+088)}
; Y = 1.5967267841829777541562407350284047424793243408203125p171 {+ 2687418522888453 171 (4.77925e+051)}
; Z = 1.8472351814388563440161306061781942844390869140625p-732 {+ 3815608047423208 -732 (8.17646e-221)}
; 1.64960959677602314599198507494293153285980224609375p293 x 1.5967267841829777541562407350284047424793243408203125p171 1.8472351814388563440161306061781942844390869140625p-732 == 1.3169879133087789568890002556145191192626953125p465
; [HW: 1.3169879133087789568890002556145191192626953125p465] 

; mpf : + 1427586648258368 465
; mpfd: + 1427586648258368 465 (1.25467e+140) class: Pos. norm. non-zero
; hwf : + 1427586648258368 465 (1.25467e+140) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100100100 #b1010011001001100110100001000010101010010000111011100)))
(assert (= y (fp #b0 #b10010101010 #b1001100011000011000101100010011010110110100100000101)))
(assert (= z (fp #b0 #b00100100011 #b1101100011100100011001111010010001001100111011101000)))
(assert (= r (fp #b0 #b10111010000 #b0101000100100110000111101011000011100011011101000000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
