(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.302812770973983180766708755982108414173126220703125p840 {- 1363747482521458 840 (-9.55165e+252)}
; Y = 1.47548544394651859334999244310893118381500244140625p-458 {+ 2141396068177636 -458 (1.98243e-138)}
; Z = -1.1883878234304721122072123762336559593677520751953125p-7 {- 848423331402613 -7 (-0.00928428)}
; -1.302812770973983180766708755982108414173126220703125p840 x 1.47548544394651859334999244310893118381500244140625p-458 -1.1883878234304721122072123762336559593677520751953125p-7 == -1.9222812797597417233674832459655590355396270751953125p382
; [HW: -1.9222812797597417233674832459655590355396270751953125p382] 

; mpf : - 4153585627856757 382
; mpfd: - 4153585627856757 382 (-1.89354e+115) class: Neg. norm. non-zero
; hwf : - 4153585627856757 382 (-1.89354e+115) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000111 #b0100110110000101001000110100010000100100111101110010)))
(assert (= y (fp #b0 #b01000110101 #b0111100110111001011010011111111101111001011011100100)))
(assert (= z (fp #b1 #b01111111000 #b0011000000111010001011110011010010011001001101110101)))
(assert (= r (fp #b1 #b10101111101 #b1110110000011010101000000011111001000111111101110101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
