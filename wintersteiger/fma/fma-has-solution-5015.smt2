(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6403851635214128368289721038308925926685333251953125p954 {+ 2884038383808629 954 (2.49782e+287)}
; Y = -1.174685304521639661601284387870691716670989990234375p-707 {- 786712672350758 -707 (-1.74468e-213)}
; Z = 1.9545972848341579553022029358544386923313140869140625p-922 {+ 4299123976268001 -922 (5.51317e-278)}
; 1.6403851635214128368289721038308925926685333251953125p954 x -1.174685304521639661601284387870691716670989990234375p-707 1.9545972848341579553022029358544386923313140869140625p-922 == -1.926936345343930323537051663151942193508148193359375p247
; [HW: -1.926936345343930323537051663151942193508148193359375p247] 

; mpf : - 4174550179487094 247
; mpfd: - 4174550179487094 247 (-4.35789e+074) class: Neg. norm. non-zero
; hwf : - 4174550179487094 247 (-4.35789e+074) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110111001 #b1010001111110000010010000011011000101011000001110101)))
(assert (= y (fp #b1 #b00100111100 #b0010110010111000001011010001011000000011001000100110)))
(assert (= z (fp #b0 #b00001100101 #b1111010001100000011111001101011100110110100011100001)))
(assert (= r (fp #b1 #b10011110110 #b1110110101001011101100110100100010111001110101110110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
