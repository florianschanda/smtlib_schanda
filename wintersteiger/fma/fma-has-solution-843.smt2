(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9187297113704444573301088894368149340152740478515625p-69 {- 4137590785782137 -69 (-3.25045e-021)}
; Y = -1.7906525754529474259157950655207969248294830322265625p-146 {- 3560782644189417 -146 (-2.00739e-044)}
; Z = 1.991335191332217480209010318503715097904205322265625p624 {+ 4464576798283034 624 (1.38631e+188)}
; -1.9187297113704444573301088894368149340152740478515625p-69 x -1.7906525754529474259157950655207969248294830322265625p-146 1.991335191332217480209010318503715097904205322265625p624 == 1.9913351913322177022536152435350231826305389404296875p624
; [HW: 1.9913351913322177022536152435350231826305389404296875p624] 

; mpf : + 4464576798283035 624
; mpfd: + 4464576798283035 624 (1.38631e+188) class: Pos. norm. non-zero
; hwf : + 4464576798283035 624 (1.38631e+188) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110111010 #b1110101100110001110111101101000000110011000101111001)))
(assert (= y (fp #b1 #b01101101101 #b1100101001101000001101010000101000010001100011101001)))
(assert (= z (fp #b0 #b11001101111 #b1111110111001000001001001010001000100101010100011010)))
(assert (= r (fp #b0 #b11001101111 #b1111110111001000001001001010001000100101010100011011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
