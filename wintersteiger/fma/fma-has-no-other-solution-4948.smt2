(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2287901054972485415106575601384975016117095947265625p-293 {- 1030379033863465 -293 (-7.72127e-089)}
; Y = -1.7345753247753743497838740950101055204868316650390625p-502 {- 3308233158933937 -502 (-1.32475e-151)}
; Z = -1.973276687001653595388006579014472663402557373046875p1015 {- 4383248524909038 1015 (-6.92841e+305)}
; -1.2287901054972485415106575601384975016117095947265625p-293 x -1.7345753247753743497838740950101055204868316650390625p-502 -1.973276687001653595388006579014472663402557373046875p1015 == -1.973276687001653595388006579014472663402557373046875p1015
; [HW: -1.973276687001653595388006579014472663402557373046875p1015] 

; mpf : - 4383248524909038 1015
; mpfd: - 4383248524909038 1015 (-6.92841e+305) class: Neg. norm. non-zero
; hwf : - 4383248524909038 1015 (-6.92841e+305) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011010 #b0011101010010001111111010000010011000010010100101001)))
(assert (= y (fp #b1 #b01000001001 #b1011110000001101001000001110010001011011110110110001)))
(assert (= z (fp #b1 #b11111110110 #b1111100100101000101010010011010010100001100111101110)))
(assert (= r (fp #b1 #b11111110110 #b1111100100101000101010010011010010100001100111101110)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
