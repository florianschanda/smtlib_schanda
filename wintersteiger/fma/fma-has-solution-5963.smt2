(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.372380478716650031856261193752288818359375p589 {- 1677052585188352 589 (-2.78062e+177)}
; Y = 1.9457227300113844048468081382452510297298431396484375p-864 {+ 4259156534475079 -864 (1.58185e-260)}
; Z = -1.6196698737197987583158464985899627208709716796875p-1022 {- 2790745012377208 -1022 (-3.60389e-308)}
; -1.372380478716650031856261193752288818359375p589 x 1.9457227300113844048468081382452510297298431396484375p-864 -1.6196698737197987583158464985899627208709716796875p-1022 == -1.3351359458314455697092171249096281826496124267578125p-274
; [HW: -1.3351359458314455697092171249096281826496124267578125p-274] 

; mpf : - 1509318120764957 -274
; mpfd: - 1509318120764957 -274 (-4.39852e-083) class: Neg. norm. non-zero
; hwf : - 1509318120764957 -274 (-4.39852e-083) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001001100 #b0101111101010100010100111011100111000001110000000000)))
(assert (= y (fp #b0 #b00010011111 #b1111001000011010111000101000010001111011100101000111)))
(assert (= z (fp #b1 #b00000000001 #b1001111010100010101011110101000111110001011001111000)))
(assert (= r (fp #b1 #b01011101101 #b0101010111001011011110000010011100001111011000011101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
