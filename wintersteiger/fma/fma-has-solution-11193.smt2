(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7091004726951506409449166312697343528270721435546875p940 {+ 3193504624598123 940 (1.58841e+283)}
; Y = -1.9274066543017529529180364988860674202442169189453125p348 {- 4176668262734293 348 (-1.10513e+105)}
; Z = 1.6395378191582370419610015233047306537628173828125p741 {+ 2880222284050376 741 (1.89648e+223)}
; 1.7091004726951506409449166312697343528270721435546875p940 x -1.9274066543017529529180364988860674202442169189453125p348 1.6395378191582370419610015233047306537628173828125p741 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110101011 #b1011010110000111100110111100101111001101110001101011)))
(assert (= y (fp #b1 #b10101011011 #b1110110101101010100001011100001001010001100111010101)))
(assert (= z (fp #b0 #b11011100100 #b1010001110111000110000000010000111010110111111001000)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
