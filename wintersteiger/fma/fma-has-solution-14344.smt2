(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.464318743536708655739175810595043003559112548828125p-631 {- 2091105720373058 -631 (-1.64327e-190)}
; Y = 1.667898589701306999444341272464953362941741943359375p-492 {+ 3007947839700086 -492 (1.3044e-148)}
; Z = -1.7594522754661465757664018383366055786609649658203125p704 {- 3420268984795013 704 (-1.48079e+212)}
; -1.464318743536708655739175810595043003559112548828125p-631 x 1.667898589701306999444341272464953362941741943359375p-492 -1.7594522754661465757664018383366055786609649658203125p704 == -1.7594522754661465757664018383366055786609649658203125p704
; [HW: -1.7594522754661465757664018383366055786609649658203125p704] 

; mpf : - 3420268984795013 704
; mpfd: - 3420268984795013 704 (-1.48079e+212) class: Neg. norm. non-zero
; hwf : - 3420268984795013 704 (-1.48079e+212) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110001000 #b0111011011011101100101111101101001101000111101000010)))
(assert (= y (fp #b0 #b01000010011 #b1010101011111011011001101110011111001111110001110110)))
(assert (= z (fp #b1 #b11010111111 #b1100001001101011011101101101110111111111111110000101)))
(assert (= r (fp #b1 #b11010111111 #b1100001001101011011101101101110111111111111110000101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
