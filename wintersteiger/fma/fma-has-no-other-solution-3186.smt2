(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9785387615384253390260482774465344846248626708984375p882 {+ 4406946801832039 882 (6.37971e+265)}
; Y = 1.4669633124357848164009965330478735268115997314453125p-755 {+ 2103015799881493 -755 (7.74056e-228)}
; Z = 1.821666234226863689826814152183942496776580810546875p946 {+ 3700455746287022 946 (1.08354e+285)}
; 1.9785387615384253390260482774465344846248626708984375p882 x 1.4669633124357848164009965330478735268115997314453125p-755 1.821666234226863689826814152183942496776580810546875p946 == 1.821666234226863689826814152183942496776580810546875p946
; [HW: 1.821666234226863689826814152183942496776580810546875p946] 

; mpf : + 3700455746287022 946
; mpfd: + 3700455746287022 946 (1.08354e+285) class: Pos. norm. non-zero
; hwf : + 3700455746287022 946 (1.08354e+285) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101110001 #b1111101010000001100001000010101010101101000001100111)))
(assert (= y (fp #b0 #b00100001100 #b0111011110001010111010000101101101010111111100010101)))
(assert (= z (fp #b0 #b11110110001 #b1101001001011000101101111110010000111011010110101110)))
(assert (= r (fp #b0 #b11110110001 #b1101001001011000101101111110010000111011010110101110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
