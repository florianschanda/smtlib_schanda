(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6577435530708257704901598117430694401264190673828125p975 {- 2962213620515117 975 (-5.29375e+293)}
; Y = -1.285277027813604089345744796446524560451507568359375p-692 {- 1284773516158710 -692 (-6.25518e-209)}
; Z = -1.308838449121865199487046993453986942768096923828125p-410 {- 1390884724382914 -410 (-4.9498e-124)}
; -1.6577435530708257704901598117430694401264190673828125p975 x -1.285277027813604089345744796446524560451507568359375p-692 -1.308838449121865199487046993453986942768096923828125p-410 == 1.0653298533840172002129520478774793446063995361328125p284
; [HW: 1.0653298533840172002129520478774793446063995361328125p284] 

; mpf : + 294219503356429 284
; mpfd: + 294219503356429 284 (3.31133e+085) class: Pos. norm. non-zero
; hwf : + 294219503356429 284 (3.31133e+085) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111001110 #b1010100001100001111000011010100110011000000100101101)))
(assert (= y (fp #b1 #b00101001011 #b0100100100000111111010100101000011000010011011110110)))
(assert (= z (fp #b1 #b01001100101 #b0100111100010000000010010101111010111001110011000010)))
(assert (= r (fp #b0 #b10100011011 #b0001000010111001011101010000111110111100101000001101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
