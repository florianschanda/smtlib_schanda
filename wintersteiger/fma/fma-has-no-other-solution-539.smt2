(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.86007914050405798178644545259885489940643310546875p624 {- 3873452096683212 624 (-1.29494e+188)}
; Y = -1.5491226439141303483637557292240671813488006591796875p-39 {- 2473028534512379 -39 (-2.81784e-012)}
; Z = 1.0801053307641728107313383588916622102260589599609375p-675 {+ 360762337779919 -675 (6.89e-204)}
; -1.86007914050405798178644545259885489940643310546875p624 x -1.5491226439141303483637557292240671813488006591796875p-39 1.0801053307641728107313383588916622102260589599609375p-675 == 1.4407453580135847204246601904742419719696044921875p586
; [HW: 1.4407453580135847204246601904742419719696044921875p586] 

; mpf : + 1984940630115256 586
; mpfd: + 1984940630115256 586 (3.64892e+176) class: Pos. norm. non-zero
; hwf : + 1984940630115256 586 (3.64892e+176) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001101111 #b1101110000101110001001011000010001101111110011001100)))
(assert (= y (fp #b1 #b01111011000 #b1000110010010011010011010011010100011010101011111011)))
(assert (= z (fp #b0 #b00101011100 #b0001010010000001110010000110111111011110000011001111)))
(assert (= r (fp #b0 #b11001001001 #b0111000011010100101100000001001010001000001110111000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
