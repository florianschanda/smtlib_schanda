(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.519741262001365722511536660022102296352386474609375p-221 {+ 2340706553878422 -221 (4.50963e-067)}
; Y = 1.3199228863069960571152705597341991961002349853515625p-927 {+ 1440804591559481 -927 (1.16344e-279)}
; Z = 1.014993125712467136878558449097909033298492431640625p735 {+ 67523035371786 735 (1.83447e+221)}
; 1.519741262001365722511536660022102296352386474609375p-221 x 1.3199228863069960571152705597341991961002349853515625p-927 1.014993125712467136878558449097909033298492431640625p735 == 1.014993125712467136878558449097909033298492431640625p735
; [HW: 1.014993125712467136878558449097909033298492431640625p735] 

; mpf : + 67523035371786 735
; mpfd: + 67523035371786 735 (1.83447e+221) class: Pos. norm. non-zero
; hwf : + 67523035371786 735 (1.83447e+221) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100100010 #b1000010100001101110000110110101010101101011110010110)))
(assert (= y (fp #b0 #b00001100000 #b0101000111100110011101110101110111101110001100111001)))
(assert (= z (fp #b0 #b11011011110 #b0000001111010110100101101110100010011001100100001010)))
(assert (= r (fp #b0 #b11011011110 #b0000001111010110100101101110100010011001100100001010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
