(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.471834207225329205215302863507531583309173583984375p176 {+ 2124952359840646 176 (1.40974e+053)}
; Y = 1.956207983563068797394635112141259014606475830078125p301 {+ 4306377918463330 301 (7.96973e+090)}
; Z = -1.3554393968358355859749053706764243543148040771484375p-732 {- 1600756735142663 -732 (-5.99961e-221)}
; 1.471834207225329205215302863507531583309173583984375p176 x 1.956207983563068797394635112141259014606475830078125p301 -1.3554393968358355859749053706764243543148040771484375p-732 == 1.439606913327704518223981722258031368255615234375p478
; [HW: 1.439606913327704518223981722258031368255615234375p478] 

; mpf : + 1979813531052144 478
; mpfd: + 1979813531052144 478 (1.12352e+144) class: Pos. norm. non-zero
; hwf : + 1979813531052144 478 (1.12352e+144) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010101111 #b0111100011001010001000000110100100101010101110000110)))
(assert (= y (fp #b0 #b10100101100 #b1111010011001010000010111110000110010011110101100010)))
(assert (= z (fp #b1 #b00100100011 #b0101101011111110000100111000100100011110101100000111)))
(assert (= r (fp #b0 #b10111011101 #b0111000010001010000101000010001111010110100001110000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
