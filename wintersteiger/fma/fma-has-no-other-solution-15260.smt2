(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.216884863563402863206874826573766767978668212890625p-138 {+ 976762590726442 -138 (3.49229e-042)}
; Y = 1.9775955227762842536520793146337382495403289794921875p-402 {+ 4402698832094339 -402 (1.91461e-121)}
; Z = -1.0228198918812585471727061303681693971157073974609375p964 {- 102771656573071 964 (-1.59483e+290)}
; 1.216884863563402863206874826573766767978668212890625p-138 x 1.9775955227762842536520793146337382495403289794921875p-402 -1.0228198918812585471727061303681693971157073974609375p964 == -1.022819891881258325128101205336861312389373779296875p964
; [HW: -1.022819891881258325128101205336861312389373779296875p964] 

; mpf : - 102771656573070 964
; mpfd: - 102771656573070 964 (-1.59483e+290) class: Neg. norm. non-zero
; hwf : - 102771656573070 964 (-1.59483e+290) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101110101 #b0011011110000101110001000011010000000000100100101010)))
(assert (= y (fp #b0 #b01001101101 #b1111101001000011101100110011111100001010010010000011)))
(assert (= z (fp #b1 #b11111000011 #b0000010111010111100001100100000101010100000010001111)))
(assert (= r (fp #b1 #b11111000011 #b0000010111010111100001100100000101010100000010001110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
