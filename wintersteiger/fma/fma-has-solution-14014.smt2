(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0360788669735168099350630654953420162200927734375p232 {+ 162484771857880 232 (7.15075e+069)}
; Y = -1.0988123251145942571582736491109244525432586669921875p-432 {- 445011150565699 -432 (-9.90753e-131)}
; Z = -1.623323143686766112381292259669862687587738037109375p422 {- 2807197877639126 422 (-1.75818e+127)}
; 1.0360788669735168099350630654953420162200927734375p232 x -1.0988123251145942571582736491109244525432586669921875p-432 -1.623323143686766112381292259669862687587738037109375p422 == -1.623323143686766112381292259669862687587738037109375p422
; [HW: -1.623323143686766112381292259669862687587738037109375p422] 

; mpf : - 2807197877639126 422
; mpfd: - 2807197877639126 422 (-1.75818e+127) class: Neg. norm. non-zero
; hwf : - 2807197877639126 422 (-1.75818e+127) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011100111 #b0000100100111100011101101111000110111010010111011000)))
(assert (= y (fp #b1 #b01001001111 #b0001100101001011110000111011100011001111000101000011)))
(assert (= z (fp #b1 #b10110100101 #b1001111110010010000110110000010011111001011111010110)))
(assert (= r (fp #b1 #b10110100101 #b1001111110010010000110110000010011111001011111010110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
