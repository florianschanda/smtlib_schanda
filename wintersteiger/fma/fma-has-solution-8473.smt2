(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8135510793289224551472216262482106685638427734375p-958 {- 3663908337712600 -958 (-7.44379e-289)}
; Y = 1.508005021648286092528223889530636370182037353515625p-127 {+ 2287851226197562 -127 (8.86326e-039)}
; Z = -1.569703130531504342570769949816167354583740234375p199 {- 2565714806373488 199 (-1.26121e+060)}
; -1.8135510793289224551472216262482106685638427734375p-958 x 1.508005021648286092528223889530636370182037353515625p-127 -1.569703130531504342570769949816167354583740234375p199 == -1.569703130531504342570769949816167354583740234375p199
; [HW: -1.569703130531504342570769949816167354583740234375p199] 

; mpf : - 2565714806373488 199
; mpfd: - 2565714806373488 199 (-1.26121e+060) class: Neg. norm. non-zero
; hwf : - 2565714806373488 199 (-1.26121e+060) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001000001 #b1101000001000100111000100010111101010111110111011000)))
(assert (= y (fp #b0 #b01110000000 #b1000001000001100100111011111101000101110111000111010)))
(assert (= z (fp #b1 #b10011000110 #b1001000111011000000100000111101000001111110001110000)))
(assert (= r (fp #b1 #b10011000110 #b1001000111011000000100000111101000001111110001110000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
