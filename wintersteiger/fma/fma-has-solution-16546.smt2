(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.844286139367339760752884103567339479923248291015625p-702 {+ 3802326742648826 -702 (8.76539e-212)}
; Y = -1.179922815311167827445615330361761152744293212890625p119 {- 810300323990826 119 (-7.84193e+035)}
; Z = 1.52418341708098470377308331080712378025054931640625p32 {+ 2360712241839716 32 (6.54632e+009)}
; 1.844286139367339760752884103567339479923248291015625p-702 x -1.179922815311167827445615330361761152744293212890625p119 1.52418341708098470377308331080712378025054931640625p32 == 1.52418341708098470377308331080712378025054931640625p32
; [HW: 1.52418341708098470377308331080712378025054931640625p32] 

; mpf : + 2360712241839716 32
; mpfd: + 2360712241839716 32 (6.54632e+009) class: Pos. norm. non-zero
; hwf : + 2360712241839716 32 (6.54632e+009) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101000001 #b1101100000100011001000101110110100001100011111111010)))
(assert (= y (fp #b1 #b10001110110 #b0010111000001111011010111110111110010000110100101010)))
(assert (= z (fp #b0 #b10000011111 #b1000011000110000111000100110100101110111111001100100)))
(assert (= r (fp #b0 #b10000011111 #b1000011000110000111000100110100101110111111001100100)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
