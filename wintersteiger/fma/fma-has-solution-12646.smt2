(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1723779772723548209256705376901663839817047119140625p-561 {- 776321394210657 -561 (-1.55325e-169)}
; Y = 1.056918185903306106609989001299254596233367919921875p824 {+ 256336720824734 824 (1.18238e+248)}
; Z = 1.90210033441150105915085077867843210697174072265625p144 {+ 4062698729906436 144 (4.24183e+043)}
; -1.1723779772723548209256705376901663839817047119140625p-561 x 1.056918185903306106609989001299254596233367919921875p824 1.90210033441150105915085077867843210697174072265625p144 == -1.2391076049316847029757582276943139731884002685546875p263
; [HW: -1.2391076049316847029757582276943139731884002685546875p263] 

; mpf : - 1076844920471787 263
; mpfd: - 1076844920471787 263 (-1.83653e+079) class: Neg. norm. non-zero
; hwf : - 1076844920471787 263 (-1.83653e+079) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111001110 #b0010110000100000111101101000111011101111011101100001)))
(assert (= y (fp #b0 #b11100110111 #b0000111010010010001100001011001100000000100110011110)))
(assert (= z (fp #b0 #b10010001111 #b1110011011110000000011000010101000000010000100000100)))
(assert (= r (fp #b1 #b10100000110 #b0011110100110110001001111110111101101000000011101011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
