(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.708229170315389122691840384504757821559906005859375p450 {+ 3189580627525302 450 (4.96643e+135)}
; Y = 1.1532062151713002862152279703877866268157958984375p-957 {+ 689979453556312 -957 (9.46675e-289)}
; Z = -1.8661793346003268112553996616043150424957275390625p864 {- 3900924928542056 864 (-2.29546e+260)}
; 1.708229170315389122691840384504757821559906005859375p450 x 1.1532062151713002862152279703877866268157958984375p-957 -1.8661793346003268112553996616043150424957275390625p864 == -1.8661793346003268112553996616043150424957275390625p864
; [HW: -1.8661793346003268112553996616043150424957275390625p864] 

; mpf : - 3900924928542056 864
; mpfd: - 3900924928542056 864 (-2.29546e+260) class: Neg. norm. non-zero
; hwf : - 3900924928542056 864 (-2.29546e+260) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111000001 #b1011010101001110100000011100010010010011111010110110)))
(assert (= y (fp #b0 #b00001000010 #b0010011100111000100001011100001110110100011001011000)))
(assert (= z (fp #b1 #b11101011111 #b1101110110111101111011011100101010010100010101101000)))
(assert (= r (fp #b1 #b11101011111 #b1101110110111101111011011100101010010100010101101000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
