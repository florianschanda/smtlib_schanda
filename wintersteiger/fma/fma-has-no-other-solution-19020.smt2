(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1914129287986237049068449778133071959018707275390625p-788 {+ 862047194811377 -788 (7.31856e-238)}
; Y = -1.4530331927222419619027959925006143748760223388671875p-78 {- 2040280117930355 -78 (-4.80768e-024)}
; Z = 1.4189864160660865533003516247845254838466644287109375p959 {+ 1886947067268527 959 (6.91423e+288)}
; 1.1914129287986237049068449778133071959018707275390625p-788 x -1.4530331927222419619027959925006143748760223388671875p-78 1.4189864160660865533003516247845254838466644287109375p959 == 1.4189864160660865533003516247845254838466644287109375p959
; [HW: 1.4189864160660865533003516247845254838466644287109375p959] 

; mpf : + 1886947067268527 959
; mpfd: + 1886947067268527 959 (6.91423e+288) class: Pos. norm. non-zero
; hwf : + 1886947067268527 959 (6.91423e+288) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011101011 #b0011000100000000011100000000110100111000101111110001)))
(assert (= y (fp #b1 #b01110110001 #b0111001111111001111110111011101010111110100101110011)))
(assert (= z (fp #b0 #b11110111110 #b0110101101000010101100011001101001111000110110101111)))
(assert (= r (fp #b0 #b11110111110 #b0110101101000010101100011001101001111000110110101111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
