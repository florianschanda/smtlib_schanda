(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1999966918928557380041866053943522274494171142578125p-904 {+ 900705027083997 -904 (8.87287e-273)}
; Y = -1.43737322123571242826756133581511676311492919921875p-441 {- 1969753876178988 -441 (-2.53129e-133)}
; Z = -1.50457329584823895629597245715558528900146484375p285 {- 2272396107163232 285 (-9.35324e+085)}
; 1.1999966918928557380041866053943522274494171142578125p-904 x -1.43737322123571242826756133581511676311492919921875p-441 -1.50457329584823895629597245715558528900146484375p285 == -1.50457329584823895629597245715558528900146484375p285
; [HW: -1.50457329584823895629597245715558528900146484375p285] 

; mpf : - 2272396107163232 285
; mpfd: - 2272396107163232 285 (-9.35324e+085) class: Neg. norm. non-zero
; hwf : - 2272396107163232 285 (-9.35324e+085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001110111 #b0011001100110010111110111011001011111100111011011101)))
(assert (= y (fp #b1 #b01001000110 #b0110111111110111101100010000000101011010100000101100)))
(assert (= z (fp #b1 #b10100011100 #b1000000100101011101101110010110000011010011001100000)))
(assert (= r (fp #b1 #b10100011100 #b1000000100101011101101110010110000011010011001100000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
