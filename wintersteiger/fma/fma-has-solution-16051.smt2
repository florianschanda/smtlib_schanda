(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6305021759422262395133884638198651373386383056640625p-282 {- 2839529364629697 -282 (-2.09828e-085)}
; Y = 1.7063388388885127877614422686747275292873382568359375p954 {+ 3181067331615615 954 (2.59825e+287)}
; Z = 1.2584380795185936552371686047990806400775909423828125p-661 {+ 1163901638618285 -661 (1.31524e-199)}
; -1.6305021759422262395133884638198651373386383056640625p-282 x 1.7063388388885127877614422686747275292873382568359375p954 1.2584380795185936552371686047990806400775909423828125p-661 == -1.39109459485122588517924668849445879459381103515625p673
; [HW: -1.39109459485122588517924668849445879459381103515625p673] 

; mpf : - 1761333471638596 673
; mpfd: - 1761333471638596 673 (-5.45185e+202) class: Neg. norm. non-zero
; hwf : - 1761333471638596 673 (-5.45185e+202) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100101 #b1010000101101000100101110011000110111010100011000001)))
(assert (= y (fp #b0 #b11110111001 #b1011010011010010100111110100010011101011101101111111)))
(assert (= z (fp #b0 #b00101101010 #b0100001000101000111111110111101110010010110010101101)))
(assert (= r (fp #b1 #b11010100000 #b0110010000011110110001100111111010000111010001000100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
