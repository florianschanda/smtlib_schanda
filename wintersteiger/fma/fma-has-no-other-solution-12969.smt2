(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6472944562615889907419841620139777660369873046875p999 {- 2915155072018680 999 (-8.82545e+300)}
; Y = -1.909465073002774015975546717527322471141815185546875p857 {- 4095866563881774 857 (-1.83492e+258)}
; Z = 1.1100375216321698434995823845383711159229278564453125p906 {+ 495564941419413 906 (6.00501e+272)}
; -1.6472944562615889907419841620139777660369873046875p999 x -1.909465073002774015975546717527322471141815185546875p857 1.1100375216321698434995823845383711159229278564453125p906 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111100110 #b1010010110110101000101101110100010000110100011111000)))
(assert (= y (fp #b1 #b11101011000 #b1110100011010010101100111111100101100110101100101110)))
(assert (= z (fp #b0 #b11110001001 #b0001110000101011011010110100010010111110001110010101)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
