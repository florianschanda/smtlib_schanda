(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.608685015231742010399784703622572124004364013671875p-85 {+ 2741273607783678 -85 (4.15835e-026)}
; Y = 1.3725566220895866198503654231899417936801910400390625p-36 {+ 1677845864417073 -36 (1.99733e-011)}
; Z = 1.954637523276594013310614172951318323612213134765625p-298 {+ 4299305194102362 -298 (3.8382e-090)}
; 1.608685015231742010399784703622572124004364013671875p-85 x 1.3725566220895866198503654231899417936801910400390625p-36 1.954637523276594013310614172951318323612213134765625p-298 == 1.1040056352563076824679910714621655642986297607421875p-120
; [HW: 1.1040056352563076824679910714621655642986297607421875p-120] 

; mpf : + 468399740184739 -120
; mpfd: + 468399740184739 -120 (8.30562e-037) class: Pos. norm. non-zero
; hwf : + 468399740184739 -120 (8.30562e-037) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110101010 #b1001101111010010110001111111100111111100010011111110)))
(assert (= y (fp #b0 #b01111011011 #b0101111101011111110111101110101111001000011100110001)))
(assert (= z (fp #b0 #b01011010101 #b1111010001100011000111111110111000000001111001011010)))
(assert (= r (fp #b0 #b01110000111 #b0001101010100000000111010000001000000110100010100011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
