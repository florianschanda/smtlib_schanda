(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0871105544387205110723471079836599528789520263671875p715 {+ 392311060510259 715 (1.87379e+215)}
; Y = 1.647790468841503486174815407139249145984649658203125p118 {+ 2917388914088754 118 (5.47572e+035)}
; Z = 1.6462874652422889720781995492870919406414031982421875p-315 {+ 2910619987639395 -315 (2.46636e-095)}
; 1.0871105544387205110723471079836599528789520263671875p715 x 1.647790468841503486174815407139249145984649658203125p118 1.6462874652422889720781995492870919406414031982421875p-315 == 1.7913304101811260427012939544511027634143829345703125p833
; [HW: 1.7913304101811260427012939544511027634143829345703125p833] 

; mpf : + 3563835340418661 833
; mpfd: + 3563835340418661 833 (1.02603e+251) class: Pos. norm. non-zero
; hwf : + 3563835340418661 833 (1.02603e+251) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011001010 #b0001011001001100111000001001011001110011011000110011)))
(assert (= y (fp #b0 #b10001110101 #b1010010111010101100110001001111001010101101100110010)))
(assert (= z (fp #b0 #b01011000100 #b1010010101110011000110000110011100000111110001100011)))
(assert (= r (fp #b0 #b11101000000 #b1100101010010100101000010011100000001110111001100101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
