(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8251049971173014530023692714166827499866485595703125p-29 {- 3715942557559013 -29 (-3.39952e-009)}
; Y = 1.1211567605594805474567010605824179947376251220703125p295 {+ 545641541709093 295 (7.13699e+088)}
; Z = 1.1485824471031078619631671244860626757144927978515625p-761 {+ 669155853407353 -761 (9.46968e-230)}
; -1.8251049971173014530023692714166827499866485595703125p-29 x 1.1211567605594805474567010605824179947376251220703125p295 1.1485824471031078619631671244860626757144927978515625p-761 == -1.023114403124476989859203968080691993236541748046875p267
; [HW: -1.023114403124476989859203968080691993236541748046875p267] 

; mpf : - 104098017298286 267
; mpfd: - 104098017298286 267 (-2.42624e+080) class: Neg. norm. non-zero
; hwf : - 104098017298286 267 (-2.42624e+080) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111100010 #b1101001100111010000101001100001001100010100011100101)))
(assert (= y (fp #b0 #b10100100110 #b0001111100000100001000010010010001001010110100100101)))
(assert (= z (fp #b0 #b00100000110 #b0010011000001001011111111100111100010001010001111001)))
(assert (= r (fp #b1 #b10100001010 #b0000010111101010110100110101010101111100011101101110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
