(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1645952312226643954318205942399799823760986328125p-892 {- 741271022001352 -892 (-3.52711e-269)}
; Y = 1.7213223303994229507196678241598419845104217529296875p8 {+ 3248546978400859 8 (440.659)}
; Z = 1.81970218424994190087318202131427824497222900390625p-196 {+ 3691610451542820 -196 (1.81185e-059)}
; -1.1645952312226643954318205942399799823760986328125p-892 x 1.7213223303994229507196678241598419845104217529296875p8 1.81970218424994190087318202131427824497222900390625p-196 == 1.81970218424994190087318202131427824497222900390625p-196
; [HW: 1.81970218424994190087318202131427824497222900390625p-196] 

; mpf : + 3691610451542820 -196
; mpfd: + 3691610451542820 -196 (1.81185e-059) class: Pos. norm. non-zero
; hwf : + 3691610451542820 -196 (1.81185e-059) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010000011 #b0010101000100010111010011011111100101101110011001000)))
(assert (= y (fp #b0 #b10000000111 #b1011100010101000100101001000101011110000101001011011)))
(assert (= z (fp #b0 #b01100111011 #b1101000111011000000000001001100111010000001100100100)))
(assert (= r (fp #b0 #b01100111011 #b1101000111011000000000001001100111010000001100100100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
