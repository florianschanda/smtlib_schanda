(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.408317490588583353883223026059567928314208984375p-546 {- 1838898498463600 -546 (-6.11396e-165)}
; Y = -1.6614912262288630273587841656990349292755126953125p-678 {- 2979091639953160 -678 (-1.32483e-204)}
; Z = -1.122679784940507463630865458981133997440338134765625p433 {- 552500633743962 433 (-2.49026e+130)}
; -1.408317490588583353883223026059567928314208984375p-546 x -1.6614912262288630273587841656990349292755126953125p-678 -1.122679784940507463630865458981133997440338134765625p433 == -1.122679784940507463630865458981133997440338134765625p433
; [HW: -1.122679784940507463630865458981133997440338134765625p433] 

; mpf : - 552500633743962 433
; mpfd: - 552500633743962 433 (-2.49026e+130) class: Neg. norm. non-zero
; hwf : - 552500633743962 433 (-2.49026e+130) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111011101 #b0110100010000111011111101011110001110110011101110000)))
(assert (= y (fp #b1 #b00101011001 #b1010100101010111011111010010111100111110011100001000)))
(assert (= z (fp #b1 #b10110110000 #b0001111101100111111100010100000000110011001001011010)))
(assert (= r (fp #b1 #b10110110000 #b0001111101100111111100010100000000110011001001011010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
