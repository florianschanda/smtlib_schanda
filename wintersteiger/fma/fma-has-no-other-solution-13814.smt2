(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.73600239006940881836271728388965129852294921875p-191 {- 3314660089660384 -191 (-5.53122e-058)}
; Y = 1.982136496748740039919312039273791015148162841796875p-197 {+ 4423149560784590 -197 (9.86789e-060)}
; Z = -1.7741210467189272304011637970688752830028533935546875p671 {- 3486331257543019 671 (-1.73824e+202)}
; -1.73600239006940881836271728388965129852294921875p-191 x 1.982136496748740039919312039273791015148162841796875p-197 -1.7741210467189272304011637970688752830028533935546875p671 == -1.7741210467189272304011637970688752830028533935546875p671
; [HW: -1.7741210467189272304011637970688752830028533935546875p671] 

; mpf : - 3486331257543019 671
; mpfd: - 3486331257543019 671 (-1.73824e+202) class: Neg. norm. non-zero
; hwf : - 3486331257543019 671 (-1.73824e+202) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101000000 #b1011110001101010101001110001001100100000001111100000)))
(assert (= y (fp #b0 #b01100111010 #b1111101101101101010011000010010110111110011011001110)))
(assert (= z (fp #b1 #b11010011110 #b1100011000101100110011000000001011001101100101101011)))
(assert (= r (fp #b1 #b11010011110 #b1100011000101100110011000000001011001101100101101011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
