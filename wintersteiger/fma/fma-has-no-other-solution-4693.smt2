(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2719900175012008869401824995293281972408294677734375p-853 {+ 1224934141466903 -853 (2.11786e-257)}
; Y = 1.676829949225755900243939322535879909992218017578125p-719 {+ 3048171107126306 -719 (6.08026e-217)}
; Z = 1.1850322467182607955038520231028087437152862548828125p1019 {+ 833311157371885 1019 (6.65726e+306)}
; 1.2719900175012008869401824995293281972408294677734375p-853 x 1.676829949225755900243939322535879909992218017578125p-719 1.1850322467182607955038520231028087437152862548828125p1019 == 1.1850322467182607955038520231028087437152862548828125p1019
; [HW: 1.1850322467182607955038520231028087437152862548828125p1019] 

; mpf : + 833311157371885 1019
; mpfd: + 833311157371885 1019 (6.65726e+306) class: Pos. norm. non-zero
; hwf : + 833311157371885 1019 (6.65726e+306) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010101010 #b0100010110100001001000110100011000000001100100010111)))
(assert (= y (fp #b0 #b00100110000 #b1010110101000100101110100100000011100000110000100010)))
(assert (= z (fp #b0 #b11111111010 #b0010111101011110010001011111100001011100001111101101)))
(assert (= r (fp #b0 #b11111111010 #b0010111101011110010001011111100001011100001111101101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
