(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0146397767524086841461894437088631093502044677734375p200 {- 65931693126935 200 (-1.63046e+060)}
; Y = 1.00489481209635389546974693075753748416900634765625p-612 {+ 22044273933188 -612 (5.91239e-185)}
; Z = 1.3842131137976945165490860745194368064403533935546875p124 {+ 1730342036130155 124 (2.9439e+037)}
; -1.0146397767524086841461894437088631093502044677734375p200 x 1.00489481209635389546974693075753748416900634765625p-612 1.3842131137976945165490860745194368064403533935546875p124 == 1.3842131137976945165490860745194368064403533935546875p124
; [HW: 1.3842131137976945165490860745194368064403533935546875p124] 

; mpf : + 1730342036130155 124
; mpfd: + 1730342036130155 124 (2.9439e+037) class: Pos. norm. non-zero
; hwf : + 1730342036130155 124 (2.9439e+037) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011000111 #b0000001110111111011011101011001001011111010100010111)))
(assert (= y (fp #b0 #b00110011011 #b0000000101000000110010010101000111011111101110000100)))
(assert (= z (fp #b0 #b10001111011 #b0110001001011011110010100110011001110100100101101011)))
(assert (= r (fp #b0 #b10001111011 #b0110001001011011110010100110011001110100100101101011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
