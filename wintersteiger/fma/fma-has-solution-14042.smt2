(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.50751933562916651254681710270233452320098876953125p369 {+ 2285663890822836 369 (1.81272e+111)}
; Y = 1.7688757972385362737810510225244797766208648681640625p-560 {+ 3462708753937665 -560 (4.68705e-169)}
; Z = -1.21250076109340199081998434849083423614501953125p900 {- 957018348476192 900 (-1.02489e+271)}
; 1.50751933562916651254681710270233452320098876953125p369 x 1.7688757972385362737810510225244797766208648681640625p-560 -1.21250076109340199081998434849083423614501953125p900 == -1.21250076109340199081998434849083423614501953125p900
; [HW: -1.21250076109340199081998434849083423614501953125p900] 

; mpf : - 957018348476192 900
; mpfd: - 957018348476192 900 (-1.02489e+271) class: Neg. norm. non-zero
; hwf : - 957018348476192 900 (-1.02489e+271) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110000 #b1000000111101100110010011000010010011101011010110100)))
(assert (= y (fp #b0 #b00111001111 #b1100010011010101000010110101001111010011010100000001)))
(assert (= z (fp #b1 #b11110000011 #b0011011001100110011100110010101101000101011100100000)))
(assert (= r (fp #b1 #b11110000011 #b0011011001100110011100110010101101000101011100100000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
