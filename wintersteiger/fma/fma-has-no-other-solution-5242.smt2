(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8715216106749126279140682527213357388973236083984375p-133 {+ 3924984401080871 -133 (1.71872e-040)}
; Y = 1.981083570425444140283843807992525398731231689453125p381 {+ 4418407602187346 381 (9.75733e+114)}
; Z = 1.400670941068722807898438986740075051784515380859375p960 {+ 1804461500895286 960 (1.365e+289)}
; 1.8715216106749126279140682527213357388973236083984375p-133 x 1.981083570425444140283843807992525398731231689453125p381 1.400670941068722807898438986740075051784515380859375p960 == 1.400670941068722807898438986740075051784515380859375p960
; [HW: 1.400670941068722807898438986740075051784515380859375p960] 

; mpf : + 1804461500895286 960
; mpfd: + 1804461500895286 960 (1.365e+289) class: Pos. norm. non-zero
; hwf : + 1804461500895286 960 (1.365e+289) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101111010 #b1101111100011100000010100100111110011011001000100111)))
(assert (= y (fp #b0 #b10101111100 #b1111101100101000010010101111100110011110110001010010)))
(assert (= z (fp #b0 #b11110111111 #b0110011010010010010111101110110001011001000000110110)))
(assert (= r (fp #b0 #b11110111111 #b0110011010010010010111101110110001011001000000110110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
