(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.641282080460722880843604798428714275360107421875p887 {+ 2888077738602288 887 (1.69352e+267)}
; Y = -1.0292376698597671680346365974401123821735382080078125p-430 {- 131674759085629 -430 (-3.71208e-130)}
; Z = -1.68602475300769327759553561918437480926513671875p82 {- 3089580822012384 82 (-8.15312e+024)}
; 1.641282080460722880843604798428714275360107421875p887 x -1.0292376698597671680346365974401123821735382080078125p-430 -1.68602475300769327759553561918437480926513671875p82 == -1.6892693440759851686294723549508489668369293212890625p457
; [HW: -1.6892693440759851686294723549508489668369293212890625p457] 

; mpf : - 3104193161138513 457
; mpfd: - 3104193161138513 457 (-6.28647e+137) class: Neg. norm. non-zero
; hwf : - 3104193161138513 457 (-6.28647e+137) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101110110 #b1010010000101011000011111111101100010110111100110000)))
(assert (= y (fp #b1 #b01001010001 #b0000011101111100000111101011001111011011111000111101)))
(assert (= z (fp #b1 #b10001010001 #b1010111110011111010100010111011001101010000111100000)))
(assert (= r (fp #b1 #b10111001000 #b1011000001110011111101001010101011110001000101010001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
