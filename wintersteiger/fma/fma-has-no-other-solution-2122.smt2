(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.868975578670035275763439130969345569610595703125p236 {+ 3913518092292432 236 (2.06387e+071)}
; Y = -1.2654165577112272966786576944286935031414031982421875p-788 {- 1195329910406243 -788 (-7.77315e-238)}
; Z = 1.9652666973239159009523291388177312910556793212890625p-143 {+ 4347174738381137 -143 (1.76251e-043)}
; 1.868975578670035275763439130969345569610595703125p236 x -1.2654165577112272966786576944286935031414031982421875p-788 1.9652666973239159009523291388177312910556793212890625p-143 == 1.965266697323915678907724213786423206329345703125p-143
; [HW: 1.965266697323915678907724213786423206329345703125p-143] 

; mpf : + 4347174738381136 -143
; mpfd: + 4347174738381136 -143 (1.76251e-043) class: Pos. norm. non-zero
; hwf : + 4347174738381136 -143 (1.76251e-043) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011101011 #b1101111001110101001011101111101101101001000101010000)))
(assert (= y (fp #b1 #b00011101011 #b0100001111110010010101101110101100101111110001100011)))
(assert (= z (fp #b0 #b01101110000 #b1111011100011011101101111110000011101100100101010001)))
(assert (= r (fp #b0 #b01101110000 #b1111011100011011101101111110000011101100100101010000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
