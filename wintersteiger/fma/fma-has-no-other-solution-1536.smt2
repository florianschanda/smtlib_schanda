(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.871076801298598990541677267174236476421356201171875p50 {- 3922981157739454 50 (-2.10665e+015)}
; Y = 1.5827160746263604362837895678239874541759490966796875p-475 {+ 2624319896550075 -475 (1.62239e-143)}
; Z = -1.6244593307571462137417483972967602312564849853515625p976 {- 2812314809305913 976 (-1.03749e+294)}
; -1.871076801298598990541677267174236476421356201171875p50 x 1.5827160746263604362837895678239874541759490966796875p-475 -1.6244593307571462137417483972967602312564849853515625p976 == -1.624459330757146435786353322328068315982818603515625p976
; [HW: -1.624459330757146435786353322328068315982818603515625p976] 

; mpf : - 2812314809305914 976
; mpfd: - 2812314809305914 976 (-1.03749e+294) class: Neg. norm. non-zero
; hwf : - 2812314809305914 976 (-1.03749e+294) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000110001 #b1101111011111110111000111010010111100001101110111110)))
(assert (= y (fp #b0 #b01000100100 #b1001010100101100111000010111001101011111101010111011)))
(assert (= z (fp #b1 #b11111001111 #b1001111111011100100100010001001101001000101100111001)))
(assert (= r (fp #b1 #b11111001111 #b1001111111011100100100010001001101001000101100111010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
