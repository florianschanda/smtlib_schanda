(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3678231138370955388694483190192840993404388427734375p447 {+ 1656528038414999 447 (4.97093e+134)}
; Y = -1.0674237512599622501596741130924783647060394287109375p-420 {- 303649581050287 -420 (-3.9422e-127)}
; Z = -1.7871721224919834281052999358507804572582244873046875p-55 {- 3545108077531339 -55 (-4.9604e-017)}
; 1.3678231138370955388694483190192840993404388427734375p447 x -1.0674237512599622501596741130924783647060394287109375p-420 -1.7871721224919834281052999358507804572582244873046875p-55 == -1.4600468792320751010294088700902648270130157470703125p27
; [HW: -1.4600468792320751010294088700902648270130157470703125p27] 

; mpf : - 2071866953882533 27
; mpfd: - 2071866953882533 27 (-1.95964e+008) class: Neg. norm. non-zero
; hwf : - 2071866953882533 27 (-1.95964e+008) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110111110 #b0101111000101001101001111101010010100100101010010111)))
(assert (= y (fp #b1 #b01001011011 #b0001000101000010101011101101011010100010100110101111)))
(assert (= z (fp #b1 #b01111001000 #b1100100110000100000111001011101001101101000011001011)))
(assert (= r (fp #b1 #b10000011010 #b0111010111000101101000011101110011101101101110100101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
