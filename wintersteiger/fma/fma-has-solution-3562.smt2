(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.525533490623833809962661689496599137783050537109375p-334 {- 2366792432544214 -334 (-4.35916e-101)}
; Y = 1.568686383778370885266895129461772739887237548828125p189 {+ 2561135786074946 189 (1.23085e+057)}
; Z = 1.4598199999275573990331622553640045225620269775390625p-98 {+ 2070845180331249 -98 (4.60638e-030)}
; -1.525533490623833809962661689496599137783050537109375p-334 x 1.568686383778370885266895129461772739887237548828125p189 1.4598199999275573990331622553640045225620269775390625p-98 == 1.45981999992754030159858302795328199863433837890625p-98
; [HW: 1.45981999992754030159858302795328199863433837890625p-98] 

; mpf : + 2070845180331172 -98
; mpfd: + 2070845180331172 -98 (4.60638e-030) class: Pos. norm. non-zero
; hwf : + 2070845180331172 -98 (4.60638e-030) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010110001 #b1000011010001001010111001110001100101110100111010110)))
(assert (= y (fp #b0 #b10010111100 #b1001000110010101011011100100110000000010001101000010)))
(assert (= z (fp #b0 #b01110011101 #b0111010110110110110000110111010110111100010011110001)))
(assert (= r (fp #b0 #b01110011101 #b0111010110110110110000110111010110111100010010100100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
