(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3106420607815165713105898248613812029361724853515625p143 {- 1399007469181241 143 (-1.46141e+043)}
; Y = 1.6111860162481292935154897350003011524677276611328125p3 {+ 2752537115029133 3 (12.8895)}
; Z = -1.7931582909346082121970766820595599710941314697265625p-379 {- 3572067383498921 -379 (-1.4563e-114)}
; -1.3106420607815165713105898248613812029361724853515625p143 x 1.6111860162481292935154897350003011524677276611328125p3 -1.7931582909346082121970766820595599710941314697265625p-379 == -1.0558440803189050871679910414968617260456085205078125p147
; [HW: -1.0558440803189050871679910414968617260456085205078125p147] 

; mpf : - 251499379315069 147
; mpfd: - 251499379315069 147 (-1.88369e+044) class: Neg. norm. non-zero
; hwf : - 251499379315069 147 (-1.88369e+044) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010001110 #b0100111110000110001111001111001111010001100100111001)))
(assert (= y (fp #b0 #b10000000010 #b1001110001110110101011111100111110001110111010001101)))
(assert (= z (fp #b1 #b01010000100 #b1100101100001100011010111111100000011101100010101001)))
(assert (= r (fp #b1 #b10010010010 #b0000111001001011110011000011001010100101000101111101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
