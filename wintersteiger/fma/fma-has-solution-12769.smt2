(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -zero {- 0 -1023 (-0)}
; Y = 1.129843762892556835453206076635979115962982177734375p387 {+ 584764322179302 387 (3.56145e+116)}
; Z = -1.5907354214587303697925335654872469604015350341796875p-329 {- 2660435823956091 -329 (-1.45455e-099)}
; -zero x 1.129843762892556835453206076635979115962982177734375p387 -1.5907354214587303697925335654872469604015350341796875p-329 == -1.5907354214587303697925335654872469604015350341796875p-329
; [HW: -1.5907354214587303697925335654872469604015350341796875p-329] 

; mpf : - 2660435823956091 -329
; mpfd: - 2660435823956091 -329 (-1.45455e-099) class: Neg. norm. non-zero
; hwf : - 2660435823956091 -329 (-1.45455e-099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b0 #b10110000010 #b0010000100111101011100001101101100110110100011100110)))
(assert (= z (fp #b1 #b01010110110 #b1001011100111010011011111100001111000001000001111011)))
(assert (= r (fp #b1 #b01010110110 #b1001011100111010011011111100001111000001000001111011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
