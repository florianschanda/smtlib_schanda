(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.814438210224725178676408177125267684459686279296875p262 {- 3667903620084366 262 (-1.34462e+079)}
; Y = -1.1196654442314393218538270957651548087596893310546875p400 {- 538925250049835 400 (-2.89126e+120)}
; Z = -1.1662944143416387188239013994461856782436370849609375p-458 {- 748923462462799 -458 (-1.567e-138)}
; -1.814438210224725178676408177125267684459686279296875p262 x -1.1196654442314393218538270957651548087596893310546875p400 -1.1662944143416387188239013994461856782436370849609375p-458 == 1.0157818823408824027154651048476807773113250732421875p663
; [HW: 1.0157818823408824027154651048476807773113250732421875p663] 

; mpf : + 71075279429603 663
; mpfd: + 71075279429603 663 (3.88765e+199) class: Pos. norm. non-zero
; hwf : + 71075279429603 663 (3.88765e+199) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100000101 #b1101000001111111000001011100010110000111001010001110)))
(assert (= y (fp #b1 #b10110001111 #b0001111010100010011001010000000101101111011100101011)))
(assert (= z (fp #b1 #b01000110101 #b0010101010010010010001010100111100011010110101001111)))
(assert (= r (fp #b0 #b11010010110 #b0000010000001010010010000000110010000101111111100011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
