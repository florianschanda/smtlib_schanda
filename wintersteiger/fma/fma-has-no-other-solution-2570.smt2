(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1967893580359885152830656807054765522480010986328125p-327 {+ 886260479521357 -327 (4.37733e-099)}
; Y = 1.015667744253594850789568226900883018970489501953125p364 {+ 70561247182226 364 (3.81654e+109)}
; Z = -1.852479800962170575218124213279224932193756103515625p796 {- 3839227713954106 796 (-7.72023e+239)}
; 1.1967893580359885152830656807054765522480010986328125p-327 x 1.015667744253594850789568226900883018970489501953125p364 -1.852479800962170575218124213279224932193756103515625p796 == -1.8524798009621703531735192882479168474674224853515625p796
; [HW: -1.8524798009621703531735192882479168474674224853515625p796] 

; mpf : - 3839227713954105 796
; mpfd: - 3839227713954105 796 (-7.72023e+239) class: Neg. norm. non-zero
; hwf : - 3839227713954105 796 (-7.72023e+239) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010111000 #b0011001001100000110010011001000011110111001001001101)))
(assert (= y (fp #b0 #b10101101011 #b0000010000000010110011010010000100101011110110010010)))
(assert (= z (fp #b1 #b11100011011 #b1101101000111100000111011100000110100010000100111010)))
(assert (= r (fp #b1 #b11100011011 #b1101101000111100000111011100000110100010000100111001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
