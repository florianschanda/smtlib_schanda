(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.22099150577252490990076694288291037082672119140625p-246 {- 995257263049188 -246 (-1.07978e-074)}
; Y = -1.95789690142296723962545001995749771595001220703125p106 {- 4313984128307828 106 (-1.58843e+032)}
; Z = 1.0311013077312363162008068684372119605541229248046875p-543 {+ 140067837909131 -543 (3.58108e-164)}
; -1.22099150577252490990076694288291037082672119140625p-246 x -1.95789690142296723962545001995749771595001220703125p106 1.0311013077312363162008068684372119605541229248046875p-543 == 1.19528774290789474576968132168985903263092041015625p-139
; [HW: 1.19528774290789474576968132168985903263092041015625p-139] 

; mpf : + 879497806190020 -139
; mpfd: + 879497806190020 -139 (1.71515e-042) class: Pos. norm. non-zero
; hwf : + 879497806190020 -139 (1.71515e-042) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100001001 #b0011100010010010111001100011100111111100100111100100)))
(assert (= y (fp #b1 #b10001101001 #b1111010100111000101110110011100010001101001001110100)))
(assert (= z (fp #b0 #b00111100000 #b0000011111110110010000010101101110010001100010001011)))
(assert (= r (fp #b0 #b01101110100 #b0011000111111110011000001010010100011001010111000100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
