(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3163475293590369830099007231183350086212158203125p274 {- 1424702615340936 274 (-3.99567e+082)}
; Y = 1.0016596349707478363910695406957529485225677490234375p973 {+ 7474331435831 973 (7.99661e+292)}
; Z = -1.388343751096229983232888116617687046527862548828125p389 {- 1748944772728642 389 (-1.75051e+117)}
; -1.3163475293590369830099007231183350086212158203125p274 x 1.0016596349707478363910695406957529485225677490234375p973 -1.388343751096229983232888116617687046527862548828125p389 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100010001 #b0101000011111100001001101101010011000100011110001000)))
(assert (= y (fp #b0 #b11111001100 #b0000000001101100110001000000110111101100001100110111)))
(assert (= z (fp #b1 #b10110000100 #b0110001101101010011111101111111010010000011101000010)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
