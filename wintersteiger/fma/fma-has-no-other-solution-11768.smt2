(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.740218646386377354673413719865493476390838623046875p-96 {+ 3333648420038382 -96 (2.19646e-029)}
; Y = 1.798284566992822686160025114077143371105194091796875p840 {+ 3595154078444494 840 (1.31842e+253)}
; Z = 1.466001846775564221303511658334173262119293212890625p153 {+ 2098685743492394 153 (1.67388e+046)}
; 1.740218646386377354673413719865493476390838623046875p-96 x 1.798284566992822686160025114077143371105194091796875p840 1.466001846775564221303511658334173262119293212890625p153 == 1.5647041674948811706968854196020402014255523681640625p745
; [HW: 1.5647041674948811706968854196020402014255523681640625p745] 

; mpf : + 2543201478304513 745
; mpfd: + 2543201478304513 745 (2.89587e+224) class: Pos. norm. non-zero
; hwf : + 2543201478304513 745 (2.89587e+224) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011111 #b1011110101111110111110000001111000011110011011101110)))
(assert (= y (fp #b0 #b11101000111 #b1100110001011100011000001001110000100010101111001110)))
(assert (= z (fp #b0 #b10010011000 #b0111011101001011111001011010001111000110110100101010)))
(assert (= r (fp #b0 #b11011101000 #b1001000010010000011100111100101101001110001100000001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
