(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.187336487451322586395008329418487846851348876953125p673 {+ 843688535078674 673 (4.6533e+202)}
; Y = 1.2779303033367652719931584215373732149600982666015625p189 {+ 1251686810542425 189 (1.00271e+057)}
; Z = -1.1193312417995751051336128512048162519931793212890625p-26 {- 537420136102225 -26 (-1.66793e-008)}
; 1.187336487451322586395008329418487846851348876953125p673 x 1.2779303033367652719931584215373732149600982666015625p189 -1.1193312417995751051336128512048162519931793212890625p-26 == 1.517333277571478067358157204580493271350860595703125p862
; [HW: 1.517333277571478067358157204580493271350860595703125p862] 

; mpf : + 2329861956097266 862
; mpfd: + 2329861956097266 862 (4.66592e+259) class: Pos. norm. non-zero
; hwf : + 2329861956097266 862 (4.66592e+259) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010100000 #b0010111111110101010010001011011011110011011100010010)))
(assert (= y (fp #b0 #b10010111100 #b0100011100100110011100001011101101100110000101011001)))
(assert (= z (fp #b1 #b01111100101 #b0001111010001100011111100000010011101011100101010001)))
(assert (= r (fp #b0 #b11101011101 #b1000010001101111111101000010010001001101010011110010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
