(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5767968313510303257629630024894140660762786865234375p-658 {- 2597661994740983 -658 (-1.31837e-198)}
; Y = -1.763125042394126484879279814776964485645294189453125p-792 {- 3436809656563282 -792 (-6.76903e-239)}
; Z = -1.4166233709384064010095016783452592790126800537109375p619 {- 1876304858112047 619 (-3.08192e+186)}
; -1.5767968313510303257629630024894140660762786865234375p-658 x -1.763125042394126484879279814776964485645294189453125p-792 -1.4166233709384064010095016783452592790126800537109375p619 == -1.416623370938406178964896753313951194286346435546875p619
; [HW: -1.416623370938406178964896753313951194286346435546875p619] 

; mpf : - 1876304858112046 619
; mpfd: - 1876304858112046 619 (-3.08192e+186) class: Neg. norm. non-zero
; hwf : - 1876304858112046 619 (-3.08192e+186) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101101101 #b1001001110101000111101010000011100010110110011110111)))
(assert (= y (fp #b1 #b00011100111 #b1100001101011100001010011010101111010111011001010010)))
(assert (= z (fp #b1 #b11001101010 #b0110101010100111110101000100100011101110000000101111)))
(assert (= r (fp #b1 #b11001101010 #b0110101010100111110101000100100011101110000000101110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
