(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6276902386217269036450261410209350287914276123046875p-260 {- 2826865524760907 -260 (-8.78563e-079)}
; Y = -1.207240535880951259883886450552381575107574462890625p-384 {- 933328400169514 -384 (-3.06391e-116)}
; Z = -1.0554127460323747822457107758964411914348602294921875p-979 {- 249556822382979 -979 (-2.06565e-295)}
; -1.6276902386217269036450261410209350287914276123046875p-260 x -1.207240535880951259883886450552381575107574462890625p-384 -1.0554127460323747822457107758964411914348602294921875p-979 == 1.9650136359218868253861955963657237589359283447265625p-644
; [HW: 1.9650136359218868253861955963657237589359283447265625p-644] 

; mpf : + 4346035051145257 -644
; mpfd: + 4346035051145257 -644 (2.69183e-194) class: Pos. norm. non-zero
; hwf : + 4346035051145257 -644 (2.69183e-194) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011111011 #b1010000010110000010011101011011011100110000101001011)))
(assert (= y (fp #b1 #b01001111111 #b0011010100001101101101110011110000000011101000101010)))
(assert (= z (fp #b1 #b00000101100 #b0000111000101111100001111001101111111101100110000011)))
(assert (= r (fp #b0 #b00101111011 #b1111011100001011001000100011011001111010100000101001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
