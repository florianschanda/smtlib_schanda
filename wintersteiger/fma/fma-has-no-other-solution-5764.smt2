(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.726399215028600497845445715938694775104522705078125p-967 {+ 3271411234125026 -967 (1.384e-291)}
; Y = -1.8898740373664637548500877528567798435688018798828125p-919 {- 4007636383090285 -919 (-4.26449e-277)}
; Z = 1.4999610245588943513439517118968069553375244140625p987 {+ 2251624283903208 987 (1.96194e+297)}
; 1.726399215028600497845445715938694775104522705078125p-967 x -1.8898740373664637548500877528567798435688018798828125p-919 1.4999610245588943513439517118968069553375244140625p987 == 1.4999610245588943513439517118968069553375244140625p987
; [HW: 1.4999610245588943513439517118968069553375244140625p987] 

; mpf : + 2251624283903208 987
; mpfd: + 2251624283903208 987 (1.96194e+297) class: Pos. norm. non-zero
; hwf : + 2251624283903208 987 (1.96194e+297) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000111000 #b1011100111110101010011001000100001100011010011100010)))
(assert (= y (fp #b1 #b00001101000 #b1110001111001110110010001111000000001100011001101101)))
(assert (= z (fp #b0 #b11111011010 #b0111111111111101011100100001100111000001010011101000)))
(assert (= r (fp #b0 #b11111011010 #b0111111111111101011100100001100111000001010011101000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
