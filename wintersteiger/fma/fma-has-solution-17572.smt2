(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0202618406269403639186066357069648802280426025390625p-384 {+ 91251217897329 -384 (2.58937e-116)}
; Y = 1.1857251875529091211802779071149416267871856689453125p-5 {+ 836431885456597 -5 (0.0370539)}
; Z = 1.1887151683844374705500968047999776899814605712890625p789 {+ 849897562015313 789 (3.8703e+237)}
; 1.0202618406269403639186066357069648802280426025390625p-384 x 1.1857251875529091211802779071149416267871856689453125p-5 1.1887151683844374705500968047999776899814605712890625p789 == 1.1887151683844374705500968047999776899814605712890625p789
; [HW: 1.1887151683844374705500968047999776899814605712890625p789] 

; mpf : + 849897562015313 789
; mpfd: + 849897562015313 789 (3.8703e+237) class: Pos. norm. non-zero
; hwf : + 849897562015313 789 (3.8703e+237) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001111111 #b0000010100101111111000010100011011011001011101110001)))
(assert (= y (fp #b0 #b01111111010 #b0010111110001011101011111001011010010101010011010101)))
(assert (= z (fp #b0 #b11100010100 #b0011000001001111101000110010010001111000011001010001)))
(assert (= r (fp #b0 #b11100010100 #b0011000001001111101000110010010001111000011001010001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
