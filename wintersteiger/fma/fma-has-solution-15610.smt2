(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.11399136882910543278057957650162279605865478515625p-210 {- 513371486182212 -210 (-6.76991e-064)}
; Y = 1.8274133486448407293067930368124507367610931396484375p130 {+ 3726338448638279 130 (2.48735e+039)}
; Z = -1.6906473499051954956229337767581455409526824951171875p329 {- 3110399147677459 329 (-1.84893e+099)}
; -1.11399136882910543278057957650162279605865478515625p-210 x 1.8274133486448407293067930368124507367610931396484375p130 -1.6906473499051954956229337767581455409526824951171875p329 == -1.69064734990519571766753870178945362567901611328125p329
; [HW: -1.69064734990519571766753870178945362567901611328125p329] 

; mpf : - 3110399147677460 329
; mpfd: - 3110399147677460 329 (-1.84893e+099) class: Neg. norm. non-zero
; hwf : - 3110399147677460 329 (-1.84893e+099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100101101 #b0001110100101110100010011101000100100101101101000100)))
(assert (= y (fp #b0 #b10010000001 #b1101001111010001010111000111100010110100000101000111)))
(assert (= z (fp #b1 #b10101001000 #b1011000011001110010000111100010011101001011100010011)))
(assert (= r (fp #b1 #b10101001000 #b1011000011001110010000111100010011101001011100010100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
