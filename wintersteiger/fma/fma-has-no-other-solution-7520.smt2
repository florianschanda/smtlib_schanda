(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0615524724911173937158537228242494165897369384765625p96 {- 277207692174729 96 (-8.41049e+028)}
; Y = -1.548244549548588366860712994821369647979736328125p32 {- 2469073949054928 32 (-6.64966e+009)}
; Z = -1.2508427424471879607636992659536190330982208251953125p707 {- 1129695281413749 707 (-8.42189e+212)}
; -1.0615524724911173937158537228242494165897369384765625p96 x -1.548244549548588366860712994821369647979736328125p32 -1.2508427424471879607636992659536190330982208251953125p707 == -1.25084274244718773871909434092231094837188720703125p707
; [HW: -1.25084274244718773871909434092231094837188720703125p707] 

; mpf : - 1129695281413748 707
; mpfd: - 1129695281413748 707 (-8.42189e+212) class: Neg. norm. non-zero
; hwf : - 1129695281413748 707 (-8.42189e+212) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001011111 #b0000111111000001111001110010000001010110010110001001)))
(assert (= y (fp #b1 #b10000011111 #b1000110001011001110000010011101010000101011111010000)))
(assert (= z (fp #b1 #b11011000010 #b0100000000110111001110101101111100111111111001110101)))
(assert (= r (fp #b1 #b11011000010 #b0100000000110111001110101101111100111111111001110100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
