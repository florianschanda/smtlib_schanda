(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6741830090493368121684625293710269033908843994140625p-343 {- 3036250348334113 -343 (-9.3436e-104)}
; Y = 1.9242994969664881654836108282324858009815216064453125p979 {+ 4162674870117013 979 (9.83192e+294)}
; Z = 1.54121495628713578440738274366594851016998291015625p223 {+ 2437415475462084 223 (2.07755e+067)}
; -1.6741830090493368121684625293710269033908843994140625p-343 x 1.9242994969664881654836108282324858009815216064453125p979 1.54121495628713578440738274366594851016998291015625p223 == -1.610814761071740264242180273868143558502197265625p637
; [HW: -1.610814761071740264242180273868143558502197265625p637] 

; mpf : - 2750865130355088 637
; mpfd: - 2750865130355088 637 (-9.18656e+191) class: Neg. norm. non-zero
; hwf : - 2750865130355088 637 (-9.18656e+191) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010101000 #b1010110010010111010000011111011101100010110000100001)))
(assert (= y (fp #b0 #b11111010010 #b1110110010011110111001000100111100101110001010010101)))
(assert (= z (fp #b0 #b10011011110 #b1000101010001101000100000011100101011011111111000100)))
(assert (= r (fp #b1 #b11001111100 #b1001110001011110010110110010111010110111100110010000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
