(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.6980652220785079631326652815914712846279144287109375p-910 {+ 3143806274033071 -910 (1.96182e-274)}
; Y = -1.34019790269284033712438031216152012348175048828125p156 {- 1532115147799700 156 (-1.22419e+047)}
; Z = 1.7263728280565031614202098353416658937931060791015625p839 {+ 3271292397767321 839 (6.3285e+252)}
; 1.6980652220785079631326652815914712846279144287109375p-910 x -1.34019790269284033712438031216152012348175048828125p156 1.7263728280565031614202098353416658937931060791015625p839 == 1.7263728280565029393756049103103578090667724609375p839
; [HW: 1.7263728280565029393756049103103578090667724609375p839] 

; mpf : + 3271292397767320 839
; mpfd: + 3271292397767320 839 (6.3285e+252) class: Pos. norm. non-zero
; hwf : + 3271292397767320 839 (6.3285e+252) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001110001 #b1011001010110100011001110000001101001101010110101111)))
(assert (= y (fp #b1 #b10010011011 #b0101011100010111001101011011001000111011110010010100)))
(assert (= z (fp #b0 #b11101000110 #b1011100111110011100100011101010100110100101010011001)))
(assert (= r (fp #b0 #b11101000110 #b1011100111110011100100011101010100110100101010011000)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
