(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.302952825215208942921663037850521504878997802734375p806 {+ 1364378230750054 806 (5.56039e+242)}
; Y = 1.924153234146097180001788728986866772174835205078125p826 {+ 4162016160933602 826 (8.61026e+248)}
; Z = 1.0017991696791221922779868691577576100826263427734375p878 {+ 8102739896471 878 (2.01891e+264)}
; 1.302952825215208942921663037850521504878997802734375p806 x 1.924153234146097180001788728986866772174835205078125p826 1.0017991696791221922779868691577576100826263427734375p878 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100100101 #b0100110110001110010100001111110010000111101101100110)))
(assert (= y (fp #b0 #b11100111001 #b1110110010010101010011100110110100100110011011100010)))
(assert (= z (fp #b0 #b11101101101 #b0000000001110101111010010000111011101110100010010111)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
