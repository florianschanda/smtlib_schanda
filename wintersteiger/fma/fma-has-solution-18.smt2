(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.427845499005978791018378615262918174266815185546875p-602 {- 1926844829895470 -602 (-8.60248e-182)}
; Y = -1.366690967294902581130600083270110189914703369140625p-916 {- 1651429303669450 -916 (-2.46714e-276)}
; Z = -1.772307996375983574210977167240343987941741943359375p-416 {- 3478166004694134 -416 (-1.04728e-125)}
; -1.427845499005978791018378615262918174266815185546875p-602 x -1.366690967294902581130600083270110189914703369140625p-916 -1.772307996375983574210977167240343987941741943359375p-416 == -1.7723079963759833521663722422090359032154083251953125p-416
; [HW: -1.7723079963759833521663722422090359032154083251953125p-416] 

; mpf : - 3478166004694133 -416
; mpfd: - 3478166004694133 -416 (-1.04728e-125) class: Neg. norm. non-zero
; hwf : - 3478166004694133 -416 (-1.04728e-125) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110100101 #b0110110110000111010010000101100111111000101100101110)))
(assert (= y (fp #b1 #b00001101011 #b0101110111011111011101011001000001000101001011001010)))
(assert (= z (fp #b1 #b01001011111 #b1100010110110101111110100001001011011111110001110110)))
(assert (= r (fp #b1 #b01001011111 #b1100010110110101111110100001001011011111110001110101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
