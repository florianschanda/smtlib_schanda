(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.413308396109109299487727184896357357501983642578125p-298 {- 1861375538706082 -298 (-2.77523e-090)}
; Y = 1.941321613165362780506484341458417475223541259765625p506 {+ 4239335666287322 506 (4.06701e+152)}
; Z = 1.3479391761203627364551493883482180535793304443359375p-883 {+ 1566978743923263 -883 (2.09018e-266)}
; -1.413308396109109299487727184896357357501983642578125p-298 x 1.941321613165362780506484341458417475223541259765625p506 1.3479391761203627364551493883482180535793304443359375p-883 == -1.3718430677173436560423169794376008212566375732421875p209
; [HW: -1.3718430677173436560423169794376008212566375732421875p209] 

; mpf : - 1674632301212131 209
; mpfd: - 1674632301212131 209 (-1.12869e+063) class: Neg. norm. non-zero
; hwf : - 1674632301212131 209 (-1.12869e+063) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011010101 #b0110100111001110100101000011110001110011011010100010)))
(assert (= y (fp #b0 #b10111111001 #b1111000011111010011101000000011110010000001011011010)))
(assert (= z (fp #b0 #b00010001100 #b0101100100010010100010101011011001101111001000111111)))
(assert (= r (fp #b1 #b10011010000 #b0101111100110001000110110111011100010111000111100011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
