(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.994289586946035086612027953378856182098388671875p101 {+ 4477882213268528 101 (5.05612e+030)}
; Y = -1.340301263984545077079246766516007483005523681640625p388 {- 1532580645674506 388 (-8.44969e+116)}
; Z = -1.9835347179776066095513442633091472089290618896484375p93 {- 4429446589389895 93 (-1.9644e+028)}
; 1.994289586946035086612027953378856182098388671875p101 x -1.340301263984545077079246766516007483005523681640625p388 -1.9835347179776066095513442633091472089290618896484375p93 == -1.336474427067493753185090099577791988849639892578125p490
; [HW: -1.336474427067493753185090099577791988849639892578125p490] 

; mpf : - 1515346104360866 490
; mpfd: - 1515346104360866 490 (-4.27227e+147) class: Neg. norm. non-zero
; hwf : - 1515346104360866 490 (-4.27227e+147) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001100100 #b1111111010001001110000110010101010101111110000110000)))
(assert (= y (fp #b1 #b10110000011 #b0101011100011101111110111100111110011001111000001010)))
(assert (= z (fp #b1 #b10001011100 #b1111101111001000111011100110100000110001110001000111)))
(assert (= r (fp #b1 #b10111101001 #b0101011000100011001100000010010000110001111110100010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
