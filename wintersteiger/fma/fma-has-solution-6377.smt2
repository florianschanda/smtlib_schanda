(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.458093367966968312288145170896314084529876708984375p260 {+ 2063069121276934 260 (2.70137e+078)}
; Y = 1.88021469749861847020611094194464385509490966796875p-262 {+ 3964134583660812 -262 (2.53716e-079)}
; Z = -1.3576250420996223144953773953602649271488189697265625p-24 {- 1610600006338217 -24 (-8.09208e-008)}
; 1.458093367966968312288145170896314084529876708984375p260 x 1.88021469749861847020611094194464385509490966796875p-262 -1.3576250420996223144953773953602649271488189697265625p-24 == 1.370764128546861027047043535276316106319427490234375p-1
; [HW: 1.370764128546861027047043535276316106319427490234375p-1] 

; mpf : + 1669773191165990 -1
; mpfd: + 1669773191165990 -1 (0.685382) class: Pos. norm. non-zero
; hwf : + 1669773191165990 -1 (0.685382) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000011 #b0111010101000101100110110110000111101110110000000110)))
(assert (= y (fp #b0 #b01011111001 #b1110000101010101110000000001101100110111000100001100)))
(assert (= z (fp #b1 #b01111100111 #b0101101110001101010100001001010000001100011010101001)))
(assert (= r (fp #b0 #b01111111110 #b0101111011101010011001011101111010100011100000100110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
