(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2688066590145858913984966420684941112995147705078125p24 {- 1210597569372797 24 (-2.1287e+007)}
; Y = 1.8771018002142458858116924602654762566089630126953125p104 {+ 3950115340610869 104 (3.80721e+031)}
; Z = 1.5521762806818790725316148382262326776981353759765625p755 {+ 2486780891921737 755 (2.94163e+227)}
; -1.2688066590145858913984966420684941112995147705078125p24 x 1.8771018002142458858116924602654762566089630126953125p104 1.5521762806818790725316148382262326776981353759765625p755 == 1.5521762806818788504870099131949245929718017578125p755
; [HW: 1.5521762806818788504870099131949245929718017578125p755] 

; mpf : + 2486780891921736 755
; mpfd: + 2486780891921736 755 (2.94163e+227) class: Pos. norm. non-zero
; hwf : + 2486780891921736 755 (2.94163e+227) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000010111 #b0100010011010000100000110110000101101010001001111101)))
(assert (= y (fp #b0 #b10001100111 #b1110000010001001101111100101101100101110110100110101)))
(assert (= z (fp #b0 #b11011110010 #b1000110101011011011011001011101100100111110101001001)))
(assert (= r (fp #b0 #b11011110010 #b1000110101011011011011001011101100100111110101001000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
