(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3204331608846151535630042417324148118495941162109375p375 {+ 1443102663957103 375 (1.01617e+113)}
; Y = 1.083340852602936887905116236652247607707977294921875p401 {+ 375333832727326 401 (5.59491e+120)}
; Z = 1.03812764744194918620223688776604831218719482421875p357 {+ 171711658812076 357 (3.04761e+107)}
; 1.3204331608846151535630042417324148118495941162109375p375 x 1.083340852602936887905116236652247607707977294921875p401 1.03812764744194918620223688776604831218719482421875p357 == 1.4304791863179298072594747281982563436031341552734375p776
; [HW: 1.4304791863179298072594747281982563436031341552734375p776] 

; mpf : + 1938705903092183 776
; mpfd: + 1938705903092183 776 (5.68536e+233) class: Pos. norm. non-zero
; hwf : + 1938705903092183 776 (5.68536e+233) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110110 #b0101001000000111111010000101101010001101101001101111)))
(assert (= y (fp #b0 #b10110010000 #b0001010101010101110100110111110001011001101100011110)))
(assert (= z (fp #b0 #b10101100100 #b0000100111000010101110111100011011010110001010101100)))
(assert (= r (fp #b0 #b11100000111 #b0110111000110011111000100100101011011000000111010111)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
