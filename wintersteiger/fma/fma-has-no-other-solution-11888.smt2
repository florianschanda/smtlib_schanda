(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8919441282023841122139629078446887433528900146484375p-276 {- 4016959243407559 -276 (-1.55822e-083)}
; Y = -1.317320036036622621367087049293331801891326904296875p-720 {- 1429082396051726 -720 (-2.38833e-217)}
; Z = -1.345464723956042885077977189212106168270111083984375p-560 {- 1555834802078086 -560 (-3.56512e-169)}
; -1.8919441282023841122139629078446887433528900146484375p-276 x -1.317320036036622621367087049293331801891326904296875p-720 -1.345464723956042885077977189212106168270111083984375p-560 == -1.3454647239560426630333722641807980835437774658203125p-560
; [HW: -1.3454647239560426630333722641807980835437774658203125p-560] 

; mpf : - 1555834802078085 -560
; mpfd: - 1555834802078085 -560 (-3.56512e-169) class: Neg. norm. non-zero
; hwf : - 1555834802078085 -560 (-3.56512e-169) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011101011 #b1110010001010110011100110100110001111101000011000111)))
(assert (= y (fp #b1 #b00100101111 #b0101000100111011111000101100100100100100100100001110)))
(assert (= z (fp #b1 #b00111001111 #b0101100001110000011000000100101101010000000110000110)))
(assert (= r (fp #b1 #b00111001111 #b0101100001110000011000000100101101010000000110000101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
