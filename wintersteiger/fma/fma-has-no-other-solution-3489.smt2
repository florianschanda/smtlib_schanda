(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.790238920434683134175202212645672261714935302734375p-234 {+ 3558919707603302 -234 (6.48473e-071)}
; Y = 1.2638450251555710668327492385287769138813018798828125p800 {+ 1188252356974189 800 (8.42734e+240)}
; Z = 1.93099780831939948910758175770752131938934326171875p-297 {+ 4192841382629996 -297 (7.58356e-090)}
; 1.790238920434683134175202212645672261714935302734375p-234 x 1.2638450251555710668327492385287769138813018798828125p800 1.93099780831939948910758175770752131938934326171875p-297 == 1.131292276715627043159884124179370701313018798828125p567
; [HW: 1.131292276715627043159884124179370701313018798828125p567] 

; mpf : + 591287848493122 567
; mpfd: + 591287848493122 567 (5.4649e+170) class: Pos. norm. non-zero
; hwf : + 591287848493122 567 (5.4649e+170) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100010101 #b1100101001001101000110010000111101001011000101100110)))
(assert (= y (fp #b0 #b11100011111 #b0100001110001011010110001111101001000001011001101101)))
(assert (= z (fp #b0 #b01011010110 #b1110111001010101110111110101001101100001001001101100)))
(assert (= r (fp #b0 #b11000110110 #b0010000110011100010111101110001010110110000001000010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
