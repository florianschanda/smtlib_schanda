(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2578426024720459341921241502859629690647125244140625p645 {- 1161219848413345 645 (-1.83643e+194)}
; Y = -1.721876586727603353210724890232086181640625p169 {- 3251043126993920 169 (-1.28846e+051)}
; Z = 1.1230585019285788117571200928068719804286956787109375p-172 {+ 554206223430319 -172 (1.87604e-052)}
; -1.2578426024720459341921241502859629690647125244140625p645 x -1.721876586727603353210724890232086181640625p169 1.1230585019285788117571200928068719804286956787109375p-172 == 1.082924863492566114331339122145436704158782958984375p815
; [HW: 1.082924863492566114331339122145436704158782958984375p815] 

; mpf : + 373460384324870 815
; mpfd: + 373460384324870 815 (2.36616e+245) class: Pos. norm. non-zero
; hwf : + 373460384324870 815 (2.36616e+245) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010000100 #b0100001000000001111110010000100100100010000010100001)))
(assert (= y (fp #b1 #b10010101000 #b1011100011001100111001110110101110111110010000000000)))
(assert (= z (fp #b0 #b01101010011 #b0001111110000000110000110001000101000111001010101111)))
(assert (= r (fp #b0 #b11100101110 #b0001010100111010100100000101100010111001110100000110)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
