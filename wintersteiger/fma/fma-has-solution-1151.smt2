(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.837877731285602944666379698901437222957611083984375p447 {- 3773465838399878 447 (-6.6792e+134)}
; Y = 1.706885130184617072046648900141008198261260986328125p70 {+ 3183527608893186 70 (2.01513e+021)}
; Z = 1.794216522827450699395512856426648795604705810546875p-439 {+ 3576833236257198 -439 (1.26388e-132)}
; -1.837877731285602944666379698901437222957611083984375p447 x 1.706885130184617072046648900141008198261260986328125p70 1.794216522827450699395512856426648795604705810546875p-439 == -1.56852308531441764216651790775358676910400390625p518
; [HW: -1.56852308531441764216651790775358676910400390625p518] 

; mpf : - 2560400355173536 518
; mpfd: - 2560400355173536 518 (-1.34595e+156) class: Neg. norm. non-zero
; hwf : - 2560400355173536 518 (-1.34595e+156) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110111110 #b1101011001111111001001111010110111101011000110000110)))
(assert (= y (fp #b0 #b10001000101 #b1011010011110110011011001000010000101011111100000010)))
(assert (= z (fp #b0 #b01001001000 #b1100101101010001110001100010011101111100100110101110)))
(assert (= r (fp #b1 #b11000000101 #b1001000110001010101110101001101001110010010010100000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
