(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0304732887020453535598107919213362038135528564453125p577 {+ 137239491643285 577 (5.09735e+173)}
; Y = -1.238805533120519886125521225039847195148468017578125p-417 {- 1075484509975586 -417 (-3.66012e-126)}
; Z = +zero {+ 0 -1023 (0)}
; 1.0304732887020453535598107919213362038135528564453125p577 x -1.238805533120519886125521225039847195148468017578125p-417 +zero == -1.2765560117769927384046013685292564332485198974609375p160
; [HW: -1.2765560117769927384046013685292564332485198974609375p160] 

; mpf : - 1245497551585935 160
; mpfd: - 1245497551585935 160 (-1.86569e+048) class: Neg. norm. non-zero
; hwf : - 1245497551585935 160 (-1.86569e+048) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001000000 #b0000011111001101000110001111001001100000011110010101)))
(assert (= y (fp #b1 #b01001011110 #b0011110100100010010111000000001011011011010000100010)))
(assert (= z (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= r (fp #b1 #b10010011111 #b0100011011001100010111111111001000011000001010001111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
