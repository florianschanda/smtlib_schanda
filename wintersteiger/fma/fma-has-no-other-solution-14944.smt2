(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3951077917095873193176203130860812962055206298828125p-998 {+ 1779407303514477 -998 (5.20801e-301)}
; Y = -1.7226174312412474431965847543324343860149383544921875p191 {- 3254379594069507 191 (-5.40652e+057)}
; Z = -1.3802115253889863932812431812635622918605804443359375p134 {- 1712320484063807 134 (-3.00583e+040)}
; 1.3951077917095873193176203130860812962055206298828125p-998 x -1.7226174312412474431965847543324343860149383544921875p191 -1.3802115253889863932812431812635622918605804443359375p134 == -1.3802115253889863932812431812635622918605804443359375p134
; [HW: -1.3802115253889863932812431812635622918605804443359375p134] 

; mpf : - 1712320484063807 134
; mpfd: - 1712320484063807 134 (-3.00583e+040) class: Neg. norm. non-zero
; hwf : - 1712320484063807 134 (-3.00583e+040) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000011001 #b0110010100100101110010001100001111001001100101101101)))
(assert (= y (fp #b1 #b10010111110 #b1011100011111101011101001011101010110011011000000011)))
(assert (= z (fp #b1 #b10010000101 #b0110000101010101100010101110001100011011101000111111)))
(assert (= r (fp #b1 #b10010000101 #b0110000101010101100010101110001100011011101000111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
