(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.54552404609508808874807073152624070644378662109375p-761 {+ 2456821890715484 -761 (1.27423e-229)}
; Y = 1.31072397696281228718362399376928806304931640625p-445 {+ 1399376386864800 -445 (1.44266e-134)}
; Z = -1.129594086368895577976445565582253038883209228515625p808 {- 583639879080378 808 (-1.92823e+243)}
; 1.54552404609508808874807073152624070644378662109375p-761 x 1.31072397696281228718362399376928806304931640625p-445 -1.129594086368895577976445565582253038883209228515625p808 == -1.129594086368895577976445565582253038883209228515625p808
; [HW: -1.129594086368895577976445565582253038883209228515625p808] 

; mpf : - 583639879080378 808
; mpfd: - 583639879080378 808 (-1.92823e+243) class: Neg. norm. non-zero
; hwf : - 583639879080378 808 (-1.92823e+243) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100000110 #b1000101110100111011101101100000100101000111101011100)))
(assert (= y (fp #b0 #b01001000010 #b0100111110001011100110110100011100100011011010100000)))
(assert (= z (fp #b1 #b11100100111 #b0010000100101101000100111111101010110101100110111010)))
(assert (= r (fp #b1 #b11100100111 #b0010000100101101000100111111101010110101100110111010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
