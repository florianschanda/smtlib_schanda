(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3297938878626724967801919774501584470272064208984375p-956 {+ 1485259630487399 -956 (2.18328e-288)}
; Y = 1.2810661836282779546536403358913958072662353515625p270 {+ 1265809559854760 270 (2.43036e+081)}
; Z = -1.8498326282451345026203171073575504124164581298828125p-490 {- 3827305907892077 -490 (-5.78675e-148)}
; 1.3297938878626724967801919774501584470272064208984375p-956 x 1.2810661836282779546536403358913958072662353515625p270 -1.8498326282451345026203171073575504124164581298828125p-490 == -1.84983262824513428057571218232624232769012451171875p-490
; [HW: -1.84983262824513428057571218232624232769012451171875p-490] 

; mpf : - 3827305907892076 -490
; mpfd: - 3827305907892076 -490 (-5.78675e-148) class: Neg. norm. non-zero
; hwf : - 3827305907892076 -490 (-5.78675e-148) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001000011 #b0101010001101101010111110100101011001010011101100111)))
(assert (= y (fp #b0 #b10100001101 #b0100011111110011111101000001001010110001111010101000)))
(assert (= z (fp #b1 #b01000010101 #b1101100110001110101000011001000101100010111101101101)))
(assert (= r (fp #b1 #b01000010101 #b1101100110001110101000011001000101100010111101101100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
