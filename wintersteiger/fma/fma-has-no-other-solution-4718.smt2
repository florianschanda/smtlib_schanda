(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4582383184848592971860625766566954553127288818359375p478 {- 2063721920375295 478 (-1.13806e+144)}
; Y = 1.3112700526395422162551085421000607311725616455078125p-77 {+ 1401835693079037 -77 (8.67726e-024)}
; Z = 1.17545464341092031901325754006393253803253173828125p-765 {+ 790177466685844 -765 (6.05702e-231)}
; -1.4582383184848592971860625766566954553127288818359375p478 x 1.3112700526395422162551085421000607311725616455078125p-77 1.17545464341092031901325754006393253803253173828125p-765 == -1.9121442366406389279376298873103223741054534912109375p401
; [HW: -1.9121442366406389279376298873103223741054534912109375p401] 

; mpf : - 4107932444242927 401
; mpfd: - 4107932444242927 401 (-9.87527e+120) class: Neg. norm. non-zero
; hwf : - 4107932444242927 401 (-9.87527e+120) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111011101 #b0111010101001111000110110011111110101010100111111111)))
(assert (= y (fp #b0 #b01110110010 #b0100111110101111011001001110100001001111100111111101)))
(assert (= z (fp #b0 #b00100000010 #b0010110011101010100110000111001101100001100110010100)))
(assert (= r (fp #b1 #b10110010000 #b1110100110000010010010001110000110011011001111101111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
