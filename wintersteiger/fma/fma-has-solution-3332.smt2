(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.035927205823427232900257877190597355365753173828125p401 {+ 161801750758850 401 (5.35005e+120)}
; Y = -1.7909489991682352449942072780686430633068084716796875p304 {- 3562117617923131 304 (-5.83716e+091)}
; Z = 1.0619717538105266640968693536706268787384033203125p169 {+ 279095967368584 169 (7.94662e+050)}
; 1.035927205823427232900257877190597355365753173828125p401 x -1.7909489991682352449942072780686430633068084716796875p304 1.0619717538105266640968693536706268787384033203125p169 == -1.8552927924806132953250425998703576624393463134765625p705
; [HW: -1.8552927924806132953250425998703576624393463134765625p705] 

; mpf : - 3851896301508361 705
; mpfd: - 3851896301508361 705 (-3.12291e+212) class: Neg. norm. non-zero
; hwf : - 3851896301508361 705 (-3.12291e+212) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110010000 #b0000100100110010100001100111111000001100010111000010)))
(assert (= y (fp #b1 #b10100101111 #b1100101001111011101000100011010000111011010000111011)))
(assert (= z (fp #b0 #b10010101000 #b0000111111011101011000010111111111100100010110001000)))
(assert (= r (fp #b1 #b11011000000 #b1101101011110100011101111110110000110101011100001001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
