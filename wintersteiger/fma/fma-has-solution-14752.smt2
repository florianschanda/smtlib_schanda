(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8340692568125629424713451953721232712268829345703125p-898 {- 3756313994182245 -898 (-8.6792e-271)}
; Y = 1.312262865060882521817120505147613584995269775390625p-736 {+ 1406306922729834 -736 (3.63031e-222)}
; Z = -1.8716473053790687597341957371099852025508880615234375p-614 {- 3925550479703671 -614 (-2.753e-185)}
; -1.8340692568125629424713451953721232712268829345703125p-898 x 1.312262865060882521817120505147613584995269775390625p-736 -1.8716473053790687597341957371099852025508880615234375p-614 == -1.8716473053790687597341957371099852025508880615234375p-614
; [HW: -1.8716473053790687597341957371099852025508880615234375p-614] 

; mpf : - 3925550479703671 -614
; mpfd: - 3925550479703671 -614 (-2.753e-185) class: Neg. norm. non-zero
; hwf : - 3925550479703671 -614 (-2.753e-185) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001111101 #b1101010110000101100100000001010010011011111001100101)))
(assert (= y (fp #b0 #b00100011111 #b0100111111110000011101011000100100110001000101101010)))
(assert (= z (fp #b1 #b00110011001 #b1101111100100100010001110001111000111111111001110111)))
(assert (= r (fp #b1 #b00110011001 #b1101111100100100010001110001111000111111111001110111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
