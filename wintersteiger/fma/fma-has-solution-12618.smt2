(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2807499435524543063280589194619096815586090087890625p-86 {- 1264385341167121 -86 (-1.65533e-026)}
; Y = -1.33773425836619441753327919286675751209259033203125p-988 {- 1521019880128244 -988 (-5.11369e-298)}
; Z = 1.703106519245972005904832258238457143306732177734375p743 {+ 3166510258077926 743 (7.88004e+223)}
; -1.2807499435524543063280589194619096815586090087890625p-86 x -1.33773425836619441753327919286675751209259033203125p-988 1.703106519245972005904832258238457143306732177734375p743 == 1.7031065192459722279494371832697652280330657958984375p743
; [HW: 1.7031065192459722279494371832697652280330657958984375p743] 

; mpf : + 3166510258077927 743
; mpfd: + 3166510258077927 743 (7.88004e+223) class: Pos. norm. non-zero
; hwf : + 3166510258077927 743 (7.88004e+223) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110101001 #b0100011111011111001110100111000111101001011000010001)))
(assert (= y (fp #b1 #b00000100011 #b0101011001110101110000001001101001101011111011110100)))
(assert (= z (fp #b0 #b11011100110 #b1011001111111110110010011111000111000100000011100110)))
(assert (= r (fp #b0 #b11011100110 #b1011001111111110110010011111000111000100000011100111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
