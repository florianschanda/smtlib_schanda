(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1179397133612258841139919240958988666534423828125p-60 {+ 531153249145800 -60 (9.69658e-019)}
; Y = 1.646637111642536677180714832502417266368865966796875p83 {+ 2912194655037262 83 (1.59253e+025)}
; Z = 1.8390858012752051564575594966299831867218017578125p-597 {+ 3778906501954888 -597 (3.54564e-180)}
; 1.1179397133612258841139919240958988666534423828125p-60 x 1.646637111642536677180714832502417266368865966796875p83 1.8390858012752051564575594966299831867218017578125p-597 == 1.840841020599614186181725017377175390720367431640625p23
; [HW: 1.840841020599614186181725017377175390720367431640625p23] 

; mpf : + 3786811307050250 23
; mpfd: + 3786811307050250 23 (1.54421e+007) class: Pos. norm. non-zero
; hwf : + 3786811307050250 23 (1.54421e+007) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000011 #b0001111000110001010011000000101111001001001111001000)))
(assert (= y (fp #b0 #b10001010010 #b1010010110001010000000100111111011100010011101001110)))
(assert (= z (fp #b0 #b00110101010 #b1101011011001110010100111011101100000011110101001000)))
(assert (= r (fp #b0 #b10000010110 #b1101011101000001010110110110110010011100010100001010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
