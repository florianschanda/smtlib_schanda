(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.615393354683086979406425598426721990108489990234375p396 {- 2771485282837030 396 (-2.60709e+119)}
; Y = -1.90630540343466492458901484496891498565673828125p-463 {- 4081636677192224 -463 (-8.00395e-140)}
; Z = 1.1380529828766066113843180573894642293453216552734375p-296 {+ 621735362240471 -296 (8.93889e-090)}
; -1.615393354683086979406425598426721990108489990234375p396 x -1.90630540343466492458901484496891498565673828125p-463 1.1380529828766066113843180573894642293453216552734375p-296 == 1.53971654035240934632611242705024778842926025390625p-66
; [HW: 1.53971654035240934632611242705024778842926025390625p-66] 

; mpf : + 2430667210016804 -66
; mpfd: + 2430667210016804 -66 (2.08671e-020) class: Pos. norm. non-zero
; hwf : + 2430667210016804 -66 (2.08671e-020) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110001011 #b1001110110001010011010110011110010001010001000100110)))
(assert (= y (fp #b1 #b01000110000 #b1110100000000011101000011000001111110000101000100000)))
(assert (= z (fp #b0 #b01011010111 #b0010001101010111011100001011011010010001111111010111)))
(assert (= r (fp #b0 #b01110111101 #b1000101000101010110111001111100111101100100000100100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
