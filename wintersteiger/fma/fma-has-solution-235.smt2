(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.072532609218102006565231931745074689388275146484375p122 {- 326657831846854 122 (-5.70256e+036)}
; Y = -1.0762444394562604710330333546153269708156585693359375p155 {- 343374429124287 155 (-4.91542e+046)}
; Z = -1.8117522657623530424331192989484407007694244384765625p760 {- 3655807201604489 760 (-1.09874e+229)}
; -1.072532609218102006565231931745074689388275146484375p122 x -1.0762444394562604710330333546153269708156585693359375p155 -1.8117522657623530424331192989484407007694244384765625p760 == -1.8117522657623528203885143739171326160430908203125p760
; [HW: -1.8117522657623528203885143739171326160430908203125p760] 

; mpf : - 3655807201604488 760
; mpfd: - 3655807201604488 760 (-1.09874e+229) class: Neg. norm. non-zero
; hwf : - 3655807201604488 760 (-1.09874e+229) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001111001 #b0001001010010001011111110100000001111100001111000110)))
(assert (= y (fp #b1 #b10010011010 #b0001001110000100110000010110110111110111011010111111)))
(assert (= z (fp #b1 #b11011110111 #b1100111111001110111111110001100111100111001110001001)))
(assert (= r (fp #b1 #b11011110111 #b1100111111001110111111110001100111100111001110001000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
