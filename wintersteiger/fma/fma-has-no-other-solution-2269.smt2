(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2300066398639568632233931566588580608367919921875p-969 {+ 1035857817584056 -969 (2.46514e-292)}
; Y = 1.7809853356075489028143010727944783866405487060546875p-1009 {+ 3517245266423979 -1009 (3.24635e-304)}
; Z = 1.3068129080583303913698500764439813792705535888671875p-481 {+ 1381762498403955 -481 (2.09308e-145)}
; 1.2300066398639568632233931566588580608367919921875p-969 x 1.7809853356075489028143010727944783866405487060546875p-1009 1.3068129080583303913698500764439813792705535888671875p-481 == 1.3068129080583303913698500764439813792705535888671875p-481
; [HW: 1.3068129080583303913698500764439813792705535888671875p-481] 

; mpf : + 1381762498403955 -481
; mpfd: + 1381762498403955 -481 (2.09308e-145) class: Pos. norm. non-zero
; hwf : + 1381762498403955 -481 (2.09308e-145) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000110110 #b0011101011100001101101110001010000010100000110111000)))
(assert (= y (fp #b0 #b00000001110 #b1100011111101110101001111010101100010111000010101011)))
(assert (= z (fp #b0 #b01000011110 #b0100111010001011010010100110111000011001111001110011)))
(assert (= r (fp #b0 #b01000011110 #b0100111010001011010010100110111000011001111001110011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
