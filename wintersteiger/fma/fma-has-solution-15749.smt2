(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6578314991054583504848096708883531391620635986328125p820 {+ 2962609694243917 820 (1.15914e+247)}
; Y = 1.235178399932696180485436343587934970855712890625p-206 {+ 1059149354302480 -206 (1.20102e-062)}
; Z = -1.0280823032327053301315800126758404076099395751953125p-447 {- 126471450374517 -447 (-2.82891e-135)}
; 1.6578314991054583504848096708883531391620635986328125p820 x 1.235178399932696180485436343587934970855712890625p-206 -1.0280823032327053301315800126758404076099395751953125p-447 == 1.0238588292115513578295349361724220216274261474609375p615
; [HW: 1.0238588292115513578295349361724220216274261474609375p615] 

; mpf : + 107450614346639 615
; mpfd: + 107450614346639 615 (1.39215e+185) class: Pos. norm. non-zero
; hwf : + 107450614346639 615 (1.39215e+185) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100110011 #b1010100001100111101001010010011011101111110001001101)))
(assert (= y (fp #b0 #b01100110001 #b0011110000110100101001101101000001101111110000010000)))
(assert (= z (fp #b1 #b01001000000 #b0000011100110000011001101101110111111011000101110101)))
(assert (= r (fp #b0 #b11001100110 #b0000011000011011100111001011101100101111001110001111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
