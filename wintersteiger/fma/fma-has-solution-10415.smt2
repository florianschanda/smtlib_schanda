(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4040489093779389140337343633291311562061309814453125p54 {+ 1819674517713941 54 (2.52931e+016)}
; Y = 1.8560456623889660665582823639851994812488555908203125p-338 {+ 3855286926147077 -338 (3.31474e-102)}
; Z = 1.66432626779580861153817750164307653903961181640625p-333 {+ 2991859532097636 -333 (9.51152e-101)}
; 1.4040489093779389140337343633291311562061309814453125p54 x 1.8560456623889660665582823639851994812488555908203125p-338 1.66432626779580861153817750164307653903961181640625p-333 == 1.30298944401644245516536102513782680034637451171875p-283
; [HW: 1.30298944401644245516536102513782680034637451171875p-283] 

; mpf : + 1364543147169644 -283
; mpfd: + 1364543147169644 -283 (8.38402e-086) class: Pos. norm. non-zero
; hwf : + 1364543147169644 -283 (8.38402e-086) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000110101 #b0110011101101111101111111101001111000011010000010101)))
(assert (= y (fp #b0 #b01010101101 #b1101101100100101110011101111101111010111111000000101)))
(assert (= z (fp #b0 #b01010110010 #b1010101000010001010010010100101000001110100001100100)))
(assert (= r (fp #b0 #b01011100100 #b0100110110010000101101110101100100010101011101101100)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
