(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.952492394340685333276042001671157777309417724609375p-599 {+ 4289644392225942 -599 (9.4107e-181)}
; Y = 1.52077550441040987294627484516240656375885009765625p-909 {+ 2345364367606404 -909 (3.51398e-274)}
; Z = 1.3439453323730619072051695184200070798397064208984375p221 {+ 1548992070711143 221 (4.52909e+066)}
; 1.952492394340685333276042001671157777309417724609375p-599 x 1.52077550441040987294627484516240656375885009765625p-909 1.3439453323730619072051695184200070798397064208984375p221 == 1.3439453323730619072051695184200070798397064208984375p221
; [HW: 1.3439453323730619072051695184200070798397064208984375p221] 

; mpf : + 1548992070711143 221
; mpfd: + 1548992070711143 221 (4.52909e+066) class: Pos. norm. non-zero
; hwf : + 1548992070711143 221 (4.52909e+066) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101000 #b1111001111010110100010101010001101100001110010010110)))
(assert (= y (fp #b0 #b00001110010 #b1000010101010001100010110010000000000000001010000100)))
(assert (= z (fp #b0 #b10011011100 #b0101100000001100110011010010001000100111011101100111)))
(assert (= r (fp #b0 #b10011011100 #b0101100000001100110011010010001000100111011101100111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
