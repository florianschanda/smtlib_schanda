(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.635078783864377438561632516211830079555511474609375p-156 {+ 2860140574362518 -156 (1.79003e-047)}
; Y = 1.650541220246695583995233391760848462581634521484375p-846 {+ 2929777197092166 -846 (3.51763e-255)}
; Z = 1.67000361575131162084062452777288854122161865234375p-409 {+ 3017428034234492 -409 (1.26313e-123)}
; 1.635078783864377438561632516211830079555511474609375p-156 x 1.650541220246695583995233391760848462581634521484375p-846 1.67000361575131162084062452777288854122161865234375p-409 == 1.67000361575131162084062452777288854122161865234375p-409
; [HW: 1.67000361575131162084062452777288854122161865234375p-409] 

; mpf : + 3017428034234492 -409
; mpfd: + 3017428034234492 -409 (1.26313e-123) class: Pos. norm. non-zero
; hwf : + 3017428034234492 -409 (1.26313e-123) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101100011 #b1010001010010100100001011110111100010100101110010110)))
(assert (= y (fp #b0 #b00010110001 #b1010011010001001110111101001000110101000110101000110)))
(assert (= z (fp #b0 #b01001100110 #b1010101110000101010110110110000111011010100001111100)))
(assert (= r (fp #b0 #b01001100110 #b1010101110000101010110110110000111011010100001111100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
