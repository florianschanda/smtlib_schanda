(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.48308017780854139999746621469967067241668701171875p-332 {+ 2175599708768620 -332 (1.69514e-100)}
; Y = 1.3210386246836265389248410428990609943866729736328125p912 {+ 1445829430496717 912 (4.57374e+274)}
; Z = 1.3764947161039990941588939676876179873943328857421875p-645 {+ 1695581463152931 -645 (9.42817e-195)}
; 1.48308017780854139999746621469967067241668701171875p-332 x 1.3210386246836265389248410428990609943866729736328125p912 1.3764947161039990941588939676876179873943328857421875p-645 == 1.9592061983877437914003394325845874845981597900390625p580
; [HW: 1.9592061983877437914003394325845874845981597900390625p580] 

; mpf : + 4319880677630513 580
; mpfd: + 4319880677630513 580 (7.75314e+174) class: Pos. norm. non-zero
; hwf : + 4319880677630513 580 (7.75314e+174) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010110011 #b0111101110101011001001000111110100001000100101101100)))
(assert (= y (fp #b0 #b11110001111 #b0101001000101111100101100101100111000100110111001101)))
(assert (= z (fp #b0 #b00101111010 #b0110000001100001111101010010110011001000100100100011)))
(assert (= r (fp #b0 #b11001000011 #b1111010110001110100010011001010000110010001000110001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
