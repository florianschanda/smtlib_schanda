(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.014771464742464157637868993333540856838226318359375p-122 {+ 66524763109878 -122 (1.90857e-037)}
; Y = -1.5989384509827078151289470042684115469455718994140625p488 {- 2697378984663585 488 (-1.27782e+147)}
; Z = -1.7037087338825411819698274484835565090179443359375p580 {- 3169222391690776 580 (-6.74206e+174)}
; 1.014771464742464157637868993333540856838226318359375p-122 x -1.5989384509827078151289470042684115469455718994140625p488 -1.7037087338825411819698274484835565090179443359375p580 == -1.7037087338825411819698274484835565090179443359375p580
; [HW: -1.7037087338825411819698274484835565090179443359375p580] 

; mpf : - 3169222391690776 580
; mpfd: - 3169222391690776 580 (-6.74206e+174) class: Neg. norm. non-zero
; hwf : - 3169222391690776 580 (-6.74206e+174) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110000101 #b0000001111001000000100000000110111111011100111110110)))
(assert (= y (fp #b1 #b10111100111 #b1001100101010100000001111100001101001001101000100001)))
(assert (= z (fp #b1 #b11001000011 #b1011010000100110010000010110110111101111011000011000)))
(assert (= r (fp #b1 #b11001000011 #b1011010000100110010000010110110111101111011000011000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
