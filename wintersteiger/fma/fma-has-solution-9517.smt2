(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.64919877256993441250187970581464469432830810546875p463 {- 2923731350235340 463 (-3.92791e+139)}
; Y = -1.3513180287977479832051130870240740478038787841796875p1008 {- 1582195743582075 1008 (-3.70675e+303)}
; Z = 1.8347205238325641207808303079218603670597076416015625p929 {+ 3759247040090841 929 (8.32599e+279)}
; -1.64919877256993441250187970581464469432830810546875p463 x -1.3513180287977479832051130870240740478038787841796875p1008 1.8347205238325641207808303079218603670597076416015625p929 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111001110 #b1010011000110001111001000000100011001010100011001100)))
(assert (= y (fp #b1 #b11111101111 #b0101100111101111111110100111010000101110011101111011)))
(assert (= z (fp #b0 #b11110100000 #b1101010110110000001111101000011100101001001011011001)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
