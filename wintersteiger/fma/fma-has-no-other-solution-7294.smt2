(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3111664089126942034368994427495636045932769775390625p599 {- 1401368923229425 599 (-2.72035e+180)}
; Y = 1.7695927914644091760720812089857645332813262939453125p56 {+ 3465937808866133 56 (1.27513e+017)}
; Z = -1.6483738485647931870659022024483419954776763916015625p-98 {- 2920016222793177 -98 (-5.20135e-030)}
; -1.3111664089126942034368994427495636045932769775390625p599 x 1.7695927914644091760720812089857645332813262939453125p56 -1.6483738485647931870659022024483419954776763916015625p-98 == -1.1601153128110899270808431538171134889125823974609375p656
; [HW: -1.1601153128110899270808431538171134889125823974609375p656] 

; mpf : - 721095263112335 656
; mpfd: - 721095263112335 656 (-3.46879e+197) class: Neg. norm. non-zero
; hwf : - 721095263112335 656 (-3.46879e+197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010110 #b0100111110101000100110100000110111100100110011110001)))
(assert (= y (fp #b0 #b10000110111 #b1100010100000100000010000111111010010011101101010101)))
(assert (= z (fp #b1 #b01110011101 #b1010010111111011110101000001101100101010110111011001)))
(assert (= r (fp #b1 #b11010001111 #b0010100011111101010100010011000000011100110010001111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
