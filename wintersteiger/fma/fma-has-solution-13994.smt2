(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 0.0849348348821623577720174580463208258152008056640625p-1022 {+ 382512490726081 -1023 (1.88986e-309)}
; Y = 1.920907983112978723028163585695438086986541748046875p-896 {+ 4147400849590126 -896 (3.63606e-270)}
; Z = -1.2495568190973311839542247980716638267040252685546875p-241 {- 1123903997494507 -241 (-3.53612e-073)}
; 0.0849348348821623577720174580463208258152008056640625p-1022 x 1.920907983112978723028163585695438086986541748046875p-896 -1.2495568190973311839542247980716638267040252685546875p-241 == -1.2495568190973311839542247980716638267040252685546875p-241
; [HW: -1.2495568190973311839542247980716638267040252685546875p-241] 

; mpf : - 1123903997494507 -241
; mpfd: - 1123903997494507 -241 (-3.53612e-073) class: Neg. norm. non-zero
; hwf : - 1123903997494507 -241 (-3.53612e-073) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0001010110111110010010100001001000011100001011000001)))
(assert (= y (fp #b0 #b00001111111 #b1110101111000000101000000010011000011000011101101110)))
(assert (= z (fp #b1 #b01100001110 #b0011111111100010111101001010100010000100010011101011)))
(assert (= r (fp #b1 #b01100001110 #b0011111111100010111101001010100010000100010011101011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
