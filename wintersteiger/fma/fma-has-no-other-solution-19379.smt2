(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4383806810267112386014787261956371366977691650390625p-642 {+ 1974291071718321 -642 (7.88164e-194)}
; Y = -1.23956758051295157230242693913169205188751220703125p-418 {- 1078916466328180 -418 (-1.83118e-126)}
; Z = -1.516866978341218530346168336109258234500885009765625p966 {- 2327761931057626 966 (-9.4607e+290)}
; 1.4383806810267112386014787261956371366977691650390625p-642 x -1.23956758051295157230242693913169205188751220703125p-418 -1.516866978341218530346168336109258234500885009765625p966 == -1.5168669783412187523907732611405663192272186279296875p966
; [HW: -1.5168669783412187523907732611405663192272186279296875p966] 

; mpf : - 2327761931057627 966
; mpfd: - 2327761931057627 966 (-9.4607e+290) class: Neg. norm. non-zero
; hwf : - 2327761931057627 966 (-9.4607e+290) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101111101 #b0111000000111001101101110110000000110101001110110001)))
(assert (= y (fp #b1 #b01001011101 #b0011110101010100010011010000101101111100001001110100)))
(assert (= z (fp #b1 #b11111000101 #b1000010001010001011001001111000001011011100111011010)))
(assert (= r (fp #b1 #b11111000101 #b1000010001010001011001001111000001011011100111011011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
