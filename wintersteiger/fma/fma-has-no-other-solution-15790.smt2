(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.609780794124273217704512717318721115589141845703125p320 {+ 2746208557195762 320 (3.43847e+096)}
; Y = -1.7498617268006153580017780768685042858123779296875p-259 {- 3377076993398648 -259 (-1.88901e-078)}
; Z = 1.837467970110833181962561866384930908679962158203125p-83 {+ 3771620438125874 -83 (1.8999e-025)}
; 1.609780794124273217704512717318721115589141845703125p320 x -1.7498617268006153580017780768685042858123779296875p-259 1.837467970110833181962561866384930908679962158203125p-83 == -1.4084469000883832467962974988040514290332794189453125p62
; [HW: -1.4084469000883832467962974988040514290332794189453125p62] 

; mpf : - 1839481307038677 62
; mpfd: - 1839481307038677 62 (-6.49531e+018) class: Neg. norm. non-zero
; hwf : - 1839481307038677 62 (-6.49531e+018) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100111111 #b1001110000011010100110000001100001111110000111110010)))
(assert (= y (fp #b1 #b01011111100 #b1011111111110110111100000010100100100001011101111000)))
(assert (= z (fp #b0 #b01110101100 #b1101011001100100010011010000011100010010110100110010)))
(assert (= r (fp #b1 #b10000111101 #b0110100010001111111110011101111000001000001111010101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
