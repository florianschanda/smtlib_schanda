(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.215509556143519187543233783799223601818084716796875p-146 {- 970568756742734 -146 (-1.36263e-044)}
; Y = 1.3029790234968230411283229841501452028751373291015625p-982 {+ 1364496217321369 -982 (3.18773e-296)}
; Z = 1.248836725188954943632779759354889392852783203125p-670 {+ 1120660982837072 -670 (2.54923e-202)}
; -1.215509556143519187543233783799223601818084716796875p-146 x 1.3029790234968230411283229841501452028751373291015625p-982 1.248836725188954943632779759354889392852783203125p-670 == 1.248836725188954943632779759354889392852783203125p-670
; [HW: 1.248836725188954943632779759354889392852783203125p-670] 

; mpf : + 1120660982837072 -670
; mpfd: + 1120660982837072 -670 (2.54923e-202) class: Pos. norm. non-zero
; hwf : + 1120660982837072 -670 (2.54923e-202) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101101101 #b0011011100101011101000100101111110011100101001001110)))
(assert (= y (fp #b0 #b00000101001 #b0100110110010000000010001000010101001010111110011001)))
(assert (= z (fp #b0 #b00101100001 #b0011111110110011110000110111110010111010111101010000)))
(assert (= r (fp #b0 #b00101100001 #b0011111110110011110000110111110010111010111101010000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
