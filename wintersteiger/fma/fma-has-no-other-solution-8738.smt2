(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4553447752559012240425317941117100417613983154296875p-287 {- 2050690560167579 -287 (-5.85271e-087)}
; Y = -1.62104892627258490023223203024826943874359130859375p34 {- 2796955712940060 34 (-2.78494e+010)}
; Z = -1.7717087532096247315394066390581429004669189453125p-999 {- 3475467253393416 -999 (-3.30694e-301)}
; -1.4553447752559012240425317941117100417613983154296875p-287 x -1.62104892627258490023223203024826943874359130859375p34 -1.7717087532096247315394066390581429004669189453125p-999 == 1.1795925426424975768213698756881058216094970703125p-252
; [HW: 1.1795925426424975768213698756881058216094970703125p-252] 

; mpf : + 808812908123272 -252
; mpfd: + 808812908123272 -252 (1.62995e-076) class: Pos. norm. non-zero
; hwf : + 808812908123272 -252 (1.62995e-076) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100000 #b0111010010010001011110011010011000100000111010011011)))
(assert (= y (fp #b1 #b10000100001 #b1001111011111101000011111111101110001110100000011100)))
(assert (= z (fp #b1 #b00000011000 #b1100010110001110101101000111000100010010100000001000)))
(assert (= r (fp #b0 #b01100000011 #b0010110111111001110001101110000101000001010010001000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
