(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.530074137942017298286145887686870992183685302734375p-337 {+ 2387241690114406 -337 (5.46517e-102)}
; Y = 1.8295665179898386032419921320979483425617218017578125p-102 {+ 3736035461298077 -102 (3.60818e-031)}
; Z = 1.6541664865850942423008973491960205137729644775390625p490 {+ 2946103945222897 490 (5.28783e+147)}
; 1.530074137942017298286145887686870992183685302734375p-337 x 1.8295665179898386032419921320979483425617218017578125p-102 1.6541664865850942423008973491960205137729644775390625p490 == 1.6541664865850942423008973491960205137729644775390625p490
; [HW: 1.6541664865850942423008973491960205137729644775390625p490] 

; mpf : + 2946103945222897 490
; mpfd: + 2946103945222897 490 (5.28783e+147) class: Pos. norm. non-zero
; hwf : + 2946103945222897 490 (5.28783e+147) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010101110 #b1000011110110010111100000100111011101010100101100110)))
(assert (= y (fp #b0 #b01110011001 #b1101010001011110011110001010100010011111011110011101)))
(assert (= z (fp #b0 #b10111101001 #b1010011101110111011101000111001000000101101011110001)))
(assert (= r (fp #b0 #b10111101001 #b1010011101110111011101000111001000000101101011110001)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
