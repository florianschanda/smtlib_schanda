(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8107213669078985329718989305547438561916351318359375p975 {- 3651164445907711 975 (-5.78226e+293)}
; Y = +zero {+ 0 -1023 (0)}
; Z = 1.644309689828583831427977202110923826694488525390625p-230 {+ 2901712879023210 -230 (9.52982e-070)}
; -1.8107213669078985329718989305547438561916351318359375p975 x +zero 1.644309689828583831427977202110923826694488525390625p-230 == 1.644309689828583831427977202110923826694488525390625p-230
; [HW: 1.644309689828583831427977202110923826694488525390625p-230] 

; mpf : + 2901712879023210 -230
; mpfd: + 2901712879023210 -230 (9.52982e-070) class: Pos. norm. non-zero
; hwf : + 2901712879023210 -230 (9.52982e-070) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111001110 #b1100111110001011011011110111110100001001101011111111)))
(assert (= y (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= z (fp #b0 #b01100011001 #b1010010011110001011110101101011001001111010001101010)))
(assert (= r (fp #b0 #b01100011001 #b1010010011110001011110101101011001001111010001101010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
