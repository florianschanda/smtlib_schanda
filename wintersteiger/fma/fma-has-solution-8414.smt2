(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.15444704793829799882587394677102565765380859375p282 {+ 695567667543392 282 (8.97083e+084)}
; Y = -1.449902924301143425367399686365388333797454833984375p-555 {- 2026182642235526 -555 (-1.22939e-167)}
; Z = 1.94553252395855569290006314986385405063629150390625p835 {+ 4258299922566436 835 (4.45743e+251)}
; 1.15444704793829799882587394677102565765380859375p282 x -1.449902924301143425367399686365388333797454833984375p-555 1.94553252395855569290006314986385405063629150390625p835 == 1.9455325239585554708554582248325459659099578857421875p835
; [HW: 1.9455325239585554708554582248325459659099578857421875p835] 

; mpf : + 4258299922566435 835
; mpfd: + 4258299922566435 835 (4.45743e+251) class: Pos. norm. non-zero
; hwf : + 4258299922566435 835 (4.45743e+251) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100011001 #b0010011110001001110101110111101111011011110101100000)))
(assert (= y (fp #b1 #b00111010100 #b0111001100101100110101101000101000111111100010000110)))
(assert (= z (fp #b0 #b11101000010 #b1111001000001110011010110110001110110100110100100100)))
(assert (= r (fp #b0 #b11101000010 #b1111001000001110011010110110001110110100110100100011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
