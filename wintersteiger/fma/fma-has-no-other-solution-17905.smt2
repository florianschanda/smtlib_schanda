(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.42305496058285285698730149306356906890869140625p-538 {- 1905270162838176 -538 (-1.58155e-162)}
; Y = -1.32360793416182165316286045708693563938140869140625p641 {- 1457400571705316 641 (-1.20778e+193)}
; Z = -1.3211574894915487643487495006411336362361907958984375p-715 {- 1446364750001383 -715 (-7.66492e-216)}
; -1.42305496058285285698730149306356906890869140625p-538 x -1.32360793416182165316286045708693563938140869140625p641 -1.3211574894915487643487495006411336362361907958984375p-715 == 1.88356683657580248336671502329409122467041015625p103
; [HW: 1.88356683657580248336671502329409122467041015625p103] 

; mpf : + 3979231275959712 103
; mpfd: + 3979231275959712 103 (1.91016e+031) class: Pos. norm. non-zero
; hwf : + 3979231275959712 103 (1.91016e+031) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111100101 #b0110110001001101010101000111010000011101001010100000)))
(assert (= y (fp #b1 #b11010000000 #b0101001011010111111110000011010111110011011111100100)))
(assert (= z (fp #b1 #b00100110100 #b0101001000110111011000001001001000111011010011100111)))
(assert (= r (fp #b0 #b10001100110 #b1110001000110001011011111010101011101100010110100000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
