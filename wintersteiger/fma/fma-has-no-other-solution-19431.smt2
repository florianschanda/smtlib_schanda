(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9727542981422632184518306530662812292575836181640625p-550 {+ 4380895894636545 -550 (5.35273e-166)}
; Y = 1.7294750813812072021136145849595777690410614013671875p-836 {+ 3285263704684467 -836 (3.77431e-252)}
; Z = 1.998529040550140134513412704109214246273040771484375p6 {+ 4496975014940230 6 (127.906)}
; 1.9727542981422632184518306530662812292575836181640625p-550 x 1.7294750813812072021136145849595777690410614013671875p-836 1.998529040550140134513412704109214246273040771484375p6 == 1.9985290405501403565580176291405223309993743896484375p6
; [HW: 1.9985290405501403565580176291405223309993743896484375p6] 

; mpf : + 4496975014940231 6
; mpfd: + 4496975014940231 6 (127.906) class: Pos. norm. non-zero
; hwf : + 4496975014940231 6 (127.906) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111011001 #b1111100100000110011011001111100110010000100000000001)))
(assert (= y (fp #b0 #b00010111011 #b1011101010111110111000010000000111000111011110110011)))
(assert (= z (fp #b0 #b10000000101 #b1111111110011111100110010110010101000100111001000110)))
(assert (= r (fp #b0 #b10000000101 #b1111111110011111100110010110010101000100111001000111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
