(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6267979008145034836019249269156716763973236083984375p-587 {+ 2822846792544807 -587 (3.21163e-177)}
; Y = -1.8596436234235647066981300667976029217243194580078125p655 {- 3871490702121789 655 (-2.78021e+197)}
; Z = 1.7628302910300226447048999034450389444828033447265625p453 {+ 3435482214429737 453 (4.10014e+136)}
; 1.6267979008145034836019249269156716763973236083984375p-587 x -1.8596436234235647066981300667976029217243194580078125p655 1.7628302910300226447048999034450389444828033447265625p453 == 1.7628302910300224226602949784137308597564697265625p453
; [HW: 1.7628302910300224226602949784137308597564697265625p453] 

; mpf : + 3435482214429736 453
; mpfd: + 3435482214429736 453 (4.10014e+136) class: Pos. norm. non-zero
; hwf : + 3435482214429736 453 (4.10014e+136) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110100 #b1010000001110101110100111100010100110011001000100111)))
(assert (= y (fp #b1 #b11010001110 #b1101110000010001100110101100000011010001101100111101)))
(assert (= z (fp #b0 #b10111000100 #b1100001101001000110110001001000001011111010000101001)))
(assert (= r (fp #b0 #b10111000100 #b1100001101001000110110001001000001011111010000101000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
