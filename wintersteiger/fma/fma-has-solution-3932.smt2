(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4954849054210048731050619608140550553798675537109375p-25 {+ 2231465635421743 -25 (4.45689e-008)}
; Y = -1.6890085239082868184823382762260735034942626953125p-743 {- 3103018531528456 -743 (-3.65044e-224)}
; Z = -1.23462653062649341251244550221599638462066650390625p-802 {- 1056663955900708 -802 (-4.62891e-242)}
; 1.4954849054210048731050619608140550553798675537109375p-25 x -1.6890085239082868184823382762260735034942626953125p-743 -1.23462653062649341251244550221599638462066650390625p-802 == -1.262943376352060109724106951034627854824066162109375p-767
; [HW: -1.262943376352060109724106951034627854824066162109375p-767] 

; mpf : - 1184191691758678 -767
; mpfd: - 1184191691758678 -767 (-1.62696e-231) class: Neg. norm. non-zero
; hwf : - 1184191691758678 -767 (-1.62696e-231) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111100110 #b0111111011011000000110010100100001110001111000101111)))
(assert (= y (fp #b1 #b00100011000 #b1011000001100010110111001101010011011001111100001000)))
(assert (= z (fp #b1 #b00011011101 #b0011110000010000011110111111101111010000100100100100)))
(assert (= r (fp #b1 #b00100000000 #b0100001101010000010000011101001000100001110001010110)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
