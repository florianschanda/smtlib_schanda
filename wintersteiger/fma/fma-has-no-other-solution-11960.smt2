(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = +zero {+ 0 -1023 (0)}
; Y = 1.5880166929353720650652803669800050556659698486328125p859 {+ 2648191759191373 859 (6.1041e+258)}
; Z = 1.13028642631983888833246965077705681324005126953125p-899 {+ 586757901025460 -899 (2.67438e-271)}
; +zero x 1.5880166929353720650652803669800050556659698486328125p859 1.13028642631983888833246965077705681324005126953125p-899 == 1.13028642631983888833246965077705681324005126953125p-899
; [HW: 1.13028642631983888833246965077705681324005126953125p-899] 

; mpf : + 586757901025460 -899
; mpfd: + 586757901025460 -899 (2.67438e-271) class: Pos. norm. non-zero
; hwf : + 586757901025460 -899 (2.67438e-271) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b0 #b11101011010 #b1001011010001000010000110001000110101000110101001101)))
(assert (= z (fp #b0 #b00001111100 #b0010000101011010011100111000010000101000000010110100)))
(assert (= r (fp #b0 #b00001111100 #b0010000101011010011100111000010000101000000010110100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
