(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.522741874318942034705059995758347213268280029296875p-826 {+ 2354220110393742 -826 (3.40291e-249)}
; Y = -1.227917772706600185728120777639560401439666748046875p-113 {- 1026450396232558 -113 (-1.18244e-034)}
; Z = 1.63712919402764622844870245899073779582977294921875p-450 {+ 2869374800809772 -450 (5.63099e-136)}
; 1.522741874318942034705059995758347213268280029296875p-826 x -1.227917772706600185728120777639560401439666748046875p-113 1.63712919402764622844870245899073779582977294921875p-450 == 1.6371291940276460064040975339594297111034393310546875p-450
; [HW: 1.6371291940276460064040975339594297111034393310546875p-450] 

; mpf : + 2869374800809771 -450
; mpfd: + 2869374800809771 -450 (5.63099e-136) class: Pos. norm. non-zero
; hwf : + 2869374800809771 -450 (5.63099e-136) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011000101 #b1000010111010010011010010101011001110011000110001110)))
(assert (= y (fp #b1 #b01110001110 #b0011101001011000110100011011001111110011101101101110)))
(assert (= z (fp #b0 #b01000111101 #b1010001100011010111001100001101110101100111100101100)))
(assert (= r (fp #b0 #b01000111101 #b1010001100011010111001100001101110101100111100101011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
