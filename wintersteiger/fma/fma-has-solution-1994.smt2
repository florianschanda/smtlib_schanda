(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.37944793895567041630556559539400041103363037109375p890 {- 1708881596487260 890 (-1.13868e+268)}
; Y = -1.390183780537540325639156435499899089336395263671875p-338 {- 1757231528634878 -338 (-2.48275e-102)}
; Z = 1.65686091028996163032616095733828842639923095703125p127 {+ 2958238550816116 127 (2.819e+038)}
; -1.37944793895567041630556559539400041103363037109375p890 x -1.390183780537540325639156435499899089336395263671875p-338 1.65686091028996163032616095733828842639923095703125p127 == 1.91768615083211191318923738435842096805572509765625p552
; [HW: 1.91768615083211191318923738435842096805572509765625p552] 

; mpf : + 4132891006930564 552
; mpfd: + 4132891006930564 552 (2.82706e+166) class: Pos. norm. non-zero
; hwf : + 4132891006930564 552 (2.82706e+166) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101111001 #b0110000100100011100000000000100001011001011001011100)))
(assert (= y (fp #b1 #b01010101101 #b0110001111100011000101011001000011010110100111111110)))
(assert (= z (fp #b0 #b10001111110 #b1010100000101000000010010101111110110111010101110100)))
(assert (= r (fp #b0 #b11000100111 #b1110101011101101011110101100010111010000111010000100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
