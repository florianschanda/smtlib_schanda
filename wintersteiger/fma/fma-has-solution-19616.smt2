(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4702308729348476656895172709482721984386444091796875p312 {+ 2117731584127483 312 (1.22672e+094)}
; Y = 1.20827652630902004915469660772942006587982177734375p-673 {+ 937994086275324 -673 (3.08304e-203)}
; Z = -1.8881661334603194735137776660849340260028839111328125p717 {- 3999944667694989 717 (-1.30181e+216)}
; 1.4702308729348476656895172709482721984386444091796875p312 x 1.20827652630902004915469660772942006587982177734375p-673 -1.8881661334603194735137776660849340260028839111328125p717 == -1.88816613346031925146917274105362594127655029296875p717
; [HW: -1.88816613346031925146917274105362594127655029296875p717] 

; mpf : - 3999944667694988 717
; mpfd: - 3999944667694988 717 (-1.30181e+216) class: Neg. norm. non-zero
; hwf : - 3999944667694988 717 (-1.30181e+216) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100110111 #b0111100001100001000011001110110011010011000111111011)))
(assert (= y (fp #b0 #b00101011110 #b0011010101010001100111000100010100000101100011111100)))
(assert (= z (fp #b1 #b11011001100 #b1110001101011110110110110001000010100000011110001101)))
(assert (= r (fp #b1 #b11011001100 #b1110001101011110110110110001000010100000011110001100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
