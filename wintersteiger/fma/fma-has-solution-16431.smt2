(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9539527386089747817976558508235029876232147216796875p-527 {- 4296221198128443 -527 (-4.4474e-159)}
; Y = 1.4221877760438743631965508029679767787456512451171875p-703 {+ 1901364710871571 -703 (3.37964e-212)}
; Z = -1.2477645846277749530628398133558221161365509033203125p171 {- 1115832491005253 171 (-3.73475e+051)}
; -1.9539527386089747817976558508235029876232147216796875p-527 x 1.4221877760438743631965508029679767787456512451171875p-703 -1.2477645846277749530628398133558221161365509033203125p171 == -1.247764584627775175107444738387130200862884521484375p171
; [HW: -1.247764584627775175107444738387130200862884521484375p171] 

; mpf : - 1115832491005254 171
; mpfd: - 1115832491005254 171 (-3.73475e+051) class: Neg. norm. non-zero
; hwf : - 1115832491005254 171 (-3.73475e+051) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110000 #b1111010000110110001111110010011001000001010100111011)))
(assert (= y (fp #b0 #b00101000000 #b0110110000010100011111111000001011100001001000010011)))
(assert (= z (fp #b1 #b10010101010 #b0011111101101101011111111111010000010101010101000101)))
(assert (= r (fp #b1 #b10010101010 #b0011111101101101011111111111010000010101010101000110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
