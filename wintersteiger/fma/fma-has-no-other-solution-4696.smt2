(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.028746410761011365053718691342510282993316650390625p887 {- 129462324791530 887 (-1.06149e+267)}
; Y = -1.75121409573829200923000826151110231876373291015625p-632 {- 3383167521642436 -632 (-9.82612e-191)}
; Z = 1.14477393059013277110125272884033620357513427734375p361 {+ 652003819858684 361 (5.3771e+108)}
; -1.028746410761011365053718691342510282993316650390625p887 x -1.75121409573829200923000826151110231876373291015625p-632 1.14477393059013277110125272884033620357513427734375p361 == 1.14477393059013277110125272884033620357513427734375p361
; [HW: 1.14477393059013277110125272884033620357513427734375p361] 

; mpf : + 652003819858684 361
; mpfd: + 652003819858684 361 (5.3771e+108) class: Pos. norm. non-zero
; hwf : + 652003819858684 361 (5.3771e+108) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101110110 #b0000011101011011111011001011111000011000100011101010)))
(assert (= y (fp #b1 #b00110000111 #b1100000001001111100100010010010101111101011111000100)))
(assert (= z (fp #b0 #b10101101000 #b0010010100001111111001111000000100110010101011111100)))
(assert (= r (fp #b0 #b10101101000 #b0010010100001111111001111000000100110010101011111100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
