(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3978471628230071388543365173973143100738525390625p-367 {+ 1791744334240104 -367 (4.64998e-111)}
; Y = 1.819534897527278705098296995856799185276031494140625p-240 {+ 3690857059120970 -240 (1.02982e-072)}
; Z = -1.7554906733723871781194247887469828128814697265625p216 {- 3402427515081768 216 (-1.84875e+065)}
; 1.3978471628230071388543365173973143100738525390625p-367 x 1.819534897527278705098296995856799185276031494140625p-240 -1.7554906733723871781194247887469828128814697265625p216 == -1.7554906733723869560748198637156747281551361083984375p216
; [HW: -1.7554906733723869560748198637156747281551361083984375p216] 

; mpf : - 3402427515081767 216
; mpfd: - 3402427515081767 216 (-1.84875e+065) class: Neg. norm. non-zero
; hwf : - 3402427515081767 216 (-1.84875e+065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010010000 #b0110010111011001010011111100100100100001100101101000)))
(assert (= y (fp #b0 #b01100001111 #b1101000111001101000010011111111011001111011101001010)))
(assert (= z (fp #b1 #b10011010111 #b1100000101100111110101100011011010010001010000101000)))
(assert (= r (fp #b1 #b10011010111 #b1100000101100111110101100011011010010001010000100111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
