(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.715398991262372607735642304760403931140899658203125p289 {+ 3221870630470450 289 (1.70622e+087)}
; Y = -1.857089235514535641158317957888357341289520263671875p-366 {- 3859986761686526 -366 (-1.23553e-110)}
; Z = -1.704823369506234254089349633431993424892425537109375p108 {- 3174242264270294 108 (-5.53247e+032)}
; 1.715398991262372607735642304760403931140899658203125p289 x -1.857089235514535641158317957888357341289520263671875p-366 -1.704823369506234254089349633431993424892425537109375p108 == -1.7048233695062344761339545584633015096187591552734375p108
; [HW: -1.7048233695062344761339545584633015096187591552734375p108] 

; mpf : - 3174242264270295 108
; mpfd: - 3174242264270295 108 (-5.53247e+032) class: Neg. norm. non-zero
; hwf : - 3174242264270295 108 (-5.53247e+032) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100100000 #b1011011100100100011000110110011100010000001100110010)))
(assert (= y (fp #b1 #b01010010001 #b1101101101101010001100110011110001001001110111111110)))
(assert (= z (fp #b1 #b10001101011 #b1011010001101111010011011110100101111100010111010110)))
(assert (= r (fp #b1 #b10001101011 #b1011010001101111010011011110100101111100010111010111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
