(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.890759396393519420342954617808572947978973388671875p-93 {+ 4011623685674622 -93 (1.90918e-028)}
; Y = 1.2717473471352100933273732152883894741535186767578125p-17 {+ 1223841251297053 -17 (9.70266e-006)}
; Z = -1.7115117887298467724832562453229911625385284423828125p960 {- 3204364226593453 960 (-1.66792e+289)}
; 1.890759396393519420342954617808572947978973388671875p-93 x 1.2717473471352100933273732152883894741535186767578125p-17 -1.7115117887298467724832562453229911625385284423828125p960 == -1.7115117887298467724832562453229911625385284423828125p960
; [HW: -1.7115117887298467724832562453229911625385284423828125p960] 

; mpf : - 3204364226593453 960
; mpfd: - 3204364226593453 960 (-1.66792e+289) class: Neg. norm. non-zero
; hwf : - 3204364226593453 960 (-1.66792e+289) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110100010 #b1110010000001000110011101100110000011101011001111110)))
(assert (= y (fp #b0 #b01111101110 #b0100010110010001001110111111000010111000011100011101)))
(assert (= z (fp #b1 #b11110111111 #b1011011000100101101000101111011101010000001010101101)))
(assert (= r (fp #b1 #b11110111111 #b1011011000100101101000101111011101010000001010101101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
