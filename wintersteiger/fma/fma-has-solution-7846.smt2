(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.147888940301636129248663564794696867465972900390625p-351 {- 666032576434666 -351 (-2.50248e-106)}
; Y = 1.4644244429106347826774481291067786514759063720703125p943 {+ 2091581748034085 943 (1.08881e+284)}
; Z = -1.1327834905602511827993339466047473251819610595703125p-716 {- 598003678608101 -716 (-3.28602e-216)}
; -1.147888940301636129248663564794696867465972900390625p-351 x 1.4644244429106347826774481291067786514759063720703125p943 -1.1327834905602511827993339466047473251819610595703125p-716 == -1.68099662192450249875719237024895846843719482421875p592
; [HW: -1.68099662192450249875719237024895846843719482421875p592] 

; mpf : - 3066936132739756 592
; mpfd: - 3066936132739756 592 (-2.72474e+178) class: Neg. norm. non-zero
; hwf : - 3066936132739756 592 (-2.72474e+178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010100000 #b0010010111011100000011001011001000001001000111101010)))
(assert (= y (fp #b0 #b11110101110 #b0111011011100100100001010011000111000011101000100101)))
(assert (= z (fp #b1 #b00100110011 #b0010000111111110000110010100110101100111101011100101)))
(assert (= r (fp #b1 #b11001001111 #b1010111001010101110010110110101111011010001010101100)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
