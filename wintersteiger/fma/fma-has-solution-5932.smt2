(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4617268408121633083140977760194800794124603271484375p487 {- 2079432828228615 487 (-5.84082e+146)}
; Y = 1.8696578907598737639972341639804653823375701904296875p-847 {+ 3916590952765979 -847 (1.9923e-255)}
; Z = 1.4431677970613758787976621533744037151336669921875p912 {+ 1995850325708216 912 (4.99658e+274)}
; -1.4617268408121633083140977760194800794124603271484375p487 x 1.8696578907598737639972341639804653823375701904296875p-847 1.4431677970613758787976621533744037151336669921875p912 == 1.4431677970613756567530572283430956304073333740234375p912
; [HW: 1.4431677970613756567530572283430956304073333740234375p912] 

; mpf : + 1995850325708215 912
; mpfd: + 1995850325708215 912 (4.99658e+274) class: Pos. norm. non-zero
; hwf : + 1995850325708215 912 (4.99658e+274) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111100110 #b0111011000110011101110101111000011111001010000000111)))
(assert (= y (fp #b0 #b00010110000 #b1101111010100001111001100100011110000101101000011011)))
(assert (= z (fp #b0 #b11110001111 #b0111000101110011011100011101101100000100110110111000)))
(assert (= r (fp #b0 #b11110001111 #b0111000101110011011100011101101100000100110110110111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
