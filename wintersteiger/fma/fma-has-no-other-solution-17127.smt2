(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.989866756249920154431265473249368369579315185546875p992 {+ 4457963554593582 992 (8.32875e+298)}
; Y = -1.0569862501398341603220387696637772023677825927734375p520 {- 256643254894999 520 (-3.628e+156)}
; Z = 1.1146688211159443415709802138735540211200714111328125p827 {+ 516422460048781 827 (9.9759e+248)}
; 1.989866756249920154431265473249368369579315185546875p992 x -1.0569862501398341603220387696637772023677825927734375p520 1.1146688211159443415709802138735540211200714111328125p827 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111011111 #b1111110101100111111010000110000101111101101100101110)))
(assert (= y (fp #b1 #b11000000111 #b0000111010010110101001101010000010101100000110010111)))
(assert (= z (fp #b0 #b11100111010 #b0001110101011010111011111001010010010000010110001101)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
