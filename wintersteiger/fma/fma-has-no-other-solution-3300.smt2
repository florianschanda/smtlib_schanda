(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.08433923244960350729115816648118197917938232421875p-772 {+ 379830135832748 -772 (4.36524e-233)}
; Y = -1.790023080489362428124877624213695526123046875p53 {- 3557947650905984 53 (-1.61231e+016)}
; Z = -1.006177671157150399494639714248478412628173828125p464 {- 27821757521360 464 (-4.79284e+139)}
; 1.08433923244960350729115816648118197917938232421875p-772 x -1.790023080489362428124877624213695526123046875p53 -1.006177671157150399494639714248478412628173828125p464 == -1.006177671157150399494639714248478412628173828125p464
; [HW: -1.006177671157150399494639714248478412628173828125p464] 

; mpf : - 27821757521360 464
; mpfd: - 27821757521360 464 (-4.79284e+139) class: Neg. norm. non-zero
; hwf : - 27821757521360 464 (-4.79284e+139) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011111011 #b0001010110010111010000011000010100100100000010101100)))
(assert (= y (fp #b1 #b10000110100 #b1100101000111110111100111101110111001001011110000000)))
(assert (= z (fp #b1 #b10111001111 #b0000000110010100110111000001111110010101110111010000)))
(assert (= r (fp #b1 #b10111001111 #b0000000110010100110111000001111110010101110111010000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
