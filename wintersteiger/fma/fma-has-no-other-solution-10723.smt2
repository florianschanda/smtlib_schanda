(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.894504520509529665872605619370006024837493896484375p-583 {+ 4028490225247942 -583 (5.98423e-176)}
; Y = 1.845512899457267597114196178154088556766510009765625p-613 {+ 3807851578932698 -613 (5.42912e-185)}
; Z = -1.3171289576274940458233686513267457485198974609375p48 {- 1428221855399576 48 (-3.70739e+014)}
; 1.894504520509529665872605619370006024837493896484375p-583 x 1.845512899457267597114196178154088556766510009765625p-613 -1.3171289576274940458233686513267457485198974609375p48 == -1.3171289576274938237787637262954376637935638427734375p48
; [HW: -1.3171289576274938237787637262954376637935638427734375p48] 

; mpf : - 1428221855399575 48
; mpfd: - 1428221855399575 48 (-3.70739e+014) class: Neg. norm. non-zero
; hwf : - 1428221855399575 48 (-3.70739e+014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111000 #b1110010011111110001111111000110110110110011011000110)))
(assert (= y (fp #b0 #b00110011010 #b1101100001110011100010001000101110000011110111011010)))
(assert (= z (fp #b1 #b10000101111 #b0101000100101111010111010000010110011111111010011000)))
(assert (= r (fp #b1 #b10000101111 #b0101000100101111010111010000010110011111111010010111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
