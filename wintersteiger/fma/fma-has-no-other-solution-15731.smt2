(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4419000111163378097245413300697691738605499267578125p532 {+ 1990140725398557 532 (2.02718e+160)}
; Y = 1.738343848763395538270515316980890929698944091796875p-100 {+ 3325205082162126 -100 (1.37131e-030)}
; Z = 1.289499602192893501495518648880533874034881591796875p565 {+ 1303790300559822 565 (1.55729e+170)}
; 1.4419000111163378097245413300697691738605499267578125p532 x 1.738343848763395538270515316980890929698944091796875p-100 1.289499602192893501495518648880533874034881591796875p565 == 1.289499602192893501495518648880533874034881591796875p565
; [HW: 1.289499602192893501495518648880533874034881591796875p565] 

; mpf : + 1303790300559822 565
; mpfd: + 1303790300559822 565 (1.55729e+170) class: Pos. norm. non-zero
; hwf : + 1303790300559822 565 (1.55729e+170) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000010011 #b0111000100100000010110111110111111011000110000011101)))
(assert (= y (fp #b0 #b01110011011 #b1011110100000100000110100011101110100100001111001110)))
(assert (= z (fp #b0 #b11000110100 #b0100101000011100101001010101101110011111100111001110)))
(assert (= r (fp #b0 #b11000110100 #b0100101000011100101001010101101110011111100111001110)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
