(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.277691198432599595236069944803602993488311767578125p273 {- 1250609977785122 273 (-1.93916e+082)}
; Y = -1.3610649518337838426162988980649970471858978271484375p-56 {- 1626091982535175 -56 (-1.88886e-017)}
; Z = 1.74628051889127444695759550086222589015960693359375p-782 {+ 3360948666792604 -782 (6.86527e-236)}
; -1.277691198432599595236069944803602993488311767578125p273 x -1.3610649518337838426162988980649970471858978271484375p-56 1.74628051889127444695759550086222589015960693359375p-782 == 1.7390207094531155984640236056293360888957977294921875p217
; [HW: 1.7390207094531155984640236056293360888957977294921875p217] 

; mpf : + 3328253391712131 217
; mpfd: + 3328253391712131 217 (3.66281e+065) class: Pos. norm. non-zero
; hwf : + 3328253391712131 217 (3.66281e+065) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100010000 #b0100011100010110110001010011011110100111101100100010)))
(assert (= y (fp #b1 #b01111000111 #b0101110001101110110000001010111111011011101000000111)))
(assert (= z (fp #b0 #b00011110001 #b1011111100001100001111010111011001000111101010011100)))
(assert (= r (fp #b0 #b10011011000 #b1011110100110000011101100001001000101010111110000011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
