(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7104957240839848697788738718372769653797149658203125p134 {+ 3199788278232965 134 (3.72513e+040)}
; Y = 1.9205012687010285521438390787807293236255645751953125p624 {+ 4145569170716021 624 (1.337e+188)}
; Z = -1.6947346252222763585137954578385688364505767822265625p162 {- 3128806599272425 162 (-9.90743e+048)}
; 1.7104957240839848697788738718372769653797149658203125p134 x 1.9205012687010285521438390787807293236255645751953125p624 -1.6947346252222763585137954578385688364505767822265625p162 == 1.6425046041054887080434809831785969436168670654296875p759
; [HW: 1.6425046041054887080434809831785969436168670654296875p759] 

; mpf : + 2893583495633307 759
; mpfd: + 2893583495633307 759 (4.9805e+228) class: Pos. norm. non-zero
; hwf : + 2893583495633307 759 (4.9805e+228) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010000101 #b1011010111100011000011000011101011100011011110000101)))
(assert (= y (fp #b0 #b11001101111 #b1110101110100101111110001001110011111111010101110101)))
(assert (= z (fp #b1 #b10010100001 #b1011000111011010001000001101111010111010011111101001)))
(assert (= r (fp #b0 #b11011110110 #b1010010001111011001011101000011000101001100110011011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
