(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.6673751134290542008642432847409509122371673583984375p-633 {+ 3005590312155431 -633 (4.67785e-191)}
; Y = -1.218512293365882737106176136876456439495086669921875p-436 {- 984091882978462 -436 (-6.86676e-132)}
; Z = 1.5025763915693628458569719441584311425685882568359375p-767 {+ 2263402849796991 -767 (1.93566e-231)}
; 1.6673751134290542008642432847409509122371673583984375p-633 x -1.218512293365882737106176136876456439495086669921875p-436 1.5025763915693628458569719441584311425685882568359375p-767 == 1.502576391569362623812367019127123057842254638671875p-767
; [HW: 1.502576391569362623812367019127123057842254638671875p-767] 

; mpf : + 2263402849796990 -767
; mpfd: + 2263402849796990 -767 (1.93566e-231) class: Pos. norm. non-zero
; hwf : + 2263402849796990 -767 (1.93566e-231) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110000110 #b1010101011011001000110000110111001010111100100100111)))
(assert (= y (fp #b1 #b01001001011 #b0011011111110000011010111111000111000111110010011110)))
(assert (= z (fp #b0 #b00100000000 #b1000000010101000110110001010110110001000001101111111)))
(assert (= r (fp #b0 #b00100000000 #b1000000010101000110110001010110110001000001101111110)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
