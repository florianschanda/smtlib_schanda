(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2740751133266645656050286561367101967334747314453125p-576 {- 1234324578249493 -576 (-5.15131e-174)}
; Y = -1.062294774107396921891677266103215515613555908203125p1019 {- 280550721457202 1019 (-5.96775e+306)}
; Z = -1.241023806465317402825121462228707969188690185546875p-543 {- 1085474724984622 -543 (-4.31015e-164)}
; -1.2740751133266645656050286561367101967334747314453125p-576 x -1.062294774107396921891677266103215515613555908203125p1019 -1.241023806465317402825121462228707969188690185546875p-543 == 1.3534433347072052367110472914646379649639129638671875p443
; [HW: 1.3534433347072052367110472914646379649639129638671875p443] 

; mpf : + 1591767270483955 443
; mpfd: + 1591767270483955 443 (3.07417e+133) class: Pos. norm. non-zero
; hwf : + 1591767270483955 443 (3.07417e+133) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111111 #b0100011000101001110010010110000001100010101100010101)))
(assert (= y (fp #b1 #b11111111010 #b0000111111110010100011001110000110000000110000110010)))
(assert (= z (fp #b1 #b00111100000 #b0011110110110011101111000111011001010011011100101110)))
(assert (= r (fp #b0 #b10110111010 #b0101101001111011010000110010101110001110011111110011)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
