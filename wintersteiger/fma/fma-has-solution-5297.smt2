(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7394672276301388347263809919240884482860565185546875p66 {+ 3330264330807787 66 (1.2835e+020)}
; Y = -1.07566120570934486977421329356729984283447265625p337 {- 340747777839008 337 (-3.01151e+101)}
; Z = 1.7651742558898952939472337675397284328937530517578125p-304 {+ 3446038493699229 -304 (5.41588e-092)}
; 1.7394672276301388347263809919240884482860565185546875p66 x -1.07566120570934486977421329356729984283447265625p337 1.7651742558898952939472337675397284328937530517578125p-304 == -1.8710774153645266526524437722400762140750885009765625p403
; [HW: -1.8710774153645266526524437722400762140750885009765625p403] 

; mpf : - 3922983923246537 403
; mpfd: - 3922983923246537 403 (-3.86527e+121) class: Neg. norm. non-zero
; hwf : - 3922983923246537 403 (-3.86527e+121) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001000001 #b1011110101001101101110010110011100100010100111101011)))
(assert (= y (fp #b1 #b10101010000 #b0001001101011110100010000110010000011000111110100000)))
(assert (= z (fp #b0 #b01011001111 #b1100001111100010011101011100010011001001110010011101)))
(assert (= r (fp #b1 #b10110010010 #b1101111011111110111011011111001101000110010111001001)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
