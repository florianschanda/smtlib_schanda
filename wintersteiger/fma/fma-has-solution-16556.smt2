(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3028803302923055440487587475217878818511962890625p-92 {- 1364051742642280 -92 (-2.63115e-028)}
; Y = -1.1115013491093057584890857469872571527957916259765625p347 {- 502157434299977 347 (-3.18653e+104)}
; Z = -1.1068009391569233468288757649133913218975067138671875p351 {- 480988669789939 351 (-5.07689e+105)}
; -1.3028803302923055440487587475217878818511962890625p-92 x -1.1115013491093057584890857469872571527957916259765625p347 -1.1068009391569233468288757649133913218975067138671875p351 == -1.1068009391569233468288757649133913218975067138671875p351
; [HW: -1.1068009391569233468288757649133913218975067138671875p351] 

; mpf : - 480988669789939 351
; mpfd: - 480988669789939 351 (-5.07689e+105) class: Neg. norm. non-zero
; hwf : - 480988669789939 351 (-5.07689e+105) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110100011 #b0100110110001001100100001011100100110101000001101000)))
(assert (= y (fp #b1 #b10101011010 #b0001110010001011010110100011011111100010011001001001)))
(assert (= z (fp #b1 #b10101011110 #b0001101101010111010011100110110011011100011011110011)))
(assert (= r (fp #b1 #b10101011110 #b0001101101010111010011100110110011011100011011110011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
