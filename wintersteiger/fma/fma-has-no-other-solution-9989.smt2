(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.323382970457657403784423877368681132793426513671875p-443 {- 1456387425251070 -443 (-5.82636e-134)}
; Y = -1.8091497306475898820821157642058096826076507568359375p464 {- 3644086425431423 464 (-8.61772e+139)}
; Z = 1.9403532845943758378126631214399822056293487548828125p914 {+ 4234974702095853 914 (2.68718e+275)}
; -1.323382970457657403784423877368681132793426513671875p-443 x -1.8091497306475898820821157642058096826076507568359375p464 1.9403532845943758378126631214399822056293487548828125p914 == 1.9403532845943758378126631214399822056293487548828125p914
; [HW: 1.9403532845943758378126631214399822056293487548828125p914] 

; mpf : + 4234974702095853 914
; mpfd: + 4234974702095853 914 (2.68718e+275) class: Pos. norm. non-zero
; hwf : + 4234974702095853 914 (2.68718e+275) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001000100 #b0101001011001001001110011111001000110010111011111110)))
(assert (= y (fp #b1 #b10111001111 #b1100111100100100011011111100111010110010110101111111)))
(assert (= z (fp #b0 #b11110010001 #b1111000010111010111111100010110000000100110111101101)))
(assert (= r (fp #b0 #b11110010001 #b1111000010111010111111100010110000000100110111101101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
