(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8195180021098591449657533303252421319484710693359375p627 {- 3690780968925375 627 (-1.01336e+189)}
; Y = 1.2686660365976607511839802100439555943012237548828125p722 {+ 1209964262308333 722 (2.79901e+217)}
; Z = -1.059910874675962677571305903256870806217193603515625p-298 {- 269814592866106 -298 (-2.08128e-090)}
; -1.8195180021098591449657533303252421319484710693359375p627 x 1.2686660365976607511839802100439555943012237548828125p722 -1.059910874675962677571305903256870806217193603515625p-298 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001110010 #b1101000111001011111011101000100110001011100010111111)))
(assert (= y (fp #b0 #b11011010001 #b0100010011000111010011000010000010111011100111101101)))
(assert (= z (fp #b1 #b01011010101 #b0000111101010110010100011010111101101000011100111010)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
