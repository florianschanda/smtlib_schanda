(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0666190058758449055176242836751043796539306640625p-592 {+ 300025330038248 -592 (6.58039e-179)}
; Y = -1.3641034323161942420910008877399377524852752685546875p880 {- 1639776082103531 880 (-1.09962e+265)}
; Z = 1.2084133044142346680160926553071476519107818603515625p-888 {+ 938610080099001 -888 (5.85571e-268)}
; 1.0666190058758449055176242836751043796539306640625p-592 x -1.3641034323161942420910008877399377524852752685546875p880 1.2084133044142346680160926553071476519107818603515625p-888 == -1.4549786468889269741566749871708452701568603515625p288
; [HW: -1.4549786468889269741566749871708452701568603515625p288] 

; mpf : - 2049041664590504 288
; mpfd: - 2049041664590504 288 (-7.23595e+086) class: Neg. norm. non-zero
; hwf : - 2049041664590504 288 (-7.23595e+086) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101111 #b0001000100001101111100010111001110000111010111101000)))
(assert (= y (fp #b1 #b11101101111 #b0101110100110101111000011110111000101000110011101011)))
(assert (= z (fp #b0 #b00010000111 #b0011010101011010100100110000011010000010101010111001)))
(assert (= r (fp #b1 #b10100011111 #b0111010001111001011110110000100011000100001010101000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
