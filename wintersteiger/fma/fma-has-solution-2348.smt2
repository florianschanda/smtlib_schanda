(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1275919263560993943684707119246013462543487548828125p276 {+ 574622951992813 276 (1.36909e+083)}
; Y = 1.8787393597075883189262412997777573764324188232421875p28 {+ 3957490252934883 28 (5.0432e+008)}
; Z = 1.90361750122053052791670779697597026824951171875p913 {+ 4069531441782240 913 (1.31815e+275)}
; 1.1275919263560993943684707119246013462543487548828125p276 x 1.8787393597075883189262412997777573764324188232421875p28 1.90361750122053052791670779697597026824951171875p913 == 1.90361750122053052791670779697597026824951171875p913
; [HW: 1.90361750122053052791670779697597026824951171875p913] 

; mpf : + 4069531441782240 913
; mpfd: + 4069531441782240 913 (1.31815e+275) class: Pos. norm. non-zero
; hwf : + 4069531441782240 913 (1.31815e+275) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100010011 #b0010000010101001110111010100111011101110110111101101)))
(assert (= y (fp #b0 #b10000011011 #b1110000011110101000100000000101110100110111011100011)))
(assert (= z (fp #b0 #b11110010000 #b1110011101010011011110011111111111010101110111100000)))
(assert (= r (fp #b0 #b11110010000 #b1110011101010011011110011111111111010101110111100000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
