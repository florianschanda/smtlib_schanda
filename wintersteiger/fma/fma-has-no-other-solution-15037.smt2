(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8017505538538822751348789097392000257968902587890625p-238 {- 3610763495580433 -238 (-4.07902e-072)}
; Y = 1.387758576696456191967854465474374592304229736328125p-682 {+ 1746309381519874 -682 (6.91603e-206)}
; Z = 1.0607998642070011197091616850229911506175994873046875p14 {+ 273818245786827 14 (17380.1)}
; -1.8017505538538822751348789097392000257968902587890625p-238 x 1.387758576696456191967854465474374592304229736328125p-682 1.0607998642070011197091616850229911506175994873046875p14 == 1.060799864207000897664556759991683065891265869140625p14
; [HW: 1.060799864207000897664556759991683065891265869140625p14] 

; mpf : + 273818245786826 14
; mpfd: + 273818245786826 14 (17380.1) class: Pos. norm. non-zero
; hwf : + 273818245786826 14 (17380.1) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100010001 #b1100110100111111100001100011100001011010001100010001)))
(assert (= y (fp #b0 #b00101010101 #b0110001101000100001001010110010110100111101000000010)))
(assert (= z (fp #b0 #b10000001101 #b0000111110010000100101000111010001011110110011001011)))
(assert (= r (fp #b0 #b10000001101 #b0000111110010000100101000111010001011110110011001010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
