(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.6454055587838352092688865013769827783107757568359375p743 {+ 2906648234041727 743 (7.61307e+223)}
; Y = -1.8519268094017180548149781316169537603855133056640625p-369 {- 3836737261368513 -369 (-1.54012e-111)}
; Z = 1.8371425737877984385448826287756673991680145263671875p166 {+ 3770154983366707 166 (1.71839e+050)}
; 1.6454055587838352092688865013769827783107757568359375p743 x -1.8519268094017180548149781316169537603855133056640625p-369 1.8371425737877984385448826287756673991680145263671875p166 == -1.5235853333251994090602465803385712206363677978515625p375
; [HW: -1.5235853333251994090602465803385712206363677978515625p375] 

; mpf : - 2358018712060025 375
; mpfd: - 2358018712060025 375 (-1.17251e+113) class: Neg. norm. non-zero
; hwf : - 2358018712060025 375 (-1.17251e+113) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011100110 #b1010010100111001010011000111011110100010000101111111)))
(assert (= y (fp #b1 #b01010001110 #b1101101000010111111000000001100011110111010011000001)))
(assert (= z (fp #b0 #b10010100101 #b1101011001001110111110011100100010000010000000110011)))
(assert (= r (fp #b1 #b10101110110 #b1000011000001001101100000011101101001100000001111001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
