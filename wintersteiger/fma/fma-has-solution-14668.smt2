(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1784321166597055974278873691218905150890350341796875p367 {- 803586814099579 367 (-3.54253e+110)}
; Y = 1.4061258548455695116530250743380747735500335693359375p-160 {+ 1829028248548031 -160 (9.6211e-049)}
; Z = 1.7364278850199668102760597321321256458759307861328125p758 {+ 3316576348561165 758 (2.63265e+228)}
; -1.1784321166597055974278873691218905150890350341796875p367 x 1.4061258548455695116530250743380747735500335693359375p-160 1.7364278850199668102760597321321256458759307861328125p758 == 1.73642788501996658823145480710081756114959716796875p758
; [HW: 1.73642788501996658823145480710081756114959716796875p758] 

; mpf : + 3316576348561164 758
; mpfd: + 3316576348561164 758 (2.63265e+228) class: Pos. norm. non-zero
; hwf : + 3316576348561164 758 (2.63265e+228) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101110 #b0010110110101101101110100010100110011100000001111011)))
(assert (= y (fp #b0 #b01101011111 #b0110011111110111110111010011000010011111001010111111)))
(assert (= z (fp #b0 #b11011110101 #b1011110010000110100010011011001000000101111100001101)))
(assert (= r (fp #b0 #b11011110101 #b1011110010000110100010011011001000000101111100001100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
