(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8047045815856552763989384402520954608917236328125p886 {- 3624067253772488 886 (-9.3107e+266)}
; Y = -1.7276640086043624222611470031552016735076904296875p-959 {- 3277107358001528 -959 (-3.54563e-289)}
; Z = -1.5760723348321252768045042103040032088756561279296875p-376 {- 2594399152488411 -376 (-1.02399e-113)}
; -1.8047045815856552763989384402520954608917236328125p886 x -1.7276640086043624222611470031552016735076904296875p-959 -1.5760723348321252768045042103040032088756561279296875p-376 == 1.5589615758844657111836795593262650072574615478515625p-72
; [HW: 1.5589615758844657111836795593262650072574615478515625p-72] 

; mpf : + 2517339144867705 -72
; mpfd: + 2517339144867705 -72 (3.30123e-022) class: Pos. norm. non-zero
; hwf : + 2517339144867705 -72 (3.30123e-022) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101110101 #b1100111000000001000111101001010011011010000011001000)))
(assert (= y (fp #b1 #b00001000000 #b1011101001001000001100000011111101101110100101111000)))
(assert (= z (fp #b1 #b01010000111 #b1001001101111001011110011111111000111011111111011011)))
(assert (= r (fp #b0 #b01110110111 #b1000111100011000000110110001100000100100111101111001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
