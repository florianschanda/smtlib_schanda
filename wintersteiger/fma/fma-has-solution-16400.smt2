(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5969262864945028557173145600245334208011627197265625p-807 {+ 2688317001424297 -807 (1.87102e-243)}
; Y = -1.1178583905914256657609939793474040925502777099609375p-43 {- 530787003950031 -43 (-1.27086e-013)}
; Z = 1.890775814742476246266278394614346325397491455078125p707 {+ 4011697627344866 707 (1.27305e+213)}
; 1.5969262864945028557173145600245334208011627197265625p-807 x -1.1178583905914256657609939793474040925502777099609375p-43 1.890775814742476246266278394614346325397491455078125p707 == 1.890775814742476246266278394614346325397491455078125p707
; [HW: 1.890775814742476246266278394614346325397491455078125p707] 

; mpf : + 4011697627344866 707
; mpfd: + 4011697627344866 707 (1.27305e+213) class: Pos. norm. non-zero
; hwf : + 4011697627344866 707 (1.27305e+213) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011011000 #b1001100011010000001010010011111010011101110110101001)))
(assert (= y (fp #b1 #b01111010100 #b0001111000101011111101111010110100100110001111001111)))
(assert (= z (fp #b0 #b11011000010 #b1110010000001001111000100100000001100010111111100010)))
(assert (= r (fp #b0 #b11011000010 #b1110010000001001111000100100000001100010111111100010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
