(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.546793344692591443134688233840279281139373779296875p-849 {- 2462538303406222 -849 (-4.12065e-256)}
; Y = 1.480284049936955614867883923579938709735870361328125p-472 {+ 2163007068328066 -472 (1.21391e-142)}
; Z = -1.7750555676180546083031686066533438861370086669921875p-968 {- 3490539965516099 -968 (-7.11502e-292)}
; -1.546793344692591443134688233840279281139373779296875p-849 x 1.480284049936955614867883923579938709735870361328125p-472 -1.7750555676180546083031686066533438861370086669921875p-968 == -1.77505556761805483034777353168465197086334228515625p-968
; [HW: -1.77505556761805483034777353168465197086334228515625p-968] 

; mpf : - 3490539965516100 -968
; mpfd: - 3490539965516100 -968 (-7.11502e-292) class: Neg. norm. non-zero
; hwf : - 3490539965516100 -968 (-7.11502e-292) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010101110 #b1000101111111010101001100000110100100000000010001110)))
(assert (= y (fp #b0 #b01000100111 #b0111101011110011111001010011111101000101000010000010)))
(assert (= z (fp #b1 #b00000110111 #b1100011001101010000010101010101110000000100101000011)))
(assert (= r (fp #b1 #b00000110111 #b1100011001101010000010101010101110000000100101000100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
