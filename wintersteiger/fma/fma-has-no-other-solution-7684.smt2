(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9323521193793882222422553240903653204441070556640625p403 {- 4198940657415105 403 (-3.99185e+121)}
; Y = -1.1723839485254361481025853208848275244235992431640625p369 {- 776348286343809 369 (-1.40974e+111)}
; Z = 1.1305056616483535325556886164122261106967926025390625p-185 {+ 587745249169265 -185 (2.30528e-056)}
; -1.9323521193793882222422553240903653204441070556640625p403 x -1.1723839485254361481025853208848275244235992431640625p369 1.1305056616483535325556886164122261106967926025390625p-185 == 1.13272930382975101082365654292516410350799560546875p773
; [HW: 1.13272930382975101082365654292516410350799560546875p773] 

; mpf : + 597759643268812 773
; mpfd: + 597759643268812 773 (5.62746e+232) class: Pos. norm. non-zero
; hwf : + 597759643268812 773 (5.62746e+232) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110010010 #b1110111010101110101000001110010100010111001111000001)))
(assert (= y (fp #b1 #b10101110000 #b0010110000100001010110101011110101000101101010000001)))
(assert (= z (fp #b0 #b01101000110 #b0010000101101000110100011010110010111000111101110001)))
(assert (= r (fp #b0 #b11100000100 #b0010000111111010100011000011001100101011011011001100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
