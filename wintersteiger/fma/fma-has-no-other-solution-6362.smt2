(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.315586806605262726321825539343990385532379150390625p257 {+ 1421276624630506 257 (3.04669e+077)}
; Y = -1.9379511186747684359232835049624554812908172607421875p-72 {- 4224156308555427 -72 (-4.10377e-022)}
; Z = 1.68265431687820665729304892010986804962158203125p722 {+ 3074401727115552 722 (3.71237e+217)}
; 1.315586806605262726321825539343990385532379150390625p257 x -1.9379511186747684359232835049624554812908172607421875p-72 1.68265431687820665729304892010986804962158203125p722 == 1.6826543168782064352484439950785599648952484130859375p722
; [HW: 1.6826543168782064352484439950785599648952484130859375p722] 

; mpf : + 3074401727115551 722
; mpfd: + 3074401727115551 722 (3.71237e+217) class: Pos. norm. non-zero
; hwf : + 3074401727115551 722 (3.71237e+217) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000000 #b0101000011001010010011000000010101101011001011101010)))
(assert (= y (fp #b1 #b01110110111 #b1111000000011101100100001000001111110100011010100011)))
(assert (= z (fp #b0 #b11011010001 #b1010111011000010011011101110110101110111000100100000)))
(assert (= r (fp #b0 #b11011010001 #b1010111011000010011011101110110101110111000100011111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
