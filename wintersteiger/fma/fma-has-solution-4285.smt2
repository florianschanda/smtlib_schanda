(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.151712485678803243871470840531401336193084716796875p205 {- 683252293970510 205 (-5.92234e+061)}
; Y = -0.7536101128303023255483594766701571643352508544921875p-1022 {- 3393958223325187 -1023 (-1.67684e-308)}
; Z = -1.2989964651672150086625379117322154343128204345703125p366 {- 1346560369112165 366 (-1.95248e+110)}
; -1.151712485678803243871470840531401336193084716796875p205 x -0.7536101128303023255483594766701571643352508544921875p-1022 -1.2989964651672150086625379117322154343128204345703125p366 == -1.2989964651672150086625379117322154343128204345703125p366
; [HW: -1.2989964651672150086625379117322154343128204345703125p366] 

; mpf : - 1346560369112165 366
; mpfd: - 1346560369112165 366 (-1.95248e+110) class: Neg. norm. non-zero
; hwf : - 1346560369112165 366 (-1.95248e+110) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011001100 #b0010011011010110101000010010010001100010101001001110)))
(assert (= y (fp #b1 #b00000000000 #b1100000011101100100101111010010010001010100000000011)))
(assert (= z (fp #b1 #b10101101101 #b0100110010001011000010000100011110000011010001100101)))
(assert (= r (fp #b1 #b10101101101 #b0100110010001011000010000100011110000011010001100101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
