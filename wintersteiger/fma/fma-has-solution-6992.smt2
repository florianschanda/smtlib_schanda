(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.015078283380726364981683218502439558506011962890625p-712 {+ 67906551414826 -712 (4.71132e-215)}
; Y = 1.048239566895408092506158936885185539722442626953125p221 {+ 217251695494674 221 (3.53256e+066)}
; Z = 1.7642078191465102587898172714631073176860809326171875p984 {+ 3441686049541843 984 (2.88447e+296)}
; 1.015078283380726364981683218502439558506011962890625p-712 x 1.048239566895408092506158936885185539722442626953125p221 1.7642078191465102587898172714631073176860809326171875p984 == 1.76420781914651048083442219649441540241241455078125p984
; [HW: 1.76420781914651048083442219649441540241241455078125p984] 

; mpf : + 3441686049541844 984
; mpfd: + 3441686049541844 984 (2.88447e+296) class: Pos. norm. non-zero
; hwf : + 3441686049541844 984 (2.88447e+296) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100110111 #b0000001111011100001010111001111000000000000000101010)))
(assert (= y (fp #b0 #b10011011100 #b0000110001011001011011011010001000110000011000010010)))
(assert (= z (fp #b0 #b11111010111 #b1100001110100011000111111010011010010100111011010011)))
(assert (= r (fp #b0 #b11111010111 #b1100001110100011000111111010011010010100111011010100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
