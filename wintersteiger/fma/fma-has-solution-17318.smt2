(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.94392338011951704146440533804707229137420654296875p-176 {- 4251052982972556 -176 (-2.02955e-053)}
; Y = -1.560781842908432803795903964783065021038055419921875p535 {- 2525536898758558 535 (-1.75546e+161)}
; Z = 1.480439345495318637091486380086280405521392822265625p-231 {+ 2163706457346842 -231 (4.29004e-070)}
; -1.94392338011951704146440533804707229137420654296875p-176 x -1.560781842908432803795903964783065021038055419921875p535 1.480439345495318637091486380086280405521392822265625p-231 == 1.5170201578478648141157236750586889684200286865234375p360
; [HW: 1.5170201578478648141157236750586889684200286865234375p360] 

; mpf : + 2328451790226679 360
; mpfd: + 2328451790226679 360 (3.56279e+108) class: Pos. norm. non-zero
; hwf : + 2328451790226679 360 (3.56279e+108) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001111 #b1111000110100100111101100110111110001011000010001100)))
(assert (= y (fp #b1 #b11000010110 #b1000111110001111011001100001101101111011011110011110)))
(assert (= z (fp #b0 #b01100011000 #b0111101011111110000100101010110010011101001100011010)))
(assert (= r (fp #b0 #b10101100111 #b1000010001011011011011101101110101010100010011110111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
