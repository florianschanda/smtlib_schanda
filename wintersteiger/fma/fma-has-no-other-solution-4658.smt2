(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.96984914419902157334263392840512096881866455078125p-335 {- 4367812244420308 -335 (-2.81439e-101)}
; Y = 1.3896268472638577673450299698743037879467010498046875p387 {+ 1754723324151051 387 (4.38033e+116)}
; Z = 1.99689108667441939104492121259681880474090576171875p-469 {+ 4489598326475884 -469 (1.31005e-141)}
; -1.96984914419902157334263392840512096881866455078125p-335 x 1.3896268472638577673450299698743037879467010498046875p387 1.99689108667441939104492121259681880474090576171875p-469 == -1.36867762791934755028933068388141691684722900390625p53
; [HW: -1.36867762791934755028933068388141691684722900390625p53] 

; mpf : - 1660376427717412 53
; mpfd: - 1660376427717412 53 (-1.2328e+016) class: Neg. norm. non-zero
; hwf : - 1660376427717412 53 (-1.2328e+016) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010110000 #b1111100001001000000010001001010001100011011011010100)))
(assert (= y (fp #b0 #b10110000010 #b0110001110111110100101011100011010100100010100001011)))
(assert (= z (fp #b0 #b01000101010 #b1111111100110100010000010001011011110000110001101100)))
(assert (= r (fp #b1 #b10000110100 #b0101111001100001101010000011001010101110001100100100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
