(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3632228117790419208432695086230523884296417236328125p-603 {+ 1635810119780557 -603 (4.10657e-182)}
; Y = -1.6441045926641131291745523412828333675861358642578125p399 {- 2900789203509725 399 (-2.12274e+120)}
; Z = 1.92397051307817523735366194159723818302154541015625p42 {+ 4161193258400196 42 (8.46171e+012)}
; 1.3632228117790419208432695086230523884296417236328125p-603 x -1.6441045926641131291745523412828333675861358642578125p399 1.92397051307817523735366194159723818302154541015625p42 == 1.92397051307817523735366194159723818302154541015625p42
; [HW: 1.92397051307817523735366194159723818302154541015625p42] 

; mpf : + 4161193258400196 42
; mpfd: + 4161193258400196 42 (8.46171e+012) class: Pos. norm. non-zero
; hwf : + 4161193258400196 42 (8.46171e+012) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110100100 #b0101110011111100001010111001000111000000100011001101)))
(assert (= y (fp #b1 #b10110001110 #b1010010011100100000010011110000010110010000111011101)))
(assert (= z (fp #b0 #b10000101001 #b1110110010001001010101001110000000100011100111000100)))
(assert (= r (fp #b0 #b10000101001 #b1110110010001001010101001110000000100011100111000100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
