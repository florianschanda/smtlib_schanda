(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -0.761919743103326663202778945560567080974578857421875p-1022 {- 3431381471126366 -1023 (-1.69533e-308)}
; Y = -1.910950954263691325962781775160692632198333740234375p-300 {- 4102558378174758 -300 (-9.38104e-091)}
; Z = 1.70400962974808312111463237670250236988067626953125p711 {+ 3170577506198708 711 (1.83569e+214)}
; -0.761919743103326663202778945560567080974578857421875p-1022 x -1.910950954263691325962781775160692632198333740234375p-300 1.70400962974808312111463237670250236988067626953125p711 == 1.70400962974808312111463237670250236988067626953125p711
; [HW: 1.70400962974808312111463237670250236988067626953125p711] 

; mpf : + 3170577506198708 711
; mpfd: + 3170577506198708 711 (1.83569e+214) class: Pos. norm. non-zero
; hwf : + 3170577506198708 711 (1.83569e+214) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1100001100001101001011000001101011001110001101011110)))
(assert (= y (fp #b1 #b01011010011 #b1110100100110100000101001110110011010010100100100110)))
(assert (= z (fp #b0 #b11011000110 #b1011010000111001111110011001111111010110010010110100)))
(assert (= r (fp #b0 #b11011000110 #b1011010000111001111110011001111111010110010010110100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
