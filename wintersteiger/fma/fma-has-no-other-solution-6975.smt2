(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3733134560279769420532147705671377480030059814453125p398 {- 1681254341459989 398 (-8.8656e+119)}
; Y = 1.1818757776044825913430713626439683139324188232421875p461 {+ 819095684247267 461 (7.0372e+138)}
; Z = -1.1740120221430228042436283431015908718109130859375p-408 {- 783680478081304 -408 (-1.77596e-123)}
; -1.3733134560279769420532147705671377480030059814453125p398 x 1.1818757776044825913430713626439683139324188232421875p461 -1.1740120221430228042436283431015908718109130859375p-408 == -1.6230859087377644822680622382904402911663055419921875p859
; [HW: -1.6230859087377644822680622382904402911663055419921875p859] 

; mpf : - 2806129466411203 859
; mpfd: - 2806129466411203 859 (-6.2389e+258) class: Neg. norm. non-zero
; hwf : - 2806129466411203 859 (-6.2389e+258) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110001101 #b0101111110010001011110000111110011001100000000010101)))
(assert (= y (fp #b0 #b10111001100 #b0010111010001111011010010011010010111110111011100011)))
(assert (= z (fp #b1 #b01001100111 #b0010110010001100000011010100100000110111000100011000)))
(assert (= r (fp #b1 #b11101011010 #b1001111110000010100011101110000010100000100011000011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
