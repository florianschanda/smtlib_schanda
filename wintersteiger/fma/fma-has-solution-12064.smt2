(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.02239063532326301952934954897500574588775634765625p-1005 {+ 100838456898436 -1005 (2.98175e-303)}
; Y = 1.23062177376689430019496285240165889263153076171875p664 {+ 1038628134400108 664 (9.4198e+199)}
; Z = 1.02287013193793807630527226137928664684295654296875p-899 {+ 102997917673612 -899 (2.42022e-271)}
; 1.02239063532326301952934954897500574588775634765625p-1005 x 1.23062177376689430019496285240165889263153076171875p664 1.02287013193793807630527226137928664684295654296875p-899 == 1.258176177124175953991880305693484842777252197265625p-341
; [HW: 1.258176177124175953991880305693484842777252197265625p-341] 

; mpf : + 1162722135092378 -341
; mpfd: + 1162722135092378 -341 (2.80875e-103) class: Pos. norm. non-zero
; hwf : + 1162722135092378 -341 (2.80875e-103) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010010 #b0000010110111011011001001000011001110011001110000100)))
(assert (= y (fp #b0 #b11010010111 #b0011101100001010000001110101000000010011000001101100)))
(assert (= z (fp #b0 #b00001111100 #b0000010111011010110100010010010010111010100010001100)))
(assert (= r (fp #b0 #b01010101010 #b0100001000010111110101010111110101011010110010011010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
