(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7634429121076220514652277415734715759754180908203125p-804 {- 3438241214486533 -804 (-1.65289e-242)}
; Y = -1.015801620250606607243071266566403210163116455078125p-606 {- 71164171072482 -606 (-3.825e-183)}
; Z = 1.3192406345967910841210368744214065372943878173828125p-858 {+ 1437732003011629 -858 (6.86417e-259)}
; -1.7634429121076220514652277415734715759754180908203125p-804 x -1.015801620250606607243071266566403210163116455078125p-606 1.3192406345967910841210368744214065372943878173828125p-858 == 1.319240634596791306165641799452714622020721435546875p-858
; [HW: 1.319240634596791306165641799452714622020721435546875p-858] 

; mpf : + 1437732003011630 -858
; mpfd: + 1437732003011630 -858 (6.86417e-259) class: Pos. norm. non-zero
; hwf : + 1437732003011630 -858 (6.86417e-259) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011011011 #b1100001101110000111111101010001111011101100000000101)))
(assert (= y (fp #b1 #b00110100001 #b0000010000001011100100110011001000110011001111100010)))
(assert (= z (fp #b0 #b00010100101 #b0101000110111001110000010001010100100101110000101101)))
(assert (= r (fp #b0 #b00010100101 #b0101000110111001110000010001010100100101110000101110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
