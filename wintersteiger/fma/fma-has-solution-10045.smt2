(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.043161314240046433354791588499210774898529052734375p200 {- 194381278728294 200 (-1.6763e+060)}
; Y = -1.872016052164479305019995081238448619842529296875p-378 {- 3927211167589040 -378 (-3.04068e-114)}
; Z = 1.77858081073314178155442277784459292888641357421875p356 {+ 3506416249095596 356 (2.61067e+107)}
; -1.043161314240046433354791588499210774898529052734375p200 x -1.872016052164479305019995081238448619842529296875p-378 1.77858081073314178155442277784459292888641357421875p356 == 1.7785808107331420035990277028759010136127471923828125p356
; [HW: 1.7785808107331420035990277028759010136127471923828125p356] 

; mpf : + 3506416249095597 356
; mpfd: + 3506416249095597 356 (2.61067e+107) class: Pos. norm. non-zero
; hwf : + 3506416249095597 356 (2.61067e+107) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011000111 #b0000101100001100100111101011000100011101000001100110)))
(assert (= y (fp #b1 #b01010000101 #b1101111100111100011100011010100110100010001010110000)))
(assert (= z (fp #b0 #b10101100011 #b1100011101010001000100100110111101100100010110101100)))
(assert (= r (fp #b0 #b10101100011 #b1100011101010001000100100110111101100100010110101101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
