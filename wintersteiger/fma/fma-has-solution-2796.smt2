(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.440966698939135870460859223385341465473175048828125p-893 {+ 1985937461025090 -893 (2.18207e-269)}
; Y = 1.6469886955766750435969925092649646103382110595703125p965 {+ 2913778048312037 965 (5.13614e+290)}
; Z = -1.4581554434412373755236558281467296183109283447265625p438 {- 2063348684359721 438 (-1.035e+132)}
; 1.440966698939135870460859223385341465473175048828125p-893 x 1.6469886955766750435969925092649646103382110595703125p965 -1.4581554434412373755236558281467296183109283447265625p438 == -1.4581554434412371534790509031154215335845947265625p438
; [HW: -1.4581554434412371534790509031154215335845947265625p438] 

; mpf : - 2063348684359720 438
; mpfd: - 2063348684359720 438 (-1.035e+132) class: Neg. norm. non-zero
; hwf : - 2063348684359720 438 (-1.035e+132) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010000010 #b0111000011100011001100011000111010010001100101000010)))
(assert (= y (fp #b0 #b11111000100 #b1010010110100001000011010001100001100010001011100101)))
(assert (= z (fp #b1 #b10110110101 #b0111010101001001101011001101011000010000100000101001)))
(assert (= r (fp #b1 #b10110110101 #b0111010101001001101011001101011000010000100000101000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
