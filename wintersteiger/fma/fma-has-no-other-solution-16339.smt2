(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.706784549185383692559980772784911096096038818359375p-432 {- 3183074632342518 -432 (-1.53894e-130)}
; Y = 1.669000749247395720686881759320385754108428955078125p-503 {+ 3012911525021154 -503 (6.37336e-152)}
; Z = -1.305866406627772757786942747770808637142181396484375p-798 {- 1377499834913990 -798 (-7.83361e-241)}
; -1.706784549185383692559980772784911096096038818359375p-432 x 1.669000749247395720686881759320385754108428955078125p-503 -1.305866406627772757786942747770808637142181396484375p-798 == -1.3058664066277729798315476728021167218685150146484375p-798
; [HW: -1.3058664066277729798315476728021167218685150146484375p-798] 

; mpf : - 1377499834913991 -798
; mpfd: - 1377499834913991 -798 (-7.83361e-241) class: Neg. norm. non-zero
; hwf : - 1377499834913991 -798 (-7.83361e-241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001001111 #b1011010011101111110101010000110000010001101111110110)))
(assert (= y (fp #b0 #b01000001000 #b1010101101000011101000100001001100000100010111100010)))
(assert (= z (fp #b1 #b00011100001 #b0100111001001101010000101100010101101001010011000110)))
(assert (= r (fp #b1 #b00011100001 #b0100111001001101010000101100010101101001010011000111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
