(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6535818914848035010578541914583183825016021728515625p31 {- 2943471162947065 31 (-3.55104e+009)}
; Y = 1.93627469355777481752056701225228607654571533203125p18 {+ 4216606361023220 18 (507583)}
; Z = 1.4294210322758147402311124096740968525409698486328125p952 {+ 1933940400942413 952 (5.44147e+286)}
; -1.6535818914848035010578541914583183825016021728515625p31 x 1.93627469355777481752056701225228607654571533203125p18 1.4294210322758147402311124096740968525409698486328125p952 == 1.42942103227581451818650748464278876781463623046875p952
; [HW: 1.42942103227581451818650748464278876781463623046875p952] 

; mpf : + 1933940400942412 952
; mpfd: + 1933940400942412 952 (5.44147e+286) class: Pos. norm. non-zero
; hwf : + 1933940400942412 952 (5.44147e+286) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000011110 #b1010011101010001001001001001000100101111010111111001)))
(assert (= y (fp #b0 #b10000010001 #b1110111110101111101100101100010011100111001011110100)))
(assert (= z (fp #b0 #b11110110111 #b0110110111101110100010010110100111010110110101001101)))
(assert (= r (fp #b0 #b11110110111 #b0110110111101110100010010110100111010110110101001100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
