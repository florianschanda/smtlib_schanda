(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3460266227151491680302797249169088900089263916015625p-869 {- 1558365369120217 -869 (-3.4197e-262)}
; Y = 1.6230733132913159888488507931469939649105072021484375p-301 {+ 2806072741563271 -301 (3.98391e-091)}
; Z = -1.28987930543770357161292849923484027385711669921875p170 {- 1305500331951660 170 (-1.9304e+051)}
; -1.3460266227151491680302797249169088900089263916015625p-869 x 1.6230733132913159888488507931469939649105072021484375p-301 -1.28987930543770357161292849923484027385711669921875p170 == -1.28987930543770357161292849923484027385711669921875p170
; [HW: -1.28987930543770357161292849923484027385711669921875p170] 

; mpf : - 1305500331951660 170
; mpfd: - 1305500331951660 170 (-1.9304e+051) class: Neg. norm. non-zero
; hwf : - 1305500331951660 170 (-1.9304e+051) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010011010 #b0101100010010101001100110110010000011011010111011001)))
(assert (= y (fp #b0 #b01011010010 #b1001111110000001101110111000111110011000101110000111)))
(assert (= z (fp #b1 #b10010101001 #b0100101000110101100001111011100010100100011000101100)))
(assert (= r (fp #b1 #b10010101001 #b0100101000110101100001111011100010100100011000101100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
