(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6365686992826680157264718218357302248477935791015625p567 {+ 2866850556885145 567 (7.90573e+170)}
; Y = 1.3377393702955726606518283006153069436550140380859375p61 {+ 1521042902211487 61 (3.08462e+018)}
; Z = -1.1754119695150964108876223690458573400974273681640625p-610 {- 789985280544513 -610 (-2.76626e-184)}
; 1.6365686992826680157264718218357302248477935791015625p567 x 1.3377393702955726606518283006153069436550140380859375p61 -1.1754119695150964108876223690458573400974273681640625p-610 == 1.0946511906119205104204183953697793185710906982421875p629
; [HW: 1.0946511906119205104204183953697793185710906982421875p629] 

; mpf : + 426271066770019 629
; mpfd: + 426271066770019 629 (2.43861e+189) class: Pos. norm. non-zero
; hwf : + 426271066770019 629 (2.43861e+189) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000110110 #b1010001011110110001010101001000100010011100010011001)))
(assert (= y (fp #b0 #b10000111100 #b0101011001110110000101100101110111111101101110011111)))
(assert (= z (fp #b1 #b00110011101 #b0010110011100111110011001000000001100100111100000001)))
(assert (= r (fp #b0 #b11001110100 #b0001100000111011000011110111100000110100101001100011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
