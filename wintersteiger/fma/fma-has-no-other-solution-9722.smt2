(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.11793029631602447437899172655306756496429443359375p-35 {- 531110838544540 -35 (-3.25361e-011)}
; Y = -1.948007751519077235258237124071456491947174072265625p900 {- 4269447356485658 900 (-1.64659e+271)}
; Z = -0.7376195378197694108024506931542418897151947021484375p-1022 {- 3321943075666311 -1023 (-1.64126e-308)}
; -1.11793029631602447437899172655306756496429443359375p-35 x -1.948007751519077235258237124071456491947174072265625p900 -0.7376195378197694108024506931542418897151947021484375p-1022 == 1.088868441440817402821039650007151067256927490234375p866
; [HW: 1.088868441440817402821039650007151067256927490234375p866] 

; mpf : + 400227879757862 866
; mpfd: + 400227879757862 866 (5.35737e+260) class: Pos. norm. non-zero
; hwf : + 400227879757862 866 (5.35737e+260) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111011100 #b0001111000110000101011100000110111100010100010011100)))
(assert (= y (fp #b1 #b11110000011 #b1111001010110000101000101101000100100001000000011010)))
(assert (= z (fp #b1 #b00000000000 #b1011110011010100101000100100111111010011100110000111)))
(assert (= r (fp #b0 #b11101100001 #b0001011011000000000101010000100110100010100000100110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
