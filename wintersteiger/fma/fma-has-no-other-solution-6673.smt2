(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4939483683212040343590842894627712666988372802734375p886 {- 2224545687511639 886 (-7.70747e+266)}
; Y = 1.0998009092186202817487128413631580770015716552734375p503 {+ 449463337568215 503 (2.88006e+151)}
; Z = -1.55014555965886469124370705685578286647796630859375p345 {- 2477635337479196 345 (-1.11102e+104)}
; -1.4939483683212040343590842894627712666988372802734375p886 x 1.0998009092186202817487128413631580770015716552734375p503 -1.55014555965886469124370705685578286647796630859375p345 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101110101 #b0111111001110011011001100111011111011010001001010111)))
(assert (= y (fp #b0 #b10111110110 #b0001100110001100100011010110100100110100011111010111)))
(assert (= z (fp #b1 #b10101011000 #b1000110011010110010101101110001011000110010000011100)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
