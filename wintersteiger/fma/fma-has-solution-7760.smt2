(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.85612120522245049869525246322154998779296875p897 {+ 3855627140823808 897 (1.96116e+270)}
; Y = 1.37849794728443786340221777209080755710601806640625p-636 {+ 1704603214350692 -636 (4.83425e-192)}
; Z = 1.3717576753647862108920207901974208652973175048828125p-4 {+ 1674247728244973 -4 (0.0857349)}
; 1.85612120522245049869525246322154998779296875p897 x 1.37849794728443786340221777209080755710601806640625p-636 1.3717576753647862108920207901974208652973175048828125p-4 == 1.279329635655132246796483741491101682186126708984375p262
; [HW: 1.279329635655132246796483741491101682186126708984375p262] 

; mpf : + 1257988843049990 262
; mpfd: + 1257988843049990 262 (9.48072e+078) class: Pos. norm. non-zero
; hwf : + 1257988843049990 262 (9.48072e+078) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110000000 #b1101101100101010110000100110000111010111101100000000)))
(assert (= y (fp #b0 #b00110000011 #b0110000011100101001111011101000100110000100101100100)))
(assert (= z (fp #b0 #b01111111011 #b0101111100101011100000101101000110111010100011101101)))
(assert (= r (fp #b0 #b10100000101 #b0100011110000010001001011010000111110001010000000110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
