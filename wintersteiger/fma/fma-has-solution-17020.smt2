(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.07941023409400660426626927801407873630523681640625p1014 {+ 357631900675172 1014 (1.89497e+305)}
; Y = 1.3385458440475457297935690803569741547107696533203125p-823 {+ 1524674937100357 -823 (2.39302e-248)}
; Z = 1.3832563034730316342546529995161108672618865966796875p-836 {+ 1726032945508539 -836 (3.01874e-252)}
; 1.07941023409400660426626927801407873630523681640625p1014 x 1.3385458440475457297935690803569741547107696533203125p-823 1.3832563034730316342546529995161108672618865966796875p-836 == 1.4448400828689209607347265773569233715534210205078125p191
; [HW: 1.4448400828689209607347265773569233715534210205078125p191] 

; mpf : + 2003381631447933 191
; mpfd: + 2003381631447933 191 (4.5347e+057) class: Pos. norm. non-zero
; hwf : + 2003381631447933 191 (4.5347e+057) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111110101 #b0001010001010100001110101010011001100110110001100100)))
(assert (= y (fp #b0 #b00011001000 #b0101011010101010111100001100000001100001100001000101)))
(assert (= z (fp #b0 #b00010111011 #b0110001000011101000101011100100101100111000010111011)))
(assert (= r (fp #b0 #b10010111110 #b0111000111100001000010100010011111011111001101111101)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
