(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.97492250079600406564850345603190362453460693359375p-232 {+ 4390660611299996 -232 (2.86148e-070)}
; Y = 1.0129000005903019410169463299098424613475799560546875p-497 {+ 58096437851563 -497 (2.47548e-150)}
; Z = 1.7904589950367728601321459791506640613079071044921875p59 {+ 3559910835499267 59 (1.03213e+018)}
; 1.97492250079600406564850345603190362453460693359375p-232 x 1.0129000005903019410169463299098424613475799560546875p-497 1.7904589950367728601321459791506640613079071044921875p59 == 1.79045899503677308217675090418197214603424072265625p59
; [HW: 1.79045899503677308217675090418197214603424072265625p59] 

; mpf : + 3559910835499268 59
; mpfd: + 3559910835499268 59 (1.03213e+018) class: Pos. norm. non-zero
; hwf : + 3559910835499268 59 (1.03213e+018) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100010111 #b1111100110010100100001010110000100001101101010011100)))
(assert (= y (fp #b0 #b01000001110 #b0000001101001101011010100001100010100111010110101011)))
(assert (= z (fp #b0 #b10000111010 #b1100101001011011100001010100110010000011000100000011)))
(assert (= r (fp #b0 #b10000111010 #b1100101001011011100001010100110010000011000100000100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
