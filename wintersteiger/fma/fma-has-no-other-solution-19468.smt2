(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.48048778543332293367029706132598221302032470703125p-691 {+ 2163924611433588 -691 (1.44105e-208)}
; Y = 1.752309532544656267560867490828968584537506103515625p30 {+ 3388100930435386 30 (1.88153e+009)}
; Z = +zero {+ 0 -1023 (0)}
; 1.48048778543332293367029706132598221302032470703125p-691 x 1.752309532544656267560867490828968584537506103515625p30 +zero == 1.2971364296153697903690726889180950820446014404296875p-660
; [HW: 1.2971364296153697903690726889180950820446014404296875p-660] 

; mpf : + 1338183513693979 -660
; mpfd: + 1338183513693979 -660 (2.71137e-199) class: Pos. norm. non-zero
; hwf : + 1338183513693979 -660 (2.71137e-199) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101001100 #b0111101100000001001111110101110010010000010001110100)))
(assert (= y (fp #b0 #b10000011101 #b1100000010010111010110111000011010111111100100111010)))
(assert (= z (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= r (fp #b0 #b00101101011 #b0100110000010001001000100000111110100101111100011011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
