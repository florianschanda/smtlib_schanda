(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.350140064049361487974465489969588816165924072265625p-515 {- 1576890661980186 -515 (-1.25873e-155)}
; Y = -1.66620737107266858600951309199444949626922607421875p837 {- 3000331268114348 837 (-1.52699e+252)}
; Z = -1.923425796560297218462665114202536642551422119140625p-454 {- 4158740073293258 -454 (-4.13483e-137)}
; -1.350140064049361487974465489969588816165924072265625p-515 x -1.66620737107266858600951309199444949626922607421875p837 -1.923425796560297218462665114202536642551422119140625p-454 == 1.1248066633497855182355351644218899309635162353515625p323
; [HW: 1.1248066633497855182355351644218899309635162353515625p323] 

; mpf : + 562079242555449 323
; mpfd: + 562079242555449 323 (1.92206e+097) class: Pos. norm. non-zero
; hwf : + 562079242555449 323 (1.92206e+097) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111111100 #b0101100110100010110001110111110000011100100000011010)))
(assert (= y (fp #b1 #b11101000100 #b1010101010001100100100001111011100011100011110101100)))
(assert (= z (fp #b1 #b01000111001 #b1110110001100101101000100000110010000010010111001010)))
(assert (= r (fp #b0 #b10101000010 #b0001111111110011010101000101100101101001000000111001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
