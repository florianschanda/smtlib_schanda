(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.168677346605116351696551646455191075801849365234375p-331 {+ 759655235316646 -331 (2.67157e-100)}
; Y = -1.58837167960373459862921663443557918071746826171875p1 {- 2649790477018732 1 (-3.17674)}
; Z = -1.7461763631429765286640076737967319786548614501953125p1007 {- 3360479591003381 1007 (-2.39494e+303)}
; 1.168677346605116351696551646455191075801849365234375p-331 x -1.58837167960373459862921663443557918071746826171875p1 -1.7461763631429765286640076737967319786548614501953125p1007 == -1.7461763631429765286640076737967319786548614501953125p1007
; [HW: -1.7461763631429765286640076737967319786548614501953125p1007] 

; mpf : - 3360479591003381 1007
; mpfd: - 3360479591003381 1007 (-2.39494e+303) class: Neg. norm. non-zero
; hwf : - 3360479591003381 1007 (-2.39494e+303) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010110100 #b0010101100101110011100000100011100111110101110100110)))
(assert (= y (fp #b1 #b10000000000 #b1001011010011111100001101100000111001010011001101100)))
(assert (= z (fp #b1 #b11111101110 #b1011111100000101011010100000010010111111010011110101)))
(assert (= r (fp #b1 #b11111101110 #b1011111100000101011010100000010010111111010011110101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
