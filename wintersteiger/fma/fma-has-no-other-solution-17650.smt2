(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4018020420583645613277212760294787585735321044921875p896 {- 1809555526890755 896 (-7.40564e+269)}
; Y = -1.290376660721415102983655742718838155269622802734375p1010 {- 1307740221022054 1010 (-1.41583e+304)}
; Z = 1.0714945673007447712876682999194599688053131103515625p131 {+ 321982906654649 131 (2.91689e+039)}
; -1.4018020420583645613277212760294787585735321044921875p896 x -1.290376660721415102983655742718838155269622802734375p1010 1.0714945673007447712876682999194599688053131103515625p131 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101111111 #b0110011011011100011111111010011000011011010100000011)))
(assert (= y (fp #b1 #b11111110001 #b0100101001010110000111111111010101010001111101100110)))
(assert (= z (fp #b0 #b10010000010 #b0001001001001101011101111100110001100101111110111001)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
