(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.78002833023210360607890834216959774494171142578125p-595 {- 3512935297371732 -595 (-1.37271e-179)}
; Y = -1.8824956919323050374970307530020363628864288330078125p696 {- 3974407269342397 696 (-6.18886e+209)}
; Z = 1.6130564975085619483508025950868614017963409423828125p-630 {+ 2760961013736621 -630 (3.62036e-190)}
; -1.78002833023210360607890834216959774494171142578125p-595 x -1.8824956919323050374970307530020363628864288330078125p696 1.6130564975085619483508025950868614017963409423828125p-630 == 1.6754478315896947915319969979464076459407806396484375p102
; [HW: 1.6754478315896947915319969979464076459407806396484375p102] 

; mpf : + 3041946602655559 102
; mpfd: + 3041946602655559 102 (8.49553e+030) class: Pos. norm. non-zero
; hwf : + 3041946602655559 102 (8.49553e+030) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110101100 #b1100011110101111111011111100100001001100111001010100)))
(assert (= y (fp #b1 #b11010110111 #b1110000111101011001111001101011110110101110010111101)))
(assert (= z (fp #b0 #b00110001001 #b1001110011110001010001010100011101100110010010101101)))
(assert (= r (fp #b0 #b10001100101 #b1010110011101010001001100010101011010100111101000111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
