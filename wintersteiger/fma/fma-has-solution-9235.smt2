(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5630632084997240216495129061513580381870269775390625p-282 {+ 2535811255985393 -282 (2.01149e-085)}
; Y = 1.784033905891176718938595513463951647281646728515625p-659 {+ 3530974806417338 -659 (7.45823e-199)}
; Z = 1.1152702875984814578913528748671524226665496826171875p40 {+ 519131224275411 40 (1.22625e+012)}
; 1.5630632084997240216495129061513580381870269775390625p-282 x 1.784033905891176718938595513463951647281646728515625p-659 1.1152702875984814578913528748671524226665496826171875p40 == 1.11527028759848167993595779989846050739288330078125p40
; [HW: 1.11527028759848167993595779989846050739288330078125p40] 

; mpf : + 519131224275412 40
; mpfd: + 519131224275412 40 (1.22625e+012) class: Pos. norm. non-zero
; hwf : + 519131224275412 40 (1.22625e+012) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011100101 #b1001000000100100111010010001001000010110010011110001)))
(assert (= y (fp #b0 #b00101101100 #b1100100010110110011100100011000011000001111110111010)))
(assert (= z (fp #b0 #b10000100111 #b0001110110000010010110101000001101101111100111010011)))
(assert (= r (fp #b0 #b10000100111 #b0001110110000010010110101000001101101111100111010100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
