(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9281710513511434168520963794435374438762664794921875p-464 {+ 4180110801001091 -464 (4.04788e-140)}
; Y = -1.4069008170601027263302285064128227531909942626953125p716 {- 1832518368088629 716 (-4.84998e+215)}
; Z = -1.17102860028637767442205586121417582035064697265625p799 {- 770244340519428 799 (-3.90422e+240)}
; 1.9281710513511434168520963794435374438762664794921875p-464 x -1.4069008170601027263302285064128227531909942626953125p716 -1.17102860028637767442205586121417582035064697265625p799 == -1.17102860028637767442205586121417582035064697265625p799
; [HW: -1.17102860028637767442205586121417582035064697265625p799] 

; mpf : - 770244340519428 799
; mpfd: - 770244340519428 799 (-3.90422e+240) class: Neg. norm. non-zero
; hwf : - 770244340519428 799 (-3.90422e+240) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000101111 #b1110110110011100100111100011011010100101101010000011)))
(assert (= y (fp #b1 #b11011001011 #b0110100000101010101001101110010111111101001000110101)))
(assert (= z (fp #b1 #b11100011110 #b0010101111001000100001111100010011101001001000000100)))
(assert (= r (fp #b1 #b11100011110 #b0010101111001000100001111100010011101001001000000100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
