(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1503115047507554979944188744411803781986236572265625p307 {- 676942836785001 307 (-2.99933e+092)}
; Y = 1.6108846072830280693466420416370965540409088134765625p-167 {+ 2751179689726217 -167 (8.61103e-051)}
; Z = 1.1272325868404091675500922065111808478832244873046875p171 {+ 573004630683851 171 (3.37398e+051)}
; -1.1503115047507554979944188744411803781986236572265625p307 x 1.6108846072830280693466420416370965540409088134765625p-167 1.1272325868404091675500922065111808478832244873046875p171 == 1.12723258597752984400131026632152497768402099609375p171
; [HW: 1.12723258597752984400131026632152497768402099609375p171] 

; mpf : + 573004626797788 171
; mpfd: + 573004626797788 171 (3.37398e+051) class: Pos. norm. non-zero
; hwf : + 573004626797788 171 (3.37398e+051) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100110010 #b0010011001111010110100001001010100011101111101101001)))
(assert (= y (fp #b0 #b01101011000 #b1001110001100010111011110000000111101001000100001001)))
(assert (= z (fp #b0 #b10010101010 #b0010000010010010010100001001011101110111000011001011)))
(assert (= r (fp #b0 #b10010101010 #b0010000010010010010100001001001111000010010011011100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
