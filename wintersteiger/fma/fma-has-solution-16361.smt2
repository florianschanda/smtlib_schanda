(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0413460390530833166167212766595184803009033203125p715 {- 186206006072712 715 (-1.79491e+215)}
; Y = 1.2146195931295118430881530002807267010211944580078125p-521 {+ 966560719644477 -521 (1.76935e-157)}
; Z = 1.6367577625184346334918927823309786617755889892578125p-540 {+ 2867702022003293 -540 (4.54765e-163)}
; -1.0413460390530833166167212766595184803009033203125p715 x 1.2146195931295118430881530002807267010211944580078125p-521 1.6367577625184346334918927823309786617755889892578125p-540 == -1.264839302261684839123745405231602489948272705078125p194
; [HW: -1.264839302261684839123745405231602489948272705078125p194] 

; mpf : - 1192730182978786 194
; mpfd: - 1192730182978786 194 (-3.17581e+058) class: Neg. norm. non-zero
; hwf : - 1192730182978786 194 (-3.17581e+058) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011001010 #b0000101010010101101001110110110110001101010110001000)))
(assert (= y (fp #b0 #b00111110110 #b0011011011110001010011110100010110010010011100111101)))
(assert (= z (fp #b0 #b00111100011 #b1010001100000010100011101000010101111101101001011101)))
(assert (= r (fp #b1 #b10011000001 #b0100001111001100100000100010110111101000110011100010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
