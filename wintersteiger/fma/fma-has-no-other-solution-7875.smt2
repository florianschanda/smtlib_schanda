(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.827163888036326344632698237546719610691070556640625p-419 {- 3725214977934730 -419 (-1.34961e-126)}
; Y = -1.9574723124207931146401051591965369880199432373046875p-23 {- 4312071949435851 -23 (-2.33349e-007)}
; Z = 1.449182429875141675523764206445775926113128662109375p-561 {+ 2022937823807062 -561 (1.91997e-169)}
; -1.827163888036326344632698237546719610691070556640625p-419 x -1.9574723124207931146401051591965369880199432373046875p-23 1.449182429875141675523764206445775926113128662109375p-561 == 1.7883113605431173454007875989191234111785888671875p-441
; [HW: 1.7883113605431173454007875989191234111785888671875p-441] 

; mpf : + 3550238749593912 -441
; mpfd: + 3550238749593912 -441 (3.14931e-133) class: Pos. norm. non-zero
; hwf : + 3550238749593912 -441 (3.14931e-133) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001011100 #b1101001111000001000000110011011110001100010110001010)))
(assert (= y (fp #b1 #b01111101000 #b1111010100011100111001111100110010101100001111001011)))
(assert (= z (fp #b0 #b00111001110 #b0111001011111101100111101010011001000000011001010110)))
(assert (= r (fp #b0 #b01001000110 #b1100100111001110110001011111100010011001000100111000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
