(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.103629979493419899228001668234355747699737548828125p-418 {+ 466707937030978 -418 (1.63037e-126)}
; Y = -1.026687989006280332660026033408939838409423828125p480 {- 120192017343952 480 (-3.20506e+144)}
; Z = -1.2279801021314569187126153337885625660419464111328125p-96 {- 1026731103007117 -96 (-1.54993e-029)}
; 1.103629979493419899228001668234355747699737548828125p-418 x -1.026687989006280332660026033408939838409423828125p480 -1.2279801021314569187126153337885625660419464111328125p-96 == -1.1330836442531417862511489147436805069446563720703125p62
; [HW: -1.1330836442531417862511489147436805069446563720703125p62] 

; mpf : - 599355450667557 62
; mpfd: - 599355450667557 62 (-5.22543e+018) class: Neg. norm. non-zero
; hwf : - 599355450667557 62 (-5.22543e+018) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001011101 #b0001101010000111011111101000110011001111001101000010)))
(assert (= y (fp #b1 #b10111011111 #b0000011011010101000001100010011111111010010111010000)))
(assert (= z (fp #b1 #b01110011111 #b0011101001011100111001110110101011001011000110001101)))
(assert (= r (fp #b1 #b10000111101 #b0010001000010001110001010000101110110011001000100101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
