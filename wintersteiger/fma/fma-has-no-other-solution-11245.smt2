(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3634536631125719896573400546913035213947296142578125p866 {- 1636849781760221 866 (-6.70836e+260)}
; Y = -1.980966144429910258395466371439397335052490234375p837 {- 4417878762517616 837 (-1.81545e+252)}
; Z = 1.1381831553396162259872426147921942174434661865234375p697 {+ 622321606896375 697 (7.48375e+209)}
; -1.3634536631125719896573400546913035213947296142578125p866 x -1.980966144429910258395466371439397335052490234375p837 1.1381831553396162259872426147921942174434661865234375p697 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101100001 #b0101110100001011010011001001110010101110000011011101)))
(assert (= y (fp #b1 #b11101000100 #b1111101100100000100110001110010011001111010001110000)))
(assert (= z (fp #b0 #b11010111000 #b0010001101011111111110001010010100001010101011110111)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
