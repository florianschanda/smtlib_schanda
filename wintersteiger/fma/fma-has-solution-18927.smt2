(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.78320664621175328790059211314655840396881103515625p-692 {- 3527249160033348 -692 (-8.6785e-209)}
; Y = 1.653292627156802918619860065518878400325775146484375p-625 {+ 2942168432227270 -625 (1.18741e-188)}
; Z = 1.3885523944079525282546683229156769812107086181640625p369 {+ 1749884418669569 369 (1.66967e+111)}
; -1.78320664621175328790059211314655840396881103515625p-692 x 1.653292627156802918619860065518878400325775146484375p-625 1.3885523944079525282546683229156769812107086181640625p369 == 1.388552394407952306210063397884368896484375p369
; [HW: 1.388552394407952306210063397884368896484375p369] 

; mpf : + 1749884418669568 369
; mpfd: + 1749884418669568 369 (1.66967e+111) class: Pos. norm. non-zero
; hwf : + 1749884418669568 369 (1.66967e+111) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101001011 #b1100100010000000001110110001001101111101010001000100)))
(assert (= y (fp #b0 #b00110001110 #b1010011100111110001011111000010001011011001111000110)))
(assert (= z (fp #b0 #b10101110000 #b0110001101111000001010110111001011000011110000000001)))
(assert (= r (fp #b0 #b10101110000 #b0110001101111000001010110111001011000011110000000000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
