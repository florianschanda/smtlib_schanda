(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.20314967545516982028175334562547504901885986328125p413 {- 914904802680340 413 (-2.54512e+124)}
; Y = -1.2066518798860528249861090444028377532958984375p176 {- 930677329250240 176 (-1.15574e+053)}
; Z = 1.85284667522801527184128644876182079315185546875p839 {+ 3840879968761056 839 (6.79213e+252)}
; -1.20314967545516982028175334562547504901885986328125p413 x -1.2066518798860528249861090444028377532958984375p176 1.85284667522801527184128644876182079315185546875p839 == 1.8528466752280154938858913737931288778781890869140625p839
; [HW: 1.8528466752280154938858913737931288778781890869140625p839] 

; mpf : + 3840879968761057 839
; mpfd: + 3840879968761057 839 (6.79213e+252) class: Pos. norm. non-zero
; hwf : + 3840879968761057 839 (6.79213e+252) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110011100 #b0011010000000001100111011111110001000101111000010100)))
(assert (= y (fp #b1 #b10010101111 #b0011010011100111001000110011100111000100011111000000)))
(assert (= z (fp #b0 #b11101000110 #b1101101001010100001010001110001010011011010011100000)))
(assert (= r (fp #b0 #b11101000110 #b1101101001010100001010001110001010011011010011100001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
