(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.526055432942495571069230209104716777801513671875p486 {+ 2369143051776048 486 (3.04894e+146)}
; Y = 1.8606185898737737094421618166961707174777984619140625p-458 {+ 3875881560663649 -458 (2.49988e-138)}
; Z = -1.253439965418093660076692685834132134914398193359375p27 {- 1141392133817718 27 (-1.68234e+008)}
; 1.526055432942495571069230209104716777801513671875p486 x 1.8606185898737737094421618166961707174777984619140625p-458 -1.253439965418093660076692685834132134914398193359375p27 == 1.106343562500815114191254906472750008106231689453125p29
; [HW: 1.106343562500815114191254906472750008106231689453125p29] 

; mpf : + 478928828451922 29
; mpfd: + 478928828451922 29 (5.93964e+008) class: Pos. norm. non-zero
; hwf : + 478928828451922 29 (5.93964e+008) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111100101 #b1000011010101011100100011010000001011111000000110000)))
(assert (= y (fp #b0 #b01000110101 #b1101110001010001011111111111100111010110011001100001)))
(assert (= z (fp #b1 #b10000011010 #b0100000011100001011100010000101011111000010101110110)))
(assert (= r (fp #b0 #b10000011100 #b0001101100111001010101001110101100010100110001010010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
