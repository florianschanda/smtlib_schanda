(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.49954261560473778303048675297759473323822021484375p-204 {+ 2249739937493180 -204 (5.8323e-062)}
; Y = 1.025459536640197288903664230019785463809967041015625p-993 {+ 114659559725818 -993 (1.22499e-299)}
; Z = -1.9957024999108272655945484075346030294895172119140625p303 {- 4484245407570273 303 (-3.25225e+091)}
; 1.49954261560473778303048675297759473323822021484375p-204 x 1.025459536640197288903664230019785463809967041015625p-993 -1.9957024999108272655945484075346030294895172119140625p303 == -1.99570249991082704354994348250329494476318359375p303
; [HW: -1.99570249991082704354994348250329494476318359375p303] 

; mpf : - 4484245407570272 303
; mpfd: - 4484245407570272 303 (-3.25225e+091) class: Neg. norm. non-zero
; hwf : - 4484245407570272 303 (-3.25225e+091) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110011 #b0111111111100010000001100101110011111011000010111100)))
(assert (= y (fp #b0 #b00000011110 #b0000011010000100100001000010010100111101101011111010)))
(assert (= z (fp #b1 #b10100101110 #b1111111011100110010110111110100110101001100101100001)))
(assert (= r (fp #b1 #b10100101110 #b1111111011100110010110111110100110101001100101100000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
