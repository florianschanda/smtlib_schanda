(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.814257908011634778944198842509649693965911865234375p877 {+ 3667091611104678 877 (1.82812e+264)}
; Y = 1.2873677529313407585931372523191384971141815185546875p-840 {+ 1294189305019883 -840 (1.75593e-253)}
; Z = -1.1151302490438148584672717333887703716754913330078125p658 {- 518500546692797 658 (-1.33371e+198)}
; 1.814257908011634778944198842509649693965911865234375p877 x 1.2873677529313407585931372523191384971141815185546875p-840 -1.1151302490438148584672717333887703716754913330078125p658 == -1.11513024904381463642266680835746228694915771484375p658
; [HW: -1.11513024904381463642266680835746228694915771484375p658] 

; mpf : - 518500546692796 658
; mpfd: - 518500546692796 658 (-1.33371e+198) class: Neg. norm. non-zero
; hwf : - 518500546692796 658 (-1.33371e+198) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101101100 #b1101000001110011001101001100110101101011010110100110)))
(assert (= y (fp #b0 #b00010110111 #b0100100110010000111011101101110011000011110111101011)))
(assert (= z (fp #b1 #b11010010001 #b0001110101111001001011010000111001101100011010111101)))
(assert (= r (fp #b1 #b11010010001 #b0001110101111001001011010000111001101100011010111100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
