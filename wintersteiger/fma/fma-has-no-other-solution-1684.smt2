(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7561562774227230665502474948880262672901153564453125p-169 {- 3405425129234837 -169 (-2.3469e-051)}
; Y = 1.758939746690142857943328635883517563343048095703125p-348 {+ 3417960760390386 -348 (3.0677e-105)}
; Z = -1.811903678291875596784166191355325281620025634765625p-325 {- 3656489103016026 -325 (-2.65086e-098)}
; -1.7561562774227230665502474948880262672901153564453125p-169 x 1.758939746690142857943328635883517563343048095703125p-348 -1.811903678291875596784166191355325281620025634765625p-325 == -1.8119036782918758188287711163866333663463592529296875p-325
; [HW: -1.8119036782918758188287711163866333663463592529296875p-325] 

; mpf : - 3656489103016027 -325
; mpfd: - 3656489103016027 -325 (-2.65086e-098) class: Neg. norm. non-zero
; hwf : - 3656489103016027 -325 (-2.65086e-098) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101010110 #b1100000110010011011101010011001000110010000110010101)))
(assert (= y (fp #b0 #b01010100011 #b1100001001001001111000000000111110101011001011110010)))
(assert (= z (fp #b1 #b01010111010 #b1100111111011000111010110110000111000100000001011010)))
(assert (= r (fp #b1 #b01010111010 #b1100111111011000111010110110000111000100000001011011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
