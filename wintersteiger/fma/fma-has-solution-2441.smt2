(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.288786746870492994077039838884957134723663330078125p269 {- 1300579885595490 269 (-1.2225e+081)}
; Y = -1.7899737766582843878637731904746033251285552978515625p-10 {- 3557725606190713 -10 (-0.00174802)}
; Z = 1.3839999950609820356106638428173027932643890380859375p591 {+ 1729382234666911 591 (1.12167e+178)}
; -1.288786746870492994077039838884957134723663330078125p269 x -1.7899737766582843878637731904746033251285552978515625p-10 1.3839999950609820356106638428173027932643890380859375p591 == 1.3839999950609820356106638428173027932643890380859375p591
; [HW: 1.3839999950609820356106638428173027932643890380859375p591] 

; mpf : + 1729382234666911 591
; mpfd: + 1729382234666911 591 (1.12167e+178) class: Pos. norm. non-zero
; hwf : + 1729382234666911 591 (1.12167e+178) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100001100 #b0100100111101101111011011010000101010011101101100010)))
(assert (= y (fp #b1 #b01111110101 #b1100101000111011101110001010111101110001111001111001)))
(assert (= z (fp #b0 #b11001001110 #b0110001001001101110100101101110001110011011110011111)))
(assert (= r (fp #b0 #b11001001110 #b0110001001001101110100101101110001110011011110011111)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
