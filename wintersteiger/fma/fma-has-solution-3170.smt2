(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.182590931638263231917562734452076256275177001953125p572 {+ 822316451687314 572 (1.82807e+172)}
; Y = -1.537462094417781255373256499296985566616058349609375p308 {- 2420514088145686 308 (-8.01758e+092)}
; Z = -1.73417302184537813758424817933700978755950927734375p-615 {- 3306421347608316 -615 (-1.2754e-185)}
; 1.182590931638263231917562734452076256275177001953125p572 x -1.537462094417781255373256499296985566616058349609375p308 -1.73417302184537813758424817933700978755950927734375p-615 == -1.818188730596039359710403005010448396205902099609375p880
; [HW: -1.818188730596039359710403005010448396205902099609375p880] 

; mpf : - 3684794462231062 880
; mpfd: - 3684794462231062 880 (-1.46567e+265) class: Neg. norm. non-zero
; hwf : - 3684794462231062 880 (-1.46567e+265) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000111011 #b0010111010111110010001110111111111101110101110010010)))
(assert (= y (fp #b1 #b10100110011 #b1000100110010111000111011010011001011101001100010110)))
(assert (= z (fp #b1 #b00110011000 #b1011101111110010110000110101111001101110011011111100)))
(assert (= r (fp #b1 #b11101101111 #b1101000101110100110100010000111111011101101000010110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
