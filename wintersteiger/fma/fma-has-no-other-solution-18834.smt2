(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.287142193139851453764777033939026296138763427734375p593 {+ 1293173474026982 593 (4.17267e+178)}
; Y = 1.5534009605005134613264772269758395850658416748046875p-1017 {+ 2492296359496587 -1017 (1.10606e-306)}
; Z = 1.9192665480743469341717855058959685266017913818359375p-355 {+ 4140008483361791 -355 (2.61509e-107)}
; 1.287142193139851453764777033939026296138763427734375p593 x 1.5534009605005134613264772269758395850658416748046875p-1017 1.9192665480743469341717855058959685266017913818359375p-355 == 1.919266548074347156216390430927276611328125p-355
; [HW: 1.919266548074347156216390430927276611328125p-355] 

; mpf : + 4140008483361792 -355
; mpfd: + 4140008483361792 -355 (2.61509e-107) class: Pos. norm. non-zero
; hwf : + 4140008483361792 -355 (2.61509e-107) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001010000 #b0100100110000010001001101001100011010110010111100110)))
(assert (= y (fp #b0 #b00000000110 #b1000110110101011101011110111001011101100101110001011)))
(assert (= z (fp #b0 #b01010011100 #b1110101101010101000011010111000001001001001111111111)))
(assert (= r (fp #b0 #b01010011100 #b1110101101010101000011010111000001001001010000000000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
