(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.525758225994348737941663785022683441638946533203125p1007 {- 2367804550675122 1007 (-2.09262e+303)}
; Y = 1.3591531337081423913559774518944323062896728515625p713 {+ 1617481919136936 713 (5.85673e+214)}
; Z = 1.7018454140623784365260462436708621680736541748046875p57 {+ 3160830745243019 57 (2.45262e+017)}
; -1.525758225994348737941663785022683441638946533203125p1007 x 1.3591531337081423913559774518944323062896728515625p713 1.7018454140623784365260462436708621680736541748046875p57 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111101110 #b1000011010011000000101110101001000111111101010110010)))
(assert (= y (fp #b0 #b11011001000 #b0101101111110001011101011011001110001000010010101000)))
(assert (= z (fp #b0 #b10000111000 #b1011001110101100001001000001110000111110110110001011)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
