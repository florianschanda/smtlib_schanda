(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0296991957066274903098701543058268725872039794921875p-852 {+ 133753286717571 -852 (3.42889e-257)}
; Y = -1.3447395059695708141589420847594738006591796875p346 {- 1552568710624448 346 (-1.9276e+104)}
; Z = 1.426607088371987241970373361255042254924774169921875p-570 {+ 1921267524225694 -570 (3.69153e-172)}
; 1.0296991957066274903098701543058268725872039794921875p-852 x -1.3447395059695708141589420847594738006591796875p346 1.426607088371987241970373361255042254924774169921875p-570 == -1.3846771877317944898777568596415221691131591796875p-506
; [HW: -1.3846771877317944898777568596415221691131591796875p-506] 

; mpf : - 1732432039326840 -506
; mpfd: - 1732432039326840 -506 (-6.60953e-153) class: Neg. norm. non-zero
; hwf : - 1732432039326840 -506 (-6.60953e-153) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010101011 #b0000011110011010010111011101001001000111000010000011)))
(assert (= y (fp #b1 #b10101011001 #b0101100001000000110110010010011111000111010011000000)))
(assert (= z (fp #b0 #b00111000101 #b0110110100110110000111110100010011001100101010011110)))
(assert (= r (fp #b1 #b01000000101 #b0110001001111010001101000100010011010011010001111000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
