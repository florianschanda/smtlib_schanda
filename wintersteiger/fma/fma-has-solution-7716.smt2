(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.22394457867212924639943594229407608509063720703125p-264 {- 1008556721059444 -264 (-4.12898e-080)}
; Y = 1.3617355421945347426770922538707964122295379638671875p431 {+ 1629112053033971 431 (7.55129e+129)}
; Z = -1.2739320346273255157854009667062200605869293212890625p-268 {- 1233680209072465 -268 (-2.68601e-081)}
; -1.22394457867212924639943594229407608509063720703125p-264 x 1.3617355421945347426770922538707964122295379638671875p431 -1.2739320346273255157854009667062200605869293212890625p-268 == -1.6666888344541532784859327875892631709575653076171875p167
; [HW: -1.6666888344541532784859327875892631709575653076171875p167] 

; mpf : - 3002499586419795 167
; mpfd: - 3002499586419795 167 (-3.11791e+050) class: Neg. norm. non-zero
; hwf : - 3002499586419795 167 (-3.11791e+050) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011110111 #b0011100101010100011011101001000110000011011001110100)))
(assert (= y (fp #b0 #b10110101110 #b0101110010011010101100110101001110000110101111110011)))
(assert (= z (fp #b1 #b01011110011 #b0100011000100000011010001110101000001101000101010001)))
(assert (= r (fp #b1 #b10010100110 #b1010101010101100000111101001010010010110110001010011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
