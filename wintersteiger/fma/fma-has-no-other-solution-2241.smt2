(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4542419567584985440333866790751926600933074951171875p154 {- 2045723907193619 154 (-3.3209e+046)}
; Y = -1.30345273456018784230536766699515283107757568359375p634 {- 1366629622289820 634 (-9.29207e+190)}
; Z = -1.7924216904839915809333206198061816394329071044921875p587 {- 3568750029984003 587 (-9.0792e+176)}
; -1.4542419567584985440333866790751926600933074951171875p154 x -1.30345273456018784230536766699515283107757568359375p634 -1.7924216904839915809333206198061816394329071044921875p587 == 1.895535655249023232471472510951571166515350341796875p788
; [HW: 1.895535655249023232471472510951571166515350341796875p788] 

; mpf : + 4033134043276494 788
; mpfd: + 4033134043276494 788 (3.08581e+237) class: Pos. norm. non-zero
; hwf : + 4033134043276494 788 (3.08581e+237) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010011001 #b0111010001001001001100110110110010111111101100010011)))
(assert (= y (fp #b1 #b11001111001 #b0100110110101111000101000001001011010001010110011100)))
(assert (= z (fp #b1 #b11001001010 #b1100101011011100001001011101110101000101000100000011)))
(assert (= r (fp #b0 #b11100010011 #b1110010101000001110100110001111110110010010011001110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
