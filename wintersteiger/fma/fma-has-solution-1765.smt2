(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.41525722281854537953904582536779344081878662109375p-455 {- 1870152273948508 -455 (-1.5212e-137)}
; Y = -1.07898892700807902400583770941011607646942138671875p656 {- 355734502239980 656 (-3.22622e+197)}
; Z = 1.457937804886581201202488955459557473659515380859375p-866 {+ 2062368527446070 -866 (2.96321e-261)}
; -1.41525722281854537953904582536779344081878662109375p-455 x -1.07898892700807902400583770941011607646942138671875p656 1.457937804886581201202488955459557473659515380859375p-866 == 1.5270468722894159352421183939441107213497161865234375p201
; [HW: 1.5270468722894159352421183939441107213497161865234375p201] 

; mpf : + 2373608097649399 201
; mpfd: + 2373608097649399 201 (4.90774e+060) class: Pos. norm. non-zero
; hwf : + 2373608097649399 201 (4.90774e+060) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000111000 #b0110101001001110010011000001111101101110111101011100)))
(assert (= y (fp #b1 #b11010001111 #b0001010000111000100111100100101000111110111011101100)))
(assert (= z (fp #b0 #b00010011101 #b0111010100111011011010010111011110010111000000110110)))
(assert (= r (fp #b0 #b10011001000 #b1000011011101100100010110011011111110001001011110111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
