(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8418724681757316918861988597200252115726470947265625p781 {- 3791456533969705 781 (-2.34254e+235)}
; Y = 1.062361520777294732198470228468067944049835205078125p-243 {+ 280851321734882 -243 (7.51594e-074)}
; Z = 1.337430814175299520485395987634547054767608642578125p-290 {+ 1519653288983202 -290 (6.72315e-088)}
; -1.8418724681757316918861988597200252115726470947265625p781 x 1.062361520777294732198470228468067944049835205078125p-243 1.337430814175299520485395987634547054767608642578125p-290 == -1.9567344363689997965849443062325008213520050048828125p538
; [HW: -1.9567344363689997965849443062325008213520050048828125p538] 

; mpf : - 4308748851123949 538
; mpfd: - 4308748851123949 538 (-1.76064e+162) class: Neg. norm. non-zero
; hwf : - 4308748851123949 538 (-1.76064e+162) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100001100 #b1101011110000100111101000011111000110111101100101001)))
(assert (= y (fp #b0 #b01100001100 #b0000111111110110111011001011010001000100011011100010)))
(assert (= z (fp #b0 #b01011011101 #b0101011001100001110111011010011110001011101010100010)))
(assert (= r (fp #b1 #b11000011001 #b1111010011101100100011000100101100101001011011101101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
