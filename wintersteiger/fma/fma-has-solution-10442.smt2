(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2965967025476603513567397385486401617527008056640625p-702 {+ 1335752799072961 -702 (6.16237e-212)}
; Y = 1.8892151115363182700690458659664727747440338134765625p237 {+ 4004668844967177 237 (4.17244e+071)}
; Z = 1.691380274541506967267423533485271036624908447265625p423 {+ 3113699946796442 423 (3.66378e+127)}
; 1.2965967025476603513567397385486401617527008056640625p-702 x 1.8892151115363182700690458659664727747440338134765625p237 1.691380274541506967267423533485271036624908447265625p423 == 1.691380274541506967267423533485271036624908447265625p423
; [HW: 1.691380274541506967267423533485271036624908447265625p423] 

; mpf : + 3113699946796442 423
; mpfd: + 3113699946796442 423 (3.66378e+127) class: Pos. norm. non-zero
; hwf : + 3113699946796442 423 (3.66378e+127) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101000001 #b0100101111101101110000101111000110001011001011000001)))
(assert (= y (fp #b0 #b10011101100 #b1110001110100011100110011111111100101000010100001001)))
(assert (= z (fp #b0 #b10110100110 #b1011000011111110010011000011010001000001010110011010)))
(assert (= r (fp #b0 #b10110100110 #b1011000011111110010011000011010001000001010110011010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
