(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2383452296996839692155845114029943943023681640625p471 {+ 1073411487661032 471 (7.5504e+141)}
; Y = -1.5223679169985591119740320209530182182788848876953125p523 {- 2352535956345013 523 (-4.1803e+157)}
; Z = -1.2523759494971493655413041778956539928913116455078125p-683 {- 1136600232112637 -683 (-3.12067e-206)}
; 1.2383452296996839692155845114029943943023681640625p471 x -1.5223679169985591119740320209530182182788848876953125p523 -1.2523759494971493655413041778956539928913116455078125p-683 == -1.885217047863009920405374941765330731868743896484375p994
; [HW: -1.885217047863009920405374941765330731868743896484375p994] 

; mpf : - 3986663166897862 994
; mpfd: - 3986663166897862 994 (-3.15629e+299) class: Neg. norm. non-zero
; hwf : - 3986663166897862 994 (-3.15629e+299) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111010110 #b0011110100000100001100010110011010110111101111101000)))
(assert (= y (fp #b1 #b11000001010 #b1000010110111001111001110101111111111101000010110101)))
(assert (= z (fp #b1 #b00101010100 #b0100000010011011101101011101000101100011000111111101)))
(assert (= r (fp #b1 #b11111100001 #b1110001010011101100101011001111001101110111011000110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
