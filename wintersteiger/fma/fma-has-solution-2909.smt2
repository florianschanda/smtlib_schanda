(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5937572123409460278509186537121422588825225830078125p431 {+ 2674044760247229 431 (8.83792e+129)}
; Y = -1.1070318963837471049060923178330995142459869384765625p-121 {- 482028808670601 -121 (-4.16419e-037)}
; Z = 1.3490580700766374722121554441400803625583648681640625p169 {+ 1572017794327809 169 (1.00949e+051)}
; 1.5937572123409460278509186537121422588825225830078125p431 x -1.1070318963837471049060923178330995142459869384765625p-121 1.3490580700766374722121554441400803625583648681640625p169 == -1.7643400691530717327992761056520976126194000244140625p310
; [HW: -1.7643400691530717327992761056520976126194000244140625p310] 

; mpf : - 3442281650622113 310
; mpfd: - 3442281650622113 310 (-3.68028e+093) class: Neg. norm. non-zero
; hwf : - 3442281650622113 310 (-3.68028e+093) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110101110 #b1001100000000000011110010000000011000100101110111101)))
(assert (= y (fp #b1 #b01110000110 #b0001101101100110011100010011111010011000110110001001)))
(assert (= z (fp #b0 #b10010101000 #b0101100101011011110111101010001101100010010100000001)))
(assert (= r (fp #b1 #b10100110101 #b1100001110101011110010100111000000001000111010100001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
