(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.84125644534580157340997175197117030620574951171875p-370 {+ 3788682213782380 -370 (7.65625e-112)}
; Y = -1.7533736263173513858504293239093385636806488037109375p-353 {- 3392893182753583 -353 (-9.55622e-107)}
; Z = 1.9667936752540959854940183504368178546428680419921875p154 {+ 4354051635618499 154 (4.49136e+046)}
; 1.84125644534580157340997175197117030620574951171875p-370 x -1.7533736263173513858504293239093385636806488037109375p-353 1.9667936752540959854940183504368178546428680419921875p154 == 1.9667936752540959854940183504368178546428680419921875p154
; [HW: 1.9667936752540959854940183504368178546428680419921875p154] 

; mpf : + 4354051635618499 154
; mpfd: + 4354051635618499 154 (4.49136e+046) class: Pos. norm. non-zero
; hwf : + 4354051635618499 154 (4.49136e+046) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010001101 #b1101011101011100100101010001100001001111001101101100)))
(assert (= y (fp #b1 #b01010011110 #b1100000011011101000110000000111010110011101100101111)))
(assert (= z (fp #b0 #b10010011001 #b1111011101111111110010100101000100110010001011000011)))
(assert (= r (fp #b0 #b10010011001 #b1111011101111111110010100101000100110010001011000011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
