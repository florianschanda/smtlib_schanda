(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.607075495389397534751196872093714773654937744140625p-959 {+ 2734024974821450 -959 (3.29815e-289)}
; Y = 1.13162982392607336379342086729593575000762939453125p-605 {+ 592808025984308 -605 (8.5223e-183)}
; Z = 1.2077322555675229498461931143538095057010650634765625p-578 {+ 935542908766729 -578 (1.22077e-174)}
; 1.607075495389397534751196872093714773654937744140625p-959 x 1.13162982392607336379342086729593575000762939453125p-605 1.2077322555675229498461931143538095057010650634765625p-578 == 1.2077322555675229498461931143538095057010650634765625p-578
; [HW: 1.2077322555675229498461931143538095057010650634765625p-578] 

; mpf : + 935542908766729 -578
; mpfd: + 935542908766729 -578 (1.22077e-174) class: Pos. norm. non-zero
; hwf : + 935542908766729 -578 (1.22077e-174) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001000000 #b1001101101101001010011001011011011100110100001001010)))
(assert (= y (fp #b0 #b00110100010 #b0010000110110010011111011111110011110000110100110100)))
(assert (= z (fp #b0 #b00110111101 #b0011010100101101111100001110101111111100101000001001)))
(assert (= r (fp #b0 #b00110111101 #b0011010100101101111100001110101111111100101000001001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
