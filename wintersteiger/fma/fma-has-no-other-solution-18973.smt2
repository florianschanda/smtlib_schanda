(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.229726694913791273933156844577752053737640380859375p-350 {- 1034597057610806 -350 (-5.36179e-106)}
; Y = -1.0932376233388938491231101579614914953708648681640625p-140 {- 419904925725953 -140 (-7.8436e-043)}
; Z = 1.0067637171743706314686050973250530660152435302734375p-532 {+ 30461074146135 -532 (7.16094e-161)}
; -1.229726694913791273933156844577752053737640380859375p-350 x -1.0932376233388938491231101579614914953708648681640625p-140 1.0067637171743706314686050973250530660152435302734375p-532 == 1.3443834893041752831521762345801107585430145263671875p-490
; [HW: 1.3443834893041752831521762345801107585430145263671875p-490] 

; mpf : + 1550965354102835 -490
; mpfd: + 1550965354102835 -490 (4.20557e-148) class: Pos. norm. non-zero
; hwf : + 1550965354102835 -490 (4.20557e-148) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010100001 #b0011101011001111010111100110000110101100010000110110)))
(assert (= y (fp #b1 #b01101110011 #b0001011111011110011010111011111011111111010100000001)))
(assert (= z (fp #b0 #b00111101011 #b0000000110111011010001000101100000010000001101010111)))
(assert (= r (fp #b0 #b01000010101 #b0101100000101001100001000010111111011000000000110011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
