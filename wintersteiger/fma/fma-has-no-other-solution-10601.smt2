(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3440746426939000901512599739362485706806182861328125p794 {+ 1549574432623885 794 (1.40036e+239)}
; Y = -1.0174477963050752027385215114918537437915802001953125p677 {- 78577888937973 677 (-6.37998e+203)}
; Z = -1.1318354643572252626881891046650707721710205078125p-280 {- 593734148153416 -280 (-5.82619e-085)}
; 1.3440746426939000901512599739362485706806182861328125p794 x -1.0174477963050752027385215114918537437915802001953125p677 -1.1318354643572252626881891046650707721710205078125p-280 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100011001 #b0101100000010101010001101001100111000000110100001101)))
(assert (= y (fp #b1 #b11010100100 #b0000010001110111011101010111001010000100011111110101)))
(assert (= z (fp #b1 #b01011100111 #b0010000110111111111110000000111111011110000001001000)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
