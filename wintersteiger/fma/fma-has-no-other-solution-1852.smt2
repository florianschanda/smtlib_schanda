(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6989070807372292915005118629778735339641571044921875p-127 {- 3147597668374787 -127 (-9.98528e-039)}
; Y = 1.848526665235282973043240417609922587871551513671875p-936 {+ 3821424373367550 -936 (3.18236e-282)}
; Z = 1.852094516401763701907157155801542103290557861328125p604 {+ 3837492546551426 604 (1.22965e+182)}
; -1.6989070807372292915005118629778735339641571044921875p-127 x 1.848526665235282973043240417609922587871551513671875p-936 1.852094516401763701907157155801542103290557861328125p604 == 1.8520945164017634798625522307702340185642242431640625p604
; [HW: 1.8520945164017634798625522307702340185642242431640625p604] 

; mpf : + 3837492546551425 604
; mpfd: + 3837492546551425 604 (1.22965e+182) class: Pos. norm. non-zero
; hwf : + 3837492546551425 604 (1.22965e+182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110000000 #b1011001011101011100100110000111010110101100100000011)))
(assert (= y (fp #b0 #b00001010111 #b1101100100111001000010110010010011111000001011111110)))
(assert (= z (fp #b0 #b11001011011 #b1101101000100010110111011100000100001011111010000010)))
(assert (= r (fp #b0 #b11001011011 #b1101101000100010110111011100000100001011111010000001)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
