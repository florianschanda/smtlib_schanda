(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.912371197520060572827560463338159024715423583984375p268 {- 4108954585174918 268 (-9.07008e+080)}
; Y = -1.7650788317303776064903786391369067132472991943359375p-1021 {- 3445608741489983 -1021 (-7.85486e-308)}
; Z = 1.76852242476935739290411220281384885311126708984375p394 {+ 3461117305817148 394 (7.13557e+118)}
; -1.912371197520060572827560463338159024715423583984375p268 x -1.7650788317303776064903786391369067132472991943359375p-1021 1.76852242476935739290411220281384885311126708984375p394 == 1.76852242476935739290411220281384885311126708984375p394
; [HW: 1.76852242476935739290411220281384885311126708984375p394] 

; mpf : + 3461117305817148 394
; mpfd: + 3461117305817148 394 (7.13557e+118) class: Pos. norm. non-zero
; hwf : + 3461117305817148 394 (7.13557e+118) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100001011 #b1110100110010001001010001010011100101001001110000110)))
(assert (= y (fp #b1 #b00000000010 #b1100001111011100001101001101000100100100110100111111)))
(assert (= z (fp #b0 #b10110001001 #b1100010010111101111000101011100010100000100000111100)))
(assert (= r (fp #b0 #b10110001001 #b1100010010111101111000101011100010100000100000111100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
