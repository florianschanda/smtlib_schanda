(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1365629825351921677878408445394597947597503662109375p-999 {+ 615024997258095 -999 (2.12143e-301)}
; Y = -1.0556850031741229489767874838435091078281402587890625p-530 {- 250782959545105 -530 (-3.00356e-160)}
; Z = -1.1144230312515801539774429329554550349712371826171875p-704 {- 515315520907219 -704 (-1.32414e-212)}
; 1.1365629825351921677878408445394597947597503662109375p-999 x -1.0556850031741229489767874838435091078281402587890625p-530 -1.1144230312515801539774429329554550349712371826171875p-704 == -1.1144230312515801539774429329554550349712371826171875p-704
; [HW: -1.1144230312515801539774429329554550349712371826171875p-704] 

; mpf : - 515315520907219 -704
; mpfd: - 515315520907219 -704 (-1.32414e-212) class: Neg. norm. non-zero
; hwf : - 515315520907219 -704 (-1.32414e-212) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000011000 #b0010001011110101110010101010011111010101001101101111)))
(assert (= y (fp #b1 #b00111101101 #b0000111001000001010111110101001110000010101100010001)))
(assert (= z (fp #b1 #b00100111111 #b0001110101001010110100111110100100100010011111010011)))
(assert (= r (fp #b1 #b00100111111 #b0001110101001010110100111110100100100010011111010011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
