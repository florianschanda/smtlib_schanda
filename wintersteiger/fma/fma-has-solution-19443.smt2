(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1598666081991757526026276536867953836917877197265625p-770 {- 719975197114793 -770 (-1.86772e-232)}
; Y = -1.0176197960327948432990297078504227101802825927734375p578 {- 79352506847639 578 (-1.00675e+174)}
; Z = 1.62078791794791499114580801688134670257568359375p-394 {+ 2795780235946336 -394 (4.01706e-119)}
; -1.1598666081991757526026276536867953836917877197265625p-770 x -1.0176197960327948432990297078504227101802825927734375p578 1.62078791794791499114580801688134670257568359375p-394 == 1.180303221260894819266695776605047285556793212890625p-192
; [HW: 1.180303221260894819266695776605047285556793212890625p-192] 

; mpf : + 812013520084266 -192
; mpfd: + 812013520084266 -192 (1.88033e-058) class: Pos. norm. non-zero
; hwf : + 812013520084266 -192 (1.88033e-058) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011111101 #b0010100011101101000001001001110111110000000110101001)))
(assert (= y (fp #b1 #b11001000001 #b0000010010000010101110110001111110111001000110010111)))
(assert (= z (fp #b0 #b01001110101 #b1001111011101011111101001111110101010110100101100000)))
(assert (= r (fp #b0 #b01100111111 #b0010111000101000010110100001011010101101110100101010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
