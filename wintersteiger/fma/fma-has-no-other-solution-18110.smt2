(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6021746196181283483639390397001989185810089111328125p-578 {+ 2711953392524173 -578 (1.61947e-174)}
; Y = 1.89908539436108991793616951326839625835418701171875p-626 {+ 4049120647018860 -626 (6.81973e-189)}
; Z = 1.822464997360040417362370135379023849964141845703125p-477 {+ 3704053055635954 -477 (4.67037e-144)}
; 1.6021746196181283483639390397001989185810089111328125p-578 x 1.89908539436108991793616951326839625835418701171875p-626 1.822464997360040417362370135379023849964141845703125p-477 == 1.8224649973600406394069750604103319346904754638671875p-477
; [HW: 1.8224649973600406394069750604103319346904754638671875p-477] 

; mpf : + 3704053055635955 -477
; mpfd: + 3704053055635955 -477 (4.67037e-144) class: Pos. norm. non-zero
; hwf : + 3704053055635955 -477 (4.67037e-144) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111101 #b1001101000101000000111011010100110111101101110001101)))
(assert (= y (fp #b0 #b00110001101 #b1110011000101010011101011101110100010111100101101100)))
(assert (= z (fp #b0 #b01000100010 #b1101001010001101000100001110100111000100000111110010)))
(assert (= r (fp #b0 #b01000100010 #b1101001010001101000100001110100111000100000111110011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
