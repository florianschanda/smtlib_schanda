(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2026327349418373113820734943146817386150360107421875p-52 {+ 912576709577123 -52 (2.67038e-016)}
; Y = 1.1763403742983851163472763801109977066516876220703125p1 {+ 794166443980581 1 (2.35268)}
; Z = -1.3691835994342638205267803641618229448795318603515625p779 {- 1662655120843449 779 (-4.3534e+234)}
; 1.2026327349418373113820734943146817386150360107421875p-52 x 1.1763403742983851163472763801109977066516876220703125p1 -1.3691835994342638205267803641618229448795318603515625p779 == -1.3691835994342635984821754391305148601531982421875p779
; [HW: -1.3691835994342635984821754391305148601531982421875p779] 

; mpf : - 1662655120843448 779
; mpfd: - 1662655120843448 779 (-4.3534e+234) class: Neg. norm. non-zero
; hwf : - 1662655120843448 779 (-4.3534e+234) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001011 #b0011001111011111101111010010100110101100100110100011)))
(assert (= y (fp #b0 #b10000000000 #b0010110100100100101001001000110010010011011100100101)))
(assert (= z (fp #b1 #b11100001010 #b0101111010000010110100001111110111001010001010111001)))
(assert (= r (fp #b1 #b11100001010 #b0101111010000010110100001111110111001010001010111000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
