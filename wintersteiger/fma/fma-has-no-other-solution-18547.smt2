(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9096762820726478349087074093404226005077362060546875p155 {+ 4096817764970155 155 (8.72186e+046)}
; Y = 1.4407478131145328159590235372888855636119842529296875p-558 {+ 1984951686906971 -558 (1.52704e-168)}
; Z = -1.8448731354242415836353075064835138618946075439453125p-197 {- 3804970337871957 -197 (-9.18454e-060)}
; 1.9096762820726478349087074093404226005077362060546875p155 x 1.4407478131145328159590235372888855636119842529296875p-558 -1.8448731354242415836353075064835138618946075439453125p-197 == -1.8448731354242415836353075064835138618946075439453125p-197
; [HW: -1.8448731354242415836353075064835138618946075439453125p-197] 

; mpf : - 3804970337871957 -197
; mpfd: - 3804970337871957 -197 (-9.18454e-060) class: Neg. norm. non-zero
; hwf : - 3804970337871957 -197 (-9.18454e-060) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010011010 #b1110100011100000100010110111100101110010111010101011)))
(assert (= y (fp #b0 #b00111010001 #b0111000011010100110110010100001100011100010001011011)))
(assert (= z (fp #b1 #b01100111010 #b1101100001001001100110110001010111101010100001010101)))
(assert (= r (fp #b1 #b01100111010 #b1101100001001001100110110001010111101010100001010101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
