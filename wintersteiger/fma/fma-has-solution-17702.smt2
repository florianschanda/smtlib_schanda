(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.749529631601534074292203513323329389095306396484375p657 {+ 3375581369583814 657 (1.04623e+198)}
; Y = 1.8131333044652182540090734619298018515110015869140625p-474 {+ 3662026846992097 -474 (3.71716e-143)}
; Z = -1.9352677929450952110101979997125454246997833251953125p41 {- 4212071683799157 41 (-4.2557e+012)}
; 1.749529631601534074292203513323329389095306396484375p657 x 1.8131333044652182540090734619298018515110015869140625p-474 -1.9352677929450952110101979997125454246997833251953125p41 == 1.58606522110275260928347051958553493022918701171875p184
; [HW: 1.58606522110275260928347051958553493022918701171875p184] 

; mpf : + 2639403111373164 184
; mpfd: + 2639403111373164 184 (3.88902e+055) class: Pos. norm. non-zero
; hwf : + 2639403111373164 184 (3.88902e+055) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010010000 #b1011111111100001001011001000011100011100100011000110)))
(assert (= y (fp #b0 #b01000100101 #b1101000000101001100000010001010111110111011011100001)))
(assert (= z (fp #b1 #b10000101000 #b1110111101101101101101011100011110110011100001110101)))
(assert (= r (fp #b0 #b10010110111 #b1001011000001000010111101100110111110101100101101100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
