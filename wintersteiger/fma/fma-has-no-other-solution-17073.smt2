(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.178272041076129372783043436356820166110992431640625p-408 {+ 802865897761034 -408 (1.78241e-123)}
; Y = -1.754383642035333590314394314191304147243499755859375p1020 {- 3397441889164726 1020 (-1.97115e+307)}
; Z = 1.259757261890962265482585280551575124263763427734375p-356 {+ 1169842707858918 -356 (8.58239e-108)}
; 1.178272041076129372783043436356820166110992431640625p-408 x -1.754383642035333590314394314191304147243499755859375p1020 1.259757261890962265482585280551575124263763427734375p-356 == -1.0335705973657731693293726493720896542072296142578125p613
; [HW: -1.0335705973657731693293726493720896542072296142578125p613] 

; mpf : - 151188529787101 613
; mpfd: - 151188529787101 613 (-3.5134e+184) class: Neg. norm. non-zero
; hwf : - 151188529787101 613 (-3.5134e+184) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001100111 #b0010110110100011001111001000101000110110100100001010)))
(assert (= y (fp #b1 #b11111111011 #b1100000100011111010010010100111100101101110110110110)))
(assert (= z (fp #b0 #b01010011011 #b0100001001111111011100111011000010111000010111100110)))
(assert (= r (fp #b1 #b11001100100 #b0000100010011000000101010010100111001011000011011101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
