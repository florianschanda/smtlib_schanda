(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.248185405758127419773018118576146662235260009765625p357 {+ 1117727700891098 357 (3.66427e+107)}
; Y = 1.468221517032337164465616297093220055103302001953125p994 {+ 2108682249633682 994 (2.45814e+299)}
; Z = -1.359895485740680864950036266236566007137298583984375p-321 {- 1620825175474054 -321 (-3.1833e-097)}
; 1.248185405758127419773018118576146662235260009765625p357 x 1.468221517032337164465616297093220055103302001953125p994 -1.359895485740680864950036266236566007137298583984375p-321 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101100100 #b0011111110001001000101000010100100010011010111011010)))
(assert (= y (fp #b0 #b11111100001 #b0111011111011101010111011000011011101111111110010010)))
(assert (= z (fp #b1 #b01010111110 #b0101110000100010000111000100110100111011111110000110)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
