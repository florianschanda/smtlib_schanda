(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.79891426620357375298908664262853562831878662109375p56 {- 3597989991575388 56 (-1.29625e+017)}
; Y = 1.4281187844434073408450558417825959622859954833984375p973 {+ 1928075598089639 973 (1.14012e+293)}
; Z = 1.8136838663717018693688487473991699516773223876953125p-273 {+ 3664506357388981 -273 (1.19501e-082)}
; -1.79891426620357375298908664262853562831878662109375p56 x 1.4281187844434073408450558417825959622859954833984375p973 1.8136838663717018693688487473991699516773223876953125p-273 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000110111 #b1100110010000101101001010011010110100110111101011100)))
(assert (= y (fp #b0 #b11111001100 #b0110110110011001001100010101000111111100110110100111)))
(assert (= z (fp #b0 #b01011101110 #b1101000001001101100101011111101101011001011010110101)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
