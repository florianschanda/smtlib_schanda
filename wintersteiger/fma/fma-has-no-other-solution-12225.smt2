(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8788073621798762058432430421817116439342498779296875p71 {- 3957796508843739 71 (-4.43621e+021)}
; Y = -1.7517665259703907310040449374355375766754150390625p-110 {- 3385655446229864 -110 (-1.34951e-033)}
; Z = -1.4682414331071400592776399207650683820247650146484375p699 {- 2108771943660743 699 (-3.86157e+210)}
; -1.8788073621798762058432430421817116439342498779296875p71 x -1.7517665259703907310040449374355375766754150390625p-110 -1.4682414331071400592776399207650683820247650146484375p699 == -1.4682414331071400592776399207650683820247650146484375p699
; [HW: -1.4682414331071400592776399207650683820247650146484375p699] 

; mpf : - 2108771943660743 699
; mpfd: - 2108771943660743 699 (-3.86157e+210) class: Neg. norm. non-zero
; hwf : - 2108771943660743 699 (-3.86157e+210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001000110 #b1110000011111001100001001111000000001011111011011011)))
(assert (= y (fp #b1 #b01110010001 #b1100000001110011110001010110001101000101001101101000)))
(assert (= z (fp #b1 #b11010111010 #b0111011111011110101010111010100111010011110011000111)))
(assert (= r (fp #b1 #b11010111010 #b0111011111011110101010111010100111010011110011000111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
