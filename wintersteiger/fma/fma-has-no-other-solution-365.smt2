(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1116396555090564124412821911391802132129669189453125p299 {+ 502780310950357 299 (1.13222e+090)}
; Y = -1.103778856850740286432710490771569311618804931640625p-523 {- 467378421041930 -523 (-4.01971e-158)}
; Z = -1.628194651426093653157067819847725331783294677734375p-246 {- 2829137198078694 -246 (-1.43988e-074)}
; 1.1116396555090564124412821911391802132129669189453125p299 x -1.103778856850740286432710490771569311618804931640625p-523 -1.628194651426093653157067819847725331783294677734375p-246 == -1.2270047363795921757656515183043666183948516845703125p-224
; [HW: -1.2270047363795921757656515183043666183948516845703125p-224] 

; mpf : - 1022338446170469 -224
; mpfd: - 1022338446170469 -224 (-4.55121e-068) class: Neg. norm. non-zero
; hwf : - 1022338446170469 -224 (-4.55121e-068) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101010 #b0001110010010100011010101001110101011001000111010101)))
(assert (= y (fp #b1 #b00111110100 #b0001101010010001010000000100110000110000101100001010)))
(assert (= z (fp #b1 #b01100001001 #b1010000011010001010111010101101101100101101011100110)))
(assert (= r (fp #b1 #b01100011111 #b0011101000011100111110110111111011001001100101100101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
