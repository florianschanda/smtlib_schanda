(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0179226206927645126398829233949072659015655517578125p-262 {+ 80716307873437 -262 (1.37359e-079)}
; Y = 1.81462248929002267772148115909658372402191162109375p747 {+ 3668733539214172 747 (1.34336e+225)}
; Z = -1.4014570444885208200247461718390695750713348388671875p882 {- 1808001795963763 882 (-4.51893e+265)}
; 1.0179226206927645126398829233949072659015655517578125p-262 x 1.81462248929002267772148115909658372402191162109375p747 -1.4014570444885208200247461718390695750713348388671875p882 == -1.401457044488520597980141246807761490345001220703125p882
; [HW: -1.401457044488520597980141246807761490345001220703125p882] 

; mpf : - 1808001795963762 882
; mpfd: - 1808001795963762 882 (-4.51893e+265) class: Neg. norm. non-zero
; hwf : - 1808001795963762 882 (-4.51893e+265) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011111001 #b0000010010010110100100111010110110111011111010011101)))
(assert (= y (fp #b0 #b11011101010 #b1101000010001011000110010111011000010110001101011100)))
(assert (= z (fp #b1 #b11101110001 #b0110011011000101111000111000110011010011101101110011)))
(assert (= r (fp #b1 #b11101110001 #b0110011011000101111000111000110011010011101101110010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
