(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6558988969705292770839832883211784064769744873046875p-889 {- 2953906027989195 -889 (-4.01206e-268)}
; Y = 1.5808563124741485950153219164349138736724853515625p-443 {+ 2615944272414376 -443 (6.95992e-134)}
; Z = -1.9394806717817514307711235233000479638576507568359375p490 {- 4231044803358079 490 (-6.19988e+147)}
; -1.6558988969705292770839832883211784064769744873046875p-889 x 1.5808563124741485950153219164349138736724853515625p-443 -1.9394806717817514307711235233000479638576507568359375p490 == -1.9394806717817514307711235233000479638576507568359375p490
; [HW: -1.9394806717817514307711235233000479638576507568359375p490] 

; mpf : - 4231044803358079 490
; mpfd: - 4231044803358079 490 (-6.19988e+147) class: Neg. norm. non-zero
; hwf : - 4231044803358079 490 (-6.19988e+147) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010000110 #b1010011111101000111111010111011111111000100011001011)))
(assert (= y (fp #b0 #b01001000100 #b1001010010110010111111111101000111000000011010101000)))
(assert (= z (fp #b1 #b10111101001 #b1111000010000001110011100010100010000110110101111111)))
(assert (= r (fp #b1 #b10111101001 #b1111000010000001110011100010100010000110110101111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
