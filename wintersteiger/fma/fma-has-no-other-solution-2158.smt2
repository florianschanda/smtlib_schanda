(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.83005026514933089032410862273536622524261474609375p249 {+ 3738214064825308 249 (1.65551e+075)}
; Y = 1.187488149028851136534967736224643886089324951171875p-111 {+ 844371558102718 -111 (4.57404e-034)}
; Z = 1.8025193970301540691281161343795247375965118408203125p-311 {+ 3614226057422597 -311 (4.32067e-094)}
; 1.83005026514933089032410862273536622524261474609375p249 x 1.187488149028851136534967736224643886089324951171875p-111 1.8025193970301540691281161343795247375965118408203125p-311 == 1.086581500995968507794486868078820407390594482421875p139
; [HW: 1.086581500995968507794486868078820407390594482421875p139] 

; mpf : + 389928415622622 139
; mpfd: + 389928415622622 139 (7.57237e+041) class: Pos. norm. non-zero
; hwf : + 389928415622622 139 (7.57237e+041) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011111000 #b1101010001111110001011001001011011011010001111011100)))
(assert (= y (fp #b0 #b01110010000 #b0010111111111111001110010010110001110111011010111110)))
(assert (= z (fp #b0 #b01011001000 #b1100110101110001111010010100010010100110011100000101)))
(assert (= r (fp #b0 #b10010001010 #b0001011000101010001101001000101100110111010111011110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
