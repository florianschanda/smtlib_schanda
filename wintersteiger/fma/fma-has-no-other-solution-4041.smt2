(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9223145579496334622859876617440022528171539306640625p684 {+ 4153735499500353 684 (1.54291e+206)}
; Y = 1.9525032994394593277576177570153959095478057861328125p12 {+ 4289693504424717 12 (7997.45)}
; Z = 1.48373265361257811179029886261560022830963134765625p428 {+ 2178538198556548 428 (1.02848e+129)}
; 1.9223145579496334622859876617440022528171539306640625p684 x 1.9525032994394593277576177570153959095478057861328125p12 1.48373265361257811179029886261560022830963134765625p428 == 1.8766627584785826599045321927405893802642822265625p697
; [HW: 1.8766627584785826599045321927405893802642822265625p697] 

; mpf : + 3948138072413736 697
; mpfd: + 3948138072413736 697 (1.23394e+210) class: Pos. norm. non-zero
; hwf : + 3948138072413736 697 (1.23394e+210) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010101011 #b1110110000011100110011101000111100000100101101000001)))
(assert (= y (fp #b0 #b10000001011 #b1111001111010111010000011001100001101100101100001101)))
(assert (= z (fp #b0 #b10110101011 #b0111101111010101111001110011011101000101111110000100)))
(assert (= r (fp #b0 #b11010111000 #b1110000001101100111110000111010101001001011000101000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
