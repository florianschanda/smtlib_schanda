(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5001515082951744073369582110899500548839569091796875p20 {- 2252482146386939 20 (-1.57302e+006)}
; Y = -1.5632415860114512451417567717726342380046844482421875p50 {- 2536614596880739 50 (-1.76005e+015)}
; Z = -1.6516332954337011873491292135440744459629058837890625p-912 {- 2934695466497425 -912 (-4.77043e-275)}
; -1.5001515082951744073369582110899500548839569091796875p20 x -1.5632415860114512451417567717726342380046844482421875p50 -1.6516332954337011873491292135440744459629058837890625p-912 == 1.1725496115424096643664597650058567523956298828125p71
; [HW: 1.1725496115424096643664597650058567523956298828125p71] 

; mpf : + 777094366245320 71
; mpfd: + 777094366245320 71 (2.7686e+021) class: Pos. norm. non-zero
; hwf : + 777094366245320 71 (2.7686e+021) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000010011 #b1000000000001001111011011110001100101100001111111011)))
(assert (= y (fp #b1 #b10000110001 #b1001000000110000100110011011111110101010100101100011)))
(assert (= z (fp #b1 #b00001101111 #b1010011011010001011100001000110011011111010110010001)))
(assert (= r (fp #b0 #b10001000110 #b0010110000101100001101100001101010000011000111001000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
