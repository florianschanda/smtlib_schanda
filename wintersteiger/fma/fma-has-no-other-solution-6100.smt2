(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0880447054803623618823849028558470308780670166015625p287 {- 396518102793305 287 (-2.70555e+086)}
; Y = 1.1708697878668801184431913497974164783954620361328125p637 {+ 769529112966157 637 (6.67753e+191)}
; Z = 1.045303904973394537591957487165927886962890625p-105 {+ 204030649556608 -105 (2.57687e-032)}
; -1.0880447054803623618823849028558470308780670166015625p287 x 1.1708697878668801184431913497974164783954620361328125p637 1.045303904973394537591957487165927886962890625p-105 == -1.2739586734954737590186368834110908210277557373046875p924
; [HW: -1.2739586734954737590186368834110908210277557373046875p924] 

; mpf : - 1233800179869131 924
; mpfd: - 1233800179869131 924 (-1.80664e+278) class: Neg. norm. non-zero
; hwf : - 1233800179869131 924 (-1.80664e+278) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100011110 #b0001011010001010000110010000101010011111110001011001)))
(assert (= y (fp #b0 #b11001111100 #b0010101110111110000111110101011011000011010000001101)))
(assert (= z (fp #b0 #b01110010110 #b0000101110011001000010010110011000111101111010000000)))
(assert (= r (fp #b1 #b11110011011 #b0100011000100010001001111101011100011110010111001011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
