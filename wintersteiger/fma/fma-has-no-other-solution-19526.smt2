(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.42519242604012408293101543677039444446563720703125p-556 {- 1914896451475060 -556 (-6.04221e-168)}
; Y = 1.96958129014566996062285397783853113651275634765625p-115 {+ 4366605937005444 -115 (4.74159e-035)}
; Z = -1.2532519934728103550014566280879080295562744140625p-648 {- 1140545583434984 -648 (-1.073e-195)}
; -1.42519242604012408293101543677039444446563720703125p-556 x 1.96958129014566996062285397783853113651275634765625p-115 -1.2532519934728103550014566280879080295562744140625p-648 == -1.2532523280971410439832425254280678927898406982421875p-648
; [HW: -1.2532523280971410439832425254280678927898406982421875p-648] 

; mpf : - 1140547090448995 -648
; mpfd: - 1140547090448995 -648 (-1.073e-195) class: Neg. norm. non-zero
; hwf : - 1140547090448995 -648 (-1.073e-195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111010011 #b0110110011011001011010010010110001011001011001110100)))
(assert (= y (fp #b0 #b01110001100 #b1111100000110110011110101011101111111101001110000100)))
(assert (= z (fp #b1 #b00101110111 #b0100000011010101000111110110010110011100110011101000)))
(assert (= r (fp #b1 #b00101110111 #b0100000011010101001001010000001011010000001001100011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
