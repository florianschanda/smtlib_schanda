(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.405278531927304896953501156531274318695068359375p-913 {- 1825212245369072 -913 (-2.02944e-275)}
; Y = 1.4444721434692489037132645535166375339031219482421875p-607 {+ 2001724579704675 -607 (2.71958e-183)}
; Z = -1.870203782601711051114534711814485490322113037109375p-156 {- 3919049431061462 -156 (-2.04743e-047)}
; -1.405278531927304896953501156531274318695068359375p-913 x 1.4444721434692489037132645535166375339031219482421875p-607 -1.870203782601711051114534711814485490322113037109375p-156 == -1.870203782601711051114534711814485490322113037109375p-156
; [HW: -1.870203782601711051114534711814485490322113037109375p-156] 

; mpf : - 3919049431061462 -156
; mpfd: - 3919049431061462 -156 (-2.04743e-047) class: Neg. norm. non-zero
; hwf : - 3919049431061462 -156 (-2.04743e-047) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001101110 #b0110011111000000010101010111100001100110000011110000)))
(assert (= y (fp #b0 #b00110100000 #b0111000111001000111011010010100000101110111101100011)))
(assert (= z (fp #b1 #b01101100011 #b1101111011000101101011001101001100100001001111010110)))
(assert (= r (fp #b1 #b01101100011 #b1101111011000101101011001101001100100001001111010110)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
