(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1271467462358073507999733919859863817691802978515625p-431 {+ 572618038968953 -431 (2.0326e-130)}
; Y = 1.648934525725213706692784398910589516162872314453125p-770 {+ 2922541288243922 -770 (2.65526e-232)}
; Z = -1.1899797841675965326402319988119415938854217529296875p-290 {- 855592885185115 -290 (-5.98192e-088)}
; 1.1271467462358073507999733919859863817691802978515625p-431 x 1.648934525725213706692784398910589516162872314453125p-770 -1.1899797841675965326402319988119415938854217529296875p-290 == -1.1899797841675965326402319988119415938854217529296875p-290
; [HW: -1.1899797841675965326402319988119415938854217529296875p-290] 

; mpf : - 855592885185115 -290
; mpfd: - 855592885185115 -290 (-5.98192e-088) class: Neg. norm. non-zero
; hwf : - 855592885185115 -290 (-5.98192e-088) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010000 #b0010000010001100101100000110110011100000001001111001)))
(assert (= y (fp #b0 #b00011111101 #b1010011000100000100100101011010100111100001011010010)))
(assert (= z (fp #b1 #b01011011101 #b0011000010100010100000111101111111100110101001011011)))
(assert (= r (fp #b1 #b01011011101 #b0011000010100010100000111101111111100110101001011011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
