(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0546800535902234319252102068276144564151763916015625p359 {- 246257068973529 359 (-1.23848e+108)}
; Y = 1.021910151467368077504715984105132520198822021484375p-556 {+ 98674549984070 -556 (4.33247e-168)}
; Z = 1.3753298749860356497975999445770867168903350830078125p-521 {+ 1690335485128125 -521 (2.00345e-157)}
; -1.0546800535902234319252102068276144564151763916015625p359 x 1.021910151467368077504715984105132520198822021484375p-556 1.3753298749860356497975999445770867168903350830078125p-521 == -1.0777882533139970799851425908855162560939788818359375p-197
; [HW: -1.0777882533139970799851425908855162560939788818359375p-197] 

; mpf : - 350327148638719 -197
; mpfd: - 350327148638719 -197 (-5.36567e-060) class: Neg. norm. non-zero
; hwf : - 350327148638719 -197 (-5.36567e-060) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101100110 #b0000110111111111100000110001000111101001110111011001)))
(assert (= y (fp #b0 #b00111010011 #b0000010110011011111001110101100000000000101101000110)))
(assert (= z (fp #b0 #b00111110110 #b0110000000010101100111100110001001000110110110111101)))
(assert (= r (fp #b1 #b01100111010 #b0001001111101001111011100101001111111111000111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
