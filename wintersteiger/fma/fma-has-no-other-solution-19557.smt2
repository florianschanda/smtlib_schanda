(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0695460129486331624093509162776172161102294921875p49 {+ 313207398000568 49 (6.02101e+014)}
; Y = -1.111319651021509091748384889797307550907135009765625p431 {- 501339138859482 431 (-6.16264e+129)}
; Z = -1.273775981732927053968751351931132376194000244140625p840 {- 1232977409315402 840 (-9.33876e+252)}
; 1.0695460129486331624093509162776172161102294921875p49 x -1.111319651021509091748384889797307550907135009765625p431 -1.273775981732927053968751351931132376194000244140625p840 == -1.273775981732927053968751351931132376194000244140625p840
; [HW: -1.273775981732927053968751351931132376194000244140625p840] 

; mpf : - 1232977409315402 840
; mpfd: - 1232977409315402 840 (-9.33876e+252) class: Neg. norm. non-zero
; hwf : - 1232977409315402 840 (-9.33876e+252) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000110000 #b0001000111001101110001000111101100101110011110111000)))
(assert (= y (fp #b1 #b10110101110 #b0001110001111111011100011101010010001010000111011010)))
(assert (= z (fp #b1 #b11101000111 #b0100011000010110001011101100011111111001001001001010)))
(assert (= r (fp #b1 #b11101000111 #b0100011000010110001011101100011111111001001001001010)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
