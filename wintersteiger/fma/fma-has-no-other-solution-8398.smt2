(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.591514238177861528811263269744813442230224609375p-708 {+ 2663943302642160 -708 (1.18188e-213)}
; Y = 0.095370416740390595577991916798055171966552734375p-1022 {+ 429510173294192 -1023 (2.12206e-309)}
; Z = -1.48325761130653432928738766349852085113525390625p-863 {- 2176398798204064 -863 (-2.41174e-260)}
; 1.591514238177861528811263269744813442230224609375p-708 x 0.095370416740390595577991916798055171966552734375p-1022 -1.48325761130653432928738766349852085113525390625p-863 == -1.48325761130653432928738766349852085113525390625p-863
; [HW: -1.48325761130653432928738766349852085113525390625p-863] 

; mpf : - 2176398798204064 -863
; mpfd: - 2176398798204064 -863 (-2.41174e-260) class: Neg. norm. non-zero
; hwf : - 2176398798204064 -863 (-2.41174e-260) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100111011 #b1001011101101101011110100010010000010111100111110000)))
(assert (= y (fp #b0 #b00000000000 #b0001100001101010001100100001010011100111111001110000)))
(assert (= z (fp #b1 #b00010100000 #b0111101110110110110001010101010000011010110010100000)))
(assert (= r (fp #b1 #b00010100000 #b0111101110110110110001010101010000011010110010100000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
