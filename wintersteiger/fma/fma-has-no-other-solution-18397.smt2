(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.121572130736308015030999740702100098133087158203125p-774 {+ 547512202682674 -774 (1.12878e-233)}
; Y = -1.3580714055526801331552633200772106647491455078125p-97 {- 1612610248619080 -97 (-8.57064e-030)}
; Z = 1.3841304234475193535303105818456970155239105224609375p-188 {+ 1729969631899919 -188 (3.52808e-057)}
; 1.121572130736308015030999740702100098133087158203125p-774 x -1.3580714055526801331552633200772106647491455078125p-97 1.3841304234475193535303105818456970155239105224609375p-188 == 1.384130423447519131485705656814388930797576904296875p-188
; [HW: 1.384130423447519131485705656814388930797576904296875p-188] 

; mpf : + 1729969631899918 -188
; mpfd: + 1729969631899918 -188 (3.52808e-057) class: Pos. norm. non-zero
; hwf : + 1729969631899918 -188 (3.52808e-057) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011111001 #b0001111100011111010110011110010110011110000100110010)))
(assert (= y (fp #b1 #b01110011110 #b0101101110101010100100010101000001111011010001001000)))
(assert (= z (fp #b0 #b01101000011 #b0110001001010110010111110001011000011011000100001111)))
(assert (= r (fp #b0 #b01101000011 #b0110001001010110010111110001011000011011000100001110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
