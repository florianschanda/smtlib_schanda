(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3921667618632367346975797772756777703762054443359375p783 {+ 1766162082594367 783 (7.08236e+235)}
; Y = 1.0950706048020502070272641503834165632724761962890625p-531 {+ 428159940360401 -531 (1.55781e-160)}
; Z = 1.193176305279376681056646702927537262439727783203125p-987 {+ 869988736473010 -987 (9.12219e-298)}
; 1.3921667618632367346975797772756777703762054443359375p783 x 1.0950706048020502070272641503834165632724761962890625p-531 1.193176305279376681056646702927537262439727783203125p-987 == 1.5245208978988864512160716913058422505855560302734375p252
; [HW: 1.5245208978988864512160716913058422505855560302734375p252] 

; mpf : + 2362232120325463 252
; mpfd: + 2362232120325463 252 (1.1033e+076) class: Pos. norm. non-zero
; hwf : + 2362232120325463 252 (1.1033e+076) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100001110 #b0110010001100101000010100111100011000111111000111111)))
(assert (= y (fp #b0 #b00111101100 #b0001100001010110100011000001001001101111100011010001)))
(assert (= z (fp #b0 #b00000100100 #b0011000101110100000000001001100110001001011110110010)))
(assert (= r (fp #b0 #b10011111011 #b1000011001000111000000000110011010001011010101010111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
