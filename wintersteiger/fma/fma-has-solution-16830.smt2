(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4711284928056802545626169376191683113574981689453125p598 {+ 2121774104643285 598 (1.52612e+180)}
; Y = -1.462263059499111950145788796362467110157012939453125p-172 {- 2081847742507346 -172 (-2.44268e-052)}
; Z = -1.5093307167376652788703950136550702154636383056640625p-37 {- 2293821626108097 -37 (-1.09818e-011)}
; 1.4711284928056802545626169376191683113574981689453125p598 x -1.462263059499111950145788796362467110157012939453125p-172 -1.5093307167376652788703950136550702154636383056640625p-37 == -1.07558842540317556313311797566711902618408203125p427
; [HW: -1.07558842540317556313311797566711902618408203125p427] 

; mpf : - 340420004479264 427
; mpfd: - 340420004479264 427 (-3.72781e+128) class: Neg. norm. non-zero
; hwf : - 340420004479264 427 (-3.72781e+128) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001010101 #b0111100010011011111000000111110011010000011011010101)))
(assert (= y (fp #b1 #b01101010011 #b0111011001010110110111110011001010110010100101010010)))
(assert (= z (fp #b1 #b01111011010 #b1000001001100011011111110111001100111100100011000001)))
(assert (= r (fp #b1 #b10110101010 #b0001001101011001110000110101011100010000000100100000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
