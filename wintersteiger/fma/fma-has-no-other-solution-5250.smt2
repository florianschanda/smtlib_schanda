(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.941850940279013837397315000998787581920623779296875p-289 {+ 4241719543679118 -289 (1.9523e-087)}
; Y = -1.7374671991182786268126392315025441348552703857421875p-459 {- 3321257003147043 -459 (-1.16721e-138)}
; Z = 1.026507415594200001152103141066618263721466064453125p-380 {+ 119378786992594 -380 (4.16835e-115)}
; 1.941850940279013837397315000998787581920623779296875p-289 x -1.7374671991182786268126392315025441348552703857421875p-459 1.026507415594200001152103141066618263721466064453125p-380 == 1.026507415594200001152103141066618263721466064453125p-380
; [HW: 1.026507415594200001152103141066618263721466064453125p-380] 

; mpf : + 119378786992594 -380
; mpfd: + 119378786992594 -380 (4.16835e-115) class: Pos. norm. non-zero
; hwf : + 119378786992594 -380 (4.16835e-115) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011110 #b1111000100011101001001001010101000110100100010001110)))
(assert (= y (fp #b1 #b01000110100 #b1011110011001010101001100111111000010101111100100011)))
(assert (= z (fp #b0 #b01010000011 #b0000011011001001001100001010001100010100000111010010)))
(assert (= r (fp #b0 #b01010000011 #b0000011011001001001100001010001100010100000111010010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
