(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.94690253493583487198748116497881710529327392578125p449 {+ 4264469903493204 449 (2.83017e+135)}
; Y = -1.7144208126094400146399721052148379385471343994140625p360 {- 3217465305453601 360 (-4.02639e+108)}
; Z = -1.32453347173724989005449970136396586894989013671875p390 {- 1461568822385132 390 (-3.34011e+117)}
; 1.94690253493583487198748116497881710529327392578125p449 x -1.7144208126094400146399721052148379385471343994140625p360 -1.32453347173724989005449970136396586894989013671875p390 == -1.66890511300803634497924576862715184688568115234375p810
; [HW: -1.66890511300803634497924576862715184688568115234375p810] 

; mpf : - 3012480817689212 810
; mpfd: - 3012480817689212 810 (-1.13954e+244) class: Neg. norm. non-zero
; hwf : - 3012480817689212 810 (-1.13954e+244) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111000000 #b1111001001101000001101000101110000001100100001010100)))
(assert (= y (fp #b1 #b10101100111 #b1011011011100100010010000100100110111101010000100001)))
(assert (= z (fp #b1 #b10110000101 #b0101001100010100101000000010011110010001100111101100)))
(assert (= r (fp #b1 #b11100101001 #b1010101100111101010111011001000001111111001001111100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
