(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2180603462361097033550549895153380930423736572265625p512 {+ 982056494053225 512 (1.63315e+154)}
; Y = 1.7521093862967316301393339017522521317005157470703125p-459 {+ 3387199551867813 -459 (1.17705e-138)}
; Z = -1.773218529035345714106597370118834078311920166015625p362 {- 3482266679239546 362 (-1.66579e+109)}
; 1.2180603462361097033550549895153380930423736572265625p512 x 1.7521093862967316301393339017522521317005157470703125p-459 -1.773218529035345714106597370118834078311920166015625p362 == -1.773218529035345714106597370118834078311920166015625p362
; [HW: -1.773218529035345714106597370118834078311920166015625p362] 

; mpf : - 3482266679239546 362
; mpfd: - 3482266679239546 362 (-1.66579e+109) class: Neg. norm. non-zero
; hwf : - 3482266679239546 362 (-1.66579e+109) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111111111 #b0011011111010010110011011000011110100011011101101001)))
(assert (= y (fp #b0 #b01000110100 #b1100000010001010001111011010000100101000101110100101)))
(assert (= z (fp #b1 #b10101101001 #b1100010111110001101001100100011011011110001101111010)))
(assert (= r (fp #b1 #b10101101001 #b1100010111110001101001100100011011011110001101111010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
