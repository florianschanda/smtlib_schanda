(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.81048880300706027668411479680798947811126708984375p-1005 {+ 3650117071210556 -1005 (5.2802e-303)}
; Y = 1.2241696438387055234642275536316446959972381591796875p721 {+ 1009570324459771 721 (1.35042e+217)}
; Z = 1.502890682379018461034547726740129292011260986328125p874 {+ 2264818289770242 874 (1.89297e+263)}
; 1.81048880300706027668411479680798947811126708984375p-1005 x 1.2241696438387055234642275536316446959972381591796875p721 1.502890682379018461034547726740129292011260986328125p874 == 1.502890682379018461034547726740129292011260986328125p874
; [HW: 1.502890682379018461034547726740129292011260986328125p874] 

; mpf : + 2264818289770242 874
; mpfd: + 2264818289770242 874 (1.89297e+263) class: Pos. norm. non-zero
; hwf : + 2264818289770242 874 (1.89297e+263) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010010 #b1100111101111100001100011011011010110000100000111100)))
(assert (= y (fp #b0 #b11011010000 #b0011100101100011001011101000100100001011000011111011)))
(assert (= z (fp #b0 #b11101101001 #b1000000010111101011100011001101001000111111100000010)))
(assert (= r (fp #b0 #b11101101001 #b1000000010111101011100011001101001000111111100000010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
