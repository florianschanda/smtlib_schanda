(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.390437349146063095162162426277063786983489990234375p745 {- 1758373500125734 745 (-2.57335e+224)}
; Y = 1.64726252188046284885558634414337575435638427734375p-424 {+ 2915011252351740 -424 (3.80228e-128)}
; Z = 1.02448461930209244741263319156132638454437255859375p775 {+ 110268922365212 775 (2.03588e+233)}
; -1.390437349146063095162162426277063786983489990234375p745 x 1.64726252188046284885558634414337575435638427734375p-424 1.02448461930209244741263319156132638454437255859375p775 == 1.0244846193020922253680282665300182998180389404296875p775
; [HW: 1.0244846193020922253680282665300182998180389404296875p775] 

; mpf : + 110268922365211 775
; mpfd: + 110268922365211 775 (2.03588e+233) class: Pos. norm. non-zero
; hwf : + 110268922365211 775 (2.03588e+233) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011101000 #b0110001111110011101100111011110110111000001000100110)))
(assert (= y (fp #b0 #b01001010111 #b1010010110110010111111110010001101100111001011111100)))
(assert (= z (fp #b0 #b11100000110 #b0000011001000100100111111011111100101000010100011100)))
(assert (= r (fp #b0 #b11100000110 #b0000011001000100100111111011111100101000010100011011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
