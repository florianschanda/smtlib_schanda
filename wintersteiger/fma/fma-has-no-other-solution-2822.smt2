(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7716981955225759026717469168943352997303009033203125p-895 {+ 3475419705797957 -895 (6.70724e-270)}
; Y = 1.1061172816102289306883221797761507332324981689453125p995 {+ 477909749917397 995 (3.70379e+299)}
; Z = 1.9797432256041112008659865750814788043498992919921875p727 {+ 4412371225749443 727 (1.39771e+219)}
; 1.7716981955225759026717469168943352997303009033203125p-895 x 1.1061172816102289306883221797761507332324981689453125p995 1.9797432256041112008659865750814788043498992919921875p727 == 1.9797432256041112008659865750814788043498992919921875p727
; [HW: 1.9797432256041112008659865750814788043498992919921875p727] 

; mpf : + 4412371225749443 727
; mpfd: + 4412371225749443 727 (1.39771e+219) class: Pos. norm. non-zero
; hwf : + 4412371225749443 727 (1.39771e+219) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010000000 #b1100010110001110000000110101000000100110110101000101)))
(assert (= y (fp #b0 #b11111100010 #b0001101100101010100000001000111000001110011011010101)))
(assert (= z (fp #b0 #b11011010110 #b1111101011010000011100111011100001110010011111000011)))
(assert (= r (fp #b0 #b11011010110 #b1111101011010000011100111011100001110010011111000011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
