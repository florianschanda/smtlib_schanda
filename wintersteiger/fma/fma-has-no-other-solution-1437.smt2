(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.406287564332541872857973430654965341091156005859375p68 {+ 1829756523333302 68 (4.15063e+020)}
; Y = -1.6925584176193761987150310233118943870067596435546875p266 {- 3119005831522923 266 (-2.00689e+080)}
; Z = -1.8649422402325057657179740999708883464336395263671875p369 {- 3895353550808115 369 (-2.24251e+111)}
; 1.406287564332541872857973430654965341091156005859375p68 x -1.6925584176193761987150310233118943870067596435546875p266 -1.8649422402325057657179740999708883464336395263671875p369 == -1.86494224030177946360709029249846935272216796875p369
; [HW: -1.86494224030177946360709029249846935272216796875p369] 

; mpf : - 3895353551120096 369
; mpfd: - 3895353551120096 369 (-2.24251e+111) class: Neg. norm. non-zero
; hwf : - 3895353551120096 369 (-2.24251e+111) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001000011 #b0110100000000010011101100011100110010100011010110110)))
(assert (= y (fp #b1 #b10100001001 #b1011000101001011100000100010101000111110101001101011)))
(assert (= z (fp #b1 #b10101110000 #b1101110101101100110110101100101010111010010000110011)))
(assert (= r (fp #b1 #b10101110000 #b1101110101101100110110101100101100000110011011100000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
