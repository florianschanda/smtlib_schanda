(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9484872366784886654755837298580445349216461181640625p1010 {+ 4271606765670913 1010 (2.13793e+304)}
; Y = -1.6086319473394630197304877583519555628299713134765625p-938 {- 2741034611243785 -938 (-6.92342e-283)}
; Z = 1.146587097020991041773640972678549587726593017578125p782 {+ 660169595521058 782 (2.91651e+235)}
; 1.9484872366784886654755837298580445349216461181640625p1010 x -1.6086319473394630197304877583519555628299713134765625p-938 1.146587097020991041773640972678549587726593017578125p782 == 1.146587097020991041773640972678549587726593017578125p782
; [HW: 1.146587097020991041773640972678549587726593017578125p782] 

; mpf : + 660169595521058 782
; mpfd: + 660169595521058 782 (2.91651e+235) class: Pos. norm. non-zero
; hwf : + 660169595521058 782 (2.91651e+235) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111110001 #b1111001011010000000011110011111000110101001000000001)))
(assert (= y (fp #b1 #b00001010101 #b1001101111001111010011011010010100011111101100001001)))
(assert (= z (fp #b0 #b11100001101 #b0010010110000110101110110110001110111000100000100010)))
(assert (= r (fp #b0 #b11100001101 #b0010010110000110101110110110001110111000100000100010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
