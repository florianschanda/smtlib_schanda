(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.37580855520764089305885136127471923828125p52 {- 1692491269195776 52 (-6.19609e+015)}
; Y = 1.1184799575496235934934929900919087231159210205078125p369 {+ 533586292671357 369 (1.34492e+111)}
; Z = 1.7980596462859776973886027917615137994289398193359375p52 {+ 3594141125632959 52 (8.09774e+015)}
; -1.37580855520764089305885136127471923828125p52 x 1.1184799575496235934934929900919087231159210205078125p369 1.7980596462859776973886027917615137994289398193359375p52 == -1.538814294425051354409106352250091731548309326171875p421
; [HW: -1.538814294425051354409106352250091731548309326171875p421] 

; mpf : - 2426603855594558 421
; mpfd: - 2426603855594558 421 (-8.33325e+126) class: Neg. norm. non-zero
; hwf : - 2426603855594558 421 (-8.33325e+126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000110011 #b0110000000110100111111010100111000101100100000000000)))
(assert (= y (fp #b0 #b10101110000 #b0001111001010100101100111101011011101000001101111101)))
(assert (= z (fp #b0 #b10000110011 #b1100110001001101101000110001000100001110001110111111)))
(assert (= r (fp #b1 #b10110100100 #b1000100111101111101110111100110100101100010000111110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
