(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.160744322994116561886812633019872009754180908203125p475 {+ 723928073138226 475 (1.13236e+143)}
; Y = 1.9306508585038570924297118835966102778911590576171875p-126 {+ 4191278859570003 -126 (2.26947e-038)}
; Z = 1.695278122156043565382788074202835559844970703125p112 {+ 3131254291860816 112 (8.80239e+033)}
; 1.160744322994116561886812633019872009754180908203125p475 x 1.9306508585038570924297118835966102778911590576171875p-126 1.695278122156043565382788074202835559844970703125p112 == 1.1204960118460347562319157077581621706485748291015625p350
; [HW: 1.1204960118460347562319157077581621706485748291015625p350] 

; mpf : + 542665794049433 350
; mpfd: + 542665794049433 350 (2.56986e+105) class: Pos. norm. non-zero
; hwf : + 542665794049433 350 (2.56986e+105) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111011010 #b0010100100100110100010100011101001000111000000110010)))
(assert (= y (fp #b0 #b01110000001 #b1110111000111111001000100111100101000100101101010011)))
(assert (= z (fp #b0 #b10001101111 #b1011000111111101101111110011110001001000110101010000)))
(assert (= r (fp #b0 #b10101011101 #b0001111011011000110100111001111000101101010110011001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
