(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4824489129451705604623157341848127543926239013671875p-92 {- 2172756744565171 -92 (-2.99378e-028)}
; Y = 0.294967546365214605685878268559463322162628173828125p-1022 {+ 1328415731896770 -1023 (6.56325e-309)}
; Z = 1.3548761026870244084108207971439696848392486572265625p428 {+ 1598219883823977 428 (9.39156e+128)}
; -1.4824489129451705604623157341848127543926239013671875p-92 x 0.294967546365214605685878268559463322162628173828125p-1022 1.3548761026870244084108207971439696848392486572265625p428 == 1.3548761026870244084108207971439696848392486572265625p428
; [HW: 1.3548761026870244084108207971439696848392486572265625p428] 

; mpf : + 1598219883823977 428
; mpfd: + 1598219883823977 428 (9.39156e+128) class: Pos. norm. non-zero
; hwf : + 1598219883823977 428 (9.39156e+128) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110100011 #b0111101110000001110001011001111100010111000110110011)))
(assert (= y (fp #b0 #b00000000000 #b0100101110000010111111100011110100000101000111000010)))
(assert (= z (fp #b0 #b10110101011 #b0101101011011001001010010000011100101100001101101001)))
(assert (= r (fp #b0 #b10110101011 #b0101101011011001001010010000011100101100001101101001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
