(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0081373912093223310648681945167481899261474609375p638 {+ 36647552018072 638 (1.14989e+192)}
; Y = -1.074143538035088329962718489696271717548370361328125p-858 {- 333912810266754 -858 (-5.5889e-259)}
; Z = -1.619940097551784585760970003320835530757904052734375p783 {- 2791961992326246 783 (-8.24111e+235)}
; 1.0081373912093223310648681945167481899261474609375p638 x -1.074143538035088329962718489696271717548370361328125p-858 -1.619940097551784585760970003320835530757904052734375p783 == -1.619940097551784585760970003320835530757904052734375p783
; [HW: -1.619940097551784585760970003320835530757904052734375p783] 

; mpf : - 2791961992326246 783
; mpfd: - 2791961992326246 783 (-8.24111e+235) class: Neg. norm. non-zero
; hwf : - 2791961992326246 783 (-8.24111e+235) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001111101 #b0000001000010101010010101100010100011110011010011000)))
(assert (= y (fp #b1 #b00010100101 #b0001001011111011000100100010011100010010000010000010)))
(assert (= z (fp #b1 #b11100001110 #b1001111010110100011001001110110001110110110001100110)))
(assert (= r (fp #b1 #b11100001110 #b1001111010110100011001001110110001110110110001100110)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
