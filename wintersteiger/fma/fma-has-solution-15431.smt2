(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.65986614865604042989843946998007595539093017578125p-986 {- 2971772941201748 -986 (-2.53803e-297)}
; Y = 1.108168261953769384575707590556703507900238037109375p-860 {+ 487146544228310 -860 (1.44148e-259)}
; Z = 1.9018730158616008463212665446917526423931121826171875p-488 {+ 4061674978169811 -488 (2.37982e-147)}
; -1.65986614865604042989843946998007595539093017578125p-986 x 1.108168261953769384575707590556703507900238037109375p-860 1.9018730158616008463212665446917526423931121826171875p-488 == 1.901873015861600624276661619660444557666778564453125p-488
; [HW: 1.901873015861600624276661619660444557666778564453125p-488] 

; mpf : + 4061674978169810 -488
; mpfd: + 4061674978169810 -488 (2.37982e-147) class: Pos. norm. non-zero
; hwf : + 4061674978169810 -488 (2.37982e-147) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000100101 #b1010100011101100111111001110100000110111000101010100)))
(assert (= y (fp #b0 #b00010100011 #b0001101110110000111010100100101110001110011111010110)))
(assert (= z (fp #b0 #b01000010111 #b1110011011100001001001100110010001000101001111010011)))
(assert (= r (fp #b0 #b01000010111 #b1110011011100001001001100110010001000101001111010010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
