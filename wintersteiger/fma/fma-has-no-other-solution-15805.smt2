(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8142780459198244447094339193427003920078277587890625p353 {+ 3667182304180497 353 (3.32884e+106)}
; Y = -1.56849060324077971273482035030610859394073486328125p-721 {- 2560254068918804 -721 (-1.42185e-217)}
; Z = -1.09551392408544945311632545781321823596954345703125p313 {- 430156472919924 313 (-1.82813e+094)}
; 1.8142780459198244447094339193427003920078277587890625p353 x -1.56849060324077971273482035030610859394073486328125p-721 -1.09551392408544945311632545781321823596954345703125p313 == -1.0955139240854496751609303828445263206958770751953125p313
; [HW: -1.0955139240854496751609303828445263206958770751953125p313] 

; mpf : - 430156472919925 313
; mpfd: - 430156472919925 313 (-1.82813e+094) class: Neg. norm. non-zero
; hwf : - 430156472919925 313 (-1.82813e+094) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101100000 #b1101000001110100100001101010100100010011100100010001)))
(assert (= y (fp #b1 #b00100101110 #b1001000110001000100110011010010100000000101000010100)))
(assert (= z (fp #b1 #b10100111000 #b0001100001110011100110011011110001000010011101110100)))
(assert (= r (fp #b1 #b10100111000 #b0001100001110011100110011011110001000010011101110101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
