(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.65289242995320506679490790702402591705322265625p-499 {+ 2940366104250272 -499 (1.0099e-150)}
; Y = 1.6774139317024172601833242879365570843219757080078125p287 {+ 3050801130390589 287 (4.17108e+086)}
; Z = 1.9029296863525992922205887225572951138019561767578125p-731 {+ 4066433798999325 -731 (1.6846e-220)}
; 1.65289242995320506679490790702402591705322265625p-499 x 1.6774139317024172601833242879365570843219757080078125p287 1.9029296863525992922205887225572951138019561767578125p-731 == 1.386292394804483851800114280194975435733795166015625p-211
; [HW: 1.386292394804483851800114280194975435733795166015625p-211] 

; mpf : + 1739706285297530 -211
; mpfd: + 1739706285297530 -211 (4.21236e-064) class: Pos. norm. non-zero
; hwf : + 1739706285297530 -211 (4.21236e-064) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000001100 #b1010011100100011111101010101001001110100011110100000)))
(assert (= y (fp #b0 #b10100011110 #b1010110101101010111111111101101010000100010000111101)))
(assert (= z (fp #b0 #b00100100100 #b1110011100100110011001100110000101111000110100011101)))
(assert (= r (fp #b0 #b01100101100 #b0110001011100100000011101111001001100000111101111010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
