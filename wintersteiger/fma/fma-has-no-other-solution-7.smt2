(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.933735690680165486554642484406940639019012451171875p31 {+ 4205171708609726 31 (4.15267e+009)}
; Y = 1.2826588340826889922396958354511298239231109619140625p778 {+ 1272982219847777 778 (2.03914e+234)}
; Z = -1.9927932406353352501326980927842669188976287841796875p87 {- 4471143268581243 87 (-3.0837e+026)}
; 1.933735690680165486554642484406940639019012451171875p31 x 1.2826588340826889922396958354511298239231109619140625p778 -1.9927932406353352501326980927842669188976287841796875p87 == 1.2401615832159522678779239868163131177425384521484375p810
; [HW: 1.2401615832159522678779239868163131177425384521484375p810] 

; mpf : + 1081591616680071 810
; mpfd: + 1081591616680071 810 (8.46788e+243) class: Pos. norm. non-zero
; hwf : + 1081591616680071 810 (8.46788e+243) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000011110 #b1110111100001001010011010101111010010100010010111110)))
(assert (= y (fp #b0 #b11100001001 #b0100100001011100010101000101000001001111100001100001)))
(assert (= z (fp #b1 #b10001010110 #b1111111000100111101100101010010000110111111101111011)))
(assert (= r (fp #b0 #b11100101001 #b0011110101111011001110101100000110101011000010000111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
