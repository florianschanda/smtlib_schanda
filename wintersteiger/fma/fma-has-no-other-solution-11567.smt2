(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.599727949265475235307576440391130745410919189453125p80 {- 2700934568835666 80 (-1.93395e+024)}
; Y = 1.106863692600738691140804803580977022647857666015625p503 {+ 481271286176122 503 (2.89856e+151)}
; Z = 1.2925990210840871963426934598828665912151336669921875p577 {+ 1317748842323267 577 (6.39398e+173)}
; -1.599727949265475235307576440391130745410919189453125p80 x 1.106863692600738691140804803580977022647857666015625p503 1.2925990210840871963426934598828665912151336669921875p577 == -1.750483925376152161135223650489933788776397705078125p583
; [HW: -1.750483925376152161135223650489933788776397705078125p583] 

; mpf : - 3379879126671586 583
; mpfd: - 3379879126671586 583 (-5.54173e+175) class: Neg. norm. non-zero
; hwf : - 3379879126671586 583 (-5.54173e+175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001001111 #b1001100110000111110001010101100010010111101001010010)))
(assert (= y (fp #b0 #b10111110110 #b0001101101011011011010110100000011011001100101111010)))
(assert (= z (fp #b0 #b11001000000 #b0100101011100111110001001111101001100101110101000011)))
(assert (= r (fp #b1 #b11001000110 #b1100000000011111101101101110101110101010000011100010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
