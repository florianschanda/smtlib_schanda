(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1999800891487240050992113538086414337158203125p-436 {- 900630254971712 -436 (-6.76232e-132)}
; Y = 1.6108890840043283976257271206122823059558868408203125p871 {+ 2751199851086597 871 (2.53625e+262)}
; Z = 1.8588554283810514444752470808452926576137542724609375p820 {+ 3867940987222031 820 (1.2997e+247)}
; -1.1999800891487240050992113538086414337158203125p-436 x 1.6108890840043283976257271206122823059558868408203125p871 1.8588554283810514444752470808452926576137542724609375p820 == 1.8588554283810514444752470808452926576137542724609375p820
; [HW: 1.8588554283810514444752470808452926576137542724609375p820] 

; mpf : + 3867940987222031 820
; mpfd: + 3867940987222031 820 (1.2997e+247) class: Pos. norm. non-zero
; hwf : + 3867940987222031 820 (1.2997e+247) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001001011 #b0011001100110001111001010010011010111110101101000000)))
(assert (= y (fp #b0 #b11101100110 #b1001110001100011001110100001110101001000001100000101)))
(assert (= z (fp #b0 #b11100110011 #b1101101111011101111100110000100011100011100000001111)))
(assert (= r (fp #b0 #b11100110011 #b1101101111011101111100110000100011100011100000001111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
