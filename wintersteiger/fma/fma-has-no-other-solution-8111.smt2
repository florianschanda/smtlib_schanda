(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.873727475256301122641389156342484056949615478515625p-888 {+ 3934918731987642 -888 (9.07967e-268)}
; Y = -1.6948580344198538316646818202571012079715728759765625p-33 {- 3129362384888649 -33 (-1.97307e-010)}
; Z = -1.8188508426914993254541741407592780888080596923828125p-582 {- 3687776350017453 -582 (-1.14905e-175)}
; 1.873727475256301122641389156342484056949615478515625p-888 x -1.6948580344198538316646818202571012079715728759765625p-33 -1.8188508426914993254541741407592780888080596923828125p-582 == -1.818850842691499547498779065790586173534393310546875p-582
; [HW: -1.818850842691499547498779065790586173534393310546875p-582] 

; mpf : - 3687776350017454 -582
; mpfd: - 3687776350017454 -582 (-1.14905e-175) class: Neg. norm. non-zero
; hwf : - 3687776350017454 -582 (-1.14905e-175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010000111 #b1101111110101100100110101001001111010111101010111010)))
(assert (= y (fp #b1 #b01111011110 #b1011000111100010001101110101010100110010001101001001)))
(assert (= z (fp #b1 #b00110111001 #b1101000110100000001101010111010110101001011110101101)))
(assert (= r (fp #b1 #b00110111001 #b1101000110100000001101010111010110101001011110101110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
