(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6181279467852169862140954137430526316165924072265625p-891 {- 2783800790809193 -891 (-9.80137e-269)}
; Y = -1.3854758154111339596425978015759028494358062744140625p-11 {- 1736028738645921 -11 (-0.000676502)}
; Z = 1.1136106583581242279734624389675445854663848876953125p563 {+ 511656918646965 563 (3.36218e+169)}
; -1.6181279467852169862140954137430526316165924072265625p-891 x -1.3854758154111339596425978015759028494358062744140625p-11 1.1136106583581242279734624389675445854663848876953125p563 == 1.1136106583581242279734624389675445854663848876953125p563
; [HW: 1.1136106583581242279734624389675445854663848876953125p563] 

; mpf : + 511656918646965 563
; mpfd: + 511656918646965 563 (3.36218e+169) class: Pos. norm. non-zero
; hwf : + 511656918646965 563 (3.36218e+169) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010000100 #b1001111000111101101000100001010000101111101001101001)))
(assert (= y (fp #b1 #b01111110100 #b0110001010101110100010110000010010010110111110100001)))
(assert (= z (fp #b0 #b11000110010 #b0001110100010101100101101000111000100000000010110101)))
(assert (= r (fp #b0 #b11000110010 #b0001110100010101100101101000111000100000000010110101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
