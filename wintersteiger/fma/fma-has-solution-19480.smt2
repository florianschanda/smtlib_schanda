(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7770699350359981938396458645001985132694244384765625p-67 {+ 3499611869868937 -67 (1.20419e-020)}
; Y = 1.3780800497203575805116315677878446877002716064453125p106 {+ 1702721171036821 106 (1.11803e+032)}
; Z = 1.069507299268234401523613996687345206737518310546875p719 {+ 313033047083950 719 (2.94952e+216)}
; 1.7770699350359981938396458645001985132694244384765625p-67 x 1.3780800497203575805116315677878446877002716064453125p106 1.069507299268234401523613996687345206737518310546875p719 == 1.069507299268234401523613996687345206737518310546875p719
; [HW: 1.069507299268234401523613996687345206737518310546875p719] 

; mpf : + 313033047083950 719
; mpfd: + 313033047083950 719 (2.94952e+216) class: Pos. norm. non-zero
; hwf : + 313033047083950 719 (2.94952e+216) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110111100 #b1100011011101110000011100010010110101111001110001001)))
(assert (= y (fp #b0 #b10001101001 #b0110000011001001110110101010100011010001101010010101)))
(assert (= z (fp #b0 #b11011001110 #b0001000111001011001110101111100100110000101110101110)))
(assert (= r (fp #b0 #b11011001110 #b0001000111001011001110101111100100110000101110101110)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
