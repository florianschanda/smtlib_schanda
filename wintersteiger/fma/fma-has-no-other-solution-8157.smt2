(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9180268937987621225005341329961083829402923583984375p84 {- 4134425576828199 84 (-3.71e+025)}
; Y = 1.3606390357435655946716224207193590700626373291015625p63 {+ 1624173826989977 63 (1.25497e+019)}
; Z = 1.823060155656171854587910274858586490154266357421875p-813 {+ 3706733410316638 -813 (3.33745e-245)}
; -1.9180268937987621225005341329961083829402923583984375p84 x 1.3606390357435655946716224207193590700626373291015625p63 1.823060155656171854587910274858586490154266357421875p-813 == -1.3048711316542871418988625009660609066486358642578125p148
; [HW: -1.3048711316542871418988625009660609066486358642578125p148] 

; mpf : - 1373017514914269 148
; mpfd: - 1373017514914269 148 (-4.65594e+044) class: Neg. norm. non-zero
; hwf : - 1373017514914269 148 (-4.65594e+044) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001010011 #b1110101100000011110011110111110110110110110100100111)))
(assert (= y (fp #b0 #b10000111110 #b0101110001010010110101110000000000101101111110011001)))
(assert (= z (fp #b0 #b00011010010 #b1101001010110100000100100000001100101111000101011110)))
(assert (= r (fp #b1 #b10010010011 #b0100111000001100000010001101001111110011000111011101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
