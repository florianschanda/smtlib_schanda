(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8366104213042202530914437375031411647796630859375p62 {- 3767758381639960 62 (-8.46987e+018)}
; Y = -1.2242191493810119506946421097381971776485443115234375p-234 {- 1009793277601655 -234 (-4.43445e-071)}
; Z = 1.025617307475702677521667283144779503345489501953125p-671 {+ 115370096401810 -671 (1.04679e-202)}
; -1.8366104213042202530914437375031411647796630859375p62 x -1.2242191493810119506946421097381971776485443115234375p-234 1.025617307475702677521667283144779503345489501953125p-671 == 1.1242068238566773619169225639780052006244659423828125p-171
; [HW: 1.1242068238566773619169225639780052006244659423828125p-171] 

; mpf : + 559377805637805 -171
; mpfd: + 559377805637805 -171 (3.75593e-052) class: Pos. norm. non-zero
; hwf : + 559377805637805 -171 (3.75593e-052) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000111101 #b1101011000101100000110011011111011111110100100011000)))
(assert (= y (fp #b1 #b01100010101 #b0011100101100110011011010001100110111010011101110111)))
(assert (= z (fp #b0 #b00101100000 #b0000011010001110110110110001100111010001110110010010)))
(assert (= r (fp #b0 #b01101010100 #b0001111111001100000001001011011001100111100010101101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
