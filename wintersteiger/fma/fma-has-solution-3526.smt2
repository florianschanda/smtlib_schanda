(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2799997892583385716847033108933828771114349365234375p124 {- 1261006946567671 124 (-2.72226e+037)}
; Y = 1.948390284409116990360644194879569113254547119140625p-823 {+ 4271170131466698 -823 (3.48329e-248)}
; Z = 1.628654345663079539008322171866893768310546875p-331 {+ 2831207476873088 -331 (3.72306e-100)}
; -1.2799997892583385716847033108933828771114349365234375p124 x 1.948390284409116990360644194879569113254547119140625p-823 1.628654345663079539008322171866893768310546875p-331 == 1.6286543456630793169637172468355856835842132568359375p-331
; [HW: 1.6286543456630793169637172468355856835842132568359375p-331] 

; mpf : + 2831207476873087 -331
; mpfd: + 2831207476873087 -331 (3.72306e-100) class: Pos. norm. non-zero
; hwf : + 2831207476873087 -331 (3.72306e-100) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001111011 #b0100011110101110000100001111000111000000010111110111)))
(assert (= y (fp #b0 #b00011001000 #b1111001011001001101101001010011101100001100111001010)))
(assert (= z (fp #b0 #b01010110100 #b1010000011101111011111011011111100011100011110000000)))
(assert (= r (fp #b0 #b01010110100 #b1010000011101111011111011011111100011100011101111111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
