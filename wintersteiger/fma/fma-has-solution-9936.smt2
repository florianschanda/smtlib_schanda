(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.018365492799515603650206685415469110012054443359375p120 {+ 82710826528374 120 (1.35364e+036)}
; Y = -1.875648517553281546810239888145588338375091552734375p-820 {- 3943570337360486 -820 (-2.68259e-247)}
; Z = -1.6221372195287713235956061907927505671977996826171875p-892 {- 2801856950043091 -892 (-4.91283e-269)}
; 1.018365492799515603650206685415469110012054443359375p120 x -1.875648517553281546810239888145588338375091552734375p-820 -1.6221372195287713235956061907927505671977996826171875p-892 == -1.9100957268968283830901100373012013733386993408203125p-700
; [HW: -1.9100957268968283830901100373012013733386993408203125p-700] 

; mpf : - 4098706776524037 -700
; mpfd: - 4098706776524037 -700 (-3.63127e-211) class: Neg. norm. non-zero
; hwf : - 4098706776524037 -700 (-3.63127e-211) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001110111 #b0000010010110011100110011101011011110010111001110110)))
(assert (= y (fp #b1 #b00011001011 #b1110000000101010100000000101000110101110101001100110)))
(assert (= z (fp #b1 #b00010000011 #b1001111101000100011000101000001110000000000111010011)))
(assert (= r (fp #b1 #b00101000011 #b1110100011111100000010001001011101000000010100000101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
