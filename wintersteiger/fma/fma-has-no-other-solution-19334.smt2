(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.32602659404288036881780499243177473545074462890625p-865 {- 1468293247444388 -865 (-5.39021e-261)}
; Y = -1.25199058948113606248853102442808449268341064453125p39 {- 1134864724888116 39 (-6.88289e+011)}
; Z = 1.0767387557838719036595875877537764608860015869140625p399 {+ 345600631953121 399 (1.3902e+120)}
; -1.32602659404288036881780499243177473545074462890625p-865 x -1.25199058948113606248853102442808449268341064453125p39 1.0767387557838719036595875877537764608860015869140625p399 == 1.0767387557838719036595875877537764608860015869140625p399
; [HW: 1.0767387557838719036595875877537764608860015869140625p399] 

; mpf : + 345600631953121 399
; mpfd: + 345600631953121 399 (1.3902e+120) class: Pos. norm. non-zero
; hwf : + 345600631953121 399 (1.3902e+120) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010011110 #b0101001101110110011110101001011100001010010110100100)))
(assert (= y (fp #b1 #b10000100110 #b0100000010000010011101001000110010111000101000110100)))
(assert (= z (fp #b0 #b10110001110 #b0001001110100101001001101010111001101101011011100001)))
(assert (= r (fp #b0 #b10110001110 #b0001001110100101001001101010111001101101011011100001)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
