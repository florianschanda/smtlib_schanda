(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.505089749770730289668563273153267800807952880859375p859 {+ 2274722008856118 859 (5.78534e+258)}
; Y = 1.6350176691810835993834416512981988489627838134765625p-551 {+ 2859865338297609 -551 (2.21817e-166)}
; Z = 1.40829065461832758643367924378253519535064697265625p747 {+ 1838777639997956 747 (1.04256e+225)}
; 1.505089749770730289668563273153267800807952880859375p859 x 1.6350176691810835993834416512981988489627838134765625p-551 1.40829065461832758643367924378253519535064697265625p747 == 1.4082906546183278084782841688138432800769805908203125p747
; [HW: 1.4082906546183278084782841688138432800769805908203125p747] 

; mpf : + 1838777639997957 747
; mpfd: + 1838777639997957 747 (1.04256e+225) class: Pos. norm. non-zero
; hwf : + 1838777639997957 747 (1.04256e+225) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101011010 #b1000000101001101100011111101010011001111011000110110)))
(assert (= y (fp #b0 #b00111011000 #b1010001010010000100001001001100110000011110100001001)))
(assert (= z (fp #b0 #b11011101010 #b0110100010000101101111001000000011011001001000000100)))
(assert (= r (fp #b0 #b11011101010 #b0110100010000101101111001000000011011001001000000101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
