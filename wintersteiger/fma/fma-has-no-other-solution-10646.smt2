(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2611923693556164050022516676108352839946746826171875p239 {- 1176305857301971 239 (-1.11417e+072)}
; Y = 1.5673138957121874881295298109762370586395263671875p442 {+ 2554954649331512 442 (1.77998e+133)}
; Z = 1.2517743691284681784026133755105547606945037841796875p-509 {+ 1133890954988411 -509 (7.46893e-154)}
; -1.2611923693556164050022516676108352839946746826171875p239 x 1.5673138957121874881295298109762370586395263671875p442 1.2517743691284681784026133755105547606945037841796875p-509 == -1.976684325657235063999905833043158054351806640625p681
; [HW: -1.976684325657235063999905833043158054351806640625p681] 

; mpf : - 4398595165088528 681
; mpfd: - 4398595165088528 681 (-1.98319e+205) class: Neg. norm. non-zero
; hwf : - 4398595165088528 681 (-1.98319e+205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011101110 #b0100001011011101100000001100110001011000110111010011)))
(assert (= y (fp #b0 #b10110111001 #b1001000100111011011110111100010010100110011100111000)))
(assert (= z (fp #b0 #b01000000010 #b0100000001110100010010001111100101100000101101111011)))
(assert (= r (fp #b1 #b11010101000 #b1111101000000111111110111110010100110110101100010000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
