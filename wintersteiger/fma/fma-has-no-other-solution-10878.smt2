(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8826281934739317325266938496497459709644317626953125p-579 {- 3975004003235893 -579 (-9.51474e-175)}
; Y = -1.536527418462753313832536150584928691387176513671875p-245 {- 2416304681862910 -245 (-2.71764e-074)}
; Z = 1.0381369127225827941884972460684366524219512939453125p775 {+ 171753385926485 775 (2.06301e+233)}
; -1.8826281934739317325266938496497459709644317626953125p-579 x -1.536527418462753313832536150584928691387176513671875p-245 1.0381369127225827941884972460684366524219512939453125p775 == 1.0381369127225827941884972460684366524219512939453125p775
; [HW: 1.0381369127225827941884972460684366524219512939453125p775] 

; mpf : + 171753385926485 775
; mpfd: + 171753385926485 775 (2.06301e+233) class: Pos. norm. non-zero
; hwf : + 171753385926485 775 (2.06301e+233) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111100 #b1110000111110011111010111101100101111111100000110101)))
(assert (= y (fp #b1 #b01100001010 #b1000100101011001110111000110001110110100011011111110)))
(assert (= z (fp #b0 #b11100000110 #b0000100111000011010101110011100011101001111101010101)))
(assert (= r (fp #b0 #b11100000110 #b0000100111000011010101110011100011101001111101010101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
