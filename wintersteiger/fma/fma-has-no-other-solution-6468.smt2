(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2819901114533653885274588901665993034839630126953125p843 {+ 1269970560863541 843 (7.51919e+253)}
; Y = -1.2123105366990161169127304674475453794002532958984375p579 {- 956161653964519 579 (-2.39873e+174)}
; Z = -1.6671587818378108547534566241665743291378021240234375p-926 {- 3004616041281719 -926 (-2.93901e-279)}
; 1.2819901114533653885274588901665993034839630126953125p843 x -1.2123105366990161169127304674475453794002532958984375p579 -1.6671587818378108547534566241665743291378021240234375p-926 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101001010 #b0100100000110000100000010000001001111100110100110101)))
(assert (= y (fp #b1 #b11001000010 #b0011011001011001111110111011101110110111111011100111)))
(assert (= z (fp #b1 #b00001100001 #b1010101011001010111010101111110100111011100010110111)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
