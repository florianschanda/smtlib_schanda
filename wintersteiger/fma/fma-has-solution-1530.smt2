(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.901536739875742565430982722318731248378753662109375p911 {- 4060160525765206 911 (-3.29178e+274)}
; Y = -1.3859474141493368648525574826635420322418212890625p-376 {- 1738152630547560 -376 (-9.00468e-114)}
; Z = 1.73823630868115852621258454746566712856292724609375p-747 {+ 3324720764687836 -747 (2.34802e-225)}
; -1.901536739875742565430982722318731248378753662109375p911 x -1.3859474141493368648525574826635420322418212890625p-376 1.73823630868115852621258454746566712856292724609375p-747 == 1.317714963770372893492321964004077017307281494140625p536
; [HW: 1.317714963770372893492321964004077017307281494140625p536] 

; mpf : + 1430860992446282 536
; mpfd: + 1430860992446282 536 (2.96414e+161) class: Pos. norm. non-zero
; hwf : + 1430860992446282 536 (2.96414e+161) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110001110 #b1110011011001011000111001001110111101000101001010110)))
(assert (= y (fp #b1 #b01010000111 #b0110001011001101011100110010000110111111010001101000)))
(assert (= z (fp #b0 #b00100010100 #b1011110011111101000011100000001010000001010111011100)))
(assert (= r (fp #b0 #b11000010111 #b0101000101010101110001001001001011010111111101001010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
