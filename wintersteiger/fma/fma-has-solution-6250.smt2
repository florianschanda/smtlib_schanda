(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0026066139266323062884112005122005939483642578125p1004 {- 11739145508680 1004 (-1.71888e+302)}
; Y = 1.4051358629244969922211794255417771637439727783203125p-955 {+ 1824569721301189 -955 (4.61395e-288)}
; Z = 1.2202750418968293377730560678173787891864776611328125p-522 {+ 992030596605581 -522 (8.88792e-158)}
; -1.0026066139266323062884112005122005939483642578125p1004 x 1.4051358629244969922211794255417771637439727783203125p-955 1.2202750418968293377730560678173787891864776611328125p-522 == -1.40879850963360642168709091492928564548492431640625p49
; [HW: -1.40879850963360642168709091492928564548492431640625p49] 

; mpf : - 1841064815655524 49
; mpfd: - 1841064815655524 49 (-7.93083e+014) class: Neg. norm. non-zero
; hwf : - 1841064815655524 49 (-7.93083e+014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111101011 #b0000000010101010110100111011100110010001011101001000)))
(assert (= y (fp #b0 #b00001000100 #b0110011110110110111110111110000110110010100011000101)))
(assert (= z (fp #b0 #b00111110101 #b0011100001100011111100011111010100010010011010001101)))
(assert (= r (fp #b1 #b10000110000 #b0110100010100111000001001110010110000111101001100100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
