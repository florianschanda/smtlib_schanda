(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2157901851753443178694169546361081302165985107421875p-431 {+ 971832597545891 -431 (2.19245e-130)}
; Y = 1.5072256482200592220266344156698323786258697509765625p914 {+ 2284341240316617 914 (2.08735e+275)}
; Z = -1.2019942798694931429537291478482075035572052001953125p-237 {- 909701363551221 -237 (-5.44244e-072)}
; 1.2157901851753443178694169546361081302165985107421875p-431 x 1.5072256482200592220266344156698323786258697509765625p914 -1.2019942798694931429537291478482075035572052001953125p-237 == 1.8324701499504942869833712393301539123058319091796875p483
; [HW: 1.8324701499504942869833712393301539123058319091796875p483] 

; mpf : + 3749112257114107 483
; mpfd: + 3749112257114107 483 (4.57641e+145) class: Pos. norm. non-zero
; hwf : + 3749112257114107 483 (4.57641e+145) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010000 #b0011011100111110000001101000110000100000001110100011)))
(assert (= y (fp #b0 #b11110010001 #b1000000111011001100010100100001011001100001011001001)))
(assert (= z (fp #b1 #b01100010010 #b0011001110110101111001011010101000000100101111110101)))
(assert (= r (fp #b0 #b10111100010 #b1101010100011100110000111000010011101110111111111011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
