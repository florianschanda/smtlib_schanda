(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1455270681687415024185838774428702890872955322265625p-367 {+ 655395649977065 -367 (3.81063e-111)}
; Y = -1.02160114079164987543890674714930355548858642578125p656 {- 97282889620052 656 (-3.05463e+197)}
; Z = -1.261592577736865283810629989602603018283843994140625p-710 {- 1178108235618634 -710 (-2.34219e-214)}
; 1.1455270681687415024185838774428702890872955322265625p-367 x -1.02160114079164987543890674714930355548858642578125p656 -1.261592577736865283810629989602603018283843994140625p-710 == -1.170271759648900289363382398732937872409820556640625p289
; [HW: -1.170271759648900289363382398732937872409820556640625p289] 

; mpf : - 766835833306506 289
; mpfd: - 766835833306506 289 (-1.16401e+087) class: Neg. norm. non-zero
; hwf : - 766835833306506 289 (-1.16401e+087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010010000 #b0010010101000001010000110000111001110111101011101001)))
(assert (= y (fp #b1 #b11010001111 #b0000010110000111101001110000000101000001101001010100)))
(assert (= z (fp #b1 #b00100111001 #b0100001011110111101110110010111001000001100101001010)))
(assert (= r (fp #b1 #b10100100000 #b0010101110010110111011100001011100011111110110001010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
