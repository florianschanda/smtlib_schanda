(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5900249445141783066759444409399293363094329833984375p196 {+ 2657236120253351 196 (1.59692e+059)}
; Y = -1.1350849171513532898103449042537249624729156494140625p-248 {- 608368382546209 -248 (-2.50951e-075)}
; Z = -1.182072898029421725851761948433704674243927001953125p-210 {- 819983435719570 -210 (-7.18365e-064)}
; 1.5900249445141783066759444409399293363094329833984375p196 x -1.1350849171513532898103449042537249624729156494140625p-248 -1.182072898029421725851761948433704674243927001953125p-210 == -1.8048133324124611132077689035213552415370941162109375p-52
; [HW: -1.8048133324124611132077689035213552415370941162109375p-52] 

; mpf : - 3624557023955567 -52
; mpfd: - 3624557023955567 -52 (-4.00749e-016) class: Neg. norm. non-zero
; hwf : - 3624557023955567 -52 (-4.00749e-016) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011000011 #b1001011100001011110111111111000010000011001110100111)))
(assert (= y (fp #b1 #b01100000111 #b0010001010010100111011001101010101011001000100100001)))
(assert (= z (fp #b1 #b01100101101 #b0010111010011100010101000101011010000110001110010010)))
(assert (= r (fp #b1 #b01111001011 #b1100111000001000001111110001111000011000101001101111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
