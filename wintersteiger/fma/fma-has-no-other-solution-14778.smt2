(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5914902994658159940399855258874595165252685546875p-299 {- 2663835492267512 -299 (-1.56255e-090)}
; Y = -1.5930936914253994718393414586898870766162872314453125p-218 {- 2671056527699221 -218 (-3.78183e-066)}
; Z = 1.84517724010159600567249071900732815265655517578125p492 {+ 3806339903583572 492 (2.35937e+148)}
; -1.5914902994658159940399855258874595165252685546875p-299 x -1.5930936914253994718393414586898870766162872314453125p-218 1.84517724010159600567249071900732815265655517578125p492 == 1.84517724010159600567249071900732815265655517578125p492
; [HW: 1.84517724010159600567249071900732815265655517578125p492] 

; mpf : + 3806339903583572 492
; mpfd: + 3806339903583572 492 (2.35937e+148) class: Pos. norm. non-zero
; hwf : + 3806339903583572 492 (2.35937e+148) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011010100 #b1001011101101011111010001000010000011011010111111000)))
(assert (= y (fp #b1 #b01100100101 #b1001011111010100111111001111100000100010110100010101)))
(assert (= z (fp #b0 #b10111101011 #b1101100001011101100010010001110110001111010101010100)))
(assert (= r (fp #b0 #b10111101011 #b1101100001011101100010010001110110001111010101010100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
