(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4972125329873711141459580176160670816898345947265625p-429 {+ 2239246178285865 -429 (1.07998e-129)}
; Y = 1.6377377747519077377802432238240726292133331298828125p-513 {+ 2872115604732781 -513 (6.1074e-155)}
; Z = 1.6248568126031199820857864324352703988552093505859375p924 {+ 2814104908399327 924 (2.30426e+278)}
; 1.4972125329873711141459580176160670816898345947265625p-429 x 1.6377377747519077377802432238240726292133331298828125p-513 1.6248568126031199820857864324352703988552093505859375p924 == 1.6248568126031199820857864324352703988552093505859375p924
; [HW: 1.6248568126031199820857864324352703988552093505859375p924] 

; mpf : + 2814104908399327 924
; mpfd: + 2814104908399327 924 (2.30426e+278) class: Pos. norm. non-zero
; hwf : + 2814104908399327 924 (2.30426e+278) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010010 #b0111111101001001010100100001000001010111100100101001)))
(assert (= y (fp #b0 #b00111111110 #b1010001101000010110010000110010111111011101101101101)))
(assert (= z (fp #b0 #b11110011011 #b1001111111110110100111011011011011010000001011011111)))
(assert (= r (fp #b0 #b11110011011 #b1001111111110110100111011011011011010000001011011111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
