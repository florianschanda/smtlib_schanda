(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.82790284960766324928727044607512652873992919921875p-151 {- 3728542964992044 -151 (-6.40359e-046)}
; Y = -1.0178507366584759186167730149463750422000885009765625p238 {- 80392570963401 238 (-4.49597e+071)}
; Z = 1.2846331878547145866065193331451155245304107666015625p-122 {+ 1281873918759769 -122 (2.41613e-037)}
; -1.82790284960766324928727044607512652873992919921875p-151 x -1.0178507366584759186167730149463750422000885009765625p238 1.2846331878547145866065193331451155245304107666015625p-122 == 1.8605322620132873634446468713576905429363250732421875p87
; [HW: 1.8605322620132873634446468713576905429363250732421875p87] 

; mpf : + 3875492774543331 87
; mpfd: + 3875492774543331 87 (2.87903e+026) class: Pos. norm. non-zero
; hwf : + 3875492774543331 87 (2.87903e+026) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101101000 #b1101001111110001011100001110111101010100100000101100)))
(assert (= y (fp #b1 #b10011101101 #b0000010010010001110111011010101000101000010111001001)))
(assert (= z (fp #b0 #b01110000101 #b0100100011011101101110000111100100110001001101011001)))
(assert (= r (fp #b0 #b10001010110 #b1101110001001011110101111010001001111111111111100011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
