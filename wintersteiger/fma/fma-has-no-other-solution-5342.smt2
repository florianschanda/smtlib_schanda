(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.124876859728128675186553664389066398143768310546875p637 {- 562395378938798 637 (-6.41523e+191)}
; Y = 1.6140807577766127511864624466397799551486968994140625p192 {+ 2765573871898145 192 (1.01317e+058)}
; Z = 1.0880409312398013899070292609394527971744537353515625p984 {+ 396501105124921 984 (1.77894e+296)}
; -1.124876859728128675186553664389066398143768310546875p637 x 1.6140807577766127511864624466397799551486968994140625p192 1.0880409312398013899070292609394527971744537353515625p984 == 1.0880409312398011678624243359081447124481201171875p984
; [HW: 1.0880409312398011678624243359081447124481201171875p984] 

; mpf : + 396501105124920 984
; mpfd: + 396501105124920 984 (1.77894e+296) class: Pos. norm. non-zero
; hwf : + 396501105124920 984 (1.77894e+296) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001111100 #b0001111111110111111011100000110010001111001110101110)))
(assert (= y (fp #b0 #b10010111111 #b1001110100110100011001011000001111000000111000100001)))
(assert (= z (fp #b0 #b11111010111 #b0001011010001001110110011011100001100010011000111001)))
(assert (= r (fp #b0 #b11111010111 #b0001011010001001110110011011100001100010011000111000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
