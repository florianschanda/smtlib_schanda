(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2122391383820361188128345020231790840625762939453125p917 {- 955840104530773 917 (-1.34306e+276)}
; Y = -1.1165520771839518854307016226812265813350677490234375p-255 {- 524903891374903 -255 (-1.92855e-077)}
; Z = -1.4740277718907695003736080252565443515777587890625p-570 {- 2134831296850536 -570 (-3.81424e-172)}
; -1.2122391383820361188128345020231790840625762939453125p917 x -1.1165520771839518854307016226812265813350677490234375p-255 -1.4740277718907695003736080252565443515777587890625p-570 == 1.353528128004146680041230865754187107086181640625p662
; [HW: 1.353528128004146680041230865754187107086181640625p662] 

; mpf : + 1592149145544464 662
; mpfd: + 1592149145544464 662 (2.59015e+199) class: Pos. norm. non-zero
; hwf : + 1592149145544464 662 (2.59015e+199) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110010100 #b0011011001010101010011011101111001001000001101010101)))
(assert (= y (fp #b1 #b01100000000 #b0001110111010110010110110101111111001001001100110111)))
(assert (= z (fp #b1 #b00111000101 #b0111100101011001111000100101000110101010101001101000)))
(assert (= r (fp #b0 #b11010010101 #b0101101010000000110100011100001111111110011100010000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
