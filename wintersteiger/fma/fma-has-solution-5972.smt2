(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6502870669533233893844226258806884288787841796875p636 {- 2928632592414840 636 (-4.70584e+191)}
; Y = -1.28908520838987072920645005069673061370849609375p-484 {- 1301924036782944 -484 (-2.58086e-146)}
; Z = -1.539250208050936041814793497906066477298736572265625p-20 {- 2428567036037658 -20 (-1.46794e-006)}
; -1.6502870669533233893844226258806884288787841796875p636 x -1.28908520838987072920645005069673061370849609375p-484 -1.539250208050936041814793497906066477298736572265625p-20 == 1.063680323803316785102879293845035135746002197265625p153
; [HW: 1.063680323803316785102879293845035135746002197265625p153] 

; mpf : + 286790682551450 153
; mpfd: + 286790682551450 153 (1.21451e+046) class: Pos. norm. non-zero
; hwf : + 286790682551450 153 (1.21451e+046) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001111011 #b1010011001111001001101101001010110010011100001111000)))
(assert (= y (fp #b1 #b01000011011 #b0100101000000001011111001111101111001010101101100000)))
(assert (= z (fp #b1 #b01111101011 #b1000101000001100010011010011011111110000101000011010)))
(assert (= r (fp #b0 #b10010011000 #b0001000001001101010110101000110000100010010010011010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
