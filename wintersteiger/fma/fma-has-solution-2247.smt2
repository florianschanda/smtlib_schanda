(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.091576818773866808243155901436693966388702392578125p188 {- 412425326905762 188 (-4.28246e+056)}
; Y = -1.0383330414047839962421448944951407611370086669921875p-747 {- 172636670986563 -747 (-1.40259e-225)}
; Z = -1.661520845579397498426033052965067327022552490234375p-705 {- 2979225033649190 -705 (-9.87095e-213)}
; -1.091576818773866808243155901436693966388702392578125p188 x -1.0383330414047839962421448944951407611370086669921875p-747 -1.661520845579397498426033052965067327022552490234375p-705 == 1.1334202781644278079653531676740385591983795166015625p-559
; [HW: 1.1334202781644278079653531676740385591983795166015625p-559] 

; mpf : + 600871515024985 -559
; mpfd: + 600871515024985 -559 (6.00653e-169) class: Pos. norm. non-zero
; hwf : + 600871515024985 -559 (6.00653e-169) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010111011 #b0001011101110001100101000001000110110100100110100010)))
(assert (= y (fp #b1 #b00100010100 #b0000100111010000001100011011011100110000100101000011)))
(assert (= z (fp #b1 #b00100111110 #b1010100101011001011011100001110101100010110000100110)))
(assert (= r (fp #b0 #b00111010000 #b0010001000100111110101001101001101010110111001011001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
