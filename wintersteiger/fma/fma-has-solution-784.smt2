(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.897749026359849100487053874530829489231109619140625p105 {+ 4043102180586442 105 (7.69818e+031)}
; Y = 1.857213211904212624148158283787779510021209716796875p335 {+ 3860545101708878 335 (1.2999e+101)}
; Z = -1.3538090992033871007294010269106365740299224853515625p-299 {- 1593414527332665 -299 (-1.3292e-090)}
; 1.897749026359849100487053874530829489231109619140625p105 x 1.857213211904212624148158283787779510021209716796875p335 -1.3538090992033871007294010269106365740299224853515625p-299 == 1.7622622823169338257542904102592729032039642333984375p441
; [HW: 1.7622622823169338257542904102592729032039642333984375p441] 

; mpf : + 3432924130601127 441
; mpfd: + 3432924130601127 441 (1.00069e+133) class: Pos. norm. non-zero
; hwf : + 3432924130601127 441 (1.00069e+133) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001101000 #b1110010111010010111000010101010000111011001111001010)))
(assert (= y (fp #b0 #b10101001110 #b1101101101110010010100110011011011010011111001001110)))
(assert (= z (fp #b1 #b01011010100 #b0101101010010011001110111010111000011011000100111001)))
(assert (= r (fp #b0 #b10110111000 #b1100001100100011100111101111010110000110100010100111)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
