(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2556106302631959703575148523668758571147918701171875p761 {- 1151167939205267 761 (-1.52294e+229)}
; Y = 1.2271586351527983271836319545400328934192657470703125p100 {+ 1023031544628133 100 (1.55561e+030)}
; Z = -0.4627259921430686429033585227443836629390716552734375p-1022 {- 2083932605790167 -1023 (-1.0296e-308)}
; -1.2556106302631959703575148523668758571147918701171875p761 x 1.2271586351527983271836319545400328934192657470703125p100 -0.4627259921430686429033585227443836629390716552734375p-1022 == -1.540833427317128467848306172527372837066650390625p861
; [HW: -1.540833427317128467848306172527372837066650390625p861] 

; mpf : - 2435697221734928 861
; mpfd: - 2435697221734928 861 (-2.36909e+259) class: Neg. norm. non-zero
; hwf : - 2435697221734928 861 (-2.36909e+259) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011111000 #b0100000101101111101100101100000101111101100010010011)))
(assert (= y (fp #b0 #b10001100011 #b0011101000100111000100010111110011111100001110100101)))
(assert (= z (fp #b1 #b00000000000 #b0111011001110101001101011110101101000011011111010111)))
(assert (= r (fp #b1 #b11101011100 #b1000101001110100000011110011101011101001001000010000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
