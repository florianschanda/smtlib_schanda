(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.196793746961062776534845397691242396831512451171875p-472 {- 886280245482686 -472 (-9.81435e-143)}
; Y = 1.847796924323420686420149650075472891330718994140625p760 {+ 3818137912468810 760 (1.1206e+229)}
; Z = -1.9539643971101086084019016197999007999897003173828125p478 {- 4296273703349805 478 (-1.52495e+144)}
; -1.196793746961062776534845397691242396831512451171875p-472 x 1.847796924323420686420149650075472891330718994140625p760 -1.9539643971101086084019016197999007999897003173828125p478 == -1.9539643971101086084019016197999007999897003173828125p478
; [HW: -1.9539643971101086084019016197999007999897003173828125p478] 

; mpf : - 4296273703349805 478
; mpfd: - 4296273703349805 478 (-1.52495e+144) class: Neg. norm. non-zero
; hwf : - 4296273703349805 478 (-1.52495e+144) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000100111 #b0011001001100001000100110011001101000001010010111110)))
(assert (= y (fp #b0 #b11011110111 #b1101100100001001001110000001111110011110010101001010)))
(assert (= z (fp #b1 #b10111011101 #b1111010000110111000000101011111100100010111000101101)))
(assert (= r (fp #b1 #b10111011101 #b1111010000110111000000101011111100100010111000101101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
