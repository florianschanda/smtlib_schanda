(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.987371988789595977920043878839351236820220947265625p-579 {+ 4446728120788890 -579 (1.00441e-174)}
; Y = -1.1152862876622087195954691196675412356853485107421875p347 {- 519203282156451 347 (-3.19738e+104)}
; Z = 1.8677264022526853803896074168733321130275726318359375p-18 {+ 3907892301844735 -18 (7.12481e-006)}
; 1.987371988789595977920043878839351236820220947265625p-579 x -1.1152862876622087195954691196675412356853485107421875p347 1.8677264022526853803896074168733321130275726318359375p-18 == 1.8677264022526853803896074168733321130275726318359375p-18
; [HW: 1.8677264022526853803896074168733321130275726318359375p-18] 

; mpf : + 3907892301844735 -18
; mpfd: + 3907892301844735 -18 (7.12481e-006) class: Pos. norm. non-zero
; hwf : + 3907892301844735 -18 (7.12481e-006) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111100 #b1111110011000100011010010010000011010110011110011010)))
(assert (= y (fp #b1 #b10101011010 #b0001110110000011011001101111001100101111101110100011)))
(assert (= z (fp #b0 #b01111101101 #b1101111000100011010100010100011110001101000011111111)))
(assert (= r (fp #b0 #b01111101101 #b1101111000100011010100010100011110001101000011111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
