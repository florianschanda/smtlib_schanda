(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8762240820194693302624955322244204580783843994140625p422 {- 3946162449275937 422 (-2.03209e+127)}
; Y = 1.9191931469273530996844101537135429680347442626953125p-307 {+ 4139677913983541 -307 (7.36055e-093)}
; Z = -1.677928793112084537852979337912984192371368408203125p-775 {- 3053119860043314 -775 (-8.44359e-234)}
; -1.8762240820194693302624955322244204580783843994140625p422 x 1.9191931469273530996844101537135429680347442626953125p-307 -1.677928793112084537852979337912984192371368408203125p-775 == -1.8004182001559148051939018841949291527271270751953125p116
; [HW: -1.8004182001559148051939018841949291527271270751953125p116] 

; mpf : - 3604763107962741 116
; mpfd: - 3604763107962741 116 (-1.49573e+035) class: Neg. norm. non-zero
; hwf : - 3604763107962741 116 (-1.49573e+035) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110100101 #b1110000001010000001110001011000000111101110000100001)))
(assert (= y (fp #b0 #b01011001100 #b1110101101010000001111011111100011000010101000110101)))
(assert (= z (fp #b1 #b00011111000 #b1010110110001100101111011100101101101110111000110010)))
(assert (= r (fp #b1 #b10001110011 #b1100110011101000001101010000100011001010111101110101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
