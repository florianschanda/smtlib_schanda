(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7335343944737615640150352191994898021221160888671875p-531 {+ 3303545225615475 -531 (2.46607e-160)}
; Y = 1.6003936474678728263398852504906244575977325439453125p238 {+ 2703932607011925 238 (7.06913e+071)}
; Z = 1.15667187352766376307044993154704570770263671875p-195 {+ 705587391238624 -195 (2.30336e-059)}
; 1.7335343944737615640150352191994898021221160888671875p-531 x 1.6003936474678728263398852504906244575977325439453125p238 1.15667187352766376307044993154704570770263671875p-195 == 1.1566718735276639851150548565783537924289703369140625p-195
; [HW: 1.1566718735276639851150548565783537924289703369140625p-195] 

; mpf : + 705587391238625 -195
; mpfd: + 705587391238625 -195 (2.30336e-059) class: Pos. norm. non-zero
; hwf : + 705587391238625 -195 (2.30336e-059) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111101100 #b1011101111001000111010001111101011000001100001110011)))
(assert (= y (fp #b0 #b10011101101 #b1001100110110011011001011110100010011001110001010101)))
(assert (= z (fp #b0 #b01100111100 #b0010100000011011101001011101110100000001000111100000)))
(assert (= r (fp #b0 #b01100111100 #b0010100000011011101001011101110100000001000111100001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
