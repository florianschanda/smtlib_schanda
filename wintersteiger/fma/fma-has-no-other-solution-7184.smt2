(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5213852679986927807220808972488157451152801513671875p964 {- 2348110498675379 964 (-2.37222e+290)}
; Y = -1.3530394614964194044404166561434976756572723388671875p-915 {- 1589948387242355 -915 (-4.885e-276)}
; Z = -1.77878337774209516197743141674436628818511962890625p682 {- 3507328529801636 682 (-3.56928e+205)}
; -1.5213852679986927807220808972488157451152801513671875p964 x -1.3530394614964194044404166561434976756572723388671875p-915 -1.77878337774209516197743141674436628818511962890625p682 == -1.7787833777420949399328264917130582034587860107421875p682
; [HW: -1.7787833777420949399328264917130582034587860107421875p682] 

; mpf : - 3507328529801635 682
; mpfd: - 3507328529801635 682 (-3.56928e+205) class: Neg. norm. non-zero
; hwf : - 3507328529801635 682 (-3.56928e+205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111000011 #b1000010101111001100000010100001010101011101010110011)))
(assert (= y (fp #b1 #b00001101100 #b0101101001100000110010110100110101010011000101110011)))
(assert (= z (fp #b1 #b11010101001 #b1100011101011110010110001111001000010010000110100100)))
(assert (= r (fp #b1 #b11010101001 #b1100011101011110010110001111001000010010000110100011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
