(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.218600801612262696238531134440563619136810302734375p818 {- 984490488683878 818 (-2.13009e+246)}
; Y = -1.6728235133685089852662031262298114597797393798828125p-588 {- 3030127724092525 -588 (-1.65125e-177)}
; Z = -1.707403507991023250411899425671435892581939697265625p-404 {- 3185862174988954 -404 (-4.13255e-122)}
; -1.218600801612262696238531134440563619136810302734375p818 x -1.6728235133685089852662031262298114597797393798828125p-588 -1.707403507991023250411899425671435892581939697265625p-404 == 1.0192520371733533313118869045865722000598907470703125p231
; [HW: 1.0192520371733533313118869045865722000598907470703125p231] 

; mpf : + 86703467440037 231
; mpfd: + 86703467440037 231 (3.51731e+069) class: Pos. norm. non-zero
; hwf : + 86703467440037 231 (3.51731e+069) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100110001 #b0011011111110110001110001101110111001101110101100110)))
(assert (= y (fp #b1 #b00110110011 #b1010110000111110001010010110100111100101110001101101)))
(assert (= z (fp #b1 #b01001101011 #b1011010100011000011001010111001111100101101010011010)))
(assert (= r (fp #b0 #b10011100110 #b0000010011101101101100111001011000001010011110100101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
