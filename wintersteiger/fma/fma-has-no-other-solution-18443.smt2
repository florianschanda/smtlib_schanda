(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7700774392675013846343290424556471407413482666015625p970 {+ 3468120468531545 970 (1.7664e+292)}
; Y = 1.1239938540307345959945450886152684688568115234375p-411 {+ 558418674809048 -411 (2.12538e-124)}
; Z = -1.7099269201940980877907350077293813228607177734375p-23 {- 3197226613246424 -23 (-2.03839e-007)}
; 1.7700774392675013846343290424556471407413482666015625p970 x 1.1239938540307345959945450886152684688568115234375p-411 -1.7099269201940980877907350077293813228607177734375p-23 == 1.9895561628951323740466250455938279628753662109375p559
; [HW: 1.9895561628951323740466250455938279628753662109375p559] 

; mpf : + 4456564766476696 559
; mpfd: + 4456564766476696 559 (3.75426e+168) class: Pos. norm. non-zero
; hwf : + 4456564766476696 559 (3.75426e+168) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111001001 #b1100010100100011110010111000100100001010100101011001)))
(assert (= y (fp #b0 #b01001100100 #b0001111110111110000011111010101111110111100011011000)))
(assert (= z (fp #b1 #b01111101000 #b1011010110111101110001010100100011001000100111011000)))
(assert (= r (fp #b0 #b11000101110 #b1111110101010011100011010111110100110000100110011000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
