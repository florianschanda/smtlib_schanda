(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.886452774152546307817601700662635266780853271484375p180 {+ 3992228383354950 180 (2.89098e+054)}
; Y = 1.692782811013820332135537682916037738323211669921875p251 {+ 3120016409530526 251 (6.12534e+075)}
; Z = 1.002617971878247971062592114321887493133544921875p-816 {+ 11790297175344 -816 (2.29435e-246)}
; 1.886452774152546307817601700662635266780853271484375p180 x 1.692782811013820332135537682916037738323211669921875p251 1.002617971878247971062592114321887493133544921875p-816 == 1.596677414937383243653812314732931554317474365234375p432
; [HW: 1.596677414937383243653812314732931554317474365234375p432] 

; mpf : + 2687196183572390 432
; mpfd: + 2687196183572390 432 (1.77082e+130) class: Pos. norm. non-zero
; hwf : + 2687196183572390 432 (1.77082e+130) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010110011 #b1110001011101110100100011010101001101111000001000110)))
(assert (= y (fp #b0 #b10011111010 #b1011000101011010001101101101110010001001000010011110)))
(assert (= z (fp #b0 #b00011001111 #b0000000010101011100100100100011110011001010100110000)))
(assert (= r (fp #b0 #b10110101111 #b1001100010111111110110011101111101101010111110100110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
