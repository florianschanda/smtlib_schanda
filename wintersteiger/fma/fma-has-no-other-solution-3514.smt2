(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.985448211128840956263275074888952076435089111328125p-926 {+ 4438064196432770 -926 (3.50012e-279)}
; Y = -1.8304983235302054733750765080912970006465911865234375p381 {- 3740231940382455 381 (-9.01566e+114)}
; Z = -1.6040064520128269887067062882124446332454681396484375p700 {- 2720203232214343 700 (-8.43729e+210)}
; 1.985448211128840956263275074888952076435089111328125p-926 x -1.8304983235302054733750765080912970006465911865234375p381 -1.6040064520128269887067062882124446332454681396484375p700 == -1.6040064520128269887067062882124446332454681396484375p700
; [HW: -1.6040064520128269887067062882124446332454681396484375p700] 

; mpf : - 2720203232214343 700
; mpfd: - 2720203232214343 700 (-8.43729e+210) class: Neg. norm. non-zero
; hwf : - 2720203232214343 700 (-8.43729e+210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001100001 #b1111110001000110010101010111111010110011001110000010)))
(assert (= y (fp #b1 #b10101111100 #b1101010010011011100010011100001011110001111011110111)))
(assert (= z (fp #b1 #b11010111011 #b1001101010100000001010101011010111110111110101000111)))
(assert (= r (fp #b1 #b11010111011 #b1001101010100000001010101011010111110111110101000111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
