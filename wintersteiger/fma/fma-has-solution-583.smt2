(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6638073700037783186900242071715183556079864501953125p-586 {- 2989522624194805 -586 (-6.5694e-177)}
; Y = -0.7085295051765270191168610836029984056949615478515625p-1022 {- 3190933215494009 -1023 (-1.57653e-308)}
; Z = 1.3633536234979641843523268107674084603786468505859375p603 {+ 1636399243389151 603 (4.52581e+181)}
; -1.6638073700037783186900242071715183556079864501953125p-586 x -0.7085295051765270191168610836029984056949615478515625p-1022 1.3633536234979641843523268107674084603786468505859375p603 == 1.3633536234979641843523268107674084603786468505859375p603
; [HW: 1.3633536234979641843523268107674084603786468505859375p603] 

; mpf : + 1636399243389151 603
; mpfd: + 1636399243389151 603 (4.52581e+181) class: Pos. norm. non-zero
; hwf : + 1636399243389151 603 (4.52581e+181) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110110101 #b1010100111101111010001111010000100000010100011110101)))
(assert (= y (fp #b1 #b00000000000 #b1011010101100010001100001000110011111011111101111001)))
(assert (= z (fp #b0 #b11001011010 #b0101110100000100101111100011100111001110100011011111)))
(assert (= r (fp #b0 #b11001011010 #b0101110100000100101111100011100111001110100011011111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
