(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.607734995889252171963335058535449206829071044921875p-760 {+ 2736995101026846 -760 (2.65105e-229)}
; Y = 1.5325252677783687271784174299682490527629852294921875p455 {+ 2398280597532035 455 (1.42579e+137)}
; Z = -1.546764204046237267675678594969213008880615234375p-60 {- 2462407065602160 -60 (-1.3416e-018)}
; 1.607734995889252171963335058535449206829071044921875p-760 x 1.5325252677783687271784174299682490527629852294921875p455 -1.546764204046237267675678594969213008880615234375p-60 == -1.5467642040462370456310736699379049241542816162109375p-60
; [HW: -1.5467642040462370456310736699379049241542816162109375p-60] 

; mpf : - 2462407065602159 -60
; mpfd: - 2462407065602159 -60 (-1.3416e-018) class: Neg. norm. non-zero
; hwf : - 2462407065602159 -60 (-1.3416e-018) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100000111 #b1001101110010100100001010100101111111010101000011110)))
(assert (= y (fp #b0 #b10111000110 #b1000100001010011100100110111000101100110110110000011)))
(assert (= z (fp #b1 #b01111000011 #b1000101111111000101111010010011100000000100001110000)))
(assert (= r (fp #b1 #b01111000011 #b1000101111111000101111010010011100000000100001101111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
