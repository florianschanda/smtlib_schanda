(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3285976970409303365983078037970699369907379150390625p-183 {- 1479872465948337 -183 (-1.08369e-055)}
; Y = -1.20743377041011523687075168709270656108856201171875p513 {- 934198651123052 513 (-3.23781e+154)}
; Z = 1.1573995455137711108051234987215138971805572509765625p-809 {+ 708864534524105 -809 (3.39013e-244)}
; -1.3285976970409303365983078037970699369907379150390625p-183 x -1.20743377041011523687075168709270656108856201171875p513 1.1573995455137711108051234987215138971805572509765625p-809 == 1.6041937266963264274721723268157802522182464599609375p330
; [HW: 1.6041937266963264274721723268157802522182464599609375p330] 

; mpf : + 2721046642409167 330
; mpfd: + 2721046642409167 330 (3.50877e+099) class: Pos. norm. non-zero
; hwf : + 2721046642409167 330 (3.50877e+099) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001000 #b0101010000011110111110101000101001010100111010110001)))
(assert (= y (fp #b1 #b11000000000 #b0011010100011010011000010010101111111111010101101100)))
(assert (= z (fp #b0 #b00011010110 #b0010100001001011010101100010110001100011000011001001)))
(assert (= r (fp #b0 #b10101001001 #b1001101010101100011100001010100010011011111011001111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
