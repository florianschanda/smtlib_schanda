(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3640522623428441573167901879060082137584686279296875p-17 {+ 1639545633030619 -17 (1.04069e-005)}
; Y = 1.76923102077722571578988208784721791744232177734375p-781 {+ 3464308538534140 -781 (1.3911e-235)}
; Z = -1.41864383172013841516445609158836305141448974609375p376 {- 1885404204535772 376 (-2.18349e+113)}
; 1.3640522623428441573167901879060082137584686279296875p-17 x 1.76923102077722571578988208784721791744232177734375p-781 -1.41864383172013841516445609158836305141448974609375p376 == -1.41864383172013841516445609158836305141448974609375p376
; [HW: -1.41864383172013841516445609158836305141448974609375p376] 

; mpf : - 1885404204535772 376
; mpfd: - 1885404204535772 376 (-2.18349e+113) class: Neg. norm. non-zero
; hwf : - 1885404204535772 376 (-2.18349e+113) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101110 #b0101110100110010100001110111000011001100000111011011)))
(assert (= y (fp #b0 #b00011110010 #b1100010011101100010100101111110101001110100011111100)))
(assert (= z (fp #b1 #b10101110111 #b0110101100101100001111011111110111101000111111011100)))
(assert (= r (fp #b1 #b10101110111 #b0110101100101100001111011111110111101000111111011100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
