(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8791017653913832941015016331220977008342742919921875p-790 {- 3959122383037379 -790 (-2.88572e-238)}
; Y = 1.3067769240291517984786651140893809497356414794921875p828 {+ 1381600440743555 828 (2.33904e+249)}
; Z = -1.247854966750862271140931625268422067165374755859375p1003 {- 1116239535901110 1003 (-1.06967e+302)}
; -1.8791017653913832941015016331220977008342742919921875p-790 x 1.3067769240291517984786651140893809497356414794921875p828 -1.247854966750862271140931625268422067165374755859375p1003 == -1.247854966750862271140931625268422067165374755859375p1003
; [HW: -1.247854966750862271140931625268422067165374755859375p1003] 

; mpf : - 1116239535901110 1003
; mpfd: - 1116239535901110 1003 (-1.06967e+302) class: Neg. norm. non-zero
; hwf : - 1116239535901110 1003 (-1.06967e+302) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011101001 #b1110000100001100110100000011010000110110001111000011)))
(assert (= y (fp #b0 #b11100111011 #b0100111010001000111011101011011111011111011010000011)))
(assert (= z (fp #b1 #b11111101010 #b0011111101110011011011000101000001011000100110110110)))
(assert (= r (fp #b1 #b11111101010 #b0011111101110011011011000101000001011000100110110110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
