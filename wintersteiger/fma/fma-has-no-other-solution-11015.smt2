(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8464424234261536117429614023421891033649444580078125p-255 {+ 3812037782732605 -255 (3.18924e-077)}
; Y = 1.7037133046397252567061286754324100911617279052734375p-324 {+ 3169242976551127 -324 (4.98515e-098)}
; Z = -1.6890396705443493363674178908695466816425323486328125p242 {- 3103158803507021 242 (-1.19371e+073)}
; 1.8464424234261536117429614023421891033649444580078125p-255 x 1.7037133046397252567061286754324100911617279052734375p-324 -1.6890396705443493363674178908695466816425323486328125p242 == -1.68903967054434911432281296583823859691619873046875p242
; [HW: -1.68903967054434911432281296583823859691619873046875p242] 

; mpf : - 3103158803507020 242
; mpfd: - 3103158803507020 242 (-1.19371e+073) class: Neg. norm. non-zero
; hwf : - 3103158803507020 242 (-1.19371e+073) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100000000 #b1101100010110000011100110101111010001111111100111101)))
(assert (= y (fp #b0 #b01010111011 #b1011010000100110100011100001110100110000000011010111)))
(assert (= z (fp #b1 #b10011110001 #b1011000001100100111001110110001010100010011101001101)))
(assert (= r (fp #b1 #b10011110001 #b1011000001100100111001110110001010100010011101001100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
