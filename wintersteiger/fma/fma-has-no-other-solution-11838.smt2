(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6907003101356588015136139802052639424800872802734375p258 {+ 3110637659351639 258 (7.83079e+077)}
; Y = 1.0116250521049614530255666977609507739543914794921875p-107 {+ 52354580328067 -107 (6.23462e-033)}
; Z = 1.029931420366748451300509259453974664211273193359375p-177 {+ 134799133610358 -177 (5.37649e-054)}
; 1.6907003101356588015136139802052639424800872802734375p258 x 1.0116250521049614530255666977609507739543914794921875p-107 1.029931420366748451300509259453974664211273193359375p-177 == 1.7103547893348605146712770874728448688983917236328125p151
; [HW: 1.7103547893348605146712770874728448688983917236328125p151] 

; mpf : + 3199153564549325 151
; mpfd: + 3199153564549325 151 (4.8822e+045) class: Pos. norm. non-zero
; hwf : + 3199153564549325 151 (4.8822e+045) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000001 #b1011000011010001101111000100101101011110101001010111)))
(assert (= y (fp #b0 #b01110010100 #b0000001011111001110111000000001010011010111010000011)))
(assert (= z (fp #b0 #b01101001110 #b0000011110101001100101011110011110011001000101110110)))
(assert (= r (fp #b0 #b10010010110 #b1011010111011001110011111011110011000000000011001101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
