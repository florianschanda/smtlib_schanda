(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.963350644240817732821824392885901033878326416015625p-951 {+ 4338545602430074 -951 (1.03151e-286)}
; Y = -1.6446163741139339098396021654480136930942535400390625p-405 {- 2903094062256433 -405 (-1.99029e-122)}
; Z = -1.9934570895976893023515685854363255202770233154296875p277 {- 4474132978520731 277 (-4.84078e+083)}
; 1.963350644240817732821824392885901033878326416015625p-951 x -1.6446163741139339098396021654480136930942535400390625p-405 -1.9934570895976893023515685854363255202770233154296875p277 == -1.9934570895976893023515685854363255202770233154296875p277
; [HW: -1.9934570895976893023515685854363255202770233154296875p277] 

; mpf : - 4474132978520731 277
; mpfd: - 4474132978520731 277 (-4.84078e+083) class: Neg. norm. non-zero
; hwf : - 4474132978520731 277 (-4.84078e+083) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001001000 #b1111011010011110001001011101011110011000010001111010)))
(assert (= y (fp #b1 #b01001101010 #b1010010100000101100101000010010101001001000100110001)))
(assert (= z (fp #b1 #b10100010100 #b1111111001010011001101000010110111001101001010011011)))
(assert (= r (fp #b1 #b10100010100 #b1111111001010011001101000010110111001101001010011011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
