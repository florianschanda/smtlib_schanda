(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2578968590305790176131495172739960253238677978515625p-358 {- 1161464198230137 -358 (-2.14243e-108)}
; Y = 1.3266628764352399461046161377453245222568511962890625p-932 {+ 1471158808589521 -932 (3.6543e-281)}
; Z = 1.5709707766914433602067902029375545680522918701171875p-413 {+ 2571423777147027 -413 (7.42643e-125)}
; -1.2578968590305790176131495172739960253238677978515625p-358 x 1.3266628764352399461046161377453245222568511962890625p-932 1.5709707766914433602067902029375545680522918701171875p-413 == 1.570970776691443138162185277906246483325958251953125p-413
; [HW: 1.570970776691443138162185277906246483325958251953125p-413] 

; mpf : + 2571423777147026 -413
; mpfd: + 2571423777147026 -413 (7.42643e-125) class: Pos. norm. non-zero
; hwf : + 2571423777147026 -413 (7.42643e-125) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010011001 #b0100001000000101100001110100111101000111000001111001)))
(assert (= y (fp #b0 #b00001011011 #b0101001110100000001011011010001100011011010011010001)))
(assert (= z (fp #b0 #b01001100010 #b1001001000101011001001000000110011011100100010010011)))
(assert (= r (fp #b0 #b01001100010 #b1001001000101011001001000000110011011100100010010010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
