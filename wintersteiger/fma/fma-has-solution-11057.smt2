(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.29625459971111656187758853775449097156524658203125p16 {+ 1334212104865780 16 (84951.3)}
; Y = 1.837738520643313666624862889875657856464385986328125p-170 {+ 3772838889403138 -170 (1.22796e-051)}
; Z = -1.480403597283736605305648481589742004871368408203125p-769 {- 2163545461714482 -769 (-4.76775e-232)}
; 1.29625459971111656187758853775449097156524658203125p16 x 1.837738520643313666624862889875657856464385986328125p-170 -1.480403597283736605305648481589742004871368408203125p-769 == 1.191088505225099236639607624965719878673553466796875p-153
; [HW: 1.191088505225099236639607624965719878673553466796875p-153] 

; mpf : + 860586120926542 -153
; mpfd: + 860586120926542 -153 (1.04317e-046) class: Pos. norm. non-zero
; hwf : + 860586120926542 -153 (1.04317e-046) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000001111 #b0100101111010111010101110110100100001100011111110100)))
(assert (= y (fp #b0 #b01101010101 #b1101011001110110000010000001110011000011001100000010)))
(assert (= z (fp #b1 #b00011111110 #b0111101011111011101110101110101100110110111000110010)))
(assert (= r (fp #b0 #b01101100110 #b0011000011101011001011010010000010010101010101001110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
