(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.67370831309211443027606946998275816440582275390625p-21 {+ 3034112507798052 -21 (7.98086e-007)}
; Y = 1.4056424982899045073025945384870283305644989013671875p120 {+ 1826851404144051 120 (1.86842e+036)}
; Z = -1.772028843853159063570501530193723738193511962890625p-155 {- 3476908813496362 -155 (-3.87991e-047)}
; 1.67370831309211443027606946998275816440582275390625p-21 x 1.4056424982899045073025945384870283305644989013671875p120 -1.772028843853159063570501530193723738193511962890625p-155 == 1.1763177673116909094375159838818944990634918212890625p100
; [HW: 1.1763177673116909094375159838818944990634918212890625p100] 

; mpf : + 794064631163729 100
; mpfd: + 794064631163729 100 (1.49116e+030) class: Pos. norm. non-zero
; hwf : + 794064631163729 100 (1.49116e+030) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101010 #b1010110001111000001001011110001111000110001000100100)))
(assert (= y (fp #b0 #b10001110111 #b0110011111011000001011111101000000000101110110110011)))
(assert (= z (fp #b1 #b01101100100 #b1100010110100011101011101010101111101011000000101010)))
(assert (= r (fp #b0 #b10001100011 #b0010110100100011001010010100010001001110101101010001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
