(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0343301305259824385274214364471845328807830810546875p815 {+ 154609163044395 815 (2.25999e+245)}
; Y = -1.4832571278160913141874743814696557819843292236328125p782 {- 2176396620756685 782 (-3.77288e+235)}
; Z = 1.218863372854993354366115454467944800853729248046875p-849 {+ 985673004434798 -849 (3.24705e-256)}
; 1.0343301305259824385274214364471845328807830810546875p815 x -1.4832571278160913141874743814696557819843292236328125p782 1.218863372854993354366115454467944800853729248046875p-849 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100101110 #b0000100011001001110111000000001111100000011000101011)))
(assert (= y (fp #b1 #b11100001101 #b0111101110110110101111010011011110000111011011001101)))
(assert (= z (fp #b0 #b00010101110 #b0011100000000111011011100001010010110100010101101110)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
