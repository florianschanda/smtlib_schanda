(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.61454052196862729573467731825076043605804443359375p-114 {+ 2767644465741980 -114 (7.77373e-035)}
; Y = -1.418491603191846639475670599495060741901397705078125p597 {- 1884718628192482 597 (-7.35757e+179)}
; Z = -1.27138623025039354530463242554105818271636962890625p176 {- 1222214925429156 176 (-1.21775e+053)}
; 1.61454052196862729573467731825076043605804443359375p-114 x -1.418491603191846639475670599495060741901397705078125p597 -1.27138623025039354530463242554105818271636962890625p176 == -1.14510608671273939052071000332944095134735107421875p484
; [HW: -1.14510608671273939052071000332944095134735107421875p484] 

; mpf : - 653499718048684 484
; mpfd: - 653499718048684 484 (-5.71957e+145) class: Neg. norm. non-zero
; hwf : - 653499718048684 484 (-5.71957e+145) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110001101 #b1001110101010010100001110001001111101100000010011100)))
(assert (= y (fp #b1 #b11001010100 #b0110101100100010010001000000010101011100000011100010)))
(assert (= z (fp #b1 #b10010101111 #b0100010101111001100100010110011110000010100110100100)))
(assert (= r (fp #b1 #b10111100011 #b0010010100100101101011000010100011100001101110101100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
