(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8670403680952734060127795601147226989269256591796875p-91 {+ 3904802678669051 -91 (7.54092e-028)}
; Y = -1.8440099150934627925124686953495256602764129638671875p-308 {- 3801082739111923 -308 (-3.5361e-093)}
; Z = 1.041390131396551677056550033739767968654632568359375p-400 {+ 186404580334326 -400 (4.03288e-121)}
; 1.8670403680952734060127795601147226989269256591796875p-91 x -1.8440099150934627925124686953495256602764129638671875p-308 1.041390131396551677056550033739767968654632568359375p-400 == -1.461072942474578528759820983395911753177642822265625p-398
; [HW: -1.461072942474578528759820983395911753177642822265625p-398] 

; mpf : - 2076487931919130 -398
; mpfd: - 2076487931919130 -398 (-2.26326e-120) class: Neg. norm. non-zero
; hwf : - 2076487931919130 -398 (-2.26326e-120) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110100100 #b1101110111110110010110111000100101000111111011111011)))
(assert (= y (fp #b1 #b01011001011 #b1101100000010001000010001010011011010011011111110011)))
(assert (= z (fp #b0 #b01001101111 #b0000101010011000100010110010110010111001101011110110)))
(assert (= r (fp #b1 #b01001110001 #b0111011000001000111000000101100011111111101100011010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
