(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -0.6401119183258854317131181232980452477931976318359375p-1022 {- 2882807796847871 -1023 (-1.4243e-308)}
; Y = -1.811856747750471452462761590140871703624725341796875p509 {- 3656277746647246 509 (-3.03663e+153)}
; Z = 1.5450976922904808841252588536008261144161224365234375p-211 {+ 2454901763879927 -211 (4.69491e-064)}
; -0.6401119183258854317131181232980452477931976318359375p-1022 x -1.811856747750471452462761590140871703624725341796875p509 1.5450976922904808841252588536008261144161224365234375p-211 == 1.5450976922904808841252588536008261144161224365234375p-211
; [HW: 1.5450976922904808841252588536008261144161224365234375p-211] 

; mpf : + 2454901763879927 -211
; mpfd: + 2454901763879927 -211 (4.69491e-064) class: Pos. norm. non-zero
; hwf : + 2454901763879927 -211 (4.69491e-064) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1010001111011110010111111110101011111101010011111111)))
(assert (= y (fp #b1 #b10111111100 #b1100111111010101110110000000010010100000000011001110)))
(assert (= z (fp #b0 #b01100101100 #b1000101110001011100001011011100110000011001111110111)))
(assert (= r (fp #b0 #b01100101100 #b1000101110001011100001011011100110000011001111110111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
