(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0091038094717530437804953180602751672267913818359375p276 {+ 40999912944639 276 (1.22522e+083)}
; Y = 1.6925153665866774499448865753947757184505462646484375p-542 {+ 3118811946908103 -542 (1.17564e-163)}
; Z = 1.6752031015802024693783778275246731936931610107421875p678 {+ 3040844436676003 678 (2.1009e+204)}
; 1.0091038094717530437804953180602751672267913818359375p276 x 1.6925153665866774499448865753947757184505462646484375p-542 1.6752031015802024693783778275246731936931610107421875p678 == 1.6752031015802024693783778275246731936931610107421875p678
; [HW: 1.6752031015802024693783778275246731936931610107421875p678] 

; mpf : + 3040844436676003 678
; mpfd: + 3040844436676003 678 (2.1009e+204) class: Pos. norm. non-zero
; hwf : + 3040844436676003 678 (2.1009e+204) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100010011 #b0000001001010100101000001001001111110011001111111111)))
(assert (= y (fp #b0 #b00111100001 #b1011000101001000101011111110001101110111100111000111)))
(assert (= z (fp #b0 #b11010100101 #b1010110011011010000111000100011101110001110110100011)))
(assert (= r (fp #b0 #b11010100101 #b1010110011011010000111000100011101110001110110100011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
