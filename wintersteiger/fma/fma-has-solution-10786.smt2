(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1848580210805483847735786184784956276416778564453125p-480 {- 832526514854805 -480 (-3.79549e-145)}
; Y = -1.2067544677127626240320523720583878457546234130859375p-826 {- 931139343748383 -826 (-2.69676e-249)}
; Z = -1.763973859138979971561411730363033711910247802734375p188 {- 3440632387339110 188 (-6.9204e+056)}
; -1.1848580210805483847735786184784956276416778564453125p-480 x -1.2067544677127626240320523720583878457546234130859375p-826 -1.763973859138979971561411730363033711910247802734375p188 == -1.763973859138979971561411730363033711910247802734375p188
; [HW: -1.763973859138979971561411730363033711910247802734375p188] 

; mpf : - 3440632387339110 188
; mpfd: - 3440632387339110 188 (-6.9204e+056) class: Neg. norm. non-zero
; hwf : - 3440632387339110 188 (-6.9204e+056) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000011111 #b0010111101010010110110101111001011110001101110010101)))
(assert (= y (fp #b1 #b00011000101 #b0011010011101101110111000101110100100000110100011111)))
(assert (= z (fp #b1 #b10010111011 #b1100001110010011110010100111010000000000001101100110)))
(assert (= r (fp #b1 #b10010111011 #b1100001110010011110010100111010000000000001101100110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
