(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -0.6209749871632386231112832319922745227813720703125p-1022 {- 2796622720794760 -1023 (-1.38172e-308)}
; Y = -1.2948794612570699857911904473439790308475494384765625p-82 {- 1328019031836553 -82 (-2.67775e-025)}
; Z = 1.7376130447596673800347844007774256169795989990234375p300 {+ 3321913833523255 300 (3.53958e+090)}
; -0.6209749871632386231112832319922745227813720703125p-1022 x -1.2948794612570699857911904473439790308475494384765625p-82 1.7376130447596673800347844007774256169795989990234375p300 == 1.7376130447596676020793893258087337017059326171875p300
; [HW: 1.7376130447596676020793893258087337017059326171875p300] 

; mpf : + 3321913833523256 300
; mpfd: + 3321913833523256 300 (3.53958e+090) class: Pos. norm. non-zero
; hwf : + 3321913833523256 300 (3.53958e+090) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1001111011111000001101110111110110000000000010001000)))
(assert (= y (fp #b1 #b01110101101 #b0100101101111101001110000110101001011100011110001001)))
(assert (= z (fp #b0 #b10100101011 #b1011110011010100001101010110000001011000100000110111)))
(assert (= r (fp #b0 #b10100101011 #b1011110011010100001101010110000001011000100000111000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
