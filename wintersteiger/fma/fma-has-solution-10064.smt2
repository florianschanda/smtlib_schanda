(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.466201323642413623105085207498632371425628662109375p-537 {+ 2099584107435606 -537 (3.25901e-162)}
; Y = -1.494544644866181659637049961020238697528839111328125p297 {- 2227231078337410 297 (-3.80555e+089)}
; Z = 1.4869896327907115018973627229570411145687103271484375p-111 {+ 2193206328769543 -111 (5.72768e-034)}
; 1.466201323642413623105085207498632371425628662109375p-537 x -1.494544644866181659637049961020238697528839111328125p297 1.4869896327907115018973627229570411145687103271484375p-111 == 1.4869896327907115018973627229570411145687103271484375p-111
; [HW: 1.4869896327907115018973627229570411145687103271484375p-111] 

; mpf : + 2193206328769543 -111
; mpfd: + 2193206328769543 -111 (5.72768e-034) class: Pos. norm. non-zero
; hwf : + 2193206328769543 -111 (5.72768e-034) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111100110 #b0111011101011000111110000100111001100101011001010110)))
(assert (= y (fp #b1 #b10100101000 #b0111111010011010011110100101010000011100101110000010)))
(assert (= z (fp #b0 #b01110010000 #b0111110010101011010110100100001001010011110000000111)))
(assert (= r (fp #b0 #b01110010000 #b0111110010101011010110100100001001010011110000000111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
