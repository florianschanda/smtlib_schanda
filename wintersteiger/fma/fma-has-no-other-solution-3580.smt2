(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1874543866141553660753515941905789077281951904296875p-327 {+ 844219505704475 -327 (4.34319e-099)}
; Y = 1.1472185543024957521396345327957533299922943115234375p-987 {+ 663013426298743 -987 (8.77082e-298)}
; Z = 1.9143760515046952530582302642869763076305389404296875p-831 {+ 4117983644833051 -831 (1.33691e-250)}
; 1.1874543866141553660753515941905789077281951904296875p-327 x 1.1472185543024957521396345327957533299922943115234375p-987 1.9143760515046952530582302642869763076305389404296875p-831 == 1.91437605150469547510283518931828439235687255859375p-831
; [HW: 1.91437605150469547510283518931828439235687255859375p-831] 

; mpf : + 4117983644833052 -831
; mpfd: + 4117983644833052 -831 (1.33691e-250) class: Pos. norm. non-zero
; hwf : + 4117983644833052 -831 (1.33691e-250) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010111000 #b0010111111111101000000101011101111111111111000011011)))
(assert (= y (fp #b0 #b00000100100 #b0010010110110000000111010111110000010111111101110111)))
(assert (= z (fp #b0 #b00011000000 #b1110101000010100100011001000010101110101010100011011)))
(assert (= r (fp #b0 #b00011000000 #b1110101000010100100011001000010101110101010100011100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
