(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.42713825577390007737221822026185691356658935546875p372 {- 1923659689539020 372 (-1.37285e+112)}
; Y = 1.4847103778960544229192919374327175319194793701171875p971 {+ 2182941477275283 971 (2.96324e+292)}
; Z = 1.1797635078745312142700640833936631679534912109375p-392 {+ 809582867078552 -392 (1.1696e-118)}
; -1.42713825577390007737221822026185691356658935546875p372 x 1.4847103778960544229192919374327175319194793701171875p971 1.1797635078745312142700640833936631679534912109375p-392 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101110011 #b0110110101011000111011101100011101101011010111001100)))
(assert (= y (fp #b0 #b11111001010 #b0111110000010101111110101011010100011000011010010011)))
(assert (= z (fp #b0 #b01001110111 #b0010111000000100111110110011001101010101110110011000)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
