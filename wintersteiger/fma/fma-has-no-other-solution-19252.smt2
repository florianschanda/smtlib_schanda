(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.338781307235334505634227753034792840480804443359375p658 {- 1525735369025142 658 (-1.6012e+198)}
; Y = -1.4070070398172715986362391049624420702457427978515625p-594 {- 1832996752858233 -594 (-2.1701e-179)}
; Z = 1.235164486047162224480189252062700688838958740234375p40 {+ 1059086691732774 40 (1.35808e+012)}
; -1.338781307235334505634227753034792840480804443359375p658 x -1.4070070398172715986362391049624420702457427978515625p-594 1.235164486047162224480189252062700688838958740234375p40 == 1.8836747976774257384846578133874572813510894775390625p64
; [HW: 1.8836747976774257384846578133874572813510894775390625p64] 

; mpf : + 3979717489536753 64
; mpfd: + 3979717489536753 64 (3.47477e+019) class: Pos. norm. non-zero
; hwf : + 3979717489536753 64 (3.47477e+019) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010010001 #b0101011010111010010111110010101100010010011001110110)))
(assert (= y (fp #b1 #b00110101101 #b0110100000110001100111010000010101000001110001111001)))
(assert (= z (fp #b0 #b10000100111 #b0011110000110011101111010110000011000000110100100110)))
(assert (= r (fp #b0 #b10000111111 #b1110001000111000100000101111010001010010111011110001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
