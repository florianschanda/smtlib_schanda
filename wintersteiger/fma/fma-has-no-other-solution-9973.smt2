(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.075051026931853836998698170646093785762786865234375p-493 {- 337999776924070 -493 (-4.20379e-149)}
; Y = -1.7232675505489092326882882844074629247188568115234375p1022 {- 3257307471141239 1022 (-7.74477e+307)}
; Z = -1.912497094108617456953425062238238751888275146484375p-846 {- 4109521573004230 -846 (-4.07591e-255)}
; -1.075051026931853836998698170646093785762786865234375p-493 x -1.7232675505489092326882882844074629247188568115234375p1022 -1.912497094108617456953425062238238751888275146484375p-846 == 1.852600549895945025724586230353452265262603759765625p529
; [HW: 1.852600549895945025724586230353452265262603759765625p529] 

; mpf : + 3839771518807258 529
; mpfd: + 3839771518807258 529 (3.25574e+159) class: Pos. norm. non-zero
; hwf : + 3839771518807258 529 (3.25574e+159) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010010 #b0001001100110110100010110100101000110100000110100110)))
(assert (= y (fp #b1 #b11111111101 #b1011100100101000000011111110101111011101100101110111)))
(assert (= z (fp #b1 #b00010110001 #b1110100110011001011010001101100011100100001111000110)))
(assert (= r (fp #b0 #b11000010000 #b1101101001000100000001111001011001011010110011011010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
