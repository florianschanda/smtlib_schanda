(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.462160206449072408219080898561514914035797119140625p45 {- 2081384533549514 45 (-5.14452e+013)}
; Y = -1.0459993311344149002906078749219886958599090576171875p949 {- 207162570556243 949 (-4.97734e+285)}
; Z = 1.2600341252265201408278016970143653452396392822265625p411 {+ 1171089589473769 411 (6.66362e+123)}
; -1.462160206449072408219080898561514914035797119140625p45 x -1.0459993311344149002906078749219886958599090576171875p949 1.2600341252265201408278016970143653452396392822265625p411 == 1.5294185979570877886857260818942449986934661865234375p994
; [HW: 1.5294185979570877886857260818942449986934661865234375p994] 

; mpf : + 2384289400482551 994
; mpfd: + 2384289400482551 994 (2.5606e+299) class: Pos. norm. non-zero
; hwf : + 2384289400482551 994 (2.5606e+299) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000101100 #b0111011001010000001000011001110000110110000111001010)))
(assert (= y (fp #b1 #b11110110100 #b0000101111000110100111001011011011011100001101010011)))
(assert (= z (fp #b0 #b10110011010 #b0100001010010001100110001010111110110001000111101001)))
(assert (= r (fp #b0 #b11111100001 #b1000011110000111111110100010110000011110101011110111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
