(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9492941667360133006781097719795070588588714599609375p713 {- 4275240855577295 713 (-8.39971e+214)}
; Y = -1.687078875241134756635119629208929836750030517578125p-892 {- 3094328166510114 -892 (-5.10951e-269)}
; Z = -1.1476831778780571813314281826023943722248077392578125p-750 {- 665105904860509 -750 (-1.93787e-226)}
; -1.9492941667360133006781097719795070588588714599609375p713 x -1.687078875241134756635119629208929836750030517578125p-892 -1.1476831778780571813314281826023943722248077392578125p-750 == 1.644306505165549214808606848237104713916778564453125p-178
; [HW: 1.644306505165549214808606848237104713916778564453125p-178] 

; mpf : + 2901698536575954 -178
; mpfd: + 2901698536575954 -178 (4.29184e-054) class: Pos. norm. non-zero
; hwf : + 2901698536575954 -178 (4.29184e-054) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011001000 #b1111001100000100111100010100100001101010001011001111)))
(assert (= y (fp #b1 #b00010000011 #b1010111111100100011001101011001011101110111000100010)))
(assert (= z (fp #b1 #b00100010001 #b0010010111001110100100001001001100100111110101011101)))
(assert (= r (fp #b0 #b01101001101 #b1010010011110001010001010110100001001001001111010010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
