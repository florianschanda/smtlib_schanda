(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3495609600310756182039995110244490206241607666015625p-625 {+ 1574282609339225 -625 (9.69271e-189)}
; Y = 1.55031431731097502080274352920241653919219970703125p-713 {+ 2478395354378356 -713 (3.59777e-215)}
; Z = 1.654773871575395016719767227186821401119232177734375p-839 {+ 2948839364038886 -839 (4.51411e-253)}
; 1.3495609600310756182039995110244490206241607666015625p-625 x 1.55031431731097502080274352920241653919219970703125p-713 1.654773871575395016719767227186821401119232177734375p-839 == 1.654773871575395016719767227186821401119232177734375p-839
; [HW: 1.654773871575395016719767227186821401119232177734375p-839] 

; mpf : + 2948839364038886 -839
; mpfd: + 2948839364038886 -839 (4.51411e-253) class: Pos. norm. non-zero
; hwf : + 2948839364038886 -839 (4.51411e-253) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110001110 #b0101100101111100110100111011101101001010101101011001)))
(assert (= y (fp #b0 #b00100110110 #b1000110011100001011001100010101101011111000001110100)))
(assert (= z (fp #b0 #b00010111000 #b1010011110011111010000101010110010110001000011100110)))
(assert (= r (fp #b0 #b00010111000 #b1010011110011111010000101010110010110001000011100110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
