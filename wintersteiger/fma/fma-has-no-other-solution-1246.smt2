(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5573916373792859868530058520263992249965667724609375p-945 {- 2510268770400783 -945 (-5.23663e-285)}
; Y = 1.1496689961035315707960080544580705463886260986328125p-833 {+ 674049235080781 -833 (2.00718e-251)}
; Z = -1.1778143153285014488318438452552072703838348388671875p463 {- 800804484254579 463 (-2.80521e+139)}
; -1.5573916373792859868530058520263992249965667724609375p-945 x 1.1496689961035315707960080544580705463886260986328125p-833 -1.1778143153285014488318438452552072703838348388671875p463 == -1.1778143153285014488318438452552072703838348388671875p463
; [HW: -1.1778143153285014488318438452552072703838348388671875p463] 

; mpf : - 800804484254579 463
; mpfd: - 800804484254579 463 (-2.80521e+139) class: Neg. norm. non-zero
; hwf : - 800804484254579 463 (-2.80521e+139) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001110 #b1000111010110001001101111110010110011011101000001111)))
(assert (= y (fp #b0 #b00010111110 #b0010011001010000101101010001001101111101011001001101)))
(assert (= z (fp #b1 #b10111001110 #b0010110110000101001111010010110100011000101101110011)))
(assert (= r (fp #b1 #b10111001110 #b0010110110000101001111010010110100011000101101110011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
