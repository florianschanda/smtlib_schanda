(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9745668930763502491032568286755122244358062744140625p714 {+ 4389059096506273 714 (1.70172e+215)}
; Y = 1.95910430655313216874446879955939948558807373046875p-534 {+ 4319421797602124 -534 (3.48369e-161)}
; Z = -1.2481776967187945270865156999207101762294769287109375p-463 {- 1117692982464431 -463 (-5.24069e-140)}
; 1.9745668930763502491032568286755122244358062744140625p714 x 1.95910430655313216874446879955939948558807373046875p-534 -1.2481776967187945270865156999207101762294769287109375p-463 == 1.934191251901558050718676895485259592533111572265625p181
; [HW: 1.934191251901558050718676895485259592533111572265625p181] 

; mpf : + 4207223373956634 181
; mpfd: + 4207223373956634 181 (5.92828e+054) class: Pos. norm. non-zero
; hwf : + 4207223373956634 181 (5.92828e+054) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011001001 #b1111100101111101001101110100010110000110111110100001)))
(assert (= y (fp #b0 #b00111101001 #b1111010110000111110111000001111000011001001101001100)))
(assert (= z (fp #b1 #b01000110000 #b0011111110001000100100101101001100000000111110101111)))
(assert (= r (fp #b0 #b10010110100 #b1110111100100111001010000110101100100000011000011010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
