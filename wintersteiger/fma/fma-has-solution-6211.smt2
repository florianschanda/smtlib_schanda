(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.768845863176325305943237253814004361629486083984375p638 {+ 3462573942906246 638 (2.01756e+192)}
; Y = 1.88960964073574277932721088291145861148834228515625p775 {+ 4006445646522692 775 (3.75508e+233)}
; Z = -1.361271221859100766238270807662047445774078369140625p-973 {- 1627020940144330 -973 (-1.70514e-293)}
; 1.768845863176325305943237253814004361629486083984375p638 x 1.88960964073574277932721088291145861148834228515625p775 -1.361271221859100766238270807662047445774078369140625p-973 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001111101 #b1100010011010011000101010001111000000001110110000110)))
(assert (= y (fp #b0 #b11100000110 #b1110001110111101011101010001100100101010100101000100)))
(assert (= z (fp #b1 #b00000110010 #b0101110001111100010001010101001011011110111011001010)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
