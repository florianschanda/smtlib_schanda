(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5662878020757997621359436379862017929553985595703125p-145 {+ 2550333534413029 -145 (3.51174e-044)}
; Y = -1.8027618756707541880501821651705540716648101806640625p47 {- 3615318084138049 47 (-2.53716e+014)}
; Z = -1.7812815454368851053601474632159806787967681884765625p795 {- 3518579276901001 795 (-3.71175e+239)}
; 1.5662878020757997621359436379862017929553985595703125p-145 x -1.8027618756707541880501821651705540716648101806640625p47 -1.7812815454368851053601474632159806787967681884765625p795 == -1.781281545436885327404752388247288763523101806640625p795
; [HW: -1.781281545436885327404752388247288763523101806640625p795] 

; mpf : - 3518579276901002 795
; mpfd: - 3518579276901002 795 (-3.71175e+239) class: Neg. norm. non-zero
; hwf : - 3518579276901002 795 (-3.71175e+239) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101101110 #b1001000011111000001111001100011000001010000011100101)))
(assert (= y (fp #b1 #b10000101110 #b1100110110000001110011010110001001111011010001000001)))
(assert (= z (fp #b1 #b11100011010 #b1100100000000010000100010011111010011110101010001001)))
(assert (= r (fp #b1 #b11100011010 #b1100100000000010000100010011111010011110101010001010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
