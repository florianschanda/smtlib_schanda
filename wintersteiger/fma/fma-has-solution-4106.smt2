(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.48407338594777371554300771094858646392822265625p277 {+ 2180072720574368 277 (3.60383e+083)}
; Y = 1.2368223347561408953509953789762221276760101318359375p380 {+ 1066552978560767 380 (3.04583e+114)}
; Z = 1.184434137885329807460266238194890320301055908203125p946 {+ 830617514654770 946 (7.04509e+284)}
; 1.48407338594777371554300771094858646392822265625p277 x 1.2368223347561408953509953789762221276760101318359375p380 1.184434137885329807460266238194890320301055908203125p946 == 1.184434137885329807460266238194890320301055908203125p946
; [HW: 1.184434137885329807460266238194890320301055908203125p946] 

; mpf : + 830617514654770 946
; mpfd: + 830617514654770 946 (7.04509e+284) class: Pos. norm. non-zero
; hwf : + 830617514654770 946 (7.04509e+284) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100010100 #b0111101111101100001110111100000110000010011110100000)))
(assert (= y (fp #b0 #b10101111011 #b0011110010100000011000110111011010111101011011111111)))
(assert (= z (fp #b0 #b11110110001 #b0010111100110111000100110101111001111011110000110010)))
(assert (= r (fp #b0 #b11110110001 #b0010111100110111000100110101111001111011110000110010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
