(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.825495813437322478733904063119553029537200927734375p140 {+ 3717702637792230 140 (2.54437e+042)}
; Y = -1.3259526437207991289568553838762454688549041748046875p-463 {- 1467960204801419 -463 (-5.56724e-140)}
; Z = -1.9345508977914873671721807113499380648136138916015625p-495 {- 4208843075052505 -495 (-1.89118e-149)}
; 1.825495813437322478733904063119553029537200927734375p140 x -1.3259526437207991289568553838762454688549041748046875p-463 -1.9345508977914873671721807113499380648136138916015625p-495 == -1.2102604999642341265797540472703985869884490966796875p-322
; [HW: -1.2102604999642341265797540472703985869884490966796875p-322] 

; mpf : - 946929109289659 -322
; mpfd: - 946929109289659 -322 (-1.41651e-097) class: Neg. norm. non-zero
; hwf : - 946929109289659 -322 (-1.41651e-097) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010001011 #b1101001101010011101100011001000110110010101111100110)))
(assert (= y (fp #b1 #b01000110000 #b0101001101110001101000011110100011010011010110001011)))
(assert (= z (fp #b1 #b01000010000 #b1110111100111110101110100100011001110110001111011001)))
(assert (= r (fp #b1 #b01010111101 #b0011010111010011101000011101001011111100101010111011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
