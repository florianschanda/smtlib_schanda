(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0011970772701488385791890323162078857421875p-599 {- 5391156747776 -599 (-4.82561e-181)}
; Y = 1.623109075197987305472224761615507304668426513671875p-330 {+ 2806233798872830 -330 (7.42077e-100)}
; Z = 1.073848462656210589472038918756879866123199462890625p333 {+ 332583908900394 333 (1.87902e+100)}
; -1.0011970772701488385791890323162078857421875p-599 x 1.623109075197987305472224761615507304668426513671875p-330 1.073848462656210589472038918756879866123199462890625p333 == 1.0738484626562103674274339937255717813968658447265625p333
; [HW: 1.0738484626562103674274339937255717813968658447265625p333] 

; mpf : + 332583908900393 333
; mpfd: + 332583908900393 333 (1.87902e+100) class: Pos. norm. non-zero
; hwf : + 332583908900393 333 (1.87902e+100) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110101000 #b0000000001001110011100111001111110111001111000000000)))
(assert (= y (fp #b0 #b01010110101 #b1001111110000100000100111000101111010000111011111110)))
(assert (= z (fp #b0 #b10101001100 #b0001001011100111101110111001101111110111111000101010)))
(assert (= r (fp #b0 #b10101001100 #b0001001011100111101110111001101111110111111000101001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
