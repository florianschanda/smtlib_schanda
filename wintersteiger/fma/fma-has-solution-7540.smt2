(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7417294296118097651770995071274228394031524658203125p-61 {- 3340452382809477 -61 (-7.55355e-019)}
; Y = -1.7011444532220199032934715432929806411266326904296875p637 {- 3157673898263579 637 (-9.70171e+191)}
; Z = 1.902184762371771142852594493888318538665771484375p-39 {+ 4063078959636848 -39 (3.46005e-012)}
; -1.7417294296118097651770995071274228394031524658203125p-61 x -1.7011444532220199032934715432929806411266326904296875p637 1.902184762371771142852594493888318538665771484375p-39 == 1.4814666790988415545626821767655201256275177001953125p577
; [HW: 1.4814666790988415545626821767655201256275177001953125p577] 

; mpf : + 2168333156580853 577
; mpfd: + 2168333156580853 577 (7.32823e+173) class: Pos. norm. non-zero
; hwf : + 2168333156580853 577 (7.32823e+173) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111000010 #b1011110111100001111110101101101010101001110110000101)))
(assert (= y (fp #b1 #b11001111100 #b1011001101111110001100111111000001011100010000011011)))
(assert (= z (fp #b0 #b01111011000 #b1110011011110101100101001010000101010110000101110000)))
(assert (= r (fp #b0 #b11001000000 #b0111101101000001011001100111100011010111110111110101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
