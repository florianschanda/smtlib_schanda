(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0622607935546966029249915663967840373516082763671875p288 {+ 280397686652723 288 (5.28287e+086)}
; Y = -1.16567139267223129905914902337826788425445556640625p97 {- 746117622304612 97 (-1.84708e+029)}
; Z = -1.2698961152795196216658268895116634666919708251953125p-41 {- 1215504044201589 -41 (-5.77482e-013)}
; 1.0622607935546966029249915663967840373516082763671875p288 x -1.16567139267223129905914902337826788425445556640625p97 -1.2698961152795196216658268895116634666919708251953125p-41 == -1.23824701860401287234481060295365750789642333984375p385
; [HW: -1.23824701860401287234481060295365750789642333984375p385] 

; mpf : - 1072969184207164 385
; mpfd: - 1072969184207164 385 (-9.75788e+115) class: Neg. norm. non-zero
; hwf : - 1072969184207164 385 (-9.75788e+115) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100011111 #b0000111111110000010100101100100000100011111100110011)))
(assert (= y (fp #b1 #b10001100000 #b0010101001101001011100001011110101101000111101100100)))
(assert (= z (fp #b1 #b01111010110 #b0100010100010111111010010110110001110001011001110101)))
(assert (= r (fp #b1 #b10110000000 #b0011110011111101110000011011000101000110000100111100)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
