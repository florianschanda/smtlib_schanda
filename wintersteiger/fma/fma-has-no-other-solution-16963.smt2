(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7546854322709977136440784306614659726619720458984375p28 {+ 3398801031557607 28 (4.7102e+008)}
; Y = -1.772691883482419239470573302241973578929901123046875p-473 {- 3479894878523630 -473 (-7.26851e-143)}
; Z = -1.2095951203716801547471959565882571041584014892578125p841 {- 943932506004573 841 (-1.77364e+253)}
; 1.7546854322709977136440784306614659726619720458984375p28 x -1.772691883482419239470573302241973578929901123046875p-473 -1.2095951203716801547471959565882571041584014892578125p841 == -1.2095951203716801547471959565882571041584014892578125p841
; [HW: -1.2095951203716801547471959565882571041584014892578125p841] 

; mpf : - 943932506004573 841
; mpfd: - 943932506004573 841 (-1.77364e+253) class: Neg. norm. non-zero
; hwf : - 943932506004573 841 (-1.77364e+253) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000011011 #b1100000100110011000100001000001001011111000111100111)))
(assert (= y (fp #b1 #b01000100110 #b1100010111001111001000101010000101110001000011101110)))
(assert (= z (fp #b1 #b11101001000 #b0011010110101000000001101001101101100101110001011101)))
(assert (= r (fp #b1 #b11101001000 #b0011010110101000000001101001101101100101110001011101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
