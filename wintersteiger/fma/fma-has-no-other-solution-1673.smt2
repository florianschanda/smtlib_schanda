(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.623441022727127869273999749566428363323211669921875p681 {+ 2807728757641374 681 (1.62878e+205)}
; Y = 1.9804552348743229561733869559247978031635284423828125p-143 {+ 4415577830433453 -143 (1.77613e-043)}
; Z = 1.0426217700673980903758319982443936169147491455078125p-312 {+ 191951387793405 -312 (1.24959e-094)}
; 1.623441022727127869273999749566428363323211669921875p681 x 1.9804552348743229561733869559247978031635284423828125p-143 1.0426217700673980903758319982443936169147491455078125p-312 == 1.607576135984832621517170991864986717700958251953125p539
; [HW: 1.607576135984832621517170991864986717700958251953125p539] 

; mpf : + 2736279659620498 539
; mpfd: + 2736279659620498 539 (2.89294e+162) class: Pos. norm. non-zero
; hwf : + 2736279659620498 539 (2.89294e+162) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010101000 #b1001111110011001110101001011001110011001000010011110)))
(assert (= y (fp #b0 #b01101110000 #b1111101011111111000111010100000011111010001010101101)))
(assert (= z (fp #b0 #b01011000111 #b0000101011101001010000101010010010001001011111111101)))
(assert (= r (fp #b0 #b11000011010 #b1001101110001010000111000001000111100010100010010010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
