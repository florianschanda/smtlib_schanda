(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.149722025980405515355187162640504539012908935546875p-74 {- 674288060414510 -74 (-6.08658e-023)}
; Y = 1.0698333126724384189998318106518127024173736572265625p842 {+ 314501280929641 842 (3.13742e+253)}
; Z = -1.2141163388678843926271611053380183875560760498046875p740 {- 964294263939339 740 (-7.02194e+222)}
; -1.149722025980405515355187162640504539012908935546875p-74 x 1.0698333126724384189998318106518127024173736572265625p842 -1.2141163388678843926271611053380183875560760498046875p740 == -1.2300109282300202284687884457525797188282012939453125p768
; [HW: -1.2300109282300202284687884457525797188282012939453125p768] 

; mpf : - 1035877130667861 768
; mpfd: - 1035877130667861 768 (-1.90961e+231) class: Neg. norm. non-zero
; hwf : - 1035877130667861 768 (-1.90961e+231) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110110101 #b0010011001010100001011101100010100010011101000101110)))
(assert (= y (fp #b0 #b11101001001 #b0001000111100000100110001001001000011001011101101001)))
(assert (= z (fp #b1 #b11011100011 #b0011011011010000010101000001000011111010000100001011)))
(assert (= r (fp #b1 #b11011111111 #b0011101011100001111111110000011001111000011101010101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
