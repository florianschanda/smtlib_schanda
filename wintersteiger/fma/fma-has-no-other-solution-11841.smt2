(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7944050425507958035353794912225566804409027099609375p549 {+ 3577682253613007 549 (3.30665e+165)}
; Y = -1.5384060135402408686644548652111552655696868896484375p-661 {- 2424765121953863 -661 (-1.60784e-199)}
; Z = -1.4069358582465856244425594923086464405059814453125p926 {- 1832676179563016 926 (-7.98087e+278)}
; 1.7944050425507958035353794912225566804409027099609375p549 x -1.5384060135402408686644548652111552655696868896484375p-661 -1.4069358582465856244425594923086464405059814453125p926 == -1.4069358582465856244425594923086464405059814453125p926
; [HW: -1.4069358582465856244425594923086464405059814453125p926] 

; mpf : - 1832676179563016 926
; mpfd: - 1832676179563016 926 (-7.98087e+278) class: Neg. norm. non-zero
; hwf : - 1832676179563016 926 (-7.98087e+278) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000100100 #b1100101101011110001000001111110110001000011111001111)))
(assert (= y (fp #b1 #b00101101010 #b1000100111010100111110011111110000100000000001000111)))
(assert (= z (fp #b1 #b11110011101 #b0110100000101100111100101100101010111101001000001000)))
(assert (= r (fp #b1 #b11110011101 #b0110100000101100111100101100101010111101001000001000)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
