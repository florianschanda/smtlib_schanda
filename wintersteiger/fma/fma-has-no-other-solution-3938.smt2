(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3231578829508678918358555165468715131282806396484375p395 {- 1455373721239367 395 (-1.06773e+119)}
; Y = 1.2106182712384541133587845251895487308502197265625p-289 {+ 948540367866920 -289 (1.21713e-087)}
; Z = 1.1346607738713228030746904551051557064056396484375p264 {+ 606458211028312 264 (3.36345e+079)}
; -1.3231578829508678918358555165468715131282806396484375p395 x 1.2106182712384541133587845251895487308502197265625p-289 1.1346607738713228030746904551051557064056396484375p264 == 1.1346607738713225810300855300738476216793060302734375p264
; [HW: 1.1346607738713225810300855300738476216793060302734375p264] 

; mpf : + 606458211028311 264
; mpfd: + 606458211028311 264 (3.36345e+079) class: Pos. norm. non-zero
; hwf : + 606458211028311 264 (3.36345e+079) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110001010 #b0101001010111010011110011001101010110111111101000111)))
(assert (= y (fp #b0 #b01011011110 #b0011010111101011000101000011101011101000110000101000)))
(assert (= z (fp #b0 #b10100000111 #b0010001001111001001000001110001111010100110101011000)))
(assert (= r (fp #b0 #b10100000111 #b0010001001111001001000001110001111010100110101010111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
