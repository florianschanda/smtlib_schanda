(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8644489049331534058495662975474260747432708740234375p595 {+ 3893131766137783 595 (2.41767e+179)}
; Y = -1.8930296999044420314106673686183057725429534912109375p-104 {- 4021848223720431 -104 (-9.33336e-032)}
; Z = -1.98295529410233495326565389405004680156707763671875p567 {- 4426837096241132 567 (-9.57901e+170)}
; 1.8644489049331534058495662975474260747432708740234375p595 x -1.8930296999044420314106673686183057725429534912109375p-104 -1.98295529410233495326565389405004680156707763671875p567 == -1.98295529410233495326565389405004680156707763671875p567
; [HW: -1.98295529410233495326565389405004680156707763671875p567] 

; mpf : - 4426837096241132 567
; mpfd: - 4426837096241132 567 (-9.57901e+170) class: Neg. norm. non-zero
; hwf : - 4426837096241132 567 (-9.57901e+170) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001010010 #b1101110101001100100001011111111111000000001110110111)))
(assert (= y (fp #b1 #b01110010111 #b1110010010011101100110000010101101110010001111101111)))
(assert (= z (fp #b1 #b11000110110 #b1111101110100010111101010100100110011001011111101100)))
(assert (= r (fp #b1 #b11000110110 #b1111101110100010111101010100100110011001011111101100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
