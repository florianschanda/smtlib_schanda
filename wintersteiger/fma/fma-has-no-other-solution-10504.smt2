(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9036131538864557999346516226069070398807525634765625p-27 {- 4069511863130121 -27 (-1.4183e-008)}
; Y = -1.3714896604806134927656557920272462069988250732421875p482 {- 1673040696512483 482 (-1.71258e+145)}
; Z = -1.684672044106191979295772398472763597965240478515625p250 {- 3083488762707642 250 (-3.048e+075)}
; -1.9036131538864557999346516226069070398807525634765625p-27 x -1.3714896604806134927656557920272462069988250732421875p482 -1.684672044106191979295772398472763597965240478515625p250 == 1.3053928790550823890725951059721410274505615234375p456
; [HW: 1.3053928790550823890725951059721410274505615234375p456] 

; mpf : + 1375367256314072 456
; mpfd: + 1375367256314072 456 (2.42895e+137) class: Pos. norm. non-zero
; hwf : + 1375367256314072 456 (2.42895e+137) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111100100 #b1110011101010011001100010001000000101101100000001001)))
(assert (= y (fp #b1 #b10111100001 #b0101111100011001111100100100011010010000111111100011)))
(assert (= z (fp #b1 #b10011111001 #b1010111101000110101010101100010111101011111010111010)))
(assert (= r (fp #b0 #b10111000111 #b0100111000101110001110100100101111111001000011011000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
