(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8177122180033169485113830887712538242340087890625p155 {- 3682648440296040 155 (-8.30184e+046)}
; Y = 1.8308795035807836626418065861798822879791259765625p244 {+ 3741948622716200 244 (5.17581e+073)}
; Z = 1.397076719546974654662108150660060346126556396484375p-238 {+ 1788274566189254 -238 (3.16287e-072)}
; -1.8177122180033169485113830887712538242340087890625p155 x 1.8308795035807836626418065861798822879791259765625p244 1.397076719546974654662108150660060346126556396484375p-238 == -1.66400602167531896924401735304854810237884521484375p400
; [HW: -1.66400602167531896924401735304854810237884521484375p400] 

; mpf : - 2990417271788732 400
; mpfd: - 2990417271788732 400 (-4.29688e+120) class: Neg. norm. non-zero
; hwf : - 2990417271788732 400 (-4.29688e+120) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010011010 #b1101000101010101100101101000000111011101001001101000)))
(assert (= y (fp #b0 #b10011110011 #b1101010010110100100001001110011011001011110100101000)))
(assert (= z (fp #b0 #b01100010001 #b0110010110100110110100011110010001110101000011000110)))
(assert (= r (fp #b1 #b10110001111 #b1010100111111100010011000111001101110001010010111100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
