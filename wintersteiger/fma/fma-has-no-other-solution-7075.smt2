(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4867717615231759165084213236696086823940277099609375p634 {- 2192225123810255 634 (-1.05989e+191)}
; Y = -1.992259423306006027587500284425914287567138671875p-539 {- 4468739169055792 -539 (-1.10708e-162)}
; Z = 1.9977800541498755837466205775854177772998809814453125p-99 {+ 4493601880067093 -99 (3.15194e-030)}
; -1.4867717615231759165084213236696086823940277099609375p634 x -1.992259423306006027587500284425914287567138671875p-539 1.9977800541498755837466205775854177772998809814453125p-99 == 1.481017526099908554471085153636522591114044189453125p96
; [HW: 1.481017526099908554471085153636522591114044189453125p96] 

; mpf : + 2166310351302226 96
; mpfd: + 2166310351302226 96 (1.17338e+029) class: Pos. norm. non-zero
; hwf : + 2166310351302226 96 (1.17338e+029) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001111001 #b0111110010011101000100101111110001011011101111001111)))
(assert (= y (fp #b1 #b00111100100 #b1111111000000100101101101010110000111111010000110000)))
(assert (= z (fp #b0 #b01110011100 #b1111111101101110100000110111110100101100110000010101)))
(assert (= r (fp #b0 #b10001011111 #b0111101100100011111101101110111101100110111001010010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
