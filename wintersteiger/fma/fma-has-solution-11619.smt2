(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5061871645564786081905594983254559338092803955078125p-180 {+ 2279664325676285 -180 (9.82833e-055)}
; Y = 1.4635705471693747359296366994385607540607452392578125p-915 {+ 2087736143491933 -915 (5.28406e-276)}
; Z = -1.142495009920002413394968243665061891078948974609375p-756 {- 641740473577878 -756 (-3.01424e-228)}
; 1.5061871645564786081905594983254559338092803955078125p-180 x 1.4635705471693747359296366994385607540607452392578125p-915 -1.142495009920002413394968243665061891078948974609375p-756 == -1.142495009920002413394968243665061891078948974609375p-756
; [HW: -1.142495009920002413394968243665061891078948974609375p-756] 

; mpf : - 641740473577878 -756
; mpfd: - 641740473577878 -756 (-3.01424e-228) class: Neg. norm. non-zero
; hwf : - 641740473577878 -756 (-3.01424e-228) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001011 #b1000000110010101011110110110010101101100110011111101)))
(assert (= y (fp #b0 #b00001101100 #b0111011010101100100011110011001101111011001101011101)))
(assert (= z (fp #b1 #b00100001011 #b0010010001111010100011011000111101110011000110010110)))
(assert (= r (fp #b1 #b00100001011 #b0010010001111010100011011000111101110011000110010110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
