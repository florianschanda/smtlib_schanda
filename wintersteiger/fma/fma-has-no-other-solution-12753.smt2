(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5240182387981631162432449855259619653224945068359375p104 {- 2359968344986751 104 (-3.09108e+031)}
; Y = 1.5862205298110165774261304250103421509265899658203125p828 {+ 2640102559613829 828 (2.83923e+249)}
; Z = -1.1520676442392054905639042772236280143260955810546875p407 {- 684851785930795 407 (-3.80791e+122)}
; -1.5240182387981631162432449855259619653224945068359375p104 x 1.5862205298110165774261304250103421509265899658203125p828 -1.1520676442392054905639042772236280143260955810546875p407 == -1.2087145090940374370092058597947470843791961669921875p933
; [HW: -1.2087145090940374370092058597947470843791961669921875p933] 

; mpf : - 939966585382723 933
; mpfd: - 939966585382723 933 (-8.77626e+280) class: Neg. norm. non-zero
; hwf : - 939966585382723 933 (-8.77626e+280) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001100111 #b1000011000100110000011110010111000100101010001111111)))
(assert (= y (fp #b0 #b11100111011 #b1001011000010010100011000111001111001000001110000101)))
(assert (= z (fp #b1 #b10110010110 #b0010011011101101111001111011011011001001100000101011)))
(assert (= r (fp #b1 #b11110100100 #b0011010101101110010100000110011011000010011101000011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
