(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.861588437663664219456904902472160756587982177734375p-875 {+ 3880249366808806 -875 (7.38988e-264)}
; Y = -1.3344836788419460749111067343619652092456817626953125p873 {- 1506380571394101 873 (-8.40426e+262)}
; Z = -1.8425166372800687586419599028886295855045318603515625p137 {- 3794357613707961 137 (-3.21012e+041)}
; 1.861588437663664219456904902472160756587982177734375p-875 x -1.3344836788419460749111067343619652092456817626953125p873 -1.8425166372800687586419599028886295855045318603515625p137 == -1.8425166372800687586419599028886295855045318603515625p137
; [HW: -1.8425166372800687586419599028886295855045318603515625p137] 

; mpf : - 3794357613707961 137
; mpfd: - 3794357613707961 137 (-3.21012e+041) class: Neg. norm. non-zero
; hwf : - 3794357613707961 137 (-3.21012e+041) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010010100 #b1101110010010001000011110101001001100000100011100110)))
(assert (= y (fp #b1 #b11101101000 #b0101010110100000101110001110110110101100000000110101)))
(assert (= z (fp #b1 #b10010001000 #b1101011110101111001010111001101101110100001010111001)))
(assert (= r (fp #b1 #b10010001000 #b1101011110101111001010111001101101110100001010111001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
