(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.876603904286980206705948148737661540508270263671875p513 {- 3947873016698366 513 (-5.03223e+154)}
; Y = 1.5480692690565331925967029746971093118190765380859375p692 {+ 2468284555896223 692 (3.18088e+208)}
; Z = 1.7739568477794109835343761005788110196590423583984375p-452 {+ 3485591771260199 -452 (1.5254e-136)}
; -1.876603904286980206705948148737661540508270263671875p513 x 1.5480692690565331925967029746971093118190765380859375p692 1.7739568477794109835343761005788110196590423583984375p-452 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000000000 #b1110000001101001000111010000110001110101010111111110)))
(assert (= y (fp #b0 #b11010110011 #b1000110001001110010001001000001010001010010110011111)))
(assert (= z (fp #b0 #b01000111011 #b1100011000100010000010010011010110111010010100100111)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
