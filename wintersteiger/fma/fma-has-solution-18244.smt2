(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.184672255907778026795540426974184811115264892578125p-399 {- 831689902891938 -399 (-9.1755e-121)}
; Y = 1.4510971698222352443963245605118572711944580078125p-504 {+ 2031561045919304 -504 (2.77063e-152)}
; Z = -1.8842040365842487315006792414351366460323333740234375p214 {- 3982100969680311 214 (-4.96075e+064)}
; -1.184672255907778026795540426974184811115264892578125p-399 x 1.4510971698222352443963245605118572711944580078125p-504 -1.8842040365842487315006792414351366460323333740234375p214 == -1.8842040365842489535452841664664447307586669921875p214
; [HW: -1.8842040365842489535452841664664447307586669921875p214] 

; mpf : - 3982100969680312 214
; mpfd: - 3982100969680312 214 (-4.96075e+064) class: Neg. norm. non-zero
; hwf : - 3982100969680312 214 (-4.96075e+064) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001110000 #b0010111101000110101011100101001110011010001110100010)))
(assert (= y (fp #b0 #b01000000111 #b0111001101111011000110101010011110110100011001001000)))
(assert (= z (fp #b1 #b10011010101 #b1110001001011011001100100001110000011110110110110111)))
(assert (= r (fp #b1 #b10011010101 #b1110001001011011001100100001110000011110110110111000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
