(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9881295829137914932260855493950657546520233154296875p-1007 {+ 4450140021404315 -1007 (1.44957e-303)}
; Y = 1.02941555014286478808571700938045978546142578125p832 {+ 132475860662304 832 (2.94813e+250)}
; Z = -1.348427314970096713153679957031272351741790771484375p628 {- 1569177125865030 628 (-1.50198e+189)}
; 1.9881295829137914932260855493950657546520233154296875p-1007 x 1.02941555014286478808571700938045978546142578125p832 -1.348427314970096713153679957031272351741790771484375p628 == -1.3484273149700964911090750319999642670154571533203125p628
; [HW: -1.3484273149700964911090750319999642670154571533203125p628] 

; mpf : - 1569177125865029 628
; mpfd: - 1569177125865029 628 (-1.50198e+189) class: Neg. norm. non-zero
; hwf : - 1569177125865029 628 (-1.50198e+189) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010000 #b1111110011110110000011110111001011010011001010011011)))
(assert (= y (fp #b0 #b11100111111 #b0000011110000111110001110000100111011011100000100000)))
(assert (= z (fp #b1 #b11001110011 #b0101100100110010100010000101001011010100011001000110)))
(assert (= r (fp #b1 #b11001110011 #b0101100100110010100010000101001011010100011001000101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
