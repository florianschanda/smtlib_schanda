(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.566095044265002567129840826964937150478363037109375p617 {+ 2549465430408150 617 (8.51776e+185)}
; Y = 1.238322414562753603917144573642872273921966552734375p-449 {+ 1073308737418854 -449 (8.51855e-136)}
; Z = -1.814704211335773198499055069987662136554718017578125p818 {- 3669101582588962 818 (-3.17207e+246)}
; 1.566095044265002567129840826964937150478363037109375p617 x 1.238322414562753603917144573642872273921966552734375p-449 -1.814704211335773198499055069987662136554718017578125p818 == -1.814704211335773198499055069987662136554718017578125p818
; [HW: -1.814704211335773198499055069987662136554718017578125p818] 

; mpf : - 3669101582588962 818
; mpfd: - 3669101582588962 818 (-3.17207e+246) class: Neg. norm. non-zero
; hwf : - 3669101582588962 818 (-3.17207e+246) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001101000 #b1001000011101011100110101101010110001011101111010110)))
(assert (= y (fp #b0 #b01000111110 #b0011110100000010101100101010000001110011011001100110)))
(assert (= z (fp #b1 #b11100110001 #b1101000010010000011101001000011110011001110000100010)))
(assert (= r (fp #b1 #b11100110001 #b1101000010010000011101001000011110011001110000100010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
