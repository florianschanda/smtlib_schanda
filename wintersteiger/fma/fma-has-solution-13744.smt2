(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.173040629848344007513105680118314921855926513671875p692 {+ 779305716104958 692 (2.41029e+208)}
; Y = -1.4219323419781206840895038112648762762546539306640625p-904 {- 1900214338108225 -904 (-1.05139e-272)}
; Z = -1.7269199317795056458635372109711170196533203125p-49 {- 3273756333890368 -49 (-3.06763e-015)}
; 1.173040629848344007513105680118314921855926513671875p692 x -1.4219323419781206840895038112648762762546539306640625p-904 -1.7269199317795056458635372109711170196533203125p-49 == -1.7269199317795056458635372109711170196533203125p-49
; [HW: -1.7269199317795056458635372109711170196533203125p-49] 

; mpf : - 3273756333890368 -49
; mpfd: - 3273756333890368 -49 (-3.06763e-015) class: Neg. norm. non-zero
; hwf : - 3273756333890368 -49 (-3.06763e-015) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010110011 #b0010110001001100011001000000011000010011111011111110)))
(assert (= y (fp #b1 #b00001110111 #b0110110000000011110000100000100111101011101101000001)))
(assert (= z (fp #b1 #b01111001110 #b1011101000010111011011001011010111001101101101000000)))
(assert (= r (fp #b1 #b01111001110 #b1011101000010111011011001011010111001101101101000000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
