(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4504441939003525074980416320613585412502288818359375p-203 {- 2028620303800831 -203 (-1.12827e-061)}
; Y = -1.336050268440654775758957839570939540863037109375p194 {- 1513435863727088 194 (-3.35461e+058)}
; Z = 1.978940582763819566736174238030798733234405517578125p644 {+ 4408756443752994 644 (1.44461e+194)}
; -1.4504441939003525074980416320613585412502288818359375p-203 x -1.336050268440654775758957839570939540863037109375p194 1.978940582763819566736174238030798733234405517578125p644 == 1.978940582763819566736174238030798733234405517578125p644
; [HW: 1.978940582763819566736174238030798733234405517578125p644] 

; mpf : + 4408756443752994 644
; mpfd: + 4408756443752994 644 (1.44461e+194) class: Pos. norm. non-zero
; hwf : + 4408756443752994 644 (1.44461e+194) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110100 #b0111001101010000010011111000100101111001100111111111)))
(assert (= y (fp #b1 #b10011000001 #b0101011000000111011000111111000011000011101111110000)))
(assert (= z (fp #b0 #b11010000011 #b1111101010011011110110011001101110110010101000100010)))
(assert (= r (fp #b0 #b11010000011 #b1111101010011011110110011001101110110010101000100010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
