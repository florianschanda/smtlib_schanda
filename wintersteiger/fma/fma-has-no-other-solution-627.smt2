(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9802179209134198600850140792317688465118408203125p687 {- 4414509063367560 687 (-1.27151e+207)}
; Y = 1.720694823823440966492626102990470826625823974609375p-599 {+ 3245720940019094 -599 (8.29347e-181)}
; Z = -1.8079392864421066633440204896032810211181640625p610 {- 3638635069358656 610 (-7.68212e+183)}
; -1.9802179209134198600850140792317688465118408203125p687 x 1.720694823823440966492626102990470826625823974609375p-599 -1.8079392864421066633440204896032810211181640625p610 == -1.8079392864421066633440204896032810211181640625p610
; [HW: -1.8079392864421066633440204896032810211181640625p610] 

; mpf : - 3638635069358656 610
; mpfd: - 3638635069358656 610 (-7.68212e+183) class: Neg. norm. non-zero
; hwf : - 3638635069358656 610 (-7.68212e+183) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010101110 #b1111101011101111100011111100100101000110101110001000)))
(assert (= y (fp #b0 #b00110101000 #b1011100001111111011101001011101010110111110110010110)))
(assert (= z (fp #b1 #b11001100001 #b1100111011010101000110111110110001101100001001000000)))
(assert (= r (fp #b1 #b11001100001 #b1100111011010101000110111110110001101100001001000000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
