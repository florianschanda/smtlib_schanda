(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.24996202459569172305009487899951636791229248046875p-40 {- 1125728880825932 -40 (-1.13683e-012)}
; Y = -1.49508691001843718737518429406918585300445556640625p656 {- 2229673223475044 656 (-4.47037e+197)}
; Z = -1.5808846816946509061807546459021978080272674560546875p-34 {- 2616072036025259 -34 (-9.20196e-011)}
; -1.24996202459569172305009487899951636791229248046875p-40 x -1.49508691001843718737518429406918585300445556640625p656 -1.5808846816946509061807546459021978080272674560546875p-34 == 1.868801860993162478052909136749804019927978515625p616
; [HW: 1.868801860993162478052909136749804019927978515625p616] 

; mpf : + 3912735737427600 616
; mpfd: + 3912735737427600 616 (5.08207e+185) class: Pos. norm. non-zero
; hwf : + 3912735737427600 616 (5.08207e+185) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111010111 #b0011111111111101100000101110000011100001011001001100)))
(assert (= y (fp #b1 #b11010001111 #b0111111010111110000001000000011100110100111101100100)))
(assert (= z (fp #b1 #b01111011101 #b1001010010110100110110111100011010100000001110101011)))
(assert (= r (fp #b0 #b11001100111 #b1101111001101001110011000111101110101011011010010000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
