(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2058842047297009258954858523793518543243408203125p371 {+ 927220027702152 371 (5.80008e+111)}
; Y = 1.1745738939900738362354104538098908960819244384765625p-250 {+ 786210923922313 -250 (6.49204e-076)}
; Z = 1.1073875149397680583973624379723332822322845458984375p-74 {+ 483630372266983 -74 (5.86246e-023)}
; 1.2058842047297009258954858523793518543243408203125p371 x 1.1745738939900738362354104538098908960819244384765625p-250 1.1073875149397680583973624379723332822322845458984375p-74 == 1.416400106050488272302345649222843348979949951171875p121
; [HW: 1.416400106050488272302345649222843348979949951171875p121] 

; mpf : + 1875299362446014 121
; mpfd: + 1875299362446014 121 (3.76544e+036) class: Pos. norm. non-zero
; hwf : + 1875299362446014 121 (3.76544e+036) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110010 #b0011010010110100110100111100011000010011101110001000)))
(assert (= y (fp #b0 #b01100000101 #b0010110010110000110111111110110101101100001110001001)))
(assert (= z (fp #b0 #b01110110101 #b0001101101111101101111111000100010101010001111100111)))
(assert (= r (fp #b0 #b10001111000 #b0110101010011001001100101000010110001001101010111110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
