(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.12548444163782423999009552062489092350006103515625p696 {- 565131684600900 696 (-3.70013e+209)}
; Y = -1.6172997326655946803697361247031949460506439208984375p700 {- 2780070846008679 700 (-8.50722e+210)}
; Z = 1.0579413858524164826491187341162003576755523681640625p-932 {+ 260944803734273 -932 (2.91411e-281)}
; -1.12548444163782423999009552062489092350006103515625p696 x -1.6172997326655946803697361247031949460506439208984375p700 1.0579413858524164826491187341162003576755523681640625p-932 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010110111 #b0010000000011111101111111001010011111101110001000100)))
(assert (= y (fp #b1 #b11010111011 #b1001111000000111010110101111001110100000110101100111)))
(assert (= z (fp #b0 #b00001011011 #b0000111011010101001111110010010101010010001100000001)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
