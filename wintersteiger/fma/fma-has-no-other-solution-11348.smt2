(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9439775678460176067119391518644988536834716796875p143 {+ 4251297022797432 143 (2.16761e+043)}
; Y = -1.1497755046166029391230267719947732985019683837890625p865 {- 674528906780561 865 (-2.82852e+260)}
; Z = 1.6079586034825441576145976796397008001804351806640625p-10 {+ 2738002140100673 -10 (0.00157027)}
; 1.9439775678460176067119391518644988536834716796875p143 x -1.1497755046166029391230267719947732985019683837890625p865 1.6079586034825441576145976796397008001804351806640625p-10 == -1.117568894516755673151919836527667939662933349609375p1009
; [HW: -1.117568894516755673151919836527667939662933349609375p1009] 

; mpf : - 529483229536022 1009
; mpfd: - 529483229536022 1009 (-6.13112e+303) class: Neg. norm. non-zero
; hwf : - 529483229536022 1009 (-6.13112e+303) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010001110 #b1111000110101000100000111000111000001110011001111000)))
(assert (= y (fp #b1 #b11101100000 #b0010011001010111101011111111111000010001111110010001)))
(assert (= z (fp #b0 #b01111110101 #b1001101110100011001011001100111101000111100001000001)))
(assert (= r (fp #b1 #b11111110000 #b0001111000011000111111101011110011111001111100010110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
