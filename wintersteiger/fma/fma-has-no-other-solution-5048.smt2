(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.667533211442694618398263628478161990642547607421875p-821 {- 3006302322310750 -821 (-1.19247e-247)}
; Y = -1.9822672597998327592705436472897417843341827392578125p1020 {- 4423738465212765 1020 (-2.22719e+307)}
; Z = 1.113939995667057925032850107527337968349456787109375p91 {+ 513140122028758 91 (2.75798e+027)}
; -1.667533211442694618398263628478161990642547607421875p-821 x -1.9822672597998327592705436472897417843341827392578125p1020 1.113939995667057925032850107527337968349456787109375p91 == 1.6527482448358628008833193234750069677829742431640625p200
; [HW: 1.6527482448358628008833193234750069677829742431640625p200] 

; mpf : + 2939716752209537 200
; mpfd: + 2939716752209537 200 (2.65586e+060) class: Pos. norm. non-zero
; hwf : + 2939716752209537 200 (2.65586e+060) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011001010 #b1010101011100011011101001110000000100011111001011110)))
(assert (= y (fp #b1 #b11111111011 #b1111101101110101110111011111110011000101100101011101)))
(assert (= z (fp #b0 #b10001011010 #b0001110100101011001010111110101100011000101011010110)))
(assert (= r (fp #b0 #b10011000111 #b1010011100011010100000100100110000010111011010000001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
