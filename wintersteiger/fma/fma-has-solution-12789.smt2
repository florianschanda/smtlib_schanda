(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9049410716413712751915454646223224699497222900390625p1022 {+ 4075492273036337 1022 (8.56125e+307)}
; Y = -1.3730246875980942622419433973846025764942169189453125p142 {- 1679953844066773 142 (-7.65487e+042)}
; Z = 1.7688402858808831563663943597930483520030975341796875p872 {+ 3462548825000571 872 (5.56987e+262)}
; 1.9049410716413712751915454646223224699497222900390625p1022 x -1.3730246875980942622419433973846025764942169189453125p142 1.7688402858808831563663943597930483520030975341796875p872 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111111101 #b1110011110101010001101111101001110000001110000110001)))
(assert (= y (fp #b1 #b10010001101 #b0101111101111110100010111100000111010101100111010101)))
(assert (= z (fp #b0 #b11101100111 #b1100010011010010101101111000101110110100101001111011)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
