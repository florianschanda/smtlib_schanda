(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.056856194472147958407504120259545743465423583984375p576 {- 256057536238470 576 (-2.61393e+173)}
; Y = -1.894879816272474926108770887367427349090576171875p-571 {- 4030180407106096 -571 (-2.45163e-172)}
; Z = -1.177253562019873189825602821656502783298492431640625p335 {- 798279075862794 335 (-8.23984e+100)}
; -1.056856194472147958407504120259545743465423583984375p576 x -1.894879816272474926108770887367427349090576171875p-571 -1.177253562019873189825602821656502783298492431640625p335 == -1.1772535620198729677809978966251946985721588134765625p335
; [HW: -1.1772535620198729677809978966251946985721588134765625p335] 

; mpf : - 798279075862793 335
; mpfd: - 798279075862793 335 (-8.23984e+100) class: Neg. norm. non-zero
; hwf : - 798279075862793 335 (-8.23984e+100) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111111 #b0000111010001110001000001010011111010101001110000110)))
(assert (= y (fp #b1 #b00111000100 #b1110010100010110110101111111100010111101101000110000)))
(assert (= z (fp #b1 #b10101001110 #b0010110101100000011111010100101111111001100100001010)))
(assert (= r (fp #b1 #b10101001110 #b0010110101100000011111010100101111111001100100001001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
