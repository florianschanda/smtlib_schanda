(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.758844249886522437265057305921800434589385986328125p-946 {+ 3417530681021186 -946 (2.957e-285)}
; Y = 1.980990743774160733892131247557699680328369140625p152 {+ 4417989548115216 152 (1.13095e+046)}
; Z = -1.3448951782855813608108519474626518785953521728515625p66 {- 1553269796408825 66 (-9.92357e+019)}
; 1.758844249886522437265057305921800434589385986328125p-946 x 1.980990743774160733892131247557699680328369140625p152 -1.3448951782855813608108519474626518785953521728515625p66 == -1.3448951782855813608108519474626518785953521728515625p66
; [HW: -1.3448951782855813608108519474626518785953521728515625p66] 

; mpf : - 1553269796408825 66
; mpfd: - 1553269796408825 66 (-9.92357e+019) class: Neg. norm. non-zero
; hwf : - 1553269796408825 66 (-9.92357e+019) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001001101 #b1100001001000011100111011110010000000101001100000010)))
(assert (= y (fp #b0 #b10010010111 #b1111101100100010001101011001101000110000010100010000)))
(assert (= z (fp #b1 #b10001000001 #b0101100001001011000011001110011101001000110111111001)))
(assert (= r (fp #b1 #b10001000001 #b0101100001001011000011001110011101001000110111111001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
