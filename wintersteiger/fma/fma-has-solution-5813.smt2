(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7680773212112697034825714581529609858989715576171875p-841 {- 3459112737598803 -841 (-1.2058e-253)}
; Y = -1.88817164596508479945669023436494171619415283203125p-757 {- 3999969493809396 -757 (-2.49078e-228)}
; Z = 1.575006357237281218175439789774827659130096435546875p202 {+ 2589598416189486 202 (1.01238e+061)}
; -1.7680773212112697034825714581529609858989715576171875p-841 x -1.88817164596508479945669023436494171619415283203125p-757 1.575006357237281218175439789774827659130096435546875p202 == 1.5750063572372814402200447148061357438564300537109375p202
; [HW: 1.5750063572372814402200447148061357438564300537109375p202] 

; mpf : + 2589598416189487 202
; mpfd: + 2589598416189487 202 (1.01238e+061) class: Pos. norm. non-zero
; hwf : + 2589598416189487 202 (1.01238e+061) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010110110 #b1100010010100000101101110001111101100110110101010011)))
(assert (= y (fp #b1 #b00100001010 #b1110001101011111001101111000110010100111100011110100)))
(assert (= z (fp #b0 #b10011001001 #b1001001100110011100111011101101101010011100000101110)))
(assert (= r (fp #b0 #b10011001001 #b1001001100110011100111011101101101010011100000101111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
