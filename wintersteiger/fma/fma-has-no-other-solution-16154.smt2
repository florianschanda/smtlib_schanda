(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1715527132360203932393005743506364524364471435546875p773 {- 772604735404139 773 (-5.82034e+232)}
; Y = 1.7229956516371502939222182249068282544612884521484375p-481 {+ 3256082947303559 -481 (2.75966e-145)}
; Z = -1.59810200977604299765744144679047167301177978515625p-315 {- 2693611988356932 -315 (-2.39417e-095)}
; -1.1715527132360203932393005743506364524364471435546875p773 x 1.7229956516371502939222182249068282544612884521484375p-481 -1.59810200977604299765744144679047167301177978515625p-315 == -1.00929011528468404179648132412694394588470458984375p293
; [HW: -1.00929011528468404179648132412694394588470458984375p293] 

; mpf : - 41838959734332 293
; mpfd: - 41838959734332 293 (-1.60622e+088) class: Neg. norm. non-zero
; hwf : - 41838959734332 293 (-1.60622e+088) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000100 #b0010101111101010111000001110110011100011100001101011)))
(assert (= y (fp #b0 #b01000011110 #b1011100100010110001111100011011011101110100010000111)))
(assert (= z (fp #b1 #b01011000100 #b1001100100011101001101101001101110101000111101000100)))
(assert (= r (fp #b1 #b10100100100 #b0000001001100000110101100100010101010010111000111100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
