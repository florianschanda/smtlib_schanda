(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.08190920752611674515719641931354999542236328125p766 {- 368886276492832 766 (-4.19921e+230)}
; Y = 1.592209217578872237908171882736496627330780029296875p-732 {+ 2667073211613582 -732 (7.04763e-221)}
; Z = -1.706459807538220019296204554848372936248779296875p900 {- 3181612125981360 900 (-1.44242e+271)}
; -1.08190920752611674515719641931354999542236328125p766 x 1.592209217578872237908171882736496627330780029296875p-732 -1.706459807538220019296204554848372936248779296875p900 == -1.706459807538220019296204554848372936248779296875p900
; [HW: -1.706459807538220019296204554848372936248779296875p900] 

; mpf : - 3181612125981360 900
; mpfd: - 3181612125981360 900 (-1.44242e+271) class: Neg. norm. non-zero
; hwf : - 3181612125981360 900 (-1.44242e+271) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011111101 #b0001010011111000000000000111011110010000111000100000)))
(assert (= y (fp #b0 #b00100100011 #b1001011110011011000001011111010111100100000110001110)))
(assert (= z (fp #b1 #b11110000011 #b1011010011011010100011001100100101010000101010110000)))
(assert (= r (fp #b1 #b11110000011 #b1011010011011010100011001100100101010000101010110000)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
