(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.837005417985114075207775385933928191661834716796875p364 {+ 3769537288544846 364 (6.90286e+109)}
; Y = -1.4226300108963860768795939293340779840946197509765625p616 {- 1903356359588553 616 (-3.86874e+185)}
; Z = -1.0648206682626419894432956425589509308338165283203125p-926 {- 291926337433541 -926 (-1.87716e-279)}
; 1.837005417985114075207775385933928191661834716796875p364 x -1.4226300108963860768795939293340779840946197509765625p616 -1.0648206682626419894432956425589509308338165283203125p-926 == -1.3066895189024416712442189236753620207309722900390625p981
; [HW: -1.3066895189024416712442189236753620207309722900390625p981] 

; mpf : - 1381206803047473 981
; mpfd: - 1381206803047473 981 (-2.67053e+295) class: Neg. norm. non-zero
; hwf : - 1381206803047473 981 (-2.67053e+295) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101101011 #b1101011001000101111111001011000011010010001001001110)))
(assert (= y (fp #b1 #b11001100111 #b0110110000110001011110101111101100011011101011001001)))
(assert (= z (fp #b1 #b00001100001 #b0001000010011000000101100101101001001010111111000101)))
(assert (= r (fp #b1 #b11111010100 #b0100111010000011001101000100110110110110010000110001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
