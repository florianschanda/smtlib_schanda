(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.847452898778461527484751059091649949550628662109375p-521 {- 3816588559152726 -521 (-2.6912e-157)}
; Y = 1.0846184422320537255046701829996891319751739501953125p-201 {+ 381087584904949 -201 (3.3748e-061)}
; Z = -1.535491894517322375435242065577767789363861083984375p-856 {- 2411641096608134 -856 (-3.19574e-258)}
; -1.847452898778461527484751059091649949550628662109375p-521 x 1.0846184422320537255046701829996891319751739501953125p-201 -1.535491894517322375435242065577767789363861083984375p-856 == -1.001890742585093363459236570633947849273681640625p-721
; [HW: -1.001890742585093363459236570633947849273681640625p-721] 

; mpf : - 8515147601680 -721
; mpfd: - 8515147601680 -721 (-9.08225e-218) class: Neg. norm. non-zero
; hwf : - 8515147601680 -721 (-9.08225e-218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110110 #b1101100011110010101011000101010100100111011001010110)))
(assert (= y (fp #b0 #b01100110110 #b0001010110101001100011011110001000000110011011110101)))
(assert (= z (fp #b1 #b00010100111 #b1000100100010101111111110010111000111001100110000110)))
(assert (= r (fp #b1 #b00100101110 #b0000000001111011111010010110010110010001011100010000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
