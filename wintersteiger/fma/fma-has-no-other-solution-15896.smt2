(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8050532004676995700975794534315355122089385986328125p-226 {+ 3625637293639757 -226 (1.67383e-068)}
; Y = 1.7631396308538034300994468139833770692348480224609375p-833 {+ 3436875357144847 -833 (3.07822e-251)}
; Z = -1.8814676222026267549125577716040425002574920654296875p1015 {- 3969777254890907 1015 (-6.60606e+305)}
; 1.8050532004676995700975794534315355122089385986328125p-226 x 1.7631396308538034300994468139833770692348480224609375p-833 -1.8814676222026267549125577716040425002574920654296875p1015 == -1.8814676222026267549125577716040425002574920654296875p1015
; [HW: -1.8814676222026267549125577716040425002574920654296875p1015] 

; mpf : - 3969777254890907 1015
; mpfd: - 3969777254890907 1015 (-6.60606e+305) class: Neg. norm. non-zero
; hwf : - 3969777254890907 1015 (-6.60606e+305) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100011101 #b1100111000010111111101110110111110001100100001001101)))
(assert (= y (fp #b0 #b00010111110 #b1100001101011101000111100110110011001100011100001111)))
(assert (= z (fp #b1 #b11111110110 #b1110000110100111110111001011000111010111110110011011)))
(assert (= r (fp #b1 #b11111110110 #b1110000110100111110111001011000111010111110110011011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
