(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0415944320493999430965459396247752010822296142578125p-107 {- 187324668678365 -107 (-6.41932e-033)}
; Y = 1.577834201975174988064054559799842536449432373046875p-286 {+ 2602333896697326 -286 (1.26906e-086)}
; Z = 0.5101843280598712393469895687303505837917327880859375p-1022 {+ 2297665949740703 -1023 (1.1352e-308)}
; -1.0415944320493999430965459396247752010822296142578125p-107 x 1.577834201975174988064054559799842536449432373046875p-286 0.5101843280598712393469895687303505837917327880859375p-1022 == -1.643463319474450567980738924234174191951751708984375p-393
; [HW: -1.643463319474450567980738924234174191951751708984375p-393] 

; mpf : - 2897901165811718 -393
; mpfd: - 2897901165811718 -393 (-8.14651e-119) class: Neg. norm. non-zero
; hwf : - 2897901165811718 -393 (-8.14651e-119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110010100 #b0000101010100101111011101100010101011001000011011101)))
(assert (= y (fp #b0 #b01011100001 #b1001001111101100111100010011011111111110010111101110)))
(assert (= z (fp #b0 #b00000000000 #b1000001010011011011100001010101111110010111010011111)))
(assert (= r (fp #b1 #b01001110110 #b1010010010111010000000110001100101010001100000000110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
