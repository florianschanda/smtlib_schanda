(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7800011231701049485565135910292156040668487548828125p373 {+ 3512812767657453 373 (3.42459e+112)}
; Y = 1.40544229641835727306897751986980438232421875p514 {+ 1825949775069952 514 (7.53756e+154)}
; Z = 1.6757077877494233053567995739285834133625030517578125p-394 {+ 3043117341119645 -394 (4.15317e-119)}
; 1.7800011231701049485565135910292156040668487548828125p373 x 1.40544229641835727306897751986980438232421875p514 1.6757077877494233053567995739285834133625030517578125p-394 == 1.25084443308772375047510649892501533031463623046875p888
; [HW: 1.25084443308772375047510649892501533031463623046875p888] 

; mpf : + 1129702895381836 888
; mpfd: + 1129702895381836 888 (2.58131e+267) class: Pos. norm. non-zero
; hwf : + 1129702895381836 888 (2.58131e+267) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110100 #b1100011110101110001001110101001011011011110111101101)))
(assert (= y (fp #b0 #b11000000001 #b0110011111001011000100001111101110001000001100000000)))
(assert (= z (fp #b0 #b01001110101 #b1010110011111011001011111000001000001001010010011101)))
(assert (= r (fp #b0 #b11101110111 #b0100000000110111010101110011110001111110110101001100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
