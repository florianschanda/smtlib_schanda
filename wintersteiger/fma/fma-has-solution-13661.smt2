(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.096648754936339731358430071850307285785675048828125p99 {+ 435267296717122 99 (6.95084e+029)}
; Y = 1.3432047193931586637205555234686471521854400634765625p-135 {+ 1545656646370825 -135 (3.08385e-041)}
; Z = -1.8641435983317571345452279274468310177326202392578125p-335 {- 3891756787441501 -335 (-2.66337e-101)}
; 1.096648754936339731358430071850307285785675048828125p99 x 1.3432047193931586637205555234686471521854400634765625p-135 -1.8641435983317571345452279274468310177326202392578125p-335 == 1.473023783147123122461152888718061149120330810546875p-36
; [HW: 1.473023783147123122461152888718061149120330810546875p-36] 

; mpf : + 2130309733518766 -36
; mpfd: + 2130309733518766 -36 (2.14353e-011) class: Pos. norm. non-zero
; hwf : + 2130309733518766 -36 (2.14353e-011) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001100010 #b0001100010111101111110010000100110100110100101000010)))
(assert (= y (fp #b0 #b01101111000 #b0101011111011100010000111011010110100000011000001001)))
(assert (= z (fp #b1 #b01010110000 #b1101110100111000100000111100110111100001111101011101)))
(assert (= r (fp #b0 #b01111011011 #b0111100100011000000101100010111011011000110110101110)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
