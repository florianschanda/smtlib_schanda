(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2166673053012153626895042179967276751995086669921875p-718 {+ 975782795417923 -718 (8.82338e-217)}
; Y = -1.0898130269263279767955054921912960708141326904296875p-1004 {- 404481914598427 -1004 (-6.35677e-303)}
; Z = 1.505119405135224130987126045511104166507720947265625p-224 {+ 2274855564744602 -224 (5.5828e-068)}
; 1.2166673053012153626895042179967276751995086669921875p-718 x -1.0898130269263279767955054921912960708141326904296875p-1004 1.505119405135224130987126045511104166507720947265625p-224 == 1.5051194051352239089425211204797960817813873291015625p-224
; [HW: 1.5051194051352239089425211204797960817813873291015625p-224] 

; mpf : + 2274855564744601 -224
; mpfd: + 2274855564744601 -224 (5.5828e-068) class: Pos. norm. non-zero
; hwf : + 2274855564744601 -224 (5.5828e-068) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100110001 #b0011011101110111100000100010111001100001100101000011)))
(assert (= y (fp #b1 #b00000010011 #b0001011011111101111111001000110101100111010000011011)))
(assert (= z (fp #b0 #b01100011111 #b1000000101001111100000010101110110100001011110011010)))
(assert (= r (fp #b0 #b01100011111 #b1000000101001111100000010101110110100001011110011001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
