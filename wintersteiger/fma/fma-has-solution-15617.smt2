(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2204379424370761508811256135231815278530120849609375p-281 {- 992764235417935 -281 (-3.14114e-085)}
; Y = -1.612200530206568060975769185461103916168212890625p489 {- 2757106079714320 489 (-2.57684e+147)}
; Z = -1.9879157661431074988200862208032049238681793212890625p693 {- 4449177076275537 693 (-8.1693e+208)}
; -1.2204379424370761508811256135231815278530120849609375p-281 x -1.612200530206568060975769185461103916168212890625p489 -1.9879157661431074988200862208032049238681793212890625p693 == -1.9879157661431074988200862208032049238681793212890625p693
; [HW: -1.9879157661431074988200862208032049238681793212890625p693] 

; mpf : - 4449177076275537 693
; mpfd: - 4449177076275537 693 (-8.1693e+208) class: Neg. norm. non-zero
; hwf : - 4449177076275537 693 (-8.1693e+208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100110 #b0011100001101110100111101111100110010000100101001111)))
(assert (= y (fp #b1 #b10111101000 #b1001110010111001001011001000011111010100110000010000)))
(assert (= z (fp #b1 #b11010110100 #b1111110011101000000011000011001011001001100101010001)))
(assert (= r (fp #b1 #b11010110100 #b1111110011101000000011000011001011001001100101010001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
