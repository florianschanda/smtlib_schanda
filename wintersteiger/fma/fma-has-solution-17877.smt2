(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5935980212960954016665482413372956216335296630859375p251 {- 2673327827516959 251 (-5.76644e+075)}
; Y = -1.1582554045002944054232330017839558422565460205078125p-521 {- 712718980736893 -521 (-1.68724e-157)}
; Z = -1.5497204745307933126952093516592867672443389892578125p-518 {- 2475720924254813 -518 (-1.80599e-156)}
; -1.5935980212960954016665482413372956216335296630859375p251 x -1.1582554045002944054232330017839558422565460205078125p-521 -1.5497204745307933126952093516592867672443389892578125p-518 == 1.845793520767177842145656541106291115283966064453125p-270
; [HW: 1.845793520767177842145656541106291115283966064453125p-270] 

; mpf : + 3809115384959442 -270
; mpfd: + 3809115384959442 -270 (9.72936e-082) class: Pos. norm. non-zero
; hwf : + 3809115384959442 -270 (9.72936e-082) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011111010 #b1001011111110110000010100011100001101111111000011111)))
(assert (= y (fp #b1 #b00111110110 #b0010100010000011011011010001101010111110011101111101)))
(assert (= z (fp #b1 #b00111111001 #b1000110010111010011110110010010000001101001001011101)))
(assert (= r (fp #b0 #b01011110001 #b1101100010000101111011001001011011011101000111010010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
