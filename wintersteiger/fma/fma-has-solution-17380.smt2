(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.873802872517430717635988912661559879779815673828125p-235 {- 3935258291064770 -235 (-3.39371e-071)}
; Y = -1.438866016897416333364390084170736372470855712890625p144 {- 1976476830164778 144 (-3.20878e+043)}
; Z = -1.3791591411654826604404888712451793253421783447265625p-716 {- 1707580966866985 -716 (-4.00071e-216)}
; -1.873802872517430717635988912661559879779815673828125p-235 x -1.438866016897416333364390084170736372470855712890625p144 -1.3791591411654826604404888712451793253421783447265625p-716 == 1.348075637815046246004158092546276748180389404296875p-90
; [HW: 1.348075637815046246004158092546276748180389404296875p-90] 

; mpf : + 1567593312760590 -90
; mpfd: + 1567593312760590 -90 (1.08897e-027) class: Pos. norm. non-zero
; hwf : + 1567593312760590 -90 (1.08897e-027) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100010100 #b1101111110110001100010111000100010011100111111000010)))
(assert (= y (fp #b1 #b10010001111 #b0111000001011001100001011111010111100110011100101010)))
(assert (= z (fp #b1 #b00100110011 #b0110000100010000100100101100111101001001000000101001)))
(assert (= r (fp #b0 #b01110100101 #b0101100100011011011111000010100011110011001100001110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
