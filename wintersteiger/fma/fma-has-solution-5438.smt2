(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.409797680221167137659676882321946322917938232421875p-700 {- 1845564679941342 -700 (-2.68015e-211)}
; Y = -1.89654161065642146155596492462791502475738525390625p-534 {- 4037664463674404 -534 (-3.37244e-161)}
; Z = 1.4143836282039352614248173267696984112262725830078125p545 {+ 1866217953567677 545 (1.62898e+164)}
; -1.409797680221167137659676882321946322917938232421875p-700 x -1.89654161065642146155596492462791502475738525390625p-534 1.4143836282039352614248173267696984112262725830078125p545 == 1.4143836282039352614248173267696984112262725830078125p545
; [HW: 1.4143836282039352614248173267696984112262725830078125p545] 

; mpf : + 1866217953567677 545
; mpfd: + 1866217953567677 545 (1.62898e+164) class: Pos. norm. non-zero
; hwf : + 1866217953567677 545 (1.62898e+164) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000011 #b0110100011101000100000000011001010000110110011011110)))
(assert (= y (fp #b1 #b00111101001 #b1110010110000011110000000100000101000101110000100100)))
(assert (= z (fp #b0 #b11000100000 #b0110101000010101000010111010001100100010001110111101)))
(assert (= r (fp #b0 #b11000100000 #b0110101000010101000010111010001100100010001110111101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
