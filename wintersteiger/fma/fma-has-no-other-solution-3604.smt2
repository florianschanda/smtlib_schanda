(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7884383730085191555048140799044631421566009521484375p-863 {+ 3550810762885767 -863 (2.90796e-260)}
; Y = -1.531072872050284416900467476807534694671630859375p-54 {- 2391739588672240 -54 (-8.49916e-017)}
; Z = -1.5370298217628473036455716282944194972515106201171875p-878 {- 2418567305178003 -878 (-7.62687e-265)}
; 1.7884383730085191555048140799044631421566009521484375p-863 x -1.531072872050284416900467476807534694671630859375p-54 -1.5370298217628473036455716282944194972515106201171875p-878 == -1.537029821767827986178645005566067993640899658203125p-878
; [HW: -1.537029821767827986178645005566067993640899658203125p-878] 

; mpf : - 2418567305200434 -878
; mpfd: - 2418567305200434 -878 (-7.62687e-265) class: Neg. norm. non-zero
; hwf : - 2418567305200434 -878 (-7.62687e-265) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010100000 #b1100100111010111000110001110001011111011101010000111)))
(assert (= y (fp #b1 #b01111001001 #b1000011111110100011001000100100100111111101011110000)))
(assert (= z (fp #b1 #b00010010001 #b1000100101111010110010010101000101110010101110010011)))
(assert (= r (fp #b1 #b00010010001 #b1000100101111010110010010101000101111000001100110010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
