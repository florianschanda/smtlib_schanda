(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2938521473329156474818546485039405524730682373046875p452 {- 1323392421230539 452 (-1.50467e+136)}
; Y = 1.9406143411007936716572430668747983872890472412109375p-51 {+ 4236150396080879 -51 (8.61806e-016)}
; Z = 1.9308843872152567922029220426338724792003631591796875p411 {+ 4192330579387643 411 (1.02114e+124)}
; -1.2938521473329156474818546485039405524730682373046875p452 x 1.9406143411007936716572430668747983872890472412109375p-51 1.9308843872152567922029220426338724792003631591796875p411 == 1.928432367652387124934421080979518592357635498046875p411
; [HW: 1.928432367652387124934421080979518592357635498046875p411] 

; mpf : + 4181287664997998 411
; mpfd: + 4181287664997998 411 (1.01984e+124) class: Pos. norm. non-zero
; hwf : + 4181287664997998 411 (1.01984e+124) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111000011 #b0100101100111001111001001111001010100111011111001011)))
(assert (= y (fp #b0 #b01111001100 #b1111000011001100000110011111100100101101001011101111)))
(assert (= z (fp #b0 #b10110011010 #b1110111001001110011100000110111101110010010011111011)))
(assert (= r (fp #b0 #b10110011010 #b1110110110101101101111100101111110011101011001101110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
