(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = +zero {+ 0 -1023 (0)}
; Y = 1.669538673481447244029141074861399829387664794921875p272 {+ 3015334120401182 272 (1.26694e+082)}
; Z = 1.6997849070159458673145991269848309457302093505859375p-137 {+ 3151551046476511 -137 (9.75629e-042)}
; +zero x 1.669538673481447244029141074861399829387664794921875p272 1.6997849070159458673145991269848309457302093505859375p-137 == 1.6997849070159458673145991269848309457302093505859375p-137
; [HW: 1.6997849070159458673145991269848309457302093505859375p-137] 

; mpf : + 3151551046476511 -137
; mpfd: + 3151551046476511 -137 (9.75629e-042) class: Pos. norm. non-zero
; hwf : + 3151551046476511 -137 (9.75629e-042) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b0 #b10100001111 #b1010101101100110111000101111001000000010100100011110)))
(assert (= z (fp #b0 #b01101110110 #b1011001100100101000110101000100111011110001011011111)))
(assert (= r (fp #b0 #b01101110110 #b1011001100100101000110101000100111011110001011011111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
