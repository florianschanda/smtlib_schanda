(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 0.1511568887976844077769555951817892491817474365234375p-1022 {+ 680750108063735 -1023 (3.36335e-309)}
; Y = -1.9841152694500225894813638660707511007785797119140625p-174 {- 4432061160784737 -174 (-8.28605e-053)}
; Z = 1.8233436743022739534580978215672075748443603515625p-63 {+ 3708010264785576 -63 (1.97687e-019)}
; 0.1511568887976844077769555951817892491817474365234375p-1022 x -1.9841152694500225894813638660707511007785797119140625p-174 1.8233436743022739534580978215672075748443603515625p-63 == 1.8233436743022737314134928965358994901180267333984375p-63
; [HW: 1.8233436743022737314134928965358994901180267333984375p-63] 

; mpf : + 3708010264785575 -63
; mpfd: + 3708010264785575 -63 (1.97687e-019) class: Pos. norm. non-zero
; hwf : + 3708010264785575 -63 (1.97687e-019) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0010011010110010001101111100010111110011011111110111)))
(assert (= y (fp #b1 #b01101010001 #b1111101111101110111110100111000111001000001101100001)))
(assert (= z (fp #b0 #b01111000000 #b1101001011000110101001101010101001111111001010101000)))
(assert (= r (fp #b0 #b01111000000 #b1101001011000110101001101010101001111111001010100111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
