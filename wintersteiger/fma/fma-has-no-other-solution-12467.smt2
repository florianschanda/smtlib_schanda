(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0526091618512871672663777644629590213298797607421875p-334 {- 236930601709731 -334 (-3.0078e-101)}
; Y = -1.75038013705681105847133949282579123973846435546875p104 {- 3379411705635276 104 (-3.55019e+031)}
; Z = 1.17860095126209696303476448520086705684661865234375p-502 {+ 804347177551996 -502 (9.00138e-152)}
; -1.0526091618512871672663777644629590213298797607421875p-334 x -1.75038013705681105847133949282579123973846435546875p104 1.17860095126209696303476448520086705684661865234375p-502 == 1.8424661689885108994957363393041305243968963623046875p-230
; [HW: 1.8424661689885108994957363393041305243968963623046875p-230] 

; mpf : + 3794130324728907 -230
; mpfd: + 3794130324728907 -230 (1.06783e-069) class: Pos. norm. non-zero
; hwf : + 3794130324728907 -230 (1.06783e-069) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010110001 #b0000110101110111110010110100010110011111000010100011)))
(assert (= y (fp #b1 #b10001100111 #b1100000000011000111010011010010000111010000111001100)))
(assert (= z (fp #b0 #b01000001001 #b0010110110111000110010101011110010110100100001111100)))
(assert (= r (fp #b0 #b01100011001 #b1101011110101011110111001110001111001010110001001011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
