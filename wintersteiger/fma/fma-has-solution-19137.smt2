(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5189098462720342919141103266156278550624847412109375p275 {+ 2336962190309615 275 (9.22106e+082)}
; Y = -1.3224418263034178888659653239301405847072601318359375p-715 {- 1452148888788735 -715 (-7.67237e-216)}
; Z = -1.9041956343218375824477561764069832861423492431640625p628 {- 4072135121801857 628 (-2.12104e+189)}
; 1.5189098462720342919141103266156278550624847412109375p275 x -1.3224418263034178888659653239301405847072601318359375p-715 -1.9041956343218375824477561764069832861423492431640625p628 == -1.9041956343218375824477561764069832861423492431640625p628
; [HW: -1.9041956343218375824477561764069832861423492431640625p628] 

; mpf : - 4072135121801857 628
; mpfd: - 4072135121801857 628 (-2.12104e+189) class: Neg. norm. non-zero
; hwf : - 4072135121801857 628 (-2.12104e+189) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100010010 #b1000010011010111010001101001001101001111100011101111)))
(assert (= y (fp #b1 #b00100110100 #b0101001010001011100011000010101011010101111011111111)))
(assert (= z (fp #b1 #b11001110011 #b1110011101111001010111010111011010011001001010000001)))
(assert (= r (fp #b1 #b11001110011 #b1110011101111001010111010111011010011001001010000001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
