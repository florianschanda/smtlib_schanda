(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8545420361547904075649739752407185733318328857421875p-400 {+ 3848515195599139 -400 (7.18188e-121)}
; Y = 1.0670416860366718214692127730813808739185333251953125p-595 {+ 301928912253045 -595 (8.22875e-180)}
; Z = 1.361063482509378363971563885570503771305084228515625p-570 {+ 1626085365286330 -570 (3.52193e-172)}
; 1.8545420361547904075649739752407185733318328857421875p-400 x 1.0670416860366718214692127730813808739185333251953125p-595 1.361063482509378363971563885570503771305084228515625p-570 == 1.361063482509378363971563885570503771305084228515625p-570
; [HW: 1.361063482509378363971563885570503771305084228515625p-570] 

; mpf : + 1626085365286330 -570
; mpfd: + 1626085365286330 -570 (3.52193e-172) class: Pos. norm. non-zero
; hwf : + 1626085365286330 -570 (3.52193e-172) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001101111 #b1101101011000011010001000101001001010111100100100011)))
(assert (= y (fp #b0 #b00110101100 #b0001000100101001101001001101100011111111000001110101)))
(assert (= z (fp #b0 #b00111000101 #b0101110001101110101010000000100100101000010110111010)))
(assert (= r (fp #b0 #b00111000101 #b0101110001101110101010000000100100101000010110111010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
