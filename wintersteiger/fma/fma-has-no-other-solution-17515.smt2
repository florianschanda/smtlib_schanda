(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0823050858207554636436498185503296554088592529296875p512 {+ 370669153833051 512 (1.45113e+154)}
; Y = 1.346665311375781381997285279794596135616302490234375p-634 {+ 1561241767134246 -634 (1.88905e-191)}
; Z = 1.235465972208938278953382905456237494945526123046875p-601 {+ 1060444464698606 -601 (1.48869e-181)}
; 1.0823050858207554636436498185503296554088592529296875p512 x 1.346665311375781381997285279794596135616302490234375p-634 1.235465972208938278953382905456237494945526123046875p-601 == 1.4575027154003994400710553236422128975391387939453125p-122
; [HW: 1.4575027154003994400710553236422128975391387939453125p-122] 

; mpf : + 2060409058598229 -122
; mpfd: + 2060409058598229 -122 (2.74126e-037) class: Pos. norm. non-zero
; hwf : + 2060409058598229 -122 (2.74126e-037) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111111111 #b0001010100010001111100100011001111100101000001011011)))
(assert (= y (fp #b0 #b00110000101 #b0101100010111111000011101100111100000100010000100110)))
(assert (= z (fp #b0 #b00110100110 #b0011110001000111011111110111100111110101010011101110)))
(assert (= r (fp #b0 #b01110000101 #b0111010100011110111001011110000001111001110101010101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
