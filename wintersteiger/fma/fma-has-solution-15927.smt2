(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2603624618579869487433597896597348153591156005859375p61 {- 1172568286204895 61 (-2.9062e+018)}
; Y = 1.7876364197813583434282236339640803635120391845703125p-590 {+ 3547199086630757 -590 (4.41145e-178)}
; Z = 1.3260318986245935857226641019224189221858978271484375p-296 {+ 1468317137156615 -296 (1.04154e-089)}
; -1.2603624618579869487433597896597348153591156005859375p61 x 1.7876364197813583434282236339640803635120391845703125p-590 1.3260318986245935857226641019224189221858978271484375p-296 == 1.326031898624593363678059176891110837459564208984375p-296
; [HW: 1.326031898624593363678059176891110837459564208984375p-296] 

; mpf : + 1468317137156614 -296
; mpfd: + 1468317137156614 -296 (1.04154e-089) class: Pos. norm. non-zero
; hwf : + 1468317137156614 -296 (1.04154e-089) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000111100 #b0100001010100111000111010100001011001001001111011111)))
(assert (= y (fp #b0 #b00110110001 #b1100100110100010100010100101100000011001011101100101)))
(assert (= z (fp #b0 #b01011010111 #b0101001101110110110100111001011000001011101000000111)))
(assert (= r (fp #b0 #b01011010111 #b0101001101110110110100111001011000001011101000000110)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
