(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8111369710628810736352534149773418903350830078125p675 {- 3653036160625224 675 (-2.83922e+203)}
; Y = 1.473377964250186522576768766157329082489013671875p-62 {+ 2131904823402544 -62 (3.19488e-019)}
; Z = -1.0750950644810830514330746154882945120334625244140625p92 {- 338198104414369 92 (-5.32361e+027)}
; -1.8111369710628810736352534149773418903350830078125p675 x 1.473377964250186522576768766157329082489013671875p-62 -1.0750950644810830514330746154882945120334625244140625p92 == -1.3342446517014383555732592867570929229259490966796875p614
; [HW: -1.3342446517014383555732592867570929229259490966796875p614] 

; mpf : - 1505304088853179 614
; mpfd: - 1505304088853179 614 (-9.07095e+184) class: Neg. norm. non-zero
; hwf : - 1505304088853179 614 (-9.07095e+184) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010100010 #b1100111110100110101011000010101101001010101001001000)))
(assert (= y (fp #b0 #b01111000001 #b0111100100101111010011000101101100011010000000110000)))
(assert (= z (fp #b1 #b10001011011 #b0001001100111001011011100001111000001001100010100001)))
(assert (= r (fp #b1 #b11001100101 #b0101010110010001000011101011011111101011101010111011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
