(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1023353144231247124906758472207002341747283935546875p-187 {+ 460877283902827 -187 (5.61959e-057)}
; Y = 1.5230075577520560958788564676069654524326324462890625p-199 {+ 2355416642204113 -199 (1.89554e-060)}
; Z = -1.1572327634494481429783263592980802059173583984375p775 {- 708113414881368 775 (-2.29968e+233)}
; 1.1023353144231247124906758472207002341747283935546875p-187 x 1.5230075577520560958788564676069654524326324462890625p-199 -1.1572327634494481429783263592980802059173583984375p775 == -1.1572327634494479209337214342667721211910247802734375p775
; [HW: -1.1572327634494479209337214342667721211910247802734375p775] 

; mpf : - 708113414881367 775
; mpfd: - 708113414881367 775 (-2.29968e+233) class: Neg. norm. non-zero
; hwf : - 708113414881367 775 (-2.29968e+233) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101000100 #b0001101000110010101001011010110010101100010101101011)))
(assert (= y (fp #b0 #b01100111000 #b1000010111100011110100101100010000011011000111010001)))
(assert (= z (fp #b1 #b11100000110 #b0010100001000000011010000000100011100000000001011000)))
(assert (= r (fp #b1 #b11100000110 #b0010100001000000011010000000100011100000000001010111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
