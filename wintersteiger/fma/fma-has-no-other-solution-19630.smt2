(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7080359088781487120201063589775003492832183837890625p20 {- 3188710255388561 20 (-1.79101e+006)}
; Y = 1.8725730957964972223095401204773224890232086181640625p639 {+ 3929719869082625 639 (4.27175e+192)}
; Z = -1.508889566322209052628977588028647005558013916015625p216 {- 2291834861261434 216 (-1.58905e+065)}
; -1.7080359088781487120201063589775003492832183837890625p20 x 1.8725730957964972223095401204773224890232086181640625p639 -1.508889566322209052628977588028647005558013916015625p216 == -1.599211044809769166619162206188775599002838134765625p660
; [HW: -1.599211044809769166619162206188775599002838134765625p660] 

; mpf : - 2698606638121562 660
; mpfd: - 2698606638121562 660 (-7.65073e+198) class: Neg. norm. non-zero
; hwf : - 2698606638121562 660 (-7.65073e+198) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000010011 #b1011010101000001110101110110000100000110011110010001)))
(assert (= y (fp #b0 #b11001111110 #b1101111101100000111100110100110111010000110000000001)))
(assert (= z (fp #b1 #b10011010111 #b1000001001000110100101100010110010100001001001111010)))
(assert (= r (fp #b1 #b11010010011 #b1001100101100101111001010010000011011100001001011010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
