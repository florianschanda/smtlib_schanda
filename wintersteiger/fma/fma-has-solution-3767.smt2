(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7240704811401823537408972697448916733264923095703125p-881 {+ 3260923549052901 -881 (1.06937e-265)}
; Y = -1.014268512862266380381015551392920315265655517578125p635 {- 64259669209634 635 (-1.44611e+191)}
; Z = 1.5496849403539789680195326582179404795169830322265625p-692 {+ 2475560892549353 -692 (7.542e-209)}
; 1.7240704811401823537408972697448916733264923095703125p-881 x -1.014268512862266380381015551392920315265655517578125p635 1.5496849403539789680195326582179404795169830322265625p-692 == -1.7486704029757846878823102088063023984432220458984375p-246
; [HW: -1.7486704029757846878823102088063023984432220458984375p-246] 

; mpf : - 3371711747865063 -246
; mpfd: - 3371711747865063 -246 (-1.54643e-074) class: Neg. norm. non-zero
; hwf : - 3371711747865063 -246 (-1.54643e-074) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010001110 #b1011100101011100101011101101110001111110111111100101)))
(assert (= y (fp #b1 #b11001111010 #b0000001110100111000110011110110000011011001000100010)))
(assert (= z (fp #b0 #b00101001011 #b1000110010111000001001101111100111101100100011101001)))
(assert (= r (fp #b1 #b01100001001 #b1011111110101000110111010001000001000011100111100111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
