(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.93133916329501342801222563139162957668304443359375p-818 {+ 4194378708770972 -818 (1.1049e-246)}
; Y = -1.6141747737346172630878982090507633984088897705078125p331 {- 2765997282131581 331 (-7.06121e+099)}
; Z = -1.45282818141602643180476661655120551586151123046875p531 {- 2039356829088076 531 (-1.02127e+160)}
; 1.93133916329501342801222563139162957668304443359375p-818 x -1.6141747737346172630878982090507633984088897705078125p331 -1.45282818141602643180476661655120551586151123046875p531 == -1.4528281814160266538493715415825136005878448486328125p531
; [HW: -1.4528281814160266538493715415825136005878448486328125p531] 

; mpf : - 2039356829088077 531
; mpfd: - 2039356829088077 531 (-1.02127e+160) class: Neg. norm. non-zero
; hwf : - 2039356829088077 531 (-1.02127e+160) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011001101 #b1110111001101100001111100100111111010110000010011100)))
(assert (= y (fp #b1 #b10101001010 #b1001110100111010100011101101011100110111111001111101)))
(assert (= z (fp #b1 #b11000010010 #b0111001111101100100011000011010111100011100101001100)))
(assert (= r (fp #b1 #b11000010010 #b0111001111101100100011000011010111100011100101001101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
