(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.981382272334573091399079203256405889987945556640625p-863 {+ 4419752835993994 -863 (3.22168e-260)}
; Y = 1.460826801045336242879102428560145199298858642578125p413 {+ 2075379409470114 413 (3.0902e+124)}
; Z = -1.80278678231768907380683231167495250701904296875p444 {- 3615430253703904 444 (-8.1896e+133)}
; 1.981382272334573091399079203256405889987945556640625p-863 x 1.460826801045336242879102428560145199298858642578125p413 -1.80278678231768907380683231167495250701904296875p444 == -1.80278678231768907380683231167495250701904296875p444
; [HW: -1.80278678231768907380683231167495250701904296875p444] 

; mpf : - 3615430253703904 444
; mpfd: - 3615430253703904 444 (-8.1896e+133) class: Neg. norm. non-zero
; hwf : - 3615430253703904 444 (-8.1896e+133) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010100000 #b1111101100111011110111100101110010001101000110001010)))
(assert (= y (fp #b0 #b10110011100 #b0111010111111000101111101100011110011100001010100010)))
(assert (= z (fp #b1 #b10110111011 #b1100110110000011011011110011111110110111001011100000)))
(assert (= r (fp #b1 #b10110111011 #b1100110110000011011011110011111110110111001011100000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
