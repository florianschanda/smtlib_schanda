(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8538222113926490219881770826759748160839080810546875p-453 {- 3845273393068587 -453 (-7.9704e-137)}
; Y = -1.50677196254437806288706269697286188602447509765625p309 {- 2282298021676676 309 (-1.57151e+093)}
; Z = -1.5115084562639096166236640783608891069889068603515625p843 {- 2303629293027001 843 (-8.86537e+253)}
; -1.8538222113926490219881770826759748160839080810546875p-453 x -1.50677196254437806288706269697286188602447509765625p309 -1.5115084562639096166236640783608891069889068603515625p843 == -1.5115084562639096166236640783608891069889068603515625p843
; [HW: -1.5115084562639096166236640783608891069889068603515625p843] 

; mpf : - 2303629293027001 843
; mpfd: - 2303629293027001 843 (-8.86537e+253) class: Neg. norm. non-zero
; hwf : - 2303629293027001 843 (-8.86537e+253) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000111010 #b1101101010010100000101111010101010000111101000101011)))
(assert (= y (fp #b1 #b10100110100 #b1000000110111011110011101010110110101000011010000100)))
(assert (= z (fp #b1 #b11101001010 #b1000001011110010001101111101101101000111111010111001)))
(assert (= r (fp #b1 #b11101001010 #b1000001011110010001101111101101101000111111010111001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
