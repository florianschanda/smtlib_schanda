(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = +zero {+ 0 -1023 (0)}
; Y = -1.197801448409617552925965355825610458850860595703125p-395 {- 890818529350898 -395 (-1.48435e-119)}
; Z = 1.6077527762532251021099227727972902357578277587890625p399 {+ 2737075176667409 399 (2.07581e+120)}
; +zero x -1.197801448409617552925965355825610458850860595703125p-395 1.6077527762532251021099227727972902357578277587890625p399 == 1.6077527762532251021099227727972902357578277587890625p399
; [HW: 1.6077527762532251021099227727972902357578277587890625p399] 

; mpf : + 2737075176667409 399
; mpfd: + 2737075176667409 399 (2.07581e+120) class: Pos. norm. non-zero
; hwf : + 2737075176667409 399 (2.07581e+120) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b1 #b01001110100 #b0011001010100011000111011010000000000101010011110010)))
(assert (= z (fp #b0 #b10110001110 #b1001101110010101101011111001101000001111100100010001)))
(assert (= r (fp #b0 #b10110001110 #b1001101110010101101011111001101000001111100100010001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
