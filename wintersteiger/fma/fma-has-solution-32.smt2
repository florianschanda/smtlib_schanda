(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3879779809931667156064349910593591630458831787109375p-58 {+ 1747297490628783 -58 (4.81552e-018)}
; Y = -1.1684780198591011579623000216088257730007171630859375p250 {- 758757547457567 250 (-2.11407e+075)}
; Z = -1.9704895273069598093940157923498190939426422119140625p772 {- 4370696273546593 772 (-4.89475e+232)}
; 1.3879779809931667156064349910593591630458831787109375p-58 x -1.1684780198591011579623000216088257730007171630859375p250 -1.9704895273069598093940157923498190939426422119140625p772 == -1.9704895273069598093940157923498190939426422119140625p772
; [HW: -1.9704895273069598093940157923498190939426422119140625p772] 

; mpf : - 4370696273546593 772
; mpfd: - 4370696273546593 772 (-4.89475e+232) class: Neg. norm. non-zero
; hwf : - 4370696273546593 772 (-4.89475e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000101 #b0110001101010010100001100110001111101111000010101111)))
(assert (= y (fp #b1 #b10011111001 #b0010101100100001011000000010000101100011110000011111)))
(assert (= z (fp #b1 #b11100000011 #b1111100001110010000000000110110011100100110101100001)))
(assert (= r (fp #b1 #b11100000011 #b1111100001110010000000000110110011100100110101100001)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
