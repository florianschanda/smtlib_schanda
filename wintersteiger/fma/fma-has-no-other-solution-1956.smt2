(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = +zero {+ 0 -1023 (0)}
; Y = -1.1872046651709198261670508145471103489398956298828125p-690 {- 843094860305773 -690 (-2.31115e-208)}
; Z = -1.226037728422034067676804625079967081546783447265625p578 {- 1017983429493146 578 (-1.21295e+174)}
; +zero x -1.1872046651709198261670508145471103489398956298828125p-690 -1.226037728422034067676804625079967081546783447265625p578 == -1.226037728422034067676804625079967081546783447265625p578
; [HW: -1.226037728422034067676804625079967081546783447265625p578] 

; mpf : - 1017983429493146 578
; mpfd: - 1017983429493146 578 (-1.21295e+174) class: Neg. norm. non-zero
; hwf : - 1017983429493146 578 (-1.21295e+174) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b1 #b00101001101 #b0010111111101100101001010001101010010001010101101101)))
(assert (= z (fp #b1 #b11001000001 #b0011100111011101100110111100101100111100000110011010)))
(assert (= r (fp #b1 #b11001000001 #b0011100111011101100110111100101100111100000110011010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
