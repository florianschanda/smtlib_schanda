(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1417620529413543550845133722759783267974853515625p797 {+ 638439528801960 797 (9.51661e+239)}
; Y = 1.052554866166972136198864973266609013080596923828125p-525 {+ 236686075686082 -525 (9.5829e-159)}
; Z = -1.3083865013001731991693077361560426652431488037109375p871 {- 1388849332341551 871 (-2.05998e+262)}
; 1.1417620529413543550845133722759783267974853515625p797 x 1.052554866166972136198864973266609013080596923828125p-525 -1.3083865013001731991693077361560426652431488037109375p871 == -1.308386501300172977124702811124734580516815185546875p871
; [HW: -1.308386501300172977124702811124734580516815185546875p871] 

; mpf : - 1388849332341550 871
; mpfd: - 1388849332341550 871 (-2.05998e+262) class: Neg. norm. non-zero
; hwf : - 1388849332341550 871 (-2.05998e+262) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100011100 #b0010010001001010100001001001010100110010011010101000)))
(assert (= y (fp #b0 #b00111110010 #b0000110101110100001111000101011101101110110011000010)))
(assert (= z (fp #b1 #b11101100110 #b0100111011110010011010101111000110011100101100101111)))
(assert (= r (fp #b1 #b11101100110 #b0100111011110010011010101111000110011100101100101110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
