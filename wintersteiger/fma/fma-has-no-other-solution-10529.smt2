(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4409524701092875087482525486848317086696624755859375p-524 {+ 1985873380072287 -524 (2.62381e-158)}
; Y = 1.8582775737167434026986256867530755698680877685546875p-57 {+ 3865338561171179 -57 (1.28944e-017)}
; Z = -1.438227393500071560339392817695625126361846923828125p-234 {- 1973600726070466 -234 (-5.20965e-071)}
; 1.4409524701092875087482525486848317086696624755859375p-524 x 1.8582775737167434026986256867530755698680877685546875p-57 -1.438227393500071560339392817695625126361846923828125p-234 == -1.4382273935000713382947878926643170416355133056640625p-234
; [HW: -1.4382273935000713382947878926643170416355133056640625p-234] 

; mpf : - 1973600726070465 -234
; mpfd: - 1973600726070465 -234 (-5.20965e-071) class: Neg. norm. non-zero
; hwf : - 1973600726070465 -234 (-5.20965e-071) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111110011 #b0111000011100010010000101101011000110101101101011111)))
(assert (= y (fp #b0 #b01111000110 #b1101101110111000000101000011111000000000111011101011)))
(assert (= z (fp #b1 #b01100010101 #b0111000000101111101010111010001101001011010011000010)))
(assert (= r (fp #b1 #b01100010101 #b0111000000101111101010111010001101001011010011000001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
