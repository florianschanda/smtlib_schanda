(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8072551761587758445415374808362685143947601318359375p-513 {- 3635554110541567 -513 (-6.73956e-155)}
; Y = 1.2839854347500356812616928436909802258014678955078125p203 {+ 1278956698118909 203 (1.65063e+061)}
; Z = 1.4513204398436114761494764024973846971988677978515625p-138 {+ 2032566564704377 -138 (4.16509e-042)}
; -1.8072551761587758445415374808362685143947601318359375p-513 x 1.2839854347500356812616928436909802258014678955078125p203 1.4513204398436114761494764024973846971988677978515625p-138 == 1.4513204398436114761494764024973846971988677978515625p-138
; [HW: 1.4513204398436114761494764024973846971988677978515625p-138] 

; mpf : + 2032566564704377 -138
; mpfd: + 2032566564704377 -138 (4.16509e-042) class: Pos. norm. non-zero
; hwf : + 2032566564704377 -138 (4.16509e-042) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111111110 #b1100111010101000010001100111010100100000111011111111)))
(assert (= y (fp #b0 #b10011001010 #b0100100010110011010001001111101011001010101011111101)))
(assert (= z (fp #b0 #b01101110101 #b0111001110001001101111001000000100100101000001111001)))
(assert (= r (fp #b0 #b01101110101 #b0111001110001001101111001000000100100101000001111001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
