(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5276779060342107197101313431630842387676239013671875p-333 {- 2376450020987315 -333 (-8.73058e-101)}
; Y = 1.2554876837926400856559894236852414906024932861328125p853 {+ 1150614237526285 853 (7.54048e+256)}
; Z = -1.894230736953711247139153783791698515415191650390625p54 {- 4027257213727978 54 (-3.41234e+016)}
; -1.5276779060342107197101313431630842387676239013671875p-333 x 1.2554876837926400856559894236852414906024932861328125p853 -1.894230736953711247139153783791698515415191650390625p54 == -1.91798079582808167486973616178147494792938232421875p520
; [HW: -1.91798079582808167486973616178147494792938232421875p520] 

; mpf : - 4134217970024620 520
; mpfd: - 4134217970024620 520 (-6.58328e+156) class: Neg. norm. non-zero
; hwf : - 4134217970024620 520 (-6.58328e+156) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010110010 #b1000011100010101111001100011010100111101000110110011)))
(assert (= y (fp #b0 #b11101010100 #b0100000101100111101001000000111001101011100100001101)))
(assert (= z (fp #b1 #b10000110101 #b1110010011101100010011100011101001001011010011101010)))
(assert (= r (fp #b1 #b11000000111 #b1110101100000000110010100001100001110000000010101100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
