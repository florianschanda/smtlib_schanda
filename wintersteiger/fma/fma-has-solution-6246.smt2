(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.755622652266583205715733129181899130344390869140625p726 {+ 3403021895180490 726 (6.19738e+218)}
; Y = -1.794430463231879713248417829163372516632080078125p-349 {- 3577796738182864 -349 (-1.5648e-105)}
; Z = -1.0124800508828235567904130220995284616947174072265625p247 {- 56205152505449 247 (-2.28979e+074)}
; 1.755622652266583205715733129181899130344390869140625p726 x -1.794430463231879713248417829163372516632080078125p-349 -1.0124800508828235567904130220995284616947174072265625p247 == -1.575171384583553102487485375604592263698577880859375p378
; [HW: -1.575171384583553102487485375604592263698577880859375p378] 

; mpf : - 2590341633284662 378
; mpfd: - 2590341633284662 378 (-9.69764e+113) class: Neg. norm. non-zero
; hwf : - 2590341633284662 378 (-9.69764e+113) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011010101 #b1100000101110000011111000111001110011010000011001010)))
(assert (= y (fp #b1 #b01010100010 #b1100101101011111110010110111101010000110111011010000)))
(assert (= z (fp #b1 #b10011110110 #b0000001100110001111001001000001001100100111001101001)))
(assert (= r (fp #b1 #b10101111001 #b1001001100111110011011101000111001100001101000110110)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
