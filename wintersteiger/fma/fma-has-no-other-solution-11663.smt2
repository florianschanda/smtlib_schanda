(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.53116064244481986378332294407300651073455810546875p239 {+ 2392134871388364 239 (1.35266e+072)}
; Y = -1.477823290698912384044660939252935349941253662109375p-116 {- 2151924793940566 -116 (-1.77887e-035)}
; Z = 1.7302827477106295095410359863308258354663848876953125p110 {+ 3288901110464693 110 (2.24604e+033)}
; 1.53116064244481986378332294407300651073455810546875p239 x -1.477823290698912384044660939252935349941253662109375p-116 1.7302827477106295095410359863308258354663848876953125p110 == -1.13128682152536885752169837360270321369171142578125p124
; [HW: -1.13128682152536885752169837360270321369171142578125p124] 

; mpf : - 591263280500308 124
; mpfd: - 591263280500308 124 (-2.40598e+037) class: Neg. norm. non-zero
; hwf : - 591263280500308 124 (-2.40598e+037) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011101110 #b1000011111111010001001001101010000111001000011001100)))
(assert (= y (fp #b1 #b01110001011 #b0111101001010010101000001000111011010001101001010110)))
(assert (= z (fp #b0 #b10001101101 #b1011101011110011110011110110011001000000000010110101)))
(assert (= r (fp #b1 #b10001111011 #b0010000110011100000000110101110011011000111001010100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
