(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.911946309012998224119428414269350469112396240234375p-203 {+ 4107041057452838 -203 (1.48726e-061)}
; Y = 1.584854202556075453145467690774239599704742431640625p-3 {+ 2633949168697610 -3 (0.198107)}
; Z = 1.7622410411124975748720089541166089475154876708984375p969 {+ 3432828468720743 969 (8.79288e+291)}
; 1.911946309012998224119428414269350469112396240234375p-203 x 1.584854202556075453145467690774239599704742431640625p-3 1.7622410411124975748720089541166089475154876708984375p969 == 1.7622410411124975748720089541166089475154876708984375p969
; [HW: 1.7622410411124975748720089541166089475154876708984375p969] 

; mpf : + 3432828468720743 969
; mpfd: + 3432828468720743 969 (8.79288e+291) class: Pos. norm. non-zero
; hwf : + 3432828468720743 969 (8.79288e+291) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110100 #b1110100101110101010100000011010011101011001100100110)))
(assert (= y (fp #b0 #b01111111100 #b1001010110111001000000010100100011101000000100001010)))
(assert (= z (fp #b0 #b11111001000 #b1100001100100010001110101001011100111111010001100111)))
(assert (= r (fp #b0 #b11111001000 #b1100001100100010001110101001011100111111010001100111)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
