(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4018978343385912754825994852581061422824859619140625p300 {+ 1809986936968289 300 (2.85572e+090)}
; Y = 1.21569482231291292606556453392840921878814697265625p-114 {+ 971403121394180 -114 (5.85336e-035)}
; Z = -zero {- 0 -1023 (-0)}
; 1.4018978343385912754825994852581061422824859619140625p300 x 1.21569482231291292606556453392840921878814697265625p-114 -zero == 1.7042799386171110231913417010218836367130279541015625p186
; [HW: 1.7042799386171110231913417010218836367130279541015625p186] 

; mpf : + 3171794869120537 186
; mpfd: + 3171794869120537 186 (1.67155e+056) class: Pos. norm. non-zero
; hwf : + 3171794869120537 186 (1.67155e+056) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101011 #b0110011011100010110001101100011011010001010001100001)))
(assert (= y (fp #b0 #b01110001101 #b0011011100110111110001101001111111000000001000000100)))
(assert (= z (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= r (fp #b0 #b10010111001 #b1011010001001011101100001010011110010110111000011001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
