(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6036007393810465249117669372935779392719268798828125p-899 {+ 2718376064957037 -899 (3.79429e-271)}
; Y = 1.483549468064629284214106519357301294803619384765625p-355 {+ 2177713204191066 -355 (2.02141e-107)}
; Z = 1.2037928542950624422047667394508607685565948486328125p786 {+ 917801422664013 786 (4.89924e+236)}
; 1.6036007393810465249117669372935779392719268798828125p-899 x 1.483549468064629284214106519357301294803619384765625p-355 1.2037928542950624422047667394508607685565948486328125p786 == 1.2037928542950624422047667394508607685565948486328125p786
; [HW: 1.2037928542950624422047667394508607685565948486328125p786] 

; mpf : + 917801422664013 786
; mpfd: + 917801422664013 786 (4.89924e+236) class: Pos. norm. non-zero
; hwf : + 917801422664013 786 (4.89924e+236) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001111100 #b1001101010000101100100111111101101111011101001101101)))
(assert (= y (fp #b0 #b01010011100 #b0111101111001001111001011101111101010101111101011010)))
(assert (= z (fp #b0 #b11100010001 #b0011010000101011110001001011110001011011000101001101)))
(assert (= r (fp #b0 #b11100010001 #b0011010000101011110001001011110001011011000101001101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
