(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.559836411351310569983752429834567010402679443359375p257 {+ 2521279053550198 257 (3.61233e+077)}
; Y = 1.728931331925026793072674990980885922908782958984375p-577 {+ 3282814874836230 -577 (3.49519e-174)}
; Z = 1.0743404116051686880695115178241394460201263427734375p420 {+ 334799450003607 420 (2.90898e+126)}
; 1.559836411351310569983752429834567010402679443359375p257 x 1.728931331925026793072674990980885922908782958984375p-577 1.0743404116051686880695115178241394460201263427734375p420 == 1.0743404116051686880695115178241394460201263427734375p420
; [HW: 1.0743404116051686880695115178241394460201263427734375p420] 

; mpf : + 334799450003607 420
; mpfd: + 334799450003607 420 (2.90898e+126) class: Pos. norm. non-zero
; hwf : + 334799450003607 420 (2.90898e+126) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000000 #b1000111101010001011100000110010111011101001001110110)))
(assert (= y (fp #b0 #b00110111110 #b1011101010011011001111100110011110100101110100000110)))
(assert (= z (fp #b0 #b10110100011 #b0001001100000111111110010010010010011101100010010111)))
(assert (= r (fp #b0 #b10110100011 #b0001001100000111111110010010010010011101100010010111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
