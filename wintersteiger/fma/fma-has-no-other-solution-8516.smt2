(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5152276207122306050933957521920092403888702392578125p833 {- 2320378920650589 833 (-8.67889e+250)}
; Y = 1.77586249785469174611307607847265899181365966796875p-880 {+ 3494174056229132 -880 (2.20299e-265)}
; Z = 1.1214462653174022133129028588882647454738616943359375p-306 {+ 546945355228991 -306 (8.60201e-093)}
; -1.5152276207122306050933957521920092403888702392578125p833 x 1.77586249785469174611307607847265899181365966796875p-880 1.1214462653174022133129028588882647454738616943359375p-306 == -1.345417953668221588969799995538778603076934814453125p-46
; [HW: -1.345417953668221588969799995538778603076934814453125p-46] 

; mpf : - 1555624167427282 -46
; mpfd: - 1555624167427282 -46 (-1.91195e-014) class: Neg. norm. non-zero
; hwf : - 1555624167427282 -46 (-1.91195e-014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000000 #b1000001111100101111101010001010011110100011101011101)))
(assert (= y (fp #b0 #b00010001111 #b1100011010011110111011001011011001111010100100001100)))
(assert (= z (fp #b0 #b01011001101 #b0001111100010111000110100011100111000010011100111111)))
(assert (= r (fp #b1 #b01111010001 #b0101100001101101010011111001111001110100110011010010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
