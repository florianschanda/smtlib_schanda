(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.058079414495777026417044908157549798488616943359375p-866 {- 261566429481078 -866 (-2.15051e-261)}
; Y = 1.42991356759690813049701318959705531597137451171875p676 {+ 1936158582830956 676 (4.48319e+203)}
; Z = 1.3812490587843389011624140039202757179737091064453125p-606 {+ 1716993119076501 -606 (5.20109e-183)}
; -1.058079414495777026417044908157549798488616943359375p-866 x 1.42991356759690813049701318959705531597137451171875p676 1.3812490587843389011624140039202757179737091064453125p-606 == -1.5129621103825041661394834591192193329334259033203125p-190
; [HW: -1.5129621103825041661394834591192193329334259033203125p-190] 

; mpf : - 2310175969173829 -190
; mpfd: - 2310175969173829 -190 (-9.64115e-058) class: Neg. norm. non-zero
; hwf : - 2310175969173829 -190 (-9.64115e-058) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010011101 #b0000111011011110010010101110000111010100100001110110)))
(assert (= y (fp #b0 #b11010100011 #b0110111000001110110100001100100011101111011101101100)))
(assert (= z (fp #b0 #b00110100001 #b0110000110011001100010011100111100011100000010010101)))
(assert (= r (fp #b1 #b01101000001 #b1000001101010001011111000010000000101110000101000101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
