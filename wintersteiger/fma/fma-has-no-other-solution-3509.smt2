(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.52113288026254966922579114907421171665191650390625p-667 {- 2346973845360932 -667 (-2.48405e-201)}
; Y = 1.8035809183106581432554094135412015020847320556640625p-856 {+ 3619006724265921 -856 (3.7537e-258)}
; Z = -1.7921892528624205898069021714036352932453155517578125p-783 {- 3567703223998109 -783 (-3.52288e-236)}
; -1.52113288026254966922579114907421171665191650390625p-667 x 1.8035809183106581432554094135412015020847320556640625p-856 -1.7921892528624205898069021714036352932453155517578125p-783 == -1.7921892528624205898069021714036352932453155517578125p-783
; [HW: -1.7921892528624205898069021714036352932453155517578125p-783] 

; mpf : - 3567703223998109 -783
; mpfd: - 3567703223998109 -783 (-3.52288e-236) class: Neg. norm. non-zero
; hwf : - 3567703223998109 -783 (-3.52288e-236) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101100100 #b1000010101101000111101101110010110011001000100100100)))
(assert (= y (fp #b0 #b00010100111 #b1100110110110111011110101010001111010101011111000001)))
(assert (= z (fp #b1 #b00011110000 #b1100101011001100111010100011010101001001011010011101)))
(assert (= r (fp #b1 #b00011110000 #b1100101011001100111010100011010101001001011010011101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
