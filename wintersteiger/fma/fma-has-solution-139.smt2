(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.09779210226918788606553789577446877956390380859375p498 {- 440416475339292 498 (-8.98376e+149)}
; Y = -1.262966569989303788901224834262393414974212646484375p209 {- 1184296146614726 209 (-1.03911e+063)}
; Z = -1.712102622665849338545740465633571147918701171875p960 {- 3207025106087472 960 (-1.6685e+289)}
; -1.09779210226918788606553789577446877956390380859375p498 x -1.262966569989303788901224834262393414974212646484375p209 -1.712102622665849338545740465633571147918701171875p960 == -1.7121026226658491165011355406022630631923675537109375p960
; [HW: -1.7121026226658491165011355406022630631923675537109375p960] 

; mpf : - 3207025106087471 960
; mpfd: - 3207025106087471 960 (-1.6685e+289) class: Neg. norm. non-zero
; hwf : - 3207025106087471 960 (-1.6685e+289) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111110001 #b0001100100001000111001110011100100001101101000011100)))
(assert (= y (fp #b1 #b10011010000 #b0100001101010001110001101111001000001011100111000110)))
(assert (= z (fp #b1 #b11110111111 #b1011011001001100010110111000001110111110111000110000)))
(assert (= r (fp #b1 #b11110111111 #b1011011001001100010110111000001110111110111000101111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
