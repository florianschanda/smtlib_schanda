(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.096057244730894719708658158197067677974700927734375p279 {- 432603371576294 279 (-1.06464e+084)}
; Y = -1.488325155623556828032860721577890217304229736328125p90 {- 2199220988901890 90 (-1.84246e+027)}
; Z = 1.6638616453828445340690223019919358193874359130859375p-236 {+ 2989767058771743 -236 (1.50674e-071)}
; -1.096057244730894719708658158197067677974700927734375p279 x -1.488325155623556828032860721577890217304229736328125p90 1.6638616453828445340690223019919358193874359130859375p-236 == 1.6312895693364357629917549274978227913379669189453125p369
; [HW: 1.6312895693364357629917549274978227913379669189453125p369] 

; mpf : + 2843075469226453 369
; mpfd: + 2843075469226453 369 (1.96155e+111) class: Pos. norm. non-zero
; hwf : + 2843075469226453 369 (1.96155e+111) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100010110 #b0001100010010111001101010010010010101001101111100110)))
(assert (= y (fp #b1 #b10001011001 #b0111110100000010111000001001110100110111101000000010)))
(assert (= z (fp #b0 #b01100010011 #b1010100111110010110101100011011111111100111100011111)))
(assert (= r (fp #b0 #b10101110000 #b1010000110011100001100010111011010011011000111010101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
