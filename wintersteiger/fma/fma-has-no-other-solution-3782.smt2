(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.589878696544397396195336114033125340938568115234375p-191 {- 2656577477951142 -191 (-5.06565e-058)}
; Y = -1.1849770307684786008195487738703377544879913330078125p-476 {- 833062486841021 -476 (-6.0734e-144)}
; Z = 1.927395801151341014900708614732138812541961669921875p313 {+ 4176619384490142 313 (3.21632e+094)}
; -1.589878696544397396195336114033125340938568115234375p-191 x -1.1849770307684786008195487738703377544879913330078125p-476 1.927395801151341014900708614732138812541961669921875p313 == 1.927395801151341014900708614732138812541961669921875p313
; [HW: 1.927395801151341014900708614732138812541961669921875p313] 

; mpf : + 4176619384490142 313
; mpfd: + 4176619384490142 313 (3.21632e+094) class: Pos. norm. non-zero
; hwf : + 4176619384490142 313 (3.21632e+094) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101000000 #b1001011100000010010010100100111001000011111010100110)))
(assert (= y (fp #b1 #b01000100011 #b0010111101011010101001111001100110101001011010111101)))
(assert (= z (fp #b0 #b10100111000 #b1110110101101001110011111010110001100100100010011110)))
(assert (= r (fp #b0 #b10100111000 #b1110110101101001110011111010110001100100100010011110)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
