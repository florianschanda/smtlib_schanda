(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 0.9240867332294622205068890252732671797275543212890625p-1022 {+ 4161716667430225 -1023 (2.05616e-308)}
; Y = -1.7976925848777540739575897532631643116474151611328125p512 {- 3592488028011661 512 (-2.41031e+154)}
; Z = -1.220373362026119679057956091128289699554443359375p-124 {- 992473391103216 -124 (-5.73817e-038)}
; 0.9240867332294622205068890252732671797275543212890625p-1022 x -1.7976925848777540739575897532631643116474151611328125p512 -1.220373362026119679057956091128289699554443359375p-124 == -1.220373362026119679057956091128289699554443359375p-124
; [HW: -1.220373362026119679057956091128289699554443359375p-124] 

; mpf : - 992473391103216 -124
; mpfd: - 992473391103216 -124 (-5.73817e-038) class: Neg. norm. non-zero
; hwf : - 992473391103216 -124 (-5.73817e-038) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1110110010010000111100101011100111100011010101010001)))
(assert (= y (fp #b1 #b10111111111 #b1100110000110101100101001100110001001111110010001101)))
(assert (= z (fp #b1 #b01110000011 #b0011100001101010011000110111111011001111110011110000)))
(assert (= r (fp #b1 #b01110000011 #b0011100001101010011000110111111011001111110011110000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
