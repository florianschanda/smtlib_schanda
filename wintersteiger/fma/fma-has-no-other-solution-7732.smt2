(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.278041679854907908264749494264833629131317138671875p-109 {+ 1252188405788030 -109 (1.96913e-033)}
; Y = 1.926339909434695574219631453161127865314483642578125p714 {+ 4171864070948514 714 (1.66016e+215)}
; Z = 1.3627165260493263598817748061264865100383758544921875p520 {+ 1633530011556867 520 (4.67739e+156)}
; 1.278041679854907908264749494264833629131317138671875p-109 x 1.926339909434695574219631453161127865314483642578125p714 1.3627165260493263598817748061264865100383758544921875p520 == 1.230971346912734798451083406689576804637908935546875p606
; [HW: 1.230971346912734798451083406689576804637908935546875p606] 

; mpf : + 1040202471889454 606
; mpfd: + 1040202471889454 606 (3.26908e+182) class: Pos. norm. non-zero
; hwf : + 1040202471889454 606 (3.26908e+182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110010010 #b0100011100101101101111010101000111100110110101111110)))
(assert (= y (fp #b0 #b11011001001 #b1110110100100100100111001100000000000000011010100010)))
(assert (= z (fp #b0 #b11000000111 #b0101110011011010111111011000000100011001110000000011)))
(assert (= r (fp #b0 #b11001011101 #b0011101100100000111100000010110101001101101000101110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
