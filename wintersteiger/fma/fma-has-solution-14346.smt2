(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3696679187752172079939327886677347123622894287109375p718 {+ 1664836301246895 718 (1.88865e+216)}
; Y = -1.60294975765033509418344692676328122615814208984375p949 {- 2715444303877180 949 (-7.62756e+285)}
; Z = -1.846081349636758073273767877253703773021697998046875p671 {- 3810411650949230 671 (-1.80875e+202)}
; 1.3696679187752172079939327886677347123622894287109375p718 x -1.60294975765033509418344692676328122615814208984375p949 -1.846081349636758073273767877253703773021697998046875p671 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011001101 #b0101111010100010100011101000010110000101000110101111)))
(assert (= y (fp #b1 #b11110110100 #b1001101001011010111010100101001000111101010000111100)))
(assert (= z (fp #b1 #b11010011110 #b1101100010011000110010011000111001110010000001101110)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
