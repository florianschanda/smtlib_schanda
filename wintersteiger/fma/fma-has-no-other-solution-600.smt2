(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.899466984280519188388325346750207245349884033203125p-728 {- 4050839175237810 -728 (-1.34522e-219)}
; Y = -1.2841189130430856746301060411497019231319427490234375p911 {- 1279557830909751 911 (-2.22296e+274)}
; Z = 1.551569737644535873499762601568363606929779052734375p-280 {+ 2484049264924774 -280 (7.98679e-085)}
; -1.899466984280519188388325346750207245349884033203125p-728 x -1.2841189130430856746301060411497019231319427490234375p911 1.551569737644535873499762601568363606929779052734375p-280 == 1.2195707396077641870846264282590709626674652099609375p184
; [HW: 1.2195707396077641870846264282590709626674652099609375p184] 

; mpf : + 988858701078991 184
; mpfd: + 988858701078991 184 (2.99038e+055) class: Pos. norm. non-zero
; hwf : + 988858701078991 184 (2.99038e+055) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100100111 #b1110011001000011011101111110000101010001000010110010)))
(assert (= y (fp #b1 #b11110001110 #b0100100010111100000001000101111110110001111100110111)))
(assert (= z (fp #b0 #b01011100111 #b1000110100110011101011001010000010100101100001100110)))
(assert (= r (fp #b0 #b10010110111 #b0011100000110101110010011011100111000110000111001111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
