(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6072286517288165708094993533450178802013397216796875p531 {- 2734714729654587 531 (-1.12981e+160)}
; Y = 1.7116219873875520018913221065304242074489593505859375p35 {+ 3204860517227231 35 (5.88109e+010)}
; Z = 1.7549921615299606258986386819742619991302490234375p586 {+ 3400182417333976 586 (4.4448e+176)}
; -1.6072286517288165708094993533450178802013397216796875p531 x 1.7116219873875520018913221065304242074489593505859375p35 1.7549921615299606258986386819742619991302490234375p586 == 1.7549895380025299918003156562917865812778472900390625p586
; [HW: 1.7549895380025299918003156562917865812778472900390625p586] 

; mpf : + 3400170602016817 586
; mpfd: + 3400170602016817 586 (4.4448e+176) class: Pos. norm. non-zero
; hwf : + 3400170602016817 586 (4.4448e+176) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000010010 #b1001101101110011010101100100000001011110100100111011)))
(assert (= y (fp #b0 #b10000100010 #b1011011000101100110110111100101011110001101011011111)))
(assert (= z (fp #b0 #b11001001001 #b1100000101000111001010101001001010000001111011011000)))
(assert (= r (fp #b0 #b11001001001 #b1100000101000110111111101000111010001011000000110001)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
