(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.743199428486666757720513487583957612514495849609375p-425 {+ 3347072669194518 -425 (2.01187e-128)}
; Y = -1.031846073589785195423473851406015455722808837890625p-152 {- 143421965152170 -152 (-1.80741e-046)}
; Z = 1.6117358935900834016052840524935163557529449462890625p537 {+ 2755013542421457 537 (7.25106e+161)}
; 1.743199428486666757720513487583957612514495849609375p-425 x -1.031846073589785195423473851406015455722808837890625p-152 1.6117358935900834016052840524935163557529449462890625p537 == 1.6117358935900834016052840524935163557529449462890625p537
; [HW: 1.6117358935900834016052840524935163557529449462890625p537] 

; mpf : + 2755013542421457 537
; mpfd: + 2755013542421457 537 (7.25106e+161) class: Pos. norm. non-zero
; hwf : + 2755013542421457 537 (7.25106e+161) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010110 #b1011111001000010010100010101011111000001100100010110)))
(assert (= y (fp #b1 #b01101100111 #b0000100000100111000100000111010010010010111110101010)))
(assert (= z (fp #b0 #b11000011000 #b1001110010011010101110010011100011000010001111010001)))
(assert (= r (fp #b0 #b11000011000 #b1001110010011010101110010011100011000010001111010001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
