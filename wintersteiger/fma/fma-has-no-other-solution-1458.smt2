(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.144397956262316551345747939194552600383758544921875p605 {- 650310582016030 605 (-1.51958e+182)}
; Y = 1.9688309640188379479042168895830400288105010986328125p-303 {+ 4363226768540237 -303 (1.20815e-091)}
; Z = -1.6452316883423143689668677325244061648845672607421875p700 {- 2905865191186083 700 (-8.65414e+210)}
; -1.144397956262316551345747939194552600383758544921875p605 x 1.9688309640188379479042168895830400288105010986328125p-303 -1.6452316883423143689668677325244061648845672607421875p700 == -1.6452316883423143689668677325244061648845672607421875p700
; [HW: -1.6452316883423143689668677325244061648845672607421875p700] 

; mpf : - 2905865191186083 700
; mpfd: - 2905865191186083 700 (-8.65414e+210) class: Neg. norm. non-zero
; hwf : - 2905865191186083 700 (-8.65414e+210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011100 #b0010010011110111010000111011001111000001100000011110)))
(assert (= y (fp #b0 #b01011010000 #b1111100000000101010011100101100111010000001001001101)))
(assert (= z (fp #b1 #b11010111011 #b1010010100101101111001110110011111000101111010100011)))
(assert (= r (fp #b1 #b11010111011 #b1010010100101101111001110110011111000101111010100011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
