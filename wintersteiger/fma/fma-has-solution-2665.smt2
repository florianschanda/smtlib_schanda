(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7977754116543558371432709463988430798053741455078125p-766 {+ 3592861046651901 -766 (4.6319e-231)}
; Y = -1.1869724522606979189021103593404404819011688232421875p961 {- 842049066329827 961 (-2.31348e+289)}
; Z = 1.934580974961546129264888804755173623561859130859375p-879 {+ 4208978530584374 -879 (4.79977e-265)}
; 1.7977754116543558371432709463988430798053741455078125p-766 x -1.1869724522606979189021103593404404819011688232421875p961 1.934580974961546129264888804755173623561859130859375p-879 == -1.066954944492678247769390509347431361675262451171875p196
; [HW: -1.066954944492678247769390509347431361675262451171875p196] 

; mpf : - 301538263067838 196
; mpfd: - 301538263067838 196 (-1.07158e+059) class: Neg. norm. non-zero
; hwf : - 301538263067838 196 (-1.07158e+059) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100000001 #b1100110000111011000000100110011010011011101111111101)))
(assert (= y (fp #b1 #b11111000000 #b0010111111011101011011010011011110110110011011100011)))
(assert (= z (fp #b0 #b00010010000 #b1110111101000000101100101110001011101100011100110110)))
(assert (= r (fp #b1 #b10011000011 #b0001000100100011111101011001000011100110110010111110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
