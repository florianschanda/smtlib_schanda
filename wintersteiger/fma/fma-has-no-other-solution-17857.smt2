(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.535215811966004206823299682582728564739227294921875p-315 {- 2410397731332894 -315 (-2.29996e-095)}
; Y = -1.0623386694280807507340114170801825821399688720703125p842 {- 280748408407077 842 (-3.11544e+253)}
; Z = -1.9394497344547676487280796209233812987804412841796875p890 {- 4230905474023803 890 (-1.60094e+268)}
; -1.535215811966004206823299682582728564739227294921875p-315 x -1.0623386694280807507340114170801825821399688720703125p842 -1.9394497344547676487280796209233812987804412841796875p890 == -1.9394497344547676487280796209233812987804412841796875p890
; [HW: -1.9394497344547676487280796209233812987804412841796875p890] 

; mpf : - 4230905474023803 890
; mpfd: - 4230905474023803 890 (-1.60094e+268) class: Neg. norm. non-zero
; hwf : - 4230905474023803 890 (-1.60094e+268) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011000100 #b1000100100000011111001110100100010110010001100011110)))
(assert (= y (fp #b1 #b11101001001 #b0000111111110101011011010101001001111000010000100101)))
(assert (= z (fp #b1 #b11101111001 #b1111000001111111110001110001110110111000000101111011)))
(assert (= r (fp #b1 #b11101111001 #b1111000001111111110001110001110110111000000101111011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
