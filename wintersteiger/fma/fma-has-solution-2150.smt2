(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.429916993917994982865593556198291480541229248046875p697 {- 1936174013609326 697 (-9.40195e+209)}
; Y = -1.339346195945092521384367501013912260532379150390625p186 {- 1528279401607914 186 (-1.31363e+056)}
; Z = -1.25301736844020350503114968887530267238616943359375p-91 {- 1139488926225564 -91 (-5.0609e-028)}
; -1.429916993917994982865593556198291480541229248046875p697 x -1.339346195945092521384367501013912260532379150390625p186 -1.25301736844020350503114968887530267238616943359375p-91 == 1.915153886321308451812228668131865561008453369140625p883
; [HW: 1.915153886321308451812228668131865561008453369140625p883] 

; mpf : + 4121486701423306 883
; mpfd: + 4121486701423306 883 (1.23507e+266) class: Pos. norm. non-zero
; hwf : + 4121486701423306 883 (1.23507e+266) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010111000 #b0110111000001111000010100100010011011111010101101110)))
(assert (= y (fp #b1 #b10010111001 #b0101011011011111011001000110110110011011001011101010)))
(assert (= z (fp #b1 #b01110100100 #b0100000011000101101111110000101011000101010010011100)))
(assert (= r (fp #b0 #b11101110010 #b1110101001000111100001100110110010001110101011001010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
