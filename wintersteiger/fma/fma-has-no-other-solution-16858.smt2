(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3895835730656973527885611474630422890186309814453125p-910 {+ 1754528434488341 -910 (1.60542e-274)}
; Y = 1.2389535098050694639226776416762731969356536865234375p-318 {+ 1076150937716983 -318 (2.32015e-096)}
; Z = 1.1345589682943562070960297205601818859577178955078125p347 {+ 605999719469821 347 (3.25264e+104)}
; 1.3895835730656973527885611474630422890186309814453125p-910 x 1.2389535098050694639226776416762731969356536865234375p-318 1.1345589682943562070960297205601818859577178955078125p347 == 1.1345589682943562070960297205601818859577178955078125p347
; [HW: 1.1345589682943562070960297205601818859577178955078125p347] 

; mpf : + 605999719469821 347
; mpfd: + 605999719469821 347 (3.25264e+104) class: Pos. norm. non-zero
; hwf : + 605999719469821 347 (3.25264e+104) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001110001 #b0110001110111011101111111100000101100000010000010101)))
(assert (= y (fp #b0 #b01011000001 #b0011110100101100000011101010010111100000100011110111)))
(assert (= z (fp #b0 #b10101011010 #b0010001001110010011101001110000000110101001011111101)))
(assert (= r (fp #b0 #b10101011010 #b0010001001110010011101001110000000110101001011111101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
