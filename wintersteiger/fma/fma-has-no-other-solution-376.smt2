(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.95233824129895250365507308742962777614593505859375p-380 {- 4288950148644636 -380 (-7.92787e-115)}
; Y = 1.523906569516644271544691946473903954029083251953125p-969 {+ 2359465431252114 -969 (3.05417e-292)}
; Z = 1.2644434043054617600176925407140515744686126708984375p248 {+ 1190947217090663 248 (5.71924e+074)}
; -1.95233824129895250365507308742962777614593505859375p-380 x 1.523906569516644271544691946473903954029083251953125p-969 1.2644434043054617600176925407140515744686126708984375p248 == 1.2644434043054617600176925407140515744686126708984375p248
; [HW: 1.2644434043054617600176925407140515744686126708984375p248] 

; mpf : + 1190947217090663 248
; mpfd: + 1190947217090663 248 (5.71924e+074) class: Pos. norm. non-zero
; hwf : + 1190947217090663 248 (5.71924e+074) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010000011 #b1111001111001100011100000110000100011011111100011100)))
(assert (= y (fp #b0 #b00000110110 #b1000011000011110101111011010111000111011110010010010)))
(assert (= z (fp #b0 #b10011110111 #b0100001110110010100100000001110100100010100001100111)))
(assert (= r (fp #b0 #b10011110111 #b0100001110110010100100000001110100100010100001100111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
