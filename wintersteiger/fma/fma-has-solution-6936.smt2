(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9794482168343223715822887243120931088924407958984375p-887 {+ 4411042624363751 -887 (1.91839e-267)}
; Y = -1.65872745915137453920351617853157222270965576171875p560 {- 2966644739572844 560 (-6.25998e+168)}
; Z = -1.65040715581198949024610556080006062984466552734375p-858 {- 2929173424553980 -858 (-8.58726e-259)}
; 1.9794482168343223715822887243120931088924407958984375p-887 x -1.65872745915137453920351617853157222270965576171875p560 -1.65040715581198949024610556080006062984466552734375p-858 == -1.6416825556156571241928077142802067101001739501953125p-326
; [HW: -1.6416825556156571241928077142802067101001739501953125p-326] 

; mpf : - 2889881318360821 -326
; mpfd: - 2889881318360821 -326 (-1.20091e-098) class: Neg. norm. non-zero
; hwf : - 2889881318360821 -326 (-1.20091e-098) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010001000 #b1111101010111101000111100100101101101101110011100111)))
(assert (= y (fp #b1 #b11000101111 #b1010100010100010010111001101111000001000010001101100)))
(assert (= z (fp #b1 #b00010100101 #b1010011010000001000101010101011101001011111111111100)))
(assert (= r (fp #b1 #b01010111001 #b1010010001000101010011101101011011001000011011110101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
