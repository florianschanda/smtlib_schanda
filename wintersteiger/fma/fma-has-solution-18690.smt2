(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6718943459922719352306330620194785296916961669921875p-158 {- 3025943126243139 -158 (-4.57583e-048)}
; Y = 1.84947964576193779606683165184222161769866943359375p43 {+ 3825716216112284 43 (1.62682e+013)}
; Z = 1.8410114572027824753064351170905865728855133056640625p299 {+ 3787578885272769 299 (1.8751e+090)}
; -1.6718943459922719352306330620194785296916961669921875p-158 x 1.84947964576193779606683165184222161769866943359375p43 1.8410114572027824753064351170905865728855133056640625p299 == 1.8410114572027824753064351170905865728855133056640625p299
; [HW: 1.8410114572027824753064351170905865728855133056640625p299] 

; mpf : + 3787578885272769 299
; mpfd: + 3787578885272769 299 (1.8751e+090) class: Pos. norm. non-zero
; hwf : + 3787578885272769 299 (1.8751e+090) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101100001 #b1010110000000001010001001001001001100111011101000011)))
(assert (= y (fp #b0 #b10000101010 #b1101100101110111011111111000000100101010010010011100)))
(assert (= z (fp #b0 #b10100101010 #b1101011101001100100001101110000000111111010011000001)))
(assert (= r (fp #b0 #b10100101010 #b1101011101001100100001101110000000111111010011000001)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
