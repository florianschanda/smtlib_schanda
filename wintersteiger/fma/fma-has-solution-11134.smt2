(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.81100875511533132566910353489220142364501953125p-144 {- 3652458727331616 -144 (-8.12084e-044)}
; Y = 1.752919359602568505351882777176797389984130859375p375 {+ 3390847347346160 375 (1.34899e+113)}
; Z = 1.319181559006195048056042651296593248844146728515625p-970 {+ 1437465950203834 -970 (1.32193e-292)}
; -1.81100875511533132566910353489220142364501953125p-144 x 1.752919359602568505351882777176797389984130859375p375 1.319181559006195048056042651296593248844146728515625p-970 == -1.587276153625705621408314982545562088489532470703125p232
; [HW: -1.587276153625705621408314982545562088489532470703125p232] 

; mpf : - 2644856666632306 232
; mpfd: - 2644856666632306 232 (-1.0955e+070) class: Neg. norm. non-zero
; hwf : - 2644856666632306 232 (-1.0955e+070) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101101111 #b1100111110011110010001010000111111111101011100100000)))
(assert (= y (fp #b0 #b10101110110 #b1100000010111111010100101011101000000100101011110000)))
(assert (= z (fp #b0 #b00000110101 #b0101000110110101111000011111010101101010111110111010)))
(assert (= r (fp #b1 #b10011100111 #b1001011001010111101110101110000110001011000001110010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
