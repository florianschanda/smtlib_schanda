(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9973739161524541874115357131813652813434600830078125p831 {- 4491772797133245 831 (-2.86013e+250)}
; Y = 1.14165252003188033569358594832010567188262939453125p36 {+ 637946236431668 36 (7.84538e+010)}
; Z = 1.0379212840737193079831968134385533630847930908203125p836 {+ 170782280823813 836 (4.75599e+251)}
; -1.9973739161524541874115357131813652813434600830078125p831 x 1.14165252003188033569358594832010567188262939453125p36 1.0379212840737193079831968134385533630847930908203125p836 == -1.1401534821690375576253018152783624827861785888671875p868
; [HW: -1.1401534821690375576253018152783624827861785888671875p868] 

; mpf : - 631195170071155 868
; mpfd: - 631195170071155 868 (-2.24388e+261) class: Neg. norm. non-zero
; hwf : - 631195170071155 868 (-2.24388e+261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100111110 #b1111111101010011111001011001111111000010000110111101)))
(assert (= y (fp #b0 #b10000100011 #b0010010001000011010101101110110011101110110100110100)))
(assert (= z (fp #b0 #b11101000011 #b0000100110110101001101011001001011101011010000000101)))
(assert (= r (fp #b1 #b11101100011 #b0010001111100001000110010011111001010110001001110011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
