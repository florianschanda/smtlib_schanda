(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6428212870772522791185110691003501415252685546875p-706 {+ 2895009708946936 -706 (4.87993e-213)}
; Y = -1.609634000545108190038945394917391240596771240234375p-892 {- 2745547457687334 -892 (-4.87496e-269)}
; Z = -1.6021370116784117154651312375790439546108245849609375p-593 {- 2711784021420879 -593 (-4.94211e-179)}
; 1.6428212870772522791185110691003501415252685546875p-706 x -1.609634000545108190038945394917391240596771240234375p-892 -1.6021370116784117154651312375790439546108245849609375p-593 == -1.602137011678411937509736162610352039337158203125p-593
; [HW: -1.602137011678411937509736162610352039337158203125p-593] 

; mpf : - 2711784021420880 -593
; mpfd: - 2711784021420880 -593 (-4.94211e-179) class: Neg. norm. non-zero
; hwf : - 2711784021420880 -593 (-4.94211e-179) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100111101 #b1010010010001111111011111001010100101011010111111000)))
(assert (= y (fp #b1 #b00010000011 #b1001110000010000111110010100111011011110111100100110)))
(assert (= z (fp #b1 #b00110101110 #b1001101000100101101001101011010011011110101101001111)))
(assert (= r (fp #b1 #b00110101110 #b1001101000100101101001101011010011011110101101010000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
