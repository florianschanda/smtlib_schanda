(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9956974171633821146798482004669494926929473876953125p-495 {- 4484222516910773 -495 (-1.95095e-149)}
; Y = 1.5782639926894208581842349303769879043102264404296875p-870 {+ 2604269501997851 -870 (2.00486e-262)}
; Z = -1.8206089351737679837839323226944543421268463134765625p820 {- 3695694094665481 820 (-1.27296e+247)}
; -1.9956974171633821146798482004669494926929473876953125p-495 x 1.5782639926894208581842349303769879043102264404296875p-870 -1.8206089351737679837839323226944543421268463134765625p820 == -1.8206089351737679837839323226944543421268463134765625p820
; [HW: -1.8206089351737679837839323226944543421268463134765625p820] 

; mpf : - 3695694094665481 820
; mpfd: - 3695694094665481 820 (-1.27296e+247) class: Neg. norm. non-zero
; hwf : - 3695694094665481 820 (-1.27296e+247) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010000 #b1111111011100110000001101010001101101101101010110101)))
(assert (= y (fp #b0 #b00010011001 #b1001010000001001000110111110100100001110001100011011)))
(assert (= z (fp #b1 #b11100110011 #b1101001000010011011011010101101101100000011100001001)))
(assert (= r (fp #b1 #b11100110011 #b1101001000010011011011010101101101100000011100001001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
