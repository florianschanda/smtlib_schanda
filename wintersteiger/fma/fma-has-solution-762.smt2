(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.942527275608257664174516321509145200252532958984375p437 {- 4244765487215878 437 (-6.89406e+131)}
; Y = -1.12042199907153072757637346512638032436370849609375p231 {- 542332470145756 231 (-3.86643e+069)}
; Z = 1.6084179297348633053132971326704137027263641357421875p-217 {+ 2740070761639459 -217 (7.63642e-066)}
; -1.942527275608257664174516321509145200252532958984375p437 x -1.12042199907153072757637346512638032436370849609375p231 1.6084179297348633053132971326704137027263641357421875p-217 == 1.088225146693989398016810810077004134654998779296875p669
; [HW: 1.088225146693989398016810810077004134654998779296875p669] 

; mpf : + 397330737775758 669
; mpfd: + 397330737775758 669 (2.66554e+201) class: Pos. norm. non-zero
; hwf : + 397330737775758 669 (2.66554e+201) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110110100 #b1111000101001001011101111011000001010011010100000110)))
(assert (= y (fp #b1 #b10011100110 #b0001111011010011111110011110001110111011001011011100)))
(assert (= z (fp #b0 #b01100100110 #b1001101111000001010001110000011010000010111000100011)))
(assert (= r (fp #b0 #b11010011100 #b0001011010010101111011000101011110111100010010001110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
