(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0093257022200730066430196529836393892765045166015625p-916 {- 41999229043289 -916 (-1.82203e-276)}
; Y = -1.5590349278760096130014289883547462522983551025390625p-496 {- 2517669492869489 -496 (-7.6204e-150)}
; Z = 1.41067771915701545282217921339906752109527587890625p72 {+ 1849528022964900 72 (6.66174e+021)}
; -1.0093257022200730066430196529836393892765045166015625p-916 x -1.5590349278760096130014289883547462522983551025390625p-496 1.41067771915701545282217921339906752109527587890625p72 == 1.41067771915701545282217921339906752109527587890625p72
; [HW: 1.41067771915701545282217921339906752109527587890625p72] 

; mpf : + 1849528022964900 72
; mpfd: + 1849528022964900 72 (6.66174e+021) class: Pos. norm. non-zero
; hwf : + 1849528022964900 72 (6.66174e+021) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001101011 #b0000001001100011001010110101001000001100001001011001)))
(assert (= y (fp #b1 #b01000001111 #b1000111100011100111010011011110010001100100101110001)))
(assert (= z (fp #b0 #b10001000111 #b0110100100100010001011001100110011111001101010100100)))
(assert (= r (fp #b0 #b10001000111 #b0110100100100010001011001100110011111001101010100100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
