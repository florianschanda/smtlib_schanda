(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7142403975799023196913140054675750434398651123046875p-536 {- 3216652788393803 -536 (-7.62069e-162)}
; Y = -1.8481605275509485064588943714625202119350433349609375p-788 {- 3819775435828815 -788 (-1.13528e-237)}
; Z = -1.030946906121013473267566951108165085315704345703125p756 {- 139372474874866 756 (-3.90763e+227)}
; -1.7142403975799023196913140054675750434398651123046875p-536 x -1.8481605275509485064588943714625202119350433349609375p-788 -1.030946906121013473267566951108165085315704345703125p756 == -1.0309469061210132512229620260768570005893707275390625p756
; [HW: -1.0309469061210132512229620260768570005893707275390625p756] 

; mpf : - 139372474874865 756
; mpfd: - 139372474874865 756 (-3.90763e+227) class: Neg. norm. non-zero
; hwf : - 139372474874865 756 (-3.90763e+227) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111100111 #b1011011011011000011101010110110100010110011101001011)))
(assert (= y (fp #b1 #b00011101011 #b1101100100100001000011000101111110010110111001001111)))
(assert (= z (fp #b1 #b11011110011 #b0000011111101100001000101110110110110011101111110010)))
(assert (= r (fp #b1 #b11011110011 #b0000011111101100001000101110110110110011101111110001)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
