(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.274081526672001363209574265056289732456207275390625p180 {+ 1234353461389162 180 (1.95252e+054)}
; Y = 1.2011253983746963402978735757642425596714019775390625p-991 {+ 905788269175025 -991 (5.73935e-299)}
; Z = -1.5421250085472160140653841153834946453571319580078125p85 {- 2441513986481469 85 (-5.96581e+025)}
; 1.274081526672001363209574265056289732456207275390625p180 x 1.2011253983746963402978735757642425596714019775390625p-991 -1.5421250085472160140653841153834946453571319580078125p85 == -1.54212500854721579202077919035218656063079833984375p85
; [HW: -1.54212500854721579202077919035218656063079833984375p85] 

; mpf : - 2441513986481468 85
; mpfd: - 2441513986481468 85 (-5.96581e+025) class: Neg. norm. non-zero
; hwf : - 2441513986481468 85 (-5.96581e+025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010110011 #b0100011000101010001101001111100101111110011101101010)))
(assert (= y (fp #b0 #b00000100000 #b0011001101111100111101000100000001101010000011110001)))
(assert (= z (fp #b1 #b10001010100 #b1000101011001000101101000101111000001101110100111101)))
(assert (= r (fp #b1 #b10001010100 #b1000101011001000101101000101111000001101110100111100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
