(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6139912360324313311821242677979171276092529296875p-321 {- 2765170701804408 -321 (-3.77809e-097)}
; Y = -1.1211470454158811715927868135622702538967132568359375p-688 {- 545597788591999 -688 (-8.73023e-208)}
; Z = -1.42473995160610744648010950186289846897125244140625p-410 {- 1912858687782628 -410 (-5.38812e-124)}
; -1.6139912360324313311821242677979171276092529296875p-321 x -1.1211470454158811715927868135622702538967132568359375p-688 -1.42473995160610744648010950186289846897125244140625p-410 == -1.4247399516061072244355045768315903842449188232421875p-410
; [HW: -1.4247399516061072244355045768315903842449188232421875p-410] 

; mpf : - 1912858687782627 -410
; mpfd: - 1912858687782627 -410 (-5.38812e-124) class: Neg. norm. non-zero
; hwf : - 1912858687782627 -410 (-5.38812e-124) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010111110 #b1001110100101110100001111001011011001010001101111000)))
(assert (= y (fp #b1 #b00101001111 #b0001111100000011011111100010011000010001011101111111)))
(assert (= z (fp #b1 #b01001100101 #b0110110010111011110000011110100101110011111011100100)))
(assert (= r (fp #b1 #b01001100101 #b0110110010111011110000011110100101110011111011100011)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
