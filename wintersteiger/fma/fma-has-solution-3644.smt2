(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.628119666600004844525528824306093156337738037109375p-659 {+ 2828799496443862 -659 (6.80643e-199)}
; Y = 1.127723292972043100945711557869799435138702392578125p769 {+ 575214574635426 769 (3.50162e+231)}
; Z = -1.9901935430634889456769087701104581356048583984375p353 {- 4459435271565400 353 (-3.6516e+106)}
; 1.628119666600004844525528824306093156337738037109375p-659 x 1.127723292972043100945711557869799435138702392578125p769 -1.9901935430634889456769087701104581356048583984375p353 == -1.9901935430634889456769087701104581356048583984375p353
; [HW: -1.9901935430634889456769087701104581356048583984375p353] 

; mpf : - 4459435271565400 353
; mpfd: - 4459435271565400 353 (-3.6516e+106) class: Neg. norm. non-zero
; hwf : - 4459435271565400 353 (-3.6516e+106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101101100 #b1010000011001100011100110101001000000101011111010110)))
(assert (= y (fp #b0 #b11100000000 #b0010000010110010011110010100011001000000100110100010)))
(assert (= z (fp #b1 #b10101100000 #b1111110101111101010100101111010000101011000001011000)))
(assert (= r (fp #b1 #b10101100000 #b1111110101111101010100101111010000101011000001011000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
