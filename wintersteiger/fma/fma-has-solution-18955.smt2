(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.025433090126632418304097882355563342571258544921875p597 {- 114540455217182 597 (-5.31881e+179)}
; Y = -1.0658380016315760485667851753532886505126953125p-231 {- 296507999614784 -231 (-3.0886e-070)}
; Z = 1.0496605209311284934159402837394736707210540771484375p324 {+ 223651103560455 324 (3.5873e+097)}
; -1.025433090126632418304097882355563342571258544921875p597 x -1.0658380016315760485667851753532886505126953125p-231 1.0496605209311284934159402837394736707210540771484375p324 == 1.092945555587700567912179394625127315521240234375p366
; [HW: 1.092945555587700567912179394625127315521240234375p366] 

; mpf : + 418589569510512 366
; mpfd: + 418589569510512 366 (1.64277e+110) class: Pos. norm. non-zero
; hwf : + 418589569510512 366 (1.64277e+110) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010100 #b0000011010000010110010000111001001010100100000011110)))
(assert (= y (fp #b1 #b01100011000 #b0001000011011010110000100101111111010111011101000000)))
(assert (= z (fp #b0 #b10101000011 #b0000110010110110100011010100100101001101001100000111)))
(assert (= r (fp #b0 #b10101101101 #b0001011111001011010001111010100110001110110001110000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
