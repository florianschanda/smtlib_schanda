(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6549841485631040516324219424859620630741119384765625p308 {+ 2949786367402377 308 (8.63043e+092)}
; Y = -1.68382621771890850226327529526315629482269287109375p541 {- 3079679499305052 541 (-1.21206e+163)}
; Z = -1.7706023750435644359413345227949321269989013671875p-215 {- 3470484569097016 -215 (-3.36257e-065)}
; 1.6549841485631040516324219424859620630741119384765625p308 x -1.68382621771890850226327529526315629482269287109375p541 -1.7706023750435644359413345227949321269989013671875p-215 == -1.3933528496298797083596809898153878748416900634765625p850
; [HW: -1.3933528496298797083596809898153878748416900634765625p850] 

; mpf : - 1771503747018249 850
; mpfd: - 1771503747018249 850 (-1.04606e+256) class: Neg. norm. non-zero
; hwf : - 1771503747018249 850 (-1.04606e+256) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100110011 #b1010011110101101000010101000100101111010000110001001)))
(assert (= y (fp #b1 #b11000011100 #b1010111100001111001111000010100101000000000001011100)))
(assert (= z (fp #b1 #b01100101000 #b1100010101000110001100100111111100001000001100111000)))
(assert (= r (fp #b1 #b11101010001 #b0110010010110010110001011011100011110010111000001001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
