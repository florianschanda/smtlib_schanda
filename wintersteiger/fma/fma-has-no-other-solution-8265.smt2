(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.71354488162226203940008417703211307525634765625p172 {- 3213520462986144 172 (-1.02578e+052)}
; Y = -1.6938859902576826055309311414021067321300506591796875p523 {- 3124984687162107 523 (-4.65127e+157)}
; Z = -1.3534188785141954003421460583922453224658966064453125p445 {- 1591657129582229 445 (-1.22965e+134)}
; -1.71354488162226203940008417703211307525634765625p172 x -1.6938859902576826055309311414021067321300506591796875p523 -1.3534188785141954003421460583922453224658966064453125p445 == 1.4512748343288544017326557877822779119014739990234375p696
; [HW: 1.4512748343288544017326557877822779119014739990234375p696] 

; mpf : + 2032361175725111 696
; mpfd: + 2032361175725111 696 (4.77119e+209) class: Pos. norm. non-zero
; hwf : + 2032361175725111 696 (4.77119e+209) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010101011 #b1011011010101010111000001001101011001011101110100000)))
(assert (= y (fp #b1 #b11000001010 #b1011000110100010100000110010001101001111001011111011)))
(assert (= z (fp #b1 #b10110111100 #b0101101001111001101010001101110100000001111010010101)))
(assert (= r (fp #b0 #b11010110111 #b0111001110000110101111110101111011110011010000110111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
