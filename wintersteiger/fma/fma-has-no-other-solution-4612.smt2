(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = +zero {+ 0 -1023 (0)}
; Y = 1.0481042997026992491527153106289915740489959716796875p-134 {+ 216642506215995 -134 (4.81266e-041)}
; Z = 1.730814960788746414976913001737557351589202880859375p867 {+ 3291297985084982 867 (1.70317e+261)}
; +zero x 1.0481042997026992491527153106289915740489959716796875p-134 1.730814960788746414976913001737557351589202880859375p867 == 1.730814960788746414976913001737557351589202880859375p867
; [HW: 1.730814960788746414976913001737557351589202880859375p867] 

; mpf : + 3291297985084982 867
; mpfd: + 3291297985084982 867 (1.70317e+261) class: Pos. norm. non-zero
; hwf : + 3291297985084982 867 (1.70317e+261) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b0 #b01101111001 #b0000110001010000100100000011101000000101001000111011)))
(assert (= z (fp #b0 #b11101100010 #b1011101100010110101100000111010000000011111000110110)))
(assert (= r (fp #b0 #b11101100010 #b1011101100010110101100000111010000000011111000110110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
