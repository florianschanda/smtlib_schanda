(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.83000753926267289983798036701045930385589599609375p595 {+ 3738021644538076 595 (2.37301e+179)}
; Y = -1.060588422536331787426888695335946977138519287109375p615 {- 272865997157590 615 (-1.4421e+185)}
; Z = 1.2457320307343857646031892727478407323360443115234375p-670 {+ 1106678682048375 -670 (2.54289e-202)}
; 1.83000753926267289983798036701045930385589599609375p595 x -1.060588422536331787426888695335946977138519287109375p615 1.2457320307343857646031892727478407323360443115234375p-670 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001010010 #b1101010001111011010111111100010010010001000011011100)))
(assert (= y (fp #b1 #b11001100110 #b0000111110000010101110010000110101001111010011010110)))
(assert (= z (fp #b0 #b00101100001 #b0011111011101000010010110101101110010101011101110111)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
