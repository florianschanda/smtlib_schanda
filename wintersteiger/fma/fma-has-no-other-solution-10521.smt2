(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3195796665266403824290364354965277016162872314453125p193 {- 1439258867084565 193 (-1.65663e+058)}
; Y = 1.5371702381391740832583536757738329470157623291015625p-866 {+ 2419199684318105 -866 (3.12425e-261)}
; Z = -1.4414513816410927660172092146240174770355224609375p-87 {- 1988120277861016 -87 (-9.31516e-027)}
; -1.3195796665266403824290364354965277016162872314453125p193 x 1.5371702381391740832583536757738329470157623291015625p-866 -1.4414513816410927660172092146240174770355224609375p-87 == -1.4414513816410927660172092146240174770355224609375p-87
; [HW: -1.4414513816410927660172092146240174770355224609375p-87] 

; mpf : - 1988120277861016 -87
; mpfd: - 1988120277861016 -87 (-9.31516e-027) class: Neg. norm. non-zero
; hwf : - 1988120277861016 -87 (-9.31516e-027) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011000000 #b0101000111001111111110010001100000110010110100010101)))
(assert (= y (fp #b0 #b00010011101 #b1000100110000011111111010001110100110001001110011001)))
(assert (= z (fp #b1 #b01110101000 #b0111000100000010111101010010111011101100001010011000)))
(assert (= r (fp #b1 #b01110101000 #b0111000100000010111101010010111011101100001010011000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
