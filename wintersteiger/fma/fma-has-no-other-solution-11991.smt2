(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.149910577824106550082206013030372560024261474609375p982 {- 675137222427542 982 (-4.70024e+295)}
; Y = -1.3222788460908210250721595002687536180019378662109375p-628 {- 1451414891164015 -628 (-1.1871e-189)}
; Z = -1.1044325896180022805737053204211406409740447998046875p-173 {- 470322571688971 -173 (-9.22465e-053)}
; -1.149910577824106550082206013030372560024261474609375p982 x -1.3222788460908210250721595002687536180019378662109375p-628 -1.1044325896180022805737053204211406409740447998046875p-173 == 1.5205024319528888110397701893816702067852020263671875p354
; [HW: 1.5205024319528888110397701893816702067852020263671875p354] 

; mpf : + 2344134558588467 354
; mpfd: + 2344134558588467 354 (5.57963e+106) class: Pos. norm. non-zero
; hwf : + 2344134558588467 354 (5.57963e+106) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111010101 #b0010011001100000100010100010010100010100001110010110)))
(assert (= y (fp #b1 #b00110001011 #b0101001010000000110111011101000000100111000101101111)))
(assert (= z (fp #b1 #b01101010010 #b0001101010111100000110000001110100001011110000001011)))
(assert (= r (fp #b0 #b10101100001 #b1000010100111111101001011011101010111001111000110011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
