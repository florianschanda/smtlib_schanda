(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.595964082513864124024394186562858521938323974609375p-193 {- 2683983619935638 -193 (-1.27126e-058)}
; Y = 1.678844166743283405907050109817646443843841552734375p625 {+ 3057242336387686 625 (2.33753e+188)}
; Z = -1.899219800942083313799457755521871149539947509765625p-922 {- 4049725960446938 -922 (-5.35697e-278)}
; -1.595964082513864124024394186562858521938323974609375p-193 x 1.678844166743283405907050109817646443843841552734375p625 -1.899219800942083313799457755521871149539947509765625p-922 == -1.3396874951300983269675271003507077693939208984375p433
; [HW: -1.3396874951300983269675271003507077693939208984375p433] 

; mpf : - 1529816476490328 433
; mpfd: - 1529816476490328 433 (-2.97161e+130) class: Neg. norm. non-zero
; hwf : - 1529816476490328 433 (-2.97161e+130) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100111110 #b1001100010010001000110100010001111111100110110010110)))
(assert (= y (fp #b0 #b11001110000 #b1010110111001000101110110011011100111110001001100110)))
(assert (= z (fp #b1 #b00001100101 #b1110011000110011010001001101010011110110001111011010)))
(assert (= r (fp #b1 #b10110110000 #b0101011011110101110000100111101001110001101001011000)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
