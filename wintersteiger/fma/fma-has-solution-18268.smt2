(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.711114562768766944600429269485175609588623046875p-708 {- 3202575279903152 -708 (-1.2707e-213)}
; Y = -1.12164948725657875883143788087181746959686279296875p103 {- 547860585478540 103 (-1.13749e+031)}
; Z = 1.0364992866670572624343549250625073909759521484375p842 {+ 164378173833048 842 (3.03966e+253)}
; -1.711114562768766944600429269485175609588623046875p-708 x -1.12164948725657875883143788087181746959686279296875p103 1.0364992866670572624343549250625073909759521484375p842 == 1.0364992866670572624343549250625073909759521484375p842
; [HW: 1.0364992866670572624343549250625073909759521484375p842] 

; mpf : + 164378173833048 842
; mpfd: + 164378173833048 842 (3.03966e+253) class: Pos. norm. non-zero
; hwf : + 164378173833048 842 (3.03966e+253) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100111011 #b1011011000001011100110101001111011001101000110110000)))
(assert (= y (fp #b1 #b10001100110 #b0001111100100100011010111011100101010111100110001100)))
(assert (= z (fp #b0 #b11101001001 #b0000100101011000000001000110101010001111111101011000)))
(assert (= r (fp #b0 #b11101001001 #b0000100101011000000001000110101010001111111101011000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
