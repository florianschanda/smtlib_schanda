(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.346101338557262661055347052752040326595306396484375p885 {+ 1558701859358918 885 (3.47235e+266)}
; Y = 1.991602424572287421966620968305505812168121337890625p-508 {+ 4465780309803434 -508 (2.37665e-153)}
; Z = -1.37129759712114474012878417852334678173065185546875p-857 {- 1672175720038348 -857 (-1.427e-258)}
; 1.346101338557262661055347052752040326595306396484375p885 x 1.991602424572287421966620968305505812168121337890625p-508 -1.37129759712114474012878417852334678173065185546875p-857 == 1.3404493447953227391877817353815771639347076416015625p378
; [HW: 1.3404493447953227391877817353815771639347076416015625p378] 

; mpf : + 1533247542358745 378
; mpfd: + 1533247542358745 378 (8.25256e+113) class: Pos. norm. non-zero
; hwf : + 1533247542358745 378 (8.25256e+113) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101110100 #b0101100010011010000110001110101000110100100011000110)))
(assert (= y (fp #b0 #b01000000011 #b1111110111011001101010000001000000101100000110101010)))
(assert (= z (fp #b1 #b00010100110 #b0101111100001101010110111111110010110111111111001100)))
(assert (= r (fp #b0 #b10101111001 #b0101011100100111101100000011000111010111001011011001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
