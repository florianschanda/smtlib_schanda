(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.340429414422356302338812383823096752166748046875p302 {+ 1533157783938480 302 (1.0922e+091)}
; Y = 1.9055701682758454662547364932834170758724212646484375p-599 {+ 4078325472404935 -599 (9.18454e-181)}
; Z = 1.2078137680171761036973521186155267059803009033203125p-127 {+ 935910008204613 -127 (7.09889e-039)}
; 1.340429414422356302338812383823096752166748046875p302 x 1.9055701682758454662547364932834170758724212646484375p-599 1.2078137680171761036973521186155267059803009033203125p-127 == 1.207813768017176325741957043646834790706634521484375p-127
; [HW: 1.207813768017176325741957043646834790706634521484375p-127] 

; mpf : + 935910008204614 -127
; mpfd: + 935910008204614 -127 (7.09889e-039) class: Pos. norm. non-zero
; hwf : + 935910008204614 -127 (7.09889e-039) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101101 #b0101011100100110011000011101000110001010010110110000)))
(assert (= y (fp #b0 #b00110101000 #b1110011111010011011100100101000011111010010111000111)))
(assert (= z (fp #b0 #b01110000000 #b0011010100110011010010000111100101001010110101000101)))
(assert (= r (fp #b0 #b01110000000 #b0011010100110011010010000111100101001010110101000110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
