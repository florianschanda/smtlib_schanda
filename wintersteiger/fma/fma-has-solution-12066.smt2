(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.529923449113947508948285758378915488719940185546875p-440 {+ 2386563047964462 -440 (5.38855e-133)}
; Y = -1.12413205965837192934486665762960910797119140625p-694 {- 559041097622176 -694 (-1.36773e-209)}
; Z = -1.3642885071375501215840131408185698091983795166015625p827 {- 1640609585000025 827 (-1.22099e+249)}
; 1.529923449113947508948285758378915488719940185546875p-440 x -1.12413205965837192934486665762960910797119140625p-694 -1.3642885071375501215840131408185698091983795166015625p827 == -1.3642885071375501215840131408185698091983795166015625p827
; [HW: -1.3642885071375501215840131408185698091983795166015625p827] 

; mpf : - 1640609585000025 827
; mpfd: - 1640609585000025 827 (-1.22099e+249) class: Neg. norm. non-zero
; hwf : - 1640609585000025 827 (-1.22099e+249) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001000111 #b1000011110101001000100000010101101010011111100101110)))
(assert (= y (fp #b1 #b00101001001 #b0001111111000111000111100110000010011110001010100000)))
(assert (= z (fp #b1 #b11100111010 #b0101110101000010000000101111100001110110111001011001)))
(assert (= r (fp #b1 #b11100111010 #b0101110101000010000000101111100001110110111001011001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
