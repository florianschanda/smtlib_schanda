(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4686533337989267078427246815408580005168914794921875p977 {- 2110626979462787 977 (-1.87597e+294)}
; Y = 1.053705423591918322046012690407223999500274658203125p756 {+ 241867725676338 756 (3.99389e+227)}
; Z = -1.3166362665483493099571887796628288924694061279296875p513 {- 1426002972039131 513 (-3.53064e+154)}
; -1.4686533337989267078427246815408580005168914794921875p977 x 1.053705423591918322046012690407223999500274658203125p756 -1.3166362665483493099571887796628288924694061279296875p513 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111010000 #b0111011111111001101010100011010111010011111010000011)))
(assert (= y (fp #b0 #b11011110011 #b0000110110111111101000110111110111110001111100110010)))
(assert (= z (fp #b1 #b11000000000 #b0101000100001111000100110000100110001101011111011011)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
