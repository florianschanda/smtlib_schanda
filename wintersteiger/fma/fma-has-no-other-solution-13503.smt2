(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.270007702738568777789396335720084607601165771484375p538 {- 1216006589440582 538 (-1.14273e+162)}
; Y = -1.87857547531598267909203059389255940914154052734375p113 {- 3956752183249916 113 (-1.95082e+034)}
; Z = 1.3769334361473071215442587345023639500141143798828125p-196 {+ 1697557282576493 -196 (1.37099e-059)}
; -1.270007702738568777789396335720084607601165771484375p538 x -1.87857547531598267909203059389255940914154052734375p113 1.3769334361473071215442587345023639500141143798828125p-196 == 1.19290266191353300229138767463155090808868408203125p652
; [HW: 1.19290266191353300229138767463155090808868408203125p652] 

; mpf : + 868756356312564 652
; mpfd: + 868756356312564 652 (2.22927e+196) class: Pos. norm. non-zero
; hwf : + 868756356312564 652 (2.22927e+196) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000011001 #b0100010100011111001110011000110011101110001001000110)))
(assert (= y (fp #b1 #b10001110000 #b1110000011101010010100101000010110001100101111111100)))
(assert (= z (fp #b0 #b01100111011 #b0110000001111110101101011010110100000101100001101101)))
(assert (= r (fp #b0 #b11010001011 #b0011000101100010000100011010000000111010110111110100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
