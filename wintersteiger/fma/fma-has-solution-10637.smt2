(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5819796117890672082495484573883004486560821533203125p-52 {- 2621003162790469 -52 (-3.5127e-016)}
; Y = 1.1910212496611658483658402474247850477695465087890625p-330 {+ 860283228793873 -330 (5.44529e-100)}
; Z = -1.2187299706372420882161122790421359241008758544921875p629 {- 985072214256643 629 (-2.71503e+189)}
; -1.5819796117890672082495484573883004486560821533203125p-52 x 1.1910212496611658483658402474247850477695465087890625p-330 -1.2187299706372420882161122790421359241008758544921875p629 == -1.21872997063724231026071720407344400882720947265625p629
; [HW: -1.21872997063724231026071720407344400882720947265625p629] 

; mpf : - 985072214256644 629
; mpfd: - 985072214256644 629 (-2.71503e+189) class: Neg. norm. non-zero
; hwf : - 985072214256644 629 (-2.71503e+189) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111001011 #b1001010011111100100111011010011110010010101001000101)))
(assert (= y (fp #b0 #b01010110101 #b0011000011100110110001001100010000100010110000010001)))
(assert (= z (fp #b1 #b11001110100 #b0011011111111110101011111111011010001010110000000011)))
(assert (= r (fp #b1 #b11001110100 #b0011011111111110101011111111011010001010110000000100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
