(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.91497619066353674810443408205173909664154052734375p343 {- 4120686431325180 343 (-3.43125e+103)}
; Y = 1.9656033714706298010099772000103257596492767333984375p-505 {+ 4348690983942823 -505 (1.8765e-152)}
; Z = -1.857136555638156938385918692802079021930694580078125p-291 {- 3860199872577634 -291 (-4.66783e-088)}
; -1.91497619066353674810443408205173909664154052734375p343 x 1.9656033714706298010099772000103257596492767333984375p-505 -1.857136555638156938385918692802079021930694580078125p-291 == -1.8820418283271156401070811625686474144458770751953125p-161
; [HW: -1.8820418283271156401070811625686474144458770751953125p-161] 

; mpf : - 3972363249379189 -161
; mpfd: - 3972363249379189 -161 (-6.43873e-049) class: Neg. norm. non-zero
; hwf : - 3972363249379189 -161 (-6.43873e-049) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010110 #b1110101000111011111000010010111110000100101111111100)))
(assert (= y (fp #b0 #b01000000110 #b1111011100110001110010000101010101011111101010100111)))
(assert (= z (fp #b1 #b01011011100 #b1101101101101101010011010010001010101100000001100010)))
(assert (= r (fp #b1 #b01101011110 #b1110000111001101011111100100011001011110011101110101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
