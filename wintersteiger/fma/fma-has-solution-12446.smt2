(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2157552332497656433218935490003786981105804443359375p-176 {+ 971675188066879 -176 (1.26931e-053)}
; Y = 1.97566011626288418057129092630930244922637939453125p-121 {+ 4393982536041780 -121 (7.43161e-037)}
; Z = -1.49193957908727004024740381282754242420196533203125p-198 {- 2215498905066228 -198 (-3.71375e-060)}
; 1.2157552332497656433218935490003786981105804443359375p-176 x 1.97566011626288418057129092630930244922637939453125p-121 -1.49193957908727004024740381282754242420196533203125p-198 == -1.49193957908727004024740381282754242420196533203125p-198
; [HW: -1.49193957908727004024740381282754242420196533203125p-198] 

; mpf : - 2215498905066228 -198
; mpfd: - 2215498905066228 -198 (-3.71375e-060) class: Neg. norm. non-zero
; hwf : - 2215498905066228 -198 (-3.71375e-060) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001111 #b0011011100111011101111000010011010111111101000111111)))
(assert (= y (fp #b0 #b01110000110 #b1111100111000100110111001000001101011100010100110100)))
(assert (= z (fp #b1 #b01100111001 #b0111110111101111110000001001001111001001101011110100)))
(assert (= r (fp #b1 #b01100111001 #b0111110111101111110000001001001111001001101011110100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
