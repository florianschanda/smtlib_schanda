(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0851453352174000865915104441228322684764862060546875p503 {+ 383460499957419 503 (2.84168e+151)}
; Y = -1.306775895912441587398689080146141350269317626953125p88 {- 1381595810517522 88 (-4.04428e+026)}
; Z = -1.5753692528517191373538253174046985805034637451171875p-905 {- 2591232752743443 -905 (-5.8242e-273)}
; 1.0851453352174000865915104441228322684764862060546875p503 x -1.306775895912441587398689080146141350269317626953125p88 -1.5753692528517191373538253174046985805034637451171875p-905 == -1.4180417676239247537495202777790836989879608154296875p591
; [HW: -1.4180417676239247537495202777790836989879608154296875p591] 

; mpf : - 1882692748896411 591
; mpfd: - 1882692748896411 591 (-1.14926e+178) class: Neg. norm. non-zero
; hwf : - 1882692748896411 591 (-1.14926e+178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111110110 #b0001010111001100000101011010111000101010011010101011)))
(assert (= y (fp #b1 #b10001010111 #b0100111010001000110111010111100000100101001000010010)))
(assert (= z (fp #b1 #b00001110110 #b1001001101001011011001100011110000011111010000010011)))
(assert (= r (fp #b1 #b11001001110 #b0110101100000100110010010000100001001110100010011011)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
