(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3836441497624838437019434422836638987064361572265625p-814 {- 1727779649913193 -814 (-1.26651e-245)}
; Y = -1.7560932428322304499346273587434552609920501708984375p24 {- 3405141246676583 24 (-2.94624e+007)}
; Z = 1.9866077609415808691295524113229475915431976318359375p477 {+ 4443286344537343 477 (7.75211e+143)}
; -1.3836441497624838437019434422836638987064361572265625p-814 x -1.7560932428322304499346273587434552609920501708984375p24 1.9866077609415808691295524113229475915431976318359375p477 == 1.9866077609415808691295524113229475915431976318359375p477
; [HW: 1.9866077609415808691295524113229475915431976318359375p477] 

; mpf : + 4443286344537343 477
; mpfd: + 4443286344537343 477 (7.75211e+143) class: Pos. norm. non-zero
; hwf : + 4443286344537343 477 (7.75211e+143) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010001 #b0110001000110110100000001100010010001000000101101001)))
(assert (= y (fp #b1 #b10000010111 #b1100000110001111010100111010011010110000111001100111)))
(assert (= z (fp #b0 #b10111011100 #b1111110010010010010100111000001100111001010011111111)))
(assert (= r (fp #b0 #b10111011100 #b1111110010010010010100111000001100111001010011111111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
