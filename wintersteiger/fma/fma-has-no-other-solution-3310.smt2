(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.46937297116510467986927324091084301471710205078125p485 {- 2113867938036948 485 (-1.46784e+146)}
; Y = -1.373213600882333906838539405725896358489990234375p-471 {- 1680804633863280 -471 (-2.25222e-142)}
; Z = 1.3410826190207651986696646417840383946895599365234375p512 {+ 1536099555924471 512 (1.7981e+154)}
; -1.46937297116510467986927324091084301471710205078125p485 x -1.373213600882333906838539405725896358489990234375p-471 1.3410826190207651986696646417840383946895599365234375p512 == 1.3410826190207651986696646417840383946895599365234375p512
; [HW: 1.3410826190207651986696646417840383946895599365234375p512] 

; mpf : + 1536099555924471 512
; mpfd: + 1536099555924471 512 (1.7981e+154) class: Pos. norm. non-zero
; hwf : + 1536099555924471 512 (1.7981e+154) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111100100 #b0111100000101000110100111011100011000111110011010100)))
(assert (= y (fp #b1 #b01000101000 #b0101111110001010111011010011001000110110010001110000)))
(assert (= z (fp #b0 #b10111111111 #b0101011101010001001100001100010111101101100111110111)))
(assert (= r (fp #b0 #b10111111111 #b0101011101010001001100001100010111101101100111110111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
