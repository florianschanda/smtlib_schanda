(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9772300379558316318906463493476621806621551513671875p777 {+ 4401052834793139 777 (1.57168e+234)}
; Y = -1.9657580356763084683535680596833117306232452392578125p876 {- 4349387529601885 876 (-9.9039e+263)}
; Z = 1.79466493170064023132681541028432548046112060546875p-819 {+ 3578852690291404 -819 (5.13354e-247)}
; 1.9772300379558316318906463493476621806621551513671875p777 x -1.9657580356763084683535680596833117306232452392578125p876 1.79466493170064023132681541028432548046112060546875p-819 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100001000 #b1111101000101011101111110110110110110000011010110011)))
(assert (= y (fp #b1 #b11101101011 #b1111011100111011111010110010101100010100001101011101)))
(assert (= z (fp #b0 #b00011001100 #b1100101101101111001010010011010011101110101011001100)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
