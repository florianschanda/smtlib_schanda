(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5567824959539515727868774774833582341670989990234375p-474 {- 2507525441304631 -474 (-3.19161e-143)}
; Y = -1.9355216939916786156317130007664673030376434326171875p921 {- 4213215152457939 921 (-3.43103e+277)}
; Z = 1.0391062138000168868501305041718296706676483154296875p481 {+ 176118729897627 481 (6.48766e+144)}
; -1.5567824959539515727868774774833582341670989990234375p-474 x -1.9355216939916786156317130007664673030376434326171875p921 1.0391062138000168868501305041718296706676483154296875p481 == 1.03910621397540747778975855908356606960296630859375p481
; [HW: 1.03910621397540747778975855908356606960296630859375p481] 

; mpf : + 176118730687516 481
; mpfd: + 176118730687516 481 (6.48766e+144) class: Pos. norm. non-zero
; hwf : + 176118730687516 481 (6.48766e+144) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000100101 #b1000111010001001010011000011001100011011100000110111)))
(assert (= y (fp #b1 #b11110011000 #b1110111101111110010110011000100001100100100011010011)))
(assert (= z (fp #b0 #b10111100000 #b0000101000000010110111010110010101010111011010011011)))
(assert (= r (fp #b0 #b10111100000 #b0000101000000010110111010110011000011000010000011100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
