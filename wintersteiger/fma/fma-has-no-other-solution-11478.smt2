(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.064550429165823430821546935476362705230712890625p166 {- 290709288737808 166 (-9.95739e+049)}
; Y = -1.5563585424060217832220587297342717647552490234375p456 {- 2505616124264152 456 (-2.89593e+137)}
; Z = -1.9539396070855807874266929502482526004314422607421875p746 {- 4296162059004579 746 (-7.23249e+224)}
; -1.064550429165823430821546935476362705230712890625p166 x -1.5563585424060217832220587297342717647552490234375p456 -1.9539396070855807874266929502482526004314422607421875p746 == -1.953939607085580565382088025216944515705108642578125p746
; [HW: -1.953939607085580565382088025216944515705108642578125p746] 

; mpf : - 4296162059004578 746
; mpfd: - 4296162059004578 746 (-7.23249e+224) class: Neg. norm. non-zero
; hwf : - 4296162059004578 746 (-7.23249e+224) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010100101 #b0001000010000110011000000111111000110101110000010000)))
(assert (= y (fp #b1 #b10111000111 #b1000111001101101100000110111000001111011111011011000)))
(assert (= z (fp #b1 #b11011101001 #b1111010000110101011000101101011011001010101010100011)))
(assert (= r (fp #b1 #b11011101001 #b1111010000110101011000101101011011001010101010100010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
