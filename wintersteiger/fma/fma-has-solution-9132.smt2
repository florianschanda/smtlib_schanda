(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3978947005034638717546613406739197671413421630859375p992 {+ 1791958424920095 992 (5.851e+298)}
; Y = -1.0364858700326333718066962319426238536834716796875p873 {- 164317750683256 873 (-6.52754e+262)}
; Z = 1.810074494307154946426408059778623282909393310546875p360 {+ 3648251190704046 360 (4.25104e+108)}
; 1.3978947005034638717546613406739197671413421630859375p992 x -1.0364858700326333718066962319426238536834716796875p873 1.810074494307154946426408059778623282909393310546875p360 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111011111 #b0110010111011100011011010101010111101010000000011111)))
(assert (= y (fp #b1 #b11101101000 #b0000100101010111001000110101001010001110011001111000)))
(assert (= z (fp #b0 #b10101100111 #b1100111101100001000010101100010001011111011110101110)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
