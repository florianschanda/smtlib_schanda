(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4559953068299507084049082550336606800556182861328125p399 {+ 2053620293922061 399 (1.87987e+120)}
; Y = 1.0392571001427211019318974649650044739246368408203125p-307 {+ 176798261574405 -307 (3.98579e-093)}
; Z = 1.908111368204297608741626390838064253330230712890625p250 {+ 4089770019455786 250 (3.45225e+075)}
; 1.4559953068299507084049082550336606800556182861328125p399 x 1.0392571001427211019318974649650044739246368408203125p-307 1.908111368204297608741626390838064253330230712890625p250 == 1.908111368204297608741626390838064253330230712890625p250
; [HW: 1.908111368204297608741626390838064253330230712890625p250] 

; mpf : + 4089770019455786 250
; mpfd: + 4089770019455786 250 (3.45225e+075) class: Pos. norm. non-zero
; hwf : + 4089770019455786 250 (3.45225e+075) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110001110 #b0111010010111100000110111100000111110110110100001101)))
(assert (= y (fp #b0 #b01011001100 #b0000101000001100110000001101100100111111101100000101)))
(assert (= z (fp #b0 #b10011111001 #b1110100001111001111111001001001110010000001100101010)))
(assert (= r (fp #b0 #b10011111001 #b1110100001111001111111001001001110010000001100101010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
