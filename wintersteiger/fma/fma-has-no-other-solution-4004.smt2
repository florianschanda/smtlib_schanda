(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.59201479865244710509841752354986965656280517578125p48 {- 2666197626608980 48 (-4.48112e+014)}
; Y = -1.44296468191750282272778349579311907291412353515625p-672 {- 1994935576421956 -672 (-7.36374e-203)}
; Z = 1.289780017421538360622434993274509906768798828125p249 {+ 1305053178479056 249 (1.16677e+075)}
; -1.59201479865244710509841752354986965656280517578125p48 x -1.44296468191750282272778349579311907291412353515625p-672 1.289780017421538360622434993274509906768798828125p249 == 1.2897800174215385826670399183058179914951324462890625p249
; [HW: 1.2897800174215385826670399183058179914951324462890625p249] 

; mpf : + 1305053178479057 249
; mpfd: + 1305053178479057 249 (1.16677e+075) class: Pos. norm. non-zero
; hwf : + 1305053178479057 249 (1.16677e+075) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000101111 #b1001011110001110010010000010011011110101110101010100)))
(assert (= y (fp #b1 #b00101011111 #b0111000101100110001000100010011000011110011001000100)))
(assert (= z (fp #b0 #b10011111000 #b0100101000101111000001011111000111011100000111010000)))
(assert (= r (fp #b0 #b10011111000 #b0100101000101111000001011111000111011100000111010001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
