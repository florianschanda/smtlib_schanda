(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.524241074726143008177814408554695546627044677734375p-329 {+ 2360971908788966 -329 (1.39375e-099)}
; Y = 1.0162247516211950770781413666554726660251617431640625p-659 {+ 73069785355393 -659 (4.24837e-199)}
; Z = -1.5360738195273293538178904782398603856563568115234375p-818 {- 2414261853866359 -818 (-8.78771e-247)}
; 1.524241074726143008177814408554695546627044677734375p-329 x 1.0162247516211950770781413666554726660251617431640625p-659 -1.5360738195273293538178904782398603856563568115234375p-818 == -1.5360738195273293538178904782398603856563568115234375p-818
; [HW: -1.5360738195273293538178904782398603856563568115234375p-818] 

; mpf : - 2414261853866359 -818
; mpfd: - 2414261853866359 -818 (-8.78771e-247) class: Neg. norm. non-zero
; hwf : - 2414261853866359 -818 (-8.78771e-247) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010110110 #b1000011000110100101010011011111100101011001011100110)))
(assert (= y (fp #b0 #b00101101100 #b0000010000100111010011100010100110011001010010000001)))
(assert (= z (fp #b1 #b00011001101 #b1000100100111100001000100100001100011100100101110111)))
(assert (= r (fp #b1 #b00011001101 #b1000100100111100001000100100001100011100100101110111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
