(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3746066634481284296498415642417967319488525390625p-731 {+ 1687078429915496 -731 (1.21689e-220)}
; Y = -1.1742547664895950365604448961676098406314849853515625p70 {- 784773701430073 70 (-1.38632e+021)}
; Z = -1.7558235436206164337136215181089937686920166015625p252 {- 3403926629407656 252 (-1.27069e+076)}
; 1.3746066634481284296498415642417967319488525390625p-731 x -1.1742547664895950365604448961676098406314849853515625p70 -1.7558235436206164337136215181089937686920166015625p252 == -1.7558235436206164337136215181089937686920166015625p252
; [HW: -1.7558235436206164337136215181089937686920166015625p252] 

; mpf : - 3403926629407656 252
; mpfd: - 3403926629407656 252 (-1.27069e+076) class: Neg. norm. non-zero
; hwf : - 3403926629407656 252 (-1.27069e+076) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100100100 #b0101111111100110001110001110100001011111100101101000)))
(assert (= y (fp #b1 #b10001000101 #b0010110010011011111101011101101100111110101100111001)))
(assert (= z (fp #b1 #b10011111011 #b1100000101111101101001101101100101100101101110101000)))
(assert (= r (fp #b1 #b10011111011 #b1100000101111101101001101101100101100101101110101000)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
