(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4470941193357418352860577215324155986309051513671875p451 {- 2013532909239987 451 (-8.41443e+135)}
; Y = 1.8838929704418720945113818743266165256500244140625p-440 {+ 3980700052317416 -440 (6.63526e-133)}
; Z = 1.34621254258480060883584883413277566432952880859375p-243 {+ 1559202677775900 -243 (9.52412e-074)}
; -1.4470941193357418352860577215324155986309051513671875p451 x 1.8838929704418720945113818743266165256500244140625p-440 1.34621254258480060883584883413277566432952880859375p-243 == -1.363085219492187860623744199983775615692138671875p12
; [HW: -1.363085219492187860623744199983775615692138671875p12] 

; mpf : - 1635190459208752 12
; mpfd: - 1635190459208752 12 (-5583.2) class: Neg. norm. non-zero
; hwf : - 1635190459208752 12 (-5583.2) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111000010 #b0111001001110100110000101001110011000111111010110011)))
(assert (= y (fp #b0 #b01001000111 #b1110001001000110110011110100100100110110010011101000)))
(assert (= z (fp #b0 #b01100001100 #b0101100010100001011000101001101111011101111000011100)))
(assert (= r (fp #b1 #b10000001011 #b0101110011110011001001110010011101100001010000110000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
