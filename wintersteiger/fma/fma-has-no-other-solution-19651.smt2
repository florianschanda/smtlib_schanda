(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1229526348891052389689093615743331611156463623046875p-173 {- 553729440670795 -173 (-9.37934e-053)}
; Y = 1.613289667420397588415426071151159703731536865234375p396 {+ 2762011117664678 396 (2.6037e+119)}
; Z = 1.504910271897633489146528518176637589931488037109375p85 {+ 2273913712373718 85 (5.82184e+025)}
; -1.1229526348891052389689093615743331611156463623046875p-173 x 1.613289667420397588415426071151159703731536865234375p396 1.504910271897633489146528518176637589931488037109375p85 == -1.8116478828691036095932531679864041507244110107421875p223
; [HW: -1.8116478828691036095932531679864041507244110107421875p223] 

; mpf : - 3655337102845347 223
; mpfd: - 3655337102845347 223 (-2.4421e+067) class: Neg. norm. non-zero
; hwf : - 3655337102845347 223 (-2.4421e+067) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101010010 #b0001111101111001110100101110100111001110010001001011)))
(assert (= y (fp #b0 #b10110001011 #b1001110100000000100011010011100010001011100110100110)))
(assert (= z (fp #b0 #b10001010100 #b1000000101000001110011001011000100110110111111010110)))
(assert (= r (fp #b1 #b10011011110 #b1100111111001000001001111101100011001010010110100011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
