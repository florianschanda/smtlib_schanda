(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4871504016162553352131681094761006534099578857421875p-211 {+ 2193930367192355 -211 (4.51883e-064)}
; Y = -1.31992510741543522811980437836609780788421630859375p-1020 {- 1440814594542620 -1020 (-1.17477e-307)}
; Z = 1.0741576887885049274018456344492733478546142578125p-467 {+ 333976539594568 -467 (2.81877e-141)}
; 1.4871504016162553352131681094761006534099578857421875p-211 x -1.31992510741543522811980437836609780788421630859375p-1020 1.0741576887885049274018456344492733478546142578125p-467 == 1.0741576887885047053572407094179652631282806396484375p-467
; [HW: 1.0741576887885047053572407094179652631282806396484375p-467] 

; mpf : + 333976539594567 -467
; mpfd: + 333976539594567 -467 (2.81877e-141) class: Pos. norm. non-zero
; hwf : + 333976539594567 -467 (2.81877e-141) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100101100 #b0111110010110101111000111000001100101100110100100011)))
(assert (= y (fp #b1 #b00000000011 #b0101000111100110100111001010000110000100110000011100)))
(assert (= z (fp #b0 #b01000101100 #b0001001011111011111111111001000000010111111101001000)))
(assert (= r (fp #b0 #b01000101100 #b0001001011111011111111111001000000010111111101000111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
