(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5689602109497797766124449481139890849590301513671875p900 {+ 2562368994022067 900 (1.3262e+271)}
; Y = -1.6697518118856695679141921573318541049957275390625p-72 {- 3016294010439016 -72 (-3.53584e-022)}
; Z = -1.072891380540131667231662504491396248340606689453125p176 {- 328273594239058 176 (-1.02763e+053)}
; 1.5689602109497797766124449481139890849590301513671875p900 x -1.6697518118856695679141921573318541049957275390625p-72 -1.072891380540131667231662504491396248340606689453125p176 == -1.3098870775049584747051767408265732228755950927734375p829
; [HW: -1.3098870775049584747051767408265732228755950927734375p829] 

; mpf : - 1395607326778263 829
; mpfd: - 1395607326778263 829 (-4.68922e+249) class: Neg. norm. non-zero
; hwf : - 1395607326778263 829 (-4.68922e+249) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110000011 #b1001000110100111011000000101101011000001001010110011)))
(assert (= y (fp #b1 #b01110110111 #b1010101101110100110110101101000001111100010101101000)))
(assert (= z (fp #b1 #b10010101111 #b0001001010101001000000100110111110010100100001010010)))
(assert (= r (fp #b1 #b11100111100 #b0100111101010100110000100110111101010110001110010111)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
