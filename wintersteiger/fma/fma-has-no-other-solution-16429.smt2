(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8730028290096123466668132095946930348873138427734375p222 {- 3931655215421079 222 (-1.2624e+067)}
; Y = 1.462355989668604028253184878849424421787261962890625p-991 {+ 2082266262784042 -991 (6.98759e-299)}
; Z = -1.6974801615895298567693316726945340633392333984375p-86 {- 3141171395832920 -86 (-2.19394e-026)}
; -1.8730028290096123466668132095946930348873138427734375p222 x 1.462355989668604028253184878849424421787261962890625p-991 -1.6974801615895298567693316726945340633392333984375p-86 == -1.6974801615895300788139365977258421480655670166015625p-86
; [HW: -1.6974801615895300788139365977258421480655670166015625p-86] 

; mpf : - 3141171395832921 -86
; mpfd: - 3141171395832921 -86 (-2.19394e-026) class: Neg. norm. non-zero
; hwf : - 3141171395832921 -86 (-2.19394e-026) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011011101 #b1101111101111101000111010000011111101001011010010111)))
(assert (= y (fp #b0 #b00000100000 #b0111011001011100111101100100111010111100100000101010)))
(assert (= z (fp #b1 #b01110101001 #b1011001010001110000011110101001110100010110001011000)))
(assert (= r (fp #b1 #b01110101001 #b1011001010001110000011110101001110100010110001011001)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
