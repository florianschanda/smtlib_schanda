(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1758872502618640254468118655495345592498779296875p-1012 {- 792125754738552 -1012 (-2.67923e-305)}
; Y = -1.325307204606032573934726315201260149478912353515625p877 {- 1465053405444666 877 (-1.33544e+264)}
; Z = -1.321642392746582128637555797467939555644989013671875p-907 {- 1448548560120062 -907 (-1.22154e-273)}
; -1.1758872502618640254468118655495345592498779296875p-1012 x -1.325307204606032573934726315201260149478912353515625p877 -1.321642392746582128637555797467939555644989013671875p-907 == 1.55841184457642523142339996411465108394622802734375p-135
; [HW: 1.55841184457642523142339996411465108394622802734375p-135] 

; mpf : + 2514863375153660 -135
; mpfd: + 2514863375153660 -135 (3.57794e-041) class: Pos. norm. non-zero
; hwf : + 2514863375153660 -135 (3.57794e-041) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000001011 #b0010110100000110111100100110001110101000011101111000)))
(assert (= y (fp #b1 #b11101101100 #b0101001101000111010101010011110011101111101000111010)))
(assert (= z (fp #b1 #b00001110100 #b0101001001010111001001111110010111011010100011111110)))
(assert (= r (fp #b0 #b01101111000 #b1000111011110100000101000010001000100111100111111100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
