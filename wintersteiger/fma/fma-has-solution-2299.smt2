(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3384524073922643427891898681991733610630035400390625p-350 {+ 1524254135814449 -350 (5.83585e-106)}
; Y = 1.6884205922549953005074030443211086094379425048828125p396 {+ 3100370722753773 396 (2.72495e+119)}
; Z = -1.8889319839187823646398101118393242359161376953125p-498 {- 4003393751534344 -498 (-2.30823e-150)}
; 1.3384524073922643427891898681991733610630035400390625p-350 x 1.6884205922549953005074030443211086094379425048828125p396 -1.8889319839187823646398101118393242359161376953125p-498 == 1.129935303197185714196848493884317576885223388671875p47
; [HW: 1.129935303197185714196848493884317576885223388671875p47] 

; mpf : + 585176583061118 47
; mpfd: + 585176583061118 47 (1.59024e+014) class: Pos. norm. non-zero
; hwf : + 585176583061118 47 (1.59024e+014) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010100001 #b0101011010100100110100010010010100000000100100110001)))
(assert (= y (fp #b0 #b10110001011 #b1011000000111100010101001111100110100000110011101101)))
(assert (= z (fp #b1 #b01000001101 #b1110001110010001000010111110011101001100101100001000)))
(assert (= r (fp #b0 #b10000101110 #b0010000101000011011100001010010111010011111001111110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
