(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -zero {- 0 -1023 (-0)}
; Y = -1.30961251558752422852194285951554775238037109375p922 {- 1394370809829216 922 (-4.643e+277)}
; Z = -1.745995324410486215782611907343380153179168701171875p-669 {- 3359664265035198 -669 (-7.12814e-202)}
; -zero x -1.30961251558752422852194285951554775238037109375p922 -1.745995324410486215782611907343380153179168701171875p-669 == -1.745995324410486215782611907343380153179168701171875p-669
; [HW: -1.745995324410486215782611907343380153179168701171875p-669] 

; mpf : - 3359664265035198 -669
; mpfd: - 3359664265035198 -669 (-7.12814e-202) class: Neg. norm. non-zero
; hwf : - 3359664265035198 -669 (-7.12814e-202) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b1 #b11110011001 #b0100111101000010110001000000110011100001011101100000)))
(assert (= z (fp #b1 #b00101100010 #b1011111011111001100011001011000101001111110110111110)))
(assert (= r (fp #b1 #b00101100010 #b1011111011111001100011001011000101001111110110111110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
