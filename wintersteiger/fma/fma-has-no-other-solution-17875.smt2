(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4807895723234170137772025555022992193698883056640625p-170 {+ 2165283738759361 -170 (9.89451e-052)}
; Y = -1.9016894467545968350208340780227445065975189208984375p507 {- 4060848256407911 507 (-7.96796e+152)}
; Z = -1.03327171599108424970836495049297809600830078125p198 {- 149842487739424 198 (-4.15101e+059)}
; 1.4807895723234170137772025555022992193698883056640625p-170 x -1.9016894467545968350208340780227445065975189208984375p507 -1.03327171599108424970836495049297809600830078125p198 == -1.4080009512758475676008629307034425437450408935546875p338
; [HW: -1.4080009512758475676008629307034425437450408935546875p338] 

; mpf : - 1837472932132715 338
; mpfd: - 1837472932132715 338 (-7.88391e+101) class: Neg. norm. non-zero
; hwf : - 1837472932132715 338 (-7.88391e+101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101010101 #b0111101100010101000001101000000101100011000011000001)))
(assert (= y (fp #b1 #b10111111010 #b1110011011010101000111101001110011110101100101100111)))
(assert (= z (fp #b1 #b10011000101 #b0000100010000100011111101100010000010000010000100000)))
(assert (= r (fp #b1 #b10101010001 #b0110100001110010110000000001011001110111011101101011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
