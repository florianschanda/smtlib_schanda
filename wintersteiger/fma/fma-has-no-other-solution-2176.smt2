(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3589581910452517288234730585827492177486419677734375p-489 {- 1616603975432983 -489 (-8.50234e-148)}
; Y = 1.1250171639142656498933092734660021960735321044921875p190 {+ 563027252819203 190 (1.76546e+057)}
; Z = -1.8089801159059450963439985571312718093395233154296875p-258 {- 3643322548544155 -258 (-3.90566e-078)}
; -1.3589581910452517288234730585827492177486419677734375p-489 x 1.1250171639142656498933092734660021960735321044921875p190 -1.8089801159059450963439985571312718093395233154296875p-258 == -1.808980115906640318002018830156885087490081787109375p-258
; [HW: -1.808980115906640318002018830156885087490081787109375p-258] 

; mpf : - 3643322548547286 -258
; mpfd: - 3643322548547286 -258 (-3.90566e-078) class: Neg. norm. non-zero
; hwf : - 3643322548547286 -258 (-3.90566e-078) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010110 #b0101101111100100101011110001101100101011101100010111)))
(assert (= y (fp #b0 #b10010111101 #b0010000000000001000111111111011001110011010100000011)))
(assert (= z (fp #b1 #b01011111101 #b1100111100011001010100100010010011101110001010011011)))
(assert (= r (fp #b1 #b01011111101 #b1100111100011001010100100010010011101110111011010110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
