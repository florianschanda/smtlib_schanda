(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9088788939914598241642806897289119660854339599609375p-396 {- 4093226648304847 -396 (-1.18277e-119)}
; Y = -1.6507107632932385143931242055259644985198974609375p-6 {- 2930540751093400 -6 (-0.0257924)}
; Z = 1.3698667772266055475682833275641314685344696044921875p985 {+ 1665731880094467 985 (4.47944e+296)}
; -1.9088788939914598241642806897289119660854339599609375p-396 x -1.6507107632932385143931242055259644985198974609375p-6 1.3698667772266055475682833275641314685344696044921875p985 == 1.3698667772266055475682833275641314685344696044921875p985
; [HW: 1.3698667772266055475682833275641314685344696044921875p985] 

; mpf : + 1665731880094467 985
; mpfd: + 1665731880094467 985 (4.47944e+296) class: Pos. norm. non-zero
; hwf : + 1665731880094467 985 (4.47944e+296) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001110011 #b1110100010101100010010011000010110110111110011001111)))
(assert (= y (fp #b1 #b01111111001 #b1010011010010100111110110000011101111111111010011000)))
(assert (= z (fp #b0 #b11111011000 #b0101111010101111100101101101000000010000101100000011)))
(assert (= r (fp #b0 #b11111011000 #b0101111010101111100101101101000000010000101100000011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
