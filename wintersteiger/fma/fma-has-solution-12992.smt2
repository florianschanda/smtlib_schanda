(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.239324789790367642439150586142204701900482177734375p549 {+ 1077823034120422 549 (2.28377e+165)}
; Y = 1.68297726541604486527603512513451278209686279296875p-845 {+ 3075856158030220 -845 (7.17351e-255)}
; Z = 1.2512209362867576789568602180224843323230743408203125p-62 {+ 1131398515048709 -62 (2.71315e-019)}
; 1.239324789790367642439150586142204701900482177734375p549 x 1.68297726541604486527603512513451278209686279296875p-845 1.2512209362867576789568602180224843323230743408203125p-62 == 1.2512209362867576789568602180224843323230743408203125p-62
; [HW: 1.2512209362867576789568602180224843323230743408203125p-62] 

; mpf : + 1131398515048709 -62
; mpfd: + 1131398515048709 -62 (2.71315e-019) class: Pos. norm. non-zero
; hwf : + 1131398515048709 -62 (2.71315e-019) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000100100 #b0011110101000100011000111011000101000101100011100110)))
(assert (= y (fp #b0 #b00010110010 #b1010111011010111100110010001101011011111100110001100)))
(assert (= z (fp #b0 #b01111000001 #b0100000001010000000000111110100101101100000100000101)))
(assert (= r (fp #b0 #b01111000001 #b0100000001010000000000111110100101101100000100000101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
