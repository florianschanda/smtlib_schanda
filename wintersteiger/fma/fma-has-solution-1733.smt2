(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9963891066989771783113383207819424569606781005859375p632 {+ 4487337609645535 632 (3.55797e+190)}
; Y = 1.1905603796197379296017970773391425609588623046875p226 {+ 858207654647032 226 (1.2839e+068)}
; Z = -1.4709299076689446028609609129489399492740631103515625p-703 {- 2120879756695481 -703 (-3.49547e-212)}
; 1.9963891066989771783113383207819424569606781005859375p632 x 1.1905603796197379296017970773391425609588623046875p226 -1.4709299076689446028609609129489399492740631103515625p-703 == 1.188410886370121932742449644138105213642120361328125p859
; [HW: 1.188410886370121932742449644138105213642120361328125p859] 

; mpf : + 848527197649026 859
; mpfd: + 848527197649026 859 (4.56807e+258) class: Pos. norm. non-zero
; hwf : + 848527197649026 859 (4.56807e+258) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001110111 #b1111111100010011010110110100001101011100110111011111)))
(assert (= y (fp #b0 #b10011100001 #b0011000011001000100100001010011001100001010011111000)))
(assert (= z (fp #b1 #b00101000000 #b0111100010001110110111001100100000100101011110111001)))
(assert (= r (fp #b0 #b11101011010 #b0011000000111011101100100010001100101011100010000010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
