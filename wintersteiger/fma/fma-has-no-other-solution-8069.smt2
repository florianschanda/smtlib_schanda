(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9616069385625707344189549985458143055438995361328125p620 {+ 4330692650187277 620 (8.53511e+186)}
; Y = 1.97255449610028765761171598569490015506744384765625p-247 {+ 4379996066234756 -247 (8.72208e-075)}
; Z = -1.14713820478831163285349248326383531093597412109375p808 {- 662651564256604 808 (-1.95818e+243)}
; 1.9616069385625707344189549985458143055438995361328125p620 x 1.97255449610028765761171598569490015506744384765625p-247 -1.14713820478831163285349248326383531093597412109375p808 == -1.14713820478831163285349248326383531093597412109375p808
; [HW: -1.14713820478831163285349248326383531093597412109375p808] 

; mpf : - 662651564256604 808
; mpfd: - 662651564256604 808 (-1.95818e+243) class: Neg. norm. non-zero
; hwf : - 662651564256604 808 (-1.95818e+243) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001101011 #b1111011000101011110111110101000010111011101000001101)))
(assert (= y (fp #b0 #b01100001000 #b1111100011111001010101001101101001010100000110000100)))
(assert (= z (fp #b1 #b11100100111 #b0010010110101010110110010111000110001110110101011100)))
(assert (= r (fp #b1 #b11100100111 #b0010010110101010110110010111000110001110110101011100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
