(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4941461042473369591476739515201188623905181884765625p870 {- 2225436210954889 870 (-1.17622e+262)}
; Y = -1.251758982011283993784900303580798208713531494140625p-367 {- 1133821657573194 -367 (-4.16402e-111)}
; Z = 1.703071949153455388881184262572787702083587646484375p939 {+ 3166354568222150 939 (7.91405e+282)}
; -1.4941461042473369591476739515201188623905181884765625p870 x -1.251758982011283993784900303580798208713531494140625p-367 1.703071949153455388881184262572787702083587646484375p939 == 1.703071949153455388881184262572787702083587646484375p939
; [HW: 1.703071949153455388881184262572787702083587646484375p939] 

; mpf : + 3166354568222150 939
; mpfd: + 3166354568222150 939 (7.91405e+282) class: Pos. norm. non-zero
; hwf : + 3166354568222150 939 (7.91405e+282) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101100101 #b0111111010000000010110111110110100110000001010001001)))
(assert (= y (fp #b1 #b01010010000 #b0100000001110011010001101101001000110110011101001010)))
(assert (= z (fp #b0 #b11110101010 #b1011001111111100100001011111010001011001010111000110)))
(assert (= r (fp #b0 #b11110101010 #b1011001111111100100001011111010001011001010111000110)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
