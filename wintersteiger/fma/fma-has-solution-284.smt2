(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1273966021291759176392588415183126926422119140625p-46 {+ 573743289877224 -46 (1.60213e-014)}
; Y = 1.3850663944495675838908255173009820282459259033203125p712 {+ 1734184870555973 712 (2.9842e+214)}
; Z = -1.7363233674048565990943870929186232388019561767578125p735 {- 3316105643068701 735 (-3.13818e+221)}
; 1.1273966021291759176392588415183126926422119140625p-46 x 1.3850663944495675838908255173009820282459259033203125p712 -1.7363233674048565990943870929186232388019561767578125p735 == -1.7363233674048565990943870929186232388019561767578125p735
; [HW: -1.7363233674048565990943870929186232388019561767578125p735] 

; mpf : - 3316105643068701 735
; mpfd: - 3316105643068701 735 (-3.13818e+221) class: Neg. norm. non-zero
; hwf : - 3316105643068701 735 (-3.13818e+221) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111010001 #b0010000010011101000100000100111111000100001011101000)))
(assert (= y (fp #b0 #b11011000111 #b0110001010010011101101100001001011110011000101000101)))
(assert (= z (fp #b1 #b11011011110 #b1011110001111111101100000010111001001000110100011101)))
(assert (= r (fp #b1 #b11011011110 #b1011110001111111101100000010111001001000110100011101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
