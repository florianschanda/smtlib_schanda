(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.866494745628500151468642798135988414287567138671875p641 {+ 3902345413531006 641 (1.70315e+193)}
; Y = -1.16488194440937586904283307376317679882049560546875p-121 {- 742562263402188 -121 (-4.3818e-037)}
; Z = 1.1457532425143863719085857155732810497283935546875p189 {+ 656414248675832 189 (8.99001e+056)}
; 1.866494745628500151468642798135988414287567138671875p641 x -1.16488194440937586904283307376317679882049560546875p-121 1.1457532425143863719085857155732810497283935546875p189 == -1.087123014258805309140143435797654092311859130859375p521
; [HW: -1.087123014258805309140143435797654092311859130859375p521] 

; mpf : - 392367174551350 521
; mpfd: - 392367174551350 521 (-7.46288e+156) class: Neg. norm. non-zero
; hwf : - 392367174551350 521 (-7.46288e+156) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010000000 #b1101110111010010100110011000001010100001010101111110)))
(assert (= y (fp #b1 #b01110000110 #b0010101000110101101100111111111011110000011011001100)))
(assert (= z (fp #b0 #b10010111100 #b0010010101010000000101011010000111100010100111111000)))
(assert (= r (fp #b1 #b11000001000 #b0001011001001101101100011010000011111000011100110110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
