(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1496067483201846126661394009715877473354339599609375p-741 {+ 673768895986895 -741 (9.93854e-224)}
; Y = -0.4322788493312099689092065091244876384735107421875p-1022 {- 1946810864768184 -1023 (-9.61852e-309)}
; Z = -1.749112091449284367428163022850640118122100830078125p243 {- 3373700935909730 243 (-2.47233e+073)}
; 1.1496067483201846126661394009715877473354339599609375p-741 x -0.4322788493312099689092065091244876384735107421875p-1022 -1.749112091449284367428163022850640118122100830078125p243 == -1.749112091449284367428163022850640118122100830078125p243
; [HW: -1.749112091449284367428163022850640118122100830078125p243] 

; mpf : - 3373700935909730 243
; mpfd: - 3373700935909730 243 (-2.47233e+073) class: Neg. norm. non-zero
; hwf : - 3373700935909730 243 (-2.47233e+073) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100011010 #b0010011001001100101000001011101101001011110011001111)))
(assert (= y (fp #b1 #b00000000000 #b0110111010101001110100111010000010100001010010111000)))
(assert (= z (fp #b1 #b10011110010 #b1011111111000101110011110101110111010000000101100010)))
(assert (= r (fp #b1 #b10011110010 #b1011111111000101110011110101110111010000000101100010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
