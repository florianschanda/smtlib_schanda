(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.13784158736116136623195416177622973918914794921875p576 {- 620783321475884 576 (-2.81423e+173)}
; Y = 1.426628118355921959192755821277387440204620361328125p-92 {+ 1921362234853506 -92 (2.88105e-028)}
; Z = 1.66467367847322744722760035074315965175628662109375p725 {+ 2993424130695004 725 (2.93816e+218)}
; -1.13784158736116136623195416177622973918914794921875p576 x 1.426628118355921959192755821277387440204620361328125p-92 1.66467367847322744722760035074315965175628662109375p725 == 1.66467367847322744722760035074315965175628662109375p725
; [HW: 1.66467367847322744722760035074315965175628662109375p725] 

; mpf : + 2993424130695004 725
; mpfd: + 2993424130695004 725 (2.93816e+218) class: Pos. norm. non-zero
; hwf : + 2993424130695004 725 (2.93816e+218) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111111 #b0010001101001001100101100001010110111110101100101100)))
(assert (= y (fp #b0 #b01110100011 #b0110110100110111100000000001011111100100100010000010)))
(assert (= z (fp #b0 #b11011010100 #b1010101000101000000011011101111110001101111101011100)))
(assert (= r (fp #b0 #b11011010100 #b1010101000101000000011011101111110001101111101011100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
