(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.556416091049133587631558839348144829273223876953125p-214 {- 2505875300311826 -214 (-5.91162e-065)}
; Y = -1.4153714618439401373706232334370724856853485107421875p188 {- 1870666760780707 188 (-5.55277e+056)}
; Z = -1.6935847797396181846352192224003374576568603515625p-537 {- 3123628155585192 -537 (-3.76443e-162)}
; -1.556416091049133587631558839348144829273223876953125p-214 x -1.4153714618439401373706232334370724856853485107421875p188 -1.6935847797396181846352192224003374576568603515625p-537 == 1.1014534590128215452153881415142677724361419677734375p-25
; [HW: 1.1014534590128215452153881415142677724361419677734375p-25] 

; mpf : + 456905760205591 -25
; mpfd: + 456905760205591 -25 (3.28259e-008) class: Pos. norm. non-zero
; hwf : + 456905760205591 -25 (3.28259e-008) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100101001 #b1000111001110001010010001111001000000110001100010010)))
(assert (= y (fp #b1 #b10010111011 #b0110101001010101110010001011110001001111101110100011)))
(assert (= z (fp #b1 #b00111100110 #b1011000110001110110001011010100111111100001010101000)))
(assert (= r (fp #b0 #b01111100110 #b0001100111111000110110101001100010000110101100010111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
