(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.45921061613211389129673989373259246349334716796875p429 {+ 2068100759697164 429 (2.02295e+129)}
; Y = 1.2434683249090243695178514826693572103977203369140625p-946 {+ 1096483857336801 -946 (2.09054e-285)}
; Z = 1.4681892572370223160049818034167401492595672607421875p899 {+ 2108536964431523 899 (6.20509e+270)}
; 1.45921061613211389129673989373259246349334716796875p429 x 1.2434683249090243695178514826693572103977203369140625p-946 1.4681892572370223160049818034167401492595672607421875p899 == 1.4681892572370223160049818034167401492595672607421875p899
; [HW: 1.4681892572370223160049818034167401492595672607421875p899] 

; mpf : + 2108536964431523 899
; mpfd: + 2108536964431523 899 (6.20509e+270) class: Pos. norm. non-zero
; hwf : + 2108536964431523 899 (6.20509e+270) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110101100 #b0111010110001110110100111011001001000011011100001100)))
(assert (= y (fp #b0 #b00001001101 #b0011111001010011111100001010110100011000100111100001)))
(assert (= z (fp #b0 #b11110000010 #b0111011111011011010000000100110000101011111010100011)))
(assert (= r (fp #b0 #b11110000010 #b0111011111011011010000000100110000101011111010100011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
