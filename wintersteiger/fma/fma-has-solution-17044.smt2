(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.112850341902978268393553662463091313838958740234375p-288 {- 508232757742886 -288 (-2.23768e-087)}
; Y = 1.0920324006578001618805728867300786077976226806640625p595 {+ 414477085308481 595 (1.41606e+179)}
; Z = 1.58476767964977316438535126508213579654693603515625p446 {+ 2633559504169028 446 (2.87968e+134)}
; -1.112850341902978268393553662463091313838958740234375p-288 x 1.0920324006578001618805728867300786077976226806640625p595 1.58476767964977316438535126508213579654693603515625p446 == 1.58476767964977316438535126508213579654693603515625p446
; [HW: 1.58476767964977316438535126508213579654693603515625p446] 

; mpf : + 2633559504169028 446
; mpfd: + 2633559504169028 446 (2.87968e+134) class: Pos. norm. non-zero
; hwf : + 2633559504169028 446 (2.87968e+134) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011111 #b0001110011100011110000101000111111010000110100100110)))
(assert (= y (fp #b0 #b11001010010 #b0001011110001111011011110111011011111111011001000001)))
(assert (= z (fp #b0 #b10110111101 #b1001010110110011010101011010101111011010100001000100)))
(assert (= r (fp #b0 #b10110111101 #b1001010110110011010101011010101111011010100001000100)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
