(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.90846327532618520450569121749140322208404541015625p368 {+ 4091354868238788 368 (1.14742e+111)}
; Y = +zero {+ 0 -1023 (0)}
; Z = 1.0274128778463100797324614177341572940349578857421875p-351 {+ 123456626453795 -351 (2.23984e-106)}
; 1.90846327532618520450569121749140322208404541015625p368 x +zero 1.0274128778463100797324614177341572940349578857421875p-351 == 1.0274128778463100797324614177341572940349578857421875p-351
; [HW: 1.0274128778463100797324614177341572940349578857421875p-351] 

; mpf : + 123456626453795 -351
; mpfd: + 123456626453795 -351 (2.23984e-106) class: Pos. norm. non-zero
; hwf : + 123456626453795 -351 (2.23984e-106) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101101111 #b1110100010010001000011001001100100100100100111000100)))
(assert (= y (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= z (fp #b0 #b01010100000 #b0000011100000100100001111100010111010110110100100011)))
(assert (= r (fp #b0 #b01010100000 #b0000011100000100100001111100010111010110110100100011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
