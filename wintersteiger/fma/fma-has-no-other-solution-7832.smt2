(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.72735979509873072146319827879779040813446044921875p476 {- 3275737302170924 476 (-3.37024e+143)}
; Y = -1.676516815218027200984352020896039903163909912109375p859 {- 3046760876925782 859 (-6.44428e+258)}
; Z = -1.6516983786485368579377563946763984858989715576171875p21 {- 2934988575239507 21 (-3.46386e+006)}
; -1.72735979509873072146319827879779040813446044921875p476 x -1.676516815218027200984352020896039903163909912109375p859 -1.6516983786485368579377563946763984858989715576171875p21 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111011011 #b1011101000110100010000000110010001011111110100101100)))
(assert (= y (fp #b1 #b11101011010 #b1010110100110000001101001011110010001110001101010110)))
(assert (= z (fp #b1 #b10000010100 #b1010011011010101101101000111011100100110110101010011)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
