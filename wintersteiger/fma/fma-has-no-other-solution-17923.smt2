(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.540318079822849295368314415100030601024627685546875p154 {- 2433376302951726 154 (-3.51746e+046)}
; Y = 1.5539693764033908340849166052066721022129058837890625p712 {+ 2494856277144977 712 (3.34811e+214)}
; Z = 1.77878507242363159690512475208379328250885009765625p-160 {+ 3507336161968772 -160 (1.21709e-048)}
; -1.540318079822849295368314415100030601024627685546875p154 x 1.5539693764033908340849166052066721022129058837890625p712 1.77878507242363159690512475208379328250885009765625p-160 == -1.1968035629825906074330532646854408085346221923828125p867
; [HW: -1.1968035629825906074330532646854408085346221923828125p867] 

; mpf : - 886324452913581 867
; mpfd: - 886324452913581 867 (-1.17768e+261) class: Neg. norm. non-zero
; hwf : - 886324452913581 867 (-1.17768e+261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010011001 #b1000101001010010010010010010001001000110110100101110)))
(assert (= y (fp #b0 #b11011000111 #b1000110111010000111011111110001010100011010110010001)))
(assert (= z (fp #b0 #b01101011111 #b1100011101011110011101010110000010101100001010000100)))
(assert (= r (fp #b1 #b11101100010 #b0011001001100001101101111110001010111111000110101101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
