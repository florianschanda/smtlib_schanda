(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1103875241568623710719521113787777721881866455078125p712 {- 497141212659197 712 (-2.39239e+214)}
; Y = 1.1977439237501401603225303915678523480892181396484375p167 {+ 890559461315911 167 (2.24065e+050)}
; Z = -1.890258806086985376992970486753620207309722900390625p516 {- 4009369227356650 516 (-4.05508e+155)}
; -1.1103875241568623710719521113787777721881866455078125p712 x 1.1977439237501401603225303915678523480892181396484375p167 -1.890258806086985376992970486753620207309722900390625p516 == -1.329959910066843775666711735539138317108154296875p879
; [HW: -1.329959910066843775666711735539138317108154296875p879] 

; mpf : - 1486007328024240 879
; mpfd: - 1486007328024240 879 (-5.36049e+264) class: Neg. norm. non-zero
; hwf : - 1486007328024240 879 (-5.36049e+264) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011000111 #b0001110001000010010110110101011000100011110111111101)))
(assert (= y (fp #b0 #b10010100110 #b0011001010011111010110001000010101111101010101000111)))
(assert (= z (fp #b1 #b11000000011 #b1110001111101000000000000100100100011110100111101010)))
(assert (= r (fp #b1 #b11101101110 #b0101010001111000010000001010111010111010011010110000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
