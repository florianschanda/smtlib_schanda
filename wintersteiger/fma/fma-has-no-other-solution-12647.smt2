(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6827921195432373746569965078379027545452117919921875p-955 {- 3075022335146435 -955 (-5.52567e-288)}
; Y = -1.6463251585748970295952631204272620379924774169921875p-986 {- 2910789743318083 -986 (-2.51733e-297)}
; Z = 1.10306184605957469102577306330204010009765625p274 {+ 464149291510016 274 (3.34826e+082)}
; -1.6827921195432373746569965078379027545452117919921875p-955 x -1.6463251585748970295952631204272620379924774169921875p-986 1.10306184605957469102577306330204010009765625p274 == 1.1030618460595749130703779883333481848239898681640625p274
; [HW: 1.1030618460595749130703779883333481848239898681640625p274] 

; mpf : + 464149291510017 274
; mpfd: + 464149291510017 274 (3.34826e+082) class: Pos. norm. non-zero
; hwf : + 464149291510017 274 (3.34826e+082) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001000100 #b1010111011001011011101101101111101100111100111000011)))
(assert (= y (fp #b1 #b00000100101 #b1010010101110101100100001100101010101001010001000011)))
(assert (= z (fp #b0 #b10100010001 #b0001101001100010010000101101101001001010100100000000)))
(assert (= r (fp #b0 #b10100010001 #b0001101001100010010000101101101001001010100100000001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
