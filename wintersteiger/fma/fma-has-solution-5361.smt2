(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0640262088474952140160212366026826202869415283203125p89 {+ 288348410307525 89 (6.586e+026)}
; Y = -1.778163858072697944834317240747623145580291748046875p678 {- 3504538461249390 678 (-2.23002e+204)}
; Z = 1.9526647125356395573447798597044311463832855224609375p100 {+ 4290420444384527 100 (2.4753e+030)}
; 1.0640262088474952140160212366026826202869415283203125p89 x -1.778163858072697944834317240747623145580291748046875p678 1.9526647125356395573447798597044311463832855224609375p100 == -1.89201294861472835151516846963204443454742431640625p767
; [HW: -1.89201294861472835151516846963204443454742431640625p767] 

; mpf : - 4017269182990948 767
; mpfd: - 4017269182990948 767 (-1.46869e+231) class: Neg. norm. non-zero
; hwf : - 4017269182990948 767 (-1.46869e+231) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001011000 #b0001000001100100000001011000100100010110001111000101)))
(assert (= y (fp #b1 #b11010100101 #b1100011100110101101111110010000101011001111101101110)))
(assert (= z (fp #b0 #b10001100011 #b1111001111100001110101011010100001100100110100001111)))
(assert (= r (fp #b1 #b11011111110 #b1110010001011010111101011110100111101000101001100100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
