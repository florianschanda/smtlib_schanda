(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.37373637771324386136484463349916040897369384765625p-477 {+ 1683159011404164 -477 (3.52043e-144)}
; Y = -1.0569379425050262621965657672262750566005706787109375p180 {- 256425696648879 180 (-1.61975e+054)}
; Z = -1.1260631703526244873359019038616679608821868896484375p610 {- 567738047025223 610 (-4.78476e+183)}
; 1.37373637771324386136484463349916040897369384765625p-477 x -1.0569379425050262621965657672262750566005706787109375p180 -1.1260631703526244873359019038616679608821868896484375p610 == -1.1260631703526244873359019038616679608821868896484375p610
; [HW: -1.1260631703526244873359019038616679608821868896484375p610] 

; mpf : - 567738047025223 610
; mpfd: - 567738047025223 610 (-4.78476e+183) class: Neg. norm. non-zero
; hwf : - 567738047025223 610 (-4.78476e+183) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000100010 #b0101111110101101001011111110111110011010100110000100)))
(assert (= y (fp #b1 #b10010110011 #b0000111010010011011111000010100011110101111010101111)))
(assert (= z (fp #b1 #b11001100001 #b0010000001000101101011010000100111100101000001000111)))
(assert (= r (fp #b1 #b11001100001 #b0010000001000101101011010000100111100101000001000111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
