(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.738465261332522882042894707410596311092376708984375p437 {+ 3325751875763206 437 (6.16984e+131)}
; Y = 1.7298170864279562852772187397931702435016632080078125p-864 {+ 3286803958485565 -864 (1.40632e-260)}
; Z = -1.3522793476570977855288901992025785148143768310546875p30 {- 1586525138838827 30 (-1.452e+009)}
; 1.738465261332522882042894707410596311092376708984375p437 x 1.7298170864279562852772187397931702435016632080078125p-864 -1.3522793476570977855288901992025785148143768310546875p30 == -1.352279347657097563484285274171270430088043212890625p30
; [HW: -1.352279347657097563484285274171270430088043212890625p30] 

; mpf : - 1586525138838826 30
; mpfd: - 1586525138838826 30 (-1.452e+009) class: Neg. norm. non-zero
; hwf : - 1586525138838826 30 (-1.452e+009) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110110100 #b1011110100001100000011110011001010100111110000000110)))
(assert (= y (fp #b0 #b00010011111 #b1011101011010101010010101110011001000101001000111101)))
(assert (= z (fp #b1 #b10000011101 #b0101101000101110111110101011010100111110010100101011)))
(assert (= r (fp #b1 #b10000011101 #b0101101000101110111110101011010100111110010100101010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
