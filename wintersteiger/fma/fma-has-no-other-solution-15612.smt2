(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.774566726651687798010925689595751464366912841796875p-681 {- 3488338421522126 -681 (-1.76875e-205)}
; Y = 1.1305806482283287106582747583161108195781707763671875p330 {+ 588082958702899 330 (2.47286e+099)}
; Z = 1.4218281970293296101459645797149278223514556884765625p450 {+ 1899745310955657 450 (4.13376e+135)}
; -1.774566726651687798010925689595751464366912841796875p-681 x 1.1305806482283287106582747583161108195781707763671875p330 1.4218281970293296101459645797149278223514556884765625p450 == 1.4218281970293293881013596546836197376251220703125p450
; [HW: 1.4218281970293293881013596546836197376251220703125p450] 

; mpf : + 1899745310955656 450
; mpfd: + 1899745310955656 450 (4.13376e+135) class: Pos. norm. non-zero
; hwf : + 1899745310955656 450 (4.13376e+135) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010110 #b1100011001001010000000010100011110001001111011001110)))
(assert (= y (fp #b0 #b10101001001 #b0010000101101101101110111011110110100001100100110011)))
(assert (= z (fp #b0 #b10111000001 #b0110101111111100111011101100011011000101100010001001)))
(assert (= r (fp #b0 #b10111000001 #b0110101111111100111011101100011011000101100010001000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
