(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.23313455511987069002088901470415294170379638671875p-600 {+ 1049944695565036 -600 (2.97176e-181)}
; Y = 1.597723617669685847175742310355417430400848388671875p-319 {+ 2691907861807742 -319 (1.496e-096)}
; Z = -1.3345512582245799837465938253444619476795196533203125p781 {- 1506684921876549 781 (-1.69731e+235)}
; 1.23313455511987069002088901470415294170379638671875p-600 x 1.597723617669685847175742310355417430400848388671875p-319 -1.3345512582245799837465938253444619476795196533203125p781 == -1.3345512582245799837465938253444619476795196533203125p781
; [HW: -1.3345512582245799837465938253444619476795196533203125p781] 

; mpf : - 1506684921876549 781
; mpfd: - 1506684921876549 781 (-1.69731e+235) class: Neg. norm. non-zero
; hwf : - 1506684921876549 781 (-1.69731e+235) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110100111 #b0011101110101110101101001100100111001110101011101100)))
(assert (= y (fp #b0 #b01011000000 #b1001100100000100011010100011110111110000001001111110)))
(assert (= z (fp #b1 #b11100001100 #b0101010110100101001001101011100011101001000001000101)))
(assert (= r (fp #b1 #b11100001100 #b0101010110100101001001101011100011101001000001000101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
