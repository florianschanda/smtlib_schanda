(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6505553475373291316685708807199262082576751708984375p268 {- 2929840820752999 268 (-7.82833e+080)}
; Y = -1.3269542457163414628240616366383619606494903564453125p-366 {- 1472471019175317 -366 (-8.82831e-111)}
; Z = -1.1701666444085130347474432710441760718822479248046875p737 {- 766362436349067 737 (-8.45969e+221)}
; -1.6505553475373291316685708807199262082576751708984375p268 x -1.3269542457163414628240616366383619606494903564453125p-366 -1.1701666444085130347474432710441760718822479248046875p737 == -1.1701666444085130347474432710441760718822479248046875p737
; [HW: -1.1701666444085130347474432710441760718822479248046875p737] 

; mpf : - 766362436349067 737
; mpfd: - 766362436349067 737 (-8.45969e+221) class: Neg. norm. non-zero
; hwf : - 766362436349067 737 (-8.45969e+221) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100001011 #b1010011010001010110010111001010111101001001001100111)))
(assert (= y (fp #b1 #b01010010001 #b0101001110110011010001100000000010100011110110010101)))
(assert (= z (fp #b1 #b11011100000 #b0010101110010000000010101000110010011010110010001011)))
(assert (= r (fp #b1 #b11011100000 #b0010101110010000000010101000110010011010110010001011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
