(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.13586486128689756469611893408000469207763671875p528 {+ 611880938664416 528 (9.98078e+158)}
; Y = -1.9946543164229730837888610039954073727130889892578125p-626 {- 4479524808804957 -626 (-7.16292e-189)}
; Z = 1.50157790844218563819367773248814046382904052734375p-262 {+ 2258906081557500 -262 (2.02623e-079)}
; 1.13586486128689756469611893408000469207763671875p528 x -1.9946543164229730837888610039954073727130889892578125p-626 1.50157790844218563819367773248814046382904052734375p-262 == -1.1328288742195458116412964955088682472705841064453125p-97
; [HW: -1.1328288742195458116412964955088682472705841064453125p-97] 

; mpf : - 598208068439189 -97
; mpfd: - 598208068439189 -97 (-7.14916e-030) class: Neg. norm. non-zero
; hwf : - 598208068439189 -97 (-7.14916e-030) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000001111 #b0010001011001000000010100001111111100111000111100000)))
(assert (= y (fp #b1 #b00110001101 #b1111111010100001101010100100111111011100101001011101)))
(assert (= z (fp #b0 #b01011111001 #b1000000001100111011010001110100100100111101111111100)))
(assert (= r (fp #b1 #b01110011110 #b0010001000000001000100101011011010111100110010010101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
