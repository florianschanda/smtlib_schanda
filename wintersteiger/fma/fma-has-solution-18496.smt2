(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2002958646608969939251210234942846000194549560546875p-741 {+ 902052381450667 -741 (1.03768e-223)}
; Y = 1.74138803018465626593069828231818974018096923828125p343 {+ 3338914856476564 343 (3.12021e+103)}
; Z = 1.6222556822071083626468634975026361644268035888671875p1001 {+ 2802390458517107 1001 (3.47652e+301)}
; 1.2002958646608969939251210234942846000194549560546875p-741 x 1.74138803018465626593069828231818974018096923828125p343 1.6222556822071083626468634975026361644268035888671875p1001 == 1.6222556822071083626468634975026361644268035888671875p1001
; [HW: 1.6222556822071083626468634975026361644268035888671875p1001] 

; mpf : + 2802390458517107 1001
; mpfd: + 2802390458517107 1001 (3.47652e+301) class: Pos. norm. non-zero
; hwf : + 2802390458517107 1001 (3.47652e+301) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100011010 #b0011001101000110100101101111110000111110000110101011)))
(assert (= y (fp #b0 #b10101010110 #b1011110111001011100110110001111101001001111110010100)))
(assert (= z (fp #b0 #b11111101000 #b1001111101001100001001011111110011010100011001110011)))
(assert (= r (fp #b0 #b11111101000 #b1001111101001100001001011111110011010100011001110011)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
