(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4436163083502402404434405980282463133335113525390625p-900 {- 1997870240981617 -900 (-1.70787e-271)}
; Y = 1.682889134633216432490598890581168234348297119140625p-366 {+ 3075459252269514 -366 (1.11964e-110)}
; Z = -1.13752064053622437000967693165875971317291259765625p-714 {- 619337905474692 -714 (-1.3199e-215)}
; -1.4436163083502402404434405980282463133335113525390625p-900 x 1.682889134633216432490598890581168234348297119140625p-366 -1.13752064053622437000967693165875971317291259765625p-714 == -1.13752064053622437000967693165875971317291259765625p-714
; [HW: -1.13752064053622437000967693165875971317291259765625p-714] 

; mpf : - 619337905474692 -714
; mpfd: - 619337905474692 -714 (-1.3199e-215) class: Neg. norm. non-zero
; hwf : - 619337905474692 -714 (-1.3199e-215) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001111011 #b0111000110010000110101101010000001010110001001110001)))
(assert (= y (fp #b0 #b01010010001 #b1010111011010001110100101000010000001011000111001010)))
(assert (= z (fp #b1 #b00100110101 #b0010001100110100100011010111110110100000110010000100)))
(assert (= r (fp #b1 #b00100110101 #b0010001100110100100011010111110110100000110010000100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
