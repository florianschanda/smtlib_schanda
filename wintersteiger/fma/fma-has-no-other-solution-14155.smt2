(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.018029487080926998032737174071371555328369140625p946 {+ 81197591299344 946 (6.05531e+284)}
; Y = 1.4875704388630783814306823842343874275684356689453125p-821 {+ 2195822046780629 -821 (1.06378e-247)}
; Z = -1.1466885015121215385391906238510273396968841552734375p559 {- 660626280749527 559 (-2.16378e+168)}
; 1.018029487080926998032737174071371555328369140625p946 x 1.4875704388630783814306823842343874275684356689453125p-821 -1.1466885015121215385391906238510273396968841552734375p559 == -1.1466885015121215385391906238510273396968841552734375p559
; [HW: -1.1466885015121215385391906238510273396968841552734375p559] 

; mpf : - 660626280749527 559
; mpfd: - 660626280749527 559 (-2.16378e+168) class: Neg. norm. non-zero
; hwf : - 660626280749527 559 (-2.16378e+168) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110110001 #b0000010010011101100101001001100101100000010100010000)))
(assert (= y (fp #b0 #b00011001010 #b0111110011010001011010101001000101101001110011010101)))
(assert (= z (fp #b1 #b11000101110 #b0010010110001101011000001010110010110001100111010111)))
(assert (= r (fp #b1 #b11000101110 #b0010010110001101011000001010110010110001100111010111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
