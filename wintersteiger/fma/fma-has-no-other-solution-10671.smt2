(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1585353539549327894775387903791852295398712158203125p-272 {- 713979760996485 -272 (-1.52669e-082)}
; Y = -1.3144613269495730722979942584061063826084136962890625p819 {- 1416207914872529 819 (-4.5953e+246)}
; Z = -1.7509843724818769938877949243760667741298675537109375p-514 {- 3382132940070447 -514 (-3.26486e-155)}
; -1.1585353539549327894775387903791852295398712158203125p-272 x -1.3144613269495730722979942584061063826084136962890625p819 -1.7509843724818769938877949243760667741298675537109375p-514 == 1.52284991867759433858964257524348795413970947265625p547
; [HW: 1.52284991867759433858964257524348795413970947265625p547] 

; mpf : + 2354706698927108 547
; mpfd: + 2354706698927108 547 (7.0156e+164) class: Pos. norm. non-zero
; hwf : + 2354706698927108 547 (7.0156e+164) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011101111 #b0010100010010101110001011110000001111111000010000101)))
(assert (= y (fp #b1 #b11100110010 #b0101000010000000100010011001101100011010111011010001)))
(assert (= z (fp #b1 #b00111111101 #b1100000001000000100000110000011110011101111000101111)))
(assert (= r (fp #b0 #b11000100010 #b1000010111011001011111100000010101101111110000000100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
