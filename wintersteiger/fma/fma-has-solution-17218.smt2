(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5880694286340248932987151420093141496181488037109375p199 {+ 2648429259664175 199 (1.27596e+060)}
; Y = 1.788228603216878820347801593015901744365692138671875p50 {+ 3549866043730302 50 (2.01337e+015)}
; Z = -1.40176034738287480507779036997817456722259521484375p-578 {- 1809367750765756 -578 (-1.41689e-174)}
; 1.5880694286340248932987151420093141496181488037109375p199 x 1.788228603216878820347801593015901744365692138671875p50 -1.40176034738287480507779036997817456722259521484375p-578 == 1.419915588088824787149633266380988061428070068359375p250
; [HW: 1.419915588088824787149633266380988061428070068359375p250] 

; mpf : + 1891131686043894 250
; mpfd: + 1891131686043894 250 (2.56898e+075) class: Pos. norm. non-zero
; hwf : + 1891131686043894 250 (2.56898e+075) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011000110 #b1001011010001011101101111101001111000010101100101111)))
(assert (= y (fp #b0 #b10000110001 #b1100100111001001010110011000100010010110100101111110)))
(assert (= z (fp #b1 #b00110111101 #b0110011011011001110001000010000011010110110010111100)))
(assert (= r (fp #b0 #b10011111001 #b0110101101111111100101101000010111101100000011110110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
