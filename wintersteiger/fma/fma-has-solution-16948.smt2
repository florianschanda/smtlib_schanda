(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1524235515887932823630990242236293852329254150390625p238 {- 686454650137777 238 (-5.09039e+071)}
; Y = -1.2860712618253120620437357501941733062267303466796875p-299 {- 1288350428157883 -299 (-1.26269e-090)}
; Z = 1.9879888850425386781495262766839005053043365478515625p605 {+ 4449506374523769 605 (2.63974e+182)}
; -1.1524235515887932823630990242236293852329254150390625p238 x -1.2860712618253120620437357501941733062267303466796875p-299 1.9879888850425386781495262766839005053043365478515625p605 == 1.9879888850425386781495262766839005053043365478515625p605
; [HW: 1.9879888850425386781495262766839005053043365478515625p605] 

; mpf : + 4449506374523769 605
; mpfd: + 4449506374523769 605 (2.63974e+182) class: Pos. norm. non-zero
; hwf : + 4449506374523769 605 (2.63974e+182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011101101 #b0010011100000101001110101101100100110110110010110001)))
(assert (= y (fp #b1 #b01011010100 #b0100100100111011111101110101100111011101011110111011)))
(assert (= z (fp #b0 #b11001011100 #b1111110011101100110101101110111000010001101101111001)))
(assert (= r (fp #b0 #b11001011100 #b1111110011101100110101101110111000010001101101111001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
