(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = +zero {+ 0 -1023 (0)}
; Y = -1.359120545220096065719417310901917517185211181640625p-689 {- 1617335153634314 -689 (-5.29165e-208)}
; Z = -1.8367581777305834744851154027855955064296722412109375p108 {- 3768423817426671 108 (-5.96062e+032)}
; +zero x -1.359120545220096065719417310901917517185211181640625p-689 -1.8367581777305834744851154027855955064296722412109375p108 == -1.8367581777305834744851154027855955064296722412109375p108
; [HW: -1.8367581777305834744851154027855955064296722412109375p108] 

; mpf : - 3768423817426671 108
; mpfd: - 3768423817426671 108 (-5.96062e+032) class: Neg. norm. non-zero
; hwf : - 3768423817426671 108 (-5.96062e+032) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b1 #b00101001110 #b0101101111101111010100101111010100001010110000001010)))
(assert (= z (fp #b1 #b10001101011 #b1101011000110101110010001011000000000011011011101111)))
(assert (= r (fp #b1 #b10001101011 #b1101011000110101110010001011000000000011011011101111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
