(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.38199837848852258304077622597105801105499267578125p-652 {- 1720367755017044 -652 (-7.39521e-197)}
; Y = 1.9613831186650074744903804457862861454486846923828125p941 {+ 4329684654980013 941 (3.64576e+283)}
; Z = 1.5675392769863860653600795558304525911808013916015625p-410 {+ 2555969676354009 -410 (5.92816e-124)}
; -1.38199837848852258304077622597105801105499267578125p-652 x 1.9613831186650074744903804457862861454486846923828125p941 1.5675392769863860653600795558304525911808013916015625p-410 == -1.355314144794900865775844067684374749660491943359375p290
; [HW: -1.355314144794900865775844067684374749660491943359375p290] 

; mpf : - 1600192650097782 290
; mpfd: - 1600192650097782 290 (-2.69612e+087) class: Neg. norm. non-zero
; hwf : - 1600192650097782 290 (-2.69612e+087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101110011 #b0110000111001010101001010100111010111011101101010100)))
(assert (= y (fp #b0 #b11110101100 #b1111011000011101001101000011110110010111101110101101)))
(assert (= z (fp #b0 #b01001100101 #b1001000101001010010000010000100111011010000111011001)))
(assert (= r (fp #b1 #b10100100001 #b0101101011110101110111100010011110110011010001110110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
