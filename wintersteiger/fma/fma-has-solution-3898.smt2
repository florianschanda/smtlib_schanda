(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2856297090922350623287684356910176575183868408203125p327 {- 1286361851433733 327 (-3.51499e+098)}
; Y = 1.6867269718754032137297826920985244214534759521484375p243 {+ 3092743334643335 243 (2.38415e+073)}
; Z = 1.836516689186939998990055755712091922760009765625p396 {+ 3767336249711504 396 (2.96397e+119)}
; -1.2856297090922350623287684356910176575183868408203125p327 x 1.6867269718754032137297826920985244214534759521484375p243 1.836516689186939998990055755712091922760009765625p396 == -1.0842531530851005072690895758569240570068359375p571
; [HW: -1.0842531530851005072690895758569240570068359375p571] 

; mpf : - 379442468838848 571
; mpfd: - 379442468838848 571 (-8.38027e+171) class: Neg. norm. non-zero
; hwf : - 379442468838848 571 (-8.38027e+171) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101000110 #b0100100100011111000001110101001101010001001100000101)))
(assert (= y (fp #b0 #b10011110010 #b1010111111001101010101101011110101111100011010000111)))
(assert (= z (fp #b0 #b10110001011 #b1101011000100101111101010010111010011101101110010000)))
(assert (= r (fp #b1 #b11000111010 #b0001010110010001100111010101100100010101110111000000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
