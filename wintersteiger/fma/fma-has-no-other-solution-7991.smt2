(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1434667004231737763575438293628394603729248046875p-950 {+ 646116578565880 -950 (1.20151e-286)}
; Y = -1.2230604278890744307517479683156125247478485107421875p610 {- 1004574859922339 610 (-5.19691e+183)}
; Z = -1.63641547253635710745811593369580805301666259765625p679 {- 2866160484967556 679 (-4.1045e+204)}
; 1.1434667004231737763575438293628394603729248046875p-950 x -1.2230604278890744307517479683156125247478485107421875p610 -1.63641547253635710745811593369580805301666259765625p679 == -1.63641547253635710745811593369580805301666259765625p679
; [HW: -1.63641547253635710745811593369580805301666259765625p679] 

; mpf : - 2866160484967556 679
; mpfd: - 2866160484967556 679 (-4.1045e+204) class: Neg. norm. non-zero
; hwf : - 2866160484967556 679 (-4.1045e+204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001001001 #b0010010010111010001110111101001001100001111011111000)))
(assert (= y (fp #b1 #b11001100001 #b0011100100011010011111001111101011010000101110100011)))
(assert (= z (fp #b1 #b11010100110 #b1010001011101100000111111101100100110110010010000100)))
(assert (= r (fp #b1 #b11010100110 #b1010001011101100000111111101100100110110010010000100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
