(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6283276703126536855137374004698358476161956787109375p386 {+ 2829736261886639 386 (2.56638e+116)}
; Y = -1.354452744970874089602830281364731490612030029296875p-158 {- 1596313250171278 -158 (-3.70702e-048)}
; Z = -1.35789412113157315076250597485341131687164306640625p-112 {- 1611811830566244 -112 (-2.61521e-034)}
; 1.6283276703126536855137374004698358476161956787109375p386 x -1.354452744970874089602830281364731490612030029296875p-158 -1.35789412113157315076250597485341131687164306640625p-112 == -1.1027464413835013079534519420121796429157257080078125p229
; [HW: -1.1027464413835013079534519420121796429157257080078125p229] 

; mpf : - 462728835128381 229
; mpfd: - 462728835128381 229 (-9.5136e+068) class: Neg. norm. non-zero
; hwf : - 462728835128381 229 (-9.5136e+068) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110000001 #b1010000011011010000101010000101100101010001010101111)))
(assert (= y (fp #b1 #b01101100001 #b0101101010111101011010100100001110100000100110001110)))
(assert (= z (fp #b1 #b01110001111 #b0101101110011110111100101111100110110000110101100100)))
(assert (= r (fp #b1 #b10011100100 #b0001101001001101100101110011110110000101110000111101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
