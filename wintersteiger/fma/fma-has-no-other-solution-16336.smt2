(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.706933187931053197416986222378909587860107421875p772 {- 3183744041742128 772 (-4.24007e+232)}
; Y = -1.3930184871455224548952855911920778453350067138671875p-223 {- 1769997912258291 -223 (-1.0334e-067)}
; Z = -1.235370811634132426348742228583432734012603759765625p-199 {- 1060015899569370 -199 (-1.53755e-060)}
; -1.706933187931053197416986222378909587860107421875p772 x -1.3930184871455224548952855911920778453350067138671875p-223 -1.235370811634132426348742228583432734012603759765625p-199 == 1.188894743555099609011449501849710941314697265625p550
; [HW: 1.188894743555099609011449501849710941314697265625p550] 

; mpf : + 850706296686992 550
; mpfd: + 850706296686992 550 (4.38168e+165) class: Pos. norm. non-zero
; hwf : + 850706296686992 550 (4.38168e+165) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000011 #b1011010011111001100100101100101010011110111100110000)))
(assert (= y (fp #b1 #b01100100000 #b0110010010011100110111000000110100000011011011110011)))
(assert (= z (fp #b1 #b01100111000 #b0011110001000001010000101111001001100110110011011010)))
(assert (= r (fp #b0 #b11000100101 #b0011000001011011011001111110100111110100100110010000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
