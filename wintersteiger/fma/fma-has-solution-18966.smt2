(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.878083131983111275786768601392395794391632080078125p-524 {- 3954534865999458 -524 (-3.41977e-158)}
; Y = -1.0494639468681246086134706274606287479400634765625p-613 {- 222765812683560 -613 (-3.08731e-185)}
; Z = -1.85583989948408056847029001801274716854095458984375p-71 {- 3854360252405308 -71 (-7.85979e-022)}
; -1.878083131983111275786768601392395794391632080078125p-524 x -1.0494639468681246086134706274606287479400634765625p-613 -1.85583989948408056847029001801274716854095458984375p-71 == -1.85583989948408056847029001801274716854095458984375p-71
; [HW: -1.85583989948408056847029001801274716854095458984375p-71] 

; mpf : - 3854360252405308 -71
; mpfd: - 3854360252405308 -71 (-7.85979e-022) class: Neg. norm. non-zero
; hwf : - 3854360252405308 -71 (-7.85979e-022) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110011 #b1110000011001010000011100101111100001001011001100010)))
(assert (= y (fp #b1 #b00110011010 #b0000110010101001101010110101001000100001001100101000)))
(assert (= z (fp #b1 #b01110111000 #b1101101100011000010100101101101011100101011000111100)))
(assert (= r (fp #b1 #b01110111000 #b1101101100011000010100101101101011100101011000111100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
