(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4632905295838034565036878120736218988895416259765625p-177 {+ 2086475056397897 -177 (7.63873e-054)}
; Y = 1.64849257821500305709605527226813137531280517578125p636 {+ 2920550933601620 636 (4.70072e+191)}
; Z = -1.66909630530213970445174709311686456203460693359375p31 {- 3013341871233692 31 (-3.58436e+009)}
; 1.4632905295838034565036878120736218988895416259765625p-177 x 1.64849257821500305709605527226813137531280517578125p636 -1.66909630530213970445174709311686456203460693359375p31 == 1.206111788895600778204197922605089843273162841796875p460
; [HW: 1.206111788895600778204197922605089843273162841796875p460] 

; mpf : + 928244975666894 460
; mpfd: + 928244975666894 460 (3.59075e+138) class: Pos. norm. non-zero
; hwf : + 928244975666894 460 (3.59075e+138) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001110 #b0111011010011010001101010100100100011011111001001001)))
(assert (= y (fp #b0 #b11001111011 #b1010011000000011100111000000111100100001110101010100)))
(assert (= z (fp #b1 #b10000011110 #b1010101101001001111001010011110100100101101010011100)))
(assert (= r (fp #b0 #b10111001011 #b0011010011000011101111100000000010100000011011001110)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
