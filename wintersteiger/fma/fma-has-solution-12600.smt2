(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2137479906575239230193119510659016668796539306640625p927 {- 962635371076417 927 (-1.377e+279)}
; Y = -1.6905152502393592239826602963148616254329681396484375p564 {- 3109804223671623 564 (-1.02079e+170)}
; Z = 1.5163740336781781348207687187823466956615447998046875p489 {+ 2325541905656843 489 (2.42367e+147)}
; -1.2137479906575239230193119510659016668796539306640625p927 x -1.6905152502393592239826602963148616254329681396484375p564 1.5163740336781781348207687187823466956615447998046875p489 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110011110 #b0011011010111000001100000011010101110101101101000001)))
(assert (= y (fp #b1 #b11000110011 #b1011000011000101100110111000000100101010110101000111)))
(assert (= z (fp #b0 #b10111101000 #b1000010000110001000101101011001100100110110000001011)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
