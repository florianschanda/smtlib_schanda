(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.16732643039181116506597390980459749698638916015625p686 {+ 753571249561796 686 (3.74774e+206)}
; Y = -1.4987092878184207211944567461614497005939483642578125p235 {- 2245986962785245 235 (-8.27497e+070)}
; Z = -1.938414382750790476706015397212468087673187255859375p62 {- 4226242664475574 62 (-8.93936e+018)}
; 1.16732643039181116506597390980459749698638916015625p686 x -1.4987092878184207211944567461614497005939483642578125p235 -1.938414382750790476706015397212468087673187255859375p62 == -1.749482963144130653887486914754845201969146728515625p921
; [HW: -1.749482963144130653887486914754845201969146728515625p921] 

; mpf : - 3375371193536442 921
; mpfd: - 3375371193536442 921 (-3.10124e+277) class: Neg. norm. non-zero
; hwf : - 3375371193536442 921 (-3.10124e+277) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010101101 #b0010101011010101111001111010101001001010000011000100)))
(assert (= y (fp #b1 #b10011101010 #b0111111110101011011010010111000101100100001111011101)))
(assert (= z (fp #b1 #b10000111101 #b1111000000111011111011001100110000000010101110110110)))
(assert (= r (fp #b1 #b11110011000 #b1011111111011110000111011000111110011100111110111010)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
