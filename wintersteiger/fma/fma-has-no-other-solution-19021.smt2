(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6429628240923463966538520253379829227924346923828125p207 {+ 2895647134995373 207 (3.37938e+062)}
; Y = 1.1686433013565158400837162844254635274410247802734375p183 {+ 759501909147735 183 (1.43275e+055)}
; Z = -1.001770867938342579606114668422378599643707275390625p-237 {- 7975280187242 -237 (-4.53586e-072)}
; 1.6429628240923463966538520253379829227924346923828125p207 x 1.1686433013565158400837162844254635274410247802734375p183 -1.001770867938342579606114668422378599643707275390625p-237 == 1.9200374987533042059340004925616085529327392578125p390
; [HW: 1.9200374987533042059340004925616085529327392578125p390] 

; mpf : + 4143480536552264 390
; mpfd: + 4143480536552264 390 (4.84181e+117) class: Pos. norm. non-zero
; hwf : + 4143480536552264 390 (4.84181e+117) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011001110 #b1010010010011001001101100010111000000101001110101101)))
(assert (= y (fp #b0 #b10010110110 #b0010101100101100001101010001100000000100000001010111)))
(assert (= z (fp #b1 #b01100010010 #b0000000001110100000011100011101111100001011101101010)))
(assert (= r (fp #b0 #b10110000101 #b1110101110000111100100111101100000111101001101001000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
