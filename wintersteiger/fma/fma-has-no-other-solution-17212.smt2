(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8862422370218376865835807620896957814693450927734375p218 {+ 3991280208411543 218 (7.94578e+065)}
; Y = -1.7225929997306577146076733697555027902126312255859375p-313 {- 3254269564327519 -313 (-1.03227e-094)}
; Z = -1.2446726732832844586340570458560250699520111083984375p283 {- 1101907760226343 283 (-1.93439e+085)}
; 1.8862422370218376865835807620896957814693450927734375p218 x -1.7225929997306577146076733697555027902126312255859375p-313 -1.2446726732832844586340570458560250699520111083984375p283 == -1.2446726732832844586340570458560250699520111083984375p283
; [HW: -1.2446726732832844586340570458560250699520111083984375p283] 

; mpf : - 1101907760226343 283
; mpfd: - 1101907760226343 283 (-1.93439e+085) class: Neg. norm. non-zero
; hwf : - 1101907760226343 283 (-1.93439e+085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011011001 #b1110001011100000110001010111000001010111101110010111)))
(assert (= y (fp #b1 #b01011000110 #b1011100011111011110110101101011000101001011001011111)))
(assert (= z (fp #b1 #b10100011010 #b0011111010100010110111100100100111111010000000100111)))
(assert (= r (fp #b1 #b10100011010 #b0011111010100010110111100100100111111010000000100111)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
