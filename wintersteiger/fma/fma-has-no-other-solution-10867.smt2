(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0694473510805153626535002331365831196308135986328125p677 {- 312763064448077 677 (-6.70605e+203)}
; Y = 1.7270106207195083936056789752910844981670379638671875p483 {+ 3274164760566771 483 (4.31303e+145)}
; Z = 1.358016989150477638048641892964951694011688232421875p-927 {+ 1612365178930398 -927 (1.19701e-279)}
; -1.0694473510805153626535002331365831196308135986328125p677 x 1.7270106207195083936056789752910844981670379638671875p483 1.358016989150477638048641892964951694011688232421875p-927 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010100100 #b0001000111000111010011010011010110101111010001001101)))
(assert (= y (fp #b0 #b10111100010 #b1011101000011101010111100011011111010101101111110011)))
(assert (= z (fp #b0 #b00001100000 #b0101101110100111000000000101101111010000010011011110)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
