(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5005167312155289760511323038372211158275604248046875p-76 {+ 2254126964194955 -76 (1.98592e-023)}
; Y = 1.2854687160463973416568705943063832819461822509765625p835 {+ 1285636803212489 835 (2.94515e+251)}
; Z = 1.50270429233532620827418213593773543834686279296875p-158 {+ 2263978863638924 -158 (4.11277e-048)}
; 1.5005167312155289760511323038372211158275604248046875p-76 x 1.2854687160463973416568705943063832819461822509765625p835 1.50270429233532620827418213593773543834686279296875p-158 == 1.928867315881763300211559908348135650157928466796875p759
; [HW: 1.928867315881763300211559908348135650157928466796875p759] 

; mpf : + 4183246497681742 759
; mpfd: + 4183246497681742 759 (5.84883e+228) class: Pos. norm. non-zero
; hwf : + 4183246497681742 759 (5.84883e+228) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110110011 #b1000000000100001110111010100111110101011111010001011)))
(assert (= y (fp #b0 #b11101000010 #b0100100100010100011110100100111101110011010011001001)))
(assert (= z (fp #b0 #b01101100001 #b1000000010110001001110100111111100100011100110001100)))
(assert (= r (fp #b0 #b11011110110 #b1110110111001010001111111001100000001001000101001110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
