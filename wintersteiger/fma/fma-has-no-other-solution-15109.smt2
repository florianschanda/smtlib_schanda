(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.17533237573736304426574861281551420688629150390625p-597 {+ 789626822036772 -597 (2.26597e-180)}
; Y = -zero {- 0 -1023 (-0)}
; Z = 1.6711593413198073676539934240281581878662109375p269 {+ 3022632959474112 269 (1.58521e+081)}
; 1.17533237573736304426574861281551420688629150390625p-597 x -zero 1.6711593413198073676539934240281581878662109375p269 == 1.6711593413198073676539934240281581878662109375p269
; [HW: 1.6711593413198073676539934240281581878662109375p269] 

; mpf : + 3022632959474112 269
; mpfd: + 3022632959474112 269 (1.58521e+081) class: Pos. norm. non-zero
; hwf : + 3022632959474112 269 (1.58521e+081) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101010 #b0010110011100010100101010010001110111000110100100100)))
(assert (= y (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= z (fp #b0 #b10100001100 #b1010101111010001000110010011110101011111100111000000)))
(assert (= r (fp #b0 #b10100001100 #b1010101111010001000110010011110101011111100111000000)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
