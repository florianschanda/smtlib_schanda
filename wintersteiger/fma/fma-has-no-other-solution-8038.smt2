(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1097745525116515796781868630205281078815460205078125p-230 {+ 494380633786237 -230 (6.43185e-070)}
; Y = -1.651186899272096386681596413836814463138580322265625p-677 {- 2932685076910362 -677 (-2.63323e-204)}
; Z = -1.87445266734350557413790738792158663272857666015625p-125 {- 3938184706801348 -125 (-4.40682e-038)}
; 1.1097745525116515796781868630205281078815460205078125p-230 x -1.651186899272096386681596413836814463138580322265625p-677 -1.87445266734350557413790738792158663272857666015625p-125 == -1.87445266734350557413790738792158663272857666015625p-125
; [HW: -1.87445266734350557413790738792158663272857666015625p-125] 

; mpf : - 3938184706801348 -125
; mpfd: - 3938184706801348 -125 (-4.40682e-038) class: Neg. norm. non-zero
; hwf : - 3938184706801348 -125 (-4.40682e-038) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100011001 #b0001110000011010001011110110000011111000011101111101)))
(assert (= y (fp #b1 #b00101011010 #b1010011010110100001011110100001111110101000100011010)))
(assert (= z (fp #b1 #b01110000010 #b1101111111011100001000010100100000100011111011000100)))
(assert (= r (fp #b1 #b01110000010 #b1101111111011100001000010100100000100011111011000100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
