(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4981461554903401367511150965583510696887969970703125p-431 {+ 2243450840242341 -431 (2.70163e-130)}
; Y = 1.4128365709707650932358546924660913646221160888671875p988 {+ 1859250627188851 988 (3.69596e+297)}
; Z = -1.09776806541071447753665779600851237773895263671875p826 {- 440308222952428 826 (-4.91232e+248)}
; 1.4981461554903401367511150965583510696887969970703125p-431 x 1.4128365709707650932358546924660913646221160888671875p988 -1.09776806541071447753665779600851237773895263671875p826 == -1.09776806541071447753665779600851237773895263671875p826
; [HW: -1.09776806541071447753665779600851237773895263671875p826] 

; mpf : - 440308222952428 826
; mpfd: - 440308222952428 826 (-4.91232e+248) class: Neg. norm. non-zero
; hwf : - 440308222952428 826 (-4.91232e+248) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010000 #b0111111110000110100000011010011001110101100010100101)))
(assert (= y (fp #b0 #b11111011011 #b0110100110101111101010000101001011101001100001110011)))
(assert (= z (fp #b1 #b11100111001 #b0001100100000111010100111111001110001000001111101100)))
(assert (= r (fp #b1 #b11100111001 #b0001100100000111010100111111001110001000001111101100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
