(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.384713331370059474778599906130693852901458740234375p-476 {+ 1732594815802662 -476 (7.09712e-144)}
; Y = -1.581966466766605794447286825743503868579864501953125p838 {- 2620943962872210 838 (-2.89957e+252)}
; Z = 1.578304227218615185535099953995086252689361572265625p164 {+ 2604450702208538 164 (3.69071e+049)}
; 1.384713331370059474778599906130693852901458740234375p-476 x -1.581966466766605794447286825743503868579864501953125p838 1.578304227218615185535099953995086252689361572265625p164 == -1.095285028156054440984235043288208544254302978515625p363
; [HW: -1.095285028156054440984235043288208544254302978515625p363] 

; mpf : - 429125617297594 363
; mpfd: - 429125617297594 363 (-2.05786e+109) class: Neg. norm. non-zero
; hwf : - 429125617297594 363 (-2.05786e+109) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000100011 #b0110001001111100100100101010100010010001110100100110)))
(assert (= y (fp #b1 #b11101000101 #b1001010011111011110000010001111000100001100110010010)))
(assert (= z (fp #b0 #b10010100011 #b1001010000001011101111101110111100001010111000011010)))
(assert (= r (fp #b1 #b10101101010 #b0001100001100100100110010111111110111010100010111010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
