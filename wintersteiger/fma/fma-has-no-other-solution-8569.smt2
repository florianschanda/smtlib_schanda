(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.917885137751526247740230246563442051410675048828125p-61 {- 4133787164346690 -61 (-8.3175e-019)}
; Y = -1.5917597801770233534313092604861594736576080322265625p-477 {- 2665049125498089 -477 (-4.07915e-144)}
; Z = 1.0254426273068724118076033846591599285602569580078125p108 {+ 114583406858557 108 (3.32775e+032)}
; -1.917885137751526247740230246563442051410675048828125p-61 x -1.5917597801770233534313092604861594736576080322265625p-477 1.0254426273068724118076033846591599285602569580078125p108 == 1.025442627306872633852208309690468013286590576171875p108
; [HW: 1.025442627306872633852208309690468013286590576171875p108] 

; mpf : + 114583406858558 108
; mpfd: + 114583406858558 108 (3.32775e+032) class: Pos. norm. non-zero
; hwf : + 114583406858558 108 (3.32775e+032) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111000010 #b1110101011111010100001010011100000100000100101000010)))
(assert (= y (fp #b1 #b01000100010 #b1001011101111101100100011010011011110010110011101001)))
(assert (= z (fp #b0 #b10001101011 #b0000011010000011011010000111010000110101000100111101)))
(assert (= r (fp #b0 #b10001101011 #b0000011010000011011010000111010000110101000100111110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
