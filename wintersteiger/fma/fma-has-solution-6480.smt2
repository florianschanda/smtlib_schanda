(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.987046001699905861670458762091584503650665283203125p-938 {- 4445260005453234 -938 (-8.55208e-283)}
; Y = 1.1968290966735164460033047362230718135833740234375p307 {+ 886439446434520 307 (3.12062e+092)}
; Z = -1.24839555179395489403759711422026157379150390625p-359 {- 1118674114499744 -359 (-1.06312e-108)}
; -1.987046001699905861670458762091584503650665283203125p-938 x 1.1968290966735164460033047362230718135833740234375p307 -1.24839555179395489403759711422026157379150390625p-359 == -1.24839555179395489403759711422026157379150390625p-359
; [HW: -1.24839555179395489403759711422026157379150390625p-359] 

; mpf : - 1118674114499744 -359
; mpfd: - 1118674114499744 -359 (-1.06312e-108) class: Neg. norm. non-zero
; hwf : - 1118674114499744 -359 (-1.06312e-108) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001010101 #b1111110010101111000010111111100011110010110110110010)))
(assert (= y (fp #b0 #b10100110010 #b0011001001100011011001000100010100011101001011011000)))
(assert (= z (fp #b1 #b01010011000 #b0011111110010110110110011101001101101101010010100000)))
(assert (= r (fp #b1 #b01010011000 #b0011111110010110110110011101001101101101010010100000)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
