(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3056401337335292733854430480278097093105316162109375p-281 {- 1376480792391791 -281 (-3.36043e-085)}
; Y = 1.437117955019194592836129231727682054042816162109375p217 {+ 1968604259341398 217 (3.02692e+065)}
; Z = 1.054901814784430680305149508058093488216400146484375p-419 {+ 247255792605126 -419 (7.79191e-127)}
; -1.3056401337335292733854430480278097093105316162109375p-281 x 1.437117955019194592836129231727682054042816162109375p217 1.054901814784430680305149508058093488216400146484375p-419 == -1.876358878982117506240001603146083652973175048828125p-64
; [HW: -1.876358878982117506240001603146083652973175048828125p-64] 

; mpf : - 3946769520826690 -64
; mpfd: - 3946769520826690 -64 (-1.01718e-019) class: Neg. norm. non-zero
; hwf : - 3946769520826690 -64 (-1.01718e-019) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100110 #b0100111000111110011011101000101010111011000001101111)))
(assert (= y (fp #b0 #b10011011000 #b0110111111100110111101100101100101001101010001010110)))
(assert (= z (fp #b0 #b01001011100 #b0000111000001110000010111001101011111101011111000110)))
(assert (= r (fp #b1 #b01110111111 #b1110000001011001000011100011010011001001100101000010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
