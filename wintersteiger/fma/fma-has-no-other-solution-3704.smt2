(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8404250419619214707012133658281527459621429443359375p175 {- 3784937905812543 175 (-8.81388e+052)}
; Y = 1.415036263221888024332884015166200697422027587890625p38 {+ 1869157160391338 38 (3.88962e+011)}
; Z = -1.7675092700157370995128758295322768390178680419921875p-271 {- 3456554462446275 -271 (-4.65836e-082)}
; -1.8404250419619214707012133658281527459621429443359375p175 x 1.415036263221888024332884015166200697422027587890625p38 -1.7675092700157370995128758295322768390178680419921875p-271 == -1.3021340870588919980122000197297893464565277099609375p214
; [HW: -1.3021340870588919980122000197297893464565277099609375p214] 

; mpf : - 1360690961894351 214
; mpfd: - 1360690961894351 214 (-3.42827e+064) class: Neg. norm. non-zero
; hwf : - 1360690961894351 214 (-3.42827e+064) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010101110 #b1101011100100110000110000111010111110111010000111111)))
(assert (= y (fp #b0 #b10000100101 #b0110101000111111110100010000100100110001001010101010)))
(assert (= z (fp #b1 #b01011110000 #b1100010001111011011111001100111000011000001011000011)))
(assert (= r (fp #b1 #b10011010101 #b0100110101011000101010001101011011101100101111001111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
