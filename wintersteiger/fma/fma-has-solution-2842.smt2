(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.85643646628946168419815876404754817485809326171875p-880 {- 3857046950447724 -880 (-2.30295e-265)}
; Y = -1.7073348231158635979198834320413880050182342529296875p-626 {- 3185552845810779 -626 (-6.13114e-189)}
; Z = -1.44525682855556425465692882426083087921142578125p-4 {- 2005258487167008 -4 (-0.0903286)}
; -1.85643646628946168419815876404754817485809326171875p-880 x -1.7073348231158635979198834320413880050182342529296875p-626 -1.44525682855556425465692882426083087921142578125p-4 == -1.4452568285555640326123238992295227944850921630859375p-4
; [HW: -1.4452568285555640326123238992295227944850921630859375p-4] 

; mpf : - 2005258487167007 -4
; mpfd: - 2005258487167007 -4 (-0.0903286) class: Neg. norm. non-zero
; hwf : - 2005258487167007 -4 (-0.0903286) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010001111 #b1101101100111111011010111001010111010000101001101100)))
(assert (= y (fp #b1 #b00110001101 #b1011010100010011111001010001110010011010110001011011)))
(assert (= z (fp #b1 #b01111111011 #b0111000111111100010110011111110011110111100000100000)))
(assert (= r (fp #b1 #b01111111011 #b0111000111111100010110011111110011110111100000011111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
