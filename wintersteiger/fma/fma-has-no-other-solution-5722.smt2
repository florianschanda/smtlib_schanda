(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -zero {- 0 -1023 (-0)}
; Y = -1.5369744213503528929010144565836526453495025634765625p280 {- 2418317803900937 280 (-2.98583e+084)}
; Z = -1.030430568770386745569567210623063147068023681640625p897 {- 137047098174986 897 (-1.08874e+270)}
; -zero x -1.5369744213503528929010144565836526453495025634765625p280 -1.030430568770386745569567210623063147068023681640625p897 == -1.030430568770386745569567210623063147068023681640625p897
; [HW: -1.030430568770386745569567210623063147068023681640625p897] 

; mpf : - 137047098174986 897
; mpfd: - 137047098174986 897 (-1.08874e+270) class: Neg. norm. non-zero
; hwf : - 137047098174986 897 (-1.08874e+270) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= y (fp #b1 #b10100010111 #b1000100101110111001001111101101001111101000000001001)))
(assert (= z (fp #b1 #b11110000000 #b0000011111001010010011000011100110101010111000001010)))
(assert (= r (fp #b1 #b11110000000 #b0000011111001010010011000011100110101010111000001010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
