(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.06615399237848595959121666965074837207794189453125p-458 {+ 297931095424820 -458 (1.43246e-138)}
; Y = 1.5995368137617360648761177799315191805362701416015625p401 {+ 2700073771052249 401 (8.26081e+120)}
; Z = -1.11841572658686327912391789141111075878143310546875p-422 {- 533297022131404 -422 (-1.03263e-127)}
; 1.06615399237848595959121666965074837207794189453125p-458 x 1.5995368137617360648761177799315191805362701416015625p401 -1.11841572658686327912391789141111075878143310546875p-422 == 1.7053525599484375963044158197590149939060211181640625p-57
; [HW: 1.7053525599484375963044158197590149939060211181640625p-57] 

; mpf : + 3176625526148609 -57
; mpfd: + 3176625526148609 -57 (1.18333e-017) class: Pos. norm. non-zero
; hwf : + 3176625526148609 -57 (1.18333e-017) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000110101 #b0001000011101111011101111101000111000011111100110100)))
(assert (= y (fp #b0 #b10110010000 #b1001100101111011001111101001111111011010110011011001)))
(assert (= z (fp #b1 #b01001011001 #b0001111001010000011111100011100100000101110011001100)))
(assert (= r (fp #b0 #b01111000110 #b1011010010010001111111000100000100100000111000000001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
