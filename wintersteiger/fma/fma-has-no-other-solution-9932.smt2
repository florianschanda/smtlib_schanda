(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.857761262511465449875913691357709467411041259765625p-536 {+ 3863013302219482 -536 (8.25871e-162)}
; Y = 1.3568489943273400744061518707894720137119293212890625p524 {+ 1607104997880145 524 (7.4516e+157)}
; Z = -1.2419071503107119713860129195381887257099151611328125p-56 {- 1089452951997581 -56 (-1.72349e-017)}
; 1.857761262511465449875913691357709467411041259765625p-536 x 1.3568489943273400744061518707894720137119293212890625p524 -1.2419071503107119713860129195381887257099151611328125p-56 == 1.260350750369450434362761370721273124217987060546875p-11
; [HW: 1.260350750369450434362761370721273124217987060546875p-11] 

; mpf : + 1172515542349486 -11
; mpfd: + 1172515542349486 -11 (0.000615406) class: Pos. norm. non-zero
; hwf : + 1172515542349486 -11 (0.000615406) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111100111 #b1101101110010110001111011111101001000011001011011010)))
(assert (= y (fp #b0 #b11000001011 #b0101101101011010011101001010100000111111000101010001)))
(assert (= z (fp #b1 #b01111000111 #b0011110111101101101000001000001101000000110010001101)))
(assert (= r (fp #b0 #b01111110100 #b0100001010100110010110001100011001010011011010101110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
