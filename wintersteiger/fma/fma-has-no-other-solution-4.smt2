(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.315055992039615428979004718712531030178070068359375p899 {+ 1418886048350454 899 (5.5579e+270)}
; Y = -1.0039863408704998715137435283395461738109588623046875p-882 {- 17952883258955 -882 (-3.11366e-266)}
; Z = -zero {- 0 -1023 (-0)}
; 1.315055992039615428979004718712531030178070068359375p899 x -1.0039863408704998715137435283395461738109588623046875p-882 -zero == -1.3202982534876788189848184629227034747600555419921875p17
; [HW: -1.3202982534876788189848184629227034747600555419921875p17] 

; mpf : - 1442495095054531 17
; mpfd: - 1442495095054531 17 (-173054) class: Neg. norm. non-zero
; hwf : - 1442495095054531 17 (-173054) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110000010 #b0101000010100111100000100110111000111000000011110110)))
(assert (= y (fp #b1 #b00010001101 #b0000000100000101001111111011001110101011011001001011)))
(assert (= z (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= r (fp #b1 #b10000010000 #b0101000111111111000100001111101110110010000011000011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
