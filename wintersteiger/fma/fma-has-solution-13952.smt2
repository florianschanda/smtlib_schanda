(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8588001430619589537940328227705322206020355224609375p-684 {+ 3867692004279567 -684 (2.31588e-206)}
; Y = 1.4624279706159997171965869711129926145076751708984375p-182 {+ 2082590436151911 -182 (2.3857e-055)}
; Z = 1.2815931097825608020457366365008056163787841796875p-570 {+ 1268182624286840 -570 (3.31629e-172)}
; 1.8588001430619589537940328227705322206020355224609375p-684 x 1.4624279706159997171965869711129926145076751708984375p-182 1.2815931097825608020457366365008056163787841796875p-570 == 1.2815931097825608020457366365008056163787841796875p-570
; [HW: 1.2815931097825608020457366365008056163787841796875p-570] 

; mpf : + 1268182624286840 -570
; mpfd: + 1268182624286840 -570 (3.31629e-172) class: Pos. norm. non-zero
; hwf : + 1268182624286840 -570 (3.31629e-172) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101010011 #b1101101111011010010100111000000001000000010100001111)))
(assert (= y (fp #b0 #b01101001001 #b0111011001100001101011011111001010001101001001100111)))
(assert (= z (fp #b0 #b00111000101 #b0100100000010110011111000110110101001011100001111000)))
(assert (= r (fp #b0 #b00111000101 #b0100100000010110011111000110110101001011100001111000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
