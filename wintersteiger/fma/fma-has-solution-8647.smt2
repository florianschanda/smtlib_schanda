(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0696351705668962761563989261048845946788787841796875p80 {- 313608928216955 80 (-1.29311e+024)}
; Y = -1.471241982507370149590997243649326264858245849609375p-431 {- 2122285216821526 -431 (-2.65311e-130)}
; Z = 1.68561793155475658778641445678658783435821533203125p-317 {+ 3087748661068532 -317 (6.31321e-096)}
; -1.0696351705668962761563989261048845946788787841796875p80 x -1.471241982507370149590997243649326264858245849609375p-431 1.68561793155475658778641445678658783435821533203125p-317 == 1.685617931646357536834557322436012327671051025390625p-317
; [HW: 1.685617931646357536834557322436012327671051025390625p-317] 

; mpf : + 3087748661481066 -317
; mpfd: + 3087748661481066 -317 (6.31321e-096) class: Pos. norm. non-zero
; hwf : + 3087748661481066 -317 (6.31321e-096) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001001111 #b0001000111010011100111000100110000111100011101111011)))
(assert (= y (fp #b1 #b01001010000 #b0111100010100011010100001000011101011111000100010110)))
(assert (= z (fp #b0 #b01011000010 #b1010111110000100101010000010000110010100001011110100)))
(assert (= r (fp #b0 #b01011000010 #b1010111110000100101010000010000111111000111001101010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
