(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.21318567672739785479052443406544625759124755859375p945 {+ 960102934270236 945 (3.60806e+284)}
; Y = 1.28543999935541375378988959710113704204559326171875p-238 {+ 1285507474733676 -238 (2.91013e-072)}
; Z = 1.3808788935356819393973637488670647144317626953125p-597 {+ 1715326043000584 -597 (2.66225e-180)}
; 1.21318567672739785479052443406544625759124755859375p945 x 1.28543999935541375378988959710113704204559326171875p-238 1.3808788935356819393973637488670647144317626953125p-597 == 1.5594773955104634932666840541060082614421844482421875p707
; [HW: 1.5594773955104634932666840541060082614421844482421875p707] 

; mpf : + 2519662189943139 707
; mpfd: + 2519662189943139 707 (1.04999e+213) class: Pos. norm. non-zero
; hwf : + 2519662189943139 707 (1.04999e+213) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110110000 #b0011011010010011010101100010010110000101000100011100)))
(assert (= y (fp #b0 #b01100010001 #b0100100100010010100110001000011000110011101001101100)))
(assert (= z (fp #b0 #b00110101010 #b0110000110000001010001110111011101111000111100001000)))
(assert (= r (fp #b0 #b11011000010 #b1000111100111001111010010001110010010001100101100011)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
