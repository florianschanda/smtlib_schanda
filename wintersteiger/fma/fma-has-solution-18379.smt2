(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9860291348713428050132279167883098125457763671875p-535 {- 4440680444383032 -535 (-1.76579e-161)}
; Y = 1.5613770390440115942709553564782254397869110107421875p-93 {+ 2528217423852963 -93 (1.57659e-028)}
; Z = -1.4116470742302233976062098008696921169757843017578125p-595 {- 1853893610111389 -595 (-1.08863e-179)}
; -1.9860291348713428050132279167883098125457763671875p-535 x 1.5613770390440115942709553564782254397869110107421875p-93 -1.4116470742302233976062098008696921169757843017578125p-595 == -1.4116470745912204076688567511155270040035247802734375p-595
; [HW: -1.4116470745912204076688567511155270040035247802734375p-595] 

; mpf : - 1853893611737175 -595
; mpfd: - 1853893611737175 -595 (-1.08863e-179) class: Neg. norm. non-zero
; hwf : - 1853893611737175 -595 (-1.08863e-179) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111101000 #b1111110001101100011001111100011100101100111100111000)))
(assert (= y (fp #b0 #b01110100010 #b1000111110110110011001111101011101101011010110100011)))
(assert (= z (fp #b1 #b00110101100 #b0110100101100001101100111110000101010000000110011101)))
(assert (= r (fp #b1 #b00110101100 #b0110100101100001101100111110001011011101000001010111)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
