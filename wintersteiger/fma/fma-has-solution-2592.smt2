(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4402467755673928895276958428439684212207794189453125p-361 {- 1982695214396373 -361 (-3.06626e-109)}
; Y = 1.1018179346144048036393314760061912238597869873046875p62 {+ 458547212389067 62 (5.08124e+018)}
; Z = 1.7152713669628834036728903811308555305004119873046875p130 {+ 3221295861722827 130 (2.33471e+039)}
; -1.4402467755673928895276958428439684212207794189453125p-361 x 1.1018179346144048036393314760061912238597869873046875p62 1.7152713669628834036728903811308555305004119873046875p130 == 1.715271366962883181628285456099547445774078369140625p130
; [HW: 1.715271366962883181628285456099547445774078369140625p130] 

; mpf : + 3221295861722826 130
; mpfd: + 3221295861722826 130 (2.33471e+039) class: Pos. norm. non-zero
; hwf : + 3221295861722826 130 (2.33471e+039) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010010110 #b0111000010110100000000110011111100111011001111010101)))
(assert (= y (fp #b0 #b10000111101 #b0001101000010000101111010111101101010000101011001011)))
(assert (= z (fp #b0 #b10010000001 #b1011011100011100000001100011100011011110111011001011)))
(assert (= r (fp #b0 #b10010000001 #b1011011100011100000001100011100011011110111011001010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
