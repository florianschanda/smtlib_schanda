(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4511527169220654887027421864331699907779693603515625p20 {+ 2031811207817401 20 (1.52164e+006)}
; Y = 1.7137107603876742256687748522381298243999481201171875p685 {+ 3214267514532243 685 (2.75096e+206)}
; Z = -1.6345430400205593901574729898129589855670928955078125p113 {- 2857727798587133 113 (-1.69741e+034)}
; 1.4511527169220654887027421864331699907779693603515625p20 x 1.7137107603876742256687748522381298243999481201171875p685 -1.6345430400205593901574729898129589855670928955078125p113 == 1.2434280129775761025712199625559151172637939453125p706
; [HW: 1.2434280129775761025712199625559151172637939453125p706] 

; mpf : + 1096302308537352 706
; mpfd: + 1096302308537352 706 (4.18598e+212) class: Pos. norm. non-zero
; hwf : + 1096302308537352 706 (4.18598e+212) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000010011 #b0111001101111110101111101001010010101110100010111001)))
(assert (= y (fp #b0 #b11010101100 #b1011011010110101101111111001011010101011000110010011)))
(assert (= z (fp #b1 #b10001110000 #b1010001001110001011010011010010011001010111011111101)))
(assert (= r (fp #b0 #b11011000001 #b0011111001010001010011000101101010101011010000001000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
