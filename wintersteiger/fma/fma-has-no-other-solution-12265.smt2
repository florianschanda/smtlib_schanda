(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1841089570271414732616221954231150448322296142578125p-441 {- 829153030263005 -441 (-2.08528e-133)}
; Y = 1.714583039236643902114565207739360630512237548828125p828 {+ 3218195909231426 828 (3.06899e+249)}
; Z = 1.515686059317270295565549531602300703525543212890625p-171 {+ 2322443544581418 -171 (5.06384e-052)}
; -1.1841089570271414732616221954231150448322296142578125p-441 x 1.714583039236643902114565207739360630512237548828125p828 1.515686059317270295565549531602300703525543212890625p-171 == -1.0151265671634643883436410760623402893543243408203125p388
; [HW: -1.0151265671634643883436410760623402893543243408203125p388] 

; mpf : - 68124002240773 388
; mpfd: - 68124002240773 388 (-6.39968e+116) class: Neg. norm. non-zero
; hwf : - 68124002240773 388 (-6.39968e+116) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001000110 #b0010111100100001110000111011110101010101000011011101)))
(assert (= y (fp #b0 #b11100111011 #b1011011011101110111010011111111111001100001101000010)))
(assert (= z (fp #b0 #b01101010100 #b1000010000000100000000000110011111000101010100101010)))
(assert (= r (fp #b1 #b10110000011 #b0000001111011111010101011010111101000100100100000101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
