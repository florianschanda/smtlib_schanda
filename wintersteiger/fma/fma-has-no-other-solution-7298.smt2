(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.64470441419206725441881644655950367450714111328125p-454 {+ 2903490559519508 -454 (3.53565e-137)}
; Y = 1.2070200179622696534664783030166290700435638427734375p549 {+ 932335275753111 549 (2.22424e+165)}
; Z = -1.592480983673802530375951391761191189289093017578125p956 {- 2668297137297442 956 (-9.69952e+287)}
; 1.64470441419206725441881644655950367450714111328125p-454 x 1.2070200179622696534664783030166290700435638427734375p549 -1.592480983673802530375951391761191189289093017578125p956 == -1.592480983673802530375951391761191189289093017578125p956
; [HW: -1.592480983673802530375951391761191189289093017578125p956] 

; mpf : - 2668297137297442 956
; mpfd: - 2668297137297442 956 (-9.69952e+287) class: Neg. norm. non-zero
; hwf : - 2668297137297442 956 (-9.69952e+287) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000111001 #b1010010100001011010110010011011010001010101100010100)))
(assert (= y (fp #b0 #b11000100100 #b0011010011111111010000111000111011000011111010010111)))
(assert (= z (fp #b1 #b11110111011 #b1001011110101100110101010111000001100001100000100010)))
(assert (= r (fp #b1 #b11110111011 #b1001011110101100110101010111000001100001100000100010)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
