(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3748757645882789812930013795266859233379364013671875p-927 {+ 1688290353710003 -927 (1.21187e-279)}
; Y = 1.83652688894480409231846351758576929569244384765625p118 {+ 3767382185337220 118 (6.10291e+035)}
; Z = 1.7811622344924540328747752937488257884979248046875p348 {+ 3518041948176120 348 (1.02127e+105)}
; 1.3748757645882789812930013795266859233379364013671875p-927 x 1.83652688894480409231846351758576929569244384765625p118 1.7811622344924540328747752937488257884979248046875p348 == 1.7811622344924540328747752937488257884979248046875p348
; [HW: 1.7811622344924540328747752937488257884979248046875p348] 

; mpf : + 3518041948176120 348
; mpfd: + 3518041948176120 348 (1.02127e+105) class: Pos. norm. non-zero
; hwf : + 3518041948176120 348 (1.02127e+105) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001100000 #b0101111111110111110110111010110011111000001110110011)))
(assert (= y (fp #b0 #b10001110101 #b1101011000100110101000000100111000111110000110000100)))
(assert (= z (fp #b0 #b10101011011 #b1100011111111010001111111000101000000011111011111000)))
(assert (= r (fp #b0 #b10101011011 #b1100011111111010001111111000101000000011111011111000)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
