(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5240654624649729864671598988934420049190521240234375p251 {- 2360181021474999 251 (-5.51484e+075)}
; Y = -1.1880372774595040485934305252158083021640777587890625p183 {- 846844612698385 183 (-1.45653e+055)}
; Z = 1.541005545878219695765665164799429476261138916015625p416 {+ 2436472374822522 416 (2.60785e+125)}
; -1.5240654624649729864671598988934420049190521240234375p251 x -1.1880372774595040485934305252158083021640777587890625p183 1.541005545878219695765665164799429476261138916015625p416 == 1.8106524611665888446765393382520414888858795166015625p434
; [HW: 1.8106524611665888446765393382520414888858795166015625p434] 

; mpf : + 3650854122036825 434
; mpfd: + 3650854122036825 434 (8.03255e+130) class: Pos. norm. non-zero
; hwf : + 3650854122036825 434 (8.03255e+130) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011111010 #b1000011000101001001001110111011001000000000010110111)))
(assert (= y (fp #b1 #b10010110110 #b0011000000100011001101100000010100011110000100010001)))
(assert (= z (fp #b0 #b10110011111 #b1000101001111111010101101110011010000000011001111010)))
(assert (= r (fp #b0 #b10110110001 #b1100111110000110111010110111000100100001111001011001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
