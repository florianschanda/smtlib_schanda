(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.42934836038128043611550310743041336536407470703125p-931 {- 1933613115825268 -931 (-7.8743e-281)}
; Y = 1.843050330917266332875215084641240537166595458984375p-976 {+ 3796761156173574 -976 (2.88577e-294)}
; Z = 1.6722678327388280639098638857831247150897979736328125p-583 {+ 3027625161015757 -583 (5.28224e-176)}
; -1.42934836038128043611550310743041336536407470703125p-931 x 1.843050330917266332875215084641240537166595458984375p-976 1.6722678327388280639098638857831247150897979736328125p-583 == 1.67226783273882784186525896075181663036346435546875p-583
; [HW: 1.67226783273882784186525896075181663036346435546875p-583] 

; mpf : + 3027625161015756 -583
; mpfd: + 3027625161015756 -583 (5.28224e-176) class: Pos. norm. non-zero
; hwf : + 3027625161015756 -583 (5.28224e-176) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001011100 #b0110110111101001110001100010111001101101110001110100)))
(assert (= y (fp #b0 #b00000101111 #b1101011111010010001001011000000000101011111100000110)))
(assert (= z (fp #b0 #b00110111000 #b1010110000011001101111101010001111000100000111001101)))
(assert (= r (fp #b0 #b00110111000 #b1010110000011001101111101010001111000100000111001100)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
