(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5681624875669217811235967019456438720226287841796875p-651 {- 2558776367292283 -651 (-1.67828e-196)}
; Y = -1.80778688871755566225374423083849251270294189453125p588 {- 3637948731023156 588 (-1.83141e+177)}
; Z = 1.0832859329957631455698674471932463347911834716796875p-904 {+ 375086496804923 -904 (8.0099e-273)}
; -1.5681624875669217811235967019456438720226287841796875p-651 x -1.80778688871755566225374423083849251270294189453125p588 1.0832859329957631455698674471932463347911834716796875p-904 == 1.4174517922010938519861156237311661243438720703125p-62
; [HW: 1.4174517922010938519861156237311661243438720703125p-62] 

; mpf : + 1880035735801992 -62
; mpfd: + 1880035735801992 -62 (3.07361e-019) class: Pos. norm. non-zero
; hwf : + 1880035735801992 -62 (3.07361e-019) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101110100 #b1001000101110011000110001100011011101001111101111011)))
(assert (= y (fp #b1 #b11001001011 #b1100111011001011000111110001110100101101111100110100)))
(assert (= z (fp #b0 #b00001110111 #b0001010101010010001110100001011001101111000000111011)))
(assert (= r (fp #b0 #b01111000001 #b0110101011011110000111101110001100101001000010001000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
