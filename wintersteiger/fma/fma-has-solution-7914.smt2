(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2492861573218132509310862587881274521350860595703125p101 {+ 1122685045223141 101 (3.16732e+030)}
; Y = 1.068233632730775095609487834735773503780364990234375p-255 {+ 307296962940454 -255 (1.84509e-077)}
; Z = -1.929802001928909493955188736435957252979278564453125p797 {- 4187455949415378 797 (-1.60849e+240)}
; 1.2492861573218132509310862587881274521350860595703125p101 x 1.068233632730775095609487834735773503780364990234375p-255 -1.929802001928909493955188736435957252979278564453125p797 == -1.929802001928909493955188736435957252979278564453125p797
; [HW: -1.929802001928909493955188736435957252979278564453125p797] 

; mpf : - 4187455949415378 797
; mpfd: - 4187455949415378 797 (-1.60849e+240) class: Neg. norm. non-zero
; hwf : - 4187455949415378 797 (-1.60849e+240) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001100100 #b0011111111010001001101111011010100001010111011100101)))
(assert (= y (fp #b0 #b01100000000 #b0001000101110111110000100110010100010000111000100110)))
(assert (= z (fp #b1 #b11100011100 #b1110111000000111100000010000011000001010001111010010)))
(assert (= r (fp #b1 #b11100011100 #b1110111000000111100000010000011000001010001111010010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
