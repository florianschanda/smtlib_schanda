(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1935972921686530678897497637080959975719451904296875p-815 {- 871884692870683 -815 (-5.46275e-246)}
; Y = 1.8540354312483280363466064954991452395915985107421875p260 {+ 3846233649931171 260 (3.43492e+078)}
; Z = -1.6247115946850645418209069248405285179615020751953125p432 {- 2813450905037685 432 (-1.80192e+130)}
; -1.1935972921686530678897497637080959975719451904296875p-815 x 1.8540354312483280363466064954991452395915985107421875p260 -1.6247115946850645418209069248405285179615020751953125p432 == -1.6247115946850645418209069248405285179615020751953125p432
; [HW: -1.6247115946850645418209069248405285179615020751953125p432] 

; mpf : - 2813450905037685 432
; mpfd: - 2813450905037685 432 (-1.80192e+130) class: Neg. norm. non-zero
; hwf : - 2813450905037685 432 (-1.80192e+130) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010000 #b0011000110001111100101111001011001110101011000011011)))
(assert (= y (fp #b0 #b10100000011 #b1101101010100010000100001110011011010110001110100011)))
(assert (= z (fp #b1 #b10110101111 #b1001111111101101000110010101110010011010101101110101)))
(assert (= r (fp #b1 #b10110101111 #b1001111111101101000110010101110010011010101101110101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
