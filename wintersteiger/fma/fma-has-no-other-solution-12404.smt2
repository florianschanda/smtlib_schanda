(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2813478288628370460600081059965305030345916748046875p61 {- 1267077977228171 61 (-2.95459e+018)}
; Y = -1.284055484972252969555484014563262462615966796875p-728 {- 1279272176273584 -728 (-9.09383e-220)}
; Z = 1.4199445919083928391302151794661767780780792236328125p-898 {+ 1891262307634893 -898 (6.71947e-271)}
; -1.2813478288628370460600081059965305030345916748046875p61 x -1.284055484972252969555484014563262462615966796875p-728 1.4199445919083928391302151794661767780780792236328125p-898 == 1.64532170780861353165391847142018377780914306640625p-667
; [HW: 1.64532170780861353165391847142018377780914306640625p-667] 

; mpf : + 2906270602820964 -667
; mpfd: + 2906270602820964 -667 (2.68685e-201) class: Pos. norm. non-zero
; hwf : + 2906270602820964 -667 (2.68685e-201) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000111100 #b0100100000000110011010010100101111000100001110001011)))
(assert (= y (fp #b1 #b00100100111 #b0100100010110111110111000011101000110100100010110000)))
(assert (= z (fp #b0 #b00001111101 #b0110101110000001011111010010000001100000111011001101)))
(assert (= r (fp #b0 #b00101100100 #b1010010100110011110011011010111001101111110101100100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
