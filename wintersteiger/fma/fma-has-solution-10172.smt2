(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.78489496090840571440594430896453559398651123046875p555 {- 3534852653472076 555 (-2.10504e+167)}
; Y = -1.62785984137981021291352590196765959262847900390625p-151 {- 2827629347679012 -151 (-5.70279e-046)}
; Z = -1.914482090440813077947268538991920650005340576171875p230 {- 4118461201746238 230 (-3.30332e+069)}
; -1.78489496090840571440594430896453559398651123046875p555 x -1.62785984137981021291352590196765959262847900390625p-151 -1.914482090440813077947268538991920650005340576171875p230 == 1.4527794139719898414142562614870257675647735595703125p405
; [HW: 1.4527794139719898414142562614870257675647735595703125p405] 

; mpf : + 2039137200045285 405
; mpfd: + 2039137200045285 405 (1.20046e+122) class: Pos. norm. non-zero
; hwf : + 2039137200045285 405 (1.20046e+122) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000101010 #b1100100011101110111000000100101111100101100101001100)))
(assert (= y (fp #b1 #b01101101000 #b1010000010111011011011000010110100110010101100100100)))
(assert (= z (fp #b1 #b10011100101 #b1110101000011011011111111000111100111000100100111110)))
(assert (= r (fp #b0 #b10110010100 #b0111001111101001010110100000011101001111110011100101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
