(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7142266876394824937079874871415086090564727783203125p176 {- 3216591044311237 176 (-1.6419e+053)}
; Y = 1.58167673192720226182927945046685636043548583984375p-454 {+ 2619639113157436 -454 (3.40016e-137)}
; Z = 1.50080511871468491591485872049815952777862548828125p63 {+ 2255425746028692 63 (1.38425e+019)}
; -1.7142266876394824937079874871415086090564727783203125p176 x 1.58167673192720226182927945046685636043548583984375p-454 1.50080511871468491591485872049815952777862548828125p63 == 1.50080511871468491591485872049815952777862548828125p63
; [HW: 1.50080511871468491591485872049815952777862548828125p63] 

; mpf : + 2255425746028692 63
; mpfd: + 2255425746028692 63 (1.38425e+019) class: Pos. norm. non-zero
; hwf : + 2255425746028692 63 (1.38425e+019) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010101111 #b1011011011010111100011110110100101010111100011000101)))
(assert (= y (fp #b0 #b01000111001 #b1001010011101000110001000010110001111000101100111100)))
(assert (= z (fp #b0 #b10000111110 #b1000000000110100110000111010011010001100100010010100)))
(assert (= r (fp #b0 #b10000111110 #b1000000000110100110000111010011010001100100010010100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
