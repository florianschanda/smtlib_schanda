(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0415710506974331650553722283802926540374755859375p-641 {+ 187219368430360 -641 (1.14146e-193)}
; Y = 1.3561668720330481985314463599934242665767669677734375p-75 {+ 1604032992169751 -75 (3.58974e-023)}
; Z = -1.5222564141721492969594464739202521741390228271484375p977 {- 2352033792257543 977 (-1.94444e+294)}
; 1.0415710506974331650553722283802926540374755859375p-641 x 1.3561668720330481985314463599934242665767669677734375p-75 -1.5222564141721492969594464739202521741390228271484375p977 == -1.522256414172149074914841548888944089412689208984375p977
; [HW: -1.522256414172149074914841548888944089412689208984375p977] 

; mpf : - 2352033792257542 977
; mpfd: - 2352033792257542 977 (-1.94444e+294) class: Neg. norm. non-zero
; hwf : - 2352033792257542 977 (-1.94444e+294) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101111110 #b0000101010100100011001100111111100110100101100011000)))
(assert (= y (fp #b0 #b01110110100 #b0101101100101101110000001000101101001100111100010111)))
(assert (= z (fp #b1 #b11111010000 #b1000010110110010100110001010101011111110111000000111)))
(assert (= r (fp #b1 #b11111010000 #b1000010110110010100110001010101011111110111000000110)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
