(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9097900539569481193069577784626744687557220458984375p-783 {+ 4097330147985895 -783 (3.75404e-236)}
; Y = 1.9531484649640653561419867401127703487873077392578125p-575 {+ 4292599071640925 -575 (1.57938e-173)}
; Z = -1.032765900943925618804541954887099564075469970703125p295 {- 147564499281522 295 (-6.57432e+088)}
; 1.9097900539569481193069577784626744687557220458984375p-783 x 1.9531484649640653561419867401127703487873077392578125p-575 -1.032765900943925618804541954887099564075469970703125p295 == -1.032765900943925618804541954887099564075469970703125p295
; [HW: -1.032765900943925618804541954887099564075469970703125p295] 

; mpf : - 147564499281522 295
; mpfd: - 147564499281522 295 (-6.57432e+088) class: Neg. norm. non-zero
; hwf : - 147564499281522 295 (-6.57432e+088) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011110000 #b1110100011101000000000000011111111111000100111100111)))
(assert (= y (fp #b0 #b00111000000 #b1111010000000001100010011010110101000000110101011101)))
(assert (= z (fp #b1 #b10100100110 #b0000100001100011010110001001100011111010011001110010)))
(assert (= r (fp #b1 #b10100100110 #b0000100001100011010110001001100011111010011001110010)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
