(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3239562921433412068239476866438053548336029052734375p-948 {- 1458969436581079 -948 (-5.56465e-286)}
; Y = 1.6660142109313758052024923017597757279872894287109375p-77 {+ 2999461352173999 -77 (1.10248e-023)}
; Z = 1.9148684711398769042745016122353263199329376220703125p277 {+ 4120201305718565 277 (4.64994e+083)}
; -1.3239562921433412068239476866438053548336029052734375p-948 x 1.6660142109313758052024923017597757279872894287109375p-77 1.9148684711398769042745016122353263199329376220703125p277 == 1.91486847113987668222989668720401823520660400390625p277
; [HW: 1.91486847113987668222989668720401823520660400390625p277] 

; mpf : + 4120201305718564 277
; mpfd: + 4120201305718564 277 (4.64994e+083) class: Pos. norm. non-zero
; hwf : + 4120201305718564 277 (4.64994e+083) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001011 #b0101001011101110110011001011000000010110110011010111)))
(assert (= y (fp #b0 #b01110110010 #b1010101001111111111010000100011010011111000110101111)))
(assert (= z (fp #b0 #b10100010100 #b1110101000110100110100011111001110101111111100100101)))
(assert (= r (fp #b0 #b10100010100 #b1110101000110100110100011111001110101111111100100100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
