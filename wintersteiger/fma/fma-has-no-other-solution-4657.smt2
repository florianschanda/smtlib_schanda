(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.09004086594085691785949165932834148406982421875p-311 {- 405508010299360 -311 (-2.61285e-094)}
; Y = 1.91082646707519732132141143665648996829986572265625p392 {+ 4101997737719044 392 (1.92743e+118)}
; Z = -1.6867523318985038205397586352773942053318023681640625p77 {- 3092857546033921 77 (-2.54895e+023)}
; -1.09004086594085691785949165932834148406982421875p-311 x 1.91082646707519732132141143665648996829986572265625p392 -1.6867523318985038205397586352773942053318023681640625p77 == -1.0941504787885065752561786212027072906494140625p82
; [HW: -1.0941504787885065752561786212027072906494140625p82] 

; mpf : - 424016061188672 82
; mpfd: - 424016061188672 82 (-5.29099e+024) class: Neg. norm. non-zero
; hwf : - 424016061188672 82 (-5.29099e+024) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011001000 #b0001011100001100111010110000111010000100111111100000)))
(assert (= y (fp #b0 #b10110000111 #b1110100100101011111011000110000001101011010100000100)))
(assert (= z (fp #b1 #b10001001100 #b1010111111001111000000000011010111110100101100000001)))
(assert (= r (fp #b1 #b10001010001 #b0001100000011010001111101110101101001100101001000000)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
