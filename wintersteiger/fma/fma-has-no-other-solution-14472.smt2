(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.513496471264150766700140593457035720348358154296875p-708 {- 2312582516641294 -708 (-1.12394e-213)}
; Y = 1.0316382326944533165402617669315077364444732666015625p-313 {+ 142485932973401 -313 (6.18214e-095)}
; Z = 1.3080632637913056637302133822231553494930267333984375p-493 {+ 1387393600017063 -493 (5.11494e-149)}
; -1.513496471264150766700140593457035720348358154296875p-708 x 1.0316382326944533165402617669315077364444732666015625p-313 1.3080632637913056637302133822231553494930267333984375p-493 == 1.308063263791305441685608457191847264766693115234375p-493
; [HW: 1.308063263791305441685608457191847264766693115234375p-493] 

; mpf : + 1387393600017062 -493
; mpfd: + 1387393600017062 -493 (5.11494e-149) class: Pos. norm. non-zero
; hwf : + 1387393600017062 -493 (5.11494e-149) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100111011 #b1000001101110100100000010011011010110000111000001110)))
(assert (= y (fp #b0 #b01011000110 #b0000100000011001011100010111011010111001110101011001)))
(assert (= z (fp #b0 #b01000010010 #b0100111011011101001110111110101100010101001010100111)))
(assert (= r (fp #b0 #b01000010010 #b0100111011011101001110111110101100010101001010100110)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
