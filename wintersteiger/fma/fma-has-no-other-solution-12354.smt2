(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 0.4463825482296790436720357320155017077922821044921875p-1022 {+ 2010328277871875 -1023 (9.93234e-309)}
; Y = 1.7396315817806244918841684921062551438808441162109375p1003 {+ 3331004516098671 1003 (1.49122e+302)}
; Z = -1.4892241851101519767297531871008686721324920654296875p289 {- 2203269857762715 289 (-1.48125e+087)}
; 0.4463825482296790436720357320155017077922821044921875p-1022 x 1.7396315817806244918841684921062551438808441162109375p1003 -1.4892241851101519767297531871008686721324920654296875p289 == -1.489224185110151754685148262069560587406158447265625p289
; [HW: -1.489224185110151754685148262069560587406158447265625p289] 

; mpf : - 2203269857762714 289
; mpfd: - 2203269857762714 289 (-1.48125e+087) class: Neg. norm. non-zero
; hwf : - 2203269857762714 289 (-1.48125e+087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0111001001000110001000000110111000100110110100000011)))
(assert (= y (fp #b0 #b11111101010 #b1011110101011000011111101100111011010110001001101111)))
(assert (= z (fp #b1 #b10100100000 #b0111110100111101110010111101001101110101110110011011)))
(assert (= r (fp #b1 #b10100100000 #b0111110100111101110010111101001101110101110110011010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
