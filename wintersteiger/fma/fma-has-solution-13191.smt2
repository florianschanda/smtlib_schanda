(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7702546325736694399211046402342617511749267578125p-19 {- 3468918476239176 -19 (-3.37649e-006)}
; Y = 1.3333417357459171892486438082414679229259490966796875p-534 {+ 1501237716892347 -534 (2.37096e-161)}
; Z = 1.4350920746076047951333976016030646860599517822265625p993 {+ 1959480505074665 993 (1.20134e+299)}
; -1.7702546325736694399211046402342617511749267578125p-19 x 1.3333417357459171892486438082414679229259490966796875p-534 1.4350920746076047951333976016030646860599517822265625p993 == 1.4350920746076047951333976016030646860599517822265625p993
; [HW: 1.4350920746076047951333976016030646860599517822265625p993] 

; mpf : + 1959480505074665 993
; mpfd: + 1959480505074665 993 (1.20134e+299) class: Pos. norm. non-zero
; hwf : + 1959480505074665 993 (1.20134e+299) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111101100 #b1100010100101111011010000101100001111111000101001000)))
(assert (= y (fp #b0 #b00111101001 #b0101010101010101111000100100110101101011101010111011)))
(assert (= z (fp #b0 #b11111100000 #b0110111101100010001100011011011100110000001111101001)))
(assert (= r (fp #b0 #b11111100000 #b0110111101100010001100011011011100110000001111101001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
