(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.083305434173064352165738455369137227535247802734375p840 {- 375174322299750 840 (-7.94232e+252)}
; Y = -1.3345311179217811403674431858235038816928863525390625p-564 {- 1506594218016369 -564 (-2.2101e-170)}
; Z = -1.2207518023236041404544494071160443127155303955078125p536 {- 994177734685949 536 (-2.74603e+161)}
; -1.083305434173064352165738455369137227535247802734375p840 x -1.3345311179217811403674431858235038816928863525390625p-564 -1.2207518023236041404544494071160443127155303955078125p536 == -1.22075180232360391840984448208473622798919677734375p536
; [HW: -1.22075180232360391840984448208473622798919677734375p536] 

; mpf : - 994177734685948 536
; mpfd: - 994177734685948 536 (-2.74603e+161) class: Neg. norm. non-zero
; hwf : - 994177734685948 536 (-2.74603e+161) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000111 #b0001010101010011100000010100001101011010001101100110)))
(assert (= y (fp #b1 #b00111001011 #b0101010110100011110101001101001011110111111001110001)))
(assert (= z (fp #b1 #b11000010111 #b0011100010000011001100001010101110000011010011111101)))
(assert (= r (fp #b1 #b11000010111 #b0011100010000011001100001010101110000011010011111100)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
