(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1261048073533561630910071471589617431163787841796875p-181 {- 567925563406203 -181 (-3.67409e-055)}
; Y = -1.626907882484835976555359593476168811321258544921875p354 {- 2823342105954334 354 (-5.9701e+106)}
; Z = -1.520414017489364777446780863101594150066375732421875p111 {- 2343736375243486 111 (-3.94722e+033)}
; -1.1261048073533561630910071471589617431163787841796875p-181 x -1.626907882484835976555359593476168811321258544921875p354 -1.520414017489364777446780863101594150066375732421875p111 == 1.8320687875872427863299662931240163743495941162109375p173
; [HW: 1.8320687875872427863299662931240163743495941162109375p173] 

; mpf : + 3747304681724527 173
; mpfd: + 3747304681724527 173 (2.19347e+052) class: Pos. norm. non-zero
; hwf : + 3747304681724527 173 (2.19347e+052) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001010 #b0010000001001000011001111001011101110011011101111011)))
(assert (= y (fp #b1 #b10101100001 #b1010000001111101000010001111010011100000100000011110)))
(assert (= z (fp #b1 #b10001101110 #b1000010100111001110110100110000101111111001011011110)))
(assert (= r (fp #b0 #b10010101100 #b1101010100000010011101011100011010110101101001101111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
