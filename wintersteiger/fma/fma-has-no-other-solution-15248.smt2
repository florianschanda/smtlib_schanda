(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1519042877882761377605902453069575130939483642578125p298 {+ 684116093879261 298 (5.86618e+089)}
; Y = 1.2809167649761363794169710672576911747455596923828125p-143 {+ 1265136638068653 -143 (1.14877e-043)}
; Z = 1.91229443702020329709512225235812366008758544921875p308 {+ 4108608886616364 308 (9.97226e+092)}
; 1.1519042877882761377605902453069575130939483642578125p298 x 1.2809167649761363794169710672576911747455596923828125p-143 1.91229443702020329709512225235812366008758544921875p308 == 1.91229443702020329709512225235812366008758544921875p308
; [HW: 1.91229443702020329709512225235812366008758544921875p308] 

; mpf : + 4108608886616364 308
; mpfd: + 4108608886616364 308 (9.97226e+092) class: Pos. norm. non-zero
; hwf : + 4108608886616364 308 (9.97226e+092) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101001 #b0010011011100011001100110000110000101100001111011101)))
(assert (= y (fp #b0 #b01101110000 #b0100011111101010001010010011111001111000011110101101)))
(assert (= z (fp #b0 #b10100110011 #b1110100110001100001000001101001101010011000100101100)))
(assert (= r (fp #b0 #b10100110011 #b1110100110001100001000001101001101010011000100101100)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
