(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.748063699805768589357057862798683345317840576171875p309 {- 3368979399694654 309 (-1.82316e+093)}
; Y = -1.2589093121372769701338256709277629852294921875p-611 {- 1166023881664192 -611 (-1.48138e-184)}
; Z = -1.0988120787139294964873670323868282139301300048828125p136 {- 445010040875757 136 (-9.572e+040)}
; -1.748063699805768589357057862798683345317840576171875p309 x -1.2589093121372769701338256709277629852294921875p-611 -1.0988120787139294964873670323868282139301300048828125p136 == -1.0988120787139294964873670323868282139301300048828125p136
; [HW: -1.0988120787139294964873670323868282139301300048828125p136] 

; mpf : - 445010040875757 136
; mpfd: - 445010040875757 136 (-9.572e+040) class: Neg. norm. non-zero
; hwf : - 445010040875757 136 (-9.572e+040) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100110100 #b1011111110000001000110100100010111111101100100111110)))
(assert (= y (fp #b1 #b00110011100 #b0100001001000111111000010111010001000010011011000000)))
(assert (= z (fp #b1 #b10010000111 #b0001100101001011101111111001011010000110101011101101)))
(assert (= r (fp #b1 #b10010000111 #b0001100101001011101111111001011010000110101011101101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
