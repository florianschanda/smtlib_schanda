(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7889219228572716957614829880185425281524658203125p-572 {+ 3552988477804424 -572 (1.15727e-172)}
; Y = 1.528013480241594113095970897120423614978790283203125p296 {+ 2377961312862642 296 (1.94539e+089)}
; Z = -1.80413684475804103612972539849579334259033203125p-484 {- 3621510394407200 -484 (-3.61203e-146)}
; 1.7889219228572716957614829880185425281524658203125p-572 x 1.528013480241594113095970897120423614978790283203125p296 -1.80413684475804103612972539849579334259033203125p-484 == 1.3667484066128119390981510150595568120479583740234375p-275
; [HW: 1.3667484066128119390981510150595568120479583740234375p-275] 

; mpf : + 1651687987360183 -275
; mpfd: + 1651687987360183 -275 (2.25133e-083) class: Pos. norm. non-zero
; hwf : + 1651687987360183 -275 (2.25133e-083) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111000011 #b1100100111110110110010011000000111000100111110001000)))
(assert (= y (fp #b0 #b10100100111 #b1000011100101011111001000011010101111100000110110010)))
(assert (= z (fp #b1 #b01000011011 #b1100110111011011111010011000100110111110100100100000)))
(assert (= r (fp #b0 #b01011101100 #b0101110111100011001110010011110001000011000110110111)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
