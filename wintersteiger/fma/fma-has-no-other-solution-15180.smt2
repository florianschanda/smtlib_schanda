(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -0.6877096697056417351490154032944701611995697021484375p-1022 {- 3097169012225415 -1023 (-1.5302e-308)}
; Y = -1.4952134759684014841951693597366102039813995361328125p720 {- 2230243225840141 720 (-8.24708e+216)}
; Z = 1.9037770606132726758374928976991213858127593994140625p113 {+ 4070250033403937 113 (1.977e+034)}
; -0.6877096697056417351490154032944701611995697021484375p-1022 x -1.4952134759684014841951693597366102039813995361328125p720 1.9037770606132726758374928976991213858127593994140625p113 == 1.9037770606132726758374928976991213858127593994140625p113
; [HW: 1.9037770606132726758374928976991213858127593994140625p113] 

; mpf : + 4070250033403937 113
; mpfd: + 4070250033403937 113 (1.977e+034) class: Pos. norm. non-zero
; hwf : + 4070250033403937 113 (1.977e+034) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1011000000001101101111011010110010000111010110000111)))
(assert (= y (fp #b1 #b11011001111 #b0111111011000110010011110111001111010010101000001101)))
(assert (= z (fp #b0 #b10001110000 #b1110011101011101111011101111011000110101100000100001)))
(assert (= r (fp #b0 #b10001110000 #b1110011101011101111011101111011000110101100000100001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
