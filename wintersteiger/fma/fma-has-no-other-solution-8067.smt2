(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9489966787076478116347288960241712629795074462890625p-521 {- 4273901088603601 -521 (-2.83912e-157)}
; Y = 1.25363922665667271161282769753597676753997802734375p588 {+ 1142289526657532 588 (1.27002e+177)}
; Z = -1.252833422040857680457293099607340991497039794921875p270 {- 1138660505290014 270 (-2.3768e+081)}
; -1.9489966787076478116347288960241712629795074462890625p-521 x 1.25363922665667271161282769753597676753997802734375p588 -1.252833422040857680457293099607340991497039794921875p270 == -1.252833422040857680457293099607340991497039794921875p270
; [HW: -1.252833422040857680457293099607340991497039794921875p270] 

; mpf : - 1138660505290014 270
; mpfd: - 1138660505290014 270 (-2.3768e+081) class: Neg. norm. non-zero
; hwf : - 1138660505290014 270 (-2.3768e+081) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110110 #b1111001011110001011100100100001100001111110111010001)))
(assert (= y (fp #b0 #b11001001011 #b0100000011101110100000000001011101111001000111111100)))
(assert (= z (fp #b1 #b10100001101 #b0100000010111001101100001110111100000000010100011110)))
(assert (= r (fp #b1 #b10100001101 #b0100000010111001101100001110111100000000010100011110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
