(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5802549889901305046890911398804746568202972412109375p721 {- 2613236152195823 721 (-1.74323e+217)}
; Y = -1.9489501909609343588414276382536627352237701416015625p-195 {- 4273691726404825 -195 (-3.88107e-059)}
; Z = -1.2370908250209777801131849628291092813014984130859375p834 {- 1067762151217439 834 (-1.41716e+251)}
; -1.5802549889901305046890911398804746568202972412109375p721 x -1.9489501909609343588414276382536627352237701416015625p-195 -1.2370908250209777801131849628291092813014984130859375p834 == -1.237090825020977558068580037797801196575164794921875p834
; [HW: -1.237090825020977558068580037797801196575164794921875p834] 

; mpf : - 1067762151217438 834
; mpfd: - 1067762151217438 834 (-1.41716e+251) class: Neg. norm. non-zero
; hwf : - 1067762151217438 834 (-1.41716e+251) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011010000 #b1001010010001011100101110100100100001101101011101111)))
(assert (= y (fp #b1 #b01100111100 #b1111001011101110011001100101001110110101110011011001)))
(assert (= z (fp #b1 #b11101000001 #b0011110010110001111110111111101110100101100100011111)))
(assert (= r (fp #b1 #b11101000001 #b0011110010110001111110111111101110100101100100011110)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
