(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.08890694424392631134423936600796878337860107421875p107 {- 400401280967596 107 (-1.76685e+032)}
; Y = -1.9148034654097008111506283967173658311367034912109375p863 {- 4119908545936367 863 (-1.17763e+260)}
; Z = -1.7601557300719348209128156668157316744327545166015625p-721 {- 3423437062695513 -721 (-1.5956e-217)}
; -1.08890694424392631134423936600796878337860107421875p107 x -1.9148034654097008111506283967173658311367034912109375p863 -1.7601557300719348209128156668157316744327545166015625p-721 == 1.0425213951734788597747183302999474108219146728515625p971
; [HW: 1.0425213951734788597747183302999474108219146728515625p971] 

; mpf : + 191499339458553 971
; mpfd: + 191499339458553 971 (2.08071e+292) class: Pos. norm. non-zero
; hwf : + 191499339458553 971 (2.08071e+292) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001101010 #b0001011011000010100110110000000111101010001110101100)))
(assert (= y (fp #b1 #b11101011110 #b1110101000110000100011110101011000110011101111101111)))
(assert (= z (fp #b1 #b00100101110 #b1100001010011001100100001110000010000110101001011001)))
(assert (= r (fp #b0 #b11111001010 #b0000101011100010101011101010000110100110011111111001)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
