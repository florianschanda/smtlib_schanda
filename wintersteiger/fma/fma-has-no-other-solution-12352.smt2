(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.964343941943007987305236383690498769283294677734375p-390 {+ 4343019017591526 -390 (7.78967e-118)}
; Y = -1.8932842487967442846041876691742800176143646240234375p-215 {- 4022994610016951 -215 (-3.59556e-065)}
; Z = -1.87070053934788660399135551415383815765380859375p-666 {- 3921286624558432 -666 (-6.1098e-201)}
; 1.964343941943007987305236383690498769283294677734375p-390 x -1.8932842487967442846041876691742800176143646240234375p-215 -1.87070053934788660399135551415383815765380859375p-666 == -1.8595307222500014887600627844221889972686767578125p-604
; [HW: -1.8595307222500014887600627844221889972686767578125p-604] 

; mpf : - 3870982240438600 -604
; mpfd: - 3870982240438600 -604 (-2.80083e-182) class: Neg. norm. non-zero
; hwf : - 3870982240438600 -604 (-2.80083e-182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001111001 #b1111011011011111001111101001110010111101101011100110)))
(assert (= y (fp #b1 #b01100101000 #b1110010010101110010001101100101010011101001010110111)))
(assert (= z (fp #b1 #b00101100101 #b1101111011100110001110110000010100011011110101100000)))
(assert (= r (fp #b1 #b00110100011 #b1101110000001010001101001001010111111000100101001000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
