(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6608686361127349417898813044303096830844879150390625p-295 {- 2976287743338161 -295 (-2.60907e-089)}
; Y = -1.0467802480088164163163355624419637024402618408203125p838 {- 210679507500805 838 (-1.91863e+252)}
; Z = 1.8916786253187118926888388159568421542644500732421875p949 {+ 4015763524719587 949 (9.00147e+285)}
; -1.6608686361127349417898813044303096830844879150390625p-295 x -1.0467802480088164163163355624419637024402618408203125p838 1.8916786253187118926888388159568421542644500732421875p949 == 1.8916786253187118926888388159568421542644500732421875p949
; [HW: 1.8916786253187118926888388159568421542644500732421875p949] 

; mpf : + 4015763524719587 949
; mpfd: + 4015763524719587 949 (9.00147e+285) class: Pos. norm. non-zero
; hwf : + 4015763524719587 949 (9.00147e+285) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011000 #b1010100100101110101011111101101100001110011010110001)))
(assert (= y (fp #b1 #b11101000101 #b0000101111111001110010100101001101001011111100000101)))
(assert (= z (fp #b0 #b11110110100 #b1110010001000101000011001110011001001001001111100011)))
(assert (= r (fp #b0 #b11110110100 #b1110010001000101000011001110011001001001001111100011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
