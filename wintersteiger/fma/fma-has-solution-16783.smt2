(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.964029174542929023772330765496008098125457763671875p303 {+ 4341601431245822 303 (3.20064e+091)}
; Y = -1.83886680889586617837494486593641340732574462890625p-87 {- 3777920247956900 -87 (-1.18834e-026)}
; Z = -1.5510553947035654598352039101882837712764739990234375p-307 {- 2481732870247479 -307 (-5.94865e-093)}
; 1.964029174542929023772330765496008098125457763671875p303 x -1.83886680889586617837494486593641340732574462890625p-87 -1.5510553947035654598352039101882837712764739990234375p-307 == -1.8057940303850690266784795312560163438320159912109375p217
; [HW: -1.8057940303850690266784795312560163438320159912109375p217] 

; mpf : - 3628973694979567 217
; mpfd: - 3628973694979567 217 (-3.80345e+065) class: Neg. norm. non-zero
; hwf : - 3628973694979567 217 (-3.80345e+065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101110 #b1111011011001010100111011011000100001101001111111110)))
(assert (= y (fp #b1 #b01110101000 #b1101011010111111111110011010010111101000010110100100)))
(assert (= z (fp #b1 #b01011001100 #b1000110100010001111101110110001010001001010000110111)))
(assert (= r (fp #b1 #b10011011000 #b1100111001001000100001000111111111010000110111101111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
