(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.581195855804675698408345851930789649486541748046875p493 {- 2617473439631214 493 (-4.04365e+148)}
; Y = 1.355994821472004563389646136783994734287261962890625p547 {+ 1603258145327146 547 (6.24692e+164)}
; Z = 1.467117119067609554150521944393403828144073486328125p-487 {+ 2103708483371266 -487 (3.67161e-147)}
; -1.581195855804675698408345851930789649486541748046875p493 x 1.355994821472004563389646136783994734287261962890625p547 1.467117119067609554150521944393403828144073486328125p-487 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111101100 #b1001010011001001010000000110100101000000011101101110)))
(assert (= y (fp #b0 #b11000100010 #b0101101100100010011110100000001111000100100000101010)))
(assert (= z (fp #b0 #b01000011000 #b0111011110010100111111001100110111001100000100000010)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
