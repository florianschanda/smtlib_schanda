(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0503933036096839703787964026560075581073760986328125p-62 {+ 226951263358541 -62 (2.27768e-019)}
; Y = 1.9552300480388506986884067373466677963733673095703125p-68 {+ 4301973688400869 -68 (6.62458e-021)}
; Z = -1.77736569586944970211561667383648455142974853515625p-825 {- 3500943858248260 -825 (-7.94384e-249)}
; 1.0503933036096839703787964026560075581073760986328125p-62 x 1.9552300480388506986884067373466677963733673095703125p-68 -1.77736569586944970211561667383648455142974853515625p-825 == 1.0268802747382246298712971110944636166095733642578125p-129
; [HW: 1.0268802747382246298712971110944636166095733642578125p-129] 

; mpf : + 121057995294685 -129
; mpfd: + 121057995294685 -129 (1.50886e-039) class: Pos. norm. non-zero
; hwf : + 121057995294685 -129 (1.50886e-039) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000001 #b0000110011100110100100110101011011110000111001001101)))
(assert (= y (fp #b0 #b01110111011 #b1111010010001001111101001101100001111011101111100101)))
(assert (= z (fp #b1 #b00011000110 #b1100011100000001011100000011000011001010101001000100)))
(assert (= r (fp #b0 #b01101111110 #b0000011011100001101000000010110011101000011111011101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
